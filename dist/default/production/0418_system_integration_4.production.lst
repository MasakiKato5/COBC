

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Fri Jul 21 16:55:42 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	dabs	1,0x7E,2
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  008F                     	;# 
    98  0090                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  0105                     	;# 
   117  0107                     	;# 
   118  0108                     	;# 
   119  0109                     	;# 
   120  010C                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  010F                     	;# 
   125  0185                     	;# 
   126  0187                     	;# 
   127  0188                     	;# 
   128  0189                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  0000                     	;# 
   132  0001                     	;# 
   133  0002                     	;# 
   134  0003                     	;# 
   135  0004                     	;# 
   136  0005                     	;# 
   137  0006                     	;# 
   138  0007                     	;# 
   139  0008                     	;# 
   140  0009                     	;# 
   141  000A                     	;# 
   142  000B                     	;# 
   143  000C                     	;# 
   144  000D                     	;# 
   145  000E                     	;# 
   146  000E                     	;# 
   147  000F                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0013                     	;# 
   152  0014                     	;# 
   153  0015                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0017                     	;# 
   157  0018                     	;# 
   158  0019                     	;# 
   159  001A                     	;# 
   160  001B                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001D                     	;# 
   164  001E                     	;# 
   165  001F                     	;# 
   166  0081                     	;# 
   167  0085                     	;# 
   168  0086                     	;# 
   169  0087                     	;# 
   170  0088                     	;# 
   171  0089                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  008F                     	;# 
   176  0090                     	;# 
   177  0091                     	;# 
   178  0092                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0094                     	;# 
   183  0095                     	;# 
   184  0096                     	;# 
   185  0097                     	;# 
   186  0098                     	;# 
   187  0099                     	;# 
   188  009A                     	;# 
   189  009B                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  009F                     	;# 
   194  0105                     	;# 
   195  0107                     	;# 
   196  0108                     	;# 
   197  0109                     	;# 
   198  010C                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  010F                     	;# 
   203  0185                     	;# 
   204  0187                     	;# 
   205  0188                     	;# 
   206  0189                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  0000                     	;# 
   210  0001                     	;# 
   211  0002                     	;# 
   212  0003                     	;# 
   213  0004                     	;# 
   214  0005                     	;# 
   215  0006                     	;# 
   216  0007                     	;# 
   217  0008                     	;# 
   218  0009                     	;# 
   219  000A                     	;# 
   220  000B                     	;# 
   221  000C                     	;# 
   222  000D                     	;# 
   223  000E                     	;# 
   224  000E                     	;# 
   225  000F                     	;# 
   226  0010                     	;# 
   227  0011                     	;# 
   228  0012                     	;# 
   229  0013                     	;# 
   230  0014                     	;# 
   231  0015                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0017                     	;# 
   235  0018                     	;# 
   236  0019                     	;# 
   237  001A                     	;# 
   238  001B                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  001D                     	;# 
   242  001E                     	;# 
   243  001F                     	;# 
   244  0081                     	;# 
   245  0085                     	;# 
   246  0086                     	;# 
   247  0087                     	;# 
   248  0088                     	;# 
   249  0089                     	;# 
   250  008C                     	;# 
   251  008D                     	;# 
   252  008E                     	;# 
   253  008F                     	;# 
   254  0090                     	;# 
   255  0091                     	;# 
   256  0092                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0093                     	;# 
   260  0094                     	;# 
   261  0095                     	;# 
   262  0096                     	;# 
   263  0097                     	;# 
   264  0098                     	;# 
   265  0099                     	;# 
   266  009A                     	;# 
   267  009B                     	;# 
   268  009C                     	;# 
   269  009D                     	;# 
   270  009E                     	;# 
   271  009F                     	;# 
   272  0105                     	;# 
   273  0107                     	;# 
   274  0108                     	;# 
   275  0109                     	;# 
   276  010C                     	;# 
   277  010C                     	;# 
   278  010D                     	;# 
   279  010E                     	;# 
   280  010F                     	;# 
   281  0185                     	;# 
   282  0187                     	;# 
   283  0188                     	;# 
   284  0189                     	;# 
   285  018C                     	;# 
   286  018D                     	;# 
   287  0000                     	;# 
   288  0001                     	;# 
   289  0002                     	;# 
   290  0003                     	;# 
   291  0004                     	;# 
   292  0005                     	;# 
   293  0006                     	;# 
   294  0007                     	;# 
   295  0008                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000D                     	;# 
   301  000E                     	;# 
   302  000E                     	;# 
   303  000F                     	;# 
   304  0010                     	;# 
   305  0011                     	;# 
   306  0012                     	;# 
   307  0013                     	;# 
   308  0014                     	;# 
   309  0015                     	;# 
   310  0015                     	;# 
   311  0016                     	;# 
   312  0017                     	;# 
   313  0018                     	;# 
   314  0019                     	;# 
   315  001A                     	;# 
   316  001B                     	;# 
   317  001B                     	;# 
   318  001C                     	;# 
   319  001D                     	;# 
   320  001E                     	;# 
   321  001F                     	;# 
   322  0081                     	;# 
   323  0085                     	;# 
   324  0086                     	;# 
   325  0087                     	;# 
   326  0088                     	;# 
   327  0089                     	;# 
   328  008C                     	;# 
   329  008D                     	;# 
   330  008E                     	;# 
   331  008F                     	;# 
   332  0090                     	;# 
   333  0091                     	;# 
   334  0092                     	;# 
   335  0093                     	;# 
   336  0093                     	;# 
   337  0093                     	;# 
   338  0094                     	;# 
   339  0095                     	;# 
   340  0096                     	;# 
   341  0097                     	;# 
   342  0098                     	;# 
   343  0099                     	;# 
   344  009A                     	;# 
   345  009B                     	;# 
   346  009C                     	;# 
   347  009D                     	;# 
   348  009E                     	;# 
   349  009F                     	;# 
   350  0105                     	;# 
   351  0107                     	;# 
   352  0108                     	;# 
   353  0109                     	;# 
   354  010C                     	;# 
   355  010C                     	;# 
   356  010D                     	;# 
   357  010E                     	;# 
   358  010F                     	;# 
   359  0185                     	;# 
   360  0187                     	;# 
   361  0188                     	;# 
   362  0189                     	;# 
   363  018C                     	;# 
   364  018D                     	;# 
   365  0000                     	;# 
   366  0001                     	;# 
   367  0002                     	;# 
   368  0003                     	;# 
   369  0004                     	;# 
   370  0005                     	;# 
   371  0006                     	;# 
   372  0007                     	;# 
   373  0008                     	;# 
   374  0009                     	;# 
   375  000A                     	;# 
   376  000B                     	;# 
   377  000C                     	;# 
   378  000D                     	;# 
   379  000E                     	;# 
   380  000E                     	;# 
   381  000F                     	;# 
   382  0010                     	;# 
   383  0011                     	;# 
   384  0012                     	;# 
   385  0013                     	;# 
   386  0014                     	;# 
   387  0015                     	;# 
   388  0015                     	;# 
   389  0016                     	;# 
   390  0017                     	;# 
   391  0018                     	;# 
   392  0019                     	;# 
   393  001A                     	;# 
   394  001B                     	;# 
   395  001B                     	;# 
   396  001C                     	;# 
   397  001D                     	;# 
   398  001E                     	;# 
   399  001F                     	;# 
   400  0081                     	;# 
   401  0085                     	;# 
   402  0086                     	;# 
   403  0087                     	;# 
   404  0088                     	;# 
   405  0089                     	;# 
   406  008C                     	;# 
   407  008D                     	;# 
   408  008E                     	;# 
   409  008F                     	;# 
   410  0090                     	;# 
   411  0091                     	;# 
   412  0092                     	;# 
   413  0093                     	;# 
   414  0093                     	;# 
   415  0093                     	;# 
   416  0094                     	;# 
   417  0095                     	;# 
   418  0096                     	;# 
   419  0097                     	;# 
   420  0098                     	;# 
   421  0099                     	;# 
   422  009A                     	;# 
   423  009B                     	;# 
   424  009C                     	;# 
   425  009D                     	;# 
   426  009E                     	;# 
   427  009F                     	;# 
   428  0105                     	;# 
   429  0107                     	;# 
   430  0108                     	;# 
   431  0109                     	;# 
   432  010C                     	;# 
   433  010C                     	;# 
   434  010D                     	;# 
   435  010E                     	;# 
   436  010F                     	;# 
   437  0185                     	;# 
   438  0187                     	;# 
   439  0188                     	;# 
   440  0189                     	;# 
   441  018C                     	;# 
   442  018D                     	;# 
   443  0000                     	;# 
   444  0001                     	;# 
   445  0002                     	;# 
   446  0003                     	;# 
   447  0004                     	;# 
   448  0005                     	;# 
   449  0006                     	;# 
   450  0007                     	;# 
   451  0008                     	;# 
   452  0009                     	;# 
   453  000A                     	;# 
   454  000B                     	;# 
   455  000C                     	;# 
   456  000D                     	;# 
   457  000E                     	;# 
   458  000E                     	;# 
   459  000F                     	;# 
   460  0010                     	;# 
   461  0011                     	;# 
   462  0012                     	;# 
   463  0013                     	;# 
   464  0014                     	;# 
   465  0015                     	;# 
   466  0015                     	;# 
   467  0016                     	;# 
   468  0017                     	;# 
   469  0018                     	;# 
   470  0019                     	;# 
   471  001A                     	;# 
   472  001B                     	;# 
   473  001B                     	;# 
   474  001C                     	;# 
   475  001D                     	;# 
   476  001E                     	;# 
   477  001F                     	;# 
   478  0081                     	;# 
   479  0085                     	;# 
   480  0086                     	;# 
   481  0087                     	;# 
   482  0088                     	;# 
   483  0089                     	;# 
   484  008C                     	;# 
   485  008D                     	;# 
   486  008E                     	;# 
   487  008F                     	;# 
   488  0090                     	;# 
   489  0091                     	;# 
   490  0092                     	;# 
   491  0093                     	;# 
   492  0093                     	;# 
   493  0093                     	;# 
   494  0094                     	;# 
   495  0095                     	;# 
   496  0096                     	;# 
   497  0097                     	;# 
   498  0098                     	;# 
   499  0099                     	;# 
   500  009A                     	;# 
   501  009B                     	;# 
   502  009C                     	;# 
   503  009D                     	;# 
   504  009E                     	;# 
   505  009F                     	;# 
   506  0105                     	;# 
   507  0107                     	;# 
   508  0108                     	;# 
   509  0109                     	;# 
   510  010C                     	;# 
   511  010C                     	;# 
   512  010D                     	;# 
   513  010E                     	;# 
   514  010F                     	;# 
   515  0185                     	;# 
   516  0187                     	;# 
   517  0188                     	;# 
   518  0189                     	;# 
   519  018C                     	;# 
   520  018D                     	;# 
   521  0000                     	;# 
   522  0001                     	;# 
   523  0002                     	;# 
   524  0003                     	;# 
   525  0004                     	;# 
   526  0005                     	;# 
   527  0006                     	;# 
   528  0007                     	;# 
   529  0008                     	;# 
   530  0009                     	;# 
   531  000A                     	;# 
   532  000B                     	;# 
   533  000C                     	;# 
   534  000D                     	;# 
   535  000E                     	;# 
   536  000E                     	;# 
   537  000F                     	;# 
   538  0010                     	;# 
   539  0011                     	;# 
   540  0012                     	;# 
   541  0013                     	;# 
   542  0014                     	;# 
   543  0015                     	;# 
   544  0015                     	;# 
   545  0016                     	;# 
   546  0017                     	;# 
   547  0018                     	;# 
   548  0019                     	;# 
   549  001A                     	;# 
   550  001B                     	;# 
   551  001B                     	;# 
   552  001C                     	;# 
   553  001D                     	;# 
   554  001E                     	;# 
   555  001F                     	;# 
   556  0081                     	;# 
   557  0085                     	;# 
   558  0086                     	;# 
   559  0087                     	;# 
   560  0088                     	;# 
   561  0089                     	;# 
   562  008C                     	;# 
   563  008D                     	;# 
   564  008E                     	;# 
   565  008F                     	;# 
   566  0090                     	;# 
   567  0091                     	;# 
   568  0092                     	;# 
   569  0093                     	;# 
   570  0093                     	;# 
   571  0093                     	;# 
   572  0094                     	;# 
   573  0095                     	;# 
   574  0096                     	;# 
   575  0097                     	;# 
   576  0098                     	;# 
   577  0099                     	;# 
   578  009A                     	;# 
   579  009B                     	;# 
   580  009C                     	;# 
   581  009D                     	;# 
   582  009E                     	;# 
   583  009F                     	;# 
   584  0105                     	;# 
   585  0107                     	;# 
   586  0108                     	;# 
   587  0109                     	;# 
   588  010C                     	;# 
   589  010C                     	;# 
   590  010D                     	;# 
   591  010E                     	;# 
   592  010F                     	;# 
   593  0185                     	;# 
   594  0187                     	;# 
   595  0188                     	;# 
   596  0189                     	;# 
   597  018C                     	;# 
   598  018D                     	;# 
   599  0000                     	;# 
   600  0001                     	;# 
   601  0002                     	;# 
   602  0003                     	;# 
   603  0004                     	;# 
   604  0005                     	;# 
   605  0006                     	;# 
   606  0007                     	;# 
   607  0008                     	;# 
   608  0009                     	;# 
   609  000A                     	;# 
   610  000B                     	;# 
   611  000C                     	;# 
   612  000D                     	;# 
   613  000E                     	;# 
   614  000E                     	;# 
   615  000F                     	;# 
   616  0010                     	;# 
   617  0011                     	;# 
   618  0012                     	;# 
   619  0013                     	;# 
   620  0014                     	;# 
   621  0015                     	;# 
   622  0015                     	;# 
   623  0016                     	;# 
   624  0017                     	;# 
   625  0018                     	;# 
   626  0019                     	;# 
   627  001A                     	;# 
   628  001B                     	;# 
   629  001B                     	;# 
   630  001C                     	;# 
   631  001D                     	;# 
   632  001E                     	;# 
   633  001F                     	;# 
   634  0081                     	;# 
   635  0085                     	;# 
   636  0086                     	;# 
   637  0087                     	;# 
   638  0088                     	;# 
   639  0089                     	;# 
   640  008C                     	;# 
   641  008D                     	;# 
   642  008E                     	;# 
   643  008F                     	;# 
   644  0090                     	;# 
   645  0091                     	;# 
   646  0092                     	;# 
   647  0093                     	;# 
   648  0093                     	;# 
   649  0093                     	;# 
   650  0094                     	;# 
   651  0095                     	;# 
   652  0096                     	;# 
   653  0097                     	;# 
   654  0098                     	;# 
   655  0099                     	;# 
   656  009A                     	;# 
   657  009B                     	;# 
   658  009C                     	;# 
   659  009D                     	;# 
   660  009E                     	;# 
   661  009F                     	;# 
   662  0105                     	;# 
   663  0107                     	;# 
   664  0108                     	;# 
   665  0109                     	;# 
   666  010C                     	;# 
   667  010C                     	;# 
   668  010D                     	;# 
   669  010E                     	;# 
   670  010F                     	;# 
   671  0185                     	;# 
   672  0187                     	;# 
   673  0188                     	;# 
   674  0189                     	;# 
   675  018C                     	;# 
   676  018D                     	;# 
   677  0000                     	;# 
   678  0001                     	;# 
   679  0002                     	;# 
   680  0003                     	;# 
   681  0004                     	;# 
   682  0005                     	;# 
   683  0006                     	;# 
   684  0007                     	;# 
   685  0008                     	;# 
   686  0009                     	;# 
   687  000A                     	;# 
   688  000B                     	;# 
   689  000C                     	;# 
   690  000D                     	;# 
   691  000E                     	;# 
   692  000E                     	;# 
   693  000F                     	;# 
   694  0010                     	;# 
   695  0011                     	;# 
   696  0012                     	;# 
   697  0013                     	;# 
   698  0014                     	;# 
   699  0015                     	;# 
   700  0015                     	;# 
   701  0016                     	;# 
   702  0017                     	;# 
   703  0018                     	;# 
   704  0019                     	;# 
   705  001A                     	;# 
   706  001B                     	;# 
   707  001B                     	;# 
   708  001C                     	;# 
   709  001D                     	;# 
   710  001E                     	;# 
   711  001F                     	;# 
   712  0081                     	;# 
   713  0085                     	;# 
   714  0086                     	;# 
   715  0087                     	;# 
   716  0088                     	;# 
   717  0089                     	;# 
   718  008C                     	;# 
   719  008D                     	;# 
   720  008E                     	;# 
   721  008F                     	;# 
   722  0090                     	;# 
   723  0091                     	;# 
   724  0092                     	;# 
   725  0093                     	;# 
   726  0093                     	;# 
   727  0093                     	;# 
   728  0094                     	;# 
   729  0095                     	;# 
   730  0096                     	;# 
   731  0097                     	;# 
   732  0098                     	;# 
   733  0099                     	;# 
   734  009A                     	;# 
   735  009B                     	;# 
   736  009C                     	;# 
   737  009D                     	;# 
   738  009E                     	;# 
   739  009F                     	;# 
   740  0105                     	;# 
   741  0107                     	;# 
   742  0108                     	;# 
   743  0109                     	;# 
   744  010C                     	;# 
   745  010C                     	;# 
   746  010D                     	;# 
   747  010E                     	;# 
   748  010F                     	;# 
   749  0185                     	;# 
   750  0187                     	;# 
   751  0188                     	;# 
   752  0189                     	;# 
   753  018C                     	;# 
   754  018D                     	;# 
   755                           
   756                           	psect	idataBANK1
   757  0003                     __pidataBANK1:	
   758                           
   759                           ;initializer for main@F2004
   760  0003  3445               	retlw	69
   761  0004  3441               	retlw	65
   762  0005  3400               	retlw	0
   763                           
   764                           ;initializer for _CWTX_Nref
   765  0006  34A0               	retlw	160
   766  0007  3400               	retlw	0
   767                           
   768                           ;initializer for _FMRX_Nref
   769  0008  3400               	retlw	0
   770  0009  340A               	retlw	10
   771                           
   772                           ;initializer for _FMTX_Nref
   773  000A  3400               	retlw	0
   774  000B  340A               	retlw	10
   775                           
   776                           ;initializer for _CWTX_Nprg
   777  000C  3400               	retlw	0
   778  000D  3400               	retlw	0
   779  000E  3401               	retlw	1
   780  000F  3400               	retlw	0
   781  0010  3407               	retlw	7
   782  0011  3400               	retlw	0
   783  0012  3404               	retlw	4
   784  0013  3400               	retlw	0
   785  0014  3407               	retlw	7
   786  0015  3400               	retlw	0
   787                           
   788                           ;initializer for _FMTX_Nprg
   789  0016  3408               	retlw	8
   790  0017  3400               	retlw	0
   791  0018  3407               	retlw	7
   792  0019  3400               	retlw	0
   793  001A  3403               	retlw	3
   794  001B  3400               	retlw	0
   795  001C  3400               	retlw	0
   796  001D  3400               	retlw	0
   797  001E  3400               	retlw	0
   798  001F  3400               	retlw	0
   799                           
   800                           	psect	idataBANK2
   801  0866                     __pidataBANK2:	
   802                           
   803                           ;initializer for _eDataField
   804  0866  3448               	retlw	72
   805  0867  3465               	retlw	101
   806  0868  346C               	retlw	108
   807  0869  346C               	retlw	108
   808  086A  346F               	retlw	111
   809  086B  3421               	retlw	33
   810  086C  3420               	retlw	32
   811  086D  3449               	retlw	73
   812  086E  3427               	retlw	39
   813  086F  346D               	retlw	109
   814  0870  3420               	retlw	32
   815  0871  344F               	retlw	79
   816  0872  3472               	retlw	114
   817  0873  3469               	retlw	105
   818  0874  3467               	retlw	103
   819  0875  3461               	retlw	97
   820  0876  346D               	retlw	109
   821  0877  3469               	retlw	105
   822  0878  3453               	retlw	83
   823  0879  3461               	retlw	97
   824  087A  3474               	retlw	116
   825  087B  3431               	retlw	49
   826  087C  3421               	retlw	33
   827  087D  3421               	retlw	33
   828  087E  3400               	retlw	0
   829                           
   830                           	psect	idataBANK3
   831  08BF                     __pidataBANK3:	
   832                           
   833                           ;initializer for main@F2008
   834  08BF  3408               	retlw	8
   835  08C0  3400               	retlw	0
   836  08C1  3407               	retlw	7
   837  08C2  3400               	retlw	0
   838  08C3  3403               	retlw	3
   839  08C4  3400               	retlw	0
   840  08C5  3400               	retlw	0
   841  08C6  3400               	retlw	0
   842  08C7  3400               	retlw	0
   843  08C8  3400               	retlw	0
   844                           
   845                           ;initializer for main@F2010
   846  08C9  3400               	retlw	0
   847  08CA  3400               	retlw	0
   848  08CB  3401               	retlw	1
   849  08CC  3400               	retlw	0
   850  08CD  3407               	retlw	7
   851  08CE  3400               	retlw	0
   852  08CF  3404               	retlw	4
   853  08D0  3400               	retlw	0
   854  08D1  3407               	retlw	7
   855  08D2  3400               	retlw	0
   856                           
   857                           ;initializer for main@F2012
   858  08D3  3402               	retlw	2
   859  08D4  3400               	retlw	0
   860  08D5  3404               	retlw	4
   861  08D6  3400               	retlw	0
   862  08D7  3408               	retlw	8
   863  08D8  3400               	retlw	0
   864  08D9  3408               	retlw	8
   865  08DA  3400               	retlw	0
   866  08DB  3407               	retlw	7
   867  08DC  3400               	retlw	0
   868                           
   869                           ;initializer for _FMRX_Nprg
   870  08DD  3402               	retlw	2
   871  08DE  3400               	retlw	0
   872  08DF  3404               	retlw	4
   873  08E0  3400               	retlw	0
   874  08E1  3408               	retlw	8
   875  08E2  3400               	retlw	0
   876  08E3  3408               	retlw	8
   877  08E4  3400               	retlw	0
   878  08E5  3407               	retlw	7
   879  08E6  3400               	retlw	0
   880  0005                     _PORTA	set	5
   881  0006                     _PORTB	set	6
   882  0007                     _PORTC	set	7
   883  0007                     _PORTCbits	set	7
   884  0008                     _PORTD	set	8
   885  0008                     _PORTDbits	set	8
   886  0009                     _PORTE	set	9
   887  001A                     _RCREG	set	26
   888  0013                     _SSPBUF	set	19
   889  0014                     _SSPCON	set	20
   890  0003                     _STATUS	set	3
   891  0019                     _TXREG	set	25
   892  00C4                     _CREN	set	196
   893  0030                     _RB0	set	48
   894  0031                     _RB1	set	49
   895  0032                     _RB2	set	50
   896  0065                     _RCIF	set	101
   897  0048                     _RE0	set	72
   898  0049                     _RE1	set	73
   899  00C6                     _RX9	set	198
   900  00C7                     _SPEN	set	199
   901  00C5                     _SREN	set	197
   902  0064                     _TXIF	set	100
   903  0099                     _SPBRG	set	153
   904  0093                     _SSPADD	set	147
   905  0091                     _SSPCON2	set	145
   906  0094                     _SSPSTAT	set	148
   907  0085                     _TRISA	set	133
   908  0086                     _TRISB	set	134
   909  0087                     _TRISC	set	135
   910  0088                     _TRISD	set	136
   911  0089                     _TRISE	set	137
   912  048D                     _ACKDT	set	1165
   913  048C                     _ACKEN	set	1164
   914  04C2                     _BRGH	set	1218
   915  048A                     _PEN	set	1162
   916  048B                     _RCEN	set	1163
   917  0465                     _RCIE	set	1125
   918  0489                     _RSEN	set	1161
   919  0488                     _SEN	set	1160
   920  04C4                     _SYNC	set	1220
   921  04C6                     _TX9	set	1222
   922  04C5                     _TXEN	set	1221
   923  0464                     _TXIE	set	1124
   924  0188                     _ANSEL	set	392
   925  0189                     _ANSELH	set	393
   926                           
   927                           	psect	strings
   928  0800                     __pstrings:	
   929  0800                     stringtab:	
   930  0800                     __stringtab:	
   931                           
   932                           ;	String table - string pointers are 1 byte each
   933  0800  1BFF               	btfsc	btemp+1,7
   934  0801  280A               	ljmp	stringcode
   935  0802  1383               	bcf	3,7
   936  0803  187F               	btfsc	btemp+1,0
   937  0804  1783               	bsf	3,7
   938  0805  0800               	movf	0,w
   939  0806  0A84               	incf	4,f
   940  0807  1903               	skipnz
   941  0808  0AFF               	incf	btemp+1,f
   942  0809  0008               	return
   943  080A                     stringcode:	
   944  080A                     stringdir:	
   945  080A  3008               	movlw	high stringdir
   946  080B  008A               	movwf	10
   947  080C  0804               	movf	4,w
   948  080D  0A84               	incf	4,f
   949  080E  0782               	addwf	2,f
   950  080F                     __stringbase:	
   951  080F  3400               	retlw	0
   952  0810                     __end_of__stringtab:	
   953  0810                     STR_16:	
   954  0810  3428               	retlw	40	;'('
   955  0811  346E               	retlw	110	;'n'
   956  0812  3475               	retlw	117	;'u'
   957  0813  346C               	retlw	108	;'l'
   958  0814  346C               	retlw	108	;'l'
   959  0815  3429               	retlw	41	;')'
   960  0816  3400               	retlw	0
   961  0817                     STR_7:	
   962  0817  344A               	retlw	74	;'J'
   963  0818  3451               	retlw	81	;'Q'
   964  0819  3431               	retlw	49	;'1'
   965  081A  345A               	retlw	90	;'Z'
   966  081B  3448               	retlw	72	;'H'
   967  081C  3458               	retlw	88	;'X'
   968  081D  3400               	retlw	0
   969  081E                     STR_1:	
   970  081E  344A               	retlw	74	;'J'
   971  081F  3451               	retlw	81	;'Q'
   972  0820  3431               	retlw	49	;'1'
   973  0821  3459               	retlw	89	;'Y'
   974  0822  3443               	retlw	67	;'C'
   975  0823  345A               	retlw	90	;'Z'
   976  0824  3400               	retlw	0
   977  0825                     STR_15:	
   978  0825  3425               	retlw	37	;'%'
   979  0826  3473               	retlw	115	;'s'
   980  0827  3425               	retlw	37	;'%'
   981  0828  3463               	retlw	99	;'c'
   982  0829  3400               	retlw	0
   983  0817                     
   984                           ; #config settings
   985  0000                     
   986                           	psect	cinit
   987  07B3                     start_initialization:	
   988  07B3                     __initialization:	
   989                           
   990                           ; Initialize objects allocated to BANK3
   991  07B3  1783               	bsf	3,7	;select IRP bank2
   992  07B4  30EA               	movlw	low (__pdataBANK3+40)
   993  07B5  00FD               	movwf	btemp+-1
   994  07B6  3008               	movlw	high __pidataBANK3
   995  07B7  00FE               	movwf	btemp
   996  07B8  30BF               	movlw	low __pidataBANK3
   997  07B9  00FF               	movwf	btemp+1
   998  07BA  30C2               	movlw	low __pdataBANK3
   999  07BB  0084               	movwf	4
  1000  07BC  160A  118A  27E1  120A  118A  	fcall	init_ram0
  1001                           
  1002                           ; Initialize objects allocated to BANK2
  1003  07C1  3069               	movlw	low (__pdataBANK2+25)
  1004  07C2  00FD               	movwf	btemp+-1
  1005  07C3  3008               	movlw	high __pidataBANK2
  1006  07C4  00FE               	movwf	btemp
  1007  07C5  3066               	movlw	low __pidataBANK2
  1008  07C6  00FF               	movwf	btemp+1
  1009  07C7  3050               	movlw	low __pdataBANK2
  1010  07C8  0084               	movwf	4
  1011  07C9  160A  118A  27E1  120A  118A  	fcall	init_ram0
  1012                           
  1013                           ; Initialize objects allocated to BANK1
  1014  07CE  1383               	bcf	3,7	;select IRP bank0
  1015  07CF  30E1               	movlw	low (__pdataBANK1+29)
  1016  07D0  00FD               	movwf	btemp+-1
  1017  07D1  3000               	movlw	high __pidataBANK1
  1018  07D2  00FE               	movwf	btemp
  1019  07D3  3003               	movlw	low __pidataBANK1
  1020  07D4  00FF               	movwf	btemp+1
  1021  07D5  30C4               	movlw	low __pdataBANK1
  1022  07D6  0084               	movwf	4
  1023  07D7  160A  118A  27E1  120A  118A  	fcall	init_ram0
  1024                           
  1025                           ; Clear objects allocated to BANK3
  1026  07DC  1783               	bsf	3,7	;select IRP bank2
  1027  07DD  3090               	movlw	low __pbssBANK3
  1028  07DE  0084               	movwf	4
  1029  07DF  30C2               	movlw	low (__pbssBANK3+50)
  1030  07E0  160A  118A  27D5  120A  118A  	fcall	clear_ram0
  1031                           
  1032                           ; Clear objects allocated to BANK2
  1033  07E5  3010               	movlw	low __pbssBANK2
  1034  07E6  0084               	movwf	4
  1035  07E7  3050               	movlw	low (__pbssBANK2+64)
  1036  07E8  160A  118A  27D5  120A  118A  	fcall	clear_ram0
  1037                           
  1038                           ; Clear objects allocated to BANK1
  1039  07ED  1383               	bcf	3,7	;select IRP bank0
  1040  07EE  30E1               	movlw	low __pbssBANK1
  1041  07EF  0084               	movwf	4
  1042  07F0  30EE               	movlw	low (__pbssBANK1+13)
  1043  07F1  160A  118A  27D5  120A  118A  	fcall	clear_ram0
  1044                           
  1045                           ; Clear objects allocated to BANK0
  1046  07F6  3066               	movlw	low __pbssBANK0
  1047  07F7  0084               	movwf	4
  1048  07F8  3070               	movlw	low (__pbssBANK0+10)
  1049  07F9  160A  118A  27D5   	fcall	clear_ram0
  1050  07FC                     end_of_initialization:	
  1051                           ;End of C runtime variable initialization code
  1052                           
  1053  07FC                     __end_of__initialization:	
  1054  07FC  0183               	clrf	3
  1055  07FD  120A  158A  2E6C   	ljmp	_main	;jump to C main() function
  1056                           
  1057                           	psect	bssBANK0
  1058  0066                     __pbssBANK0:	
  1059  0066                     _dPacketnum:	
  1060  0066                     	ds	2
  1061  0068                     _eflag:	
  1062  0068                     	ds	2
  1063  006A                     _rcv_state:	
  1064  006A                     	ds	2
  1065  006C                     _dfcshi:	
  1066  006C                     	ds	1
  1067  006D                     _dfcslo:	
  1068  006D                     	ds	1
  1069  006E                     _efcshi:	
  1070  006E                     	ds	1
  1071  006F                     _efcslo:	
  1072  006F                     	ds	1
  1073                           
  1074                           	psect	bssBANK1
  1075  00E1                     __pbssBANK1:	
  1076  00E1                     _ePacket:	
  1077  00E1                     	ds	5
  1078  00E6                     _ebitstatus:	
  1079  00E6                     	ds	2
  1080  00E8                     _efcsflag:	
  1081  00E8                     	ds	2
  1082  00EA                     _estuff:	
  1083  00EA                     	ds	2
  1084  00EC                     getbit@oldbit:	
  1085  00EC                     	ds	2
  1086                           
  1087                           	psect	dataBANK1
  1088  00C4                     __pdataBANK1:	
  1089  00C4                     main@F2004:	
  1090  00C4                     	ds	3
  1091  00C7                     _CWTX_Nref:	
  1092  00C7                     	ds	2
  1093  00C9                     _FMRX_Nref:	
  1094  00C9                     	ds	2
  1095  00CB                     _FMTX_Nref:	
  1096  00CB                     	ds	2
  1097  00CD                     _CWTX_Nprg:	
  1098  00CD                     	ds	10
  1099  00D7                     _FMTX_Nprg:	
  1100  00D7                     	ds	10
  1101                           
  1102                           	psect	bssBANK3
  1103  0190                     __pbssBANK3:	
  1104  0190                     _dPacket:	
  1105  0190                     	ds	50
  1106                           
  1107                           	psect	dataBANK3
  1108  01C2                     __pdataBANK3:	
  1109  01C2                     main@F2008:	
  1110  01C2                     	ds	10
  1111  01CC                     main@F2010:	
  1112  01CC                     	ds	10
  1113  01D6                     main@F2012:	
  1114  01D6                     	ds	10
  1115  01E0                     _FMRX_Nprg:	
  1116  01E0                     	ds	10
  1117                           
  1118                           	psect	bssBANK2
  1119  0110                     __pbssBANK2:	
  1120  0110                     _EEPROMData:	
  1121  0110                     	ds	32
  1122  0130                     _dData:	
  1123  0130                     	ds	32
  1124                           
  1125                           	psect	dataBANK2
  1126  0150                     __pdataBANK2:	
  1127  0150                     _eDataField:	
  1128  0150                     	ds	25
  1129                           
  1130                           	psect	inittext
  1131  17DD                     init_fetch0:	
  1132                           ;	Called with low address in FSR and high address in W
  1133                           
  1134  17DD  087E               	movf	126,w
  1135  17DE  008A               	movwf	10
  1136  17DF  087F               	movf	127,w
  1137  17E0  0082               	movwf	2
  1138  17E1                     init_ram0:	
  1139                           ;Called with:
  1140                           ;	high address of idata address in btemp 
  1141                           ;	low address of idata address in btemp+1 
  1142                           ;	low address of data in FSR
  1143                           ;	high address + 1 of data in btemp-1
  1144                           
  1145  17E1  27DD  160A  118A   	fcall	init_fetch0
  1146  17E4  0080               	movwf	0
  1147  17E5  0A84               	incf	4,f
  1148  17E6  0804               	movf	4,w
  1149  17E7  067D               	xorwf	125,w
  1150  17E8  1903               	btfsc	3,2
  1151  17E9  3400               	retlw	0
  1152  17EA  0AFF               	incf	127,f
  1153  17EB  1903               	btfsc	3,2
  1154  17EC  0AFE               	incf	126,f
  1155  17ED  2FE1               	goto	init_ram0
  1156                           
  1157                           	psect	clrtext
  1158  17D5                     clear_ram0:	
  1159                           ;	Called with FSR containing the base address, and
  1160                           ;	W with the last address+1
  1161                           
  1162  17D5  0064               	clrwdt	;clear the watchdog before getting into this loop
  1163  17D6                     clrloop0:	
  1164  17D6  0180               	clrf	0	;clear RAM location pointed to by FSR
  1165  17D7  0A84               	incf	4,f	;increment pointer
  1166  17D8  0604               	xorwf	4,w	;XOR with final address
  1167  17D9  1903               	btfsc	3,2	;have we reached the end yet?
  1168  17DA  3400               	retlw	0	;all done for this memory range, return
  1169  17DB  0604               	xorwf	4,w	;XOR again to restore value
  1170  17DC  2FD6               	goto	clrloop0	;do the next byte
  1171                           
  1172                           	psect	cstackBANK1
  1173  00A0                     __pcstackBANK1:	
  1174  00A0                     main@EPS_kill:	
  1175  00A0                     main@EPS_kill_1:	
  1176                           ; 0 bytes @ 0x0
  1177                           
  1178                           
  1179                           ; 3 bytes @ 0x0
  1180  00A0                     	ds	3
  1181  00A3                     main@FMTX_Nprg:	
  1182                           
  1183                           ; 10 bytes @ 0x3
  1184  00A3                     	ds	10
  1185  00AD                     main@CWTX_Nprg:	
  1186                           
  1187                           ; 10 bytes @ 0xD
  1188  00AD                     	ds	10
  1189  00B7                     main@FMRX_Nprg:	
  1190                           
  1191                           ; 10 bytes @ 0x17
  1192  00B7                     	ds	10
  1193  00C1                     main@NM_wad_header:	
  1194                           
  1195                           ; 1 bytes @ 0x21
  1196  00C1                     	ds	1
  1197  00C2                     main@EPS_kill_2:	
  1198                           
  1199                           ; 1 bytes @ 0x22
  1200  00C2                     	ds	1
  1201  00C3                     main@dData:	
  1202                           
  1203                           ; 1 bytes @ 0x23
  1204  00C3                     	ds	1
  1205                           
  1206                           	psect	cstackCOMMON
  1207  0070                     __pcstackCOMMON:	
  1208  0070                     ?_Reset_EPS:	
  1209  0070                     ??_Reset_EPS:	
  1210                           ; 1 bytes @ 0x0
  1211                           
  1212  0070                     ?__NOP:	
  1213                           ; 1 bytes @ 0x0
  1214                           
  1215  0070                     ??__NOP:	
  1216                           ; 1 bytes @ 0x0
  1217                           
  1218  0070                     ?_Init_SERIAL:	
  1219                           ; 1 bytes @ 0x0
  1220                           
  1221  0070                     ??_Init_SERIAL:	
  1222                           ; 1 bytes @ 0x0
  1223                           
  1224  0070                     ?_putch:	
  1225                           ; 1 bytes @ 0x0
  1226                           
  1227  0070                     ??_putch:	
  1228                           ; 1 bytes @ 0x0
  1229                           
  1230  0070                     ?_Init_MPU:	
  1231                           ; 1 bytes @ 0x0
  1232                           
  1233  0070                     ??_Init_MPU:	
  1234                           ; 1 bytes @ 0x0
  1235                           
  1236  0070                     ?_waitFlag:	
  1237                           ; 1 bytes @ 0x0
  1238                           
  1239  0070                     ?_getdata:	
  1240                           ; 1 bytes @ 0x0
  1241                           
  1242  0070                     ?_ReceivePacket_data:	
  1243                           ; 1 bytes @ 0x0
  1244                           
  1245  0070                     ?_main:	
  1246                           ; 1 bytes @ 0x0
  1247                           
  1248  0070                     ?_I2C_Master_Wait:	
  1249                           ; 1 bytes @ 0x0
  1250                           
  1251  0070                     ??_I2C_Master_Wait:	
  1252                           ; 1 bytes @ 0x0
  1253                           
  1254  0070                     ?_I2C_Master_Start:	
  1255                           ; 1 bytes @ 0x0
  1256                           
  1257  0070                     ??_I2C_Master_Start:	
  1258                           ; 1 bytes @ 0x0
  1259                           
  1260  0070                     ?_I2C_Master_Stop:	
  1261                           ; 1 bytes @ 0x0
  1262                           
  1263  0070                     ??_I2C_Master_Stop:	
  1264                           ; 1 bytes @ 0x0
  1265                           
  1266  0070                     ?_I2C_Master_Write:	
  1267                           ; 1 bytes @ 0x0
  1268                           
  1269  0070                     ?_sprintf:	
  1270                           ; 1 bytes @ 0x0
  1271                           
  1272  0070                     ?_strcmp:	
  1273                           ; 2 bytes @ 0x0
  1274                           
  1275  0070                     ?_getbit:	
  1276                           ; 2 bytes @ 0x0
  1277                           
  1278  0070                     ?_fcscheck:	
  1279                           ; 2 bytes @ 0x0
  1280                           
  1281  0070                     ?___awdiv:	
  1282                           ; 2 bytes @ 0x0
  1283                           
  1284  0070                     ?___lldiv:	
  1285                           ; 2 bytes @ 0x0
  1286                           
  1287  0070                     putch@byte:	
  1288                           ; 4 bytes @ 0x0
  1289                           
  1290  0070                     I2C_Master_Write@d:	
  1291                           ; 1 bytes @ 0x0
  1292                           
  1293  0070                     __NOP@i:	
  1294                           ; 2 bytes @ 0x0
  1295                           
  1296  0070                     sprintf@sp:	
  1297                           ; 2 bytes @ 0x0
  1298                           
  1299  0070                     ___awdiv@divisor:	
  1300                           ; 2 bytes @ 0x0
  1301                           
  1302  0070                     strcmp@s2:	
  1303                           ; 2 bytes @ 0x0
  1304                           
  1305  0070                     ___lldiv@divisor:	
  1306                           ; 2 bytes @ 0x0
  1307                           
  1308                           
  1309                           ; 4 bytes @ 0x0
  1310  0070                     	ds	1
  1311  0071                     ?_NM_waddress:	
  1312  0071                     NM_waddress@whigh_address:	
  1313                           ; 1 bytes @ 0x1
  1314                           
  1315                           
  1316                           ; 1 bytes @ 0x1
  1317  0071                     	ds	1
  1318  0072                     ?_EEPROM_Write:	
  1319  0072                     ??_strcmp:	
  1320                           ; 1 bytes @ 0x2
  1321                           
  1322  0072                     ??_getbit:	
  1323                           ; 1 bytes @ 0x2
  1324                           
  1325  0072                     ??_fcscheck:	
  1326                           ; 1 bytes @ 0x2
  1327                           
  1328  0072                     ??_I2C_Master_Write:	
  1329                           ; 1 bytes @ 0x2
  1330                           
  1331  0072                     ?_L_OUT:	
  1332                           ; 1 bytes @ 0x2
  1333                           
  1334  0072                     ?_H_OUT:	
  1335                           ; 1 bytes @ 0x2
  1336                           
  1337  0072                     ?_STBOUT:	
  1338                           ; 1 bytes @ 0x2
  1339                           
  1340  0072                     NM_waddress@wlow_address:	
  1341                           ; 1 bytes @ 0x2
  1342                           
  1343  0072                     EEPROM_Write@high_address:	
  1344                           ; 1 bytes @ 0x2
  1345                           
  1346  0072                     sprintf@f:	
  1347                           ; 1 bytes @ 0x2
  1348                           
  1349  0072                     L_OUT@fmcwtxrx:	
  1350                           ; 1 bytes @ 0x2
  1351                           
  1352  0072                     H_OUT@fmcwtxrx:	
  1353                           ; 2 bytes @ 0x2
  1354                           
  1355  0072                     STBOUT@fmcwtxrx:	
  1356                           ; 2 bytes @ 0x2
  1357                           
  1358  0072                     ___awdiv@dividend:	
  1359                           ; 2 bytes @ 0x2
  1360                           
  1361                           
  1362                           ; 2 bytes @ 0x2
  1363  0072                     	ds	1
  1364  0073                     ??_NM_waddress:	
  1365  0073                     NM_waddress@NM_wad_header:	
  1366                           ; 1 bytes @ 0x3
  1367                           
  1368  0073                     EEPROM_Write@low_address:	
  1369                           ; 1 bytes @ 0x3
  1370                           
  1371                           
  1372                           ; 1 bytes @ 0x3
  1373  0073                     	ds	1
  1374  0074                     ??_L_OUT:	
  1375  0074                     ??_H_OUT:	
  1376                           ; 1 bytes @ 0x4
  1377                           
  1378  0074                     ??_STBOUT:	
  1379                           ; 1 bytes @ 0x4
  1380                           
  1381  0074                     ?_OPINIT:	
  1382                           ; 1 bytes @ 0x4
  1383                           
  1384  0074                     ??___awdiv:	
  1385                           ; 1 bytes @ 0x4
  1386                           
  1387  0074                     fcscheck@bt:	
  1388                           ; 1 bytes @ 0x4
  1389                           
  1390  0074                     EEPROM_Write@data:	
  1391                           ; 1 bytes @ 0x4
  1392                           
  1393  0074                     strcmp@r:	
  1394                           ; 1 bytes @ 0x4
  1395                           
  1396  0074                     getbit@i:	
  1397                           ; 1 bytes @ 0x4
  1398                           
  1399  0074                     OPINIT@fmcwtxrx:	
  1400                           ; 2 bytes @ 0x4
  1401                           
  1402  0074                     ___lldiv@dividend:	
  1403                           ; 2 bytes @ 0x4
  1404                           
  1405                           
  1406                           ; 4 bytes @ 0x4
  1407  0074                     	ds	1
  1408  0075                     ??_EEPROM_Write:	
  1409  0075                     ___awdiv@counter:	
  1410                           ; 1 bytes @ 0x5
  1411                           
  1412  0075                     strcmp@s1:	
  1413                           ; 1 bytes @ 0x5
  1414                           
  1415  0075                     fcscheck@i:	
  1416                           ; 1 bytes @ 0x5
  1417                           
  1418                           
  1419                           ; 2 bytes @ 0x5
  1420  0075                     	ds	1
  1421  0076                     ??_sprintf:	
  1422  0076                     ??_waitFlag:	
  1423                           ; 1 bytes @ 0x6
  1424                           
  1425  0076                     ??_getdata:	
  1426                           ; 1 bytes @ 0x6
  1427                           
  1428  0076                     ??_OPINIT:	
  1429                           ; 1 bytes @ 0x6
  1430                           
  1431  0076                     ___awdiv@sign:	
  1432                           ; 1 bytes @ 0x6
  1433                           
  1434                           
  1435                           ; 1 bytes @ 0x6
  1436  0076                     	ds	1
  1437  0077                     sprintf@flag:	
  1438  0077                     fcscheck@i_134:	
  1439                           ; 1 bytes @ 0x7
  1440                           
  1441  0077                     ___awdiv@quotient:	
  1442                           ; 2 bytes @ 0x7
  1443                           
  1444                           
  1445                           ; 2 bytes @ 0x7
  1446  0077                     	ds	1
  1447  0078                     ??___lldiv:	
  1448  0078                     EEPROM_Write@EEPROM_address:	
  1449                           ; 1 bytes @ 0x8
  1450                           
  1451  0078                     sprintf@ap:	
  1452                           ; 1 bytes @ 0x8
  1453                           
  1454                           
  1455                           ; 1 bytes @ 0x8
  1456  0078                     	ds	1
  1457  0079                     ?_OUTFQ:	
  1458  0079                     ?_RFDOUT:	
  1459                           ; 1 bytes @ 0x9
  1460                           
  1461  0079                     fcscheck@byte:	
  1462                           ; 1 bytes @ 0x9
  1463                           
  1464  0079                     EEPROM_Write@Address:	
  1465                           ; 1 bytes @ 0x9
  1466                           
  1467  0079                     OUTFQ@fmcwtxrx:	
  1468                           ; 1 bytes @ 0x9
  1469                           
  1470  0079                     RFDOUT@fmcwtxrx:	
  1471                           ; 2 bytes @ 0x9
  1472                           
  1473  0079                     sprintf@cp:	
  1474                           ; 2 bytes @ 0x9
  1475                           
  1476  0079                     ___lldiv@quotient:	
  1477                           ; 2 bytes @ 0x9
  1478                           
  1479                           
  1480                           ; 4 bytes @ 0x9
  1481  0079                     	ds	1
  1482  007A                     ??_ReceivePacket_data:	
  1483                           
  1484                           ; 1 bytes @ 0xA
  1485  007A                     	ds	1
  1486  007B                     sprintf@c:	
  1487  007B                     OUTFQ@Nprg:	
  1488                           ; 1 bytes @ 0xB
  1489                           
  1490  007B                     RFDOUT@Nref:	
  1491                           ; 2 bytes @ 0xB
  1492                           
  1493                           
  1494                           ; 2 bytes @ 0xB
  1495  007B                     	ds	2
  1496  007D                     ??_FMTX:	
  1497  007D                     ??_CWTX:	
  1498                           ; 1 bytes @ 0xD
  1499                           
  1500  007D                     ??_FMRX:	
  1501                           ; 1 bytes @ 0xD
  1502                           
  1503  007D                     ___lldiv@counter:	
  1504                           ; 1 bytes @ 0xD
  1505                           
  1506                           
  1507                           ; 1 bytes @ 0xD
  1508  007D                     	ds	1
  1509                           
  1510                           	psect	cstackBANK0
  1511  0020                     __pcstackBANK0:	
  1512  0020                     ?_Init_I2C_M:	
  1513  0020                     ??_OUTFQ:	
  1514                           ; 1 bytes @ 0x0
  1515                           
  1516  0020                     ??_RFDOUT:	
  1517                           ; 1 bytes @ 0x0
  1518                           
  1519  0020                     waitFlag@i:	
  1520                           ; 1 bytes @ 0x0
  1521                           
  1522  0020                     getdata@bufstore_counter:	
  1523                           ; 2 bytes @ 0x0
  1524                           
  1525  0020                     Init_I2C_M@c:	
  1526                           ; 2 bytes @ 0x0
  1527                           
  1528                           
  1529                           ; 4 bytes @ 0x0
  1530  0020                     	ds	2
  1531  0022                     waitFlag@j:	
  1532  0022                     getdata@dstuff:	
  1533                           ; 2 bytes @ 0x2
  1534                           
  1535                           
  1536                           ; 2 bytes @ 0x2
  1537  0022                     	ds	1
  1538  0023                     RFDOUT@Nref_b:	
  1539                           
  1540                           ; 24 bytes @ 0x3
  1541  0023                     	ds	1
  1542  0024                     ??_Init_I2C_M:	
  1543  0024                     waitFlag@j_103:	
  1544                           ; 1 bytes @ 0x4
  1545                           
  1546  0024                     getdata@dbitstatus:	
  1547                           ; 2 bytes @ 0x4
  1548                           
  1549                           
  1550                           ; 2 bytes @ 0x4
  1551  0024                     	ds	2
  1552  0026                     getdata@buf:	
  1553  0026                     waitFlag@j_105:	
  1554                           ; 1 bytes @ 0x6
  1555                           
  1556                           
  1557                           ; 2 bytes @ 0x6
  1558  0026                     	ds	2
  1559  0028                     waitFlag@j_107:	
  1560                           
  1561                           ; 2 bytes @ 0x8
  1562  0028                     	ds	2
  1563  002A                     waitFlag@j_109:	
  1564                           
  1565                           ; 2 bytes @ 0xA
  1566  002A                     	ds	2
  1567  002C                     waitFlag@j_111:	
  1568                           
  1569                           ; 2 bytes @ 0xC
  1570  002C                     	ds	2
  1571  002E                     waitFlag@j_112:	
  1572                           
  1573                           ; 2 bytes @ 0xE
  1574  002E                     	ds	2
  1575  0030                     waitFlag@j_114:	
  1576  0030                     OUTFQ@Nprg_b:	
  1577                           ; 2 bytes @ 0x10
  1578                           
  1579                           
  1580                           ; 34 bytes @ 0x10
  1581  0030                     	ds	2
  1582  0032                     waitFlag@j_116:	
  1583                           
  1584                           ; 2 bytes @ 0x12
  1585  0032                     	ds	2
  1586  0034                     waitFlag@j_118:	
  1587                           
  1588                           ; 2 bytes @ 0x14
  1589  0034                     	ds	2
  1590  0036                     waitFlag@j_120:	
  1591                           
  1592                           ; 2 bytes @ 0x16
  1593  0036                     	ds	2
  1594  0038                     waitFlag@j_122:	
  1595                           
  1596                           ; 2 bytes @ 0x18
  1597  0038                     	ds	2
  1598  003A                     waitFlag@flag_judge:	
  1599                           
  1600                           ; 2 bytes @ 0x1A
  1601  003A                     	ds	1
  1602  003B                     RFDOUT@i_430:	
  1603                           
  1604                           ; 2 bytes @ 0x1B
  1605  003B                     	ds	1
  1606  003C                     waitFlag@buf:	
  1607                           
  1608                           ; 1 bytes @ 0x1C
  1609  003C                     	ds	1
  1610  003D                     ReceivePacket_data@fcschecker:	
  1611  003D                     RFDOUT@i:	
  1612                           ; 2 bytes @ 0x1D
  1613                           
  1614                           
  1615                           ; 2 bytes @ 0x1D
  1616  003D                     	ds	2
  1617  003F                     ReceivePacket_data@i:	
  1618  003F                     RFDOUT@i_431:	
  1619                           ; 2 bytes @ 0x1F
  1620                           
  1621                           
  1622                           ; 2 bytes @ 0x1F
  1623  003F                     	ds	19
  1624  0052                     OUTFQ@i_419:	
  1625                           
  1626                           ; 2 bytes @ 0x32
  1627  0052                     	ds	2
  1628  0054                     OUTFQ@count:	
  1629                           
  1630                           ; 2 bytes @ 0x34
  1631  0054                     	ds	2
  1632  0056                     OUTFQ@i:	
  1633                           
  1634                           ; 2 bytes @ 0x36
  1635  0056                     	ds	2
  1636  0058                     OUTFQ@i_421:	
  1637                           
  1638                           ; 2 bytes @ 0x38
  1639  0058                     	ds	2
  1640  005A                     OUTFQ@j:	
  1641                           
  1642                           ; 2 bytes @ 0x3A
  1643  005A                     	ds	2
  1644  005C                     ?_FMTX:	
  1645  005C                     ?_CWTX:	
  1646                           ; 1 bytes @ 0x3C
  1647                           
  1648  005C                     ?_FMRX:	
  1649                           ; 1 bytes @ 0x3C
  1650                           
  1651  005C                     FMTX@Nref:	
  1652                           ; 1 bytes @ 0x3C
  1653                           
  1654  005C                     CWTX@Nref:	
  1655                           ; 2 bytes @ 0x3C
  1656                           
  1657  005C                     FMRX@Nref:	
  1658                           ; 2 bytes @ 0x3C
  1659                           
  1660                           
  1661                           ; 2 bytes @ 0x3C
  1662  005C                     	ds	2
  1663  005E                     FMTX@Nprg:	
  1664  005E                     CWTX@Nprg:	
  1665                           ; 2 bytes @ 0x3E
  1666                           
  1667  005E                     FMRX@Nprg:	
  1668                           ; 2 bytes @ 0x3E
  1669                           
  1670                           
  1671                           ; 2 bytes @ 0x3E
  1672  005E                     	ds	2
  1673  0060                     FMTX@fmtx:	
  1674  0060                     CWTX@cwtx:	
  1675                           ; 2 bytes @ 0x40
  1676                           
  1677  0060                     FMRX@fmrx:	
  1678                           ; 2 bytes @ 0x40
  1679                           
  1680                           
  1681                           ; 2 bytes @ 0x40
  1682  0060                     	ds	2
  1683  0062                     ??_main:	
  1684                           
  1685                           ; 1 bytes @ 0x42
  1686  0062                     	ds	4
  1687                           
  1688                           	psect	maintext
  1689  0E6C                     __pmaintext:	
  1690 ;;
  1691 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1692 ;;
  1693 ;; *************** function _main *****************
  1694 ;; Defined at:
  1695 ;;		line 39 in file "main.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;		None
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;  FMRX_Nprg      10   23[BANK1 ] int [5]
  1700 ;;  CWTX_Nprg      10   13[BANK1 ] int [5]
  1701 ;;  FMTX_Nprg      10    3[BANK1 ] int [5]
  1702 ;;  EPS_kill_1      3    0[BANK1 ] unsigned char [3]
  1703 ;;  dData           1   35[BANK1 ] PTR unsigned char 
  1704 ;;		 -> NULL(0), dData(32), 
  1705 ;;  EPS_kill_2      1   34[BANK1 ] unsigned char 
  1706 ;;  NM_wad_heade    1   33[BANK1 ] unsigned char 
  1707 ;;  EPS_kill        0    0[BANK1 ] unsigned char [0]
  1708 ;; Return value:  Size  Location     Type
  1709 ;;                  1    wreg      void 
  1710 ;; Registers used:
  1711 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1712 ;; Tracked objects:
  1713 ;;		On entry : B00/0
  1714 ;;		On exit  : 0/0
  1715 ;;		Unchanged: 0/0
  1716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1717 ;;      Params:         0       0       0       0       0
  1718 ;;      Locals:         0       0      36       0       0
  1719 ;;      Temps:          0       4       0       0       0
  1720 ;;      Totals:         0       4      36       0       0
  1721 ;;Total ram usage:       40 bytes
  1722 ;; Hardware stack levels required when called:    4
  1723 ;; This function calls:
  1724 ;;		_CWTX
  1725 ;;		_EEPROM_Write
  1726 ;;		_FMRX
  1727 ;;		_FMTX
  1728 ;;		_Init_I2C_M
  1729 ;;		_Init_MPU
  1730 ;;		_Init_SERIAL
  1731 ;;		_NM_waddress
  1732 ;;		_ReceivePacket_data
  1733 ;;		_Reset_EPS
  1734 ;;		_sprintf
  1735 ;;		_strcmp
  1736 ;; This function is called by:
  1737 ;;		Startup code after reset
  1738 ;; This function uses a non-reentrant model
  1739 ;;
  1740                           
  1741                           
  1742                           ;psect for function _main
  1743  0E6C                     _main:	
  1744                           
  1745                           ;main.c: 44: _delay((unsigned long)((500)*(10000000/4000.0)));
  1746                           
  1747                           ;incstack = 0
  1748                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1749  0E6C  3007               	movlw	7
  1750  0E6D  1283               	bcf	3,5	;RP0=0, select bank0
  1751  0E6E  1303               	bcf	3,6	;RP1=0, select bank0
  1752  0E6F  00E4               	movwf	??_main+2
  1753  0E70  3058               	movlw	88
  1754  0E71  00E3               	movwf	??_main+1
  1755  0E72  305E               	movlw	94
  1756  0E73  00E2               	movwf	??_main
  1757  0E74                     u3587:	
  1758  0E74  0BE2               	decfsz	??_main,f
  1759  0E75  2E74               	goto	u3587
  1760  0E76  0BE3               	decfsz	??_main+1,f
  1761  0E77  2E74               	goto	u3587
  1762  0E78  0BE4               	decfsz	??_main+2,f
  1763  0E79  2E74               	goto	u3587
  1764  0E7A  2E7B               	nop2
  1765                           
  1766                           ;main.c: 46: Init_SERIAL();
  1767  0E7B  120A  158A  204D  120A  158A  	fcall	_Init_SERIAL
  1768                           
  1769                           ;main.c: 47: Init_MPU();
  1770  0E80  120A  158A  207F  120A  158A  	fcall	_Init_MPU
  1771                           
  1772                           ;main.c: 48: Init_I2C_M(400000);
  1773  0E85  3000               	movlw	0
  1774  0E86  1283               	bcf	3,5	;RP0=0, select bank0
  1775  0E87  1303               	bcf	3,6	;RP1=0, select bank0
  1776  0E88  00A3               	movwf	Init_I2C_M@c+3
  1777  0E89  3006               	movlw	6
  1778  0E8A  00A2               	movwf	Init_I2C_M@c+2
  1779  0E8B  301A               	movlw	26
  1780  0E8C  00A1               	movwf	Init_I2C_M@c+1
  1781  0E8D  3080               	movlw	128
  1782  0E8E  00A0               	movwf	Init_I2C_M@c
  1783  0E8F  120A  158A  21C4  120A  158A  	fcall	_Init_I2C_M
  1784                           
  1785                           ;main.c: 54: _delay((unsigned long)((5000)*(10000000/4000.0)));
  1786  0E94  3040               	movlw	64
  1787  0E95  1283               	bcf	3,5	;RP0=0, select bank0
  1788  0E96  1303               	bcf	3,6	;RP1=0, select bank0
  1789  0E97  00E4               	movwf	??_main+2
  1790  0E98  306A               	movlw	106
  1791  0E99  00E3               	movwf	??_main+1
  1792  0E9A  30D5               	movlw	213
  1793  0E9B  00E2               	movwf	??_main
  1794  0E9C                     u3597:	
  1795  0E9C  0BE2               	decfsz	??_main,f
  1796  0E9D  2E9C               	goto	u3597
  1797  0E9E  0BE3               	decfsz	??_main+1,f
  1798  0E9F  2E9C               	goto	u3597
  1799  0EA0  0BE4               	decfsz	??_main+2,f
  1800  0EA1  2E9C               	goto	u3597
  1801  0EA2  2EA3               	nop2
  1802                           
  1803                           ;main.c: 56: FMTX(FMTX_Nref, FMTX_Nprg);
  1804  0EA3  1683               	bsf	3,5	;RP0=1, select bank1
  1805  0EA4  1303               	bcf	3,6	;RP1=0, select bank1
  1806  0EA5  084C               	movf	(_FMTX_Nref+1)^(0+128),w
  1807  0EA6  1283               	bcf	3,5	;RP0=0, select bank0
  1808  0EA7  1303               	bcf	3,6	;RP1=0, select bank0
  1809  0EA8  00DD               	movwf	FMTX@Nref+1
  1810  0EA9  1683               	bsf	3,5	;RP0=1, select bank1
  1811  0EAA  1303               	bcf	3,6	;RP1=0, select bank1
  1812  0EAB  084B               	movf	_FMTX_Nref^(0+128),w
  1813  0EAC  1283               	bcf	3,5	;RP0=0, select bank0
  1814  0EAD  1303               	bcf	3,6	;RP1=0, select bank0
  1815  0EAE  00DC               	movwf	FMTX@Nref
  1816  0EAF  30D7               	movlw	(low (_FMTX_Nprg| 0))& (0+255)
  1817  0EB0  00DE               	movwf	FMTX@Nprg
  1818  0EB1  3000               	movlw	0
  1819  0EB2  00DF               	movwf	FMTX@Nprg+1
  1820  0EB3  120A  158A  216A  120A  158A  	fcall	_FMTX
  1821                           
  1822                           ;main.c: 57: CWTX(CWTX_Nref, CWTX_Nprg);
  1823  0EB8  1683               	bsf	3,5	;RP0=1, select bank1
  1824  0EB9  1303               	bcf	3,6	;RP1=0, select bank1
  1825  0EBA  0848               	movf	(_CWTX_Nref+1)^(0+128),w
  1826  0EBB  1283               	bcf	3,5	;RP0=0, select bank0
  1827  0EBC  1303               	bcf	3,6	;RP1=0, select bank0
  1828  0EBD  00DD               	movwf	CWTX@Nref+1
  1829  0EBE  1683               	bsf	3,5	;RP0=1, select bank1
  1830  0EBF  1303               	bcf	3,6	;RP1=0, select bank1
  1831  0EC0  0847               	movf	_CWTX_Nref^(0+128),w
  1832  0EC1  1283               	bcf	3,5	;RP0=0, select bank0
  1833  0EC2  1303               	bcf	3,6	;RP1=0, select bank0
  1834  0EC3  00DC               	movwf	CWTX@Nref
  1835  0EC4  30CD               	movlw	(low (_CWTX_Nprg| 0))& (0+255)
  1836  0EC5  00DE               	movwf	CWTX@Nprg
  1837  0EC6  3000               	movlw	0
  1838  0EC7  00DF               	movwf	CWTX@Nprg+1
  1839  0EC8  120A  158A  2112  120A  158A  	fcall	_CWTX
  1840                           
  1841                           ;main.c: 58: FMRX(FMRX_Nref, FMRX_Nprg);
  1842  0ECD  1683               	bsf	3,5	;RP0=1, select bank1
  1843  0ECE  1303               	bcf	3,6	;RP1=0, select bank1
  1844  0ECF  084A               	movf	(_FMRX_Nref+1)^(0+128),w
  1845  0ED0  1283               	bcf	3,5	;RP0=0, select bank0
  1846  0ED1  1303               	bcf	3,6	;RP1=0, select bank0
  1847  0ED2  00DD               	movwf	FMRX@Nref+1
  1848  0ED3  1683               	bsf	3,5	;RP0=1, select bank1
  1849  0ED4  1303               	bcf	3,6	;RP1=0, select bank1
  1850  0ED5  0849               	movf	_FMRX_Nref^(0+128),w
  1851  0ED6  1283               	bcf	3,5	;RP0=0, select bank0
  1852  0ED7  1303               	bcf	3,6	;RP1=0, select bank0
  1853  0ED8  00DC               	movwf	FMRX@Nref
  1854  0ED9  30E0               	movlw	(low (_FMRX_Nprg| (0+256)))& (0+255)
  1855  0EDA  00DE               	movwf	FMRX@Nprg
  1856  0EDB  3001               	movlw	1
  1857  0EDC  00DF               	movwf	FMRX@Nprg+1
  1858  0EDD  120A  158A  213E  120A  158A  	fcall	_FMRX
  1859  0EE2                     l3782:	
  1860                           ;main.c: 60: while(1){
  1861                           
  1862                           
  1863                           ;main.c: 74: UBYTE *dData;
  1864                           ;main.c: 75: dData = ReceivePacket_data();
  1865  0EE2  120A  158A  22CD  120A  158A  	fcall	_ReceivePacket_data
  1866  0EE7  1283               	bcf	3,5	;RP0=0, select bank0
  1867  0EE8  1303               	bcf	3,6	;RP1=0, select bank0
  1868  0EE9  00E2               	movwf	??_main
  1869  0EEA  0862               	movf	??_main,w
  1870  0EEB  1683               	bsf	3,5	;RP0=1, select bank1
  1871  0EEC  1303               	bcf	3,6	;RP1=0, select bank1
  1872  0EED  00C3               	movwf	main@dData^(0+128)
  1873                           
  1874                           ;main.c: 90: EEPROM_Write(0x50,0x00,0x00,dData);
  1875  0EEE  01F2               	clrf	EEPROM_Write@high_address
  1876  0EEF  01F3               	clrf	EEPROM_Write@low_address
  1877  0EF0  0843               	movf	main@dData^(0+128),w
  1878  0EF1  1283               	bcf	3,5	;RP0=0, select bank0
  1879  0EF2  1303               	bcf	3,6	;RP1=0, select bank0
  1880  0EF3  00E2               	movwf	??_main
  1881  0EF4  0862               	movf	??_main,w
  1882  0EF5  00F4               	movwf	EEPROM_Write@data
  1883  0EF6  3050               	movlw	80
  1884  0EF7  120A  158A  2370  120A  158A  	fcall	_EEPROM_Write
  1885                           
  1886                           ;main.c: 93: UBYTE NM_wad_header = 0x72;
  1887  0EFC  3072               	movlw	114
  1888  0EFD  1283               	bcf	3,5	;RP0=0, select bank0
  1889  0EFE  1303               	bcf	3,6	;RP1=0, select bank0
  1890  0EFF  00E2               	movwf	??_main
  1891  0F00  0862               	movf	??_main,w
  1892  0F01  1683               	bsf	3,5	;RP0=1, select bank1
  1893  0F02  1303               	bcf	3,6	;RP1=0, select bank1
  1894  0F03  00C1               	movwf	main@NM_wad_header^(0+128)
  1895                           
  1896                           ;main.c: 94: NM_waddress(NM_wad_header, 0x00, 0x00);
  1897  0F04  01F1               	clrf	NM_waddress@whigh_address
  1898  0F05  01F2               	clrf	NM_waddress@wlow_address
  1899  0F06  0841               	movf	main@NM_wad_header^(0+128),w
  1900  0F07  160A  118A  27EE  120A  158A  	fcall	_NM_waddress
  1901                           
  1902                           ;main.c: 105: UBYTE EPS_kill[];
  1903                           ;main.c: 106: UBYTE EPS_kill_1[] = "EA";
  1904  0F0C  1683               	bsf	3,5	;RP0=1, select bank1
  1905  0F0D  1303               	bcf	3,6	;RP1=0, select bank1
  1906  0F0E  0844               	movf	main@F2004^(0+128),w
  1907  0F0F  00A0               	movwf	main@EPS_kill_1^(0+128)
  1908  0F10  0845               	movf	(main@F2004+1)^(0+128),w
  1909  0F11  00A1               	movwf	(main@EPS_kill_1+1)^(0+128)
  1910  0F12  0846               	movf	(main@F2004+2)^(0+128),w
  1911  0F13  00A2               	movwf	(main@EPS_kill_1+2)^(0+128)
  1912                           
  1913                           ;main.c: 107: UBYTE EPS_kill_2 = 0x0D;
  1914  0F14  300D               	movlw	13
  1915  0F15  1283               	bcf	3,5	;RP0=0, select bank0
  1916  0F16  1303               	bcf	3,6	;RP1=0, select bank0
  1917  0F17  00E2               	movwf	??_main
  1918  0F18  0862               	movf	??_main,w
  1919  0F19  1683               	bsf	3,5	;RP0=1, select bank1
  1920  0F1A  1303               	bcf	3,6	;RP1=0, select bank1
  1921  0F1B  00C2               	movwf	main@EPS_kill_2^(0+128)
  1922                           
  1923                           ;main.c: 108: sprintf(EPS_kill,"%s%c",EPS_kill_1,EPS_kill_2);
  1924  0F1C  30A0               	movlw	low main@EPS_kill
  1925  0F1D  00F0               	movwf	sprintf@sp
  1926  0F1E  3000               	movlw	high main@EPS_kill
  1927  0F1F  00F1               	movwf	sprintf@sp+1
  1928  0F20  3016               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1929  0F21  1283               	bcf	3,5	;RP0=0, select bank0
  1930  0F22  1303               	bcf	3,6	;RP1=0, select bank0
  1931  0F23  00E2               	movwf	??_main
  1932  0F24  0862               	movf	??_main,w
  1933  0F25  00F2               	movwf	sprintf@f
  1934  0F26  30A0               	movlw	(low (main@EPS_kill_1| 0))& (0+255)
  1935  0F27  00E3               	movwf	??_main+1
  1936  0F28  0863               	movf	??_main+1,w
  1937  0F29  00F3               	movwf	?_sprintf+3
  1938  0F2A  1683               	bsf	3,5	;RP0=1, select bank1
  1939  0F2B  1303               	bcf	3,6	;RP1=0, select bank1
  1940  0F2C  0842               	movf	main@EPS_kill_2^(0+128),w
  1941  0F2D  1283               	bcf	3,5	;RP0=0, select bank0
  1942  0F2E  1303               	bcf	3,6	;RP1=0, select bank0
  1943  0F2F  00E4               	movwf	??_main+2
  1944  0F30  01E5               	clrf	??_main+3
  1945  0F31  0864               	movf	??_main+2,w
  1946  0F32  00F4               	movwf	?_sprintf+4
  1947  0F33  0865               	movf	??_main+3,w
  1948  0F34  00F5               	movwf	?_sprintf+5
  1949  0F35  120A  118A  2020  120A  158A  	fcall	_sprintf
  1950                           
  1951                           ;main.c: 117: if (strcmp(dData,EPS_kill) == 0){
  1952  0F3A  30A0               	movlw	low main@EPS_kill
  1953  0F3B  00F0               	movwf	strcmp@s2
  1954  0F3C  3000               	movlw	high main@EPS_kill
  1955  0F3D  00F1               	movwf	strcmp@s2+1
  1956  0F3E  1683               	bsf	3,5	;RP0=1, select bank1
  1957  0F3F  1303               	bcf	3,6	;RP1=0, select bank1
  1958  0F40  0843               	movf	main@dData^(0+128),w
  1959  0F41  120A  158A  20E7  120A  158A  	fcall	_strcmp
  1960  0F46  0870               	movf	?_strcmp,w
  1961  0F47  0471               	iorwf	?_strcmp+1,w
  1962  0F48  1D03               	btfss	3,2
  1963  0F49  2FF0               	goto	l3816
  1964                           
  1965                           ;main.c: 118: Reset_EPS();
  1966  0F4A  120A  158A  209C  120A  158A  	fcall	_Reset_EPS
  1967                           
  1968                           ;main.c: 119: _delay((unsigned long)((5000)*(10000000/4000.0)));
  1969  0F4F  3040               	movlw	64
  1970  0F50  1283               	bcf	3,5	;RP0=0, select bank0
  1971  0F51  1303               	bcf	3,6	;RP1=0, select bank0
  1972  0F52  00E4               	movwf	??_main+2
  1973  0F53  306A               	movlw	106
  1974  0F54  00E3               	movwf	??_main+1
  1975  0F55  30D5               	movlw	213
  1976  0F56  00E2               	movwf	??_main
  1977  0F57                     u3607:	
  1978  0F57  0BE2               	decfsz	??_main,f
  1979  0F58  2F57               	goto	u3607
  1980  0F59  0BE3               	decfsz	??_main+1,f
  1981  0F5A  2F57               	goto	u3607
  1982  0F5B  0BE4               	decfsz	??_main+2,f
  1983  0F5C  2F57               	goto	u3607
  1984  0F5D  2F5E               	nop2
  1985                           
  1986                           ;main.c: 122: int FMTX_Nprg[5] = {8,7,3,0,0};
  1987  0F5E  30A3               	movlw	main@FMTX_Nprg& (0+255)
  1988  0F5F  0084               	movwf	4
  1989  0F60  30C2               	movlw	low main@F2008
  1990  0F61  1283               	bcf	3,5	;RP0=0, select bank0
  1991  0F62  1303               	bcf	3,6	;RP1=0, select bank0
  1992  0F63  00E2               	movwf	??_main
  1993  0F64  0804               	movf	4,w
  1994  0F65  00E3               	movwf	??_main+1
  1995  0F66  300A               	movlw	10
  1996  0F67  00E4               	movwf	??_main+2
  1997  0F68                     u3530:	
  1998  0F68  0862               	movf	??_main,w
  1999  0F69  0084               	movwf	4
  2000  0F6A  1783               	bsf	3,7	;select IRP bank3
  2001  0F6B  0800               	movf	0,w
  2002  0F6C  00E5               	movwf	??_main+3
  2003  0F6D  0AE2               	incf	??_main,f
  2004  0F6E  0863               	movf	??_main+1,w
  2005  0F6F  0084               	movwf	4
  2006  0F70  1383               	bcf	3,7	;select IRP bank1
  2007  0F71  0865               	movf	??_main+3,w
  2008  0F72  0080               	movwf	0
  2009  0F73  0AE3               	incf	??_main+1,f
  2010  0F74  0BE4               	decfsz	??_main+2,f
  2011  0F75  2F68               	goto	u3530
  2012                           
  2013                           ;main.c: 123: int CWTX_Nprg[5] = {0,1,7,4,7};
  2014  0F76  30AD               	movlw	main@CWTX_Nprg& (0+255)
  2015  0F77  0084               	movwf	4
  2016  0F78  30CC               	movlw	low main@F2010
  2017  0F79  00E2               	movwf	??_main
  2018  0F7A  0804               	movf	4,w
  2019  0F7B  00E3               	movwf	??_main+1
  2020  0F7C  300A               	movlw	10
  2021  0F7D  00E4               	movwf	??_main+2
  2022  0F7E                     u3540:	
  2023  0F7E  0862               	movf	??_main,w
  2024  0F7F  0084               	movwf	4
  2025  0F80  1783               	bsf	3,7	;select IRP bank3
  2026  0F81  0800               	movf	0,w
  2027  0F82  00E5               	movwf	??_main+3
  2028  0F83  0AE2               	incf	??_main,f
  2029  0F84  0863               	movf	??_main+1,w
  2030  0F85  0084               	movwf	4
  2031  0F86  1383               	bcf	3,7	;select IRP bank1
  2032  0F87  0865               	movf	??_main+3,w
  2033  0F88  0080               	movwf	0
  2034  0F89  0AE3               	incf	??_main+1,f
  2035  0F8A  0BE4               	decfsz	??_main+2,f
  2036  0F8B  2F7E               	goto	u3540
  2037                           
  2038                           ;main.c: 124: int FMRX_Nprg[5] = {2,4,8,8,7};
  2039  0F8C  30B7               	movlw	main@FMRX_Nprg& (0+255)
  2040  0F8D  0084               	movwf	4
  2041  0F8E  30D6               	movlw	low main@F2012
  2042  0F8F  00E2               	movwf	??_main
  2043  0F90  0804               	movf	4,w
  2044  0F91  00E3               	movwf	??_main+1
  2045  0F92  300A               	movlw	10
  2046  0F93  00E4               	movwf	??_main+2
  2047  0F94                     u3550:	
  2048  0F94  0862               	movf	??_main,w
  2049  0F95  0084               	movwf	4
  2050  0F96  1783               	bsf	3,7	;select IRP bank3
  2051  0F97  0800               	movf	0,w
  2052  0F98  00E5               	movwf	??_main+3
  2053  0F99  0AE2               	incf	??_main,f
  2054  0F9A  0863               	movf	??_main+1,w
  2055  0F9B  0084               	movwf	4
  2056  0F9C  1383               	bcf	3,7	;select IRP bank1
  2057  0F9D  0865               	movf	??_main+3,w
  2058  0F9E  0080               	movwf	0
  2059  0F9F  0AE3               	incf	??_main+1,f
  2060  0FA0  0BE4               	decfsz	??_main+2,f
  2061  0FA1  2F94               	goto	u3550
  2062                           
  2063                           ;main.c: 126: FMTX(FMTX_Nref, FMTX_Nprg);
  2064  0FA2  1683               	bsf	3,5	;RP0=1, select bank1
  2065  0FA3  1303               	bcf	3,6	;RP1=0, select bank1
  2066  0FA4  084C               	movf	(_FMTX_Nref+1)^(0+128),w
  2067  0FA5  1283               	bcf	3,5	;RP0=0, select bank0
  2068  0FA6  1303               	bcf	3,6	;RP1=0, select bank0
  2069  0FA7  00DD               	movwf	FMTX@Nref+1
  2070  0FA8  1683               	bsf	3,5	;RP0=1, select bank1
  2071  0FA9  1303               	bcf	3,6	;RP1=0, select bank1
  2072  0FAA  084B               	movf	_FMTX_Nref^(0+128),w
  2073  0FAB  1283               	bcf	3,5	;RP0=0, select bank0
  2074  0FAC  1303               	bcf	3,6	;RP1=0, select bank0
  2075  0FAD  00DC               	movwf	FMTX@Nref
  2076  0FAE  30A3               	movlw	(low (main@FMTX_Nprg| 0))& (0+255)
  2077  0FAF  00DE               	movwf	FMTX@Nprg
  2078  0FB0  3000               	movlw	0
  2079  0FB1  00DF               	movwf	FMTX@Nprg+1
  2080  0FB2  120A  158A  216A  120A  158A  	fcall	_FMTX
  2081                           
  2082                           ;main.c: 127: CWTX(CWTX_Nref, CWTX_Nprg);
  2083  0FB7  1683               	bsf	3,5	;RP0=1, select bank1
  2084  0FB8  1303               	bcf	3,6	;RP1=0, select bank1
  2085  0FB9  0848               	movf	(_CWTX_Nref+1)^(0+128),w
  2086  0FBA  1283               	bcf	3,5	;RP0=0, select bank0
  2087  0FBB  1303               	bcf	3,6	;RP1=0, select bank0
  2088  0FBC  00DD               	movwf	CWTX@Nref+1
  2089  0FBD  1683               	bsf	3,5	;RP0=1, select bank1
  2090  0FBE  1303               	bcf	3,6	;RP1=0, select bank1
  2091  0FBF  0847               	movf	_CWTX_Nref^(0+128),w
  2092  0FC0  1283               	bcf	3,5	;RP0=0, select bank0
  2093  0FC1  1303               	bcf	3,6	;RP1=0, select bank0
  2094  0FC2  00DC               	movwf	CWTX@Nref
  2095  0FC3  30AD               	movlw	(low (main@CWTX_Nprg| 0))& (0+255)
  2096  0FC4  00DE               	movwf	CWTX@Nprg
  2097  0FC5  3000               	movlw	0
  2098  0FC6  00DF               	movwf	CWTX@Nprg+1
  2099  0FC7  120A  158A  2112  120A  158A  	fcall	_CWTX
  2100                           
  2101                           ;main.c: 128: FMRX(FMRX_Nref, FMRX_Nprg);
  2102  0FCC  1683               	bsf	3,5	;RP0=1, select bank1
  2103  0FCD  1303               	bcf	3,6	;RP1=0, select bank1
  2104  0FCE  084A               	movf	(_FMRX_Nref+1)^(0+128),w
  2105  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  2106  0FD0  1303               	bcf	3,6	;RP1=0, select bank0
  2107  0FD1  00DD               	movwf	FMRX@Nref+1
  2108  0FD2  1683               	bsf	3,5	;RP0=1, select bank1
  2109  0FD3  1303               	bcf	3,6	;RP1=0, select bank1
  2110  0FD4  0849               	movf	_FMRX_Nref^(0+128),w
  2111  0FD5  1283               	bcf	3,5	;RP0=0, select bank0
  2112  0FD6  1303               	bcf	3,6	;RP1=0, select bank0
  2113  0FD7  00DC               	movwf	FMRX@Nref
  2114  0FD8  30B7               	movlw	(low (main@FMRX_Nprg| 0))& (0+255)
  2115  0FD9  00DE               	movwf	FMRX@Nprg
  2116  0FDA  3000               	movlw	0
  2117  0FDB  00DF               	movwf	FMRX@Nprg+1
  2118  0FDC  120A  158A  213E  120A  158A  	fcall	_FMRX
  2119                           
  2120                           ;main.c: 129: _delay((unsigned long)((500)*(10000000/4000.0)));
  2121  0FE1  3007               	movlw	7
  2122  0FE2  1283               	bcf	3,5	;RP0=0, select bank0
  2123  0FE3  1303               	bcf	3,6	;RP1=0, select bank0
  2124  0FE4  00E4               	movwf	??_main+2
  2125  0FE5  3058               	movlw	88
  2126  0FE6  00E3               	movwf	??_main+1
  2127  0FE7  305E               	movlw	94
  2128  0FE8  00E2               	movwf	??_main
  2129  0FE9                     u3617:	
  2130  0FE9  0BE2               	decfsz	??_main,f
  2131  0FEA  2FE9               	goto	u3617
  2132  0FEB  0BE3               	decfsz	??_main+1,f
  2133  0FEC  2FE9               	goto	u3617
  2134  0FED  0BE4               	decfsz	??_main+2,f
  2135  0FEE  2FE9               	goto	u3617
  2136  0FEF  2FF0               	nop2
  2137  0FF0                     l3816:	
  2138                           
  2139                           ;main.c: 131: }
  2140                           ;main.c: 136: _delay((unsigned long)((500)*(10000000/4000.0)));
  2141  0FF0  3007               	movlw	7
  2142  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  2143  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
  2144  0FF3  00E4               	movwf	??_main+2
  2145  0FF4  3058               	movlw	88
  2146  0FF5  00E3               	movwf	??_main+1
  2147  0FF6  305E               	movlw	94
  2148  0FF7  00E2               	movwf	??_main
  2149  0FF8                     u3627:	
  2150  0FF8  0BE2               	decfsz	??_main,f
  2151  0FF9  2FF8               	goto	u3627
  2152  0FFA  0BE3               	decfsz	??_main+1,f
  2153  0FFB  2FF8               	goto	u3627
  2154  0FFC  0BE4               	decfsz	??_main+2,f
  2155  0FFD  2FF8               	goto	u3627
  2156  0FFE  2FFF               	nop2
  2157  0FFF  2EE2               	goto	l3782
  2158  1000                     __end_of_main:	
  2159                           ;main.c: 137: }
  2160                           ;main.c: 138: return;
  2161                           
  2162                           
  2163                           	psect	text1
  2164  08E7                     __ptext1:	
  2165 ;; *************** function _strcmp *****************
  2166 ;; Defined at:
  2167 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strcmp.c"
  2168 ;; Parameters:    Size  Location     Type
  2169 ;;  s1              1    wreg     PTR const unsigned char 
  2170 ;;		 -> NULL(0), dData(32), 
  2171 ;;  s2              2    0[COMMON] PTR const unsigned char 
  2172 ;;		 -> main@EPS_kill(0), 
  2173 ;; Auto vars:     Size  Location     Type
  2174 ;;  s1              1    5[COMMON] PTR const unsigned char 
  2175 ;;		 -> NULL(0), dData(32), 
  2176 ;;  r               1    4[COMMON] char 
  2177 ;; Return value:  Size  Location     Type
  2178 ;;                  2    0[COMMON] int 
  2179 ;; Registers used:
  2180 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2181 ;; Tracked objects:
  2182 ;;		On entry : 0/0
  2183 ;;		On exit  : 0/0
  2184 ;;		Unchanged: 0/0
  2185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2186 ;;      Params:         2       0       0       0       0
  2187 ;;      Locals:         2       0       0       0       0
  2188 ;;      Temps:          2       0       0       0       0
  2189 ;;      Totals:         6       0       0       0       0
  2190 ;;Total ram usage:        6 bytes
  2191 ;; Hardware stack levels used:    1
  2192 ;; This function calls:
  2193 ;;		Nothing
  2194 ;; This function is called by:
  2195 ;;		_main
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198                           
  2199                           
  2200                           ;psect for function _strcmp
  2201  08E7                     _strcmp:	
  2202                           
  2203                           ;incstack = 0
  2204                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0]
  2205                           ;strcmp@s1 stored from wreg
  2206  08E7  00F5               	movwf	strcmp@s1
  2207  08E8  28F3               	goto	l3518
  2208  08E9                     l3516:	
  2209  08E9  3001               	movlw	1
  2210  08EA  00F2               	movwf	??_strcmp
  2211  08EB  0872               	movf	??_strcmp,w
  2212  08EC  07F5               	addwf	strcmp@s1,f
  2213  08ED  3001               	movlw	1
  2214  08EE  07F0               	addwf	strcmp@s2,f
  2215  08EF  1803               	skipnc
  2216  08F0  0AF1               	incf	strcmp@s2+1,f
  2217  08F1  3000               	movlw	0
  2218  08F2  07F1               	addwf	strcmp@s2+1,f
  2219  08F3                     l3518:	
  2220  08F3  0875               	movf	strcmp@s1,w
  2221  08F4  0084               	movwf	4
  2222  08F5  1783               	bsf	3,7	;select IRP bank2
  2223  08F6  0800               	movf	0,w
  2224  08F7  00F2               	movwf	??_strcmp
  2225  08F8  0870               	movf	strcmp@s2,w
  2226  08F9  0084               	movwf	4
  2227  08FA  1783               	bsf	3,7
  2228  08FB  1C71               	btfss	strcmp@s2+1,0
  2229  08FC  1383               	bcf	3,7
  2230  08FD  0300               	decf	0,w
  2231  08FE  3AFF               	xorlw	255
  2232  08FF  0772               	addwf	??_strcmp,w
  2233  0900  00F3               	movwf	??_strcmp+1
  2234  0901  0873               	movf	??_strcmp+1,w
  2235  0902  00F4               	movwf	strcmp@r
  2236  0903  0874               	movf	strcmp@r,w
  2237  0904  1D03               	btfss	3,2
  2238  0905  290C               	goto	l3522
  2239  0906  0875               	movf	strcmp@s1,w
  2240  0907  0084               	movwf	4
  2241  0908  1783               	bsf	3,7	;select IRP bank2
  2242  0909  0800               	movf	0,w
  2243  090A  1D03               	btfss	3,2
  2244  090B  28E9               	goto	l3516
  2245  090C                     l3522:	
  2246  090C  0874               	movf	strcmp@r,w
  2247  090D  00F0               	movwf	?_strcmp
  2248  090E  01F1               	clrf	?_strcmp+1
  2249  090F  1BF0               	btfsc	?_strcmp,7
  2250  0910  03F1               	decf	?_strcmp+1,f
  2251  0911  0008               	return
  2252  0912                     __end_of_strcmp:	
  2253                           
  2254                           	psect	text2
  2255  0020                     __ptext2:	
  2256 ;; *************** function _sprintf *****************
  2257 ;; Defined at:
  2258 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  2259 ;; Parameters:    Size  Location     Type
  2260 ;;  sp              2    0[COMMON] PTR unsigned char 
  2261 ;;		 -> main@EPS_kill(0), 
  2262 ;;  f               1    2[COMMON] PTR const unsigned char 
  2263 ;;		 -> STR_15(5), 
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;  tmpval          4    0        struct .
  2266 ;;  cp              2    9[COMMON] PTR const unsigned char 
  2267 ;;		 -> STR_16(7), main@EPS_kill_1(3), 
  2268 ;;  len             2    0        unsigned int 
  2269 ;;  val             2    0        unsigned int 
  2270 ;;  c               1   11[COMMON] char 
  2271 ;;  ap              1    8[COMMON] PTR void [1]
  2272 ;;		 -> ?_sprintf(2), 
  2273 ;;  flag            1    7[COMMON] unsigned char 
  2274 ;;  prec            1    0        char 
  2275 ;; Return value:  Size  Location     Type
  2276 ;;                  2    0[COMMON] int 
  2277 ;; Registers used:
  2278 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  2279 ;; Tracked objects:
  2280 ;;		On entry : 0/0
  2281 ;;		On exit  : 0/0
  2282 ;;		Unchanged: 0/0
  2283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2284 ;;      Params:         6       0       0       0       0
  2285 ;;      Locals:         5       0       0       0       0
  2286 ;;      Temps:          1       0       0       0       0
  2287 ;;      Totals:        12       0       0       0       0
  2288 ;;Total ram usage:       12 bytes
  2289 ;; Hardware stack levels used:    2
  2290 ;; This function calls:
  2291 ;;		Nothing
  2292 ;; This function is called by:
  2293 ;;		_main
  2294 ;; This function uses a non-reentrant model
  2295 ;;
  2296                           
  2297                           
  2298                           ;psect for function _sprintf
  2299  0020                     _sprintf:	
  2300                           
  2301                           ;doprnt.c: 494: va_list ap;
  2302                           ;doprnt.c: 499: signed char c;
  2303                           ;doprnt.c: 506: signed char prec;
  2304                           ;doprnt.c: 508: unsigned char flag;
  2305                           ;doprnt.c: 523: union {
  2306                           ;doprnt.c: 524: unsigned long vd;
  2307                           ;doprnt.c: 525: double integ;
  2308                           ;doprnt.c: 526: } tmpval;
  2309                           ;doprnt.c: 528: unsigned int val;
  2310                           ;doprnt.c: 529: unsigned len;
  2311                           ;doprnt.c: 530: const char * cp;
  2312                           ;doprnt.c: 533: *ap = __va_start();
  2313                           
  2314                           ;incstack = 0
  2315                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  2316  0020  3073               	movlw	(low ((?_sprintf| 0+3)))& (0+255)
  2317  0021  00F6               	movwf	??_sprintf
  2318  0022  0876               	movf	??_sprintf,w
  2319  0023  00F8               	movwf	sprintf@ap
  2320                           
  2321                           ;doprnt.c: 635: switch(c = *f++) {
  2322  0024  287A               	goto	l3508
  2323  0025                     l3480:	
  2324                           ;doprnt.c: 728: case 's':
  2325                           
  2326                           ;doprnt.c: 638: goto alldone;
  2327                           
  2328                           ;doprnt.c: 637: case 0:
  2329                           
  2330                           
  2331                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  2332  0025  0878               	movf	sprintf@ap,w
  2333  0026  0084               	movwf	4
  2334  0027  0800               	movf	0,w
  2335  0028  00F9               	movwf	sprintf@cp
  2336  0029  3000               	movlw	0
  2337  002A  00FA               	movwf	sprintf@cp+1
  2338  002B  3001               	movlw	1
  2339  002C  00F6               	movwf	??_sprintf
  2340  002D  0876               	movf	??_sprintf,w
  2341  002E  07F8               	addwf	sprintf@ap,f
  2342                           
  2343                           ;doprnt.c: 740: if(!cp)
  2344  002F  0879               	movf	sprintf@cp,w
  2345  0030  047A               	iorwf	sprintf@cp+1,w
  2346  0031  1D03               	btfss	3,2
  2347  0032  2837               	goto	l3494
  2348                           
  2349                           ;doprnt.c: 741: cp = "(null)";
  2350  0033  3001               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  2351  0034  00F9               	movwf	sprintf@cp
  2352  0035  3080               	movlw	128
  2353  0036  00FA               	movwf	sprintf@cp+1
  2354  0037                     l3494:	
  2355                           ;doprnt.c: 777: while(*cp)
  2356                           
  2357  0037  087A               	movf	sprintf@cp+1,w
  2358  0038  1283               	bcf	3,5	;RP0=0, select bank0
  2359  0039  1303               	bcf	3,6	;RP1=0, select bank0
  2360  003A  00FF               	movwf	127
  2361  003B  0879               	movf	sprintf@cp,w
  2362  003C  0084               	movwf	4
  2363  003D  120A  158A  2000  120A  118A  	fcall	stringtab
  2364  0042  3A00               	xorlw	0
  2365  0043  1903               	btfsc	3,2
  2366  0044  287A               	goto	l3508
  2367                           
  2368                           ;doprnt.c: 778: ((*sp++ = (*cp++)));
  2369  0045  087A               	movf	sprintf@cp+1,w
  2370  0046  1283               	bcf	3,5	;RP0=0, select bank0
  2371  0047  1303               	bcf	3,6	;RP1=0, select bank0
  2372  0048  00FF               	movwf	127
  2373  0049  0879               	movf	sprintf@cp,w
  2374  004A  0084               	movwf	4
  2375  004B  120A  158A  2000  120A  118A  	fcall	stringtab
  2376  0050  00F6               	movwf	??_sprintf
  2377  0051  0870               	movf	sprintf@sp,w
  2378  0052  0084               	movwf	4
  2379  0053  1383               	bcf	3,7
  2380  0054  1871               	btfsc	sprintf@sp+1,0
  2381  0055  1783               	bsf	3,7
  2382  0056  0876               	movf	??_sprintf,w
  2383  0057  0080               	movwf	0
  2384  0058  3001               	movlw	1
  2385  0059  07F9               	addwf	sprintf@cp,f
  2386  005A  1803               	skipnc
  2387  005B  0AFA               	incf	sprintf@cp+1,f
  2388  005C  3001               	movlw	1
  2389  005D  07F0               	addwf	sprintf@sp,f
  2390  005E  1803               	skipnc
  2391  005F  0AF1               	incf	sprintf@sp+1,f
  2392  0060  3000               	movlw	0
  2393  0061  07F1               	addwf	sprintf@sp+1,f
  2394  0062  2837               	goto	l3494
  2395  0063                     l3496:	
  2396                           ;doprnt.c: 784: case 'c':
  2397                           
  2398                           ;doprnt.c: 779: continue;
  2399                           
  2400                           
  2401                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2402  0063  0878               	movf	sprintf@ap,w
  2403  0064  0084               	movwf	4
  2404  0065  0800               	movf	0,w
  2405  0066  00F6               	movwf	??_sprintf
  2406  0067  0876               	movf	??_sprintf,w
  2407  0068  00FB               	movwf	sprintf@c
  2408  0069  3002               	movlw	2
  2409  006A  00F6               	movwf	??_sprintf
  2410  006B  0876               	movf	??_sprintf,w
  2411  006C  07F8               	addwf	sprintf@ap,f
  2412  006D                     l3500:	
  2413                           ;doprnt.c: 802: default:
  2414                           
  2415                           
  2416                           ;doprnt.c: 809: ((*sp++ = (c)));
  2417  006D  0870               	movf	sprintf@sp,w
  2418  006E  0084               	movwf	4
  2419  006F  1383               	bcf	3,7
  2420  0070  1871               	btfsc	sprintf@sp+1,0
  2421  0071  1783               	bsf	3,7
  2422  0072  087B               	movf	sprintf@c,w
  2423  0073  0080               	movwf	0
  2424  0074  3001               	movlw	1
  2425  0075  07F0               	addwf	sprintf@sp,f
  2426  0076  1803               	skipnc
  2427  0077  0AF1               	incf	sprintf@sp+1,f
  2428  0078  3000               	movlw	0
  2429  0079  07F1               	addwf	sprintf@sp+1,f
  2430  007A                     l3508:	
  2431                           ;doprnt.c: 1422: {
  2432                           
  2433                           ;doprnt.c: 536: while(c = *f++) {
  2434                           
  2435                           ;doprnt.c: 822: }
  2436                           
  2437                           ;doprnt.c: 810: continue;
  2438                           
  2439  007A  3001               	movlw	1
  2440  007B  07F2               	addwf	sprintf@f,f
  2441  007C  30FF               	movlw	-1
  2442  007D  0772               	addwf	sprintf@f,w
  2443  007E  0084               	movwf	4
  2444  007F  120A  158A  200A  120A  118A  	fcall	stringdir
  2445  0084  00F6               	movwf	??_sprintf
  2446  0085  0876               	movf	??_sprintf,w
  2447  0086  00FB               	movwf	sprintf@c
  2448  0087  087B               	movf	sprintf@c,w
  2449  0088  1903               	btfsc	3,2
  2450  0089  28A5               	goto	l3510
  2451                           
  2452                           ;doprnt.c: 538: if(c != '%')
  2453  008A  3025               	movlw	37
  2454  008B  067B               	xorwf	sprintf@c,w
  2455  008C  1D03               	btfss	3,2
  2456  008D  286D               	goto	l3500
  2457                           
  2458                           ;doprnt.c: 543: }
  2459                           ;doprnt.c: 548: flag = 0;
  2460                           
  2461                           ;doprnt.c: 542: continue;
  2462                           
  2463                           ;doprnt.c: 540: {
  2464                           ;doprnt.c: 541: ((*sp++ = (c)));
  2465  008E  01F7               	clrf	sprintf@flag
  2466  008F  3001               	movlw	1
  2467  0090  07F2               	addwf	sprintf@f,f
  2468  0091  30FF               	movlw	-1
  2469  0092  0772               	addwf	sprintf@f,w
  2470  0093  0084               	movwf	4
  2471  0094  120A  158A  200A  120A  118A  	fcall	stringdir
  2472  0099  00FB               	movwf	sprintf@c
  2473                           
  2474                           ; Switch size 1, requested type "space"
  2475                           ; Number of cases is 3, Range of values is 0 to 115
  2476                           ; switch strategies available:
  2477                           ; Name         Instructions Cycles
  2478                           ; simple_byte           10     6 (average)
  2479                           ; jumptable            260     6 (fixed)
  2480                           ;	Chosen strategy is simple_byte
  2481  009A  3A00               	xorlw	0	; case 0
  2482  009B  1903               	skipnz
  2483  009C  28A5               	goto	l3510
  2484  009D  3A63               	xorlw	99	; case 99
  2485  009E  1903               	skipnz
  2486  009F  2863               	goto	l3496
  2487  00A0  3A10               	xorlw	16	; case 115
  2488  00A1  1903               	skipnz
  2489  00A2  2825               	goto	l3480
  2490  00A3  286D               	goto	l3500
  2491  00A4  287A               	goto	l3508
  2492  00A5                     l3510:	
  2493                           ;doprnt.c: 1469: }
  2494                           ;doprnt.c: 1533: }
  2495                           ;doprnt.c: 1535: alldone:
  2496                           
  2497                           
  2498                           ;doprnt.c: 1538: *sp = 0;
  2499  00A5  0870               	movf	sprintf@sp,w
  2500  00A6  0084               	movwf	4
  2501  00A7  1783               	bsf	3,7
  2502  00A8  1C71               	btfss	sprintf@sp+1,0
  2503  00A9  1383               	bcf	3,7
  2504  00AA  0180               	clrf	0
  2505  00AB  0008               	return
  2506  00AC                     __end_of_sprintf:	
  2507                           ;doprnt.c: 1540: return 0;
  2508                           ;	Return value of _sprintf is never used
  2509                           
  2510                           
  2511                           	psect	text3
  2512  089C                     __ptext3:	
  2513 ;; *************** function _Reset_EPS *****************
  2514 ;; Defined at:
  2515 ;;		line 19 in file "EPS.c"
  2516 ;; Parameters:    Size  Location     Type
  2517 ;;		None
  2518 ;; Auto vars:     Size  Location     Type
  2519 ;;		None
  2520 ;; Return value:  Size  Location     Type
  2521 ;;                  1    wreg      void 
  2522 ;; Registers used:
  2523 ;;		wreg
  2524 ;; Tracked objects:
  2525 ;;		On entry : 0/0
  2526 ;;		On exit  : 0/0
  2527 ;;		Unchanged: 0/0
  2528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2529 ;;      Params:         0       0       0       0       0
  2530 ;;      Locals:         0       0       0       0       0
  2531 ;;      Temps:          3       0       0       0       0
  2532 ;;      Totals:         3       0       0       0       0
  2533 ;;Total ram usage:        3 bytes
  2534 ;; Hardware stack levels used:    1
  2535 ;; This function calls:
  2536 ;;		Nothing
  2537 ;; This function is called by:
  2538 ;;		_main
  2539 ;; This function uses a non-reentrant model
  2540 ;;
  2541                           
  2542                           
  2543                           ;psect for function _Reset_EPS
  2544  089C                     _Reset_EPS:	
  2545                           
  2546                           ;EPS.c: 20: RE0 = 1;
  2547                           
  2548                           ;incstack = 0
  2549                           ; Regs used in _Reset_EPS: [wreg]
  2550  089C  1283               	bcf	3,5	;RP0=0, select bank0
  2551  089D  1303               	bcf	3,6	;RP1=0, select bank0
  2552  089E  1409               	bsf	9,0	;volatile
  2553                           
  2554                           ;EPS.c: 21: RE1 = 1;
  2555  089F  1489               	bsf	9,1	;volatile
  2556                           
  2557                           ;EPS.c: 22: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2558  08A0  3040               	movlw	64
  2559  08A1  00F2               	movwf	??_Reset_EPS+2
  2560  08A2  306A               	movlw	106
  2561  08A3  00F1               	movwf	??_Reset_EPS+1
  2562  08A4  30D5               	movlw	213
  2563  08A5  00F0               	movwf	??_Reset_EPS
  2564  08A6                     u3637:	
  2565  08A6  0BF0               	decfsz	??_Reset_EPS,f
  2566  08A7  28A6               	goto	u3637
  2567  08A8  0BF1               	decfsz	??_Reset_EPS+1,f
  2568  08A9  28A6               	goto	u3637
  2569  08AA  0BF2               	decfsz	??_Reset_EPS+2,f
  2570  08AB  28A6               	goto	u3637
  2571  08AC  28AD               	nop2
  2572                           
  2573                           ;EPS.c: 23: RE0 = 0;
  2574  08AD  1283               	bcf	3,5	;RP0=0, select bank0
  2575  08AE  1303               	bcf	3,6	;RP1=0, select bank0
  2576  08AF  1009               	bcf	9,0	;volatile
  2577                           
  2578                           ;EPS.c: 24: RE1 = 0;
  2579  08B0  1089               	bcf	9,1	;volatile
  2580                           
  2581                           ;EPS.c: 25: _delay((unsigned long)((500)*(10000000/4000.0)));
  2582  08B1  3007               	movlw	7
  2583  08B2  00F2               	movwf	??_Reset_EPS+2
  2584  08B3  3058               	movlw	88
  2585  08B4  00F1               	movwf	??_Reset_EPS+1
  2586  08B5  305E               	movlw	94
  2587  08B6  00F0               	movwf	??_Reset_EPS
  2588  08B7                     u3647:	
  2589  08B7  0BF0               	decfsz	??_Reset_EPS,f
  2590  08B8  28B7               	goto	u3647
  2591  08B9  0BF1               	decfsz	??_Reset_EPS+1,f
  2592  08BA  28B7               	goto	u3647
  2593  08BB  0BF2               	decfsz	??_Reset_EPS+2,f
  2594  08BC  28B7               	goto	u3647
  2595  08BD  28BE               	nop2
  2596  08BE  0008               	return
  2597  08BF                     __end_of_Reset_EPS:	
  2598                           
  2599                           	psect	text4
  2600  0ACD                     __ptext4:	
  2601 ;; *************** function _ReceivePacket_data *****************
  2602 ;; Defined at:
  2603 ;;		line 357 in file "decode_AX25.c"
  2604 ;; Parameters:    Size  Location     Type
  2605 ;;		None
  2606 ;; Auto vars:     Size  Location     Type
  2607 ;;  i               2   31[BANK0 ] unsigned int 
  2608 ;;  fcschecker      2   29[BANK0 ] unsigned int 
  2609 ;; Return value:  Size  Location     Type
  2610 ;;                  1    wreg      PTR unsigned char 
  2611 ;; Registers used:
  2612 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2613 ;; Tracked objects:
  2614 ;;		On entry : 0/0
  2615 ;;		On exit  : 0/0
  2616 ;;		Unchanged: 0/0
  2617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2618 ;;      Params:         0       0       0       0       0
  2619 ;;      Locals:         0       4       0       0       0
  2620 ;;      Temps:          2       0       0       0       0
  2621 ;;      Totals:         2       4       0       0       0
  2622 ;;Total ram usage:        6 bytes
  2623 ;; Hardware stack levels used:    1
  2624 ;; Hardware stack levels required when called:    2
  2625 ;; This function calls:
  2626 ;;		_fcscheck
  2627 ;;		_getdata
  2628 ;;		_waitFlag
  2629 ;; This function is called by:
  2630 ;;		_main
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634                           
  2635                           ;psect for function _ReceivePacket_data
  2636  0ACD                     _ReceivePacket_data:	
  2637                           
  2638                           ;decode_AX25.c: 358: UINT fcschecker;
  2639                           ;decode_AX25.c: 361: waitFlag();
  2640                           
  2641                           ;incstack = 0
  2642                           ; Regs used in _ReceivePacket_data: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2643  0ACD  120A  118A  2327  120A  158A  	fcall	_waitFlag
  2644                           
  2645                           ;decode_AX25.c: 362: getdata();
  2646  0AD2  120A  158A  242B  120A  158A  	fcall	_getdata
  2647                           
  2648                           ;decode_AX25.c: 363: fcschecker = fcscheck();
  2649  0AD7  120A  158A  2509  120A  158A  	fcall	_fcscheck
  2650  0ADC  0871               	movf	?_fcscheck+1,w
  2651  0ADD  1283               	bcf	3,5	;RP0=0, select bank0
  2652  0ADE  1303               	bcf	3,6	;RP1=0, select bank0
  2653  0ADF  00BE               	movwf	ReceivePacket_data@fcschecker+1
  2654  0AE0  0870               	movf	?_fcscheck,w
  2655  0AE1  00BD               	movwf	ReceivePacket_data@fcschecker
  2656                           
  2657                           ;decode_AX25.c: 365: if(fcschecker == 1){
  2658  0AE2  033D               	decf	ReceivePacket_data@fcschecker,w
  2659  0AE3  043E               	iorwf	ReceivePacket_data@fcschecker+1,w
  2660  0AE4  1D03               	btfss	3,2
  2661  0AE5  2B11               	goto	l3364
  2662                           
  2663                           ;decode_AX25.c: 366: for(UINT i=0; i<dPacketnum-18; i++){
  2664  0AE6  01BF               	clrf	ReceivePacket_data@i
  2665  0AE7  01C0               	clrf	ReceivePacket_data@i+1
  2666  0AE8                     l3354:	
  2667  0AE8  0866               	movf	_dPacketnum,w
  2668  0AE9  3EEE               	addlw	238
  2669  0AEA  00FA               	movwf	??_ReceivePacket_data
  2670  0AEB  0867               	movf	_dPacketnum+1,w
  2671  0AEC  1803               	skipnc
  2672  0AED  3E01               	addlw	1
  2673  0AEE  3EFF               	addlw	255
  2674  0AEF  00FB               	movwf	??_ReceivePacket_data+1
  2675  0AF0  087B               	movf	??_ReceivePacket_data+1,w
  2676  0AF1  0240               	subwf	ReceivePacket_data@i+1,w
  2677  0AF2  1D03               	skipz
  2678  0AF3  2AF6               	goto	u3085
  2679  0AF4  087A               	movf	??_ReceivePacket_data,w
  2680  0AF5  023F               	subwf	ReceivePacket_data@i,w
  2681  0AF6                     u3085:	
  2682  0AF6  1803               	btfsc	3,0
  2683  0AF7  2B0B               	goto	l3356
  2684                           
  2685                           ;decode_AX25.c: 367: dData[i] = dPacket[i+16];
  2686  0AF8  083F               	movf	ReceivePacket_data@i,w
  2687  0AF9  3E10               	addlw	16
  2688  0AFA  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2689  0AFB  0084               	movwf	4
  2690  0AFC  1783               	bsf	3,7	;select IRP bank3
  2691  0AFD  0800               	movf	0,w
  2692  0AFE  00FA               	movwf	??_ReceivePacket_data
  2693  0AFF  083F               	movf	ReceivePacket_data@i,w
  2694  0B00  3E30               	addlw	(low (_dData| (0+256)))& (0+255)
  2695  0B01  0084               	movwf	4
  2696  0B02  087A               	movf	??_ReceivePacket_data,w
  2697  0B03  0080               	movwf	0
  2698  0B04  3001               	movlw	1
  2699  0B05  07BF               	addwf	ReceivePacket_data@i,f
  2700  0B06  1803               	skipnc
  2701  0B07  0AC0               	incf	ReceivePacket_data@i+1,f
  2702  0B08  3000               	movlw	0
  2703  0B09  07C0               	addwf	ReceivePacket_data@i+1,f
  2704  0B0A  2AE8               	goto	l3354
  2705  0B0B                     l3356:	
  2706                           
  2707                           ;decode_AX25.c: 368: }
  2708                           ;decode_AX25.c: 369: dPacketnum = 0;
  2709  0B0B  01E6               	clrf	_dPacketnum
  2710  0B0C  01E7               	clrf	_dPacketnum+1
  2711                           
  2712                           ;decode_AX25.c: 370: rcv_state = 0;
  2713  0B0D  01EA               	clrf	_rcv_state
  2714  0B0E  01EB               	clrf	_rcv_state+1
  2715                           
  2716                           ;decode_AX25.c: 371: return dData;
  2717  0B0F  3030               	movlw	(low (_dData| (0+256)))& (0+255)
  2718                           
  2719                           ;decode_AX25.c: 372: }else{
  2720  0B10  0008               	return
  2721  0B11                     l3364:	
  2722                           
  2723                           ;decode_AX25.c: 373: dPacketnum = 0;
  2724  0B11  01E6               	clrf	_dPacketnum
  2725  0B12  01E7               	clrf	_dPacketnum+1
  2726                           
  2727                           ;decode_AX25.c: 374: rcv_state = 0;
  2728  0B13  01EA               	clrf	_rcv_state
  2729  0B14  01EB               	clrf	_rcv_state+1
  2730                           
  2731                           ;decode_AX25.c: 375: return 0x00;
  2732  0B15  3000               	movlw	0
  2733  0B16  0008               	return
  2734  0B17                     __end_of_ReceivePacket_data:	
  2735                           
  2736                           	psect	text5
  2737  0327                     __ptext5:	
  2738 ;; *************** function _waitFlag *****************
  2739 ;; Defined at:
  2740 ;;		line 52 in file "decode_AX25.c"
  2741 ;; Parameters:    Size  Location     Type
  2742 ;;		None
  2743 ;; Auto vars:     Size  Location     Type
  2744 ;;  j               2   24[BANK0 ] unsigned int 
  2745 ;;  j               2   10[BANK0 ] unsigned int 
  2746 ;;  j               2   22[BANK0 ] unsigned int 
  2747 ;;  j               2    8[BANK0 ] unsigned int 
  2748 ;;  j               2   20[BANK0 ] unsigned int 
  2749 ;;  j               2    6[BANK0 ] unsigned int 
  2750 ;;  j               2   18[BANK0 ] unsigned int 
  2751 ;;  j               2    4[BANK0 ] unsigned int 
  2752 ;;  j               2   16[BANK0 ] unsigned int 
  2753 ;;  j               2    2[BANK0 ] unsigned int 
  2754 ;;  i               2    0[BANK0 ] unsigned int 
  2755 ;;  j               2   14[BANK0 ] unsigned int 
  2756 ;;  j               2   12[BANK0 ] unsigned int 
  2757 ;;  flag_judge      2   26[BANK0 ] unsigned int 
  2758 ;;  buf             1   28[BANK0 ] unsigned char 
  2759 ;; Return value:  Size  Location     Type
  2760 ;;                  1    wreg      void 
  2761 ;; Registers used:
  2762 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2763 ;; Tracked objects:
  2764 ;;		On entry : 0/0
  2765 ;;		On exit  : 0/0
  2766 ;;		Unchanged: 0/0
  2767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2768 ;;      Params:         0       0       0       0       0
  2769 ;;      Locals:         0      29       0       0       0
  2770 ;;      Temps:          4       0       0       0       0
  2771 ;;      Totals:         4      29       0       0       0
  2772 ;;Total ram usage:       33 bytes
  2773 ;; Hardware stack levels used:    1
  2774 ;; Hardware stack levels required when called:    1
  2775 ;; This function calls:
  2776 ;;		_getbit
  2777 ;; This function is called by:
  2778 ;;		_ReceivePacket_data
  2779 ;;		_ReceivePacket
  2780 ;; This function uses a non-reentrant model
  2781 ;;
  2782                           
  2783                           
  2784                           ;psect for function _waitFlag
  2785  0327                     _waitFlag:	
  2786                           
  2787                           ;decode_AX25.c: 53: UINT flag_judge;
  2788                           ;decode_AX25.c: 54: UBYTE buf = 0xff;
  2789                           
  2790                           ;incstack = 0
  2791                           ; Regs used in _waitFlag: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2792  0327  30FF               	movlw	255
  2793  0328  00F6               	movwf	??_waitFlag
  2794  0329  0876               	movf	??_waitFlag,w
  2795  032A  1283               	bcf	3,5	;RP0=0, select bank0
  2796  032B  1303               	bcf	3,6	;RP1=0, select bank0
  2797  032C  00BC               	movwf	waitFlag@buf
  2798  032D                     L6:	
  2799                           
  2800                           ;decode_AX25.c: 269: rcv_state = 0;
  2801  032D  01EA               	clrf	_rcv_state
  2802  032E  01EB               	clrf	_rcv_state+1
  2803  032F                     l3052:	
  2804  032F  3000               	movlw	0
  2805  0330  026B               	subwf	_rcv_state+1,w
  2806  0331  3002               	movlw	2
  2807  0332  1903               	skipnz
  2808  0333  026A               	subwf	_rcv_state,w
  2809  0334  1803               	btfsc	3,0
  2810  0335  0008               	return
  2811  0336                     l2686:	
  2812                           ;decode_AX25.c: 57: while(buf != 0x7e){
  2813                           
  2814                           ;decode_AX25.c: 56: while(rcv_state < 2){
  2815                           
  2816                           ;decode_AX25.c: 55: rcv_state = 0;
  2817                           
  2818  0336  307E               	movlw	126
  2819  0337  063C               	xorwf	waitFlag@buf,w
  2820  0338  1903               	btfsc	3,2
  2821  0339  2B86               	goto	l2708
  2822                           
  2823                           ;decode_AX25.c: 58: flag_judge = getbit();
  2824  033A  120A  158A  2284  120A  118A  	fcall	_getbit
  2825  033F  0871               	movf	?_getbit+1,w
  2826  0340  1283               	bcf	3,5	;RP0=0, select bank0
  2827  0341  1303               	bcf	3,6	;RP1=0, select bank0
  2828  0342  00BB               	movwf	waitFlag@flag_judge+1
  2829  0343  0870               	movf	?_getbit,w
  2830  0344  00BA               	movwf	waitFlag@flag_judge
  2831                           
  2832                           ;decode_AX25.c: 59: buf = buf << 1;
  2833  0345  083C               	movf	waitFlag@buf,w
  2834  0346  00F6               	movwf	??_waitFlag
  2835  0347  0776               	addwf	??_waitFlag,w
  2836  0348  00F7               	movwf	??_waitFlag+1
  2837  0349  0877               	movf	??_waitFlag+1,w
  2838  034A  00BC               	movwf	waitFlag@buf
  2839                           
  2840                           ;decode_AX25.c: 61: buf = buf | 0x00;
  2841  034B  083A               	movf	waitFlag@flag_judge,w
  2842  034C  043B               	iorwf	waitFlag@flag_judge+1,w
  2843  034D  1903               	btfsc	3,2
  2844  034E  2B36               	goto	l2686
  2845                           
  2846                           ;decode_AX25.c: 63: buf = buf | 0x01;
  2847                           
  2848                           ;decode_AX25.c: 62: }else{
  2849  034F  083C               	movf	waitFlag@buf,w
  2850  0350  3801               	iorlw	1
  2851  0351  00F6               	movwf	??_waitFlag
  2852  0352  0876               	movf	??_waitFlag,w
  2853  0353  00BC               	movwf	waitFlag@buf
  2854  0354  2B36               	goto	l2686
  2855  0355                     l2688:	
  2856                           ;decode_AX25.c: 64: }
  2857                           ;decode_AX25.c: 65: }
  2858                           ;decode_AX25.c: 69: while(buf == 0x7e){
  2859                           
  2860                           
  2861                           ;decode_AX25.c: 70: for(UINT i=0;i<8;i++){
  2862  0355  01A0               	clrf	waitFlag@i
  2863  0356  01A1               	clrf	waitFlag@i+1
  2864  0357  3000               	movlw	0
  2865  0358  0221               	subwf	waitFlag@i+1,w
  2866  0359  3008               	movlw	8
  2867  035A  1903               	skipnz
  2868  035B  0220               	subwf	waitFlag@i,w
  2869  035C  1803               	btfsc	3,0
  2870  035D  2B86               	goto	l2708
  2871  035E                     l2694:	
  2872                           
  2873                           ;decode_AX25.c: 71: flag_judge = getbit();
  2874  035E  120A  158A  2284  120A  118A  	fcall	_getbit
  2875  0363  0871               	movf	?_getbit+1,w
  2876  0364  1283               	bcf	3,5	;RP0=0, select bank0
  2877  0365  1303               	bcf	3,6	;RP1=0, select bank0
  2878  0366  00BB               	movwf	waitFlag@flag_judge+1
  2879  0367  0870               	movf	?_getbit,w
  2880  0368  00BA               	movwf	waitFlag@flag_judge
  2881                           
  2882                           ;decode_AX25.c: 72: buf = buf >> 1;
  2883  0369  083C               	movf	waitFlag@buf,w
  2884  036A  00F6               	movwf	??_waitFlag
  2885  036B  1003               	clrc
  2886  036C  0C76               	rrf	??_waitFlag,w
  2887  036D  00F7               	movwf	??_waitFlag+1
  2888  036E  0877               	movf	??_waitFlag+1,w
  2889  036F  00BC               	movwf	waitFlag@buf
  2890                           
  2891                           ;decode_AX25.c: 74: buf = buf | 0x00;
  2892  0370  083A               	movf	waitFlag@flag_judge,w
  2893  0371  043B               	iorwf	waitFlag@flag_judge+1,w
  2894  0372  1903               	btfsc	3,2
  2895  0373  2B79               	goto	l2704
  2896                           
  2897                           ;decode_AX25.c: 76: buf = buf | 0x80;
  2898                           
  2899                           ;decode_AX25.c: 75: }else{
  2900  0374  083C               	movf	waitFlag@buf,w
  2901  0375  3880               	iorlw	128
  2902  0376  00F6               	movwf	??_waitFlag
  2903  0377  0876               	movf	??_waitFlag,w
  2904  0378  00BC               	movwf	waitFlag@buf
  2905  0379                     l2704:	
  2906  0379  3001               	movlw	1
  2907  037A  07A0               	addwf	waitFlag@i,f
  2908  037B  1803               	skipnc
  2909  037C  0AA1               	incf	waitFlag@i+1,f
  2910  037D  3000               	movlw	0
  2911  037E  07A1               	addwf	waitFlag@i+1,f
  2912  037F  3000               	movlw	0
  2913  0380  0221               	subwf	waitFlag@i+1,w
  2914  0381  3008               	movlw	8
  2915  0382  1903               	skipnz
  2916  0383  0220               	subwf	waitFlag@i,w
  2917  0384  1C03               	skipc
  2918  0385  2B5E               	goto	l2694
  2919  0386                     l2708:	
  2920  0386  307E               	movlw	126
  2921  0387  063C               	xorwf	waitFlag@buf,w
  2922  0388  1903               	btfsc	3,2
  2923  0389  2B55               	goto	l2688
  2924                           
  2925                           ;decode_AX25.c: 77: }
  2926                           ;decode_AX25.c: 78: }
  2927                           ;decode_AX25.c: 79: }
  2928                           ;decode_AX25.c: 80: if(buf == ("JQ1YCZ"[0] << 1)){
  2929  038A  300F               	movlw	low (STR_1-__stringbase)
  2930  038B  0084               	movwf	4
  2931  038C  120A  158A  200A  120A  118A  	fcall	stringdir
  2932  0391  00F6               	movwf	??_waitFlag
  2933  0392  01F7               	clrf	??_waitFlag+1
  2934  0393  1003               	clrc
  2935  0394  0DF6               	rlf	??_waitFlag,f
  2936  0395  0DF7               	rlf	??_waitFlag+1,f
  2937  0396  083C               	movf	waitFlag@buf,w
  2938  0397  00F8               	movwf	??_waitFlag+2
  2939  0398  01F9               	clrf	??_waitFlag+3
  2940  0399  0877               	movf	??_waitFlag+1,w
  2941  039A  0679               	xorwf	??_waitFlag+3,w
  2942  039B  1D03               	skipz
  2943  039C  2B9F               	goto	u2175
  2944  039D  0876               	movf	??_waitFlag,w
  2945  039E  0678               	xorwf	??_waitFlag+2,w
  2946  039F                     u2175:	
  2947  039F  1D03               	skipz
  2948  03A0  2D64               	goto	l2858
  2949                           
  2950                           ;decode_AX25.c: 81: dPacket[dPacketnum] = buf;
  2951  03A1  083C               	movf	waitFlag@buf,w
  2952  03A2  00F6               	movwf	??_waitFlag
  2953  03A3  0866               	movf	_dPacketnum,w
  2954  03A4  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2955  03A5  0084               	movwf	4
  2956  03A6  0876               	movf	??_waitFlag,w
  2957  03A7  1783               	bsf	3,7	;select IRP bank3
  2958  03A8  0080               	movwf	0
  2959                           
  2960                           ;decode_AX25.c: 82: dPacketnum ++;
  2961  03A9  3001               	movlw	1
  2962  03AA  07E6               	addwf	_dPacketnum,f
  2963  03AB  1803               	skipnc
  2964  03AC  0AE7               	incf	_dPacketnum+1,f
  2965  03AD  3000               	movlw	0
  2966  03AE  07E7               	addwf	_dPacketnum+1,f
  2967                           
  2968                           ;decode_AX25.c: 83: for(UINT j=0;j<8;j++){
  2969  03AF  01A2               	clrf	waitFlag@j
  2970  03B0  01A3               	clrf	waitFlag@j+1
  2971  03B1  3000               	movlw	0
  2972  03B2  0223               	subwf	waitFlag@j+1,w
  2973  03B3  3008               	movlw	8
  2974  03B4  1903               	skipnz
  2975  03B5  0222               	subwf	waitFlag@j,w
  2976  03B6  1803               	btfsc	3,0
  2977  03B7  2BE0               	goto	l2736
  2978  03B8                     l2722:	
  2979                           
  2980                           ;decode_AX25.c: 84: flag_judge = getbit();
  2981  03B8  120A  158A  2284  120A  118A  	fcall	_getbit
  2982  03BD  0871               	movf	?_getbit+1,w
  2983  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  2984  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  2985  03C0  00BB               	movwf	waitFlag@flag_judge+1
  2986  03C1  0870               	movf	?_getbit,w
  2987  03C2  00BA               	movwf	waitFlag@flag_judge
  2988                           
  2989                           ;decode_AX25.c: 85: buf = buf >> 1;
  2990  03C3  083C               	movf	waitFlag@buf,w
  2991  03C4  00F6               	movwf	??_waitFlag
  2992  03C5  1003               	clrc
  2993  03C6  0C76               	rrf	??_waitFlag,w
  2994  03C7  00F7               	movwf	??_waitFlag+1
  2995  03C8  0877               	movf	??_waitFlag+1,w
  2996  03C9  00BC               	movwf	waitFlag@buf
  2997                           
  2998                           ;decode_AX25.c: 87: buf = buf | 0x00;
  2999  03CA  083A               	movf	waitFlag@flag_judge,w
  3000  03CB  043B               	iorwf	waitFlag@flag_judge+1,w
  3001  03CC  1903               	btfsc	3,2
  3002  03CD  2BD3               	goto	l2732
  3003                           
  3004                           ;decode_AX25.c: 89: buf = buf | 0x80;
  3005                           
  3006                           ;decode_AX25.c: 88: }else{
  3007  03CE  083C               	movf	waitFlag@buf,w
  3008  03CF  3880               	iorlw	128
  3009  03D0  00F6               	movwf	??_waitFlag
  3010  03D1  0876               	movf	??_waitFlag,w
  3011  03D2  00BC               	movwf	waitFlag@buf
  3012  03D3                     l2732:	
  3013  03D3  3001               	movlw	1
  3014  03D4  07A2               	addwf	waitFlag@j,f
  3015  03D5  1803               	skipnc
  3016  03D6  0AA3               	incf	waitFlag@j+1,f
  3017  03D7  3000               	movlw	0
  3018  03D8  07A3               	addwf	waitFlag@j+1,f
  3019  03D9  3000               	movlw	0
  3020  03DA  0223               	subwf	waitFlag@j+1,w
  3021  03DB  3008               	movlw	8
  3022  03DC  1903               	skipnz
  3023  03DD  0222               	subwf	waitFlag@j,w
  3024  03DE  1C03               	skipc
  3025  03DF  2BB8               	goto	l2722
  3026  03E0                     l2736:	
  3027                           
  3028                           ;decode_AX25.c: 90: }
  3029                           ;decode_AX25.c: 91: }
  3030                           ;decode_AX25.c: 92: if(buf == ("JQ1YCZ"[1] << 1)){
  3031  03E0  3010               	movlw	low (((STR_1+1)-__stringbase)| (0+32768))
  3032  03E1  0084               	movwf	4
  3033  03E2  120A  158A  200A  120A  118A  	fcall	stringdir
  3034  03E7  00F6               	movwf	??_waitFlag
  3035  03E8  01F7               	clrf	??_waitFlag+1
  3036  03E9  1003               	clrc
  3037  03EA  0DF6               	rlf	??_waitFlag,f
  3038  03EB  0DF7               	rlf	??_waitFlag+1,f
  3039  03EC  083C               	movf	waitFlag@buf,w
  3040  03ED  00F8               	movwf	??_waitFlag+2
  3041  03EE  01F9               	clrf	??_waitFlag+3
  3042  03EF  0877               	movf	??_waitFlag+1,w
  3043  03F0  0679               	xorwf	??_waitFlag+3,w
  3044  03F1  1D03               	skipz
  3045  03F2  2BF5               	goto	u2215
  3046  03F3  0876               	movf	??_waitFlag,w
  3047  03F4  0678               	xorwf	??_waitFlag+2,w
  3048  03F5                     u2215:	
  3049  03F5  1D03               	skipz
  3050  03F6  2D64               	goto	l2858
  3051                           
  3052                           ;decode_AX25.c: 93: dPacket[dPacketnum] = buf;
  3053  03F7  083C               	movf	waitFlag@buf,w
  3054  03F8  00F6               	movwf	??_waitFlag
  3055  03F9  0866               	movf	_dPacketnum,w
  3056  03FA  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3057  03FB  0084               	movwf	4
  3058  03FC  0876               	movf	??_waitFlag,w
  3059  03FD  1783               	bsf	3,7	;select IRP bank3
  3060  03FE  0080               	movwf	0
  3061                           
  3062                           ;decode_AX25.c: 94: dPacketnum ++;
  3063  03FF  3001               	movlw	1
  3064  0400  07E6               	addwf	_dPacketnum,f
  3065  0401  1803               	skipnc
  3066  0402  0AE7               	incf	_dPacketnum+1,f
  3067  0403  3000               	movlw	0
  3068  0404  07E7               	addwf	_dPacketnum+1,f
  3069                           
  3070                           ;decode_AX25.c: 95: for(UINT j=0;j<8;j++){
  3071  0405  01A4               	clrf	waitFlag@j_103
  3072  0406  01A5               	clrf	waitFlag@j_103+1
  3073  0407  3000               	movlw	0
  3074  0408  0225               	subwf	waitFlag@j_103+1,w
  3075  0409  3008               	movlw	8
  3076  040A  1903               	skipnz
  3077  040B  0224               	subwf	waitFlag@j_103,w
  3078  040C  1803               	btfsc	3,0
  3079  040D  2C36               	goto	l2762
  3080  040E                     l2748:	
  3081                           
  3082                           ;decode_AX25.c: 96: flag_judge = getbit();
  3083  040E  120A  158A  2284  120A  118A  	fcall	_getbit
  3084  0413  0871               	movf	?_getbit+1,w
  3085  0414  1283               	bcf	3,5	;RP0=0, select bank0
  3086  0415  1303               	bcf	3,6	;RP1=0, select bank0
  3087  0416  00BB               	movwf	waitFlag@flag_judge+1
  3088  0417  0870               	movf	?_getbit,w
  3089  0418  00BA               	movwf	waitFlag@flag_judge
  3090                           
  3091                           ;decode_AX25.c: 97: buf = buf >> 1;
  3092  0419  083C               	movf	waitFlag@buf,w
  3093  041A  00F6               	movwf	??_waitFlag
  3094  041B  1003               	clrc
  3095  041C  0C76               	rrf	??_waitFlag,w
  3096  041D  00F7               	movwf	??_waitFlag+1
  3097  041E  0877               	movf	??_waitFlag+1,w
  3098  041F  00BC               	movwf	waitFlag@buf
  3099                           
  3100                           ;decode_AX25.c: 99: buf = buf | 0x00;
  3101  0420  083A               	movf	waitFlag@flag_judge,w
  3102  0421  043B               	iorwf	waitFlag@flag_judge+1,w
  3103  0422  1903               	btfsc	3,2
  3104  0423  2C29               	goto	l2758
  3105                           
  3106                           ;decode_AX25.c: 101: buf = buf | 0x80;
  3107                           
  3108                           ;decode_AX25.c: 100: }else{
  3109  0424  083C               	movf	waitFlag@buf,w
  3110  0425  3880               	iorlw	128
  3111  0426  00F6               	movwf	??_waitFlag
  3112  0427  0876               	movf	??_waitFlag,w
  3113  0428  00BC               	movwf	waitFlag@buf
  3114  0429                     l2758:	
  3115  0429  3001               	movlw	1
  3116  042A  07A4               	addwf	waitFlag@j_103,f
  3117  042B  1803               	skipnc
  3118  042C  0AA5               	incf	waitFlag@j_103+1,f
  3119  042D  3000               	movlw	0
  3120  042E  07A5               	addwf	waitFlag@j_103+1,f
  3121  042F  3000               	movlw	0
  3122  0430  0225               	subwf	waitFlag@j_103+1,w
  3123  0431  3008               	movlw	8
  3124  0432  1903               	skipnz
  3125  0433  0224               	subwf	waitFlag@j_103,w
  3126  0434  1C03               	skipc
  3127  0435  2C0E               	goto	l2748
  3128  0436                     l2762:	
  3129                           
  3130                           ;decode_AX25.c: 102: }
  3131                           ;decode_AX25.c: 103: }
  3132                           ;decode_AX25.c: 104: if(buf == ("JQ1YCZ"[2] << 1)){
  3133  0436  3011               	movlw	low (((STR_1+2)-__stringbase)| (0+32768))
  3134  0437  0084               	movwf	4
  3135  0438  120A  158A  200A  120A  118A  	fcall	stringdir
  3136  043D  00F6               	movwf	??_waitFlag
  3137  043E  01F7               	clrf	??_waitFlag+1
  3138  043F  1003               	clrc
  3139  0440  0DF6               	rlf	??_waitFlag,f
  3140  0441  0DF7               	rlf	??_waitFlag+1,f
  3141  0442  083C               	movf	waitFlag@buf,w
  3142  0443  00F8               	movwf	??_waitFlag+2
  3143  0444  01F9               	clrf	??_waitFlag+3
  3144  0445  0877               	movf	??_waitFlag+1,w
  3145  0446  0679               	xorwf	??_waitFlag+3,w
  3146  0447  1D03               	skipz
  3147  0448  2C4B               	goto	u2255
  3148  0449  0876               	movf	??_waitFlag,w
  3149  044A  0678               	xorwf	??_waitFlag+2,w
  3150  044B                     u2255:	
  3151  044B  1D03               	skipz
  3152  044C  2D64               	goto	l2858
  3153                           
  3154                           ;decode_AX25.c: 105: dPacket[dPacketnum] = buf;
  3155  044D  083C               	movf	waitFlag@buf,w
  3156  044E  00F6               	movwf	??_waitFlag
  3157  044F  0866               	movf	_dPacketnum,w
  3158  0450  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3159  0451  0084               	movwf	4
  3160  0452  0876               	movf	??_waitFlag,w
  3161  0453  1783               	bsf	3,7	;select IRP bank3
  3162  0454  0080               	movwf	0
  3163                           
  3164                           ;decode_AX25.c: 106: dPacketnum ++;
  3165  0455  3001               	movlw	1
  3166  0456  07E6               	addwf	_dPacketnum,f
  3167  0457  1803               	skipnc
  3168  0458  0AE7               	incf	_dPacketnum+1,f
  3169  0459  3000               	movlw	0
  3170  045A  07E7               	addwf	_dPacketnum+1,f
  3171                           
  3172                           ;decode_AX25.c: 107: for(UINT j=0;j<8;j++){
  3173  045B  01A6               	clrf	waitFlag@j_105
  3174  045C  01A7               	clrf	waitFlag@j_105+1
  3175  045D  3000               	movlw	0
  3176  045E  0227               	subwf	waitFlag@j_105+1,w
  3177  045F  3008               	movlw	8
  3178  0460  1903               	skipnz
  3179  0461  0226               	subwf	waitFlag@j_105,w
  3180  0462  1803               	btfsc	3,0
  3181  0463  2C8C               	goto	l2788
  3182  0464                     l2774:	
  3183                           
  3184                           ;decode_AX25.c: 108: flag_judge = getbit();
  3185  0464  120A  158A  2284  120A  118A  	fcall	_getbit
  3186  0469  0871               	movf	?_getbit+1,w
  3187  046A  1283               	bcf	3,5	;RP0=0, select bank0
  3188  046B  1303               	bcf	3,6	;RP1=0, select bank0
  3189  046C  00BB               	movwf	waitFlag@flag_judge+1
  3190  046D  0870               	movf	?_getbit,w
  3191  046E  00BA               	movwf	waitFlag@flag_judge
  3192                           
  3193                           ;decode_AX25.c: 109: buf = buf >> 1;
  3194  046F  083C               	movf	waitFlag@buf,w
  3195  0470  00F6               	movwf	??_waitFlag
  3196  0471  1003               	clrc
  3197  0472  0C76               	rrf	??_waitFlag,w
  3198  0473  00F7               	movwf	??_waitFlag+1
  3199  0474  0877               	movf	??_waitFlag+1,w
  3200  0475  00BC               	movwf	waitFlag@buf
  3201                           
  3202                           ;decode_AX25.c: 111: buf = buf | 0x00;
  3203  0476  083A               	movf	waitFlag@flag_judge,w
  3204  0477  043B               	iorwf	waitFlag@flag_judge+1,w
  3205  0478  1903               	btfsc	3,2
  3206  0479  2C7F               	goto	l2784
  3207                           
  3208                           ;decode_AX25.c: 113: buf = buf | 0x80;
  3209                           
  3210                           ;decode_AX25.c: 112: }else{
  3211  047A  083C               	movf	waitFlag@buf,w
  3212  047B  3880               	iorlw	128
  3213  047C  00F6               	movwf	??_waitFlag
  3214  047D  0876               	movf	??_waitFlag,w
  3215  047E  00BC               	movwf	waitFlag@buf
  3216  047F                     l2784:	
  3217  047F  3001               	movlw	1
  3218  0480  07A6               	addwf	waitFlag@j_105,f
  3219  0481  1803               	skipnc
  3220  0482  0AA7               	incf	waitFlag@j_105+1,f
  3221  0483  3000               	movlw	0
  3222  0484  07A7               	addwf	waitFlag@j_105+1,f
  3223  0485  3000               	movlw	0
  3224  0486  0227               	subwf	waitFlag@j_105+1,w
  3225  0487  3008               	movlw	8
  3226  0488  1903               	skipnz
  3227  0489  0226               	subwf	waitFlag@j_105,w
  3228  048A  1C03               	skipc
  3229  048B  2C64               	goto	l2774
  3230  048C                     l2788:	
  3231                           
  3232                           ;decode_AX25.c: 114: }
  3233                           ;decode_AX25.c: 115: }
  3234                           ;decode_AX25.c: 116: if(buf == ("JQ1YCZ"[3] << 1)){
  3235  048C  3012               	movlw	low (((STR_1+3)-__stringbase)| (0+32768))
  3236  048D  0084               	movwf	4
  3237  048E  120A  158A  200A  120A  118A  	fcall	stringdir
  3238  0493  00F6               	movwf	??_waitFlag
  3239  0494  01F7               	clrf	??_waitFlag+1
  3240  0495  1003               	clrc
  3241  0496  0DF6               	rlf	??_waitFlag,f
  3242  0497  0DF7               	rlf	??_waitFlag+1,f
  3243  0498  083C               	movf	waitFlag@buf,w
  3244  0499  00F8               	movwf	??_waitFlag+2
  3245  049A  01F9               	clrf	??_waitFlag+3
  3246  049B  0877               	movf	??_waitFlag+1,w
  3247  049C  0679               	xorwf	??_waitFlag+3,w
  3248  049D  1D03               	skipz
  3249  049E  2CA1               	goto	u2295
  3250  049F  0876               	movf	??_waitFlag,w
  3251  04A0  0678               	xorwf	??_waitFlag+2,w
  3252  04A1                     u2295:	
  3253  04A1  1D03               	skipz
  3254  04A2  2D64               	goto	l2858
  3255                           
  3256                           ;decode_AX25.c: 117: dPacket[dPacketnum] = buf;
  3257  04A3  083C               	movf	waitFlag@buf,w
  3258  04A4  00F6               	movwf	??_waitFlag
  3259  04A5  0866               	movf	_dPacketnum,w
  3260  04A6  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3261  04A7  0084               	movwf	4
  3262  04A8  0876               	movf	??_waitFlag,w
  3263  04A9  1783               	bsf	3,7	;select IRP bank3
  3264  04AA  0080               	movwf	0
  3265                           
  3266                           ;decode_AX25.c: 118: dPacketnum ++;
  3267  04AB  3001               	movlw	1
  3268  04AC  07E6               	addwf	_dPacketnum,f
  3269  04AD  1803               	skipnc
  3270  04AE  0AE7               	incf	_dPacketnum+1,f
  3271  04AF  3000               	movlw	0
  3272  04B0  07E7               	addwf	_dPacketnum+1,f
  3273                           
  3274                           ;decode_AX25.c: 119: for(UINT j=0;j<8;j++){
  3275  04B1  01A8               	clrf	waitFlag@j_107
  3276  04B2  01A9               	clrf	waitFlag@j_107+1
  3277  04B3  3000               	movlw	0
  3278  04B4  0229               	subwf	waitFlag@j_107+1,w
  3279  04B5  3008               	movlw	8
  3280  04B6  1903               	skipnz
  3281  04B7  0228               	subwf	waitFlag@j_107,w
  3282  04B8  1803               	btfsc	3,0
  3283  04B9  2CE2               	goto	l2814
  3284  04BA                     l2800:	
  3285                           
  3286                           ;decode_AX25.c: 120: flag_judge = getbit();
  3287  04BA  120A  158A  2284  120A  118A  	fcall	_getbit
  3288  04BF  0871               	movf	?_getbit+1,w
  3289  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  3290  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  3291  04C2  00BB               	movwf	waitFlag@flag_judge+1
  3292  04C3  0870               	movf	?_getbit,w
  3293  04C4  00BA               	movwf	waitFlag@flag_judge
  3294                           
  3295                           ;decode_AX25.c: 121: buf = buf >> 1;
  3296  04C5  083C               	movf	waitFlag@buf,w
  3297  04C6  00F6               	movwf	??_waitFlag
  3298  04C7  1003               	clrc
  3299  04C8  0C76               	rrf	??_waitFlag,w
  3300  04C9  00F7               	movwf	??_waitFlag+1
  3301  04CA  0877               	movf	??_waitFlag+1,w
  3302  04CB  00BC               	movwf	waitFlag@buf
  3303                           
  3304                           ;decode_AX25.c: 123: buf = buf | 0x00;
  3305  04CC  083A               	movf	waitFlag@flag_judge,w
  3306  04CD  043B               	iorwf	waitFlag@flag_judge+1,w
  3307  04CE  1903               	btfsc	3,2
  3308  04CF  2CD5               	goto	l2810
  3309                           
  3310                           ;decode_AX25.c: 125: buf = buf | 0x80;
  3311                           
  3312                           ;decode_AX25.c: 124: }else{
  3313  04D0  083C               	movf	waitFlag@buf,w
  3314  04D1  3880               	iorlw	128
  3315  04D2  00F6               	movwf	??_waitFlag
  3316  04D3  0876               	movf	??_waitFlag,w
  3317  04D4  00BC               	movwf	waitFlag@buf
  3318  04D5                     l2810:	
  3319  04D5  3001               	movlw	1
  3320  04D6  07A8               	addwf	waitFlag@j_107,f
  3321  04D7  1803               	skipnc
  3322  04D8  0AA9               	incf	waitFlag@j_107+1,f
  3323  04D9  3000               	movlw	0
  3324  04DA  07A9               	addwf	waitFlag@j_107+1,f
  3325  04DB  3000               	movlw	0
  3326  04DC  0229               	subwf	waitFlag@j_107+1,w
  3327  04DD  3008               	movlw	8
  3328  04DE  1903               	skipnz
  3329  04DF  0228               	subwf	waitFlag@j_107,w
  3330  04E0  1C03               	skipc
  3331  04E1  2CBA               	goto	l2800
  3332  04E2                     l2814:	
  3333                           
  3334                           ;decode_AX25.c: 126: }
  3335                           ;decode_AX25.c: 127: }
  3336                           ;decode_AX25.c: 128: if(buf == ("JQ1YCZ"[4] << 1)){
  3337  04E2  3013               	movlw	low (((STR_1+4)-__stringbase)| (0+32768))
  3338  04E3  0084               	movwf	4
  3339  04E4  120A  158A  200A  120A  118A  	fcall	stringdir
  3340  04E9  00F6               	movwf	??_waitFlag
  3341  04EA  01F7               	clrf	??_waitFlag+1
  3342  04EB  1003               	clrc
  3343  04EC  0DF6               	rlf	??_waitFlag,f
  3344  04ED  0DF7               	rlf	??_waitFlag+1,f
  3345  04EE  083C               	movf	waitFlag@buf,w
  3346  04EF  00F8               	movwf	??_waitFlag+2
  3347  04F0  01F9               	clrf	??_waitFlag+3
  3348  04F1  0877               	movf	??_waitFlag+1,w
  3349  04F2  0679               	xorwf	??_waitFlag+3,w
  3350  04F3  1D03               	skipz
  3351  04F4  2CF7               	goto	u2335
  3352  04F5  0876               	movf	??_waitFlag,w
  3353  04F6  0678               	xorwf	??_waitFlag+2,w
  3354  04F7                     u2335:	
  3355  04F7  1D03               	skipz
  3356  04F8  2D64               	goto	l2858
  3357                           
  3358                           ;decode_AX25.c: 129: dPacket[dPacketnum] = buf;
  3359  04F9  083C               	movf	waitFlag@buf,w
  3360  04FA  00F6               	movwf	??_waitFlag
  3361  04FB  0866               	movf	_dPacketnum,w
  3362  04FC  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3363  04FD  0084               	movwf	4
  3364  04FE  0876               	movf	??_waitFlag,w
  3365  04FF  1783               	bsf	3,7	;select IRP bank3
  3366  0500  0080               	movwf	0
  3367                           
  3368                           ;decode_AX25.c: 130: dPacketnum ++;
  3369  0501  3001               	movlw	1
  3370  0502  07E6               	addwf	_dPacketnum,f
  3371  0503  1803               	skipnc
  3372  0504  0AE7               	incf	_dPacketnum+1,f
  3373  0505  3000               	movlw	0
  3374  0506  07E7               	addwf	_dPacketnum+1,f
  3375                           
  3376                           ;decode_AX25.c: 131: for(UINT j=0;j<8;j++){
  3377  0507  01AA               	clrf	waitFlag@j_109
  3378  0508  01AB               	clrf	waitFlag@j_109+1
  3379  0509  3000               	movlw	0
  3380  050A  022B               	subwf	waitFlag@j_109+1,w
  3381  050B  3008               	movlw	8
  3382  050C  1903               	skipnz
  3383  050D  022A               	subwf	waitFlag@j_109,w
  3384  050E  1803               	btfsc	3,0
  3385  050F  2D38               	goto	l2840
  3386  0510                     l2826:	
  3387                           
  3388                           ;decode_AX25.c: 132: flag_judge = getbit();
  3389  0510  120A  158A  2284  120A  118A  	fcall	_getbit
  3390  0515  0871               	movf	?_getbit+1,w
  3391  0516  1283               	bcf	3,5	;RP0=0, select bank0
  3392  0517  1303               	bcf	3,6	;RP1=0, select bank0
  3393  0518  00BB               	movwf	waitFlag@flag_judge+1
  3394  0519  0870               	movf	?_getbit,w
  3395  051A  00BA               	movwf	waitFlag@flag_judge
  3396                           
  3397                           ;decode_AX25.c: 133: buf = buf >> 1;
  3398  051B  083C               	movf	waitFlag@buf,w
  3399  051C  00F6               	movwf	??_waitFlag
  3400  051D  1003               	clrc
  3401  051E  0C76               	rrf	??_waitFlag,w
  3402  051F  00F7               	movwf	??_waitFlag+1
  3403  0520  0877               	movf	??_waitFlag+1,w
  3404  0521  00BC               	movwf	waitFlag@buf
  3405                           
  3406                           ;decode_AX25.c: 135: buf = buf | 0x00;
  3407  0522  083A               	movf	waitFlag@flag_judge,w
  3408  0523  043B               	iorwf	waitFlag@flag_judge+1,w
  3409  0524  1903               	btfsc	3,2
  3410  0525  2D2B               	goto	l2836
  3411                           
  3412                           ;decode_AX25.c: 137: buf = buf | 0x80;
  3413                           
  3414                           ;decode_AX25.c: 136: }else{
  3415  0526  083C               	movf	waitFlag@buf,w
  3416  0527  3880               	iorlw	128
  3417  0528  00F6               	movwf	??_waitFlag
  3418  0529  0876               	movf	??_waitFlag,w
  3419  052A  00BC               	movwf	waitFlag@buf
  3420  052B                     l2836:	
  3421  052B  3001               	movlw	1
  3422  052C  07AA               	addwf	waitFlag@j_109,f
  3423  052D  1803               	skipnc
  3424  052E  0AAB               	incf	waitFlag@j_109+1,f
  3425  052F  3000               	movlw	0
  3426  0530  07AB               	addwf	waitFlag@j_109+1,f
  3427  0531  3000               	movlw	0
  3428  0532  022B               	subwf	waitFlag@j_109+1,w
  3429  0533  3008               	movlw	8
  3430  0534  1903               	skipnz
  3431  0535  022A               	subwf	waitFlag@j_109,w
  3432  0536  1C03               	skipc
  3433  0537  2D10               	goto	l2826
  3434  0538                     l2840:	
  3435                           
  3436                           ;decode_AX25.c: 138: }
  3437                           ;decode_AX25.c: 139: }
  3438                           ;decode_AX25.c: 140: if(buf == ("JQ1YCZ"[5] << 1)){
  3439  0538  3014               	movlw	low (((STR_1+5)-__stringbase)| (0+32768))
  3440  0539  0084               	movwf	4
  3441  053A  120A  158A  200A  120A  118A  	fcall	stringdir
  3442  053F  00F6               	movwf	??_waitFlag
  3443  0540  01F7               	clrf	??_waitFlag+1
  3444  0541  1003               	clrc
  3445  0542  0DF6               	rlf	??_waitFlag,f
  3446  0543  0DF7               	rlf	??_waitFlag+1,f
  3447  0544  083C               	movf	waitFlag@buf,w
  3448  0545  00F8               	movwf	??_waitFlag+2
  3449  0546  01F9               	clrf	??_waitFlag+3
  3450  0547  0877               	movf	??_waitFlag+1,w
  3451  0548  0679               	xorwf	??_waitFlag+3,w
  3452  0549  1D03               	skipz
  3453  054A  2D4D               	goto	u2375
  3454  054B  0876               	movf	??_waitFlag,w
  3455  054C  0678               	xorwf	??_waitFlag+2,w
  3456  054D                     u2375:	
  3457  054D  1D03               	skipz
  3458  054E  2D64               	goto	l2858
  3459                           
  3460                           ;decode_AX25.c: 141: dPacket[dPacketnum] = buf;
  3461  054F  083C               	movf	waitFlag@buf,w
  3462  0550  00F6               	movwf	??_waitFlag
  3463  0551  0866               	movf	_dPacketnum,w
  3464  0552  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3465  0553  0084               	movwf	4
  3466  0554  0876               	movf	??_waitFlag,w
  3467  0555  1783               	bsf	3,7	;select IRP bank3
  3468  0556  0080               	movwf	0
  3469                           
  3470                           ;decode_AX25.c: 142: dPacketnum ++;
  3471  0557  3001               	movlw	1
  3472  0558  07E6               	addwf	_dPacketnum,f
  3473  0559  1803               	skipnc
  3474  055A  0AE7               	incf	_dPacketnum+1,f
  3475  055B  3000               	movlw	0
  3476  055C  07E7               	addwf	_dPacketnum+1,f
  3477                           
  3478                           ;decode_AX25.c: 143: rcv_state ++;
  3479  055D  3001               	movlw	1
  3480  055E  07EA               	addwf	_rcv_state,f
  3481  055F  1803               	skipnc
  3482  0560  0AEB               	incf	_rcv_state+1,f
  3483  0561  3000               	movlw	0
  3484  0562  07EB               	addwf	_rcv_state+1,f
  3485                           
  3486                           ;decode_AX25.c: 144: }else{
  3487  0563  2D66               	goto	l194
  3488  0564                     l2858:	
  3489                           ;decode_AX25.c: 158: }
  3490                           ;decode_AX25.c: 159: }else{
  3491                           
  3492                           ;decode_AX25.c: 157: dPacketnum = 0;
  3493                           
  3494                           ;decode_AX25.c: 155: }
  3495                           ;decode_AX25.c: 156: }else{
  3496                           
  3497                           ;decode_AX25.c: 154: dPacketnum = 0;
  3498                           
  3499                           ;decode_AX25.c: 152: }
  3500                           ;decode_AX25.c: 153: }else{
  3501                           
  3502                           ;decode_AX25.c: 151: dPacketnum = 0;
  3503                           
  3504                           ;decode_AX25.c: 149: }
  3505                           ;decode_AX25.c: 150: }else{
  3506                           
  3507                           ;decode_AX25.c: 148: dPacketnum = 0;
  3508                           
  3509                           ;decode_AX25.c: 146: }
  3510                           ;decode_AX25.c: 147: }else{
  3511                           
  3512                           ;decode_AX25.c: 145: dPacketnum = 0;
  3513                           
  3514                           
  3515                           ;decode_AX25.c: 160: dPacketnum = 0;
  3516  0564  01E6               	clrf	_dPacketnum
  3517  0565  01E7               	clrf	_dPacketnum+1
  3518  0566                     l194:	
  3519                           
  3520                           ;decode_AX25.c: 161: }
  3521                           ;decode_AX25.c: 163: for(UINT j=0;j<8;j++){
  3522  0566  01AC               	clrf	waitFlag@j_111
  3523  0567  01AD               	clrf	waitFlag@j_111+1
  3524  0568  3000               	movlw	0
  3525  0569  022D               	subwf	waitFlag@j_111+1,w
  3526  056A  3008               	movlw	8
  3527  056B  1903               	skipnz
  3528  056C  022C               	subwf	waitFlag@j_111,w
  3529  056D  1803               	btfsc	3,0
  3530  056E  2D97               	goto	l2878
  3531  056F                     l2864:	
  3532                           
  3533                           ;decode_AX25.c: 164: flag_judge = getbit();
  3534  056F  120A  158A  2284  120A  118A  	fcall	_getbit
  3535  0574  0871               	movf	?_getbit+1,w
  3536  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3537  0576  1303               	bcf	3,6	;RP1=0, select bank0
  3538  0577  00BB               	movwf	waitFlag@flag_judge+1
  3539  0578  0870               	movf	?_getbit,w
  3540  0579  00BA               	movwf	waitFlag@flag_judge
  3541                           
  3542                           ;decode_AX25.c: 165: buf = buf >> 1;
  3543  057A  083C               	movf	waitFlag@buf,w
  3544  057B  00F6               	movwf	??_waitFlag
  3545  057C  1003               	clrc
  3546  057D  0C76               	rrf	??_waitFlag,w
  3547  057E  00F7               	movwf	??_waitFlag+1
  3548  057F  0877               	movf	??_waitFlag+1,w
  3549  0580  00BC               	movwf	waitFlag@buf
  3550                           
  3551                           ;decode_AX25.c: 167: buf = buf | 0x00;
  3552  0581  083A               	movf	waitFlag@flag_judge,w
  3553  0582  043B               	iorwf	waitFlag@flag_judge+1,w
  3554  0583  1903               	btfsc	3,2
  3555  0584  2D8A               	goto	l2874
  3556                           
  3557                           ;decode_AX25.c: 169: buf = buf | 0x80;
  3558                           
  3559                           ;decode_AX25.c: 168: }else{
  3560  0585  083C               	movf	waitFlag@buf,w
  3561  0586  3880               	iorlw	128
  3562  0587  00F6               	movwf	??_waitFlag
  3563  0588  0876               	movf	??_waitFlag,w
  3564  0589  00BC               	movwf	waitFlag@buf
  3565  058A                     l2874:	
  3566  058A  3001               	movlw	1
  3567  058B  07AC               	addwf	waitFlag@j_111,f
  3568  058C  1803               	skipnc
  3569  058D  0AAD               	incf	waitFlag@j_111+1,f
  3570  058E  3000               	movlw	0
  3571  058F  07AD               	addwf	waitFlag@j_111+1,f
  3572  0590  3000               	movlw	0
  3573  0591  022D               	subwf	waitFlag@j_111+1,w
  3574  0592  3008               	movlw	8
  3575  0593  1903               	skipnz
  3576  0594  022C               	subwf	waitFlag@j_111,w
  3577  0595  1C03               	skipc
  3578  0596  2D6F               	goto	l2864
  3579  0597                     l2878:	
  3580                           
  3581                           ;decode_AX25.c: 170: }
  3582                           ;decode_AX25.c: 171: }
  3583                           ;decode_AX25.c: 172: dPacket[dPacketnum] = buf;
  3584  0597  083C               	movf	waitFlag@buf,w
  3585  0598  00F6               	movwf	??_waitFlag
  3586  0599  0866               	movf	_dPacketnum,w
  3587  059A  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3588  059B  0084               	movwf	4
  3589  059C  0876               	movf	??_waitFlag,w
  3590  059D  1783               	bsf	3,7	;select IRP bank3
  3591  059E  0080               	movwf	0
  3592                           
  3593                           ;decode_AX25.c: 173: dPacketnum ++;
  3594  059F  3001               	movlw	1
  3595  05A0  07E6               	addwf	_dPacketnum,f
  3596  05A1  1803               	skipnc
  3597  05A2  0AE7               	incf	_dPacketnum+1,f
  3598  05A3  3000               	movlw	0
  3599  05A4  07E7               	addwf	_dPacketnum+1,f
  3600                           
  3601                           ;decode_AX25.c: 174: for(UINT j=0;j<8;j++){
  3602  05A5  01AE               	clrf	waitFlag@j_112
  3603  05A6  01AF               	clrf	waitFlag@j_112+1
  3604  05A7  3000               	movlw	0
  3605  05A8  022F               	subwf	waitFlag@j_112+1,w
  3606  05A9  3008               	movlw	8
  3607  05AA  1903               	skipnz
  3608  05AB  022E               	subwf	waitFlag@j_112,w
  3609  05AC  1803               	btfsc	3,0
  3610  05AD  2DD6               	goto	l2902
  3611  05AE                     l2888:	
  3612                           
  3613                           ;decode_AX25.c: 175: flag_judge = getbit();
  3614  05AE  120A  158A  2284  120A  118A  	fcall	_getbit
  3615  05B3  0871               	movf	?_getbit+1,w
  3616  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  3617  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  3618  05B6  00BB               	movwf	waitFlag@flag_judge+1
  3619  05B7  0870               	movf	?_getbit,w
  3620  05B8  00BA               	movwf	waitFlag@flag_judge
  3621                           
  3622                           ;decode_AX25.c: 176: buf = buf >> 1;
  3623  05B9  083C               	movf	waitFlag@buf,w
  3624  05BA  00F6               	movwf	??_waitFlag
  3625  05BB  1003               	clrc
  3626  05BC  0C76               	rrf	??_waitFlag,w
  3627  05BD  00F7               	movwf	??_waitFlag+1
  3628  05BE  0877               	movf	??_waitFlag+1,w
  3629  05BF  00BC               	movwf	waitFlag@buf
  3630                           
  3631                           ;decode_AX25.c: 178: buf = buf | 0x00;
  3632  05C0  083A               	movf	waitFlag@flag_judge,w
  3633  05C1  043B               	iorwf	waitFlag@flag_judge+1,w
  3634  05C2  1903               	btfsc	3,2
  3635  05C3  2DC9               	goto	l2898
  3636                           
  3637                           ;decode_AX25.c: 180: buf = buf | 0x80;
  3638                           
  3639                           ;decode_AX25.c: 179: }else{
  3640  05C4  083C               	movf	waitFlag@buf,w
  3641  05C5  3880               	iorlw	128
  3642  05C6  00F6               	movwf	??_waitFlag
  3643  05C7  0876               	movf	??_waitFlag,w
  3644  05C8  00BC               	movwf	waitFlag@buf
  3645  05C9                     l2898:	
  3646  05C9  3001               	movlw	1
  3647  05CA  07AE               	addwf	waitFlag@j_112,f
  3648  05CB  1803               	skipnc
  3649  05CC  0AAF               	incf	waitFlag@j_112+1,f
  3650  05CD  3000               	movlw	0
  3651  05CE  07AF               	addwf	waitFlag@j_112+1,f
  3652  05CF  3000               	movlw	0
  3653  05D0  022F               	subwf	waitFlag@j_112+1,w
  3654  05D1  3008               	movlw	8
  3655  05D2  1903               	skipnz
  3656  05D3  022E               	subwf	waitFlag@j_112,w
  3657  05D4  1C03               	skipc
  3658  05D5  2DAE               	goto	l2888
  3659  05D6                     l2902:	
  3660                           
  3661                           ;decode_AX25.c: 181: }
  3662                           ;decode_AX25.c: 182: }
  3663                           ;decode_AX25.c: 183: if(buf == ("JQ1ZHX"[0] << 1)){
  3664  05D6  3008               	movlw	low (STR_7-__stringbase)
  3665  05D7  0084               	movwf	4
  3666  05D8  120A  158A  200A  120A  118A  	fcall	stringdir
  3667  05DD  00F6               	movwf	??_waitFlag
  3668  05DE  01F7               	clrf	??_waitFlag+1
  3669  05DF  1003               	clrc
  3670  05E0  0DF6               	rlf	??_waitFlag,f
  3671  05E1  0DF7               	rlf	??_waitFlag+1,f
  3672  05E2  083C               	movf	waitFlag@buf,w
  3673  05E3  00F8               	movwf	??_waitFlag+2
  3674  05E4  01F9               	clrf	??_waitFlag+3
  3675  05E5  0877               	movf	??_waitFlag+1,w
  3676  05E6  0679               	xorwf	??_waitFlag+3,w
  3677  05E7  1D03               	skipz
  3678  05E8  2DEB               	goto	u2445
  3679  05E9  0876               	movf	??_waitFlag,w
  3680  05EA  0678               	xorwf	??_waitFlag+2,w
  3681  05EB                     u2445:	
  3682  05EB  1D03               	skipz
  3683  05EC  2FB0               	goto	l3050
  3684                           
  3685                           ;decode_AX25.c: 184: dPacket[dPacketnum] = buf;
  3686  05ED  083C               	movf	waitFlag@buf,w
  3687  05EE  00F6               	movwf	??_waitFlag
  3688  05EF  0866               	movf	_dPacketnum,w
  3689  05F0  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3690  05F1  0084               	movwf	4
  3691  05F2  0876               	movf	??_waitFlag,w
  3692  05F3  1783               	bsf	3,7	;select IRP bank3
  3693  05F4  0080               	movwf	0
  3694                           
  3695                           ;decode_AX25.c: 185: dPacketnum ++;
  3696  05F5  3001               	movlw	1
  3697  05F6  07E6               	addwf	_dPacketnum,f
  3698  05F7  1803               	skipnc
  3699  05F8  0AE7               	incf	_dPacketnum+1,f
  3700  05F9  3000               	movlw	0
  3701  05FA  07E7               	addwf	_dPacketnum+1,f
  3702                           
  3703                           ;decode_AX25.c: 186: for(UINT j=0;j<8;j++){
  3704  05FB  01B0               	clrf	waitFlag@j_114
  3705  05FC  01B1               	clrf	waitFlag@j_114+1
  3706  05FD  3000               	movlw	0
  3707  05FE  0231               	subwf	waitFlag@j_114+1,w
  3708  05FF  3008               	movlw	8
  3709  0600  1903               	skipnz
  3710  0601  0230               	subwf	waitFlag@j_114,w
  3711  0602  1803               	btfsc	3,0
  3712  0603  2E2C               	goto	l2928
  3713  0604                     l2914:	
  3714                           
  3715                           ;decode_AX25.c: 187: flag_judge = getbit();
  3716  0604  120A  158A  2284  120A  118A  	fcall	_getbit
  3717  0609  0871               	movf	?_getbit+1,w
  3718  060A  1283               	bcf	3,5	;RP0=0, select bank0
  3719  060B  1303               	bcf	3,6	;RP1=0, select bank0
  3720  060C  00BB               	movwf	waitFlag@flag_judge+1
  3721  060D  0870               	movf	?_getbit,w
  3722  060E  00BA               	movwf	waitFlag@flag_judge
  3723                           
  3724                           ;decode_AX25.c: 188: buf = buf >> 1;
  3725  060F  083C               	movf	waitFlag@buf,w
  3726  0610  00F6               	movwf	??_waitFlag
  3727  0611  1003               	clrc
  3728  0612  0C76               	rrf	??_waitFlag,w
  3729  0613  00F7               	movwf	??_waitFlag+1
  3730  0614  0877               	movf	??_waitFlag+1,w
  3731  0615  00BC               	movwf	waitFlag@buf
  3732                           
  3733                           ;decode_AX25.c: 190: buf = buf | 0x00;
  3734  0616  083A               	movf	waitFlag@flag_judge,w
  3735  0617  043B               	iorwf	waitFlag@flag_judge+1,w
  3736  0618  1903               	btfsc	3,2
  3737  0619  2E1F               	goto	l2924
  3738                           
  3739                           ;decode_AX25.c: 192: buf = buf | 0x80;
  3740                           
  3741                           ;decode_AX25.c: 191: }else{
  3742  061A  083C               	movf	waitFlag@buf,w
  3743  061B  3880               	iorlw	128
  3744  061C  00F6               	movwf	??_waitFlag
  3745  061D  0876               	movf	??_waitFlag,w
  3746  061E  00BC               	movwf	waitFlag@buf
  3747  061F                     l2924:	
  3748  061F  3001               	movlw	1
  3749  0620  07B0               	addwf	waitFlag@j_114,f
  3750  0621  1803               	skipnc
  3751  0622  0AB1               	incf	waitFlag@j_114+1,f
  3752  0623  3000               	movlw	0
  3753  0624  07B1               	addwf	waitFlag@j_114+1,f
  3754  0625  3000               	movlw	0
  3755  0626  0231               	subwf	waitFlag@j_114+1,w
  3756  0627  3008               	movlw	8
  3757  0628  1903               	skipnz
  3758  0629  0230               	subwf	waitFlag@j_114,w
  3759  062A  1C03               	skipc
  3760  062B  2E04               	goto	l2914
  3761  062C                     l2928:	
  3762                           
  3763                           ;decode_AX25.c: 193: }
  3764                           ;decode_AX25.c: 194: }
  3765                           ;decode_AX25.c: 195: if(buf == ("JQ1ZHX"[1] << 1)){
  3766  062C  3009               	movlw	low (((STR_7+1)-__stringbase)| (0+32768))
  3767  062D  0084               	movwf	4
  3768  062E  120A  158A  200A  120A  118A  	fcall	stringdir
  3769  0633  00F6               	movwf	??_waitFlag
  3770  0634  01F7               	clrf	??_waitFlag+1
  3771  0635  1003               	clrc
  3772  0636  0DF6               	rlf	??_waitFlag,f
  3773  0637  0DF7               	rlf	??_waitFlag+1,f
  3774  0638  083C               	movf	waitFlag@buf,w
  3775  0639  00F8               	movwf	??_waitFlag+2
  3776  063A  01F9               	clrf	??_waitFlag+3
  3777  063B  0877               	movf	??_waitFlag+1,w
  3778  063C  0679               	xorwf	??_waitFlag+3,w
  3779  063D  1D03               	skipz
  3780  063E  2E41               	goto	u2485
  3781  063F  0876               	movf	??_waitFlag,w
  3782  0640  0678               	xorwf	??_waitFlag+2,w
  3783  0641                     u2485:	
  3784  0641  1D03               	skipz
  3785  0642  2FB0               	goto	l3050
  3786                           
  3787                           ;decode_AX25.c: 196: dPacket[dPacketnum] = buf;
  3788  0643  083C               	movf	waitFlag@buf,w
  3789  0644  00F6               	movwf	??_waitFlag
  3790  0645  0866               	movf	_dPacketnum,w
  3791  0646  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3792  0647  0084               	movwf	4
  3793  0648  0876               	movf	??_waitFlag,w
  3794  0649  1783               	bsf	3,7	;select IRP bank3
  3795  064A  0080               	movwf	0
  3796                           
  3797                           ;decode_AX25.c: 197: dPacketnum ++;
  3798  064B  3001               	movlw	1
  3799  064C  07E6               	addwf	_dPacketnum,f
  3800  064D  1803               	skipnc
  3801  064E  0AE7               	incf	_dPacketnum+1,f
  3802  064F  3000               	movlw	0
  3803  0650  07E7               	addwf	_dPacketnum+1,f
  3804                           
  3805                           ;decode_AX25.c: 198: for(UINT j=0;j<8;j++){
  3806  0651  01B2               	clrf	waitFlag@j_116
  3807  0652  01B3               	clrf	waitFlag@j_116+1
  3808  0653  3000               	movlw	0
  3809  0654  0233               	subwf	waitFlag@j_116+1,w
  3810  0655  3008               	movlw	8
  3811  0656  1903               	skipnz
  3812  0657  0232               	subwf	waitFlag@j_116,w
  3813  0658  1803               	btfsc	3,0
  3814  0659  2E82               	goto	l2954
  3815  065A                     l2940:	
  3816                           
  3817                           ;decode_AX25.c: 199: flag_judge = getbit();
  3818  065A  120A  158A  2284  120A  118A  	fcall	_getbit
  3819  065F  0871               	movf	?_getbit+1,w
  3820  0660  1283               	bcf	3,5	;RP0=0, select bank0
  3821  0661  1303               	bcf	3,6	;RP1=0, select bank0
  3822  0662  00BB               	movwf	waitFlag@flag_judge+1
  3823  0663  0870               	movf	?_getbit,w
  3824  0664  00BA               	movwf	waitFlag@flag_judge
  3825                           
  3826                           ;decode_AX25.c: 200: buf = buf >> 1;
  3827  0665  083C               	movf	waitFlag@buf,w
  3828  0666  00F6               	movwf	??_waitFlag
  3829  0667  1003               	clrc
  3830  0668  0C76               	rrf	??_waitFlag,w
  3831  0669  00F7               	movwf	??_waitFlag+1
  3832  066A  0877               	movf	??_waitFlag+1,w
  3833  066B  00BC               	movwf	waitFlag@buf
  3834                           
  3835                           ;decode_AX25.c: 202: buf = buf | 0x00;
  3836  066C  083A               	movf	waitFlag@flag_judge,w
  3837  066D  043B               	iorwf	waitFlag@flag_judge+1,w
  3838  066E  1903               	btfsc	3,2
  3839  066F  2E75               	goto	l2950
  3840                           
  3841                           ;decode_AX25.c: 204: buf = buf | 0x80;
  3842                           
  3843                           ;decode_AX25.c: 203: }else{
  3844  0670  083C               	movf	waitFlag@buf,w
  3845  0671  3880               	iorlw	128
  3846  0672  00F6               	movwf	??_waitFlag
  3847  0673  0876               	movf	??_waitFlag,w
  3848  0674  00BC               	movwf	waitFlag@buf
  3849  0675                     l2950:	
  3850  0675  3001               	movlw	1
  3851  0676  07B2               	addwf	waitFlag@j_116,f
  3852  0677  1803               	skipnc
  3853  0678  0AB3               	incf	waitFlag@j_116+1,f
  3854  0679  3000               	movlw	0
  3855  067A  07B3               	addwf	waitFlag@j_116+1,f
  3856  067B  3000               	movlw	0
  3857  067C  0233               	subwf	waitFlag@j_116+1,w
  3858  067D  3008               	movlw	8
  3859  067E  1903               	skipnz
  3860  067F  0232               	subwf	waitFlag@j_116,w
  3861  0680  1C03               	skipc
  3862  0681  2E5A               	goto	l2940
  3863  0682                     l2954:	
  3864                           
  3865                           ;decode_AX25.c: 205: }
  3866                           ;decode_AX25.c: 206: }
  3867                           ;decode_AX25.c: 207: if(buf == ("JQ1ZHX"[2] << 1)){
  3868  0682  300A               	movlw	low (((STR_7+2)-__stringbase)| (0+32768))
  3869  0683  0084               	movwf	4
  3870  0684  120A  158A  200A  120A  118A  	fcall	stringdir
  3871  0689  00F6               	movwf	??_waitFlag
  3872  068A  01F7               	clrf	??_waitFlag+1
  3873  068B  1003               	clrc
  3874  068C  0DF6               	rlf	??_waitFlag,f
  3875  068D  0DF7               	rlf	??_waitFlag+1,f
  3876  068E  083C               	movf	waitFlag@buf,w
  3877  068F  00F8               	movwf	??_waitFlag+2
  3878  0690  01F9               	clrf	??_waitFlag+3
  3879  0691  0877               	movf	??_waitFlag+1,w
  3880  0692  0679               	xorwf	??_waitFlag+3,w
  3881  0693  1D03               	skipz
  3882  0694  2E97               	goto	u2525
  3883  0695  0876               	movf	??_waitFlag,w
  3884  0696  0678               	xorwf	??_waitFlag+2,w
  3885  0697                     u2525:	
  3886  0697  1D03               	skipz
  3887  0698  2FB0               	goto	l3050
  3888                           
  3889                           ;decode_AX25.c: 208: dPacket[dPacketnum] = buf;
  3890  0699  083C               	movf	waitFlag@buf,w
  3891  069A  00F6               	movwf	??_waitFlag
  3892  069B  0866               	movf	_dPacketnum,w
  3893  069C  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3894  069D  0084               	movwf	4
  3895  069E  0876               	movf	??_waitFlag,w
  3896  069F  1783               	bsf	3,7	;select IRP bank3
  3897  06A0  0080               	movwf	0
  3898                           
  3899                           ;decode_AX25.c: 209: dPacketnum ++;
  3900  06A1  3001               	movlw	1
  3901  06A2  07E6               	addwf	_dPacketnum,f
  3902  06A3  1803               	skipnc
  3903  06A4  0AE7               	incf	_dPacketnum+1,f
  3904  06A5  3000               	movlw	0
  3905  06A6  07E7               	addwf	_dPacketnum+1,f
  3906                           
  3907                           ;decode_AX25.c: 210: for(UINT j=0;j<8;j++){
  3908  06A7  01B4               	clrf	waitFlag@j_118
  3909  06A8  01B5               	clrf	waitFlag@j_118+1
  3910  06A9  3000               	movlw	0
  3911  06AA  0235               	subwf	waitFlag@j_118+1,w
  3912  06AB  3008               	movlw	8
  3913  06AC  1903               	skipnz
  3914  06AD  0234               	subwf	waitFlag@j_118,w
  3915  06AE  1803               	btfsc	3,0
  3916  06AF  2ED8               	goto	l2980
  3917  06B0                     l2966:	
  3918                           
  3919                           ;decode_AX25.c: 211: flag_judge = getbit();
  3920  06B0  120A  158A  2284  120A  118A  	fcall	_getbit
  3921  06B5  0871               	movf	?_getbit+1,w
  3922  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  3923  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  3924  06B8  00BB               	movwf	waitFlag@flag_judge+1
  3925  06B9  0870               	movf	?_getbit,w
  3926  06BA  00BA               	movwf	waitFlag@flag_judge
  3927                           
  3928                           ;decode_AX25.c: 212: buf = buf >> 1;
  3929  06BB  083C               	movf	waitFlag@buf,w
  3930  06BC  00F6               	movwf	??_waitFlag
  3931  06BD  1003               	clrc
  3932  06BE  0C76               	rrf	??_waitFlag,w
  3933  06BF  00F7               	movwf	??_waitFlag+1
  3934  06C0  0877               	movf	??_waitFlag+1,w
  3935  06C1  00BC               	movwf	waitFlag@buf
  3936                           
  3937                           ;decode_AX25.c: 214: buf = buf | 0x00;
  3938  06C2  083A               	movf	waitFlag@flag_judge,w
  3939  06C3  043B               	iorwf	waitFlag@flag_judge+1,w
  3940  06C4  1903               	btfsc	3,2
  3941  06C5  2ECB               	goto	l2976
  3942                           
  3943                           ;decode_AX25.c: 216: buf = buf | 0x80;
  3944                           
  3945                           ;decode_AX25.c: 215: }else{
  3946  06C6  083C               	movf	waitFlag@buf,w
  3947  06C7  3880               	iorlw	128
  3948  06C8  00F6               	movwf	??_waitFlag
  3949  06C9  0876               	movf	??_waitFlag,w
  3950  06CA  00BC               	movwf	waitFlag@buf
  3951  06CB                     l2976:	
  3952  06CB  3001               	movlw	1
  3953  06CC  07B4               	addwf	waitFlag@j_118,f
  3954  06CD  1803               	skipnc
  3955  06CE  0AB5               	incf	waitFlag@j_118+1,f
  3956  06CF  3000               	movlw	0
  3957  06D0  07B5               	addwf	waitFlag@j_118+1,f
  3958  06D1  3000               	movlw	0
  3959  06D2  0235               	subwf	waitFlag@j_118+1,w
  3960  06D3  3008               	movlw	8
  3961  06D4  1903               	skipnz
  3962  06D5  0234               	subwf	waitFlag@j_118,w
  3963  06D6  1C03               	skipc
  3964  06D7  2EB0               	goto	l2966
  3965  06D8                     l2980:	
  3966                           
  3967                           ;decode_AX25.c: 217: }
  3968                           ;decode_AX25.c: 218: }
  3969                           ;decode_AX25.c: 219: if(buf == ("JQ1ZHX"[3] << 1)){
  3970  06D8  300B               	movlw	low (((STR_7+3)-__stringbase)| (0+32768))
  3971  06D9  0084               	movwf	4
  3972  06DA  120A  158A  200A  120A  118A  	fcall	stringdir
  3973  06DF  00F6               	movwf	??_waitFlag
  3974  06E0  01F7               	clrf	??_waitFlag+1
  3975  06E1  1003               	clrc
  3976  06E2  0DF6               	rlf	??_waitFlag,f
  3977  06E3  0DF7               	rlf	??_waitFlag+1,f
  3978  06E4  083C               	movf	waitFlag@buf,w
  3979  06E5  00F8               	movwf	??_waitFlag+2
  3980  06E6  01F9               	clrf	??_waitFlag+3
  3981  06E7  0877               	movf	??_waitFlag+1,w
  3982  06E8  0679               	xorwf	??_waitFlag+3,w
  3983  06E9  1D03               	skipz
  3984  06EA  2EED               	goto	u2565
  3985  06EB  0876               	movf	??_waitFlag,w
  3986  06EC  0678               	xorwf	??_waitFlag+2,w
  3987  06ED                     u2565:	
  3988  06ED  1D03               	skipz
  3989  06EE  2FB0               	goto	l3050
  3990                           
  3991                           ;decode_AX25.c: 220: dPacket[dPacketnum] = buf;
  3992  06EF  083C               	movf	waitFlag@buf,w
  3993  06F0  00F6               	movwf	??_waitFlag
  3994  06F1  0866               	movf	_dPacketnum,w
  3995  06F2  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3996  06F3  0084               	movwf	4
  3997  06F4  0876               	movf	??_waitFlag,w
  3998  06F5  1783               	bsf	3,7	;select IRP bank3
  3999  06F6  0080               	movwf	0
  4000                           
  4001                           ;decode_AX25.c: 221: dPacketnum ++;
  4002  06F7  3001               	movlw	1
  4003  06F8  07E6               	addwf	_dPacketnum,f
  4004  06F9  1803               	skipnc
  4005  06FA  0AE7               	incf	_dPacketnum+1,f
  4006  06FB  3000               	movlw	0
  4007  06FC  07E7               	addwf	_dPacketnum+1,f
  4008                           
  4009                           ;decode_AX25.c: 222: for(UINT j=0;j<8;j++){
  4010  06FD  01B6               	clrf	waitFlag@j_120
  4011  06FE  01B7               	clrf	waitFlag@j_120+1
  4012  06FF  3000               	movlw	0
  4013  0700  0237               	subwf	waitFlag@j_120+1,w
  4014  0701  3008               	movlw	8
  4015  0702  1903               	skipnz
  4016  0703  0236               	subwf	waitFlag@j_120,w
  4017  0704  1803               	btfsc	3,0
  4018  0705  2F2E               	goto	l3006
  4019  0706                     l2992:	
  4020                           
  4021                           ;decode_AX25.c: 223: flag_judge = getbit();
  4022  0706  120A  158A  2284  120A  118A  	fcall	_getbit
  4023  070B  0871               	movf	?_getbit+1,w
  4024  070C  1283               	bcf	3,5	;RP0=0, select bank0
  4025  070D  1303               	bcf	3,6	;RP1=0, select bank0
  4026  070E  00BB               	movwf	waitFlag@flag_judge+1
  4027  070F  0870               	movf	?_getbit,w
  4028  0710  00BA               	movwf	waitFlag@flag_judge
  4029                           
  4030                           ;decode_AX25.c: 224: buf = buf >> 1;
  4031  0711  083C               	movf	waitFlag@buf,w
  4032  0712  00F6               	movwf	??_waitFlag
  4033  0713  1003               	clrc
  4034  0714  0C76               	rrf	??_waitFlag,w
  4035  0715  00F7               	movwf	??_waitFlag+1
  4036  0716  0877               	movf	??_waitFlag+1,w
  4037  0717  00BC               	movwf	waitFlag@buf
  4038                           
  4039                           ;decode_AX25.c: 226: buf = buf | 0x00;
  4040  0718  083A               	movf	waitFlag@flag_judge,w
  4041  0719  043B               	iorwf	waitFlag@flag_judge+1,w
  4042  071A  1903               	btfsc	3,2
  4043  071B  2F21               	goto	l3002
  4044                           
  4045                           ;decode_AX25.c: 228: buf = buf | 0x80;
  4046                           
  4047                           ;decode_AX25.c: 227: }else{
  4048  071C  083C               	movf	waitFlag@buf,w
  4049  071D  3880               	iorlw	128
  4050  071E  00F6               	movwf	??_waitFlag
  4051  071F  0876               	movf	??_waitFlag,w
  4052  0720  00BC               	movwf	waitFlag@buf
  4053  0721                     l3002:	
  4054  0721  3001               	movlw	1
  4055  0722  07B6               	addwf	waitFlag@j_120,f
  4056  0723  1803               	skipnc
  4057  0724  0AB7               	incf	waitFlag@j_120+1,f
  4058  0725  3000               	movlw	0
  4059  0726  07B7               	addwf	waitFlag@j_120+1,f
  4060  0727  3000               	movlw	0
  4061  0728  0237               	subwf	waitFlag@j_120+1,w
  4062  0729  3008               	movlw	8
  4063  072A  1903               	skipnz
  4064  072B  0236               	subwf	waitFlag@j_120,w
  4065  072C  1C03               	skipc
  4066  072D  2F06               	goto	l2992
  4067  072E                     l3006:	
  4068                           
  4069                           ;decode_AX25.c: 229: }
  4070                           ;decode_AX25.c: 230: }
  4071                           ;decode_AX25.c: 231: if(buf == ("JQ1ZHX"[4] << 1)){
  4072  072E  300C               	movlw	low (((STR_7+4)-__stringbase)| (0+32768))
  4073  072F  0084               	movwf	4
  4074  0730  120A  158A  200A  120A  118A  	fcall	stringdir
  4075  0735  00F6               	movwf	??_waitFlag
  4076  0736  01F7               	clrf	??_waitFlag+1
  4077  0737  1003               	clrc
  4078  0738  0DF6               	rlf	??_waitFlag,f
  4079  0739  0DF7               	rlf	??_waitFlag+1,f
  4080  073A  083C               	movf	waitFlag@buf,w
  4081  073B  00F8               	movwf	??_waitFlag+2
  4082  073C  01F9               	clrf	??_waitFlag+3
  4083  073D  0877               	movf	??_waitFlag+1,w
  4084  073E  0679               	xorwf	??_waitFlag+3,w
  4085  073F  1D03               	skipz
  4086  0740  2F43               	goto	u2605
  4087  0741  0876               	movf	??_waitFlag,w
  4088  0742  0678               	xorwf	??_waitFlag+2,w
  4089  0743                     u2605:	
  4090  0743  1D03               	skipz
  4091  0744  2FB0               	goto	l3050
  4092                           
  4093                           ;decode_AX25.c: 232: dPacket[dPacketnum] = buf;
  4094  0745  083C               	movf	waitFlag@buf,w
  4095  0746  00F6               	movwf	??_waitFlag
  4096  0747  0866               	movf	_dPacketnum,w
  4097  0748  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4098  0749  0084               	movwf	4
  4099  074A  0876               	movf	??_waitFlag,w
  4100  074B  1783               	bsf	3,7	;select IRP bank3
  4101  074C  0080               	movwf	0
  4102                           
  4103                           ;decode_AX25.c: 233: dPacketnum ++;
  4104  074D  3001               	movlw	1
  4105  074E  07E6               	addwf	_dPacketnum,f
  4106  074F  1803               	skipnc
  4107  0750  0AE7               	incf	_dPacketnum+1,f
  4108  0751  3000               	movlw	0
  4109  0752  07E7               	addwf	_dPacketnum+1,f
  4110                           
  4111                           ;decode_AX25.c: 234: for(UINT j=0;j<8;j++){
  4112  0753  01B8               	clrf	waitFlag@j_122
  4113  0754  01B9               	clrf	waitFlag@j_122+1
  4114  0755  3000               	movlw	0
  4115  0756  0239               	subwf	waitFlag@j_122+1,w
  4116  0757  3008               	movlw	8
  4117  0758  1903               	skipnz
  4118  0759  0238               	subwf	waitFlag@j_122,w
  4119  075A  1803               	btfsc	3,0
  4120  075B  2F84               	goto	l3032
  4121  075C                     l3018:	
  4122                           
  4123                           ;decode_AX25.c: 235: flag_judge = getbit();
  4124  075C  120A  158A  2284  120A  118A  	fcall	_getbit
  4125  0761  0871               	movf	?_getbit+1,w
  4126  0762  1283               	bcf	3,5	;RP0=0, select bank0
  4127  0763  1303               	bcf	3,6	;RP1=0, select bank0
  4128  0764  00BB               	movwf	waitFlag@flag_judge+1
  4129  0765  0870               	movf	?_getbit,w
  4130  0766  00BA               	movwf	waitFlag@flag_judge
  4131                           
  4132                           ;decode_AX25.c: 236: buf = buf >> 1;
  4133  0767  083C               	movf	waitFlag@buf,w
  4134  0768  00F6               	movwf	??_waitFlag
  4135  0769  1003               	clrc
  4136  076A  0C76               	rrf	??_waitFlag,w
  4137  076B  00F7               	movwf	??_waitFlag+1
  4138  076C  0877               	movf	??_waitFlag+1,w
  4139  076D  00BC               	movwf	waitFlag@buf
  4140                           
  4141                           ;decode_AX25.c: 238: buf = buf | 0x00;
  4142  076E  083A               	movf	waitFlag@flag_judge,w
  4143  076F  043B               	iorwf	waitFlag@flag_judge+1,w
  4144  0770  1903               	btfsc	3,2
  4145  0771  2F77               	goto	l3028
  4146                           
  4147                           ;decode_AX25.c: 240: buf = buf | 0x80;
  4148                           
  4149                           ;decode_AX25.c: 239: }else{
  4150  0772  083C               	movf	waitFlag@buf,w
  4151  0773  3880               	iorlw	128
  4152  0774  00F6               	movwf	??_waitFlag
  4153  0775  0876               	movf	??_waitFlag,w
  4154  0776  00BC               	movwf	waitFlag@buf
  4155  0777                     l3028:	
  4156  0777  3001               	movlw	1
  4157  0778  07B8               	addwf	waitFlag@j_122,f
  4158  0779  1803               	skipnc
  4159  077A  0AB9               	incf	waitFlag@j_122+1,f
  4160  077B  3000               	movlw	0
  4161  077C  07B9               	addwf	waitFlag@j_122+1,f
  4162  077D  3000               	movlw	0
  4163  077E  0239               	subwf	waitFlag@j_122+1,w
  4164  077F  3008               	movlw	8
  4165  0780  1903               	skipnz
  4166  0781  0238               	subwf	waitFlag@j_122,w
  4167  0782  1C03               	skipc
  4168  0783  2F5C               	goto	l3018
  4169  0784                     l3032:	
  4170                           
  4171                           ;decode_AX25.c: 241: }
  4172                           ;decode_AX25.c: 242: }
  4173                           ;decode_AX25.c: 243: if(buf == ("JQ1ZHX"[5] << 1)){
  4174  0784  300D               	movlw	low (((STR_7+5)-__stringbase)| (0+32768))
  4175  0785  0084               	movwf	4
  4176  0786  120A  158A  200A  120A  118A  	fcall	stringdir
  4177  078B  00F6               	movwf	??_waitFlag
  4178  078C  01F7               	clrf	??_waitFlag+1
  4179  078D  1003               	clrc
  4180  078E  0DF6               	rlf	??_waitFlag,f
  4181  078F  0DF7               	rlf	??_waitFlag+1,f
  4182  0790  083C               	movf	waitFlag@buf,w
  4183  0791  00F8               	movwf	??_waitFlag+2
  4184  0792  01F9               	clrf	??_waitFlag+3
  4185  0793  0877               	movf	??_waitFlag+1,w
  4186  0794  0679               	xorwf	??_waitFlag+3,w
  4187  0795  1D03               	skipz
  4188  0796  2F99               	goto	u2645
  4189  0797  0876               	movf	??_waitFlag,w
  4190  0798  0678               	xorwf	??_waitFlag+2,w
  4191  0799                     u2645:	
  4192  0799  1D03               	skipz
  4193  079A  2FB0               	goto	l3050
  4194                           
  4195                           ;decode_AX25.c: 244: dPacket[dPacketnum] = buf;
  4196  079B  083C               	movf	waitFlag@buf,w
  4197  079C  00F6               	movwf	??_waitFlag
  4198  079D  0866               	movf	_dPacketnum,w
  4199  079E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4200  079F  0084               	movwf	4
  4201  07A0  0876               	movf	??_waitFlag,w
  4202  07A1  1783               	bsf	3,7	;select IRP bank3
  4203  07A2  0080               	movwf	0
  4204                           
  4205                           ;decode_AX25.c: 245: dPacketnum ++;
  4206  07A3  3001               	movlw	1
  4207  07A4  07E6               	addwf	_dPacketnum,f
  4208  07A5  1803               	skipnc
  4209  07A6  0AE7               	incf	_dPacketnum+1,f
  4210  07A7  3000               	movlw	0
  4211  07A8  07E7               	addwf	_dPacketnum+1,f
  4212                           
  4213                           ;decode_AX25.c: 246: rcv_state ++;
  4214  07A9  3001               	movlw	1
  4215  07AA  07EA               	addwf	_rcv_state,f
  4216  07AB  1803               	skipnc
  4217  07AC  0AEB               	incf	_rcv_state+1,f
  4218  07AD  3000               	movlw	0
  4219  07AE  07EB               	addwf	_rcv_state+1,f
  4220                           
  4221                           ;decode_AX25.c: 247: }else{
  4222  07AF  2B2F               	goto	l3052
  4223  07B0                     l3050:	
  4224                           ;decode_AX25.c: 266: }
  4225                           ;decode_AX25.c: 267: }else{
  4226                           
  4227                           ;decode_AX25.c: 265: rcv_state = 0;
  4228                           
  4229                           ;decode_AX25.c: 264: dPacketnum = 0;
  4230                           
  4231                           ;decode_AX25.c: 262: }
  4232                           ;decode_AX25.c: 263: }else{
  4233                           
  4234                           ;decode_AX25.c: 261: rcv_state = 0;
  4235                           
  4236                           ;decode_AX25.c: 260: dPacketnum = 0;
  4237                           
  4238                           ;decode_AX25.c: 258: }
  4239                           ;decode_AX25.c: 259: }else{
  4240                           
  4241                           ;decode_AX25.c: 257: rcv_state = 0;
  4242                           
  4243                           ;decode_AX25.c: 256: dPacketnum = 0;
  4244                           
  4245                           ;decode_AX25.c: 254: }
  4246                           ;decode_AX25.c: 255: }else{
  4247                           
  4248                           ;decode_AX25.c: 253: rcv_state = 0;
  4249                           
  4250                           ;decode_AX25.c: 252: dPacketnum = 0;
  4251                           
  4252                           ;decode_AX25.c: 250: }
  4253                           ;decode_AX25.c: 251: }else{
  4254                           
  4255                           ;decode_AX25.c: 249: rcv_state = 0;
  4256                           
  4257                           ;decode_AX25.c: 248: dPacketnum = 0;
  4258                           
  4259                           
  4260                           ;decode_AX25.c: 268: dPacketnum = 0;
  4261  07B0  01E6               	clrf	_dPacketnum
  4262  07B1  01E7               	clrf	_dPacketnum+1
  4263  07B2  2B2D               	goto	L6
  4264  07B3                     __end_of_waitFlag:	
  4265                           
  4266                           	psect	text6
  4267  0C2B                     __ptext6:	
  4268 ;; *************** function _getdata *****************
  4269 ;; Defined at:
  4270 ;;		line 276 in file "decode_AX25.c"
  4271 ;; Parameters:    Size  Location     Type
  4272 ;;		None
  4273 ;; Auto vars:     Size  Location     Type
  4274 ;;  dbitstatus      2    4[BANK0 ] unsigned int 
  4275 ;;  dstuff          2    2[BANK0 ] unsigned int 
  4276 ;;  bufstore_cou    2    0[BANK0 ] unsigned int 
  4277 ;;  buf             1    6[BANK0 ] unsigned char 
  4278 ;;  dammy_data      1    0        unsigned char 
  4279 ;; Return value:  Size  Location     Type
  4280 ;;                  1    wreg      void 
  4281 ;; Registers used:
  4282 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4283 ;; Tracked objects:
  4284 ;;		On entry : 0/0
  4285 ;;		On exit  : 0/0
  4286 ;;		Unchanged: 0/0
  4287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4288 ;;      Params:         0       0       0       0       0
  4289 ;;      Locals:         0       7       0       0       0
  4290 ;;      Temps:          2       0       0       0       0
  4291 ;;      Totals:         2       7       0       0       0
  4292 ;;Total ram usage:        9 bytes
  4293 ;; Hardware stack levels used:    1
  4294 ;; Hardware stack levels required when called:    1
  4295 ;; This function calls:
  4296 ;;		_getbit
  4297 ;; This function is called by:
  4298 ;;		_ReceivePacket_data
  4299 ;;		_ReceivePacket
  4300 ;; This function uses a non-reentrant model
  4301 ;;
  4302                           
  4303                           
  4304                           ;psect for function _getdata
  4305  0C2B                     _getdata:	
  4306                           
  4307                           ;decode_AX25.c: 277: UBYTE buf = 0x00;
  4308                           
  4309                           ;incstack = 0
  4310                           ; Regs used in _getdata: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4311  0C2B  1283               	bcf	3,5	;RP0=0, select bank0
  4312  0C2C  1303               	bcf	3,6	;RP1=0, select bank0
  4313  0C2D  01A6               	clrf	getdata@buf
  4314                           
  4315                           ;decode_AX25.c: 278: UINT dstuff = 0;
  4316  0C2E  01A2               	clrf	getdata@dstuff
  4317  0C2F  01A3               	clrf	getdata@dstuff+1
  4318                           
  4319                           ;decode_AX25.c: 279: UBYTE dammy_data;
  4320                           ;decode_AX25.c: 280: UINT bufstore_counter = 0;
  4321  0C30  01A0               	clrf	getdata@bufstore_counter
  4322  0C31  01A1               	clrf	getdata@bufstore_counter+1
  4323                           
  4324                           ;decode_AX25.c: 281: UINT dbitstatus = 0;
  4325  0C32  01A4               	clrf	getdata@dbitstatus
  4326  0C33  01A5               	clrf	getdata@dbitstatus+1
  4327  0C34                     l3086:	
  4328                           ;decode_AX25.c: 283: while(rcv_state == 2){
  4329                           
  4330  0C34  3002               	movlw	2
  4331  0C35  066A               	xorwf	_rcv_state,w
  4332  0C36  046B               	iorwf	_rcv_state+1,w
  4333  0C37  1D03               	btfss	3,2
  4334  0C38  0008               	return
  4335                           
  4336                           ;decode_AX25.c: 284: dbitstatus = getbit();
  4337  0C39  120A  158A  2284  120A  158A  	fcall	_getbit
  4338  0C3E  0871               	movf	?_getbit+1,w
  4339  0C3F  1283               	bcf	3,5	;RP0=0, select bank0
  4340  0C40  1303               	bcf	3,6	;RP1=0, select bank0
  4341  0C41  00A5               	movwf	getdata@dbitstatus+1
  4342  0C42  0870               	movf	?_getbit,w
  4343  0C43  00A4               	movwf	getdata@dbitstatus
  4344                           
  4345                           ;decode_AX25.c: 285: if(dstuff == 5){
  4346  0C44  3005               	movlw	5
  4347  0C45  0622               	xorwf	getdata@dstuff,w
  4348  0C46  0423               	iorwf	getdata@dstuff+1,w
  4349  0C47  1D03               	btfss	3,2
  4350  0C48  2C57               	goto	l3068
  4351                           
  4352                           ;decode_AX25.c: 286: if(dbitstatus == 1){
  4353  0C49  0324               	decf	getdata@dbitstatus,w
  4354  0C4A  0425               	iorwf	getdata@dbitstatus+1,w
  4355  0C4B  1D03               	btfss	3,2
  4356  0C4C  2C54               	goto	l3066
  4357                           
  4358                           ;decode_AX25.c: 287: rcv_state ++;
  4359  0C4D  3001               	movlw	1
  4360  0C4E  07EA               	addwf	_rcv_state,f
  4361  0C4F  1803               	skipnc
  4362  0C50  0AEB               	incf	_rcv_state+1,f
  4363  0C51  3000               	movlw	0
  4364  0C52  07EB               	addwf	_rcv_state+1,f
  4365                           
  4366                           ;decode_AX25.c: 288: break;
  4367  0C53  0008               	return
  4368  0C54                     l3066:	
  4369                           ;decode_AX25.c: 289: }else{
  4370                           
  4371                           
  4372                           ;decode_AX25.c: 290: dstuff = 0;
  4373  0C54  01A2               	clrf	getdata@dstuff
  4374  0C55  01A3               	clrf	getdata@dstuff+1
  4375                           
  4376                           ;decode_AX25.c: 291: }
  4377                           ;decode_AX25.c: 292: }else{
  4378  0C56  2C34               	goto	l3086
  4379  0C57                     l3068:	
  4380                           
  4381                           ;decode_AX25.c: 293: buf = buf >> 1;
  4382  0C57  0826               	movf	getdata@buf,w
  4383  0C58  00F6               	movwf	??_getdata
  4384  0C59  1003               	clrc
  4385  0C5A  0C76               	rrf	??_getdata,w
  4386  0C5B  00F7               	movwf	??_getdata+1
  4387  0C5C  0877               	movf	??_getdata+1,w
  4388  0C5D  00A6               	movwf	getdata@buf
  4389                           
  4390                           ;decode_AX25.c: 295: buf = buf | 0x00;
  4391  0C5E  0824               	movf	getdata@dbitstatus,w
  4392  0C5F  0425               	iorwf	getdata@dbitstatus+1,w
  4393  0C60  1D03               	btfss	3,2
  4394  0C61  2C65               	goto	l3072
  4395                           
  4396                           ;decode_AX25.c: 296: dstuff = 0;
  4397  0C62  01A2               	clrf	getdata@dstuff
  4398  0C63  01A3               	clrf	getdata@dstuff+1
  4399                           
  4400                           ;decode_AX25.c: 297: }else{
  4401  0C64  2C70               	goto	l3076
  4402  0C65                     l3072:	
  4403                           
  4404                           ;decode_AX25.c: 298: buf = buf | 0x80;
  4405  0C65  0826               	movf	getdata@buf,w
  4406  0C66  3880               	iorlw	128
  4407  0C67  00F6               	movwf	??_getdata
  4408  0C68  0876               	movf	??_getdata,w
  4409  0C69  00A6               	movwf	getdata@buf
  4410                           
  4411                           ;decode_AX25.c: 299: dstuff ++;
  4412  0C6A  3001               	movlw	1
  4413  0C6B  07A2               	addwf	getdata@dstuff,f
  4414  0C6C  1803               	skipnc
  4415  0C6D  0AA3               	incf	getdata@dstuff+1,f
  4416  0C6E  3000               	movlw	0
  4417  0C6F  07A3               	addwf	getdata@dstuff+1,f
  4418  0C70                     l3076:	
  4419                           
  4420                           ;decode_AX25.c: 300: }
  4421                           ;decode_AX25.c: 301: bufstore_counter ++;
  4422  0C70  3001               	movlw	1
  4423  0C71  07A0               	addwf	getdata@bufstore_counter,f
  4424  0C72  1803               	skipnc
  4425  0C73  0AA1               	incf	getdata@bufstore_counter+1,f
  4426  0C74  3000               	movlw	0
  4427  0C75  07A1               	addwf	getdata@bufstore_counter+1,f
  4428                           
  4429                           ;decode_AX25.c: 302: if(bufstore_counter == 8){
  4430  0C76  3008               	movlw	8
  4431  0C77  0620               	xorwf	getdata@bufstore_counter,w
  4432  0C78  0421               	iorwf	getdata@bufstore_counter+1,w
  4433  0C79  1D03               	btfss	3,2
  4434  0C7A  2C34               	goto	l3086
  4435                           
  4436                           ;decode_AX25.c: 303: bufstore_counter = 0;
  4437  0C7B  01A0               	clrf	getdata@bufstore_counter
  4438  0C7C  01A1               	clrf	getdata@bufstore_counter+1
  4439                           
  4440                           ;decode_AX25.c: 304: dPacket[dPacketnum] = buf;
  4441  0C7D  0826               	movf	getdata@buf,w
  4442  0C7E  00F6               	movwf	??_getdata
  4443  0C7F  0866               	movf	_dPacketnum,w
  4444  0C80  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4445  0C81  0084               	movwf	4
  4446  0C82  0876               	movf	??_getdata,w
  4447  0C83  1783               	bsf	3,7	;select IRP bank3
  4448  0C84  0080               	movwf	0
  4449                           
  4450                           ;decode_AX25.c: 305: dPacketnum ++;
  4451  0C85  3001               	movlw	1
  4452  0C86  07E6               	addwf	_dPacketnum,f
  4453  0C87  1803               	skipnc
  4454  0C88  0AE7               	incf	_dPacketnum+1,f
  4455  0C89  3000               	movlw	0
  4456  0C8A  07E7               	addwf	_dPacketnum+1,f
  4457  0C8B  2C34               	goto	l3086
  4458  0C8C                     __end_of_getdata:	
  4459                           
  4460                           	psect	text7
  4461  0A84                     __ptext7:	
  4462 ;; *************** function _getbit *****************
  4463 ;; Defined at:
  4464 ;;		line 39 in file "decode_AX25.c"
  4465 ;; Parameters:    Size  Location     Type
  4466 ;;		None
  4467 ;; Auto vars:     Size  Location     Type
  4468 ;;  i               2    4[COMMON] unsigned int 
  4469 ;; Return value:  Size  Location     Type
  4470 ;;                  2    0[COMMON] unsigned int 
  4471 ;; Registers used:
  4472 ;;		wreg, status,2, status,0
  4473 ;; Tracked objects:
  4474 ;;		On entry : 0/0
  4475 ;;		On exit  : 0/0
  4476 ;;		Unchanged: 0/0
  4477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4478 ;;      Params:         2       0       0       0       0
  4479 ;;      Locals:         2       0       0       0       0
  4480 ;;      Temps:          2       0       0       0       0
  4481 ;;      Totals:         6       0       0       0       0
  4482 ;;Total ram usage:        6 bytes
  4483 ;; Hardware stack levels used:    1
  4484 ;; This function calls:
  4485 ;;		Nothing
  4486 ;; This function is called by:
  4487 ;;		_waitFlag
  4488 ;;		_getdata
  4489 ;;		_conv_DI_UARTRX
  4490 ;; This function uses a non-reentrant model
  4491 ;;
  4492                           
  4493                           
  4494                           ;psect for function _getbit
  4495  0A84                     _getbit:	
  4496                           
  4497                           ;decode_AX25.c: 40: static UINT oldbit;
  4498                           ;decode_AX25.c: 41: oldbit = RB0;
  4499                           
  4500                           ;incstack = 0
  4501                           ; Regs used in _getbit: [wreg+status,2+status,0]
  4502  0A84  1003               	clrc
  4503  0A85  1283               	bcf	3,5	;RP0=0, select bank0
  4504  0A86  1303               	bcf	3,6	;RP1=0, select bank0
  4505  0A87  1806               	btfsc	6,0	;volatile
  4506  0A88  1403               	setc
  4507  0A89  3000               	movlw	0
  4508  0A8A  1803               	skipnc
  4509  0A8B  3001               	movlw	1
  4510  0A8C  00F2               	movwf	??_getbit
  4511  0A8D  01F3               	clrf	??_getbit+1
  4512  0A8E  0872               	movf	??_getbit,w
  4513  0A8F  1683               	bsf	3,5	;RP0=1, select bank1
  4514  0A90  1303               	bcf	3,6	;RP1=0, select bank1
  4515  0A91  00EC               	movwf	getbit@oldbit^(0+128)
  4516  0A92  0873               	movf	??_getbit+1,w
  4517  0A93  00ED               	movwf	(getbit@oldbit+1)^(0+128)
  4518                           
  4519                           ;decode_AX25.c: 42: for(UINT i=0;i<60;i++){
  4520  0A94  01F4               	clrf	getbit@i
  4521  0A95  01F5               	clrf	getbit@i+1
  4522  0A96  3000               	movlw	0
  4523  0A97  0275               	subwf	getbit@i+1,w
  4524  0A98  303C               	movlw	60
  4525  0A99  1903               	skipnz
  4526  0A9A  0274               	subwf	getbit@i,w
  4527  0A9B  1803               	btfsc	3,0
  4528  0A9C  2AC8               	goto	l2532
  4529                           
  4530                           ;decode_AX25.c: 43: if(RB0 != oldbit){
  4531  0A9D  1003               	clrc
  4532  0A9E                     L7:	
  4533  0A9E  1283               	bcf	3,5	;RP0=0, select bank0
  4534  0A9F  1303               	bcf	3,6	;RP1=0, select bank0
  4535  0AA0  1806               	btfsc	6,0	;volatile
  4536  0AA1  1403               	setc
  4537  0AA2  3000               	movlw	0
  4538  0AA3  1803               	skipnc
  4539  0AA4  3001               	movlw	1
  4540  0AA5  00F2               	movwf	??_getbit
  4541  0AA6  01F3               	clrf	??_getbit+1
  4542  0AA7  1683               	bsf	3,5	;RP0=1, select bank1
  4543  0AA8  1303               	bcf	3,6	;RP1=0, select bank1
  4544  0AA9  086D               	movf	(getbit@oldbit+1)^(0+128),w
  4545  0AAA  0673               	xorwf	??_getbit+1,w
  4546  0AAB  1D03               	skipz
  4547  0AAC  2AAF               	goto	u1875
  4548  0AAD  086C               	movf	getbit@oldbit^(0+128),w
  4549  0AAE  0672               	xorwf	??_getbit,w
  4550  0AAF                     u1875:	
  4551  0AAF  1903               	skipnz
  4552  0AB0  2ABB               	goto	l2530
  4553                           
  4554                           ;decode_AX25.c: 44: _delay((unsigned long)((400)*(10000000/4000000.0)));
  4555  0AB1  30F9               	movlw	249
  4556  0AB2  00F2               	movwf	??_getbit
  4557  0AB3                     u3657:	
  4558  0AB3  0000               	nop
  4559  0AB4  0BF2               	decfsz	??_getbit,f
  4560  0AB5  2AB3               	goto	u3657
  4561  0AB6  2AB7               	nop2	;nop
  4562  0AB7  0000               	nop
  4563                           
  4564                           ;decode_AX25.c: 45: return 0;
  4565  0AB8  01F0               	clrf	?_getbit
  4566  0AB9  01F1               	clrf	?_getbit+1
  4567  0ABA  0008               	return
  4568  0ABB                     l2530:	
  4569  0ABB  3001               	movlw	1
  4570  0ABC  07F4               	addwf	getbit@i,f
  4571  0ABD  1803               	skipnc
  4572  0ABE  0AF5               	incf	getbit@i+1,f
  4573  0ABF  3000               	movlw	0
  4574  0AC0  07F5               	addwf	getbit@i+1,f
  4575  0AC1  3000               	movlw	0
  4576  0AC2  0275               	subwf	getbit@i+1,w
  4577  0AC3  303C               	movlw	60
  4578  0AC4  1903               	skipnz
  4579  0AC5  0274               	subwf	getbit@i,w
  4580  0AC6  1C03               	skipc
  4581  0AC7  2A9E               	goto	L7
  4582  0AC8                     l2532:	
  4583                           
  4584                           ;decode_AX25.c: 46: }
  4585                           ;decode_AX25.c: 47: }
  4586                           ;decode_AX25.c: 48: return 1;
  4587  0AC8  3001               	movlw	1
  4588  0AC9  00F0               	movwf	?_getbit
  4589  0ACA  3000               	movlw	0
  4590  0ACB  00F1               	movwf	?_getbit+1
  4591  0ACC  0008               	return
  4592  0ACD                     __end_of_getbit:	
  4593                           
  4594                           	psect	text8
  4595  0D09                     __ptext8:	
  4596 ;; *************** function _fcscheck *****************
  4597 ;; Defined at:
  4598 ;;		line 311 in file "decode_AX25.c"
  4599 ;; Parameters:    Size  Location     Type
  4600 ;;		None
  4601 ;; Auto vars:     Size  Location     Type
  4602 ;;  i               2    7[COMMON] unsigned int 
  4603 ;;  i               2    5[COMMON] unsigned int 
  4604 ;;  byte            1    9[COMMON] unsigned char 
  4605 ;;  bt              1    4[COMMON] unsigned char 
  4606 ;; Return value:  Size  Location     Type
  4607 ;;                  2    0[COMMON] unsigned int 
  4608 ;; Registers used:
  4609 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4610 ;; Tracked objects:
  4611 ;;		On entry : 0/0
  4612 ;;		On exit  : 0/0
  4613 ;;		Unchanged: 0/0
  4614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4615 ;;      Params:         2       0       0       0       0
  4616 ;;      Locals:         6       0       0       0       0
  4617 ;;      Temps:          2       0       0       0       0
  4618 ;;      Totals:        10       0       0       0       0
  4619 ;;Total ram usage:       10 bytes
  4620 ;; Hardware stack levels used:    1
  4621 ;; This function calls:
  4622 ;;		Nothing
  4623 ;; This function is called by:
  4624 ;;		_ReceivePacket_data
  4625 ;;		_ReceivePacket
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           
  4630                           ;psect for function _fcscheck
  4631  0D09                     _fcscheck:	
  4632                           
  4633                           ;decode_AX25.c: 312: UBYTE bt,byte;
  4634                           ;decode_AX25.c: 313: dfcslo = dfcshi = 0xff;
  4635                           
  4636                           ;incstack = 0
  4637                           ; Regs used in _fcscheck: [wreg-fsr0h+status,2+status,0]
  4638  0D09  30FF               	movlw	255
  4639  0D0A  1283               	bcf	3,5	;RP0=0, select bank0
  4640  0D0B  1303               	bcf	3,6	;RP1=0, select bank0
  4641  0D0C  00EC               	movwf	_dfcshi
  4642  0D0D  00F2               	movwf	??_fcscheck
  4643  0D0E  0872               	movf	??_fcscheck,w
  4644  0D0F  00ED               	movwf	_dfcslo
  4645                           
  4646                           ;decode_AX25.c: 314: while(rcv_state == 3){
  4647  0D10  3003               	movlw	3
  4648  0D11  066A               	xorwf	_rcv_state,w
  4649  0D12  046B               	iorwf	_rcv_state+1,w
  4650  0D13  1D03               	btfss	3,2
  4651  0D14  0008               	return
  4652                           
  4653                           ;decode_AX25.c: 315: for(UINT i=0;i<dPacketnum-2;i++){
  4654  0D15  01F5               	clrf	fcscheck@i
  4655  0D16  01F6               	clrf	fcscheck@i+1
  4656  0D17                     l3114:	
  4657  0D17  0866               	movf	_dPacketnum,w
  4658  0D18  3EFE               	addlw	254
  4659  0D19  00F2               	movwf	??_fcscheck
  4660  0D1A  0867               	movf	_dPacketnum+1,w
  4661  0D1B  1803               	skipnc
  4662  0D1C  3E01               	addlw	1
  4663  0D1D  3EFF               	addlw	255
  4664  0D1E  00F3               	movwf	??_fcscheck+1
  4665  0D1F  0873               	movf	??_fcscheck+1,w
  4666  0D20  0276               	subwf	fcscheck@i+1,w
  4667  0D21  1D03               	skipz
  4668  0D22  2D25               	goto	u2745
  4669  0D23  0872               	movf	??_fcscheck,w
  4670  0D24  0275               	subwf	fcscheck@i,w
  4671  0D25                     u2745:	
  4672  0D25  1803               	btfsc	3,0
  4673  0D26  2D70               	goto	l259
  4674                           
  4675                           ;decode_AX25.c: 316: byte = dPacket[i];
  4676  0D27  0875               	movf	fcscheck@i,w
  4677  0D28  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4678  0D29  0084               	movwf	4
  4679  0D2A  1783               	bsf	3,7	;select IRP bank3
  4680  0D2B  0800               	movf	0,w
  4681  0D2C  00F2               	movwf	??_fcscheck
  4682  0D2D  0872               	movf	??_fcscheck,w
  4683  0D2E  00F9               	movwf	fcscheck@byte
  4684                           
  4685                           ;decode_AX25.c: 317: for(UINT i=0;i<8;i++){
  4686  0D2F  01F7               	clrf	fcscheck@i_134
  4687  0D30  01F8               	clrf	fcscheck@i_134+1
  4688  0D31  3000               	movlw	0
  4689  0D32  0278               	subwf	fcscheck@i_134+1,w
  4690  0D33  3008               	movlw	8
  4691  0D34  1903               	skipnz
  4692  0D35  0277               	subwf	fcscheck@i_134,w
  4693  0D36  1803               	btfsc	3,0
  4694  0D37  2D69               	goto	l3112
  4695  0D38                     l3100:	
  4696                           
  4697                           ;decode_AX25.c: 318: bt = byte & 0x01;
  4698  0D38  0879               	movf	fcscheck@byte,w
  4699  0D39  3901               	andlw	1
  4700  0D3A  00F2               	movwf	??_fcscheck
  4701  0D3B  0872               	movf	??_fcscheck,w
  4702  0D3C  00F4               	movwf	fcscheck@bt
  4703  0D3D  1003               	bcf	3,0	;# 
  4704  0D3E  0CEC               	rrf	_dfcshi,f	;# 
  4705  0D3F  0CED               	rrf	_dfcslo,f	;# 
  4706                           
  4707                           ;decode_AX25.c: 324: if(((STATUS & 0x01)^bt) == 0x01){
  4708  0D40  3001               	movlw	1
  4709  0D41  1283               	bcf	3,5	;RP0=0, select bank0
  4710  0D42  1303               	bcf	3,6	;RP1=0, select bank0
  4711  0D43  0503               	andwf	3,w	;volatile
  4712  0D44  00F2               	movwf	??_fcscheck
  4713  0D45  0874               	movf	fcscheck@bt,w
  4714  0D46  0672               	xorwf	??_fcscheck,w
  4715  0D47  00F3               	movwf	??_fcscheck+1
  4716  0D48  0373               	decf	??_fcscheck+1,w
  4717  0D49  1D03               	btfss	3,2
  4718  0D4A  2D55               	goto	l3106
  4719                           
  4720                           ;decode_AX25.c: 325: dfcshi = dfcshi ^ 0x84;
  4721  0D4B  086C               	movf	_dfcshi,w
  4722  0D4C  3A84               	xorlw	132
  4723  0D4D  00F2               	movwf	??_fcscheck
  4724  0D4E  0872               	movf	??_fcscheck,w
  4725  0D4F  00EC               	movwf	_dfcshi
  4726                           
  4727                           ;decode_AX25.c: 326: dfcslo = dfcslo ^ 0x08;
  4728  0D50  086D               	movf	_dfcslo,w
  4729  0D51  3A08               	xorlw	8
  4730  0D52  00F2               	movwf	??_fcscheck
  4731  0D53  0872               	movf	??_fcscheck,w
  4732  0D54  00ED               	movwf	_dfcslo
  4733  0D55                     l3106:	
  4734                           
  4735                           ;decode_AX25.c: 327: }
  4736                           ;decode_AX25.c: 328: byte = byte >> 1;
  4737  0D55  0879               	movf	fcscheck@byte,w
  4738  0D56  00F2               	movwf	??_fcscheck
  4739  0D57  1003               	clrc
  4740  0D58  0C72               	rrf	??_fcscheck,w
  4741  0D59  00F3               	movwf	??_fcscheck+1
  4742  0D5A  0873               	movf	??_fcscheck+1,w
  4743  0D5B  00F9               	movwf	fcscheck@byte
  4744  0D5C  3001               	movlw	1
  4745  0D5D  07F7               	addwf	fcscheck@i_134,f
  4746  0D5E  1803               	skipnc
  4747  0D5F  0AF8               	incf	fcscheck@i_134+1,f
  4748  0D60  3000               	movlw	0
  4749  0D61  07F8               	addwf	fcscheck@i_134+1,f
  4750  0D62  3000               	movlw	0
  4751  0D63  0278               	subwf	fcscheck@i_134+1,w
  4752  0D64  3008               	movlw	8
  4753  0D65  1903               	skipnz
  4754  0D66  0277               	subwf	fcscheck@i_134,w
  4755  0D67  1C03               	skipc
  4756  0D68  2D38               	goto	l3100
  4757  0D69                     l3112:	
  4758  0D69  3001               	movlw	1
  4759  0D6A  07F5               	addwf	fcscheck@i,f
  4760  0D6B  1803               	skipnc
  4761  0D6C  0AF6               	incf	fcscheck@i+1,f
  4762  0D6D  3000               	movlw	0
  4763  0D6E  07F6               	addwf	fcscheck@i+1,f
  4764  0D6F  2D17               	goto	l3114
  4765  0D70                     l259:	
  4766                           
  4767                           ;decode_AX25.c: 329: }
  4768                           ;decode_AX25.c: 330: }
  4769                           ;decode_AX25.c: 331: dfcslo = dfcslo ^ 0xff;
  4770  0D70  09ED               	comf	_dfcslo,f
  4771                           
  4772                           ;decode_AX25.c: 332: dfcshi = dfcshi ^ 0xff;
  4773  0D71  09EC               	comf	_dfcshi,f
  4774                           
  4775                           ;decode_AX25.c: 335: if((dPacket[dPacketnum-2] == dfcslo) && (dPacket[dPacketnum-1] == d
      +                          fcshi)){
  4776  0D72  0866               	movf	_dPacketnum,w
  4777  0D73  3EFE               	addlw	254
  4778  0D74  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4779  0D75  0084               	movwf	4
  4780  0D76  1783               	bsf	3,7	;select IRP bank3
  4781  0D77  0800               	movf	0,w
  4782  0D78  066D               	xorwf	_dfcslo,w
  4783  0D79  1D03               	skipz
  4784  0D7A  2D88               	goto	l3126
  4785  0D7B  0866               	movf	_dPacketnum,w
  4786  0D7C  3EFF               	addlw	255
  4787  0D7D  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4788  0D7E  0084               	movwf	4
  4789  0D7F  0800               	movf	0,w
  4790  0D80  066C               	xorwf	_dfcshi,w
  4791  0D81  1D03               	skipz
  4792  0D82  2D88               	goto	l3126
  4793                           
  4794                           ;decode_AX25.c: 340: return 1;
  4795  0D83  3001               	movlw	1
  4796  0D84  00F0               	movwf	?_fcscheck
  4797  0D85  3000               	movlw	0
  4798  0D86  00F1               	movwf	?_fcscheck+1
  4799  0D87  0008               	return
  4800  0D88                     l3126:	
  4801                           ;decode_AX25.c: 341: }else{
  4802                           
  4803                           
  4804                           ;decode_AX25.c: 346: return 0;
  4805  0D88  01F0               	clrf	?_fcscheck
  4806  0D89  01F1               	clrf	?_fcscheck+1
  4807  0D8A  0008               	return
  4808  0D8B                     __end_of_fcscheck:	
  4809                           
  4810                           	psect	text9
  4811  17EE                     __ptext9:	
  4812 ;; *************** function _NM_waddress *****************
  4813 ;; Defined at:
  4814 ;;		line 68 in file "UART.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;  NM_wad_heade    1    wreg     unsigned char 
  4817 ;;  whigh_addres    1    1[COMMON] unsigned char 
  4818 ;;  wlow_address    1    2[COMMON] unsigned char 
  4819 ;; Auto vars:     Size  Location     Type
  4820 ;;  NM_wad_heade    1    3[COMMON] unsigned char 
  4821 ;; Return value:  Size  Location     Type
  4822 ;;                  1    wreg      void 
  4823 ;; Registers used:
  4824 ;;		wreg, status,2, status,0, pclath, cstack
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/0
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4830 ;;      Params:         2       0       0       0       0
  4831 ;;      Locals:         1       0       0       0       0
  4832 ;;      Temps:          0       0       0       0       0
  4833 ;;      Totals:         3       0       0       0       0
  4834 ;;Total ram usage:        3 bytes
  4835 ;; Hardware stack levels used:    1
  4836 ;; Hardware stack levels required when called:    1
  4837 ;; This function calls:
  4838 ;;		_putch
  4839 ;; This function is called by:
  4840 ;;		_main
  4841 ;; This function uses a non-reentrant model
  4842 ;;
  4843                           
  4844                           
  4845                           ;psect for function _NM_waddress
  4846  17EE                     _NM_waddress:	
  4847                           
  4848                           ;incstack = 0
  4849                           ; Regs used in _NM_waddress: [wreg+status,2+status,0+pclath+cstack]
  4850                           ;NM_waddress@NM_wad_header stored from wreg
  4851  17EE  00F3               	movwf	NM_waddress@NM_wad_header
  4852                           
  4853                           ;UART.c: 69: putch(NM_wad_header);
  4854  17EF  0873               	movf	NM_waddress@NM_wad_header,w
  4855  17F0  160A  118A  27CD  160A  118A  	fcall	_putch
  4856                           
  4857                           ;UART.c: 70: putch(whigh_address);
  4858  17F5  0871               	movf	NM_waddress@whigh_address,w
  4859  17F6  160A  118A  27CD  160A  118A  	fcall	_putch
  4860                           
  4861                           ;UART.c: 71: putch(wlow_address);
  4862  17FB  0872               	movf	NM_waddress@wlow_address,w
  4863  17FC  160A  118A  27CD   	fcall	_putch
  4864  17FF  0008               	return
  4865  1800                     __end_of_NM_waddress:	
  4866                           
  4867                           	psect	text10
  4868  17CD                     __ptext10:	
  4869 ;; *************** function _putch *****************
  4870 ;; Defined at:
  4871 ;;		line 35 in file "UART.c"
  4872 ;; Parameters:    Size  Location     Type
  4873 ;;  byte            1    wreg     unsigned char 
  4874 ;; Auto vars:     Size  Location     Type
  4875 ;;  byte            1    0[COMMON] unsigned char 
  4876 ;; Return value:  Size  Location     Type
  4877 ;;                  1    wreg      void 
  4878 ;; Registers used:
  4879 ;;		wreg
  4880 ;; Tracked objects:
  4881 ;;		On entry : 0/0
  4882 ;;		On exit  : 0/0
  4883 ;;		Unchanged: 0/0
  4884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4885 ;;      Params:         0       0       0       0       0
  4886 ;;      Locals:         1       0       0       0       0
  4887 ;;      Temps:          0       0       0       0       0
  4888 ;;      Totals:         1       0       0       0       0
  4889 ;;Total ram usage:        1 bytes
  4890 ;; Hardware stack levels used:    1
  4891 ;; This function calls:
  4892 ;;		Nothing
  4893 ;; This function is called by:
  4894 ;;		_NM_waddress
  4895 ;;		_putstr
  4896 ;;		_putcrlf
  4897 ;;		_put_error
  4898 ;;		_put_ok
  4899 ;;		_putAX25
  4900 ;;		_conv_DI_UARTRX
  4901 ;;		_test_Packetmaker
  4902 ;;		_EEPROM_Read
  4903 ;; This function uses a non-reentrant model
  4904 ;;
  4905                           
  4906                           
  4907                           ;psect for function _putch
  4908  17CD                     _putch:	
  4909                           
  4910                           ;incstack = 0
  4911                           ; Regs used in _putch: [wreg]
  4912                           ;putch@byte stored from wreg
  4913  17CD  00F0               	movwf	putch@byte
  4914  17CE                     l56:	
  4915                           ;UART.c: 36: while(!TXIF);
  4916                           
  4917  17CE  1283               	bcf	3,5	;RP0=0, select bank0
  4918  17CF  1303               	bcf	3,6	;RP1=0, select bank0
  4919  17D0  1E0C               	btfss	12,4	;volatile
  4920  17D1  2FCE               	goto	l56
  4921                           
  4922                           ;UART.c: 37: TXREG = byte;
  4923  17D2  0870               	movf	putch@byte,w
  4924  17D3  0099               	movwf	25	;volatile
  4925  17D4  0008               	return
  4926  17D5                     __end_of_putch:	
  4927                           
  4928                           	psect	text11
  4929  084D                     __ptext11:	
  4930 ;; *************** function _Init_SERIAL *****************
  4931 ;; Defined at:
  4932 ;;		line 5 in file "UART.c"
  4933 ;; Parameters:    Size  Location     Type
  4934 ;;		None
  4935 ;; Auto vars:     Size  Location     Type
  4936 ;;		None
  4937 ;; Return value:  Size  Location     Type
  4938 ;;                  1    wreg      void 
  4939 ;; Registers used:
  4940 ;;		wreg
  4941 ;; Tracked objects:
  4942 ;;		On entry : 0/0
  4943 ;;		On exit  : 0/0
  4944 ;;		Unchanged: 0/0
  4945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4946 ;;      Params:         0       0       0       0       0
  4947 ;;      Locals:         0       0       0       0       0
  4948 ;;      Temps:          0       0       0       0       0
  4949 ;;      Totals:         0       0       0       0       0
  4950 ;;Total ram usage:        0 bytes
  4951 ;; Hardware stack levels used:    1
  4952 ;; This function calls:
  4953 ;;		Nothing
  4954 ;; This function is called by:
  4955 ;;		_main
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959                           
  4960                           ;psect for function _Init_SERIAL
  4961  084D                     _Init_SERIAL:	
  4962                           
  4963                           ;UART.c: 6: SPBRG = 10;
  4964                           
  4965                           ;incstack = 0
  4966                           ; Regs used in _Init_SERIAL: [wreg]
  4967  084D  300A               	movlw	10
  4968  084E  1683               	bsf	3,5	;RP0=1, select bank1
  4969  084F  1303               	bcf	3,6	;RP1=0, select bank1
  4970  0850  0099               	movwf	25	;volatile
  4971                           
  4972                           ;UART.c: 7: BRGH = 0;
  4973  0851  1118               	bcf	24,2	;volatile
  4974                           
  4975                           ;UART.c: 8: SYNC = 0;
  4976  0852  1218               	bcf	24,4	;volatile
  4977                           
  4978                           ;UART.c: 9: SPEN = 1;
  4979  0853  1283               	bcf	3,5	;RP0=0, select bank0
  4980  0854  1303               	bcf	3,6	;RP1=0, select bank0
  4981  0855  1798               	bsf	24,7	;volatile
  4982                           
  4983                           ;UART.c: 10: CREN = 1;
  4984  0856  1618               	bsf	24,4	;volatile
  4985                           
  4986                           ;UART.c: 11: SREN = 0;
  4987  0857  1298               	bcf	24,5	;volatile
  4988                           
  4989                           ;UART.c: 12: RCIF = 0;
  4990  0858  128C               	bcf	12,5	;volatile
  4991                           
  4992                           ;UART.c: 13: TXIE = 0;
  4993  0859  1683               	bsf	3,5	;RP0=1, select bank1
  4994  085A  1303               	bcf	3,6	;RP1=0, select bank1
  4995  085B  120C               	bcf	12,4	;volatile
  4996                           
  4997                           ;UART.c: 14: RCIE = 1;
  4998  085C  168C               	bsf	12,5	;volatile
  4999                           
  5000                           ;UART.c: 15: TX9 = 0;
  5001  085D  1318               	bcf	24,6	;volatile
  5002                           
  5003                           ;UART.c: 16: RX9 = 0;
  5004  085E  1283               	bcf	3,5	;RP0=0, select bank0
  5005  085F  1303               	bcf	3,6	;RP1=0, select bank0
  5006  0860  1318               	bcf	24,6	;volatile
  5007                           
  5008                           ;UART.c: 17: TXEN = 0;
  5009  0861  1683               	bsf	3,5	;RP0=1, select bank1
  5010  0862  1303               	bcf	3,6	;RP1=0, select bank1
  5011  0863  1298               	bcf	24,5	;volatile
  5012                           
  5013                           ;UART.c: 18: TXEN = 1;
  5014  0864  1698               	bsf	24,5	;volatile
  5015  0865  0008               	return
  5016  0866                     __end_of_Init_SERIAL:	
  5017                           
  5018                           	psect	text12
  5019  087F                     __ptext12:	
  5020 ;; *************** function _Init_MPU *****************
  5021 ;; Defined at:
  5022 ;;		line 8 in file "Init_MPU.c"
  5023 ;; Parameters:    Size  Location     Type
  5024 ;;		None
  5025 ;; Auto vars:     Size  Location     Type
  5026 ;;		None
  5027 ;; Return value:  Size  Location     Type
  5028 ;;                  1    wreg      void 
  5029 ;; Registers used:
  5030 ;;		wreg, status,2
  5031 ;; Tracked objects:
  5032 ;;		On entry : 0/0
  5033 ;;		On exit  : 0/0
  5034 ;;		Unchanged: 0/0
  5035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5036 ;;      Params:         0       0       0       0       0
  5037 ;;      Locals:         0       0       0       0       0
  5038 ;;      Temps:          0       0       0       0       0
  5039 ;;      Totals:         0       0       0       0       0
  5040 ;;Total ram usage:        0 bytes
  5041 ;; Hardware stack levels used:    1
  5042 ;; This function calls:
  5043 ;;		Nothing
  5044 ;; This function is called by:
  5045 ;;		_main
  5046 ;; This function uses a non-reentrant model
  5047 ;;
  5048                           
  5049                           
  5050                           ;psect for function _Init_MPU
  5051  087F                     _Init_MPU:	
  5052                           
  5053                           ;Init_MPU.c: 11: PORTA = 0x00;
  5054                           
  5055                           ;incstack = 0
  5056                           ; Regs used in _Init_MPU: [wreg+status,2]
  5057  087F  1283               	bcf	3,5	;RP0=0, select bank0
  5058  0880  1303               	bcf	3,6	;RP1=0, select bank0
  5059  0881  0185               	clrf	5	;volatile
  5060                           
  5061                           ;Init_MPU.c: 12: PORTB = 0x00;
  5062  0882  0186               	clrf	6	;volatile
  5063                           
  5064                           ;Init_MPU.c: 13: PORTC = 0x00;
  5065  0883  0187               	clrf	7	;volatile
  5066                           
  5067                           ;Init_MPU.c: 14: PORTD = 0x00;
  5068  0884  0188               	clrf	8	;volatile
  5069                           
  5070                           ;Init_MPU.c: 15: PORTE = 0x00;
  5071  0885  0189               	clrf	9	;volatile
  5072                           
  5073                           ;Init_MPU.c: 18: ANSEL = 0x00;
  5074  0886  1683               	bsf	3,5	;RP0=1, select bank3
  5075  0887  1703               	bsf	3,6	;RP1=1, select bank3
  5076  0888  0188               	clrf	8	;volatile
  5077                           
  5078                           ;Init_MPU.c: 19: ANSELH = 0x00;
  5079  0889  0189               	clrf	9	;volatile
  5080                           
  5081                           ;Init_MPU.c: 23: TRISA = 0b10000000;
  5082  088A  3080               	movlw	128
  5083  088B  1683               	bsf	3,5	;RP0=1, select bank1
  5084  088C  1303               	bcf	3,6	;RP1=0, select bank1
  5085  088D  0085               	movwf	5	;volatile
  5086                           
  5087                           ;Init_MPU.c: 24: TRISB = 0b00000001;
  5088  088E  3001               	movlw	1
  5089  088F  0086               	movwf	6	;volatile
  5090                           
  5091                           ;Init_MPU.c: 25: TRISC = 0b10011000;
  5092  0890  3098               	movlw	152
  5093  0891  0087               	movwf	7	;volatile
  5094                           
  5095                           ;Init_MPU.c: 26: TRISD = 0b00000000;
  5096  0892  0188               	clrf	8	;volatile
  5097                           
  5098                           ;Init_MPU.c: 27: TRISE = 0b00000000;
  5099  0893  0189               	clrf	9	;volatile
  5100                           
  5101                           ;Init_MPU.c: 30: PORTA = 0x00;
  5102  0894  1283               	bcf	3,5	;RP0=0, select bank0
  5103  0895  1303               	bcf	3,6	;RP1=0, select bank0
  5104  0896  0185               	clrf	5	;volatile
  5105                           
  5106                           ;Init_MPU.c: 31: PORTB = 0x00;
  5107  0897  0186               	clrf	6	;volatile
  5108                           
  5109                           ;Init_MPU.c: 32: PORTC = 0x00;
  5110  0898  0187               	clrf	7	;volatile
  5111                           
  5112                           ;Init_MPU.c: 33: PORTD = 0x00;
  5113  0899  0188               	clrf	8	;volatile
  5114                           
  5115                           ;Init_MPU.c: 34: PORTE = 0x00;
  5116  089A  0189               	clrf	9	;volatile
  5117  089B  0008               	return
  5118  089C                     __end_of_Init_MPU:	
  5119                           
  5120                           	psect	text13
  5121  09C4                     __ptext13:	
  5122 ;; *************** function _Init_I2C_M *****************
  5123 ;; Defined at:
  5124 ;;		line 8 in file "I2C.c"
  5125 ;; Parameters:    Size  Location     Type
  5126 ;;  c               4    0[BANK0 ] const unsigned long 
  5127 ;; Auto vars:     Size  Location     Type
  5128 ;;		None
  5129 ;; Return value:  Size  Location     Type
  5130 ;;                  1    wreg      void 
  5131 ;; Registers used:
  5132 ;;		wreg, status,2, status,0, pclath, cstack
  5133 ;; Tracked objects:
  5134 ;;		On entry : 0/0
  5135 ;;		On exit  : 0/0
  5136 ;;		Unchanged: 0/0
  5137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5138 ;;      Params:         0       4       0       0       0
  5139 ;;      Locals:         0       0       0       0       0
  5140 ;;      Temps:          0       4       0       0       0
  5141 ;;      Totals:         0       8       0       0       0
  5142 ;;Total ram usage:        8 bytes
  5143 ;; Hardware stack levels used:    1
  5144 ;; Hardware stack levels required when called:    1
  5145 ;; This function calls:
  5146 ;;		___lldiv
  5147 ;; This function is called by:
  5148 ;;		_main
  5149 ;; This function uses a non-reentrant model
  5150 ;;
  5151                           
  5152                           
  5153                           ;psect for function _Init_I2C_M
  5154  09C4                     _Init_I2C_M:	
  5155                           
  5156                           ;I2C.c: 9: SSPCON = 0b00101000;
  5157                           
  5158                           ;incstack = 0
  5159                           ; Regs used in _Init_I2C_M: [wreg+status,2+status,0+pclath+cstack]
  5160  09C4  3028               	movlw	40
  5161  09C5  1283               	bcf	3,5	;RP0=0, select bank0
  5162  09C6  1303               	bcf	3,6	;RP1=0, select bank0
  5163  09C7  0094               	movwf	20	;volatile
  5164                           
  5165                           ;I2C.c: 10: SSPCON2 = 0;
  5166  09C8  1683               	bsf	3,5	;RP0=1, select bank1
  5167  09C9  1303               	bcf	3,6	;RP1=0, select bank1
  5168  09CA  0191               	clrf	17	;volatile
  5169                           
  5170                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  5171  09CB  1283               	bcf	3,5	;RP0=0, select bank0
  5172  09CC  1303               	bcf	3,6	;RP1=0, select bank0
  5173  09CD  0820               	movf	Init_I2C_M@c,w
  5174  09CE  00A4               	movwf	??_Init_I2C_M
  5175  09CF  0821               	movf	Init_I2C_M@c+1,w
  5176  09D0  00A5               	movwf	??_Init_I2C_M+1
  5177  09D1  0822               	movf	Init_I2C_M@c+2,w
  5178  09D2  00A6               	movwf	??_Init_I2C_M+2
  5179  09D3  0823               	movf	Init_I2C_M@c+3,w
  5180  09D4  00A7               	movwf	??_Init_I2C_M+3
  5181  09D5  3002               	movlw	2
  5182  09D6                     u3155:	
  5183  09D6  1003               	clrc
  5184  09D7  0DA4               	rlf	??_Init_I2C_M,f
  5185  09D8  0DA5               	rlf	??_Init_I2C_M+1,f
  5186  09D9  0DA6               	rlf	??_Init_I2C_M+2,f
  5187  09DA  0DA7               	rlf	??_Init_I2C_M+3,f
  5188  09DB  3EFF               	addlw	-1
  5189  09DC  1D03               	skipz
  5190  09DD  29D6               	goto	u3155
  5191  09DE  0827               	movf	??_Init_I2C_M+3,w
  5192  09DF  00F3               	movwf	___lldiv@divisor+3
  5193  09E0  0826               	movf	??_Init_I2C_M+2,w
  5194  09E1  00F2               	movwf	___lldiv@divisor+2
  5195  09E2  0825               	movf	??_Init_I2C_M+1,w
  5196  09E3  00F1               	movwf	___lldiv@divisor+1
  5197  09E4  0824               	movf	??_Init_I2C_M,w
  5198  09E5  00F0               	movwf	___lldiv@divisor
  5199  09E6  3000               	movlw	0
  5200  09E7  00F7               	movwf	___lldiv@dividend+3
  5201  09E8  3098               	movlw	152
  5202  09E9  00F6               	movwf	___lldiv@dividend+2
  5203  09EA  3096               	movlw	150
  5204  09EB  00F5               	movwf	___lldiv@dividend+1
  5205  09EC  3080               	movlw	128
  5206  09ED  00F4               	movwf	___lldiv@dividend
  5207  09EE  120A  158A  23CD   	fcall	___lldiv
  5208  09F1  0870               	movf	?___lldiv,w
  5209  09F2  3EFF               	addlw	255
  5210  09F3  1683               	bsf	3,5	;RP0=1, select bank1
  5211  09F4  1303               	bcf	3,6	;RP1=0, select bank1
  5212  09F5  0093               	movwf	19	;volatile
  5213                           
  5214                           ;I2C.c: 12: SSPSTAT = 0;
  5215  09F6  0194               	clrf	20	;volatile
  5216  09F7  0008               	return
  5217  09F8                     __end_of_Init_I2C_M:	
  5218                           
  5219                           	psect	text14
  5220  0BCD                     __ptext14:	
  5221 ;; *************** function ___lldiv *****************
  5222 ;; Defined at:
  5223 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  5224 ;; Parameters:    Size  Location     Type
  5225 ;;  divisor         4    0[COMMON] unsigned long 
  5226 ;;  dividend        4    4[COMMON] unsigned long 
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;  quotient        4    9[COMMON] unsigned long 
  5229 ;;  counter         1   13[COMMON] unsigned char 
  5230 ;; Return value:  Size  Location     Type
  5231 ;;                  4    0[COMMON] unsigned long 
  5232 ;; Registers used:
  5233 ;;		wreg, status,2, status,0
  5234 ;; Tracked objects:
  5235 ;;		On entry : 0/0
  5236 ;;		On exit  : 0/0
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5239 ;;      Params:         8       0       0       0       0
  5240 ;;      Locals:         5       0       0       0       0
  5241 ;;      Temps:          1       0       0       0       0
  5242 ;;      Totals:        14       0       0       0       0
  5243 ;;Total ram usage:       14 bytes
  5244 ;; Hardware stack levels used:    1
  5245 ;; This function calls:
  5246 ;;		Nothing
  5247 ;; This function is called by:
  5248 ;;		_Init_I2C_M
  5249 ;; This function uses a non-reentrant model
  5250 ;;
  5251                           
  5252                           
  5253                           ;psect for function ___lldiv
  5254  0BCD                     ___lldiv:	
  5255                           
  5256                           ;incstack = 0
  5257                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5258  0BCD  3000               	movlw	0
  5259  0BCE  00FC               	movwf	___lldiv@quotient+3
  5260  0BCF  3000               	movlw	0
  5261  0BD0  00FB               	movwf	___lldiv@quotient+2
  5262  0BD1  3000               	movlw	0
  5263  0BD2  00FA               	movwf	___lldiv@quotient+1
  5264  0BD3  3000               	movlw	0
  5265  0BD4  00F9               	movwf	___lldiv@quotient
  5266  0BD5  0873               	movf	___lldiv@divisor+3,w
  5267  0BD6  0472               	iorwf	___lldiv@divisor+2,w
  5268  0BD7  0471               	iorwf	___lldiv@divisor+1,w
  5269  0BD8  0470               	iorwf	___lldiv@divisor,w
  5270  0BD9  1903               	skipnz
  5271  0BDA  2C22               	goto	l3290
  5272  0BDB  01FD               	clrf	___lldiv@counter
  5273  0BDC  0AFD               	incf	___lldiv@counter,f
  5274  0BDD                     l3276:	
  5275  0BDD  1BF3               	btfsc	___lldiv@divisor+3,7
  5276  0BDE  2BED               	goto	l3278
  5277  0BDF  3001               	movlw	1
  5278  0BE0  00F8               	movwf	??___lldiv
  5279  0BE1                     u3015:	
  5280  0BE1  1003               	clrc
  5281  0BE2  0DF0               	rlf	___lldiv@divisor,f
  5282  0BE3  0DF1               	rlf	___lldiv@divisor+1,f
  5283  0BE4  0DF2               	rlf	___lldiv@divisor+2,f
  5284  0BE5  0DF3               	rlf	___lldiv@divisor+3,f
  5285  0BE6  0BF8               	decfsz	??___lldiv,f
  5286  0BE7  2BE1               	goto	u3015
  5287  0BE8  3001               	movlw	1
  5288  0BE9  00F8               	movwf	??___lldiv
  5289  0BEA  0878               	movf	??___lldiv,w
  5290  0BEB  07FD               	addwf	___lldiv@counter,f
  5291  0BEC  2BDD               	goto	l3276
  5292  0BED                     l3278:	
  5293  0BED  3001               	movlw	1
  5294  0BEE  00F8               	movwf	??___lldiv
  5295  0BEF                     u3035:	
  5296  0BEF  1003               	clrc
  5297  0BF0  0DF9               	rlf	___lldiv@quotient,f
  5298  0BF1  0DFA               	rlf	___lldiv@quotient+1,f
  5299  0BF2  0DFB               	rlf	___lldiv@quotient+2,f
  5300  0BF3  0DFC               	rlf	___lldiv@quotient+3,f
  5301  0BF4  0BF8               	decfsz	??___lldiv,f
  5302  0BF5  2BEF               	goto	u3035
  5303  0BF6  0873               	movf	___lldiv@divisor+3,w
  5304  0BF7  0277               	subwf	___lldiv@dividend+3,w
  5305  0BF8  1D03               	skipz
  5306  0BF9  2C04               	goto	u3045
  5307  0BFA  0872               	movf	___lldiv@divisor+2,w
  5308  0BFB  0276               	subwf	___lldiv@dividend+2,w
  5309  0BFC  1D03               	skipz
  5310  0BFD  2C04               	goto	u3045
  5311  0BFE  0871               	movf	___lldiv@divisor+1,w
  5312  0BFF  0275               	subwf	___lldiv@dividend+1,w
  5313  0C00  1D03               	skipz
  5314  0C01  2C04               	goto	u3045
  5315  0C02  0870               	movf	___lldiv@divisor,w
  5316  0C03  0274               	subwf	___lldiv@dividend,w
  5317  0C04                     u3045:	
  5318  0C04  1C03               	skipc
  5319  0C05  2C15               	goto	l3286
  5320  0C06  0870               	movf	___lldiv@divisor,w
  5321  0C07  02F4               	subwf	___lldiv@dividend,f
  5322  0C08  0871               	movf	___lldiv@divisor+1,w
  5323  0C09  1C03               	skipc
  5324  0C0A  0F71               	incfsz	___lldiv@divisor+1,w
  5325  0C0B  02F5               	subwf	___lldiv@dividend+1,f
  5326  0C0C  0872               	movf	___lldiv@divisor+2,w
  5327  0C0D  1C03               	skipc
  5328  0C0E  0F72               	incfsz	___lldiv@divisor+2,w
  5329  0C0F  02F6               	subwf	___lldiv@dividend+2,f
  5330  0C10  0873               	movf	___lldiv@divisor+3,w
  5331  0C11  1C03               	skipc
  5332  0C12  0F73               	incfsz	___lldiv@divisor+3,w
  5333  0C13  02F7               	subwf	___lldiv@dividend+3,f
  5334  0C14  1479               	bsf	___lldiv@quotient,0
  5335  0C15                     l3286:	
  5336  0C15  3001               	movlw	1
  5337  0C16                     u3055:	
  5338  0C16  1003               	clrc
  5339  0C17  0CF3               	rrf	___lldiv@divisor+3,f
  5340  0C18  0CF2               	rrf	___lldiv@divisor+2,f
  5341  0C19  0CF1               	rrf	___lldiv@divisor+1,f
  5342  0C1A  0CF0               	rrf	___lldiv@divisor,f
  5343  0C1B  3EFF               	addlw	-1
  5344  0C1C  1D03               	skipz
  5345  0C1D  2C16               	goto	u3055
  5346  0C1E  3001               	movlw	1
  5347  0C1F  02FD               	subwf	___lldiv@counter,f
  5348  0C20  1D03               	btfss	3,2
  5349  0C21  2BED               	goto	l3278
  5350  0C22                     l3290:	
  5351  0C22  087C               	movf	___lldiv@quotient+3,w
  5352  0C23  00F3               	movwf	?___lldiv+3
  5353  0C24  087B               	movf	___lldiv@quotient+2,w
  5354  0C25  00F2               	movwf	?___lldiv+2
  5355  0C26  087A               	movf	___lldiv@quotient+1,w
  5356  0C27  00F1               	movwf	?___lldiv+1
  5357  0C28  0879               	movf	___lldiv@quotient,w
  5358  0C29  00F0               	movwf	?___lldiv
  5359  0C2A  0008               	return
  5360  0C2B                     __end_of___lldiv:	
  5361                           
  5362                           	psect	text15
  5363  096A                     __ptext15:	
  5364 ;; *************** function _FMTX *****************
  5365 ;; Defined at:
  5366 ;;		line 270 in file "FMCW.c"
  5367 ;; Parameters:    Size  Location     Type
  5368 ;;  Nref            2   60[BANK0 ] int 
  5369 ;;  Nprg            2   62[BANK0 ] PTR int 
  5370 ;;		 -> RAM(512), main@FMTX_Nprg(10), FMTX_Nprg(10), 
  5371 ;; Auto vars:     Size  Location     Type
  5372 ;;  fmtx            2   64[BANK0 ] int 
  5373 ;; Return value:  Size  Location     Type
  5374 ;;                  1    wreg      void 
  5375 ;; Registers used:
  5376 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5377 ;; Tracked objects:
  5378 ;;		On entry : 0/0
  5379 ;;		On exit  : 0/0
  5380 ;;		Unchanged: 0/0
  5381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5382 ;;      Params:         0       4       0       0       0
  5383 ;;      Locals:         0       2       0       0       0
  5384 ;;      Temps:          0       0       0       0       0
  5385 ;;      Totals:         0       6       0       0       0
  5386 ;;Total ram usage:        6 bytes
  5387 ;; Hardware stack levels used:    1
  5388 ;; Hardware stack levels required when called:    3
  5389 ;; This function calls:
  5390 ;;		_OPINIT
  5391 ;;		_OUTFQ
  5392 ;;		_RFDOUT
  5393 ;; This function is called by:
  5394 ;;		_main
  5395 ;;		_SetPLL
  5396 ;; This function uses a non-reentrant model
  5397 ;;
  5398                           
  5399                           
  5400                           ;psect for function _FMTX
  5401  096A                     _FMTX:	
  5402                           
  5403                           ;FMCW.c: 271: int fmtx = 1;
  5404                           
  5405                           ;incstack = 0
  5406                           ; Regs used in _FMTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5407  096A  3001               	movlw	1
  5408  096B  1283               	bcf	3,5	;RP0=0, select bank0
  5409  096C  1303               	bcf	3,6	;RP1=0, select bank0
  5410  096D  00E0               	movwf	FMTX@fmtx
  5411  096E  3000               	movlw	0
  5412  096F  00E1               	movwf	FMTX@fmtx+1
  5413                           
  5414                           ;FMCW.c: 272: OPINIT(fmtx);
  5415  0970  0861               	movf	FMTX@fmtx+1,w
  5416  0971  00F5               	movwf	OPINIT@fmcwtxrx+1
  5417  0972  0860               	movf	FMTX@fmtx,w
  5418  0973  00F4               	movwf	OPINIT@fmcwtxrx
  5419  0974  120A  158A  248C  120A  158A  	fcall	_OPINIT
  5420                           
  5421                           ;FMCW.c: 273: RFDOUT(fmtx, Nref);
  5422  0979  1283               	bcf	3,5	;RP0=0, select bank0
  5423  097A  1303               	bcf	3,6	;RP1=0, select bank0
  5424  097B  0861               	movf	FMTX@fmtx+1,w
  5425  097C  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5426  097D  0860               	movf	FMTX@fmtx,w
  5427  097E  00F9               	movwf	RFDOUT@fmcwtxrx
  5428  097F  085D               	movf	FMTX@Nref+1,w
  5429  0980  00FC               	movwf	RFDOUT@Nref+1
  5430  0981  085C               	movf	FMTX@Nref,w
  5431  0982  00FB               	movwf	RFDOUT@Nref
  5432  0983  120A  158A  258B  120A  158A  	fcall	_RFDOUT
  5433                           
  5434                           ;FMCW.c: 274: OUTFQ(fmtx, Nprg);
  5435  0988  1283               	bcf	3,5	;RP0=0, select bank0
  5436  0989  1303               	bcf	3,6	;RP1=0, select bank0
  5437  098A  0861               	movf	FMTX@fmtx+1,w
  5438  098B  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5439  098C  0860               	movf	FMTX@fmtx,w
  5440  098D  00F9               	movwf	OUTFQ@fmcwtxrx
  5441  098E  085E               	movf	FMTX@Nprg,w
  5442  098F  00FB               	movwf	OUTFQ@Nprg
  5443  0990  085F               	movf	FMTX@Nprg+1,w
  5444  0991  00FC               	movwf	OUTFQ@Nprg+1
  5445  0992  120A  118A  20AC   	fcall	_OUTFQ
  5446  0995  0008               	return
  5447  0996                     __end_of_FMTX:	
  5448                           
  5449                           	psect	text16
  5450  093E                     __ptext16:	
  5451 ;; *************** function _FMRX *****************
  5452 ;; Defined at:
  5453 ;;		line 298 in file "FMCW.c"
  5454 ;; Parameters:    Size  Location     Type
  5455 ;;  Nref            2   60[BANK0 ] int 
  5456 ;;  Nprg            2   62[BANK0 ] PTR int 
  5457 ;;		 -> RAM(512), main@FMRX_Nprg(10), FMRX_Nprg(10), 
  5458 ;; Auto vars:     Size  Location     Type
  5459 ;;  fmrx            2   64[BANK0 ] int 
  5460 ;; Return value:  Size  Location     Type
  5461 ;;                  1    wreg      void 
  5462 ;; Registers used:
  5463 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5464 ;; Tracked objects:
  5465 ;;		On entry : 0/0
  5466 ;;		On exit  : 0/0
  5467 ;;		Unchanged: 0/0
  5468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5469 ;;      Params:         0       4       0       0       0
  5470 ;;      Locals:         0       2       0       0       0
  5471 ;;      Temps:          0       0       0       0       0
  5472 ;;      Totals:         0       6       0       0       0
  5473 ;;Total ram usage:        6 bytes
  5474 ;; Hardware stack levels used:    1
  5475 ;; Hardware stack levels required when called:    3
  5476 ;; This function calls:
  5477 ;;		_OPINIT
  5478 ;;		_OUTFQ
  5479 ;;		_RFDOUT
  5480 ;; This function is called by:
  5481 ;;		_main
  5482 ;;		_SetPLL
  5483 ;; This function uses a non-reentrant model
  5484 ;;
  5485                           
  5486                           
  5487                           ;psect for function _FMRX
  5488  093E                     _FMRX:	
  5489                           
  5490                           ;FMCW.c: 299: int fmrx = 3;
  5491                           
  5492                           ;incstack = 0
  5493                           ; Regs used in _FMRX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5494  093E  3003               	movlw	3
  5495  093F  1283               	bcf	3,5	;RP0=0, select bank0
  5496  0940  1303               	bcf	3,6	;RP1=0, select bank0
  5497  0941  00E0               	movwf	FMRX@fmrx
  5498  0942  3000               	movlw	0
  5499  0943  00E1               	movwf	FMRX@fmrx+1
  5500                           
  5501                           ;FMCW.c: 300: OPINIT(fmrx);
  5502  0944  0861               	movf	FMRX@fmrx+1,w
  5503  0945  00F5               	movwf	OPINIT@fmcwtxrx+1
  5504  0946  0860               	movf	FMRX@fmrx,w
  5505  0947  00F4               	movwf	OPINIT@fmcwtxrx
  5506  0948  120A  158A  248C  120A  158A  	fcall	_OPINIT
  5507                           
  5508                           ;FMCW.c: 301: RFDOUT(fmrx, Nref);
  5509  094D  1283               	bcf	3,5	;RP0=0, select bank0
  5510  094E  1303               	bcf	3,6	;RP1=0, select bank0
  5511  094F  0861               	movf	FMRX@fmrx+1,w
  5512  0950  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5513  0951  0860               	movf	FMRX@fmrx,w
  5514  0952  00F9               	movwf	RFDOUT@fmcwtxrx
  5515  0953  085D               	movf	FMRX@Nref+1,w
  5516  0954  00FC               	movwf	RFDOUT@Nref+1
  5517  0955  085C               	movf	FMRX@Nref,w
  5518  0956  00FB               	movwf	RFDOUT@Nref
  5519  0957  120A  158A  258B  120A  158A  	fcall	_RFDOUT
  5520                           
  5521                           ;FMCW.c: 302: OUTFQ(fmrx, Nprg);
  5522  095C  1283               	bcf	3,5	;RP0=0, select bank0
  5523  095D  1303               	bcf	3,6	;RP1=0, select bank0
  5524  095E  0861               	movf	FMRX@fmrx+1,w
  5525  095F  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5526  0960  0860               	movf	FMRX@fmrx,w
  5527  0961  00F9               	movwf	OUTFQ@fmcwtxrx
  5528  0962  085E               	movf	FMRX@Nprg,w
  5529  0963  00FB               	movwf	OUTFQ@Nprg
  5530  0964  085F               	movf	FMRX@Nprg+1,w
  5531  0965  00FC               	movwf	OUTFQ@Nprg+1
  5532  0966  120A  118A  20AC   	fcall	_OUTFQ
  5533  0969  0008               	return
  5534  096A                     __end_of_FMRX:	
  5535                           
  5536                           	psect	text17
  5537  0B70                     __ptext17:	
  5538 ;; *************** function _EEPROM_Write *****************
  5539 ;; Defined at:
  5540 ;;		line 51 in file "I2C.c"
  5541 ;; Parameters:    Size  Location     Type
  5542 ;;  EEPROM_addre    1    wreg     unsigned char 
  5543 ;;  high_address    1    2[COMMON] unsigned char 
  5544 ;;  low_address     1    3[COMMON] unsigned char 
  5545 ;;  data            1    4[COMMON] PTR unsigned char 
  5546 ;;		 -> NULL(0), dData(32), 
  5547 ;; Auto vars:     Size  Location     Type
  5548 ;;  EEPROM_addre    1    8[COMMON] unsigned char 
  5549 ;;  Address         1    9[COMMON] unsigned char 
  5550 ;; Return value:  Size  Location     Type
  5551 ;;                  1    wreg      void 
  5552 ;; Registers used:
  5553 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5554 ;; Tracked objects:
  5555 ;;		On entry : 0/0
  5556 ;;		On exit  : 0/0
  5557 ;;		Unchanged: 0/0
  5558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5559 ;;      Params:         3       0       0       0       0
  5560 ;;      Locals:         2       0       0       0       0
  5561 ;;      Temps:          3       0       0       0       0
  5562 ;;      Totals:         8       0       0       0       0
  5563 ;;Total ram usage:        8 bytes
  5564 ;; Hardware stack levels used:    1
  5565 ;; Hardware stack levels required when called:    2
  5566 ;; This function calls:
  5567 ;;		_I2C_Master_Start
  5568 ;;		_I2C_Master_Stop
  5569 ;;		_I2C_Master_Write
  5570 ;; This function is called by:
  5571 ;;		_main
  5572 ;; This function uses a non-reentrant model
  5573 ;;
  5574                           
  5575                           
  5576                           ;psect for function _EEPROM_Write
  5577  0B70                     _EEPROM_Write:	
  5578                           
  5579                           ;incstack = 0
  5580                           ; Regs used in _EEPROM_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5581                           ;EEPROM_Write@EEPROM_address stored from wreg
  5582  0B70  00F8               	movwf	EEPROM_Write@EEPROM_address
  5583                           
  5584                           ;I2C.c: 52: UBYTE Address = EEPROM_address << 1;
  5585  0B71  0878               	movf	EEPROM_Write@EEPROM_address,w
  5586  0B72  00F5               	movwf	??_EEPROM_Write
  5587  0B73  0775               	addwf	??_EEPROM_Write,w
  5588  0B74  00F6               	movwf	??_EEPROM_Write+1
  5589  0B75  0876               	movf	??_EEPROM_Write+1,w
  5590  0B76  00F9               	movwf	EEPROM_Write@Address
  5591                           
  5592                           ;I2C.c: 55: I2C_Master_Start();
  5593  0B77  160A  118A  27B7  120A  158A  	fcall	_I2C_Master_Start
  5594                           
  5595                           ;I2C.c: 56: I2C_Master_Write(Address);
  5596  0B7C  0879               	movf	EEPROM_Write@Address,w
  5597  0B7D  00F5               	movwf	??_EEPROM_Write
  5598  0B7E  01F6               	clrf	??_EEPROM_Write+1
  5599  0B7F  0875               	movf	??_EEPROM_Write,w
  5600  0B80  00F0               	movwf	I2C_Master_Write@d
  5601  0B81  0876               	movf	??_EEPROM_Write+1,w
  5602  0B82  00F1               	movwf	I2C_Master_Write@d+1
  5603  0B83  160A  118A  27C5  120A  158A  	fcall	_I2C_Master_Write
  5604                           
  5605                           ;I2C.c: 57: I2C_Master_Write(high_address);
  5606  0B88  0872               	movf	EEPROM_Write@high_address,w
  5607  0B89  00F5               	movwf	??_EEPROM_Write
  5608  0B8A  01F6               	clrf	??_EEPROM_Write+1
  5609  0B8B  0875               	movf	??_EEPROM_Write,w
  5610  0B8C  00F0               	movwf	I2C_Master_Write@d
  5611  0B8D  0876               	movf	??_EEPROM_Write+1,w
  5612  0B8E  00F1               	movwf	I2C_Master_Write@d+1
  5613  0B8F  160A  118A  27C5  120A  158A  	fcall	_I2C_Master_Write
  5614                           
  5615                           ;I2C.c: 58: I2C_Master_Write(low_address);
  5616  0B94  0873               	movf	EEPROM_Write@low_address,w
  5617  0B95  00F5               	movwf	??_EEPROM_Write
  5618  0B96  01F6               	clrf	??_EEPROM_Write+1
  5619  0B97  0875               	movf	??_EEPROM_Write,w
  5620  0B98  00F0               	movwf	I2C_Master_Write@d
  5621  0B99  0876               	movf	??_EEPROM_Write+1,w
  5622  0B9A  00F1               	movwf	I2C_Master_Write@d+1
  5623  0B9B  160A  118A  27C5  120A  158A  	fcall	_I2C_Master_Write
  5624  0BA0                     l3464:	
  5625                           ;I2C.c: 59: while(*data){
  5626                           
  5627  0BA0  0874               	movf	EEPROM_Write@data,w
  5628  0BA1  0084               	movwf	4
  5629  0BA2  1783               	bsf	3,7	;select IRP bank2
  5630  0BA3  0800               	movf	0,w
  5631  0BA4  1903               	btfsc	3,2
  5632  0BA5  2BBA               	goto	l3466
  5633                           
  5634                           ;I2C.c: 60: I2C_Master_Write(*data);
  5635  0BA6  0874               	movf	EEPROM_Write@data,w
  5636  0BA7  0084               	movwf	4
  5637  0BA8  1783               	bsf	3,7	;select IRP bank2
  5638  0BA9  0800               	movf	0,w
  5639  0BAA  00F5               	movwf	??_EEPROM_Write
  5640  0BAB  01F6               	clrf	??_EEPROM_Write+1
  5641  0BAC  0875               	movf	??_EEPROM_Write,w
  5642  0BAD  00F0               	movwf	I2C_Master_Write@d
  5643  0BAE  0876               	movf	??_EEPROM_Write+1,w
  5644  0BAF  00F1               	movwf	I2C_Master_Write@d+1
  5645  0BB0  160A  118A  27C5  120A  158A  	fcall	_I2C_Master_Write
  5646                           
  5647                           ;I2C.c: 61: ++data;
  5648  0BB5  3001               	movlw	1
  5649  0BB6  00F5               	movwf	??_EEPROM_Write
  5650  0BB7  0875               	movf	??_EEPROM_Write,w
  5651  0BB8  07F4               	addwf	EEPROM_Write@data,f
  5652  0BB9  2BA0               	goto	l3464
  5653  0BBA                     l3466:	
  5654                           
  5655                           ;I2C.c: 62: }
  5656                           ;I2C.c: 63: I2C_Master_Stop();
  5657  0BBA  160A  118A  27BE  120A  158A  	fcall	_I2C_Master_Stop
  5658                           
  5659                           ;I2C.c: 64: _delay((unsigned long)((200)*(10000000/4000.0)));
  5660  0BBF  3003               	movlw	3
  5661  0BC0  00F7               	movwf	??_EEPROM_Write+2
  5662  0BC1  308A               	movlw	138
  5663  0BC2  00F6               	movwf	??_EEPROM_Write+1
  5664  0BC3  3056               	movlw	86
  5665  0BC4  00F5               	movwf	??_EEPROM_Write
  5666  0BC5                     u3667:	
  5667  0BC5  0BF5               	decfsz	??_EEPROM_Write,f
  5668  0BC6  2BC5               	goto	u3667
  5669  0BC7  0BF6               	decfsz	??_EEPROM_Write+1,f
  5670  0BC8  2BC5               	goto	u3667
  5671  0BC9  0BF7               	decfsz	??_EEPROM_Write+2,f
  5672  0BCA  2BC5               	goto	u3667
  5673  0BCB  2BCC               	nop2
  5674  0BCC  0008               	return
  5675  0BCD                     __end_of_EEPROM_Write:	
  5676                           
  5677                           	psect	text18
  5678  17C5                     __ptext18:	
  5679 ;; *************** function _I2C_Master_Write *****************
  5680 ;; Defined at:
  5681 ;;		line 34 in file "I2C.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;  d               2    0[COMMON] unsigned int 
  5684 ;; Auto vars:     Size  Location     Type
  5685 ;;		None
  5686 ;; Return value:  Size  Location     Type
  5687 ;;                  1    wreg      void 
  5688 ;; Registers used:
  5689 ;;		wreg, status,2, status,0, pclath, cstack
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 0/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5695 ;;      Params:         2       0       0       0       0
  5696 ;;      Locals:         0       0       0       0       0
  5697 ;;      Temps:          0       0       0       0       0
  5698 ;;      Totals:         2       0       0       0       0
  5699 ;;Total ram usage:        2 bytes
  5700 ;; Hardware stack levels used:    1
  5701 ;; Hardware stack levels required when called:    1
  5702 ;; This function calls:
  5703 ;;		_I2C_Master_Wait
  5704 ;; This function is called by:
  5705 ;;		_EEPROM_Write
  5706 ;;		_EEPROM_Read
  5707 ;; This function uses a non-reentrant model
  5708 ;;
  5709                           
  5710                           
  5711                           ;psect for function _I2C_Master_Write
  5712  17C5                     _I2C_Master_Write:	
  5713                           
  5714                           ;I2C.c: 35: I2C_Master_Wait();
  5715                           
  5716                           ;incstack = 0
  5717                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5718  17C5  120A  158A  202F   	fcall	_I2C_Master_Wait
  5719                           
  5720                           ;I2C.c: 36: SSPBUF = d;
  5721  17C8  0870               	movf	I2C_Master_Write@d,w
  5722  17C9  1283               	bcf	3,5	;RP0=0, select bank0
  5723  17CA  1303               	bcf	3,6	;RP1=0, select bank0
  5724  17CB  0093               	movwf	19	;volatile
  5725  17CC  0008               	return
  5726  17CD                     __end_of_I2C_Master_Write:	
  5727                           
  5728                           	psect	text19
  5729  17BE                     __ptext19:	
  5730 ;; *************** function _I2C_Master_Stop *****************
  5731 ;; Defined at:
  5732 ;;		line 29 in file "I2C.c"
  5733 ;; Parameters:    Size  Location     Type
  5734 ;;		None
  5735 ;; Auto vars:     Size  Location     Type
  5736 ;;		None
  5737 ;; Return value:  Size  Location     Type
  5738 ;;                  1    wreg      void 
  5739 ;; Registers used:
  5740 ;;		wreg, status,2, status,0, pclath, cstack
  5741 ;; Tracked objects:
  5742 ;;		On entry : 0/0
  5743 ;;		On exit  : 0/0
  5744 ;;		Unchanged: 0/0
  5745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5746 ;;      Params:         0       0       0       0       0
  5747 ;;      Locals:         0       0       0       0       0
  5748 ;;      Temps:          0       0       0       0       0
  5749 ;;      Totals:         0       0       0       0       0
  5750 ;;Total ram usage:        0 bytes
  5751 ;; Hardware stack levels used:    1
  5752 ;; Hardware stack levels required when called:    1
  5753 ;; This function calls:
  5754 ;;		_I2C_Master_Wait
  5755 ;; This function is called by:
  5756 ;;		_EEPROM_Write
  5757 ;;		_EEPROM_Read
  5758 ;; This function uses a non-reentrant model
  5759 ;;
  5760                           
  5761                           
  5762                           ;psect for function _I2C_Master_Stop
  5763  17BE                     _I2C_Master_Stop:	
  5764                           
  5765                           ;I2C.c: 30: I2C_Master_Wait();
  5766                           
  5767                           ;incstack = 0
  5768                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5769  17BE  120A  158A  202F   	fcall	_I2C_Master_Wait
  5770                           
  5771                           ;I2C.c: 31: PEN = 1;
  5772  17C1  1683               	bsf	3,5	;RP0=1, select bank1
  5773  17C2  1303               	bcf	3,6	;RP1=0, select bank1
  5774  17C3  1511               	bsf	17,2	;volatile
  5775  17C4  0008               	return
  5776  17C5                     __end_of_I2C_Master_Stop:	
  5777                           
  5778                           	psect	text20
  5779  17B7                     __ptext20:	
  5780 ;; *************** function _I2C_Master_Start *****************
  5781 ;; Defined at:
  5782 ;;		line 19 in file "I2C.c"
  5783 ;; Parameters:    Size  Location     Type
  5784 ;;		None
  5785 ;; Auto vars:     Size  Location     Type
  5786 ;;		None
  5787 ;; Return value:  Size  Location     Type
  5788 ;;                  1    wreg      void 
  5789 ;; Registers used:
  5790 ;;		wreg, status,2, status,0, pclath, cstack
  5791 ;; Tracked objects:
  5792 ;;		On entry : 0/0
  5793 ;;		On exit  : 0/0
  5794 ;;		Unchanged: 0/0
  5795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5796 ;;      Params:         0       0       0       0       0
  5797 ;;      Locals:         0       0       0       0       0
  5798 ;;      Temps:          0       0       0       0       0
  5799 ;;      Totals:         0       0       0       0       0
  5800 ;;Total ram usage:        0 bytes
  5801 ;; Hardware stack levels used:    1
  5802 ;; Hardware stack levels required when called:    1
  5803 ;; This function calls:
  5804 ;;		_I2C_Master_Wait
  5805 ;; This function is called by:
  5806 ;;		_EEPROM_Write
  5807 ;;		_EEPROM_Read
  5808 ;; This function uses a non-reentrant model
  5809 ;;
  5810                           
  5811                           
  5812                           ;psect for function _I2C_Master_Start
  5813  17B7                     _I2C_Master_Start:	
  5814                           
  5815                           ;I2C.c: 20: I2C_Master_Wait();
  5816                           
  5817                           ;incstack = 0
  5818                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5819  17B7  120A  158A  202F   	fcall	_I2C_Master_Wait
  5820                           
  5821                           ;I2C.c: 21: SEN = 1;
  5822  17BA  1683               	bsf	3,5	;RP0=1, select bank1
  5823  17BB  1303               	bcf	3,6	;RP1=0, select bank1
  5824  17BC  1411               	bsf	17,0	;volatile
  5825  17BD  0008               	return
  5826  17BE                     __end_of_I2C_Master_Start:	
  5827                           
  5828                           	psect	text21
  5829  082F                     __ptext21:	
  5830 ;; *************** function _I2C_Master_Wait *****************
  5831 ;; Defined at:
  5832 ;;		line 15 in file "I2C.c"
  5833 ;; Parameters:    Size  Location     Type
  5834 ;;		None
  5835 ;; Auto vars:     Size  Location     Type
  5836 ;;		None
  5837 ;; Return value:  Size  Location     Type
  5838 ;;                  1    wreg      void 
  5839 ;; Registers used:
  5840 ;;		wreg, status,2
  5841 ;; Tracked objects:
  5842 ;;		On entry : 0/0
  5843 ;;		On exit  : 0/0
  5844 ;;		Unchanged: 0/0
  5845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5846 ;;      Params:         0       0       0       0       0
  5847 ;;      Locals:         0       0       0       0       0
  5848 ;;      Temps:          0       0       0       0       0
  5849 ;;      Totals:         0       0       0       0       0
  5850 ;;Total ram usage:        0 bytes
  5851 ;; Hardware stack levels used:    1
  5852 ;; This function calls:
  5853 ;;		Nothing
  5854 ;; This function is called by:
  5855 ;;		_I2C_Master_Start
  5856 ;;		_I2C_Master_Stop
  5857 ;;		_I2C_Master_Write
  5858 ;;		_I2C_Master_RepeatedStart
  5859 ;;		_I2C_Master_Read
  5860 ;; This function uses a non-reentrant model
  5861 ;;
  5862                           
  5863                           
  5864                           ;psect for function _I2C_Master_Wait
  5865  082F                     _I2C_Master_Wait:	
  5866  082F                     l465:	
  5867                           ;I2C.c: 16: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5868                           
  5869                           ;incstack = 0
  5870                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5871                           
  5872  082F  1683               	bsf	3,5	;RP0=1, select bank1
  5873  0830  1303               	bcf	3,6	;RP1=0, select bank1
  5874  0831  1914               	btfsc	20,2	;volatile
  5875  0832  282F               	goto	l465
  5876  0833  0811               	movf	17,w	;volatile
  5877  0834  391F               	andlw	31
  5878  0835  1903               	btfsc	3,2
  5879  0836  0008               	return
  5880  0837  282F               	goto	l465
  5881  0838                     __end_of_I2C_Master_Wait:	
  5882                           
  5883                           	psect	text22
  5884  0912                     __ptext22:	
  5885 ;; *************** function _CWTX *****************
  5886 ;; Defined at:
  5887 ;;		line 284 in file "FMCW.c"
  5888 ;; Parameters:    Size  Location     Type
  5889 ;;  Nref            2   60[BANK0 ] int 
  5890 ;;  Nprg            2   62[BANK0 ] PTR int 
  5891 ;;		 -> RAM(512), main@CWTX_Nprg(10), CWTX_Nprg(10), 
  5892 ;; Auto vars:     Size  Location     Type
  5893 ;;  cwtx            2   64[BANK0 ] int 
  5894 ;; Return value:  Size  Location     Type
  5895 ;;                  1    wreg      void 
  5896 ;; Registers used:
  5897 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5898 ;; Tracked objects:
  5899 ;;		On entry : 0/0
  5900 ;;		On exit  : 0/0
  5901 ;;		Unchanged: 0/0
  5902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5903 ;;      Params:         0       4       0       0       0
  5904 ;;      Locals:         0       2       0       0       0
  5905 ;;      Temps:          0       0       0       0       0
  5906 ;;      Totals:         0       6       0       0       0
  5907 ;;Total ram usage:        6 bytes
  5908 ;; Hardware stack levels used:    1
  5909 ;; Hardware stack levels required when called:    3
  5910 ;; This function calls:
  5911 ;;		_OPINIT
  5912 ;;		_OUTFQ
  5913 ;;		_RFDOUT
  5914 ;; This function is called by:
  5915 ;;		_main
  5916 ;;		_SetPLL
  5917 ;; This function uses a non-reentrant model
  5918 ;;
  5919                           
  5920                           
  5921                           ;psect for function _CWTX
  5922  0912                     _CWTX:	
  5923                           
  5924                           ;FMCW.c: 285: int cwtx = 2;
  5925                           
  5926                           ;incstack = 0
  5927                           ; Regs used in _CWTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5928  0912  3002               	movlw	2
  5929  0913  1283               	bcf	3,5	;RP0=0, select bank0
  5930  0914  1303               	bcf	3,6	;RP1=0, select bank0
  5931  0915  00E0               	movwf	CWTX@cwtx
  5932  0916  3000               	movlw	0
  5933  0917  00E1               	movwf	CWTX@cwtx+1
  5934                           
  5935                           ;FMCW.c: 286: OPINIT(cwtx);
  5936  0918  0861               	movf	CWTX@cwtx+1,w
  5937  0919  00F5               	movwf	OPINIT@fmcwtxrx+1
  5938  091A  0860               	movf	CWTX@cwtx,w
  5939  091B  00F4               	movwf	OPINIT@fmcwtxrx
  5940  091C  120A  158A  248C  120A  158A  	fcall	_OPINIT
  5941                           
  5942                           ;FMCW.c: 287: RFDOUT(cwtx, Nref);
  5943  0921  1283               	bcf	3,5	;RP0=0, select bank0
  5944  0922  1303               	bcf	3,6	;RP1=0, select bank0
  5945  0923  0861               	movf	CWTX@cwtx+1,w
  5946  0924  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5947  0925  0860               	movf	CWTX@cwtx,w
  5948  0926  00F9               	movwf	RFDOUT@fmcwtxrx
  5949  0927  085D               	movf	CWTX@Nref+1,w
  5950  0928  00FC               	movwf	RFDOUT@Nref+1
  5951  0929  085C               	movf	CWTX@Nref,w
  5952  092A  00FB               	movwf	RFDOUT@Nref
  5953  092B  120A  158A  258B  120A  158A  	fcall	_RFDOUT
  5954                           
  5955                           ;FMCW.c: 288: OUTFQ(cwtx, Nprg);
  5956  0930  1283               	bcf	3,5	;RP0=0, select bank0
  5957  0931  1303               	bcf	3,6	;RP1=0, select bank0
  5958  0932  0861               	movf	CWTX@cwtx+1,w
  5959  0933  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5960  0934  0860               	movf	CWTX@cwtx,w
  5961  0935  00F9               	movwf	OUTFQ@fmcwtxrx
  5962  0936  085E               	movf	CWTX@Nprg,w
  5963  0937  00FB               	movwf	OUTFQ@Nprg
  5964  0938  085F               	movf	CWTX@Nprg+1,w
  5965  0939  00FC               	movwf	OUTFQ@Nprg+1
  5966  093A  120A  118A  20AC   	fcall	_OUTFQ
  5967  093D  0008               	return
  5968  093E                     __end_of_CWTX:	
  5969                           
  5970                           	psect	text23
  5971  0D8B                     __ptext23:	
  5972 ;; *************** function _RFDOUT *****************
  5973 ;; Defined at:
  5974 ;;		line 200 in file "FMCW.c"
  5975 ;; Parameters:    Size  Location     Type
  5976 ;;  fmcwtxrx        2    9[COMMON] int 
  5977 ;;  Nref            2   11[COMMON] int 
  5978 ;; Auto vars:     Size  Location     Type
  5979 ;;  i               2   31[BANK0 ] int 
  5980 ;;  i               2   27[BANK0 ] int 
  5981 ;;  i               2   29[BANK0 ] int 
  5982 ;;  Nref_b         24    3[BANK0 ] int [12]
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  1    wreg      void 
  5985 ;; Registers used:
  5986 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 0/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5992 ;;      Params:         4       0       0       0       0
  5993 ;;      Locals:         0      30       0       0       0
  5994 ;;      Temps:          0       3       0       0       0
  5995 ;;      Totals:         4      33       0       0       0
  5996 ;;Total ram usage:       37 bytes
  5997 ;; Hardware stack levels used:    1
  5998 ;; Hardware stack levels required when called:    2
  5999 ;; This function calls:
  6000 ;;		_H_OUT
  6001 ;;		_L_OUT
  6002 ;;		_STBOUT
  6003 ;;		___awdiv
  6004 ;; This function is called by:
  6005 ;;		_FMTX
  6006 ;;		_CWTX
  6007 ;;		_FMRX
  6008 ;; This function uses a non-reentrant model
  6009 ;;
  6010                           
  6011                           
  6012                           ;psect for function _RFDOUT
  6013  0D8B                     _RFDOUT:	
  6014                           
  6015                           ;FMCW.c: 201: int Nref_b[12];
  6016                           ;FMCW.c: 203: for(int i=0; i<12; i++){
  6017                           
  6018                           ;incstack = 0
  6019                           ; Regs used in _RFDOUT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6020  0D8B  1283               	bcf	3,5	;RP0=0, select bank0
  6021  0D8C  1303               	bcf	3,6	;RP1=0, select bank0
  6022  0D8D  01BD               	clrf	RFDOUT@i
  6023  0D8E  01BE               	clrf	RFDOUT@i+1
  6024  0D8F  083E               	movf	RFDOUT@i+1,w
  6025  0D90  3A80               	xorlw	128
  6026  0D91  00FF               	movwf	127
  6027  0D92  3080               	movlw	128
  6028  0D93  027F               	subwf	127,w
  6029  0D94  1D03               	skipz
  6030  0D95  2D98               	goto	u2925
  6031  0D96  300C               	movlw	12
  6032  0D97  023D               	subwf	RFDOUT@i,w
  6033  0D98                     u2925:	
  6034  0D98  1803               	btfsc	3,0
  6035  0D99  2DB6               	goto	l3234
  6036  0D9A                     l3228:	
  6037                           
  6038                           ;FMCW.c: 204: Nref_b[i] = 0;
  6039  0D9A  1283               	bcf	3,5	;RP0=0, select bank0
  6040  0D9B  1303               	bcf	3,6	;RP1=0, select bank0
  6041  0D9C  083D               	movf	RFDOUT@i,w
  6042  0D9D  00A0               	movwf	??_RFDOUT
  6043  0D9E  0720               	addwf	??_RFDOUT,w
  6044  0D9F  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6045  0DA0  0084               	movwf	4
  6046  0DA1  1383               	bcf	3,7	;select IRP bank0
  6047  0DA2  0180               	clrf	0
  6048  0DA3  0A84               	incf	4,f
  6049  0DA4  0180               	clrf	0
  6050  0DA5  3001               	movlw	1
  6051  0DA6  07BD               	addwf	RFDOUT@i,f
  6052  0DA7  1803               	skipnc
  6053  0DA8  0ABE               	incf	RFDOUT@i+1,f
  6054  0DA9  3000               	movlw	0
  6055  0DAA  07BE               	addwf	RFDOUT@i+1,f
  6056  0DAB  083E               	movf	RFDOUT@i+1,w
  6057  0DAC  3A80               	xorlw	128
  6058  0DAD  00FF               	movwf	127
  6059  0DAE  3080               	movlw	128
  6060  0DAF  027F               	subwf	127,w
  6061  0DB0  1D03               	skipz
  6062  0DB1  2DB4               	goto	u2935
  6063  0DB2  300C               	movlw	12
  6064  0DB3  023D               	subwf	RFDOUT@i,w
  6065  0DB4                     u2935:	
  6066  0DB4  1C03               	skipc
  6067  0DB5  2D9A               	goto	l3228
  6068  0DB6                     l3234:	
  6069                           
  6070                           ;FMCW.c: 205: }
  6071                           ;FMCW.c: 208: for(int i=0; Nref>0; i++){
  6072  0DB6  1283               	bcf	3,5	;RP0=0, select bank0
  6073  0DB7  1303               	bcf	3,6	;RP1=0, select bank0
  6074  0DB8  01BB               	clrf	RFDOUT@i_430
  6075  0DB9  01BC               	clrf	RFDOUT@i_430+1
  6076  0DBA  087C               	movf	RFDOUT@Nref+1,w
  6077  0DBB  3A80               	xorlw	128
  6078  0DBC  00FF               	movwf	127
  6079  0DBD  3080               	movlw	128
  6080  0DBE  027F               	subwf	127,w
  6081  0DBF  1D03               	skipz
  6082  0DC0  2DC3               	goto	u2945
  6083  0DC1  3001               	movlw	1
  6084  0DC2  027B               	subwf	RFDOUT@Nref,w
  6085  0DC3                     u2945:	
  6086  0DC3  1C03               	btfss	3,0
  6087  0DC4  2DFC               	goto	l3248
  6088  0DC5                     l3240:	
  6089                           
  6090                           ;FMCW.c: 209: Nref_b[i] = Nref % 2;
  6091  0DC5  3001               	movlw	1
  6092  0DC6  057B               	andwf	RFDOUT@Nref,w
  6093  0DC7  1283               	bcf	3,5	;RP0=0, select bank0
  6094  0DC8  1303               	bcf	3,6	;RP1=0, select bank0
  6095  0DC9  00A0               	movwf	??_RFDOUT
  6096  0DCA  3000               	movlw	0
  6097  0DCB  057C               	andwf	RFDOUT@Nref+1,w
  6098  0DCC  00A1               	movwf	??_RFDOUT+1
  6099  0DCD  083B               	movf	RFDOUT@i_430,w
  6100  0DCE  00A2               	movwf	??_RFDOUT+2
  6101  0DCF  0722               	addwf	??_RFDOUT+2,w
  6102  0DD0  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6103  0DD1  0084               	movwf	4
  6104  0DD2  0820               	movf	??_RFDOUT,w
  6105  0DD3  1383               	bcf	3,7	;select IRP bank0
  6106  0DD4  0080               	movwf	0
  6107  0DD5  0A84               	incf	4,f
  6108  0DD6  0821               	movf	??_RFDOUT+1,w
  6109  0DD7  0080               	movwf	0
  6110                           
  6111                           ;FMCW.c: 210: Nref = Nref / 2;
  6112  0DD8  3002               	movlw	2
  6113  0DD9  00F0               	movwf	___awdiv@divisor
  6114  0DDA  3000               	movlw	0
  6115  0DDB  00F1               	movwf	___awdiv@divisor+1
  6116  0DDC  087C               	movf	RFDOUT@Nref+1,w
  6117  0DDD  00F3               	movwf	___awdiv@dividend+1
  6118  0DDE  087B               	movf	RFDOUT@Nref,w
  6119  0DDF  00F2               	movwf	___awdiv@dividend
  6120  0DE0  120A  158A  2317  120A  158A  	fcall	___awdiv
  6121  0DE5  0871               	movf	?___awdiv+1,w
  6122  0DE6  00FC               	movwf	RFDOUT@Nref+1
  6123  0DE7  0870               	movf	?___awdiv,w
  6124  0DE8  00FB               	movwf	RFDOUT@Nref
  6125  0DE9  3001               	movlw	1
  6126  0DEA  1283               	bcf	3,5	;RP0=0, select bank0
  6127  0DEB  1303               	bcf	3,6	;RP1=0, select bank0
  6128  0DEC  07BB               	addwf	RFDOUT@i_430,f
  6129  0DED  1803               	skipnc
  6130  0DEE  0ABC               	incf	RFDOUT@i_430+1,f
  6131  0DEF  3000               	movlw	0
  6132  0DF0  07BC               	addwf	RFDOUT@i_430+1,f
  6133  0DF1  087C               	movf	RFDOUT@Nref+1,w
  6134  0DF2  3A80               	xorlw	128
  6135  0DF3  00FF               	movwf	127
  6136  0DF4  3080               	movlw	128
  6137  0DF5  027F               	subwf	127,w
  6138  0DF6  1D03               	skipz
  6139  0DF7  2DFA               	goto	u2955
  6140  0DF8  3001               	movlw	1
  6141  0DF9  027B               	subwf	RFDOUT@Nref,w
  6142  0DFA                     u2955:	
  6143  0DFA  1803               	skipnc
  6144  0DFB  2DC5               	goto	l3240
  6145  0DFC                     l3248:	
  6146                           
  6147                           ;FMCW.c: 211: }
  6148                           ;FMCW.c: 214: for (int i=0; i<12; i++)
  6149  0DFC  1283               	bcf	3,5	;RP0=0, select bank0
  6150  0DFD  1303               	bcf	3,6	;RP1=0, select bank0
  6151  0DFE  01BF               	clrf	RFDOUT@i_431
  6152  0DFF  01C0               	clrf	RFDOUT@i_431+1
  6153  0E00  0840               	movf	RFDOUT@i_431+1,w
  6154  0E01  3A80               	xorlw	128
  6155  0E02  00FF               	movwf	127
  6156  0E03  3080               	movlw	128
  6157  0E04  027F               	subwf	127,w
  6158  0E05  1D03               	skipz
  6159  0E06  2E09               	goto	u2965
  6160  0E07  300C               	movlw	12
  6161  0E08  023F               	subwf	RFDOUT@i_431,w
  6162  0E09                     u2965:	
  6163  0E09  1803               	btfsc	3,0
  6164  0E0A  2E52               	goto	l3266
  6165  0E0B                     l3254:	
  6166                           
  6167                           ;FMCW.c: 215: {
  6168                           ;FMCW.c: 216: if(Nref_b[i] == 0)
  6169  0E0B  1283               	bcf	3,5	;RP0=0, select bank0
  6170  0E0C  1303               	bcf	3,6	;RP1=0, select bank0
  6171  0E0D  083F               	movf	RFDOUT@i_431,w
  6172  0E0E  00A0               	movwf	??_RFDOUT
  6173  0E0F  0720               	addwf	??_RFDOUT,w
  6174  0E10  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6175  0E11  0084               	movwf	4
  6176  0E12  1383               	bcf	3,7	;select IRP bank0
  6177  0E13  0800               	movf	0,w
  6178  0E14  00A1               	movwf	??_RFDOUT+1
  6179  0E15  0A84               	incf	4,f
  6180  0E16  0800               	movf	0,w
  6181  0E17  00A2               	movwf	??_RFDOUT+2
  6182  0E18  0821               	movf	??_RFDOUT+1,w
  6183  0E19  0422               	iorwf	??_RFDOUT+2,w
  6184  0E1A  1D03               	btfss	3,2
  6185  0E1B  2E25               	goto	l3258
  6186                           
  6187                           ;FMCW.c: 217: {
  6188                           ;FMCW.c: 218: L_OUT(fmcwtxrx);
  6189  0E1C  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6190  0E1D  00F3               	movwf	L_OUT@fmcwtxrx+1
  6191  0E1E  0879               	movf	RFDOUT@fmcwtxrx,w
  6192  0E1F  00F2               	movwf	L_OUT@fmcwtxrx
  6193  0E20  120A  158A  223E  120A  158A  	fcall	_L_OUT
  6194  0E25                     l3258:	
  6195                           
  6196                           ;FMCW.c: 219: }
  6197                           ;FMCW.c: 220: if(Nref_b[i] == 1)
  6198  0E25  1283               	bcf	3,5	;RP0=0, select bank0
  6199  0E26  1303               	bcf	3,6	;RP1=0, select bank0
  6200  0E27  083F               	movf	RFDOUT@i_431,w
  6201  0E28  00A0               	movwf	??_RFDOUT
  6202  0E29  0720               	addwf	??_RFDOUT,w
  6203  0E2A  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6204  0E2B  0084               	movwf	4
  6205  0E2C  1383               	bcf	3,7	;select IRP bank0
  6206  0E2D  0800               	movf	0,w
  6207  0E2E  00A1               	movwf	??_RFDOUT+1
  6208  0E2F  0A84               	incf	4,f
  6209  0E30  0800               	movf	0,w
  6210  0E31  00A2               	movwf	??_RFDOUT+2
  6211  0E32  0321               	decf	??_RFDOUT+1,w
  6212  0E33  0422               	iorwf	??_RFDOUT+2,w
  6213  0E34  1D03               	btfss	3,2
  6214  0E35  2E3F               	goto	l3262
  6215                           
  6216                           ;FMCW.c: 221: {
  6217                           ;FMCW.c: 222: H_OUT(fmcwtxrx);
  6218  0E36  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6219  0E37  00F3               	movwf	H_OUT@fmcwtxrx+1
  6220  0E38  0879               	movf	RFDOUT@fmcwtxrx,w
  6221  0E39  00F2               	movwf	H_OUT@fmcwtxrx
  6222  0E3A  120A  158A  21F8  120A  158A  	fcall	_H_OUT
  6223  0E3F                     l3262:	
  6224  0E3F  3001               	movlw	1
  6225  0E40  1283               	bcf	3,5	;RP0=0, select bank0
  6226  0E41  1303               	bcf	3,6	;RP1=0, select bank0
  6227  0E42  07BF               	addwf	RFDOUT@i_431,f
  6228  0E43  1803               	skipnc
  6229  0E44  0AC0               	incf	RFDOUT@i_431+1,f
  6230  0E45  3000               	movlw	0
  6231  0E46  07C0               	addwf	RFDOUT@i_431+1,f
  6232  0E47  0840               	movf	RFDOUT@i_431+1,w
  6233  0E48  3A80               	xorlw	128
  6234  0E49  00FF               	movwf	127
  6235  0E4A  3080               	movlw	128
  6236  0E4B  027F               	subwf	127,w
  6237  0E4C  1D03               	skipz
  6238  0E4D  2E50               	goto	u2995
  6239  0E4E  300C               	movlw	12
  6240  0E4F  023F               	subwf	RFDOUT@i_431,w
  6241  0E50                     u2995:	
  6242  0E50  1C03               	skipc
  6243  0E51  2E0B               	goto	l3254
  6244  0E52                     l3266:	
  6245                           
  6246                           ;FMCW.c: 223: }
  6247                           ;FMCW.c: 224: }
  6248                           ;FMCW.c: 227: H_OUT(fmcwtxrx);
  6249  0E52  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6250  0E53  00F3               	movwf	H_OUT@fmcwtxrx+1
  6251  0E54  0879               	movf	RFDOUT@fmcwtxrx,w
  6252  0E55  00F2               	movwf	H_OUT@fmcwtxrx
  6253  0E56  120A  158A  21F8  120A  158A  	fcall	_H_OUT
  6254                           
  6255                           ;FMCW.c: 228: H_OUT(fmcwtxrx);
  6256  0E5B  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6257  0E5C  00F3               	movwf	H_OUT@fmcwtxrx+1
  6258  0E5D  0879               	movf	RFDOUT@fmcwtxrx,w
  6259  0E5E  00F2               	movwf	H_OUT@fmcwtxrx
  6260  0E5F  120A  158A  21F8  120A  158A  	fcall	_H_OUT
  6261                           
  6262                           ;FMCW.c: 231: STBOUT(fmcwtxrx);
  6263  0E64  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6264  0E65  00F3               	movwf	STBOUT@fmcwtxrx+1
  6265  0E66  0879               	movf	RFDOUT@fmcwtxrx,w
  6266  0E67  00F2               	movwf	STBOUT@fmcwtxrx
  6267  0E68  120A  158A  2196   	fcall	_STBOUT
  6268  0E6B  0008               	return
  6269  0E6C                     __end_of_RFDOUT:	
  6270                           
  6271                           	psect	text24
  6272  00AC                     __ptext24:	
  6273 ;; *************** function _OUTFQ *****************
  6274 ;; Defined at:
  6275 ;;		line 136 in file "FMCW.c"
  6276 ;; Parameters:    Size  Location     Type
  6277 ;;  fmcwtxrx        2    9[COMMON] int 
  6278 ;;  Nprg            2   11[COMMON] PTR int 
  6279 ;;		 -> RAM(512), main@FMRX_Nprg(10), main@CWTX_Nprg(10), main@FMTX_Nprg(10), 
  6280 ;;		 -> FMRX_Nprg(10), CWTX_Nprg(10), FMTX_Nprg(10), 
  6281 ;; Auto vars:     Size  Location     Type
  6282 ;;  j               2   58[BANK0 ] int 
  6283 ;;  i               2   56[BANK0 ] int 
  6284 ;;  i               2   50[BANK0 ] int 
  6285 ;;  i               2   54[BANK0 ] int 
  6286 ;;  Nprg_b         34   16[BANK0 ] int [17]
  6287 ;;  count           2   52[BANK0 ] int 
  6288 ;; Return value:  Size  Location     Type
  6289 ;;                  1    wreg      void 
  6290 ;; Registers used:
  6291 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6292 ;; Tracked objects:
  6293 ;;		On entry : 0/0
  6294 ;;		On exit  : 0/0
  6295 ;;		Unchanged: 0/0
  6296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6297 ;;      Params:         4       0       0       0       0
  6298 ;;      Locals:         0      44       0       0       0
  6299 ;;      Temps:          0      16       0       0       0
  6300 ;;      Totals:         4      60       0       0       0
  6301 ;;Total ram usage:       64 bytes
  6302 ;; Hardware stack levels used:    1
  6303 ;; Hardware stack levels required when called:    2
  6304 ;; This function calls:
  6305 ;;		_H_OUT
  6306 ;;		_L_OUT
  6307 ;;		_STBOUT
  6308 ;;		___awdiv
  6309 ;; This function is called by:
  6310 ;;		_FMTX
  6311 ;;		_CWTX
  6312 ;;		_FMRX
  6313 ;; This function uses a non-reentrant model
  6314 ;;
  6315                           
  6316                           
  6317                           ;psect for function _OUTFQ
  6318  00AC                     _OUTFQ:	
  6319                           
  6320                           ;FMCW.c: 137: int count = 0;
  6321                           
  6322                           ;incstack = 0
  6323                           ; Regs used in _OUTFQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6324  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  6325  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  6326  00AE  01D4               	clrf	OUTFQ@count
  6327  00AF  01D5               	clrf	OUTFQ@count+1
  6328                           
  6329                           ;FMCW.c: 138: int Nprg_b[17];
  6330                           ;FMCW.c: 140: for(int i=0; i<17; i++){
  6331  00B0  01D6               	clrf	OUTFQ@i
  6332  00B1  01D7               	clrf	OUTFQ@i+1
  6333  00B2  0857               	movf	OUTFQ@i+1,w
  6334  00B3  3A80               	xorlw	128
  6335  00B4  00FF               	movwf	127
  6336  00B5  3080               	movlw	128
  6337  00B6  027F               	subwf	127,w
  6338  00B7  1D03               	skipz
  6339  00B8  28BB               	goto	u2785
  6340  00B9  3011               	movlw	17
  6341  00BA  0256               	subwf	OUTFQ@i,w
  6342  00BB                     u2785:	
  6343  00BB  1803               	btfsc	3,0
  6344  00BC  28D9               	goto	l3156
  6345  00BD                     l3150:	
  6346                           
  6347                           ;FMCW.c: 141: Nprg_b[i] = 0;
  6348  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  6349  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  6350  00BF  0856               	movf	OUTFQ@i,w
  6351  00C0  00A0               	movwf	??_OUTFQ
  6352  00C1  0720               	addwf	??_OUTFQ,w
  6353  00C2  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6354  00C3  0084               	movwf	4
  6355  00C4  1383               	bcf	3,7	;select IRP bank0
  6356  00C5  0180               	clrf	0
  6357  00C6  0A84               	incf	4,f
  6358  00C7  0180               	clrf	0
  6359  00C8  3001               	movlw	1
  6360  00C9  07D6               	addwf	OUTFQ@i,f
  6361  00CA  1803               	skipnc
  6362  00CB  0AD7               	incf	OUTFQ@i+1,f
  6363  00CC  3000               	movlw	0
  6364  00CD  07D7               	addwf	OUTFQ@i+1,f
  6365  00CE  0857               	movf	OUTFQ@i+1,w
  6366  00CF  3A80               	xorlw	128
  6367  00D0  00FF               	movwf	127
  6368  00D1  3080               	movlw	128
  6369  00D2  027F               	subwf	127,w
  6370  00D3  1D03               	skipz
  6371  00D4  28D7               	goto	u2795
  6372  00D5  3011               	movlw	17
  6373  00D6  0256               	subwf	OUTFQ@i,w
  6374  00D7                     u2795:	
  6375  00D7  1C03               	skipc
  6376  00D8  28BD               	goto	l3150
  6377  00D9                     l3156:	
  6378                           
  6379                           ;FMCW.c: 142: }
  6380                           ;FMCW.c: 145: for(int i = 0; i < 17; i++){
  6381  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  6382  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  6383  00DB  01D2               	clrf	OUTFQ@i_419
  6384  00DC  01D3               	clrf	OUTFQ@i_419+1
  6385  00DD  0853               	movf	OUTFQ@i_419+1,w
  6386  00DE  3A80               	xorlw	128
  6387  00DF  00FF               	movwf	127
  6388  00E0  3080               	movlw	128
  6389  00E1  027F               	subwf	127,w
  6390  00E2  1D03               	skipz
  6391  00E3  28E6               	goto	u2805
  6392  00E4  3011               	movlw	17
  6393  00E5  0252               	subwf	OUTFQ@i_419,w
  6394  00E6                     u2805:	
  6395  00E6  1803               	btfsc	3,0
  6396  00E7  2AB7               	goto	l3202
  6397  00E8                     l3162:	
  6398                           
  6399                           ;FMCW.c: 146: for(int j = 0; j<5; j++){
  6400  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  6401  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  6402  00EA  01DA               	clrf	OUTFQ@j
  6403  00EB  01DB               	clrf	OUTFQ@j+1
  6404  00EC  085B               	movf	OUTFQ@j+1,w
  6405  00ED  3A80               	xorlw	128
  6406  00EE  00FF               	movwf	127
  6407  00EF  3080               	movlw	128
  6408  00F0  027F               	subwf	127,w
  6409  00F1  1D03               	skipz
  6410  00F2  28F5               	goto	u2815
  6411  00F3  3005               	movlw	5
  6412  00F4  025A               	subwf	OUTFQ@j,w
  6413  00F5                     u2815:	
  6414  00F5  1803               	btfsc	3,0
  6415  00F6  2AA4               	goto	l3198
  6416  00F7                     l3168:	
  6417                           
  6418                           ;FMCW.c: 147: if(Nprg[j] % 2 == 0) {
  6419  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  6420  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  6421  00F9  085B               	movf	OUTFQ@j+1,w
  6422  00FA  00A1               	movwf	??_OUTFQ+1
  6423  00FB  085A               	movf	OUTFQ@j,w
  6424  00FC  00A0               	movwf	??_OUTFQ
  6425  00FD  1003               	clrc
  6426  00FE  0DA0               	rlf	??_OUTFQ,f
  6427  00FF  0DA1               	rlf	??_OUTFQ+1,f
  6428  0100  0820               	movf	??_OUTFQ,w
  6429  0101  077B               	addwf	OUTFQ@Nprg,w
  6430  0102  00A2               	movwf	??_OUTFQ+2
  6431  0103  0821               	movf	??_OUTFQ+1,w
  6432  0104  1803               	skipnc
  6433  0105  0A21               	incf	??_OUTFQ+1,w
  6434  0106  077C               	addwf	OUTFQ@Nprg+1,w
  6435  0107  00A3               	movwf	??_OUTFQ+3
  6436  0108  0822               	movf	??_OUTFQ+2,w
  6437  0109  0084               	movwf	4
  6438  010A  1783               	bsf	3,7
  6439  010B  1C23               	btfss	??_OUTFQ+3,0
  6440  010C  1383               	bcf	3,7
  6441  010D  0800               	movf	0,w
  6442  010E  00A4               	movwf	??_OUTFQ+4
  6443  010F  0A84               	incf	4,f
  6444  0110  0800               	movf	0,w
  6445  0111  00A5               	movwf	??_OUTFQ+5
  6446  0112  1824               	btfsc	??_OUTFQ+4,0
  6447  0113  299D               	goto	l3180
  6448                           
  6449                           ;FMCW.c: 148: if(j == 4){
  6450  0114  3004               	movlw	4
  6451  0115  065A               	xorwf	OUTFQ@j,w
  6452  0116  045B               	iorwf	OUTFQ@j+1,w
  6453  0117  1D03               	btfss	3,2
  6454  0118  2960               	goto	l3178
  6455                           
  6456                           ;FMCW.c: 149: Nprg[j] = Nprg[j] / 2;
  6457  0119  3002               	movlw	2
  6458  011A  00F0               	movwf	___awdiv@divisor
  6459  011B  3000               	movlw	0
  6460  011C  00F1               	movwf	___awdiv@divisor+1
  6461  011D  085B               	movf	OUTFQ@j+1,w
  6462  011E  00A1               	movwf	??_OUTFQ+1
  6463  011F  085A               	movf	OUTFQ@j,w
  6464  0120  00A0               	movwf	??_OUTFQ
  6465  0121  1003               	clrc
  6466  0122  0DA0               	rlf	??_OUTFQ,f
  6467  0123  0DA1               	rlf	??_OUTFQ+1,f
  6468  0124  0820               	movf	??_OUTFQ,w
  6469  0125  077B               	addwf	OUTFQ@Nprg,w
  6470  0126  00A2               	movwf	??_OUTFQ+2
  6471  0127  0821               	movf	??_OUTFQ+1,w
  6472  0128  1803               	skipnc
  6473  0129  0A21               	incf	??_OUTFQ+1,w
  6474  012A  077C               	addwf	OUTFQ@Nprg+1,w
  6475  012B  00A3               	movwf	??_OUTFQ+3
  6476  012C  0822               	movf	??_OUTFQ+2,w
  6477  012D  0084               	movwf	4
  6478  012E  1783               	bsf	3,7
  6479  012F  1C23               	btfss	??_OUTFQ+3,0
  6480  0130  1383               	bcf	3,7
  6481  0131  0800               	movf	0,w
  6482  0132  00F2               	movwf	___awdiv@dividend
  6483  0133  0A84               	incf	4,f
  6484  0134  0800               	movf	0,w
  6485  0135  00F3               	movwf	___awdiv@dividend+1
  6486  0136  120A  158A  2317  120A  118A  	fcall	___awdiv
  6487  013B  1283               	bcf	3,5	;RP0=0, select bank0
  6488  013C  1303               	bcf	3,6	;RP1=0, select bank0
  6489  013D  085B               	movf	OUTFQ@j+1,w
  6490  013E  00A5               	movwf	??_OUTFQ+5
  6491  013F  085A               	movf	OUTFQ@j,w
  6492  0140  00A4               	movwf	??_OUTFQ+4
  6493  0141  1003               	clrc
  6494  0142  0DA4               	rlf	??_OUTFQ+4,f
  6495  0143  0DA5               	rlf	??_OUTFQ+5,f
  6496  0144  0824               	movf	??_OUTFQ+4,w
  6497  0145  077B               	addwf	OUTFQ@Nprg,w
  6498  0146  00A6               	movwf	??_OUTFQ+6
  6499  0147  0825               	movf	??_OUTFQ+5,w
  6500  0148  1803               	skipnc
  6501  0149  0A25               	incf	??_OUTFQ+5,w
  6502  014A  077C               	addwf	OUTFQ@Nprg+1,w
  6503  014B  00A7               	movwf	??_OUTFQ+7
  6504  014C  0826               	movf	??_OUTFQ+6,w
  6505  014D  0084               	movwf	4
  6506  014E  1783               	bsf	3,7
  6507  014F  1C27               	btfss	??_OUTFQ+7,0
  6508  0150  1383               	bcf	3,7
  6509  0151  0870               	movf	?___awdiv,w
  6510  0152  0080               	movwf	0
  6511  0153  0A84               	incf	4,f
  6512  0154  0871               	movf	?___awdiv+1,w
  6513  0155  0080               	movwf	0
  6514                           
  6515                           ;FMCW.c: 150: Nprg_b[count] = 0;
  6516  0156  0854               	movf	OUTFQ@count,w
  6517  0157  00A0               	movwf	??_OUTFQ
  6518  0158  0720               	addwf	??_OUTFQ,w
  6519  0159  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6520  015A  0084               	movwf	4
  6521  015B  1383               	bcf	3,7	;select IRP bank0
  6522  015C  0180               	clrf	0
  6523  015D  0A84               	incf	4,f
  6524  015E  0180               	clrf	0
  6525  015F  2A05               	goto	l3188
  6526  0160                     l3178:	
  6527                           ;FMCW.c: 152: }
  6528                           
  6529                           ;FMCW.c: 151: count++;
  6530                           
  6531                           
  6532                           ;FMCW.c: 153: else{
  6533                           ;FMCW.c: 154: Nprg[j] = Nprg[j] / 2;
  6534  0160  3002               	movlw	2
  6535  0161  00F0               	movwf	___awdiv@divisor
  6536  0162  3000               	movlw	0
  6537  0163  00F1               	movwf	___awdiv@divisor+1
  6538  0164  085B               	movf	OUTFQ@j+1,w
  6539  0165  00A1               	movwf	??_OUTFQ+1
  6540  0166  085A               	movf	OUTFQ@j,w
  6541  0167  00A0               	movwf	??_OUTFQ
  6542  0168  1003               	clrc
  6543  0169  0DA0               	rlf	??_OUTFQ,f
  6544  016A  0DA1               	rlf	??_OUTFQ+1,f
  6545  016B  0820               	movf	??_OUTFQ,w
  6546  016C  077B               	addwf	OUTFQ@Nprg,w
  6547  016D  00A2               	movwf	??_OUTFQ+2
  6548  016E  0821               	movf	??_OUTFQ+1,w
  6549  016F  1803               	skipnc
  6550  0170  0A21               	incf	??_OUTFQ+1,w
  6551  0171  077C               	addwf	OUTFQ@Nprg+1,w
  6552  0172  00A3               	movwf	??_OUTFQ+3
  6553  0173  0822               	movf	??_OUTFQ+2,w
  6554  0174  0084               	movwf	4
  6555  0175  1783               	bsf	3,7
  6556  0176  1C23               	btfss	??_OUTFQ+3,0
  6557  0177  1383               	bcf	3,7
  6558  0178  0800               	movf	0,w
  6559  0179  00F2               	movwf	___awdiv@dividend
  6560  017A  0A84               	incf	4,f
  6561  017B  0800               	movf	0,w
  6562  017C  00F3               	movwf	___awdiv@dividend+1
  6563  017D  120A  158A  2317  120A  118A  	fcall	___awdiv
  6564  0182  1283               	bcf	3,5	;RP0=0, select bank0
  6565  0183  1303               	bcf	3,6	;RP1=0, select bank0
  6566  0184  085B               	movf	OUTFQ@j+1,w
  6567  0185  00A5               	movwf	??_OUTFQ+5
  6568  0186  085A               	movf	OUTFQ@j,w
  6569  0187  00A4               	movwf	??_OUTFQ+4
  6570  0188  1003               	clrc
  6571  0189  0DA4               	rlf	??_OUTFQ+4,f
  6572  018A  0DA5               	rlf	??_OUTFQ+5,f
  6573  018B  0824               	movf	??_OUTFQ+4,w
  6574  018C  077B               	addwf	OUTFQ@Nprg,w
  6575  018D  00A6               	movwf	??_OUTFQ+6
  6576  018E  0825               	movf	??_OUTFQ+5,w
  6577  018F  1803               	skipnc
  6578  0190  0A25               	incf	??_OUTFQ+5,w
  6579  0191  077C               	addwf	OUTFQ@Nprg+1,w
  6580  0192  00A7               	movwf	??_OUTFQ+7
  6581  0193  0826               	movf	??_OUTFQ+6,w
  6582  0194  0084               	movwf	4
  6583  0195  1783               	bsf	3,7
  6584  0196  1C27               	btfss	??_OUTFQ+7,0
  6585  0197  1383               	bcf	3,7
  6586  0198  0870               	movf	?___awdiv,w
  6587  0199  0080               	movwf	0
  6588  019A  0A84               	incf	4,f
  6589  019B  0871               	movf	?___awdiv+1,w
  6590  019C  2A92               	goto	L8
  6591  019D                     l3180:	
  6592                           ;FMCW.c: 155: }
  6593                           ;FMCW.c: 156: }
  6594                           
  6595                           
  6596                           ;FMCW.c: 157: else if(Nprg[j] % 2 == 1) {
  6597  019D  085B               	movf	OUTFQ@j+1,w
  6598  019E  00A1               	movwf	??_OUTFQ+1
  6599  019F  085A               	movf	OUTFQ@j,w
  6600  01A0  00A0               	movwf	??_OUTFQ
  6601  01A1  1003               	clrc
  6602  01A2  0DA0               	rlf	??_OUTFQ,f
  6603  01A3  0DA1               	rlf	??_OUTFQ+1,f
  6604  01A4  0820               	movf	??_OUTFQ,w
  6605  01A5  077B               	addwf	OUTFQ@Nprg,w
  6606  01A6  00A2               	movwf	??_OUTFQ+2
  6607  01A7  0821               	movf	??_OUTFQ+1,w
  6608  01A8  1803               	skipnc
  6609  01A9  0A21               	incf	??_OUTFQ+1,w
  6610  01AA  077C               	addwf	OUTFQ@Nprg+1,w
  6611  01AB  00A3               	movwf	??_OUTFQ+3
  6612  01AC  0822               	movf	??_OUTFQ+2,w
  6613  01AD  0084               	movwf	4
  6614  01AE  1783               	bsf	3,7
  6615  01AF  1C23               	btfss	??_OUTFQ+3,0
  6616  01B0  1383               	bcf	3,7
  6617  01B1  0800               	movf	0,w
  6618  01B2  00A4               	movwf	??_OUTFQ+4
  6619  01B3  0A84               	incf	4,f
  6620  01B4  0800               	movf	0,w
  6621  01B5  00A5               	movwf	??_OUTFQ+5
  6622  01B6  1C24               	btfss	??_OUTFQ+4,0
  6623  01B7  2A93               	goto	l3194
  6624                           
  6625                           ;FMCW.c: 158: if(j == 4){
  6626  01B8  3004               	movlw	4
  6627  01B9  065A               	xorwf	OUTFQ@j,w
  6628  01BA  045B               	iorwf	OUTFQ@j+1,w
  6629  01BB  1D03               	btfss	3,2
  6630  01BC  2A0C               	goto	l3190
  6631                           
  6632                           ;FMCW.c: 159: Nprg[j] = Nprg[j] / 2;
  6633  01BD  3002               	movlw	2
  6634  01BE  00F0               	movwf	___awdiv@divisor
  6635  01BF  3000               	movlw	0
  6636  01C0  00F1               	movwf	___awdiv@divisor+1
  6637  01C1  085B               	movf	OUTFQ@j+1,w
  6638  01C2  00A1               	movwf	??_OUTFQ+1
  6639  01C3  085A               	movf	OUTFQ@j,w
  6640  01C4  00A0               	movwf	??_OUTFQ
  6641  01C5  1003               	clrc
  6642  01C6  0DA0               	rlf	??_OUTFQ,f
  6643  01C7  0DA1               	rlf	??_OUTFQ+1,f
  6644  01C8  0820               	movf	??_OUTFQ,w
  6645  01C9  077B               	addwf	OUTFQ@Nprg,w
  6646  01CA  00A2               	movwf	??_OUTFQ+2
  6647  01CB  0821               	movf	??_OUTFQ+1,w
  6648  01CC  1803               	skipnc
  6649  01CD  0A21               	incf	??_OUTFQ+1,w
  6650  01CE  077C               	addwf	OUTFQ@Nprg+1,w
  6651  01CF  00A3               	movwf	??_OUTFQ+3
  6652  01D0  0822               	movf	??_OUTFQ+2,w
  6653  01D1  0084               	movwf	4
  6654  01D2  1783               	bsf	3,7
  6655  01D3  1C23               	btfss	??_OUTFQ+3,0
  6656  01D4  1383               	bcf	3,7
  6657  01D5  0800               	movf	0,w
  6658  01D6  00F2               	movwf	___awdiv@dividend
  6659  01D7  0A84               	incf	4,f
  6660  01D8  0800               	movf	0,w
  6661  01D9  00F3               	movwf	___awdiv@dividend+1
  6662  01DA  120A  158A  2317  120A  118A  	fcall	___awdiv
  6663  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  6664  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  6665  01E1  085B               	movf	OUTFQ@j+1,w
  6666  01E2  00A5               	movwf	??_OUTFQ+5
  6667  01E3  085A               	movf	OUTFQ@j,w
  6668  01E4  00A4               	movwf	??_OUTFQ+4
  6669  01E5  1003               	clrc
  6670  01E6  0DA4               	rlf	??_OUTFQ+4,f
  6671  01E7  0DA5               	rlf	??_OUTFQ+5,f
  6672  01E8  0824               	movf	??_OUTFQ+4,w
  6673  01E9  077B               	addwf	OUTFQ@Nprg,w
  6674  01EA  00A6               	movwf	??_OUTFQ+6
  6675  01EB  0825               	movf	??_OUTFQ+5,w
  6676  01EC  1803               	skipnc
  6677  01ED  0A25               	incf	??_OUTFQ+5,w
  6678  01EE  077C               	addwf	OUTFQ@Nprg+1,w
  6679  01EF  00A7               	movwf	??_OUTFQ+7
  6680  01F0  0826               	movf	??_OUTFQ+6,w
  6681  01F1  0084               	movwf	4
  6682  01F2  1783               	bsf	3,7
  6683  01F3  1C27               	btfss	??_OUTFQ+7,0
  6684  01F4  1383               	bcf	3,7
  6685  01F5  0870               	movf	?___awdiv,w
  6686  01F6  0080               	movwf	0
  6687  01F7  0A84               	incf	4,f
  6688  01F8  0871               	movf	?___awdiv+1,w
  6689  01F9  0080               	movwf	0
  6690                           
  6691                           ;FMCW.c: 160: Nprg_b[count] = 1;
  6692  01FA  0854               	movf	OUTFQ@count,w
  6693  01FB  00A0               	movwf	??_OUTFQ
  6694  01FC  0720               	addwf	??_OUTFQ,w
  6695  01FD  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6696  01FE  0084               	movwf	4
  6697  01FF  3001               	movlw	1
  6698  0200  1383               	bcf	3,7	;select IRP bank0
  6699  0201  0080               	movwf	0
  6700  0202  0A84               	incf	4,f
  6701  0203  3000               	movlw	0
  6702  0204  0080               	movwf	0
  6703  0205                     l3188:	
  6704                           
  6705                           ;FMCW.c: 161: count++;
  6706  0205  3001               	movlw	1
  6707  0206  07D4               	addwf	OUTFQ@count,f
  6708  0207  1803               	skipnc
  6709  0208  0AD5               	incf	OUTFQ@count+1,f
  6710  0209  3000               	movlw	0
  6711  020A  07D5               	addwf	OUTFQ@count+1,f
  6712                           
  6713                           ;FMCW.c: 162: }
  6714  020B  2A93               	goto	l3194
  6715  020C                     l3190:	
  6716                           
  6717                           ;FMCW.c: 163: else{
  6718                           ;FMCW.c: 164: Nprg[j] = Nprg[j] / 2;
  6719  020C  3002               	movlw	2
  6720  020D  00F0               	movwf	___awdiv@divisor
  6721  020E  3000               	movlw	0
  6722  020F  00F1               	movwf	___awdiv@divisor+1
  6723  0210  085B               	movf	OUTFQ@j+1,w
  6724  0211  00A1               	movwf	??_OUTFQ+1
  6725  0212  085A               	movf	OUTFQ@j,w
  6726  0213  00A0               	movwf	??_OUTFQ
  6727  0214  1003               	clrc
  6728  0215  0DA0               	rlf	??_OUTFQ,f
  6729  0216  0DA1               	rlf	??_OUTFQ+1,f
  6730  0217  0820               	movf	??_OUTFQ,w
  6731  0218  077B               	addwf	OUTFQ@Nprg,w
  6732  0219  00A2               	movwf	??_OUTFQ+2
  6733  021A  0821               	movf	??_OUTFQ+1,w
  6734  021B  1803               	skipnc
  6735  021C  0A21               	incf	??_OUTFQ+1,w
  6736  021D  077C               	addwf	OUTFQ@Nprg+1,w
  6737  021E  00A3               	movwf	??_OUTFQ+3
  6738  021F  0822               	movf	??_OUTFQ+2,w
  6739  0220  0084               	movwf	4
  6740  0221  1783               	bsf	3,7
  6741  0222  1C23               	btfss	??_OUTFQ+3,0
  6742  0223  1383               	bcf	3,7
  6743  0224  0800               	movf	0,w
  6744  0225  00F2               	movwf	___awdiv@dividend
  6745  0226  0A84               	incf	4,f
  6746  0227  0800               	movf	0,w
  6747  0228  00F3               	movwf	___awdiv@dividend+1
  6748  0229  120A  158A  2317  120A  118A  	fcall	___awdiv
  6749  022E  1283               	bcf	3,5	;RP0=0, select bank0
  6750  022F  1303               	bcf	3,6	;RP1=0, select bank0
  6751  0230  085B               	movf	OUTFQ@j+1,w
  6752  0231  00A5               	movwf	??_OUTFQ+5
  6753  0232  085A               	movf	OUTFQ@j,w
  6754  0233  00A4               	movwf	??_OUTFQ+4
  6755  0234  1003               	clrc
  6756  0235  0DA4               	rlf	??_OUTFQ+4,f
  6757  0236  0DA5               	rlf	??_OUTFQ+5,f
  6758  0237  0824               	movf	??_OUTFQ+4,w
  6759  0238  077B               	addwf	OUTFQ@Nprg,w
  6760  0239  00A6               	movwf	??_OUTFQ+6
  6761  023A  0825               	movf	??_OUTFQ+5,w
  6762  023B  1803               	skipnc
  6763  023C  0A25               	incf	??_OUTFQ+5,w
  6764  023D  077C               	addwf	OUTFQ@Nprg+1,w
  6765  023E  00A7               	movwf	??_OUTFQ+7
  6766  023F  0826               	movf	??_OUTFQ+6,w
  6767  0240  0084               	movwf	4
  6768  0241  1783               	bsf	3,7
  6769  0242  1C27               	btfss	??_OUTFQ+7,0
  6770  0243  1383               	bcf	3,7
  6771  0244  0870               	movf	?___awdiv,w
  6772  0245  0080               	movwf	0
  6773  0246  0A84               	incf	4,f
  6774  0247  0871               	movf	?___awdiv+1,w
  6775  0248  0080               	movwf	0
  6776                           
  6777                           ;FMCW.c: 165: Nprg[j+1] = Nprg[j+1] + 10;
  6778  0249  085B               	movf	OUTFQ@j+1,w
  6779  024A  00A1               	movwf	??_OUTFQ+1
  6780  024B  085A               	movf	OUTFQ@j,w
  6781  024C  00A0               	movwf	??_OUTFQ
  6782  024D  1003               	clrc
  6783  024E  0DA0               	rlf	??_OUTFQ,f
  6784  024F  0DA1               	rlf	??_OUTFQ+1,f
  6785  0250  0820               	movf	??_OUTFQ,w
  6786  0251  3E02               	addlw	2
  6787  0252  00A2               	movwf	??_OUTFQ+2
  6788  0253  0821               	movf	??_OUTFQ+1,w
  6789  0254  1803               	skipnc
  6790  0255  3E01               	addlw	1
  6791  0256  3E00               	addlw	0
  6792  0257  00A3               	movwf	??_OUTFQ+3
  6793  0258  0822               	movf	??_OUTFQ+2,w
  6794  0259  077B               	addwf	OUTFQ@Nprg,w
  6795  025A  00A4               	movwf	??_OUTFQ+4
  6796  025B  0823               	movf	??_OUTFQ+3,w
  6797  025C  1803               	skipnc
  6798  025D  0A23               	incf	??_OUTFQ+3,w
  6799  025E  077C               	addwf	OUTFQ@Nprg+1,w
  6800  025F  00A5               	movwf	??_OUTFQ+5
  6801  0260  0824               	movf	??_OUTFQ+4,w
  6802  0261  0084               	movwf	4
  6803  0262  1783               	bsf	3,7
  6804  0263  1C25               	btfss	??_OUTFQ+5,0
  6805  0264  1383               	bcf	3,7
  6806  0265  0800               	movf	0,w
  6807  0266  00A6               	movwf	??_OUTFQ+6
  6808  0267  0A84               	incf	4,f
  6809  0268  0800               	movf	0,w
  6810  0269  00A7               	movwf	??_OUTFQ+7
  6811  026A  0826               	movf	??_OUTFQ+6,w
  6812  026B  3E0A               	addlw	10
  6813  026C  00A8               	movwf	??_OUTFQ+8
  6814  026D  0827               	movf	??_OUTFQ+7,w
  6815  026E  1803               	skipnc
  6816  026F  3E01               	addlw	1
  6817  0270  3E00               	addlw	0
  6818  0271  00A9               	movwf	??_OUTFQ+9
  6819  0272  085B               	movf	OUTFQ@j+1,w
  6820  0273  00AB               	movwf	??_OUTFQ+11
  6821  0274  085A               	movf	OUTFQ@j,w
  6822  0275  00AA               	movwf	??_OUTFQ+10
  6823  0276  1003               	clrc
  6824  0277  0DAA               	rlf	??_OUTFQ+10,f
  6825  0278  0DAB               	rlf	??_OUTFQ+11,f
  6826  0279  082A               	movf	??_OUTFQ+10,w
  6827  027A  3E02               	addlw	2
  6828  027B  00AC               	movwf	??_OUTFQ+12
  6829  027C  082B               	movf	??_OUTFQ+11,w
  6830  027D  1803               	skipnc
  6831  027E  3E01               	addlw	1
  6832  027F  3E00               	addlw	0
  6833  0280  00AD               	movwf	??_OUTFQ+13
  6834  0281  082C               	movf	??_OUTFQ+12,w
  6835  0282  077B               	addwf	OUTFQ@Nprg,w
  6836  0283  00AE               	movwf	??_OUTFQ+14
  6837  0284  082D               	movf	??_OUTFQ+13,w
  6838  0285  1803               	skipnc
  6839  0286  0A2D               	incf	??_OUTFQ+13,w
  6840  0287  077C               	addwf	OUTFQ@Nprg+1,w
  6841  0288  00AF               	movwf	??_OUTFQ+15
  6842  0289  082E               	movf	??_OUTFQ+14,w
  6843  028A  0084               	movwf	4
  6844  028B  1783               	bsf	3,7
  6845  028C  1C2F               	btfss	??_OUTFQ+15,0
  6846  028D  1383               	bcf	3,7
  6847  028E  0828               	movf	??_OUTFQ+8,w
  6848  028F  0080               	movwf	0
  6849  0290  0A84               	incf	4,f
  6850  0291  0829               	movf	??_OUTFQ+9,w
  6851  0292                     L8:	
  6852  0292  0080               	movwf	0
  6853  0293                     l3194:	
  6854  0293  3001               	movlw	1
  6855  0294  07DA               	addwf	OUTFQ@j,f
  6856  0295  1803               	skipnc
  6857  0296  0ADB               	incf	OUTFQ@j+1,f
  6858  0297  3000               	movlw	0
  6859  0298  07DB               	addwf	OUTFQ@j+1,f
  6860  0299  085B               	movf	OUTFQ@j+1,w
  6861  029A  3A80               	xorlw	128
  6862  029B  00FF               	movwf	127
  6863  029C  3080               	movlw	128
  6864  029D  027F               	subwf	127,w
  6865  029E  1D03               	skipz
  6866  029F  2AA2               	goto	u2865
  6867  02A0  3005               	movlw	5
  6868  02A1  025A               	subwf	OUTFQ@j,w
  6869  02A2                     u2865:	
  6870  02A2  1C03               	skipc
  6871  02A3  28F7               	goto	l3168
  6872  02A4                     l3198:	
  6873  02A4  3001               	movlw	1
  6874  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  6875  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  6876  02A7  07D2               	addwf	OUTFQ@i_419,f
  6877  02A8  1803               	skipnc
  6878  02A9  0AD3               	incf	OUTFQ@i_419+1,f
  6879  02AA  3000               	movlw	0
  6880  02AB  07D3               	addwf	OUTFQ@i_419+1,f
  6881  02AC  0853               	movf	OUTFQ@i_419+1,w
  6882  02AD  3A80               	xorlw	128
  6883  02AE  00FF               	movwf	127
  6884  02AF  3080               	movlw	128
  6885  02B0  027F               	subwf	127,w
  6886  02B1  1D03               	skipz
  6887  02B2  2AB5               	goto	u2875
  6888  02B3  3011               	movlw	17
  6889  02B4  0252               	subwf	OUTFQ@i_419,w
  6890  02B5                     u2875:	
  6891  02B5  1C03               	skipc
  6892  02B6  28E8               	goto	l3162
  6893  02B7                     l3202:	
  6894                           
  6895                           ;FMCW.c: 166: }
  6896                           ;FMCW.c: 167: }
  6897                           ;FMCW.c: 168: }
  6898                           ;FMCW.c: 169: }
  6899                           ;FMCW.c: 172: for (int i=0; i<17; i++)
  6900  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  6901  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  6902  02B9  01D8               	clrf	OUTFQ@i_421
  6903  02BA  01D9               	clrf	OUTFQ@i_421+1
  6904  02BB  0859               	movf	OUTFQ@i_421+1,w
  6905  02BC  3A80               	xorlw	128
  6906  02BD  00FF               	movwf	127
  6907  02BE  3080               	movlw	128
  6908  02BF  027F               	subwf	127,w
  6909  02C0  1D03               	skipz
  6910  02C1  2AC4               	goto	u2885
  6911  02C2  3011               	movlw	17
  6912  02C3  0258               	subwf	OUTFQ@i_421,w
  6913  02C4                     u2885:	
  6914  02C4  1803               	btfsc	3,0
  6915  02C5  2B0D               	goto	l3220
  6916  02C6                     l3208:	
  6917                           
  6918                           ;FMCW.c: 173: {
  6919                           ;FMCW.c: 174: if(Nprg_b[i] == 0)
  6920  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  6921  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  6922  02C8  0858               	movf	OUTFQ@i_421,w
  6923  02C9  00A0               	movwf	??_OUTFQ
  6924  02CA  0720               	addwf	??_OUTFQ,w
  6925  02CB  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6926  02CC  0084               	movwf	4
  6927  02CD  1383               	bcf	3,7	;select IRP bank0
  6928  02CE  0800               	movf	0,w
  6929  02CF  00A1               	movwf	??_OUTFQ+1
  6930  02D0  0A84               	incf	4,f
  6931  02D1  0800               	movf	0,w
  6932  02D2  00A2               	movwf	??_OUTFQ+2
  6933  02D3  0821               	movf	??_OUTFQ+1,w
  6934  02D4  0422               	iorwf	??_OUTFQ+2,w
  6935  02D5  1D03               	btfss	3,2
  6936  02D6  2AE0               	goto	l3212
  6937                           
  6938                           ;FMCW.c: 175: {
  6939                           ;FMCW.c: 176: L_OUT(fmcwtxrx);
  6940  02D7  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6941  02D8  00F3               	movwf	L_OUT@fmcwtxrx+1
  6942  02D9  0879               	movf	OUTFQ@fmcwtxrx,w
  6943  02DA  00F2               	movwf	L_OUT@fmcwtxrx
  6944  02DB  120A  158A  223E  120A  118A  	fcall	_L_OUT
  6945  02E0                     l3212:	
  6946                           
  6947                           ;FMCW.c: 177: }
  6948                           ;FMCW.c: 178: if(Nprg_b[i] == 1)
  6949  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  6950  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  6951  02E2  0858               	movf	OUTFQ@i_421,w
  6952  02E3  00A0               	movwf	??_OUTFQ
  6953  02E4  0720               	addwf	??_OUTFQ,w
  6954  02E5  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6955  02E6  0084               	movwf	4
  6956  02E7  1383               	bcf	3,7	;select IRP bank0
  6957  02E8  0800               	movf	0,w
  6958  02E9  00A1               	movwf	??_OUTFQ+1
  6959  02EA  0A84               	incf	4,f
  6960  02EB  0800               	movf	0,w
  6961  02EC  00A2               	movwf	??_OUTFQ+2
  6962  02ED  0321               	decf	??_OUTFQ+1,w
  6963  02EE  0422               	iorwf	??_OUTFQ+2,w
  6964  02EF  1D03               	btfss	3,2
  6965  02F0  2AFA               	goto	l3216
  6966                           
  6967                           ;FMCW.c: 179: {
  6968                           ;FMCW.c: 180: H_OUT(fmcwtxrx);
  6969  02F1  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6970  02F2  00F3               	movwf	H_OUT@fmcwtxrx+1
  6971  02F3  0879               	movf	OUTFQ@fmcwtxrx,w
  6972  02F4  00F2               	movwf	H_OUT@fmcwtxrx
  6973  02F5  120A  158A  21F8  120A  118A  	fcall	_H_OUT
  6974  02FA                     l3216:	
  6975  02FA  3001               	movlw	1
  6976  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  6977  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  6978  02FD  07D8               	addwf	OUTFQ@i_421,f
  6979  02FE  1803               	skipnc
  6980  02FF  0AD9               	incf	OUTFQ@i_421+1,f
  6981  0300  3000               	movlw	0
  6982  0301  07D9               	addwf	OUTFQ@i_421+1,f
  6983  0302  0859               	movf	OUTFQ@i_421+1,w
  6984  0303  3A80               	xorlw	128
  6985  0304  00FF               	movwf	127
  6986  0305  3080               	movlw	128
  6987  0306  027F               	subwf	127,w
  6988  0307  1D03               	skipz
  6989  0308  2B0B               	goto	u2915
  6990  0309  3011               	movlw	17
  6991  030A  0258               	subwf	OUTFQ@i_421,w
  6992  030B                     u2915:	
  6993  030B  1C03               	skipc
  6994  030C  2AC6               	goto	l3208
  6995  030D                     l3220:	
  6996                           
  6997                           ;FMCW.c: 181: }
  6998                           ;FMCW.c: 182: }
  6999                           ;FMCW.c: 185: H_OUT(fmcwtxrx);
  7000  030D  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7001  030E  00F3               	movwf	H_OUT@fmcwtxrx+1
  7002  030F  0879               	movf	OUTFQ@fmcwtxrx,w
  7003  0310  00F2               	movwf	H_OUT@fmcwtxrx
  7004  0311  120A  158A  21F8  120A  118A  	fcall	_H_OUT
  7005                           
  7006                           ;FMCW.c: 186: L_OUT(fmcwtxrx);
  7007  0316  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7008  0317  00F3               	movwf	L_OUT@fmcwtxrx+1
  7009  0318  0879               	movf	OUTFQ@fmcwtxrx,w
  7010  0319  00F2               	movwf	L_OUT@fmcwtxrx
  7011  031A  120A  158A  223E  120A  118A  	fcall	_L_OUT
  7012                           
  7013                           ;FMCW.c: 189: STBOUT(fmcwtxrx);
  7014  031F  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7015  0320  00F3               	movwf	STBOUT@fmcwtxrx+1
  7016  0321  0879               	movf	OUTFQ@fmcwtxrx,w
  7017  0322  00F2               	movwf	STBOUT@fmcwtxrx
  7018  0323  120A  158A  2196   	fcall	_STBOUT
  7019  0326  0008               	return
  7020  0327                     __end_of_OUTFQ:	
  7021                           
  7022                           	psect	text25
  7023  0B17                     __ptext25:	
  7024 ;; *************** function ___awdiv *****************
  7025 ;; Defined at:
  7026 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  7027 ;; Parameters:    Size  Location     Type
  7028 ;;  divisor         2    0[COMMON] int 
  7029 ;;  dividend        2    2[COMMON] int 
  7030 ;; Auto vars:     Size  Location     Type
  7031 ;;  quotient        2    7[COMMON] int 
  7032 ;;  sign            1    6[COMMON] unsigned char 
  7033 ;;  counter         1    5[COMMON] unsigned char 
  7034 ;; Return value:  Size  Location     Type
  7035 ;;                  2    0[COMMON] int 
  7036 ;; Registers used:
  7037 ;;		wreg, status,2, status,0
  7038 ;; Tracked objects:
  7039 ;;		On entry : 0/0
  7040 ;;		On exit  : 0/0
  7041 ;;		Unchanged: 0/0
  7042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7043 ;;      Params:         4       0       0       0       0
  7044 ;;      Locals:         4       0       0       0       0
  7045 ;;      Temps:          1       0       0       0       0
  7046 ;;      Totals:         9       0       0       0       0
  7047 ;;Total ram usage:        9 bytes
  7048 ;; Hardware stack levels used:    1
  7049 ;; This function calls:
  7050 ;;		Nothing
  7051 ;; This function is called by:
  7052 ;;		_OUTFQ
  7053 ;;		_RFDOUT
  7054 ;; This function uses a non-reentrant model
  7055 ;;
  7056                           
  7057                           
  7058                           ;psect for function ___awdiv
  7059  0B17                     ___awdiv:	
  7060                           
  7061                           ;incstack = 0
  7062                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7063  0B17  01F6               	clrf	___awdiv@sign
  7064  0B18  1FF1               	btfss	___awdiv@divisor+1,7
  7065  0B19  2B21               	goto	l2632
  7066  0B1A  09F0               	comf	___awdiv@divisor,f
  7067  0B1B  09F1               	comf	___awdiv@divisor+1,f
  7068  0B1C  0AF0               	incf	___awdiv@divisor,f
  7069  0B1D  1903               	skipnz
  7070  0B1E  0AF1               	incf	___awdiv@divisor+1,f
  7071  0B1F  01F6               	clrf	___awdiv@sign
  7072  0B20  0AF6               	incf	___awdiv@sign,f
  7073  0B21                     l2632:	
  7074  0B21  1FF3               	btfss	___awdiv@dividend+1,7
  7075  0B22  2B2C               	goto	l2638
  7076  0B23  09F2               	comf	___awdiv@dividend,f
  7077  0B24  09F3               	comf	___awdiv@dividend+1,f
  7078  0B25  0AF2               	incf	___awdiv@dividend,f
  7079  0B26  1903               	skipnz
  7080  0B27  0AF3               	incf	___awdiv@dividend+1,f
  7081  0B28  3001               	movlw	1
  7082  0B29  00F4               	movwf	??___awdiv
  7083  0B2A  0874               	movf	??___awdiv,w
  7084  0B2B  06F6               	xorwf	___awdiv@sign,f
  7085  0B2C                     l2638:	
  7086  0B2C  01F7               	clrf	___awdiv@quotient
  7087  0B2D  01F8               	clrf	___awdiv@quotient+1
  7088  0B2E  0870               	movf	___awdiv@divisor,w
  7089  0B2F  0471               	iorwf	___awdiv@divisor+1,w
  7090  0B30  1903               	btfsc	3,2
  7091  0B31  2B63               	goto	l2660
  7092  0B32  01F5               	clrf	___awdiv@counter
  7093  0B33  0AF5               	incf	___awdiv@counter,f
  7094  0B34                     l2648:	
  7095  0B34  1BF1               	btfsc	___awdiv@divisor+1,7
  7096  0B35  2B42               	goto	l2650
  7097  0B36  3001               	movlw	1
  7098  0B37                     u2035:	
  7099  0B37  1003               	clrc
  7100  0B38  0DF0               	rlf	___awdiv@divisor,f
  7101  0B39  0DF1               	rlf	___awdiv@divisor+1,f
  7102  0B3A  3EFF               	addlw	-1
  7103  0B3B  1D03               	skipz
  7104  0B3C  2B37               	goto	u2035
  7105  0B3D  3001               	movlw	1
  7106  0B3E  00F4               	movwf	??___awdiv
  7107  0B3F  0874               	movf	??___awdiv,w
  7108  0B40  07F5               	addwf	___awdiv@counter,f
  7109  0B41  2B34               	goto	l2648
  7110  0B42                     l2650:	
  7111  0B42  3001               	movlw	1
  7112  0B43                     u2055:	
  7113  0B43  1003               	clrc
  7114  0B44  0DF7               	rlf	___awdiv@quotient,f
  7115  0B45  0DF8               	rlf	___awdiv@quotient+1,f
  7116  0B46  3EFF               	addlw	-1
  7117  0B47  1D03               	skipz
  7118  0B48  2B43               	goto	u2055
  7119  0B49  0871               	movf	___awdiv@divisor+1,w
  7120  0B4A  0273               	subwf	___awdiv@dividend+1,w
  7121  0B4B  1D03               	skipz
  7122  0B4C  2B4F               	goto	u2065
  7123  0B4D  0870               	movf	___awdiv@divisor,w
  7124  0B4E  0272               	subwf	___awdiv@dividend,w
  7125  0B4F                     u2065:	
  7126  0B4F  1C03               	skipc
  7127  0B50  2B58               	goto	l2656
  7128  0B51  0870               	movf	___awdiv@divisor,w
  7129  0B52  02F2               	subwf	___awdiv@dividend,f
  7130  0B53  0871               	movf	___awdiv@divisor+1,w
  7131  0B54  1C03               	skipc
  7132  0B55  03F3               	decf	___awdiv@dividend+1,f
  7133  0B56  02F3               	subwf	___awdiv@dividend+1,f
  7134  0B57  1477               	bsf	___awdiv@quotient,0
  7135  0B58                     l2656:	
  7136  0B58  3001               	movlw	1
  7137  0B59                     u2075:	
  7138  0B59  1003               	clrc
  7139  0B5A  0CF1               	rrf	___awdiv@divisor+1,f
  7140  0B5B  0CF0               	rrf	___awdiv@divisor,f
  7141  0B5C  3EFF               	addlw	-1
  7142  0B5D  1D03               	skipz
  7143  0B5E  2B59               	goto	u2075
  7144  0B5F  3001               	movlw	1
  7145  0B60  02F5               	subwf	___awdiv@counter,f
  7146  0B61  1D03               	btfss	3,2
  7147  0B62  2B42               	goto	l2650
  7148  0B63                     l2660:	
  7149  0B63  0876               	movf	___awdiv@sign,w
  7150  0B64  1903               	btfsc	3,2
  7151  0B65  2B6B               	goto	l2664
  7152  0B66  09F7               	comf	___awdiv@quotient,f
  7153  0B67  09F8               	comf	___awdiv@quotient+1,f
  7154  0B68  0AF7               	incf	___awdiv@quotient,f
  7155  0B69  1903               	skipnz
  7156  0B6A  0AF8               	incf	___awdiv@quotient+1,f
  7157  0B6B                     l2664:	
  7158  0B6B  0878               	movf	___awdiv@quotient+1,w
  7159  0B6C  00F1               	movwf	?___awdiv+1
  7160  0B6D  0877               	movf	___awdiv@quotient,w
  7161  0B6E  00F0               	movwf	?___awdiv
  7162  0B6F  0008               	return
  7163  0B70                     __end_of___awdiv:	
  7164                           
  7165                           	psect	text26
  7166  0C8C                     __ptext26:	
  7167 ;; *************** function _OPINIT *****************
  7168 ;; Defined at:
  7169 ;;		line 241 in file "FMCW.c"
  7170 ;; Parameters:    Size  Location     Type
  7171 ;;  fmcwtxrx        2    4[COMMON] int 
  7172 ;; Auto vars:     Size  Location     Type
  7173 ;;		None
  7174 ;; Return value:  Size  Location     Type
  7175 ;;                  1    wreg      void 
  7176 ;; Registers used:
  7177 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7178 ;; Tracked objects:
  7179 ;;		On entry : 0/0
  7180 ;;		On exit  : 0/0
  7181 ;;		Unchanged: 0/0
  7182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7183 ;;      Params:         2       0       0       0       0
  7184 ;;      Locals:         0       0       0       0       0
  7185 ;;      Temps:          0       0       0       0       0
  7186 ;;      Totals:         2       0       0       0       0
  7187 ;;Total ram usage:        2 bytes
  7188 ;; Hardware stack levels used:    1
  7189 ;; Hardware stack levels required when called:    2
  7190 ;; This function calls:
  7191 ;;		_H_OUT
  7192 ;;		_L_OUT
  7193 ;;		_STBOUT
  7194 ;; This function is called by:
  7195 ;;		_FMTX
  7196 ;;		_CWTX
  7197 ;;		_FMRX
  7198 ;; This function uses a non-reentrant model
  7199 ;;
  7200                           
  7201                           
  7202                           ;psect for function _OPINIT
  7203  0C8C                     _OPINIT:	
  7204                           
  7205                           ;FMCW.c: 243: L_OUT(fmcwtxrx);
  7206                           
  7207                           ;incstack = 0
  7208                           ; Regs used in _OPINIT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7209  0C8C  0875               	movf	OPINIT@fmcwtxrx+1,w
  7210  0C8D  00F3               	movwf	L_OUT@fmcwtxrx+1
  7211  0C8E  0874               	movf	OPINIT@fmcwtxrx,w
  7212  0C8F  00F2               	movwf	L_OUT@fmcwtxrx
  7213  0C90  120A  158A  223E  120A  158A  	fcall	_L_OUT
  7214                           
  7215                           ;FMCW.c: 244: L_OUT(fmcwtxrx);
  7216  0C95  0875               	movf	OPINIT@fmcwtxrx+1,w
  7217  0C96  00F3               	movwf	L_OUT@fmcwtxrx+1
  7218  0C97  0874               	movf	OPINIT@fmcwtxrx,w
  7219  0C98  00F2               	movwf	L_OUT@fmcwtxrx
  7220  0C99  120A  158A  223E  120A  158A  	fcall	_L_OUT
  7221                           
  7222                           ;FMCW.c: 245: L_OUT(fmcwtxrx);
  7223  0C9E  0875               	movf	OPINIT@fmcwtxrx+1,w
  7224  0C9F  00F3               	movwf	L_OUT@fmcwtxrx+1
  7225  0CA0  0874               	movf	OPINIT@fmcwtxrx,w
  7226  0CA1  00F2               	movwf	L_OUT@fmcwtxrx
  7227  0CA2  120A  158A  223E  120A  158A  	fcall	_L_OUT
  7228                           
  7229                           ;FMCW.c: 246: H_OUT(fmcwtxrx);
  7230  0CA7  0875               	movf	OPINIT@fmcwtxrx+1,w
  7231  0CA8  00F3               	movwf	H_OUT@fmcwtxrx+1
  7232  0CA9  0874               	movf	OPINIT@fmcwtxrx,w
  7233  0CAA  00F2               	movwf	H_OUT@fmcwtxrx
  7234  0CAB  120A  158A  21F8  120A  158A  	fcall	_H_OUT
  7235                           
  7236                           ;FMCW.c: 247: H_OUT(fmcwtxrx);
  7237  0CB0  0875               	movf	OPINIT@fmcwtxrx+1,w
  7238  0CB1  00F3               	movwf	H_OUT@fmcwtxrx+1
  7239  0CB2  0874               	movf	OPINIT@fmcwtxrx,w
  7240  0CB3  00F2               	movwf	H_OUT@fmcwtxrx
  7241  0CB4  120A  158A  21F8  120A  158A  	fcall	_H_OUT
  7242                           
  7243                           ;FMCW.c: 248: L_OUT(fmcwtxrx);
  7244  0CB9  0875               	movf	OPINIT@fmcwtxrx+1,w
  7245  0CBA  00F3               	movwf	L_OUT@fmcwtxrx+1
  7246  0CBB  0874               	movf	OPINIT@fmcwtxrx,w
  7247  0CBC  00F2               	movwf	L_OUT@fmcwtxrx
  7248  0CBD  120A  158A  223E  120A  158A  	fcall	_L_OUT
  7249                           
  7250                           ;FMCW.c: 249: L_OUT(fmcwtxrx);
  7251  0CC2  0875               	movf	OPINIT@fmcwtxrx+1,w
  7252  0CC3  00F3               	movwf	L_OUT@fmcwtxrx+1
  7253  0CC4  0874               	movf	OPINIT@fmcwtxrx,w
  7254  0CC5  00F2               	movwf	L_OUT@fmcwtxrx
  7255  0CC6  120A  158A  223E  120A  158A  	fcall	_L_OUT
  7256                           
  7257                           ;FMCW.c: 250: L_OUT(fmcwtxrx);
  7258  0CCB  0875               	movf	OPINIT@fmcwtxrx+1,w
  7259  0CCC  00F3               	movwf	L_OUT@fmcwtxrx+1
  7260  0CCD  0874               	movf	OPINIT@fmcwtxrx,w
  7261  0CCE  00F2               	movwf	L_OUT@fmcwtxrx
  7262  0CCF  120A  158A  223E  120A  158A  	fcall	_L_OUT
  7263                           
  7264                           ;FMCW.c: 251: L_OUT(fmcwtxrx);
  7265  0CD4  0875               	movf	OPINIT@fmcwtxrx+1,w
  7266  0CD5  00F3               	movwf	L_OUT@fmcwtxrx+1
  7267  0CD6  0874               	movf	OPINIT@fmcwtxrx,w
  7268  0CD7  00F2               	movwf	L_OUT@fmcwtxrx
  7269  0CD8  120A  158A  223E  120A  158A  	fcall	_L_OUT
  7270                           
  7271                           ;FMCW.c: 252: L_OUT(fmcwtxrx);
  7272  0CDD  0875               	movf	OPINIT@fmcwtxrx+1,w
  7273  0CDE  00F3               	movwf	L_OUT@fmcwtxrx+1
  7274  0CDF  0874               	movf	OPINIT@fmcwtxrx,w
  7275  0CE0  00F2               	movwf	L_OUT@fmcwtxrx
  7276  0CE1  120A  158A  223E  120A  158A  	fcall	_L_OUT
  7277                           
  7278                           ;FMCW.c: 253: H_OUT(fmcwtxrx);
  7279  0CE6  0875               	movf	OPINIT@fmcwtxrx+1,w
  7280  0CE7  00F3               	movwf	H_OUT@fmcwtxrx+1
  7281  0CE8  0874               	movf	OPINIT@fmcwtxrx,w
  7282  0CE9  00F2               	movwf	H_OUT@fmcwtxrx
  7283  0CEA  120A  158A  21F8  120A  158A  	fcall	_H_OUT
  7284                           
  7285                           ;FMCW.c: 256: L_OUT(fmcwtxrx);
  7286  0CEF  0875               	movf	OPINIT@fmcwtxrx+1,w
  7287  0CF0  00F3               	movwf	L_OUT@fmcwtxrx+1
  7288  0CF1  0874               	movf	OPINIT@fmcwtxrx,w
  7289  0CF2  00F2               	movwf	L_OUT@fmcwtxrx
  7290  0CF3  120A  158A  223E  120A  158A  	fcall	_L_OUT
  7291                           
  7292                           ;FMCW.c: 257: L_OUT(fmcwtxrx);
  7293  0CF8  0875               	movf	OPINIT@fmcwtxrx+1,w
  7294  0CF9  00F3               	movwf	L_OUT@fmcwtxrx+1
  7295  0CFA  0874               	movf	OPINIT@fmcwtxrx,w
  7296  0CFB  00F2               	movwf	L_OUT@fmcwtxrx
  7297  0CFC  120A  158A  223E  120A  158A  	fcall	_L_OUT
  7298                           
  7299                           ;FMCW.c: 260: STBOUT(fmcwtxrx);
  7300  0D01  0875               	movf	OPINIT@fmcwtxrx+1,w
  7301  0D02  00F3               	movwf	STBOUT@fmcwtxrx+1
  7302  0D03  0874               	movf	OPINIT@fmcwtxrx,w
  7303  0D04  00F2               	movwf	STBOUT@fmcwtxrx
  7304  0D05  120A  158A  2196   	fcall	_STBOUT
  7305  0D08  0008               	return
  7306  0D09                     __end_of_OPINIT:	
  7307                           
  7308                           	psect	text27
  7309  0996                     __ptext27:	
  7310 ;; *************** function _STBOUT *****************
  7311 ;; Defined at:
  7312 ;;		line 107 in file "FMCW.c"
  7313 ;; Parameters:    Size  Location     Type
  7314 ;;  fmcwtxrx        2    2[COMMON] int 
  7315 ;; Auto vars:     Size  Location     Type
  7316 ;;		None
  7317 ;; Return value:  Size  Location     Type
  7318 ;;                  1    wreg      void 
  7319 ;; Registers used:
  7320 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7321 ;; Tracked objects:
  7322 ;;		On entry : 0/0
  7323 ;;		On exit  : 0/0
  7324 ;;		Unchanged: 0/0
  7325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7326 ;;      Params:         2       0       0       0       0
  7327 ;;      Locals:         0       0       0       0       0
  7328 ;;      Temps:          0       0       0       0       0
  7329 ;;      Totals:         2       0       0       0       0
  7330 ;;Total ram usage:        2 bytes
  7331 ;; Hardware stack levels used:    1
  7332 ;; Hardware stack levels required when called:    1
  7333 ;; This function calls:
  7334 ;;		__NOP
  7335 ;; This function is called by:
  7336 ;;		_OUTFQ
  7337 ;;		_RFDOUT
  7338 ;;		_OPINIT
  7339 ;; This function uses a non-reentrant model
  7340 ;;
  7341                           
  7342                           
  7343                           ;psect for function _STBOUT
  7344  0996                     _STBOUT:	
  7345                           
  7346                           ;FMCW.c: 108: if(fmcwtxrx == 1)
  7347                           
  7348                           ;incstack = 0
  7349                           ; Regs used in _STBOUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7350  0996  0372               	decf	STBOUT@fmcwtxrx,w
  7351  0997  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7352  0998  1D03               	btfss	3,2
  7353  0999  29A5               	goto	l2608
  7354                           
  7355                           ;FMCW.c: 109: {
  7356                           ;FMCW.c: 110: PORTDbits.RD2 = 1;
  7357  099A  1283               	bcf	3,5	;RP0=0, select bank0
  7358  099B  1303               	bcf	3,6	;RP1=0, select bank0
  7359  099C  1508               	bsf	8,2	;volatile
  7360                           
  7361                           ;FMCW.c: 111: _NOP();
  7362  099D  120A  158A  2038  120A  158A  	fcall	__NOP
  7363                           
  7364                           ;FMCW.c: 112: PORTDbits.RD2 = 0;
  7365  09A2  1283               	bcf	3,5	;RP0=0, select bank0
  7366  09A3  1303               	bcf	3,6	;RP1=0, select bank0
  7367  09A4  1108               	bcf	8,2	;volatile
  7368  09A5                     l2608:	
  7369                           
  7370                           ;FMCW.c: 113: }
  7371                           ;FMCW.c: 114: if(fmcwtxrx == 2)
  7372  09A5  3002               	movlw	2
  7373  09A6  0672               	xorwf	STBOUT@fmcwtxrx,w
  7374  09A7  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7375  09A8  1D03               	btfss	3,2
  7376  09A9  29B5               	goto	l2616
  7377                           
  7378                           ;FMCW.c: 115: {
  7379                           ;FMCW.c: 116: PORTDbits.RD6 = 1;
  7380  09AA  1283               	bcf	3,5	;RP0=0, select bank0
  7381  09AB  1303               	bcf	3,6	;RP1=0, select bank0
  7382  09AC  1708               	bsf	8,6	;volatile
  7383                           
  7384                           ;FMCW.c: 117: _NOP();
  7385  09AD  120A  158A  2038  120A  158A  	fcall	__NOP
  7386                           
  7387                           ;FMCW.c: 118: PORTDbits.RD6 = 0;
  7388  09B2  1283               	bcf	3,5	;RP0=0, select bank0
  7389  09B3  1303               	bcf	3,6	;RP1=0, select bank0
  7390  09B4  1308               	bcf	8,6	;volatile
  7391  09B5                     l2616:	
  7392                           
  7393                           ;FMCW.c: 119: }
  7394                           ;FMCW.c: 120: if(fmcwtxrx == 3)
  7395  09B5  3003               	movlw	3
  7396  09B6  0672               	xorwf	STBOUT@fmcwtxrx,w
  7397  09B7  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7398  09B8  1D03               	btfss	3,2
  7399  09B9  0008               	return
  7400                           
  7401                           ;FMCW.c: 121: {
  7402                           ;FMCW.c: 122: PORTCbits.RC2 = 1;
  7403  09BA  1283               	bcf	3,5	;RP0=0, select bank0
  7404  09BB  1303               	bcf	3,6	;RP1=0, select bank0
  7405  09BC  1507               	bsf	7,2	;volatile
  7406                           
  7407                           ;FMCW.c: 123: _NOP();
  7408  09BD  120A  158A  2038   	fcall	__NOP
  7409                           
  7410                           ;FMCW.c: 124: PORTCbits.RC2 = 0;
  7411  09C0  1283               	bcf	3,5	;RP0=0, select bank0
  7412  09C1  1303               	bcf	3,6	;RP1=0, select bank0
  7413  09C2  1107               	bcf	7,2	;volatile
  7414  09C3  0008               	return
  7415  09C4                     __end_of_STBOUT:	
  7416                           
  7417                           	psect	text28
  7418  0A3E                     __ptext28:	
  7419 ;; *************** function _L_OUT *****************
  7420 ;; Defined at:
  7421 ;;		line 40 in file "FMCW.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;  fmcwtxrx        2    2[COMMON] int 
  7424 ;; Auto vars:     Size  Location     Type
  7425 ;;		None
  7426 ;; Return value:  Size  Location     Type
  7427 ;;                  1    wreg      void 
  7428 ;; Registers used:
  7429 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7430 ;; Tracked objects:
  7431 ;;		On entry : 0/0
  7432 ;;		On exit  : 0/0
  7433 ;;		Unchanged: 0/0
  7434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7435 ;;      Params:         2       0       0       0       0
  7436 ;;      Locals:         0       0       0       0       0
  7437 ;;      Temps:          0       0       0       0       0
  7438 ;;      Totals:         2       0       0       0       0
  7439 ;;Total ram usage:        2 bytes
  7440 ;; Hardware stack levels used:    1
  7441 ;; Hardware stack levels required when called:    1
  7442 ;; This function calls:
  7443 ;;		__NOP
  7444 ;; This function is called by:
  7445 ;;		_OUTFQ
  7446 ;;		_RFDOUT
  7447 ;;		_OPINIT
  7448 ;; This function uses a non-reentrant model
  7449 ;;
  7450                           
  7451                           
  7452                           ;psect for function _L_OUT
  7453  0A3E                     _L_OUT:	
  7454                           
  7455                           ;FMCW.c: 41: if(fmcwtxrx == 1)
  7456                           
  7457                           ;incstack = 0
  7458                           ; Regs used in _L_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7459  0A3E  0372               	decf	L_OUT@fmcwtxrx,w
  7460  0A3F  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7461  0A40  1D03               	btfss	3,2
  7462  0A41  2A55               	goto	l2550
  7463                           
  7464                           ;FMCW.c: 42: {
  7465                           ;FMCW.c: 43: PORTDbits.RD1 = 0;
  7466  0A42  1283               	bcf	3,5	;RP0=0, select bank0
  7467  0A43  1303               	bcf	3,6	;RP1=0, select bank0
  7468  0A44  1088               	bcf	8,1	;volatile
  7469                           
  7470                           ;FMCW.c: 44: _NOP();
  7471  0A45  120A  158A  2038  120A  158A  	fcall	__NOP
  7472                           
  7473                           ;FMCW.c: 45: PORTDbits.RD0 = 1;
  7474  0A4A  1283               	bcf	3,5	;RP0=0, select bank0
  7475  0A4B  1303               	bcf	3,6	;RP1=0, select bank0
  7476  0A4C  1408               	bsf	8,0	;volatile
  7477                           
  7478                           ;FMCW.c: 46: _NOP();
  7479  0A4D  120A  158A  2038  120A  158A  	fcall	__NOP
  7480                           
  7481                           ;FMCW.c: 47: PORTDbits.RD0 = 0;
  7482  0A52  1283               	bcf	3,5	;RP0=0, select bank0
  7483  0A53  1303               	bcf	3,6	;RP1=0, select bank0
  7484  0A54  1008               	bcf	8,0	;volatile
  7485  0A55                     l2550:	
  7486                           
  7487                           ;FMCW.c: 48: }
  7488                           ;FMCW.c: 49: if(fmcwtxrx == 2)
  7489  0A55  3002               	movlw	2
  7490  0A56  0672               	xorwf	L_OUT@fmcwtxrx,w
  7491  0A57  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7492  0A58  1D03               	btfss	3,2
  7493  0A59  2A6D               	goto	l2560
  7494                           
  7495                           ;FMCW.c: 50: {
  7496                           ;FMCW.c: 51: PORTDbits.RD5 = 0;
  7497  0A5A  1283               	bcf	3,5	;RP0=0, select bank0
  7498  0A5B  1303               	bcf	3,6	;RP1=0, select bank0
  7499  0A5C  1288               	bcf	8,5	;volatile
  7500                           
  7501                           ;FMCW.c: 52: _NOP();
  7502  0A5D  120A  158A  2038  120A  158A  	fcall	__NOP
  7503                           
  7504                           ;FMCW.c: 53: PORTDbits.RD4 = 1;
  7505  0A62  1283               	bcf	3,5	;RP0=0, select bank0
  7506  0A63  1303               	bcf	3,6	;RP1=0, select bank0
  7507  0A64  1608               	bsf	8,4	;volatile
  7508                           
  7509                           ;FMCW.c: 54: _NOP();
  7510  0A65  120A  158A  2038  120A  158A  	fcall	__NOP
  7511                           
  7512                           ;FMCW.c: 55: PORTDbits.RD4 = 0;
  7513  0A6A  1283               	bcf	3,5	;RP0=0, select bank0
  7514  0A6B  1303               	bcf	3,6	;RP1=0, select bank0
  7515  0A6C  1208               	bcf	8,4	;volatile
  7516  0A6D                     l2560:	
  7517                           
  7518                           ;FMCW.c: 56: }
  7519                           ;FMCW.c: 57: if(fmcwtxrx == 3)
  7520  0A6D  3003               	movlw	3
  7521  0A6E  0672               	xorwf	L_OUT@fmcwtxrx,w
  7522  0A6F  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7523  0A70  1D03               	btfss	3,2
  7524  0A71  0008               	return
  7525                           
  7526                           ;FMCW.c: 58: {
  7527                           ;FMCW.c: 59: PORTCbits.RC1 = 0;
  7528  0A72  1283               	bcf	3,5	;RP0=0, select bank0
  7529  0A73  1303               	bcf	3,6	;RP1=0, select bank0
  7530  0A74  1087               	bcf	7,1	;volatile
  7531                           
  7532                           ;FMCW.c: 60: _NOP();
  7533  0A75  120A  158A  2038  120A  158A  	fcall	__NOP
  7534                           
  7535                           ;FMCW.c: 61: PORTCbits.RC0 = 1;
  7536  0A7A  1283               	bcf	3,5	;RP0=0, select bank0
  7537  0A7B  1303               	bcf	3,6	;RP1=0, select bank0
  7538  0A7C  1407               	bsf	7,0	;volatile
  7539                           
  7540                           ;FMCW.c: 62: _NOP();
  7541  0A7D  120A  158A  2038   	fcall	__NOP
  7542                           
  7543                           ;FMCW.c: 63: PORTCbits.RC0 = 0;
  7544  0A80  1283               	bcf	3,5	;RP0=0, select bank0
  7545  0A81  1303               	bcf	3,6	;RP1=0, select bank0
  7546  0A82  1007               	bcf	7,0	;volatile
  7547  0A83  0008               	return
  7548  0A84                     __end_of_L_OUT:	
  7549                           
  7550                           	psect	text29
  7551  09F8                     __ptext29:	
  7552 ;; *************** function _H_OUT *****************
  7553 ;; Defined at:
  7554 ;;		line 74 in file "FMCW.c"
  7555 ;; Parameters:    Size  Location     Type
  7556 ;;  fmcwtxrx        2    2[COMMON] int 
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;		None
  7559 ;; Return value:  Size  Location     Type
  7560 ;;                  1    wreg      void 
  7561 ;; Registers used:
  7562 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7563 ;; Tracked objects:
  7564 ;;		On entry : 0/0
  7565 ;;		On exit  : 0/0
  7566 ;;		Unchanged: 0/0
  7567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7568 ;;      Params:         2       0       0       0       0
  7569 ;;      Locals:         0       0       0       0       0
  7570 ;;      Temps:          0       0       0       0       0
  7571 ;;      Totals:         2       0       0       0       0
  7572 ;;Total ram usage:        2 bytes
  7573 ;; Hardware stack levels used:    1
  7574 ;; Hardware stack levels required when called:    1
  7575 ;; This function calls:
  7576 ;;		__NOP
  7577 ;; This function is called by:
  7578 ;;		_OUTFQ
  7579 ;;		_RFDOUT
  7580 ;;		_OPINIT
  7581 ;; This function uses a non-reentrant model
  7582 ;;
  7583                           
  7584                           
  7585                           ;psect for function _H_OUT
  7586  09F8                     _H_OUT:	
  7587                           
  7588                           ;FMCW.c: 75: if(fmcwtxrx == 1)
  7589                           
  7590                           ;incstack = 0
  7591                           ; Regs used in _H_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7592  09F8  0372               	decf	H_OUT@fmcwtxrx,w
  7593  09F9  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7594  09FA  1D03               	btfss	3,2
  7595  09FB  2A0F               	goto	l2580
  7596                           
  7597                           ;FMCW.c: 76: {
  7598                           ;FMCW.c: 77: PORTDbits.RD1 = 1;
  7599  09FC  1283               	bcf	3,5	;RP0=0, select bank0
  7600  09FD  1303               	bcf	3,6	;RP1=0, select bank0
  7601  09FE  1488               	bsf	8,1	;volatile
  7602                           
  7603                           ;FMCW.c: 78: _NOP();
  7604  09FF  120A  158A  2038  120A  158A  	fcall	__NOP
  7605                           
  7606                           ;FMCW.c: 79: PORTDbits.RD0 = 1;
  7607  0A04  1283               	bcf	3,5	;RP0=0, select bank0
  7608  0A05  1303               	bcf	3,6	;RP1=0, select bank0
  7609  0A06  1408               	bsf	8,0	;volatile
  7610                           
  7611                           ;FMCW.c: 80: _NOP();
  7612  0A07  120A  158A  2038  120A  158A  	fcall	__NOP
  7613                           
  7614                           ;FMCW.c: 81: PORTDbits.RD0 = 0;
  7615  0A0C  1283               	bcf	3,5	;RP0=0, select bank0
  7616  0A0D  1303               	bcf	3,6	;RP1=0, select bank0
  7617  0A0E  1008               	bcf	8,0	;volatile
  7618  0A0F                     l2580:	
  7619                           
  7620                           ;FMCW.c: 82: }
  7621                           ;FMCW.c: 83: if(fmcwtxrx == 2)
  7622  0A0F  3002               	movlw	2
  7623  0A10  0672               	xorwf	H_OUT@fmcwtxrx,w
  7624  0A11  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7625  0A12  1D03               	btfss	3,2
  7626  0A13  2A27               	goto	l2590
  7627                           
  7628                           ;FMCW.c: 84: {
  7629                           ;FMCW.c: 85: PORTDbits.RD5 = 1;
  7630  0A14  1283               	bcf	3,5	;RP0=0, select bank0
  7631  0A15  1303               	bcf	3,6	;RP1=0, select bank0
  7632  0A16  1688               	bsf	8,5	;volatile
  7633                           
  7634                           ;FMCW.c: 86: _NOP();
  7635  0A17  120A  158A  2038  120A  158A  	fcall	__NOP
  7636                           
  7637                           ;FMCW.c: 87: PORTDbits.RD4 = 1;
  7638  0A1C  1283               	bcf	3,5	;RP0=0, select bank0
  7639  0A1D  1303               	bcf	3,6	;RP1=0, select bank0
  7640  0A1E  1608               	bsf	8,4	;volatile
  7641                           
  7642                           ;FMCW.c: 88: _NOP();
  7643  0A1F  120A  158A  2038  120A  158A  	fcall	__NOP
  7644                           
  7645                           ;FMCW.c: 89: PORTDbits.RD4 = 0;
  7646  0A24  1283               	bcf	3,5	;RP0=0, select bank0
  7647  0A25  1303               	bcf	3,6	;RP1=0, select bank0
  7648  0A26  1208               	bcf	8,4	;volatile
  7649  0A27                     l2590:	
  7650                           
  7651                           ;FMCW.c: 90: }
  7652                           ;FMCW.c: 91: if(fmcwtxrx == 3)
  7653  0A27  3003               	movlw	3
  7654  0A28  0672               	xorwf	H_OUT@fmcwtxrx,w
  7655  0A29  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7656  0A2A  1D03               	btfss	3,2
  7657  0A2B  0008               	return
  7658                           
  7659                           ;FMCW.c: 92: {
  7660                           ;FMCW.c: 93: PORTCbits.RC1 = 1;
  7661  0A2C  1283               	bcf	3,5	;RP0=0, select bank0
  7662  0A2D  1303               	bcf	3,6	;RP1=0, select bank0
  7663  0A2E  1487               	bsf	7,1	;volatile
  7664                           
  7665                           ;FMCW.c: 94: _NOP();
  7666  0A2F  120A  158A  2038  120A  158A  	fcall	__NOP
  7667                           
  7668                           ;FMCW.c: 95: PORTCbits.RC0 = 1;
  7669  0A34  1283               	bcf	3,5	;RP0=0, select bank0
  7670  0A35  1303               	bcf	3,6	;RP1=0, select bank0
  7671  0A36  1407               	bsf	7,0	;volatile
  7672                           
  7673                           ;FMCW.c: 96: _NOP();
  7674  0A37  120A  158A  2038   	fcall	__NOP
  7675                           
  7676                           ;FMCW.c: 97: PORTCbits.RC0 = 0;
  7677  0A3A  1283               	bcf	3,5	;RP0=0, select bank0
  7678  0A3B  1303               	bcf	3,6	;RP1=0, select bank0
  7679  0A3C  1007               	bcf	7,0	;volatile
  7680  0A3D  0008               	return
  7681  0A3E                     __end_of_H_OUT:	
  7682                           
  7683                           	psect	text30
  7684  0838                     __ptext30:	
  7685 ;; *************** function __NOP *****************
  7686 ;; Defined at:
  7687 ;;		line 349 in file "FMCW.c"
  7688 ;; Parameters:    Size  Location     Type
  7689 ;;		None
  7690 ;; Auto vars:     Size  Location     Type
  7691 ;;  i               2    0[COMMON] int 
  7692 ;; Return value:  Size  Location     Type
  7693 ;;                  1    wreg      void 
  7694 ;; Registers used:
  7695 ;;		wreg, status,2, btemp+1
  7696 ;; Tracked objects:
  7697 ;;		On entry : 0/0
  7698 ;;		On exit  : 0/0
  7699 ;;		Unchanged: 0/0
  7700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7701 ;;      Params:         0       0       0       0       0
  7702 ;;      Locals:         2       0       0       0       0
  7703 ;;      Temps:          0       0       0       0       0
  7704 ;;      Totals:         2       0       0       0       0
  7705 ;;Total ram usage:        2 bytes
  7706 ;; Hardware stack levels used:    1
  7707 ;; This function calls:
  7708 ;;		Nothing
  7709 ;; This function is called by:
  7710 ;;		_L_OUT
  7711 ;;		_H_OUT
  7712 ;;		_STBOUT
  7713 ;; This function uses a non-reentrant model
  7714 ;;
  7715                           
  7716                           
  7717                           ;psect for function __NOP
  7718  0838                     __NOP:	
  7719                           
  7720                           ;FMCW.c: 350: for(int i=0; i<5; i++){
  7721                           
  7722                           ;incstack = 0
  7723                           ; Regs used in __NOP: [wreg+status,2+btemp+1]
  7724  0838  01F0               	clrf	__NOP@i
  7725  0839  01F1               	clrf	__NOP@i+1
  7726  083A                     L9:	
  7727  083A  0871               	movf	__NOP@i+1,w
  7728  083B  3A80               	xorlw	128
  7729  083C  00FF               	movwf	127
  7730  083D  3080               	movlw	128
  7731  083E  027F               	subwf	127,w
  7732  083F  1D03               	skipz
  7733  0840  2843               	goto	u1845
  7734  0841  3005               	movlw	5
  7735  0842  0270               	subwf	__NOP@i,w
  7736  0843                     u1845:	
  7737  0843  1803               	btfsc	3,0
  7738  0844  0008               	return
  7739                           
  7740                           ;FMCW.c: 351: __nop();
  7741  0845  0000               	nop
  7742  0846  3001               	movlw	1
  7743  0847  07F0               	addwf	__NOP@i,f
  7744  0848  1803               	skipnc
  7745  0849  0AF1               	incf	__NOP@i+1,f
  7746  084A  3000               	movlw	0
  7747  084B  07F1               	addwf	__NOP@i+1,f
  7748  084C  283A               	goto	L9
  7749  084D                     __end_of__NOP:	
  7750  007E                     btemp	set	126	;btemp
  7751  007E                     wtemp	set	126
  7752  007E                     wtemp0	set	126
  7753  0080                     wtemp1	set	128
  7754  0082                     wtemp2	set	130
  7755  0084                     wtemp3	set	132
  7756  0086                     wtemp4	set	134
  7757  0088                     wtemp5	set	136
  7758  007F                     wtemp6	set	127
  7759  007E                     ttemp	set	126
  7760  007E                     ttemp0	set	126
  7761  0081                     ttemp1	set	129
  7762  0084                     ttemp2	set	132
  7763  0087                     ttemp3	set	135
  7764  007F                     ttemp4	set	127
  7765  007E                     ltemp	set	126
  7766  007E                     ltemp0	set	126
  7767  0082                     ltemp1	set	130
  7768  0086                     ltemp2	set	134
  7769  0080                     ltemp3	set	128


Data Sizes:
    Strings     26
    Constant    0
    Data        94
    BSS         137
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      80
    BANK1            80     36      78
    BANK3            96      0      90
    BANK2            96      0      89

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 0
		 -> main@EPS_kill(BANK1[0]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_15(CODE[5]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_16(CODE[7]), main@EPS_kill_1(BANK1[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 0
		 -> main@EPS_kill(BANK1[0]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMMON[2]), 

    FMRX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), FMRX_Nprg(BANK3[10]), 

    CWTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@CWTX_Nprg(BANK1[10]), CWTX_Nprg(BANK1[10]), 

    FMTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    OUTFQ@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), main@CWTX_Nprg(BANK1[10]), main@FMTX_Nprg(BANK1[10]), 
		 -> FMRX_Nprg(BANK3[10]), CWTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    sp__EEPROM_Read	PTR unsigned char  size(1) Largest target is 32
		 -> EEPROMData(BANK2[32]), 

    EEPROM_Write@data	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 

    main@dData	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 

    sp__ReceivePacket_data	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 


Critical Paths under _main in COMMON

    _ReceivePacket_data->_fcscheck
    _ReceivePacket_data->_waitFlag
    _waitFlag->_getbit
    _getdata->_getbit
    _NM_waddress->_putch
    _Init_I2C_M->___lldiv
    _FMTX->_OUTFQ
    _FMTX->_RFDOUT
    _FMRX->_OUTFQ
    _FMRX->_RFDOUT
    _EEPROM_Write->_I2C_Master_Write
    _CWTX->_OUTFQ
    _CWTX->_RFDOUT
    _RFDOUT->___awdiv
    _OUTFQ->___awdiv
    _OPINIT->_H_OUT
    _OPINIT->_L_OUT
    _OPINIT->_STBOUT
    _STBOUT->__NOP
    _L_OUT->__NOP
    _H_OUT->__NOP

Critical Paths under _main in BANK0

    _main->_CWTX
    _main->_FMRX
    _main->_FMTX
    _ReceivePacket_data->_waitFlag
    _FMTX->_OUTFQ
    _FMRX->_OUTFQ
    _CWTX->_OUTFQ

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                40    40      0   33596
                                             66 BANK0      4     4      0
                                              0 BANK1     36    36      0
                               _CWTX
                       _EEPROM_Write
                               _FMRX
                               _FMTX
                         _Init_I2C_M
                           _Init_MPU
                        _Init_SERIAL
                        _NM_waddress
                 _ReceivePacket_data
                          _Reset_EPS
                            _sprintf
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     4      2     171
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6     427
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (1) _Reset_EPS                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ReceivePacket_data                                   6     6      0    2669
                                             10 COMMON     2     2      0
                                             29 BANK0      4     4      0
                           _fcscheck
                            _getdata
                           _waitFlag
 ---------------------------------------------------------------------------------
 (2) _waitFlag                                            33    33      0    2205
                                              6 COMMON     4     4      0
                                              0 BANK0     29    29      0
                             _getbit
 ---------------------------------------------------------------------------------
 (2) _getdata                                             10    10      0     212
                                              6 COMMON     2     2      0
                                              0 BANK0      7     7      0
                             _getbit
 ---------------------------------------------------------------------------------
 (3) _getbit                                               6     4      2      46
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _fcscheck                                            10     8      2     161
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (1) _NM_waddress                                          3     1      2     194
                                              1 COMMON     3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_SERIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_MPU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_I2C_M                                           8     4      4     343
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _FMTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _FMRX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         8     5      3     739
                                              2 COMMON     8     5      3
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     446
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CWTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (2) _RFDOUT                                              37    33      4    3231
                                              9 COMMON     4     0      4
                                              0 BANK0     33    33      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _OUTFQ                                               64    60      4    3853
                                              9 COMMON     4     0      4
                                              0 BANK0     60    60      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _OPINIT                                               2     0      2    2075
                                              4 COMMON     2     0      2
                              _H_OUT
                              _L_OUT
                             _STBOUT
 ---------------------------------------------------------------------------------
 (3) _STBOUT                                               2     0      2     271
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _L_OUT                                                2     0      2     801
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _H_OUT                                                2     0      2     536
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (4) __NOP                                                 2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CWTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _EEPROM_Write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _FMRX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _FMTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _Init_I2C_M
     ___lldiv
   _Init_MPU
   _Init_SERIAL
   _NM_waddress
     _putch
   _ReceivePacket_data
     _fcscheck
     _getdata
       _getbit
     _waitFlag
       _getbit
   _Reset_EPS
   _sprintf
   _strcmp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      5A       9       93.8%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      59      11       92.7%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     24      4E       7       97.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     46      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     15F      12        0.0%
ABS                  0      0     15F       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Jul 21 16:55:42 2017

                           pc 0002                   __CFG_CP$OFF 0000                            l56 17CE  
                ___awdiv@sign 0076                            fsr 0004                           l194 0566  
                         l259 0D70                           l465 082F                           _RB0 0030  
                         _RB1 0031                           _RB2 0032                           _RE0 0048  
                         _RE1 0049                           _PEN 048A                  __CFG_CPD$OFF 0000  
                         _SEN 0488                           _RX9 00C6                           _TX9 04C6  
                         fsr0 0004                           indf 0000                  __CFG_FOSC$HS 0000  
                __CFG_LVP$OFF 0000                          l3002 0721                          l3100 0D38  
                        l3006 072E                          l3112 0D69                          l3032 0784  
                        l3202 02B7                          l3106 0D55                          l3114 0D17  
                        l3018 075C                          l3050 07B0                          l3212 02E0  
                        l3220 030D                          l3028 0777                          l3052 032F  
                        l3150 00BD                          l3126 0D88                          l3216 02FA  
                        l3208 02C6                          l3240 0DC5                          l3072 0C65  
                        l3162 00E8                          l3234 0DB6                          l2530 0ABB  
                        l3066 0C54                          l3180 019D                          l3156 00D9  
                        l3228 0D9A                          l2532 0AC8                          l3076 0C70  
                        l3068 0C57                          l3500 006D                          l2550 0A55  
                        l3190 020C                          l3262 0E3F                          l3254 0E0B  
                        l3086 0C34                          l3510 00A5                          l2560 0A6D  
                        l2616 09B5                          l2608 09A5                          l2632 0B21  
                        l3168 00F7                          l3248 0DFC                          l2800 04BA  
                        l2704 0379                          l2650 0B42                          l3194 0293  
                        l3178 0160                          l3258 0E25                          l3266 0E52  
                        l3290 0C22                          l2810 04D5                          l2722 03B8  
                        l3354 0AE8                          l3522 090C                          l2580 0A0F  
                        l2660 0B63                          l3188 0205                          l3276 0BDD  
                        l2732 03D3                          l2708 0386                          l3356 0B0B  
                        l3364 0B11                          l3508 007A                          l3516 08E9  
                        l2590 0A27                          l2638 0B2C                          l3198 02A4  
                        l3286 0C15                          l3278 0BED                          l2902 05D6  
                        l2814 04E2                          l3518 08F3                          l2664 0B6B  
                        l2656 0B58                          l2648 0B34                          l3464 0BA0  
                        l2840 0538                          l2736 03E0                          l3480 0025  
                        l3466 0BBA                          l2914 0604                          l2826 0510  
                        l2762 0436                          l2940 065A                          l2924 061F  
                        l2836 052B                          l2748 040E                          l2950 0675  
                        l2774 0464                          l2758 0429                          l2694 035E  
                        l2686 0336                          l3494 0037                          l2928 062C  
                        l2864 056F                          l2784 047F                          l2688 0355  
                        l3496 0063                          l3816 0FF0                          l2954 0682  
                        l2874 058A                          l2858 0564                          l2980 06D8  
                        l2788 048C                          l2966 06B0                          l2878 0597  
                        l3782 0EE2                          l2992 0706                          l2976 06CB  
                        l2888 05AE                          l2898 05C9                          STR_1 081E  
                        STR_2 081E                          STR_3 081E                          STR_4 081E  
                        STR_5 081E                          STR_6 081E                          STR_7 0817  
                        STR_8 0817                          STR_9 0817                          _BRGH 04C2  
                        _CREN 00C4                          u2035 0B37                          u2055 0B43  
                        u3015 0BE1                          u2215 03F5                          u2065 0B4F  
                        u2075 0B59                          u3035 0BEF                          u3045 0C04  
                        u3055 0C16                          u2335 04F7                          u2255 044B  
                        u2175 039F                          u3155 09D6                          u2605 0743  
                        u2525 0697                          u2445 05EB                          u3085 0AF6  
                        u2375 054D                          u2295 04A1                          _FMRX 093E  
                        u3530 0F68                          u3540 0F7E                          _FMTX 096A  
                        u1845 0843                          u2805 00E6                          u2645 0799  
                        u2565 06ED                          u2485 0641                          u3550 0F94  
                        u2815 00F5                          u3607 0F57                          u2745 0D25  
                        u3617 0FE9                          u2915 030B                          u1875 0AAF  
                        u3627 0FF8                          u2925 0D98                          u3637 08A6  
                        u2935 0DB4                          u3647 08B7                          u2865 02A2  
                        u2785 00BB                          u2945 0DC3                          u3657 0AB3  
                        u2875 02B5                          u2795 00D7                          u2955 0DFA  
                        u3667 0BC5                          u3587 0E74                          _RCIE 0465  
                        _RCEN 048B                          _RCIF 0065                          _CWTX 0912  
                        u2885 02C4                          u2965 0E09                          u3597 0E9C  
                        u2995 0E50                          _SPEN 00C7                          _RSEN 0489  
                        _SREN 00C5                          _TXIE 0464                          _TXEN 04C5  
                        _TXIF 0064                          _SYNC 04C4                          __NOP 0838  
                __CFG_WRT$OFF 0000                          _main 0E6C                   _NM_waddress 17EE  
               ??_Init_SERIAL 0070                          btemp 007E                          ltemp 007E  
                getbit@oldbit 00EC                   Init_I2C_M@c 0020                          start 0000  
ReceivePacket_data@fcschecker 003D                          ttemp 007E                          wtemp 007E  
               __CFG_IESO$OFF 0000                 __CFG_MCLRE$ON 0000          __end_of_EEPROM_Write 0BCD  
                       ?_FMRX 005C                         ?_FMTX 005C                         ?_CWTX 005C  
            ?_I2C_Master_Wait 0070              ?_I2C_Master_Stop 0070                         ?__NOP 0070  
                       ?_main 0070                         _ACKEN 048C                         _ACKDT 048D  
             __end_of___awdiv 0B70                         STR_10 0817                         STR_11 0817  
                       STR_12 0817                         STR_15 0825                         STR_16 0810  
               __CFG_WDTE$OFF 0000                         _ANSEL 0188               __end_of___lldiv 0C2B  
             ___awdiv@divisor 0070               ___awdiv@counter 0075                         _RCREG 001A  
                       _SPBRG 0099                         _PORTA 0005                         _PORTB 0006  
                       _PORTC 0007                         _PORTD 0008                         _PORTE 0009  
                       _H_OUT 09F8                         _OUTFQ 00AC                         _TRISA 0085  
                       _TRISB 0086                         _TRISC 0087                         _TRISD 0088  
                       _TRISE 0089                         _L_OUT 0A3E                         _TXREG 0019  
               __CFG_PWRTE$ON 0000                __CFG_FCMEN$OFF 0000                         _dData 0130  
             __end_of_getdata 0C8C                         _eflag 0068                 getdata@dstuff 0022  
                       _putch 17CD                __CFG_BOREN$OFF 0000                         pclath 000A  
                       ltemp0 007E                         ltemp1 0082                         ltemp2 0086  
                       ltemp3 0080                         ttemp0 007E                         ttemp1 0081  
                       ttemp2 0084                         ttemp3 0087                         ttemp4 007F  
                       status 0003                         wtemp0 007E                         wtemp1 0080  
                       wtemp2 0082                         wtemp3 0084                         wtemp4 0086  
                       wtemp5 0088                         wtemp6 007F               __end_of_sprintf 00AC  
                  _Init_I2C_M 09C4              EEPROM_Write@data 0074    __end_of_ReceivePacket_data 0B17  
                __end_of_FMRX 096A                  __end_of_FMTX 0996                  __end_of_CWTX 093E  
                __end_of__NOP 084D               __initialization 07B3                  __end_of_main 1000  
         __end_of_Init_SERIAL 0866              __end_of_Init_MPU 089C                        ??_FMRX 007D  
                      ??_FMTX 007D                        ??_CWTX 007D                        ??__NOP 0070  
                      ??_main 0062                        ?_H_OUT 0072      EEPROM_Write@high_address 0072  
                      ?_OUTFQ 0079                        ?_L_OUT 0072             ?_I2C_Master_Start 0070  
           ?_I2C_Master_Write 0070                        OUTFQ@i 0056            ??_I2C_Master_Start 0070  
                      OUTFQ@j 005A            ??_I2C_Master_Write 0072              ___awdiv@dividend 0072  
                  _eDataField 0150                        ?_putch 0070                        _ANSELH 0189  
                      _RFDOUT 0D8B                        _OPINIT 0C8C                        _SSPADD 0093  
                      _STBOUT 0996                        _STATUS 0003                        _SSPCON 0014  
                      _SSPBUF 0013                        __NOP@i 0070              __end_of_fcscheck 0D8B  
                   ??___awdiv 0074                        _dfcshi 006C                     ??___lldiv 0078  
                      _dfcslo 006D                        _efcshi 006E                        _efcslo 006F  
                      _getbit 0A84            __size_of_Reset_EPS 0023                        _estuff 00EA  
            ___awdiv@quotient 0077                    _dPacketnum 0066                     ??_getdata 0076  
                      _strcmp 08E7                   RFDOUT@i_430 003B                   RFDOUT@i_431 003F  
            __end_of_waitFlag 07B3                     ??_sprintf 0076    EEPROM_Write@EEPROM_address 0078  
     __end_of__initialization 07FC       EEPROM_Write@low_address 0073                   ?_Init_I2C_M 0020  
                 _Init_SERIAL 084D         __size_of_EEPROM_Write 005D                 __end_of_H_OUT 0A3E  
               __end_of_OUTFQ 0327                 __end_of_L_OUT 0A84                 L_OUT@fmcwtxrx 0072  
              __pcstackCOMMON 0070                  __pidataBANK1 0003                  __pidataBANK2 0866  
                __pidataBANK3 08BF                 __end_of_putch 17D5                       ??_H_OUT 0074  
                     ??_OUTFQ 0020                       ??_L_OUT 0074                       ??_putch 0070  
                _EEPROM_Write 0B70                    __pbssBANK0 0066                    __pbssBANK1 00E1  
                  __pbssBANK2 0110                    __pbssBANK3 0190             __end_of_Reset_EPS 08BF  
                   ?_Init_MPU 0070                       ?_RFDOUT 0079                       ?_OPINIT 0074  
                ?_NM_waddress 0071                       ?_STBOUT 0072                       RFDOUT@i 003D  
                  __pmaintext 0E6C                    _ebitstatus 00E6                       ?_getbit 0070  
                     ?_strcmp 0070           __size_of_Init_I2C_M 0034                     OUTFQ@Nprg 007B  
                   ?_fcscheck 0070                       _SSPCON2 0091                       _SSPSTAT 0094  
                  __stringtab 0800                    ??_Init_MPU 0070               __size_of_RFDOUT 00E1  
             __size_of_OPINIT 007D               __size_of_STBOUT 002E                     ?_waitFlag 0070  
                     _dPacket 0190                       _ePacket 00E1                       ___awdiv 0B17  
                     ___lldiv 0BCD               __size_of_getbit 0049                   waitFlag@buf 003C  
                     __ptext1 08E7                       __ptext2 0020                       __ptext3 089C  
                     __ptext4 0ACD                       __ptext5 0327                       __ptext6 0C2B  
                     __ptext7 0A84                       __ptext8 0D09                       __ptext9 17EE  
                     _getdata 0C2B            _ReceivePacket_data 0ACD               __size_of_strcmp 002B  
    __size_of_I2C_Master_Wait 0009      __size_of_I2C_Master_Stop 0007                    ??_fcscheck 0072  
         ?_ReceivePacket_data 0070                       getbit@i 0074                       _sprintf 0020  
                     clrloop0 17D6          end_of_initialization 07FC                  RFDOUT@Nref_b 0023  
                   _FMRX_Nref 00C9                     _FMRX_Nprg 01E0                     _FMTX_Nref 00CB  
                   _FMTX_Nprg 00D7                     _CWTX_Nref 00C7                     _CWTX_Nprg 00CD  
                 OUTFQ@Nprg_b 0030     __size_of_I2C_Master_Start 0007     __size_of_I2C_Master_Write 0008  
             ___lldiv@divisor 0070               ___lldiv@counter 007D                    ??_waitFlag 0076  
        ??_ReceivePacket_data 007A                    fcscheck@bt 0074                OPINIT@fmcwtxrx 0074  
                     strcmp@r 0074                     _PORTCbits 0007                     _PORTDbits 0008  
                  getdata@buf 0026                  ??_Init_I2C_M 0024                  ?_Init_SERIAL 0070  
              __end_of_RFDOUT 0E6C                __end_of_OPINIT 0D09                __end_of_STBOUT 09C4  
        __size_of_NM_waddress 0012                __end_of_getbit 0ACD                __end_of_strcmp 0912  
         start_initialization 07B3            __end_of_Init_I2C_M 09F8                      ??_RFDOUT 0020  
                    ??_OPINIT 0076             ??_I2C_Master_Wait 0070             ??_I2C_Master_Stop 0070  
                    ??_STBOUT 0074             __size_of_Init_MPU 001D                     _Reset_EPS 089C  
           getdata@dbitstatus 0024                    init_fetch0 17DD                      ??_getbit 0072  
                 __pdataBANK1 00C4                   __pdataBANK2 0150                   __pdataBANK3 01C2  
                  RFDOUT@Nref 007B                      ??_strcmp 0072      NM_waddress@whigh_address 0071  
                   ___latbits 0002                 __pcstackBANK0 0020                 __pcstackBANK1 00A0  
                    FMRX@Nref 005C                      FMRX@Nprg 005E                      FMTX@Nref 005C  
                    FMTX@Nprg 005E                      FMRX@fmrx 0060                      FMTX@fmtx 0060  
                    CWTX@Nref 005C                      CWTX@Nprg 005E             __size_of_fcscheck 0082  
               waitFlag@j_111 002C                 waitFlag@j_103 0024                 waitFlag@j_120 0036  
               waitFlag@j_112 002E                 waitFlag@j_105 0026                 waitFlag@j_122 0038  
               waitFlag@j_114 0030                 waitFlag@j_107 0028                 waitFlag@j_116 0032  
               waitFlag@j_109 002A                 waitFlag@j_118 0034                      CWTX@cwtx 0060  
                 sprintf@flag 0077              _I2C_Master_Start 17B7                    ?_Reset_EPS 0070  
            _I2C_Master_Write 17C5       getdata@bufstore_counter 0020                      ?___awdiv 0070  
                    ?___lldiv 0070             __size_of_waitFlag 048C                     __pstrings 0800  
                    ?_getdata 0070                __size_of_H_OUT 0046                __size_of_OUTFQ 027B  
              __size_of_L_OUT 0046                      ?_sprintf 0070                __size_of_putch 0008  
               H_OUT@fmcwtxrx 0072                     clear_ram0 17D5                    OUTFQ@i_421 0058  
                  OUTFQ@i_419 0052                     _rcv_state 006A          __size_of_Init_SERIAL 0019  
                  OUTFQ@count 0054                     fcscheck@i 0075                     main@F2010 01CC  
                   main@F2012 01D6                     main@F2004 00C4                     main@F2008 01C2  
                 __stringbase 080F                     main@dData 00C3                      _Init_MPU 087F  
                 ??_Reset_EPS 0070                 fcscheck@i_134 0077   __size_of_ReceivePacket_data 004A  
            __size_of___awdiv 0059              __size_of___lldiv 005E            __end_of__stringtab 0810  
                  _EEPROMData 0110              __size_of_getdata 0061               _I2C_Master_Wait 082F  
             _I2C_Master_Stop 17BE                RFDOUT@fmcwtxrx 0079                      _efcsflag 00E8  
                    _fcscheck 0D09                      __ptext10 17CD                      __ptext11 084D  
                    __ptext20 17B7                      __ptext12 087F                      __ptext21 082F  
                    __ptext13 09C4                      __ptext30 0838                      __ptext22 0912  
                    __ptext14 0BCD                      __ptext23 0D8B                      __ptext15 096A  
                    __ptext24 00AC                      __ptext16 093E                      __ptext25 0B17  
                    __ptext17 0B70                      __ptext26 0C8C                      __ptext18 17C5  
                    __ptext27 0996                      __ptext19 17BE                      __ptext28 0A3E  
                    __ptext29 09F8             __CFG_BOR4V$BOR40V 0000                 ?_EEPROM_Write 0072  
            __size_of_sprintf 008C                 __size_of_FMRX 002C                 __size_of_FMTX 002C  
               __size_of_CWTX 002C                 __size_of__NOP 0015                 ??_NM_waddress 0073  
                   waitFlag@i 0020                     waitFlag@j 0022                 __size_of_main 0194  
              STBOUT@fmcwtxrx 0072                      _waitFlag 0327      NM_waddress@NM_wad_header 0073  
               OUTFQ@fmcwtxrx 0079                main@EPS_kill_1 00A0                main@EPS_kill_2 00C2  
    __end_of_I2C_Master_Start 17BE                     putch@byte 0070      __end_of_I2C_Master_Write 17CD  
                    init_ram0 17E1                  fcscheck@byte 0079                ??_EEPROM_Write 0075  
          waitFlag@flag_judge 003A                     sprintf@ap 0078                     sprintf@cp 0079  
                   sprintf@sp 0070              ___lldiv@dividend 0074                     stringcode 080A  
               main@FMRX_Nprg 00B7             main@NM_wad_header 00C1                 main@FMTX_Nprg 00A3  
         __end_of_NM_waddress 1800                 main@CWTX_Nprg 00AD       __end_of_I2C_Master_Wait 0838  
     __end_of_I2C_Master_Stop 17C5                      sprintf@c 007B                      sprintf@f 0072  
                    strcmp@s1 0075                      strcmp@s2 0070              ___lldiv@quotient 0079  
           I2C_Master_Write@d 0070           EEPROM_Write@Address 0079                      stringdir 080A  
                    stringtab 0800           ReceivePacket_data@i 003F                  main@EPS_kill 00A0  
     NM_waddress@wlow_address 0072  
