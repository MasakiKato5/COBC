

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Jan 21 16:53:34 2018

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	dabs	1,0x7E,2
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  008F                     	;# 
    98  0090                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  0105                     	;# 
   117  0107                     	;# 
   118  0108                     	;# 
   119  0109                     	;# 
   120  010C                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  010F                     	;# 
   125  0185                     	;# 
   126  0187                     	;# 
   127  0188                     	;# 
   128  0189                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  0000                     	;# 
   132  0001                     	;# 
   133  0002                     	;# 
   134  0003                     	;# 
   135  0004                     	;# 
   136  0005                     	;# 
   137  0006                     	;# 
   138  0007                     	;# 
   139  0008                     	;# 
   140  0009                     	;# 
   141  000A                     	;# 
   142  000B                     	;# 
   143  000C                     	;# 
   144  000D                     	;# 
   145  000E                     	;# 
   146  000E                     	;# 
   147  000F                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0013                     	;# 
   152  0014                     	;# 
   153  0015                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0017                     	;# 
   157  0018                     	;# 
   158  0019                     	;# 
   159  001A                     	;# 
   160  001B                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001D                     	;# 
   164  001E                     	;# 
   165  001F                     	;# 
   166  0081                     	;# 
   167  0085                     	;# 
   168  0086                     	;# 
   169  0087                     	;# 
   170  0088                     	;# 
   171  0089                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  008F                     	;# 
   176  0090                     	;# 
   177  0091                     	;# 
   178  0092                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0094                     	;# 
   183  0095                     	;# 
   184  0096                     	;# 
   185  0097                     	;# 
   186  0098                     	;# 
   187  0099                     	;# 
   188  009A                     	;# 
   189  009B                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  009F                     	;# 
   194  0105                     	;# 
   195  0107                     	;# 
   196  0108                     	;# 
   197  0109                     	;# 
   198  010C                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  010F                     	;# 
   203  0185                     	;# 
   204  0187                     	;# 
   205  0188                     	;# 
   206  0189                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  0000                     	;# 
   210  0001                     	;# 
   211  0002                     	;# 
   212  0003                     	;# 
   213  0004                     	;# 
   214  0005                     	;# 
   215  0006                     	;# 
   216  0007                     	;# 
   217  0008                     	;# 
   218  0009                     	;# 
   219  000A                     	;# 
   220  000B                     	;# 
   221  000C                     	;# 
   222  000D                     	;# 
   223  000E                     	;# 
   224  000E                     	;# 
   225  000F                     	;# 
   226  0010                     	;# 
   227  0011                     	;# 
   228  0012                     	;# 
   229  0013                     	;# 
   230  0014                     	;# 
   231  0015                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0017                     	;# 
   235  0018                     	;# 
   236  0019                     	;# 
   237  001A                     	;# 
   238  001B                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  001D                     	;# 
   242  001E                     	;# 
   243  001F                     	;# 
   244  0081                     	;# 
   245  0085                     	;# 
   246  0086                     	;# 
   247  0087                     	;# 
   248  0088                     	;# 
   249  0089                     	;# 
   250  008C                     	;# 
   251  008D                     	;# 
   252  008E                     	;# 
   253  008F                     	;# 
   254  0090                     	;# 
   255  0091                     	;# 
   256  0092                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0093                     	;# 
   260  0094                     	;# 
   261  0095                     	;# 
   262  0096                     	;# 
   263  0097                     	;# 
   264  0098                     	;# 
   265  0099                     	;# 
   266  009A                     	;# 
   267  009B                     	;# 
   268  009C                     	;# 
   269  009D                     	;# 
   270  009E                     	;# 
   271  009F                     	;# 
   272  0105                     	;# 
   273  0107                     	;# 
   274  0108                     	;# 
   275  0109                     	;# 
   276  010C                     	;# 
   277  010C                     	;# 
   278  010D                     	;# 
   279  010E                     	;# 
   280  010F                     	;# 
   281  0185                     	;# 
   282  0187                     	;# 
   283  0188                     	;# 
   284  0189                     	;# 
   285  018C                     	;# 
   286  018D                     	;# 
   287  0000                     	;# 
   288  0001                     	;# 
   289  0002                     	;# 
   290  0003                     	;# 
   291  0004                     	;# 
   292  0005                     	;# 
   293  0006                     	;# 
   294  0007                     	;# 
   295  0008                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000D                     	;# 
   301  000E                     	;# 
   302  000E                     	;# 
   303  000F                     	;# 
   304  0010                     	;# 
   305  0011                     	;# 
   306  0012                     	;# 
   307  0013                     	;# 
   308  0014                     	;# 
   309  0015                     	;# 
   310  0015                     	;# 
   311  0016                     	;# 
   312  0017                     	;# 
   313  0018                     	;# 
   314  0019                     	;# 
   315  001A                     	;# 
   316  001B                     	;# 
   317  001B                     	;# 
   318  001C                     	;# 
   319  001D                     	;# 
   320  001E                     	;# 
   321  001F                     	;# 
   322  0081                     	;# 
   323  0085                     	;# 
   324  0086                     	;# 
   325  0087                     	;# 
   326  0088                     	;# 
   327  0089                     	;# 
   328  008C                     	;# 
   329  008D                     	;# 
   330  008E                     	;# 
   331  008F                     	;# 
   332  0090                     	;# 
   333  0091                     	;# 
   334  0092                     	;# 
   335  0093                     	;# 
   336  0093                     	;# 
   337  0093                     	;# 
   338  0094                     	;# 
   339  0095                     	;# 
   340  0096                     	;# 
   341  0097                     	;# 
   342  0098                     	;# 
   343  0099                     	;# 
   344  009A                     	;# 
   345  009B                     	;# 
   346  009C                     	;# 
   347  009D                     	;# 
   348  009E                     	;# 
   349  009F                     	;# 
   350  0105                     	;# 
   351  0107                     	;# 
   352  0108                     	;# 
   353  0109                     	;# 
   354  010C                     	;# 
   355  010C                     	;# 
   356  010D                     	;# 
   357  010E                     	;# 
   358  010F                     	;# 
   359  0185                     	;# 
   360  0187                     	;# 
   361  0188                     	;# 
   362  0189                     	;# 
   363  018C                     	;# 
   364  018D                     	;# 
   365  0000                     	;# 
   366  0001                     	;# 
   367  0002                     	;# 
   368  0003                     	;# 
   369  0004                     	;# 
   370  0005                     	;# 
   371  0006                     	;# 
   372  0007                     	;# 
   373  0008                     	;# 
   374  0009                     	;# 
   375  000A                     	;# 
   376  000B                     	;# 
   377  000C                     	;# 
   378  000D                     	;# 
   379  000E                     	;# 
   380  000E                     	;# 
   381  000F                     	;# 
   382  0010                     	;# 
   383  0011                     	;# 
   384  0012                     	;# 
   385  0013                     	;# 
   386  0014                     	;# 
   387  0015                     	;# 
   388  0015                     	;# 
   389  0016                     	;# 
   390  0017                     	;# 
   391  0018                     	;# 
   392  0019                     	;# 
   393  001A                     	;# 
   394  001B                     	;# 
   395  001B                     	;# 
   396  001C                     	;# 
   397  001D                     	;# 
   398  001E                     	;# 
   399  001F                     	;# 
   400  0081                     	;# 
   401  0085                     	;# 
   402  0086                     	;# 
   403  0087                     	;# 
   404  0088                     	;# 
   405  0089                     	;# 
   406  008C                     	;# 
   407  008D                     	;# 
   408  008E                     	;# 
   409  008F                     	;# 
   410  0090                     	;# 
   411  0091                     	;# 
   412  0092                     	;# 
   413  0093                     	;# 
   414  0093                     	;# 
   415  0093                     	;# 
   416  0094                     	;# 
   417  0095                     	;# 
   418  0096                     	;# 
   419  0097                     	;# 
   420  0098                     	;# 
   421  0099                     	;# 
   422  009A                     	;# 
   423  009B                     	;# 
   424  009C                     	;# 
   425  009D                     	;# 
   426  009E                     	;# 
   427  009F                     	;# 
   428  0105                     	;# 
   429  0107                     	;# 
   430  0108                     	;# 
   431  0109                     	;# 
   432  010C                     	;# 
   433  010C                     	;# 
   434  010D                     	;# 
   435  010E                     	;# 
   436  010F                     	;# 
   437  0185                     	;# 
   438  0187                     	;# 
   439  0188                     	;# 
   440  0189                     	;# 
   441  018C                     	;# 
   442  018D                     	;# 
   443  0000                     	;# 
   444  0001                     	;# 
   445  0002                     	;# 
   446  0003                     	;# 
   447  0004                     	;# 
   448  0005                     	;# 
   449  0006                     	;# 
   450  0007                     	;# 
   451  0008                     	;# 
   452  0009                     	;# 
   453  000A                     	;# 
   454  000B                     	;# 
   455  000C                     	;# 
   456  000D                     	;# 
   457  000E                     	;# 
   458  000E                     	;# 
   459  000F                     	;# 
   460  0010                     	;# 
   461  0011                     	;# 
   462  0012                     	;# 
   463  0013                     	;# 
   464  0014                     	;# 
   465  0015                     	;# 
   466  0015                     	;# 
   467  0016                     	;# 
   468  0017                     	;# 
   469  0018                     	;# 
   470  0019                     	;# 
   471  001A                     	;# 
   472  001B                     	;# 
   473  001B                     	;# 
   474  001C                     	;# 
   475  001D                     	;# 
   476  001E                     	;# 
   477  001F                     	;# 
   478  0081                     	;# 
   479  0085                     	;# 
   480  0086                     	;# 
   481  0087                     	;# 
   482  0088                     	;# 
   483  0089                     	;# 
   484  008C                     	;# 
   485  008D                     	;# 
   486  008E                     	;# 
   487  008F                     	;# 
   488  0090                     	;# 
   489  0091                     	;# 
   490  0092                     	;# 
   491  0093                     	;# 
   492  0093                     	;# 
   493  0093                     	;# 
   494  0094                     	;# 
   495  0095                     	;# 
   496  0096                     	;# 
   497  0097                     	;# 
   498  0098                     	;# 
   499  0099                     	;# 
   500  009A                     	;# 
   501  009B                     	;# 
   502  009C                     	;# 
   503  009D                     	;# 
   504  009E                     	;# 
   505  009F                     	;# 
   506  0105                     	;# 
   507  0107                     	;# 
   508  0108                     	;# 
   509  0109                     	;# 
   510  010C                     	;# 
   511  010C                     	;# 
   512  010D                     	;# 
   513  010E                     	;# 
   514  010F                     	;# 
   515  0185                     	;# 
   516  0187                     	;# 
   517  0188                     	;# 
   518  0189                     	;# 
   519  018C                     	;# 
   520  018D                     	;# 
   521  0000                     	;# 
   522  0001                     	;# 
   523  0002                     	;# 
   524  0003                     	;# 
   525  0004                     	;# 
   526  0005                     	;# 
   527  0006                     	;# 
   528  0007                     	;# 
   529  0008                     	;# 
   530  0009                     	;# 
   531  000A                     	;# 
   532  000B                     	;# 
   533  000C                     	;# 
   534  000D                     	;# 
   535  000E                     	;# 
   536  000E                     	;# 
   537  000F                     	;# 
   538  0010                     	;# 
   539  0011                     	;# 
   540  0012                     	;# 
   541  0013                     	;# 
   542  0014                     	;# 
   543  0015                     	;# 
   544  0015                     	;# 
   545  0016                     	;# 
   546  0017                     	;# 
   547  0018                     	;# 
   548  0019                     	;# 
   549  001A                     	;# 
   550  001B                     	;# 
   551  001B                     	;# 
   552  001C                     	;# 
   553  001D                     	;# 
   554  001E                     	;# 
   555  001F                     	;# 
   556  0081                     	;# 
   557  0085                     	;# 
   558  0086                     	;# 
   559  0087                     	;# 
   560  0088                     	;# 
   561  0089                     	;# 
   562  008C                     	;# 
   563  008D                     	;# 
   564  008E                     	;# 
   565  008F                     	;# 
   566  0090                     	;# 
   567  0091                     	;# 
   568  0092                     	;# 
   569  0093                     	;# 
   570  0093                     	;# 
   571  0093                     	;# 
   572  0094                     	;# 
   573  0095                     	;# 
   574  0096                     	;# 
   575  0097                     	;# 
   576  0098                     	;# 
   577  0099                     	;# 
   578  009A                     	;# 
   579  009B                     	;# 
   580  009C                     	;# 
   581  009D                     	;# 
   582  009E                     	;# 
   583  009F                     	;# 
   584  0105                     	;# 
   585  0107                     	;# 
   586  0108                     	;# 
   587  0109                     	;# 
   588  010C                     	;# 
   589  010C                     	;# 
   590  010D                     	;# 
   591  010E                     	;# 
   592  010F                     	;# 
   593  0185                     	;# 
   594  0187                     	;# 
   595  0188                     	;# 
   596  0189                     	;# 
   597  018C                     	;# 
   598  018D                     	;# 
   599  0000                     	;# 
   600  0001                     	;# 
   601  0002                     	;# 
   602  0003                     	;# 
   603  0004                     	;# 
   604  0005                     	;# 
   605  0006                     	;# 
   606  0007                     	;# 
   607  0008                     	;# 
   608  0009                     	;# 
   609  000A                     	;# 
   610  000B                     	;# 
   611  000C                     	;# 
   612  000D                     	;# 
   613  000E                     	;# 
   614  000E                     	;# 
   615  000F                     	;# 
   616  0010                     	;# 
   617  0011                     	;# 
   618  0012                     	;# 
   619  0013                     	;# 
   620  0014                     	;# 
   621  0015                     	;# 
   622  0015                     	;# 
   623  0016                     	;# 
   624  0017                     	;# 
   625  0018                     	;# 
   626  0019                     	;# 
   627  001A                     	;# 
   628  001B                     	;# 
   629  001B                     	;# 
   630  001C                     	;# 
   631  001D                     	;# 
   632  001E                     	;# 
   633  001F                     	;# 
   634  0081                     	;# 
   635  0085                     	;# 
   636  0086                     	;# 
   637  0087                     	;# 
   638  0088                     	;# 
   639  0089                     	;# 
   640  008C                     	;# 
   641  008D                     	;# 
   642  008E                     	;# 
   643  008F                     	;# 
   644  0090                     	;# 
   645  0091                     	;# 
   646  0092                     	;# 
   647  0093                     	;# 
   648  0093                     	;# 
   649  0093                     	;# 
   650  0094                     	;# 
   651  0095                     	;# 
   652  0096                     	;# 
   653  0097                     	;# 
   654  0098                     	;# 
   655  0099                     	;# 
   656  009A                     	;# 
   657  009B                     	;# 
   658  009C                     	;# 
   659  009D                     	;# 
   660  009E                     	;# 
   661  009F                     	;# 
   662  0105                     	;# 
   663  0107                     	;# 
   664  0108                     	;# 
   665  0109                     	;# 
   666  010C                     	;# 
   667  010C                     	;# 
   668  010D                     	;# 
   669  010E                     	;# 
   670  010F                     	;# 
   671  0185                     	;# 
   672  0187                     	;# 
   673  0188                     	;# 
   674  0189                     	;# 
   675  018C                     	;# 
   676  018D                     	;# 
   677  0000                     	;# 
   678  0001                     	;# 
   679  0002                     	;# 
   680  0003                     	;# 
   681  0004                     	;# 
   682  0005                     	;# 
   683  0006                     	;# 
   684  0007                     	;# 
   685  0008                     	;# 
   686  0009                     	;# 
   687  000A                     	;# 
   688  000B                     	;# 
   689  000C                     	;# 
   690  000D                     	;# 
   691  000E                     	;# 
   692  000E                     	;# 
   693  000F                     	;# 
   694  0010                     	;# 
   695  0011                     	;# 
   696  0012                     	;# 
   697  0013                     	;# 
   698  0014                     	;# 
   699  0015                     	;# 
   700  0015                     	;# 
   701  0016                     	;# 
   702  0017                     	;# 
   703  0018                     	;# 
   704  0019                     	;# 
   705  001A                     	;# 
   706  001B                     	;# 
   707  001B                     	;# 
   708  001C                     	;# 
   709  001D                     	;# 
   710  001E                     	;# 
   711  001F                     	;# 
   712  0081                     	;# 
   713  0085                     	;# 
   714  0086                     	;# 
   715  0087                     	;# 
   716  0088                     	;# 
   717  0089                     	;# 
   718  008C                     	;# 
   719  008D                     	;# 
   720  008E                     	;# 
   721  008F                     	;# 
   722  0090                     	;# 
   723  0091                     	;# 
   724  0092                     	;# 
   725  0093                     	;# 
   726  0093                     	;# 
   727  0093                     	;# 
   728  0094                     	;# 
   729  0095                     	;# 
   730  0096                     	;# 
   731  0097                     	;# 
   732  0098                     	;# 
   733  0099                     	;# 
   734  009A                     	;# 
   735  009B                     	;# 
   736  009C                     	;# 
   737  009D                     	;# 
   738  009E                     	;# 
   739  009F                     	;# 
   740  0105                     	;# 
   741  0107                     	;# 
   742  0108                     	;# 
   743  0109                     	;# 
   744  010C                     	;# 
   745  010C                     	;# 
   746  010D                     	;# 
   747  010E                     	;# 
   748  010F                     	;# 
   749  0185                     	;# 
   750  0187                     	;# 
   751  0188                     	;# 
   752  0189                     	;# 
   753  018C                     	;# 
   754  018D                     	;# 
   755  0000                     	;# 
   756  0001                     	;# 
   757  0002                     	;# 
   758  0003                     	;# 
   759  0004                     	;# 
   760  0005                     	;# 
   761  0006                     	;# 
   762  0007                     	;# 
   763  0008                     	;# 
   764  0009                     	;# 
   765  000A                     	;# 
   766  000B                     	;# 
   767  000C                     	;# 
   768  000D                     	;# 
   769  000E                     	;# 
   770  000E                     	;# 
   771  000F                     	;# 
   772  0010                     	;# 
   773  0011                     	;# 
   774  0012                     	;# 
   775  0013                     	;# 
   776  0014                     	;# 
   777  0015                     	;# 
   778  0015                     	;# 
   779  0016                     	;# 
   780  0017                     	;# 
   781  0018                     	;# 
   782  0019                     	;# 
   783  001A                     	;# 
   784  001B                     	;# 
   785  001B                     	;# 
   786  001C                     	;# 
   787  001D                     	;# 
   788  001E                     	;# 
   789  001F                     	;# 
   790  0081                     	;# 
   791  0085                     	;# 
   792  0086                     	;# 
   793  0087                     	;# 
   794  0088                     	;# 
   795  0089                     	;# 
   796  008C                     	;# 
   797  008D                     	;# 
   798  008E                     	;# 
   799  008F                     	;# 
   800  0090                     	;# 
   801  0091                     	;# 
   802  0092                     	;# 
   803  0093                     	;# 
   804  0093                     	;# 
   805  0093                     	;# 
   806  0094                     	;# 
   807  0095                     	;# 
   808  0096                     	;# 
   809  0097                     	;# 
   810  0098                     	;# 
   811  0099                     	;# 
   812  009A                     	;# 
   813  009B                     	;# 
   814  009C                     	;# 
   815  009D                     	;# 
   816  009E                     	;# 
   817  009F                     	;# 
   818  0105                     	;# 
   819  0107                     	;# 
   820  0108                     	;# 
   821  0109                     	;# 
   822  010C                     	;# 
   823  010C                     	;# 
   824  010D                     	;# 
   825  010E                     	;# 
   826  010F                     	;# 
   827  0185                     	;# 
   828  0187                     	;# 
   829  0188                     	;# 
   830  0189                     	;# 
   831  018C                     	;# 
   832  018D                     	;# 
   833                           
   834                           	psect	idataBANK1
   835  0866                     __pidataBANK1:	
   836                           
   837                           ;initializer for _CWTX_Nref
   838  0866  34A0               	retlw	160
   839  0867  3400               	retlw	0
   840                           
   841                           ;initializer for _FMRX_Nref
   842  0868  3400               	retlw	0
   843  0869  340A               	retlw	10
   844                           
   845                           ;initializer for _FMTX_Nref
   846  086A  3400               	retlw	0
   847  086B  340A               	retlw	10
   848                           
   849                           ;initializer for _CWTX_Nprg
   850  086C  3400               	retlw	0
   851  086D  3400               	retlw	0
   852  086E  3401               	retlw	1
   853  086F  3400               	retlw	0
   854  0870  3407               	retlw	7
   855  0871  3400               	retlw	0
   856  0872  3404               	retlw	4
   857  0873  3400               	retlw	0
   858  0874  3407               	retlw	7
   859  0875  3400               	retlw	0
   860                           
   861                           ;initializer for _FMTX_Nprg
   862  0876  3408               	retlw	8
   863  0877  3400               	retlw	0
   864  0878  3407               	retlw	7
   865  0879  3400               	retlw	0
   866  087A  3403               	retlw	3
   867  087B  3400               	retlw	0
   868  087C  3400               	retlw	0
   869  087D  3400               	retlw	0
   870  087E  3400               	retlw	0
   871  087F  3400               	retlw	0
   872                           
   873                           	psect	idataBANK2
   874  084D                     __pidataBANK2:	
   875                           
   876                           ;initializer for _eDataField
   877  084D  3448               	retlw	72
   878  084E  3465               	retlw	101
   879  084F  346C               	retlw	108
   880  0850  346C               	retlw	108
   881  0851  346F               	retlw	111
   882  0852  3421               	retlw	33
   883  0853  3420               	retlw	32
   884  0854  3449               	retlw	73
   885  0855  3427               	retlw	39
   886  0856  346D               	retlw	109
   887  0857  3420               	retlw	32
   888  0858  344F               	retlw	79
   889  0859  3472               	retlw	114
   890  085A  3469               	retlw	105
   891  085B  3467               	retlw	103
   892  085C  3461               	retlw	97
   893  085D  346D               	retlw	109
   894  085E  3469               	retlw	105
   895  085F  3453               	retlw	83
   896  0860  3461               	retlw	97
   897  0861  3474               	retlw	116
   898  0862  3431               	retlw	49
   899  0863  3421               	retlw	33
   900  0864  3421               	retlw	33
   901  0865  3400               	retlw	0
   902                           
   903                           	psect	idataBANK3
   904  089D                     __pidataBANK3:	
   905                           
   906                           ;initializer for main@F2008
   907  089D  3408               	retlw	8
   908  089E  3400               	retlw	0
   909  089F  3407               	retlw	7
   910  08A0  3400               	retlw	0
   911  08A1  3403               	retlw	3
   912  08A2  3400               	retlw	0
   913  08A3  3400               	retlw	0
   914  08A4  3400               	retlw	0
   915  08A5  3400               	retlw	0
   916  08A6  3400               	retlw	0
   917                           
   918                           ;initializer for main@F2010
   919  08A7  3400               	retlw	0
   920  08A8  3400               	retlw	0
   921  08A9  3401               	retlw	1
   922  08AA  3400               	retlw	0
   923  08AB  3407               	retlw	7
   924  08AC  3400               	retlw	0
   925  08AD  3404               	retlw	4
   926  08AE  3400               	retlw	0
   927  08AF  3407               	retlw	7
   928  08B0  3400               	retlw	0
   929                           
   930                           ;initializer for main@F2012
   931  08B1  3402               	retlw	2
   932  08B2  3400               	retlw	0
   933  08B3  3404               	retlw	4
   934  08B4  3400               	retlw	0
   935  08B5  3408               	retlw	8
   936  08B6  3400               	retlw	0
   937  08B7  3408               	retlw	8
   938  08B8  3400               	retlw	0
   939  08B9  3407               	retlw	7
   940  08BA  3400               	retlw	0
   941                           
   942                           ;initializer for _FMRX_Nprg
   943  08BB  3402               	retlw	2
   944  08BC  3400               	retlw	0
   945  08BD  3404               	retlw	4
   946  08BE  3400               	retlw	0
   947  08BF  3408               	retlw	8
   948  08C0  3400               	retlw	0
   949  08C1  3408               	retlw	8
   950  08C2  3400               	retlw	0
   951  08C3  3407               	retlw	7
   952  08C4  3400               	retlw	0
   953                           
   954                           	psect	strings
   955  0800                     __pstrings:	
   956  0800                     stringtab:	
   957  0800                     __stringtab:	
   958  0800                     stringcode:	
   959                           ;	String table - string pointers are 1 byte each
   960                           
   961  0800                     stringdir:	
   962  0800  3008               	movlw	high stringdir
   963  0801  008A               	movwf	10
   964  0802  0804               	movf	4,w
   965  0803  0A84               	incf	4,f
   966  0804  0782               	addwf	2,f
   967  0805                     __stringbase:	
   968  0805  3400               	retlw	0
   969  0806                     __end_of__stringtab:	
   970  0806                     _commandSize:	
   971  0806  3420               	retlw	32
   972  0807  3400               	retlw	0
   973  0808                     __end_of_commandSize:	
   974  000E                     _TMR1	set	14
   975  000B                     _INTCONbits	set	11
   976  000C                     _PIR1bits	set	12
   977  0005                     _PORTA	set	5
   978  0005                     _PORTAbits	set	5
   979  0006                     _PORTB	set	6
   980  0007                     _PORTC	set	7
   981  0007                     _PORTCbits	set	7
   982  0008                     _PORTD	set	8
   983  0008                     _PORTDbits	set	8
   984  0009                     _PORTE	set	9
   985  0009                     _PORTEbits	set	9
   986  001A                     _RCREG	set	26
   987  0013                     _SSPBUF	set	19
   988  0014                     _SSPCON	set	20
   989  0003                     _STATUS	set	3
   990  0010                     _T1CONbits	set	16
   991  0019                     _TXREG	set	25
   992  00C4                     _CREN	set	196
   993  00C2                     _FERR	set	194
   994  00C1                     _OERR	set	193
   995  0029                     _RA1	set	41
   996  0032                     _RB2	set	50
   997  0034                     _RB4	set	52
   998  0035                     _RB5	set	53
   999  003A                     _RC2	set	58
  1000  0065                     _RCIF	set	101
  1001  00C6                     _RX9	set	198
  1002  00C7                     _SPEN	set	199
  1003  00C5                     _SREN	set	197
  1004  0064                     _TXIF	set	100
  1005  008C                     _PIE1bits	set	140
  1006  0099                     _SPBRG	set	153
  1007  0093                     _SSPADD	set	147
  1008  0091                     _SSPCON2	set	145
  1009  0094                     _SSPSTAT	set	148
  1010  0085                     _TRISA	set	133
  1011  0086                     _TRISB	set	134
  1012  0087                     _TRISC	set	135
  1013  0088                     _TRISD	set	136
  1014  0089                     _TRISE	set	137
  1015  048D                     _ACKDT	set	1165
  1016  048C                     _ACKEN	set	1164
  1017  04C2                     _BRGH	set	1218
  1018  048A                     _PEN	set	1162
  1019  048B                     _RCEN	set	1163
  1020  0465                     _RCIE	set	1125
  1021  0489                     _RSEN	set	1161
  1022  0488                     _SEN	set	1160
  1023  04C4                     _SYNC	set	1220
  1024  04C6                     _TX9	set	1222
  1025  04C5                     _TXEN	set	1221
  1026  0464                     _TXIE	set	1124
  1027  0188                     _ANSEL	set	392
  1028  0189                     _ANSELH	set	393
  1029  0808                     STR_15:	
  1030  0808  3473               	retlw	115	;'s'
  1031  0809  3474               	retlw	116	;'t'
  1032  080A  3461               	retlw	97	;'a'
  1033  080B  3472               	retlw	114	;'r'
  1034  080C  3474               	retlw	116	;'t'
  1035  080D  340D               	retlw	13
  1036  080E  340A               	retlw	10
  1037  080F  3400               	retlw	0
  1038  0810                     STR_7:	
  1039  0810  344A               	retlw	74	;'J'
  1040  0811  3451               	retlw	81	;'Q'
  1041  0812  3431               	retlw	49	;'1'
  1042  0813  345A               	retlw	90	;'Z'
  1043  0814  3448               	retlw	72	;'H'
  1044  0815  3458               	retlw	88	;'X'
  1045  0816  3400               	retlw	0
  1046  0817                     STR_1:	
  1047  0817  344A               	retlw	74	;'J'
  1048  0818  3451               	retlw	81	;'Q'
  1049  0819  3431               	retlw	49	;'1'
  1050  081A  3459               	retlw	89	;'Y'
  1051  081B  3443               	retlw	67	;'C'
  1052  081C  345A               	retlw	90	;'Z'
  1053  081D  3400               	retlw	0
  1054  081E                     STR_16:	
  1055  081E  3425               	retlw	37	;'%'
  1056  081F  3463               	retlw	99	;'c'
  1057  0820  3400               	retlw	0
  1058  0810                     
  1059                           ; #config settings
  1060  0000                     
  1061                           	psect	cinit
  1062  07B3                     start_initialization:	
  1063  07B3                     __initialization:	
  1064                           
  1065                           ; Initialize objects allocated to BANK3
  1066  07B3  1783               	bsf	3,7	;select IRP bank2
  1067  07B4  30EA               	movlw	low (__pdataBANK3+40)
  1068  07B5  00FD               	movwf	btemp+-1
  1069  07B6  3008               	movlw	high __pidataBANK3
  1070  07B7  00FE               	movwf	btemp
  1071  07B8  309D               	movlw	low __pidataBANK3
  1072  07B9  00FF               	movwf	btemp+1
  1073  07BA  30C2               	movlw	low __pdataBANK3
  1074  07BB  0084               	movwf	4
  1075  07BC  160A  118A  27CA  120A  118A  	fcall	init_ram0
  1076                           
  1077                           ; Initialize objects allocated to BANK2
  1078  07C1  3059               	movlw	low (__pdataBANK2+25)
  1079  07C2  00FD               	movwf	btemp+-1
  1080  07C3  3008               	movlw	high __pidataBANK2
  1081  07C4  00FE               	movwf	btemp
  1082  07C5  304D               	movlw	low __pidataBANK2
  1083  07C6  00FF               	movwf	btemp+1
  1084  07C7  3040               	movlw	low __pdataBANK2
  1085  07C8  0084               	movwf	4
  1086  07C9  160A  118A  27CA  120A  118A  	fcall	init_ram0
  1087                           
  1088                           ; Initialize objects allocated to BANK1
  1089  07CE  1383               	bcf	3,7	;select IRP bank0
  1090  07CF  30DC               	movlw	low (__pdataBANK1+26)
  1091  07D0  00FD               	movwf	btemp+-1
  1092  07D1  3008               	movlw	high __pidataBANK1
  1093  07D2  00FE               	movwf	btemp
  1094  07D3  3066               	movlw	low __pidataBANK1
  1095  07D4  00FF               	movwf	btemp+1
  1096  07D5  30C2               	movlw	low __pdataBANK1
  1097  07D6  0084               	movwf	4
  1098  07D7  160A  118A  27CA  120A  118A  	fcall	init_ram0
  1099                           
  1100                           ; Clear objects allocated to BANK3
  1101  07DC  1783               	bsf	3,7	;select IRP bank2
  1102  07DD  3090               	movlw	low __pbssBANK3
  1103  07DE  0084               	movwf	4
  1104  07DF  30C2               	movlw	low (__pbssBANK3+50)
  1105  07E0  160A  118A  27B5  120A  118A  	fcall	clear_ram0
  1106                           
  1107                           ; Clear objects allocated to BANK2
  1108  07E5  3010               	movlw	low __pbssBANK2
  1109  07E6  0084               	movwf	4
  1110  07E7  3040               	movlw	low (__pbssBANK2+48)
  1111  07E8  160A  118A  27B5  120A  118A  	fcall	clear_ram0
  1112                           
  1113                           ; Clear objects allocated to BANK1
  1114  07ED  1383               	bcf	3,7	;select IRP bank0
  1115  07EE  30DC               	movlw	low __pbssBANK1
  1116  07EF  0084               	movwf	4
  1117  07F0  30E9               	movlw	low (__pbssBANK1+13)
  1118  07F1  160A  118A  27B5  120A  118A  	fcall	clear_ram0
  1119                           
  1120                           ; Clear objects allocated to BANK0
  1121  07F6  3066               	movlw	low __pbssBANK0
  1122  07F7  0084               	movwf	4
  1123  07F8  3070               	movlw	low (__pbssBANK0+10)
  1124  07F9  160A  118A  27B5   	fcall	clear_ram0
  1125  07FC                     end_of_initialization:	
  1126                           ;End of C runtime variable initialization code
  1127                           
  1128  07FC                     __end_of__initialization:	
  1129  07FC  0183               	clrf	3
  1130  07FD  120A  158A  2E02   	ljmp	_main	;jump to C main() function
  1131                           
  1132                           	psect	bssBANK0
  1133  0066                     __pbssBANK0:	
  1134  0066                     _dPacketnum:	
  1135  0066                     	ds	2
  1136  0068                     _eflag:	
  1137  0068                     	ds	2
  1138  006A                     _rcv_state:	
  1139  006A                     	ds	2
  1140  006C                     _dfcshi:	
  1141  006C                     	ds	1
  1142  006D                     _dfcslo:	
  1143  006D                     	ds	1
  1144  006E                     _efcshi:	
  1145  006E                     	ds	1
  1146  006F                     _efcslo:	
  1147  006F                     	ds	1
  1148                           
  1149                           	psect	bssBANK1
  1150  00DC                     __pbssBANK1:	
  1151  00DC                     _ePacket:	
  1152  00DC                     	ds	5
  1153  00E1                     _ebitstatus:	
  1154  00E1                     	ds	2
  1155  00E3                     _efcsflag:	
  1156  00E3                     	ds	2
  1157  00E5                     _estuff:	
  1158  00E5                     	ds	2
  1159  00E7                     getbit@oldbit:	
  1160  00E7                     	ds	2
  1161                           
  1162                           	psect	dataBANK1
  1163  00C2                     __pdataBANK1:	
  1164  00C2                     _CWTX_Nref:	
  1165  00C2                     	ds	2
  1166  00C4                     _FMRX_Nref:	
  1167  00C4                     	ds	2
  1168  00C6                     _FMTX_Nref:	
  1169  00C6                     	ds	2
  1170  00C8                     _CWTX_Nprg:	
  1171  00C8                     	ds	10
  1172  00D2                     _FMTX_Nprg:	
  1173  00D2                     	ds	10
  1174                           
  1175                           	psect	bssBANK3
  1176  0190                     __pbssBANK3:	
  1177  0190                     _dPacket:	
  1178  0190                     	ds	50
  1179                           
  1180                           	psect	dataBANK3
  1181  01C2                     __pdataBANK3:	
  1182  01C2                     main@F2008:	
  1183  01C2                     	ds	10
  1184  01CC                     main@F2010:	
  1185  01CC                     	ds	10
  1186  01D6                     main@F2012:	
  1187  01D6                     	ds	10
  1188  01E0                     _FMRX_Nprg:	
  1189  01E0                     	ds	10
  1190                           
  1191                           	psect	bssBANK2
  1192  0110                     __pbssBANK2:	
  1193  0110                     _EEPROMData:	
  1194  0110                     	ds	32
  1195  0130                     _dData:	
  1196  0130                     	ds	16
  1197                           
  1198                           	psect	dataBANK2
  1199  0140                     __pdataBANK2:	
  1200  0140                     _eDataField:	
  1201  0140                     	ds	25
  1202                           
  1203                           	psect	inittext
  1204  17C6                     init_fetch0:	
  1205                           ;	Called with low address in FSR and high address in W
  1206                           
  1207  17C6  087E               	movf	126,w
  1208  17C7  008A               	movwf	10
  1209  17C8  087F               	movf	127,w
  1210  17C9  0082               	movwf	2
  1211  17CA                     init_ram0:	
  1212                           ;Called with:
  1213                           ;	high address of idata address in btemp 
  1214                           ;	low address of idata address in btemp+1 
  1215                           ;	low address of data in FSR
  1216                           ;	high address + 1 of data in btemp-1
  1217                           
  1218  17CA  27C6  160A  118A   	fcall	init_fetch0
  1219  17CD  0080               	movwf	0
  1220  17CE  0A84               	incf	4,f
  1221  17CF  0804               	movf	4,w
  1222  17D0  067D               	xorwf	125,w
  1223  17D1  1903               	btfsc	3,2
  1224  17D2  3400               	retlw	0
  1225  17D3  0AFF               	incf	127,f
  1226  17D4  1903               	btfsc	3,2
  1227  17D5  0AFE               	incf	126,f
  1228  17D6  2FCA               	goto	init_ram0
  1229                           
  1230                           	psect	clrtext
  1231  17B5                     clear_ram0:	
  1232                           ;	Called with FSR containing the base address, and
  1233                           ;	W with the last address+1
  1234                           
  1235  17B5  0064               	clrwdt	;clear the watchdog before getting into this loop
  1236  17B6                     clrloop0:	
  1237  17B6  0180               	clrf	0	;clear RAM location pointed to by FSR
  1238  17B7  0A84               	incf	4,f	;increment pointer
  1239  17B8  0604               	xorwf	4,w	;XOR with final address
  1240  17B9  1903               	btfsc	3,2	;have we reached the end yet?
  1241  17BA  3400               	retlw	0	;all done for this memory range, return
  1242  17BB  0604               	xorwf	4,w	;XOR again to restore value
  1243  17BC  2FB6               	goto	clrloop0	;do the next byte
  1244                           
  1245                           	psect	cstackBANK1
  1246  00A0                     __pcstackBANK1:	
  1247  00A0                     main@FMTX_Nprg:	
  1248                           
  1249                           ; 10 bytes @ 0x0
  1250  00A0                     	ds	10
  1251  00AA                     main@CWTX_Nprg:	
  1252                           
  1253                           ; 10 bytes @ 0xA
  1254  00AA                     	ds	10
  1255  00B4                     main@FMRX_Nprg:	
  1256                           
  1257                           ; 10 bytes @ 0x14
  1258  00B4                     	ds	10
  1259  00BE                     main@NM_wad_header:	
  1260                           
  1261                           ; 1 bytes @ 0x1E
  1262  00BE                     	ds	1
  1263  00BF                     main@i:	
  1264                           
  1265                           ; 2 bytes @ 0x1F
  1266  00BF                     	ds	2
  1267  00C1                     main@dData:	
  1268                           
  1269                           ; 1 bytes @ 0x21
  1270  00C1                     	ds	1
  1271                           
  1272                           	psect	cstackCOMMON
  1273  0070                     __pcstackCOMMON:	
  1274  0070                     ??_Init_WDT:	
  1275  0070                     ?_Reset_EPS:	
  1276                           ; 1 bytes @ 0x0
  1277                           
  1278  0070                     ??_Reset_EPS:	
  1279                           ; 1 bytes @ 0x0
  1280                           
  1281  0070                     ?__NOP:	
  1282                           ; 1 bytes @ 0x0
  1283                           
  1284  0070                     ??__NOP:	
  1285                           ; 1 bytes @ 0x0
  1286                           
  1287  0070                     ?_Init_SERIAL:	
  1288                           ; 1 bytes @ 0x0
  1289                           
  1290  0070                     ??_Init_SERIAL:	
  1291                           ; 1 bytes @ 0x0
  1292                           
  1293  0070                     ?_putch:	
  1294                           ; 1 bytes @ 0x0
  1295                           
  1296  0070                     ??_putch:	
  1297                           ; 1 bytes @ 0x0
  1298                           
  1299  0070                     ?_Init_MPU:	
  1300                           ; 1 bytes @ 0x0
  1301                           
  1302  0070                     ??_Init_MPU:	
  1303                           ; 1 bytes @ 0x0
  1304                           
  1305  0070                     ?_waitFlag:	
  1306                           ; 1 bytes @ 0x0
  1307                           
  1308  0070                     ?_getdata:	
  1309                           ; 1 bytes @ 0x0
  1310                           
  1311  0070                     ?_ReceivePacket_data:	
  1312                           ; 1 bytes @ 0x0
  1313                           
  1314  0070                     ?_main:	
  1315                           ; 1 bytes @ 0x0
  1316                           
  1317  0070                     ?_I2C_Master_Wait:	
  1318                           ; 1 bytes @ 0x0
  1319                           
  1320  0070                     ??_I2C_Master_Wait:	
  1321                           ; 1 bytes @ 0x0
  1322                           
  1323  0070                     ?_I2C_Master_Start:	
  1324                           ; 1 bytes @ 0x0
  1325                           
  1326  0070                     ??_I2C_Master_Start:	
  1327                           ; 1 bytes @ 0x0
  1328                           
  1329  0070                     ?_I2C_Master_Stop:	
  1330                           ; 1 bytes @ 0x0
  1331                           
  1332  0070                     ??_I2C_Master_Stop:	
  1333                           ; 1 bytes @ 0x0
  1334                           
  1335  0070                     ?_I2C_Master_Write:	
  1336                           ; 1 bytes @ 0x0
  1337                           
  1338  0070                     ?_Init_WDT:	
  1339                           ; 1 bytes @ 0x0
  1340                           
  1341  0070                     ?_getbit:	
  1342                           ; 2 bytes @ 0x0
  1343                           
  1344  0070                     ?_fcscheck:	
  1345                           ; 2 bytes @ 0x0
  1346                           
  1347  0070                     ?___awdiv:	
  1348                           ; 2 bytes @ 0x0
  1349                           
  1350  0070                     ?___lldiv:	
  1351                           ; 2 bytes @ 0x0
  1352                           
  1353  0070                     putch@byte:	
  1354                           ; 4 bytes @ 0x0
  1355                           
  1356  0070                     I2C_Master_Write@d:	
  1357                           ; 1 bytes @ 0x0
  1358                           
  1359  0070                     __NOP@i:	
  1360                           ; 2 bytes @ 0x0
  1361                           
  1362  0070                     ___awdiv@divisor:	
  1363                           ; 2 bytes @ 0x0
  1364                           
  1365  0070                     ___lldiv@divisor:	
  1366                           ; 2 bytes @ 0x0
  1367                           
  1368                           
  1369                           ; 4 bytes @ 0x0
  1370  0070                     	ds	1
  1371  0071                     ?_NM_waddress:	
  1372  0071                     ?_printf:	
  1373                           ; 1 bytes @ 0x1
  1374                           
  1375  0071                     NM_waddress@whigh_address:	
  1376                           ; 2 bytes @ 0x1
  1377                           
  1378                           
  1379                           ; 1 bytes @ 0x1
  1380  0071                     	ds	1
  1381  0072                     ?_EEPROM_Write:	
  1382  0072                     ??_getbit:	
  1383                           ; 1 bytes @ 0x2
  1384                           
  1385  0072                     ??_fcscheck:	
  1386                           ; 1 bytes @ 0x2
  1387                           
  1388  0072                     ??_I2C_Master_Write:	
  1389                           ; 1 bytes @ 0x2
  1390                           
  1391  0072                     ?_L_OUT:	
  1392                           ; 1 bytes @ 0x2
  1393                           
  1394  0072                     ?_H_OUT:	
  1395                           ; 1 bytes @ 0x2
  1396                           
  1397  0072                     ?_STBOUT:	
  1398                           ; 1 bytes @ 0x2
  1399                           
  1400  0072                     NM_waddress@wlow_address:	
  1401                           ; 1 bytes @ 0x2
  1402                           
  1403  0072                     EEPROM_Write@high_address:	
  1404                           ; 1 bytes @ 0x2
  1405                           
  1406  0072                     L_OUT@fmcwtxrx:	
  1407                           ; 1 bytes @ 0x2
  1408                           
  1409  0072                     H_OUT@fmcwtxrx:	
  1410                           ; 2 bytes @ 0x2
  1411                           
  1412  0072                     STBOUT@fmcwtxrx:	
  1413                           ; 2 bytes @ 0x2
  1414                           
  1415  0072                     ___awdiv@dividend:	
  1416                           ; 2 bytes @ 0x2
  1417                           
  1418                           
  1419                           ; 2 bytes @ 0x2
  1420  0072                     	ds	1
  1421  0073                     ??_printf:	
  1422  0073                     ??_NM_waddress:	
  1423                           ; 1 bytes @ 0x3
  1424                           
  1425  0073                     NM_waddress@NM_wad_header:	
  1426                           ; 1 bytes @ 0x3
  1427                           
  1428  0073                     EEPROM_Write@low_address:	
  1429                           ; 1 bytes @ 0x3
  1430                           
  1431                           
  1432                           ; 1 bytes @ 0x3
  1433  0073                     	ds	1
  1434  0074                     ??_L_OUT:	
  1435  0074                     ??_H_OUT:	
  1436                           ; 1 bytes @ 0x4
  1437                           
  1438  0074                     ??_STBOUT:	
  1439                           ; 1 bytes @ 0x4
  1440                           
  1441  0074                     ?_OPINIT:	
  1442                           ; 1 bytes @ 0x4
  1443                           
  1444  0074                     ??___awdiv:	
  1445                           ; 1 bytes @ 0x4
  1446                           
  1447  0074                     fcscheck@bt:	
  1448                           ; 1 bytes @ 0x4
  1449                           
  1450  0074                     EEPROM_Write@data:	
  1451                           ; 1 bytes @ 0x4
  1452                           
  1453  0074                     printf@flag:	
  1454                           ; 1 bytes @ 0x4
  1455                           
  1456  0074                     getbit@i:	
  1457                           ; 1 bytes @ 0x4
  1458                           
  1459  0074                     OPINIT@fmcwtxrx:	
  1460                           ; 2 bytes @ 0x4
  1461                           
  1462  0074                     ___lldiv@dividend:	
  1463                           ; 2 bytes @ 0x4
  1464                           
  1465                           
  1466                           ; 4 bytes @ 0x4
  1467  0074                     	ds	1
  1468  0075                     ??_EEPROM_Write:	
  1469  0075                     printf@ap:	
  1470                           ; 1 bytes @ 0x5
  1471                           
  1472  0075                     ___awdiv@counter:	
  1473                           ; 1 bytes @ 0x5
  1474                           
  1475  0075                     fcscheck@i:	
  1476                           ; 1 bytes @ 0x5
  1477                           
  1478                           
  1479                           ; 2 bytes @ 0x5
  1480  0075                     	ds	1
  1481  0076                     ??_waitFlag:	
  1482  0076                     ??_getdata:	
  1483                           ; 1 bytes @ 0x6
  1484                           
  1485  0076                     ??_OPINIT:	
  1486                           ; 1 bytes @ 0x6
  1487                           
  1488  0076                     printf@f:	
  1489                           ; 1 bytes @ 0x6
  1490                           
  1491  0076                     ___awdiv@sign:	
  1492                           ; 1 bytes @ 0x6
  1493                           
  1494                           
  1495                           ; 1 bytes @ 0x6
  1496  0076                     	ds	1
  1497  0077                     printf@c:	
  1498  0077                     fcscheck@i_142:	
  1499                           ; 1 bytes @ 0x7
  1500                           
  1501  0077                     ___awdiv@quotient:	
  1502                           ; 2 bytes @ 0x7
  1503                           
  1504                           
  1505                           ; 2 bytes @ 0x7
  1506  0077                     	ds	1
  1507  0078                     ??___lldiv:	
  1508  0078                     EEPROM_Write@EEPROM_address:	
  1509                           ; 1 bytes @ 0x8
  1510                           
  1511                           
  1512                           ; 1 bytes @ 0x8
  1513  0078                     	ds	1
  1514  0079                     ?_OUTFQ:	
  1515  0079                     ?_RFDOUT:	
  1516                           ; 1 bytes @ 0x9
  1517                           
  1518  0079                     fcscheck@byte:	
  1519                           ; 1 bytes @ 0x9
  1520                           
  1521  0079                     EEPROM_Write@Address:	
  1522                           ; 1 bytes @ 0x9
  1523                           
  1524  0079                     OUTFQ@fmcwtxrx:	
  1525                           ; 1 bytes @ 0x9
  1526                           
  1527  0079                     RFDOUT@fmcwtxrx:	
  1528                           ; 2 bytes @ 0x9
  1529                           
  1530  0079                     ___lldiv@quotient:	
  1531                           ; 2 bytes @ 0x9
  1532                           
  1533                           
  1534                           ; 4 bytes @ 0x9
  1535  0079                     	ds	1
  1536  007A                     ??_ReceivePacket_data:	
  1537                           
  1538                           ; 1 bytes @ 0xA
  1539  007A                     	ds	1
  1540  007B                     OUTFQ@Nprg:	
  1541  007B                     RFDOUT@Nref:	
  1542                           ; 2 bytes @ 0xB
  1543                           
  1544                           
  1545                           ; 2 bytes @ 0xB
  1546  007B                     	ds	2
  1547  007D                     ??_FMTX:	
  1548  007D                     ??_CWTX:	
  1549                           ; 1 bytes @ 0xD
  1550                           
  1551  007D                     ??_FMRX:	
  1552                           ; 1 bytes @ 0xD
  1553                           
  1554  007D                     ___lldiv@counter:	
  1555                           ; 1 bytes @ 0xD
  1556                           
  1557                           
  1558                           ; 1 bytes @ 0xD
  1559  007D                     	ds	1
  1560                           
  1561                           	psect	cstackBANK0
  1562  0020                     __pcstackBANK0:	
  1563  0020                     ?_Init_I2C_M:	
  1564  0020                     ??_OUTFQ:	
  1565                           ; 1 bytes @ 0x0
  1566                           
  1567  0020                     ??_RFDOUT:	
  1568                           ; 1 bytes @ 0x0
  1569                           
  1570  0020                     waitFlag@i:	
  1571                           ; 1 bytes @ 0x0
  1572                           
  1573  0020                     getdata@bufstore_counter:	
  1574                           ; 2 bytes @ 0x0
  1575                           
  1576  0020                     Init_I2C_M@c:	
  1577                           ; 2 bytes @ 0x0
  1578                           
  1579                           
  1580                           ; 4 bytes @ 0x0
  1581  0020                     	ds	2
  1582  0022                     waitFlag@j:	
  1583  0022                     getdata@dstuff:	
  1584                           ; 2 bytes @ 0x2
  1585                           
  1586                           
  1587                           ; 2 bytes @ 0x2
  1588  0022                     	ds	1
  1589  0023                     RFDOUT@Nref_b:	
  1590                           
  1591                           ; 24 bytes @ 0x3
  1592  0023                     	ds	1
  1593  0024                     ??_Init_I2C_M:	
  1594  0024                     waitFlag@j_111:	
  1595                           ; 1 bytes @ 0x4
  1596                           
  1597  0024                     getdata@dbitstatus:	
  1598                           ; 2 bytes @ 0x4
  1599                           
  1600                           
  1601                           ; 2 bytes @ 0x4
  1602  0024                     	ds	2
  1603  0026                     getdata@buf:	
  1604  0026                     waitFlag@j_113:	
  1605                           ; 1 bytes @ 0x6
  1606                           
  1607                           
  1608                           ; 2 bytes @ 0x6
  1609  0026                     	ds	2
  1610  0028                     waitFlag@j_115:	
  1611                           
  1612                           ; 2 bytes @ 0x8
  1613  0028                     	ds	2
  1614  002A                     waitFlag@j_117:	
  1615                           
  1616                           ; 2 bytes @ 0xA
  1617  002A                     	ds	2
  1618  002C                     waitFlag@j_119:	
  1619                           
  1620                           ; 2 bytes @ 0xC
  1621  002C                     	ds	2
  1622  002E                     waitFlag@j_120:	
  1623                           
  1624                           ; 2 bytes @ 0xE
  1625  002E                     	ds	2
  1626  0030                     waitFlag@j_122:	
  1627  0030                     OUTFQ@Nprg_b:	
  1628                           ; 2 bytes @ 0x10
  1629                           
  1630                           
  1631                           ; 34 bytes @ 0x10
  1632  0030                     	ds	2
  1633  0032                     waitFlag@j_124:	
  1634                           
  1635                           ; 2 bytes @ 0x12
  1636  0032                     	ds	2
  1637  0034                     waitFlag@j_126:	
  1638                           
  1639                           ; 2 bytes @ 0x14
  1640  0034                     	ds	2
  1641  0036                     waitFlag@j_128:	
  1642                           
  1643                           ; 2 bytes @ 0x16
  1644  0036                     	ds	2
  1645  0038                     waitFlag@j_130:	
  1646                           
  1647                           ; 2 bytes @ 0x18
  1648  0038                     	ds	2
  1649  003A                     waitFlag@flag_judge:	
  1650                           
  1651                           ; 2 bytes @ 0x1A
  1652  003A                     	ds	1
  1653  003B                     RFDOUT@i_478:	
  1654                           
  1655                           ; 2 bytes @ 0x1B
  1656  003B                     	ds	1
  1657  003C                     waitFlag@buf:	
  1658                           
  1659                           ; 1 bytes @ 0x1C
  1660  003C                     	ds	1
  1661  003D                     ReceivePacket_data@fcschecker:	
  1662  003D                     RFDOUT@i:	
  1663                           ; 2 bytes @ 0x1D
  1664                           
  1665                           
  1666                           ; 2 bytes @ 0x1D
  1667  003D                     	ds	2
  1668  003F                     ReceivePacket_data@i:	
  1669  003F                     RFDOUT@i_479:	
  1670                           ; 2 bytes @ 0x1F
  1671                           
  1672                           
  1673                           ; 2 bytes @ 0x1F
  1674  003F                     	ds	19
  1675  0052                     OUTFQ@i_467:	
  1676                           
  1677                           ; 2 bytes @ 0x32
  1678  0052                     	ds	2
  1679  0054                     OUTFQ@count:	
  1680                           
  1681                           ; 2 bytes @ 0x34
  1682  0054                     	ds	2
  1683  0056                     OUTFQ@i:	
  1684                           
  1685                           ; 2 bytes @ 0x36
  1686  0056                     	ds	2
  1687  0058                     OUTFQ@i_469:	
  1688                           
  1689                           ; 2 bytes @ 0x38
  1690  0058                     	ds	2
  1691  005A                     OUTFQ@j:	
  1692                           
  1693                           ; 2 bytes @ 0x3A
  1694  005A                     	ds	2
  1695  005C                     ?_FMTX:	
  1696  005C                     ?_CWTX:	
  1697                           ; 1 bytes @ 0x3C
  1698                           
  1699  005C                     ?_FMRX:	
  1700                           ; 1 bytes @ 0x3C
  1701                           
  1702  005C                     FMTX@Nref:	
  1703                           ; 1 bytes @ 0x3C
  1704                           
  1705  005C                     CWTX@Nref:	
  1706                           ; 2 bytes @ 0x3C
  1707                           
  1708  005C                     FMRX@Nref:	
  1709                           ; 2 bytes @ 0x3C
  1710                           
  1711                           
  1712                           ; 2 bytes @ 0x3C
  1713  005C                     	ds	2
  1714  005E                     FMTX@Nprg:	
  1715  005E                     CWTX@Nprg:	
  1716                           ; 2 bytes @ 0x3E
  1717                           
  1718  005E                     FMRX@Nprg:	
  1719                           ; 2 bytes @ 0x3E
  1720                           
  1721                           
  1722                           ; 2 bytes @ 0x3E
  1723  005E                     	ds	2
  1724  0060                     FMTX@fmtx:	
  1725  0060                     CWTX@cwtx:	
  1726                           ; 2 bytes @ 0x40
  1727                           
  1728  0060                     FMRX@fmrx:	
  1729                           ; 2 bytes @ 0x40
  1730                           
  1731                           
  1732                           ; 2 bytes @ 0x40
  1733  0060                     	ds	2
  1734  0062                     ??_main:	
  1735                           
  1736                           ; 1 bytes @ 0x42
  1737  0062                     	ds	4
  1738                           
  1739                           	psect	maintext
  1740  0E02                     __pmaintext:	
  1741 ;;
  1742 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1743 ;;
  1744 ;; *************** function _main *****************
  1745 ;; Defined at:
  1746 ;;		line 38 in file "main.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;		None
  1749 ;; Auto vars:     Size  Location     Type
  1750 ;;  FMRX_Nprg      10   20[BANK1 ] int [5]
  1751 ;;  CWTX_Nprg      10   10[BANK1 ] int [5]
  1752 ;;  FMTX_Nprg      10    0[BANK1 ] int [5]
  1753 ;;  NM_wad_heade    1   30[BANK1 ] unsigned char 
  1754 ;;  i               2   31[BANK1 ] unsigned int 
  1755 ;;  dData           1   33[BANK1 ] PTR unsigned char 
  1756 ;;		 -> NULL(0), dData(16), 
  1757 ;; Return value:  Size  Location     Type
  1758 ;;                  1    wreg      void 
  1759 ;; Registers used:
  1760 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1761 ;; Tracked objects:
  1762 ;;		On entry : B00/0
  1763 ;;		On exit  : 0/0
  1764 ;;		Unchanged: 0/0
  1765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1766 ;;      Params:         0       0       0       0       0
  1767 ;;      Locals:         0       0      34       0       0
  1768 ;;      Temps:          0       4       0       0       0
  1769 ;;      Totals:         0       4      34       0       0
  1770 ;;Total ram usage:       38 bytes
  1771 ;; Hardware stack levels required when called:    4
  1772 ;; This function calls:
  1773 ;;		_CWTX
  1774 ;;		_EEPROM_Write
  1775 ;;		_FMRX
  1776 ;;		_FMTX
  1777 ;;		_Init_I2C_M
  1778 ;;		_Init_MPU
  1779 ;;		_Init_SERIAL
  1780 ;;		_Init_WDT
  1781 ;;		_NM_waddress
  1782 ;;		_ReceivePacket_data
  1783 ;;		_Reset_EPS
  1784 ;;		_printf
  1785 ;; This function is called by:
  1786 ;;		Startup code after reset
  1787 ;; This function uses a non-reentrant model
  1788 ;;
  1789                           
  1790                           
  1791                           ;psect for function _main
  1792  0E02                     _main:	
  1793                           
  1794                           ;main.c: 43: _delay((unsigned long)((500)*(10000000/4000.0)));
  1795                           
  1796                           ;incstack = 0
  1797                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1798  0E02  3007               	movlw	7
  1799  0E03  1283               	bcf	3,5	;RP0=0, select bank0
  1800  0E04  1303               	bcf	3,6	;RP1=0, select bank0
  1801  0E05  00E4               	movwf	??_main+2
  1802  0E06  3058               	movlw	88
  1803  0E07  00E3               	movwf	??_main+1
  1804  0E08  305E               	movlw	94
  1805  0E09  00E2               	movwf	??_main
  1806  0E0A                     u3627:	
  1807  0E0A  0BE2               	decfsz	??_main,f
  1808  0E0B  2E0A               	goto	u3627
  1809  0E0C  0BE3               	decfsz	??_main+1,f
  1810  0E0D  2E0A               	goto	u3627
  1811  0E0E  0BE4               	decfsz	??_main+2,f
  1812  0E0F  2E0A               	goto	u3627
  1813  0E10  2E11               	nop2
  1814                           
  1815                           ;main.c: 45: Init_SERIAL();
  1816  0E11  120A  158A  2034  120A  158A  	fcall	_Init_SERIAL
  1817                           
  1818                           ;main.c: 46: Init_MPU();
  1819  0E16  120A  158A  2080  120A  158A  	fcall	_Init_MPU
  1820                           
  1821                           ;main.c: 47: Init_I2C_M(400000);
  1822  0E1B  3000               	movlw	0
  1823  0E1C  1283               	bcf	3,5	;RP0=0, select bank0
  1824  0E1D  1303               	bcf	3,6	;RP1=0, select bank0
  1825  0E1E  00A3               	movwf	Init_I2C_M@c+3
  1826  0E1F  3006               	movlw	6
  1827  0E20  00A2               	movwf	Init_I2C_M@c+2
  1828  0E21  301A               	movlw	26
  1829  0E22  00A1               	movwf	Init_I2C_M@c+1
  1830  0E23  3080               	movlw	128
  1831  0E24  00A0               	movwf	Init_I2C_M@c
  1832  0E25  120A  158A  2177  120A  158A  	fcall	_Init_I2C_M
  1833                           
  1834                           ;main.c: 48: Init_WDT();
  1835  0E2A  160A  118A  27D7  120A  158A  	fcall	_Init_WDT
  1836                           
  1837                           ;main.c: 53: RB2 = 1;
  1838  0E2F  1283               	bcf	3,5	;RP0=0, select bank0
  1839  0E30  1303               	bcf	3,6	;RP1=0, select bank0
  1840  0E31  1506               	bsf	6,2	;volatile
  1841                           
  1842                           ;main.c: 54: _delay((unsigned long)((500)*(10000000/4000.0)));
  1843  0E32  3007               	movlw	7
  1844  0E33  00E4               	movwf	??_main+2
  1845  0E34  3058               	movlw	88
  1846  0E35  00E3               	movwf	??_main+1
  1847  0E36  305E               	movlw	94
  1848  0E37  00E2               	movwf	??_main
  1849  0E38                     u3637:	
  1850  0E38  0BE2               	decfsz	??_main,f
  1851  0E39  2E38               	goto	u3637
  1852  0E3A  0BE3               	decfsz	??_main+1,f
  1853  0E3B  2E38               	goto	u3637
  1854  0E3C  0BE4               	decfsz	??_main+2,f
  1855  0E3D  2E38               	goto	u3637
  1856  0E3E  2E3F               	nop2
  1857                           
  1858                           ;main.c: 56: FMTX(FMTX_Nref, FMTX_Nprg);
  1859  0E3F  1683               	bsf	3,5	;RP0=1, select bank1
  1860  0E40  1303               	bcf	3,6	;RP1=0, select bank1
  1861  0E41  0847               	movf	(_FMTX_Nref+1)^(0+128),w
  1862  0E42  1283               	bcf	3,5	;RP0=0, select bank0
  1863  0E43  1303               	bcf	3,6	;RP1=0, select bank0
  1864  0E44  00DD               	movwf	FMTX@Nref+1
  1865  0E45  1683               	bsf	3,5	;RP0=1, select bank1
  1866  0E46  1303               	bcf	3,6	;RP1=0, select bank1
  1867  0E47  0846               	movf	_FMTX_Nref^(0+128),w
  1868  0E48  1283               	bcf	3,5	;RP0=0, select bank0
  1869  0E49  1303               	bcf	3,6	;RP1=0, select bank0
  1870  0E4A  00DC               	movwf	FMTX@Nref
  1871  0E4B  30D2               	movlw	(low (_FMTX_Nprg| 0))& (0+255)
  1872  0E4C  00DE               	movwf	FMTX@Nprg
  1873  0E4D  3000               	movlw	0
  1874  0E4E  00DF               	movwf	FMTX@Nprg+1
  1875  0E4F  120A  158A  211D  120A  158A  	fcall	_FMTX
  1876                           
  1877                           ;main.c: 57: CWTX(CWTX_Nref, CWTX_Nprg);
  1878  0E54  1683               	bsf	3,5	;RP0=1, select bank1
  1879  0E55  1303               	bcf	3,6	;RP1=0, select bank1
  1880  0E56  0843               	movf	(_CWTX_Nref+1)^(0+128),w
  1881  0E57  1283               	bcf	3,5	;RP0=0, select bank0
  1882  0E58  1303               	bcf	3,6	;RP1=0, select bank0
  1883  0E59  00DD               	movwf	CWTX@Nref+1
  1884  0E5A  1683               	bsf	3,5	;RP0=1, select bank1
  1885  0E5B  1303               	bcf	3,6	;RP1=0, select bank1
  1886  0E5C  0842               	movf	_CWTX_Nref^(0+128),w
  1887  0E5D  1283               	bcf	3,5	;RP0=0, select bank0
  1888  0E5E  1303               	bcf	3,6	;RP1=0, select bank0
  1889  0E5F  00DC               	movwf	CWTX@Nref
  1890  0E60  30C8               	movlw	(low (_CWTX_Nprg| 0))& (0+255)
  1891  0E61  00DE               	movwf	CWTX@Nprg
  1892  0E62  3000               	movlw	0
  1893  0E63  00DF               	movwf	CWTX@Nprg+1
  1894  0E64  120A  158A  20C5  120A  158A  	fcall	_CWTX
  1895                           
  1896                           ;main.c: 58: FMRX(FMRX_Nref, FMRX_Nprg);
  1897  0E69  1683               	bsf	3,5	;RP0=1, select bank1
  1898  0E6A  1303               	bcf	3,6	;RP1=0, select bank1
  1899  0E6B  0845               	movf	(_FMRX_Nref+1)^(0+128),w
  1900  0E6C  1283               	bcf	3,5	;RP0=0, select bank0
  1901  0E6D  1303               	bcf	3,6	;RP1=0, select bank0
  1902  0E6E  00DD               	movwf	FMRX@Nref+1
  1903  0E6F  1683               	bsf	3,5	;RP0=1, select bank1
  1904  0E70  1303               	bcf	3,6	;RP1=0, select bank1
  1905  0E71  0844               	movf	_FMRX_Nref^(0+128),w
  1906  0E72  1283               	bcf	3,5	;RP0=0, select bank0
  1907  0E73  1303               	bcf	3,6	;RP1=0, select bank0
  1908  0E74  00DC               	movwf	FMRX@Nref
  1909  0E75  30E0               	movlw	(low (_FMRX_Nprg| (0+256)))& (0+255)
  1910  0E76  00DE               	movwf	FMRX@Nprg
  1911  0E77  3001               	movlw	1
  1912  0E78  00DF               	movwf	FMRX@Nprg+1
  1913  0E79  120A  158A  20F1  120A  158A  	fcall	_FMRX
  1914                           
  1915                           ;main.c: 59: RB2 = 0;
  1916  0E7E  1283               	bcf	3,5	;RP0=0, select bank0
  1917  0E7F  1303               	bcf	3,6	;RP1=0, select bank0
  1918  0E80  1106               	bcf	6,2	;volatile
  1919                           
  1920                           ;main.c: 60: printf("start\r\n");
  1921  0E81  3003               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1922  0E82  120A  158A  2237  120A  158A  	fcall	_printf
  1923                           
  1924                           ;main.c: 61: RA1 = 0;
  1925  0E87  1283               	bcf	3,5	;RP0=0, select bank0
  1926  0E88  1303               	bcf	3,6	;RP1=0, select bank0
  1927  0E89  1085               	bcf	5,1	;volatile
  1928  0E8A                     l3817:	
  1929                           ;main.c: 62: while(1){
  1930                           
  1931                           
  1932                           ;main.c: 77: UBYTE *dData;
  1933                           ;main.c: 78: dData = ReceivePacket_data();
  1934  0E8A  120A  158A  243F  120A  158A  	fcall	_ReceivePacket_data
  1935  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  1936  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  1937  0E91  00E2               	movwf	??_main
  1938  0E92  0862               	movf	??_main,w
  1939  0E93  1683               	bsf	3,5	;RP0=1, select bank1
  1940  0E94  1303               	bcf	3,6	;RP1=0, select bank1
  1941  0E95  00C1               	movwf	main@dData^(0+128)
  1942                           
  1943                           ;main.c: 79: RB2 = 1;
  1944  0E96  1283               	bcf	3,5	;RP0=0, select bank0
  1945  0E97  1303               	bcf	3,6	;RP1=0, select bank0
  1946  0E98  1506               	bsf	6,2	;volatile
  1947                           
  1948                           ;main.c: 80: _delay((unsigned long)((500)*(10000000/4000.0)));
  1949  0E99  3007               	movlw	7
  1950  0E9A  00E4               	movwf	??_main+2
  1951  0E9B  3058               	movlw	88
  1952  0E9C  00E3               	movwf	??_main+1
  1953  0E9D  305E               	movlw	94
  1954  0E9E  00E2               	movwf	??_main
  1955  0E9F                     u3647:	
  1956  0E9F  0BE2               	decfsz	??_main,f
  1957  0EA0  2E9F               	goto	u3647
  1958  0EA1  0BE3               	decfsz	??_main+1,f
  1959  0EA2  2E9F               	goto	u3647
  1960  0EA3  0BE4               	decfsz	??_main+2,f
  1961  0EA4  2E9F               	goto	u3647
  1962  0EA5  2EA6               	nop2
  1963                           
  1964                           ;main.c: 81: RB2 = 0;
  1965  0EA6  1283               	bcf	3,5	;RP0=0, select bank0
  1966  0EA7  1303               	bcf	3,6	;RP1=0, select bank0
  1967  0EA8  1106               	bcf	6,2	;volatile
  1968                           
  1969                           ;main.c: 84: EEPROM_Write(0x50,0x00,0x00,dData);
  1970  0EA9  01F2               	clrf	EEPROM_Write@high_address
  1971  0EAA  01F3               	clrf	EEPROM_Write@low_address
  1972  0EAB  1683               	bsf	3,5	;RP0=1, select bank1
  1973  0EAC  1303               	bcf	3,6	;RP1=0, select bank1
  1974  0EAD  0841               	movf	main@dData^(0+128),w
  1975  0EAE  1283               	bcf	3,5	;RP0=0, select bank0
  1976  0EAF  1303               	bcf	3,6	;RP1=0, select bank0
  1977  0EB0  00E2               	movwf	??_main
  1978  0EB1  0862               	movf	??_main,w
  1979  0EB2  00F4               	movwf	EEPROM_Write@data
  1980  0EB3  3050               	movlw	80
  1981  0EB4  120A  158A  2323  120A  158A  	fcall	_EEPROM_Write
  1982                           
  1983                           ;main.c: 86: for (UINT i = 0;i < 32;i++){
  1984  0EB9  1683               	bsf	3,5	;RP0=1, select bank1
  1985  0EBA  1303               	bcf	3,6	;RP1=0, select bank1
  1986  0EBB  01BF               	clrf	main@i^(0+128)
  1987  0EBC  01C0               	clrf	(main@i+1)^(0+128)
  1988  0EBD  3000               	movlw	0
  1989  0EBE  0240               	subwf	(main@i+1)^(0+128),w
  1990  0EBF  3020               	movlw	32
  1991  0EC0  1903               	skipnz
  1992  0EC1  023F               	subwf	main@i^(0+128),w
  1993  0EC2  1803               	btfsc	3,0
  1994  0EC3  2EF3               	goto	l3839
  1995  0EC4                     l3831:	
  1996                           
  1997                           ;main.c: 87: printf("%c", dData[i]);
  1998  0EC4  083F               	movf	main@i^(0+128),w
  1999  0EC5  0741               	addwf	main@dData^(0+128),w
  2000  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  2001  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  2002  0EC8  00E2               	movwf	??_main
  2003  0EC9  0862               	movf	??_main,w
  2004  0ECA  0084               	movwf	4
  2005  0ECB  1783               	bsf	3,7	;select IRP bank2
  2006  0ECC  0800               	movf	0,w
  2007  0ECD  00E3               	movwf	??_main+1
  2008  0ECE  01E4               	clrf	??_main+2
  2009  0ECF  0863               	movf	??_main+1,w
  2010  0ED0  00F1               	movwf	?_printf
  2011  0ED1  0864               	movf	??_main+2,w
  2012  0ED2  00F2               	movwf	?_printf+1
  2013  0ED3  3019               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  2014  0ED4  120A  158A  2237  120A  158A  	fcall	_printf
  2015                           
  2016                           ;main.c: 88: dData[i] = 0x00;
  2017  0ED9  1683               	bsf	3,5	;RP0=1, select bank1
  2018  0EDA  1303               	bcf	3,6	;RP1=0, select bank1
  2019  0EDB  083F               	movf	main@i^(0+128),w
  2020  0EDC  0741               	addwf	main@dData^(0+128),w
  2021  0EDD  1283               	bcf	3,5	;RP0=0, select bank0
  2022  0EDE  1303               	bcf	3,6	;RP1=0, select bank0
  2023  0EDF  00E2               	movwf	??_main
  2024  0EE0  0862               	movf	??_main,w
  2025  0EE1  0084               	movwf	4
  2026  0EE2  1783               	bsf	3,7	;select IRP bank2
  2027  0EE3  0180               	clrf	0
  2028  0EE4  3001               	movlw	1
  2029  0EE5  1683               	bsf	3,5	;RP0=1, select bank1
  2030  0EE6  1303               	bcf	3,6	;RP1=0, select bank1
  2031  0EE7  07BF               	addwf	main@i^(0+128),f
  2032  0EE8  1803               	skipnc
  2033  0EE9  0AC0               	incf	(main@i+1)^(0+128),f
  2034  0EEA  3000               	movlw	0
  2035  0EEB  07C0               	addwf	(main@i+1)^(0+128),f
  2036  0EEC  3000               	movlw	0
  2037  0EED  0240               	subwf	(main@i+1)^(0+128),w
  2038  0EEE  3020               	movlw	32
  2039  0EEF  1903               	skipnz
  2040  0EF0  023F               	subwf	main@i^(0+128),w
  2041  0EF1  1C03               	skipc
  2042  0EF2  2EC4               	goto	l3831
  2043  0EF3                     l3839:	
  2044                           
  2045                           ;main.c: 89: }
  2046                           ;main.c: 95: if(dData[0]=='n'){
  2047  0EF3  0841               	movf	main@dData^(0+128),w
  2048  0EF4  0084               	movwf	4
  2049  0EF5  306E               	movlw	110
  2050  0EF6  1783               	bsf	3,7	;select IRP bank2
  2051  0EF7  0600               	xorwf	0,w
  2052  0EF8  1D03               	btfss	3,2
  2053  0EF9  2F0B               	goto	l3845
  2054                           
  2055                           ;main.c: 97: UBYTE NM_wad_header = 0x72;
  2056  0EFA  3072               	movlw	114
  2057  0EFB  1283               	bcf	3,5	;RP0=0, select bank0
  2058  0EFC  1303               	bcf	3,6	;RP1=0, select bank0
  2059  0EFD  00E2               	movwf	??_main
  2060  0EFE  0862               	movf	??_main,w
  2061  0EFF  1683               	bsf	3,5	;RP0=1, select bank1
  2062  0F00  1303               	bcf	3,6	;RP1=0, select bank1
  2063  0F01  00BE               	movwf	main@NM_wad_header^(0+128)
  2064                           
  2065                           ;main.c: 98: NM_waddress(NM_wad_header, 0x00, 0x00);
  2066  0F02  01F1               	clrf	NM_waddress@whigh_address
  2067  0F03  01F2               	clrf	NM_waddress@wlow_address
  2068  0F04  083E               	movf	main@NM_wad_header^(0+128),w
  2069  0F05  120A  158A  2022  120A  158A  	fcall	_NM_waddress
  2070                           
  2071                           ;main.c: 100: }else if(dData[0]=='p'){
  2072  0F0A  2FF0               	goto	l3881
  2073  0F0B                     l3845:	
  2074  0F0B  1683               	bsf	3,5	;RP0=1, select bank1
  2075  0F0C  1303               	bcf	3,6	;RP1=0, select bank1
  2076  0F0D  0841               	movf	main@dData^(0+128),w
  2077  0F0E  0084               	movwf	4
  2078  0F0F  3070               	movlw	112
  2079  0F10  1783               	bsf	3,7	;select IRP bank2
  2080  0F11  0600               	xorwf	0,w
  2081  0F12  1D03               	btfss	3,2
  2082  0F13  2FF0               	goto	l3881
  2083                           
  2084                           ;main.c: 102: RB2 = 1;
  2085  0F14  1283               	bcf	3,5	;RP0=0, select bank0
  2086  0F15  1303               	bcf	3,6	;RP1=0, select bank0
  2087  0F16  1506               	bsf	6,2	;volatile
  2088                           
  2089                           ;main.c: 103: _delay((unsigned long)((500)*(10000000/4000.0)));
  2090  0F17  3007               	movlw	7
  2091  0F18  00E4               	movwf	??_main+2
  2092  0F19  3058               	movlw	88
  2093  0F1A  00E3               	movwf	??_main+1
  2094  0F1B  305E               	movlw	94
  2095  0F1C  00E2               	movwf	??_main
  2096  0F1D                     u3657:	
  2097  0F1D  0BE2               	decfsz	??_main,f
  2098  0F1E  2F1D               	goto	u3657
  2099  0F1F  0BE3               	decfsz	??_main+1,f
  2100  0F20  2F1D               	goto	u3657
  2101  0F21  0BE4               	decfsz	??_main+2,f
  2102  0F22  2F1D               	goto	u3657
  2103  0F23  2F24               	nop2
  2104                           
  2105                           ;main.c: 104: RB2 = 0;
  2106  0F24  1283               	bcf	3,5	;RP0=0, select bank0
  2107  0F25  1303               	bcf	3,6	;RP1=0, select bank0
  2108  0F26  1106               	bcf	6,2	;volatile
  2109                           
  2110                           ;main.c: 105: if(dData[2] == 'r'){
  2111  0F27  1683               	bsf	3,5	;RP0=1, select bank1
  2112  0F28  1303               	bcf	3,6	;RP1=0, select bank1
  2113  0F29  0841               	movf	main@dData^(0+128),w
  2114  0F2A  3E02               	addlw	2
  2115  0F2B  0084               	movwf	4
  2116  0F2C  3072               	movlw	114
  2117  0F2D  1783               	bsf	3,7	;select IRP bank2
  2118  0F2E  0600               	xorwf	0,w
  2119  0F2F  1903               	btfsc	3,2
  2120  0F30  2FD9               	goto	l3877
  2121  0F31  2FF0               	goto	l3881
  2122  0F32                     l3857:	
  2123                           ;main.c: 111: case 'E':
  2124                           
  2125                           ;main.c: 110: switch(dData[3]){
  2126                           
  2127                           
  2128                           ;main.c: 116: Reset_EPS();
  2129  0F32  120A  118A  2007  120A  158A  	fcall	_Reset_EPS
  2130                           
  2131                           ;main.c: 117: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2132  0F37  3040               	movlw	64
  2133  0F38  1283               	bcf	3,5	;RP0=0, select bank0
  2134  0F39  1303               	bcf	3,6	;RP1=0, select bank0
  2135  0F3A  00E4               	movwf	??_main+2
  2136  0F3B  306A               	movlw	106
  2137  0F3C  00E3               	movwf	??_main+1
  2138  0F3D  30D5               	movlw	213
  2139  0F3E  00E2               	movwf	??_main
  2140  0F3F                     u3667:	
  2141  0F3F  0BE2               	decfsz	??_main,f
  2142  0F40  2F3F               	goto	u3667
  2143  0F41  0BE3               	decfsz	??_main+1,f
  2144  0F42  2F3F               	goto	u3667
  2145  0F43  0BE4               	decfsz	??_main+2,f
  2146  0F44  2F3F               	goto	u3667
  2147  0F45  2F46               	nop2
  2148                           
  2149                           ;main.c: 120: int FMTX_Nprg[5] = {8,7,3,0,0};
  2150  0F46  30A0               	movlw	main@FMTX_Nprg& (0+255)
  2151  0F47  0084               	movwf	4
  2152  0F48  30C2               	movlw	low main@F2008
  2153  0F49  1283               	bcf	3,5	;RP0=0, select bank0
  2154  0F4A  1303               	bcf	3,6	;RP1=0, select bank0
  2155  0F4B  00E2               	movwf	??_main
  2156  0F4C  0804               	movf	4,w
  2157  0F4D  00E3               	movwf	??_main+1
  2158  0F4E  300A               	movlw	10
  2159  0F4F  00E4               	movwf	??_main+2
  2160  0F50                     u3570:	
  2161  0F50  0862               	movf	??_main,w
  2162  0F51  0084               	movwf	4
  2163  0F52  1783               	bsf	3,7	;select IRP bank3
  2164  0F53  0800               	movf	0,w
  2165  0F54  00E5               	movwf	??_main+3
  2166  0F55  0AE2               	incf	??_main,f
  2167  0F56  0863               	movf	??_main+1,w
  2168  0F57  0084               	movwf	4
  2169  0F58  1383               	bcf	3,7	;select IRP bank1
  2170  0F59  0865               	movf	??_main+3,w
  2171  0F5A  0080               	movwf	0
  2172  0F5B  0AE3               	incf	??_main+1,f
  2173  0F5C  0BE4               	decfsz	??_main+2,f
  2174  0F5D  2F50               	goto	u3570
  2175                           
  2176                           ;main.c: 121: int CWTX_Nprg[5] = {0,1,7,4,7};
  2177  0F5E  30AA               	movlw	main@CWTX_Nprg& (0+255)
  2178  0F5F  0084               	movwf	4
  2179  0F60  30CC               	movlw	low main@F2010
  2180  0F61  00E2               	movwf	??_main
  2181  0F62  0804               	movf	4,w
  2182  0F63  00E3               	movwf	??_main+1
  2183  0F64  300A               	movlw	10
  2184  0F65  00E4               	movwf	??_main+2
  2185  0F66                     u3580:	
  2186  0F66  0862               	movf	??_main,w
  2187  0F67  0084               	movwf	4
  2188  0F68  1783               	bsf	3,7	;select IRP bank3
  2189  0F69  0800               	movf	0,w
  2190  0F6A  00E5               	movwf	??_main+3
  2191  0F6B  0AE2               	incf	??_main,f
  2192  0F6C  0863               	movf	??_main+1,w
  2193  0F6D  0084               	movwf	4
  2194  0F6E  1383               	bcf	3,7	;select IRP bank1
  2195  0F6F  0865               	movf	??_main+3,w
  2196  0F70  0080               	movwf	0
  2197  0F71  0AE3               	incf	??_main+1,f
  2198  0F72  0BE4               	decfsz	??_main+2,f
  2199  0F73  2F66               	goto	u3580
  2200                           
  2201                           ;main.c: 122: int FMRX_Nprg[5] = {2,4,8,8,7};
  2202  0F74  30B4               	movlw	main@FMRX_Nprg& (0+255)
  2203  0F75  0084               	movwf	4
  2204  0F76  30D6               	movlw	low main@F2012
  2205  0F77  00E2               	movwf	??_main
  2206  0F78  0804               	movf	4,w
  2207  0F79  00E3               	movwf	??_main+1
  2208  0F7A  300A               	movlw	10
  2209  0F7B  00E4               	movwf	??_main+2
  2210  0F7C                     u3590:	
  2211  0F7C  0862               	movf	??_main,w
  2212  0F7D  0084               	movwf	4
  2213  0F7E  1783               	bsf	3,7	;select IRP bank3
  2214  0F7F  0800               	movf	0,w
  2215  0F80  00E5               	movwf	??_main+3
  2216  0F81  0AE2               	incf	??_main,f
  2217  0F82  0863               	movf	??_main+1,w
  2218  0F83  0084               	movwf	4
  2219  0F84  1383               	bcf	3,7	;select IRP bank1
  2220  0F85  0865               	movf	??_main+3,w
  2221  0F86  0080               	movwf	0
  2222  0F87  0AE3               	incf	??_main+1,f
  2223  0F88  0BE4               	decfsz	??_main+2,f
  2224  0F89  2F7C               	goto	u3590
  2225                           
  2226                           ;main.c: 124: FMTX(FMTX_Nref, FMTX_Nprg);
  2227  0F8A  1683               	bsf	3,5	;RP0=1, select bank1
  2228  0F8B  1303               	bcf	3,6	;RP1=0, select bank1
  2229  0F8C  0847               	movf	(_FMTX_Nref+1)^(0+128),w
  2230  0F8D  1283               	bcf	3,5	;RP0=0, select bank0
  2231  0F8E  1303               	bcf	3,6	;RP1=0, select bank0
  2232  0F8F  00DD               	movwf	FMTX@Nref+1
  2233  0F90  1683               	bsf	3,5	;RP0=1, select bank1
  2234  0F91  1303               	bcf	3,6	;RP1=0, select bank1
  2235  0F92  0846               	movf	_FMTX_Nref^(0+128),w
  2236  0F93  1283               	bcf	3,5	;RP0=0, select bank0
  2237  0F94  1303               	bcf	3,6	;RP1=0, select bank0
  2238  0F95  00DC               	movwf	FMTX@Nref
  2239  0F96  30A0               	movlw	(low (main@FMTX_Nprg| 0))& (0+255)
  2240  0F97  00DE               	movwf	FMTX@Nprg
  2241  0F98  3000               	movlw	0
  2242  0F99  00DF               	movwf	FMTX@Nprg+1
  2243  0F9A  120A  158A  211D  120A  158A  	fcall	_FMTX
  2244                           
  2245                           ;main.c: 125: CWTX(CWTX_Nref, CWTX_Nprg);
  2246  0F9F  1683               	bsf	3,5	;RP0=1, select bank1
  2247  0FA0  1303               	bcf	3,6	;RP1=0, select bank1
  2248  0FA1  0843               	movf	(_CWTX_Nref+1)^(0+128),w
  2249  0FA2  1283               	bcf	3,5	;RP0=0, select bank0
  2250  0FA3  1303               	bcf	3,6	;RP1=0, select bank0
  2251  0FA4  00DD               	movwf	CWTX@Nref+1
  2252  0FA5  1683               	bsf	3,5	;RP0=1, select bank1
  2253  0FA6  1303               	bcf	3,6	;RP1=0, select bank1
  2254  0FA7  0842               	movf	_CWTX_Nref^(0+128),w
  2255  0FA8  1283               	bcf	3,5	;RP0=0, select bank0
  2256  0FA9  1303               	bcf	3,6	;RP1=0, select bank0
  2257  0FAA  00DC               	movwf	CWTX@Nref
  2258  0FAB  30AA               	movlw	(low (main@CWTX_Nprg| 0))& (0+255)
  2259  0FAC  00DE               	movwf	CWTX@Nprg
  2260  0FAD  3000               	movlw	0
  2261  0FAE  00DF               	movwf	CWTX@Nprg+1
  2262  0FAF  120A  158A  20C5  120A  158A  	fcall	_CWTX
  2263                           
  2264                           ;main.c: 126: FMRX(FMRX_Nref, FMRX_Nprg);
  2265  0FB4  1683               	bsf	3,5	;RP0=1, select bank1
  2266  0FB5  1303               	bcf	3,6	;RP1=0, select bank1
  2267  0FB6  0845               	movf	(_FMRX_Nref+1)^(0+128),w
  2268  0FB7  1283               	bcf	3,5	;RP0=0, select bank0
  2269  0FB8  1303               	bcf	3,6	;RP1=0, select bank0
  2270  0FB9  00DD               	movwf	FMRX@Nref+1
  2271  0FBA  1683               	bsf	3,5	;RP0=1, select bank1
  2272  0FBB  1303               	bcf	3,6	;RP1=0, select bank1
  2273  0FBC  0844               	movf	_FMRX_Nref^(0+128),w
  2274  0FBD  1283               	bcf	3,5	;RP0=0, select bank0
  2275  0FBE  1303               	bcf	3,6	;RP1=0, select bank0
  2276  0FBF  00DC               	movwf	FMRX@Nref
  2277  0FC0  30B4               	movlw	(low (main@FMRX_Nprg| 0))& (0+255)
  2278  0FC1  00DE               	movwf	FMRX@Nprg
  2279  0FC2  3000               	movlw	0
  2280  0FC3  00DF               	movwf	FMRX@Nprg+1
  2281  0FC4  120A  158A  20F1  120A  158A  	fcall	_FMRX
  2282                           
  2283                           ;main.c: 127: _delay((unsigned long)((500)*(10000000/4000.0)));
  2284  0FC9  3007               	movlw	7
  2285  0FCA  1283               	bcf	3,5	;RP0=0, select bank0
  2286  0FCB  1303               	bcf	3,6	;RP1=0, select bank0
  2287  0FCC  00E4               	movwf	??_main+2
  2288  0FCD  3058               	movlw	88
  2289  0FCE  00E3               	movwf	??_main+1
  2290  0FCF  305E               	movlw	94
  2291  0FD0  00E2               	movwf	??_main
  2292  0FD1                     u3677:	
  2293  0FD1  0BE2               	decfsz	??_main,f
  2294  0FD2  2FD1               	goto	u3677
  2295  0FD3  0BE3               	decfsz	??_main+1,f
  2296  0FD4  2FD1               	goto	u3677
  2297  0FD5  0BE4               	decfsz	??_main+2,f
  2298  0FD6  2FD1               	goto	u3677
  2299  0FD7  2FD8               	nop2
  2300                           
  2301                           ;main.c: 144: }
  2302                           
  2303                           ;main.c: 143: break;
  2304                           
  2305                           ;main.c: 141: default:
  2306                           
  2307                           ;main.c: 140: break;
  2308                           
  2309                           ;main.c: 138: case 'T':
  2310                           
  2311                           ;main.c: 137: break;
  2312                           
  2313                           ;main.c: 135: case 'N':
  2314                           
  2315                           ;main.c: 134: break;
  2316                           
  2317                           ;main.c: 132: case '3':
  2318                           
  2319                           ;main.c: 131: break;
  2320                           
  2321                           ;main.c: 129: case 'I':
  2322                           
  2323                           ;main.c: 128: break;
  2324  0FD8  2FF0               	goto	l3881
  2325  0FD9                     l3877:	
  2326  0FD9  1683               	bsf	3,5	;RP0=1, select bank1
  2327  0FDA  1303               	bcf	3,6	;RP1=0, select bank1
  2328  0FDB  0841               	movf	main@dData^(0+128),w
  2329  0FDC  3E03               	addlw	3
  2330  0FDD  0084               	movwf	4
  2331  0FDE  1783               	bsf	3,7	;select IRP bank2
  2332  0FDF  0800               	movf	0,w
  2333                           
  2334                           ; Switch size 1, requested type "space"
  2335                           ; Number of cases is 5, Range of values is 51 to 84
  2336                           ; switch strategies available:
  2337                           ; Name         Instructions Cycles
  2338                           ; simple_byte           16     9 (average)
  2339                           ; direct_byte          113    11 (fixed)
  2340                           ; jumptable            263     9 (fixed)
  2341                           ;	Chosen strategy is simple_byte
  2342  0FE0  3A33               	xorlw	51	; case 51
  2343  0FE1  1903               	skipnz
  2344  0FE2  2FF0               	goto	l3881
  2345  0FE3  3A76               	xorlw	118	; case 69
  2346  0FE4  1903               	skipnz
  2347  0FE5  2F32               	goto	l3857
  2348  0FE6  3A0C               	xorlw	12	; case 73
  2349  0FE7  1903               	skipnz
  2350  0FE8  2FF0               	goto	l3881
  2351  0FE9  3A07               	xorlw	7	; case 78
  2352  0FEA  1903               	skipnz
  2353  0FEB  2FF0               	goto	l3881
  2354  0FEC  3A1A               	xorlw	26	; case 84
  2355  0FED  1903               	skipnz
  2356  0FEE  2FF0               	goto	l3881
  2357  0FEF  2FF0               	goto	l3881
  2358  0FF0                     l3881:	
  2359                           ;main.c: 146: }else if(dData[2] == 't'){
  2360                           
  2361                           
  2362                           ;main.c: 148: }
  2363                           ;main.c: 149: }
  2364                           ;main.c: 193: _delay((unsigned long)((500)*(10000000/4000.0)));
  2365  0FF0  3007               	movlw	7
  2366  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  2367  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
  2368  0FF3  00E4               	movwf	??_main+2
  2369  0FF4  3058               	movlw	88
  2370  0FF5  00E3               	movwf	??_main+1
  2371  0FF6  305E               	movlw	94
  2372  0FF7  00E2               	movwf	??_main
  2373  0FF8                     u3687:	
  2374  0FF8  0BE2               	decfsz	??_main,f
  2375  0FF9  2FF8               	goto	u3687
  2376  0FFA  0BE3               	decfsz	??_main+1,f
  2377  0FFB  2FF8               	goto	u3687
  2378  0FFC  0BE4               	decfsz	??_main+2,f
  2379  0FFD  2FF8               	goto	u3687
  2380  0FFE  2FFF               	nop2
  2381  0FFF  2E8A               	goto	l3817
  2382  1000                     __end_of_main:	
  2383                           ;main.c: 194: }
  2384                           ;main.c: 195: return;
  2385                           
  2386                           
  2387                           	psect	text1
  2388  0A37                     __ptext1:	
  2389 ;; *************** function _printf *****************
  2390 ;; Defined at:
  2391 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  2392 ;; Parameters:    Size  Location     Type
  2393 ;;  f               1    wreg     PTR const unsigned char 
  2394 ;;		 -> STR_16(3), STR_15(8), 
  2395 ;; Auto vars:     Size  Location     Type
  2396 ;;  f               1    6[COMMON] PTR const unsigned char 
  2397 ;;		 -> STR_16(3), STR_15(8), 
  2398 ;;  tmpval          4    0        struct .
  2399 ;;  cp              2    0        PTR const unsigned char 
  2400 ;;  len             2    0        unsigned int 
  2401 ;;  val             2    0        unsigned int 
  2402 ;;  c               1    7[COMMON] char 
  2403 ;;  ap              1    5[COMMON] PTR void [1]
  2404 ;;		 -> ?_printf(2), 
  2405 ;;  flag            1    4[COMMON] unsigned char 
  2406 ;;  prec            1    0        char 
  2407 ;; Return value:  Size  Location     Type
  2408 ;;                  2    1[COMMON] int 
  2409 ;; Registers used:
  2410 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2411 ;; Tracked objects:
  2412 ;;		On entry : 0/0
  2413 ;;		On exit  : 0/0
  2414 ;;		Unchanged: 0/0
  2415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2416 ;;      Params:         2       0       0       0       0
  2417 ;;      Locals:         4       0       0       0       0
  2418 ;;      Temps:          1       0       0       0       0
  2419 ;;      Totals:         7       0       0       0       0
  2420 ;;Total ram usage:        7 bytes
  2421 ;; Hardware stack levels used:    1
  2422 ;; Hardware stack levels required when called:    1
  2423 ;; This function calls:
  2424 ;;		_putch
  2425 ;; This function is called by:
  2426 ;;		_main
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           
  2431                           ;psect for function _printf
  2432  0A37                     _printf:	
  2433                           
  2434                           ;incstack = 0
  2435                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2436                           ;printf@f stored from wreg
  2437  0A37  00F6               	movwf	printf@f
  2438                           
  2439                           ;doprnt.c: 466: va_list ap;
  2440                           ;doprnt.c: 499: signed char c;
  2441                           ;doprnt.c: 506: signed char prec;
  2442                           ;doprnt.c: 508: unsigned char flag;
  2443                           ;doprnt.c: 523: union {
  2444                           ;doprnt.c: 524: unsigned long vd;
  2445                           ;doprnt.c: 525: double integ;
  2446                           ;doprnt.c: 526: } tmpval;
  2447                           ;doprnt.c: 528: unsigned int val;
  2448                           ;doprnt.c: 529: unsigned len;
  2449                           ;doprnt.c: 530: const char * cp;
  2450                           ;doprnt.c: 533: *ap = __va_start();
  2451  0A38  3071               	movlw	(low (?_printf| 0))& (0+255)
  2452  0A39  00F3               	movwf	??_printf
  2453  0A3A  0873               	movf	??_printf,w
  2454  0A3B  00F5               	movwf	printf@ap
  2455  0A3C                     l3531:	
  2456                           ;doprnt.c: 1422: {
  2457                           
  2458                           ;doprnt.c: 536: while(c = *f++) {
  2459                           
  2460  0A3C  3001               	movlw	1
  2461  0A3D  07F6               	addwf	printf@f,f
  2462  0A3E  30FF               	movlw	-1
  2463  0A3F  0776               	addwf	printf@f,w
  2464  0A40  0084               	movwf	4
  2465  0A41  120A  158A  2000  120A  158A  	fcall	stringdir
  2466  0A46  00F3               	movwf	??_printf
  2467  0A47  0873               	movf	??_printf,w
  2468  0A48  00F7               	movwf	printf@c
  2469  0A49  0877               	movf	printf@c,w
  2470  0A4A  1903               	btfsc	3,2
  2471  0A4B  0008               	return
  2472                           
  2473                           ;doprnt.c: 538: if(c != '%')
  2474  0A4C  3025               	movlw	37
  2475  0A4D  0677               	xorwf	printf@c,w
  2476  0A4E  1903               	btfsc	3,2
  2477  0A4F  2A57               	goto	l3519
  2478                           
  2479                           ;doprnt.c: 540: {
  2480                           ;doprnt.c: 541: (putch(c) );
  2481  0A50  0877               	movf	printf@c,w
  2482  0A51  160A  118A  27AD  120A  158A  	fcall	_putch
  2483                           
  2484                           ;doprnt.c: 542: continue;
  2485  0A56  2A3C               	goto	l3531
  2486  0A57                     l3519:	
  2487                           
  2488                           ;doprnt.c: 543: }
  2489                           ;doprnt.c: 548: flag = 0;
  2490  0A57  01F4               	clrf	printf@flag
  2491                           
  2492                           ;doprnt.c: 635: switch(c = *f++) {
  2493  0A58  2A6A               	goto	l3529
  2494  0A59                     l3521:	
  2495                           ;doprnt.c: 784: case 'c':
  2496                           
  2497                           ;doprnt.c: 638: goto alldone;
  2498                           
  2499                           ;doprnt.c: 637: case 0:
  2500                           
  2501                           
  2502                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2503  0A59  0875               	movf	printf@ap,w
  2504  0A5A  0084               	movwf	4
  2505  0A5B  0800               	movf	0,w
  2506  0A5C  00F3               	movwf	??_printf
  2507  0A5D  0873               	movf	??_printf,w
  2508  0A5E  00F7               	movwf	printf@c
  2509  0A5F  3002               	movlw	2
  2510  0A60  00F3               	movwf	??_printf
  2511  0A61  0873               	movf	??_printf,w
  2512  0A62  07F5               	addwf	printf@ap,f
  2513  0A63                     l3525:	
  2514                           ;doprnt.c: 802: default:
  2515                           
  2516                           
  2517                           ;doprnt.c: 809: (putch(c) );
  2518  0A63  0877               	movf	printf@c,w
  2519  0A64  160A  118A  27AD  120A  158A  	fcall	_putch
  2520                           
  2521                           ;doprnt.c: 822: }
  2522                           
  2523                           ;doprnt.c: 810: continue;
  2524  0A69  2A3C               	goto	l3531
  2525  0A6A                     l3529:	
  2526  0A6A  3001               	movlw	1
  2527  0A6B  07F6               	addwf	printf@f,f
  2528  0A6C  30FF               	movlw	-1
  2529  0A6D  0776               	addwf	printf@f,w
  2530  0A6E  0084               	movwf	4
  2531  0A6F  120A  158A  2000  120A  158A  	fcall	stringdir
  2532  0A74  00F7               	movwf	printf@c
  2533                           
  2534                           ; Switch size 1, requested type "space"
  2535                           ; Number of cases is 2, Range of values is 0 to 99
  2536                           ; switch strategies available:
  2537                           ; Name         Instructions Cycles
  2538                           ; simple_byte            7     4 (average)
  2539                           ; jumptable            260     6 (fixed)
  2540                           ;	Chosen strategy is simple_byte
  2541  0A75  3A00               	xorlw	0	; case 0
  2542  0A76  1903               	skipnz
  2543  0A77  2A7D               	goto	l669
  2544  0A78  3A63               	xorlw	99	; case 99
  2545  0A79  1903               	skipnz
  2546  0A7A  2A59               	goto	l3521
  2547  0A7B  2A63               	goto	l3525
  2548  0A7C  2A3C               	goto	l3531
  2549  0A7D                     l669:	
  2550                           ;doprnt.c: 1540: return 0;
  2551                           ;	Return value of _printf is never used
  2552                           
  2553                           ;doprnt.c: 1469: }
  2554                           ;doprnt.c: 1533: }
  2555                           ;doprnt.c: 1535: alldone:
  2556                           
  2557  0A7D  0008               	return
  2558  0A7E                     __end_of_printf:	
  2559                           
  2560                           	psect	text2
  2561  0007                     __ptext2:	
  2562 ;; *************** function _Reset_EPS *****************
  2563 ;; Defined at:
  2564 ;;		line 19 in file "EPS.c"
  2565 ;; Parameters:    Size  Location     Type
  2566 ;;		None
  2567 ;; Auto vars:     Size  Location     Type
  2568 ;;		None
  2569 ;; Return value:  Size  Location     Type
  2570 ;;                  1    wreg      void 
  2571 ;; Registers used:
  2572 ;;		wreg
  2573 ;; Tracked objects:
  2574 ;;		On entry : 0/0
  2575 ;;		On exit  : 0/0
  2576 ;;		Unchanged: 0/0
  2577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2578 ;;      Params:         0       0       0       0       0
  2579 ;;      Locals:         0       0       0       0       0
  2580 ;;      Temps:          3       0       0       0       0
  2581 ;;      Totals:         3       0       0       0       0
  2582 ;;Total ram usage:        3 bytes
  2583 ;; Hardware stack levels used:    1
  2584 ;; This function calls:
  2585 ;;		Nothing
  2586 ;; This function is called by:
  2587 ;;		_main
  2588 ;; This function uses a non-reentrant model
  2589 ;;
  2590                           
  2591                           
  2592                           ;psect for function _Reset_EPS
  2593  0007                     _Reset_EPS:	
  2594                           
  2595                           ;EPS.c: 20: RB4 = 1;
  2596                           
  2597                           ;incstack = 0
  2598                           ; Regs used in _Reset_EPS: [wreg]
  2599  0007  1283               	bcf	3,5	;RP0=0, select bank0
  2600  0008  1303               	bcf	3,6	;RP1=0, select bank0
  2601  0009  1606               	bsf	6,4	;volatile
  2602                           
  2603                           ;EPS.c: 21: RA1 = 1;
  2604  000A  1485               	bsf	5,1	;volatile
  2605                           
  2606                           ;EPS.c: 22: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2607  000B  3040               	movlw	64
  2608  000C  00F2               	movwf	??_Reset_EPS+2
  2609  000D  306A               	movlw	106
  2610  000E  00F1               	movwf	??_Reset_EPS+1
  2611  000F  30D5               	movlw	213
  2612  0010  00F0               	movwf	??_Reset_EPS
  2613  0011                     u3697:	
  2614  0011  0BF0               	decfsz	??_Reset_EPS,f
  2615  0012  2811               	goto	u3697
  2616  0013  0BF1               	decfsz	??_Reset_EPS+1,f
  2617  0014  2811               	goto	u3697
  2618  0015  0BF2               	decfsz	??_Reset_EPS+2,f
  2619  0016  2811               	goto	u3697
  2620  0017  2818               	nop2
  2621                           
  2622                           ;EPS.c: 23: RB4 = 0;
  2623  0018  1283               	bcf	3,5	;RP0=0, select bank0
  2624  0019  1303               	bcf	3,6	;RP1=0, select bank0
  2625  001A  1206               	bcf	6,4	;volatile
  2626                           
  2627                           ;EPS.c: 24: RA1 = 0;
  2628  001B  1085               	bcf	5,1	;volatile
  2629                           
  2630                           ;EPS.c: 25: _delay((unsigned long)((500)*(10000000/4000.0)));
  2631  001C  3007               	movlw	7
  2632  001D  00F2               	movwf	??_Reset_EPS+2
  2633  001E  3058               	movlw	88
  2634  001F  00F1               	movwf	??_Reset_EPS+1
  2635  0020  305E               	movlw	94
  2636  0021  00F0               	movwf	??_Reset_EPS
  2637  0022                     u3707:	
  2638  0022  0BF0               	decfsz	??_Reset_EPS,f
  2639  0023  2822               	goto	u3707
  2640  0024  0BF1               	decfsz	??_Reset_EPS+1,f
  2641  0025  2822               	goto	u3707
  2642  0026  0BF2               	decfsz	??_Reset_EPS+2,f
  2643  0027  2822               	goto	u3707
  2644  0028  2829               	nop2
  2645  0029  0008               	return
  2646  002A                     __end_of_Reset_EPS:	
  2647                           
  2648                           	psect	text3
  2649  0C3F                     __ptext3:	
  2650 ;; *************** function _ReceivePacket_data *****************
  2651 ;; Defined at:
  2652 ;;		line 359 in file "decode_AX25.c"
  2653 ;; Parameters:    Size  Location     Type
  2654 ;;		None
  2655 ;; Auto vars:     Size  Location     Type
  2656 ;;  i               2   31[BANK0 ] unsigned int 
  2657 ;;  fcschecker      2   29[BANK0 ] unsigned int 
  2658 ;; Return value:  Size  Location     Type
  2659 ;;                  1    wreg      PTR unsigned char 
  2660 ;; Registers used:
  2661 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2662 ;; Tracked objects:
  2663 ;;		On entry : 0/0
  2664 ;;		On exit  : 0/0
  2665 ;;		Unchanged: 0/0
  2666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2667 ;;      Params:         0       0       0       0       0
  2668 ;;      Locals:         0       4       0       0       0
  2669 ;;      Temps:          2       0       0       0       0
  2670 ;;      Totals:         2       4       0       0       0
  2671 ;;Total ram usage:        6 bytes
  2672 ;; Hardware stack levels used:    1
  2673 ;; Hardware stack levels required when called:    2
  2674 ;; This function calls:
  2675 ;;		_fcscheck
  2676 ;;		_getdata
  2677 ;;		_waitFlag
  2678 ;; This function is called by:
  2679 ;;		_main
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683                           
  2684                           ;psect for function _ReceivePacket_data
  2685  0C3F                     _ReceivePacket_data:	
  2686                           
  2687                           ;decode_AX25.c: 360: UINT fcschecker;
  2688                           ;decode_AX25.c: 363: waitFlag();
  2689                           
  2690                           ;incstack = 0
  2691                           ; Regs used in _ReceivePacket_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2692  0C3F  120A  118A  2327  120A  158A  	fcall	_waitFlag
  2693                           
  2694                           ;decode_AX25.c: 365: getdata();
  2695  0C44  120A  158A  23DE  120A  158A  	fcall	_getdata
  2696                           
  2697                           ;decode_AX25.c: 367: fcschecker = fcscheck();
  2698  0C49  120A  118A  202A  120A  158A  	fcall	_fcscheck
  2699  0C4E  0871               	movf	?_fcscheck+1,w
  2700  0C4F  1283               	bcf	3,5	;RP0=0, select bank0
  2701  0C50  1303               	bcf	3,6	;RP1=0, select bank0
  2702  0C51  00BE               	movwf	ReceivePacket_data@fcschecker+1
  2703  0C52  0870               	movf	?_fcscheck,w
  2704  0C53  00BD               	movwf	ReceivePacket_data@fcschecker
  2705                           
  2706                           ;decode_AX25.c: 369: if(fcschecker == 1){
  2707  0C54  033D               	decf	ReceivePacket_data@fcschecker,w
  2708  0C55  043E               	iorwf	ReceivePacket_data@fcschecker+1,w
  2709  0C56  1D03               	btfss	3,2
  2710  0C57  2C9E               	goto	l3419
  2711                           
  2712                           ;decode_AX25.c: 370: for(UINT i=0; i<commandSize; i++){
  2713  0C58  01BF               	clrf	ReceivePacket_data@i
  2714  0C59  01C0               	clrf	ReceivePacket_data@i+1
  2715  0C5A  3001               	movlw	low (_commandSize-__stringbase)
  2716  0C5B  0084               	movwf	4
  2717  0C5C  120A  158A  2000  120A  158A  	fcall	stringdir
  2718  0C61  00FA               	movwf	??_ReceivePacket_data
  2719  0C62  120A  158A  2000  120A  158A  	fcall	stringdir
  2720  0C67  00FB               	movwf	??_ReceivePacket_data+1
  2721  0C68  087B               	movf	??_ReceivePacket_data+1,w
  2722  0C69  0240               	subwf	ReceivePacket_data@i+1,w
  2723  0C6A  1D03               	skipz
  2724  0C6B  2C6E               	goto	u3115
  2725  0C6C  087A               	movf	??_ReceivePacket_data,w
  2726  0C6D  023F               	subwf	ReceivePacket_data@i,w
  2727  0C6E                     u3115:	
  2728  0C6E  1803               	btfsc	3,0
  2729  0C6F  2C98               	goto	l3411
  2730  0C70                     l3405:	
  2731                           
  2732                           ;decode_AX25.c: 371: dData[i] = dPacket[i+20];
  2733  0C70  083F               	movf	ReceivePacket_data@i,w
  2734  0C71  3E14               	addlw	20
  2735  0C72  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2736  0C73  0084               	movwf	4
  2737  0C74  1783               	bsf	3,7	;select IRP bank3
  2738  0C75  0800               	movf	0,w
  2739  0C76  00FA               	movwf	??_ReceivePacket_data
  2740  0C77  083F               	movf	ReceivePacket_data@i,w
  2741  0C78  3E30               	addlw	(low (_dData| (0+256)))& (0+255)
  2742  0C79  0084               	movwf	4
  2743  0C7A  087A               	movf	??_ReceivePacket_data,w
  2744  0C7B  0080               	movwf	0
  2745  0C7C  3001               	movlw	1
  2746  0C7D  07BF               	addwf	ReceivePacket_data@i,f
  2747  0C7E  1803               	skipnc
  2748  0C7F  0AC0               	incf	ReceivePacket_data@i+1,f
  2749  0C80  3000               	movlw	0
  2750  0C81  07C0               	addwf	ReceivePacket_data@i+1,f
  2751  0C82  3001               	movlw	low (_commandSize-__stringbase)
  2752  0C83  0084               	movwf	4
  2753  0C84  120A  158A  2000  120A  158A  	fcall	stringdir
  2754  0C89  00FA               	movwf	??_ReceivePacket_data
  2755  0C8A  120A  158A  2000  120A  158A  	fcall	stringdir
  2756  0C8F  00FB               	movwf	??_ReceivePacket_data+1
  2757  0C90  087B               	movf	??_ReceivePacket_data+1,w
  2758  0C91  0240               	subwf	ReceivePacket_data@i+1,w
  2759  0C92  1D03               	skipz
  2760  0C93  2C96               	goto	u3125
  2761  0C94  087A               	movf	??_ReceivePacket_data,w
  2762  0C95  023F               	subwf	ReceivePacket_data@i,w
  2763  0C96                     u3125:	
  2764  0C96  1C03               	skipc
  2765  0C97  2C70               	goto	l3405
  2766  0C98                     l3411:	
  2767                           
  2768                           ;decode_AX25.c: 372: }
  2769                           ;decode_AX25.c: 373: dPacketnum = 0;
  2770  0C98  01E6               	clrf	_dPacketnum
  2771  0C99  01E7               	clrf	_dPacketnum+1
  2772                           
  2773                           ;decode_AX25.c: 374: rcv_state = 0;
  2774  0C9A  01EA               	clrf	_rcv_state
  2775  0C9B  01EB               	clrf	_rcv_state+1
  2776                           
  2777                           ;decode_AX25.c: 375: return dData;
  2778  0C9C  3030               	movlw	(low (_dData| (0+256)))& (0+255)
  2779                           
  2780                           ;decode_AX25.c: 376: }else{
  2781  0C9D  0008               	return
  2782  0C9E                     l3419:	
  2783                           
  2784                           ;decode_AX25.c: 377: dPacketnum = 0;
  2785  0C9E  01E6               	clrf	_dPacketnum
  2786  0C9F  01E7               	clrf	_dPacketnum+1
  2787                           
  2788                           ;decode_AX25.c: 378: rcv_state = 0;
  2789  0CA0  01EA               	clrf	_rcv_state
  2790  0CA1  01EB               	clrf	_rcv_state+1
  2791                           
  2792                           ;decode_AX25.c: 379: return 0x00;
  2793  0CA2  3000               	movlw	0
  2794  0CA3  0008               	return
  2795  0CA4                     __end_of_ReceivePacket_data:	
  2796                           
  2797                           	psect	text4
  2798  0327                     __ptext4:	
  2799 ;; *************** function _waitFlag *****************
  2800 ;; Defined at:
  2801 ;;		line 54 in file "decode_AX25.c"
  2802 ;; Parameters:    Size  Location     Type
  2803 ;;		None
  2804 ;; Auto vars:     Size  Location     Type
  2805 ;;  j               2   24[BANK0 ] unsigned int 
  2806 ;;  j               2   10[BANK0 ] unsigned int 
  2807 ;;  j               2   22[BANK0 ] unsigned int 
  2808 ;;  j               2    8[BANK0 ] unsigned int 
  2809 ;;  j               2   20[BANK0 ] unsigned int 
  2810 ;;  j               2    6[BANK0 ] unsigned int 
  2811 ;;  j               2   18[BANK0 ] unsigned int 
  2812 ;;  j               2    4[BANK0 ] unsigned int 
  2813 ;;  j               2   16[BANK0 ] unsigned int 
  2814 ;;  j               2    2[BANK0 ] unsigned int 
  2815 ;;  i               2    0[BANK0 ] unsigned int 
  2816 ;;  j               2   14[BANK0 ] unsigned int 
  2817 ;;  j               2   12[BANK0 ] unsigned int 
  2818 ;;  flag_judge      2   26[BANK0 ] unsigned int 
  2819 ;;  buf             1   28[BANK0 ] unsigned char 
  2820 ;; Return value:  Size  Location     Type
  2821 ;;                  1    wreg      void 
  2822 ;; Registers used:
  2823 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2824 ;; Tracked objects:
  2825 ;;		On entry : 0/0
  2826 ;;		On exit  : 0/0
  2827 ;;		Unchanged: 0/0
  2828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2829 ;;      Params:         0       0       0       0       0
  2830 ;;      Locals:         0      29       0       0       0
  2831 ;;      Temps:          4       0       0       0       0
  2832 ;;      Totals:         4      29       0       0       0
  2833 ;;Total ram usage:       33 bytes
  2834 ;; Hardware stack levels used:    1
  2835 ;; Hardware stack levels required when called:    1
  2836 ;; This function calls:
  2837 ;;		_getbit
  2838 ;; This function is called by:
  2839 ;;		_ReceivePacket_data
  2840 ;;		_ReceivePacket
  2841 ;; This function uses a non-reentrant model
  2842 ;;
  2843                           
  2844                           
  2845                           ;psect for function _waitFlag
  2846  0327                     _waitFlag:	
  2847                           
  2848                           ;decode_AX25.c: 55: UINT flag_judge;
  2849                           ;decode_AX25.c: 56: UBYTE buf = 0xff;
  2850                           
  2851                           ;incstack = 0
  2852                           ; Regs used in _waitFlag: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2853  0327  30FF               	movlw	255
  2854  0328  00F6               	movwf	??_waitFlag
  2855  0329  0876               	movf	??_waitFlag,w
  2856  032A  1283               	bcf	3,5	;RP0=0, select bank0
  2857  032B  1303               	bcf	3,6	;RP1=0, select bank0
  2858  032C  00BC               	movwf	waitFlag@buf
  2859  032D                     L6:	
  2860                           
  2861                           ;decode_AX25.c: 271: rcv_state = 0;
  2862  032D  01EA               	clrf	_rcv_state
  2863  032E  01EB               	clrf	_rcv_state+1
  2864  032F                     l3103:	
  2865  032F  3000               	movlw	0
  2866  0330  026B               	subwf	_rcv_state+1,w
  2867  0331  3002               	movlw	2
  2868  0332  1903               	skipnz
  2869  0333  026A               	subwf	_rcv_state,w
  2870  0334  1803               	btfsc	3,0
  2871  0335  0008               	return
  2872  0336                     l2737:	
  2873                           ;decode_AX25.c: 59: while(buf != 0x7e){
  2874                           
  2875                           ;decode_AX25.c: 58: while(rcv_state < 2){
  2876                           
  2877                           ;decode_AX25.c: 57: rcv_state = 0;
  2878                           
  2879  0336  307E               	movlw	126
  2880  0337  063C               	xorwf	waitFlag@buf,w
  2881  0338  1903               	btfsc	3,2
  2882  0339  2B86               	goto	l2759
  2883                           
  2884                           ;decode_AX25.c: 60: flag_judge = getbit();
  2885  033A  120A  158A  227E  120A  118A  	fcall	_getbit
  2886  033F  0871               	movf	?_getbit+1,w
  2887  0340  1283               	bcf	3,5	;RP0=0, select bank0
  2888  0341  1303               	bcf	3,6	;RP1=0, select bank0
  2889  0342  00BB               	movwf	waitFlag@flag_judge+1
  2890  0343  0870               	movf	?_getbit,w
  2891  0344  00BA               	movwf	waitFlag@flag_judge
  2892                           
  2893                           ;decode_AX25.c: 61: buf = buf << 1;
  2894  0345  083C               	movf	waitFlag@buf,w
  2895  0346  00F6               	movwf	??_waitFlag
  2896  0347  0776               	addwf	??_waitFlag,w
  2897  0348  00F7               	movwf	??_waitFlag+1
  2898  0349  0877               	movf	??_waitFlag+1,w
  2899  034A  00BC               	movwf	waitFlag@buf
  2900                           
  2901                           ;decode_AX25.c: 63: buf = buf | 0x00;
  2902  034B  083A               	movf	waitFlag@flag_judge,w
  2903  034C  043B               	iorwf	waitFlag@flag_judge+1,w
  2904  034D  1903               	btfsc	3,2
  2905  034E  2B36               	goto	l2737
  2906                           
  2907                           ;decode_AX25.c: 65: buf = buf | 0x01;
  2908                           
  2909                           ;decode_AX25.c: 64: }else{
  2910  034F  083C               	movf	waitFlag@buf,w
  2911  0350  3801               	iorlw	1
  2912  0351  00F6               	movwf	??_waitFlag
  2913  0352  0876               	movf	??_waitFlag,w
  2914  0353  00BC               	movwf	waitFlag@buf
  2915  0354  2B36               	goto	l2737
  2916  0355                     l2739:	
  2917                           ;decode_AX25.c: 66: }
  2918                           ;decode_AX25.c: 67: }
  2919                           ;decode_AX25.c: 71: while(buf == 0x7e){
  2920                           
  2921                           
  2922                           ;decode_AX25.c: 72: for(UINT i=0;i<8;i++){
  2923  0355  01A0               	clrf	waitFlag@i
  2924  0356  01A1               	clrf	waitFlag@i+1
  2925  0357  3000               	movlw	0
  2926  0358  0221               	subwf	waitFlag@i+1,w
  2927  0359  3008               	movlw	8
  2928  035A  1903               	skipnz
  2929  035B  0220               	subwf	waitFlag@i,w
  2930  035C  1803               	btfsc	3,0
  2931  035D  2B86               	goto	l2759
  2932  035E                     l2745:	
  2933                           
  2934                           ;decode_AX25.c: 73: flag_judge = getbit();
  2935  035E  120A  158A  227E  120A  118A  	fcall	_getbit
  2936  0363  0871               	movf	?_getbit+1,w
  2937  0364  1283               	bcf	3,5	;RP0=0, select bank0
  2938  0365  1303               	bcf	3,6	;RP1=0, select bank0
  2939  0366  00BB               	movwf	waitFlag@flag_judge+1
  2940  0367  0870               	movf	?_getbit,w
  2941  0368  00BA               	movwf	waitFlag@flag_judge
  2942                           
  2943                           ;decode_AX25.c: 74: buf = buf >> 1;
  2944  0369  083C               	movf	waitFlag@buf,w
  2945  036A  00F6               	movwf	??_waitFlag
  2946  036B  1003               	clrc
  2947  036C  0C76               	rrf	??_waitFlag,w
  2948  036D  00F7               	movwf	??_waitFlag+1
  2949  036E  0877               	movf	??_waitFlag+1,w
  2950  036F  00BC               	movwf	waitFlag@buf
  2951                           
  2952                           ;decode_AX25.c: 76: buf = buf | 0x00;
  2953  0370  083A               	movf	waitFlag@flag_judge,w
  2954  0371  043B               	iorwf	waitFlag@flag_judge+1,w
  2955  0372  1903               	btfsc	3,2
  2956  0373  2B79               	goto	l2755
  2957                           
  2958                           ;decode_AX25.c: 78: buf = buf | 0x80;
  2959                           
  2960                           ;decode_AX25.c: 77: }else{
  2961  0374  083C               	movf	waitFlag@buf,w
  2962  0375  3880               	iorlw	128
  2963  0376  00F6               	movwf	??_waitFlag
  2964  0377  0876               	movf	??_waitFlag,w
  2965  0378  00BC               	movwf	waitFlag@buf
  2966  0379                     l2755:	
  2967  0379  3001               	movlw	1
  2968  037A  07A0               	addwf	waitFlag@i,f
  2969  037B  1803               	skipnc
  2970  037C  0AA1               	incf	waitFlag@i+1,f
  2971  037D  3000               	movlw	0
  2972  037E  07A1               	addwf	waitFlag@i+1,f
  2973  037F  3000               	movlw	0
  2974  0380  0221               	subwf	waitFlag@i+1,w
  2975  0381  3008               	movlw	8
  2976  0382  1903               	skipnz
  2977  0383  0220               	subwf	waitFlag@i,w
  2978  0384  1C03               	skipc
  2979  0385  2B5E               	goto	l2745
  2980  0386                     l2759:	
  2981  0386  307E               	movlw	126
  2982  0387  063C               	xorwf	waitFlag@buf,w
  2983  0388  1903               	btfsc	3,2
  2984  0389  2B55               	goto	l2739
  2985                           
  2986                           ;decode_AX25.c: 79: }
  2987                           ;decode_AX25.c: 80: }
  2988                           ;decode_AX25.c: 81: }
  2989                           ;decode_AX25.c: 82: if(buf == ("JQ1YCZ"[0] << 1)){
  2990  038A  3012               	movlw	low (STR_1-__stringbase)
  2991  038B  0084               	movwf	4
  2992  038C  120A  158A  2000  120A  118A  	fcall	stringdir
  2993  0391  00F6               	movwf	??_waitFlag
  2994  0392  01F7               	clrf	??_waitFlag+1
  2995  0393  1003               	clrc
  2996  0394  0DF6               	rlf	??_waitFlag,f
  2997  0395  0DF7               	rlf	??_waitFlag+1,f
  2998  0396  083C               	movf	waitFlag@buf,w
  2999  0397  00F8               	movwf	??_waitFlag+2
  3000  0398  01F9               	clrf	??_waitFlag+3
  3001  0399  0877               	movf	??_waitFlag+1,w
  3002  039A  0679               	xorwf	??_waitFlag+3,w
  3003  039B  1D03               	skipz
  3004  039C  2B9F               	goto	u2205
  3005  039D  0876               	movf	??_waitFlag,w
  3006  039E  0678               	xorwf	??_waitFlag+2,w
  3007  039F                     u2205:	
  3008  039F  1D03               	skipz
  3009  03A0  2D64               	goto	l2909
  3010                           
  3011                           ;decode_AX25.c: 83: dPacket[dPacketnum] = buf;
  3012  03A1  083C               	movf	waitFlag@buf,w
  3013  03A2  00F6               	movwf	??_waitFlag
  3014  03A3  0866               	movf	_dPacketnum,w
  3015  03A4  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3016  03A5  0084               	movwf	4
  3017  03A6  0876               	movf	??_waitFlag,w
  3018  03A7  1783               	bsf	3,7	;select IRP bank3
  3019  03A8  0080               	movwf	0
  3020                           
  3021                           ;decode_AX25.c: 84: dPacketnum ++;
  3022  03A9  3001               	movlw	1
  3023  03AA  07E6               	addwf	_dPacketnum,f
  3024  03AB  1803               	skipnc
  3025  03AC  0AE7               	incf	_dPacketnum+1,f
  3026  03AD  3000               	movlw	0
  3027  03AE  07E7               	addwf	_dPacketnum+1,f
  3028                           
  3029                           ;decode_AX25.c: 85: for(UINT j=0;j<8;j++){
  3030  03AF  01A2               	clrf	waitFlag@j
  3031  03B0  01A3               	clrf	waitFlag@j+1
  3032  03B1  3000               	movlw	0
  3033  03B2  0223               	subwf	waitFlag@j+1,w
  3034  03B3  3008               	movlw	8
  3035  03B4  1903               	skipnz
  3036  03B5  0222               	subwf	waitFlag@j,w
  3037  03B6  1803               	btfsc	3,0
  3038  03B7  2BE0               	goto	l2787
  3039  03B8                     l2773:	
  3040                           
  3041                           ;decode_AX25.c: 86: flag_judge = getbit();
  3042  03B8  120A  158A  227E  120A  118A  	fcall	_getbit
  3043  03BD  0871               	movf	?_getbit+1,w
  3044  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  3045  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  3046  03C0  00BB               	movwf	waitFlag@flag_judge+1
  3047  03C1  0870               	movf	?_getbit,w
  3048  03C2  00BA               	movwf	waitFlag@flag_judge
  3049                           
  3050                           ;decode_AX25.c: 87: buf = buf >> 1;
  3051  03C3  083C               	movf	waitFlag@buf,w
  3052  03C4  00F6               	movwf	??_waitFlag
  3053  03C5  1003               	clrc
  3054  03C6  0C76               	rrf	??_waitFlag,w
  3055  03C7  00F7               	movwf	??_waitFlag+1
  3056  03C8  0877               	movf	??_waitFlag+1,w
  3057  03C9  00BC               	movwf	waitFlag@buf
  3058                           
  3059                           ;decode_AX25.c: 89: buf = buf | 0x00;
  3060  03CA  083A               	movf	waitFlag@flag_judge,w
  3061  03CB  043B               	iorwf	waitFlag@flag_judge+1,w
  3062  03CC  1903               	btfsc	3,2
  3063  03CD  2BD3               	goto	l2783
  3064                           
  3065                           ;decode_AX25.c: 91: buf = buf | 0x80;
  3066                           
  3067                           ;decode_AX25.c: 90: }else{
  3068  03CE  083C               	movf	waitFlag@buf,w
  3069  03CF  3880               	iorlw	128
  3070  03D0  00F6               	movwf	??_waitFlag
  3071  03D1  0876               	movf	??_waitFlag,w
  3072  03D2  00BC               	movwf	waitFlag@buf
  3073  03D3                     l2783:	
  3074  03D3  3001               	movlw	1
  3075  03D4  07A2               	addwf	waitFlag@j,f
  3076  03D5  1803               	skipnc
  3077  03D6  0AA3               	incf	waitFlag@j+1,f
  3078  03D7  3000               	movlw	0
  3079  03D8  07A3               	addwf	waitFlag@j+1,f
  3080  03D9  3000               	movlw	0
  3081  03DA  0223               	subwf	waitFlag@j+1,w
  3082  03DB  3008               	movlw	8
  3083  03DC  1903               	skipnz
  3084  03DD  0222               	subwf	waitFlag@j,w
  3085  03DE  1C03               	skipc
  3086  03DF  2BB8               	goto	l2773
  3087  03E0                     l2787:	
  3088                           
  3089                           ;decode_AX25.c: 92: }
  3090                           ;decode_AX25.c: 93: }
  3091                           ;decode_AX25.c: 94: if(buf == ("JQ1YCZ"[1] << 1)){
  3092  03E0  3013               	movlw	low (((STR_1+1)-__stringbase)| (0+32768))
  3093  03E1  0084               	movwf	4
  3094  03E2  120A  158A  2000  120A  118A  	fcall	stringdir
  3095  03E7  00F6               	movwf	??_waitFlag
  3096  03E8  01F7               	clrf	??_waitFlag+1
  3097  03E9  1003               	clrc
  3098  03EA  0DF6               	rlf	??_waitFlag,f
  3099  03EB  0DF7               	rlf	??_waitFlag+1,f
  3100  03EC  083C               	movf	waitFlag@buf,w
  3101  03ED  00F8               	movwf	??_waitFlag+2
  3102  03EE  01F9               	clrf	??_waitFlag+3
  3103  03EF  0877               	movf	??_waitFlag+1,w
  3104  03F0  0679               	xorwf	??_waitFlag+3,w
  3105  03F1  1D03               	skipz
  3106  03F2  2BF5               	goto	u2245
  3107  03F3  0876               	movf	??_waitFlag,w
  3108  03F4  0678               	xorwf	??_waitFlag+2,w
  3109  03F5                     u2245:	
  3110  03F5  1D03               	skipz
  3111  03F6  2D64               	goto	l2909
  3112                           
  3113                           ;decode_AX25.c: 95: dPacket[dPacketnum] = buf;
  3114  03F7  083C               	movf	waitFlag@buf,w
  3115  03F8  00F6               	movwf	??_waitFlag
  3116  03F9  0866               	movf	_dPacketnum,w
  3117  03FA  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3118  03FB  0084               	movwf	4
  3119  03FC  0876               	movf	??_waitFlag,w
  3120  03FD  1783               	bsf	3,7	;select IRP bank3
  3121  03FE  0080               	movwf	0
  3122                           
  3123                           ;decode_AX25.c: 96: dPacketnum ++;
  3124  03FF  3001               	movlw	1
  3125  0400  07E6               	addwf	_dPacketnum,f
  3126  0401  1803               	skipnc
  3127  0402  0AE7               	incf	_dPacketnum+1,f
  3128  0403  3000               	movlw	0
  3129  0404  07E7               	addwf	_dPacketnum+1,f
  3130                           
  3131                           ;decode_AX25.c: 97: for(UINT j=0;j<8;j++){
  3132  0405  01A4               	clrf	waitFlag@j_111
  3133  0406  01A5               	clrf	waitFlag@j_111+1
  3134  0407  3000               	movlw	0
  3135  0408  0225               	subwf	waitFlag@j_111+1,w
  3136  0409  3008               	movlw	8
  3137  040A  1903               	skipnz
  3138  040B  0224               	subwf	waitFlag@j_111,w
  3139  040C  1803               	btfsc	3,0
  3140  040D  2C36               	goto	l2813
  3141  040E                     l2799:	
  3142                           
  3143                           ;decode_AX25.c: 98: flag_judge = getbit();
  3144  040E  120A  158A  227E  120A  118A  	fcall	_getbit
  3145  0413  0871               	movf	?_getbit+1,w
  3146  0414  1283               	bcf	3,5	;RP0=0, select bank0
  3147  0415  1303               	bcf	3,6	;RP1=0, select bank0
  3148  0416  00BB               	movwf	waitFlag@flag_judge+1
  3149  0417  0870               	movf	?_getbit,w
  3150  0418  00BA               	movwf	waitFlag@flag_judge
  3151                           
  3152                           ;decode_AX25.c: 99: buf = buf >> 1;
  3153  0419  083C               	movf	waitFlag@buf,w
  3154  041A  00F6               	movwf	??_waitFlag
  3155  041B  1003               	clrc
  3156  041C  0C76               	rrf	??_waitFlag,w
  3157  041D  00F7               	movwf	??_waitFlag+1
  3158  041E  0877               	movf	??_waitFlag+1,w
  3159  041F  00BC               	movwf	waitFlag@buf
  3160                           
  3161                           ;decode_AX25.c: 101: buf = buf | 0x00;
  3162  0420  083A               	movf	waitFlag@flag_judge,w
  3163  0421  043B               	iorwf	waitFlag@flag_judge+1,w
  3164  0422  1903               	btfsc	3,2
  3165  0423  2C29               	goto	l2809
  3166                           
  3167                           ;decode_AX25.c: 103: buf = buf | 0x80;
  3168                           
  3169                           ;decode_AX25.c: 102: }else{
  3170  0424  083C               	movf	waitFlag@buf,w
  3171  0425  3880               	iorlw	128
  3172  0426  00F6               	movwf	??_waitFlag
  3173  0427  0876               	movf	??_waitFlag,w
  3174  0428  00BC               	movwf	waitFlag@buf
  3175  0429                     l2809:	
  3176  0429  3001               	movlw	1
  3177  042A  07A4               	addwf	waitFlag@j_111,f
  3178  042B  1803               	skipnc
  3179  042C  0AA5               	incf	waitFlag@j_111+1,f
  3180  042D  3000               	movlw	0
  3181  042E  07A5               	addwf	waitFlag@j_111+1,f
  3182  042F  3000               	movlw	0
  3183  0430  0225               	subwf	waitFlag@j_111+1,w
  3184  0431  3008               	movlw	8
  3185  0432  1903               	skipnz
  3186  0433  0224               	subwf	waitFlag@j_111,w
  3187  0434  1C03               	skipc
  3188  0435  2C0E               	goto	l2799
  3189  0436                     l2813:	
  3190                           
  3191                           ;decode_AX25.c: 104: }
  3192                           ;decode_AX25.c: 105: }
  3193                           ;decode_AX25.c: 106: if(buf == ("JQ1YCZ"[2] << 1)){
  3194  0436  3014               	movlw	low (((STR_1+2)-__stringbase)| (0+32768))
  3195  0437  0084               	movwf	4
  3196  0438  120A  158A  2000  120A  118A  	fcall	stringdir
  3197  043D  00F6               	movwf	??_waitFlag
  3198  043E  01F7               	clrf	??_waitFlag+1
  3199  043F  1003               	clrc
  3200  0440  0DF6               	rlf	??_waitFlag,f
  3201  0441  0DF7               	rlf	??_waitFlag+1,f
  3202  0442  083C               	movf	waitFlag@buf,w
  3203  0443  00F8               	movwf	??_waitFlag+2
  3204  0444  01F9               	clrf	??_waitFlag+3
  3205  0445  0877               	movf	??_waitFlag+1,w
  3206  0446  0679               	xorwf	??_waitFlag+3,w
  3207  0447  1D03               	skipz
  3208  0448  2C4B               	goto	u2285
  3209  0449  0876               	movf	??_waitFlag,w
  3210  044A  0678               	xorwf	??_waitFlag+2,w
  3211  044B                     u2285:	
  3212  044B  1D03               	skipz
  3213  044C  2D64               	goto	l2909
  3214                           
  3215                           ;decode_AX25.c: 107: dPacket[dPacketnum] = buf;
  3216  044D  083C               	movf	waitFlag@buf,w
  3217  044E  00F6               	movwf	??_waitFlag
  3218  044F  0866               	movf	_dPacketnum,w
  3219  0450  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3220  0451  0084               	movwf	4
  3221  0452  0876               	movf	??_waitFlag,w
  3222  0453  1783               	bsf	3,7	;select IRP bank3
  3223  0454  0080               	movwf	0
  3224                           
  3225                           ;decode_AX25.c: 108: dPacketnum ++;
  3226  0455  3001               	movlw	1
  3227  0456  07E6               	addwf	_dPacketnum,f
  3228  0457  1803               	skipnc
  3229  0458  0AE7               	incf	_dPacketnum+1,f
  3230  0459  3000               	movlw	0
  3231  045A  07E7               	addwf	_dPacketnum+1,f
  3232                           
  3233                           ;decode_AX25.c: 109: for(UINT j=0;j<8;j++){
  3234  045B  01A6               	clrf	waitFlag@j_113
  3235  045C  01A7               	clrf	waitFlag@j_113+1
  3236  045D  3000               	movlw	0
  3237  045E  0227               	subwf	waitFlag@j_113+1,w
  3238  045F  3008               	movlw	8
  3239  0460  1903               	skipnz
  3240  0461  0226               	subwf	waitFlag@j_113,w
  3241  0462  1803               	btfsc	3,0
  3242  0463  2C8C               	goto	l2839
  3243  0464                     l2825:	
  3244                           
  3245                           ;decode_AX25.c: 110: flag_judge = getbit();
  3246  0464  120A  158A  227E  120A  118A  	fcall	_getbit
  3247  0469  0871               	movf	?_getbit+1,w
  3248  046A  1283               	bcf	3,5	;RP0=0, select bank0
  3249  046B  1303               	bcf	3,6	;RP1=0, select bank0
  3250  046C  00BB               	movwf	waitFlag@flag_judge+1
  3251  046D  0870               	movf	?_getbit,w
  3252  046E  00BA               	movwf	waitFlag@flag_judge
  3253                           
  3254                           ;decode_AX25.c: 111: buf = buf >> 1;
  3255  046F  083C               	movf	waitFlag@buf,w
  3256  0470  00F6               	movwf	??_waitFlag
  3257  0471  1003               	clrc
  3258  0472  0C76               	rrf	??_waitFlag,w
  3259  0473  00F7               	movwf	??_waitFlag+1
  3260  0474  0877               	movf	??_waitFlag+1,w
  3261  0475  00BC               	movwf	waitFlag@buf
  3262                           
  3263                           ;decode_AX25.c: 113: buf = buf | 0x00;
  3264  0476  083A               	movf	waitFlag@flag_judge,w
  3265  0477  043B               	iorwf	waitFlag@flag_judge+1,w
  3266  0478  1903               	btfsc	3,2
  3267  0479  2C7F               	goto	l2835
  3268                           
  3269                           ;decode_AX25.c: 115: buf = buf | 0x80;
  3270                           
  3271                           ;decode_AX25.c: 114: }else{
  3272  047A  083C               	movf	waitFlag@buf,w
  3273  047B  3880               	iorlw	128
  3274  047C  00F6               	movwf	??_waitFlag
  3275  047D  0876               	movf	??_waitFlag,w
  3276  047E  00BC               	movwf	waitFlag@buf
  3277  047F                     l2835:	
  3278  047F  3001               	movlw	1
  3279  0480  07A6               	addwf	waitFlag@j_113,f
  3280  0481  1803               	skipnc
  3281  0482  0AA7               	incf	waitFlag@j_113+1,f
  3282  0483  3000               	movlw	0
  3283  0484  07A7               	addwf	waitFlag@j_113+1,f
  3284  0485  3000               	movlw	0
  3285  0486  0227               	subwf	waitFlag@j_113+1,w
  3286  0487  3008               	movlw	8
  3287  0488  1903               	skipnz
  3288  0489  0226               	subwf	waitFlag@j_113,w
  3289  048A  1C03               	skipc
  3290  048B  2C64               	goto	l2825
  3291  048C                     l2839:	
  3292                           
  3293                           ;decode_AX25.c: 116: }
  3294                           ;decode_AX25.c: 117: }
  3295                           ;decode_AX25.c: 118: if(buf == ("JQ1YCZ"[3] << 1)){
  3296  048C  3015               	movlw	low (((STR_1+3)-__stringbase)| (0+32768))
  3297  048D  0084               	movwf	4
  3298  048E  120A  158A  2000  120A  118A  	fcall	stringdir
  3299  0493  00F6               	movwf	??_waitFlag
  3300  0494  01F7               	clrf	??_waitFlag+1
  3301  0495  1003               	clrc
  3302  0496  0DF6               	rlf	??_waitFlag,f
  3303  0497  0DF7               	rlf	??_waitFlag+1,f
  3304  0498  083C               	movf	waitFlag@buf,w
  3305  0499  00F8               	movwf	??_waitFlag+2
  3306  049A  01F9               	clrf	??_waitFlag+3
  3307  049B  0877               	movf	??_waitFlag+1,w
  3308  049C  0679               	xorwf	??_waitFlag+3,w
  3309  049D  1D03               	skipz
  3310  049E  2CA1               	goto	u2325
  3311  049F  0876               	movf	??_waitFlag,w
  3312  04A0  0678               	xorwf	??_waitFlag+2,w
  3313  04A1                     u2325:	
  3314  04A1  1D03               	skipz
  3315  04A2  2D64               	goto	l2909
  3316                           
  3317                           ;decode_AX25.c: 119: dPacket[dPacketnum] = buf;
  3318  04A3  083C               	movf	waitFlag@buf,w
  3319  04A4  00F6               	movwf	??_waitFlag
  3320  04A5  0866               	movf	_dPacketnum,w
  3321  04A6  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3322  04A7  0084               	movwf	4
  3323  04A8  0876               	movf	??_waitFlag,w
  3324  04A9  1783               	bsf	3,7	;select IRP bank3
  3325  04AA  0080               	movwf	0
  3326                           
  3327                           ;decode_AX25.c: 120: dPacketnum ++;
  3328  04AB  3001               	movlw	1
  3329  04AC  07E6               	addwf	_dPacketnum,f
  3330  04AD  1803               	skipnc
  3331  04AE  0AE7               	incf	_dPacketnum+1,f
  3332  04AF  3000               	movlw	0
  3333  04B0  07E7               	addwf	_dPacketnum+1,f
  3334                           
  3335                           ;decode_AX25.c: 121: for(UINT j=0;j<8;j++){
  3336  04B1  01A8               	clrf	waitFlag@j_115
  3337  04B2  01A9               	clrf	waitFlag@j_115+1
  3338  04B3  3000               	movlw	0
  3339  04B4  0229               	subwf	waitFlag@j_115+1,w
  3340  04B5  3008               	movlw	8
  3341  04B6  1903               	skipnz
  3342  04B7  0228               	subwf	waitFlag@j_115,w
  3343  04B8  1803               	btfsc	3,0
  3344  04B9  2CE2               	goto	l2865
  3345  04BA                     l2851:	
  3346                           
  3347                           ;decode_AX25.c: 122: flag_judge = getbit();
  3348  04BA  120A  158A  227E  120A  118A  	fcall	_getbit
  3349  04BF  0871               	movf	?_getbit+1,w
  3350  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  3351  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  3352  04C2  00BB               	movwf	waitFlag@flag_judge+1
  3353  04C3  0870               	movf	?_getbit,w
  3354  04C4  00BA               	movwf	waitFlag@flag_judge
  3355                           
  3356                           ;decode_AX25.c: 123: buf = buf >> 1;
  3357  04C5  083C               	movf	waitFlag@buf,w
  3358  04C6  00F6               	movwf	??_waitFlag
  3359  04C7  1003               	clrc
  3360  04C8  0C76               	rrf	??_waitFlag,w
  3361  04C9  00F7               	movwf	??_waitFlag+1
  3362  04CA  0877               	movf	??_waitFlag+1,w
  3363  04CB  00BC               	movwf	waitFlag@buf
  3364                           
  3365                           ;decode_AX25.c: 125: buf = buf | 0x00;
  3366  04CC  083A               	movf	waitFlag@flag_judge,w
  3367  04CD  043B               	iorwf	waitFlag@flag_judge+1,w
  3368  04CE  1903               	btfsc	3,2
  3369  04CF  2CD5               	goto	l2861
  3370                           
  3371                           ;decode_AX25.c: 127: buf = buf | 0x80;
  3372                           
  3373                           ;decode_AX25.c: 126: }else{
  3374  04D0  083C               	movf	waitFlag@buf,w
  3375  04D1  3880               	iorlw	128
  3376  04D2  00F6               	movwf	??_waitFlag
  3377  04D3  0876               	movf	??_waitFlag,w
  3378  04D4  00BC               	movwf	waitFlag@buf
  3379  04D5                     l2861:	
  3380  04D5  3001               	movlw	1
  3381  04D6  07A8               	addwf	waitFlag@j_115,f
  3382  04D7  1803               	skipnc
  3383  04D8  0AA9               	incf	waitFlag@j_115+1,f
  3384  04D9  3000               	movlw	0
  3385  04DA  07A9               	addwf	waitFlag@j_115+1,f
  3386  04DB  3000               	movlw	0
  3387  04DC  0229               	subwf	waitFlag@j_115+1,w
  3388  04DD  3008               	movlw	8
  3389  04DE  1903               	skipnz
  3390  04DF  0228               	subwf	waitFlag@j_115,w
  3391  04E0  1C03               	skipc
  3392  04E1  2CBA               	goto	l2851
  3393  04E2                     l2865:	
  3394                           
  3395                           ;decode_AX25.c: 128: }
  3396                           ;decode_AX25.c: 129: }
  3397                           ;decode_AX25.c: 130: if(buf == ("JQ1YCZ"[4] << 1)){
  3398  04E2  3016               	movlw	low (((STR_1+4)-__stringbase)| (0+32768))
  3399  04E3  0084               	movwf	4
  3400  04E4  120A  158A  2000  120A  118A  	fcall	stringdir
  3401  04E9  00F6               	movwf	??_waitFlag
  3402  04EA  01F7               	clrf	??_waitFlag+1
  3403  04EB  1003               	clrc
  3404  04EC  0DF6               	rlf	??_waitFlag,f
  3405  04ED  0DF7               	rlf	??_waitFlag+1,f
  3406  04EE  083C               	movf	waitFlag@buf,w
  3407  04EF  00F8               	movwf	??_waitFlag+2
  3408  04F0  01F9               	clrf	??_waitFlag+3
  3409  04F1  0877               	movf	??_waitFlag+1,w
  3410  04F2  0679               	xorwf	??_waitFlag+3,w
  3411  04F3  1D03               	skipz
  3412  04F4  2CF7               	goto	u2365
  3413  04F5  0876               	movf	??_waitFlag,w
  3414  04F6  0678               	xorwf	??_waitFlag+2,w
  3415  04F7                     u2365:	
  3416  04F7  1D03               	skipz
  3417  04F8  2D64               	goto	l2909
  3418                           
  3419                           ;decode_AX25.c: 131: dPacket[dPacketnum] = buf;
  3420  04F9  083C               	movf	waitFlag@buf,w
  3421  04FA  00F6               	movwf	??_waitFlag
  3422  04FB  0866               	movf	_dPacketnum,w
  3423  04FC  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3424  04FD  0084               	movwf	4
  3425  04FE  0876               	movf	??_waitFlag,w
  3426  04FF  1783               	bsf	3,7	;select IRP bank3
  3427  0500  0080               	movwf	0
  3428                           
  3429                           ;decode_AX25.c: 132: dPacketnum ++;
  3430  0501  3001               	movlw	1
  3431  0502  07E6               	addwf	_dPacketnum,f
  3432  0503  1803               	skipnc
  3433  0504  0AE7               	incf	_dPacketnum+1,f
  3434  0505  3000               	movlw	0
  3435  0506  07E7               	addwf	_dPacketnum+1,f
  3436                           
  3437                           ;decode_AX25.c: 133: for(UINT j=0;j<8;j++){
  3438  0507  01AA               	clrf	waitFlag@j_117
  3439  0508  01AB               	clrf	waitFlag@j_117+1
  3440  0509  3000               	movlw	0
  3441  050A  022B               	subwf	waitFlag@j_117+1,w
  3442  050B  3008               	movlw	8
  3443  050C  1903               	skipnz
  3444  050D  022A               	subwf	waitFlag@j_117,w
  3445  050E  1803               	btfsc	3,0
  3446  050F  2D38               	goto	l2891
  3447  0510                     l2877:	
  3448                           
  3449                           ;decode_AX25.c: 134: flag_judge = getbit();
  3450  0510  120A  158A  227E  120A  118A  	fcall	_getbit
  3451  0515  0871               	movf	?_getbit+1,w
  3452  0516  1283               	bcf	3,5	;RP0=0, select bank0
  3453  0517  1303               	bcf	3,6	;RP1=0, select bank0
  3454  0518  00BB               	movwf	waitFlag@flag_judge+1
  3455  0519  0870               	movf	?_getbit,w
  3456  051A  00BA               	movwf	waitFlag@flag_judge
  3457                           
  3458                           ;decode_AX25.c: 135: buf = buf >> 1;
  3459  051B  083C               	movf	waitFlag@buf,w
  3460  051C  00F6               	movwf	??_waitFlag
  3461  051D  1003               	clrc
  3462  051E  0C76               	rrf	??_waitFlag,w
  3463  051F  00F7               	movwf	??_waitFlag+1
  3464  0520  0877               	movf	??_waitFlag+1,w
  3465  0521  00BC               	movwf	waitFlag@buf
  3466                           
  3467                           ;decode_AX25.c: 137: buf = buf | 0x00;
  3468  0522  083A               	movf	waitFlag@flag_judge,w
  3469  0523  043B               	iorwf	waitFlag@flag_judge+1,w
  3470  0524  1903               	btfsc	3,2
  3471  0525  2D2B               	goto	l2887
  3472                           
  3473                           ;decode_AX25.c: 139: buf = buf | 0x80;
  3474                           
  3475                           ;decode_AX25.c: 138: }else{
  3476  0526  083C               	movf	waitFlag@buf,w
  3477  0527  3880               	iorlw	128
  3478  0528  00F6               	movwf	??_waitFlag
  3479  0529  0876               	movf	??_waitFlag,w
  3480  052A  00BC               	movwf	waitFlag@buf
  3481  052B                     l2887:	
  3482  052B  3001               	movlw	1
  3483  052C  07AA               	addwf	waitFlag@j_117,f
  3484  052D  1803               	skipnc
  3485  052E  0AAB               	incf	waitFlag@j_117+1,f
  3486  052F  3000               	movlw	0
  3487  0530  07AB               	addwf	waitFlag@j_117+1,f
  3488  0531  3000               	movlw	0
  3489  0532  022B               	subwf	waitFlag@j_117+1,w
  3490  0533  3008               	movlw	8
  3491  0534  1903               	skipnz
  3492  0535  022A               	subwf	waitFlag@j_117,w
  3493  0536  1C03               	skipc
  3494  0537  2D10               	goto	l2877
  3495  0538                     l2891:	
  3496                           
  3497                           ;decode_AX25.c: 140: }
  3498                           ;decode_AX25.c: 141: }
  3499                           ;decode_AX25.c: 142: if(buf == ("JQ1YCZ"[5] << 1)){
  3500  0538  3017               	movlw	low (((STR_1+5)-__stringbase)| (0+32768))
  3501  0539  0084               	movwf	4
  3502  053A  120A  158A  2000  120A  118A  	fcall	stringdir
  3503  053F  00F6               	movwf	??_waitFlag
  3504  0540  01F7               	clrf	??_waitFlag+1
  3505  0541  1003               	clrc
  3506  0542  0DF6               	rlf	??_waitFlag,f
  3507  0543  0DF7               	rlf	??_waitFlag+1,f
  3508  0544  083C               	movf	waitFlag@buf,w
  3509  0545  00F8               	movwf	??_waitFlag+2
  3510  0546  01F9               	clrf	??_waitFlag+3
  3511  0547  0877               	movf	??_waitFlag+1,w
  3512  0548  0679               	xorwf	??_waitFlag+3,w
  3513  0549  1D03               	skipz
  3514  054A  2D4D               	goto	u2405
  3515  054B  0876               	movf	??_waitFlag,w
  3516  054C  0678               	xorwf	??_waitFlag+2,w
  3517  054D                     u2405:	
  3518  054D  1D03               	skipz
  3519  054E  2D64               	goto	l2909
  3520                           
  3521                           ;decode_AX25.c: 143: dPacket[dPacketnum] = buf;
  3522  054F  083C               	movf	waitFlag@buf,w
  3523  0550  00F6               	movwf	??_waitFlag
  3524  0551  0866               	movf	_dPacketnum,w
  3525  0552  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3526  0553  0084               	movwf	4
  3527  0554  0876               	movf	??_waitFlag,w
  3528  0555  1783               	bsf	3,7	;select IRP bank3
  3529  0556  0080               	movwf	0
  3530                           
  3531                           ;decode_AX25.c: 144: dPacketnum ++;
  3532  0557  3001               	movlw	1
  3533  0558  07E6               	addwf	_dPacketnum,f
  3534  0559  1803               	skipnc
  3535  055A  0AE7               	incf	_dPacketnum+1,f
  3536  055B  3000               	movlw	0
  3537  055C  07E7               	addwf	_dPacketnum+1,f
  3538                           
  3539                           ;decode_AX25.c: 145: rcv_state ++;
  3540  055D  3001               	movlw	1
  3541  055E  07EA               	addwf	_rcv_state,f
  3542  055F  1803               	skipnc
  3543  0560  0AEB               	incf	_rcv_state+1,f
  3544  0561  3000               	movlw	0
  3545  0562  07EB               	addwf	_rcv_state+1,f
  3546                           
  3547                           ;decode_AX25.c: 146: }else{
  3548  0563  2D66               	goto	l207
  3549  0564                     l2909:	
  3550                           ;decode_AX25.c: 160: }
  3551                           ;decode_AX25.c: 161: }else{
  3552                           
  3553                           ;decode_AX25.c: 159: dPacketnum = 0;
  3554                           
  3555                           ;decode_AX25.c: 157: }
  3556                           ;decode_AX25.c: 158: }else{
  3557                           
  3558                           ;decode_AX25.c: 156: dPacketnum = 0;
  3559                           
  3560                           ;decode_AX25.c: 154: }
  3561                           ;decode_AX25.c: 155: }else{
  3562                           
  3563                           ;decode_AX25.c: 153: dPacketnum = 0;
  3564                           
  3565                           ;decode_AX25.c: 151: }
  3566                           ;decode_AX25.c: 152: }else{
  3567                           
  3568                           ;decode_AX25.c: 150: dPacketnum = 0;
  3569                           
  3570                           ;decode_AX25.c: 148: }
  3571                           ;decode_AX25.c: 149: }else{
  3572                           
  3573                           ;decode_AX25.c: 147: dPacketnum = 0;
  3574                           
  3575                           
  3576                           ;decode_AX25.c: 162: dPacketnum = 0;
  3577  0564  01E6               	clrf	_dPacketnum
  3578  0565  01E7               	clrf	_dPacketnum+1
  3579  0566                     l207:	
  3580                           
  3581                           ;decode_AX25.c: 163: }
  3582                           ;decode_AX25.c: 165: for(UINT j=0;j<8;j++){
  3583  0566  01AC               	clrf	waitFlag@j_119
  3584  0567  01AD               	clrf	waitFlag@j_119+1
  3585  0568  3000               	movlw	0
  3586  0569  022D               	subwf	waitFlag@j_119+1,w
  3587  056A  3008               	movlw	8
  3588  056B  1903               	skipnz
  3589  056C  022C               	subwf	waitFlag@j_119,w
  3590  056D  1803               	btfsc	3,0
  3591  056E  2D97               	goto	l2929
  3592  056F                     l2915:	
  3593                           
  3594                           ;decode_AX25.c: 166: flag_judge = getbit();
  3595  056F  120A  158A  227E  120A  118A  	fcall	_getbit
  3596  0574  0871               	movf	?_getbit+1,w
  3597  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3598  0576  1303               	bcf	3,6	;RP1=0, select bank0
  3599  0577  00BB               	movwf	waitFlag@flag_judge+1
  3600  0578  0870               	movf	?_getbit,w
  3601  0579  00BA               	movwf	waitFlag@flag_judge
  3602                           
  3603                           ;decode_AX25.c: 167: buf = buf >> 1;
  3604  057A  083C               	movf	waitFlag@buf,w
  3605  057B  00F6               	movwf	??_waitFlag
  3606  057C  1003               	clrc
  3607  057D  0C76               	rrf	??_waitFlag,w
  3608  057E  00F7               	movwf	??_waitFlag+1
  3609  057F  0877               	movf	??_waitFlag+1,w
  3610  0580  00BC               	movwf	waitFlag@buf
  3611                           
  3612                           ;decode_AX25.c: 169: buf = buf | 0x00;
  3613  0581  083A               	movf	waitFlag@flag_judge,w
  3614  0582  043B               	iorwf	waitFlag@flag_judge+1,w
  3615  0583  1903               	btfsc	3,2
  3616  0584  2D8A               	goto	l2925
  3617                           
  3618                           ;decode_AX25.c: 171: buf = buf | 0x80;
  3619                           
  3620                           ;decode_AX25.c: 170: }else{
  3621  0585  083C               	movf	waitFlag@buf,w
  3622  0586  3880               	iorlw	128
  3623  0587  00F6               	movwf	??_waitFlag
  3624  0588  0876               	movf	??_waitFlag,w
  3625  0589  00BC               	movwf	waitFlag@buf
  3626  058A                     l2925:	
  3627  058A  3001               	movlw	1
  3628  058B  07AC               	addwf	waitFlag@j_119,f
  3629  058C  1803               	skipnc
  3630  058D  0AAD               	incf	waitFlag@j_119+1,f
  3631  058E  3000               	movlw	0
  3632  058F  07AD               	addwf	waitFlag@j_119+1,f
  3633  0590  3000               	movlw	0
  3634  0591  022D               	subwf	waitFlag@j_119+1,w
  3635  0592  3008               	movlw	8
  3636  0593  1903               	skipnz
  3637  0594  022C               	subwf	waitFlag@j_119,w
  3638  0595  1C03               	skipc
  3639  0596  2D6F               	goto	l2915
  3640  0597                     l2929:	
  3641                           
  3642                           ;decode_AX25.c: 172: }
  3643                           ;decode_AX25.c: 173: }
  3644                           ;decode_AX25.c: 174: dPacket[dPacketnum] = buf;
  3645  0597  083C               	movf	waitFlag@buf,w
  3646  0598  00F6               	movwf	??_waitFlag
  3647  0599  0866               	movf	_dPacketnum,w
  3648  059A  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3649  059B  0084               	movwf	4
  3650  059C  0876               	movf	??_waitFlag,w
  3651  059D  1783               	bsf	3,7	;select IRP bank3
  3652  059E  0080               	movwf	0
  3653                           
  3654                           ;decode_AX25.c: 175: dPacketnum ++;
  3655  059F  3001               	movlw	1
  3656  05A0  07E6               	addwf	_dPacketnum,f
  3657  05A1  1803               	skipnc
  3658  05A2  0AE7               	incf	_dPacketnum+1,f
  3659  05A3  3000               	movlw	0
  3660  05A4  07E7               	addwf	_dPacketnum+1,f
  3661                           
  3662                           ;decode_AX25.c: 176: for(UINT j=0;j<8;j++){
  3663  05A5  01AE               	clrf	waitFlag@j_120
  3664  05A6  01AF               	clrf	waitFlag@j_120+1
  3665  05A7  3000               	movlw	0
  3666  05A8  022F               	subwf	waitFlag@j_120+1,w
  3667  05A9  3008               	movlw	8
  3668  05AA  1903               	skipnz
  3669  05AB  022E               	subwf	waitFlag@j_120,w
  3670  05AC  1803               	btfsc	3,0
  3671  05AD  2DD6               	goto	l2953
  3672  05AE                     l2939:	
  3673                           
  3674                           ;decode_AX25.c: 177: flag_judge = getbit();
  3675  05AE  120A  158A  227E  120A  118A  	fcall	_getbit
  3676  05B3  0871               	movf	?_getbit+1,w
  3677  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  3678  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  3679  05B6  00BB               	movwf	waitFlag@flag_judge+1
  3680  05B7  0870               	movf	?_getbit,w
  3681  05B8  00BA               	movwf	waitFlag@flag_judge
  3682                           
  3683                           ;decode_AX25.c: 178: buf = buf >> 1;
  3684  05B9  083C               	movf	waitFlag@buf,w
  3685  05BA  00F6               	movwf	??_waitFlag
  3686  05BB  1003               	clrc
  3687  05BC  0C76               	rrf	??_waitFlag,w
  3688  05BD  00F7               	movwf	??_waitFlag+1
  3689  05BE  0877               	movf	??_waitFlag+1,w
  3690  05BF  00BC               	movwf	waitFlag@buf
  3691                           
  3692                           ;decode_AX25.c: 180: buf = buf | 0x00;
  3693  05C0  083A               	movf	waitFlag@flag_judge,w
  3694  05C1  043B               	iorwf	waitFlag@flag_judge+1,w
  3695  05C2  1903               	btfsc	3,2
  3696  05C3  2DC9               	goto	l2949
  3697                           
  3698                           ;decode_AX25.c: 182: buf = buf | 0x80;
  3699                           
  3700                           ;decode_AX25.c: 181: }else{
  3701  05C4  083C               	movf	waitFlag@buf,w
  3702  05C5  3880               	iorlw	128
  3703  05C6  00F6               	movwf	??_waitFlag
  3704  05C7  0876               	movf	??_waitFlag,w
  3705  05C8  00BC               	movwf	waitFlag@buf
  3706  05C9                     l2949:	
  3707  05C9  3001               	movlw	1
  3708  05CA  07AE               	addwf	waitFlag@j_120,f
  3709  05CB  1803               	skipnc
  3710  05CC  0AAF               	incf	waitFlag@j_120+1,f
  3711  05CD  3000               	movlw	0
  3712  05CE  07AF               	addwf	waitFlag@j_120+1,f
  3713  05CF  3000               	movlw	0
  3714  05D0  022F               	subwf	waitFlag@j_120+1,w
  3715  05D1  3008               	movlw	8
  3716  05D2  1903               	skipnz
  3717  05D3  022E               	subwf	waitFlag@j_120,w
  3718  05D4  1C03               	skipc
  3719  05D5  2DAE               	goto	l2939
  3720  05D6                     l2953:	
  3721                           
  3722                           ;decode_AX25.c: 183: }
  3723                           ;decode_AX25.c: 184: }
  3724                           ;decode_AX25.c: 185: if(buf == ("JQ1ZHX"[0] << 1)){
  3725  05D6  300B               	movlw	low (STR_7-__stringbase)
  3726  05D7  0084               	movwf	4
  3727  05D8  120A  158A  2000  120A  118A  	fcall	stringdir
  3728  05DD  00F6               	movwf	??_waitFlag
  3729  05DE  01F7               	clrf	??_waitFlag+1
  3730  05DF  1003               	clrc
  3731  05E0  0DF6               	rlf	??_waitFlag,f
  3732  05E1  0DF7               	rlf	??_waitFlag+1,f
  3733  05E2  083C               	movf	waitFlag@buf,w
  3734  05E3  00F8               	movwf	??_waitFlag+2
  3735  05E4  01F9               	clrf	??_waitFlag+3
  3736  05E5  0877               	movf	??_waitFlag+1,w
  3737  05E6  0679               	xorwf	??_waitFlag+3,w
  3738  05E7  1D03               	skipz
  3739  05E8  2DEB               	goto	u2475
  3740  05E9  0876               	movf	??_waitFlag,w
  3741  05EA  0678               	xorwf	??_waitFlag+2,w
  3742  05EB                     u2475:	
  3743  05EB  1D03               	skipz
  3744  05EC  2FB0               	goto	l3101
  3745                           
  3746                           ;decode_AX25.c: 186: dPacket[dPacketnum] = buf;
  3747  05ED  083C               	movf	waitFlag@buf,w
  3748  05EE  00F6               	movwf	??_waitFlag
  3749  05EF  0866               	movf	_dPacketnum,w
  3750  05F0  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3751  05F1  0084               	movwf	4
  3752  05F2  0876               	movf	??_waitFlag,w
  3753  05F3  1783               	bsf	3,7	;select IRP bank3
  3754  05F4  0080               	movwf	0
  3755                           
  3756                           ;decode_AX25.c: 187: dPacketnum ++;
  3757  05F5  3001               	movlw	1
  3758  05F6  07E6               	addwf	_dPacketnum,f
  3759  05F7  1803               	skipnc
  3760  05F8  0AE7               	incf	_dPacketnum+1,f
  3761  05F9  3000               	movlw	0
  3762  05FA  07E7               	addwf	_dPacketnum+1,f
  3763                           
  3764                           ;decode_AX25.c: 188: for(UINT j=0;j<8;j++){
  3765  05FB  01B0               	clrf	waitFlag@j_122
  3766  05FC  01B1               	clrf	waitFlag@j_122+1
  3767  05FD  3000               	movlw	0
  3768  05FE  0231               	subwf	waitFlag@j_122+1,w
  3769  05FF  3008               	movlw	8
  3770  0600  1903               	skipnz
  3771  0601  0230               	subwf	waitFlag@j_122,w
  3772  0602  1803               	btfsc	3,0
  3773  0603  2E2C               	goto	l2979
  3774  0604                     l2965:	
  3775                           
  3776                           ;decode_AX25.c: 189: flag_judge = getbit();
  3777  0604  120A  158A  227E  120A  118A  	fcall	_getbit
  3778  0609  0871               	movf	?_getbit+1,w
  3779  060A  1283               	bcf	3,5	;RP0=0, select bank0
  3780  060B  1303               	bcf	3,6	;RP1=0, select bank0
  3781  060C  00BB               	movwf	waitFlag@flag_judge+1
  3782  060D  0870               	movf	?_getbit,w
  3783  060E  00BA               	movwf	waitFlag@flag_judge
  3784                           
  3785                           ;decode_AX25.c: 190: buf = buf >> 1;
  3786  060F  083C               	movf	waitFlag@buf,w
  3787  0610  00F6               	movwf	??_waitFlag
  3788  0611  1003               	clrc
  3789  0612  0C76               	rrf	??_waitFlag,w
  3790  0613  00F7               	movwf	??_waitFlag+1
  3791  0614  0877               	movf	??_waitFlag+1,w
  3792  0615  00BC               	movwf	waitFlag@buf
  3793                           
  3794                           ;decode_AX25.c: 192: buf = buf | 0x00;
  3795  0616  083A               	movf	waitFlag@flag_judge,w
  3796  0617  043B               	iorwf	waitFlag@flag_judge+1,w
  3797  0618  1903               	btfsc	3,2
  3798  0619  2E1F               	goto	l2975
  3799                           
  3800                           ;decode_AX25.c: 194: buf = buf | 0x80;
  3801                           
  3802                           ;decode_AX25.c: 193: }else{
  3803  061A  083C               	movf	waitFlag@buf,w
  3804  061B  3880               	iorlw	128
  3805  061C  00F6               	movwf	??_waitFlag
  3806  061D  0876               	movf	??_waitFlag,w
  3807  061E  00BC               	movwf	waitFlag@buf
  3808  061F                     l2975:	
  3809  061F  3001               	movlw	1
  3810  0620  07B0               	addwf	waitFlag@j_122,f
  3811  0621  1803               	skipnc
  3812  0622  0AB1               	incf	waitFlag@j_122+1,f
  3813  0623  3000               	movlw	0
  3814  0624  07B1               	addwf	waitFlag@j_122+1,f
  3815  0625  3000               	movlw	0
  3816  0626  0231               	subwf	waitFlag@j_122+1,w
  3817  0627  3008               	movlw	8
  3818  0628  1903               	skipnz
  3819  0629  0230               	subwf	waitFlag@j_122,w
  3820  062A  1C03               	skipc
  3821  062B  2E04               	goto	l2965
  3822  062C                     l2979:	
  3823                           
  3824                           ;decode_AX25.c: 195: }
  3825                           ;decode_AX25.c: 196: }
  3826                           ;decode_AX25.c: 197: if(buf == ("JQ1ZHX"[1] << 1)){
  3827  062C  300C               	movlw	low (((STR_7+1)-__stringbase)| (0+32768))
  3828  062D  0084               	movwf	4
  3829  062E  120A  158A  2000  120A  118A  	fcall	stringdir
  3830  0633  00F6               	movwf	??_waitFlag
  3831  0634  01F7               	clrf	??_waitFlag+1
  3832  0635  1003               	clrc
  3833  0636  0DF6               	rlf	??_waitFlag,f
  3834  0637  0DF7               	rlf	??_waitFlag+1,f
  3835  0638  083C               	movf	waitFlag@buf,w
  3836  0639  00F8               	movwf	??_waitFlag+2
  3837  063A  01F9               	clrf	??_waitFlag+3
  3838  063B  0877               	movf	??_waitFlag+1,w
  3839  063C  0679               	xorwf	??_waitFlag+3,w
  3840  063D  1D03               	skipz
  3841  063E  2E41               	goto	u2515
  3842  063F  0876               	movf	??_waitFlag,w
  3843  0640  0678               	xorwf	??_waitFlag+2,w
  3844  0641                     u2515:	
  3845  0641  1D03               	skipz
  3846  0642  2FB0               	goto	l3101
  3847                           
  3848                           ;decode_AX25.c: 198: dPacket[dPacketnum] = buf;
  3849  0643  083C               	movf	waitFlag@buf,w
  3850  0644  00F6               	movwf	??_waitFlag
  3851  0645  0866               	movf	_dPacketnum,w
  3852  0646  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3853  0647  0084               	movwf	4
  3854  0648  0876               	movf	??_waitFlag,w
  3855  0649  1783               	bsf	3,7	;select IRP bank3
  3856  064A  0080               	movwf	0
  3857                           
  3858                           ;decode_AX25.c: 199: dPacketnum ++;
  3859  064B  3001               	movlw	1
  3860  064C  07E6               	addwf	_dPacketnum,f
  3861  064D  1803               	skipnc
  3862  064E  0AE7               	incf	_dPacketnum+1,f
  3863  064F  3000               	movlw	0
  3864  0650  07E7               	addwf	_dPacketnum+1,f
  3865                           
  3866                           ;decode_AX25.c: 200: for(UINT j=0;j<8;j++){
  3867  0651  01B2               	clrf	waitFlag@j_124
  3868  0652  01B3               	clrf	waitFlag@j_124+1
  3869  0653  3000               	movlw	0
  3870  0654  0233               	subwf	waitFlag@j_124+1,w
  3871  0655  3008               	movlw	8
  3872  0656  1903               	skipnz
  3873  0657  0232               	subwf	waitFlag@j_124,w
  3874  0658  1803               	btfsc	3,0
  3875  0659  2E82               	goto	l3005
  3876  065A                     l2991:	
  3877                           
  3878                           ;decode_AX25.c: 201: flag_judge = getbit();
  3879  065A  120A  158A  227E  120A  118A  	fcall	_getbit
  3880  065F  0871               	movf	?_getbit+1,w
  3881  0660  1283               	bcf	3,5	;RP0=0, select bank0
  3882  0661  1303               	bcf	3,6	;RP1=0, select bank0
  3883  0662  00BB               	movwf	waitFlag@flag_judge+1
  3884  0663  0870               	movf	?_getbit,w
  3885  0664  00BA               	movwf	waitFlag@flag_judge
  3886                           
  3887                           ;decode_AX25.c: 202: buf = buf >> 1;
  3888  0665  083C               	movf	waitFlag@buf,w
  3889  0666  00F6               	movwf	??_waitFlag
  3890  0667  1003               	clrc
  3891  0668  0C76               	rrf	??_waitFlag,w
  3892  0669  00F7               	movwf	??_waitFlag+1
  3893  066A  0877               	movf	??_waitFlag+1,w
  3894  066B  00BC               	movwf	waitFlag@buf
  3895                           
  3896                           ;decode_AX25.c: 204: buf = buf | 0x00;
  3897  066C  083A               	movf	waitFlag@flag_judge,w
  3898  066D  043B               	iorwf	waitFlag@flag_judge+1,w
  3899  066E  1903               	btfsc	3,2
  3900  066F  2E75               	goto	l3001
  3901                           
  3902                           ;decode_AX25.c: 206: buf = buf | 0x80;
  3903                           
  3904                           ;decode_AX25.c: 205: }else{
  3905  0670  083C               	movf	waitFlag@buf,w
  3906  0671  3880               	iorlw	128
  3907  0672  00F6               	movwf	??_waitFlag
  3908  0673  0876               	movf	??_waitFlag,w
  3909  0674  00BC               	movwf	waitFlag@buf
  3910  0675                     l3001:	
  3911  0675  3001               	movlw	1
  3912  0676  07B2               	addwf	waitFlag@j_124,f
  3913  0677  1803               	skipnc
  3914  0678  0AB3               	incf	waitFlag@j_124+1,f
  3915  0679  3000               	movlw	0
  3916  067A  07B3               	addwf	waitFlag@j_124+1,f
  3917  067B  3000               	movlw	0
  3918  067C  0233               	subwf	waitFlag@j_124+1,w
  3919  067D  3008               	movlw	8
  3920  067E  1903               	skipnz
  3921  067F  0232               	subwf	waitFlag@j_124,w
  3922  0680  1C03               	skipc
  3923  0681  2E5A               	goto	l2991
  3924  0682                     l3005:	
  3925                           
  3926                           ;decode_AX25.c: 207: }
  3927                           ;decode_AX25.c: 208: }
  3928                           ;decode_AX25.c: 209: if(buf == ("JQ1ZHX"[2] << 1)){
  3929  0682  300D               	movlw	low (((STR_7+2)-__stringbase)| (0+32768))
  3930  0683  0084               	movwf	4
  3931  0684  120A  158A  2000  120A  118A  	fcall	stringdir
  3932  0689  00F6               	movwf	??_waitFlag
  3933  068A  01F7               	clrf	??_waitFlag+1
  3934  068B  1003               	clrc
  3935  068C  0DF6               	rlf	??_waitFlag,f
  3936  068D  0DF7               	rlf	??_waitFlag+1,f
  3937  068E  083C               	movf	waitFlag@buf,w
  3938  068F  00F8               	movwf	??_waitFlag+2
  3939  0690  01F9               	clrf	??_waitFlag+3
  3940  0691  0877               	movf	??_waitFlag+1,w
  3941  0692  0679               	xorwf	??_waitFlag+3,w
  3942  0693  1D03               	skipz
  3943  0694  2E97               	goto	u2555
  3944  0695  0876               	movf	??_waitFlag,w
  3945  0696  0678               	xorwf	??_waitFlag+2,w
  3946  0697                     u2555:	
  3947  0697  1D03               	skipz
  3948  0698  2FB0               	goto	l3101
  3949                           
  3950                           ;decode_AX25.c: 210: dPacket[dPacketnum] = buf;
  3951  0699  083C               	movf	waitFlag@buf,w
  3952  069A  00F6               	movwf	??_waitFlag
  3953  069B  0866               	movf	_dPacketnum,w
  3954  069C  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3955  069D  0084               	movwf	4
  3956  069E  0876               	movf	??_waitFlag,w
  3957  069F  1783               	bsf	3,7	;select IRP bank3
  3958  06A0  0080               	movwf	0
  3959                           
  3960                           ;decode_AX25.c: 211: dPacketnum ++;
  3961  06A1  3001               	movlw	1
  3962  06A2  07E6               	addwf	_dPacketnum,f
  3963  06A3  1803               	skipnc
  3964  06A4  0AE7               	incf	_dPacketnum+1,f
  3965  06A5  3000               	movlw	0
  3966  06A6  07E7               	addwf	_dPacketnum+1,f
  3967                           
  3968                           ;decode_AX25.c: 212: for(UINT j=0;j<8;j++){
  3969  06A7  01B4               	clrf	waitFlag@j_126
  3970  06A8  01B5               	clrf	waitFlag@j_126+1
  3971  06A9  3000               	movlw	0
  3972  06AA  0235               	subwf	waitFlag@j_126+1,w
  3973  06AB  3008               	movlw	8
  3974  06AC  1903               	skipnz
  3975  06AD  0234               	subwf	waitFlag@j_126,w
  3976  06AE  1803               	btfsc	3,0
  3977  06AF  2ED8               	goto	l3031
  3978  06B0                     l3017:	
  3979                           
  3980                           ;decode_AX25.c: 213: flag_judge = getbit();
  3981  06B0  120A  158A  227E  120A  118A  	fcall	_getbit
  3982  06B5  0871               	movf	?_getbit+1,w
  3983  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  3984  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  3985  06B8  00BB               	movwf	waitFlag@flag_judge+1
  3986  06B9  0870               	movf	?_getbit,w
  3987  06BA  00BA               	movwf	waitFlag@flag_judge
  3988                           
  3989                           ;decode_AX25.c: 214: buf = buf >> 1;
  3990  06BB  083C               	movf	waitFlag@buf,w
  3991  06BC  00F6               	movwf	??_waitFlag
  3992  06BD  1003               	clrc
  3993  06BE  0C76               	rrf	??_waitFlag,w
  3994  06BF  00F7               	movwf	??_waitFlag+1
  3995  06C0  0877               	movf	??_waitFlag+1,w
  3996  06C1  00BC               	movwf	waitFlag@buf
  3997                           
  3998                           ;decode_AX25.c: 216: buf = buf | 0x00;
  3999  06C2  083A               	movf	waitFlag@flag_judge,w
  4000  06C3  043B               	iorwf	waitFlag@flag_judge+1,w
  4001  06C4  1903               	btfsc	3,2
  4002  06C5  2ECB               	goto	l3027
  4003                           
  4004                           ;decode_AX25.c: 218: buf = buf | 0x80;
  4005                           
  4006                           ;decode_AX25.c: 217: }else{
  4007  06C6  083C               	movf	waitFlag@buf,w
  4008  06C7  3880               	iorlw	128
  4009  06C8  00F6               	movwf	??_waitFlag
  4010  06C9  0876               	movf	??_waitFlag,w
  4011  06CA  00BC               	movwf	waitFlag@buf
  4012  06CB                     l3027:	
  4013  06CB  3001               	movlw	1
  4014  06CC  07B4               	addwf	waitFlag@j_126,f
  4015  06CD  1803               	skipnc
  4016  06CE  0AB5               	incf	waitFlag@j_126+1,f
  4017  06CF  3000               	movlw	0
  4018  06D0  07B5               	addwf	waitFlag@j_126+1,f
  4019  06D1  3000               	movlw	0
  4020  06D2  0235               	subwf	waitFlag@j_126+1,w
  4021  06D3  3008               	movlw	8
  4022  06D4  1903               	skipnz
  4023  06D5  0234               	subwf	waitFlag@j_126,w
  4024  06D6  1C03               	skipc
  4025  06D7  2EB0               	goto	l3017
  4026  06D8                     l3031:	
  4027                           
  4028                           ;decode_AX25.c: 219: }
  4029                           ;decode_AX25.c: 220: }
  4030                           ;decode_AX25.c: 221: if(buf == ("JQ1ZHX"[3] << 1)){
  4031  06D8  300E               	movlw	low (((STR_7+3)-__stringbase)| (0+32768))
  4032  06D9  0084               	movwf	4
  4033  06DA  120A  158A  2000  120A  118A  	fcall	stringdir
  4034  06DF  00F6               	movwf	??_waitFlag
  4035  06E0  01F7               	clrf	??_waitFlag+1
  4036  06E1  1003               	clrc
  4037  06E2  0DF6               	rlf	??_waitFlag,f
  4038  06E3  0DF7               	rlf	??_waitFlag+1,f
  4039  06E4  083C               	movf	waitFlag@buf,w
  4040  06E5  00F8               	movwf	??_waitFlag+2
  4041  06E6  01F9               	clrf	??_waitFlag+3
  4042  06E7  0877               	movf	??_waitFlag+1,w
  4043  06E8  0679               	xorwf	??_waitFlag+3,w
  4044  06E9  1D03               	skipz
  4045  06EA  2EED               	goto	u2595
  4046  06EB  0876               	movf	??_waitFlag,w
  4047  06EC  0678               	xorwf	??_waitFlag+2,w
  4048  06ED                     u2595:	
  4049  06ED  1D03               	skipz
  4050  06EE  2FB0               	goto	l3101
  4051                           
  4052                           ;decode_AX25.c: 222: dPacket[dPacketnum] = buf;
  4053  06EF  083C               	movf	waitFlag@buf,w
  4054  06F0  00F6               	movwf	??_waitFlag
  4055  06F1  0866               	movf	_dPacketnum,w
  4056  06F2  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4057  06F3  0084               	movwf	4
  4058  06F4  0876               	movf	??_waitFlag,w
  4059  06F5  1783               	bsf	3,7	;select IRP bank3
  4060  06F6  0080               	movwf	0
  4061                           
  4062                           ;decode_AX25.c: 223: dPacketnum ++;
  4063  06F7  3001               	movlw	1
  4064  06F8  07E6               	addwf	_dPacketnum,f
  4065  06F9  1803               	skipnc
  4066  06FA  0AE7               	incf	_dPacketnum+1,f
  4067  06FB  3000               	movlw	0
  4068  06FC  07E7               	addwf	_dPacketnum+1,f
  4069                           
  4070                           ;decode_AX25.c: 224: for(UINT j=0;j<8;j++){
  4071  06FD  01B6               	clrf	waitFlag@j_128
  4072  06FE  01B7               	clrf	waitFlag@j_128+1
  4073  06FF  3000               	movlw	0
  4074  0700  0237               	subwf	waitFlag@j_128+1,w
  4075  0701  3008               	movlw	8
  4076  0702  1903               	skipnz
  4077  0703  0236               	subwf	waitFlag@j_128,w
  4078  0704  1803               	btfsc	3,0
  4079  0705  2F2E               	goto	l3057
  4080  0706                     l3043:	
  4081                           
  4082                           ;decode_AX25.c: 225: flag_judge = getbit();
  4083  0706  120A  158A  227E  120A  118A  	fcall	_getbit
  4084  070B  0871               	movf	?_getbit+1,w
  4085  070C  1283               	bcf	3,5	;RP0=0, select bank0
  4086  070D  1303               	bcf	3,6	;RP1=0, select bank0
  4087  070E  00BB               	movwf	waitFlag@flag_judge+1
  4088  070F  0870               	movf	?_getbit,w
  4089  0710  00BA               	movwf	waitFlag@flag_judge
  4090                           
  4091                           ;decode_AX25.c: 226: buf = buf >> 1;
  4092  0711  083C               	movf	waitFlag@buf,w
  4093  0712  00F6               	movwf	??_waitFlag
  4094  0713  1003               	clrc
  4095  0714  0C76               	rrf	??_waitFlag,w
  4096  0715  00F7               	movwf	??_waitFlag+1
  4097  0716  0877               	movf	??_waitFlag+1,w
  4098  0717  00BC               	movwf	waitFlag@buf
  4099                           
  4100                           ;decode_AX25.c: 228: buf = buf | 0x00;
  4101  0718  083A               	movf	waitFlag@flag_judge,w
  4102  0719  043B               	iorwf	waitFlag@flag_judge+1,w
  4103  071A  1903               	btfsc	3,2
  4104  071B  2F21               	goto	l3053
  4105                           
  4106                           ;decode_AX25.c: 230: buf = buf | 0x80;
  4107                           
  4108                           ;decode_AX25.c: 229: }else{
  4109  071C  083C               	movf	waitFlag@buf,w
  4110  071D  3880               	iorlw	128
  4111  071E  00F6               	movwf	??_waitFlag
  4112  071F  0876               	movf	??_waitFlag,w
  4113  0720  00BC               	movwf	waitFlag@buf
  4114  0721                     l3053:	
  4115  0721  3001               	movlw	1
  4116  0722  07B6               	addwf	waitFlag@j_128,f
  4117  0723  1803               	skipnc
  4118  0724  0AB7               	incf	waitFlag@j_128+1,f
  4119  0725  3000               	movlw	0
  4120  0726  07B7               	addwf	waitFlag@j_128+1,f
  4121  0727  3000               	movlw	0
  4122  0728  0237               	subwf	waitFlag@j_128+1,w
  4123  0729  3008               	movlw	8
  4124  072A  1903               	skipnz
  4125  072B  0236               	subwf	waitFlag@j_128,w
  4126  072C  1C03               	skipc
  4127  072D  2F06               	goto	l3043
  4128  072E                     l3057:	
  4129                           
  4130                           ;decode_AX25.c: 231: }
  4131                           ;decode_AX25.c: 232: }
  4132                           ;decode_AX25.c: 233: if(buf == ("JQ1ZHX"[4] << 1)){
  4133  072E  300F               	movlw	low (((STR_7+4)-__stringbase)| (0+32768))
  4134  072F  0084               	movwf	4
  4135  0730  120A  158A  2000  120A  118A  	fcall	stringdir
  4136  0735  00F6               	movwf	??_waitFlag
  4137  0736  01F7               	clrf	??_waitFlag+1
  4138  0737  1003               	clrc
  4139  0738  0DF6               	rlf	??_waitFlag,f
  4140  0739  0DF7               	rlf	??_waitFlag+1,f
  4141  073A  083C               	movf	waitFlag@buf,w
  4142  073B  00F8               	movwf	??_waitFlag+2
  4143  073C  01F9               	clrf	??_waitFlag+3
  4144  073D  0877               	movf	??_waitFlag+1,w
  4145  073E  0679               	xorwf	??_waitFlag+3,w
  4146  073F  1D03               	skipz
  4147  0740  2F43               	goto	u2635
  4148  0741  0876               	movf	??_waitFlag,w
  4149  0742  0678               	xorwf	??_waitFlag+2,w
  4150  0743                     u2635:	
  4151  0743  1D03               	skipz
  4152  0744  2FB0               	goto	l3101
  4153                           
  4154                           ;decode_AX25.c: 234: dPacket[dPacketnum] = buf;
  4155  0745  083C               	movf	waitFlag@buf,w
  4156  0746  00F6               	movwf	??_waitFlag
  4157  0747  0866               	movf	_dPacketnum,w
  4158  0748  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4159  0749  0084               	movwf	4
  4160  074A  0876               	movf	??_waitFlag,w
  4161  074B  1783               	bsf	3,7	;select IRP bank3
  4162  074C  0080               	movwf	0
  4163                           
  4164                           ;decode_AX25.c: 235: dPacketnum ++;
  4165  074D  3001               	movlw	1
  4166  074E  07E6               	addwf	_dPacketnum,f
  4167  074F  1803               	skipnc
  4168  0750  0AE7               	incf	_dPacketnum+1,f
  4169  0751  3000               	movlw	0
  4170  0752  07E7               	addwf	_dPacketnum+1,f
  4171                           
  4172                           ;decode_AX25.c: 236: for(UINT j=0;j<8;j++){
  4173  0753  01B8               	clrf	waitFlag@j_130
  4174  0754  01B9               	clrf	waitFlag@j_130+1
  4175  0755  3000               	movlw	0
  4176  0756  0239               	subwf	waitFlag@j_130+1,w
  4177  0757  3008               	movlw	8
  4178  0758  1903               	skipnz
  4179  0759  0238               	subwf	waitFlag@j_130,w
  4180  075A  1803               	btfsc	3,0
  4181  075B  2F84               	goto	l3083
  4182  075C                     l3069:	
  4183                           
  4184                           ;decode_AX25.c: 237: flag_judge = getbit();
  4185  075C  120A  158A  227E  120A  118A  	fcall	_getbit
  4186  0761  0871               	movf	?_getbit+1,w
  4187  0762  1283               	bcf	3,5	;RP0=0, select bank0
  4188  0763  1303               	bcf	3,6	;RP1=0, select bank0
  4189  0764  00BB               	movwf	waitFlag@flag_judge+1
  4190  0765  0870               	movf	?_getbit,w
  4191  0766  00BA               	movwf	waitFlag@flag_judge
  4192                           
  4193                           ;decode_AX25.c: 238: buf = buf >> 1;
  4194  0767  083C               	movf	waitFlag@buf,w
  4195  0768  00F6               	movwf	??_waitFlag
  4196  0769  1003               	clrc
  4197  076A  0C76               	rrf	??_waitFlag,w
  4198  076B  00F7               	movwf	??_waitFlag+1
  4199  076C  0877               	movf	??_waitFlag+1,w
  4200  076D  00BC               	movwf	waitFlag@buf
  4201                           
  4202                           ;decode_AX25.c: 240: buf = buf | 0x00;
  4203  076E  083A               	movf	waitFlag@flag_judge,w
  4204  076F  043B               	iorwf	waitFlag@flag_judge+1,w
  4205  0770  1903               	btfsc	3,2
  4206  0771  2F77               	goto	l3079
  4207                           
  4208                           ;decode_AX25.c: 242: buf = buf | 0x80;
  4209                           
  4210                           ;decode_AX25.c: 241: }else{
  4211  0772  083C               	movf	waitFlag@buf,w
  4212  0773  3880               	iorlw	128
  4213  0774  00F6               	movwf	??_waitFlag
  4214  0775  0876               	movf	??_waitFlag,w
  4215  0776  00BC               	movwf	waitFlag@buf
  4216  0777                     l3079:	
  4217  0777  3001               	movlw	1
  4218  0778  07B8               	addwf	waitFlag@j_130,f
  4219  0779  1803               	skipnc
  4220  077A  0AB9               	incf	waitFlag@j_130+1,f
  4221  077B  3000               	movlw	0
  4222  077C  07B9               	addwf	waitFlag@j_130+1,f
  4223  077D  3000               	movlw	0
  4224  077E  0239               	subwf	waitFlag@j_130+1,w
  4225  077F  3008               	movlw	8
  4226  0780  1903               	skipnz
  4227  0781  0238               	subwf	waitFlag@j_130,w
  4228  0782  1C03               	skipc
  4229  0783  2F5C               	goto	l3069
  4230  0784                     l3083:	
  4231                           
  4232                           ;decode_AX25.c: 243: }
  4233                           ;decode_AX25.c: 244: }
  4234                           ;decode_AX25.c: 245: if(buf == ("JQ1ZHX"[5] << 1)){
  4235  0784  3010               	movlw	low (((STR_7+5)-__stringbase)| (0+32768))
  4236  0785  0084               	movwf	4
  4237  0786  120A  158A  2000  120A  118A  	fcall	stringdir
  4238  078B  00F6               	movwf	??_waitFlag
  4239  078C  01F7               	clrf	??_waitFlag+1
  4240  078D  1003               	clrc
  4241  078E  0DF6               	rlf	??_waitFlag,f
  4242  078F  0DF7               	rlf	??_waitFlag+1,f
  4243  0790  083C               	movf	waitFlag@buf,w
  4244  0791  00F8               	movwf	??_waitFlag+2
  4245  0792  01F9               	clrf	??_waitFlag+3
  4246  0793  0877               	movf	??_waitFlag+1,w
  4247  0794  0679               	xorwf	??_waitFlag+3,w
  4248  0795  1D03               	skipz
  4249  0796  2F99               	goto	u2675
  4250  0797  0876               	movf	??_waitFlag,w
  4251  0798  0678               	xorwf	??_waitFlag+2,w
  4252  0799                     u2675:	
  4253  0799  1D03               	skipz
  4254  079A  2FB0               	goto	l3101
  4255                           
  4256                           ;decode_AX25.c: 246: dPacket[dPacketnum] = buf;
  4257  079B  083C               	movf	waitFlag@buf,w
  4258  079C  00F6               	movwf	??_waitFlag
  4259  079D  0866               	movf	_dPacketnum,w
  4260  079E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4261  079F  0084               	movwf	4
  4262  07A0  0876               	movf	??_waitFlag,w
  4263  07A1  1783               	bsf	3,7	;select IRP bank3
  4264  07A2  0080               	movwf	0
  4265                           
  4266                           ;decode_AX25.c: 247: dPacketnum ++;
  4267  07A3  3001               	movlw	1
  4268  07A4  07E6               	addwf	_dPacketnum,f
  4269  07A5  1803               	skipnc
  4270  07A6  0AE7               	incf	_dPacketnum+1,f
  4271  07A7  3000               	movlw	0
  4272  07A8  07E7               	addwf	_dPacketnum+1,f
  4273                           
  4274                           ;decode_AX25.c: 248: rcv_state ++;
  4275  07A9  3001               	movlw	1
  4276  07AA  07EA               	addwf	_rcv_state,f
  4277  07AB  1803               	skipnc
  4278  07AC  0AEB               	incf	_rcv_state+1,f
  4279  07AD  3000               	movlw	0
  4280  07AE  07EB               	addwf	_rcv_state+1,f
  4281                           
  4282                           ;decode_AX25.c: 249: }else{
  4283  07AF  2B2F               	goto	l3103
  4284  07B0                     l3101:	
  4285                           ;decode_AX25.c: 268: }
  4286                           ;decode_AX25.c: 269: }else{
  4287                           
  4288                           ;decode_AX25.c: 267: rcv_state = 0;
  4289                           
  4290                           ;decode_AX25.c: 266: dPacketnum = 0;
  4291                           
  4292                           ;decode_AX25.c: 264: }
  4293                           ;decode_AX25.c: 265: }else{
  4294                           
  4295                           ;decode_AX25.c: 263: rcv_state = 0;
  4296                           
  4297                           ;decode_AX25.c: 262: dPacketnum = 0;
  4298                           
  4299                           ;decode_AX25.c: 260: }
  4300                           ;decode_AX25.c: 261: }else{
  4301                           
  4302                           ;decode_AX25.c: 259: rcv_state = 0;
  4303                           
  4304                           ;decode_AX25.c: 258: dPacketnum = 0;
  4305                           
  4306                           ;decode_AX25.c: 256: }
  4307                           ;decode_AX25.c: 257: }else{
  4308                           
  4309                           ;decode_AX25.c: 255: rcv_state = 0;
  4310                           
  4311                           ;decode_AX25.c: 254: dPacketnum = 0;
  4312                           
  4313                           ;decode_AX25.c: 252: }
  4314                           ;decode_AX25.c: 253: }else{
  4315                           
  4316                           ;decode_AX25.c: 251: rcv_state = 0;
  4317                           
  4318                           ;decode_AX25.c: 250: dPacketnum = 0;
  4319                           
  4320                           
  4321                           ;decode_AX25.c: 270: dPacketnum = 0;
  4322  07B0  01E6               	clrf	_dPacketnum
  4323  07B1  01E7               	clrf	_dPacketnum+1
  4324  07B2  2B2D               	goto	L6
  4325  07B3                     __end_of_waitFlag:	
  4326                           
  4327                           	psect	text5
  4328  0BDE                     __ptext5:	
  4329 ;; *************** function _getdata *****************
  4330 ;; Defined at:
  4331 ;;		line 278 in file "decode_AX25.c"
  4332 ;; Parameters:    Size  Location     Type
  4333 ;;		None
  4334 ;; Auto vars:     Size  Location     Type
  4335 ;;  dbitstatus      2    4[BANK0 ] unsigned int 
  4336 ;;  dstuff          2    2[BANK0 ] unsigned int 
  4337 ;;  bufstore_cou    2    0[BANK0 ] unsigned int 
  4338 ;;  buf             1    6[BANK0 ] unsigned char 
  4339 ;;  dammy_data      1    0        unsigned char 
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  1    wreg      void 
  4342 ;; Registers used:
  4343 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4349 ;;      Params:         0       0       0       0       0
  4350 ;;      Locals:         0       7       0       0       0
  4351 ;;      Temps:          2       0       0       0       0
  4352 ;;      Totals:         2       7       0       0       0
  4353 ;;Total ram usage:        9 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    1
  4356 ;; This function calls:
  4357 ;;		_getbit
  4358 ;; This function is called by:
  4359 ;;		_ReceivePacket_data
  4360 ;;		_ReceivePacket
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           
  4365                           ;psect for function _getdata
  4366  0BDE                     _getdata:	
  4367                           
  4368                           ;decode_AX25.c: 279: UBYTE buf = 0x00;
  4369                           
  4370                           ;incstack = 0
  4371                           ; Regs used in _getdata: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4372  0BDE  1283               	bcf	3,5	;RP0=0, select bank0
  4373  0BDF  1303               	bcf	3,6	;RP1=0, select bank0
  4374  0BE0  01A6               	clrf	getdata@buf
  4375                           
  4376                           ;decode_AX25.c: 280: UINT dstuff = 0;
  4377  0BE1  01A2               	clrf	getdata@dstuff
  4378  0BE2  01A3               	clrf	getdata@dstuff+1
  4379                           
  4380                           ;decode_AX25.c: 281: UBYTE dammy_data;
  4381                           ;decode_AX25.c: 282: UINT bufstore_counter = 0;
  4382  0BE3  01A0               	clrf	getdata@bufstore_counter
  4383  0BE4  01A1               	clrf	getdata@bufstore_counter+1
  4384                           
  4385                           ;decode_AX25.c: 283: UINT dbitstatus = 0;
  4386  0BE5  01A4               	clrf	getdata@dbitstatus
  4387  0BE6  01A5               	clrf	getdata@dbitstatus+1
  4388  0BE7                     l3137:	
  4389                           ;decode_AX25.c: 285: while(rcv_state == 2){
  4390                           
  4391  0BE7  3002               	movlw	2
  4392  0BE8  066A               	xorwf	_rcv_state,w
  4393  0BE9  046B               	iorwf	_rcv_state+1,w
  4394  0BEA  1D03               	btfss	3,2
  4395  0BEB  0008               	return
  4396                           
  4397                           ;decode_AX25.c: 286: dbitstatus = getbit();
  4398  0BEC  120A  158A  227E  120A  158A  	fcall	_getbit
  4399  0BF1  0871               	movf	?_getbit+1,w
  4400  0BF2  1283               	bcf	3,5	;RP0=0, select bank0
  4401  0BF3  1303               	bcf	3,6	;RP1=0, select bank0
  4402  0BF4  00A5               	movwf	getdata@dbitstatus+1
  4403  0BF5  0870               	movf	?_getbit,w
  4404  0BF6  00A4               	movwf	getdata@dbitstatus
  4405                           
  4406                           ;decode_AX25.c: 287: if(dstuff == 5){
  4407  0BF7  3005               	movlw	5
  4408  0BF8  0622               	xorwf	getdata@dstuff,w
  4409  0BF9  0423               	iorwf	getdata@dstuff+1,w
  4410  0BFA  1D03               	btfss	3,2
  4411  0BFB  2C0A               	goto	l3119
  4412                           
  4413                           ;decode_AX25.c: 288: if(dbitstatus == 1){
  4414  0BFC  0324               	decf	getdata@dbitstatus,w
  4415  0BFD  0425               	iorwf	getdata@dbitstatus+1,w
  4416  0BFE  1D03               	btfss	3,2
  4417  0BFF  2C07               	goto	l3117
  4418                           
  4419                           ;decode_AX25.c: 289: rcv_state ++;
  4420  0C00  3001               	movlw	1
  4421  0C01  07EA               	addwf	_rcv_state,f
  4422  0C02  1803               	skipnc
  4423  0C03  0AEB               	incf	_rcv_state+1,f
  4424  0C04  3000               	movlw	0
  4425  0C05  07EB               	addwf	_rcv_state+1,f
  4426                           
  4427                           ;decode_AX25.c: 290: break;
  4428  0C06  0008               	return
  4429  0C07                     l3117:	
  4430                           ;decode_AX25.c: 291: }else{
  4431                           
  4432                           
  4433                           ;decode_AX25.c: 292: dstuff = 0;
  4434  0C07  01A2               	clrf	getdata@dstuff
  4435  0C08  01A3               	clrf	getdata@dstuff+1
  4436                           
  4437                           ;decode_AX25.c: 293: }
  4438                           ;decode_AX25.c: 294: }else{
  4439  0C09  2BE7               	goto	l3137
  4440  0C0A                     l3119:	
  4441                           
  4442                           ;decode_AX25.c: 295: buf = buf >> 1;
  4443  0C0A  0826               	movf	getdata@buf,w
  4444  0C0B  00F6               	movwf	??_getdata
  4445  0C0C  1003               	clrc
  4446  0C0D  0C76               	rrf	??_getdata,w
  4447  0C0E  00F7               	movwf	??_getdata+1
  4448  0C0F  0877               	movf	??_getdata+1,w
  4449  0C10  00A6               	movwf	getdata@buf
  4450                           
  4451                           ;decode_AX25.c: 297: buf = buf | 0x00;
  4452  0C11  0824               	movf	getdata@dbitstatus,w
  4453  0C12  0425               	iorwf	getdata@dbitstatus+1,w
  4454  0C13  1D03               	btfss	3,2
  4455  0C14  2C18               	goto	l3123
  4456                           
  4457                           ;decode_AX25.c: 298: dstuff = 0;
  4458  0C15  01A2               	clrf	getdata@dstuff
  4459  0C16  01A3               	clrf	getdata@dstuff+1
  4460                           
  4461                           ;decode_AX25.c: 299: }else{
  4462  0C17  2C23               	goto	l3127
  4463  0C18                     l3123:	
  4464                           
  4465                           ;decode_AX25.c: 300: buf = buf | 0x80;
  4466  0C18  0826               	movf	getdata@buf,w
  4467  0C19  3880               	iorlw	128
  4468  0C1A  00F6               	movwf	??_getdata
  4469  0C1B  0876               	movf	??_getdata,w
  4470  0C1C  00A6               	movwf	getdata@buf
  4471                           
  4472                           ;decode_AX25.c: 301: dstuff ++;
  4473  0C1D  3001               	movlw	1
  4474  0C1E  07A2               	addwf	getdata@dstuff,f
  4475  0C1F  1803               	skipnc
  4476  0C20  0AA3               	incf	getdata@dstuff+1,f
  4477  0C21  3000               	movlw	0
  4478  0C22  07A3               	addwf	getdata@dstuff+1,f
  4479  0C23                     l3127:	
  4480                           
  4481                           ;decode_AX25.c: 302: }
  4482                           ;decode_AX25.c: 303: bufstore_counter ++;
  4483  0C23  3001               	movlw	1
  4484  0C24  07A0               	addwf	getdata@bufstore_counter,f
  4485  0C25  1803               	skipnc
  4486  0C26  0AA1               	incf	getdata@bufstore_counter+1,f
  4487  0C27  3000               	movlw	0
  4488  0C28  07A1               	addwf	getdata@bufstore_counter+1,f
  4489                           
  4490                           ;decode_AX25.c: 304: if(bufstore_counter == 8){
  4491  0C29  3008               	movlw	8
  4492  0C2A  0620               	xorwf	getdata@bufstore_counter,w
  4493  0C2B  0421               	iorwf	getdata@bufstore_counter+1,w
  4494  0C2C  1D03               	btfss	3,2
  4495  0C2D  2BE7               	goto	l3137
  4496                           
  4497                           ;decode_AX25.c: 305: bufstore_counter = 0;
  4498  0C2E  01A0               	clrf	getdata@bufstore_counter
  4499  0C2F  01A1               	clrf	getdata@bufstore_counter+1
  4500                           
  4501                           ;decode_AX25.c: 306: dPacket[dPacketnum] = buf;
  4502  0C30  0826               	movf	getdata@buf,w
  4503  0C31  00F6               	movwf	??_getdata
  4504  0C32  0866               	movf	_dPacketnum,w
  4505  0C33  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4506  0C34  0084               	movwf	4
  4507  0C35  0876               	movf	??_getdata,w
  4508  0C36  1783               	bsf	3,7	;select IRP bank3
  4509  0C37  0080               	movwf	0
  4510                           
  4511                           ;decode_AX25.c: 307: dPacketnum ++;
  4512  0C38  3001               	movlw	1
  4513  0C39  07E6               	addwf	_dPacketnum,f
  4514  0C3A  1803               	skipnc
  4515  0C3B  0AE7               	incf	_dPacketnum+1,f
  4516  0C3C  3000               	movlw	0
  4517  0C3D  07E7               	addwf	_dPacketnum+1,f
  4518  0C3E  2BE7               	goto	l3137
  4519  0C3F                     __end_of_getdata:	
  4520                           
  4521                           	psect	text6
  4522  0A7E                     __ptext6:	
  4523 ;; *************** function _getbit *****************
  4524 ;; Defined at:
  4525 ;;		line 40 in file "decode_AX25.c"
  4526 ;; Parameters:    Size  Location     Type
  4527 ;;		None
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;  i               2    4[COMMON] unsigned int 
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  2    0[COMMON] unsigned int 
  4532 ;; Registers used:
  4533 ;;		wreg, status,2, status,0
  4534 ;; Tracked objects:
  4535 ;;		On entry : 0/0
  4536 ;;		On exit  : 0/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4539 ;;      Params:         2       0       0       0       0
  4540 ;;      Locals:         2       0       0       0       0
  4541 ;;      Temps:          2       0       0       0       0
  4542 ;;      Totals:         6       0       0       0       0
  4543 ;;Total ram usage:        6 bytes
  4544 ;; Hardware stack levels used:    1
  4545 ;; This function calls:
  4546 ;;		Nothing
  4547 ;; This function is called by:
  4548 ;;		_waitFlag
  4549 ;;		_getdata
  4550 ;;		_conv_DI_UARTRX
  4551 ;; This function uses a non-reentrant model
  4552 ;;
  4553                           
  4554                           
  4555                           ;psect for function _getbit
  4556  0A7E                     _getbit:	
  4557                           
  4558                           ;decode_AX25.c: 41: static UINT oldbit;
  4559                           ;decode_AX25.c: 42: oldbit = RB5;
  4560                           
  4561                           ;incstack = 0
  4562                           ; Regs used in _getbit: [wreg+status,2+status,0]
  4563  0A7E  1003               	clrc
  4564  0A7F  1283               	bcf	3,5	;RP0=0, select bank0
  4565  0A80  1303               	bcf	3,6	;RP1=0, select bank0
  4566  0A81  1A86               	btfsc	6,5	;volatile
  4567  0A82  1403               	setc
  4568  0A83  3000               	movlw	0
  4569  0A84  1803               	skipnc
  4570  0A85  3001               	movlw	1
  4571  0A86  00F2               	movwf	??_getbit
  4572  0A87  01F3               	clrf	??_getbit+1
  4573  0A88  0872               	movf	??_getbit,w
  4574  0A89  1683               	bsf	3,5	;RP0=1, select bank1
  4575  0A8A  1303               	bcf	3,6	;RP1=0, select bank1
  4576  0A8B  00E7               	movwf	getbit@oldbit^(0+128)
  4577  0A8C  0873               	movf	??_getbit+1,w
  4578  0A8D  00E8               	movwf	(getbit@oldbit+1)^(0+128)
  4579                           
  4580                           ;decode_AX25.c: 43: for(UINT i=0;i<62;i++){
  4581  0A8E  01F4               	clrf	getbit@i
  4582  0A8F  01F5               	clrf	getbit@i+1
  4583  0A90  3000               	movlw	0
  4584  0A91  0275               	subwf	getbit@i+1,w
  4585  0A92  303E               	movlw	62
  4586  0A93  1903               	skipnz
  4587  0A94  0274               	subwf	getbit@i,w
  4588  0A95  1803               	btfsc	3,0
  4589  0A96  2AC5               	goto	l2583
  4590                           
  4591                           ;decode_AX25.c: 44: if(RB5 != oldbit){
  4592  0A97  1003               	clrc
  4593  0A98                     L7:	
  4594  0A98  1283               	bcf	3,5	;RP0=0, select bank0
  4595  0A99  1A86               	btfsc	6,5	;volatile
  4596  0A9A  1403               	setc
  4597  0A9B  3000               	movlw	0
  4598  0A9C  1803               	skipnc
  4599  0A9D  3001               	movlw	1
  4600  0A9E  00F2               	movwf	??_getbit
  4601  0A9F  01F3               	clrf	??_getbit+1
  4602  0AA0  1683               	bsf	3,5	;RP0=1, select bank1
  4603  0AA1  1303               	bcf	3,6	;RP1=0, select bank1
  4604  0AA2  0868               	movf	(getbit@oldbit+1)^(0+128),w
  4605  0AA3  0673               	xorwf	??_getbit+1,w
  4606  0AA4  1D03               	skipz
  4607  0AA5  2AA8               	goto	u1905
  4608  0AA6  0867               	movf	getbit@oldbit^(0+128),w
  4609  0AA7  0672               	xorwf	??_getbit,w
  4610  0AA8                     u1905:	
  4611  0AA8  1903               	skipnz
  4612  0AA9  2AB8               	goto	l2581
  4613                           
  4614                           ;decode_AX25.c: 45: _delay((unsigned long)((400)*(10000000/4000000.0)));
  4615  0AAA  30F9               	movlw	249
  4616  0AAB  00F2               	movwf	??_getbit
  4617  0AAC                     u3717:	
  4618  0AAC  0000               	nop
  4619  0AAD  0BF2               	decfsz	??_getbit,f
  4620  0AAE  2AAC               	goto	u3717
  4621  0AAF  2AB0               	nop2	;nop
  4622  0AB0  0000               	nop
  4623                           
  4624                           ;decode_AX25.c: 46: RC2= 1- RC2;
  4625  0AB1  3004               	movlw	4
  4626  0AB2  1283               	bcf	3,5	;RP0=0, select bank0
  4627  0AB3  1303               	bcf	3,6	;RP1=0, select bank0
  4628  0AB4  0687               	xorwf	7,f
  4629                           
  4630                           ;decode_AX25.c: 47: return 0;
  4631  0AB5  01F0               	clrf	?_getbit
  4632  0AB6  01F1               	clrf	?_getbit+1
  4633  0AB7  0008               	return
  4634  0AB8                     l2581:	
  4635  0AB8  3001               	movlw	1
  4636  0AB9  07F4               	addwf	getbit@i,f
  4637  0ABA  1803               	skipnc
  4638  0ABB  0AF5               	incf	getbit@i+1,f
  4639  0ABC  3000               	movlw	0
  4640  0ABD  07F5               	addwf	getbit@i+1,f
  4641  0ABE  3000               	movlw	0
  4642  0ABF  0275               	subwf	getbit@i+1,w
  4643  0AC0  303E               	movlw	62
  4644  0AC1  1903               	skipnz
  4645  0AC2  0274               	subwf	getbit@i,w
  4646  0AC3  1C03               	skipc
  4647  0AC4  2A98               	goto	L7
  4648  0AC5                     l2583:	
  4649                           
  4650                           ;decode_AX25.c: 48: }
  4651                           ;decode_AX25.c: 49: }
  4652                           ;decode_AX25.c: 50: return 1;
  4653  0AC5  3001               	movlw	1
  4654  0AC6  00F0               	movwf	?_getbit
  4655  0AC7  3000               	movlw	0
  4656  0AC8  00F1               	movwf	?_getbit+1
  4657  0AC9  0008               	return
  4658  0ACA                     __end_of_getbit:	
  4659                           
  4660                           	psect	text7
  4661  002A                     __ptext7:	
  4662 ;; *************** function _fcscheck *****************
  4663 ;; Defined at:
  4664 ;;		line 313 in file "decode_AX25.c"
  4665 ;; Parameters:    Size  Location     Type
  4666 ;;		None
  4667 ;; Auto vars:     Size  Location     Type
  4668 ;;  i               2    7[COMMON] unsigned int 
  4669 ;;  i               2    5[COMMON] unsigned int 
  4670 ;;  byte            1    9[COMMON] unsigned char 
  4671 ;;  bt              1    4[COMMON] unsigned char 
  4672 ;; Return value:  Size  Location     Type
  4673 ;;                  2    0[COMMON] unsigned int 
  4674 ;; Registers used:
  4675 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4676 ;; Tracked objects:
  4677 ;;		On entry : 0/0
  4678 ;;		On exit  : 0/0
  4679 ;;		Unchanged: 0/0
  4680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4681 ;;      Params:         2       0       0       0       0
  4682 ;;      Locals:         6       0       0       0       0
  4683 ;;      Temps:          2       0       0       0       0
  4684 ;;      Totals:        10       0       0       0       0
  4685 ;;Total ram usage:       10 bytes
  4686 ;; Hardware stack levels used:    1
  4687 ;; This function calls:
  4688 ;;		Nothing
  4689 ;; This function is called by:
  4690 ;;		_ReceivePacket_data
  4691 ;;		_ReceivePacket
  4692 ;; This function uses a non-reentrant model
  4693 ;;
  4694                           
  4695                           
  4696                           ;psect for function _fcscheck
  4697  002A                     _fcscheck:	
  4698                           
  4699                           ;decode_AX25.c: 314: UBYTE bt,byte;
  4700                           ;decode_AX25.c: 315: dfcslo = dfcshi = 0xff;
  4701                           
  4702                           ;incstack = 0
  4703                           ; Regs used in _fcscheck: [wreg-fsr0h+status,2+status,0]
  4704  002A  30FF               	movlw	255
  4705  002B  1283               	bcf	3,5	;RP0=0, select bank0
  4706  002C  1303               	bcf	3,6	;RP1=0, select bank0
  4707  002D  00EC               	movwf	_dfcshi
  4708  002E  00F2               	movwf	??_fcscheck
  4709  002F  0872               	movf	??_fcscheck,w
  4710  0030  00ED               	movwf	_dfcslo
  4711                           
  4712                           ;decode_AX25.c: 316: while(rcv_state == 3){
  4713  0031  3003               	movlw	3
  4714  0032  066A               	xorwf	_rcv_state,w
  4715  0033  046B               	iorwf	_rcv_state+1,w
  4716  0034  1D03               	btfss	3,2
  4717  0035  0008               	return
  4718                           
  4719                           ;decode_AX25.c: 317: for(UINT i=0;i<dPacketnum-2;i++){
  4720  0036  01F5               	clrf	fcscheck@i
  4721  0037  01F6               	clrf	fcscheck@i+1
  4722  0038                     l3165:	
  4723  0038  0866               	movf	_dPacketnum,w
  4724  0039  3EFE               	addlw	254
  4725  003A  00F2               	movwf	??_fcscheck
  4726  003B  0867               	movf	_dPacketnum+1,w
  4727  003C  1803               	skipnc
  4728  003D  3E01               	addlw	1
  4729  003E  3EFF               	addlw	255
  4730  003F  00F3               	movwf	??_fcscheck+1
  4731  0040  0873               	movf	??_fcscheck+1,w
  4732  0041  0276               	subwf	fcscheck@i+1,w
  4733  0042  1D03               	skipz
  4734  0043  2846               	goto	u2775
  4735  0044  0872               	movf	??_fcscheck,w
  4736  0045  0275               	subwf	fcscheck@i,w
  4737  0046                     u2775:	
  4738  0046  1803               	btfsc	3,0
  4739  0047  2891               	goto	l272
  4740                           
  4741                           ;decode_AX25.c: 318: byte = dPacket[i];
  4742  0048  0875               	movf	fcscheck@i,w
  4743  0049  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4744  004A  0084               	movwf	4
  4745  004B  1783               	bsf	3,7	;select IRP bank3
  4746  004C  0800               	movf	0,w
  4747  004D  00F2               	movwf	??_fcscheck
  4748  004E  0872               	movf	??_fcscheck,w
  4749  004F  00F9               	movwf	fcscheck@byte
  4750                           
  4751                           ;decode_AX25.c: 319: for(UINT i=0;i<8;i++){
  4752  0050  01F7               	clrf	fcscheck@i_142
  4753  0051  01F8               	clrf	fcscheck@i_142+1
  4754  0052  3000               	movlw	0
  4755  0053  0278               	subwf	fcscheck@i_142+1,w
  4756  0054  3008               	movlw	8
  4757  0055  1903               	skipnz
  4758  0056  0277               	subwf	fcscheck@i_142,w
  4759  0057  1803               	btfsc	3,0
  4760  0058  288A               	goto	l3163
  4761  0059                     l3151:	
  4762                           
  4763                           ;decode_AX25.c: 320: bt = byte & 0x01;
  4764  0059  0879               	movf	fcscheck@byte,w
  4765  005A  3901               	andlw	1
  4766  005B  00F2               	movwf	??_fcscheck
  4767  005C  0872               	movf	??_fcscheck,w
  4768  005D  00F4               	movwf	fcscheck@bt
  4769  005E  1003               	bcf	3,0	;# 
  4770  005F  0CEC               	rrf	_dfcshi,f	;# 
  4771  0060  0CED               	rrf	_dfcslo,f	;# 
  4772                           
  4773                           ;decode_AX25.c: 326: if(((STATUS & 0x01)^bt) == 0x01){
  4774  0061  3001               	movlw	1
  4775  0062  1283               	bcf	3,5	;RP0=0, select bank0
  4776  0063  1303               	bcf	3,6	;RP1=0, select bank0
  4777  0064  0503               	andwf	3,w	;volatile
  4778  0065  00F2               	movwf	??_fcscheck
  4779  0066  0874               	movf	fcscheck@bt,w
  4780  0067  0672               	xorwf	??_fcscheck,w
  4781  0068  00F3               	movwf	??_fcscheck+1
  4782  0069  0373               	decf	??_fcscheck+1,w
  4783  006A  1D03               	btfss	3,2
  4784  006B  2876               	goto	l3157
  4785                           
  4786                           ;decode_AX25.c: 327: dfcshi = dfcshi ^ 0x84;
  4787  006C  086C               	movf	_dfcshi,w
  4788  006D  3A84               	xorlw	132
  4789  006E  00F2               	movwf	??_fcscheck
  4790  006F  0872               	movf	??_fcscheck,w
  4791  0070  00EC               	movwf	_dfcshi
  4792                           
  4793                           ;decode_AX25.c: 328: dfcslo = dfcslo ^ 0x08;
  4794  0071  086D               	movf	_dfcslo,w
  4795  0072  3A08               	xorlw	8
  4796  0073  00F2               	movwf	??_fcscheck
  4797  0074  0872               	movf	??_fcscheck,w
  4798  0075  00ED               	movwf	_dfcslo
  4799  0076                     l3157:	
  4800                           
  4801                           ;decode_AX25.c: 329: }
  4802                           ;decode_AX25.c: 330: byte = byte >> 1;
  4803  0076  0879               	movf	fcscheck@byte,w
  4804  0077  00F2               	movwf	??_fcscheck
  4805  0078  1003               	clrc
  4806  0079  0C72               	rrf	??_fcscheck,w
  4807  007A  00F3               	movwf	??_fcscheck+1
  4808  007B  0873               	movf	??_fcscheck+1,w
  4809  007C  00F9               	movwf	fcscheck@byte
  4810  007D  3001               	movlw	1
  4811  007E  07F7               	addwf	fcscheck@i_142,f
  4812  007F  1803               	skipnc
  4813  0080  0AF8               	incf	fcscheck@i_142+1,f
  4814  0081  3000               	movlw	0
  4815  0082  07F8               	addwf	fcscheck@i_142+1,f
  4816  0083  3000               	movlw	0
  4817  0084  0278               	subwf	fcscheck@i_142+1,w
  4818  0085  3008               	movlw	8
  4819  0086  1903               	skipnz
  4820  0087  0277               	subwf	fcscheck@i_142,w
  4821  0088  1C03               	skipc
  4822  0089  2859               	goto	l3151
  4823  008A                     l3163:	
  4824  008A  3001               	movlw	1
  4825  008B  07F5               	addwf	fcscheck@i,f
  4826  008C  1803               	skipnc
  4827  008D  0AF6               	incf	fcscheck@i+1,f
  4828  008E  3000               	movlw	0
  4829  008F  07F6               	addwf	fcscheck@i+1,f
  4830  0090  2838               	goto	l3165
  4831  0091                     l272:	
  4832                           
  4833                           ;decode_AX25.c: 331: }
  4834                           ;decode_AX25.c: 332: }
  4835                           ;decode_AX25.c: 333: dfcslo = dfcslo ^ 0xff;
  4836  0091  09ED               	comf	_dfcslo,f
  4837                           
  4838                           ;decode_AX25.c: 334: dfcshi = dfcshi ^ 0xff;
  4839  0092  09EC               	comf	_dfcshi,f
  4840                           
  4841                           ;decode_AX25.c: 337: if((dPacket[dPacketnum-2] == dfcslo) && (dPacket[dPacketnum-1] == d
      +                          fcshi)){
  4842  0093  0866               	movf	_dPacketnum,w
  4843  0094  3EFE               	addlw	254
  4844  0095  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4845  0096  0084               	movwf	4
  4846  0097  1783               	bsf	3,7	;select IRP bank3
  4847  0098  0800               	movf	0,w
  4848  0099  066D               	xorwf	_dfcslo,w
  4849  009A  1D03               	skipz
  4850  009B  28A9               	goto	l3177
  4851  009C  0866               	movf	_dPacketnum,w
  4852  009D  3EFF               	addlw	255
  4853  009E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4854  009F  0084               	movwf	4
  4855  00A0  0800               	movf	0,w
  4856  00A1  066C               	xorwf	_dfcshi,w
  4857  00A2  1D03               	skipz
  4858  00A3  28A9               	goto	l3177
  4859                           
  4860                           ;decode_AX25.c: 342: return 1;
  4861  00A4  3001               	movlw	1
  4862  00A5  00F0               	movwf	?_fcscheck
  4863  00A6  3000               	movlw	0
  4864  00A7  00F1               	movwf	?_fcscheck+1
  4865  00A8  0008               	return
  4866  00A9                     l3177:	
  4867                           ;decode_AX25.c: 343: }else{
  4868                           
  4869                           
  4870                           ;decode_AX25.c: 348: return 0;
  4871  00A9  01F0               	clrf	?_fcscheck
  4872  00AA  01F1               	clrf	?_fcscheck+1
  4873  00AB  0008               	return
  4874  00AC                     __end_of_fcscheck:	
  4875                           
  4876                           	psect	text8
  4877  0822                     __ptext8:	
  4878 ;; *************** function _NM_waddress *****************
  4879 ;; Defined at:
  4880 ;;		line 71 in file "UART.c"
  4881 ;; Parameters:    Size  Location     Type
  4882 ;;  NM_wad_heade    1    wreg     unsigned char 
  4883 ;;  whigh_addres    1    1[COMMON] unsigned char 
  4884 ;;  wlow_address    1    2[COMMON] unsigned char 
  4885 ;; Auto vars:     Size  Location     Type
  4886 ;;  NM_wad_heade    1    3[COMMON] unsigned char 
  4887 ;; Return value:  Size  Location     Type
  4888 ;;                  1    wreg      void 
  4889 ;; Registers used:
  4890 ;;		wreg, status,2, status,0, pclath, cstack
  4891 ;; Tracked objects:
  4892 ;;		On entry : 0/0
  4893 ;;		On exit  : 0/0
  4894 ;;		Unchanged: 0/0
  4895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4896 ;;      Params:         2       0       0       0       0
  4897 ;;      Locals:         1       0       0       0       0
  4898 ;;      Temps:          0       0       0       0       0
  4899 ;;      Totals:         3       0       0       0       0
  4900 ;;Total ram usage:        3 bytes
  4901 ;; Hardware stack levels used:    1
  4902 ;; Hardware stack levels required when called:    1
  4903 ;; This function calls:
  4904 ;;		_putch
  4905 ;; This function is called by:
  4906 ;;		_main
  4907 ;; This function uses a non-reentrant model
  4908 ;;
  4909                           
  4910                           
  4911                           ;psect for function _NM_waddress
  4912  0822                     _NM_waddress:	
  4913                           
  4914                           ;incstack = 0
  4915                           ; Regs used in _NM_waddress: [wreg+status,2+status,0+pclath+cstack]
  4916                           ;NM_waddress@NM_wad_header stored from wreg
  4917  0822  00F3               	movwf	NM_waddress@NM_wad_header
  4918                           
  4919                           ;UART.c: 72: putch(NM_wad_header);
  4920  0823  0873               	movf	NM_waddress@NM_wad_header,w
  4921  0824  160A  118A  27AD  120A  158A  	fcall	_putch
  4922                           
  4923                           ;UART.c: 73: putch(whigh_address);
  4924  0829  0871               	movf	NM_waddress@whigh_address,w
  4925  082A  160A  118A  27AD  120A  158A  	fcall	_putch
  4926                           
  4927                           ;UART.c: 74: putch(wlow_address);
  4928  082F  0872               	movf	NM_waddress@wlow_address,w
  4929  0830  160A  118A  27AD   	fcall	_putch
  4930  0833  0008               	return
  4931  0834                     __end_of_NM_waddress:	
  4932                           
  4933                           	psect	text9
  4934  17AD                     __ptext9:	
  4935 ;; *************** function _putch *****************
  4936 ;; Defined at:
  4937 ;;		line 38 in file "UART.c"
  4938 ;; Parameters:    Size  Location     Type
  4939 ;;  byte            1    wreg     unsigned char 
  4940 ;; Auto vars:     Size  Location     Type
  4941 ;;  byte            1    0[COMMON] unsigned char 
  4942 ;; Return value:  Size  Location     Type
  4943 ;;                  1    wreg      void 
  4944 ;; Registers used:
  4945 ;;		wreg
  4946 ;; Tracked objects:
  4947 ;;		On entry : 0/0
  4948 ;;		On exit  : 0/0
  4949 ;;		Unchanged: 0/0
  4950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4951 ;;      Params:         0       0       0       0       0
  4952 ;;      Locals:         1       0       0       0       0
  4953 ;;      Temps:          0       0       0       0       0
  4954 ;;      Totals:         1       0       0       0       0
  4955 ;;Total ram usage:        1 bytes
  4956 ;; Hardware stack levels used:    1
  4957 ;; This function calls:
  4958 ;;		Nothing
  4959 ;; This function is called by:
  4960 ;;		_NM_waddress
  4961 ;;		_printf
  4962 ;;		_putstr
  4963 ;;		_putcrlf
  4964 ;;		_put_error
  4965 ;;		_put_ok
  4966 ;;		_putAX25
  4967 ;;		_conv_DI_UARTRX
  4968 ;;		_test_Packetmaker
  4969 ;;		_EEPROM_Read
  4970 ;; This function uses a non-reentrant model
  4971 ;;
  4972                           
  4973                           
  4974                           ;psect for function _putch
  4975  17AD                     _putch:	
  4976                           
  4977                           ;incstack = 0
  4978                           ; Regs used in _putch: [wreg]
  4979                           ;putch@byte stored from wreg
  4980  17AD  00F0               	movwf	putch@byte
  4981  17AE                     l65:	
  4982                           ;UART.c: 39: while(!TXIF);
  4983                           
  4984  17AE  1283               	bcf	3,5	;RP0=0, select bank0
  4985  17AF  1303               	bcf	3,6	;RP1=0, select bank0
  4986  17B0  1E0C               	btfss	12,4	;volatile
  4987  17B1  2FAE               	goto	l65
  4988                           
  4989                           ;UART.c: 40: TXREG = byte;
  4990  17B2  0870               	movf	putch@byte,w
  4991  17B3  0099               	movwf	25	;volatile
  4992  17B4  0008               	return
  4993  17B5                     __end_of_putch:	
  4994                           
  4995                           	psect	text10
  4996  17D7                     __ptext10:	
  4997 ;; *************** function _Init_WDT *****************
  4998 ;; Defined at:
  4999 ;;		line 5 in file "WDT.c"
  5000 ;; Parameters:    Size  Location     Type
  5001 ;;		None
  5002 ;; Auto vars:     Size  Location     Type
  5003 ;;		None
  5004 ;; Return value:  Size  Location     Type
  5005 ;;                  2  400[None  ] int 
  5006 ;; Registers used:
  5007 ;;		wreg, status,2, status,0
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5013 ;;      Params:         0       0       0       0       0
  5014 ;;      Locals:         0       0       0       0       0
  5015 ;;      Temps:          0       0       0       0       0
  5016 ;;      Totals:         0       0       0       0       0
  5017 ;;Total ram usage:        0 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; This function calls:
  5020 ;;		Nothing
  5021 ;; This function is called by:
  5022 ;;		_main
  5023 ;; This function uses a non-reentrant model
  5024 ;;
  5025                           
  5026                           
  5027                           ;psect for function _Init_WDT
  5028  17D7                     _Init_WDT:	
  5029                           
  5030                           ;WDT.c: 6: INTCONbits.GIE = 1;
  5031                           
  5032                           ;incstack = 0
  5033                           ; Regs used in _Init_WDT: [wreg+status,2+status,0]
  5034  17D7  178B               	bsf	11,7	;volatile
  5035                           
  5036                           ;WDT.c: 7: INTCONbits.PEIE = 1;
  5037  17D8  170B               	bsf	11,6	;volatile
  5038                           
  5039                           ;WDT.c: 9: PIR1bits.TMR1IF = 0;
  5040  17D9  1283               	bcf	3,5	;RP0=0, select bank0
  5041  17DA  1303               	bcf	3,6	;RP1=0, select bank0
  5042  17DB  100C               	bcf	12,0	;volatile
  5043                           
  5044                           ;WDT.c: 10: PIE1bits.TMR1IE = 1;
  5045  17DC  1683               	bsf	3,5	;RP0=1, select bank1
  5046  17DD  1303               	bcf	3,6	;RP1=0, select bank1
  5047  17DE  140C               	bsf	12,0	;volatile
  5048                           
  5049                           ;WDT.c: 13: T1CONbits.T1CKPS = 2;
  5050  17DF  1283               	bcf	3,5	;RP0=0, select bank0
  5051  17E0  1303               	bcf	3,6	;RP1=0, select bank0
  5052  17E1  0810               	movf	16,w	;volatile
  5053  17E2  39CF               	andlw	-49
  5054  17E3  3820               	iorlw	32
  5055  17E4  0090               	movwf	16	;volatile
  5056                           
  5057                           ;WDT.c: 14: TMR1 = (0xffff - 62500);
  5058  17E5  300B               	movlw	11
  5059  17E6  008F               	movwf	15	;volatile
  5060  17E7  30DB               	movlw	219
  5061  17E8  008E               	movwf	14	;volatile
  5062                           
  5063                           ;WDT.c: 16: T1CONbits.TMR1ON = 1;
  5064  17E9  1410               	bsf	16,0	;volatile
  5065  17EA  0008               	return
  5066  17EB                     __end_of_Init_WDT:	
  5067                           
  5068                           	psect	text11
  5069  0834                     __ptext11:	
  5070 ;; *************** function _Init_SERIAL *****************
  5071 ;; Defined at:
  5072 ;;		line 5 in file "UART.c"
  5073 ;; Parameters:    Size  Location     Type
  5074 ;;		None
  5075 ;; Auto vars:     Size  Location     Type
  5076 ;;		None
  5077 ;; Return value:  Size  Location     Type
  5078 ;;                  1    wreg      void 
  5079 ;; Registers used:
  5080 ;;		wreg
  5081 ;; Tracked objects:
  5082 ;;		On entry : 0/0
  5083 ;;		On exit  : 0/0
  5084 ;;		Unchanged: 0/0
  5085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5086 ;;      Params:         0       0       0       0       0
  5087 ;;      Locals:         0       0       0       0       0
  5088 ;;      Temps:          0       0       0       0       0
  5089 ;;      Totals:         0       0       0       0       0
  5090 ;;Total ram usage:        0 bytes
  5091 ;; Hardware stack levels used:    1
  5092 ;; This function calls:
  5093 ;;		Nothing
  5094 ;; This function is called by:
  5095 ;;		_main
  5096 ;; This function uses a non-reentrant model
  5097 ;;
  5098                           
  5099                           
  5100                           ;psect for function _Init_SERIAL
  5101  0834                     _Init_SERIAL:	
  5102                           
  5103                           ;UART.c: 6: SPBRG = 10;
  5104                           
  5105                           ;incstack = 0
  5106                           ; Regs used in _Init_SERIAL: [wreg]
  5107  0834  300A               	movlw	10
  5108  0835  1683               	bsf	3,5	;RP0=1, select bank1
  5109  0836  1303               	bcf	3,6	;RP1=0, select bank1
  5110  0837  0099               	movwf	25	;volatile
  5111                           
  5112                           ;UART.c: 7: BRGH = 0;
  5113  0838  1118               	bcf	24,2	;volatile
  5114                           
  5115                           ;UART.c: 8: SYNC = 0;
  5116  0839  1218               	bcf	24,4	;volatile
  5117                           
  5118                           ;UART.c: 9: SPEN = 1;
  5119  083A  1283               	bcf	3,5	;RP0=0, select bank0
  5120  083B  1303               	bcf	3,6	;RP1=0, select bank0
  5121  083C  1798               	bsf	24,7	;volatile
  5122                           
  5123                           ;UART.c: 10: CREN = 1;
  5124  083D  1618               	bsf	24,4	;volatile
  5125                           
  5126                           ;UART.c: 11: SREN = 0;
  5127  083E  1298               	bcf	24,5	;volatile
  5128                           
  5129                           ;UART.c: 12: RCIF = 0;
  5130  083F  128C               	bcf	12,5	;volatile
  5131                           
  5132                           ;UART.c: 13: TXIE = 0;
  5133  0840  1683               	bsf	3,5	;RP0=1, select bank1
  5134  0841  1303               	bcf	3,6	;RP1=0, select bank1
  5135  0842  120C               	bcf	12,4	;volatile
  5136                           
  5137                           ;UART.c: 14: RCIE = 1;
  5138  0843  168C               	bsf	12,5	;volatile
  5139                           
  5140                           ;UART.c: 15: TX9 = 0;
  5141  0844  1318               	bcf	24,6	;volatile
  5142                           
  5143                           ;UART.c: 16: RX9 = 0;
  5144  0845  1283               	bcf	3,5	;RP0=0, select bank0
  5145  0846  1303               	bcf	3,6	;RP1=0, select bank0
  5146  0847  1318               	bcf	24,6	;volatile
  5147                           
  5148                           ;UART.c: 17: TXEN = 0;
  5149  0848  1683               	bsf	3,5	;RP0=1, select bank1
  5150  0849  1303               	bcf	3,6	;RP1=0, select bank1
  5151  084A  1298               	bcf	24,5	;volatile
  5152                           
  5153                           ;UART.c: 18: TXEN = 1;
  5154  084B  1698               	bsf	24,5	;volatile
  5155  084C  0008               	return
  5156  084D                     __end_of_Init_SERIAL:	
  5157                           
  5158                           	psect	text12
  5159  0880                     __ptext12:	
  5160 ;; *************** function _Init_MPU *****************
  5161 ;; Defined at:
  5162 ;;		line 8 in file "Init_MPU.c"
  5163 ;; Parameters:    Size  Location     Type
  5164 ;;		None
  5165 ;; Auto vars:     Size  Location     Type
  5166 ;;		None
  5167 ;; Return value:  Size  Location     Type
  5168 ;;                  1    wreg      void 
  5169 ;; Registers used:
  5170 ;;		wreg, status,2
  5171 ;; Tracked objects:
  5172 ;;		On entry : 0/0
  5173 ;;		On exit  : 0/0
  5174 ;;		Unchanged: 0/0
  5175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5176 ;;      Params:         0       0       0       0       0
  5177 ;;      Locals:         0       0       0       0       0
  5178 ;;      Temps:          0       0       0       0       0
  5179 ;;      Totals:         0       0       0       0       0
  5180 ;;Total ram usage:        0 bytes
  5181 ;; Hardware stack levels used:    1
  5182 ;; This function calls:
  5183 ;;		Nothing
  5184 ;; This function is called by:
  5185 ;;		_main
  5186 ;; This function uses a non-reentrant model
  5187 ;;
  5188                           
  5189                           
  5190                           ;psect for function _Init_MPU
  5191  0880                     _Init_MPU:	
  5192                           
  5193                           ;Init_MPU.c: 11: PORTA = 0x00;
  5194                           
  5195                           ;incstack = 0
  5196                           ; Regs used in _Init_MPU: [wreg+status,2]
  5197  0880  1283               	bcf	3,5	;RP0=0, select bank0
  5198  0881  1303               	bcf	3,6	;RP1=0, select bank0
  5199  0882  0185               	clrf	5	;volatile
  5200                           
  5201                           ;Init_MPU.c: 12: PORTB = 0x00;
  5202  0883  0186               	clrf	6	;volatile
  5203                           
  5204                           ;Init_MPU.c: 13: PORTC = 0x00;
  5205  0884  0187               	clrf	7	;volatile
  5206                           
  5207                           ;Init_MPU.c: 14: PORTD = 0x00;
  5208  0885  0188               	clrf	8	;volatile
  5209                           
  5210                           ;Init_MPU.c: 15: PORTE = 0x00;
  5211  0886  0189               	clrf	9	;volatile
  5212                           
  5213                           ;Init_MPU.c: 18: ANSEL = 0x00;
  5214  0887  1683               	bsf	3,5	;RP0=1, select bank3
  5215  0888  1703               	bsf	3,6	;RP1=1, select bank3
  5216  0889  0188               	clrf	8	;volatile
  5217                           
  5218                           ;Init_MPU.c: 19: ANSELH = 0x00;
  5219  088A  0189               	clrf	9	;volatile
  5220                           
  5221                           ;Init_MPU.c: 23: TRISA = 0b10000000;
  5222  088B  3080               	movlw	128
  5223  088C  1683               	bsf	3,5	;RP0=1, select bank1
  5224  088D  1303               	bcf	3,6	;RP1=0, select bank1
  5225  088E  0085               	movwf	5	;volatile
  5226                           
  5227                           ;Init_MPU.c: 24: TRISB = 0b00100000;
  5228  088F  3020               	movlw	32
  5229  0890  0086               	movwf	6	;volatile
  5230                           
  5231                           ;Init_MPU.c: 25: TRISC = 0b10011000;
  5232  0891  3098               	movlw	152
  5233  0892  0087               	movwf	7	;volatile
  5234                           
  5235                           ;Init_MPU.c: 26: TRISD = 0b00000000;
  5236  0893  0188               	clrf	8	;volatile
  5237                           
  5238                           ;Init_MPU.c: 27: TRISE = 0b00000000;
  5239  0894  0189               	clrf	9	;volatile
  5240                           
  5241                           ;Init_MPU.c: 30: PORTA = 0x00;
  5242  0895  1283               	bcf	3,5	;RP0=0, select bank0
  5243  0896  1303               	bcf	3,6	;RP1=0, select bank0
  5244  0897  0185               	clrf	5	;volatile
  5245                           
  5246                           ;Init_MPU.c: 31: PORTB = 0x00;
  5247  0898  0186               	clrf	6	;volatile
  5248                           
  5249                           ;Init_MPU.c: 32: PORTC = 0x00;
  5250  0899  0187               	clrf	7	;volatile
  5251                           
  5252                           ;Init_MPU.c: 33: PORTD = 0x00;
  5253  089A  0188               	clrf	8	;volatile
  5254                           
  5255                           ;Init_MPU.c: 34: PORTE = 0x00;
  5256  089B  0189               	clrf	9	;volatile
  5257  089C  0008               	return
  5258  089D                     __end_of_Init_MPU:	
  5259                           
  5260                           	psect	text13
  5261  0977                     __ptext13:	
  5262 ;; *************** function _Init_I2C_M *****************
  5263 ;; Defined at:
  5264 ;;		line 8 in file "I2C.c"
  5265 ;; Parameters:    Size  Location     Type
  5266 ;;  c               4    0[BANK0 ] const unsigned long 
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;		None
  5269 ;; Return value:  Size  Location     Type
  5270 ;;                  1    wreg      void 
  5271 ;; Registers used:
  5272 ;;		wreg, status,2, status,0, pclath, cstack
  5273 ;; Tracked objects:
  5274 ;;		On entry : 0/0
  5275 ;;		On exit  : 0/0
  5276 ;;		Unchanged: 0/0
  5277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5278 ;;      Params:         0       4       0       0       0
  5279 ;;      Locals:         0       0       0       0       0
  5280 ;;      Temps:          0       4       0       0       0
  5281 ;;      Totals:         0       8       0       0       0
  5282 ;;Total ram usage:        8 bytes
  5283 ;; Hardware stack levels used:    1
  5284 ;; Hardware stack levels required when called:    1
  5285 ;; This function calls:
  5286 ;;		___lldiv
  5287 ;; This function is called by:
  5288 ;;		_main
  5289 ;; This function uses a non-reentrant model
  5290 ;;
  5291                           
  5292                           
  5293                           ;psect for function _Init_I2C_M
  5294  0977                     _Init_I2C_M:	
  5295                           
  5296                           ;I2C.c: 9: SSPCON = 0b00101000;
  5297                           
  5298                           ;incstack = 0
  5299                           ; Regs used in _Init_I2C_M: [wreg+status,2+status,0+pclath+cstack]
  5300  0977  3028               	movlw	40
  5301  0978  1283               	bcf	3,5	;RP0=0, select bank0
  5302  0979  1303               	bcf	3,6	;RP1=0, select bank0
  5303  097A  0094               	movwf	20	;volatile
  5304                           
  5305                           ;I2C.c: 10: SSPCON2 = 0;
  5306  097B  1683               	bsf	3,5	;RP0=1, select bank1
  5307  097C  1303               	bcf	3,6	;RP1=0, select bank1
  5308  097D  0191               	clrf	17	;volatile
  5309                           
  5310                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  5311  097E  1283               	bcf	3,5	;RP0=0, select bank0
  5312  097F  1303               	bcf	3,6	;RP1=0, select bank0
  5313  0980  0820               	movf	Init_I2C_M@c,w
  5314  0981  00A4               	movwf	??_Init_I2C_M
  5315  0982  0821               	movf	Init_I2C_M@c+1,w
  5316  0983  00A5               	movwf	??_Init_I2C_M+1
  5317  0984  0822               	movf	Init_I2C_M@c+2,w
  5318  0985  00A6               	movwf	??_Init_I2C_M+2
  5319  0986  0823               	movf	Init_I2C_M@c+3,w
  5320  0987  00A7               	movwf	??_Init_I2C_M+3
  5321  0988  3002               	movlw	2
  5322  0989                     u3195:	
  5323  0989  1003               	clrc
  5324  098A  0DA4               	rlf	??_Init_I2C_M,f
  5325  098B  0DA5               	rlf	??_Init_I2C_M+1,f
  5326  098C  0DA6               	rlf	??_Init_I2C_M+2,f
  5327  098D  0DA7               	rlf	??_Init_I2C_M+3,f
  5328  098E  3EFF               	addlw	-1
  5329  098F  1D03               	skipz
  5330  0990  2989               	goto	u3195
  5331  0991  0827               	movf	??_Init_I2C_M+3,w
  5332  0992  00F3               	movwf	___lldiv@divisor+3
  5333  0993  0826               	movf	??_Init_I2C_M+2,w
  5334  0994  00F2               	movwf	___lldiv@divisor+2
  5335  0995  0825               	movf	??_Init_I2C_M+1,w
  5336  0996  00F1               	movwf	___lldiv@divisor+1
  5337  0997  0824               	movf	??_Init_I2C_M,w
  5338  0998  00F0               	movwf	___lldiv@divisor
  5339  0999  3000               	movlw	0
  5340  099A  00F7               	movwf	___lldiv@dividend+3
  5341  099B  3098               	movlw	152
  5342  099C  00F6               	movwf	___lldiv@dividend+2
  5343  099D  3096               	movlw	150
  5344  099E  00F5               	movwf	___lldiv@dividend+1
  5345  099F  3080               	movlw	128
  5346  09A0  00F4               	movwf	___lldiv@dividend
  5347  09A1  120A  158A  2380   	fcall	___lldiv
  5348  09A4  0870               	movf	?___lldiv,w
  5349  09A5  3EFF               	addlw	255
  5350  09A6  1683               	bsf	3,5	;RP0=1, select bank1
  5351  09A7  1303               	bcf	3,6	;RP1=0, select bank1
  5352  09A8  0093               	movwf	19	;volatile
  5353                           
  5354                           ;I2C.c: 12: SSPSTAT = 0;
  5355  09A9  0194               	clrf	20	;volatile
  5356  09AA  0008               	return
  5357  09AB                     __end_of_Init_I2C_M:	
  5358                           
  5359                           	psect	text14
  5360  0B80                     __ptext14:	
  5361 ;; *************** function ___lldiv *****************
  5362 ;; Defined at:
  5363 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  5364 ;; Parameters:    Size  Location     Type
  5365 ;;  divisor         4    0[COMMON] unsigned long 
  5366 ;;  dividend        4    4[COMMON] unsigned long 
  5367 ;; Auto vars:     Size  Location     Type
  5368 ;;  quotient        4    9[COMMON] unsigned long 
  5369 ;;  counter         1   13[COMMON] unsigned char 
  5370 ;; Return value:  Size  Location     Type
  5371 ;;                  4    0[COMMON] unsigned long 
  5372 ;; Registers used:
  5373 ;;		wreg, status,2, status,0
  5374 ;; Tracked objects:
  5375 ;;		On entry : 0/0
  5376 ;;		On exit  : 0/0
  5377 ;;		Unchanged: 0/0
  5378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5379 ;;      Params:         8       0       0       0       0
  5380 ;;      Locals:         5       0       0       0       0
  5381 ;;      Temps:          1       0       0       0       0
  5382 ;;      Totals:        14       0       0       0       0
  5383 ;;Total ram usage:       14 bytes
  5384 ;; Hardware stack levels used:    1
  5385 ;; This function calls:
  5386 ;;		Nothing
  5387 ;; This function is called by:
  5388 ;;		_Init_I2C_M
  5389 ;; This function uses a non-reentrant model
  5390 ;;
  5391                           
  5392                           
  5393                           ;psect for function ___lldiv
  5394  0B80                     ___lldiv:	
  5395                           
  5396                           ;incstack = 0
  5397                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5398  0B80  3000               	movlw	0
  5399  0B81  00FC               	movwf	___lldiv@quotient+3
  5400  0B82  3000               	movlw	0
  5401  0B83  00FB               	movwf	___lldiv@quotient+2
  5402  0B84  3000               	movlw	0
  5403  0B85  00FA               	movwf	___lldiv@quotient+1
  5404  0B86  3000               	movlw	0
  5405  0B87  00F9               	movwf	___lldiv@quotient
  5406  0B88  0873               	movf	___lldiv@divisor+3,w
  5407  0B89  0472               	iorwf	___lldiv@divisor+2,w
  5408  0B8A  0471               	iorwf	___lldiv@divisor+1,w
  5409  0B8B  0470               	iorwf	___lldiv@divisor,w
  5410  0B8C  1903               	skipnz
  5411  0B8D  2BD5               	goto	l3341
  5412  0B8E  01FD               	clrf	___lldiv@counter
  5413  0B8F  0AFD               	incf	___lldiv@counter,f
  5414  0B90                     l3327:	
  5415  0B90  1BF3               	btfsc	___lldiv@divisor+3,7
  5416  0B91  2BA0               	goto	l3329
  5417  0B92  3001               	movlw	1
  5418  0B93  00F8               	movwf	??___lldiv
  5419  0B94                     u3045:	
  5420  0B94  1003               	clrc
  5421  0B95  0DF0               	rlf	___lldiv@divisor,f
  5422  0B96  0DF1               	rlf	___lldiv@divisor+1,f
  5423  0B97  0DF2               	rlf	___lldiv@divisor+2,f
  5424  0B98  0DF3               	rlf	___lldiv@divisor+3,f
  5425  0B99  0BF8               	decfsz	??___lldiv,f
  5426  0B9A  2B94               	goto	u3045
  5427  0B9B  3001               	movlw	1
  5428  0B9C  00F8               	movwf	??___lldiv
  5429  0B9D  0878               	movf	??___lldiv,w
  5430  0B9E  07FD               	addwf	___lldiv@counter,f
  5431  0B9F  2B90               	goto	l3327
  5432  0BA0                     l3329:	
  5433  0BA0  3001               	movlw	1
  5434  0BA1  00F8               	movwf	??___lldiv
  5435  0BA2                     u3065:	
  5436  0BA2  1003               	clrc
  5437  0BA3  0DF9               	rlf	___lldiv@quotient,f
  5438  0BA4  0DFA               	rlf	___lldiv@quotient+1,f
  5439  0BA5  0DFB               	rlf	___lldiv@quotient+2,f
  5440  0BA6  0DFC               	rlf	___lldiv@quotient+3,f
  5441  0BA7  0BF8               	decfsz	??___lldiv,f
  5442  0BA8  2BA2               	goto	u3065
  5443  0BA9  0873               	movf	___lldiv@divisor+3,w
  5444  0BAA  0277               	subwf	___lldiv@dividend+3,w
  5445  0BAB  1D03               	skipz
  5446  0BAC  2BB7               	goto	u3075
  5447  0BAD  0872               	movf	___lldiv@divisor+2,w
  5448  0BAE  0276               	subwf	___lldiv@dividend+2,w
  5449  0BAF  1D03               	skipz
  5450  0BB0  2BB7               	goto	u3075
  5451  0BB1  0871               	movf	___lldiv@divisor+1,w
  5452  0BB2  0275               	subwf	___lldiv@dividend+1,w
  5453  0BB3  1D03               	skipz
  5454  0BB4  2BB7               	goto	u3075
  5455  0BB5  0870               	movf	___lldiv@divisor,w
  5456  0BB6  0274               	subwf	___lldiv@dividend,w
  5457  0BB7                     u3075:	
  5458  0BB7  1C03               	skipc
  5459  0BB8  2BC8               	goto	l3337
  5460  0BB9  0870               	movf	___lldiv@divisor,w
  5461  0BBA  02F4               	subwf	___lldiv@dividend,f
  5462  0BBB  0871               	movf	___lldiv@divisor+1,w
  5463  0BBC  1C03               	skipc
  5464  0BBD  0F71               	incfsz	___lldiv@divisor+1,w
  5465  0BBE  02F5               	subwf	___lldiv@dividend+1,f
  5466  0BBF  0872               	movf	___lldiv@divisor+2,w
  5467  0BC0  1C03               	skipc
  5468  0BC1  0F72               	incfsz	___lldiv@divisor+2,w
  5469  0BC2  02F6               	subwf	___lldiv@dividend+2,f
  5470  0BC3  0873               	movf	___lldiv@divisor+3,w
  5471  0BC4  1C03               	skipc
  5472  0BC5  0F73               	incfsz	___lldiv@divisor+3,w
  5473  0BC6  02F7               	subwf	___lldiv@dividend+3,f
  5474  0BC7  1479               	bsf	___lldiv@quotient,0
  5475  0BC8                     l3337:	
  5476  0BC8  3001               	movlw	1
  5477  0BC9                     u3085:	
  5478  0BC9  1003               	clrc
  5479  0BCA  0CF3               	rrf	___lldiv@divisor+3,f
  5480  0BCB  0CF2               	rrf	___lldiv@divisor+2,f
  5481  0BCC  0CF1               	rrf	___lldiv@divisor+1,f
  5482  0BCD  0CF0               	rrf	___lldiv@divisor,f
  5483  0BCE  3EFF               	addlw	-1
  5484  0BCF  1D03               	skipz
  5485  0BD0  2BC9               	goto	u3085
  5486  0BD1  3001               	movlw	1
  5487  0BD2  02FD               	subwf	___lldiv@counter,f
  5488  0BD3  1D03               	btfss	3,2
  5489  0BD4  2BA0               	goto	l3329
  5490  0BD5                     l3341:	
  5491  0BD5  087C               	movf	___lldiv@quotient+3,w
  5492  0BD6  00F3               	movwf	?___lldiv+3
  5493  0BD7  087B               	movf	___lldiv@quotient+2,w
  5494  0BD8  00F2               	movwf	?___lldiv+2
  5495  0BD9  087A               	movf	___lldiv@quotient+1,w
  5496  0BDA  00F1               	movwf	?___lldiv+1
  5497  0BDB  0879               	movf	___lldiv@quotient,w
  5498  0BDC  00F0               	movwf	?___lldiv
  5499  0BDD  0008               	return
  5500  0BDE                     __end_of___lldiv:	
  5501                           
  5502                           	psect	text15
  5503  091D                     __ptext15:	
  5504 ;; *************** function _FMTX *****************
  5505 ;; Defined at:
  5506 ;;		line 270 in file "FMCW.c"
  5507 ;; Parameters:    Size  Location     Type
  5508 ;;  Nref            2   60[BANK0 ] int 
  5509 ;;  Nprg            2   62[BANK0 ] PTR int 
  5510 ;;		 -> RAM(512), main@FMTX_Nprg(10), FMTX_Nprg(10), 
  5511 ;; Auto vars:     Size  Location     Type
  5512 ;;  fmtx            2   64[BANK0 ] int 
  5513 ;; Return value:  Size  Location     Type
  5514 ;;                  1    wreg      void 
  5515 ;; Registers used:
  5516 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5517 ;; Tracked objects:
  5518 ;;		On entry : 0/0
  5519 ;;		On exit  : 0/0
  5520 ;;		Unchanged: 0/0
  5521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5522 ;;      Params:         0       4       0       0       0
  5523 ;;      Locals:         0       2       0       0       0
  5524 ;;      Temps:          0       0       0       0       0
  5525 ;;      Totals:         0       6       0       0       0
  5526 ;;Total ram usage:        6 bytes
  5527 ;; Hardware stack levels used:    1
  5528 ;; Hardware stack levels required when called:    3
  5529 ;; This function calls:
  5530 ;;		_OPINIT
  5531 ;;		_OUTFQ
  5532 ;;		_RFDOUT
  5533 ;; This function is called by:
  5534 ;;		_main
  5535 ;;		_SetPLL
  5536 ;; This function uses a non-reentrant model
  5537 ;;
  5538                           
  5539                           
  5540                           ;psect for function _FMTX
  5541  091D                     _FMTX:	
  5542                           
  5543                           ;FMCW.c: 271: int fmtx = 1;
  5544                           
  5545                           ;incstack = 0
  5546                           ; Regs used in _FMTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5547  091D  3001               	movlw	1
  5548  091E  1283               	bcf	3,5	;RP0=0, select bank0
  5549  091F  1303               	bcf	3,6	;RP1=0, select bank0
  5550  0920  00E0               	movwf	FMTX@fmtx
  5551  0921  3000               	movlw	0
  5552  0922  00E1               	movwf	FMTX@fmtx+1
  5553                           
  5554                           ;FMCW.c: 272: OPINIT(fmtx);
  5555  0923  0861               	movf	FMTX@fmtx+1,w
  5556  0924  00F5               	movwf	OPINIT@fmcwtxrx+1
  5557  0925  0860               	movf	FMTX@fmtx,w
  5558  0926  00F4               	movwf	OPINIT@fmcwtxrx
  5559  0927  120A  158A  24A4  120A  158A  	fcall	_OPINIT
  5560                           
  5561                           ;FMCW.c: 273: RFDOUT(fmtx, Nref);
  5562  092C  1283               	bcf	3,5	;RP0=0, select bank0
  5563  092D  1303               	bcf	3,6	;RP1=0, select bank0
  5564  092E  0861               	movf	FMTX@fmtx+1,w
  5565  092F  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5566  0930  0860               	movf	FMTX@fmtx,w
  5567  0931  00F9               	movwf	RFDOUT@fmcwtxrx
  5568  0932  085D               	movf	FMTX@Nref+1,w
  5569  0933  00FC               	movwf	RFDOUT@Nref+1
  5570  0934  085C               	movf	FMTX@Nref,w
  5571  0935  00FB               	movwf	RFDOUT@Nref
  5572  0936  120A  158A  2521  120A  158A  	fcall	_RFDOUT
  5573                           
  5574                           ;FMCW.c: 274: OUTFQ(fmtx, Nprg);
  5575  093B  1283               	bcf	3,5	;RP0=0, select bank0
  5576  093C  1303               	bcf	3,6	;RP1=0, select bank0
  5577  093D  0861               	movf	FMTX@fmtx+1,w
  5578  093E  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5579  093F  0860               	movf	FMTX@fmtx,w
  5580  0940  00F9               	movwf	OUTFQ@fmcwtxrx
  5581  0941  085E               	movf	FMTX@Nprg,w
  5582  0942  00FB               	movwf	OUTFQ@Nprg
  5583  0943  085F               	movf	FMTX@Nprg+1,w
  5584  0944  00FC               	movwf	OUTFQ@Nprg+1
  5585  0945  120A  118A  20AC   	fcall	_OUTFQ
  5586  0948  0008               	return
  5587  0949                     __end_of_FMTX:	
  5588                           
  5589                           	psect	text16
  5590  08F1                     __ptext16:	
  5591 ;; *************** function _FMRX *****************
  5592 ;; Defined at:
  5593 ;;		line 298 in file "FMCW.c"
  5594 ;; Parameters:    Size  Location     Type
  5595 ;;  Nref            2   60[BANK0 ] int 
  5596 ;;  Nprg            2   62[BANK0 ] PTR int 
  5597 ;;		 -> RAM(512), main@FMRX_Nprg(10), FMRX_Nprg(10), 
  5598 ;; Auto vars:     Size  Location     Type
  5599 ;;  fmrx            2   64[BANK0 ] int 
  5600 ;; Return value:  Size  Location     Type
  5601 ;;                  1    wreg      void 
  5602 ;; Registers used:
  5603 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5604 ;; Tracked objects:
  5605 ;;		On entry : 0/0
  5606 ;;		On exit  : 0/0
  5607 ;;		Unchanged: 0/0
  5608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5609 ;;      Params:         0       4       0       0       0
  5610 ;;      Locals:         0       2       0       0       0
  5611 ;;      Temps:          0       0       0       0       0
  5612 ;;      Totals:         0       6       0       0       0
  5613 ;;Total ram usage:        6 bytes
  5614 ;; Hardware stack levels used:    1
  5615 ;; Hardware stack levels required when called:    3
  5616 ;; This function calls:
  5617 ;;		_OPINIT
  5618 ;;		_OUTFQ
  5619 ;;		_RFDOUT
  5620 ;; This function is called by:
  5621 ;;		_main
  5622 ;;		_SetPLL
  5623 ;; This function uses a non-reentrant model
  5624 ;;
  5625                           
  5626                           
  5627                           ;psect for function _FMRX
  5628  08F1                     _FMRX:	
  5629                           
  5630                           ;FMCW.c: 299: int fmrx = 3;
  5631                           
  5632                           ;incstack = 0
  5633                           ; Regs used in _FMRX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5634  08F1  3003               	movlw	3
  5635  08F2  1283               	bcf	3,5	;RP0=0, select bank0
  5636  08F3  1303               	bcf	3,6	;RP1=0, select bank0
  5637  08F4  00E0               	movwf	FMRX@fmrx
  5638  08F5  3000               	movlw	0
  5639  08F6  00E1               	movwf	FMRX@fmrx+1
  5640                           
  5641                           ;FMCW.c: 300: OPINIT(fmrx);
  5642  08F7  0861               	movf	FMRX@fmrx+1,w
  5643  08F8  00F5               	movwf	OPINIT@fmcwtxrx+1
  5644  08F9  0860               	movf	FMRX@fmrx,w
  5645  08FA  00F4               	movwf	OPINIT@fmcwtxrx
  5646  08FB  120A  158A  24A4  120A  158A  	fcall	_OPINIT
  5647                           
  5648                           ;FMCW.c: 301: RFDOUT(fmrx, Nref);
  5649  0900  1283               	bcf	3,5	;RP0=0, select bank0
  5650  0901  1303               	bcf	3,6	;RP1=0, select bank0
  5651  0902  0861               	movf	FMRX@fmrx+1,w
  5652  0903  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5653  0904  0860               	movf	FMRX@fmrx,w
  5654  0905  00F9               	movwf	RFDOUT@fmcwtxrx
  5655  0906  085D               	movf	FMRX@Nref+1,w
  5656  0907  00FC               	movwf	RFDOUT@Nref+1
  5657  0908  085C               	movf	FMRX@Nref,w
  5658  0909  00FB               	movwf	RFDOUT@Nref
  5659  090A  120A  158A  2521  120A  158A  	fcall	_RFDOUT
  5660                           
  5661                           ;FMCW.c: 302: OUTFQ(fmrx, Nprg);
  5662  090F  1283               	bcf	3,5	;RP0=0, select bank0
  5663  0910  1303               	bcf	3,6	;RP1=0, select bank0
  5664  0911  0861               	movf	FMRX@fmrx+1,w
  5665  0912  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5666  0913  0860               	movf	FMRX@fmrx,w
  5667  0914  00F9               	movwf	OUTFQ@fmcwtxrx
  5668  0915  085E               	movf	FMRX@Nprg,w
  5669  0916  00FB               	movwf	OUTFQ@Nprg
  5670  0917  085F               	movf	FMRX@Nprg+1,w
  5671  0918  00FC               	movwf	OUTFQ@Nprg+1
  5672  0919  120A  118A  20AC   	fcall	_OUTFQ
  5673  091C  0008               	return
  5674  091D                     __end_of_FMRX:	
  5675                           
  5676                           	psect	text17
  5677  0B23                     __ptext17:	
  5678 ;; *************** function _EEPROM_Write *****************
  5679 ;; Defined at:
  5680 ;;		line 51 in file "I2C.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;  EEPROM_addre    1    wreg     unsigned char 
  5683 ;;  high_address    1    2[COMMON] unsigned char 
  5684 ;;  low_address     1    3[COMMON] unsigned char 
  5685 ;;  data            1    4[COMMON] PTR unsigned char 
  5686 ;;		 -> NULL(0), dData(16), 
  5687 ;; Auto vars:     Size  Location     Type
  5688 ;;  EEPROM_addre    1    8[COMMON] unsigned char 
  5689 ;;  Address         1    9[COMMON] unsigned char 
  5690 ;; Return value:  Size  Location     Type
  5691 ;;                  1    wreg      void 
  5692 ;; Registers used:
  5693 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5694 ;; Tracked objects:
  5695 ;;		On entry : 0/0
  5696 ;;		On exit  : 0/0
  5697 ;;		Unchanged: 0/0
  5698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5699 ;;      Params:         3       0       0       0       0
  5700 ;;      Locals:         2       0       0       0       0
  5701 ;;      Temps:          3       0       0       0       0
  5702 ;;      Totals:         8       0       0       0       0
  5703 ;;Total ram usage:        8 bytes
  5704 ;; Hardware stack levels used:    1
  5705 ;; Hardware stack levels required when called:    2
  5706 ;; This function calls:
  5707 ;;		_I2C_Master_Start
  5708 ;;		_I2C_Master_Stop
  5709 ;;		_I2C_Master_Write
  5710 ;; This function is called by:
  5711 ;;		_main
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           
  5716                           ;psect for function _EEPROM_Write
  5717  0B23                     _EEPROM_Write:	
  5718                           
  5719                           ;incstack = 0
  5720                           ; Regs used in _EEPROM_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5721                           ;EEPROM_Write@EEPROM_address stored from wreg
  5722  0B23  00F8               	movwf	EEPROM_Write@EEPROM_address
  5723                           
  5724                           ;I2C.c: 52: UBYTE Address = EEPROM_address << 1;
  5725  0B24  0878               	movf	EEPROM_Write@EEPROM_address,w
  5726  0B25  00F5               	movwf	??_EEPROM_Write
  5727  0B26  0775               	addwf	??_EEPROM_Write,w
  5728  0B27  00F6               	movwf	??_EEPROM_Write+1
  5729  0B28  0876               	movf	??_EEPROM_Write+1,w
  5730  0B29  00F9               	movwf	EEPROM_Write@Address
  5731                           
  5732                           ;I2C.c: 55: I2C_Master_Start();
  5733  0B2A  160A  118A  2797  120A  158A  	fcall	_I2C_Master_Start
  5734                           
  5735                           ;I2C.c: 56: I2C_Master_Write(Address);
  5736  0B2F  0879               	movf	EEPROM_Write@Address,w
  5737  0B30  00F5               	movwf	??_EEPROM_Write
  5738  0B31  01F6               	clrf	??_EEPROM_Write+1
  5739  0B32  0875               	movf	??_EEPROM_Write,w
  5740  0B33  00F0               	movwf	I2C_Master_Write@d
  5741  0B34  0876               	movf	??_EEPROM_Write+1,w
  5742  0B35  00F1               	movwf	I2C_Master_Write@d+1
  5743  0B36  160A  118A  27A5  120A  158A  	fcall	_I2C_Master_Write
  5744                           
  5745                           ;I2C.c: 57: I2C_Master_Write(high_address);
  5746  0B3B  0872               	movf	EEPROM_Write@high_address,w
  5747  0B3C  00F5               	movwf	??_EEPROM_Write
  5748  0B3D  01F6               	clrf	??_EEPROM_Write+1
  5749  0B3E  0875               	movf	??_EEPROM_Write,w
  5750  0B3F  00F0               	movwf	I2C_Master_Write@d
  5751  0B40  0876               	movf	??_EEPROM_Write+1,w
  5752  0B41  00F1               	movwf	I2C_Master_Write@d+1
  5753  0B42  160A  118A  27A5  120A  158A  	fcall	_I2C_Master_Write
  5754                           
  5755                           ;I2C.c: 58: I2C_Master_Write(low_address);
  5756  0B47  0873               	movf	EEPROM_Write@low_address,w
  5757  0B48  00F5               	movwf	??_EEPROM_Write
  5758  0B49  01F6               	clrf	??_EEPROM_Write+1
  5759  0B4A  0875               	movf	??_EEPROM_Write,w
  5760  0B4B  00F0               	movwf	I2C_Master_Write@d
  5761  0B4C  0876               	movf	??_EEPROM_Write+1,w
  5762  0B4D  00F1               	movwf	I2C_Master_Write@d+1
  5763  0B4E  160A  118A  27A5  120A  158A  	fcall	_I2C_Master_Write
  5764  0B53                     l3547:	
  5765                           ;I2C.c: 59: while(*data){
  5766                           
  5767  0B53  0874               	movf	EEPROM_Write@data,w
  5768  0B54  0084               	movwf	4
  5769  0B55  1783               	bsf	3,7	;select IRP bank2
  5770  0B56  0800               	movf	0,w
  5771  0B57  1903               	btfsc	3,2
  5772  0B58  2B6D               	goto	l3549
  5773                           
  5774                           ;I2C.c: 60: I2C_Master_Write(*data);
  5775  0B59  0874               	movf	EEPROM_Write@data,w
  5776  0B5A  0084               	movwf	4
  5777  0B5B  1783               	bsf	3,7	;select IRP bank2
  5778  0B5C  0800               	movf	0,w
  5779  0B5D  00F5               	movwf	??_EEPROM_Write
  5780  0B5E  01F6               	clrf	??_EEPROM_Write+1
  5781  0B5F  0875               	movf	??_EEPROM_Write,w
  5782  0B60  00F0               	movwf	I2C_Master_Write@d
  5783  0B61  0876               	movf	??_EEPROM_Write+1,w
  5784  0B62  00F1               	movwf	I2C_Master_Write@d+1
  5785  0B63  160A  118A  27A5  120A  158A  	fcall	_I2C_Master_Write
  5786                           
  5787                           ;I2C.c: 61: ++data;
  5788  0B68  3001               	movlw	1
  5789  0B69  00F5               	movwf	??_EEPROM_Write
  5790  0B6A  0875               	movf	??_EEPROM_Write,w
  5791  0B6B  07F4               	addwf	EEPROM_Write@data,f
  5792  0B6C  2B53               	goto	l3547
  5793  0B6D                     l3549:	
  5794                           
  5795                           ;I2C.c: 62: }
  5796                           ;I2C.c: 63: I2C_Master_Stop();
  5797  0B6D  160A  118A  279E  120A  158A  	fcall	_I2C_Master_Stop
  5798                           
  5799                           ;I2C.c: 64: _delay((unsigned long)((200)*(10000000/4000.0)));
  5800  0B72  3003               	movlw	3
  5801  0B73  00F7               	movwf	??_EEPROM_Write+2
  5802  0B74  308A               	movlw	138
  5803  0B75  00F6               	movwf	??_EEPROM_Write+1
  5804  0B76  3056               	movlw	86
  5805  0B77  00F5               	movwf	??_EEPROM_Write
  5806  0B78                     u3727:	
  5807  0B78  0BF5               	decfsz	??_EEPROM_Write,f
  5808  0B79  2B78               	goto	u3727
  5809  0B7A  0BF6               	decfsz	??_EEPROM_Write+1,f
  5810  0B7B  2B78               	goto	u3727
  5811  0B7C  0BF7               	decfsz	??_EEPROM_Write+2,f
  5812  0B7D  2B78               	goto	u3727
  5813  0B7E  2B7F               	nop2
  5814  0B7F  0008               	return
  5815  0B80                     __end_of_EEPROM_Write:	
  5816                           
  5817                           	psect	text18
  5818  17A5                     __ptext18:	
  5819 ;; *************** function _I2C_Master_Write *****************
  5820 ;; Defined at:
  5821 ;;		line 34 in file "I2C.c"
  5822 ;; Parameters:    Size  Location     Type
  5823 ;;  d               2    0[COMMON] unsigned int 
  5824 ;; Auto vars:     Size  Location     Type
  5825 ;;		None
  5826 ;; Return value:  Size  Location     Type
  5827 ;;                  1    wreg      void 
  5828 ;; Registers used:
  5829 ;;		wreg, status,2, status,0, pclath, cstack
  5830 ;; Tracked objects:
  5831 ;;		On entry : 0/0
  5832 ;;		On exit  : 0/0
  5833 ;;		Unchanged: 0/0
  5834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5835 ;;      Params:         2       0       0       0       0
  5836 ;;      Locals:         0       0       0       0       0
  5837 ;;      Temps:          0       0       0       0       0
  5838 ;;      Totals:         2       0       0       0       0
  5839 ;;Total ram usage:        2 bytes
  5840 ;; Hardware stack levels used:    1
  5841 ;; Hardware stack levels required when called:    1
  5842 ;; This function calls:
  5843 ;;		_I2C_Master_Wait
  5844 ;; This function is called by:
  5845 ;;		_EEPROM_Write
  5846 ;;		_EEPROM_Read
  5847 ;; This function uses a non-reentrant model
  5848 ;;
  5849                           
  5850                           
  5851                           ;psect for function _I2C_Master_Write
  5852  17A5                     _I2C_Master_Write:	
  5853                           
  5854                           ;I2C.c: 35: I2C_Master_Wait();
  5855                           
  5856                           ;incstack = 0
  5857                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5858  17A5  160A  118A  27BD   	fcall	_I2C_Master_Wait
  5859                           
  5860                           ;I2C.c: 36: SSPBUF = d;
  5861  17A8  0870               	movf	I2C_Master_Write@d,w
  5862  17A9  1283               	bcf	3,5	;RP0=0, select bank0
  5863  17AA  1303               	bcf	3,6	;RP1=0, select bank0
  5864  17AB  0093               	movwf	19	;volatile
  5865  17AC  0008               	return
  5866  17AD                     __end_of_I2C_Master_Write:	
  5867                           
  5868                           	psect	text19
  5869  179E                     __ptext19:	
  5870 ;; *************** function _I2C_Master_Stop *****************
  5871 ;; Defined at:
  5872 ;;		line 29 in file "I2C.c"
  5873 ;; Parameters:    Size  Location     Type
  5874 ;;		None
  5875 ;; Auto vars:     Size  Location     Type
  5876 ;;		None
  5877 ;; Return value:  Size  Location     Type
  5878 ;;                  1    wreg      void 
  5879 ;; Registers used:
  5880 ;;		wreg, status,2, status,0, pclath, cstack
  5881 ;; Tracked objects:
  5882 ;;		On entry : 0/0
  5883 ;;		On exit  : 0/0
  5884 ;;		Unchanged: 0/0
  5885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5886 ;;      Params:         0       0       0       0       0
  5887 ;;      Locals:         0       0       0       0       0
  5888 ;;      Temps:          0       0       0       0       0
  5889 ;;      Totals:         0       0       0       0       0
  5890 ;;Total ram usage:        0 bytes
  5891 ;; Hardware stack levels used:    1
  5892 ;; Hardware stack levels required when called:    1
  5893 ;; This function calls:
  5894 ;;		_I2C_Master_Wait
  5895 ;; This function is called by:
  5896 ;;		_EEPROM_Write
  5897 ;;		_EEPROM_Read
  5898 ;; This function uses a non-reentrant model
  5899 ;;
  5900                           
  5901                           
  5902                           ;psect for function _I2C_Master_Stop
  5903  179E                     _I2C_Master_Stop:	
  5904                           
  5905                           ;I2C.c: 30: I2C_Master_Wait();
  5906                           
  5907                           ;incstack = 0
  5908                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5909  179E  160A  118A  27BD   	fcall	_I2C_Master_Wait
  5910                           
  5911                           ;I2C.c: 31: PEN = 1;
  5912  17A1  1683               	bsf	3,5	;RP0=1, select bank1
  5913  17A2  1303               	bcf	3,6	;RP1=0, select bank1
  5914  17A3  1511               	bsf	17,2	;volatile
  5915  17A4  0008               	return
  5916  17A5                     __end_of_I2C_Master_Stop:	
  5917                           
  5918                           	psect	text20
  5919  1797                     __ptext20:	
  5920 ;; *************** function _I2C_Master_Start *****************
  5921 ;; Defined at:
  5922 ;;		line 19 in file "I2C.c"
  5923 ;; Parameters:    Size  Location     Type
  5924 ;;		None
  5925 ;; Auto vars:     Size  Location     Type
  5926 ;;		None
  5927 ;; Return value:  Size  Location     Type
  5928 ;;                  1    wreg      void 
  5929 ;; Registers used:
  5930 ;;		wreg, status,2, status,0, pclath, cstack
  5931 ;; Tracked objects:
  5932 ;;		On entry : 0/0
  5933 ;;		On exit  : 0/0
  5934 ;;		Unchanged: 0/0
  5935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5936 ;;      Params:         0       0       0       0       0
  5937 ;;      Locals:         0       0       0       0       0
  5938 ;;      Temps:          0       0       0       0       0
  5939 ;;      Totals:         0       0       0       0       0
  5940 ;;Total ram usage:        0 bytes
  5941 ;; Hardware stack levels used:    1
  5942 ;; Hardware stack levels required when called:    1
  5943 ;; This function calls:
  5944 ;;		_I2C_Master_Wait
  5945 ;; This function is called by:
  5946 ;;		_EEPROM_Write
  5947 ;;		_EEPROM_Read
  5948 ;; This function uses a non-reentrant model
  5949 ;;
  5950                           
  5951                           
  5952                           ;psect for function _I2C_Master_Start
  5953  1797                     _I2C_Master_Start:	
  5954                           
  5955                           ;I2C.c: 20: I2C_Master_Wait();
  5956                           
  5957                           ;incstack = 0
  5958                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5959  1797  160A  118A  27BD   	fcall	_I2C_Master_Wait
  5960                           
  5961                           ;I2C.c: 21: SEN = 1;
  5962  179A  1683               	bsf	3,5	;RP0=1, select bank1
  5963  179B  1303               	bcf	3,6	;RP1=0, select bank1
  5964  179C  1411               	bsf	17,0	;volatile
  5965  179D  0008               	return
  5966  179E                     __end_of_I2C_Master_Start:	
  5967                           
  5968                           	psect	text21
  5969  17BD                     __ptext21:	
  5970 ;; *************** function _I2C_Master_Wait *****************
  5971 ;; Defined at:
  5972 ;;		line 15 in file "I2C.c"
  5973 ;; Parameters:    Size  Location     Type
  5974 ;;		None
  5975 ;; Auto vars:     Size  Location     Type
  5976 ;;		None
  5977 ;; Return value:  Size  Location     Type
  5978 ;;                  1    wreg      void 
  5979 ;; Registers used:
  5980 ;;		wreg, status,2
  5981 ;; Tracked objects:
  5982 ;;		On entry : 0/0
  5983 ;;		On exit  : 0/0
  5984 ;;		Unchanged: 0/0
  5985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5986 ;;      Params:         0       0       0       0       0
  5987 ;;      Locals:         0       0       0       0       0
  5988 ;;      Temps:          0       0       0       0       0
  5989 ;;      Totals:         0       0       0       0       0
  5990 ;;Total ram usage:        0 bytes
  5991 ;; Hardware stack levels used:    1
  5992 ;; This function calls:
  5993 ;;		Nothing
  5994 ;; This function is called by:
  5995 ;;		_I2C_Master_Start
  5996 ;;		_I2C_Master_Stop
  5997 ;;		_I2C_Master_Write
  5998 ;;		_I2C_Master_RepeatedStart
  5999 ;;		_I2C_Master_Read
  6000 ;; This function uses a non-reentrant model
  6001 ;;
  6002                           
  6003                           
  6004                           ;psect for function _I2C_Master_Wait
  6005  17BD                     _I2C_Master_Wait:	
  6006  17BD                     l494:	
  6007                           ;I2C.c: 16: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  6008                           
  6009                           ;incstack = 0
  6010                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  6011                           
  6012  17BD  1683               	bsf	3,5	;RP0=1, select bank1
  6013  17BE  1303               	bcf	3,6	;RP1=0, select bank1
  6014  17BF  1914               	btfsc	20,2	;volatile
  6015  17C0  2FBD               	goto	l494
  6016  17C1  0811               	movf	17,w	;volatile
  6017  17C2  391F               	andlw	31
  6018  17C3  1903               	btfsc	3,2
  6019  17C4  0008               	return
  6020  17C5  2FBD               	goto	l494
  6021  17C6                     __end_of_I2C_Master_Wait:	
  6022                           
  6023                           	psect	text22
  6024  08C5                     __ptext22:	
  6025 ;; *************** function _CWTX *****************
  6026 ;; Defined at:
  6027 ;;		line 284 in file "FMCW.c"
  6028 ;; Parameters:    Size  Location     Type
  6029 ;;  Nref            2   60[BANK0 ] int 
  6030 ;;  Nprg            2   62[BANK0 ] PTR int 
  6031 ;;		 -> RAM(512), main@CWTX_Nprg(10), CWTX_Nprg(10), 
  6032 ;; Auto vars:     Size  Location     Type
  6033 ;;  cwtx            2   64[BANK0 ] int 
  6034 ;; Return value:  Size  Location     Type
  6035 ;;                  1    wreg      void 
  6036 ;; Registers used:
  6037 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6038 ;; Tracked objects:
  6039 ;;		On entry : 0/0
  6040 ;;		On exit  : 0/0
  6041 ;;		Unchanged: 0/0
  6042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6043 ;;      Params:         0       4       0       0       0
  6044 ;;      Locals:         0       2       0       0       0
  6045 ;;      Temps:          0       0       0       0       0
  6046 ;;      Totals:         0       6       0       0       0
  6047 ;;Total ram usage:        6 bytes
  6048 ;; Hardware stack levels used:    1
  6049 ;; Hardware stack levels required when called:    3
  6050 ;; This function calls:
  6051 ;;		_OPINIT
  6052 ;;		_OUTFQ
  6053 ;;		_RFDOUT
  6054 ;; This function is called by:
  6055 ;;		_main
  6056 ;;		_SetPLL
  6057 ;; This function uses a non-reentrant model
  6058 ;;
  6059                           
  6060                           
  6061                           ;psect for function _CWTX
  6062  08C5                     _CWTX:	
  6063                           
  6064                           ;FMCW.c: 285: int cwtx = 2;
  6065                           
  6066                           ;incstack = 0
  6067                           ; Regs used in _CWTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6068  08C5  3002               	movlw	2
  6069  08C6  1283               	bcf	3,5	;RP0=0, select bank0
  6070  08C7  1303               	bcf	3,6	;RP1=0, select bank0
  6071  08C8  00E0               	movwf	CWTX@cwtx
  6072  08C9  3000               	movlw	0
  6073  08CA  00E1               	movwf	CWTX@cwtx+1
  6074                           
  6075                           ;FMCW.c: 286: OPINIT(cwtx);
  6076  08CB  0861               	movf	CWTX@cwtx+1,w
  6077  08CC  00F5               	movwf	OPINIT@fmcwtxrx+1
  6078  08CD  0860               	movf	CWTX@cwtx,w
  6079  08CE  00F4               	movwf	OPINIT@fmcwtxrx
  6080  08CF  120A  158A  24A4  120A  158A  	fcall	_OPINIT
  6081                           
  6082                           ;FMCW.c: 287: RFDOUT(cwtx, Nref);
  6083  08D4  1283               	bcf	3,5	;RP0=0, select bank0
  6084  08D5  1303               	bcf	3,6	;RP1=0, select bank0
  6085  08D6  0861               	movf	CWTX@cwtx+1,w
  6086  08D7  00FA               	movwf	RFDOUT@fmcwtxrx+1
  6087  08D8  0860               	movf	CWTX@cwtx,w
  6088  08D9  00F9               	movwf	RFDOUT@fmcwtxrx
  6089  08DA  085D               	movf	CWTX@Nref+1,w
  6090  08DB  00FC               	movwf	RFDOUT@Nref+1
  6091  08DC  085C               	movf	CWTX@Nref,w
  6092  08DD  00FB               	movwf	RFDOUT@Nref
  6093  08DE  120A  158A  2521  120A  158A  	fcall	_RFDOUT
  6094                           
  6095                           ;FMCW.c: 288: OUTFQ(cwtx, Nprg);
  6096  08E3  1283               	bcf	3,5	;RP0=0, select bank0
  6097  08E4  1303               	bcf	3,6	;RP1=0, select bank0
  6098  08E5  0861               	movf	CWTX@cwtx+1,w
  6099  08E6  00FA               	movwf	OUTFQ@fmcwtxrx+1
  6100  08E7  0860               	movf	CWTX@cwtx,w
  6101  08E8  00F9               	movwf	OUTFQ@fmcwtxrx
  6102  08E9  085E               	movf	CWTX@Nprg,w
  6103  08EA  00FB               	movwf	OUTFQ@Nprg
  6104  08EB  085F               	movf	CWTX@Nprg+1,w
  6105  08EC  00FC               	movwf	OUTFQ@Nprg+1
  6106  08ED  120A  118A  20AC   	fcall	_OUTFQ
  6107  08F0  0008               	return
  6108  08F1                     __end_of_CWTX:	
  6109                           
  6110                           	psect	text23
  6111  0D21                     __ptext23:	
  6112 ;; *************** function _RFDOUT *****************
  6113 ;; Defined at:
  6114 ;;		line 200 in file "FMCW.c"
  6115 ;; Parameters:    Size  Location     Type
  6116 ;;  fmcwtxrx        2    9[COMMON] int 
  6117 ;;  Nref            2   11[COMMON] int 
  6118 ;; Auto vars:     Size  Location     Type
  6119 ;;  i               2   31[BANK0 ] int 
  6120 ;;  i               2   27[BANK0 ] int 
  6121 ;;  i               2   29[BANK0 ] int 
  6122 ;;  Nref_b         24    3[BANK0 ] int [12]
  6123 ;; Return value:  Size  Location     Type
  6124 ;;                  1    wreg      void 
  6125 ;; Registers used:
  6126 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6127 ;; Tracked objects:
  6128 ;;		On entry : 0/0
  6129 ;;		On exit  : 0/0
  6130 ;;		Unchanged: 0/0
  6131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6132 ;;      Params:         4       0       0       0       0
  6133 ;;      Locals:         0      30       0       0       0
  6134 ;;      Temps:          0       3       0       0       0
  6135 ;;      Totals:         4      33       0       0       0
  6136 ;;Total ram usage:       37 bytes
  6137 ;; Hardware stack levels used:    1
  6138 ;; Hardware stack levels required when called:    2
  6139 ;; This function calls:
  6140 ;;		_H_OUT
  6141 ;;		_L_OUT
  6142 ;;		_STBOUT
  6143 ;;		___awdiv
  6144 ;; This function is called by:
  6145 ;;		_FMTX
  6146 ;;		_CWTX
  6147 ;;		_FMRX
  6148 ;; This function uses a non-reentrant model
  6149 ;;
  6150                           
  6151                           
  6152                           ;psect for function _RFDOUT
  6153  0D21                     _RFDOUT:	
  6154                           
  6155                           ;FMCW.c: 201: int Nref_b[12];
  6156                           ;FMCW.c: 203: for(int i=0; i<12; i++){
  6157                           
  6158                           ;incstack = 0
  6159                           ; Regs used in _RFDOUT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6160  0D21  1283               	bcf	3,5	;RP0=0, select bank0
  6161  0D22  1303               	bcf	3,6	;RP1=0, select bank0
  6162  0D23  01BD               	clrf	RFDOUT@i
  6163  0D24  01BE               	clrf	RFDOUT@i+1
  6164  0D25  083E               	movf	RFDOUT@i+1,w
  6165  0D26  3A80               	xorlw	128
  6166  0D27  00FF               	movwf	127
  6167  0D28  3080               	movlw	128
  6168  0D29  027F               	subwf	127,w
  6169  0D2A  1D03               	skipz
  6170  0D2B  2D2E               	goto	u2955
  6171  0D2C  300C               	movlw	12
  6172  0D2D  023D               	subwf	RFDOUT@i,w
  6173  0D2E                     u2955:	
  6174  0D2E  1803               	btfsc	3,0
  6175  0D2F  2D4C               	goto	l3285
  6176  0D30                     l3279:	
  6177                           
  6178                           ;FMCW.c: 204: Nref_b[i] = 0;
  6179  0D30  1283               	bcf	3,5	;RP0=0, select bank0
  6180  0D31  1303               	bcf	3,6	;RP1=0, select bank0
  6181  0D32  083D               	movf	RFDOUT@i,w
  6182  0D33  00A0               	movwf	??_RFDOUT
  6183  0D34  0720               	addwf	??_RFDOUT,w
  6184  0D35  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6185  0D36  0084               	movwf	4
  6186  0D37  1383               	bcf	3,7	;select IRP bank0
  6187  0D38  0180               	clrf	0
  6188  0D39  0A84               	incf	4,f
  6189  0D3A  0180               	clrf	0
  6190  0D3B  3001               	movlw	1
  6191  0D3C  07BD               	addwf	RFDOUT@i,f
  6192  0D3D  1803               	skipnc
  6193  0D3E  0ABE               	incf	RFDOUT@i+1,f
  6194  0D3F  3000               	movlw	0
  6195  0D40  07BE               	addwf	RFDOUT@i+1,f
  6196  0D41  083E               	movf	RFDOUT@i+1,w
  6197  0D42  3A80               	xorlw	128
  6198  0D43  00FF               	movwf	127
  6199  0D44  3080               	movlw	128
  6200  0D45  027F               	subwf	127,w
  6201  0D46  1D03               	skipz
  6202  0D47  2D4A               	goto	u2965
  6203  0D48  300C               	movlw	12
  6204  0D49  023D               	subwf	RFDOUT@i,w
  6205  0D4A                     u2965:	
  6206  0D4A  1C03               	skipc
  6207  0D4B  2D30               	goto	l3279
  6208  0D4C                     l3285:	
  6209                           
  6210                           ;FMCW.c: 205: }
  6211                           ;FMCW.c: 208: for(int i=0; Nref>0; i++){
  6212  0D4C  1283               	bcf	3,5	;RP0=0, select bank0
  6213  0D4D  1303               	bcf	3,6	;RP1=0, select bank0
  6214  0D4E  01BB               	clrf	RFDOUT@i_478
  6215  0D4F  01BC               	clrf	RFDOUT@i_478+1
  6216  0D50  087C               	movf	RFDOUT@Nref+1,w
  6217  0D51  3A80               	xorlw	128
  6218  0D52  00FF               	movwf	127
  6219  0D53  3080               	movlw	128
  6220  0D54  027F               	subwf	127,w
  6221  0D55  1D03               	skipz
  6222  0D56  2D59               	goto	u2975
  6223  0D57  3001               	movlw	1
  6224  0D58  027B               	subwf	RFDOUT@Nref,w
  6225  0D59                     u2975:	
  6226  0D59  1C03               	btfss	3,0
  6227  0D5A  2D92               	goto	l3299
  6228  0D5B                     l3291:	
  6229                           
  6230                           ;FMCW.c: 209: Nref_b[i] = Nref % 2;
  6231  0D5B  3001               	movlw	1
  6232  0D5C  057B               	andwf	RFDOUT@Nref,w
  6233  0D5D  1283               	bcf	3,5	;RP0=0, select bank0
  6234  0D5E  1303               	bcf	3,6	;RP1=0, select bank0
  6235  0D5F  00A0               	movwf	??_RFDOUT
  6236  0D60  3000               	movlw	0
  6237  0D61  057C               	andwf	RFDOUT@Nref+1,w
  6238  0D62  00A1               	movwf	??_RFDOUT+1
  6239  0D63  083B               	movf	RFDOUT@i_478,w
  6240  0D64  00A2               	movwf	??_RFDOUT+2
  6241  0D65  0722               	addwf	??_RFDOUT+2,w
  6242  0D66  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6243  0D67  0084               	movwf	4
  6244  0D68  0820               	movf	??_RFDOUT,w
  6245  0D69  1383               	bcf	3,7	;select IRP bank0
  6246  0D6A  0080               	movwf	0
  6247  0D6B  0A84               	incf	4,f
  6248  0D6C  0821               	movf	??_RFDOUT+1,w
  6249  0D6D  0080               	movwf	0
  6250                           
  6251                           ;FMCW.c: 210: Nref = Nref / 2;
  6252  0D6E  3002               	movlw	2
  6253  0D6F  00F0               	movwf	___awdiv@divisor
  6254  0D70  3000               	movlw	0
  6255  0D71  00F1               	movwf	___awdiv@divisor+1
  6256  0D72  087C               	movf	RFDOUT@Nref+1,w
  6257  0D73  00F3               	movwf	___awdiv@dividend+1
  6258  0D74  087B               	movf	RFDOUT@Nref,w
  6259  0D75  00F2               	movwf	___awdiv@dividend
  6260  0D76  120A  158A  22CA  120A  158A  	fcall	___awdiv
  6261  0D7B  0871               	movf	?___awdiv+1,w
  6262  0D7C  00FC               	movwf	RFDOUT@Nref+1
  6263  0D7D  0870               	movf	?___awdiv,w
  6264  0D7E  00FB               	movwf	RFDOUT@Nref
  6265  0D7F  3001               	movlw	1
  6266  0D80  1283               	bcf	3,5	;RP0=0, select bank0
  6267  0D81  1303               	bcf	3,6	;RP1=0, select bank0
  6268  0D82  07BB               	addwf	RFDOUT@i_478,f
  6269  0D83  1803               	skipnc
  6270  0D84  0ABC               	incf	RFDOUT@i_478+1,f
  6271  0D85  3000               	movlw	0
  6272  0D86  07BC               	addwf	RFDOUT@i_478+1,f
  6273  0D87  087C               	movf	RFDOUT@Nref+1,w
  6274  0D88  3A80               	xorlw	128
  6275  0D89  00FF               	movwf	127
  6276  0D8A  3080               	movlw	128
  6277  0D8B  027F               	subwf	127,w
  6278  0D8C  1D03               	skipz
  6279  0D8D  2D90               	goto	u2985
  6280  0D8E  3001               	movlw	1
  6281  0D8F  027B               	subwf	RFDOUT@Nref,w
  6282  0D90                     u2985:	
  6283  0D90  1803               	skipnc
  6284  0D91  2D5B               	goto	l3291
  6285  0D92                     l3299:	
  6286                           
  6287                           ;FMCW.c: 211: }
  6288                           ;FMCW.c: 214: for (int i=0; i<12; i++)
  6289  0D92  1283               	bcf	3,5	;RP0=0, select bank0
  6290  0D93  1303               	bcf	3,6	;RP1=0, select bank0
  6291  0D94  01BF               	clrf	RFDOUT@i_479
  6292  0D95  01C0               	clrf	RFDOUT@i_479+1
  6293  0D96  0840               	movf	RFDOUT@i_479+1,w
  6294  0D97  3A80               	xorlw	128
  6295  0D98  00FF               	movwf	127
  6296  0D99  3080               	movlw	128
  6297  0D9A  027F               	subwf	127,w
  6298  0D9B  1D03               	skipz
  6299  0D9C  2D9F               	goto	u2995
  6300  0D9D  300C               	movlw	12
  6301  0D9E  023F               	subwf	RFDOUT@i_479,w
  6302  0D9F                     u2995:	
  6303  0D9F  1803               	btfsc	3,0
  6304  0DA0  2DE8               	goto	l3317
  6305  0DA1                     l3305:	
  6306                           
  6307                           ;FMCW.c: 215: {
  6308                           ;FMCW.c: 216: if(Nref_b[i] == 0)
  6309  0DA1  1283               	bcf	3,5	;RP0=0, select bank0
  6310  0DA2  1303               	bcf	3,6	;RP1=0, select bank0
  6311  0DA3  083F               	movf	RFDOUT@i_479,w
  6312  0DA4  00A0               	movwf	??_RFDOUT
  6313  0DA5  0720               	addwf	??_RFDOUT,w
  6314  0DA6  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6315  0DA7  0084               	movwf	4
  6316  0DA8  1383               	bcf	3,7	;select IRP bank0
  6317  0DA9  0800               	movf	0,w
  6318  0DAA  00A1               	movwf	??_RFDOUT+1
  6319  0DAB  0A84               	incf	4,f
  6320  0DAC  0800               	movf	0,w
  6321  0DAD  00A2               	movwf	??_RFDOUT+2
  6322  0DAE  0821               	movf	??_RFDOUT+1,w
  6323  0DAF  0422               	iorwf	??_RFDOUT+2,w
  6324  0DB0  1D03               	btfss	3,2
  6325  0DB1  2DBB               	goto	l3309
  6326                           
  6327                           ;FMCW.c: 217: {
  6328                           ;FMCW.c: 218: L_OUT(fmcwtxrx);
  6329  0DB2  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6330  0DB3  00F3               	movwf	L_OUT@fmcwtxrx+1
  6331  0DB4  0879               	movf	RFDOUT@fmcwtxrx,w
  6332  0DB5  00F2               	movwf	L_OUT@fmcwtxrx
  6333  0DB6  120A  158A  21F1  120A  158A  	fcall	_L_OUT
  6334  0DBB                     l3309:	
  6335                           
  6336                           ;FMCW.c: 219: }
  6337                           ;FMCW.c: 220: if(Nref_b[i] == 1)
  6338  0DBB  1283               	bcf	3,5	;RP0=0, select bank0
  6339  0DBC  1303               	bcf	3,6	;RP1=0, select bank0
  6340  0DBD  083F               	movf	RFDOUT@i_479,w
  6341  0DBE  00A0               	movwf	??_RFDOUT
  6342  0DBF  0720               	addwf	??_RFDOUT,w
  6343  0DC0  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6344  0DC1  0084               	movwf	4
  6345  0DC2  1383               	bcf	3,7	;select IRP bank0
  6346  0DC3  0800               	movf	0,w
  6347  0DC4  00A1               	movwf	??_RFDOUT+1
  6348  0DC5  0A84               	incf	4,f
  6349  0DC6  0800               	movf	0,w
  6350  0DC7  00A2               	movwf	??_RFDOUT+2
  6351  0DC8  0321               	decf	??_RFDOUT+1,w
  6352  0DC9  0422               	iorwf	??_RFDOUT+2,w
  6353  0DCA  1D03               	btfss	3,2
  6354  0DCB  2DD5               	goto	l3313
  6355                           
  6356                           ;FMCW.c: 221: {
  6357                           ;FMCW.c: 222: H_OUT(fmcwtxrx);
  6358  0DCC  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6359  0DCD  00F3               	movwf	H_OUT@fmcwtxrx+1
  6360  0DCE  0879               	movf	RFDOUT@fmcwtxrx,w
  6361  0DCF  00F2               	movwf	H_OUT@fmcwtxrx
  6362  0DD0  120A  158A  21AB  120A  158A  	fcall	_H_OUT
  6363  0DD5                     l3313:	
  6364  0DD5  3001               	movlw	1
  6365  0DD6  1283               	bcf	3,5	;RP0=0, select bank0
  6366  0DD7  1303               	bcf	3,6	;RP1=0, select bank0
  6367  0DD8  07BF               	addwf	RFDOUT@i_479,f
  6368  0DD9  1803               	skipnc
  6369  0DDA  0AC0               	incf	RFDOUT@i_479+1,f
  6370  0DDB  3000               	movlw	0
  6371  0DDC  07C0               	addwf	RFDOUT@i_479+1,f
  6372  0DDD  0840               	movf	RFDOUT@i_479+1,w
  6373  0DDE  3A80               	xorlw	128
  6374  0DDF  00FF               	movwf	127
  6375  0DE0  3080               	movlw	128
  6376  0DE1  027F               	subwf	127,w
  6377  0DE2  1D03               	skipz
  6378  0DE3  2DE6               	goto	u3025
  6379  0DE4  300C               	movlw	12
  6380  0DE5  023F               	subwf	RFDOUT@i_479,w
  6381  0DE6                     u3025:	
  6382  0DE6  1C03               	skipc
  6383  0DE7  2DA1               	goto	l3305
  6384  0DE8                     l3317:	
  6385                           
  6386                           ;FMCW.c: 223: }
  6387                           ;FMCW.c: 224: }
  6388                           ;FMCW.c: 227: H_OUT(fmcwtxrx);
  6389  0DE8  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6390  0DE9  00F3               	movwf	H_OUT@fmcwtxrx+1
  6391  0DEA  0879               	movf	RFDOUT@fmcwtxrx,w
  6392  0DEB  00F2               	movwf	H_OUT@fmcwtxrx
  6393  0DEC  120A  158A  21AB  120A  158A  	fcall	_H_OUT
  6394                           
  6395                           ;FMCW.c: 228: H_OUT(fmcwtxrx);
  6396  0DF1  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6397  0DF2  00F3               	movwf	H_OUT@fmcwtxrx+1
  6398  0DF3  0879               	movf	RFDOUT@fmcwtxrx,w
  6399  0DF4  00F2               	movwf	H_OUT@fmcwtxrx
  6400  0DF5  120A  158A  21AB  120A  158A  	fcall	_H_OUT
  6401                           
  6402                           ;FMCW.c: 231: STBOUT(fmcwtxrx);
  6403  0DFA  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6404  0DFB  00F3               	movwf	STBOUT@fmcwtxrx+1
  6405  0DFC  0879               	movf	RFDOUT@fmcwtxrx,w
  6406  0DFD  00F2               	movwf	STBOUT@fmcwtxrx
  6407  0DFE  120A  158A  2149   	fcall	_STBOUT
  6408  0E01  0008               	return
  6409  0E02                     __end_of_RFDOUT:	
  6410                           
  6411                           	psect	text24
  6412  00AC                     __ptext24:	
  6413 ;; *************** function _OUTFQ *****************
  6414 ;; Defined at:
  6415 ;;		line 136 in file "FMCW.c"
  6416 ;; Parameters:    Size  Location     Type
  6417 ;;  fmcwtxrx        2    9[COMMON] int 
  6418 ;;  Nprg            2   11[COMMON] PTR int 
  6419 ;;		 -> RAM(512), main@FMRX_Nprg(10), main@CWTX_Nprg(10), main@FMTX_Nprg(10), 
  6420 ;;		 -> FMRX_Nprg(10), CWTX_Nprg(10), FMTX_Nprg(10), 
  6421 ;; Auto vars:     Size  Location     Type
  6422 ;;  j               2   58[BANK0 ] int 
  6423 ;;  i               2   56[BANK0 ] int 
  6424 ;;  i               2   50[BANK0 ] int 
  6425 ;;  i               2   54[BANK0 ] int 
  6426 ;;  Nprg_b         34   16[BANK0 ] int [17]
  6427 ;;  count           2   52[BANK0 ] int 
  6428 ;; Return value:  Size  Location     Type
  6429 ;;                  1    wreg      void 
  6430 ;; Registers used:
  6431 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6432 ;; Tracked objects:
  6433 ;;		On entry : 0/0
  6434 ;;		On exit  : 0/0
  6435 ;;		Unchanged: 0/0
  6436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6437 ;;      Params:         4       0       0       0       0
  6438 ;;      Locals:         0      44       0       0       0
  6439 ;;      Temps:          0      16       0       0       0
  6440 ;;      Totals:         4      60       0       0       0
  6441 ;;Total ram usage:       64 bytes
  6442 ;; Hardware stack levels used:    1
  6443 ;; Hardware stack levels required when called:    2
  6444 ;; This function calls:
  6445 ;;		_H_OUT
  6446 ;;		_L_OUT
  6447 ;;		_STBOUT
  6448 ;;		___awdiv
  6449 ;; This function is called by:
  6450 ;;		_FMTX
  6451 ;;		_CWTX
  6452 ;;		_FMRX
  6453 ;; This function uses a non-reentrant model
  6454 ;;
  6455                           
  6456                           
  6457                           ;psect for function _OUTFQ
  6458  00AC                     _OUTFQ:	
  6459                           
  6460                           ;FMCW.c: 137: int count = 0;
  6461                           
  6462                           ;incstack = 0
  6463                           ; Regs used in _OUTFQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6464  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  6465  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  6466  00AE  01D4               	clrf	OUTFQ@count
  6467  00AF  01D5               	clrf	OUTFQ@count+1
  6468                           
  6469                           ;FMCW.c: 138: int Nprg_b[17];
  6470                           ;FMCW.c: 140: for(int i=0; i<17; i++){
  6471  00B0  01D6               	clrf	OUTFQ@i
  6472  00B1  01D7               	clrf	OUTFQ@i+1
  6473  00B2  0857               	movf	OUTFQ@i+1,w
  6474  00B3  3A80               	xorlw	128
  6475  00B4  00FF               	movwf	127
  6476  00B5  3080               	movlw	128
  6477  00B6  027F               	subwf	127,w
  6478  00B7  1D03               	skipz
  6479  00B8  28BB               	goto	u2815
  6480  00B9  3011               	movlw	17
  6481  00BA  0256               	subwf	OUTFQ@i,w
  6482  00BB                     u2815:	
  6483  00BB  1803               	btfsc	3,0
  6484  00BC  28D9               	goto	l3207
  6485  00BD                     l3201:	
  6486                           
  6487                           ;FMCW.c: 141: Nprg_b[i] = 0;
  6488  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  6489  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  6490  00BF  0856               	movf	OUTFQ@i,w
  6491  00C0  00A0               	movwf	??_OUTFQ
  6492  00C1  0720               	addwf	??_OUTFQ,w
  6493  00C2  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6494  00C3  0084               	movwf	4
  6495  00C4  1383               	bcf	3,7	;select IRP bank0
  6496  00C5  0180               	clrf	0
  6497  00C6  0A84               	incf	4,f
  6498  00C7  0180               	clrf	0
  6499  00C8  3001               	movlw	1
  6500  00C9  07D6               	addwf	OUTFQ@i,f
  6501  00CA  1803               	skipnc
  6502  00CB  0AD7               	incf	OUTFQ@i+1,f
  6503  00CC  3000               	movlw	0
  6504  00CD  07D7               	addwf	OUTFQ@i+1,f
  6505  00CE  0857               	movf	OUTFQ@i+1,w
  6506  00CF  3A80               	xorlw	128
  6507  00D0  00FF               	movwf	127
  6508  00D1  3080               	movlw	128
  6509  00D2  027F               	subwf	127,w
  6510  00D3  1D03               	skipz
  6511  00D4  28D7               	goto	u2825
  6512  00D5  3011               	movlw	17
  6513  00D6  0256               	subwf	OUTFQ@i,w
  6514  00D7                     u2825:	
  6515  00D7  1C03               	skipc
  6516  00D8  28BD               	goto	l3201
  6517  00D9                     l3207:	
  6518                           
  6519                           ;FMCW.c: 142: }
  6520                           ;FMCW.c: 145: for(int i = 0; i < 17; i++){
  6521  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  6522  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  6523  00DB  01D2               	clrf	OUTFQ@i_467
  6524  00DC  01D3               	clrf	OUTFQ@i_467+1
  6525  00DD  0853               	movf	OUTFQ@i_467+1,w
  6526  00DE  3A80               	xorlw	128
  6527  00DF  00FF               	movwf	127
  6528  00E0  3080               	movlw	128
  6529  00E1  027F               	subwf	127,w
  6530  00E2  1D03               	skipz
  6531  00E3  28E6               	goto	u2835
  6532  00E4  3011               	movlw	17
  6533  00E5  0252               	subwf	OUTFQ@i_467,w
  6534  00E6                     u2835:	
  6535  00E6  1803               	btfsc	3,0
  6536  00E7  2AB7               	goto	l3253
  6537  00E8                     l3213:	
  6538                           
  6539                           ;FMCW.c: 146: for(int j = 0; j<5; j++){
  6540  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  6541  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  6542  00EA  01DA               	clrf	OUTFQ@j
  6543  00EB  01DB               	clrf	OUTFQ@j+1
  6544  00EC  085B               	movf	OUTFQ@j+1,w
  6545  00ED  3A80               	xorlw	128
  6546  00EE  00FF               	movwf	127
  6547  00EF  3080               	movlw	128
  6548  00F0  027F               	subwf	127,w
  6549  00F1  1D03               	skipz
  6550  00F2  28F5               	goto	u2845
  6551  00F3  3005               	movlw	5
  6552  00F4  025A               	subwf	OUTFQ@j,w
  6553  00F5                     u2845:	
  6554  00F5  1803               	btfsc	3,0
  6555  00F6  2AA4               	goto	l3249
  6556  00F7                     l3219:	
  6557                           
  6558                           ;FMCW.c: 147: if(Nprg[j] % 2 == 0) {
  6559  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  6560  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  6561  00F9  085B               	movf	OUTFQ@j+1,w
  6562  00FA  00A1               	movwf	??_OUTFQ+1
  6563  00FB  085A               	movf	OUTFQ@j,w
  6564  00FC  00A0               	movwf	??_OUTFQ
  6565  00FD  1003               	clrc
  6566  00FE  0DA0               	rlf	??_OUTFQ,f
  6567  00FF  0DA1               	rlf	??_OUTFQ+1,f
  6568  0100  0820               	movf	??_OUTFQ,w
  6569  0101  077B               	addwf	OUTFQ@Nprg,w
  6570  0102  00A2               	movwf	??_OUTFQ+2
  6571  0103  0821               	movf	??_OUTFQ+1,w
  6572  0104  1803               	skipnc
  6573  0105  0A21               	incf	??_OUTFQ+1,w
  6574  0106  077C               	addwf	OUTFQ@Nprg+1,w
  6575  0107  00A3               	movwf	??_OUTFQ+3
  6576  0108  0822               	movf	??_OUTFQ+2,w
  6577  0109  0084               	movwf	4
  6578  010A  1783               	bsf	3,7
  6579  010B  1C23               	btfss	??_OUTFQ+3,0
  6580  010C  1383               	bcf	3,7
  6581  010D  0800               	movf	0,w
  6582  010E  00A4               	movwf	??_OUTFQ+4
  6583  010F  0A84               	incf	4,f
  6584  0110  0800               	movf	0,w
  6585  0111  00A5               	movwf	??_OUTFQ+5
  6586  0112  1824               	btfsc	??_OUTFQ+4,0
  6587  0113  299D               	goto	l3231
  6588                           
  6589                           ;FMCW.c: 148: if(j == 4){
  6590  0114  3004               	movlw	4
  6591  0115  065A               	xorwf	OUTFQ@j,w
  6592  0116  045B               	iorwf	OUTFQ@j+1,w
  6593  0117  1D03               	btfss	3,2
  6594  0118  2960               	goto	l3229
  6595                           
  6596                           ;FMCW.c: 149: Nprg[j] = Nprg[j] / 2;
  6597  0119  3002               	movlw	2
  6598  011A  00F0               	movwf	___awdiv@divisor
  6599  011B  3000               	movlw	0
  6600  011C  00F1               	movwf	___awdiv@divisor+1
  6601  011D  085B               	movf	OUTFQ@j+1,w
  6602  011E  00A1               	movwf	??_OUTFQ+1
  6603  011F  085A               	movf	OUTFQ@j,w
  6604  0120  00A0               	movwf	??_OUTFQ
  6605  0121  1003               	clrc
  6606  0122  0DA0               	rlf	??_OUTFQ,f
  6607  0123  0DA1               	rlf	??_OUTFQ+1,f
  6608  0124  0820               	movf	??_OUTFQ,w
  6609  0125  077B               	addwf	OUTFQ@Nprg,w
  6610  0126  00A2               	movwf	??_OUTFQ+2
  6611  0127  0821               	movf	??_OUTFQ+1,w
  6612  0128  1803               	skipnc
  6613  0129  0A21               	incf	??_OUTFQ+1,w
  6614  012A  077C               	addwf	OUTFQ@Nprg+1,w
  6615  012B  00A3               	movwf	??_OUTFQ+3
  6616  012C  0822               	movf	??_OUTFQ+2,w
  6617  012D  0084               	movwf	4
  6618  012E  1783               	bsf	3,7
  6619  012F  1C23               	btfss	??_OUTFQ+3,0
  6620  0130  1383               	bcf	3,7
  6621  0131  0800               	movf	0,w
  6622  0132  00F2               	movwf	___awdiv@dividend
  6623  0133  0A84               	incf	4,f
  6624  0134  0800               	movf	0,w
  6625  0135  00F3               	movwf	___awdiv@dividend+1
  6626  0136  120A  158A  22CA  120A  118A  	fcall	___awdiv
  6627  013B  1283               	bcf	3,5	;RP0=0, select bank0
  6628  013C  1303               	bcf	3,6	;RP1=0, select bank0
  6629  013D  085B               	movf	OUTFQ@j+1,w
  6630  013E  00A5               	movwf	??_OUTFQ+5
  6631  013F  085A               	movf	OUTFQ@j,w
  6632  0140  00A4               	movwf	??_OUTFQ+4
  6633  0141  1003               	clrc
  6634  0142  0DA4               	rlf	??_OUTFQ+4,f
  6635  0143  0DA5               	rlf	??_OUTFQ+5,f
  6636  0144  0824               	movf	??_OUTFQ+4,w
  6637  0145  077B               	addwf	OUTFQ@Nprg,w
  6638  0146  00A6               	movwf	??_OUTFQ+6
  6639  0147  0825               	movf	??_OUTFQ+5,w
  6640  0148  1803               	skipnc
  6641  0149  0A25               	incf	??_OUTFQ+5,w
  6642  014A  077C               	addwf	OUTFQ@Nprg+1,w
  6643  014B  00A7               	movwf	??_OUTFQ+7
  6644  014C  0826               	movf	??_OUTFQ+6,w
  6645  014D  0084               	movwf	4
  6646  014E  1783               	bsf	3,7
  6647  014F  1C27               	btfss	??_OUTFQ+7,0
  6648  0150  1383               	bcf	3,7
  6649  0151  0870               	movf	?___awdiv,w
  6650  0152  0080               	movwf	0
  6651  0153  0A84               	incf	4,f
  6652  0154  0871               	movf	?___awdiv+1,w
  6653  0155  0080               	movwf	0
  6654                           
  6655                           ;FMCW.c: 150: Nprg_b[count] = 0;
  6656  0156  0854               	movf	OUTFQ@count,w
  6657  0157  00A0               	movwf	??_OUTFQ
  6658  0158  0720               	addwf	??_OUTFQ,w
  6659  0159  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6660  015A  0084               	movwf	4
  6661  015B  1383               	bcf	3,7	;select IRP bank0
  6662  015C  0180               	clrf	0
  6663  015D  0A84               	incf	4,f
  6664  015E  0180               	clrf	0
  6665  015F  2A05               	goto	l3239
  6666  0160                     l3229:	
  6667                           ;FMCW.c: 152: }
  6668                           
  6669                           ;FMCW.c: 151: count++;
  6670                           
  6671                           
  6672                           ;FMCW.c: 153: else{
  6673                           ;FMCW.c: 154: Nprg[j] = Nprg[j] / 2;
  6674  0160  3002               	movlw	2
  6675  0161  00F0               	movwf	___awdiv@divisor
  6676  0162  3000               	movlw	0
  6677  0163  00F1               	movwf	___awdiv@divisor+1
  6678  0164  085B               	movf	OUTFQ@j+1,w
  6679  0165  00A1               	movwf	??_OUTFQ+1
  6680  0166  085A               	movf	OUTFQ@j,w
  6681  0167  00A0               	movwf	??_OUTFQ
  6682  0168  1003               	clrc
  6683  0169  0DA0               	rlf	??_OUTFQ,f
  6684  016A  0DA1               	rlf	??_OUTFQ+1,f
  6685  016B  0820               	movf	??_OUTFQ,w
  6686  016C  077B               	addwf	OUTFQ@Nprg,w
  6687  016D  00A2               	movwf	??_OUTFQ+2
  6688  016E  0821               	movf	??_OUTFQ+1,w
  6689  016F  1803               	skipnc
  6690  0170  0A21               	incf	??_OUTFQ+1,w
  6691  0171  077C               	addwf	OUTFQ@Nprg+1,w
  6692  0172  00A3               	movwf	??_OUTFQ+3
  6693  0173  0822               	movf	??_OUTFQ+2,w
  6694  0174  0084               	movwf	4
  6695  0175  1783               	bsf	3,7
  6696  0176  1C23               	btfss	??_OUTFQ+3,0
  6697  0177  1383               	bcf	3,7
  6698  0178  0800               	movf	0,w
  6699  0179  00F2               	movwf	___awdiv@dividend
  6700  017A  0A84               	incf	4,f
  6701  017B  0800               	movf	0,w
  6702  017C  00F3               	movwf	___awdiv@dividend+1
  6703  017D  120A  158A  22CA  120A  118A  	fcall	___awdiv
  6704  0182  1283               	bcf	3,5	;RP0=0, select bank0
  6705  0183  1303               	bcf	3,6	;RP1=0, select bank0
  6706  0184  085B               	movf	OUTFQ@j+1,w
  6707  0185  00A5               	movwf	??_OUTFQ+5
  6708  0186  085A               	movf	OUTFQ@j,w
  6709  0187  00A4               	movwf	??_OUTFQ+4
  6710  0188  1003               	clrc
  6711  0189  0DA4               	rlf	??_OUTFQ+4,f
  6712  018A  0DA5               	rlf	??_OUTFQ+5,f
  6713  018B  0824               	movf	??_OUTFQ+4,w
  6714  018C  077B               	addwf	OUTFQ@Nprg,w
  6715  018D  00A6               	movwf	??_OUTFQ+6
  6716  018E  0825               	movf	??_OUTFQ+5,w
  6717  018F  1803               	skipnc
  6718  0190  0A25               	incf	??_OUTFQ+5,w
  6719  0191  077C               	addwf	OUTFQ@Nprg+1,w
  6720  0192  00A7               	movwf	??_OUTFQ+7
  6721  0193  0826               	movf	??_OUTFQ+6,w
  6722  0194  0084               	movwf	4
  6723  0195  1783               	bsf	3,7
  6724  0196  1C27               	btfss	??_OUTFQ+7,0
  6725  0197  1383               	bcf	3,7
  6726  0198  0870               	movf	?___awdiv,w
  6727  0199  0080               	movwf	0
  6728  019A  0A84               	incf	4,f
  6729  019B  0871               	movf	?___awdiv+1,w
  6730  019C  2A92               	goto	L8
  6731  019D                     l3231:	
  6732                           ;FMCW.c: 155: }
  6733                           ;FMCW.c: 156: }
  6734                           
  6735                           
  6736                           ;FMCW.c: 157: else if(Nprg[j] % 2 == 1) {
  6737  019D  085B               	movf	OUTFQ@j+1,w
  6738  019E  00A1               	movwf	??_OUTFQ+1
  6739  019F  085A               	movf	OUTFQ@j,w
  6740  01A0  00A0               	movwf	??_OUTFQ
  6741  01A1  1003               	clrc
  6742  01A2  0DA0               	rlf	??_OUTFQ,f
  6743  01A3  0DA1               	rlf	??_OUTFQ+1,f
  6744  01A4  0820               	movf	??_OUTFQ,w
  6745  01A5  077B               	addwf	OUTFQ@Nprg,w
  6746  01A6  00A2               	movwf	??_OUTFQ+2
  6747  01A7  0821               	movf	??_OUTFQ+1,w
  6748  01A8  1803               	skipnc
  6749  01A9  0A21               	incf	??_OUTFQ+1,w
  6750  01AA  077C               	addwf	OUTFQ@Nprg+1,w
  6751  01AB  00A3               	movwf	??_OUTFQ+3
  6752  01AC  0822               	movf	??_OUTFQ+2,w
  6753  01AD  0084               	movwf	4
  6754  01AE  1783               	bsf	3,7
  6755  01AF  1C23               	btfss	??_OUTFQ+3,0
  6756  01B0  1383               	bcf	3,7
  6757  01B1  0800               	movf	0,w
  6758  01B2  00A4               	movwf	??_OUTFQ+4
  6759  01B3  0A84               	incf	4,f
  6760  01B4  0800               	movf	0,w
  6761  01B5  00A5               	movwf	??_OUTFQ+5
  6762  01B6  1C24               	btfss	??_OUTFQ+4,0
  6763  01B7  2A93               	goto	l3245
  6764                           
  6765                           ;FMCW.c: 158: if(j == 4){
  6766  01B8  3004               	movlw	4
  6767  01B9  065A               	xorwf	OUTFQ@j,w
  6768  01BA  045B               	iorwf	OUTFQ@j+1,w
  6769  01BB  1D03               	btfss	3,2
  6770  01BC  2A0C               	goto	l3241
  6771                           
  6772                           ;FMCW.c: 159: Nprg[j] = Nprg[j] / 2;
  6773  01BD  3002               	movlw	2
  6774  01BE  00F0               	movwf	___awdiv@divisor
  6775  01BF  3000               	movlw	0
  6776  01C0  00F1               	movwf	___awdiv@divisor+1
  6777  01C1  085B               	movf	OUTFQ@j+1,w
  6778  01C2  00A1               	movwf	??_OUTFQ+1
  6779  01C3  085A               	movf	OUTFQ@j,w
  6780  01C4  00A0               	movwf	??_OUTFQ
  6781  01C5  1003               	clrc
  6782  01C6  0DA0               	rlf	??_OUTFQ,f
  6783  01C7  0DA1               	rlf	??_OUTFQ+1,f
  6784  01C8  0820               	movf	??_OUTFQ,w
  6785  01C9  077B               	addwf	OUTFQ@Nprg,w
  6786  01CA  00A2               	movwf	??_OUTFQ+2
  6787  01CB  0821               	movf	??_OUTFQ+1,w
  6788  01CC  1803               	skipnc
  6789  01CD  0A21               	incf	??_OUTFQ+1,w
  6790  01CE  077C               	addwf	OUTFQ@Nprg+1,w
  6791  01CF  00A3               	movwf	??_OUTFQ+3
  6792  01D0  0822               	movf	??_OUTFQ+2,w
  6793  01D1  0084               	movwf	4
  6794  01D2  1783               	bsf	3,7
  6795  01D3  1C23               	btfss	??_OUTFQ+3,0
  6796  01D4  1383               	bcf	3,7
  6797  01D5  0800               	movf	0,w
  6798  01D6  00F2               	movwf	___awdiv@dividend
  6799  01D7  0A84               	incf	4,f
  6800  01D8  0800               	movf	0,w
  6801  01D9  00F3               	movwf	___awdiv@dividend+1
  6802  01DA  120A  158A  22CA  120A  118A  	fcall	___awdiv
  6803  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  6804  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  6805  01E1  085B               	movf	OUTFQ@j+1,w
  6806  01E2  00A5               	movwf	??_OUTFQ+5
  6807  01E3  085A               	movf	OUTFQ@j,w
  6808  01E4  00A4               	movwf	??_OUTFQ+4
  6809  01E5  1003               	clrc
  6810  01E6  0DA4               	rlf	??_OUTFQ+4,f
  6811  01E7  0DA5               	rlf	??_OUTFQ+5,f
  6812  01E8  0824               	movf	??_OUTFQ+4,w
  6813  01E9  077B               	addwf	OUTFQ@Nprg,w
  6814  01EA  00A6               	movwf	??_OUTFQ+6
  6815  01EB  0825               	movf	??_OUTFQ+5,w
  6816  01EC  1803               	skipnc
  6817  01ED  0A25               	incf	??_OUTFQ+5,w
  6818  01EE  077C               	addwf	OUTFQ@Nprg+1,w
  6819  01EF  00A7               	movwf	??_OUTFQ+7
  6820  01F0  0826               	movf	??_OUTFQ+6,w
  6821  01F1  0084               	movwf	4
  6822  01F2  1783               	bsf	3,7
  6823  01F3  1C27               	btfss	??_OUTFQ+7,0
  6824  01F4  1383               	bcf	3,7
  6825  01F5  0870               	movf	?___awdiv,w
  6826  01F6  0080               	movwf	0
  6827  01F7  0A84               	incf	4,f
  6828  01F8  0871               	movf	?___awdiv+1,w
  6829  01F9  0080               	movwf	0
  6830                           
  6831                           ;FMCW.c: 160: Nprg_b[count] = 1;
  6832  01FA  0854               	movf	OUTFQ@count,w
  6833  01FB  00A0               	movwf	??_OUTFQ
  6834  01FC  0720               	addwf	??_OUTFQ,w
  6835  01FD  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6836  01FE  0084               	movwf	4
  6837  01FF  3001               	movlw	1
  6838  0200  1383               	bcf	3,7	;select IRP bank0
  6839  0201  0080               	movwf	0
  6840  0202  0A84               	incf	4,f
  6841  0203  3000               	movlw	0
  6842  0204  0080               	movwf	0
  6843  0205                     l3239:	
  6844                           
  6845                           ;FMCW.c: 161: count++;
  6846  0205  3001               	movlw	1
  6847  0206  07D4               	addwf	OUTFQ@count,f
  6848  0207  1803               	skipnc
  6849  0208  0AD5               	incf	OUTFQ@count+1,f
  6850  0209  3000               	movlw	0
  6851  020A  07D5               	addwf	OUTFQ@count+1,f
  6852                           
  6853                           ;FMCW.c: 162: }
  6854  020B  2A93               	goto	l3245
  6855  020C                     l3241:	
  6856                           
  6857                           ;FMCW.c: 163: else{
  6858                           ;FMCW.c: 164: Nprg[j] = Nprg[j] / 2;
  6859  020C  3002               	movlw	2
  6860  020D  00F0               	movwf	___awdiv@divisor
  6861  020E  3000               	movlw	0
  6862  020F  00F1               	movwf	___awdiv@divisor+1
  6863  0210  085B               	movf	OUTFQ@j+1,w
  6864  0211  00A1               	movwf	??_OUTFQ+1
  6865  0212  085A               	movf	OUTFQ@j,w
  6866  0213  00A0               	movwf	??_OUTFQ
  6867  0214  1003               	clrc
  6868  0215  0DA0               	rlf	??_OUTFQ,f
  6869  0216  0DA1               	rlf	??_OUTFQ+1,f
  6870  0217  0820               	movf	??_OUTFQ,w
  6871  0218  077B               	addwf	OUTFQ@Nprg,w
  6872  0219  00A2               	movwf	??_OUTFQ+2
  6873  021A  0821               	movf	??_OUTFQ+1,w
  6874  021B  1803               	skipnc
  6875  021C  0A21               	incf	??_OUTFQ+1,w
  6876  021D  077C               	addwf	OUTFQ@Nprg+1,w
  6877  021E  00A3               	movwf	??_OUTFQ+3
  6878  021F  0822               	movf	??_OUTFQ+2,w
  6879  0220  0084               	movwf	4
  6880  0221  1783               	bsf	3,7
  6881  0222  1C23               	btfss	??_OUTFQ+3,0
  6882  0223  1383               	bcf	3,7
  6883  0224  0800               	movf	0,w
  6884  0225  00F2               	movwf	___awdiv@dividend
  6885  0226  0A84               	incf	4,f
  6886  0227  0800               	movf	0,w
  6887  0228  00F3               	movwf	___awdiv@dividend+1
  6888  0229  120A  158A  22CA  120A  118A  	fcall	___awdiv
  6889  022E  1283               	bcf	3,5	;RP0=0, select bank0
  6890  022F  1303               	bcf	3,6	;RP1=0, select bank0
  6891  0230  085B               	movf	OUTFQ@j+1,w
  6892  0231  00A5               	movwf	??_OUTFQ+5
  6893  0232  085A               	movf	OUTFQ@j,w
  6894  0233  00A4               	movwf	??_OUTFQ+4
  6895  0234  1003               	clrc
  6896  0235  0DA4               	rlf	??_OUTFQ+4,f
  6897  0236  0DA5               	rlf	??_OUTFQ+5,f
  6898  0237  0824               	movf	??_OUTFQ+4,w
  6899  0238  077B               	addwf	OUTFQ@Nprg,w
  6900  0239  00A6               	movwf	??_OUTFQ+6
  6901  023A  0825               	movf	??_OUTFQ+5,w
  6902  023B  1803               	skipnc
  6903  023C  0A25               	incf	??_OUTFQ+5,w
  6904  023D  077C               	addwf	OUTFQ@Nprg+1,w
  6905  023E  00A7               	movwf	??_OUTFQ+7
  6906  023F  0826               	movf	??_OUTFQ+6,w
  6907  0240  0084               	movwf	4
  6908  0241  1783               	bsf	3,7
  6909  0242  1C27               	btfss	??_OUTFQ+7,0
  6910  0243  1383               	bcf	3,7
  6911  0244  0870               	movf	?___awdiv,w
  6912  0245  0080               	movwf	0
  6913  0246  0A84               	incf	4,f
  6914  0247  0871               	movf	?___awdiv+1,w
  6915  0248  0080               	movwf	0
  6916                           
  6917                           ;FMCW.c: 165: Nprg[j+1] = Nprg[j+1] + 10;
  6918  0249  085B               	movf	OUTFQ@j+1,w
  6919  024A  00A1               	movwf	??_OUTFQ+1
  6920  024B  085A               	movf	OUTFQ@j,w
  6921  024C  00A0               	movwf	??_OUTFQ
  6922  024D  1003               	clrc
  6923  024E  0DA0               	rlf	??_OUTFQ,f
  6924  024F  0DA1               	rlf	??_OUTFQ+1,f
  6925  0250  0820               	movf	??_OUTFQ,w
  6926  0251  3E02               	addlw	2
  6927  0252  00A2               	movwf	??_OUTFQ+2
  6928  0253  0821               	movf	??_OUTFQ+1,w
  6929  0254  1803               	skipnc
  6930  0255  3E01               	addlw	1
  6931  0256  3E00               	addlw	0
  6932  0257  00A3               	movwf	??_OUTFQ+3
  6933  0258  0822               	movf	??_OUTFQ+2,w
  6934  0259  077B               	addwf	OUTFQ@Nprg,w
  6935  025A  00A4               	movwf	??_OUTFQ+4
  6936  025B  0823               	movf	??_OUTFQ+3,w
  6937  025C  1803               	skipnc
  6938  025D  0A23               	incf	??_OUTFQ+3,w
  6939  025E  077C               	addwf	OUTFQ@Nprg+1,w
  6940  025F  00A5               	movwf	??_OUTFQ+5
  6941  0260  0824               	movf	??_OUTFQ+4,w
  6942  0261  0084               	movwf	4
  6943  0262  1783               	bsf	3,7
  6944  0263  1C25               	btfss	??_OUTFQ+5,0
  6945  0264  1383               	bcf	3,7
  6946  0265  0800               	movf	0,w
  6947  0266  00A6               	movwf	??_OUTFQ+6
  6948  0267  0A84               	incf	4,f
  6949  0268  0800               	movf	0,w
  6950  0269  00A7               	movwf	??_OUTFQ+7
  6951  026A  0826               	movf	??_OUTFQ+6,w
  6952  026B  3E0A               	addlw	10
  6953  026C  00A8               	movwf	??_OUTFQ+8
  6954  026D  0827               	movf	??_OUTFQ+7,w
  6955  026E  1803               	skipnc
  6956  026F  3E01               	addlw	1
  6957  0270  3E00               	addlw	0
  6958  0271  00A9               	movwf	??_OUTFQ+9
  6959  0272  085B               	movf	OUTFQ@j+1,w
  6960  0273  00AB               	movwf	??_OUTFQ+11
  6961  0274  085A               	movf	OUTFQ@j,w
  6962  0275  00AA               	movwf	??_OUTFQ+10
  6963  0276  1003               	clrc
  6964  0277  0DAA               	rlf	??_OUTFQ+10,f
  6965  0278  0DAB               	rlf	??_OUTFQ+11,f
  6966  0279  082A               	movf	??_OUTFQ+10,w
  6967  027A  3E02               	addlw	2
  6968  027B  00AC               	movwf	??_OUTFQ+12
  6969  027C  082B               	movf	??_OUTFQ+11,w
  6970  027D  1803               	skipnc
  6971  027E  3E01               	addlw	1
  6972  027F  3E00               	addlw	0
  6973  0280  00AD               	movwf	??_OUTFQ+13
  6974  0281  082C               	movf	??_OUTFQ+12,w
  6975  0282  077B               	addwf	OUTFQ@Nprg,w
  6976  0283  00AE               	movwf	??_OUTFQ+14
  6977  0284  082D               	movf	??_OUTFQ+13,w
  6978  0285  1803               	skipnc
  6979  0286  0A2D               	incf	??_OUTFQ+13,w
  6980  0287  077C               	addwf	OUTFQ@Nprg+1,w
  6981  0288  00AF               	movwf	??_OUTFQ+15
  6982  0289  082E               	movf	??_OUTFQ+14,w
  6983  028A  0084               	movwf	4
  6984  028B  1783               	bsf	3,7
  6985  028C  1C2F               	btfss	??_OUTFQ+15,0
  6986  028D  1383               	bcf	3,7
  6987  028E  0828               	movf	??_OUTFQ+8,w
  6988  028F  0080               	movwf	0
  6989  0290  0A84               	incf	4,f
  6990  0291  0829               	movf	??_OUTFQ+9,w
  6991  0292                     L8:	
  6992  0292  0080               	movwf	0
  6993  0293                     l3245:	
  6994  0293  3001               	movlw	1
  6995  0294  07DA               	addwf	OUTFQ@j,f
  6996  0295  1803               	skipnc
  6997  0296  0ADB               	incf	OUTFQ@j+1,f
  6998  0297  3000               	movlw	0
  6999  0298  07DB               	addwf	OUTFQ@j+1,f
  7000  0299  085B               	movf	OUTFQ@j+1,w
  7001  029A  3A80               	xorlw	128
  7002  029B  00FF               	movwf	127
  7003  029C  3080               	movlw	128
  7004  029D  027F               	subwf	127,w
  7005  029E  1D03               	skipz
  7006  029F  2AA2               	goto	u2895
  7007  02A0  3005               	movlw	5
  7008  02A1  025A               	subwf	OUTFQ@j,w
  7009  02A2                     u2895:	
  7010  02A2  1C03               	skipc
  7011  02A3  28F7               	goto	l3219
  7012  02A4                     l3249:	
  7013  02A4  3001               	movlw	1
  7014  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  7015  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  7016  02A7  07D2               	addwf	OUTFQ@i_467,f
  7017  02A8  1803               	skipnc
  7018  02A9  0AD3               	incf	OUTFQ@i_467+1,f
  7019  02AA  3000               	movlw	0
  7020  02AB  07D3               	addwf	OUTFQ@i_467+1,f
  7021  02AC  0853               	movf	OUTFQ@i_467+1,w
  7022  02AD  3A80               	xorlw	128
  7023  02AE  00FF               	movwf	127
  7024  02AF  3080               	movlw	128
  7025  02B0  027F               	subwf	127,w
  7026  02B1  1D03               	skipz
  7027  02B2  2AB5               	goto	u2905
  7028  02B3  3011               	movlw	17
  7029  02B4  0252               	subwf	OUTFQ@i_467,w
  7030  02B5                     u2905:	
  7031  02B5  1C03               	skipc
  7032  02B6  28E8               	goto	l3213
  7033  02B7                     l3253:	
  7034                           
  7035                           ;FMCW.c: 166: }
  7036                           ;FMCW.c: 167: }
  7037                           ;FMCW.c: 168: }
  7038                           ;FMCW.c: 169: }
  7039                           ;FMCW.c: 172: for (int i=0; i<17; i++)
  7040  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  7041  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  7042  02B9  01D8               	clrf	OUTFQ@i_469
  7043  02BA  01D9               	clrf	OUTFQ@i_469+1
  7044  02BB  0859               	movf	OUTFQ@i_469+1,w
  7045  02BC  3A80               	xorlw	128
  7046  02BD  00FF               	movwf	127
  7047  02BE  3080               	movlw	128
  7048  02BF  027F               	subwf	127,w
  7049  02C0  1D03               	skipz
  7050  02C1  2AC4               	goto	u2915
  7051  02C2  3011               	movlw	17
  7052  02C3  0258               	subwf	OUTFQ@i_469,w
  7053  02C4                     u2915:	
  7054  02C4  1803               	btfsc	3,0
  7055  02C5  2B0D               	goto	l3271
  7056  02C6                     l3259:	
  7057                           
  7058                           ;FMCW.c: 173: {
  7059                           ;FMCW.c: 174: if(Nprg_b[i] == 0)
  7060  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  7061  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  7062  02C8  0858               	movf	OUTFQ@i_469,w
  7063  02C9  00A0               	movwf	??_OUTFQ
  7064  02CA  0720               	addwf	??_OUTFQ,w
  7065  02CB  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  7066  02CC  0084               	movwf	4
  7067  02CD  1383               	bcf	3,7	;select IRP bank0
  7068  02CE  0800               	movf	0,w
  7069  02CF  00A1               	movwf	??_OUTFQ+1
  7070  02D0  0A84               	incf	4,f
  7071  02D1  0800               	movf	0,w
  7072  02D2  00A2               	movwf	??_OUTFQ+2
  7073  02D3  0821               	movf	??_OUTFQ+1,w
  7074  02D4  0422               	iorwf	??_OUTFQ+2,w
  7075  02D5  1D03               	btfss	3,2
  7076  02D6  2AE0               	goto	l3263
  7077                           
  7078                           ;FMCW.c: 175: {
  7079                           ;FMCW.c: 176: L_OUT(fmcwtxrx);
  7080  02D7  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7081  02D8  00F3               	movwf	L_OUT@fmcwtxrx+1
  7082  02D9  0879               	movf	OUTFQ@fmcwtxrx,w
  7083  02DA  00F2               	movwf	L_OUT@fmcwtxrx
  7084  02DB  120A  158A  21F1  120A  118A  	fcall	_L_OUT
  7085  02E0                     l3263:	
  7086                           
  7087                           ;FMCW.c: 177: }
  7088                           ;FMCW.c: 178: if(Nprg_b[i] == 1)
  7089  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  7090  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  7091  02E2  0858               	movf	OUTFQ@i_469,w
  7092  02E3  00A0               	movwf	??_OUTFQ
  7093  02E4  0720               	addwf	??_OUTFQ,w
  7094  02E5  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  7095  02E6  0084               	movwf	4
  7096  02E7  1383               	bcf	3,7	;select IRP bank0
  7097  02E8  0800               	movf	0,w
  7098  02E9  00A1               	movwf	??_OUTFQ+1
  7099  02EA  0A84               	incf	4,f
  7100  02EB  0800               	movf	0,w
  7101  02EC  00A2               	movwf	??_OUTFQ+2
  7102  02ED  0321               	decf	??_OUTFQ+1,w
  7103  02EE  0422               	iorwf	??_OUTFQ+2,w
  7104  02EF  1D03               	btfss	3,2
  7105  02F0  2AFA               	goto	l3267
  7106                           
  7107                           ;FMCW.c: 179: {
  7108                           ;FMCW.c: 180: H_OUT(fmcwtxrx);
  7109  02F1  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7110  02F2  00F3               	movwf	H_OUT@fmcwtxrx+1
  7111  02F3  0879               	movf	OUTFQ@fmcwtxrx,w
  7112  02F4  00F2               	movwf	H_OUT@fmcwtxrx
  7113  02F5  120A  158A  21AB  120A  118A  	fcall	_H_OUT
  7114  02FA                     l3267:	
  7115  02FA  3001               	movlw	1
  7116  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  7117  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  7118  02FD  07D8               	addwf	OUTFQ@i_469,f
  7119  02FE  1803               	skipnc
  7120  02FF  0AD9               	incf	OUTFQ@i_469+1,f
  7121  0300  3000               	movlw	0
  7122  0301  07D9               	addwf	OUTFQ@i_469+1,f
  7123  0302  0859               	movf	OUTFQ@i_469+1,w
  7124  0303  3A80               	xorlw	128
  7125  0304  00FF               	movwf	127
  7126  0305  3080               	movlw	128
  7127  0306  027F               	subwf	127,w
  7128  0307  1D03               	skipz
  7129  0308  2B0B               	goto	u2945
  7130  0309  3011               	movlw	17
  7131  030A  0258               	subwf	OUTFQ@i_469,w
  7132  030B                     u2945:	
  7133  030B  1C03               	skipc
  7134  030C  2AC6               	goto	l3259
  7135  030D                     l3271:	
  7136                           
  7137                           ;FMCW.c: 181: }
  7138                           ;FMCW.c: 182: }
  7139                           ;FMCW.c: 185: H_OUT(fmcwtxrx);
  7140  030D  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7141  030E  00F3               	movwf	H_OUT@fmcwtxrx+1
  7142  030F  0879               	movf	OUTFQ@fmcwtxrx,w
  7143  0310  00F2               	movwf	H_OUT@fmcwtxrx
  7144  0311  120A  158A  21AB  120A  118A  	fcall	_H_OUT
  7145                           
  7146                           ;FMCW.c: 186: L_OUT(fmcwtxrx);
  7147  0316  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7148  0317  00F3               	movwf	L_OUT@fmcwtxrx+1
  7149  0318  0879               	movf	OUTFQ@fmcwtxrx,w
  7150  0319  00F2               	movwf	L_OUT@fmcwtxrx
  7151  031A  120A  158A  21F1  120A  118A  	fcall	_L_OUT
  7152                           
  7153                           ;FMCW.c: 189: STBOUT(fmcwtxrx);
  7154  031F  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7155  0320  00F3               	movwf	STBOUT@fmcwtxrx+1
  7156  0321  0879               	movf	OUTFQ@fmcwtxrx,w
  7157  0322  00F2               	movwf	STBOUT@fmcwtxrx
  7158  0323  120A  158A  2149   	fcall	_STBOUT
  7159  0326  0008               	return
  7160  0327                     __end_of_OUTFQ:	
  7161                           
  7162                           	psect	text25
  7163  0ACA                     __ptext25:	
  7164 ;; *************** function ___awdiv *****************
  7165 ;; Defined at:
  7166 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  7167 ;; Parameters:    Size  Location     Type
  7168 ;;  divisor         2    0[COMMON] int 
  7169 ;;  dividend        2    2[COMMON] int 
  7170 ;; Auto vars:     Size  Location     Type
  7171 ;;  quotient        2    7[COMMON] int 
  7172 ;;  sign            1    6[COMMON] unsigned char 
  7173 ;;  counter         1    5[COMMON] unsigned char 
  7174 ;; Return value:  Size  Location     Type
  7175 ;;                  2    0[COMMON] int 
  7176 ;; Registers used:
  7177 ;;		wreg, status,2, status,0
  7178 ;; Tracked objects:
  7179 ;;		On entry : 0/0
  7180 ;;		On exit  : 0/0
  7181 ;;		Unchanged: 0/0
  7182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7183 ;;      Params:         4       0       0       0       0
  7184 ;;      Locals:         4       0       0       0       0
  7185 ;;      Temps:          1       0       0       0       0
  7186 ;;      Totals:         9       0       0       0       0
  7187 ;;Total ram usage:        9 bytes
  7188 ;; Hardware stack levels used:    1
  7189 ;; This function calls:
  7190 ;;		Nothing
  7191 ;; This function is called by:
  7192 ;;		_OUTFQ
  7193 ;;		_RFDOUT
  7194 ;; This function uses a non-reentrant model
  7195 ;;
  7196                           
  7197                           
  7198                           ;psect for function ___awdiv
  7199  0ACA                     ___awdiv:	
  7200                           
  7201                           ;incstack = 0
  7202                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7203  0ACA  01F6               	clrf	___awdiv@sign
  7204  0ACB  1FF1               	btfss	___awdiv@divisor+1,7
  7205  0ACC  2AD4               	goto	l2683
  7206  0ACD  09F0               	comf	___awdiv@divisor,f
  7207  0ACE  09F1               	comf	___awdiv@divisor+1,f
  7208  0ACF  0AF0               	incf	___awdiv@divisor,f
  7209  0AD0  1903               	skipnz
  7210  0AD1  0AF1               	incf	___awdiv@divisor+1,f
  7211  0AD2  01F6               	clrf	___awdiv@sign
  7212  0AD3  0AF6               	incf	___awdiv@sign,f
  7213  0AD4                     l2683:	
  7214  0AD4  1FF3               	btfss	___awdiv@dividend+1,7
  7215  0AD5  2ADF               	goto	l2689
  7216  0AD6  09F2               	comf	___awdiv@dividend,f
  7217  0AD7  09F3               	comf	___awdiv@dividend+1,f
  7218  0AD8  0AF2               	incf	___awdiv@dividend,f
  7219  0AD9  1903               	skipnz
  7220  0ADA  0AF3               	incf	___awdiv@dividend+1,f
  7221  0ADB  3001               	movlw	1
  7222  0ADC  00F4               	movwf	??___awdiv
  7223  0ADD  0874               	movf	??___awdiv,w
  7224  0ADE  06F6               	xorwf	___awdiv@sign,f
  7225  0ADF                     l2689:	
  7226  0ADF  01F7               	clrf	___awdiv@quotient
  7227  0AE0  01F8               	clrf	___awdiv@quotient+1
  7228  0AE1  0870               	movf	___awdiv@divisor,w
  7229  0AE2  0471               	iorwf	___awdiv@divisor+1,w
  7230  0AE3  1903               	btfsc	3,2
  7231  0AE4  2B16               	goto	l2711
  7232  0AE5  01F5               	clrf	___awdiv@counter
  7233  0AE6  0AF5               	incf	___awdiv@counter,f
  7234  0AE7                     l2699:	
  7235  0AE7  1BF1               	btfsc	___awdiv@divisor+1,7
  7236  0AE8  2AF5               	goto	l2701
  7237  0AE9  3001               	movlw	1
  7238  0AEA                     u2065:	
  7239  0AEA  1003               	clrc
  7240  0AEB  0DF0               	rlf	___awdiv@divisor,f
  7241  0AEC  0DF1               	rlf	___awdiv@divisor+1,f
  7242  0AED  3EFF               	addlw	-1
  7243  0AEE  1D03               	skipz
  7244  0AEF  2AEA               	goto	u2065
  7245  0AF0  3001               	movlw	1
  7246  0AF1  00F4               	movwf	??___awdiv
  7247  0AF2  0874               	movf	??___awdiv,w
  7248  0AF3  07F5               	addwf	___awdiv@counter,f
  7249  0AF4  2AE7               	goto	l2699
  7250  0AF5                     l2701:	
  7251  0AF5  3001               	movlw	1
  7252  0AF6                     u2085:	
  7253  0AF6  1003               	clrc
  7254  0AF7  0DF7               	rlf	___awdiv@quotient,f
  7255  0AF8  0DF8               	rlf	___awdiv@quotient+1,f
  7256  0AF9  3EFF               	addlw	-1
  7257  0AFA  1D03               	skipz
  7258  0AFB  2AF6               	goto	u2085
  7259  0AFC  0871               	movf	___awdiv@divisor+1,w
  7260  0AFD  0273               	subwf	___awdiv@dividend+1,w
  7261  0AFE  1D03               	skipz
  7262  0AFF  2B02               	goto	u2095
  7263  0B00  0870               	movf	___awdiv@divisor,w
  7264  0B01  0272               	subwf	___awdiv@dividend,w
  7265  0B02                     u2095:	
  7266  0B02  1C03               	skipc
  7267  0B03  2B0B               	goto	l2707
  7268  0B04  0870               	movf	___awdiv@divisor,w
  7269  0B05  02F2               	subwf	___awdiv@dividend,f
  7270  0B06  0871               	movf	___awdiv@divisor+1,w
  7271  0B07  1C03               	skipc
  7272  0B08  03F3               	decf	___awdiv@dividend+1,f
  7273  0B09  02F3               	subwf	___awdiv@dividend+1,f
  7274  0B0A  1477               	bsf	___awdiv@quotient,0
  7275  0B0B                     l2707:	
  7276  0B0B  3001               	movlw	1
  7277  0B0C                     u2105:	
  7278  0B0C  1003               	clrc
  7279  0B0D  0CF1               	rrf	___awdiv@divisor+1,f
  7280  0B0E  0CF0               	rrf	___awdiv@divisor,f
  7281  0B0F  3EFF               	addlw	-1
  7282  0B10  1D03               	skipz
  7283  0B11  2B0C               	goto	u2105
  7284  0B12  3001               	movlw	1
  7285  0B13  02F5               	subwf	___awdiv@counter,f
  7286  0B14  1D03               	btfss	3,2
  7287  0B15  2AF5               	goto	l2701
  7288  0B16                     l2711:	
  7289  0B16  0876               	movf	___awdiv@sign,w
  7290  0B17  1903               	btfsc	3,2
  7291  0B18  2B1E               	goto	l2715
  7292  0B19  09F7               	comf	___awdiv@quotient,f
  7293  0B1A  09F8               	comf	___awdiv@quotient+1,f
  7294  0B1B  0AF7               	incf	___awdiv@quotient,f
  7295  0B1C  1903               	skipnz
  7296  0B1D  0AF8               	incf	___awdiv@quotient+1,f
  7297  0B1E                     l2715:	
  7298  0B1E  0878               	movf	___awdiv@quotient+1,w
  7299  0B1F  00F1               	movwf	?___awdiv+1
  7300  0B20  0877               	movf	___awdiv@quotient,w
  7301  0B21  00F0               	movwf	?___awdiv
  7302  0B22  0008               	return
  7303  0B23                     __end_of___awdiv:	
  7304                           
  7305                           	psect	text26
  7306  0CA4                     __ptext26:	
  7307 ;; *************** function _OPINIT *****************
  7308 ;; Defined at:
  7309 ;;		line 241 in file "FMCW.c"
  7310 ;; Parameters:    Size  Location     Type
  7311 ;;  fmcwtxrx        2    4[COMMON] int 
  7312 ;; Auto vars:     Size  Location     Type
  7313 ;;		None
  7314 ;; Return value:  Size  Location     Type
  7315 ;;                  1    wreg      void 
  7316 ;; Registers used:
  7317 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7318 ;; Tracked objects:
  7319 ;;		On entry : 0/0
  7320 ;;		On exit  : 0/0
  7321 ;;		Unchanged: 0/0
  7322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7323 ;;      Params:         2       0       0       0       0
  7324 ;;      Locals:         0       0       0       0       0
  7325 ;;      Temps:          0       0       0       0       0
  7326 ;;      Totals:         2       0       0       0       0
  7327 ;;Total ram usage:        2 bytes
  7328 ;; Hardware stack levels used:    1
  7329 ;; Hardware stack levels required when called:    2
  7330 ;; This function calls:
  7331 ;;		_H_OUT
  7332 ;;		_L_OUT
  7333 ;;		_STBOUT
  7334 ;; This function is called by:
  7335 ;;		_FMTX
  7336 ;;		_CWTX
  7337 ;;		_FMRX
  7338 ;; This function uses a non-reentrant model
  7339 ;;
  7340                           
  7341                           
  7342                           ;psect for function _OPINIT
  7343  0CA4                     _OPINIT:	
  7344                           
  7345                           ;FMCW.c: 243: L_OUT(fmcwtxrx);
  7346                           
  7347                           ;incstack = 0
  7348                           ; Regs used in _OPINIT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7349  0CA4  0875               	movf	OPINIT@fmcwtxrx+1,w
  7350  0CA5  00F3               	movwf	L_OUT@fmcwtxrx+1
  7351  0CA6  0874               	movf	OPINIT@fmcwtxrx,w
  7352  0CA7  00F2               	movwf	L_OUT@fmcwtxrx
  7353  0CA8  120A  158A  21F1  120A  158A  	fcall	_L_OUT
  7354                           
  7355                           ;FMCW.c: 244: L_OUT(fmcwtxrx);
  7356  0CAD  0875               	movf	OPINIT@fmcwtxrx+1,w
  7357  0CAE  00F3               	movwf	L_OUT@fmcwtxrx+1
  7358  0CAF  0874               	movf	OPINIT@fmcwtxrx,w
  7359  0CB0  00F2               	movwf	L_OUT@fmcwtxrx
  7360  0CB1  120A  158A  21F1  120A  158A  	fcall	_L_OUT
  7361                           
  7362                           ;FMCW.c: 245: L_OUT(fmcwtxrx);
  7363  0CB6  0875               	movf	OPINIT@fmcwtxrx+1,w
  7364  0CB7  00F3               	movwf	L_OUT@fmcwtxrx+1
  7365  0CB8  0874               	movf	OPINIT@fmcwtxrx,w
  7366  0CB9  00F2               	movwf	L_OUT@fmcwtxrx
  7367  0CBA  120A  158A  21F1  120A  158A  	fcall	_L_OUT
  7368                           
  7369                           ;FMCW.c: 246: H_OUT(fmcwtxrx);
  7370  0CBF  0875               	movf	OPINIT@fmcwtxrx+1,w
  7371  0CC0  00F3               	movwf	H_OUT@fmcwtxrx+1
  7372  0CC1  0874               	movf	OPINIT@fmcwtxrx,w
  7373  0CC2  00F2               	movwf	H_OUT@fmcwtxrx
  7374  0CC3  120A  158A  21AB  120A  158A  	fcall	_H_OUT
  7375                           
  7376                           ;FMCW.c: 247: H_OUT(fmcwtxrx);
  7377  0CC8  0875               	movf	OPINIT@fmcwtxrx+1,w
  7378  0CC9  00F3               	movwf	H_OUT@fmcwtxrx+1
  7379  0CCA  0874               	movf	OPINIT@fmcwtxrx,w
  7380  0CCB  00F2               	movwf	H_OUT@fmcwtxrx
  7381  0CCC  120A  158A  21AB  120A  158A  	fcall	_H_OUT
  7382                           
  7383                           ;FMCW.c: 248: L_OUT(fmcwtxrx);
  7384  0CD1  0875               	movf	OPINIT@fmcwtxrx+1,w
  7385  0CD2  00F3               	movwf	L_OUT@fmcwtxrx+1
  7386  0CD3  0874               	movf	OPINIT@fmcwtxrx,w
  7387  0CD4  00F2               	movwf	L_OUT@fmcwtxrx
  7388  0CD5  120A  158A  21F1  120A  158A  	fcall	_L_OUT
  7389                           
  7390                           ;FMCW.c: 249: L_OUT(fmcwtxrx);
  7391  0CDA  0875               	movf	OPINIT@fmcwtxrx+1,w
  7392  0CDB  00F3               	movwf	L_OUT@fmcwtxrx+1
  7393  0CDC  0874               	movf	OPINIT@fmcwtxrx,w
  7394  0CDD  00F2               	movwf	L_OUT@fmcwtxrx
  7395  0CDE  120A  158A  21F1  120A  158A  	fcall	_L_OUT
  7396                           
  7397                           ;FMCW.c: 250: L_OUT(fmcwtxrx);
  7398  0CE3  0875               	movf	OPINIT@fmcwtxrx+1,w
  7399  0CE4  00F3               	movwf	L_OUT@fmcwtxrx+1
  7400  0CE5  0874               	movf	OPINIT@fmcwtxrx,w
  7401  0CE6  00F2               	movwf	L_OUT@fmcwtxrx
  7402  0CE7  120A  158A  21F1  120A  158A  	fcall	_L_OUT
  7403                           
  7404                           ;FMCW.c: 251: L_OUT(fmcwtxrx);
  7405  0CEC  0875               	movf	OPINIT@fmcwtxrx+1,w
  7406  0CED  00F3               	movwf	L_OUT@fmcwtxrx+1
  7407  0CEE  0874               	movf	OPINIT@fmcwtxrx,w
  7408  0CEF  00F2               	movwf	L_OUT@fmcwtxrx
  7409  0CF0  120A  158A  21F1  120A  158A  	fcall	_L_OUT
  7410                           
  7411                           ;FMCW.c: 252: L_OUT(fmcwtxrx);
  7412  0CF5  0875               	movf	OPINIT@fmcwtxrx+1,w
  7413  0CF6  00F3               	movwf	L_OUT@fmcwtxrx+1
  7414  0CF7  0874               	movf	OPINIT@fmcwtxrx,w
  7415  0CF8  00F2               	movwf	L_OUT@fmcwtxrx
  7416  0CF9  120A  158A  21F1  120A  158A  	fcall	_L_OUT
  7417                           
  7418                           ;FMCW.c: 253: H_OUT(fmcwtxrx);
  7419  0CFE  0875               	movf	OPINIT@fmcwtxrx+1,w
  7420  0CFF  00F3               	movwf	H_OUT@fmcwtxrx+1
  7421  0D00  0874               	movf	OPINIT@fmcwtxrx,w
  7422  0D01  00F2               	movwf	H_OUT@fmcwtxrx
  7423  0D02  120A  158A  21AB  120A  158A  	fcall	_H_OUT
  7424                           
  7425                           ;FMCW.c: 256: L_OUT(fmcwtxrx);
  7426  0D07  0875               	movf	OPINIT@fmcwtxrx+1,w
  7427  0D08  00F3               	movwf	L_OUT@fmcwtxrx+1
  7428  0D09  0874               	movf	OPINIT@fmcwtxrx,w
  7429  0D0A  00F2               	movwf	L_OUT@fmcwtxrx
  7430  0D0B  120A  158A  21F1  120A  158A  	fcall	_L_OUT
  7431                           
  7432                           ;FMCW.c: 257: L_OUT(fmcwtxrx);
  7433  0D10  0875               	movf	OPINIT@fmcwtxrx+1,w
  7434  0D11  00F3               	movwf	L_OUT@fmcwtxrx+1
  7435  0D12  0874               	movf	OPINIT@fmcwtxrx,w
  7436  0D13  00F2               	movwf	L_OUT@fmcwtxrx
  7437  0D14  120A  158A  21F1  120A  158A  	fcall	_L_OUT
  7438                           
  7439                           ;FMCW.c: 260: STBOUT(fmcwtxrx);
  7440  0D19  0875               	movf	OPINIT@fmcwtxrx+1,w
  7441  0D1A  00F3               	movwf	STBOUT@fmcwtxrx+1
  7442  0D1B  0874               	movf	OPINIT@fmcwtxrx,w
  7443  0D1C  00F2               	movwf	STBOUT@fmcwtxrx
  7444  0D1D  120A  158A  2149   	fcall	_STBOUT
  7445  0D20  0008               	return
  7446  0D21                     __end_of_OPINIT:	
  7447                           
  7448                           	psect	text27
  7449  0949                     __ptext27:	
  7450 ;; *************** function _STBOUT *****************
  7451 ;; Defined at:
  7452 ;;		line 107 in file "FMCW.c"
  7453 ;; Parameters:    Size  Location     Type
  7454 ;;  fmcwtxrx        2    2[COMMON] int 
  7455 ;; Auto vars:     Size  Location     Type
  7456 ;;		None
  7457 ;; Return value:  Size  Location     Type
  7458 ;;                  1    wreg      void 
  7459 ;; Registers used:
  7460 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7461 ;; Tracked objects:
  7462 ;;		On entry : 0/0
  7463 ;;		On exit  : 0/0
  7464 ;;		Unchanged: 0/0
  7465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7466 ;;      Params:         2       0       0       0       0
  7467 ;;      Locals:         0       0       0       0       0
  7468 ;;      Temps:          0       0       0       0       0
  7469 ;;      Totals:         2       0       0       0       0
  7470 ;;Total ram usage:        2 bytes
  7471 ;; Hardware stack levels used:    1
  7472 ;; Hardware stack levels required when called:    1
  7473 ;; This function calls:
  7474 ;;		__NOP
  7475 ;; This function is called by:
  7476 ;;		_OUTFQ
  7477 ;;		_RFDOUT
  7478 ;;		_OPINIT
  7479 ;; This function uses a non-reentrant model
  7480 ;;
  7481                           
  7482                           
  7483                           ;psect for function _STBOUT
  7484  0949                     _STBOUT:	
  7485                           
  7486                           ;FMCW.c: 108: if(fmcwtxrx == 1)
  7487                           
  7488                           ;incstack = 0
  7489                           ; Regs used in _STBOUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7490  0949  0372               	decf	STBOUT@fmcwtxrx,w
  7491  094A  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7492  094B  1D03               	btfss	3,2
  7493  094C  2958               	goto	l2659
  7494                           
  7495                           ;FMCW.c: 109: {
  7496                           ;FMCW.c: 110: PORTAbits.RA5 = 1;
  7497  094D  1283               	bcf	3,5	;RP0=0, select bank0
  7498  094E  1303               	bcf	3,6	;RP1=0, select bank0
  7499  094F  1685               	bsf	5,5	;volatile
  7500                           
  7501                           ;FMCW.c: 111: _NOP();
  7502  0950  160A  118A  27EB  120A  158A  	fcall	__NOP
  7503                           
  7504                           ;FMCW.c: 112: PORTAbits.RA5 = 0;
  7505  0955  1283               	bcf	3,5	;RP0=0, select bank0
  7506  0956  1303               	bcf	3,6	;RP1=0, select bank0
  7507  0957  1285               	bcf	5,5	;volatile
  7508  0958                     l2659:	
  7509                           
  7510                           ;FMCW.c: 113: }
  7511                           ;FMCW.c: 114: if(fmcwtxrx == 2)
  7512  0958  3002               	movlw	2
  7513  0959  0672               	xorwf	STBOUT@fmcwtxrx,w
  7514  095A  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7515  095B  1D03               	btfss	3,2
  7516  095C  2968               	goto	l2667
  7517                           
  7518                           ;FMCW.c: 115: {
  7519                           ;FMCW.c: 116: PORTDbits.RD0 = 1;
  7520  095D  1283               	bcf	3,5	;RP0=0, select bank0
  7521  095E  1303               	bcf	3,6	;RP1=0, select bank0
  7522  095F  1408               	bsf	8,0	;volatile
  7523                           
  7524                           ;FMCW.c: 117: _NOP();
  7525  0960  160A  118A  27EB  120A  158A  	fcall	__NOP
  7526                           
  7527                           ;FMCW.c: 118: PORTDbits.RD0 = 0;
  7528  0965  1283               	bcf	3,5	;RP0=0, select bank0
  7529  0966  1303               	bcf	3,6	;RP1=0, select bank0
  7530  0967  1008               	bcf	8,0	;volatile
  7531  0968                     l2667:	
  7532                           
  7533                           ;FMCW.c: 119: }
  7534                           ;FMCW.c: 120: if(fmcwtxrx == 3)
  7535  0968  3003               	movlw	3
  7536  0969  0672               	xorwf	STBOUT@fmcwtxrx,w
  7537  096A  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7538  096B  1D03               	btfss	3,2
  7539  096C  0008               	return
  7540                           
  7541                           ;FMCW.c: 121: {
  7542                           ;FMCW.c: 122: PORTAbits.RA4 = 1;
  7543  096D  1283               	bcf	3,5	;RP0=0, select bank0
  7544  096E  1303               	bcf	3,6	;RP1=0, select bank0
  7545  096F  1605               	bsf	5,4	;volatile
  7546                           
  7547                           ;FMCW.c: 123: _NOP();
  7548  0970  160A  118A  27EB   	fcall	__NOP
  7549                           
  7550                           ;FMCW.c: 124: PORTAbits.RA4 = 0;
  7551  0973  1283               	bcf	3,5	;RP0=0, select bank0
  7552  0974  1303               	bcf	3,6	;RP1=0, select bank0
  7553  0975  1205               	bcf	5,4	;volatile
  7554  0976  0008               	return
  7555  0977                     __end_of_STBOUT:	
  7556                           
  7557                           	psect	text28
  7558  09F1                     __ptext28:	
  7559 ;; *************** function _L_OUT *****************
  7560 ;; Defined at:
  7561 ;;		line 40 in file "FMCW.c"
  7562 ;; Parameters:    Size  Location     Type
  7563 ;;  fmcwtxrx        2    2[COMMON] int 
  7564 ;; Auto vars:     Size  Location     Type
  7565 ;;		None
  7566 ;; Return value:  Size  Location     Type
  7567 ;;                  1    wreg      void 
  7568 ;; Registers used:
  7569 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7570 ;; Tracked objects:
  7571 ;;		On entry : 0/0
  7572 ;;		On exit  : 0/0
  7573 ;;		Unchanged: 0/0
  7574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7575 ;;      Params:         2       0       0       0       0
  7576 ;;      Locals:         0       0       0       0       0
  7577 ;;      Temps:          0       0       0       0       0
  7578 ;;      Totals:         2       0       0       0       0
  7579 ;;Total ram usage:        2 bytes
  7580 ;; Hardware stack levels used:    1
  7581 ;; Hardware stack levels required when called:    1
  7582 ;; This function calls:
  7583 ;;		__NOP
  7584 ;; This function is called by:
  7585 ;;		_OUTFQ
  7586 ;;		_RFDOUT
  7587 ;;		_OPINIT
  7588 ;; This function uses a non-reentrant model
  7589 ;;
  7590                           
  7591                           
  7592                           ;psect for function _L_OUT
  7593  09F1                     _L_OUT:	
  7594                           
  7595                           ;FMCW.c: 41: if(fmcwtxrx == 1)
  7596                           
  7597                           ;incstack = 0
  7598                           ; Regs used in _L_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7599  09F1  0372               	decf	L_OUT@fmcwtxrx,w
  7600  09F2  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7601  09F3  1D03               	btfss	3,2
  7602  09F4  2A08               	goto	l2601
  7603                           
  7604                           ;FMCW.c: 42: {
  7605                           ;FMCW.c: 43: PORTEbits.RE0 = 0;
  7606  09F5  1283               	bcf	3,5	;RP0=0, select bank0
  7607  09F6  1303               	bcf	3,6	;RP1=0, select bank0
  7608  09F7  1009               	bcf	9,0	;volatile
  7609                           
  7610                           ;FMCW.c: 44: _NOP();
  7611  09F8  160A  118A  27EB  120A  158A  	fcall	__NOP
  7612                           
  7613                           ;FMCW.c: 45: PORTEbits.RE1 = 1;
  7614  09FD  1283               	bcf	3,5	;RP0=0, select bank0
  7615  09FE  1303               	bcf	3,6	;RP1=0, select bank0
  7616  09FF  1489               	bsf	9,1	;volatile
  7617                           
  7618                           ;FMCW.c: 46: _NOP();
  7619  0A00  160A  118A  27EB  120A  158A  	fcall	__NOP
  7620                           
  7621                           ;FMCW.c: 47: PORTEbits.RE1 = 0;
  7622  0A05  1283               	bcf	3,5	;RP0=0, select bank0
  7623  0A06  1303               	bcf	3,6	;RP1=0, select bank0
  7624  0A07  1089               	bcf	9,1	;volatile
  7625  0A08                     l2601:	
  7626                           
  7627                           ;FMCW.c: 48: }
  7628                           ;FMCW.c: 49: if(fmcwtxrx == 2)
  7629  0A08  3002               	movlw	2
  7630  0A09  0672               	xorwf	L_OUT@fmcwtxrx,w
  7631  0A0A  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7632  0A0B  1D03               	btfss	3,2
  7633  0A0C  2A20               	goto	l2611
  7634                           
  7635                           ;FMCW.c: 50: {
  7636                           ;FMCW.c: 51: PORTDbits.RD1 = 0;
  7637  0A0D  1283               	bcf	3,5	;RP0=0, select bank0
  7638  0A0E  1303               	bcf	3,6	;RP1=0, select bank0
  7639  0A0F  1088               	bcf	8,1	;volatile
  7640                           
  7641                           ;FMCW.c: 52: _NOP();
  7642  0A10  160A  118A  27EB  120A  158A  	fcall	__NOP
  7643                           
  7644                           ;FMCW.c: 53: PORTDbits.RD2 = 1;
  7645  0A15  1283               	bcf	3,5	;RP0=0, select bank0
  7646  0A16  1303               	bcf	3,6	;RP1=0, select bank0
  7647  0A17  1508               	bsf	8,2	;volatile
  7648                           
  7649                           ;FMCW.c: 54: _NOP();
  7650  0A18  160A  118A  27EB  120A  158A  	fcall	__NOP
  7651                           
  7652                           ;FMCW.c: 55: PORTDbits.RD2 = 0;
  7653  0A1D  1283               	bcf	3,5	;RP0=0, select bank0
  7654  0A1E  1303               	bcf	3,6	;RP1=0, select bank0
  7655  0A1F  1108               	bcf	8,2	;volatile
  7656  0A20                     l2611:	
  7657                           
  7658                           ;FMCW.c: 56: }
  7659                           ;FMCW.c: 57: if(fmcwtxrx == 3)
  7660  0A20  3003               	movlw	3
  7661  0A21  0672               	xorwf	L_OUT@fmcwtxrx,w
  7662  0A22  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7663  0A23  1D03               	btfss	3,2
  7664  0A24  0008               	return
  7665                           
  7666                           ;FMCW.c: 58: {
  7667                           ;FMCW.c: 59: PORTAbits.RA3 = 0;
  7668  0A25  1283               	bcf	3,5	;RP0=0, select bank0
  7669  0A26  1303               	bcf	3,6	;RP1=0, select bank0
  7670  0A27  1185               	bcf	5,3	;volatile
  7671                           
  7672                           ;FMCW.c: 60: _NOP();
  7673  0A28  160A  118A  27EB  120A  158A  	fcall	__NOP
  7674                           
  7675                           ;FMCW.c: 61: PORTAbits.RA2 = 1;
  7676  0A2D  1283               	bcf	3,5	;RP0=0, select bank0
  7677  0A2E  1303               	bcf	3,6	;RP1=0, select bank0
  7678  0A2F  1505               	bsf	5,2	;volatile
  7679                           
  7680                           ;FMCW.c: 62: _NOP();
  7681  0A30  160A  118A  27EB   	fcall	__NOP
  7682                           
  7683                           ;FMCW.c: 63: PORTAbits.RA2 = 0;
  7684  0A33  1283               	bcf	3,5	;RP0=0, select bank0
  7685  0A34  1303               	bcf	3,6	;RP1=0, select bank0
  7686  0A35  1105               	bcf	5,2	;volatile
  7687  0A36  0008               	return
  7688  0A37                     __end_of_L_OUT:	
  7689                           
  7690                           	psect	text29
  7691  09AB                     __ptext29:	
  7692 ;; *************** function _H_OUT *****************
  7693 ;; Defined at:
  7694 ;;		line 74 in file "FMCW.c"
  7695 ;; Parameters:    Size  Location     Type
  7696 ;;  fmcwtxrx        2    2[COMMON] int 
  7697 ;; Auto vars:     Size  Location     Type
  7698 ;;		None
  7699 ;; Return value:  Size  Location     Type
  7700 ;;                  1    wreg      void 
  7701 ;; Registers used:
  7702 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7703 ;; Tracked objects:
  7704 ;;		On entry : 0/0
  7705 ;;		On exit  : 0/0
  7706 ;;		Unchanged: 0/0
  7707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7708 ;;      Params:         2       0       0       0       0
  7709 ;;      Locals:         0       0       0       0       0
  7710 ;;      Temps:          0       0       0       0       0
  7711 ;;      Totals:         2       0       0       0       0
  7712 ;;Total ram usage:        2 bytes
  7713 ;; Hardware stack levels used:    1
  7714 ;; Hardware stack levels required when called:    1
  7715 ;; This function calls:
  7716 ;;		__NOP
  7717 ;; This function is called by:
  7718 ;;		_OUTFQ
  7719 ;;		_RFDOUT
  7720 ;;		_OPINIT
  7721 ;; This function uses a non-reentrant model
  7722 ;;
  7723                           
  7724                           
  7725                           ;psect for function _H_OUT
  7726  09AB                     _H_OUT:	
  7727                           
  7728                           ;FMCW.c: 75: if(fmcwtxrx == 1)
  7729                           
  7730                           ;incstack = 0
  7731                           ; Regs used in _H_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7732  09AB  0372               	decf	H_OUT@fmcwtxrx,w
  7733  09AC  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7734  09AD  1D03               	btfss	3,2
  7735  09AE  29C2               	goto	l2631
  7736                           
  7737                           ;FMCW.c: 76: {
  7738                           ;FMCW.c: 77: PORTEbits.RE0 = 1;
  7739  09AF  1283               	bcf	3,5	;RP0=0, select bank0
  7740  09B0  1303               	bcf	3,6	;RP1=0, select bank0
  7741  09B1  1409               	bsf	9,0	;volatile
  7742                           
  7743                           ;FMCW.c: 78: _NOP();
  7744  09B2  160A  118A  27EB  120A  158A  	fcall	__NOP
  7745                           
  7746                           ;FMCW.c: 79: PORTEbits.RE1 = 1;
  7747  09B7  1283               	bcf	3,5	;RP0=0, select bank0
  7748  09B8  1303               	bcf	3,6	;RP1=0, select bank0
  7749  09B9  1489               	bsf	9,1	;volatile
  7750                           
  7751                           ;FMCW.c: 80: _NOP();
  7752  09BA  160A  118A  27EB  120A  158A  	fcall	__NOP
  7753                           
  7754                           ;FMCW.c: 81: PORTEbits.RE1 = 0;
  7755  09BF  1283               	bcf	3,5	;RP0=0, select bank0
  7756  09C0  1303               	bcf	3,6	;RP1=0, select bank0
  7757  09C1  1089               	bcf	9,1	;volatile
  7758  09C2                     l2631:	
  7759                           
  7760                           ;FMCW.c: 82: }
  7761                           ;FMCW.c: 83: if(fmcwtxrx == 2)
  7762  09C2  3002               	movlw	2
  7763  09C3  0672               	xorwf	H_OUT@fmcwtxrx,w
  7764  09C4  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7765  09C5  1D03               	btfss	3,2
  7766  09C6  29DA               	goto	l2641
  7767                           
  7768                           ;FMCW.c: 84: {
  7769                           ;FMCW.c: 85: PORTDbits.RD1 = 1;
  7770  09C7  1283               	bcf	3,5	;RP0=0, select bank0
  7771  09C8  1303               	bcf	3,6	;RP1=0, select bank0
  7772  09C9  1488               	bsf	8,1	;volatile
  7773                           
  7774                           ;FMCW.c: 86: _NOP();
  7775  09CA  160A  118A  27EB  120A  158A  	fcall	__NOP
  7776                           
  7777                           ;FMCW.c: 87: PORTDbits.RD2 = 1;
  7778  09CF  1283               	bcf	3,5	;RP0=0, select bank0
  7779  09D0  1303               	bcf	3,6	;RP1=0, select bank0
  7780  09D1  1508               	bsf	8,2	;volatile
  7781                           
  7782                           ;FMCW.c: 88: _NOP();
  7783  09D2  160A  118A  27EB  120A  158A  	fcall	__NOP
  7784                           
  7785                           ;FMCW.c: 89: PORTDbits.RD2 = 0;
  7786  09D7  1283               	bcf	3,5	;RP0=0, select bank0
  7787  09D8  1303               	bcf	3,6	;RP1=0, select bank0
  7788  09D9  1108               	bcf	8,2	;volatile
  7789  09DA                     l2641:	
  7790                           
  7791                           ;FMCW.c: 90: }
  7792                           ;FMCW.c: 91: if(fmcwtxrx == 3)
  7793  09DA  3003               	movlw	3
  7794  09DB  0672               	xorwf	H_OUT@fmcwtxrx,w
  7795  09DC  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7796  09DD  1D03               	btfss	3,2
  7797  09DE  0008               	return
  7798                           
  7799                           ;FMCW.c: 92: {
  7800                           ;FMCW.c: 93: PORTAbits.RA3 = 1;
  7801  09DF  1283               	bcf	3,5	;RP0=0, select bank0
  7802  09E0  1303               	bcf	3,6	;RP1=0, select bank0
  7803  09E1  1585               	bsf	5,3	;volatile
  7804                           
  7805                           ;FMCW.c: 94: _NOP();
  7806  09E2  160A  118A  27EB  120A  158A  	fcall	__NOP
  7807                           
  7808                           ;FMCW.c: 95: PORTAbits.RA2 = 1;
  7809  09E7  1283               	bcf	3,5	;RP0=0, select bank0
  7810  09E8  1303               	bcf	3,6	;RP1=0, select bank0
  7811  09E9  1505               	bsf	5,2	;volatile
  7812                           
  7813                           ;FMCW.c: 96: _NOP();
  7814  09EA  160A  118A  27EB   	fcall	__NOP
  7815                           
  7816                           ;FMCW.c: 97: PORTAbits.RA2 = 0;
  7817  09ED  1283               	bcf	3,5	;RP0=0, select bank0
  7818  09EE  1303               	bcf	3,6	;RP1=0, select bank0
  7819  09EF  1105               	bcf	5,2	;volatile
  7820  09F0  0008               	return
  7821  09F1                     __end_of_H_OUT:	
  7822                           
  7823                           	psect	text30
  7824  17EB                     __ptext30:	
  7825 ;; *************** function __NOP *****************
  7826 ;; Defined at:
  7827 ;;		line 349 in file "FMCW.c"
  7828 ;; Parameters:    Size  Location     Type
  7829 ;;		None
  7830 ;; Auto vars:     Size  Location     Type
  7831 ;;  i               2    0[COMMON] int 
  7832 ;; Return value:  Size  Location     Type
  7833 ;;                  1    wreg      void 
  7834 ;; Registers used:
  7835 ;;		wreg, status,2, btemp+1
  7836 ;; Tracked objects:
  7837 ;;		On entry : 0/0
  7838 ;;		On exit  : 0/0
  7839 ;;		Unchanged: 0/0
  7840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7841 ;;      Params:         0       0       0       0       0
  7842 ;;      Locals:         2       0       0       0       0
  7843 ;;      Temps:          0       0       0       0       0
  7844 ;;      Totals:         2       0       0       0       0
  7845 ;;Total ram usage:        2 bytes
  7846 ;; Hardware stack levels used:    1
  7847 ;; This function calls:
  7848 ;;		Nothing
  7849 ;; This function is called by:
  7850 ;;		_L_OUT
  7851 ;;		_H_OUT
  7852 ;;		_STBOUT
  7853 ;; This function uses a non-reentrant model
  7854 ;;
  7855                           
  7856                           
  7857                           ;psect for function __NOP
  7858  17EB                     __NOP:	
  7859                           
  7860                           ;FMCW.c: 350: for(int i=0; i<5; i++){
  7861                           
  7862                           ;incstack = 0
  7863                           ; Regs used in __NOP: [wreg+status,2+btemp+1]
  7864  17EB  01F0               	clrf	__NOP@i
  7865  17EC  01F1               	clrf	__NOP@i+1
  7866  17ED                     L9:	
  7867  17ED  0871               	movf	__NOP@i+1,w
  7868  17EE  3A80               	xorlw	128
  7869  17EF  00FF               	movwf	127
  7870  17F0  3080               	movlw	128
  7871  17F1  027F               	subwf	127,w
  7872  17F2  1D03               	skipz
  7873  17F3  2FF6               	goto	u1875
  7874  17F4  3005               	movlw	5
  7875  17F5  0270               	subwf	__NOP@i,w
  7876  17F6                     u1875:	
  7877  17F6  1803               	btfsc	3,0
  7878  17F7  0008               	return
  7879                           
  7880                           ;FMCW.c: 351: __nop();
  7881  17F8  0000               	nop
  7882  17F9  3001               	movlw	1
  7883  17FA  07F0               	addwf	__NOP@i,f
  7884  17FB  1803               	skipnc
  7885  17FC  0AF1               	incf	__NOP@i+1,f
  7886  17FD  3000               	movlw	0
  7887  17FE  07F1               	addwf	__NOP@i+1,f
  7888  17FF  2FED               	goto	L9
  7889  1800                     __end_of__NOP:	
  7890  007E                     btemp	set	126	;btemp
  7891  007E                     wtemp	set	126
  7892  007E                     wtemp0	set	126
  7893  0080                     wtemp1	set	128
  7894  0082                     wtemp2	set	130
  7895  0084                     wtemp3	set	132
  7896  0086                     wtemp4	set	134
  7897  0088                     wtemp5	set	136
  7898  007F                     wtemp6	set	127
  7899  007E                     ttemp	set	126
  7900  007E                     ttemp0	set	126
  7901  0081                     ttemp1	set	129
  7902  0084                     ttemp2	set	132
  7903  0087                     ttemp3	set	135
  7904  007F                     ttemp4	set	127
  7905  007E                     ltemp	set	126
  7906  007E                     ltemp0	set	126
  7907  0082                     ltemp1	set	130
  7908  0086                     ltemp2	set	134
  7909  0080                     ltemp3	set	128


Data Sizes:
    Strings     25
    Constant    2
    Data        91
    BSS         121
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      80
    BANK1            80     34      73
    BANK3            96      0      90
    BANK2            96      0      73

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_16(CODE[3]), STR_15(CODE[8]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 

    FMRX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), FMRX_Nprg(BANK3[10]), 

    CWTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@CWTX_Nprg(BANK1[10]), CWTX_Nprg(BANK1[10]), 

    FMTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    OUTFQ@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), main@CWTX_Nprg(BANK1[10]), main@FMTX_Nprg(BANK1[10]), 
		 -> FMRX_Nprg(BANK3[10]), CWTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    sp__EEPROM_Read	PTR unsigned char  size(1) Largest target is 32
		 -> EEPROMData(BANK2[32]), 

    EEPROM_Write@data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK2[16]), 

    main@dData	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK2[16]), 

    sp__ReceivePacket_data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK2[16]), 


Critical Paths under _main in COMMON

    _printf->_putch
    _ReceivePacket_data->_fcscheck
    _ReceivePacket_data->_waitFlag
    _waitFlag->_getbit
    _getdata->_getbit
    _NM_waddress->_putch
    _Init_I2C_M->___lldiv
    _FMTX->_OUTFQ
    _FMTX->_RFDOUT
    _FMRX->_OUTFQ
    _FMRX->_RFDOUT
    _EEPROM_Write->_I2C_Master_Write
    _CWTX->_OUTFQ
    _CWTX->_RFDOUT
    _RFDOUT->___awdiv
    _OUTFQ->___awdiv
    _OPINIT->_H_OUT
    _OPINIT->_L_OUT
    _OPINIT->_STBOUT
    _STBOUT->__NOP
    _L_OUT->__NOP
    _H_OUT->__NOP

Critical Paths under _main in BANK0

    _main->_CWTX
    _main->_FMRX
    _main->_FMTX
    _ReceivePacket_data->_waitFlag
    _FMTX->_OUTFQ
    _FMRX->_OUTFQ
    _CWTX->_OUTFQ

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                38    38      0   33355
                                             66 BANK0      4     4      0
                                              0 BANK1     34    34      0
                               _CWTX
                       _EEPROM_Write
                               _FMRX
                               _FMTX
                         _Init_I2C_M
                           _Init_MPU
                        _Init_SERIAL
                           _Init_WDT
                        _NM_waddress
                 _ReceivePacket_data
                          _Reset_EPS
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     214
                                              1 COMMON     7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _Reset_EPS                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ReceivePacket_data                                   6     6      0    2691
                                             10 COMMON     2     2      0
                                             29 BANK0      4     4      0
                           _fcscheck
                            _getdata
                           _waitFlag
 ---------------------------------------------------------------------------------
 (2) _waitFlag                                            33    33      0    2205
                                              6 COMMON     4     4      0
                                              0 BANK0     29    29      0
                             _getbit
 ---------------------------------------------------------------------------------
 (2) _getdata                                             10    10      0     212
                                              6 COMMON     2     2      0
                                              0 BANK0      7     7      0
                             _getbit
 ---------------------------------------------------------------------------------
 (3) _getbit                                               6     4      2      46
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _fcscheck                                            10     8      2     161
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (1) _NM_waddress                                          3     1      2     194
                                              1 COMMON     3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_WDT                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_SERIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_MPU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_I2C_M                                           8     4      4     343
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _FMTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _FMRX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         8     5      3     739
                                              2 COMMON     8     5      3
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     446
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CWTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (2) _RFDOUT                                              37    33      4    3231
                                              9 COMMON     4     0      4
                                              0 BANK0     33    33      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _OUTFQ                                               64    60      4    3853
                                              9 COMMON     4     0      4
                                              0 BANK0     60    60      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _OPINIT                                               2     0      2    2075
                                              4 COMMON     2     0      2
                              _H_OUT
                              _L_OUT
                             _STBOUT
 ---------------------------------------------------------------------------------
 (3) _STBOUT                                               2     0      2     271
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _L_OUT                                                2     0      2     801
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _H_OUT                                                2     0      2     536
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (4) __NOP                                                 2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CWTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _EEPROM_Write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _FMRX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _FMTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _Init_I2C_M
     ___lldiv
   _Init_MPU
   _Init_SERIAL
   _Init_WDT
   _NM_waddress
     _putch
   _ReceivePacket_data
     _fcscheck
     _getdata
       _getbit
     _waitFlag
       _getbit
   _Reset_EPS
   _printf
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      5A       9       93.8%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      49      11       76.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     22      49       7       91.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     46      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     14A      12        0.0%
ABS                  0      0     14A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Jan 21 16:53:34 2018

                           pc 0002                   __CFG_CP$OFF 0000                            l65 17AE  
                ___awdiv@sign 0076                            fsr 0004                           l207 0566  
                         l272 0091                           l494 17BD                           l669 0A7D  
                         _RA1 0029                           _RB2 0032                           _RC2 003A  
                         _RB4 0034                           _RB5 0035                           _PEN 048A  
                __CFG_CPD$OFF 0000                           _SEN 0488                           _RX9 00C6  
                         _TX9 04C6                           fsr0 0004                           indf 0000  
                __CFG_FOSC$HS 0000                  __CFG_LVP$OFF 0000                          l3001 0675  
                        l3005 0682                          l3101 07B0                          l3031 06D8  
                        l3103 032F                          l3201 00BD                          l3017 06B0  
                        l3123 0C18                          l3043 0706                          l3027 06CB  
                        l3213 00E8                          l3117 0C07                          l3053 0721  
                        l3231 019D                          l3207 00D9                          l3151 0059  
                        l3127 0C23                          l3119 0C0A                          l2601 0A08  
                        l3241 020C                          l3313 0DD5                          l3305 0DA1  
                        l3137 0BE7                          l3057 072E                          l2611 0A20  
                        l3219 00F7                          l3163 008A                          l3083 0784  
                        l3411 0C98                          l2701 0AF5                          l3245 0293  
                        l3229 0160                          l3253 02B7                          l3309 0DBB  
                        l3317 0DE8                          l3341 0BD5                          l3157 0076  
                        l3165 0038                          l3069 075C                          l3405 0C70  
                        l2631 09C2                          l2711 0B16                          l3263 02E0  
                        l3271 030D                          l3239 0205                          l3327 0B90  
                        l3079 0777                          l2641 09DA                          l3249 02A4  
                        l3337 0BC8                          l3329 0BA0                          l3177 00A9  
                        l3521 0A59                          l2715 0B1E                          l2707 0B0B  
                        l3267 02FA                          l3259 02C6                          l3291 0D5B  
                        l3419 0C9E                          l3531 0A3C                          l3285 0D4C  
                        l2581 0AB8                          l2813 0436                          l3525 0A63  
                        l3279 0D30                          l2583 0AC5                          l3519 0A57  
                        l2825 0464                          l2809 0429                          l2745 035E  
                        l2737 0336                          l3529 0A6A                          l2667 0968  
                        l2659 0958                          l2683 0AD4                          l3299 0D92  
                        l3547 0B53                          l2915 056F                          l2851 04BA  
                        l2835 047F                          l2755 0379                          l2739 0355  
                        l3549 0B6D                          l2925 058A                          l2861 04D5  
                        l2773 03B8                          l2909 0564                          l2839 048C  
                        l2783 03D3                          l2759 0386                          l3831 0EC4  
                        l2689 0ADF                          l2953 05D6                          l2929 0597  
                        l2865 04E2                          l3817 0E8A                          l2699 0AE7  
                        l2939 05AE                          l2891 0538                          l2787 03E0  
                        l2965 0604                          l2949 05C9                          l2877 0510  
                        l3845 0F0B                          l2991 065A                          l2975 061F  
                        l2887 052B                          l2799 040E                          l3839 0EF3  
                        l3857 0F32                          l3881 0FF0                          l2979 062C  
                        l3877 0FD9                          STR_1 0817                          STR_2 0817  
                        STR_3 0817                          STR_4 0817                          STR_5 0817  
                        STR_6 0817                          STR_7 0810                          STR_8 0810  
                        STR_9 0810                          _BRGH 04C2                          _CREN 00C4  
                        _FERR 00C2                          u2105 0B0C                          u2205 039F  
                        u2065 0AEA                          u3025 0DE6                          u3115 0C6E  
                        u2085 0AF6                          u3045 0B94                          u2405 054D  
                        u2325 04A1                          u2245 03F5                          u3125 0C96  
                        u2095 0B02                          u3065 0BA2                          u3075 0BB7  
                        u2515 0641                          u3085 0BC9                          u2365 04F7  
                        u2285 044B                          _FMRX 08F1                          u1905 0AA8  
                        u3195 0989                          u2635 0743                          u2555 0697  
                        u2475 05EB                          _FMTX 091D                          u2815 00BB  
                        u2905 02B5                          u2825 00D7                          u3570 0F50  
                        u1875 17F6                          u2915 02C4                          u2835 00E6  
                        u2675 0799                          u2595 06ED                          u3707 0022  
                        u3627 0E0A                          u3580 0F66                          u2845 00F5  
                        u3717 0AAC                          u3637 0E38                          u3590 0F7C  
                        u3727 0B78                          u2775 0046                          u3647 0E9F  
                        u2945 030B                          u3657 0F1D                          u2955 0D2E  
                        u3667 0F3F                          _RCIE 0465                          _RCEN 048B  
                        _RCIF 0065                          _CWTX 08C5                          u2965 0D4A  
                        u3677 0FD1                          u2895 02A2                          u2975 0D59  
                        u3687 0FF8                          u2985 0D90                          u3697 0011  
                        u2995 0D9F                          _OERR 00C1                          _TMR1 000E  
                        _SPEN 00C7                          _RSEN 0489                          _SREN 00C5  
                        _TXIE 0464                          _TXEN 04C5                          _TXIF 0064  
                        _SYNC 04C4                          __NOP 17EB                  __CFG_WRT$OFF 0000  
                        _main 0E02                   _NM_waddress 0822                 ??_Init_SERIAL 0070  
                        btemp 007E                 __CFG_BOREN$ON 0000                          ltemp 007E  
                getbit@oldbit 00E7                   Init_I2C_M@c 0020                          start 0000  
ReceivePacket_data@fcschecker 003D                          ttemp 007E                          wtemp 007E  
               __CFG_IESO$OFF 0000                 __CFG_MCLRE$ON 0000          __end_of_EEPROM_Write 0B80  
                       ?_FMRX 005C                         ?_FMTX 005C                         ?_CWTX 005C  
            ?_I2C_Master_Wait 0070              ?_I2C_Master_Stop 0070                         ?__NOP 0070  
                       ?_main 0070                         _ACKEN 048C                         _ACKDT 048D  
             __end_of___awdiv 0B23                         STR_10 0810                         STR_11 0810  
                       STR_12 0810                         STR_15 0808                         STR_16 081E  
               __CFG_WDTE$OFF 0000                         _ANSEL 0188               __end_of___lldiv 0BDE  
             ___awdiv@divisor 0070               ___awdiv@counter 0075                         _RCREG 001A  
                       _SPBRG 0099                         _PORTA 0005                         _PORTB 0006  
                       _PORTC 0007                         _PORTD 0008                         _PORTE 0009  
                       _H_OUT 09AB                         _OUTFQ 00AC                         _TRISA 0085  
                       _TRISB 0086                         _TRISC 0087                         _TRISD 0088  
                       _TRISE 0089                         _L_OUT 09F1                         _TXREG 0019  
               __CFG_PWRTE$ON 0000                __CFG_FCMEN$OFF 0000                         _dData 0130  
             __end_of_getdata 0C3F                         _eflag 0068                 getdata@dstuff 0022  
                       _putch 17AD                         main@i 00BF                         pclath 000A  
                       ltemp0 007E                         ltemp1 0082                         ltemp2 0086  
                       ltemp3 0080                         ttemp0 007E                         ttemp1 0081  
                       ttemp2 0084                         ttemp3 0087                         ttemp4 007F  
                       status 0003                         wtemp0 007E                         wtemp1 0080  
                       wtemp2 0082                         wtemp3 0084                         wtemp4 0086  
                       wtemp5 0088                         wtemp6 007F                    _Init_I2C_M 0977  
            EEPROM_Write@data 0074    __end_of_ReceivePacket_data 0CA4                  __end_of_FMRX 091D  
                __end_of_FMTX 0949                  __end_of_CWTX 08F1                  __end_of__NOP 1800  
             __initialization 07B3                  __end_of_main 1000           __end_of_Init_SERIAL 084D  
            __end_of_Init_MPU 089D              __end_of_Init_WDT 17EB                        ??_FMRX 007D  
                      ??_FMTX 007D                        ??_CWTX 007D                        ??__NOP 0070  
                      ??_main 0062                        ?_H_OUT 0072      EEPROM_Write@high_address 0072  
                      ?_OUTFQ 0079                        ?_L_OUT 0072             ?_I2C_Master_Start 0070  
           ?_I2C_Master_Write 0070                        OUTFQ@i 0056            ??_I2C_Master_Start 0070  
                      OUTFQ@j 005A            ??_I2C_Master_Write 0072              ___awdiv@dividend 0072  
                  _eDataField 0140                        ?_putch 0070                        _ANSELH 0189  
                      _RFDOUT 0D21                        _OPINIT 0CA4                        _SSPADD 0093  
                      _STBOUT 0949                        _STATUS 0003                        _SSPCON 0014  
                      _SSPBUF 0013                        __NOP@i 0070              __end_of_fcscheck 00AC  
                   ??___awdiv 0074                        _dfcshi 006C                     ??___lldiv 0078  
                      _dfcslo 006D                        _efcshi 006E                        _efcslo 006F  
                      _getbit 0A7E            __size_of_Reset_EPS 0023                        _estuff 00E5  
            ___awdiv@quotient 0077                    _dPacketnum 0066                        _printf 0A37  
                   ??_getdata 0076                   RFDOUT@i_478 003B                   RFDOUT@i_479 003F  
            __end_of_waitFlag 07B3    EEPROM_Write@EEPROM_address 0078       __end_of__initialization 07FC  
     EEPROM_Write@low_address 0073                   ?_Init_I2C_M 0020                   _Init_SERIAL 0834  
       __size_of_EEPROM_Write 005D                 __end_of_H_OUT 09F1                 __end_of_OUTFQ 0327  
               __end_of_L_OUT 0A37                 L_OUT@fmcwtxrx 0072                __pcstackCOMMON 0070  
                __pidataBANK1 0866                  __pidataBANK2 084D                  __pidataBANK3 089D  
               __end_of_putch 17B5                       ??_H_OUT 0074                       ??_OUTFQ 0020  
                     ??_L_OUT 0074                       ??_putch 0070                  _EEPROM_Write 0B23  
                  __pbssBANK0 0066                    __pbssBANK1 00DC                    __pbssBANK2 0110  
                  __pbssBANK3 0190             __end_of_Reset_EPS 002A                     ?_Init_MPU 0070  
                     ?_RFDOUT 0079                     ?_Init_WDT 0070                       ?_OPINIT 0074  
                ?_NM_waddress 0071                       ?_STBOUT 0072                       RFDOUT@i 003D  
                  __pmaintext 0E02                    _ebitstatus 00E1                       ?_getbit 0070  
                     ?_printf 0071           __size_of_Init_I2C_M 0034                     OUTFQ@Nprg 007B  
                   ?_fcscheck 0070                       _SSPCON2 0091                       _SSPSTAT 0094  
                  __stringtab 0800                    ??_Init_MPU 0070                    ??_Init_WDT 0070  
             __size_of_RFDOUT 00E1               __size_of_OPINIT 007D               __size_of_STBOUT 002E  
                   ?_waitFlag 0070                       _dPacket 0190                       _ePacket 00DC  
                     ___awdiv 0ACA                       ___lldiv 0B80               __size_of_getbit 004C  
                 waitFlag@buf 003C                       __ptext1 0A37                       __ptext2 0007  
                     __ptext3 0C3F                       __ptext4 0327                       __ptext5 0BDE  
                     __ptext6 0A7E                       __ptext7 002A                       __ptext8 0822  
                     __ptext9 17AD               __size_of_printf 0047                       _getdata 0BDE  
          _ReceivePacket_data 0C3F                     _T1CONbits 0010      __size_of_I2C_Master_Wait 0009  
    __size_of_I2C_Master_Stop 0007                    ??_fcscheck 0072           ?_ReceivePacket_data 0070  
                     getbit@i 0074                       clrloop0 17B6          end_of_initialization 07FC  
                RFDOUT@Nref_b 0023                     _FMRX_Nref 00C4                     _FMRX_Nprg 01E0  
                   _FMTX_Nref 00C6                     _FMTX_Nprg 00D2                     _CWTX_Nref 00C2  
                   _CWTX_Nprg 00C8                   OUTFQ@Nprg_b 0030     __size_of_I2C_Master_Start 0007  
   __size_of_I2C_Master_Write 0008               ___lldiv@divisor 0070               ___lldiv@counter 007D  
                  ??_waitFlag 0076          ??_ReceivePacket_data 007A                       printf@c 0077  
                     printf@f 0076                    fcscheck@bt 0074                OPINIT@fmcwtxrx 0074  
                   _PORTAbits 0005                     _PORTCbits 0007                     _PORTDbits 0008  
                   _PORTEbits 0009                    getdata@buf 0026                  ??_Init_I2C_M 0024  
                ?_Init_SERIAL 0070                __end_of_RFDOUT 0E02                __end_of_OPINIT 0D21  
              __end_of_STBOUT 0977          __size_of_NM_waddress 0012                __end_of_getbit 0ACA  
              __end_of_printf 0A7E           start_initialization 07B3            __end_of_Init_I2C_M 09AB  
                    ??_RFDOUT 0020                      ??_OPINIT 0076             ??_I2C_Master_Wait 0070  
           ??_I2C_Master_Stop 0070                      ??_STBOUT 0074             __size_of_Init_MPU 001D  
           __size_of_Init_WDT 0014                     _Reset_EPS 0007             getdata@dbitstatus 0024  
                  init_fetch0 17C6                      ??_getbit 0072                   __pdataBANK1 00C2  
                 __pdataBANK2 0140                   __pdataBANK3 01C2                    RFDOUT@Nref 007B  
                    ??_printf 0073           __end_of_commandSize 0808      NM_waddress@whigh_address 0071  
                   ___latbits 0002                 __pcstackBANK0 0020                 __pcstackBANK1 00A0  
                    FMRX@Nref 005C                      FMRX@Nprg 005E                      FMTX@Nref 005C  
                    FMTX@Nprg 005E                      FMRX@fmrx 0060                      FMTX@fmtx 0060  
                    CWTX@Nref 005C                      CWTX@Nprg 005E             __size_of_fcscheck 0082  
               waitFlag@j_111 0024                 waitFlag@j_120 002E                 waitFlag@j_113 0026  
               waitFlag@j_130 0038                 waitFlag@j_122 0030                 waitFlag@j_115 0028  
               waitFlag@j_124 0032                 waitFlag@j_117 002A                 waitFlag@j_126 0034  
               waitFlag@j_119 002C                 waitFlag@j_128 0036                      CWTX@cwtx 0060  
            _I2C_Master_Start 1797                    ?_Reset_EPS 0070              _I2C_Master_Write 17A5  
     getdata@bufstore_counter 0020                      ?___awdiv 0070                      ?___lldiv 0070  
           __size_of_waitFlag 048C                     __pstrings 0800                      ?_getdata 0070  
              __size_of_H_OUT 0046                __size_of_OUTFQ 027B                __size_of_L_OUT 0046  
              __size_of_putch 0008                 H_OUT@fmcwtxrx 0072                     clear_ram0 17B5  
                    _PIE1bits 008C                    OUTFQ@i_467 0052                    OUTFQ@i_469 0058  
                   _rcv_state 006A          __size_of_Init_SERIAL 0019                      _PIR1bits 000C  
                  OUTFQ@count 0054                   _commandSize 0806                     fcscheck@i 0075  
                   main@F2010 01CC                     main@F2012 01D6                     main@F2008 01C2  
                 __stringbase 0805                     main@dData 00C1                    printf@flag 0074  
                    _Init_MPU 0880                      _Init_WDT 17D7                   ??_Reset_EPS 0070  
               fcscheck@i_142 0077   __size_of_ReceivePacket_data 0065              __size_of___awdiv 0059  
            __size_of___lldiv 005E            __end_of__stringtab 0806                    _EEPROMData 0110  
            __size_of_getdata 0061               _I2C_Master_Wait 17BD               _I2C_Master_Stop 179E  
              RFDOUT@fmcwtxrx 0079                      _efcsflag 00E3                      _fcscheck 002A  
                    __ptext10 17D7                      __ptext11 0834                      __ptext20 1797  
                    __ptext12 0880                      __ptext21 17BD                      __ptext13 0977  
                    __ptext30 17EB                      __ptext22 08C5                      __ptext14 0B80  
                    __ptext23 0D21                      __ptext15 091D                      __ptext24 00AC  
                    __ptext16 08F1                      __ptext25 0ACA                      __ptext17 0B23  
                    __ptext26 0CA4                      __ptext18 17A5                      __ptext27 0949  
                    __ptext19 179E                      __ptext28 09F1                      __ptext29 09AB  
           __CFG_BOR4V$BOR21V 0000                 ?_EEPROM_Write 0072                 __size_of_FMRX 002C  
               __size_of_FMTX 002C                 __size_of_CWTX 002C                 __size_of__NOP 0015  
               ??_NM_waddress 0073                     waitFlag@i 0020                     waitFlag@j 0022  
               __size_of_main 01FE                STBOUT@fmcwtxrx 0072                      _waitFlag 0327  
    NM_waddress@NM_wad_header 0073                 OUTFQ@fmcwtxrx 0079      __end_of_I2C_Master_Start 179E  
                   putch@byte 0070      __end_of_I2C_Master_Write 17AD                    _INTCONbits 000B  
                    init_ram0 17CA                  fcscheck@byte 0079                ??_EEPROM_Write 0075  
          waitFlag@flag_judge 003A              ___lldiv@dividend 0074                     stringcode 0800  
               main@FMRX_Nprg 00B4             main@NM_wad_header 00BE                 main@FMTX_Nprg 00A0  
         __end_of_NM_waddress 0834                      printf@ap 0075                 main@CWTX_Nprg 00AA  
     __end_of_I2C_Master_Wait 17C6       __end_of_I2C_Master_Stop 17A5              ___lldiv@quotient 0079  
           I2C_Master_Write@d 0070           EEPROM_Write@Address 0079                      stringdir 0800  
                    stringtab 0800           ReceivePacket_data@i 003F       NM_waddress@wlow_address 0072  
