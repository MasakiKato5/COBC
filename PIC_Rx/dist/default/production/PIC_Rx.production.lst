

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jun 25 02:42:23 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	dabs	1,0x7E,2
    52  0000                     
    53                           ; Version 1.45
    54                           ; Generated 16/11/2017 GMT
    55                           ; 
    56                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC16LF877A Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     	;# 
    88  0001                     	;# 
    89  0002                     	;# 
    90  0003                     	;# 
    91  0004                     	;# 
    92  0005                     	;# 
    93  0006                     	;# 
    94  0007                     	;# 
    95  0008                     	;# 
    96  0009                     	;# 
    97  000A                     	;# 
    98  000B                     	;# 
    99  000C                     	;# 
   100  000D                     	;# 
   101  000E                     	;# 
   102  000E                     	;# 
   103  000F                     	;# 
   104  0010                     	;# 
   105  0011                     	;# 
   106  0012                     	;# 
   107  0013                     	;# 
   108  0014                     	;# 
   109  0015                     	;# 
   110  0015                     	;# 
   111  0016                     	;# 
   112  0017                     	;# 
   113  0018                     	;# 
   114  0019                     	;# 
   115  001A                     	;# 
   116  001B                     	;# 
   117  001B                     	;# 
   118  001C                     	;# 
   119  001D                     	;# 
   120  001E                     	;# 
   121  001F                     	;# 
   122  0081                     	;# 
   123  0085                     	;# 
   124  0086                     	;# 
   125  0087                     	;# 
   126  0088                     	;# 
   127  0089                     	;# 
   128  008C                     	;# 
   129  008D                     	;# 
   130  008E                     	;# 
   131  0091                     	;# 
   132  0092                     	;# 
   133  0093                     	;# 
   134  0094                     	;# 
   135  0098                     	;# 
   136  0099                     	;# 
   137  009C                     	;# 
   138  009D                     	;# 
   139  009E                     	;# 
   140  009F                     	;# 
   141  010C                     	;# 
   142  010D                     	;# 
   143  010E                     	;# 
   144  010F                     	;# 
   145  018C                     	;# 
   146  018D                     	;# 
   147  0000                     	;# 
   148  0001                     	;# 
   149  0002                     	;# 
   150  0003                     	;# 
   151  0004                     	;# 
   152  0005                     	;# 
   153  0006                     	;# 
   154  0007                     	;# 
   155  0008                     	;# 
   156  0009                     	;# 
   157  000A                     	;# 
   158  000B                     	;# 
   159  000C                     	;# 
   160  000D                     	;# 
   161  000E                     	;# 
   162  000E                     	;# 
   163  000F                     	;# 
   164  0010                     	;# 
   165  0011                     	;# 
   166  0012                     	;# 
   167  0013                     	;# 
   168  0014                     	;# 
   169  0015                     	;# 
   170  0015                     	;# 
   171  0016                     	;# 
   172  0017                     	;# 
   173  0018                     	;# 
   174  0019                     	;# 
   175  001A                     	;# 
   176  001B                     	;# 
   177  001B                     	;# 
   178  001C                     	;# 
   179  001D                     	;# 
   180  001E                     	;# 
   181  001F                     	;# 
   182  0081                     	;# 
   183  0085                     	;# 
   184  0086                     	;# 
   185  0087                     	;# 
   186  0088                     	;# 
   187  0089                     	;# 
   188  008C                     	;# 
   189  008D                     	;# 
   190  008E                     	;# 
   191  0091                     	;# 
   192  0092                     	;# 
   193  0093                     	;# 
   194  0094                     	;# 
   195  0098                     	;# 
   196  0099                     	;# 
   197  009C                     	;# 
   198  009D                     	;# 
   199  009E                     	;# 
   200  009F                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  010F                     	;# 
   205  018C                     	;# 
   206  018D                     	;# 
   207  0000                     	;# 
   208  0001                     	;# 
   209  0002                     	;# 
   210  0003                     	;# 
   211  0004                     	;# 
   212  0005                     	;# 
   213  0006                     	;# 
   214  0007                     	;# 
   215  0008                     	;# 
   216  0009                     	;# 
   217  000A                     	;# 
   218  000B                     	;# 
   219  000C                     	;# 
   220  000D                     	;# 
   221  000E                     	;# 
   222  000E                     	;# 
   223  000F                     	;# 
   224  0010                     	;# 
   225  0011                     	;# 
   226  0012                     	;# 
   227  0013                     	;# 
   228  0014                     	;# 
   229  0015                     	;# 
   230  0015                     	;# 
   231  0016                     	;# 
   232  0017                     	;# 
   233  0018                     	;# 
   234  0019                     	;# 
   235  001A                     	;# 
   236  001B                     	;# 
   237  001B                     	;# 
   238  001C                     	;# 
   239  001D                     	;# 
   240  001E                     	;# 
   241  001F                     	;# 
   242  0081                     	;# 
   243  0085                     	;# 
   244  0086                     	;# 
   245  0087                     	;# 
   246  0088                     	;# 
   247  0089                     	;# 
   248  008C                     	;# 
   249  008D                     	;# 
   250  008E                     	;# 
   251  0091                     	;# 
   252  0092                     	;# 
   253  0093                     	;# 
   254  0094                     	;# 
   255  0098                     	;# 
   256  0099                     	;# 
   257  009C                     	;# 
   258  009D                     	;# 
   259  009E                     	;# 
   260  009F                     	;# 
   261  010C                     	;# 
   262  010D                     	;# 
   263  010E                     	;# 
   264  010F                     	;# 
   265  018C                     	;# 
   266  018D                     	;# 
   267  0000                     	;# 
   268  0001                     	;# 
   269  0002                     	;# 
   270  0003                     	;# 
   271  0004                     	;# 
   272  0005                     	;# 
   273  0006                     	;# 
   274  0007                     	;# 
   275  0008                     	;# 
   276  0009                     	;# 
   277  000A                     	;# 
   278  000B                     	;# 
   279  000C                     	;# 
   280  000D                     	;# 
   281  000E                     	;# 
   282  000E                     	;# 
   283  000F                     	;# 
   284  0010                     	;# 
   285  0011                     	;# 
   286  0012                     	;# 
   287  0013                     	;# 
   288  0014                     	;# 
   289  0015                     	;# 
   290  0015                     	;# 
   291  0016                     	;# 
   292  0017                     	;# 
   293  0018                     	;# 
   294  0019                     	;# 
   295  001A                     	;# 
   296  001B                     	;# 
   297  001B                     	;# 
   298  001C                     	;# 
   299  001D                     	;# 
   300  001E                     	;# 
   301  001F                     	;# 
   302  0081                     	;# 
   303  0085                     	;# 
   304  0086                     	;# 
   305  0087                     	;# 
   306  0088                     	;# 
   307  0089                     	;# 
   308  008C                     	;# 
   309  008D                     	;# 
   310  008E                     	;# 
   311  0091                     	;# 
   312  0092                     	;# 
   313  0093                     	;# 
   314  0094                     	;# 
   315  0098                     	;# 
   316  0099                     	;# 
   317  009C                     	;# 
   318  009D                     	;# 
   319  009E                     	;# 
   320  009F                     	;# 
   321  010C                     	;# 
   322  010D                     	;# 
   323  010E                     	;# 
   324  010F                     	;# 
   325  018C                     	;# 
   326  018D                     	;# 
   327  0000                     	;# 
   328  0001                     	;# 
   329  0002                     	;# 
   330  0003                     	;# 
   331  0004                     	;# 
   332  0005                     	;# 
   333  0006                     	;# 
   334  0007                     	;# 
   335  0008                     	;# 
   336  0009                     	;# 
   337  000A                     	;# 
   338  000B                     	;# 
   339  000C                     	;# 
   340  000D                     	;# 
   341  000E                     	;# 
   342  000E                     	;# 
   343  000F                     	;# 
   344  0010                     	;# 
   345  0011                     	;# 
   346  0012                     	;# 
   347  0013                     	;# 
   348  0014                     	;# 
   349  0015                     	;# 
   350  0015                     	;# 
   351  0016                     	;# 
   352  0017                     	;# 
   353  0018                     	;# 
   354  0019                     	;# 
   355  001A                     	;# 
   356  001B                     	;# 
   357  001B                     	;# 
   358  001C                     	;# 
   359  001D                     	;# 
   360  001E                     	;# 
   361  001F                     	;# 
   362  0081                     	;# 
   363  0085                     	;# 
   364  0086                     	;# 
   365  0087                     	;# 
   366  0088                     	;# 
   367  0089                     	;# 
   368  008C                     	;# 
   369  008D                     	;# 
   370  008E                     	;# 
   371  0091                     	;# 
   372  0092                     	;# 
   373  0093                     	;# 
   374  0094                     	;# 
   375  0098                     	;# 
   376  0099                     	;# 
   377  009C                     	;# 
   378  009D                     	;# 
   379  009E                     	;# 
   380  009F                     	;# 
   381  010C                     	;# 
   382  010D                     	;# 
   383  010E                     	;# 
   384  010F                     	;# 
   385  018C                     	;# 
   386  018D                     	;# 
   387  0000                     	;# 
   388  0001                     	;# 
   389  0002                     	;# 
   390  0003                     	;# 
   391  0004                     	;# 
   392  0005                     	;# 
   393  0006                     	;# 
   394  0007                     	;# 
   395  0008                     	;# 
   396  0009                     	;# 
   397  000A                     	;# 
   398  000B                     	;# 
   399  000C                     	;# 
   400  000D                     	;# 
   401  000E                     	;# 
   402  000E                     	;# 
   403  000F                     	;# 
   404  0010                     	;# 
   405  0011                     	;# 
   406  0012                     	;# 
   407  0013                     	;# 
   408  0014                     	;# 
   409  0015                     	;# 
   410  0015                     	;# 
   411  0016                     	;# 
   412  0017                     	;# 
   413  0018                     	;# 
   414  0019                     	;# 
   415  001A                     	;# 
   416  001B                     	;# 
   417  001B                     	;# 
   418  001C                     	;# 
   419  001D                     	;# 
   420  001E                     	;# 
   421  001F                     	;# 
   422  0081                     	;# 
   423  0085                     	;# 
   424  0086                     	;# 
   425  0087                     	;# 
   426  0088                     	;# 
   427  0089                     	;# 
   428  008C                     	;# 
   429  008D                     	;# 
   430  008E                     	;# 
   431  0091                     	;# 
   432  0092                     	;# 
   433  0093                     	;# 
   434  0094                     	;# 
   435  0098                     	;# 
   436  0099                     	;# 
   437  009C                     	;# 
   438  009D                     	;# 
   439  009E                     	;# 
   440  009F                     	;# 
   441  010C                     	;# 
   442  010D                     	;# 
   443  010E                     	;# 
   444  010F                     	;# 
   445  018C                     	;# 
   446  018D                     	;# 
   447  0000                     	;# 
   448  0001                     	;# 
   449  0002                     	;# 
   450  0003                     	;# 
   451  0004                     	;# 
   452  0005                     	;# 
   453  0006                     	;# 
   454  0007                     	;# 
   455  0008                     	;# 
   456  0009                     	;# 
   457  000A                     	;# 
   458  000B                     	;# 
   459  000C                     	;# 
   460  000D                     	;# 
   461  000E                     	;# 
   462  000E                     	;# 
   463  000F                     	;# 
   464  0010                     	;# 
   465  0011                     	;# 
   466  0012                     	;# 
   467  0013                     	;# 
   468  0014                     	;# 
   469  0015                     	;# 
   470  0015                     	;# 
   471  0016                     	;# 
   472  0017                     	;# 
   473  0018                     	;# 
   474  0019                     	;# 
   475  001A                     	;# 
   476  001B                     	;# 
   477  001B                     	;# 
   478  001C                     	;# 
   479  001D                     	;# 
   480  001E                     	;# 
   481  001F                     	;# 
   482  0081                     	;# 
   483  0085                     	;# 
   484  0086                     	;# 
   485  0087                     	;# 
   486  0088                     	;# 
   487  0089                     	;# 
   488  008C                     	;# 
   489  008D                     	;# 
   490  008E                     	;# 
   491  0091                     	;# 
   492  0092                     	;# 
   493  0093                     	;# 
   494  0094                     	;# 
   495  0098                     	;# 
   496  0099                     	;# 
   497  009C                     	;# 
   498  009D                     	;# 
   499  009E                     	;# 
   500  009F                     	;# 
   501  010C                     	;# 
   502  010D                     	;# 
   503  010E                     	;# 
   504  010F                     	;# 
   505  018C                     	;# 
   506  018D                     	;# 
   507  0000                     	;# 
   508  0001                     	;# 
   509  0002                     	;# 
   510  0003                     	;# 
   511  0004                     	;# 
   512  0005                     	;# 
   513  0006                     	;# 
   514  0007                     	;# 
   515  0008                     	;# 
   516  0009                     	;# 
   517  000A                     	;# 
   518  000B                     	;# 
   519  000C                     	;# 
   520  000D                     	;# 
   521  000E                     	;# 
   522  000E                     	;# 
   523  000F                     	;# 
   524  0010                     	;# 
   525  0011                     	;# 
   526  0012                     	;# 
   527  0013                     	;# 
   528  0014                     	;# 
   529  0015                     	;# 
   530  0015                     	;# 
   531  0016                     	;# 
   532  0017                     	;# 
   533  0018                     	;# 
   534  0019                     	;# 
   535  001A                     	;# 
   536  001B                     	;# 
   537  001B                     	;# 
   538  001C                     	;# 
   539  001D                     	;# 
   540  001E                     	;# 
   541  001F                     	;# 
   542  0081                     	;# 
   543  0085                     	;# 
   544  0086                     	;# 
   545  0087                     	;# 
   546  0088                     	;# 
   547  0089                     	;# 
   548  008C                     	;# 
   549  008D                     	;# 
   550  008E                     	;# 
   551  0091                     	;# 
   552  0092                     	;# 
   553  0093                     	;# 
   554  0094                     	;# 
   555  0098                     	;# 
   556  0099                     	;# 
   557  009C                     	;# 
   558  009D                     	;# 
   559  009E                     	;# 
   560  009F                     	;# 
   561  010C                     	;# 
   562  010D                     	;# 
   563  010E                     	;# 
   564  010F                     	;# 
   565  018C                     	;# 
   566  018D                     	;# 
   567  0000                     	;# 
   568  0001                     	;# 
   569  0002                     	;# 
   570  0003                     	;# 
   571  0004                     	;# 
   572  0005                     	;# 
   573  0006                     	;# 
   574  0007                     	;# 
   575  0008                     	;# 
   576  0009                     	;# 
   577  000A                     	;# 
   578  000B                     	;# 
   579  000C                     	;# 
   580  000D                     	;# 
   581  000E                     	;# 
   582  000E                     	;# 
   583  000F                     	;# 
   584  0010                     	;# 
   585  0011                     	;# 
   586  0012                     	;# 
   587  0013                     	;# 
   588  0014                     	;# 
   589  0015                     	;# 
   590  0015                     	;# 
   591  0016                     	;# 
   592  0017                     	;# 
   593  0018                     	;# 
   594  0019                     	;# 
   595  001A                     	;# 
   596  001B                     	;# 
   597  001B                     	;# 
   598  001C                     	;# 
   599  001D                     	;# 
   600  001E                     	;# 
   601  001F                     	;# 
   602  0081                     	;# 
   603  0085                     	;# 
   604  0086                     	;# 
   605  0087                     	;# 
   606  0088                     	;# 
   607  0089                     	;# 
   608  008C                     	;# 
   609  008D                     	;# 
   610  008E                     	;# 
   611  0091                     	;# 
   612  0092                     	;# 
   613  0093                     	;# 
   614  0094                     	;# 
   615  0098                     	;# 
   616  0099                     	;# 
   617  009C                     	;# 
   618  009D                     	;# 
   619  009E                     	;# 
   620  009F                     	;# 
   621  010C                     	;# 
   622  010D                     	;# 
   623  010E                     	;# 
   624  010F                     	;# 
   625  018C                     	;# 
   626  018D                     	;# 
   627  0000                     	;# 
   628  0001                     	;# 
   629  0002                     	;# 
   630  0003                     	;# 
   631  0004                     	;# 
   632  0005                     	;# 
   633  0006                     	;# 
   634  0007                     	;# 
   635  0008                     	;# 
   636  0009                     	;# 
   637  000A                     	;# 
   638  000B                     	;# 
   639  000C                     	;# 
   640  000D                     	;# 
   641  000E                     	;# 
   642  000E                     	;# 
   643  000F                     	;# 
   644  0010                     	;# 
   645  0011                     	;# 
   646  0012                     	;# 
   647  0013                     	;# 
   648  0014                     	;# 
   649  0015                     	;# 
   650  0015                     	;# 
   651  0016                     	;# 
   652  0017                     	;# 
   653  0018                     	;# 
   654  0019                     	;# 
   655  001A                     	;# 
   656  001B                     	;# 
   657  001B                     	;# 
   658  001C                     	;# 
   659  001D                     	;# 
   660  001E                     	;# 
   661  001F                     	;# 
   662  0081                     	;# 
   663  0085                     	;# 
   664  0086                     	;# 
   665  0087                     	;# 
   666  0088                     	;# 
   667  0089                     	;# 
   668  008C                     	;# 
   669  008D                     	;# 
   670  008E                     	;# 
   671  0091                     	;# 
   672  0092                     	;# 
   673  0093                     	;# 
   674  0094                     	;# 
   675  0098                     	;# 
   676  0099                     	;# 
   677  009C                     	;# 
   678  009D                     	;# 
   679  009E                     	;# 
   680  009F                     	;# 
   681  010C                     	;# 
   682  010D                     	;# 
   683  010E                     	;# 
   684  010F                     	;# 
   685  018C                     	;# 
   686  018D                     	;# 
   687                           
   688                           	psect	idataBANK1
   689  08AA                     __pidataBANK1:	
   690                           
   691                           ;initializer for _FMRX_Nref
   692  08AA  3400               	retlw	0
   693  08AB  340A               	retlw	10
   694                           
   695                           ;initializer for _CWTX_Nref
   696  08AC  34A0               	retlw	160
   697  08AD  3400               	retlw	0
   698                           
   699                           ;initializer for _FMTX_Nref
   700  08AE  3400               	retlw	0
   701  08AF  340A               	retlw	10
   702                           
   703                           ;initializer for _CWTX_Nprg
   704  08B0  3400               	retlw	0
   705  08B1  3400               	retlw	0
   706  08B2  3401               	retlw	1
   707  08B3  3400               	retlw	0
   708  08B4  3407               	retlw	7
   709  08B5  3400               	retlw	0
   710  08B6  3404               	retlw	4
   711  08B7  3400               	retlw	0
   712  08B8  3407               	retlw	7
   713  08B9  3400               	retlw	0
   714                           
   715                           ;initializer for _FMTX_Nprg
   716  08BA  3408               	retlw	8
   717  08BB  3400               	retlw	0
   718  08BC  3407               	retlw	7
   719  08BD  3400               	retlw	0
   720  08BE  3403               	retlw	3
   721  08BF  3400               	retlw	0
   722  08C0  3400               	retlw	0
   723  08C1  3400               	retlw	0
   724  08C2  3400               	retlw	0
   725  08C3  3400               	retlw	0
   726                           
   727                           	psect	idataBANK2
   728  0891                     __pidataBANK2:	
   729                           
   730                           ;initializer for _eDataField
   731  0891  3448               	retlw	72
   732  0892  3465               	retlw	101
   733  0893  346C               	retlw	108
   734  0894  346C               	retlw	108
   735  0895  346F               	retlw	111
   736  0896  3421               	retlw	33
   737  0897  3420               	retlw	32
   738  0898  3449               	retlw	73
   739  0899  3427               	retlw	39
   740  089A  346D               	retlw	109
   741  089B  3420               	retlw	32
   742  089C  344F               	retlw	79
   743  089D  3472               	retlw	114
   744  089E  3469               	retlw	105
   745  089F  3467               	retlw	103
   746  08A0  3461               	retlw	97
   747  08A1  346D               	retlw	109
   748  08A2  3469               	retlw	105
   749  08A3  3453               	retlw	83
   750  08A4  3461               	retlw	97
   751  08A5  3474               	retlw	116
   752  08A6  3431               	retlw	49
   753  08A7  3421               	retlw	33
   754  08A8  3421               	retlw	33
   755  08A9  3400               	retlw	0
   756                           
   757                           	psect	idataBANK3
   758  08C4                     __pidataBANK3:	
   759                           
   760                           ;initializer for main@F1464
   761  08C4  3402               	retlw	2
   762  08C5  3400               	retlw	0
   763  08C6  3404               	retlw	4
   764  08C7  3400               	retlw	0
   765  08C8  3408               	retlw	8
   766  08C9  3400               	retlw	0
   767  08CA  3408               	retlw	8
   768  08CB  3400               	retlw	0
   769  08CC  3407               	retlw	7
   770  08CD  3400               	retlw	0
   771                           
   772                           ;initializer for main@F1462
   773  08CE  3400               	retlw	0
   774  08CF  3400               	retlw	0
   775  08D0  3401               	retlw	1
   776  08D1  3400               	retlw	0
   777  08D2  3407               	retlw	7
   778  08D3  3400               	retlw	0
   779  08D4  3404               	retlw	4
   780  08D5  3400               	retlw	0
   781  08D6  3407               	retlw	7
   782  08D7  3400               	retlw	0
   783                           
   784                           ;initializer for main@F1460
   785  08D8  3408               	retlw	8
   786  08D9  3400               	retlw	0
   787  08DA  3407               	retlw	7
   788  08DB  3400               	retlw	0
   789  08DC  3403               	retlw	3
   790  08DD  3400               	retlw	0
   791  08DE  3400               	retlw	0
   792  08DF  3400               	retlw	0
   793  08E0  3400               	retlw	0
   794  08E1  3400               	retlw	0
   795                           
   796                           ;initializer for _FMRX_Nprg
   797  08E2  3402               	retlw	2
   798  08E3  3400               	retlw	0
   799  08E4  3404               	retlw	4
   800  08E5  3400               	retlw	0
   801  08E6  3408               	retlw	8
   802  08E7  3400               	retlw	0
   803  08E8  3408               	retlw	8
   804  08E9  3400               	retlw	0
   805  08EA  3407               	retlw	7
   806  08EB  3400               	retlw	0
   807                           
   808                           	psect	strings
   809  0800                     __pstrings:	
   810  0800                     stringtab:	
   811  0800                     __stringtab:	
   812  0800                     stringcode:	
   813                           ;	String table - string pointers are 1 byte each
   814                           
   815  0800                     stringdir:	
   816  0800  3008               	movlw	high stringdir
   817  0801  008A               	movwf	10
   818  0802  0804               	movf	4,w
   819  0803  0A84               	incf	4,f
   820  0804  0782               	addwf	2,f
   821  0805                     __stringbase:	
   822  0805  3400               	retlw	0
   823  0806                     __end_of__stringtab:	
   824  0806                     _commandSize:	
   825  0806  3420               	retlw	32
   826  0807  3400               	retlw	0
   827  0808                     __end_of_commandSize:	
   828  000E                     _TMR1	set	14
   829  0010                     _T1CONbits	set	16
   830  000C                     _PIR1bits	set	12
   831  000B                     _INTCONbits	set	11
   832  0008                     _PORTDbits	set	8
   833  0007                     _PORTCbits	set	7
   834  0009                     _PORTEbits	set	9
   835  0006                     _PORTBbits	set	6
   836  0005                     _PORTAbits	set	5
   837  0013                     _SSPBUF	set	19
   838  0014                     _SSPCON	set	20
   839  0003                     _STATUS	set	3
   840  0009                     _PORTE	set	9
   841  0008                     _PORTD	set	8
   842  0007                     _PORTC	set	7
   843  0006                     _PORTB	set	6
   844  0005                     _PORTA	set	5
   845  0019                     _TXREG	set	25
   846  001A                     _RCREG	set	26
   847  0029                     _RA1	set	41
   848  0034                     _RB4	set	52
   849  0032                     _RB2	set	50
   850  0035                     _RB5	set	53
   851  003A                     _RC2	set	58
   852  003D                     _RC5	set	61
   853  0064                     _TXIF	set	100
   854  00C1                     _OERR	set	193
   855  00C2                     _FERR	set	194
   856  00C6                     _RX9	set	198
   857  0065                     _RCIF	set	101
   858  00C5                     _SREN	set	197
   859  00C4                     _CREN	set	196
   860  00C7                     _SPEN	set	199
   861  008C                     _PIE1bits	set	140
   862  0094                     _SSPSTAT	set	148
   863  0093                     _SSPADD	set	147
   864  0091                     _SSPCON2	set	145
   865  0089                     _TRISE	set	137
   866  0088                     _TRISD	set	136
   867  0087                     _TRISC	set	135
   868  0086                     _TRISB	set	134
   869  0085                     _TRISA	set	133
   870  0099                     _SPBRG	set	153
   871  048C                     _ACKEN	set	1164
   872  048D                     _ACKDT	set	1165
   873  048B                     _RCEN	set	1163
   874  048A                     _PEN	set	1162
   875  0489                     _RSEN	set	1161
   876  0488                     _SEN	set	1160
   877  04C5                     _TXEN	set	1221
   878  04C6                     _TX9	set	1222
   879  0465                     _RCIE	set	1125
   880  0464                     _TXIE	set	1124
   881  04C4                     _SYNC	set	1220
   882  04C2                     _BRGH	set	1218
   883  0808                     STR_7:	
   884  0808  344A               	retlw	74	;'J'
   885  0809  3451               	retlw	81	;'Q'
   886  080A  3431               	retlw	49	;'1'
   887  080B  345A               	retlw	90	;'Z'
   888  080C  3448               	retlw	72	;'H'
   889  080D  3458               	retlw	88	;'X'
   890  080E  3400               	retlw	0
   891  080F                     STR_1:	
   892  080F  344A               	retlw	74	;'J'
   893  0810  3451               	retlw	81	;'Q'
   894  0811  3431               	retlw	49	;'1'
   895  0812  3459               	retlw	89	;'Y'
   896  0813  3443               	retlw	67	;'C'
   897  0814  345A               	retlw	90	;'Z'
   898  0815  3400               	retlw	0
   899  0808                     
   900                           ; #config settings
   901  0000                     
   902                           	psect	cinit
   903  07B3                     start_initialization:	
   904  07B3                     __initialization:	
   905                           
   906                           ; Initialize objects allocated to BANK3
   907  07B3  1783               	bsf	3,7	;select IRP bank2
   908  07B4  30EC               	movlw	low (__pdataBANK3+40)
   909  07B5  00FD               	movwf	btemp+-1
   910  07B6  3008               	movlw	high __pidataBANK3
   911  07B7  00FE               	movwf	btemp
   912  07B8  30C4               	movlw	low __pidataBANK3
   913  07B9  00FF               	movwf	btemp+1
   914  07BA  30C4               	movlw	low __pdataBANK3
   915  07BB  0084               	movwf	4
   916  07BC  120A  158A  202B  120A  118A  	fcall	init_ram0
   917                           
   918                           ; Initialize objects allocated to BANK2
   919  07C1  3049               	movlw	low (__pdataBANK2+25)
   920  07C2  00FD               	movwf	btemp+-1
   921  07C3  3008               	movlw	high __pidataBANK2
   922  07C4  00FE               	movwf	btemp
   923  07C5  3091               	movlw	low __pidataBANK2
   924  07C6  00FF               	movwf	btemp+1
   925  07C7  3030               	movlw	low __pdataBANK2
   926  07C8  0084               	movwf	4
   927  07C9  120A  158A  202B  120A  118A  	fcall	init_ram0
   928                           
   929                           ; Initialize objects allocated to BANK1
   930  07CE  1383               	bcf	3,7	;select IRP bank0
   931  07CF  30DB               	movlw	low (__pdataBANK1+26)
   932  07D0  00FD               	movwf	btemp+-1
   933  07D1  3008               	movlw	high __pidataBANK1
   934  07D2  00FE               	movwf	btemp
   935  07D3  30AA               	movlw	low __pidataBANK1
   936  07D4  00FF               	movwf	btemp+1
   937  07D5  30C1               	movlw	low __pdataBANK1
   938  07D6  0084               	movwf	4
   939  07D7  120A  158A  202B  120A  118A  	fcall	init_ram0
   940                           
   941                           ; Clear objects allocated to BANK3
   942  07DC  1783               	bsf	3,7	;select IRP bank2
   943  07DD  3090               	movlw	low __pbssBANK3
   944  07DE  0084               	movwf	4
   945  07DF  30C4               	movlw	low (__pbssBANK3+52)
   946  07E0  120A  158A  2016  120A  118A  	fcall	clear_ram0
   947                           
   948                           ; Clear objects allocated to BANK2
   949  07E5  3010               	movlw	low __pbssBANK2
   950  07E6  0084               	movwf	4
   951  07E7  3030               	movlw	low (__pbssBANK2+32)
   952  07E8  120A  158A  2016  120A  118A  	fcall	clear_ram0
   953                           
   954                           ; Clear objects allocated to BANK1
   955  07ED  1383               	bcf	3,7	;select IRP bank0
   956  07EE  30DB               	movlw	low __pbssBANK1
   957  07EF  0084               	movwf	4
   958  07F0  30E8               	movlw	low (__pbssBANK1+13)
   959  07F1  120A  158A  2016  120A  118A  	fcall	clear_ram0
   960                           
   961                           ; Clear objects allocated to BANK0
   962  07F6  3066               	movlw	low __pbssBANK0
   963  07F7  0084               	movwf	4
   964  07F8  3070               	movlw	low (__pbssBANK0+10)
   965  07F9  120A  158A  2016   	fcall	clear_ram0
   966  07FC                     end_of_initialization:	
   967                           ;End of C runtime variable initialization code
   968                           
   969  07FC                     __end_of__initialization:	
   970  07FC  0183               	clrf	3
   971  07FD  120A  158A  2E1C   	ljmp	_main	;jump to C main() function
   972                           
   973                           	psect	bssBANK0
   974  0066                     __pbssBANK0:	
   975  0066                     _eflag:	
   976  0066                     	ds	2
   977  0068                     _dPacketnum:	
   978  0068                     	ds	2
   979  006A                     _rcv_state:	
   980  006A                     	ds	2
   981  006C                     _efcshi:	
   982  006C                     	ds	1
   983  006D                     _efcslo:	
   984  006D                     	ds	1
   985  006E                     _dfcslo:	
   986  006E                     	ds	1
   987  006F                     _dfcshi:	
   988  006F                     	ds	1
   989                           
   990                           	psect	bssBANK1
   991  00DB                     __pbssBANK1:	
   992  00DB                     _ePacket:	
   993  00DB                     	ds	5
   994  00E0                     _ebitstatus:	
   995  00E0                     	ds	2
   996  00E2                     _estuff:	
   997  00E2                     	ds	2
   998  00E4                     _efcsflag:	
   999  00E4                     	ds	2
  1000  00E6                     getbit@oldbit:	
  1001  00E6                     	ds	2
  1002                           
  1003                           	psect	dataBANK1
  1004  00C1                     __pdataBANK1:	
  1005  00C1                     _FMRX_Nref:	
  1006  00C1                     	ds	2
  1007  00C3                     _CWTX_Nref:	
  1008  00C3                     	ds	2
  1009  00C5                     _FMTX_Nref:	
  1010  00C5                     	ds	2
  1011  00C7                     _CWTX_Nprg:	
  1012  00C7                     	ds	10
  1013  00D1                     _FMTX_Nprg:	
  1014  00D1                     	ds	10
  1015                           
  1016                           	psect	bssBANK3
  1017  0190                     __pbssBANK3:	
  1018  0190                     _dPacket:	
  1019  0190                     	ds	52
  1020                           
  1021                           	psect	dataBANK3
  1022  01C4                     __pdataBANK3:	
  1023  01C4                     main@F1464:	
  1024  01C4                     	ds	10
  1025  01CE                     main@F1462:	
  1026  01CE                     	ds	10
  1027  01D8                     main@F1460:	
  1028  01D8                     	ds	10
  1029  01E2                     _FMRX_Nprg:	
  1030  01E2                     	ds	10
  1031                           
  1032                           	psect	bssBANK2
  1033  0110                     __pbssBANK2:	
  1034  0110                     _dData:	
  1035  0110                     	ds	32
  1036                           
  1037                           	psect	dataBANK2
  1038  0130                     __pdataBANK2:	
  1039  0130                     _eDataField:	
  1040  0130                     	ds	25
  1041                           
  1042                           	psect	inittext
  1043  0827                     init_fetch0:	
  1044                           ;	Called with low address in FSR and high address in W
  1045                           
  1046  0827  087E               	movf	126,w
  1047  0828  008A               	movwf	10
  1048  0829  087F               	movf	127,w
  1049  082A  0082               	movwf	2
  1050  082B                     init_ram0:	
  1051                           ;Called with:
  1052                           ;	high address of idata address in btemp 
  1053                           ;	low address of idata address in btemp+1 
  1054                           ;	low address of data in FSR
  1055                           ;	high address + 1 of data in btemp-1
  1056                           
  1057  082B  2027  120A  158A   	fcall	init_fetch0
  1058  082E  0080               	movwf	0
  1059  082F  0A84               	incf	4,f
  1060  0830  0804               	movf	4,w
  1061  0831  067D               	xorwf	125,w
  1062  0832  1903               	btfsc	3,2
  1063  0833  3400               	retlw	0
  1064  0834  0AFF               	incf	127,f
  1065  0835  1903               	btfsc	3,2
  1066  0836  0AFE               	incf	126,f
  1067  0837  282B               	goto	init_ram0
  1068                           
  1069                           	psect	clrtext
  1070  0816                     clear_ram0:	
  1071                           ;	Called with FSR containing the base address, and
  1072                           ;	W with the last address+1
  1073                           
  1074  0816  0064               	clrwdt	;clear the watchdog before getting into this loop
  1075  0817                     clrloop0:	
  1076  0817  0180               	clrf	0	;clear RAM location pointed to by FSR
  1077  0818  0A84               	incf	4,f	;increment pointer
  1078  0819  0604               	xorwf	4,w	;XOR with final address
  1079  081A  1903               	btfsc	3,2	;have we reached the end yet?
  1080  081B  3400               	retlw	0	;all done for this memory range, return
  1081  081C  0604               	xorwf	4,w	;XOR again to restore value
  1082  081D  2817               	goto	clrloop0	;do the next byte
  1083                           
  1084                           	psect	cstackBANK1
  1085  00A0                     __pcstackBANK1:	
  1086  00A0                     main@FMTX_Nprg:	
  1087                           
  1088                           ; 10 bytes @ 0x0
  1089  00A0                     	ds	10
  1090  00AA                     main@CWTX_Nprg:	
  1091                           
  1092                           ; 10 bytes @ 0xA
  1093  00AA                     	ds	10
  1094  00B4                     main@FMRX_Nprg:	
  1095                           
  1096                           ; 10 bytes @ 0x14
  1097  00B4                     	ds	10
  1098  00BE                     main@TXOBC_wad_header:	
  1099                           
  1100                           ; 1 bytes @ 0x1E
  1101  00BE                     	ds	1
  1102  00BF                     main@NM_wad_header:	
  1103                           
  1104                           ; 1 bytes @ 0x1F
  1105  00BF                     	ds	1
  1106  00C0                     main@dData:	
  1107                           
  1108                           ; 1 bytes @ 0x20
  1109  00C0                     	ds	1
  1110                           
  1111                           	psect	cstackCOMMON
  1112  0070                     __pcstackCOMMON:	
  1113  0070                     ?_ReceivePacket_data:	
  1114  0070                     ?_Reset_EPS:	
  1115                           ; 1 bytes @ 0x0
  1116                           
  1117  0070                     ??_Reset_EPS:	
  1118                           ; 1 bytes @ 0x0
  1119                           
  1120  0070                     ?__NOP:	
  1121                           ; 1 bytes @ 0x0
  1122                           
  1123  0070                     ??__NOP:	
  1124                           ; 1 bytes @ 0x0
  1125                           
  1126  0070                     ?_Init_SERIAL:	
  1127                           ; 1 bytes @ 0x0
  1128                           
  1129  0070                     ??_Init_SERIAL:	
  1130                           ; 1 bytes @ 0x0
  1131                           
  1132  0070                     ?_putch:	
  1133                           ; 1 bytes @ 0x0
  1134                           
  1135  0070                     ??_putch:	
  1136                           ; 1 bytes @ 0x0
  1137                           
  1138  0070                     ?_Init_MPU:	
  1139                           ; 1 bytes @ 0x0
  1140                           
  1141  0070                     ??_Init_MPU:	
  1142                           ; 1 bytes @ 0x0
  1143                           
  1144  0070                     ?_waitFlag:	
  1145                           ; 1 bytes @ 0x0
  1146                           
  1147  0070                     ?_getdata:	
  1148                           ; 1 bytes @ 0x0
  1149                           
  1150  0070                     ?_main:	
  1151                           ; 1 bytes @ 0x0
  1152                           
  1153  0070                     ?_I2C_Master_Wait:	
  1154                           ; 1 bytes @ 0x0
  1155                           
  1156  0070                     ??_I2C_Master_Wait:	
  1157                           ; 1 bytes @ 0x0
  1158                           
  1159  0070                     ?_I2C_Master_Start:	
  1160                           ; 1 bytes @ 0x0
  1161                           
  1162  0070                     ??_I2C_Master_Start:	
  1163                           ; 1 bytes @ 0x0
  1164                           
  1165  0070                     ?_I2C_Master_Stop:	
  1166                           ; 1 bytes @ 0x0
  1167                           
  1168  0070                     ??_I2C_Master_Stop:	
  1169                           ; 1 bytes @ 0x0
  1170                           
  1171  0070                     ?_I2C_Master_Write:	
  1172                           ; 1 bytes @ 0x0
  1173                           
  1174  0070                     ?_getbit:	
  1175                           ; 1 bytes @ 0x0
  1176                           
  1177  0070                     ?_fcscheck:	
  1178                           ; 2 bytes @ 0x0
  1179                           
  1180  0070                     ?___awdiv:	
  1181                           ; 2 bytes @ 0x0
  1182                           
  1183  0070                     ?___lldiv:	
  1184                           ; 2 bytes @ 0x0
  1185                           
  1186  0070                     putch@byte:	
  1187                           ; 4 bytes @ 0x0
  1188                           
  1189  0070                     I2C_Master_Write@d:	
  1190                           ; 1 bytes @ 0x0
  1191                           
  1192  0070                     __NOP@i:	
  1193                           ; 2 bytes @ 0x0
  1194                           
  1195  0070                     ___awdiv@divisor:	
  1196                           ; 2 bytes @ 0x0
  1197                           
  1198  0070                     ___lldiv@divisor:	
  1199                           ; 2 bytes @ 0x0
  1200                           
  1201                           
  1202                           ; 4 bytes @ 0x0
  1203  0070                     	ds	1
  1204  0071                     ?_NM_waddress:	
  1205  0071                     ?_TXOBC_waddress:	
  1206                           ; 1 bytes @ 0x1
  1207                           
  1208  0071                     NM_waddress@whigh_address:	
  1209                           ; 1 bytes @ 0x1
  1210                           
  1211  0071                     TXOBC_waddress@whigh_address:	
  1212                           ; 1 bytes @ 0x1
  1213                           
  1214                           
  1215                           ; 1 bytes @ 0x1
  1216  0071                     	ds	1
  1217  0072                     ?_EEPROM_Write:	
  1218  0072                     ??_getbit:	
  1219                           ; 1 bytes @ 0x2
  1220                           
  1221  0072                     ??_fcscheck:	
  1222                           ; 1 bytes @ 0x2
  1223                           
  1224  0072                     ??_I2C_Master_Write:	
  1225                           ; 1 bytes @ 0x2
  1226                           
  1227  0072                     ?_L_OUT:	
  1228                           ; 1 bytes @ 0x2
  1229                           
  1230  0072                     ?_H_OUT:	
  1231                           ; 1 bytes @ 0x2
  1232                           
  1233  0072                     ?_STBOUT:	
  1234                           ; 1 bytes @ 0x2
  1235                           
  1236  0072                     NM_waddress@wlow_address:	
  1237                           ; 1 bytes @ 0x2
  1238                           
  1239  0072                     TXOBC_waddress@wlow_address:	
  1240                           ; 1 bytes @ 0x2
  1241                           
  1242  0072                     EEPROM_Write@high_address:	
  1243                           ; 1 bytes @ 0x2
  1244                           
  1245  0072                     L_OUT@fmcwtxrx:	
  1246                           ; 1 bytes @ 0x2
  1247                           
  1248  0072                     H_OUT@fmcwtxrx:	
  1249                           ; 2 bytes @ 0x2
  1250                           
  1251  0072                     STBOUT@fmcwtxrx:	
  1252                           ; 2 bytes @ 0x2
  1253                           
  1254  0072                     ___awdiv@dividend:	
  1255                           ; 2 bytes @ 0x2
  1256                           
  1257                           
  1258                           ; 2 bytes @ 0x2
  1259  0072                     	ds	1
  1260  0073                     ??_NM_waddress:	
  1261  0073                     ??_TXOBC_waddress:	
  1262                           ; 1 bytes @ 0x3
  1263                           
  1264  0073                     NM_waddress@NM_wad_header:	
  1265                           ; 1 bytes @ 0x3
  1266                           
  1267  0073                     EEPROM_Write@low_address:	
  1268                           ; 1 bytes @ 0x3
  1269                           
  1270                           
  1271                           ; 1 bytes @ 0x3
  1272  0073                     	ds	1
  1273  0074                     ??_L_OUT:	
  1274  0074                     ??_H_OUT:	
  1275                           ; 1 bytes @ 0x4
  1276                           
  1277  0074                     ??_STBOUT:	
  1278                           ; 1 bytes @ 0x4
  1279                           
  1280  0074                     ?_OPINIT:	
  1281                           ; 1 bytes @ 0x4
  1282                           
  1283  0074                     ??___awdiv:	
  1284                           ; 1 bytes @ 0x4
  1285                           
  1286  0074                     fcscheck@bt:	
  1287                           ; 1 bytes @ 0x4
  1288                           
  1289  0074                     EEPROM_Write@data:	
  1290                           ; 1 bytes @ 0x4
  1291                           
  1292  0074                     getbit@i:	
  1293                           ; 1 bytes @ 0x4
  1294                           
  1295  0074                     OPINIT@fmcwtxrx:	
  1296                           ; 2 bytes @ 0x4
  1297                           
  1298  0074                     ___lldiv@dividend:	
  1299                           ; 2 bytes @ 0x4
  1300                           
  1301                           
  1302                           ; 4 bytes @ 0x4
  1303  0074                     	ds	1
  1304  0075                     ??_EEPROM_Write:	
  1305  0075                     TXOBC_waddress@TXOBC_wad_header:	
  1306                           ; 1 bytes @ 0x5
  1307                           
  1308  0075                     ___awdiv@counter:	
  1309                           ; 1 bytes @ 0x5
  1310                           
  1311  0075                     fcscheck@i:	
  1312                           ; 1 bytes @ 0x5
  1313                           
  1314                           
  1315                           ; 2 bytes @ 0x5
  1316  0075                     	ds	1
  1317  0076                     ??_waitFlag:	
  1318  0076                     ??_getdata:	
  1319                           ; 1 bytes @ 0x6
  1320                           
  1321  0076                     ??_OPINIT:	
  1322                           ; 1 bytes @ 0x6
  1323                           
  1324  0076                     ___awdiv@sign:	
  1325                           ; 1 bytes @ 0x6
  1326                           
  1327                           
  1328                           ; 1 bytes @ 0x6
  1329  0076                     	ds	1
  1330  0077                     fcscheck@i_147:	
  1331  0077                     ___awdiv@quotient:	
  1332                           ; 2 bytes @ 0x7
  1333                           
  1334                           
  1335                           ; 2 bytes @ 0x7
  1336  0077                     	ds	1
  1337  0078                     ??___lldiv:	
  1338  0078                     EEPROM_Write@EEPROM_address:	
  1339                           ; 1 bytes @ 0x8
  1340                           
  1341                           
  1342                           ; 1 bytes @ 0x8
  1343  0078                     	ds	1
  1344  0079                     ?_OUTFQ:	
  1345  0079                     ?_RFDOUT:	
  1346                           ; 1 bytes @ 0x9
  1347                           
  1348  0079                     fcscheck@byte:	
  1349                           ; 1 bytes @ 0x9
  1350                           
  1351  0079                     EEPROM_Write@Address:	
  1352                           ; 1 bytes @ 0x9
  1353                           
  1354  0079                     OUTFQ@fmcwtxrx:	
  1355                           ; 1 bytes @ 0x9
  1356                           
  1357  0079                     RFDOUT@fmcwtxrx:	
  1358                           ; 2 bytes @ 0x9
  1359                           
  1360  0079                     ___lldiv@quotient:	
  1361                           ; 2 bytes @ 0x9
  1362                           
  1363                           
  1364                           ; 4 bytes @ 0x9
  1365  0079                     	ds	1
  1366  007A                     ??_ReceivePacket_data:	
  1367                           
  1368                           ; 1 bytes @ 0xA
  1369  007A                     	ds	1
  1370  007B                     OUTFQ@Nprg:	
  1371  007B                     RFDOUT@Nref:	
  1372                           ; 2 bytes @ 0xB
  1373                           
  1374                           
  1375                           ; 2 bytes @ 0xB
  1376  007B                     	ds	2
  1377  007D                     ??_FMTX:	
  1378  007D                     ??_CWTX:	
  1379                           ; 1 bytes @ 0xD
  1380                           
  1381  007D                     ??_FMRX:	
  1382                           ; 1 bytes @ 0xD
  1383                           
  1384  007D                     ___lldiv@counter:	
  1385                           ; 1 bytes @ 0xD
  1386                           
  1387                           
  1388                           ; 1 bytes @ 0xD
  1389  007D                     	ds	1
  1390                           
  1391                           	psect	cstackBANK0
  1392  0020                     __pcstackBANK0:	
  1393  0020                     ?_Init_I2C_M:	
  1394  0020                     ??_OUTFQ:	
  1395                           ; 1 bytes @ 0x0
  1396                           
  1397  0020                     ??_RFDOUT:	
  1398                           ; 1 bytes @ 0x0
  1399                           
  1400  0020                     waitFlag@i:	
  1401                           ; 1 bytes @ 0x0
  1402                           
  1403  0020                     getdata@bufstore_counter:	
  1404                           ; 2 bytes @ 0x0
  1405                           
  1406  0020                     Init_I2C_M@c:	
  1407                           ; 2 bytes @ 0x0
  1408                           
  1409                           
  1410                           ; 4 bytes @ 0x0
  1411  0020                     	ds	2
  1412  0022                     waitFlag@j:	
  1413  0022                     getdata@dstuff:	
  1414                           ; 2 bytes @ 0x2
  1415                           
  1416                           
  1417                           ; 2 bytes @ 0x2
  1418  0022                     	ds	1
  1419  0023                     RFDOUT@Nref_b:	
  1420                           
  1421                           ; 24 bytes @ 0x3
  1422  0023                     	ds	1
  1423  0024                     ??_Init_I2C_M:	
  1424  0024                     waitFlag@j_116:	
  1425                           ; 1 bytes @ 0x4
  1426                           
  1427  0024                     getdata@dbitstatus:	
  1428                           ; 2 bytes @ 0x4
  1429                           
  1430                           
  1431                           ; 2 bytes @ 0x4
  1432  0024                     	ds	2
  1433  0026                     getdata@buf:	
  1434  0026                     waitFlag@j_118:	
  1435                           ; 1 bytes @ 0x6
  1436                           
  1437                           
  1438                           ; 2 bytes @ 0x6
  1439  0026                     	ds	2
  1440  0028                     waitFlag@j_120:	
  1441                           
  1442                           ; 2 bytes @ 0x8
  1443  0028                     	ds	2
  1444  002A                     waitFlag@j_122:	
  1445                           
  1446                           ; 2 bytes @ 0xA
  1447  002A                     	ds	2
  1448  002C                     waitFlag@j_124:	
  1449                           
  1450                           ; 2 bytes @ 0xC
  1451  002C                     	ds	2
  1452  002E                     waitFlag@j_125:	
  1453                           
  1454                           ; 2 bytes @ 0xE
  1455  002E                     	ds	2
  1456  0030                     waitFlag@j_127:	
  1457  0030                     OUTFQ@Nprg_b:	
  1458                           ; 2 bytes @ 0x10
  1459                           
  1460                           
  1461                           ; 34 bytes @ 0x10
  1462  0030                     	ds	2
  1463  0032                     waitFlag@j_129:	
  1464                           
  1465                           ; 2 bytes @ 0x12
  1466  0032                     	ds	2
  1467  0034                     waitFlag@j_131:	
  1468                           
  1469                           ; 2 bytes @ 0x14
  1470  0034                     	ds	2
  1471  0036                     waitFlag@j_133:	
  1472                           
  1473                           ; 2 bytes @ 0x16
  1474  0036                     	ds	2
  1475  0038                     waitFlag@j_135:	
  1476                           
  1477                           ; 2 bytes @ 0x18
  1478  0038                     	ds	2
  1479  003A                     waitFlag@flag_judge:	
  1480                           
  1481                           ; 2 bytes @ 0x1A
  1482  003A                     	ds	1
  1483  003B                     RFDOUT@i_485:	
  1484                           
  1485                           ; 2 bytes @ 0x1B
  1486  003B                     	ds	1
  1487  003C                     waitFlag@buf:	
  1488                           
  1489                           ; 1 bytes @ 0x1C
  1490  003C                     	ds	1
  1491  003D                     ReceivePacket_data@fcschecker:	
  1492  003D                     RFDOUT@i:	
  1493                           ; 2 bytes @ 0x1D
  1494                           
  1495                           
  1496                           ; 2 bytes @ 0x1D
  1497  003D                     	ds	2
  1498  003F                     ReceivePacket_data@i:	
  1499  003F                     RFDOUT@i_486:	
  1500                           ; 2 bytes @ 0x1F
  1501                           
  1502                           
  1503                           ; 2 bytes @ 0x1F
  1504  003F                     	ds	19
  1505  0052                     OUTFQ@i_474:	
  1506                           
  1507                           ; 2 bytes @ 0x32
  1508  0052                     	ds	2
  1509  0054                     OUTFQ@count:	
  1510                           
  1511                           ; 2 bytes @ 0x34
  1512  0054                     	ds	2
  1513  0056                     OUTFQ@i:	
  1514                           
  1515                           ; 2 bytes @ 0x36
  1516  0056                     	ds	2
  1517  0058                     OUTFQ@i_476:	
  1518                           
  1519                           ; 2 bytes @ 0x38
  1520  0058                     	ds	2
  1521  005A                     OUTFQ@j:	
  1522                           
  1523                           ; 2 bytes @ 0x3A
  1524  005A                     	ds	2
  1525  005C                     ?_FMTX:	
  1526  005C                     ?_CWTX:	
  1527                           ; 1 bytes @ 0x3C
  1528                           
  1529  005C                     ?_FMRX:	
  1530                           ; 1 bytes @ 0x3C
  1531                           
  1532  005C                     FMTX@Nref:	
  1533                           ; 1 bytes @ 0x3C
  1534                           
  1535  005C                     CWTX@Nref:	
  1536                           ; 2 bytes @ 0x3C
  1537                           
  1538  005C                     FMRX@Nref:	
  1539                           ; 2 bytes @ 0x3C
  1540                           
  1541                           
  1542                           ; 2 bytes @ 0x3C
  1543  005C                     	ds	2
  1544  005E                     FMTX@Nprg:	
  1545  005E                     CWTX@Nprg:	
  1546                           ; 2 bytes @ 0x3E
  1547                           
  1548  005E                     FMRX@Nprg:	
  1549                           ; 2 bytes @ 0x3E
  1550                           
  1551                           
  1552                           ; 2 bytes @ 0x3E
  1553  005E                     	ds	2
  1554  0060                     FMTX@fmtx:	
  1555  0060                     CWTX@cwtx:	
  1556                           ; 2 bytes @ 0x40
  1557                           
  1558  0060                     FMRX@fmrx:	
  1559                           ; 2 bytes @ 0x40
  1560                           
  1561                           
  1562                           ; 2 bytes @ 0x40
  1563  0060                     	ds	2
  1564  0062                     ??_main:	
  1565                           
  1566                           ; 1 bytes @ 0x42
  1567  0062                     	ds	4
  1568                           
  1569                           	psect	maintext
  1570  0E1C                     __pmaintext:	
  1571 ;;
  1572 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1573 ;;
  1574 ;; *************** function _main *****************
  1575 ;; Defined at:
  1576 ;;		line 53 in file "main.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;		None
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;  FMRX_Nprg      10   20[BANK1 ] int [5]
  1581 ;;  CWTX_Nprg      10   10[BANK1 ] int [5]
  1582 ;;  FMTX_Nprg      10    0[BANK1 ] int [5]
  1583 ;;  NM_wad_heade    1   31[BANK1 ] unsigned char 
  1584 ;;  dData           1   32[BANK1 ] PTR unsigned char 
  1585 ;;		 -> NULL(0), dData(32), 
  1586 ;;  TXOBC_wad_he    1   30[BANK1 ] unsigned char 
  1587 ;; Return value:  Size  Location     Type
  1588 ;;                  1    wreg      void 
  1589 ;; Registers used:
  1590 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1591 ;; Tracked objects:
  1592 ;;		On entry : B00/0
  1593 ;;		On exit  : 0/0
  1594 ;;		Unchanged: 0/0
  1595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1596 ;;      Params:         0       0       0       0       0
  1597 ;;      Locals:         0       0      33       0       0
  1598 ;;      Temps:          0       4       0       0       0
  1599 ;;      Totals:         0       4      33       0       0
  1600 ;;Total ram usage:       37 bytes
  1601 ;; Hardware stack levels required when called:    4
  1602 ;; This function calls:
  1603 ;;		_CWTX
  1604 ;;		_EEPROM_Write
  1605 ;;		_FMRX
  1606 ;;		_FMTX
  1607 ;;		_Init_I2C_M
  1608 ;;		_Init_MPU
  1609 ;;		_Init_SERIAL
  1610 ;;		_NM_waddress
  1611 ;;		_ReceivePacket_data
  1612 ;;		_Reset_EPS
  1613 ;;		_TXOBC_waddress
  1614 ;; This function is called by:
  1615 ;;		Startup code after reset
  1616 ;; This function uses a non-reentrant model
  1617 ;;
  1618                           
  1619                           
  1620                           ;psect for function _main
  1621  0E1C                     _main:	
  1622                           
  1623                           ;main.c: 58: _delay((unsigned long)((200)*(10000000/4000.0)));
  1624                           
  1625                           ;incstack = 0
  1626                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1627  0E1C  3003               	movlw	3
  1628  0E1D  1283               	bcf	3,5	;RP0=0, select bank0
  1629  0E1E  1303               	bcf	3,6	;RP1=0, select bank0
  1630  0E1F  00E4               	movwf	??_main+2
  1631  0E20  308A               	movlw	138
  1632  0E21  00E3               	movwf	??_main+1
  1633  0E22  3055               	movlw	85
  1634  0E23  00E2               	movwf	??_main
  1635  0E24                     u3507:	
  1636  0E24  0BE2               	decfsz	??_main,f
  1637  0E25  2E24               	goto	u3507
  1638  0E26  0BE3               	decfsz	??_main+1,f
  1639  0E27  2E24               	goto	u3507
  1640  0E28  0BE4               	decfsz	??_main+2,f
  1641  0E29  2E24               	goto	u3507
  1642                           
  1643                           ;main.c: 60: Init_SERIAL();
  1644  0E2A  120A  158A  2078  120A  158A  	fcall	_Init_SERIAL
  1645                           
  1646                           ;main.c: 61: Init_MPU();
  1647  0E2F  120A  158A  205F  120A  158A  	fcall	_Init_MPU
  1648                           
  1649                           ;main.c: 62: Init_I2C_M(400000);
  1650  0E34  3000               	movlw	0
  1651  0E35  1283               	bcf	3,5	;RP0=0, select bank0
  1652  0E36  1303               	bcf	3,6	;RP1=0, select bank0
  1653  0E37  00A3               	movwf	Init_I2C_M@c+3
  1654  0E38  3006               	movlw	6
  1655  0E39  00A2               	movwf	Init_I2C_M@c+2
  1656  0E3A  301A               	movlw	26
  1657  0E3B  00A1               	movwf	Init_I2C_M@c+1
  1658  0E3C  3080               	movlw	128
  1659  0E3D  00A0               	movwf	Init_I2C_M@c
  1660  0E3E  120A  158A  219E  120A  158A  	fcall	_Init_I2C_M
  1661                           
  1662                           ;main.c: 69: RB2 = 1;
  1663  0E43  1283               	bcf	3,5	;RP0=0, select bank0
  1664  0E44  1303               	bcf	3,6	;RP1=0, select bank0
  1665  0E45  1506               	bsf	6,2	;volatile
  1666                           
  1667                           ;main.c: 70: _delay((unsigned long)((1000)*(10000000/4000.0)));
  1668  0E46  300D               	movlw	13
  1669  0E47  1283               	bcf	3,5	;RP0=0, select bank0
  1670  0E48  1303               	bcf	3,6	;RP1=0, select bank0
  1671  0E49  00E4               	movwf	??_main+2
  1672  0E4A  30AF               	movlw	175
  1673  0E4B  00E3               	movwf	??_main+1
  1674  0E4C  30B5               	movlw	181
  1675  0E4D  00E2               	movwf	??_main
  1676  0E4E                     u3517:	
  1677  0E4E  0BE2               	decfsz	??_main,f
  1678  0E4F  2E4E               	goto	u3517
  1679  0E50  0BE3               	decfsz	??_main+1,f
  1680  0E51  2E4E               	goto	u3517
  1681  0E52  0BE4               	decfsz	??_main+2,f
  1682  0E53  2E4E               	goto	u3517
  1683  0E54  2E55               	nop2
  1684                           
  1685                           ;main.c: 72: FMTX(FMTX_Nref, FMTX_Nprg);
  1686  0E55  1683               	bsf	3,5	;RP0=1, select bank1
  1687  0E56  1303               	bcf	3,6	;RP1=0, select bank1
  1688  0E57  0846               	movf	(_FMTX_Nref+1)^(0+128),w
  1689  0E58  1283               	bcf	3,5	;RP0=0, select bank0
  1690  0E59  1303               	bcf	3,6	;RP1=0, select bank0
  1691  0E5A  00DD               	movwf	FMTX@Nref+1
  1692  0E5B  1683               	bsf	3,5	;RP0=1, select bank1
  1693  0E5C  1303               	bcf	3,6	;RP1=0, select bank1
  1694  0E5D  0845               	movf	_FMTX_Nref^(0+128),w
  1695  0E5E  1283               	bcf	3,5	;RP0=0, select bank0
  1696  0E5F  1303               	bcf	3,6	;RP1=0, select bank0
  1697  0E60  00DC               	movwf	FMTX@Nref
  1698  0E61  30D1               	movlw	(low (_FMTX_Nprg| 0))& (0+255)
  1699  0E62  00DE               	movwf	FMTX@Nprg
  1700  0E63  3000               	movlw	0
  1701  0E64  00DF               	movwf	FMTX@Nprg+1
  1702  0E65  120A  158A  2144  120A  158A  	fcall	_FMTX
  1703                           
  1704                           ;main.c: 73: CWTX(CWTX_Nref, CWTX_Nprg);
  1705  0E6A  1683               	bsf	3,5	;RP0=1, select bank1
  1706  0E6B  1303               	bcf	3,6	;RP1=0, select bank1
  1707  0E6C  0844               	movf	(_CWTX_Nref+1)^(0+128),w
  1708  0E6D  1283               	bcf	3,5	;RP0=0, select bank0
  1709  0E6E  1303               	bcf	3,6	;RP1=0, select bank0
  1710  0E6F  00DD               	movwf	CWTX@Nref+1
  1711  0E70  1683               	bsf	3,5	;RP0=1, select bank1
  1712  0E71  1303               	bcf	3,6	;RP1=0, select bank1
  1713  0E72  0843               	movf	_CWTX_Nref^(0+128),w
  1714  0E73  1283               	bcf	3,5	;RP0=0, select bank0
  1715  0E74  1303               	bcf	3,6	;RP1=0, select bank0
  1716  0E75  00DC               	movwf	CWTX@Nref
  1717  0E76  30C7               	movlw	(low (_CWTX_Nprg| 0))& (0+255)
  1718  0E77  00DE               	movwf	CWTX@Nprg
  1719  0E78  3000               	movlw	0
  1720  0E79  00DF               	movwf	CWTX@Nprg+1
  1721  0E7A  120A  158A  20EC  120A  158A  	fcall	_CWTX
  1722                           
  1723                           ;main.c: 74: FMRX(FMRX_Nref, FMRX_Nprg);
  1724  0E7F  1683               	bsf	3,5	;RP0=1, select bank1
  1725  0E80  1303               	bcf	3,6	;RP1=0, select bank1
  1726  0E81  0842               	movf	(_FMRX_Nref+1)^(0+128),w
  1727  0E82  1283               	bcf	3,5	;RP0=0, select bank0
  1728  0E83  1303               	bcf	3,6	;RP1=0, select bank0
  1729  0E84  00DD               	movwf	FMRX@Nref+1
  1730  0E85  1683               	bsf	3,5	;RP0=1, select bank1
  1731  0E86  1303               	bcf	3,6	;RP1=0, select bank1
  1732  0E87  0841               	movf	_FMRX_Nref^(0+128),w
  1733  0E88  1283               	bcf	3,5	;RP0=0, select bank0
  1734  0E89  1303               	bcf	3,6	;RP1=0, select bank0
  1735  0E8A  00DC               	movwf	FMRX@Nref
  1736  0E8B  30E2               	movlw	(low (_FMRX_Nprg| (0+256)))& (0+255)
  1737  0E8C  00DE               	movwf	FMRX@Nprg
  1738  0E8D  3001               	movlw	1
  1739  0E8E  00DF               	movwf	FMRX@Nprg+1
  1740  0E8F  120A  158A  2118  120A  158A  	fcall	_FMRX
  1741                           
  1742                           ;main.c: 75: RB2 = 0;
  1743  0E94  1283               	bcf	3,5	;RP0=0, select bank0
  1744  0E95  1303               	bcf	3,6	;RP1=0, select bank0
  1745  0E96  1106               	bcf	6,2	;volatile
  1746  0E97                     l3691:	
  1747                           ;main.c: 78: while(1){
  1748                           
  1749                           
  1750                           ;main.c: 93: UBYTE *dData;
  1751                           ;main.c: 94: dData = ReceivePacket_data();
  1752  0E97  120A  158A  2459  120A  158A  	fcall	_ReceivePacket_data
  1753  0E9C  1283               	bcf	3,5	;RP0=0, select bank0
  1754  0E9D  1303               	bcf	3,6	;RP1=0, select bank0
  1755  0E9E  00E2               	movwf	??_main
  1756  0E9F  0862               	movf	??_main,w
  1757  0EA0  1683               	bsf	3,5	;RP0=1, select bank1
  1758  0EA1  1303               	bcf	3,6	;RP1=0, select bank1
  1759  0EA2  00C0               	movwf	main@dData^(0+128)
  1760                           
  1761                           ;main.c: 95: RB2 = 1;
  1762  0EA3  1283               	bcf	3,5	;RP0=0, select bank0
  1763  0EA4  1303               	bcf	3,6	;RP1=0, select bank0
  1764  0EA5  1506               	bsf	6,2	;volatile
  1765                           
  1766                           ;main.c: 96: _delay((unsigned long)((500)*(10000000/4000.0)));
  1767  0EA6  3007               	movlw	7
  1768  0EA7  1283               	bcf	3,5	;RP0=0, select bank0
  1769  0EA8  1303               	bcf	3,6	;RP1=0, select bank0
  1770  0EA9  00E4               	movwf	??_main+2
  1771  0EAA  3058               	movlw	88
  1772  0EAB  00E3               	movwf	??_main+1
  1773  0EAC  3059               	movlw	89
  1774  0EAD  00E2               	movwf	??_main
  1775  0EAE                     u3527:	
  1776  0EAE  0BE2               	decfsz	??_main,f
  1777  0EAF  2EAE               	goto	u3527
  1778  0EB0  0BE3               	decfsz	??_main+1,f
  1779  0EB1  2EAE               	goto	u3527
  1780  0EB2  0BE4               	decfsz	??_main+2,f
  1781  0EB3  2EAE               	goto	u3527
  1782                           
  1783                           ;main.c: 97: RB2 = 0;
  1784  0EB4  1283               	bcf	3,5	;RP0=0, select bank0
  1785  0EB5  1303               	bcf	3,6	;RP1=0, select bank0
  1786  0EB6  1106               	bcf	6,2	;volatile
  1787                           
  1788                           ;main.c: 99: EEPROM_Write(0x50,0x00,0x00,dData);
  1789  0EB7  01F2               	clrf	EEPROM_Write@high_address
  1790  0EB8  01F3               	clrf	EEPROM_Write@low_address
  1791  0EB9  1683               	bsf	3,5	;RP0=1, select bank1
  1792  0EBA  1303               	bcf	3,6	;RP1=0, select bank1
  1793  0EBB  0840               	movf	main@dData^(0+128),w
  1794  0EBC  1283               	bcf	3,5	;RP0=0, select bank0
  1795  0EBD  1303               	bcf	3,6	;RP1=0, select bank0
  1796  0EBE  00E2               	movwf	??_main
  1797  0EBF  0862               	movf	??_main,w
  1798  0EC0  00F4               	movwf	EEPROM_Write@data
  1799  0EC1  3050               	movlw	80
  1800  0EC2  120A  158A  233D  120A  158A  	fcall	_EEPROM_Write
  1801                           
  1802                           ;main.c: 100: _delay((unsigned long)((100)*(10000000/4000.0)));
  1803  0EC7  3002               	movlw	2
  1804  0EC8  1283               	bcf	3,5	;RP0=0, select bank0
  1805  0EC9  1303               	bcf	3,6	;RP1=0, select bank0
  1806  0ECA  00E4               	movwf	??_main+2
  1807  0ECB  3045               	movlw	69
  1808  0ECC  00E3               	movwf	??_main+1
  1809  0ECD  30A9               	movlw	169
  1810  0ECE  00E2               	movwf	??_main
  1811  0ECF                     u3537:	
  1812  0ECF  0BE2               	decfsz	??_main,f
  1813  0ED0  2ECF               	goto	u3537
  1814  0ED1  0BE3               	decfsz	??_main+1,f
  1815  0ED2  2ECF               	goto	u3537
  1816  0ED3  0BE4               	decfsz	??_main+2,f
  1817  0ED4  2ECF               	goto	u3537
  1818                           
  1819                           ;main.c: 104: UBYTE TXOBC_wad_header = 0x74;
  1820  0ED5  3074               	movlw	116
  1821  0ED6  1283               	bcf	3,5	;RP0=0, select bank0
  1822  0ED7  1303               	bcf	3,6	;RP1=0, select bank0
  1823  0ED8  00E2               	movwf	??_main
  1824  0ED9  0862               	movf	??_main,w
  1825  0EDA  1683               	bsf	3,5	;RP0=1, select bank1
  1826  0EDB  1303               	bcf	3,6	;RP1=0, select bank1
  1827  0EDC  00BE               	movwf	main@TXOBC_wad_header^(0+128)
  1828                           
  1829                           ;main.c: 105: TXOBC_waddress(TXOBC_wad_header, 0x00, 0x00);
  1830  0EDD  01F1               	clrf	TXOBC_waddress@whigh_address
  1831  0EDE  01F2               	clrf	TXOBC_waddress@wlow_address
  1832  0EDF  083E               	movf	main@TXOBC_wad_header^(0+128),w
  1833  0EE0  120A  158A  21D2  120A  158A  	fcall	_TXOBC_waddress
  1834                           
  1835                           ;main.c: 113: _delay((unsigned long)((7000)*(10000000/4000.0)));
  1836  0EE5  3059               	movlw	89
  1837  0EE6  1283               	bcf	3,5	;RP0=0, select bank0
  1838  0EE7  1303               	bcf	3,6	;RP1=0, select bank0
  1839  0EE8  00E4               	movwf	??_main+2
  1840  0EE9  30C8               	movlw	200
  1841  0EEA  00E3               	movwf	??_main+1
  1842  0EEB  3007               	movlw	7
  1843  0EEC  00E2               	movwf	??_main
  1844  0EED                     u3547:	
  1845  0EED  0BE2               	decfsz	??_main,f
  1846  0EEE  2EED               	goto	u3547
  1847  0EEF  0BE3               	decfsz	??_main+1,f
  1848  0EF0  2EED               	goto	u3547
  1849  0EF1  0BE4               	decfsz	??_main+2,f
  1850  0EF2  2EED               	goto	u3547
  1851  0EF3  2EF4               	nop2
  1852                           
  1853                           ;main.c: 118: if(dData[0]=='n'){
  1854  0EF4  1683               	bsf	3,5	;RP0=1, select bank1
  1855  0EF5  1303               	bcf	3,6	;RP1=0, select bank1
  1856  0EF6  0840               	movf	main@dData^(0+128),w
  1857  0EF7  0084               	movwf	4
  1858  0EF8  306E               	movlw	110
  1859  0EF9  1783               	bsf	3,7	;select IRP bank2
  1860  0EFA  0600               	xorwf	0,w
  1861  0EFB  1D03               	btfss	3,2
  1862  0EFC  2F0E               	goto	l3715
  1863                           
  1864                           ;main.c: 120: UBYTE NM_wad_header = 0x72;
  1865  0EFD  3072               	movlw	114
  1866  0EFE  1283               	bcf	3,5	;RP0=0, select bank0
  1867  0EFF  1303               	bcf	3,6	;RP1=0, select bank0
  1868  0F00  00E2               	movwf	??_main
  1869  0F01  0862               	movf	??_main,w
  1870  0F02  1683               	bsf	3,5	;RP0=1, select bank1
  1871  0F03  1303               	bcf	3,6	;RP1=0, select bank1
  1872  0F04  00BF               	movwf	main@NM_wad_header^(0+128)
  1873                           
  1874                           ;main.c: 121: NM_waddress(NM_wad_header, 0x00, 0x00);
  1875  0F05  01F1               	clrf	NM_waddress@whigh_address
  1876  0F06  01F2               	clrf	NM_waddress@wlow_address
  1877  0F07  083F               	movf	main@NM_wad_header^(0+128),w
  1878  0F08  120A  158A  2038  120A  158A  	fcall	_NM_waddress
  1879                           
  1880                           ;main.c: 123: }else if(dData[0]=='p'){
  1881  0F0D  2FF1               	goto	l438
  1882  0F0E                     l3715:	
  1883  0F0E  1683               	bsf	3,5	;RP0=1, select bank1
  1884  0F0F  1303               	bcf	3,6	;RP1=0, select bank1
  1885  0F10  0840               	movf	main@dData^(0+128),w
  1886  0F11  0084               	movwf	4
  1887  0F12  3070               	movlw	112
  1888  0F13  1783               	bsf	3,7	;select IRP bank2
  1889  0F14  0600               	xorwf	0,w
  1890  0F15  1D03               	btfss	3,2
  1891  0F16  2FDC               	goto	l439
  1892                           
  1893                           ;main.c: 128: if(dData[2] == 'r'){
  1894  0F17  0840               	movf	main@dData^(0+128),w
  1895  0F18  3E02               	addlw	2
  1896  0F19  0084               	movwf	4
  1897  0F1A  3072               	movlw	114
  1898  0F1B  0600               	xorwf	0,w
  1899  0F1C  1903               	btfsc	3,2
  1900  0F1D  2FC4               	goto	l3741
  1901  0F1E  2FF1               	goto	l438
  1902  0F1F                     l3721:	
  1903                           ;main.c: 134: case 'E':
  1904                           
  1905                           ;main.c: 133: switch(dData[3]){
  1906                           
  1907                           
  1908                           ;main.c: 141: Reset_EPS();
  1909  0F1F  120A  118A  2007  120A  158A  	fcall	_Reset_EPS
  1910                           
  1911                           ;main.c: 142: _delay((unsigned long)((5000)*(10000000/4000.0)));
  1912  0F24  3040               	movlw	64
  1913  0F25  1283               	bcf	3,5	;RP0=0, select bank0
  1914  0F26  1303               	bcf	3,6	;RP1=0, select bank0
  1915  0F27  00E4               	movwf	??_main+2
  1916  0F28  306A               	movlw	106
  1917  0F29  00E3               	movwf	??_main+1
  1918  0F2A  3097               	movlw	151
  1919  0F2B  00E2               	movwf	??_main
  1920  0F2C                     u3557:	
  1921  0F2C  0BE2               	decfsz	??_main,f
  1922  0F2D  2F2C               	goto	u3557
  1923  0F2E  0BE3               	decfsz	??_main+1,f
  1924  0F2F  2F2C               	goto	u3557
  1925  0F30  0BE4               	decfsz	??_main+2,f
  1926  0F31  2F2C               	goto	u3557
  1927                           
  1928                           ;main.c: 145: int FMTX_Nprg[5] = {8,7,3,0,0};
  1929  0F32  30A0               	movlw	main@FMTX_Nprg& (0+255)
  1930  0F33  0084               	movwf	4
  1931  0F34  30D8               	movlw	low main@F1460
  1932  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  1933  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  1934  0F37  00E2               	movwf	??_main
  1935  0F38  0804               	movf	4,w
  1936  0F39  00E3               	movwf	??_main+1
  1937  0F3A  300A               	movlw	10
  1938  0F3B  00E4               	movwf	??_main+2
  1939  0F3C                     u3450:	
  1940  0F3C  0862               	movf	??_main,w
  1941  0F3D  0084               	movwf	4
  1942  0F3E  1783               	bsf	3,7	;select IRP bank3
  1943  0F3F  0800               	movf	0,w
  1944  0F40  00E5               	movwf	??_main+3
  1945  0F41  0AE2               	incf	??_main,f
  1946  0F42  0863               	movf	??_main+1,w
  1947  0F43  0084               	movwf	4
  1948  0F44  1383               	bcf	3,7	;select IRP bank1
  1949  0F45  0865               	movf	??_main+3,w
  1950  0F46  0080               	movwf	0
  1951  0F47  0AE3               	incf	??_main+1,f
  1952  0F48  0BE4               	decfsz	??_main+2,f
  1953  0F49  2F3C               	goto	u3450
  1954                           
  1955                           ;main.c: 146: int CWTX_Nprg[5] = {0,1,7,4,7};
  1956  0F4A  30AA               	movlw	main@CWTX_Nprg& (0+255)
  1957  0F4B  0084               	movwf	4
  1958  0F4C  30CE               	movlw	low main@F1462
  1959  0F4D  00E2               	movwf	??_main
  1960  0F4E  0804               	movf	4,w
  1961  0F4F  00E3               	movwf	??_main+1
  1962  0F50  300A               	movlw	10
  1963  0F51  00E4               	movwf	??_main+2
  1964  0F52                     u3460:	
  1965  0F52  0862               	movf	??_main,w
  1966  0F53  0084               	movwf	4
  1967  0F54  1783               	bsf	3,7	;select IRP bank3
  1968  0F55  0800               	movf	0,w
  1969  0F56  00E5               	movwf	??_main+3
  1970  0F57  0AE2               	incf	??_main,f
  1971  0F58  0863               	movf	??_main+1,w
  1972  0F59  0084               	movwf	4
  1973  0F5A  1383               	bcf	3,7	;select IRP bank1
  1974  0F5B  0865               	movf	??_main+3,w
  1975  0F5C  0080               	movwf	0
  1976  0F5D  0AE3               	incf	??_main+1,f
  1977  0F5E  0BE4               	decfsz	??_main+2,f
  1978  0F5F  2F52               	goto	u3460
  1979                           
  1980                           ;main.c: 147: int FMRX_Nprg[5] = {2,4,8,8,7};
  1981  0F60  30B4               	movlw	main@FMRX_Nprg& (0+255)
  1982  0F61  0084               	movwf	4
  1983  0F62  30C4               	movlw	low main@F1464
  1984  0F63  00E2               	movwf	??_main
  1985  0F64  0804               	movf	4,w
  1986  0F65  00E3               	movwf	??_main+1
  1987  0F66  300A               	movlw	10
  1988  0F67  00E4               	movwf	??_main+2
  1989  0F68                     u3470:	
  1990  0F68  0862               	movf	??_main,w
  1991  0F69  0084               	movwf	4
  1992  0F6A  1783               	bsf	3,7	;select IRP bank3
  1993  0F6B  0800               	movf	0,w
  1994  0F6C  00E5               	movwf	??_main+3
  1995  0F6D  0AE2               	incf	??_main,f
  1996  0F6E  0863               	movf	??_main+1,w
  1997  0F6F  0084               	movwf	4
  1998  0F70  1383               	bcf	3,7	;select IRP bank1
  1999  0F71  0865               	movf	??_main+3,w
  2000  0F72  0080               	movwf	0
  2001  0F73  0AE3               	incf	??_main+1,f
  2002  0F74  0BE4               	decfsz	??_main+2,f
  2003  0F75  2F68               	goto	u3470
  2004                           
  2005                           ;main.c: 149: FMTX(FMTX_Nref, FMTX_Nprg);
  2006  0F76  1683               	bsf	3,5	;RP0=1, select bank1
  2007  0F77  1303               	bcf	3,6	;RP1=0, select bank1
  2008  0F78  0846               	movf	(_FMTX_Nref+1)^(0+128),w
  2009  0F79  1283               	bcf	3,5	;RP0=0, select bank0
  2010  0F7A  1303               	bcf	3,6	;RP1=0, select bank0
  2011  0F7B  00DD               	movwf	FMTX@Nref+1
  2012  0F7C  1683               	bsf	3,5	;RP0=1, select bank1
  2013  0F7D  1303               	bcf	3,6	;RP1=0, select bank1
  2014  0F7E  0845               	movf	_FMTX_Nref^(0+128),w
  2015  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  2016  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  2017  0F81  00DC               	movwf	FMTX@Nref
  2018  0F82  30A0               	movlw	(low (main@FMTX_Nprg| 0))& (0+255)
  2019  0F83  00DE               	movwf	FMTX@Nprg
  2020  0F84  3000               	movlw	0
  2021  0F85  00DF               	movwf	FMTX@Nprg+1
  2022  0F86  120A  158A  2144  120A  158A  	fcall	_FMTX
  2023                           
  2024                           ;main.c: 150: CWTX(CWTX_Nref, CWTX_Nprg);
  2025  0F8B  1683               	bsf	3,5	;RP0=1, select bank1
  2026  0F8C  1303               	bcf	3,6	;RP1=0, select bank1
  2027  0F8D  0844               	movf	(_CWTX_Nref+1)^(0+128),w
  2028  0F8E  1283               	bcf	3,5	;RP0=0, select bank0
  2029  0F8F  1303               	bcf	3,6	;RP1=0, select bank0
  2030  0F90  00DD               	movwf	CWTX@Nref+1
  2031  0F91  1683               	bsf	3,5	;RP0=1, select bank1
  2032  0F92  1303               	bcf	3,6	;RP1=0, select bank1
  2033  0F93  0843               	movf	_CWTX_Nref^(0+128),w
  2034  0F94  1283               	bcf	3,5	;RP0=0, select bank0
  2035  0F95  1303               	bcf	3,6	;RP1=0, select bank0
  2036  0F96  00DC               	movwf	CWTX@Nref
  2037  0F97  30AA               	movlw	(low (main@CWTX_Nprg| 0))& (0+255)
  2038  0F98  00DE               	movwf	CWTX@Nprg
  2039  0F99  3000               	movlw	0
  2040  0F9A  00DF               	movwf	CWTX@Nprg+1
  2041  0F9B  120A  158A  20EC  120A  158A  	fcall	_CWTX
  2042                           
  2043                           ;main.c: 151: FMRX(FMRX_Nref, FMRX_Nprg);
  2044  0FA0  1683               	bsf	3,5	;RP0=1, select bank1
  2045  0FA1  1303               	bcf	3,6	;RP1=0, select bank1
  2046  0FA2  0842               	movf	(_FMRX_Nref+1)^(0+128),w
  2047  0FA3  1283               	bcf	3,5	;RP0=0, select bank0
  2048  0FA4  1303               	bcf	3,6	;RP1=0, select bank0
  2049  0FA5  00DD               	movwf	FMRX@Nref+1
  2050  0FA6  1683               	bsf	3,5	;RP0=1, select bank1
  2051  0FA7  1303               	bcf	3,6	;RP1=0, select bank1
  2052  0FA8  0841               	movf	_FMRX_Nref^(0+128),w
  2053  0FA9  1283               	bcf	3,5	;RP0=0, select bank0
  2054  0FAA  1303               	bcf	3,6	;RP1=0, select bank0
  2055  0FAB  00DC               	movwf	FMRX@Nref
  2056  0FAC  30B4               	movlw	(low (main@FMRX_Nprg| 0))& (0+255)
  2057  0FAD  00DE               	movwf	FMRX@Nprg
  2058  0FAE  3000               	movlw	0
  2059  0FAF  00DF               	movwf	FMRX@Nprg+1
  2060  0FB0  120A  158A  2118  120A  158A  	fcall	_FMRX
  2061                           
  2062                           ;main.c: 152: _delay((unsigned long)((500)*(10000000/4000.0)));
  2063  0FB5  3007               	movlw	7
  2064  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  2065  0FB7  1303               	bcf	3,6	;RP1=0, select bank0
  2066  0FB8  00E4               	movwf	??_main+2
  2067  0FB9  3058               	movlw	88
  2068  0FBA  00E3               	movwf	??_main+1
  2069  0FBB  3059               	movlw	89
  2070  0FBC  00E2               	movwf	??_main
  2071  0FBD                     u3567:	
  2072  0FBD  0BE2               	decfsz	??_main,f
  2073  0FBE  2FBD               	goto	u3567
  2074  0FBF  0BE3               	decfsz	??_main+1,f
  2075  0FC0  2FBD               	goto	u3567
  2076  0FC1  0BE4               	decfsz	??_main+2,f
  2077  0FC2  2FBD               	goto	u3567
  2078                           
  2079                           ;main.c: 169: }
  2080                           
  2081                           ;main.c: 168: break;
  2082                           
  2083                           ;main.c: 166: default:
  2084                           
  2085                           ;main.c: 165: break;
  2086                           
  2087                           ;main.c: 163: case 'T':
  2088                           
  2089                           ;main.c: 162: break;
  2090                           
  2091                           ;main.c: 160: case 'N':
  2092                           
  2093                           ;main.c: 159: break;
  2094                           
  2095                           ;main.c: 157: case '3':
  2096                           
  2097                           ;main.c: 156: break;
  2098                           
  2099                           ;main.c: 154: case 'I':
  2100                           
  2101                           ;main.c: 153: break;
  2102  0FC3  2FF1               	goto	l438
  2103  0FC4                     l3741:	
  2104  0FC4  1683               	bsf	3,5	;RP0=1, select bank1
  2105  0FC5  1303               	bcf	3,6	;RP1=0, select bank1
  2106  0FC6  0840               	movf	main@dData^(0+128),w
  2107  0FC7  3E03               	addlw	3
  2108  0FC8  0084               	movwf	4
  2109  0FC9  1783               	bsf	3,7	;select IRP bank2
  2110  0FCA  0800               	movf	0,w
  2111                           
  2112                           ; Switch size 1, requested type "space"
  2113                           ; Number of cases is 5, Range of values is 51 to 84
  2114                           ; switch strategies available:
  2115                           ; Name         Instructions Cycles
  2116                           ; simple_byte           16     9 (average)
  2117                           ; direct_byte          113    11 (fixed)
  2118                           ; jumptable            263     9 (fixed)
  2119                           ;	Chosen strategy is simple_byte
  2120  0FCB  3A33               	xorlw	51	; case 51
  2121  0FCC  1903               	skipnz
  2122  0FCD  2FF1               	goto	l438
  2123  0FCE  3A76               	xorlw	118	; case 69
  2124  0FCF  1903               	skipnz
  2125  0FD0  2F1F               	goto	l3721
  2126  0FD1  3A0C               	xorlw	12	; case 73
  2127  0FD2  1903               	skipnz
  2128  0FD3  2FF1               	goto	l438
  2129  0FD4  3A07               	xorlw	7	; case 78
  2130  0FD5  1903               	skipnz
  2131  0FD6  2FF1               	goto	l438
  2132  0FD7  3A1A               	xorlw	26	; case 84
  2133  0FD8  1903               	skipnz
  2134  0FD9  2FF1               	goto	l438
  2135  0FDA  2FF1               	goto	l438
  2136                           
  2137                           ;main.c: 173: }
  2138                           ;main.c: 174: }else{
  2139                           
  2140                           ;main.c: 171: }else if(dData[2] == 't'){
  2141  0FDB  2FF1               	goto	l438
  2142  0FDC                     l439:	
  2143                           
  2144                           ;main.c: 175: RB2 = 1;
  2145  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  2146  0FDD  1303               	bcf	3,6	;RP1=0, select bank0
  2147  0FDE  1506               	bsf	6,2	;volatile
  2148                           
  2149                           ;main.c: 176: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2150  0FDF  300D               	movlw	13
  2151  0FE0  1283               	bcf	3,5	;RP0=0, select bank0
  2152  0FE1  1303               	bcf	3,6	;RP1=0, select bank0
  2153  0FE2  00E4               	movwf	??_main+2
  2154  0FE3  30AF               	movlw	175
  2155  0FE4  00E3               	movwf	??_main+1
  2156  0FE5  30B5               	movlw	181
  2157  0FE6  00E2               	movwf	??_main
  2158  0FE7                     u3577:	
  2159  0FE7  0BE2               	decfsz	??_main,f
  2160  0FE8  2FE7               	goto	u3577
  2161  0FE9  0BE3               	decfsz	??_main+1,f
  2162  0FEA  2FE7               	goto	u3577
  2163  0FEB  0BE4               	decfsz	??_main+2,f
  2164  0FEC  2FE7               	goto	u3577
  2165  0FED  2FEE               	nop2
  2166                           
  2167                           ;main.c: 177: RB2 = 0;
  2168  0FEE  1283               	bcf	3,5	;RP0=0, select bank0
  2169  0FEF  1303               	bcf	3,6	;RP1=0, select bank0
  2170  0FF0  1106               	bcf	6,2	;volatile
  2171  0FF1                     l438:	
  2172                           
  2173                           ;main.c: 178: }
  2174                           ;main.c: 222: _delay((unsigned long)((500)*(10000000/4000.0)));
  2175  0FF1  3007               	movlw	7
  2176  0FF2  1283               	bcf	3,5	;RP0=0, select bank0
  2177  0FF3  1303               	bcf	3,6	;RP1=0, select bank0
  2178  0FF4  00E4               	movwf	??_main+2
  2179  0FF5  3058               	movlw	88
  2180  0FF6  00E3               	movwf	??_main+1
  2181  0FF7  3059               	movlw	89
  2182  0FF8  00E2               	movwf	??_main
  2183  0FF9                     u3587:	
  2184  0FF9  0BE2               	decfsz	??_main,f
  2185  0FFA  2FF9               	goto	u3587
  2186  0FFB  0BE3               	decfsz	??_main+1,f
  2187  0FFC  2FF9               	goto	u3587
  2188  0FFD  0BE4               	decfsz	??_main+2,f
  2189  0FFE  2FF9               	goto	u3587
  2190  0FFF  2E97               	goto	l3691
  2191  1000                     __end_of_main:	
  2192                           ;main.c: 223: }
  2193                           ;main.c: 224: return;
  2194                           
  2195                           
  2196                           	psect	text1
  2197  09D2                     __ptext1:	
  2198 ;; *************** function _TXOBC_waddress *****************
  2199 ;; Defined at:
  2200 ;;		line 78 in file "UART.c"
  2201 ;; Parameters:    Size  Location     Type
  2202 ;;  TXOBC_wad_he    1    wreg     unsigned char 
  2203 ;;  whigh_addres    1    1[COMMON] unsigned char 
  2204 ;;  wlow_address    1    2[COMMON] unsigned char 
  2205 ;; Auto vars:     Size  Location     Type
  2206 ;;  TXOBC_wad_he    1    5[COMMON] unsigned char 
  2207 ;; Return value:  Size  Location     Type
  2208 ;;                  1    wreg      void 
  2209 ;; Registers used:
  2210 ;;		wreg, status,2, status,0, pclath, cstack
  2211 ;; Tracked objects:
  2212 ;;		On entry : 0/0
  2213 ;;		On exit  : 0/0
  2214 ;;		Unchanged: 0/0
  2215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2216 ;;      Params:         2       0       0       0       0
  2217 ;;      Locals:         1       0       0       0       0
  2218 ;;      Temps:          2       0       0       0       0
  2219 ;;      Totals:         5       0       0       0       0
  2220 ;;Total ram usage:        5 bytes
  2221 ;; Hardware stack levels used:    1
  2222 ;; Hardware stack levels required when called:    1
  2223 ;; This function calls:
  2224 ;;		_putch
  2225 ;; This function is called by:
  2226 ;;		_main
  2227 ;; This function uses a non-reentrant model
  2228 ;;
  2229                           
  2230                           
  2231                           ;psect for function _TXOBC_waddress
  2232  09D2                     _TXOBC_waddress:	
  2233                           
  2234                           ;incstack = 0
  2235                           ; Regs used in _TXOBC_waddress: [wreg+status,2+status,0+pclath+cstack]
  2236                           ;TXOBC_waddress@TXOBC_wad_header stored from wreg
  2237  09D2  00F5               	movwf	TXOBC_waddress@TXOBC_wad_header
  2238                           
  2239                           ;UART.c: 79: RC5 = 1;
  2240  09D3  1283               	bcf	3,5	;RP0=0, select bank0
  2241  09D4  1303               	bcf	3,6	;RP1=0, select bank0
  2242  09D5  1687               	bsf	7,5	;volatile
  2243                           
  2244                           ;UART.c: 80: _delay((unsigned long)((50)*(10000000/4000.0)));
  2245  09D6  30A3               	movlw	163
  2246  09D7  00F4               	movwf	??_TXOBC_waddress+1
  2247  09D8  3055               	movlw	85
  2248  09D9  00F3               	movwf	??_TXOBC_waddress
  2249  09DA                     u3597:	
  2250  09DA  0BF3               	decfsz	??_TXOBC_waddress,f
  2251  09DB  29DA               	goto	u3597
  2252  09DC  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2253  09DD  29DA               	goto	u3597
  2254                           
  2255                           ;UART.c: 81: putch(TXOBC_wad_header);
  2256  09DE  0875               	movf	TXOBC_waddress@TXOBC_wad_header,w
  2257  09DF  160A  118A  27F8  120A  158A  	fcall	_putch
  2258                           
  2259                           ;UART.c: 82: _delay((unsigned long)((50)*(10000000/4000.0)));
  2260  09E4  30A3               	movlw	163
  2261  09E5  00F4               	movwf	??_TXOBC_waddress+1
  2262  09E6  3055               	movlw	85
  2263  09E7  00F3               	movwf	??_TXOBC_waddress
  2264  09E8                     u3607:	
  2265  09E8  0BF3               	decfsz	??_TXOBC_waddress,f
  2266  09E9  29E8               	goto	u3607
  2267  09EA  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2268  09EB  29E8               	goto	u3607
  2269                           
  2270                           ;UART.c: 83: putch(whigh_address);
  2271  09EC  0871               	movf	TXOBC_waddress@whigh_address,w
  2272  09ED  160A  118A  27F8  120A  158A  	fcall	_putch
  2273                           
  2274                           ;UART.c: 84: _delay((unsigned long)((50)*(10000000/4000.0)));
  2275  09F2  30A3               	movlw	163
  2276  09F3  00F4               	movwf	??_TXOBC_waddress+1
  2277  09F4  3055               	movlw	85
  2278  09F5  00F3               	movwf	??_TXOBC_waddress
  2279  09F6                     u3617:	
  2280  09F6  0BF3               	decfsz	??_TXOBC_waddress,f
  2281  09F7  29F6               	goto	u3617
  2282  09F8  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2283  09F9  29F6               	goto	u3617
  2284                           
  2285                           ;UART.c: 85: putch(wlow_address);
  2286  09FA  0872               	movf	TXOBC_waddress@wlow_address,w
  2287  09FB  160A  118A  27F8  120A  158A  	fcall	_putch
  2288                           
  2289                           ;UART.c: 86: _delay((unsigned long)((50)*(10000000/4000.0)));
  2290  0A00  30A3               	movlw	163
  2291  0A01  00F4               	movwf	??_TXOBC_waddress+1
  2292  0A02  3055               	movlw	85
  2293  0A03  00F3               	movwf	??_TXOBC_waddress
  2294  0A04                     u3627:	
  2295  0A04  0BF3               	decfsz	??_TXOBC_waddress,f
  2296  0A05  2A04               	goto	u3627
  2297  0A06  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2298  0A07  2A04               	goto	u3627
  2299                           
  2300                           ;UART.c: 87: RC5 = 0;
  2301  0A08  1283               	bcf	3,5	;RP0=0, select bank0
  2302  0A09  1303               	bcf	3,6	;RP1=0, select bank0
  2303  0A0A  1287               	bcf	7,5	;volatile
  2304  0A0B  0008               	return
  2305  0A0C                     __end_of_TXOBC_waddress:	
  2306                           
  2307                           	psect	text2
  2308  0007                     __ptext2:	
  2309 ;; *************** function _Reset_EPS *****************
  2310 ;; Defined at:
  2311 ;;		line 19 in file "EPS.c"
  2312 ;; Parameters:    Size  Location     Type
  2313 ;;		None
  2314 ;; Auto vars:     Size  Location     Type
  2315 ;;		None
  2316 ;; Return value:  Size  Location     Type
  2317 ;;                  1    wreg      void 
  2318 ;; Registers used:
  2319 ;;		wreg
  2320 ;; Tracked objects:
  2321 ;;		On entry : 0/0
  2322 ;;		On exit  : 0/0
  2323 ;;		Unchanged: 0/0
  2324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2325 ;;      Params:         0       0       0       0       0
  2326 ;;      Locals:         0       0       0       0       0
  2327 ;;      Temps:          3       0       0       0       0
  2328 ;;      Totals:         3       0       0       0       0
  2329 ;;Total ram usage:        3 bytes
  2330 ;; Hardware stack levels used:    1
  2331 ;; This function calls:
  2332 ;;		Nothing
  2333 ;; This function is called by:
  2334 ;;		_main
  2335 ;; This function uses a non-reentrant model
  2336 ;;
  2337                           
  2338                           
  2339                           ;psect for function _Reset_EPS
  2340  0007                     _Reset_EPS:	
  2341                           
  2342                           ;EPS.c: 20: RB4 = 1;
  2343                           
  2344                           ;incstack = 0
  2345                           ; Regs used in _Reset_EPS: [wreg]
  2346  0007  1283               	bcf	3,5	;RP0=0, select bank0
  2347  0008  1303               	bcf	3,6	;RP1=0, select bank0
  2348  0009  1606               	bsf	6,4	;volatile
  2349                           
  2350                           ;EPS.c: 21: RA1 = 1;
  2351  000A  1485               	bsf	5,1	;volatile
  2352                           
  2353                           ;EPS.c: 22: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2354  000B  3040               	movlw	64
  2355  000C  00F2               	movwf	??_Reset_EPS+2
  2356  000D  306A               	movlw	106
  2357  000E  00F1               	movwf	??_Reset_EPS+1
  2358  000F  3097               	movlw	151
  2359  0010  00F0               	movwf	??_Reset_EPS
  2360  0011                     u3637:	
  2361  0011  0BF0               	decfsz	??_Reset_EPS,f
  2362  0012  2811               	goto	u3637
  2363  0013  0BF1               	decfsz	??_Reset_EPS+1,f
  2364  0014  2811               	goto	u3637
  2365  0015  0BF2               	decfsz	??_Reset_EPS+2,f
  2366  0016  2811               	goto	u3637
  2367  0017  2818               	nop2
  2368                           
  2369                           ;EPS.c: 23: RB4 = 0;
  2370  0018  1283               	bcf	3,5	;RP0=0, select bank0
  2371  0019  1303               	bcf	3,6	;RP1=0, select bank0
  2372  001A  1206               	bcf	6,4	;volatile
  2373                           
  2374                           ;EPS.c: 24: RA1 = 0;
  2375  001B  1085               	bcf	5,1	;volatile
  2376                           
  2377                           ;EPS.c: 25: _delay((unsigned long)((500)*(10000000/4000.0)));
  2378  001C  3007               	movlw	7
  2379  001D  00F2               	movwf	??_Reset_EPS+2
  2380  001E  3058               	movlw	88
  2381  001F  00F1               	movwf	??_Reset_EPS+1
  2382  0020  3059               	movlw	89
  2383  0021  00F0               	movwf	??_Reset_EPS
  2384  0022                     u3647:	
  2385  0022  0BF0               	decfsz	??_Reset_EPS,f
  2386  0023  2822               	goto	u3647
  2387  0024  0BF1               	decfsz	??_Reset_EPS+1,f
  2388  0025  2822               	goto	u3647
  2389  0026  0BF2               	decfsz	??_Reset_EPS+2,f
  2390  0027  2822               	goto	u3647
  2391  0028  2829               	nop2
  2392  0029  0008               	return
  2393  002A                     __end_of_Reset_EPS:	
  2394                           
  2395                           	psect	text3
  2396  0C59                     __ptext3:	
  2397 ;; *************** function _ReceivePacket_data *****************
  2398 ;; Defined at:
  2399 ;;		line 359 in file "decode_AX25.c"
  2400 ;; Parameters:    Size  Location     Type
  2401 ;;		None
  2402 ;; Auto vars:     Size  Location     Type
  2403 ;;  i               2   31[BANK0 ] unsigned int 
  2404 ;;  fcschecker      2   29[BANK0 ] unsigned int 
  2405 ;; Return value:  Size  Location     Type
  2406 ;;                  1    wreg      PTR unsigned char 
  2407 ;; Registers used:
  2408 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2409 ;; Tracked objects:
  2410 ;;		On entry : 0/0
  2411 ;;		On exit  : 0/0
  2412 ;;		Unchanged: 0/0
  2413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2414 ;;      Params:         0       0       0       0       0
  2415 ;;      Locals:         0       4       0       0       0
  2416 ;;      Temps:          2       0       0       0       0
  2417 ;;      Totals:         2       4       0       0       0
  2418 ;;Total ram usage:        6 bytes
  2419 ;; Hardware stack levels used:    1
  2420 ;; Hardware stack levels required when called:    2
  2421 ;; This function calls:
  2422 ;;		_fcscheck
  2423 ;;		_getdata
  2424 ;;		_waitFlag
  2425 ;; This function is called by:
  2426 ;;		_main
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           
  2431                           ;psect for function _ReceivePacket_data
  2432  0C59                     _ReceivePacket_data:	
  2433                           
  2434                           ;decode_AX25.c: 360: UINT fcschecker;
  2435                           ;decode_AX25.c: 363: waitFlag();
  2436                           
  2437                           ;incstack = 0
  2438                           ; Regs used in _ReceivePacket_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2439  0C59  120A  118A  2327  120A  158A  	fcall	_waitFlag
  2440                           
  2441                           ;decode_AX25.c: 365: getdata();
  2442  0C5E  120A  158A  23F8  120A  158A  	fcall	_getdata
  2443                           
  2444                           ;decode_AX25.c: 367: fcschecker = fcscheck();
  2445  0C63  120A  118A  202A  120A  158A  	fcall	_fcscheck
  2446  0C68  0871               	movf	?_fcscheck+1,w
  2447  0C69  1283               	bcf	3,5	;RP0=0, select bank0
  2448  0C6A  1303               	bcf	3,6	;RP1=0, select bank0
  2449  0C6B  00BE               	movwf	ReceivePacket_data@fcschecker+1
  2450  0C6C  0870               	movf	?_fcscheck,w
  2451  0C6D  00BD               	movwf	ReceivePacket_data@fcschecker
  2452                           
  2453                           ;decode_AX25.c: 369: if(fcschecker == 1){
  2454  0C6E  033D               	decf	ReceivePacket_data@fcschecker,w
  2455  0C6F  043E               	iorwf	ReceivePacket_data@fcschecker+1,w
  2456  0C70  1D03               	btfss	3,2
  2457  0C71  2CB8               	goto	l3345
  2458                           
  2459                           ;decode_AX25.c: 370: for(UINT i=0; i<commandSize; i++){
  2460  0C72  01BF               	clrf	ReceivePacket_data@i
  2461  0C73  01C0               	clrf	ReceivePacket_data@i+1
  2462  0C74  3001               	movlw	low (_commandSize-__stringbase)
  2463  0C75  0084               	movwf	4
  2464  0C76  120A  158A  2000  120A  158A  	fcall	stringdir
  2465  0C7B  00FA               	movwf	??_ReceivePacket_data
  2466  0C7C  120A  158A  2000  120A  158A  	fcall	stringdir
  2467  0C81  00FB               	movwf	??_ReceivePacket_data+1
  2468  0C82  087B               	movf	??_ReceivePacket_data+1,w
  2469  0C83  0240               	subwf	ReceivePacket_data@i+1,w
  2470  0C84  1D03               	skipz
  2471  0C85  2C88               	goto	u3055
  2472  0C86  087A               	movf	??_ReceivePacket_data,w
  2473  0C87  023F               	subwf	ReceivePacket_data@i,w
  2474  0C88                     u3055:	
  2475  0C88  1803               	btfsc	3,0
  2476  0C89  2CB2               	goto	l3337
  2477  0C8A                     l3331:	
  2478                           
  2479                           ;decode_AX25.c: 371: dData[i] = dPacket[i+20];
  2480  0C8A  083F               	movf	ReceivePacket_data@i,w
  2481  0C8B  3E14               	addlw	20
  2482  0C8C  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2483  0C8D  0084               	movwf	4
  2484  0C8E  1783               	bsf	3,7	;select IRP bank3
  2485  0C8F  0800               	movf	0,w
  2486  0C90  00FA               	movwf	??_ReceivePacket_data
  2487  0C91  083F               	movf	ReceivePacket_data@i,w
  2488  0C92  3E10               	addlw	(low (_dData| (0+256)))& (0+255)
  2489  0C93  0084               	movwf	4
  2490  0C94  087A               	movf	??_ReceivePacket_data,w
  2491  0C95  0080               	movwf	0
  2492  0C96  3001               	movlw	1
  2493  0C97  07BF               	addwf	ReceivePacket_data@i,f
  2494  0C98  1803               	skipnc
  2495  0C99  0AC0               	incf	ReceivePacket_data@i+1,f
  2496  0C9A  3000               	movlw	0
  2497  0C9B  07C0               	addwf	ReceivePacket_data@i+1,f
  2498  0C9C  3001               	movlw	low (_commandSize-__stringbase)
  2499  0C9D  0084               	movwf	4
  2500  0C9E  120A  158A  2000  120A  158A  	fcall	stringdir
  2501  0CA3  00FA               	movwf	??_ReceivePacket_data
  2502  0CA4  120A  158A  2000  120A  158A  	fcall	stringdir
  2503  0CA9  00FB               	movwf	??_ReceivePacket_data+1
  2504  0CAA  087B               	movf	??_ReceivePacket_data+1,w
  2505  0CAB  0240               	subwf	ReceivePacket_data@i+1,w
  2506  0CAC  1D03               	skipz
  2507  0CAD  2CB0               	goto	u3065
  2508  0CAE  087A               	movf	??_ReceivePacket_data,w
  2509  0CAF  023F               	subwf	ReceivePacket_data@i,w
  2510  0CB0                     u3065:	
  2511  0CB0  1C03               	skipc
  2512  0CB1  2C8A               	goto	l3331
  2513  0CB2                     l3337:	
  2514                           
  2515                           ;decode_AX25.c: 372: }
  2516                           ;decode_AX25.c: 373: dPacketnum = 0;
  2517  0CB2  01E8               	clrf	_dPacketnum
  2518  0CB3  01E9               	clrf	_dPacketnum+1
  2519                           
  2520                           ;decode_AX25.c: 374: rcv_state = 0;
  2521  0CB4  01EA               	clrf	_rcv_state
  2522  0CB5  01EB               	clrf	_rcv_state+1
  2523                           
  2524                           ;decode_AX25.c: 375: return dData;
  2525  0CB6  3010               	movlw	(low (_dData| (0+256)))& (0+255)
  2526                           
  2527                           ;decode_AX25.c: 376: }else{
  2528  0CB7  0008               	return
  2529  0CB8                     l3345:	
  2530                           
  2531                           ;decode_AX25.c: 377: dPacketnum = 0;
  2532  0CB8  01E8               	clrf	_dPacketnum
  2533  0CB9  01E9               	clrf	_dPacketnum+1
  2534                           
  2535                           ;decode_AX25.c: 378: rcv_state = 0;
  2536  0CBA  01EA               	clrf	_rcv_state
  2537  0CBB  01EB               	clrf	_rcv_state+1
  2538                           
  2539                           ;decode_AX25.c: 379: return 0x00;
  2540  0CBC  3000               	movlw	0
  2541  0CBD  0008               	return
  2542  0CBE                     __end_of_ReceivePacket_data:	
  2543                           
  2544                           	psect	text4
  2545  0327                     __ptext4:	
  2546 ;; *************** function _waitFlag *****************
  2547 ;; Defined at:
  2548 ;;		line 54 in file "decode_AX25.c"
  2549 ;; Parameters:    Size  Location     Type
  2550 ;;		None
  2551 ;; Auto vars:     Size  Location     Type
  2552 ;;  j               2   24[BANK0 ] unsigned int 
  2553 ;;  j               2   10[BANK0 ] unsigned int 
  2554 ;;  j               2   22[BANK0 ] unsigned int 
  2555 ;;  j               2    8[BANK0 ] unsigned int 
  2556 ;;  j               2   20[BANK0 ] unsigned int 
  2557 ;;  j               2    6[BANK0 ] unsigned int 
  2558 ;;  j               2   18[BANK0 ] unsigned int 
  2559 ;;  j               2    4[BANK0 ] unsigned int 
  2560 ;;  j               2   16[BANK0 ] unsigned int 
  2561 ;;  j               2    2[BANK0 ] unsigned int 
  2562 ;;  i               2    0[BANK0 ] unsigned int 
  2563 ;;  j               2   14[BANK0 ] unsigned int 
  2564 ;;  j               2   12[BANK0 ] unsigned int 
  2565 ;;  flag_judge      2   26[BANK0 ] unsigned int 
  2566 ;;  buf             1   28[BANK0 ] unsigned char 
  2567 ;; Return value:  Size  Location     Type
  2568 ;;                  1    wreg      void 
  2569 ;; Registers used:
  2570 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2571 ;; Tracked objects:
  2572 ;;		On entry : 0/0
  2573 ;;		On exit  : 0/0
  2574 ;;		Unchanged: 0/0
  2575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2576 ;;      Params:         0       0       0       0       0
  2577 ;;      Locals:         0      29       0       0       0
  2578 ;;      Temps:          4       0       0       0       0
  2579 ;;      Totals:         4      29       0       0       0
  2580 ;;Total ram usage:       33 bytes
  2581 ;; Hardware stack levels used:    1
  2582 ;; Hardware stack levels required when called:    1
  2583 ;; This function calls:
  2584 ;;		_getbit
  2585 ;; This function is called by:
  2586 ;;		_ReceivePacket_data
  2587 ;;		_ReceivePacket
  2588 ;; This function uses a non-reentrant model
  2589 ;;
  2590                           
  2591                           
  2592                           ;psect for function _waitFlag
  2593  0327                     _waitFlag:	
  2594                           
  2595                           ;decode_AX25.c: 55: UINT flag_judge;
  2596                           ;decode_AX25.c: 56: UBYTE buf = 0xff;
  2597                           
  2598                           ;incstack = 0
  2599                           ; Regs used in _waitFlag: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2600  0327  30FF               	movlw	255
  2601  0328  00F6               	movwf	??_waitFlag
  2602  0329  0876               	movf	??_waitFlag,w
  2603  032A  1283               	bcf	3,5	;RP0=0, select bank0
  2604  032B  1303               	bcf	3,6	;RP1=0, select bank0
  2605  032C  00BC               	movwf	waitFlag@buf
  2606  032D                     L6:	
  2607                           
  2608                           ;decode_AX25.c: 271: rcv_state = 0;
  2609  032D  01EA               	clrf	_rcv_state
  2610  032E  01EB               	clrf	_rcv_state+1
  2611  032F                     l3015:	
  2612  032F  3000               	movlw	0
  2613  0330  026B               	subwf	_rcv_state+1,w
  2614  0331  3002               	movlw	2
  2615  0332  1903               	skipnz
  2616  0333  026A               	subwf	_rcv_state,w
  2617  0334  1803               	btfsc	3,0
  2618  0335  0008               	return
  2619  0336                     l2649:	
  2620                           ;decode_AX25.c: 59: while(buf != 0x7e){
  2621                           
  2622                           ;decode_AX25.c: 58: while(rcv_state < 2){
  2623                           
  2624                           ;decode_AX25.c: 57: rcv_state = 0;
  2625                           
  2626  0336  307E               	movlw	126
  2627  0337  063C               	xorwf	waitFlag@buf,w
  2628  0338  1903               	btfsc	3,2
  2629  0339  2B86               	goto	l2671
  2630                           
  2631                           ;decode_AX25.c: 60: flag_judge = getbit();
  2632  033A  120A  158A  2298  120A  118A  	fcall	_getbit
  2633  033F  0871               	movf	?_getbit+1,w
  2634  0340  1283               	bcf	3,5	;RP0=0, select bank0
  2635  0341  1303               	bcf	3,6	;RP1=0, select bank0
  2636  0342  00BB               	movwf	waitFlag@flag_judge+1
  2637  0343  0870               	movf	?_getbit,w
  2638  0344  00BA               	movwf	waitFlag@flag_judge
  2639                           
  2640                           ;decode_AX25.c: 61: buf = buf << 1;
  2641  0345  083C               	movf	waitFlag@buf,w
  2642  0346  00F6               	movwf	??_waitFlag
  2643  0347  0776               	addwf	??_waitFlag,w
  2644  0348  00F7               	movwf	??_waitFlag+1
  2645  0349  0877               	movf	??_waitFlag+1,w
  2646  034A  00BC               	movwf	waitFlag@buf
  2647                           
  2648                           ;decode_AX25.c: 63: buf = buf | 0x00;
  2649  034B  083A               	movf	waitFlag@flag_judge,w
  2650  034C  043B               	iorwf	waitFlag@flag_judge+1,w
  2651  034D  1903               	btfsc	3,2
  2652  034E  2B36               	goto	l2649
  2653                           
  2654                           ;decode_AX25.c: 65: buf = buf | 0x01;
  2655                           
  2656                           ;decode_AX25.c: 64: }else{
  2657  034F  083C               	movf	waitFlag@buf,w
  2658  0350  3801               	iorlw	1
  2659  0351  00F6               	movwf	??_waitFlag
  2660  0352  0876               	movf	??_waitFlag,w
  2661  0353  00BC               	movwf	waitFlag@buf
  2662  0354  2B36               	goto	l2649
  2663  0355                     l2651:	
  2664                           ;decode_AX25.c: 66: }
  2665                           ;decode_AX25.c: 67: }
  2666                           ;decode_AX25.c: 71: while(buf == 0x7e){
  2667                           
  2668                           
  2669                           ;decode_AX25.c: 72: for(UINT i=0;i<8;i++){
  2670  0355  01A0               	clrf	waitFlag@i
  2671  0356  01A1               	clrf	waitFlag@i+1
  2672  0357  3000               	movlw	0
  2673  0358  0221               	subwf	waitFlag@i+1,w
  2674  0359  3008               	movlw	8
  2675  035A  1903               	skipnz
  2676  035B  0220               	subwf	waitFlag@i,w
  2677  035C  1803               	btfsc	3,0
  2678  035D  2B86               	goto	l2671
  2679  035E                     l2657:	
  2680                           
  2681                           ;decode_AX25.c: 73: flag_judge = getbit();
  2682  035E  120A  158A  2298  120A  118A  	fcall	_getbit
  2683  0363  0871               	movf	?_getbit+1,w
  2684  0364  1283               	bcf	3,5	;RP0=0, select bank0
  2685  0365  1303               	bcf	3,6	;RP1=0, select bank0
  2686  0366  00BB               	movwf	waitFlag@flag_judge+1
  2687  0367  0870               	movf	?_getbit,w
  2688  0368  00BA               	movwf	waitFlag@flag_judge
  2689                           
  2690                           ;decode_AX25.c: 74: buf = buf >> 1;
  2691  0369  083C               	movf	waitFlag@buf,w
  2692  036A  00F6               	movwf	??_waitFlag
  2693  036B  1003               	clrc
  2694  036C  0C76               	rrf	??_waitFlag,w
  2695  036D  00F7               	movwf	??_waitFlag+1
  2696  036E  0877               	movf	??_waitFlag+1,w
  2697  036F  00BC               	movwf	waitFlag@buf
  2698                           
  2699                           ;decode_AX25.c: 76: buf = buf | 0x00;
  2700  0370  083A               	movf	waitFlag@flag_judge,w
  2701  0371  043B               	iorwf	waitFlag@flag_judge+1,w
  2702  0372  1903               	btfsc	3,2
  2703  0373  2B79               	goto	l2667
  2704                           
  2705                           ;decode_AX25.c: 78: buf = buf | 0x80;
  2706                           
  2707                           ;decode_AX25.c: 77: }else{
  2708  0374  083C               	movf	waitFlag@buf,w
  2709  0375  3880               	iorlw	128
  2710  0376  00F6               	movwf	??_waitFlag
  2711  0377  0876               	movf	??_waitFlag,w
  2712  0378  00BC               	movwf	waitFlag@buf
  2713  0379                     l2667:	
  2714  0379  3001               	movlw	1
  2715  037A  07A0               	addwf	waitFlag@i,f
  2716  037B  1803               	skipnc
  2717  037C  0AA1               	incf	waitFlag@i+1,f
  2718  037D  3000               	movlw	0
  2719  037E  07A1               	addwf	waitFlag@i+1,f
  2720  037F  3000               	movlw	0
  2721  0380  0221               	subwf	waitFlag@i+1,w
  2722  0381  3008               	movlw	8
  2723  0382  1903               	skipnz
  2724  0383  0220               	subwf	waitFlag@i,w
  2725  0384  1C03               	skipc
  2726  0385  2B5E               	goto	l2657
  2727  0386                     l2671:	
  2728  0386  307E               	movlw	126
  2729  0387  063C               	xorwf	waitFlag@buf,w
  2730  0388  1903               	btfsc	3,2
  2731  0389  2B55               	goto	l2651
  2732                           
  2733                           ;decode_AX25.c: 79: }
  2734                           ;decode_AX25.c: 80: }
  2735                           ;decode_AX25.c: 81: }
  2736                           ;decode_AX25.c: 82: if(buf == ("JQ1YCZ"[0] << 1)){
  2737  038A  300A               	movlw	low (STR_1-__stringbase)
  2738  038B  0084               	movwf	4
  2739  038C  120A  158A  2000  120A  118A  	fcall	stringdir
  2740  0391  00F6               	movwf	??_waitFlag
  2741  0392  01F7               	clrf	??_waitFlag+1
  2742  0393  1003               	clrc
  2743  0394  0DF6               	rlf	??_waitFlag,f
  2744  0395  0DF7               	rlf	??_waitFlag+1,f
  2745  0396  083C               	movf	waitFlag@buf,w
  2746  0397  00F8               	movwf	??_waitFlag+2
  2747  0398  01F9               	clrf	??_waitFlag+3
  2748  0399  0877               	movf	??_waitFlag+1,w
  2749  039A  0679               	xorwf	??_waitFlag+3,w
  2750  039B  1D03               	skipz
  2751  039C  2B9F               	goto	u2145
  2752  039D  0876               	movf	??_waitFlag,w
  2753  039E  0678               	xorwf	??_waitFlag+2,w
  2754  039F                     u2145:	
  2755  039F  1D03               	skipz
  2756  03A0  2D64               	goto	l2821
  2757                           
  2758                           ;decode_AX25.c: 83: dPacket[dPacketnum] = buf;
  2759  03A1  083C               	movf	waitFlag@buf,w
  2760  03A2  00F6               	movwf	??_waitFlag
  2761  03A3  0868               	movf	_dPacketnum,w
  2762  03A4  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2763  03A5  0084               	movwf	4
  2764  03A6  0876               	movf	??_waitFlag,w
  2765  03A7  1783               	bsf	3,7	;select IRP bank3
  2766  03A8  0080               	movwf	0
  2767                           
  2768                           ;decode_AX25.c: 84: dPacketnum ++;
  2769  03A9  3001               	movlw	1
  2770  03AA  07E8               	addwf	_dPacketnum,f
  2771  03AB  1803               	skipnc
  2772  03AC  0AE9               	incf	_dPacketnum+1,f
  2773  03AD  3000               	movlw	0
  2774  03AE  07E9               	addwf	_dPacketnum+1,f
  2775                           
  2776                           ;decode_AX25.c: 85: for(UINT j=0;j<8;j++){
  2777  03AF  01A2               	clrf	waitFlag@j
  2778  03B0  01A3               	clrf	waitFlag@j+1
  2779  03B1  3000               	movlw	0
  2780  03B2  0223               	subwf	waitFlag@j+1,w
  2781  03B3  3008               	movlw	8
  2782  03B4  1903               	skipnz
  2783  03B5  0222               	subwf	waitFlag@j,w
  2784  03B6  1803               	btfsc	3,0
  2785  03B7  2BE0               	goto	l2699
  2786  03B8                     l2685:	
  2787                           
  2788                           ;decode_AX25.c: 86: flag_judge = getbit();
  2789  03B8  120A  158A  2298  120A  118A  	fcall	_getbit
  2790  03BD  0871               	movf	?_getbit+1,w
  2791  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  2792  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  2793  03C0  00BB               	movwf	waitFlag@flag_judge+1
  2794  03C1  0870               	movf	?_getbit,w
  2795  03C2  00BA               	movwf	waitFlag@flag_judge
  2796                           
  2797                           ;decode_AX25.c: 87: buf = buf >> 1;
  2798  03C3  083C               	movf	waitFlag@buf,w
  2799  03C4  00F6               	movwf	??_waitFlag
  2800  03C5  1003               	clrc
  2801  03C6  0C76               	rrf	??_waitFlag,w
  2802  03C7  00F7               	movwf	??_waitFlag+1
  2803  03C8  0877               	movf	??_waitFlag+1,w
  2804  03C9  00BC               	movwf	waitFlag@buf
  2805                           
  2806                           ;decode_AX25.c: 89: buf = buf | 0x00;
  2807  03CA  083A               	movf	waitFlag@flag_judge,w
  2808  03CB  043B               	iorwf	waitFlag@flag_judge+1,w
  2809  03CC  1903               	btfsc	3,2
  2810  03CD  2BD3               	goto	l2695
  2811                           
  2812                           ;decode_AX25.c: 91: buf = buf | 0x80;
  2813                           
  2814                           ;decode_AX25.c: 90: }else{
  2815  03CE  083C               	movf	waitFlag@buf,w
  2816  03CF  3880               	iorlw	128
  2817  03D0  00F6               	movwf	??_waitFlag
  2818  03D1  0876               	movf	??_waitFlag,w
  2819  03D2  00BC               	movwf	waitFlag@buf
  2820  03D3                     l2695:	
  2821  03D3  3001               	movlw	1
  2822  03D4  07A2               	addwf	waitFlag@j,f
  2823  03D5  1803               	skipnc
  2824  03D6  0AA3               	incf	waitFlag@j+1,f
  2825  03D7  3000               	movlw	0
  2826  03D8  07A3               	addwf	waitFlag@j+1,f
  2827  03D9  3000               	movlw	0
  2828  03DA  0223               	subwf	waitFlag@j+1,w
  2829  03DB  3008               	movlw	8
  2830  03DC  1903               	skipnz
  2831  03DD  0222               	subwf	waitFlag@j,w
  2832  03DE  1C03               	skipc
  2833  03DF  2BB8               	goto	l2685
  2834  03E0                     l2699:	
  2835                           
  2836                           ;decode_AX25.c: 92: }
  2837                           ;decode_AX25.c: 93: }
  2838                           ;decode_AX25.c: 94: if(buf == ("JQ1YCZ"[1] << 1)){
  2839  03E0  300B               	movlw	low (((STR_1+1)-__stringbase)| (0+32768))
  2840  03E1  0084               	movwf	4
  2841  03E2  120A  158A  2000  120A  118A  	fcall	stringdir
  2842  03E7  00F6               	movwf	??_waitFlag
  2843  03E8  01F7               	clrf	??_waitFlag+1
  2844  03E9  1003               	clrc
  2845  03EA  0DF6               	rlf	??_waitFlag,f
  2846  03EB  0DF7               	rlf	??_waitFlag+1,f
  2847  03EC  083C               	movf	waitFlag@buf,w
  2848  03ED  00F8               	movwf	??_waitFlag+2
  2849  03EE  01F9               	clrf	??_waitFlag+3
  2850  03EF  0877               	movf	??_waitFlag+1,w
  2851  03F0  0679               	xorwf	??_waitFlag+3,w
  2852  03F1  1D03               	skipz
  2853  03F2  2BF5               	goto	u2185
  2854  03F3  0876               	movf	??_waitFlag,w
  2855  03F4  0678               	xorwf	??_waitFlag+2,w
  2856  03F5                     u2185:	
  2857  03F5  1D03               	skipz
  2858  03F6  2D64               	goto	l2821
  2859                           
  2860                           ;decode_AX25.c: 95: dPacket[dPacketnum] = buf;
  2861  03F7  083C               	movf	waitFlag@buf,w
  2862  03F8  00F6               	movwf	??_waitFlag
  2863  03F9  0868               	movf	_dPacketnum,w
  2864  03FA  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2865  03FB  0084               	movwf	4
  2866  03FC  0876               	movf	??_waitFlag,w
  2867  03FD  1783               	bsf	3,7	;select IRP bank3
  2868  03FE  0080               	movwf	0
  2869                           
  2870                           ;decode_AX25.c: 96: dPacketnum ++;
  2871  03FF  3001               	movlw	1
  2872  0400  07E8               	addwf	_dPacketnum,f
  2873  0401  1803               	skipnc
  2874  0402  0AE9               	incf	_dPacketnum+1,f
  2875  0403  3000               	movlw	0
  2876  0404  07E9               	addwf	_dPacketnum+1,f
  2877                           
  2878                           ;decode_AX25.c: 97: for(UINT j=0;j<8;j++){
  2879  0405  01A4               	clrf	waitFlag@j_116
  2880  0406  01A5               	clrf	waitFlag@j_116+1
  2881  0407  3000               	movlw	0
  2882  0408  0225               	subwf	waitFlag@j_116+1,w
  2883  0409  3008               	movlw	8
  2884  040A  1903               	skipnz
  2885  040B  0224               	subwf	waitFlag@j_116,w
  2886  040C  1803               	btfsc	3,0
  2887  040D  2C36               	goto	l2725
  2888  040E                     l2711:	
  2889                           
  2890                           ;decode_AX25.c: 98: flag_judge = getbit();
  2891  040E  120A  158A  2298  120A  118A  	fcall	_getbit
  2892  0413  0871               	movf	?_getbit+1,w
  2893  0414  1283               	bcf	3,5	;RP0=0, select bank0
  2894  0415  1303               	bcf	3,6	;RP1=0, select bank0
  2895  0416  00BB               	movwf	waitFlag@flag_judge+1
  2896  0417  0870               	movf	?_getbit,w
  2897  0418  00BA               	movwf	waitFlag@flag_judge
  2898                           
  2899                           ;decode_AX25.c: 99: buf = buf >> 1;
  2900  0419  083C               	movf	waitFlag@buf,w
  2901  041A  00F6               	movwf	??_waitFlag
  2902  041B  1003               	clrc
  2903  041C  0C76               	rrf	??_waitFlag,w
  2904  041D  00F7               	movwf	??_waitFlag+1
  2905  041E  0877               	movf	??_waitFlag+1,w
  2906  041F  00BC               	movwf	waitFlag@buf
  2907                           
  2908                           ;decode_AX25.c: 101: buf = buf | 0x00;
  2909  0420  083A               	movf	waitFlag@flag_judge,w
  2910  0421  043B               	iorwf	waitFlag@flag_judge+1,w
  2911  0422  1903               	btfsc	3,2
  2912  0423  2C29               	goto	l2721
  2913                           
  2914                           ;decode_AX25.c: 103: buf = buf | 0x80;
  2915                           
  2916                           ;decode_AX25.c: 102: }else{
  2917  0424  083C               	movf	waitFlag@buf,w
  2918  0425  3880               	iorlw	128
  2919  0426  00F6               	movwf	??_waitFlag
  2920  0427  0876               	movf	??_waitFlag,w
  2921  0428  00BC               	movwf	waitFlag@buf
  2922  0429                     l2721:	
  2923  0429  3001               	movlw	1
  2924  042A  07A4               	addwf	waitFlag@j_116,f
  2925  042B  1803               	skipnc
  2926  042C  0AA5               	incf	waitFlag@j_116+1,f
  2927  042D  3000               	movlw	0
  2928  042E  07A5               	addwf	waitFlag@j_116+1,f
  2929  042F  3000               	movlw	0
  2930  0430  0225               	subwf	waitFlag@j_116+1,w
  2931  0431  3008               	movlw	8
  2932  0432  1903               	skipnz
  2933  0433  0224               	subwf	waitFlag@j_116,w
  2934  0434  1C03               	skipc
  2935  0435  2C0E               	goto	l2711
  2936  0436                     l2725:	
  2937                           
  2938                           ;decode_AX25.c: 104: }
  2939                           ;decode_AX25.c: 105: }
  2940                           ;decode_AX25.c: 106: if(buf == ("JQ1YCZ"[2] << 1)){
  2941  0436  300C               	movlw	low (((STR_1+2)-__stringbase)| (0+32768))
  2942  0437  0084               	movwf	4
  2943  0438  120A  158A  2000  120A  118A  	fcall	stringdir
  2944  043D  00F6               	movwf	??_waitFlag
  2945  043E  01F7               	clrf	??_waitFlag+1
  2946  043F  1003               	clrc
  2947  0440  0DF6               	rlf	??_waitFlag,f
  2948  0441  0DF7               	rlf	??_waitFlag+1,f
  2949  0442  083C               	movf	waitFlag@buf,w
  2950  0443  00F8               	movwf	??_waitFlag+2
  2951  0444  01F9               	clrf	??_waitFlag+3
  2952  0445  0877               	movf	??_waitFlag+1,w
  2953  0446  0679               	xorwf	??_waitFlag+3,w
  2954  0447  1D03               	skipz
  2955  0448  2C4B               	goto	u2225
  2956  0449  0876               	movf	??_waitFlag,w
  2957  044A  0678               	xorwf	??_waitFlag+2,w
  2958  044B                     u2225:	
  2959  044B  1D03               	skipz
  2960  044C  2D64               	goto	l2821
  2961                           
  2962                           ;decode_AX25.c: 107: dPacket[dPacketnum] = buf;
  2963  044D  083C               	movf	waitFlag@buf,w
  2964  044E  00F6               	movwf	??_waitFlag
  2965  044F  0868               	movf	_dPacketnum,w
  2966  0450  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2967  0451  0084               	movwf	4
  2968  0452  0876               	movf	??_waitFlag,w
  2969  0453  1783               	bsf	3,7	;select IRP bank3
  2970  0454  0080               	movwf	0
  2971                           
  2972                           ;decode_AX25.c: 108: dPacketnum ++;
  2973  0455  3001               	movlw	1
  2974  0456  07E8               	addwf	_dPacketnum,f
  2975  0457  1803               	skipnc
  2976  0458  0AE9               	incf	_dPacketnum+1,f
  2977  0459  3000               	movlw	0
  2978  045A  07E9               	addwf	_dPacketnum+1,f
  2979                           
  2980                           ;decode_AX25.c: 109: for(UINT j=0;j<8;j++){
  2981  045B  01A6               	clrf	waitFlag@j_118
  2982  045C  01A7               	clrf	waitFlag@j_118+1
  2983  045D  3000               	movlw	0
  2984  045E  0227               	subwf	waitFlag@j_118+1,w
  2985  045F  3008               	movlw	8
  2986  0460  1903               	skipnz
  2987  0461  0226               	subwf	waitFlag@j_118,w
  2988  0462  1803               	btfsc	3,0
  2989  0463  2C8C               	goto	l2751
  2990  0464                     l2737:	
  2991                           
  2992                           ;decode_AX25.c: 110: flag_judge = getbit();
  2993  0464  120A  158A  2298  120A  118A  	fcall	_getbit
  2994  0469  0871               	movf	?_getbit+1,w
  2995  046A  1283               	bcf	3,5	;RP0=0, select bank0
  2996  046B  1303               	bcf	3,6	;RP1=0, select bank0
  2997  046C  00BB               	movwf	waitFlag@flag_judge+1
  2998  046D  0870               	movf	?_getbit,w
  2999  046E  00BA               	movwf	waitFlag@flag_judge
  3000                           
  3001                           ;decode_AX25.c: 111: buf = buf >> 1;
  3002  046F  083C               	movf	waitFlag@buf,w
  3003  0470  00F6               	movwf	??_waitFlag
  3004  0471  1003               	clrc
  3005  0472  0C76               	rrf	??_waitFlag,w
  3006  0473  00F7               	movwf	??_waitFlag+1
  3007  0474  0877               	movf	??_waitFlag+1,w
  3008  0475  00BC               	movwf	waitFlag@buf
  3009                           
  3010                           ;decode_AX25.c: 113: buf = buf | 0x00;
  3011  0476  083A               	movf	waitFlag@flag_judge,w
  3012  0477  043B               	iorwf	waitFlag@flag_judge+1,w
  3013  0478  1903               	btfsc	3,2
  3014  0479  2C7F               	goto	l2747
  3015                           
  3016                           ;decode_AX25.c: 115: buf = buf | 0x80;
  3017                           
  3018                           ;decode_AX25.c: 114: }else{
  3019  047A  083C               	movf	waitFlag@buf,w
  3020  047B  3880               	iorlw	128
  3021  047C  00F6               	movwf	??_waitFlag
  3022  047D  0876               	movf	??_waitFlag,w
  3023  047E  00BC               	movwf	waitFlag@buf
  3024  047F                     l2747:	
  3025  047F  3001               	movlw	1
  3026  0480  07A6               	addwf	waitFlag@j_118,f
  3027  0481  1803               	skipnc
  3028  0482  0AA7               	incf	waitFlag@j_118+1,f
  3029  0483  3000               	movlw	0
  3030  0484  07A7               	addwf	waitFlag@j_118+1,f
  3031  0485  3000               	movlw	0
  3032  0486  0227               	subwf	waitFlag@j_118+1,w
  3033  0487  3008               	movlw	8
  3034  0488  1903               	skipnz
  3035  0489  0226               	subwf	waitFlag@j_118,w
  3036  048A  1C03               	skipc
  3037  048B  2C64               	goto	l2737
  3038  048C                     l2751:	
  3039                           
  3040                           ;decode_AX25.c: 116: }
  3041                           ;decode_AX25.c: 117: }
  3042                           ;decode_AX25.c: 118: if(buf == ("JQ1YCZ"[3] << 1)){
  3043  048C  300D               	movlw	low (((STR_1+3)-__stringbase)| (0+32768))
  3044  048D  0084               	movwf	4
  3045  048E  120A  158A  2000  120A  118A  	fcall	stringdir
  3046  0493  00F6               	movwf	??_waitFlag
  3047  0494  01F7               	clrf	??_waitFlag+1
  3048  0495  1003               	clrc
  3049  0496  0DF6               	rlf	??_waitFlag,f
  3050  0497  0DF7               	rlf	??_waitFlag+1,f
  3051  0498  083C               	movf	waitFlag@buf,w
  3052  0499  00F8               	movwf	??_waitFlag+2
  3053  049A  01F9               	clrf	??_waitFlag+3
  3054  049B  0877               	movf	??_waitFlag+1,w
  3055  049C  0679               	xorwf	??_waitFlag+3,w
  3056  049D  1D03               	skipz
  3057  049E  2CA1               	goto	u2265
  3058  049F  0876               	movf	??_waitFlag,w
  3059  04A0  0678               	xorwf	??_waitFlag+2,w
  3060  04A1                     u2265:	
  3061  04A1  1D03               	skipz
  3062  04A2  2D64               	goto	l2821
  3063                           
  3064                           ;decode_AX25.c: 119: dPacket[dPacketnum] = buf;
  3065  04A3  083C               	movf	waitFlag@buf,w
  3066  04A4  00F6               	movwf	??_waitFlag
  3067  04A5  0868               	movf	_dPacketnum,w
  3068  04A6  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3069  04A7  0084               	movwf	4
  3070  04A8  0876               	movf	??_waitFlag,w
  3071  04A9  1783               	bsf	3,7	;select IRP bank3
  3072  04AA  0080               	movwf	0
  3073                           
  3074                           ;decode_AX25.c: 120: dPacketnum ++;
  3075  04AB  3001               	movlw	1
  3076  04AC  07E8               	addwf	_dPacketnum,f
  3077  04AD  1803               	skipnc
  3078  04AE  0AE9               	incf	_dPacketnum+1,f
  3079  04AF  3000               	movlw	0
  3080  04B0  07E9               	addwf	_dPacketnum+1,f
  3081                           
  3082                           ;decode_AX25.c: 121: for(UINT j=0;j<8;j++){
  3083  04B1  01A8               	clrf	waitFlag@j_120
  3084  04B2  01A9               	clrf	waitFlag@j_120+1
  3085  04B3  3000               	movlw	0
  3086  04B4  0229               	subwf	waitFlag@j_120+1,w
  3087  04B5  3008               	movlw	8
  3088  04B6  1903               	skipnz
  3089  04B7  0228               	subwf	waitFlag@j_120,w
  3090  04B8  1803               	btfsc	3,0
  3091  04B9  2CE2               	goto	l2777
  3092  04BA                     l2763:	
  3093                           
  3094                           ;decode_AX25.c: 122: flag_judge = getbit();
  3095  04BA  120A  158A  2298  120A  118A  	fcall	_getbit
  3096  04BF  0871               	movf	?_getbit+1,w
  3097  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  3098  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  3099  04C2  00BB               	movwf	waitFlag@flag_judge+1
  3100  04C3  0870               	movf	?_getbit,w
  3101  04C4  00BA               	movwf	waitFlag@flag_judge
  3102                           
  3103                           ;decode_AX25.c: 123: buf = buf >> 1;
  3104  04C5  083C               	movf	waitFlag@buf,w
  3105  04C6  00F6               	movwf	??_waitFlag
  3106  04C7  1003               	clrc
  3107  04C8  0C76               	rrf	??_waitFlag,w
  3108  04C9  00F7               	movwf	??_waitFlag+1
  3109  04CA  0877               	movf	??_waitFlag+1,w
  3110  04CB  00BC               	movwf	waitFlag@buf
  3111                           
  3112                           ;decode_AX25.c: 125: buf = buf | 0x00;
  3113  04CC  083A               	movf	waitFlag@flag_judge,w
  3114  04CD  043B               	iorwf	waitFlag@flag_judge+1,w
  3115  04CE  1903               	btfsc	3,2
  3116  04CF  2CD5               	goto	l2773
  3117                           
  3118                           ;decode_AX25.c: 127: buf = buf | 0x80;
  3119                           
  3120                           ;decode_AX25.c: 126: }else{
  3121  04D0  083C               	movf	waitFlag@buf,w
  3122  04D1  3880               	iorlw	128
  3123  04D2  00F6               	movwf	??_waitFlag
  3124  04D3  0876               	movf	??_waitFlag,w
  3125  04D4  00BC               	movwf	waitFlag@buf
  3126  04D5                     l2773:	
  3127  04D5  3001               	movlw	1
  3128  04D6  07A8               	addwf	waitFlag@j_120,f
  3129  04D7  1803               	skipnc
  3130  04D8  0AA9               	incf	waitFlag@j_120+1,f
  3131  04D9  3000               	movlw	0
  3132  04DA  07A9               	addwf	waitFlag@j_120+1,f
  3133  04DB  3000               	movlw	0
  3134  04DC  0229               	subwf	waitFlag@j_120+1,w
  3135  04DD  3008               	movlw	8
  3136  04DE  1903               	skipnz
  3137  04DF  0228               	subwf	waitFlag@j_120,w
  3138  04E0  1C03               	skipc
  3139  04E1  2CBA               	goto	l2763
  3140  04E2                     l2777:	
  3141                           
  3142                           ;decode_AX25.c: 128: }
  3143                           ;decode_AX25.c: 129: }
  3144                           ;decode_AX25.c: 130: if(buf == ("JQ1YCZ"[4] << 1)){
  3145  04E2  300E               	movlw	low (((STR_1+4)-__stringbase)| (0+32768))
  3146  04E3  0084               	movwf	4
  3147  04E4  120A  158A  2000  120A  118A  	fcall	stringdir
  3148  04E9  00F6               	movwf	??_waitFlag
  3149  04EA  01F7               	clrf	??_waitFlag+1
  3150  04EB  1003               	clrc
  3151  04EC  0DF6               	rlf	??_waitFlag,f
  3152  04ED  0DF7               	rlf	??_waitFlag+1,f
  3153  04EE  083C               	movf	waitFlag@buf,w
  3154  04EF  00F8               	movwf	??_waitFlag+2
  3155  04F0  01F9               	clrf	??_waitFlag+3
  3156  04F1  0877               	movf	??_waitFlag+1,w
  3157  04F2  0679               	xorwf	??_waitFlag+3,w
  3158  04F3  1D03               	skipz
  3159  04F4  2CF7               	goto	u2305
  3160  04F5  0876               	movf	??_waitFlag,w
  3161  04F6  0678               	xorwf	??_waitFlag+2,w
  3162  04F7                     u2305:	
  3163  04F7  1D03               	skipz
  3164  04F8  2D64               	goto	l2821
  3165                           
  3166                           ;decode_AX25.c: 131: dPacket[dPacketnum] = buf;
  3167  04F9  083C               	movf	waitFlag@buf,w
  3168  04FA  00F6               	movwf	??_waitFlag
  3169  04FB  0868               	movf	_dPacketnum,w
  3170  04FC  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3171  04FD  0084               	movwf	4
  3172  04FE  0876               	movf	??_waitFlag,w
  3173  04FF  1783               	bsf	3,7	;select IRP bank3
  3174  0500  0080               	movwf	0
  3175                           
  3176                           ;decode_AX25.c: 132: dPacketnum ++;
  3177  0501  3001               	movlw	1
  3178  0502  07E8               	addwf	_dPacketnum,f
  3179  0503  1803               	skipnc
  3180  0504  0AE9               	incf	_dPacketnum+1,f
  3181  0505  3000               	movlw	0
  3182  0506  07E9               	addwf	_dPacketnum+1,f
  3183                           
  3184                           ;decode_AX25.c: 133: for(UINT j=0;j<8;j++){
  3185  0507  01AA               	clrf	waitFlag@j_122
  3186  0508  01AB               	clrf	waitFlag@j_122+1
  3187  0509  3000               	movlw	0
  3188  050A  022B               	subwf	waitFlag@j_122+1,w
  3189  050B  3008               	movlw	8
  3190  050C  1903               	skipnz
  3191  050D  022A               	subwf	waitFlag@j_122,w
  3192  050E  1803               	btfsc	3,0
  3193  050F  2D38               	goto	l2803
  3194  0510                     l2789:	
  3195                           
  3196                           ;decode_AX25.c: 134: flag_judge = getbit();
  3197  0510  120A  158A  2298  120A  118A  	fcall	_getbit
  3198  0515  0871               	movf	?_getbit+1,w
  3199  0516  1283               	bcf	3,5	;RP0=0, select bank0
  3200  0517  1303               	bcf	3,6	;RP1=0, select bank0
  3201  0518  00BB               	movwf	waitFlag@flag_judge+1
  3202  0519  0870               	movf	?_getbit,w
  3203  051A  00BA               	movwf	waitFlag@flag_judge
  3204                           
  3205                           ;decode_AX25.c: 135: buf = buf >> 1;
  3206  051B  083C               	movf	waitFlag@buf,w
  3207  051C  00F6               	movwf	??_waitFlag
  3208  051D  1003               	clrc
  3209  051E  0C76               	rrf	??_waitFlag,w
  3210  051F  00F7               	movwf	??_waitFlag+1
  3211  0520  0877               	movf	??_waitFlag+1,w
  3212  0521  00BC               	movwf	waitFlag@buf
  3213                           
  3214                           ;decode_AX25.c: 137: buf = buf | 0x00;
  3215  0522  083A               	movf	waitFlag@flag_judge,w
  3216  0523  043B               	iorwf	waitFlag@flag_judge+1,w
  3217  0524  1903               	btfsc	3,2
  3218  0525  2D2B               	goto	l2799
  3219                           
  3220                           ;decode_AX25.c: 139: buf = buf | 0x80;
  3221                           
  3222                           ;decode_AX25.c: 138: }else{
  3223  0526  083C               	movf	waitFlag@buf,w
  3224  0527  3880               	iorlw	128
  3225  0528  00F6               	movwf	??_waitFlag
  3226  0529  0876               	movf	??_waitFlag,w
  3227  052A  00BC               	movwf	waitFlag@buf
  3228  052B                     l2799:	
  3229  052B  3001               	movlw	1
  3230  052C  07AA               	addwf	waitFlag@j_122,f
  3231  052D  1803               	skipnc
  3232  052E  0AAB               	incf	waitFlag@j_122+1,f
  3233  052F  3000               	movlw	0
  3234  0530  07AB               	addwf	waitFlag@j_122+1,f
  3235  0531  3000               	movlw	0
  3236  0532  022B               	subwf	waitFlag@j_122+1,w
  3237  0533  3008               	movlw	8
  3238  0534  1903               	skipnz
  3239  0535  022A               	subwf	waitFlag@j_122,w
  3240  0536  1C03               	skipc
  3241  0537  2D10               	goto	l2789
  3242  0538                     l2803:	
  3243                           
  3244                           ;decode_AX25.c: 140: }
  3245                           ;decode_AX25.c: 141: }
  3246                           ;decode_AX25.c: 142: if(buf == ("JQ1YCZ"[5] << 1)){
  3247  0538  300F               	movlw	low (((STR_1+5)-__stringbase)| (0+32768))
  3248  0539  0084               	movwf	4
  3249  053A  120A  158A  2000  120A  118A  	fcall	stringdir
  3250  053F  00F6               	movwf	??_waitFlag
  3251  0540  01F7               	clrf	??_waitFlag+1
  3252  0541  1003               	clrc
  3253  0542  0DF6               	rlf	??_waitFlag,f
  3254  0543  0DF7               	rlf	??_waitFlag+1,f
  3255  0544  083C               	movf	waitFlag@buf,w
  3256  0545  00F8               	movwf	??_waitFlag+2
  3257  0546  01F9               	clrf	??_waitFlag+3
  3258  0547  0877               	movf	??_waitFlag+1,w
  3259  0548  0679               	xorwf	??_waitFlag+3,w
  3260  0549  1D03               	skipz
  3261  054A  2D4D               	goto	u2345
  3262  054B  0876               	movf	??_waitFlag,w
  3263  054C  0678               	xorwf	??_waitFlag+2,w
  3264  054D                     u2345:	
  3265  054D  1D03               	skipz
  3266  054E  2D64               	goto	l2821
  3267                           
  3268                           ;decode_AX25.c: 143: dPacket[dPacketnum] = buf;
  3269  054F  083C               	movf	waitFlag@buf,w
  3270  0550  00F6               	movwf	??_waitFlag
  3271  0551  0868               	movf	_dPacketnum,w
  3272  0552  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3273  0553  0084               	movwf	4
  3274  0554  0876               	movf	??_waitFlag,w
  3275  0555  1783               	bsf	3,7	;select IRP bank3
  3276  0556  0080               	movwf	0
  3277                           
  3278                           ;decode_AX25.c: 144: dPacketnum ++;
  3279  0557  3001               	movlw	1
  3280  0558  07E8               	addwf	_dPacketnum,f
  3281  0559  1803               	skipnc
  3282  055A  0AE9               	incf	_dPacketnum+1,f
  3283  055B  3000               	movlw	0
  3284  055C  07E9               	addwf	_dPacketnum+1,f
  3285                           
  3286                           ;decode_AX25.c: 145: rcv_state ++;
  3287  055D  3001               	movlw	1
  3288  055E  07EA               	addwf	_rcv_state,f
  3289  055F  1803               	skipnc
  3290  0560  0AEB               	incf	_rcv_state+1,f
  3291  0561  3000               	movlw	0
  3292  0562  07EB               	addwf	_rcv_state+1,f
  3293                           
  3294                           ;decode_AX25.c: 146: }else{
  3295  0563  2D66               	goto	l210
  3296  0564                     l2821:	
  3297                           ;decode_AX25.c: 160: }
  3298                           ;decode_AX25.c: 161: }else{
  3299                           
  3300                           ;decode_AX25.c: 159: dPacketnum = 0;
  3301                           
  3302                           ;decode_AX25.c: 157: }
  3303                           ;decode_AX25.c: 158: }else{
  3304                           
  3305                           ;decode_AX25.c: 156: dPacketnum = 0;
  3306                           
  3307                           ;decode_AX25.c: 154: }
  3308                           ;decode_AX25.c: 155: }else{
  3309                           
  3310                           ;decode_AX25.c: 153: dPacketnum = 0;
  3311                           
  3312                           ;decode_AX25.c: 151: }
  3313                           ;decode_AX25.c: 152: }else{
  3314                           
  3315                           ;decode_AX25.c: 150: dPacketnum = 0;
  3316                           
  3317                           ;decode_AX25.c: 148: }
  3318                           ;decode_AX25.c: 149: }else{
  3319                           
  3320                           ;decode_AX25.c: 147: dPacketnum = 0;
  3321                           
  3322                           
  3323                           ;decode_AX25.c: 162: dPacketnum = 0;
  3324  0564  01E8               	clrf	_dPacketnum
  3325  0565  01E9               	clrf	_dPacketnum+1
  3326  0566                     l210:	
  3327                           
  3328                           ;decode_AX25.c: 163: }
  3329                           ;decode_AX25.c: 165: for(UINT j=0;j<8;j++){
  3330  0566  01AC               	clrf	waitFlag@j_124
  3331  0567  01AD               	clrf	waitFlag@j_124+1
  3332  0568  3000               	movlw	0
  3333  0569  022D               	subwf	waitFlag@j_124+1,w
  3334  056A  3008               	movlw	8
  3335  056B  1903               	skipnz
  3336  056C  022C               	subwf	waitFlag@j_124,w
  3337  056D  1803               	btfsc	3,0
  3338  056E  2D97               	goto	l2841
  3339  056F                     l2827:	
  3340                           
  3341                           ;decode_AX25.c: 166: flag_judge = getbit();
  3342  056F  120A  158A  2298  120A  118A  	fcall	_getbit
  3343  0574  0871               	movf	?_getbit+1,w
  3344  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3345  0576  1303               	bcf	3,6	;RP1=0, select bank0
  3346  0577  00BB               	movwf	waitFlag@flag_judge+1
  3347  0578  0870               	movf	?_getbit,w
  3348  0579  00BA               	movwf	waitFlag@flag_judge
  3349                           
  3350                           ;decode_AX25.c: 167: buf = buf >> 1;
  3351  057A  083C               	movf	waitFlag@buf,w
  3352  057B  00F6               	movwf	??_waitFlag
  3353  057C  1003               	clrc
  3354  057D  0C76               	rrf	??_waitFlag,w
  3355  057E  00F7               	movwf	??_waitFlag+1
  3356  057F  0877               	movf	??_waitFlag+1,w
  3357  0580  00BC               	movwf	waitFlag@buf
  3358                           
  3359                           ;decode_AX25.c: 169: buf = buf | 0x00;
  3360  0581  083A               	movf	waitFlag@flag_judge,w
  3361  0582  043B               	iorwf	waitFlag@flag_judge+1,w
  3362  0583  1903               	btfsc	3,2
  3363  0584  2D8A               	goto	l2837
  3364                           
  3365                           ;decode_AX25.c: 171: buf = buf | 0x80;
  3366                           
  3367                           ;decode_AX25.c: 170: }else{
  3368  0585  083C               	movf	waitFlag@buf,w
  3369  0586  3880               	iorlw	128
  3370  0587  00F6               	movwf	??_waitFlag
  3371  0588  0876               	movf	??_waitFlag,w
  3372  0589  00BC               	movwf	waitFlag@buf
  3373  058A                     l2837:	
  3374  058A  3001               	movlw	1
  3375  058B  07AC               	addwf	waitFlag@j_124,f
  3376  058C  1803               	skipnc
  3377  058D  0AAD               	incf	waitFlag@j_124+1,f
  3378  058E  3000               	movlw	0
  3379  058F  07AD               	addwf	waitFlag@j_124+1,f
  3380  0590  3000               	movlw	0
  3381  0591  022D               	subwf	waitFlag@j_124+1,w
  3382  0592  3008               	movlw	8
  3383  0593  1903               	skipnz
  3384  0594  022C               	subwf	waitFlag@j_124,w
  3385  0595  1C03               	skipc
  3386  0596  2D6F               	goto	l2827
  3387  0597                     l2841:	
  3388                           
  3389                           ;decode_AX25.c: 172: }
  3390                           ;decode_AX25.c: 173: }
  3391                           ;decode_AX25.c: 174: dPacket[dPacketnum] = buf;
  3392  0597  083C               	movf	waitFlag@buf,w
  3393  0598  00F6               	movwf	??_waitFlag
  3394  0599  0868               	movf	_dPacketnum,w
  3395  059A  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3396  059B  0084               	movwf	4
  3397  059C  0876               	movf	??_waitFlag,w
  3398  059D  1783               	bsf	3,7	;select IRP bank3
  3399  059E  0080               	movwf	0
  3400                           
  3401                           ;decode_AX25.c: 175: dPacketnum ++;
  3402  059F  3001               	movlw	1
  3403  05A0  07E8               	addwf	_dPacketnum,f
  3404  05A1  1803               	skipnc
  3405  05A2  0AE9               	incf	_dPacketnum+1,f
  3406  05A3  3000               	movlw	0
  3407  05A4  07E9               	addwf	_dPacketnum+1,f
  3408                           
  3409                           ;decode_AX25.c: 176: for(UINT j=0;j<8;j++){
  3410  05A5  01AE               	clrf	waitFlag@j_125
  3411  05A6  01AF               	clrf	waitFlag@j_125+1
  3412  05A7  3000               	movlw	0
  3413  05A8  022F               	subwf	waitFlag@j_125+1,w
  3414  05A9  3008               	movlw	8
  3415  05AA  1903               	skipnz
  3416  05AB  022E               	subwf	waitFlag@j_125,w
  3417  05AC  1803               	btfsc	3,0
  3418  05AD  2DD6               	goto	l2865
  3419  05AE                     l2851:	
  3420                           
  3421                           ;decode_AX25.c: 177: flag_judge = getbit();
  3422  05AE  120A  158A  2298  120A  118A  	fcall	_getbit
  3423  05B3  0871               	movf	?_getbit+1,w
  3424  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  3425  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  3426  05B6  00BB               	movwf	waitFlag@flag_judge+1
  3427  05B7  0870               	movf	?_getbit,w
  3428  05B8  00BA               	movwf	waitFlag@flag_judge
  3429                           
  3430                           ;decode_AX25.c: 178: buf = buf >> 1;
  3431  05B9  083C               	movf	waitFlag@buf,w
  3432  05BA  00F6               	movwf	??_waitFlag
  3433  05BB  1003               	clrc
  3434  05BC  0C76               	rrf	??_waitFlag,w
  3435  05BD  00F7               	movwf	??_waitFlag+1
  3436  05BE  0877               	movf	??_waitFlag+1,w
  3437  05BF  00BC               	movwf	waitFlag@buf
  3438                           
  3439                           ;decode_AX25.c: 180: buf = buf | 0x00;
  3440  05C0  083A               	movf	waitFlag@flag_judge,w
  3441  05C1  043B               	iorwf	waitFlag@flag_judge+1,w
  3442  05C2  1903               	btfsc	3,2
  3443  05C3  2DC9               	goto	l2861
  3444                           
  3445                           ;decode_AX25.c: 182: buf = buf | 0x80;
  3446                           
  3447                           ;decode_AX25.c: 181: }else{
  3448  05C4  083C               	movf	waitFlag@buf,w
  3449  05C5  3880               	iorlw	128
  3450  05C6  00F6               	movwf	??_waitFlag
  3451  05C7  0876               	movf	??_waitFlag,w
  3452  05C8  00BC               	movwf	waitFlag@buf
  3453  05C9                     l2861:	
  3454  05C9  3001               	movlw	1
  3455  05CA  07AE               	addwf	waitFlag@j_125,f
  3456  05CB  1803               	skipnc
  3457  05CC  0AAF               	incf	waitFlag@j_125+1,f
  3458  05CD  3000               	movlw	0
  3459  05CE  07AF               	addwf	waitFlag@j_125+1,f
  3460  05CF  3000               	movlw	0
  3461  05D0  022F               	subwf	waitFlag@j_125+1,w
  3462  05D1  3008               	movlw	8
  3463  05D2  1903               	skipnz
  3464  05D3  022E               	subwf	waitFlag@j_125,w
  3465  05D4  1C03               	skipc
  3466  05D5  2DAE               	goto	l2851
  3467  05D6                     l2865:	
  3468                           
  3469                           ;decode_AX25.c: 183: }
  3470                           ;decode_AX25.c: 184: }
  3471                           ;decode_AX25.c: 185: if(buf == ("JQ1ZHX"[0] << 1)){
  3472  05D6  3003               	movlw	low (STR_7-__stringbase)
  3473  05D7  0084               	movwf	4
  3474  05D8  120A  158A  2000  120A  118A  	fcall	stringdir
  3475  05DD  00F6               	movwf	??_waitFlag
  3476  05DE  01F7               	clrf	??_waitFlag+1
  3477  05DF  1003               	clrc
  3478  05E0  0DF6               	rlf	??_waitFlag,f
  3479  05E1  0DF7               	rlf	??_waitFlag+1,f
  3480  05E2  083C               	movf	waitFlag@buf,w
  3481  05E3  00F8               	movwf	??_waitFlag+2
  3482  05E4  01F9               	clrf	??_waitFlag+3
  3483  05E5  0877               	movf	??_waitFlag+1,w
  3484  05E6  0679               	xorwf	??_waitFlag+3,w
  3485  05E7  1D03               	skipz
  3486  05E8  2DEB               	goto	u2415
  3487  05E9  0876               	movf	??_waitFlag,w
  3488  05EA  0678               	xorwf	??_waitFlag+2,w
  3489  05EB                     u2415:	
  3490  05EB  1D03               	skipz
  3491  05EC  2FB0               	goto	l3013
  3492                           
  3493                           ;decode_AX25.c: 186: dPacket[dPacketnum] = buf;
  3494  05ED  083C               	movf	waitFlag@buf,w
  3495  05EE  00F6               	movwf	??_waitFlag
  3496  05EF  0868               	movf	_dPacketnum,w
  3497  05F0  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3498  05F1  0084               	movwf	4
  3499  05F2  0876               	movf	??_waitFlag,w
  3500  05F3  1783               	bsf	3,7	;select IRP bank3
  3501  05F4  0080               	movwf	0
  3502                           
  3503                           ;decode_AX25.c: 187: dPacketnum ++;
  3504  05F5  3001               	movlw	1
  3505  05F6  07E8               	addwf	_dPacketnum,f
  3506  05F7  1803               	skipnc
  3507  05F8  0AE9               	incf	_dPacketnum+1,f
  3508  05F9  3000               	movlw	0
  3509  05FA  07E9               	addwf	_dPacketnum+1,f
  3510                           
  3511                           ;decode_AX25.c: 188: for(UINT j=0;j<8;j++){
  3512  05FB  01B0               	clrf	waitFlag@j_127
  3513  05FC  01B1               	clrf	waitFlag@j_127+1
  3514  05FD  3000               	movlw	0
  3515  05FE  0231               	subwf	waitFlag@j_127+1,w
  3516  05FF  3008               	movlw	8
  3517  0600  1903               	skipnz
  3518  0601  0230               	subwf	waitFlag@j_127,w
  3519  0602  1803               	btfsc	3,0
  3520  0603  2E2C               	goto	l2891
  3521  0604                     l2877:	
  3522                           
  3523                           ;decode_AX25.c: 189: flag_judge = getbit();
  3524  0604  120A  158A  2298  120A  118A  	fcall	_getbit
  3525  0609  0871               	movf	?_getbit+1,w
  3526  060A  1283               	bcf	3,5	;RP0=0, select bank0
  3527  060B  1303               	bcf	3,6	;RP1=0, select bank0
  3528  060C  00BB               	movwf	waitFlag@flag_judge+1
  3529  060D  0870               	movf	?_getbit,w
  3530  060E  00BA               	movwf	waitFlag@flag_judge
  3531                           
  3532                           ;decode_AX25.c: 190: buf = buf >> 1;
  3533  060F  083C               	movf	waitFlag@buf,w
  3534  0610  00F6               	movwf	??_waitFlag
  3535  0611  1003               	clrc
  3536  0612  0C76               	rrf	??_waitFlag,w
  3537  0613  00F7               	movwf	??_waitFlag+1
  3538  0614  0877               	movf	??_waitFlag+1,w
  3539  0615  00BC               	movwf	waitFlag@buf
  3540                           
  3541                           ;decode_AX25.c: 192: buf = buf | 0x00;
  3542  0616  083A               	movf	waitFlag@flag_judge,w
  3543  0617  043B               	iorwf	waitFlag@flag_judge+1,w
  3544  0618  1903               	btfsc	3,2
  3545  0619  2E1F               	goto	l2887
  3546                           
  3547                           ;decode_AX25.c: 194: buf = buf | 0x80;
  3548                           
  3549                           ;decode_AX25.c: 193: }else{
  3550  061A  083C               	movf	waitFlag@buf,w
  3551  061B  3880               	iorlw	128
  3552  061C  00F6               	movwf	??_waitFlag
  3553  061D  0876               	movf	??_waitFlag,w
  3554  061E  00BC               	movwf	waitFlag@buf
  3555  061F                     l2887:	
  3556  061F  3001               	movlw	1
  3557  0620  07B0               	addwf	waitFlag@j_127,f
  3558  0621  1803               	skipnc
  3559  0622  0AB1               	incf	waitFlag@j_127+1,f
  3560  0623  3000               	movlw	0
  3561  0624  07B1               	addwf	waitFlag@j_127+1,f
  3562  0625  3000               	movlw	0
  3563  0626  0231               	subwf	waitFlag@j_127+1,w
  3564  0627  3008               	movlw	8
  3565  0628  1903               	skipnz
  3566  0629  0230               	subwf	waitFlag@j_127,w
  3567  062A  1C03               	skipc
  3568  062B  2E04               	goto	l2877
  3569  062C                     l2891:	
  3570                           
  3571                           ;decode_AX25.c: 195: }
  3572                           ;decode_AX25.c: 196: }
  3573                           ;decode_AX25.c: 197: if(buf == ("JQ1ZHX"[1] << 1)){
  3574  062C  3004               	movlw	low (((STR_7+1)-__stringbase)| (0+32768))
  3575  062D  0084               	movwf	4
  3576  062E  120A  158A  2000  120A  118A  	fcall	stringdir
  3577  0633  00F6               	movwf	??_waitFlag
  3578  0634  01F7               	clrf	??_waitFlag+1
  3579  0635  1003               	clrc
  3580  0636  0DF6               	rlf	??_waitFlag,f
  3581  0637  0DF7               	rlf	??_waitFlag+1,f
  3582  0638  083C               	movf	waitFlag@buf,w
  3583  0639  00F8               	movwf	??_waitFlag+2
  3584  063A  01F9               	clrf	??_waitFlag+3
  3585  063B  0877               	movf	??_waitFlag+1,w
  3586  063C  0679               	xorwf	??_waitFlag+3,w
  3587  063D  1D03               	skipz
  3588  063E  2E41               	goto	u2455
  3589  063F  0876               	movf	??_waitFlag,w
  3590  0640  0678               	xorwf	??_waitFlag+2,w
  3591  0641                     u2455:	
  3592  0641  1D03               	skipz
  3593  0642  2FB0               	goto	l3013
  3594                           
  3595                           ;decode_AX25.c: 198: dPacket[dPacketnum] = buf;
  3596  0643  083C               	movf	waitFlag@buf,w
  3597  0644  00F6               	movwf	??_waitFlag
  3598  0645  0868               	movf	_dPacketnum,w
  3599  0646  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3600  0647  0084               	movwf	4
  3601  0648  0876               	movf	??_waitFlag,w
  3602  0649  1783               	bsf	3,7	;select IRP bank3
  3603  064A  0080               	movwf	0
  3604                           
  3605                           ;decode_AX25.c: 199: dPacketnum ++;
  3606  064B  3001               	movlw	1
  3607  064C  07E8               	addwf	_dPacketnum,f
  3608  064D  1803               	skipnc
  3609  064E  0AE9               	incf	_dPacketnum+1,f
  3610  064F  3000               	movlw	0
  3611  0650  07E9               	addwf	_dPacketnum+1,f
  3612                           
  3613                           ;decode_AX25.c: 200: for(UINT j=0;j<8;j++){
  3614  0651  01B2               	clrf	waitFlag@j_129
  3615  0652  01B3               	clrf	waitFlag@j_129+1
  3616  0653  3000               	movlw	0
  3617  0654  0233               	subwf	waitFlag@j_129+1,w
  3618  0655  3008               	movlw	8
  3619  0656  1903               	skipnz
  3620  0657  0232               	subwf	waitFlag@j_129,w
  3621  0658  1803               	btfsc	3,0
  3622  0659  2E82               	goto	l2917
  3623  065A                     l2903:	
  3624                           
  3625                           ;decode_AX25.c: 201: flag_judge = getbit();
  3626  065A  120A  158A  2298  120A  118A  	fcall	_getbit
  3627  065F  0871               	movf	?_getbit+1,w
  3628  0660  1283               	bcf	3,5	;RP0=0, select bank0
  3629  0661  1303               	bcf	3,6	;RP1=0, select bank0
  3630  0662  00BB               	movwf	waitFlag@flag_judge+1
  3631  0663  0870               	movf	?_getbit,w
  3632  0664  00BA               	movwf	waitFlag@flag_judge
  3633                           
  3634                           ;decode_AX25.c: 202: buf = buf >> 1;
  3635  0665  083C               	movf	waitFlag@buf,w
  3636  0666  00F6               	movwf	??_waitFlag
  3637  0667  1003               	clrc
  3638  0668  0C76               	rrf	??_waitFlag,w
  3639  0669  00F7               	movwf	??_waitFlag+1
  3640  066A  0877               	movf	??_waitFlag+1,w
  3641  066B  00BC               	movwf	waitFlag@buf
  3642                           
  3643                           ;decode_AX25.c: 204: buf = buf | 0x00;
  3644  066C  083A               	movf	waitFlag@flag_judge,w
  3645  066D  043B               	iorwf	waitFlag@flag_judge+1,w
  3646  066E  1903               	btfsc	3,2
  3647  066F  2E75               	goto	l2913
  3648                           
  3649                           ;decode_AX25.c: 206: buf = buf | 0x80;
  3650                           
  3651                           ;decode_AX25.c: 205: }else{
  3652  0670  083C               	movf	waitFlag@buf,w
  3653  0671  3880               	iorlw	128
  3654  0672  00F6               	movwf	??_waitFlag
  3655  0673  0876               	movf	??_waitFlag,w
  3656  0674  00BC               	movwf	waitFlag@buf
  3657  0675                     l2913:	
  3658  0675  3001               	movlw	1
  3659  0676  07B2               	addwf	waitFlag@j_129,f
  3660  0677  1803               	skipnc
  3661  0678  0AB3               	incf	waitFlag@j_129+1,f
  3662  0679  3000               	movlw	0
  3663  067A  07B3               	addwf	waitFlag@j_129+1,f
  3664  067B  3000               	movlw	0
  3665  067C  0233               	subwf	waitFlag@j_129+1,w
  3666  067D  3008               	movlw	8
  3667  067E  1903               	skipnz
  3668  067F  0232               	subwf	waitFlag@j_129,w
  3669  0680  1C03               	skipc
  3670  0681  2E5A               	goto	l2903
  3671  0682                     l2917:	
  3672                           
  3673                           ;decode_AX25.c: 207: }
  3674                           ;decode_AX25.c: 208: }
  3675                           ;decode_AX25.c: 209: if(buf == ("JQ1ZHX"[2] << 1)){
  3676  0682  3005               	movlw	low (((STR_7+2)-__stringbase)| (0+32768))
  3677  0683  0084               	movwf	4
  3678  0684  120A  158A  2000  120A  118A  	fcall	stringdir
  3679  0689  00F6               	movwf	??_waitFlag
  3680  068A  01F7               	clrf	??_waitFlag+1
  3681  068B  1003               	clrc
  3682  068C  0DF6               	rlf	??_waitFlag,f
  3683  068D  0DF7               	rlf	??_waitFlag+1,f
  3684  068E  083C               	movf	waitFlag@buf,w
  3685  068F  00F8               	movwf	??_waitFlag+2
  3686  0690  01F9               	clrf	??_waitFlag+3
  3687  0691  0877               	movf	??_waitFlag+1,w
  3688  0692  0679               	xorwf	??_waitFlag+3,w
  3689  0693  1D03               	skipz
  3690  0694  2E97               	goto	u2495
  3691  0695  0876               	movf	??_waitFlag,w
  3692  0696  0678               	xorwf	??_waitFlag+2,w
  3693  0697                     u2495:	
  3694  0697  1D03               	skipz
  3695  0698  2FB0               	goto	l3013
  3696                           
  3697                           ;decode_AX25.c: 210: dPacket[dPacketnum] = buf;
  3698  0699  083C               	movf	waitFlag@buf,w
  3699  069A  00F6               	movwf	??_waitFlag
  3700  069B  0868               	movf	_dPacketnum,w
  3701  069C  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3702  069D  0084               	movwf	4
  3703  069E  0876               	movf	??_waitFlag,w
  3704  069F  1783               	bsf	3,7	;select IRP bank3
  3705  06A0  0080               	movwf	0
  3706                           
  3707                           ;decode_AX25.c: 211: dPacketnum ++;
  3708  06A1  3001               	movlw	1
  3709  06A2  07E8               	addwf	_dPacketnum,f
  3710  06A3  1803               	skipnc
  3711  06A4  0AE9               	incf	_dPacketnum+1,f
  3712  06A5  3000               	movlw	0
  3713  06A6  07E9               	addwf	_dPacketnum+1,f
  3714                           
  3715                           ;decode_AX25.c: 212: for(UINT j=0;j<8;j++){
  3716  06A7  01B4               	clrf	waitFlag@j_131
  3717  06A8  01B5               	clrf	waitFlag@j_131+1
  3718  06A9  3000               	movlw	0
  3719  06AA  0235               	subwf	waitFlag@j_131+1,w
  3720  06AB  3008               	movlw	8
  3721  06AC  1903               	skipnz
  3722  06AD  0234               	subwf	waitFlag@j_131,w
  3723  06AE  1803               	btfsc	3,0
  3724  06AF  2ED8               	goto	l2943
  3725  06B0                     l2929:	
  3726                           
  3727                           ;decode_AX25.c: 213: flag_judge = getbit();
  3728  06B0  120A  158A  2298  120A  118A  	fcall	_getbit
  3729  06B5  0871               	movf	?_getbit+1,w
  3730  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  3731  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  3732  06B8  00BB               	movwf	waitFlag@flag_judge+1
  3733  06B9  0870               	movf	?_getbit,w
  3734  06BA  00BA               	movwf	waitFlag@flag_judge
  3735                           
  3736                           ;decode_AX25.c: 214: buf = buf >> 1;
  3737  06BB  083C               	movf	waitFlag@buf,w
  3738  06BC  00F6               	movwf	??_waitFlag
  3739  06BD  1003               	clrc
  3740  06BE  0C76               	rrf	??_waitFlag,w
  3741  06BF  00F7               	movwf	??_waitFlag+1
  3742  06C0  0877               	movf	??_waitFlag+1,w
  3743  06C1  00BC               	movwf	waitFlag@buf
  3744                           
  3745                           ;decode_AX25.c: 216: buf = buf | 0x00;
  3746  06C2  083A               	movf	waitFlag@flag_judge,w
  3747  06C3  043B               	iorwf	waitFlag@flag_judge+1,w
  3748  06C4  1903               	btfsc	3,2
  3749  06C5  2ECB               	goto	l2939
  3750                           
  3751                           ;decode_AX25.c: 218: buf = buf | 0x80;
  3752                           
  3753                           ;decode_AX25.c: 217: }else{
  3754  06C6  083C               	movf	waitFlag@buf,w
  3755  06C7  3880               	iorlw	128
  3756  06C8  00F6               	movwf	??_waitFlag
  3757  06C9  0876               	movf	??_waitFlag,w
  3758  06CA  00BC               	movwf	waitFlag@buf
  3759  06CB                     l2939:	
  3760  06CB  3001               	movlw	1
  3761  06CC  07B4               	addwf	waitFlag@j_131,f
  3762  06CD  1803               	skipnc
  3763  06CE  0AB5               	incf	waitFlag@j_131+1,f
  3764  06CF  3000               	movlw	0
  3765  06D0  07B5               	addwf	waitFlag@j_131+1,f
  3766  06D1  3000               	movlw	0
  3767  06D2  0235               	subwf	waitFlag@j_131+1,w
  3768  06D3  3008               	movlw	8
  3769  06D4  1903               	skipnz
  3770  06D5  0234               	subwf	waitFlag@j_131,w
  3771  06D6  1C03               	skipc
  3772  06D7  2EB0               	goto	l2929
  3773  06D8                     l2943:	
  3774                           
  3775                           ;decode_AX25.c: 219: }
  3776                           ;decode_AX25.c: 220: }
  3777                           ;decode_AX25.c: 221: if(buf == ("JQ1ZHX"[3] << 1)){
  3778  06D8  3006               	movlw	low (((STR_7+3)-__stringbase)| (0+32768))
  3779  06D9  0084               	movwf	4
  3780  06DA  120A  158A  2000  120A  118A  	fcall	stringdir
  3781  06DF  00F6               	movwf	??_waitFlag
  3782  06E0  01F7               	clrf	??_waitFlag+1
  3783  06E1  1003               	clrc
  3784  06E2  0DF6               	rlf	??_waitFlag,f
  3785  06E3  0DF7               	rlf	??_waitFlag+1,f
  3786  06E4  083C               	movf	waitFlag@buf,w
  3787  06E5  00F8               	movwf	??_waitFlag+2
  3788  06E6  01F9               	clrf	??_waitFlag+3
  3789  06E7  0877               	movf	??_waitFlag+1,w
  3790  06E8  0679               	xorwf	??_waitFlag+3,w
  3791  06E9  1D03               	skipz
  3792  06EA  2EED               	goto	u2535
  3793  06EB  0876               	movf	??_waitFlag,w
  3794  06EC  0678               	xorwf	??_waitFlag+2,w
  3795  06ED                     u2535:	
  3796  06ED  1D03               	skipz
  3797  06EE  2FB0               	goto	l3013
  3798                           
  3799                           ;decode_AX25.c: 222: dPacket[dPacketnum] = buf;
  3800  06EF  083C               	movf	waitFlag@buf,w
  3801  06F0  00F6               	movwf	??_waitFlag
  3802  06F1  0868               	movf	_dPacketnum,w
  3803  06F2  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3804  06F3  0084               	movwf	4
  3805  06F4  0876               	movf	??_waitFlag,w
  3806  06F5  1783               	bsf	3,7	;select IRP bank3
  3807  06F6  0080               	movwf	0
  3808                           
  3809                           ;decode_AX25.c: 223: dPacketnum ++;
  3810  06F7  3001               	movlw	1
  3811  06F8  07E8               	addwf	_dPacketnum,f
  3812  06F9  1803               	skipnc
  3813  06FA  0AE9               	incf	_dPacketnum+1,f
  3814  06FB  3000               	movlw	0
  3815  06FC  07E9               	addwf	_dPacketnum+1,f
  3816                           
  3817                           ;decode_AX25.c: 224: for(UINT j=0;j<8;j++){
  3818  06FD  01B6               	clrf	waitFlag@j_133
  3819  06FE  01B7               	clrf	waitFlag@j_133+1
  3820  06FF  3000               	movlw	0
  3821  0700  0237               	subwf	waitFlag@j_133+1,w
  3822  0701  3008               	movlw	8
  3823  0702  1903               	skipnz
  3824  0703  0236               	subwf	waitFlag@j_133,w
  3825  0704  1803               	btfsc	3,0
  3826  0705  2F2E               	goto	l2969
  3827  0706                     l2955:	
  3828                           
  3829                           ;decode_AX25.c: 225: flag_judge = getbit();
  3830  0706  120A  158A  2298  120A  118A  	fcall	_getbit
  3831  070B  0871               	movf	?_getbit+1,w
  3832  070C  1283               	bcf	3,5	;RP0=0, select bank0
  3833  070D  1303               	bcf	3,6	;RP1=0, select bank0
  3834  070E  00BB               	movwf	waitFlag@flag_judge+1
  3835  070F  0870               	movf	?_getbit,w
  3836  0710  00BA               	movwf	waitFlag@flag_judge
  3837                           
  3838                           ;decode_AX25.c: 226: buf = buf >> 1;
  3839  0711  083C               	movf	waitFlag@buf,w
  3840  0712  00F6               	movwf	??_waitFlag
  3841  0713  1003               	clrc
  3842  0714  0C76               	rrf	??_waitFlag,w
  3843  0715  00F7               	movwf	??_waitFlag+1
  3844  0716  0877               	movf	??_waitFlag+1,w
  3845  0717  00BC               	movwf	waitFlag@buf
  3846                           
  3847                           ;decode_AX25.c: 228: buf = buf | 0x00;
  3848  0718  083A               	movf	waitFlag@flag_judge,w
  3849  0719  043B               	iorwf	waitFlag@flag_judge+1,w
  3850  071A  1903               	btfsc	3,2
  3851  071B  2F21               	goto	l2965
  3852                           
  3853                           ;decode_AX25.c: 230: buf = buf | 0x80;
  3854                           
  3855                           ;decode_AX25.c: 229: }else{
  3856  071C  083C               	movf	waitFlag@buf,w
  3857  071D  3880               	iorlw	128
  3858  071E  00F6               	movwf	??_waitFlag
  3859  071F  0876               	movf	??_waitFlag,w
  3860  0720  00BC               	movwf	waitFlag@buf
  3861  0721                     l2965:	
  3862  0721  3001               	movlw	1
  3863  0722  07B6               	addwf	waitFlag@j_133,f
  3864  0723  1803               	skipnc
  3865  0724  0AB7               	incf	waitFlag@j_133+1,f
  3866  0725  3000               	movlw	0
  3867  0726  07B7               	addwf	waitFlag@j_133+1,f
  3868  0727  3000               	movlw	0
  3869  0728  0237               	subwf	waitFlag@j_133+1,w
  3870  0729  3008               	movlw	8
  3871  072A  1903               	skipnz
  3872  072B  0236               	subwf	waitFlag@j_133,w
  3873  072C  1C03               	skipc
  3874  072D  2F06               	goto	l2955
  3875  072E                     l2969:	
  3876                           
  3877                           ;decode_AX25.c: 231: }
  3878                           ;decode_AX25.c: 232: }
  3879                           ;decode_AX25.c: 233: if(buf == ("JQ1ZHX"[4] << 1)){
  3880  072E  3007               	movlw	low (((STR_7+4)-__stringbase)| (0+32768))
  3881  072F  0084               	movwf	4
  3882  0730  120A  158A  2000  120A  118A  	fcall	stringdir
  3883  0735  00F6               	movwf	??_waitFlag
  3884  0736  01F7               	clrf	??_waitFlag+1
  3885  0737  1003               	clrc
  3886  0738  0DF6               	rlf	??_waitFlag,f
  3887  0739  0DF7               	rlf	??_waitFlag+1,f
  3888  073A  083C               	movf	waitFlag@buf,w
  3889  073B  00F8               	movwf	??_waitFlag+2
  3890  073C  01F9               	clrf	??_waitFlag+3
  3891  073D  0877               	movf	??_waitFlag+1,w
  3892  073E  0679               	xorwf	??_waitFlag+3,w
  3893  073F  1D03               	skipz
  3894  0740  2F43               	goto	u2575
  3895  0741  0876               	movf	??_waitFlag,w
  3896  0742  0678               	xorwf	??_waitFlag+2,w
  3897  0743                     u2575:	
  3898  0743  1D03               	skipz
  3899  0744  2FB0               	goto	l3013
  3900                           
  3901                           ;decode_AX25.c: 234: dPacket[dPacketnum] = buf;
  3902  0745  083C               	movf	waitFlag@buf,w
  3903  0746  00F6               	movwf	??_waitFlag
  3904  0747  0868               	movf	_dPacketnum,w
  3905  0748  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3906  0749  0084               	movwf	4
  3907  074A  0876               	movf	??_waitFlag,w
  3908  074B  1783               	bsf	3,7	;select IRP bank3
  3909  074C  0080               	movwf	0
  3910                           
  3911                           ;decode_AX25.c: 235: dPacketnum ++;
  3912  074D  3001               	movlw	1
  3913  074E  07E8               	addwf	_dPacketnum,f
  3914  074F  1803               	skipnc
  3915  0750  0AE9               	incf	_dPacketnum+1,f
  3916  0751  3000               	movlw	0
  3917  0752  07E9               	addwf	_dPacketnum+1,f
  3918                           
  3919                           ;decode_AX25.c: 236: for(UINT j=0;j<8;j++){
  3920  0753  01B8               	clrf	waitFlag@j_135
  3921  0754  01B9               	clrf	waitFlag@j_135+1
  3922  0755  3000               	movlw	0
  3923  0756  0239               	subwf	waitFlag@j_135+1,w
  3924  0757  3008               	movlw	8
  3925  0758  1903               	skipnz
  3926  0759  0238               	subwf	waitFlag@j_135,w
  3927  075A  1803               	btfsc	3,0
  3928  075B  2F84               	goto	l2995
  3929  075C                     l2981:	
  3930                           
  3931                           ;decode_AX25.c: 237: flag_judge = getbit();
  3932  075C  120A  158A  2298  120A  118A  	fcall	_getbit
  3933  0761  0871               	movf	?_getbit+1,w
  3934  0762  1283               	bcf	3,5	;RP0=0, select bank0
  3935  0763  1303               	bcf	3,6	;RP1=0, select bank0
  3936  0764  00BB               	movwf	waitFlag@flag_judge+1
  3937  0765  0870               	movf	?_getbit,w
  3938  0766  00BA               	movwf	waitFlag@flag_judge
  3939                           
  3940                           ;decode_AX25.c: 238: buf = buf >> 1;
  3941  0767  083C               	movf	waitFlag@buf,w
  3942  0768  00F6               	movwf	??_waitFlag
  3943  0769  1003               	clrc
  3944  076A  0C76               	rrf	??_waitFlag,w
  3945  076B  00F7               	movwf	??_waitFlag+1
  3946  076C  0877               	movf	??_waitFlag+1,w
  3947  076D  00BC               	movwf	waitFlag@buf
  3948                           
  3949                           ;decode_AX25.c: 240: buf = buf | 0x00;
  3950  076E  083A               	movf	waitFlag@flag_judge,w
  3951  076F  043B               	iorwf	waitFlag@flag_judge+1,w
  3952  0770  1903               	btfsc	3,2
  3953  0771  2F77               	goto	l2991
  3954                           
  3955                           ;decode_AX25.c: 242: buf = buf | 0x80;
  3956                           
  3957                           ;decode_AX25.c: 241: }else{
  3958  0772  083C               	movf	waitFlag@buf,w
  3959  0773  3880               	iorlw	128
  3960  0774  00F6               	movwf	??_waitFlag
  3961  0775  0876               	movf	??_waitFlag,w
  3962  0776  00BC               	movwf	waitFlag@buf
  3963  0777                     l2991:	
  3964  0777  3001               	movlw	1
  3965  0778  07B8               	addwf	waitFlag@j_135,f
  3966  0779  1803               	skipnc
  3967  077A  0AB9               	incf	waitFlag@j_135+1,f
  3968  077B  3000               	movlw	0
  3969  077C  07B9               	addwf	waitFlag@j_135+1,f
  3970  077D  3000               	movlw	0
  3971  077E  0239               	subwf	waitFlag@j_135+1,w
  3972  077F  3008               	movlw	8
  3973  0780  1903               	skipnz
  3974  0781  0238               	subwf	waitFlag@j_135,w
  3975  0782  1C03               	skipc
  3976  0783  2F5C               	goto	l2981
  3977  0784                     l2995:	
  3978                           
  3979                           ;decode_AX25.c: 243: }
  3980                           ;decode_AX25.c: 244: }
  3981                           ;decode_AX25.c: 245: if(buf == ("JQ1ZHX"[5] << 1)){
  3982  0784  3008               	movlw	low (((STR_7+5)-__stringbase)| (0+32768))
  3983  0785  0084               	movwf	4
  3984  0786  120A  158A  2000  120A  118A  	fcall	stringdir
  3985  078B  00F6               	movwf	??_waitFlag
  3986  078C  01F7               	clrf	??_waitFlag+1
  3987  078D  1003               	clrc
  3988  078E  0DF6               	rlf	??_waitFlag,f
  3989  078F  0DF7               	rlf	??_waitFlag+1,f
  3990  0790  083C               	movf	waitFlag@buf,w
  3991  0791  00F8               	movwf	??_waitFlag+2
  3992  0792  01F9               	clrf	??_waitFlag+3
  3993  0793  0877               	movf	??_waitFlag+1,w
  3994  0794  0679               	xorwf	??_waitFlag+3,w
  3995  0795  1D03               	skipz
  3996  0796  2F99               	goto	u2615
  3997  0797  0876               	movf	??_waitFlag,w
  3998  0798  0678               	xorwf	??_waitFlag+2,w
  3999  0799                     u2615:	
  4000  0799  1D03               	skipz
  4001  079A  2FB0               	goto	l3013
  4002                           
  4003                           ;decode_AX25.c: 246: dPacket[dPacketnum] = buf;
  4004  079B  083C               	movf	waitFlag@buf,w
  4005  079C  00F6               	movwf	??_waitFlag
  4006  079D  0868               	movf	_dPacketnum,w
  4007  079E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4008  079F  0084               	movwf	4
  4009  07A0  0876               	movf	??_waitFlag,w
  4010  07A1  1783               	bsf	3,7	;select IRP bank3
  4011  07A2  0080               	movwf	0
  4012                           
  4013                           ;decode_AX25.c: 247: dPacketnum ++;
  4014  07A3  3001               	movlw	1
  4015  07A4  07E8               	addwf	_dPacketnum,f
  4016  07A5  1803               	skipnc
  4017  07A6  0AE9               	incf	_dPacketnum+1,f
  4018  07A7  3000               	movlw	0
  4019  07A8  07E9               	addwf	_dPacketnum+1,f
  4020                           
  4021                           ;decode_AX25.c: 248: rcv_state ++;
  4022  07A9  3001               	movlw	1
  4023  07AA  07EA               	addwf	_rcv_state,f
  4024  07AB  1803               	skipnc
  4025  07AC  0AEB               	incf	_rcv_state+1,f
  4026  07AD  3000               	movlw	0
  4027  07AE  07EB               	addwf	_rcv_state+1,f
  4028                           
  4029                           ;decode_AX25.c: 249: }else{
  4030  07AF  2B2F               	goto	l3015
  4031  07B0                     l3013:	
  4032                           ;decode_AX25.c: 268: }
  4033                           ;decode_AX25.c: 269: }else{
  4034                           
  4035                           ;decode_AX25.c: 267: rcv_state = 0;
  4036                           
  4037                           ;decode_AX25.c: 266: dPacketnum = 0;
  4038                           
  4039                           ;decode_AX25.c: 264: }
  4040                           ;decode_AX25.c: 265: }else{
  4041                           
  4042                           ;decode_AX25.c: 263: rcv_state = 0;
  4043                           
  4044                           ;decode_AX25.c: 262: dPacketnum = 0;
  4045                           
  4046                           ;decode_AX25.c: 260: }
  4047                           ;decode_AX25.c: 261: }else{
  4048                           
  4049                           ;decode_AX25.c: 259: rcv_state = 0;
  4050                           
  4051                           ;decode_AX25.c: 258: dPacketnum = 0;
  4052                           
  4053                           ;decode_AX25.c: 256: }
  4054                           ;decode_AX25.c: 257: }else{
  4055                           
  4056                           ;decode_AX25.c: 255: rcv_state = 0;
  4057                           
  4058                           ;decode_AX25.c: 254: dPacketnum = 0;
  4059                           
  4060                           ;decode_AX25.c: 252: }
  4061                           ;decode_AX25.c: 253: }else{
  4062                           
  4063                           ;decode_AX25.c: 251: rcv_state = 0;
  4064                           
  4065                           ;decode_AX25.c: 250: dPacketnum = 0;
  4066                           
  4067                           
  4068                           ;decode_AX25.c: 270: dPacketnum = 0;
  4069  07B0  01E8               	clrf	_dPacketnum
  4070  07B1  01E9               	clrf	_dPacketnum+1
  4071  07B2  2B2D               	goto	L6
  4072  07B3                     __end_of_waitFlag:	
  4073                           
  4074                           	psect	text5
  4075  0BF8                     __ptext5:	
  4076 ;; *************** function _getdata *****************
  4077 ;; Defined at:
  4078 ;;		line 278 in file "decode_AX25.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;		None
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;  dbitstatus      2    4[BANK0 ] unsigned int 
  4083 ;;  dstuff          2    2[BANK0 ] unsigned int 
  4084 ;;  bufstore_cou    2    0[BANK0 ] unsigned int 
  4085 ;;  buf             1    6[BANK0 ] unsigned char 
  4086 ;;  dammy_data      1    0        unsigned char 
  4087 ;; Return value:  Size  Location     Type
  4088 ;;                  1    wreg      void 
  4089 ;; Registers used:
  4090 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4096 ;;      Params:         0       0       0       0       0
  4097 ;;      Locals:         0       7       0       0       0
  4098 ;;      Temps:          2       0       0       0       0
  4099 ;;      Totals:         2       7       0       0       0
  4100 ;;Total ram usage:        9 bytes
  4101 ;; Hardware stack levels used:    1
  4102 ;; Hardware stack levels required when called:    1
  4103 ;; This function calls:
  4104 ;;		_getbit
  4105 ;; This function is called by:
  4106 ;;		_ReceivePacket_data
  4107 ;;		_ReceivePacket
  4108 ;; This function uses a non-reentrant model
  4109 ;;
  4110                           
  4111                           
  4112                           ;psect for function _getdata
  4113  0BF8                     _getdata:	
  4114                           
  4115                           ;decode_AX25.c: 279: UBYTE buf = 0x00;
  4116                           
  4117                           ;incstack = 0
  4118                           ; Regs used in _getdata: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4119  0BF8  1283               	bcf	3,5	;RP0=0, select bank0
  4120  0BF9  1303               	bcf	3,6	;RP1=0, select bank0
  4121  0BFA  01A6               	clrf	getdata@buf
  4122                           
  4123                           ;decode_AX25.c: 280: UINT dstuff = 0;
  4124  0BFB  01A2               	clrf	getdata@dstuff
  4125  0BFC  01A3               	clrf	getdata@dstuff+1
  4126                           
  4127                           ;decode_AX25.c: 281: UBYTE dammy_data;
  4128                           ;decode_AX25.c: 282: UINT bufstore_counter = 0;
  4129  0BFD  01A0               	clrf	getdata@bufstore_counter
  4130  0BFE  01A1               	clrf	getdata@bufstore_counter+1
  4131                           
  4132                           ;decode_AX25.c: 283: UINT dbitstatus = 0;
  4133  0BFF  01A4               	clrf	getdata@dbitstatus
  4134  0C00  01A5               	clrf	getdata@dbitstatus+1
  4135  0C01                     l3049:	
  4136                           ;decode_AX25.c: 285: while(rcv_state == 2){
  4137                           
  4138  0C01  3002               	movlw	2
  4139  0C02  066A               	xorwf	_rcv_state,w
  4140  0C03  046B               	iorwf	_rcv_state+1,w
  4141  0C04  1D03               	btfss	3,2
  4142  0C05  0008               	return
  4143                           
  4144                           ;decode_AX25.c: 286: dbitstatus = getbit();
  4145  0C06  120A  158A  2298  120A  158A  	fcall	_getbit
  4146  0C0B  0871               	movf	?_getbit+1,w
  4147  0C0C  1283               	bcf	3,5	;RP0=0, select bank0
  4148  0C0D  1303               	bcf	3,6	;RP1=0, select bank0
  4149  0C0E  00A5               	movwf	getdata@dbitstatus+1
  4150  0C0F  0870               	movf	?_getbit,w
  4151  0C10  00A4               	movwf	getdata@dbitstatus
  4152                           
  4153                           ;decode_AX25.c: 287: if(dstuff == 5){
  4154  0C11  3005               	movlw	5
  4155  0C12  0622               	xorwf	getdata@dstuff,w
  4156  0C13  0423               	iorwf	getdata@dstuff+1,w
  4157  0C14  1D03               	btfss	3,2
  4158  0C15  2C24               	goto	l3031
  4159                           
  4160                           ;decode_AX25.c: 288: if(dbitstatus == 1){
  4161  0C16  0324               	decf	getdata@dbitstatus,w
  4162  0C17  0425               	iorwf	getdata@dbitstatus+1,w
  4163  0C18  1D03               	btfss	3,2
  4164  0C19  2C21               	goto	l3029
  4165                           
  4166                           ;decode_AX25.c: 289: rcv_state ++;
  4167  0C1A  3001               	movlw	1
  4168  0C1B  07EA               	addwf	_rcv_state,f
  4169  0C1C  1803               	skipnc
  4170  0C1D  0AEB               	incf	_rcv_state+1,f
  4171  0C1E  3000               	movlw	0
  4172  0C1F  07EB               	addwf	_rcv_state+1,f
  4173                           
  4174                           ;decode_AX25.c: 290: break;
  4175  0C20  0008               	return
  4176  0C21                     l3029:	
  4177                           ;decode_AX25.c: 291: }else{
  4178                           
  4179                           
  4180                           ;decode_AX25.c: 292: dstuff = 0;
  4181  0C21  01A2               	clrf	getdata@dstuff
  4182  0C22  01A3               	clrf	getdata@dstuff+1
  4183                           
  4184                           ;decode_AX25.c: 293: }
  4185                           ;decode_AX25.c: 294: }else{
  4186  0C23  2C01               	goto	l3049
  4187  0C24                     l3031:	
  4188                           
  4189                           ;decode_AX25.c: 295: buf = buf >> 1;
  4190  0C24  0826               	movf	getdata@buf,w
  4191  0C25  00F6               	movwf	??_getdata
  4192  0C26  1003               	clrc
  4193  0C27  0C76               	rrf	??_getdata,w
  4194  0C28  00F7               	movwf	??_getdata+1
  4195  0C29  0877               	movf	??_getdata+1,w
  4196  0C2A  00A6               	movwf	getdata@buf
  4197                           
  4198                           ;decode_AX25.c: 297: buf = buf | 0x00;
  4199  0C2B  0824               	movf	getdata@dbitstatus,w
  4200  0C2C  0425               	iorwf	getdata@dbitstatus+1,w
  4201  0C2D  1D03               	btfss	3,2
  4202  0C2E  2C32               	goto	l3035
  4203                           
  4204                           ;decode_AX25.c: 298: dstuff = 0;
  4205  0C2F  01A2               	clrf	getdata@dstuff
  4206  0C30  01A3               	clrf	getdata@dstuff+1
  4207                           
  4208                           ;decode_AX25.c: 299: }else{
  4209  0C31  2C3D               	goto	l3039
  4210  0C32                     l3035:	
  4211                           
  4212                           ;decode_AX25.c: 300: buf = buf | 0x80;
  4213  0C32  0826               	movf	getdata@buf,w
  4214  0C33  3880               	iorlw	128
  4215  0C34  00F6               	movwf	??_getdata
  4216  0C35  0876               	movf	??_getdata,w
  4217  0C36  00A6               	movwf	getdata@buf
  4218                           
  4219                           ;decode_AX25.c: 301: dstuff ++;
  4220  0C37  3001               	movlw	1
  4221  0C38  07A2               	addwf	getdata@dstuff,f
  4222  0C39  1803               	skipnc
  4223  0C3A  0AA3               	incf	getdata@dstuff+1,f
  4224  0C3B  3000               	movlw	0
  4225  0C3C  07A3               	addwf	getdata@dstuff+1,f
  4226  0C3D                     l3039:	
  4227                           
  4228                           ;decode_AX25.c: 302: }
  4229                           ;decode_AX25.c: 303: bufstore_counter ++;
  4230  0C3D  3001               	movlw	1
  4231  0C3E  07A0               	addwf	getdata@bufstore_counter,f
  4232  0C3F  1803               	skipnc
  4233  0C40  0AA1               	incf	getdata@bufstore_counter+1,f
  4234  0C41  3000               	movlw	0
  4235  0C42  07A1               	addwf	getdata@bufstore_counter+1,f
  4236                           
  4237                           ;decode_AX25.c: 304: if(bufstore_counter == 8){
  4238  0C43  3008               	movlw	8
  4239  0C44  0620               	xorwf	getdata@bufstore_counter,w
  4240  0C45  0421               	iorwf	getdata@bufstore_counter+1,w
  4241  0C46  1D03               	btfss	3,2
  4242  0C47  2C01               	goto	l3049
  4243                           
  4244                           ;decode_AX25.c: 305: bufstore_counter = 0;
  4245  0C48  01A0               	clrf	getdata@bufstore_counter
  4246  0C49  01A1               	clrf	getdata@bufstore_counter+1
  4247                           
  4248                           ;decode_AX25.c: 306: dPacket[dPacketnum] = buf;
  4249  0C4A  0826               	movf	getdata@buf,w
  4250  0C4B  00F6               	movwf	??_getdata
  4251  0C4C  0868               	movf	_dPacketnum,w
  4252  0C4D  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4253  0C4E  0084               	movwf	4
  4254  0C4F  0876               	movf	??_getdata,w
  4255  0C50  1783               	bsf	3,7	;select IRP bank3
  4256  0C51  0080               	movwf	0
  4257                           
  4258                           ;decode_AX25.c: 307: dPacketnum ++;
  4259  0C52  3001               	movlw	1
  4260  0C53  07E8               	addwf	_dPacketnum,f
  4261  0C54  1803               	skipnc
  4262  0C55  0AE9               	incf	_dPacketnum+1,f
  4263  0C56  3000               	movlw	0
  4264  0C57  07E9               	addwf	_dPacketnum+1,f
  4265  0C58  2C01               	goto	l3049
  4266  0C59                     __end_of_getdata:	
  4267                           
  4268                           	psect	text6
  4269  0A98                     __ptext6:	
  4270 ;; *************** function _getbit *****************
  4271 ;; Defined at:
  4272 ;;		line 40 in file "decode_AX25.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;		None
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;  i               2    4[COMMON] unsigned int 
  4277 ;; Return value:  Size  Location     Type
  4278 ;;                  2    0[COMMON] unsigned int 
  4279 ;; Registers used:
  4280 ;;		wreg, status,2, status,0
  4281 ;; Tracked objects:
  4282 ;;		On entry : 0/0
  4283 ;;		On exit  : 0/0
  4284 ;;		Unchanged: 0/0
  4285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4286 ;;      Params:         2       0       0       0       0
  4287 ;;      Locals:         2       0       0       0       0
  4288 ;;      Temps:          2       0       0       0       0
  4289 ;;      Totals:         6       0       0       0       0
  4290 ;;Total ram usage:        6 bytes
  4291 ;; Hardware stack levels used:    1
  4292 ;; This function calls:
  4293 ;;		Nothing
  4294 ;; This function is called by:
  4295 ;;		_waitFlag
  4296 ;;		_getdata
  4297 ;;		_conv_DI_UARTRX
  4298 ;; This function uses a non-reentrant model
  4299 ;;
  4300                           
  4301                           
  4302                           ;psect for function _getbit
  4303  0A98                     _getbit:	
  4304                           
  4305                           ;decode_AX25.c: 41: static UINT oldbit;
  4306                           ;decode_AX25.c: 42: oldbit = RB5;
  4307                           
  4308                           ;incstack = 0
  4309                           ; Regs used in _getbit: [wreg+status,2+status,0]
  4310  0A98  1003               	clrc
  4311  0A99  1283               	bcf	3,5	;RP0=0, select bank0
  4312  0A9A  1303               	bcf	3,6	;RP1=0, select bank0
  4313  0A9B  1A86               	btfsc	6,5	;volatile
  4314  0A9C  1403               	setc
  4315  0A9D  3000               	movlw	0
  4316  0A9E  1803               	skipnc
  4317  0A9F  3001               	movlw	1
  4318  0AA0  00F2               	movwf	??_getbit
  4319  0AA1  01F3               	clrf	??_getbit+1
  4320  0AA2  0872               	movf	??_getbit,w
  4321  0AA3  1683               	bsf	3,5	;RP0=1, select bank1
  4322  0AA4  1303               	bcf	3,6	;RP1=0, select bank1
  4323  0AA5  00E6               	movwf	getbit@oldbit^(0+128)
  4324  0AA6  0873               	movf	??_getbit+1,w
  4325  0AA7  00E7               	movwf	(getbit@oldbit+1)^(0+128)
  4326                           
  4327                           ;decode_AX25.c: 43: for(UINT i=0;i<62;i++){
  4328  0AA8  01F4               	clrf	getbit@i
  4329  0AA9  01F5               	clrf	getbit@i+1
  4330  0AAA  3000               	movlw	0
  4331  0AAB  0275               	subwf	getbit@i+1,w
  4332  0AAC  303E               	movlw	62
  4333  0AAD  1903               	skipnz
  4334  0AAE  0274               	subwf	getbit@i,w
  4335  0AAF  1803               	btfsc	3,0
  4336  0AB0  2ADF               	goto	l2495
  4337                           
  4338                           ;decode_AX25.c: 44: if(RB5 != oldbit){
  4339  0AB1  1003               	clrc
  4340  0AB2                     L7:	
  4341  0AB2  1283               	bcf	3,5	;RP0=0, select bank0
  4342  0AB3  1A86               	btfsc	6,5	;volatile
  4343  0AB4  1403               	setc
  4344  0AB5  3000               	movlw	0
  4345  0AB6  1803               	skipnc
  4346  0AB7  3001               	movlw	1
  4347  0AB8  00F2               	movwf	??_getbit
  4348  0AB9  01F3               	clrf	??_getbit+1
  4349  0ABA  1683               	bsf	3,5	;RP0=1, select bank1
  4350  0ABB  1303               	bcf	3,6	;RP1=0, select bank1
  4351  0ABC  0867               	movf	(getbit@oldbit+1)^(0+128),w
  4352  0ABD  0673               	xorwf	??_getbit+1,w
  4353  0ABE  1D03               	skipz
  4354  0ABF  2AC2               	goto	u1845
  4355  0AC0  0866               	movf	getbit@oldbit^(0+128),w
  4356  0AC1  0672               	xorwf	??_getbit,w
  4357  0AC2                     u1845:	
  4358  0AC2  1903               	skipnz
  4359  0AC3  2AD2               	goto	l2493
  4360                           
  4361                           ;decode_AX25.c: 45: _delay((unsigned long)((400)*(10000000/4000000.0)));
  4362  0AC4  30C7               	movlw	199
  4363  0AC5  00F2               	movwf	??_getbit
  4364  0AC6                     u3657:	
  4365  0AC6  2AC7               	nop2
  4366  0AC7  0BF2               	decfsz	??_getbit,f
  4367  0AC8  2AC6               	goto	u3657
  4368  0AC9  2ACA               	nop2
  4369  0ACA  2ACB               	nop2
  4370                           
  4371                           ;decode_AX25.c: 46: RC2= 1- RC2;
  4372  0ACB  3004               	movlw	4
  4373  0ACC  1283               	bcf	3,5	;RP0=0, select bank0
  4374  0ACD  1303               	bcf	3,6	;RP1=0, select bank0
  4375  0ACE  0687               	xorwf	7,f
  4376                           
  4377                           ;decode_AX25.c: 47: return 0;
  4378  0ACF  01F0               	clrf	?_getbit
  4379  0AD0  01F1               	clrf	?_getbit+1
  4380  0AD1  0008               	return
  4381  0AD2                     l2493:	
  4382  0AD2  3001               	movlw	1
  4383  0AD3  07F4               	addwf	getbit@i,f
  4384  0AD4  1803               	skipnc
  4385  0AD5  0AF5               	incf	getbit@i+1,f
  4386  0AD6  3000               	movlw	0
  4387  0AD7  07F5               	addwf	getbit@i+1,f
  4388  0AD8  3000               	movlw	0
  4389  0AD9  0275               	subwf	getbit@i+1,w
  4390  0ADA  303E               	movlw	62
  4391  0ADB  1903               	skipnz
  4392  0ADC  0274               	subwf	getbit@i,w
  4393  0ADD  1C03               	skipc
  4394  0ADE  2AB2               	goto	L7
  4395  0ADF                     l2495:	
  4396                           
  4397                           ;decode_AX25.c: 48: }
  4398                           ;decode_AX25.c: 49: }
  4399                           ;decode_AX25.c: 50: return 1;
  4400  0ADF  3001               	movlw	1
  4401  0AE0  00F0               	movwf	?_getbit
  4402  0AE1  3000               	movlw	0
  4403  0AE2  00F1               	movwf	?_getbit+1
  4404  0AE3  0008               	return
  4405  0AE4                     __end_of_getbit:	
  4406                           
  4407                           	psect	text7
  4408  002A                     __ptext7:	
  4409 ;; *************** function _fcscheck *****************
  4410 ;; Defined at:
  4411 ;;		line 313 in file "decode_AX25.c"
  4412 ;; Parameters:    Size  Location     Type
  4413 ;;		None
  4414 ;; Auto vars:     Size  Location     Type
  4415 ;;  i               2    7[COMMON] unsigned int 
  4416 ;;  i               2    5[COMMON] unsigned int 
  4417 ;;  byte            1    9[COMMON] unsigned char 
  4418 ;;  bt              1    4[COMMON] unsigned char 
  4419 ;; Return value:  Size  Location     Type
  4420 ;;                  2    0[COMMON] unsigned int 
  4421 ;; Registers used:
  4422 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4423 ;; Tracked objects:
  4424 ;;		On entry : 0/0
  4425 ;;		On exit  : 0/0
  4426 ;;		Unchanged: 0/0
  4427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4428 ;;      Params:         2       0       0       0       0
  4429 ;;      Locals:         6       0       0       0       0
  4430 ;;      Temps:          2       0       0       0       0
  4431 ;;      Totals:        10       0       0       0       0
  4432 ;;Total ram usage:       10 bytes
  4433 ;; Hardware stack levels used:    1
  4434 ;; This function calls:
  4435 ;;		Nothing
  4436 ;; This function is called by:
  4437 ;;		_ReceivePacket_data
  4438 ;;		_ReceivePacket
  4439 ;; This function uses a non-reentrant model
  4440 ;;
  4441                           
  4442                           
  4443                           ;psect for function _fcscheck
  4444  002A                     _fcscheck:	
  4445                           
  4446                           ;decode_AX25.c: 314: UBYTE bt,byte;
  4447                           ;decode_AX25.c: 315: dfcslo = dfcshi = 0xff;
  4448                           
  4449                           ;incstack = 0
  4450                           ; Regs used in _fcscheck: [wreg-fsr0h+status,2+status,0]
  4451  002A  30FF               	movlw	255
  4452  002B  1283               	bcf	3,5	;RP0=0, select bank0
  4453  002C  1303               	bcf	3,6	;RP1=0, select bank0
  4454  002D  00EF               	movwf	_dfcshi
  4455  002E  00F2               	movwf	??_fcscheck
  4456  002F  0872               	movf	??_fcscheck,w
  4457  0030  00EE               	movwf	_dfcslo
  4458                           
  4459                           ;decode_AX25.c: 316: while(rcv_state == 3){
  4460  0031  3003               	movlw	3
  4461  0032  066A               	xorwf	_rcv_state,w
  4462  0033  046B               	iorwf	_rcv_state+1,w
  4463  0034  1D03               	btfss	3,2
  4464  0035  0008               	return
  4465                           
  4466                           ;decode_AX25.c: 317: for(UINT i=0;i<dPacketnum-2;i++){
  4467  0036  01F5               	clrf	fcscheck@i
  4468  0037  01F6               	clrf	fcscheck@i+1
  4469  0038                     l3077:	
  4470  0038  0868               	movf	_dPacketnum,w
  4471  0039  3EFE               	addlw	254
  4472  003A  00F2               	movwf	??_fcscheck
  4473  003B  0869               	movf	_dPacketnum+1,w
  4474  003C  1803               	skipnc
  4475  003D  3E01               	addlw	1
  4476  003E  3EFF               	addlw	255
  4477  003F  00F3               	movwf	??_fcscheck+1
  4478  0040  0873               	movf	??_fcscheck+1,w
  4479  0041  0276               	subwf	fcscheck@i+1,w
  4480  0042  1D03               	skipz
  4481  0043  2846               	goto	u2715
  4482  0044  0872               	movf	??_fcscheck,w
  4483  0045  0275               	subwf	fcscheck@i,w
  4484  0046                     u2715:	
  4485  0046  1803               	btfsc	3,0
  4486  0047  2891               	goto	l275
  4487                           
  4488                           ;decode_AX25.c: 318: byte = dPacket[i];
  4489  0048  0875               	movf	fcscheck@i,w
  4490  0049  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4491  004A  0084               	movwf	4
  4492  004B  1783               	bsf	3,7	;select IRP bank3
  4493  004C  0800               	movf	0,w
  4494  004D  00F2               	movwf	??_fcscheck
  4495  004E  0872               	movf	??_fcscheck,w
  4496  004F  00F9               	movwf	fcscheck@byte
  4497                           
  4498                           ;decode_AX25.c: 319: for(UINT i=0;i<8;i++){
  4499  0050  01F7               	clrf	fcscheck@i_147
  4500  0051  01F8               	clrf	fcscheck@i_147+1
  4501  0052  3000               	movlw	0
  4502  0053  0278               	subwf	fcscheck@i_147+1,w
  4503  0054  3008               	movlw	8
  4504  0055  1903               	skipnz
  4505  0056  0277               	subwf	fcscheck@i_147,w
  4506  0057  1803               	btfsc	3,0
  4507  0058  288A               	goto	l3075
  4508  0059                     l3063:	
  4509                           
  4510                           ;decode_AX25.c: 320: bt = byte & 0x01;
  4511  0059  0879               	movf	fcscheck@byte,w
  4512  005A  3901               	andlw	1
  4513  005B  00F2               	movwf	??_fcscheck
  4514  005C  0872               	movf	??_fcscheck,w
  4515  005D  00F4               	movwf	fcscheck@bt
  4516  005E  1003               	bcf	3,0	;# 
  4517  005F  0CEF               	rrf	_dfcshi,f	;# 
  4518  0060  0CEE               	rrf	_dfcslo,f	;# 
  4519                           
  4520                           ;decode_AX25.c: 326: if(((STATUS & 0x01)^bt) == 0x01){
  4521  0061  3001               	movlw	1
  4522  0062  1283               	bcf	3,5	;RP0=0, select bank0
  4523  0063  1303               	bcf	3,6	;RP1=0, select bank0
  4524  0064  0503               	andwf	3,w	;volatile
  4525  0065  00F2               	movwf	??_fcscheck
  4526  0066  0874               	movf	fcscheck@bt,w
  4527  0067  0672               	xorwf	??_fcscheck,w
  4528  0068  00F3               	movwf	??_fcscheck+1
  4529  0069  0373               	decf	??_fcscheck+1,w
  4530  006A  1D03               	btfss	3,2
  4531  006B  2876               	goto	l3069
  4532                           
  4533                           ;decode_AX25.c: 327: dfcshi = dfcshi ^ 0x84;
  4534  006C  086F               	movf	_dfcshi,w
  4535  006D  3A84               	xorlw	132
  4536  006E  00F2               	movwf	??_fcscheck
  4537  006F  0872               	movf	??_fcscheck,w
  4538  0070  00EF               	movwf	_dfcshi
  4539                           
  4540                           ;decode_AX25.c: 328: dfcslo = dfcslo ^ 0x08;
  4541  0071  086E               	movf	_dfcslo,w
  4542  0072  3A08               	xorlw	8
  4543  0073  00F2               	movwf	??_fcscheck
  4544  0074  0872               	movf	??_fcscheck,w
  4545  0075  00EE               	movwf	_dfcslo
  4546  0076                     l3069:	
  4547                           
  4548                           ;decode_AX25.c: 329: }
  4549                           ;decode_AX25.c: 330: byte = byte >> 1;
  4550  0076  0879               	movf	fcscheck@byte,w
  4551  0077  00F2               	movwf	??_fcscheck
  4552  0078  1003               	clrc
  4553  0079  0C72               	rrf	??_fcscheck,w
  4554  007A  00F3               	movwf	??_fcscheck+1
  4555  007B  0873               	movf	??_fcscheck+1,w
  4556  007C  00F9               	movwf	fcscheck@byte
  4557  007D  3001               	movlw	1
  4558  007E  07F7               	addwf	fcscheck@i_147,f
  4559  007F  1803               	skipnc
  4560  0080  0AF8               	incf	fcscheck@i_147+1,f
  4561  0081  3000               	movlw	0
  4562  0082  07F8               	addwf	fcscheck@i_147+1,f
  4563  0083  3000               	movlw	0
  4564  0084  0278               	subwf	fcscheck@i_147+1,w
  4565  0085  3008               	movlw	8
  4566  0086  1903               	skipnz
  4567  0087  0277               	subwf	fcscheck@i_147,w
  4568  0088  1C03               	skipc
  4569  0089  2859               	goto	l3063
  4570  008A                     l3075:	
  4571  008A  3001               	movlw	1
  4572  008B  07F5               	addwf	fcscheck@i,f
  4573  008C  1803               	skipnc
  4574  008D  0AF6               	incf	fcscheck@i+1,f
  4575  008E  3000               	movlw	0
  4576  008F  07F6               	addwf	fcscheck@i+1,f
  4577  0090  2838               	goto	l3077
  4578  0091                     l275:	
  4579                           
  4580                           ;decode_AX25.c: 331: }
  4581                           ;decode_AX25.c: 332: }
  4582                           ;decode_AX25.c: 333: dfcslo = dfcslo ^ 0xff;
  4583  0091  09EE               	comf	_dfcslo,f
  4584                           
  4585                           ;decode_AX25.c: 334: dfcshi = dfcshi ^ 0xff;
  4586  0092  09EF               	comf	_dfcshi,f
  4587                           
  4588                           ;decode_AX25.c: 337: if((dPacket[dPacketnum-2] == dfcslo) && (dPacket[dPacketnum-1] == d
      +                          fcshi)){
  4589  0093  0868               	movf	_dPacketnum,w
  4590  0094  3EFE               	addlw	254
  4591  0095  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4592  0096  0084               	movwf	4
  4593  0097  1783               	bsf	3,7	;select IRP bank3
  4594  0098  0800               	movf	0,w
  4595  0099  066E               	xorwf	_dfcslo,w
  4596  009A  1D03               	skipz
  4597  009B  28A9               	goto	l3089
  4598  009C  0868               	movf	_dPacketnum,w
  4599  009D  3EFF               	addlw	255
  4600  009E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4601  009F  0084               	movwf	4
  4602  00A0  0800               	movf	0,w
  4603  00A1  066F               	xorwf	_dfcshi,w
  4604  00A2  1D03               	skipz
  4605  00A3  28A9               	goto	l3089
  4606                           
  4607                           ;decode_AX25.c: 342: return 1;
  4608  00A4  3001               	movlw	1
  4609  00A5  00F0               	movwf	?_fcscheck
  4610  00A6  3000               	movlw	0
  4611  00A7  00F1               	movwf	?_fcscheck+1
  4612  00A8  0008               	return
  4613  00A9                     l3089:	
  4614                           ;decode_AX25.c: 343: }else{
  4615                           
  4616                           
  4617                           ;decode_AX25.c: 348: return 0;
  4618  00A9  01F0               	clrf	?_fcscheck
  4619  00AA  01F1               	clrf	?_fcscheck+1
  4620  00AB  0008               	return
  4621  00AC                     __end_of_fcscheck:	
  4622                           
  4623                           	psect	text8
  4624  0838                     __ptext8:	
  4625 ;; *************** function _NM_waddress *****************
  4626 ;; Defined at:
  4627 ;;		line 72 in file "UART.c"
  4628 ;; Parameters:    Size  Location     Type
  4629 ;;  NM_wad_heade    1    wreg     unsigned char 
  4630 ;;  whigh_addres    1    1[COMMON] unsigned char 
  4631 ;;  wlow_address    1    2[COMMON] unsigned char 
  4632 ;; Auto vars:     Size  Location     Type
  4633 ;;  NM_wad_heade    1    3[COMMON] unsigned char 
  4634 ;; Return value:  Size  Location     Type
  4635 ;;                  1    wreg      void 
  4636 ;; Registers used:
  4637 ;;		wreg, status,2, status,0, pclath, cstack
  4638 ;; Tracked objects:
  4639 ;;		On entry : 0/0
  4640 ;;		On exit  : 0/0
  4641 ;;		Unchanged: 0/0
  4642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4643 ;;      Params:         2       0       0       0       0
  4644 ;;      Locals:         1       0       0       0       0
  4645 ;;      Temps:          0       0       0       0       0
  4646 ;;      Totals:         3       0       0       0       0
  4647 ;;Total ram usage:        3 bytes
  4648 ;; Hardware stack levels used:    1
  4649 ;; Hardware stack levels required when called:    1
  4650 ;; This function calls:
  4651 ;;		_putch
  4652 ;; This function is called by:
  4653 ;;		_main
  4654 ;; This function uses a non-reentrant model
  4655 ;;
  4656                           
  4657                           
  4658                           ;psect for function _NM_waddress
  4659  0838                     _NM_waddress:	
  4660                           
  4661                           ;incstack = 0
  4662                           ; Regs used in _NM_waddress: [wreg+status,2+status,0+pclath+cstack]
  4663                           ;NM_waddress@NM_wad_header stored from wreg
  4664  0838  00F3               	movwf	NM_waddress@NM_wad_header
  4665                           
  4666                           ;UART.c: 73: putch(NM_wad_header);
  4667  0839  0873               	movf	NM_waddress@NM_wad_header,w
  4668  083A  160A  118A  27F8  120A  158A  	fcall	_putch
  4669                           
  4670                           ;UART.c: 74: putch(whigh_address);
  4671  083F  0871               	movf	NM_waddress@whigh_address,w
  4672  0840  160A  118A  27F8  120A  158A  	fcall	_putch
  4673                           
  4674                           ;UART.c: 75: putch(wlow_address);
  4675  0845  0872               	movf	NM_waddress@wlow_address,w
  4676  0846  160A  118A  27F8   	fcall	_putch
  4677  0849  0008               	return
  4678  084A                     __end_of_NM_waddress:	
  4679                           
  4680                           	psect	text9
  4681  17F8                     __ptext9:	
  4682 ;; *************** function _putch *****************
  4683 ;; Defined at:
  4684 ;;		line 39 in file "UART.c"
  4685 ;; Parameters:    Size  Location     Type
  4686 ;;  byte            1    wreg     unsigned char 
  4687 ;; Auto vars:     Size  Location     Type
  4688 ;;  byte            1    0[COMMON] unsigned char 
  4689 ;; Return value:  Size  Location     Type
  4690 ;;                  1    wreg      void 
  4691 ;; Registers used:
  4692 ;;		wreg
  4693 ;; Tracked objects:
  4694 ;;		On entry : 0/0
  4695 ;;		On exit  : 0/0
  4696 ;;		Unchanged: 0/0
  4697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4698 ;;      Params:         0       0       0       0       0
  4699 ;;      Locals:         1       0       0       0       0
  4700 ;;      Temps:          0       0       0       0       0
  4701 ;;      Totals:         1       0       0       0       0
  4702 ;;Total ram usage:        1 bytes
  4703 ;; Hardware stack levels used:    1
  4704 ;; This function calls:
  4705 ;;		Nothing
  4706 ;; This function is called by:
  4707 ;;		_NM_waddress
  4708 ;;		_TXOBC_waddress
  4709 ;;		_putstr
  4710 ;;		_putcrlf
  4711 ;;		_put_error
  4712 ;;		_put_ok
  4713 ;;		_putAX25
  4714 ;;		_conv_DI_UARTRX
  4715 ;;		_test_Packetmaker
  4716 ;; This function uses a non-reentrant model
  4717 ;;
  4718                           
  4719                           
  4720                           ;psect for function _putch
  4721  17F8                     _putch:	
  4722                           
  4723                           ;incstack = 0
  4724                           ; Regs used in _putch: [wreg]
  4725                           ;putch@byte stored from wreg
  4726  17F8  00F0               	movwf	putch@byte
  4727  17F9                     l69:	
  4728                           ;UART.c: 40: while(!TXIF);
  4729                           
  4730  17F9  1283               	bcf	3,5	;RP0=0, select bank0
  4731  17FA  1303               	bcf	3,6	;RP1=0, select bank0
  4732  17FB  1E0C               	btfss	12,4	;volatile
  4733  17FC  2FF9               	goto	l69
  4734                           
  4735                           ;UART.c: 41: TXREG = byte;
  4736  17FD  0870               	movf	putch@byte,w
  4737  17FE  0099               	movwf	25	;volatile
  4738  17FF  0008               	return
  4739  1800                     __end_of_putch:	
  4740                           
  4741                           	psect	text10
  4742  0878                     __ptext10:	
  4743 ;; *************** function _Init_SERIAL *****************
  4744 ;; Defined at:
  4745 ;;		line 6 in file "UART.c"
  4746 ;; Parameters:    Size  Location     Type
  4747 ;;		None
  4748 ;; Auto vars:     Size  Location     Type
  4749 ;;		None
  4750 ;; Return value:  Size  Location     Type
  4751 ;;                  1    wreg      void 
  4752 ;; Registers used:
  4753 ;;		wreg
  4754 ;; Tracked objects:
  4755 ;;		On entry : 0/0
  4756 ;;		On exit  : 0/0
  4757 ;;		Unchanged: 0/0
  4758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4759 ;;      Params:         0       0       0       0       0
  4760 ;;      Locals:         0       0       0       0       0
  4761 ;;      Temps:          0       0       0       0       0
  4762 ;;      Totals:         0       0       0       0       0
  4763 ;;Total ram usage:        0 bytes
  4764 ;; Hardware stack levels used:    1
  4765 ;; This function calls:
  4766 ;;		Nothing
  4767 ;; This function is called by:
  4768 ;;		_main
  4769 ;; This function uses a non-reentrant model
  4770 ;;
  4771                           
  4772                           
  4773                           ;psect for function _Init_SERIAL
  4774  0878                     _Init_SERIAL:	
  4775                           
  4776                           ;UART.c: 7: SPBRG = 10;
  4777                           
  4778                           ;incstack = 0
  4779                           ; Regs used in _Init_SERIAL: [wreg]
  4780  0878  300A               	movlw	10
  4781  0879  1683               	bsf	3,5	;RP0=1, select bank1
  4782  087A  1303               	bcf	3,6	;RP1=0, select bank1
  4783  087B  0099               	movwf	25	;volatile
  4784                           
  4785                           ;UART.c: 8: BRGH = 0;
  4786  087C  1118               	bcf	24,2	;volatile
  4787                           
  4788                           ;UART.c: 9: SYNC = 0;
  4789  087D  1218               	bcf	24,4	;volatile
  4790                           
  4791                           ;UART.c: 10: SPEN = 1;
  4792  087E  1283               	bcf	3,5	;RP0=0, select bank0
  4793  087F  1303               	bcf	3,6	;RP1=0, select bank0
  4794  0880  1798               	bsf	24,7	;volatile
  4795                           
  4796                           ;UART.c: 11: CREN = 1;
  4797  0881  1618               	bsf	24,4	;volatile
  4798                           
  4799                           ;UART.c: 12: SREN = 0;
  4800  0882  1298               	bcf	24,5	;volatile
  4801                           
  4802                           ;UART.c: 13: RCIF = 0;
  4803  0883  128C               	bcf	12,5	;volatile
  4804                           
  4805                           ;UART.c: 14: TXIE = 0;
  4806  0884  1683               	bsf	3,5	;RP0=1, select bank1
  4807  0885  1303               	bcf	3,6	;RP1=0, select bank1
  4808  0886  120C               	bcf	12,4	;volatile
  4809                           
  4810                           ;UART.c: 15: RCIE = 1;
  4811  0887  168C               	bsf	12,5	;volatile
  4812                           
  4813                           ;UART.c: 16: TX9 = 0;
  4814  0888  1318               	bcf	24,6	;volatile
  4815                           
  4816                           ;UART.c: 17: RX9 = 0;
  4817  0889  1283               	bcf	3,5	;RP0=0, select bank0
  4818  088A  1303               	bcf	3,6	;RP1=0, select bank0
  4819  088B  1318               	bcf	24,6	;volatile
  4820                           
  4821                           ;UART.c: 18: TXEN = 0;
  4822  088C  1683               	bsf	3,5	;RP0=1, select bank1
  4823  088D  1303               	bcf	3,6	;RP1=0, select bank1
  4824  088E  1298               	bcf	24,5	;volatile
  4825                           
  4826                           ;UART.c: 19: TXEN = 1;
  4827  088F  1698               	bsf	24,5	;volatile
  4828  0890  0008               	return
  4829  0891                     __end_of_Init_SERIAL:	
  4830                           
  4831                           	psect	text11
  4832  085F                     __ptext11:	
  4833 ;; *************** function _Init_MPU *****************
  4834 ;; Defined at:
  4835 ;;		line 8 in file "Init_MPU.c"
  4836 ;; Parameters:    Size  Location     Type
  4837 ;;		None
  4838 ;; Auto vars:     Size  Location     Type
  4839 ;;		None
  4840 ;; Return value:  Size  Location     Type
  4841 ;;                  1    wreg      void 
  4842 ;; Registers used:
  4843 ;;		wreg, status,2
  4844 ;; Tracked objects:
  4845 ;;		On entry : 0/0
  4846 ;;		On exit  : 0/0
  4847 ;;		Unchanged: 0/0
  4848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4849 ;;      Params:         0       0       0       0       0
  4850 ;;      Locals:         0       0       0       0       0
  4851 ;;      Temps:          0       0       0       0       0
  4852 ;;      Totals:         0       0       0       0       0
  4853 ;;Total ram usage:        0 bytes
  4854 ;; Hardware stack levels used:    1
  4855 ;; This function calls:
  4856 ;;		Nothing
  4857 ;; This function is called by:
  4858 ;;		_main
  4859 ;; This function uses a non-reentrant model
  4860 ;;
  4861                           
  4862                           
  4863                           ;psect for function _Init_MPU
  4864  085F                     _Init_MPU:	
  4865                           
  4866                           ;Init_MPU.c: 11: PORTA = 0x00;
  4867                           
  4868                           ;incstack = 0
  4869                           ; Regs used in _Init_MPU: [wreg+status,2]
  4870  085F  1283               	bcf	3,5	;RP0=0, select bank0
  4871  0860  1303               	bcf	3,6	;RP1=0, select bank0
  4872  0861  0185               	clrf	5	;volatile
  4873                           
  4874                           ;Init_MPU.c: 12: PORTB = 0x00;
  4875  0862  0186               	clrf	6	;volatile
  4876                           
  4877                           ;Init_MPU.c: 13: PORTC = 0x00;
  4878  0863  0187               	clrf	7	;volatile
  4879                           
  4880                           ;Init_MPU.c: 14: PORTD = 0x00;
  4881  0864  0188               	clrf	8	;volatile
  4882                           
  4883                           ;Init_MPU.c: 15: PORTE = 0x00;
  4884  0865  0189               	clrf	9	;volatile
  4885                           
  4886                           ;Init_MPU.c: 23: TRISA = 0b10000000;
  4887  0866  3080               	movlw	128
  4888  0867  1683               	bsf	3,5	;RP0=1, select bank1
  4889  0868  1303               	bcf	3,6	;RP1=0, select bank1
  4890  0869  0085               	movwf	5	;volatile
  4891                           
  4892                           ;Init_MPU.c: 24: TRISB = 0b00100000;
  4893  086A  3020               	movlw	32
  4894  086B  0086               	movwf	6	;volatile
  4895                           
  4896                           ;Init_MPU.c: 25: TRISC = 0b10011000;
  4897  086C  3098               	movlw	152
  4898  086D  0087               	movwf	7	;volatile
  4899                           
  4900                           ;Init_MPU.c: 26: TRISD = 0b00000000;
  4901  086E  0188               	clrf	8	;volatile
  4902                           
  4903                           ;Init_MPU.c: 27: TRISE = 0b00000000;
  4904  086F  0189               	clrf	9	;volatile
  4905                           
  4906                           ;Init_MPU.c: 30: PORTA = 0x00;
  4907  0870  1283               	bcf	3,5	;RP0=0, select bank0
  4908  0871  1303               	bcf	3,6	;RP1=0, select bank0
  4909  0872  0185               	clrf	5	;volatile
  4910                           
  4911                           ;Init_MPU.c: 31: PORTB = 0x00;
  4912  0873  0186               	clrf	6	;volatile
  4913                           
  4914                           ;Init_MPU.c: 32: PORTC = 0x00;
  4915  0874  0187               	clrf	7	;volatile
  4916                           
  4917                           ;Init_MPU.c: 33: PORTD = 0x00;
  4918  0875  0188               	clrf	8	;volatile
  4919                           
  4920                           ;Init_MPU.c: 34: PORTE = 0x00;
  4921  0876  0189               	clrf	9	;volatile
  4922  0877  0008               	return
  4923  0878                     __end_of_Init_MPU:	
  4924                           
  4925                           	psect	text12
  4926  099E                     __ptext12:	
  4927 ;; *************** function _Init_I2C_M *****************
  4928 ;; Defined at:
  4929 ;;		line 8 in file "I2C.c"
  4930 ;; Parameters:    Size  Location     Type
  4931 ;;  c               4    0[BANK0 ] const unsigned long 
  4932 ;; Auto vars:     Size  Location     Type
  4933 ;;		None
  4934 ;; Return value:  Size  Location     Type
  4935 ;;                  1    wreg      void 
  4936 ;; Registers used:
  4937 ;;		wreg, status,2, status,0, pclath, cstack
  4938 ;; Tracked objects:
  4939 ;;		On entry : 0/0
  4940 ;;		On exit  : 0/0
  4941 ;;		Unchanged: 0/0
  4942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4943 ;;      Params:         0       4       0       0       0
  4944 ;;      Locals:         0       0       0       0       0
  4945 ;;      Temps:          0       4       0       0       0
  4946 ;;      Totals:         0       8       0       0       0
  4947 ;;Total ram usage:        8 bytes
  4948 ;; Hardware stack levels used:    1
  4949 ;; Hardware stack levels required when called:    1
  4950 ;; This function calls:
  4951 ;;		___lldiv
  4952 ;; This function is called by:
  4953 ;;		_main
  4954 ;; This function uses a non-reentrant model
  4955 ;;
  4956                           
  4957                           
  4958                           ;psect for function _Init_I2C_M
  4959  099E                     _Init_I2C_M:	
  4960                           
  4961                           ;I2C.c: 9: SSPCON = 0b00101000;
  4962                           
  4963                           ;incstack = 0
  4964                           ; Regs used in _Init_I2C_M: [wreg+status,2+status,0+pclath+cstack]
  4965  099E  3028               	movlw	40
  4966  099F  1283               	bcf	3,5	;RP0=0, select bank0
  4967  09A0  1303               	bcf	3,6	;RP1=0, select bank0
  4968  09A1  0094               	movwf	20	;volatile
  4969                           
  4970                           ;I2C.c: 10: SSPCON2 = 0;
  4971  09A2  1683               	bsf	3,5	;RP0=1, select bank1
  4972  09A3  1303               	bcf	3,6	;RP1=0, select bank1
  4973  09A4  0191               	clrf	17	;volatile
  4974                           
  4975                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  4976  09A5  1283               	bcf	3,5	;RP0=0, select bank0
  4977  09A6  1303               	bcf	3,6	;RP1=0, select bank0
  4978  09A7  0820               	movf	Init_I2C_M@c,w
  4979  09A8  00A4               	movwf	??_Init_I2C_M
  4980  09A9  0821               	movf	Init_I2C_M@c+1,w
  4981  09AA  00A5               	movwf	??_Init_I2C_M+1
  4982  09AB  0822               	movf	Init_I2C_M@c+2,w
  4983  09AC  00A6               	movwf	??_Init_I2C_M+2
  4984  09AD  0823               	movf	Init_I2C_M@c+3,w
  4985  09AE  00A7               	movwf	??_Init_I2C_M+3
  4986  09AF  3002               	movlw	2
  4987  09B0                     u3135:	
  4988  09B0  1003               	clrc
  4989  09B1  0DA4               	rlf	??_Init_I2C_M,f
  4990  09B2  0DA5               	rlf	??_Init_I2C_M+1,f
  4991  09B3  0DA6               	rlf	??_Init_I2C_M+2,f
  4992  09B4  0DA7               	rlf	??_Init_I2C_M+3,f
  4993  09B5  3EFF               	addlw	-1
  4994  09B6  1D03               	skipz
  4995  09B7  29B0               	goto	u3135
  4996  09B8  0827               	movf	??_Init_I2C_M+3,w
  4997  09B9  00F3               	movwf	___lldiv@divisor+3
  4998  09BA  0826               	movf	??_Init_I2C_M+2,w
  4999  09BB  00F2               	movwf	___lldiv@divisor+2
  5000  09BC  0825               	movf	??_Init_I2C_M+1,w
  5001  09BD  00F1               	movwf	___lldiv@divisor+1
  5002  09BE  0824               	movf	??_Init_I2C_M,w
  5003  09BF  00F0               	movwf	___lldiv@divisor
  5004  09C0  3000               	movlw	0
  5005  09C1  00F7               	movwf	___lldiv@dividend+3
  5006  09C2  3098               	movlw	152
  5007  09C3  00F6               	movwf	___lldiv@dividend+2
  5008  09C4  3096               	movlw	150
  5009  09C5  00F5               	movwf	___lldiv@dividend+1
  5010  09C6  3080               	movlw	128
  5011  09C7  00F4               	movwf	___lldiv@dividend
  5012  09C8  120A  158A  239A   	fcall	___lldiv
  5013  09CB  0870               	movf	?___lldiv,w
  5014  09CC  3EFF               	addlw	255
  5015  09CD  1683               	bsf	3,5	;RP0=1, select bank1
  5016  09CE  1303               	bcf	3,6	;RP1=0, select bank1
  5017  09CF  0093               	movwf	19	;volatile
  5018                           
  5019                           ;I2C.c: 12: SSPSTAT = 0;
  5020  09D0  0194               	clrf	20	;volatile
  5021  09D1  0008               	return
  5022  09D2                     __end_of_Init_I2C_M:	
  5023                           
  5024                           	psect	text13
  5025  0B9A                     __ptext13:	
  5026 ;; *************** function ___lldiv *****************
  5027 ;; Defined at:
  5028 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;  divisor         4    0[COMMON] unsigned long 
  5031 ;;  dividend        4    4[COMMON] unsigned long 
  5032 ;; Auto vars:     Size  Location     Type
  5033 ;;  quotient        4    9[COMMON] unsigned long 
  5034 ;;  counter         1   13[COMMON] unsigned char 
  5035 ;; Return value:  Size  Location     Type
  5036 ;;                  4    0[COMMON] unsigned long 
  5037 ;; Registers used:
  5038 ;;		wreg, status,2, status,0
  5039 ;; Tracked objects:
  5040 ;;		On entry : 0/0
  5041 ;;		On exit  : 0/0
  5042 ;;		Unchanged: 0/0
  5043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5044 ;;      Params:         8       0       0       0       0
  5045 ;;      Locals:         5       0       0       0       0
  5046 ;;      Temps:          1       0       0       0       0
  5047 ;;      Totals:        14       0       0       0       0
  5048 ;;Total ram usage:       14 bytes
  5049 ;; Hardware stack levels used:    1
  5050 ;; This function calls:
  5051 ;;		Nothing
  5052 ;; This function is called by:
  5053 ;;		_Init_I2C_M
  5054 ;; This function uses a non-reentrant model
  5055 ;;
  5056                           
  5057                           
  5058                           ;psect for function ___lldiv
  5059  0B9A                     ___lldiv:	
  5060                           
  5061                           ;incstack = 0
  5062                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5063  0B9A  3000               	movlw	0
  5064  0B9B  00FC               	movwf	___lldiv@quotient+3
  5065  0B9C  3000               	movlw	0
  5066  0B9D  00FB               	movwf	___lldiv@quotient+2
  5067  0B9E  3000               	movlw	0
  5068  0B9F  00FA               	movwf	___lldiv@quotient+1
  5069  0BA0  3000               	movlw	0
  5070  0BA1  00F9               	movwf	___lldiv@quotient
  5071  0BA2  0873               	movf	___lldiv@divisor+3,w
  5072  0BA3  0472               	iorwf	___lldiv@divisor+2,w
  5073  0BA4  0471               	iorwf	___lldiv@divisor+1,w
  5074  0BA5  0470               	iorwf	___lldiv@divisor,w
  5075  0BA6  1903               	skipnz
  5076  0BA7  2BEF               	goto	l3253
  5077  0BA8  01FD               	clrf	___lldiv@counter
  5078  0BA9  0AFD               	incf	___lldiv@counter,f
  5079  0BAA                     l3239:	
  5080  0BAA  1BF3               	btfsc	___lldiv@divisor+3,7
  5081  0BAB  2BBA               	goto	l3241
  5082  0BAC  3001               	movlw	1
  5083  0BAD  00F8               	movwf	??___lldiv
  5084  0BAE                     u2985:	
  5085  0BAE  1003               	clrc
  5086  0BAF  0DF0               	rlf	___lldiv@divisor,f
  5087  0BB0  0DF1               	rlf	___lldiv@divisor+1,f
  5088  0BB1  0DF2               	rlf	___lldiv@divisor+2,f
  5089  0BB2  0DF3               	rlf	___lldiv@divisor+3,f
  5090  0BB3  0BF8               	decfsz	??___lldiv,f
  5091  0BB4  2BAE               	goto	u2985
  5092  0BB5  3001               	movlw	1
  5093  0BB6  00F8               	movwf	??___lldiv
  5094  0BB7  0878               	movf	??___lldiv,w
  5095  0BB8  07FD               	addwf	___lldiv@counter,f
  5096  0BB9  2BAA               	goto	l3239
  5097  0BBA                     l3241:	
  5098  0BBA  3001               	movlw	1
  5099  0BBB  00F8               	movwf	??___lldiv
  5100  0BBC                     u3005:	
  5101  0BBC  1003               	clrc
  5102  0BBD  0DF9               	rlf	___lldiv@quotient,f
  5103  0BBE  0DFA               	rlf	___lldiv@quotient+1,f
  5104  0BBF  0DFB               	rlf	___lldiv@quotient+2,f
  5105  0BC0  0DFC               	rlf	___lldiv@quotient+3,f
  5106  0BC1  0BF8               	decfsz	??___lldiv,f
  5107  0BC2  2BBC               	goto	u3005
  5108  0BC3  0873               	movf	___lldiv@divisor+3,w
  5109  0BC4  0277               	subwf	___lldiv@dividend+3,w
  5110  0BC5  1D03               	skipz
  5111  0BC6  2BD1               	goto	u3015
  5112  0BC7  0872               	movf	___lldiv@divisor+2,w
  5113  0BC8  0276               	subwf	___lldiv@dividend+2,w
  5114  0BC9  1D03               	skipz
  5115  0BCA  2BD1               	goto	u3015
  5116  0BCB  0871               	movf	___lldiv@divisor+1,w
  5117  0BCC  0275               	subwf	___lldiv@dividend+1,w
  5118  0BCD  1D03               	skipz
  5119  0BCE  2BD1               	goto	u3015
  5120  0BCF  0870               	movf	___lldiv@divisor,w
  5121  0BD0  0274               	subwf	___lldiv@dividend,w
  5122  0BD1                     u3015:	
  5123  0BD1  1C03               	skipc
  5124  0BD2  2BE2               	goto	l3249
  5125  0BD3  0870               	movf	___lldiv@divisor,w
  5126  0BD4  02F4               	subwf	___lldiv@dividend,f
  5127  0BD5  0871               	movf	___lldiv@divisor+1,w
  5128  0BD6  1C03               	skipc
  5129  0BD7  0F71               	incfsz	___lldiv@divisor+1,w
  5130  0BD8  02F5               	subwf	___lldiv@dividend+1,f
  5131  0BD9  0872               	movf	___lldiv@divisor+2,w
  5132  0BDA  1C03               	skipc
  5133  0BDB  0F72               	incfsz	___lldiv@divisor+2,w
  5134  0BDC  02F6               	subwf	___lldiv@dividend+2,f
  5135  0BDD  0873               	movf	___lldiv@divisor+3,w
  5136  0BDE  1C03               	skipc
  5137  0BDF  0F73               	incfsz	___lldiv@divisor+3,w
  5138  0BE0  02F7               	subwf	___lldiv@dividend+3,f
  5139  0BE1  1479               	bsf	___lldiv@quotient,0
  5140  0BE2                     l3249:	
  5141  0BE2  3001               	movlw	1
  5142  0BE3                     u3025:	
  5143  0BE3  1003               	clrc
  5144  0BE4  0CF3               	rrf	___lldiv@divisor+3,f
  5145  0BE5  0CF2               	rrf	___lldiv@divisor+2,f
  5146  0BE6  0CF1               	rrf	___lldiv@divisor+1,f
  5147  0BE7  0CF0               	rrf	___lldiv@divisor,f
  5148  0BE8  3EFF               	addlw	-1
  5149  0BE9  1D03               	skipz
  5150  0BEA  2BE3               	goto	u3025
  5151  0BEB  3001               	movlw	1
  5152  0BEC  02FD               	subwf	___lldiv@counter,f
  5153  0BED  1D03               	btfss	3,2
  5154  0BEE  2BBA               	goto	l3241
  5155  0BEF                     l3253:	
  5156  0BEF  087C               	movf	___lldiv@quotient+3,w
  5157  0BF0  00F3               	movwf	?___lldiv+3
  5158  0BF1  087B               	movf	___lldiv@quotient+2,w
  5159  0BF2  00F2               	movwf	?___lldiv+2
  5160  0BF3  087A               	movf	___lldiv@quotient+1,w
  5161  0BF4  00F1               	movwf	?___lldiv+1
  5162  0BF5  0879               	movf	___lldiv@quotient,w
  5163  0BF6  00F0               	movwf	?___lldiv
  5164  0BF7  0008               	return
  5165  0BF8                     __end_of___lldiv:	
  5166                           
  5167                           	psect	text14
  5168  0944                     __ptext14:	
  5169 ;; *************** function _FMTX *****************
  5170 ;; Defined at:
  5171 ;;		line 270 in file "FMCW.c"
  5172 ;; Parameters:    Size  Location     Type
  5173 ;;  Nref            2   60[BANK0 ] int 
  5174 ;;  Nprg            2   62[BANK0 ] PTR int 
  5175 ;;		 -> RAM(512), main@FMTX_Nprg(10), FMTX_Nprg(10), 
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;  fmtx            2   64[BANK0 ] int 
  5178 ;; Return value:  Size  Location     Type
  5179 ;;                  1    wreg      void 
  5180 ;; Registers used:
  5181 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5182 ;; Tracked objects:
  5183 ;;		On entry : 0/0
  5184 ;;		On exit  : 0/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5187 ;;      Params:         0       4       0       0       0
  5188 ;;      Locals:         0       2       0       0       0
  5189 ;;      Temps:          0       0       0       0       0
  5190 ;;      Totals:         0       6       0       0       0
  5191 ;;Total ram usage:        6 bytes
  5192 ;; Hardware stack levels used:    1
  5193 ;; Hardware stack levels required when called:    3
  5194 ;; This function calls:
  5195 ;;		_OPINIT
  5196 ;;		_OUTFQ
  5197 ;;		_RFDOUT
  5198 ;; This function is called by:
  5199 ;;		_main
  5200 ;;		_SetPLL
  5201 ;; This function uses a non-reentrant model
  5202 ;;
  5203                           
  5204                           
  5205                           ;psect for function _FMTX
  5206  0944                     _FMTX:	
  5207                           
  5208                           ;FMCW.c: 271: int fmtx = 1;
  5209                           
  5210                           ;incstack = 0
  5211                           ; Regs used in _FMTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5212  0944  3001               	movlw	1
  5213  0945  1283               	bcf	3,5	;RP0=0, select bank0
  5214  0946  1303               	bcf	3,6	;RP1=0, select bank0
  5215  0947  00E0               	movwf	FMTX@fmtx
  5216  0948  3000               	movlw	0
  5217  0949  00E1               	movwf	FMTX@fmtx+1
  5218                           
  5219                           ;FMCW.c: 272: OPINIT(fmtx);
  5220  094A  0861               	movf	FMTX@fmtx+1,w
  5221  094B  00F5               	movwf	OPINIT@fmcwtxrx+1
  5222  094C  0860               	movf	FMTX@fmtx,w
  5223  094D  00F4               	movwf	OPINIT@fmcwtxrx
  5224  094E  120A  158A  24BE  120A  158A  	fcall	_OPINIT
  5225                           
  5226                           ;FMCW.c: 273: RFDOUT(fmtx, Nref);
  5227  0953  1283               	bcf	3,5	;RP0=0, select bank0
  5228  0954  1303               	bcf	3,6	;RP1=0, select bank0
  5229  0955  0861               	movf	FMTX@fmtx+1,w
  5230  0956  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5231  0957  0860               	movf	FMTX@fmtx,w
  5232  0958  00F9               	movwf	RFDOUT@fmcwtxrx
  5233  0959  085D               	movf	FMTX@Nref+1,w
  5234  095A  00FC               	movwf	RFDOUT@Nref+1
  5235  095B  085C               	movf	FMTX@Nref,w
  5236  095C  00FB               	movwf	RFDOUT@Nref
  5237  095D  120A  158A  253B  120A  158A  	fcall	_RFDOUT
  5238                           
  5239                           ;FMCW.c: 274: OUTFQ(fmtx, Nprg);
  5240  0962  1283               	bcf	3,5	;RP0=0, select bank0
  5241  0963  1303               	bcf	3,6	;RP1=0, select bank0
  5242  0964  0861               	movf	FMTX@fmtx+1,w
  5243  0965  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5244  0966  0860               	movf	FMTX@fmtx,w
  5245  0967  00F9               	movwf	OUTFQ@fmcwtxrx
  5246  0968  085E               	movf	FMTX@Nprg,w
  5247  0969  00FB               	movwf	OUTFQ@Nprg
  5248  096A  085F               	movf	FMTX@Nprg+1,w
  5249  096B  00FC               	movwf	OUTFQ@Nprg+1
  5250  096C  120A  118A  20AC   	fcall	_OUTFQ
  5251  096F  0008               	return
  5252  0970                     __end_of_FMTX:	
  5253                           
  5254                           	psect	text15
  5255  0918                     __ptext15:	
  5256 ;; *************** function _FMRX *****************
  5257 ;; Defined at:
  5258 ;;		line 298 in file "FMCW.c"
  5259 ;; Parameters:    Size  Location     Type
  5260 ;;  Nref            2   60[BANK0 ] int 
  5261 ;;  Nprg            2   62[BANK0 ] PTR int 
  5262 ;;		 -> RAM(512), main@FMRX_Nprg(10), FMRX_Nprg(10), 
  5263 ;; Auto vars:     Size  Location     Type
  5264 ;;  fmrx            2   64[BANK0 ] int 
  5265 ;; Return value:  Size  Location     Type
  5266 ;;                  1    wreg      void 
  5267 ;; Registers used:
  5268 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5269 ;; Tracked objects:
  5270 ;;		On entry : 0/0
  5271 ;;		On exit  : 0/0
  5272 ;;		Unchanged: 0/0
  5273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5274 ;;      Params:         0       4       0       0       0
  5275 ;;      Locals:         0       2       0       0       0
  5276 ;;      Temps:          0       0       0       0       0
  5277 ;;      Totals:         0       6       0       0       0
  5278 ;;Total ram usage:        6 bytes
  5279 ;; Hardware stack levels used:    1
  5280 ;; Hardware stack levels required when called:    3
  5281 ;; This function calls:
  5282 ;;		_OPINIT
  5283 ;;		_OUTFQ
  5284 ;;		_RFDOUT
  5285 ;; This function is called by:
  5286 ;;		_main
  5287 ;;		_SetPLL
  5288 ;; This function uses a non-reentrant model
  5289 ;;
  5290                           
  5291                           
  5292                           ;psect for function _FMRX
  5293  0918                     _FMRX:	
  5294                           
  5295                           ;FMCW.c: 299: int fmrx = 3;
  5296                           
  5297                           ;incstack = 0
  5298                           ; Regs used in _FMRX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5299  0918  3003               	movlw	3
  5300  0919  1283               	bcf	3,5	;RP0=0, select bank0
  5301  091A  1303               	bcf	3,6	;RP1=0, select bank0
  5302  091B  00E0               	movwf	FMRX@fmrx
  5303  091C  3000               	movlw	0
  5304  091D  00E1               	movwf	FMRX@fmrx+1
  5305                           
  5306                           ;FMCW.c: 300: OPINIT(fmrx);
  5307  091E  0861               	movf	FMRX@fmrx+1,w
  5308  091F  00F5               	movwf	OPINIT@fmcwtxrx+1
  5309  0920  0860               	movf	FMRX@fmrx,w
  5310  0921  00F4               	movwf	OPINIT@fmcwtxrx
  5311  0922  120A  158A  24BE  120A  158A  	fcall	_OPINIT
  5312                           
  5313                           ;FMCW.c: 301: RFDOUT(fmrx, Nref);
  5314  0927  1283               	bcf	3,5	;RP0=0, select bank0
  5315  0928  1303               	bcf	3,6	;RP1=0, select bank0
  5316  0929  0861               	movf	FMRX@fmrx+1,w
  5317  092A  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5318  092B  0860               	movf	FMRX@fmrx,w
  5319  092C  00F9               	movwf	RFDOUT@fmcwtxrx
  5320  092D  085D               	movf	FMRX@Nref+1,w
  5321  092E  00FC               	movwf	RFDOUT@Nref+1
  5322  092F  085C               	movf	FMRX@Nref,w
  5323  0930  00FB               	movwf	RFDOUT@Nref
  5324  0931  120A  158A  253B  120A  158A  	fcall	_RFDOUT
  5325                           
  5326                           ;FMCW.c: 302: OUTFQ(fmrx, Nprg);
  5327  0936  1283               	bcf	3,5	;RP0=0, select bank0
  5328  0937  1303               	bcf	3,6	;RP1=0, select bank0
  5329  0938  0861               	movf	FMRX@fmrx+1,w
  5330  0939  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5331  093A  0860               	movf	FMRX@fmrx,w
  5332  093B  00F9               	movwf	OUTFQ@fmcwtxrx
  5333  093C  085E               	movf	FMRX@Nprg,w
  5334  093D  00FB               	movwf	OUTFQ@Nprg
  5335  093E  085F               	movf	FMRX@Nprg+1,w
  5336  093F  00FC               	movwf	OUTFQ@Nprg+1
  5337  0940  120A  118A  20AC   	fcall	_OUTFQ
  5338  0943  0008               	return
  5339  0944                     __end_of_FMRX:	
  5340                           
  5341                           	psect	text16
  5342  0B3D                     __ptext16:	
  5343 ;; *************** function _EEPROM_Write *****************
  5344 ;; Defined at:
  5345 ;;		line 51 in file "I2C.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;  EEPROM_addre    1    wreg     unsigned char 
  5348 ;;  high_address    1    2[COMMON] unsigned char 
  5349 ;;  low_address     1    3[COMMON] unsigned char 
  5350 ;;  data            1    4[COMMON] PTR unsigned char 
  5351 ;;		 -> NULL(0), dData(32), 
  5352 ;; Auto vars:     Size  Location     Type
  5353 ;;  EEPROM_addre    1    8[COMMON] unsigned char 
  5354 ;;  Address         1    9[COMMON] unsigned char 
  5355 ;; Return value:  Size  Location     Type
  5356 ;;                  1    wreg      void 
  5357 ;; Registers used:
  5358 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5359 ;; Tracked objects:
  5360 ;;		On entry : 0/0
  5361 ;;		On exit  : 0/0
  5362 ;;		Unchanged: 0/0
  5363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5364 ;;      Params:         3       0       0       0       0
  5365 ;;      Locals:         2       0       0       0       0
  5366 ;;      Temps:          3       0       0       0       0
  5367 ;;      Totals:         8       0       0       0       0
  5368 ;;Total ram usage:        8 bytes
  5369 ;; Hardware stack levels used:    1
  5370 ;; Hardware stack levels required when called:    2
  5371 ;; This function calls:
  5372 ;;		_I2C_Master_Start
  5373 ;;		_I2C_Master_Stop
  5374 ;;		_I2C_Master_Write
  5375 ;; This function is called by:
  5376 ;;		_main
  5377 ;; This function uses a non-reentrant model
  5378 ;;
  5379                           
  5380                           
  5381                           ;psect for function _EEPROM_Write
  5382  0B3D                     _EEPROM_Write:	
  5383                           
  5384                           ;incstack = 0
  5385                           ; Regs used in _EEPROM_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5386                           ;EEPROM_Write@EEPROM_address stored from wreg
  5387  0B3D  00F8               	movwf	EEPROM_Write@EEPROM_address
  5388                           
  5389                           ;I2C.c: 52: UBYTE Address = EEPROM_address << 1;
  5390  0B3E  0878               	movf	EEPROM_Write@EEPROM_address,w
  5391  0B3F  00F5               	movwf	??_EEPROM_Write
  5392  0B40  0775               	addwf	??_EEPROM_Write,w
  5393  0B41  00F6               	movwf	??_EEPROM_Write+1
  5394  0B42  0876               	movf	??_EEPROM_Write+1,w
  5395  0B43  00F9               	movwf	EEPROM_Write@Address
  5396                           
  5397                           ;I2C.c: 55: I2C_Master_Start();
  5398  0B44  160A  118A  27E2  120A  158A  	fcall	_I2C_Master_Start
  5399                           
  5400                           ;I2C.c: 56: I2C_Master_Write(Address);
  5401  0B49  0879               	movf	EEPROM_Write@Address,w
  5402  0B4A  00F5               	movwf	??_EEPROM_Write
  5403  0B4B  01F6               	clrf	??_EEPROM_Write+1
  5404  0B4C  0875               	movf	??_EEPROM_Write,w
  5405  0B4D  00F0               	movwf	I2C_Master_Write@d
  5406  0B4E  0876               	movf	??_EEPROM_Write+1,w
  5407  0B4F  00F1               	movwf	I2C_Master_Write@d+1
  5408  0B50  160A  118A  27F0  120A  158A  	fcall	_I2C_Master_Write
  5409                           
  5410                           ;I2C.c: 57: I2C_Master_Write(high_address);
  5411  0B55  0872               	movf	EEPROM_Write@high_address,w
  5412  0B56  00F5               	movwf	??_EEPROM_Write
  5413  0B57  01F6               	clrf	??_EEPROM_Write+1
  5414  0B58  0875               	movf	??_EEPROM_Write,w
  5415  0B59  00F0               	movwf	I2C_Master_Write@d
  5416  0B5A  0876               	movf	??_EEPROM_Write+1,w
  5417  0B5B  00F1               	movwf	I2C_Master_Write@d+1
  5418  0B5C  160A  118A  27F0  120A  158A  	fcall	_I2C_Master_Write
  5419                           
  5420                           ;I2C.c: 58: I2C_Master_Write(low_address);
  5421  0B61  0873               	movf	EEPROM_Write@low_address,w
  5422  0B62  00F5               	movwf	??_EEPROM_Write
  5423  0B63  01F6               	clrf	??_EEPROM_Write+1
  5424  0B64  0875               	movf	??_EEPROM_Write,w
  5425  0B65  00F0               	movwf	I2C_Master_Write@d
  5426  0B66  0876               	movf	??_EEPROM_Write+1,w
  5427  0B67  00F1               	movwf	I2C_Master_Write@d+1
  5428  0B68  160A  118A  27F0  120A  158A  	fcall	_I2C_Master_Write
  5429  0B6D                     l3445:	
  5430                           ;I2C.c: 59: while(*data){
  5431                           
  5432  0B6D  0874               	movf	EEPROM_Write@data,w
  5433  0B6E  0084               	movwf	4
  5434  0B6F  1783               	bsf	3,7	;select IRP bank2
  5435  0B70  0800               	movf	0,w
  5436  0B71  1903               	btfsc	3,2
  5437  0B72  2B87               	goto	l3447
  5438                           
  5439                           ;I2C.c: 60: I2C_Master_Write(*data);
  5440  0B73  0874               	movf	EEPROM_Write@data,w
  5441  0B74  0084               	movwf	4
  5442  0B75  1783               	bsf	3,7	;select IRP bank2
  5443  0B76  0800               	movf	0,w
  5444  0B77  00F5               	movwf	??_EEPROM_Write
  5445  0B78  01F6               	clrf	??_EEPROM_Write+1
  5446  0B79  0875               	movf	??_EEPROM_Write,w
  5447  0B7A  00F0               	movwf	I2C_Master_Write@d
  5448  0B7B  0876               	movf	??_EEPROM_Write+1,w
  5449  0B7C  00F1               	movwf	I2C_Master_Write@d+1
  5450  0B7D  160A  118A  27F0  120A  158A  	fcall	_I2C_Master_Write
  5451                           
  5452                           ;I2C.c: 61: ++data;
  5453  0B82  3001               	movlw	1
  5454  0B83  00F5               	movwf	??_EEPROM_Write
  5455  0B84  0875               	movf	??_EEPROM_Write,w
  5456  0B85  07F4               	addwf	EEPROM_Write@data,f
  5457  0B86  2B6D               	goto	l3445
  5458  0B87                     l3447:	
  5459                           
  5460                           ;I2C.c: 62: }
  5461                           ;I2C.c: 63: I2C_Master_Stop();
  5462  0B87  160A  118A  27E9  120A  158A  	fcall	_I2C_Master_Stop
  5463                           
  5464                           ;I2C.c: 64: _delay((unsigned long)((200)*(10000000/4000.0)));
  5465  0B8C  3003               	movlw	3
  5466  0B8D  00F7               	movwf	??_EEPROM_Write+2
  5467  0B8E  308A               	movlw	138
  5468  0B8F  00F6               	movwf	??_EEPROM_Write+1
  5469  0B90  3055               	movlw	85
  5470  0B91  00F5               	movwf	??_EEPROM_Write
  5471  0B92                     u3667:	
  5472  0B92  0BF5               	decfsz	??_EEPROM_Write,f
  5473  0B93  2B92               	goto	u3667
  5474  0B94  0BF6               	decfsz	??_EEPROM_Write+1,f
  5475  0B95  2B92               	goto	u3667
  5476  0B96  0BF7               	decfsz	??_EEPROM_Write+2,f
  5477  0B97  2B92               	goto	u3667
  5478  0B98  2B99               	nop2
  5479  0B99  0008               	return
  5480  0B9A                     __end_of_EEPROM_Write:	
  5481                           
  5482                           	psect	text17
  5483  17F0                     __ptext17:	
  5484 ;; *************** function _I2C_Master_Write *****************
  5485 ;; Defined at:
  5486 ;;		line 34 in file "I2C.c"
  5487 ;; Parameters:    Size  Location     Type
  5488 ;;  d               2    0[COMMON] unsigned int 
  5489 ;; Auto vars:     Size  Location     Type
  5490 ;;		None
  5491 ;; Return value:  Size  Location     Type
  5492 ;;                  1    wreg      void 
  5493 ;; Registers used:
  5494 ;;		wreg, status,2, status,0, pclath, cstack
  5495 ;; Tracked objects:
  5496 ;;		On entry : 0/0
  5497 ;;		On exit  : 0/0
  5498 ;;		Unchanged: 0/0
  5499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5500 ;;      Params:         2       0       0       0       0
  5501 ;;      Locals:         0       0       0       0       0
  5502 ;;      Temps:          0       0       0       0       0
  5503 ;;      Totals:         2       0       0       0       0
  5504 ;;Total ram usage:        2 bytes
  5505 ;; Hardware stack levels used:    1
  5506 ;; Hardware stack levels required when called:    1
  5507 ;; This function calls:
  5508 ;;		_I2C_Master_Wait
  5509 ;; This function is called by:
  5510 ;;		_EEPROM_Write
  5511 ;; This function uses a non-reentrant model
  5512 ;;
  5513                           
  5514                           
  5515                           ;psect for function _I2C_Master_Write
  5516  17F0                     _I2C_Master_Write:	
  5517                           
  5518                           ;I2C.c: 35: I2C_Master_Wait();
  5519                           
  5520                           ;incstack = 0
  5521                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5522  17F0  120A  158A  201E   	fcall	_I2C_Master_Wait
  5523                           
  5524                           ;I2C.c: 36: SSPBUF = d;
  5525  17F3  0870               	movf	I2C_Master_Write@d,w
  5526  17F4  1283               	bcf	3,5	;RP0=0, select bank0
  5527  17F5  1303               	bcf	3,6	;RP1=0, select bank0
  5528  17F6  0093               	movwf	19	;volatile
  5529  17F7  0008               	return
  5530  17F8                     __end_of_I2C_Master_Write:	
  5531                           
  5532                           	psect	text18
  5533  17E9                     __ptext18:	
  5534 ;; *************** function _I2C_Master_Stop *****************
  5535 ;; Defined at:
  5536 ;;		line 29 in file "I2C.c"
  5537 ;; Parameters:    Size  Location     Type
  5538 ;;		None
  5539 ;; Auto vars:     Size  Location     Type
  5540 ;;		None
  5541 ;; Return value:  Size  Location     Type
  5542 ;;                  1    wreg      void 
  5543 ;; Registers used:
  5544 ;;		wreg, status,2, status,0, pclath, cstack
  5545 ;; Tracked objects:
  5546 ;;		On entry : 0/0
  5547 ;;		On exit  : 0/0
  5548 ;;		Unchanged: 0/0
  5549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5550 ;;      Params:         0       0       0       0       0
  5551 ;;      Locals:         0       0       0       0       0
  5552 ;;      Temps:          0       0       0       0       0
  5553 ;;      Totals:         0       0       0       0       0
  5554 ;;Total ram usage:        0 bytes
  5555 ;; Hardware stack levels used:    1
  5556 ;; Hardware stack levels required when called:    1
  5557 ;; This function calls:
  5558 ;;		_I2C_Master_Wait
  5559 ;; This function is called by:
  5560 ;;		_EEPROM_Write
  5561 ;; This function uses a non-reentrant model
  5562 ;;
  5563                           
  5564                           
  5565                           ;psect for function _I2C_Master_Stop
  5566  17E9                     _I2C_Master_Stop:	
  5567                           
  5568                           ;I2C.c: 30: I2C_Master_Wait();
  5569                           
  5570                           ;incstack = 0
  5571                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5572  17E9  120A  158A  201E   	fcall	_I2C_Master_Wait
  5573                           
  5574                           ;I2C.c: 31: PEN = 1;
  5575  17EC  1683               	bsf	3,5	;RP0=1, select bank1
  5576  17ED  1303               	bcf	3,6	;RP1=0, select bank1
  5577  17EE  1511               	bsf	17,2	;volatile
  5578  17EF  0008               	return
  5579  17F0                     __end_of_I2C_Master_Stop:	
  5580                           
  5581                           	psect	text19
  5582  17E2                     __ptext19:	
  5583 ;; *************** function _I2C_Master_Start *****************
  5584 ;; Defined at:
  5585 ;;		line 19 in file "I2C.c"
  5586 ;; Parameters:    Size  Location     Type
  5587 ;;		None
  5588 ;; Auto vars:     Size  Location     Type
  5589 ;;		None
  5590 ;; Return value:  Size  Location     Type
  5591 ;;                  1    wreg      void 
  5592 ;; Registers used:
  5593 ;;		wreg, status,2, status,0, pclath, cstack
  5594 ;; Tracked objects:
  5595 ;;		On entry : 0/0
  5596 ;;		On exit  : 0/0
  5597 ;;		Unchanged: 0/0
  5598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5599 ;;      Params:         0       0       0       0       0
  5600 ;;      Locals:         0       0       0       0       0
  5601 ;;      Temps:          0       0       0       0       0
  5602 ;;      Totals:         0       0       0       0       0
  5603 ;;Total ram usage:        0 bytes
  5604 ;; Hardware stack levels used:    1
  5605 ;; Hardware stack levels required when called:    1
  5606 ;; This function calls:
  5607 ;;		_I2C_Master_Wait
  5608 ;; This function is called by:
  5609 ;;		_EEPROM_Write
  5610 ;; This function uses a non-reentrant model
  5611 ;;
  5612                           
  5613                           
  5614                           ;psect for function _I2C_Master_Start
  5615  17E2                     _I2C_Master_Start:	
  5616                           
  5617                           ;I2C.c: 20: I2C_Master_Wait();
  5618                           
  5619                           ;incstack = 0
  5620                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5621  17E2  120A  158A  201E   	fcall	_I2C_Master_Wait
  5622                           
  5623                           ;I2C.c: 21: SEN = 1;
  5624  17E5  1683               	bsf	3,5	;RP0=1, select bank1
  5625  17E6  1303               	bcf	3,6	;RP1=0, select bank1
  5626  17E7  1411               	bsf	17,0	;volatile
  5627  17E8  0008               	return
  5628  17E9                     __end_of_I2C_Master_Start:	
  5629                           
  5630                           	psect	text20
  5631  081E                     __ptext20:	
  5632 ;; *************** function _I2C_Master_Wait *****************
  5633 ;; Defined at:
  5634 ;;		line 15 in file "I2C.c"
  5635 ;; Parameters:    Size  Location     Type
  5636 ;;		None
  5637 ;; Auto vars:     Size  Location     Type
  5638 ;;		None
  5639 ;; Return value:  Size  Location     Type
  5640 ;;                  1    wreg      void 
  5641 ;; Registers used:
  5642 ;;		wreg, status,2
  5643 ;; Tracked objects:
  5644 ;;		On entry : 0/0
  5645 ;;		On exit  : 0/0
  5646 ;;		Unchanged: 0/0
  5647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5648 ;;      Params:         0       0       0       0       0
  5649 ;;      Locals:         0       0       0       0       0
  5650 ;;      Temps:          0       0       0       0       0
  5651 ;;      Totals:         0       0       0       0       0
  5652 ;;Total ram usage:        0 bytes
  5653 ;; Hardware stack levels used:    1
  5654 ;; This function calls:
  5655 ;;		Nothing
  5656 ;; This function is called by:
  5657 ;;		_I2C_Master_Start
  5658 ;;		_I2C_Master_Stop
  5659 ;;		_I2C_Master_Write
  5660 ;;		_I2C_Master_RepeatedStart
  5661 ;;		_I2C_Master_Read
  5662 ;; This function uses a non-reentrant model
  5663 ;;
  5664                           
  5665                           
  5666                           ;psect for function _I2C_Master_Wait
  5667  081E                     _I2C_Master_Wait:	
  5668  081E                     l490:	
  5669                           ;I2C.c: 16: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5670                           
  5671                           ;incstack = 0
  5672                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5673                           
  5674  081E  1683               	bsf	3,5	;RP0=1, select bank1
  5675  081F  1303               	bcf	3,6	;RP1=0, select bank1
  5676  0820  1914               	btfsc	20,2	;volatile
  5677  0821  281E               	goto	l490
  5678  0822  0811               	movf	17,w	;volatile
  5679  0823  391F               	andlw	31
  5680  0824  1903               	btfsc	3,2
  5681  0825  0008               	return
  5682  0826  281E               	goto	l490
  5683  0827                     __end_of_I2C_Master_Wait:	
  5684                           
  5685                           	psect	text21
  5686  08EC                     __ptext21:	
  5687 ;; *************** function _CWTX *****************
  5688 ;; Defined at:
  5689 ;;		line 284 in file "FMCW.c"
  5690 ;; Parameters:    Size  Location     Type
  5691 ;;  Nref            2   60[BANK0 ] int 
  5692 ;;  Nprg            2   62[BANK0 ] PTR int 
  5693 ;;		 -> RAM(512), main@CWTX_Nprg(10), CWTX_Nprg(10), 
  5694 ;; Auto vars:     Size  Location     Type
  5695 ;;  cwtx            2   64[BANK0 ] int 
  5696 ;; Return value:  Size  Location     Type
  5697 ;;                  1    wreg      void 
  5698 ;; Registers used:
  5699 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5700 ;; Tracked objects:
  5701 ;;		On entry : 0/0
  5702 ;;		On exit  : 0/0
  5703 ;;		Unchanged: 0/0
  5704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5705 ;;      Params:         0       4       0       0       0
  5706 ;;      Locals:         0       2       0       0       0
  5707 ;;      Temps:          0       0       0       0       0
  5708 ;;      Totals:         0       6       0       0       0
  5709 ;;Total ram usage:        6 bytes
  5710 ;; Hardware stack levels used:    1
  5711 ;; Hardware stack levels required when called:    3
  5712 ;; This function calls:
  5713 ;;		_OPINIT
  5714 ;;		_OUTFQ
  5715 ;;		_RFDOUT
  5716 ;; This function is called by:
  5717 ;;		_main
  5718 ;;		_SetPLL
  5719 ;; This function uses a non-reentrant model
  5720 ;;
  5721                           
  5722                           
  5723                           ;psect for function _CWTX
  5724  08EC                     _CWTX:	
  5725                           
  5726                           ;FMCW.c: 285: int cwtx = 2;
  5727                           
  5728                           ;incstack = 0
  5729                           ; Regs used in _CWTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5730  08EC  3002               	movlw	2
  5731  08ED  1283               	bcf	3,5	;RP0=0, select bank0
  5732  08EE  1303               	bcf	3,6	;RP1=0, select bank0
  5733  08EF  00E0               	movwf	CWTX@cwtx
  5734  08F0  3000               	movlw	0
  5735  08F1  00E1               	movwf	CWTX@cwtx+1
  5736                           
  5737                           ;FMCW.c: 286: OPINIT(cwtx);
  5738  08F2  0861               	movf	CWTX@cwtx+1,w
  5739  08F3  00F5               	movwf	OPINIT@fmcwtxrx+1
  5740  08F4  0860               	movf	CWTX@cwtx,w
  5741  08F5  00F4               	movwf	OPINIT@fmcwtxrx
  5742  08F6  120A  158A  24BE  120A  158A  	fcall	_OPINIT
  5743                           
  5744                           ;FMCW.c: 287: RFDOUT(cwtx, Nref);
  5745  08FB  1283               	bcf	3,5	;RP0=0, select bank0
  5746  08FC  1303               	bcf	3,6	;RP1=0, select bank0
  5747  08FD  0861               	movf	CWTX@cwtx+1,w
  5748  08FE  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5749  08FF  0860               	movf	CWTX@cwtx,w
  5750  0900  00F9               	movwf	RFDOUT@fmcwtxrx
  5751  0901  085D               	movf	CWTX@Nref+1,w
  5752  0902  00FC               	movwf	RFDOUT@Nref+1
  5753  0903  085C               	movf	CWTX@Nref,w
  5754  0904  00FB               	movwf	RFDOUT@Nref
  5755  0905  120A  158A  253B  120A  158A  	fcall	_RFDOUT
  5756                           
  5757                           ;FMCW.c: 288: OUTFQ(cwtx, Nprg);
  5758  090A  1283               	bcf	3,5	;RP0=0, select bank0
  5759  090B  1303               	bcf	3,6	;RP1=0, select bank0
  5760  090C  0861               	movf	CWTX@cwtx+1,w
  5761  090D  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5762  090E  0860               	movf	CWTX@cwtx,w
  5763  090F  00F9               	movwf	OUTFQ@fmcwtxrx
  5764  0910  085E               	movf	CWTX@Nprg,w
  5765  0911  00FB               	movwf	OUTFQ@Nprg
  5766  0912  085F               	movf	CWTX@Nprg+1,w
  5767  0913  00FC               	movwf	OUTFQ@Nprg+1
  5768  0914  120A  118A  20AC   	fcall	_OUTFQ
  5769  0917  0008               	return
  5770  0918                     __end_of_CWTX:	
  5771                           
  5772                           	psect	text22
  5773  0D3B                     __ptext22:	
  5774 ;; *************** function _RFDOUT *****************
  5775 ;; Defined at:
  5776 ;;		line 200 in file "FMCW.c"
  5777 ;; Parameters:    Size  Location     Type
  5778 ;;  fmcwtxrx        2    9[COMMON] int 
  5779 ;;  Nref            2   11[COMMON] int 
  5780 ;; Auto vars:     Size  Location     Type
  5781 ;;  i               2   31[BANK0 ] int 
  5782 ;;  i               2   27[BANK0 ] int 
  5783 ;;  i               2   29[BANK0 ] int 
  5784 ;;  Nref_b         24    3[BANK0 ] int [12]
  5785 ;; Return value:  Size  Location     Type
  5786 ;;                  1    wreg      void 
  5787 ;; Registers used:
  5788 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5789 ;; Tracked objects:
  5790 ;;		On entry : 0/0
  5791 ;;		On exit  : 0/0
  5792 ;;		Unchanged: 0/0
  5793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5794 ;;      Params:         4       0       0       0       0
  5795 ;;      Locals:         0      30       0       0       0
  5796 ;;      Temps:          0       3       0       0       0
  5797 ;;      Totals:         4      33       0       0       0
  5798 ;;Total ram usage:       37 bytes
  5799 ;; Hardware stack levels used:    1
  5800 ;; Hardware stack levels required when called:    2
  5801 ;; This function calls:
  5802 ;;		_H_OUT
  5803 ;;		_L_OUT
  5804 ;;		_STBOUT
  5805 ;;		___awdiv
  5806 ;; This function is called by:
  5807 ;;		_FMTX
  5808 ;;		_CWTX
  5809 ;;		_FMRX
  5810 ;; This function uses a non-reentrant model
  5811 ;;
  5812                           
  5813                           
  5814                           ;psect for function _RFDOUT
  5815  0D3B                     _RFDOUT:	
  5816                           
  5817                           ;FMCW.c: 201: int Nref_b[12];
  5818                           ;FMCW.c: 203: for(int i=0; i<12; i++){
  5819                           
  5820                           ;incstack = 0
  5821                           ; Regs used in _RFDOUT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5822  0D3B  1283               	bcf	3,5	;RP0=0, select bank0
  5823  0D3C  1303               	bcf	3,6	;RP1=0, select bank0
  5824  0D3D  01BD               	clrf	RFDOUT@i
  5825  0D3E  01BE               	clrf	RFDOUT@i+1
  5826  0D3F  083E               	movf	RFDOUT@i+1,w
  5827  0D40  3A80               	xorlw	128
  5828  0D41  00FF               	movwf	127
  5829  0D42  3080               	movlw	128
  5830  0D43  027F               	subwf	127,w
  5831  0D44  1D03               	skipz
  5832  0D45  2D48               	goto	u2895
  5833  0D46  300C               	movlw	12
  5834  0D47  023D               	subwf	RFDOUT@i,w
  5835  0D48                     u2895:	
  5836  0D48  1803               	btfsc	3,0
  5837  0D49  2D66               	goto	l3197
  5838  0D4A                     l3191:	
  5839                           
  5840                           ;FMCW.c: 204: Nref_b[i] = 0;
  5841  0D4A  1283               	bcf	3,5	;RP0=0, select bank0
  5842  0D4B  1303               	bcf	3,6	;RP1=0, select bank0
  5843  0D4C  083D               	movf	RFDOUT@i,w
  5844  0D4D  00A0               	movwf	??_RFDOUT
  5845  0D4E  0720               	addwf	??_RFDOUT,w
  5846  0D4F  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  5847  0D50  0084               	movwf	4
  5848  0D51  1383               	bcf	3,7	;select IRP bank0
  5849  0D52  0180               	clrf	0
  5850  0D53  0A84               	incf	4,f
  5851  0D54  0180               	clrf	0
  5852  0D55  3001               	movlw	1
  5853  0D56  07BD               	addwf	RFDOUT@i,f
  5854  0D57  1803               	skipnc
  5855  0D58  0ABE               	incf	RFDOUT@i+1,f
  5856  0D59  3000               	movlw	0
  5857  0D5A  07BE               	addwf	RFDOUT@i+1,f
  5858  0D5B  083E               	movf	RFDOUT@i+1,w
  5859  0D5C  3A80               	xorlw	128
  5860  0D5D  00FF               	movwf	127
  5861  0D5E  3080               	movlw	128
  5862  0D5F  027F               	subwf	127,w
  5863  0D60  1D03               	skipz
  5864  0D61  2D64               	goto	u2905
  5865  0D62  300C               	movlw	12
  5866  0D63  023D               	subwf	RFDOUT@i,w
  5867  0D64                     u2905:	
  5868  0D64  1C03               	skipc
  5869  0D65  2D4A               	goto	l3191
  5870  0D66                     l3197:	
  5871                           
  5872                           ;FMCW.c: 205: }
  5873                           ;FMCW.c: 208: for(int i=0; Nref>0; i++){
  5874  0D66  1283               	bcf	3,5	;RP0=0, select bank0
  5875  0D67  1303               	bcf	3,6	;RP1=0, select bank0
  5876  0D68  01BB               	clrf	RFDOUT@i_485
  5877  0D69  01BC               	clrf	RFDOUT@i_485+1
  5878  0D6A  087C               	movf	RFDOUT@Nref+1,w
  5879  0D6B  3A80               	xorlw	128
  5880  0D6C  00FF               	movwf	127
  5881  0D6D  3080               	movlw	128
  5882  0D6E  027F               	subwf	127,w
  5883  0D6F  1D03               	skipz
  5884  0D70  2D73               	goto	u2915
  5885  0D71  3001               	movlw	1
  5886  0D72  027B               	subwf	RFDOUT@Nref,w
  5887  0D73                     u2915:	
  5888  0D73  1C03               	btfss	3,0
  5889  0D74  2DAC               	goto	l3211
  5890  0D75                     l3203:	
  5891                           
  5892                           ;FMCW.c: 209: Nref_b[i] = Nref % 2;
  5893  0D75  3001               	movlw	1
  5894  0D76  057B               	andwf	RFDOUT@Nref,w
  5895  0D77  1283               	bcf	3,5	;RP0=0, select bank0
  5896  0D78  1303               	bcf	3,6	;RP1=0, select bank0
  5897  0D79  00A0               	movwf	??_RFDOUT
  5898  0D7A  3000               	movlw	0
  5899  0D7B  057C               	andwf	RFDOUT@Nref+1,w
  5900  0D7C  00A1               	movwf	??_RFDOUT+1
  5901  0D7D  083B               	movf	RFDOUT@i_485,w
  5902  0D7E  00A2               	movwf	??_RFDOUT+2
  5903  0D7F  0722               	addwf	??_RFDOUT+2,w
  5904  0D80  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  5905  0D81  0084               	movwf	4
  5906  0D82  0820               	movf	??_RFDOUT,w
  5907  0D83  1383               	bcf	3,7	;select IRP bank0
  5908  0D84  0080               	movwf	0
  5909  0D85  0A84               	incf	4,f
  5910  0D86  0821               	movf	??_RFDOUT+1,w
  5911  0D87  0080               	movwf	0
  5912                           
  5913                           ;FMCW.c: 210: Nref = Nref / 2;
  5914  0D88  3002               	movlw	2
  5915  0D89  00F0               	movwf	___awdiv@divisor
  5916  0D8A  3000               	movlw	0
  5917  0D8B  00F1               	movwf	___awdiv@divisor+1
  5918  0D8C  087C               	movf	RFDOUT@Nref+1,w
  5919  0D8D  00F3               	movwf	___awdiv@dividend+1
  5920  0D8E  087B               	movf	RFDOUT@Nref,w
  5921  0D8F  00F2               	movwf	___awdiv@dividend
  5922  0D90  120A  158A  22E4  120A  158A  	fcall	___awdiv
  5923  0D95  0871               	movf	?___awdiv+1,w
  5924  0D96  00FC               	movwf	RFDOUT@Nref+1
  5925  0D97  0870               	movf	?___awdiv,w
  5926  0D98  00FB               	movwf	RFDOUT@Nref
  5927  0D99  3001               	movlw	1
  5928  0D9A  1283               	bcf	3,5	;RP0=0, select bank0
  5929  0D9B  1303               	bcf	3,6	;RP1=0, select bank0
  5930  0D9C  07BB               	addwf	RFDOUT@i_485,f
  5931  0D9D  1803               	skipnc
  5932  0D9E  0ABC               	incf	RFDOUT@i_485+1,f
  5933  0D9F  3000               	movlw	0
  5934  0DA0  07BC               	addwf	RFDOUT@i_485+1,f
  5935  0DA1  087C               	movf	RFDOUT@Nref+1,w
  5936  0DA2  3A80               	xorlw	128
  5937  0DA3  00FF               	movwf	127
  5938  0DA4  3080               	movlw	128
  5939  0DA5  027F               	subwf	127,w
  5940  0DA6  1D03               	skipz
  5941  0DA7  2DAA               	goto	u2925
  5942  0DA8  3001               	movlw	1
  5943  0DA9  027B               	subwf	RFDOUT@Nref,w
  5944  0DAA                     u2925:	
  5945  0DAA  1803               	skipnc
  5946  0DAB  2D75               	goto	l3203
  5947  0DAC                     l3211:	
  5948                           
  5949                           ;FMCW.c: 211: }
  5950                           ;FMCW.c: 214: for (int i=0; i<12; i++)
  5951  0DAC  1283               	bcf	3,5	;RP0=0, select bank0
  5952  0DAD  1303               	bcf	3,6	;RP1=0, select bank0
  5953  0DAE  01BF               	clrf	RFDOUT@i_486
  5954  0DAF  01C0               	clrf	RFDOUT@i_486+1
  5955  0DB0  0840               	movf	RFDOUT@i_486+1,w
  5956  0DB1  3A80               	xorlw	128
  5957  0DB2  00FF               	movwf	127
  5958  0DB3  3080               	movlw	128
  5959  0DB4  027F               	subwf	127,w
  5960  0DB5  1D03               	skipz
  5961  0DB6  2DB9               	goto	u2935
  5962  0DB7  300C               	movlw	12
  5963  0DB8  023F               	subwf	RFDOUT@i_486,w
  5964  0DB9                     u2935:	
  5965  0DB9  1803               	btfsc	3,0
  5966  0DBA  2E02               	goto	l3229
  5967  0DBB                     l3217:	
  5968                           
  5969                           ;FMCW.c: 215: {
  5970                           ;FMCW.c: 216: if(Nref_b[i] == 0)
  5971  0DBB  1283               	bcf	3,5	;RP0=0, select bank0
  5972  0DBC  1303               	bcf	3,6	;RP1=0, select bank0
  5973  0DBD  083F               	movf	RFDOUT@i_486,w
  5974  0DBE  00A0               	movwf	??_RFDOUT
  5975  0DBF  0720               	addwf	??_RFDOUT,w
  5976  0DC0  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  5977  0DC1  0084               	movwf	4
  5978  0DC2  1383               	bcf	3,7	;select IRP bank0
  5979  0DC3  0800               	movf	0,w
  5980  0DC4  00A1               	movwf	??_RFDOUT+1
  5981  0DC5  0A84               	incf	4,f
  5982  0DC6  0800               	movf	0,w
  5983  0DC7  00A2               	movwf	??_RFDOUT+2
  5984  0DC8  0821               	movf	??_RFDOUT+1,w
  5985  0DC9  0422               	iorwf	??_RFDOUT+2,w
  5986  0DCA  1D03               	btfss	3,2
  5987  0DCB  2DD5               	goto	l3221
  5988                           
  5989                           ;FMCW.c: 217: {
  5990                           ;FMCW.c: 218: L_OUT(fmcwtxrx);
  5991  0DCC  087A               	movf	RFDOUT@fmcwtxrx+1,w
  5992  0DCD  00F3               	movwf	L_OUT@fmcwtxrx+1
  5993  0DCE  0879               	movf	RFDOUT@fmcwtxrx,w
  5994  0DCF  00F2               	movwf	L_OUT@fmcwtxrx
  5995  0DD0  120A  158A  2252  120A  158A  	fcall	_L_OUT
  5996  0DD5                     l3221:	
  5997                           
  5998                           ;FMCW.c: 219: }
  5999                           ;FMCW.c: 220: if(Nref_b[i] == 1)
  6000  0DD5  1283               	bcf	3,5	;RP0=0, select bank0
  6001  0DD6  1303               	bcf	3,6	;RP1=0, select bank0
  6002  0DD7  083F               	movf	RFDOUT@i_486,w
  6003  0DD8  00A0               	movwf	??_RFDOUT
  6004  0DD9  0720               	addwf	??_RFDOUT,w
  6005  0DDA  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6006  0DDB  0084               	movwf	4
  6007  0DDC  1383               	bcf	3,7	;select IRP bank0
  6008  0DDD  0800               	movf	0,w
  6009  0DDE  00A1               	movwf	??_RFDOUT+1
  6010  0DDF  0A84               	incf	4,f
  6011  0DE0  0800               	movf	0,w
  6012  0DE1  00A2               	movwf	??_RFDOUT+2
  6013  0DE2  0321               	decf	??_RFDOUT+1,w
  6014  0DE3  0422               	iorwf	??_RFDOUT+2,w
  6015  0DE4  1D03               	btfss	3,2
  6016  0DE5  2DEF               	goto	l3225
  6017                           
  6018                           ;FMCW.c: 221: {
  6019                           ;FMCW.c: 222: H_OUT(fmcwtxrx);
  6020  0DE6  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6021  0DE7  00F3               	movwf	H_OUT@fmcwtxrx+1
  6022  0DE8  0879               	movf	RFDOUT@fmcwtxrx,w
  6023  0DE9  00F2               	movwf	H_OUT@fmcwtxrx
  6024  0DEA  120A  158A  220C  120A  158A  	fcall	_H_OUT
  6025  0DEF                     l3225:	
  6026  0DEF  3001               	movlw	1
  6027  0DF0  1283               	bcf	3,5	;RP0=0, select bank0
  6028  0DF1  1303               	bcf	3,6	;RP1=0, select bank0
  6029  0DF2  07BF               	addwf	RFDOUT@i_486,f
  6030  0DF3  1803               	skipnc
  6031  0DF4  0AC0               	incf	RFDOUT@i_486+1,f
  6032  0DF5  3000               	movlw	0
  6033  0DF6  07C0               	addwf	RFDOUT@i_486+1,f
  6034  0DF7  0840               	movf	RFDOUT@i_486+1,w
  6035  0DF8  3A80               	xorlw	128
  6036  0DF9  00FF               	movwf	127
  6037  0DFA  3080               	movlw	128
  6038  0DFB  027F               	subwf	127,w
  6039  0DFC  1D03               	skipz
  6040  0DFD  2E00               	goto	u2965
  6041  0DFE  300C               	movlw	12
  6042  0DFF  023F               	subwf	RFDOUT@i_486,w
  6043  0E00                     u2965:	
  6044  0E00  1C03               	skipc
  6045  0E01  2DBB               	goto	l3217
  6046  0E02                     l3229:	
  6047                           
  6048                           ;FMCW.c: 223: }
  6049                           ;FMCW.c: 224: }
  6050                           ;FMCW.c: 227: H_OUT(fmcwtxrx);
  6051  0E02  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6052  0E03  00F3               	movwf	H_OUT@fmcwtxrx+1
  6053  0E04  0879               	movf	RFDOUT@fmcwtxrx,w
  6054  0E05  00F2               	movwf	H_OUT@fmcwtxrx
  6055  0E06  120A  158A  220C  120A  158A  	fcall	_H_OUT
  6056                           
  6057                           ;FMCW.c: 228: H_OUT(fmcwtxrx);
  6058  0E0B  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6059  0E0C  00F3               	movwf	H_OUT@fmcwtxrx+1
  6060  0E0D  0879               	movf	RFDOUT@fmcwtxrx,w
  6061  0E0E  00F2               	movwf	H_OUT@fmcwtxrx
  6062  0E0F  120A  158A  220C  120A  158A  	fcall	_H_OUT
  6063                           
  6064                           ;FMCW.c: 231: STBOUT(fmcwtxrx);
  6065  0E14  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6066  0E15  00F3               	movwf	STBOUT@fmcwtxrx+1
  6067  0E16  0879               	movf	RFDOUT@fmcwtxrx,w
  6068  0E17  00F2               	movwf	STBOUT@fmcwtxrx
  6069  0E18  120A  158A  2170   	fcall	_STBOUT
  6070  0E1B  0008               	return
  6071  0E1C                     __end_of_RFDOUT:	
  6072                           
  6073                           	psect	text23
  6074  00AC                     __ptext23:	
  6075 ;; *************** function _OUTFQ *****************
  6076 ;; Defined at:
  6077 ;;		line 136 in file "FMCW.c"
  6078 ;; Parameters:    Size  Location     Type
  6079 ;;  fmcwtxrx        2    9[COMMON] int 
  6080 ;;  Nprg            2   11[COMMON] PTR int 
  6081 ;;		 -> RAM(512), main@FMRX_Nprg(10), main@CWTX_Nprg(10), main@FMTX_Nprg(10), 
  6082 ;;		 -> FMRX_Nprg(10), CWTX_Nprg(10), FMTX_Nprg(10), 
  6083 ;; Auto vars:     Size  Location     Type
  6084 ;;  j               2   58[BANK0 ] int 
  6085 ;;  i               2   56[BANK0 ] int 
  6086 ;;  i               2   50[BANK0 ] int 
  6087 ;;  i               2   54[BANK0 ] int 
  6088 ;;  Nprg_b         34   16[BANK0 ] int [17]
  6089 ;;  count           2   52[BANK0 ] int 
  6090 ;; Return value:  Size  Location     Type
  6091 ;;                  1    wreg      void 
  6092 ;; Registers used:
  6093 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6094 ;; Tracked objects:
  6095 ;;		On entry : 0/0
  6096 ;;		On exit  : 0/0
  6097 ;;		Unchanged: 0/0
  6098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6099 ;;      Params:         4       0       0       0       0
  6100 ;;      Locals:         0      44       0       0       0
  6101 ;;      Temps:          0      16       0       0       0
  6102 ;;      Totals:         4      60       0       0       0
  6103 ;;Total ram usage:       64 bytes
  6104 ;; Hardware stack levels used:    1
  6105 ;; Hardware stack levels required when called:    2
  6106 ;; This function calls:
  6107 ;;		_H_OUT
  6108 ;;		_L_OUT
  6109 ;;		_STBOUT
  6110 ;;		___awdiv
  6111 ;; This function is called by:
  6112 ;;		_FMTX
  6113 ;;		_CWTX
  6114 ;;		_FMRX
  6115 ;; This function uses a non-reentrant model
  6116 ;;
  6117                           
  6118                           
  6119                           ;psect for function _OUTFQ
  6120  00AC                     _OUTFQ:	
  6121                           
  6122                           ;FMCW.c: 137: int count = 0;
  6123                           
  6124                           ;incstack = 0
  6125                           ; Regs used in _OUTFQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6126  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  6127  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  6128  00AE  01D4               	clrf	OUTFQ@count
  6129  00AF  01D5               	clrf	OUTFQ@count+1
  6130                           
  6131                           ;FMCW.c: 138: int Nprg_b[17];
  6132                           ;FMCW.c: 140: for(int i=0; i<17; i++){
  6133  00B0  01D6               	clrf	OUTFQ@i
  6134  00B1  01D7               	clrf	OUTFQ@i+1
  6135  00B2  0857               	movf	OUTFQ@i+1,w
  6136  00B3  3A80               	xorlw	128
  6137  00B4  00FF               	movwf	127
  6138  00B5  3080               	movlw	128
  6139  00B6  027F               	subwf	127,w
  6140  00B7  1D03               	skipz
  6141  00B8  28BB               	goto	u2755
  6142  00B9  3011               	movlw	17
  6143  00BA  0256               	subwf	OUTFQ@i,w
  6144  00BB                     u2755:	
  6145  00BB  1803               	btfsc	3,0
  6146  00BC  28D9               	goto	l3119
  6147  00BD                     l3113:	
  6148                           
  6149                           ;FMCW.c: 141: Nprg_b[i] = 0;
  6150  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  6151  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  6152  00BF  0856               	movf	OUTFQ@i,w
  6153  00C0  00A0               	movwf	??_OUTFQ
  6154  00C1  0720               	addwf	??_OUTFQ,w
  6155  00C2  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6156  00C3  0084               	movwf	4
  6157  00C4  1383               	bcf	3,7	;select IRP bank0
  6158  00C5  0180               	clrf	0
  6159  00C6  0A84               	incf	4,f
  6160  00C7  0180               	clrf	0
  6161  00C8  3001               	movlw	1
  6162  00C9  07D6               	addwf	OUTFQ@i,f
  6163  00CA  1803               	skipnc
  6164  00CB  0AD7               	incf	OUTFQ@i+1,f
  6165  00CC  3000               	movlw	0
  6166  00CD  07D7               	addwf	OUTFQ@i+1,f
  6167  00CE  0857               	movf	OUTFQ@i+1,w
  6168  00CF  3A80               	xorlw	128
  6169  00D0  00FF               	movwf	127
  6170  00D1  3080               	movlw	128
  6171  00D2  027F               	subwf	127,w
  6172  00D3  1D03               	skipz
  6173  00D4  28D7               	goto	u2765
  6174  00D5  3011               	movlw	17
  6175  00D6  0256               	subwf	OUTFQ@i,w
  6176  00D7                     u2765:	
  6177  00D7  1C03               	skipc
  6178  00D8  28BD               	goto	l3113
  6179  00D9                     l3119:	
  6180                           
  6181                           ;FMCW.c: 142: }
  6182                           ;FMCW.c: 145: for(int i = 0; i < 17; i++){
  6183  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  6184  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  6185  00DB  01D2               	clrf	OUTFQ@i_474
  6186  00DC  01D3               	clrf	OUTFQ@i_474+1
  6187  00DD  0853               	movf	OUTFQ@i_474+1,w
  6188  00DE  3A80               	xorlw	128
  6189  00DF  00FF               	movwf	127
  6190  00E0  3080               	movlw	128
  6191  00E1  027F               	subwf	127,w
  6192  00E2  1D03               	skipz
  6193  00E3  28E6               	goto	u2775
  6194  00E4  3011               	movlw	17
  6195  00E5  0252               	subwf	OUTFQ@i_474,w
  6196  00E6                     u2775:	
  6197  00E6  1803               	btfsc	3,0
  6198  00E7  2AB7               	goto	l3165
  6199  00E8                     l3125:	
  6200                           
  6201                           ;FMCW.c: 146: for(int j = 0; j<5; j++){
  6202  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  6203  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  6204  00EA  01DA               	clrf	OUTFQ@j
  6205  00EB  01DB               	clrf	OUTFQ@j+1
  6206  00EC  085B               	movf	OUTFQ@j+1,w
  6207  00ED  3A80               	xorlw	128
  6208  00EE  00FF               	movwf	127
  6209  00EF  3080               	movlw	128
  6210  00F0  027F               	subwf	127,w
  6211  00F1  1D03               	skipz
  6212  00F2  28F5               	goto	u2785
  6213  00F3  3005               	movlw	5
  6214  00F4  025A               	subwf	OUTFQ@j,w
  6215  00F5                     u2785:	
  6216  00F5  1803               	btfsc	3,0
  6217  00F6  2AA4               	goto	l3161
  6218  00F7                     l3131:	
  6219                           
  6220                           ;FMCW.c: 147: if(Nprg[j] % 2 == 0) {
  6221  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  6222  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  6223  00F9  085B               	movf	OUTFQ@j+1,w
  6224  00FA  00A1               	movwf	??_OUTFQ+1
  6225  00FB  085A               	movf	OUTFQ@j,w
  6226  00FC  00A0               	movwf	??_OUTFQ
  6227  00FD  1003               	clrc
  6228  00FE  0DA0               	rlf	??_OUTFQ,f
  6229  00FF  0DA1               	rlf	??_OUTFQ+1,f
  6230  0100  0820               	movf	??_OUTFQ,w
  6231  0101  077B               	addwf	OUTFQ@Nprg,w
  6232  0102  00A2               	movwf	??_OUTFQ+2
  6233  0103  0821               	movf	??_OUTFQ+1,w
  6234  0104  1803               	skipnc
  6235  0105  0A21               	incf	??_OUTFQ+1,w
  6236  0106  077C               	addwf	OUTFQ@Nprg+1,w
  6237  0107  00A3               	movwf	??_OUTFQ+3
  6238  0108  0822               	movf	??_OUTFQ+2,w
  6239  0109  0084               	movwf	4
  6240  010A  1783               	bsf	3,7
  6241  010B  1C23               	btfss	??_OUTFQ+3,0
  6242  010C  1383               	bcf	3,7
  6243  010D  0800               	movf	0,w
  6244  010E  00A4               	movwf	??_OUTFQ+4
  6245  010F  0A84               	incf	4,f
  6246  0110  0800               	movf	0,w
  6247  0111  00A5               	movwf	??_OUTFQ+5
  6248  0112  1824               	btfsc	??_OUTFQ+4,0
  6249  0113  299D               	goto	l3143
  6250                           
  6251                           ;FMCW.c: 148: if(j == 4){
  6252  0114  3004               	movlw	4
  6253  0115  065A               	xorwf	OUTFQ@j,w
  6254  0116  045B               	iorwf	OUTFQ@j+1,w
  6255  0117  1D03               	btfss	3,2
  6256  0118  2960               	goto	l3141
  6257                           
  6258                           ;FMCW.c: 149: Nprg[j] = Nprg[j] / 2;
  6259  0119  3002               	movlw	2
  6260  011A  00F0               	movwf	___awdiv@divisor
  6261  011B  3000               	movlw	0
  6262  011C  00F1               	movwf	___awdiv@divisor+1
  6263  011D  085B               	movf	OUTFQ@j+1,w
  6264  011E  00A1               	movwf	??_OUTFQ+1
  6265  011F  085A               	movf	OUTFQ@j,w
  6266  0120  00A0               	movwf	??_OUTFQ
  6267  0121  1003               	clrc
  6268  0122  0DA0               	rlf	??_OUTFQ,f
  6269  0123  0DA1               	rlf	??_OUTFQ+1,f
  6270  0124  0820               	movf	??_OUTFQ,w
  6271  0125  077B               	addwf	OUTFQ@Nprg,w
  6272  0126  00A2               	movwf	??_OUTFQ+2
  6273  0127  0821               	movf	??_OUTFQ+1,w
  6274  0128  1803               	skipnc
  6275  0129  0A21               	incf	??_OUTFQ+1,w
  6276  012A  077C               	addwf	OUTFQ@Nprg+1,w
  6277  012B  00A3               	movwf	??_OUTFQ+3
  6278  012C  0822               	movf	??_OUTFQ+2,w
  6279  012D  0084               	movwf	4
  6280  012E  1783               	bsf	3,7
  6281  012F  1C23               	btfss	??_OUTFQ+3,0
  6282  0130  1383               	bcf	3,7
  6283  0131  0800               	movf	0,w
  6284  0132  00F2               	movwf	___awdiv@dividend
  6285  0133  0A84               	incf	4,f
  6286  0134  0800               	movf	0,w
  6287  0135  00F3               	movwf	___awdiv@dividend+1
  6288  0136  120A  158A  22E4  120A  118A  	fcall	___awdiv
  6289  013B  1283               	bcf	3,5	;RP0=0, select bank0
  6290  013C  1303               	bcf	3,6	;RP1=0, select bank0
  6291  013D  085B               	movf	OUTFQ@j+1,w
  6292  013E  00A5               	movwf	??_OUTFQ+5
  6293  013F  085A               	movf	OUTFQ@j,w
  6294  0140  00A4               	movwf	??_OUTFQ+4
  6295  0141  1003               	clrc
  6296  0142  0DA4               	rlf	??_OUTFQ+4,f
  6297  0143  0DA5               	rlf	??_OUTFQ+5,f
  6298  0144  0824               	movf	??_OUTFQ+4,w
  6299  0145  077B               	addwf	OUTFQ@Nprg,w
  6300  0146  00A6               	movwf	??_OUTFQ+6
  6301  0147  0825               	movf	??_OUTFQ+5,w
  6302  0148  1803               	skipnc
  6303  0149  0A25               	incf	??_OUTFQ+5,w
  6304  014A  077C               	addwf	OUTFQ@Nprg+1,w
  6305  014B  00A7               	movwf	??_OUTFQ+7
  6306  014C  0826               	movf	??_OUTFQ+6,w
  6307  014D  0084               	movwf	4
  6308  014E  1783               	bsf	3,7
  6309  014F  1C27               	btfss	??_OUTFQ+7,0
  6310  0150  1383               	bcf	3,7
  6311  0151  0870               	movf	?___awdiv,w
  6312  0152  0080               	movwf	0
  6313  0153  0A84               	incf	4,f
  6314  0154  0871               	movf	?___awdiv+1,w
  6315  0155  0080               	movwf	0
  6316                           
  6317                           ;FMCW.c: 150: Nprg_b[count] = 0;
  6318  0156  0854               	movf	OUTFQ@count,w
  6319  0157  00A0               	movwf	??_OUTFQ
  6320  0158  0720               	addwf	??_OUTFQ,w
  6321  0159  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6322  015A  0084               	movwf	4
  6323  015B  1383               	bcf	3,7	;select IRP bank0
  6324  015C  0180               	clrf	0
  6325  015D  0A84               	incf	4,f
  6326  015E  0180               	clrf	0
  6327  015F  2A05               	goto	l3151
  6328  0160                     l3141:	
  6329                           ;FMCW.c: 152: }
  6330                           
  6331                           ;FMCW.c: 151: count++;
  6332                           
  6333                           
  6334                           ;FMCW.c: 153: else{
  6335                           ;FMCW.c: 154: Nprg[j] = Nprg[j] / 2;
  6336  0160  3002               	movlw	2
  6337  0161  00F0               	movwf	___awdiv@divisor
  6338  0162  3000               	movlw	0
  6339  0163  00F1               	movwf	___awdiv@divisor+1
  6340  0164  085B               	movf	OUTFQ@j+1,w
  6341  0165  00A1               	movwf	??_OUTFQ+1
  6342  0166  085A               	movf	OUTFQ@j,w
  6343  0167  00A0               	movwf	??_OUTFQ
  6344  0168  1003               	clrc
  6345  0169  0DA0               	rlf	??_OUTFQ,f
  6346  016A  0DA1               	rlf	??_OUTFQ+1,f
  6347  016B  0820               	movf	??_OUTFQ,w
  6348  016C  077B               	addwf	OUTFQ@Nprg,w
  6349  016D  00A2               	movwf	??_OUTFQ+2
  6350  016E  0821               	movf	??_OUTFQ+1,w
  6351  016F  1803               	skipnc
  6352  0170  0A21               	incf	??_OUTFQ+1,w
  6353  0171  077C               	addwf	OUTFQ@Nprg+1,w
  6354  0172  00A3               	movwf	??_OUTFQ+3
  6355  0173  0822               	movf	??_OUTFQ+2,w
  6356  0174  0084               	movwf	4
  6357  0175  1783               	bsf	3,7
  6358  0176  1C23               	btfss	??_OUTFQ+3,0
  6359  0177  1383               	bcf	3,7
  6360  0178  0800               	movf	0,w
  6361  0179  00F2               	movwf	___awdiv@dividend
  6362  017A  0A84               	incf	4,f
  6363  017B  0800               	movf	0,w
  6364  017C  00F3               	movwf	___awdiv@dividend+1
  6365  017D  120A  158A  22E4  120A  118A  	fcall	___awdiv
  6366  0182  1283               	bcf	3,5	;RP0=0, select bank0
  6367  0183  1303               	bcf	3,6	;RP1=0, select bank0
  6368  0184  085B               	movf	OUTFQ@j+1,w
  6369  0185  00A5               	movwf	??_OUTFQ+5
  6370  0186  085A               	movf	OUTFQ@j,w
  6371  0187  00A4               	movwf	??_OUTFQ+4
  6372  0188  1003               	clrc
  6373  0189  0DA4               	rlf	??_OUTFQ+4,f
  6374  018A  0DA5               	rlf	??_OUTFQ+5,f
  6375  018B  0824               	movf	??_OUTFQ+4,w
  6376  018C  077B               	addwf	OUTFQ@Nprg,w
  6377  018D  00A6               	movwf	??_OUTFQ+6
  6378  018E  0825               	movf	??_OUTFQ+5,w
  6379  018F  1803               	skipnc
  6380  0190  0A25               	incf	??_OUTFQ+5,w
  6381  0191  077C               	addwf	OUTFQ@Nprg+1,w
  6382  0192  00A7               	movwf	??_OUTFQ+7
  6383  0193  0826               	movf	??_OUTFQ+6,w
  6384  0194  0084               	movwf	4
  6385  0195  1783               	bsf	3,7
  6386  0196  1C27               	btfss	??_OUTFQ+7,0
  6387  0197  1383               	bcf	3,7
  6388  0198  0870               	movf	?___awdiv,w
  6389  0199  0080               	movwf	0
  6390  019A  0A84               	incf	4,f
  6391  019B  0871               	movf	?___awdiv+1,w
  6392  019C  2A92               	goto	L8
  6393  019D                     l3143:	
  6394                           ;FMCW.c: 155: }
  6395                           ;FMCW.c: 156: }
  6396                           
  6397                           
  6398                           ;FMCW.c: 157: else if(Nprg[j] % 2 == 1) {
  6399  019D  085B               	movf	OUTFQ@j+1,w
  6400  019E  00A1               	movwf	??_OUTFQ+1
  6401  019F  085A               	movf	OUTFQ@j,w
  6402  01A0  00A0               	movwf	??_OUTFQ
  6403  01A1  1003               	clrc
  6404  01A2  0DA0               	rlf	??_OUTFQ,f
  6405  01A3  0DA1               	rlf	??_OUTFQ+1,f
  6406  01A4  0820               	movf	??_OUTFQ,w
  6407  01A5  077B               	addwf	OUTFQ@Nprg,w
  6408  01A6  00A2               	movwf	??_OUTFQ+2
  6409  01A7  0821               	movf	??_OUTFQ+1,w
  6410  01A8  1803               	skipnc
  6411  01A9  0A21               	incf	??_OUTFQ+1,w
  6412  01AA  077C               	addwf	OUTFQ@Nprg+1,w
  6413  01AB  00A3               	movwf	??_OUTFQ+3
  6414  01AC  0822               	movf	??_OUTFQ+2,w
  6415  01AD  0084               	movwf	4
  6416  01AE  1783               	bsf	3,7
  6417  01AF  1C23               	btfss	??_OUTFQ+3,0
  6418  01B0  1383               	bcf	3,7
  6419  01B1  0800               	movf	0,w
  6420  01B2  00A4               	movwf	??_OUTFQ+4
  6421  01B3  0A84               	incf	4,f
  6422  01B4  0800               	movf	0,w
  6423  01B5  00A5               	movwf	??_OUTFQ+5
  6424  01B6  1C24               	btfss	??_OUTFQ+4,0
  6425  01B7  2A93               	goto	l3157
  6426                           
  6427                           ;FMCW.c: 158: if(j == 4){
  6428  01B8  3004               	movlw	4
  6429  01B9  065A               	xorwf	OUTFQ@j,w
  6430  01BA  045B               	iorwf	OUTFQ@j+1,w
  6431  01BB  1D03               	btfss	3,2
  6432  01BC  2A0C               	goto	l3153
  6433                           
  6434                           ;FMCW.c: 159: Nprg[j] = Nprg[j] / 2;
  6435  01BD  3002               	movlw	2
  6436  01BE  00F0               	movwf	___awdiv@divisor
  6437  01BF  3000               	movlw	0
  6438  01C0  00F1               	movwf	___awdiv@divisor+1
  6439  01C1  085B               	movf	OUTFQ@j+1,w
  6440  01C2  00A1               	movwf	??_OUTFQ+1
  6441  01C3  085A               	movf	OUTFQ@j,w
  6442  01C4  00A0               	movwf	??_OUTFQ
  6443  01C5  1003               	clrc
  6444  01C6  0DA0               	rlf	??_OUTFQ,f
  6445  01C7  0DA1               	rlf	??_OUTFQ+1,f
  6446  01C8  0820               	movf	??_OUTFQ,w
  6447  01C9  077B               	addwf	OUTFQ@Nprg,w
  6448  01CA  00A2               	movwf	??_OUTFQ+2
  6449  01CB  0821               	movf	??_OUTFQ+1,w
  6450  01CC  1803               	skipnc
  6451  01CD  0A21               	incf	??_OUTFQ+1,w
  6452  01CE  077C               	addwf	OUTFQ@Nprg+1,w
  6453  01CF  00A3               	movwf	??_OUTFQ+3
  6454  01D0  0822               	movf	??_OUTFQ+2,w
  6455  01D1  0084               	movwf	4
  6456  01D2  1783               	bsf	3,7
  6457  01D3  1C23               	btfss	??_OUTFQ+3,0
  6458  01D4  1383               	bcf	3,7
  6459  01D5  0800               	movf	0,w
  6460  01D6  00F2               	movwf	___awdiv@dividend
  6461  01D7  0A84               	incf	4,f
  6462  01D8  0800               	movf	0,w
  6463  01D9  00F3               	movwf	___awdiv@dividend+1
  6464  01DA  120A  158A  22E4  120A  118A  	fcall	___awdiv
  6465  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  6466  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  6467  01E1  085B               	movf	OUTFQ@j+1,w
  6468  01E2  00A5               	movwf	??_OUTFQ+5
  6469  01E3  085A               	movf	OUTFQ@j,w
  6470  01E4  00A4               	movwf	??_OUTFQ+4
  6471  01E5  1003               	clrc
  6472  01E6  0DA4               	rlf	??_OUTFQ+4,f
  6473  01E7  0DA5               	rlf	??_OUTFQ+5,f
  6474  01E8  0824               	movf	??_OUTFQ+4,w
  6475  01E9  077B               	addwf	OUTFQ@Nprg,w
  6476  01EA  00A6               	movwf	??_OUTFQ+6
  6477  01EB  0825               	movf	??_OUTFQ+5,w
  6478  01EC  1803               	skipnc
  6479  01ED  0A25               	incf	??_OUTFQ+5,w
  6480  01EE  077C               	addwf	OUTFQ@Nprg+1,w
  6481  01EF  00A7               	movwf	??_OUTFQ+7
  6482  01F0  0826               	movf	??_OUTFQ+6,w
  6483  01F1  0084               	movwf	4
  6484  01F2  1783               	bsf	3,7
  6485  01F3  1C27               	btfss	??_OUTFQ+7,0
  6486  01F4  1383               	bcf	3,7
  6487  01F5  0870               	movf	?___awdiv,w
  6488  01F6  0080               	movwf	0
  6489  01F7  0A84               	incf	4,f
  6490  01F8  0871               	movf	?___awdiv+1,w
  6491  01F9  0080               	movwf	0
  6492                           
  6493                           ;FMCW.c: 160: Nprg_b[count] = 1;
  6494  01FA  0854               	movf	OUTFQ@count,w
  6495  01FB  00A0               	movwf	??_OUTFQ
  6496  01FC  0720               	addwf	??_OUTFQ,w
  6497  01FD  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6498  01FE  0084               	movwf	4
  6499  01FF  3001               	movlw	1
  6500  0200  1383               	bcf	3,7	;select IRP bank0
  6501  0201  0080               	movwf	0
  6502  0202  0A84               	incf	4,f
  6503  0203  3000               	movlw	0
  6504  0204  0080               	movwf	0
  6505  0205                     l3151:	
  6506                           
  6507                           ;FMCW.c: 161: count++;
  6508  0205  3001               	movlw	1
  6509  0206  07D4               	addwf	OUTFQ@count,f
  6510  0207  1803               	skipnc
  6511  0208  0AD5               	incf	OUTFQ@count+1,f
  6512  0209  3000               	movlw	0
  6513  020A  07D5               	addwf	OUTFQ@count+1,f
  6514                           
  6515                           ;FMCW.c: 162: }
  6516  020B  2A93               	goto	l3157
  6517  020C                     l3153:	
  6518                           
  6519                           ;FMCW.c: 163: else{
  6520                           ;FMCW.c: 164: Nprg[j] = Nprg[j] / 2;
  6521  020C  3002               	movlw	2
  6522  020D  00F0               	movwf	___awdiv@divisor
  6523  020E  3000               	movlw	0
  6524  020F  00F1               	movwf	___awdiv@divisor+1
  6525  0210  085B               	movf	OUTFQ@j+1,w
  6526  0211  00A1               	movwf	??_OUTFQ+1
  6527  0212  085A               	movf	OUTFQ@j,w
  6528  0213  00A0               	movwf	??_OUTFQ
  6529  0214  1003               	clrc
  6530  0215  0DA0               	rlf	??_OUTFQ,f
  6531  0216  0DA1               	rlf	??_OUTFQ+1,f
  6532  0217  0820               	movf	??_OUTFQ,w
  6533  0218  077B               	addwf	OUTFQ@Nprg,w
  6534  0219  00A2               	movwf	??_OUTFQ+2
  6535  021A  0821               	movf	??_OUTFQ+1,w
  6536  021B  1803               	skipnc
  6537  021C  0A21               	incf	??_OUTFQ+1,w
  6538  021D  077C               	addwf	OUTFQ@Nprg+1,w
  6539  021E  00A3               	movwf	??_OUTFQ+3
  6540  021F  0822               	movf	??_OUTFQ+2,w
  6541  0220  0084               	movwf	4
  6542  0221  1783               	bsf	3,7
  6543  0222  1C23               	btfss	??_OUTFQ+3,0
  6544  0223  1383               	bcf	3,7
  6545  0224  0800               	movf	0,w
  6546  0225  00F2               	movwf	___awdiv@dividend
  6547  0226  0A84               	incf	4,f
  6548  0227  0800               	movf	0,w
  6549  0228  00F3               	movwf	___awdiv@dividend+1
  6550  0229  120A  158A  22E4  120A  118A  	fcall	___awdiv
  6551  022E  1283               	bcf	3,5	;RP0=0, select bank0
  6552  022F  1303               	bcf	3,6	;RP1=0, select bank0
  6553  0230  085B               	movf	OUTFQ@j+1,w
  6554  0231  00A5               	movwf	??_OUTFQ+5
  6555  0232  085A               	movf	OUTFQ@j,w
  6556  0233  00A4               	movwf	??_OUTFQ+4
  6557  0234  1003               	clrc
  6558  0235  0DA4               	rlf	??_OUTFQ+4,f
  6559  0236  0DA5               	rlf	??_OUTFQ+5,f
  6560  0237  0824               	movf	??_OUTFQ+4,w
  6561  0238  077B               	addwf	OUTFQ@Nprg,w
  6562  0239  00A6               	movwf	??_OUTFQ+6
  6563  023A  0825               	movf	??_OUTFQ+5,w
  6564  023B  1803               	skipnc
  6565  023C  0A25               	incf	??_OUTFQ+5,w
  6566  023D  077C               	addwf	OUTFQ@Nprg+1,w
  6567  023E  00A7               	movwf	??_OUTFQ+7
  6568  023F  0826               	movf	??_OUTFQ+6,w
  6569  0240  0084               	movwf	4
  6570  0241  1783               	bsf	3,7
  6571  0242  1C27               	btfss	??_OUTFQ+7,0
  6572  0243  1383               	bcf	3,7
  6573  0244  0870               	movf	?___awdiv,w
  6574  0245  0080               	movwf	0
  6575  0246  0A84               	incf	4,f
  6576  0247  0871               	movf	?___awdiv+1,w
  6577  0248  0080               	movwf	0
  6578                           
  6579                           ;FMCW.c: 165: Nprg[j+1] = Nprg[j+1] + 10;
  6580  0249  085B               	movf	OUTFQ@j+1,w
  6581  024A  00A1               	movwf	??_OUTFQ+1
  6582  024B  085A               	movf	OUTFQ@j,w
  6583  024C  00A0               	movwf	??_OUTFQ
  6584  024D  1003               	clrc
  6585  024E  0DA0               	rlf	??_OUTFQ,f
  6586  024F  0DA1               	rlf	??_OUTFQ+1,f
  6587  0250  0820               	movf	??_OUTFQ,w
  6588  0251  3E02               	addlw	2
  6589  0252  00A2               	movwf	??_OUTFQ+2
  6590  0253  0821               	movf	??_OUTFQ+1,w
  6591  0254  1803               	skipnc
  6592  0255  3E01               	addlw	1
  6593  0256  3E00               	addlw	0
  6594  0257  00A3               	movwf	??_OUTFQ+3
  6595  0258  0822               	movf	??_OUTFQ+2,w
  6596  0259  077B               	addwf	OUTFQ@Nprg,w
  6597  025A  00A4               	movwf	??_OUTFQ+4
  6598  025B  0823               	movf	??_OUTFQ+3,w
  6599  025C  1803               	skipnc
  6600  025D  0A23               	incf	??_OUTFQ+3,w
  6601  025E  077C               	addwf	OUTFQ@Nprg+1,w
  6602  025F  00A5               	movwf	??_OUTFQ+5
  6603  0260  0824               	movf	??_OUTFQ+4,w
  6604  0261  0084               	movwf	4
  6605  0262  1783               	bsf	3,7
  6606  0263  1C25               	btfss	??_OUTFQ+5,0
  6607  0264  1383               	bcf	3,7
  6608  0265  0800               	movf	0,w
  6609  0266  00A6               	movwf	??_OUTFQ+6
  6610  0267  0A84               	incf	4,f
  6611  0268  0800               	movf	0,w
  6612  0269  00A7               	movwf	??_OUTFQ+7
  6613  026A  0826               	movf	??_OUTFQ+6,w
  6614  026B  3E0A               	addlw	10
  6615  026C  00A8               	movwf	??_OUTFQ+8
  6616  026D  0827               	movf	??_OUTFQ+7,w
  6617  026E  1803               	skipnc
  6618  026F  3E01               	addlw	1
  6619  0270  3E00               	addlw	0
  6620  0271  00A9               	movwf	??_OUTFQ+9
  6621  0272  085B               	movf	OUTFQ@j+1,w
  6622  0273  00AB               	movwf	??_OUTFQ+11
  6623  0274  085A               	movf	OUTFQ@j,w
  6624  0275  00AA               	movwf	??_OUTFQ+10
  6625  0276  1003               	clrc
  6626  0277  0DAA               	rlf	??_OUTFQ+10,f
  6627  0278  0DAB               	rlf	??_OUTFQ+11,f
  6628  0279  082A               	movf	??_OUTFQ+10,w
  6629  027A  3E02               	addlw	2
  6630  027B  00AC               	movwf	??_OUTFQ+12
  6631  027C  082B               	movf	??_OUTFQ+11,w
  6632  027D  1803               	skipnc
  6633  027E  3E01               	addlw	1
  6634  027F  3E00               	addlw	0
  6635  0280  00AD               	movwf	??_OUTFQ+13
  6636  0281  082C               	movf	??_OUTFQ+12,w
  6637  0282  077B               	addwf	OUTFQ@Nprg,w
  6638  0283  00AE               	movwf	??_OUTFQ+14
  6639  0284  082D               	movf	??_OUTFQ+13,w
  6640  0285  1803               	skipnc
  6641  0286  0A2D               	incf	??_OUTFQ+13,w
  6642  0287  077C               	addwf	OUTFQ@Nprg+1,w
  6643  0288  00AF               	movwf	??_OUTFQ+15
  6644  0289  082E               	movf	??_OUTFQ+14,w
  6645  028A  0084               	movwf	4
  6646  028B  1783               	bsf	3,7
  6647  028C  1C2F               	btfss	??_OUTFQ+15,0
  6648  028D  1383               	bcf	3,7
  6649  028E  0828               	movf	??_OUTFQ+8,w
  6650  028F  0080               	movwf	0
  6651  0290  0A84               	incf	4,f
  6652  0291  0829               	movf	??_OUTFQ+9,w
  6653  0292                     L8:	
  6654  0292  0080               	movwf	0
  6655  0293                     l3157:	
  6656  0293  3001               	movlw	1
  6657  0294  07DA               	addwf	OUTFQ@j,f
  6658  0295  1803               	skipnc
  6659  0296  0ADB               	incf	OUTFQ@j+1,f
  6660  0297  3000               	movlw	0
  6661  0298  07DB               	addwf	OUTFQ@j+1,f
  6662  0299  085B               	movf	OUTFQ@j+1,w
  6663  029A  3A80               	xorlw	128
  6664  029B  00FF               	movwf	127
  6665  029C  3080               	movlw	128
  6666  029D  027F               	subwf	127,w
  6667  029E  1D03               	skipz
  6668  029F  2AA2               	goto	u2835
  6669  02A0  3005               	movlw	5
  6670  02A1  025A               	subwf	OUTFQ@j,w
  6671  02A2                     u2835:	
  6672  02A2  1C03               	skipc
  6673  02A3  28F7               	goto	l3131
  6674  02A4                     l3161:	
  6675  02A4  3001               	movlw	1
  6676  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  6677  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  6678  02A7  07D2               	addwf	OUTFQ@i_474,f
  6679  02A8  1803               	skipnc
  6680  02A9  0AD3               	incf	OUTFQ@i_474+1,f
  6681  02AA  3000               	movlw	0
  6682  02AB  07D3               	addwf	OUTFQ@i_474+1,f
  6683  02AC  0853               	movf	OUTFQ@i_474+1,w
  6684  02AD  3A80               	xorlw	128
  6685  02AE  00FF               	movwf	127
  6686  02AF  3080               	movlw	128
  6687  02B0  027F               	subwf	127,w
  6688  02B1  1D03               	skipz
  6689  02B2  2AB5               	goto	u2845
  6690  02B3  3011               	movlw	17
  6691  02B4  0252               	subwf	OUTFQ@i_474,w
  6692  02B5                     u2845:	
  6693  02B5  1C03               	skipc
  6694  02B6  28E8               	goto	l3125
  6695  02B7                     l3165:	
  6696                           
  6697                           ;FMCW.c: 166: }
  6698                           ;FMCW.c: 167: }
  6699                           ;FMCW.c: 168: }
  6700                           ;FMCW.c: 169: }
  6701                           ;FMCW.c: 172: for (int i=0; i<17; i++)
  6702  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  6703  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  6704  02B9  01D8               	clrf	OUTFQ@i_476
  6705  02BA  01D9               	clrf	OUTFQ@i_476+1
  6706  02BB  0859               	movf	OUTFQ@i_476+1,w
  6707  02BC  3A80               	xorlw	128
  6708  02BD  00FF               	movwf	127
  6709  02BE  3080               	movlw	128
  6710  02BF  027F               	subwf	127,w
  6711  02C0  1D03               	skipz
  6712  02C1  2AC4               	goto	u2855
  6713  02C2  3011               	movlw	17
  6714  02C3  0258               	subwf	OUTFQ@i_476,w
  6715  02C4                     u2855:	
  6716  02C4  1803               	btfsc	3,0
  6717  02C5  2B0D               	goto	l3183
  6718  02C6                     l3171:	
  6719                           
  6720                           ;FMCW.c: 173: {
  6721                           ;FMCW.c: 174: if(Nprg_b[i] == 0)
  6722  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  6723  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  6724  02C8  0858               	movf	OUTFQ@i_476,w
  6725  02C9  00A0               	movwf	??_OUTFQ
  6726  02CA  0720               	addwf	??_OUTFQ,w
  6727  02CB  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6728  02CC  0084               	movwf	4
  6729  02CD  1383               	bcf	3,7	;select IRP bank0
  6730  02CE  0800               	movf	0,w
  6731  02CF  00A1               	movwf	??_OUTFQ+1
  6732  02D0  0A84               	incf	4,f
  6733  02D1  0800               	movf	0,w
  6734  02D2  00A2               	movwf	??_OUTFQ+2
  6735  02D3  0821               	movf	??_OUTFQ+1,w
  6736  02D4  0422               	iorwf	??_OUTFQ+2,w
  6737  02D5  1D03               	btfss	3,2
  6738  02D6  2AE0               	goto	l3175
  6739                           
  6740                           ;FMCW.c: 175: {
  6741                           ;FMCW.c: 176: L_OUT(fmcwtxrx);
  6742  02D7  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6743  02D8  00F3               	movwf	L_OUT@fmcwtxrx+1
  6744  02D9  0879               	movf	OUTFQ@fmcwtxrx,w
  6745  02DA  00F2               	movwf	L_OUT@fmcwtxrx
  6746  02DB  120A  158A  2252  120A  118A  	fcall	_L_OUT
  6747  02E0                     l3175:	
  6748                           
  6749                           ;FMCW.c: 177: }
  6750                           ;FMCW.c: 178: if(Nprg_b[i] == 1)
  6751  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  6752  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  6753  02E2  0858               	movf	OUTFQ@i_476,w
  6754  02E3  00A0               	movwf	??_OUTFQ
  6755  02E4  0720               	addwf	??_OUTFQ,w
  6756  02E5  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6757  02E6  0084               	movwf	4
  6758  02E7  1383               	bcf	3,7	;select IRP bank0
  6759  02E8  0800               	movf	0,w
  6760  02E9  00A1               	movwf	??_OUTFQ+1
  6761  02EA  0A84               	incf	4,f
  6762  02EB  0800               	movf	0,w
  6763  02EC  00A2               	movwf	??_OUTFQ+2
  6764  02ED  0321               	decf	??_OUTFQ+1,w
  6765  02EE  0422               	iorwf	??_OUTFQ+2,w
  6766  02EF  1D03               	btfss	3,2
  6767  02F0  2AFA               	goto	l3179
  6768                           
  6769                           ;FMCW.c: 179: {
  6770                           ;FMCW.c: 180: H_OUT(fmcwtxrx);
  6771  02F1  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6772  02F2  00F3               	movwf	H_OUT@fmcwtxrx+1
  6773  02F3  0879               	movf	OUTFQ@fmcwtxrx,w
  6774  02F4  00F2               	movwf	H_OUT@fmcwtxrx
  6775  02F5  120A  158A  220C  120A  118A  	fcall	_H_OUT
  6776  02FA                     l3179:	
  6777  02FA  3001               	movlw	1
  6778  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  6779  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  6780  02FD  07D8               	addwf	OUTFQ@i_476,f
  6781  02FE  1803               	skipnc
  6782  02FF  0AD9               	incf	OUTFQ@i_476+1,f
  6783  0300  3000               	movlw	0
  6784  0301  07D9               	addwf	OUTFQ@i_476+1,f
  6785  0302  0859               	movf	OUTFQ@i_476+1,w
  6786  0303  3A80               	xorlw	128
  6787  0304  00FF               	movwf	127
  6788  0305  3080               	movlw	128
  6789  0306  027F               	subwf	127,w
  6790  0307  1D03               	skipz
  6791  0308  2B0B               	goto	u2885
  6792  0309  3011               	movlw	17
  6793  030A  0258               	subwf	OUTFQ@i_476,w
  6794  030B                     u2885:	
  6795  030B  1C03               	skipc
  6796  030C  2AC6               	goto	l3171
  6797  030D                     l3183:	
  6798                           
  6799                           ;FMCW.c: 181: }
  6800                           ;FMCW.c: 182: }
  6801                           ;FMCW.c: 185: H_OUT(fmcwtxrx);
  6802  030D  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6803  030E  00F3               	movwf	H_OUT@fmcwtxrx+1
  6804  030F  0879               	movf	OUTFQ@fmcwtxrx,w
  6805  0310  00F2               	movwf	H_OUT@fmcwtxrx
  6806  0311  120A  158A  220C  120A  118A  	fcall	_H_OUT
  6807                           
  6808                           ;FMCW.c: 186: L_OUT(fmcwtxrx);
  6809  0316  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6810  0317  00F3               	movwf	L_OUT@fmcwtxrx+1
  6811  0318  0879               	movf	OUTFQ@fmcwtxrx,w
  6812  0319  00F2               	movwf	L_OUT@fmcwtxrx
  6813  031A  120A  158A  2252  120A  118A  	fcall	_L_OUT
  6814                           
  6815                           ;FMCW.c: 189: STBOUT(fmcwtxrx);
  6816  031F  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6817  0320  00F3               	movwf	STBOUT@fmcwtxrx+1
  6818  0321  0879               	movf	OUTFQ@fmcwtxrx,w
  6819  0322  00F2               	movwf	STBOUT@fmcwtxrx
  6820  0323  120A  158A  2170   	fcall	_STBOUT
  6821  0326  0008               	return
  6822  0327                     __end_of_OUTFQ:	
  6823                           
  6824                           	psect	text24
  6825  0AE4                     __ptext24:	
  6826 ;; *************** function ___awdiv *****************
  6827 ;; Defined at:
  6828 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  6829 ;; Parameters:    Size  Location     Type
  6830 ;;  divisor         2    0[COMMON] int 
  6831 ;;  dividend        2    2[COMMON] int 
  6832 ;; Auto vars:     Size  Location     Type
  6833 ;;  quotient        2    7[COMMON] int 
  6834 ;;  sign            1    6[COMMON] unsigned char 
  6835 ;;  counter         1    5[COMMON] unsigned char 
  6836 ;; Return value:  Size  Location     Type
  6837 ;;                  2    0[COMMON] int 
  6838 ;; Registers used:
  6839 ;;		wreg, status,2, status,0
  6840 ;; Tracked objects:
  6841 ;;		On entry : 0/0
  6842 ;;		On exit  : 0/0
  6843 ;;		Unchanged: 0/0
  6844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6845 ;;      Params:         4       0       0       0       0
  6846 ;;      Locals:         4       0       0       0       0
  6847 ;;      Temps:          1       0       0       0       0
  6848 ;;      Totals:         9       0       0       0       0
  6849 ;;Total ram usage:        9 bytes
  6850 ;; Hardware stack levels used:    1
  6851 ;; This function calls:
  6852 ;;		Nothing
  6853 ;; This function is called by:
  6854 ;;		_OUTFQ
  6855 ;;		_RFDOUT
  6856 ;; This function uses a non-reentrant model
  6857 ;;
  6858                           
  6859                           
  6860                           ;psect for function ___awdiv
  6861  0AE4                     ___awdiv:	
  6862                           
  6863                           ;incstack = 0
  6864                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6865  0AE4  01F6               	clrf	___awdiv@sign
  6866  0AE5  1FF1               	btfss	___awdiv@divisor+1,7
  6867  0AE6  2AEE               	goto	l2595
  6868  0AE7  09F0               	comf	___awdiv@divisor,f
  6869  0AE8  09F1               	comf	___awdiv@divisor+1,f
  6870  0AE9  0AF0               	incf	___awdiv@divisor,f
  6871  0AEA  1903               	skipnz
  6872  0AEB  0AF1               	incf	___awdiv@divisor+1,f
  6873  0AEC  01F6               	clrf	___awdiv@sign
  6874  0AED  0AF6               	incf	___awdiv@sign,f
  6875  0AEE                     l2595:	
  6876  0AEE  1FF3               	btfss	___awdiv@dividend+1,7
  6877  0AEF  2AF9               	goto	l2601
  6878  0AF0  09F2               	comf	___awdiv@dividend,f
  6879  0AF1  09F3               	comf	___awdiv@dividend+1,f
  6880  0AF2  0AF2               	incf	___awdiv@dividend,f
  6881  0AF3  1903               	skipnz
  6882  0AF4  0AF3               	incf	___awdiv@dividend+1,f
  6883  0AF5  3001               	movlw	1
  6884  0AF6  00F4               	movwf	??___awdiv
  6885  0AF7  0874               	movf	??___awdiv,w
  6886  0AF8  06F6               	xorwf	___awdiv@sign,f
  6887  0AF9                     l2601:	
  6888  0AF9  01F7               	clrf	___awdiv@quotient
  6889  0AFA  01F8               	clrf	___awdiv@quotient+1
  6890  0AFB  0870               	movf	___awdiv@divisor,w
  6891  0AFC  0471               	iorwf	___awdiv@divisor+1,w
  6892  0AFD  1903               	btfsc	3,2
  6893  0AFE  2B30               	goto	l2623
  6894  0AFF  01F5               	clrf	___awdiv@counter
  6895  0B00  0AF5               	incf	___awdiv@counter,f
  6896  0B01                     l2611:	
  6897  0B01  1BF1               	btfsc	___awdiv@divisor+1,7
  6898  0B02  2B0F               	goto	l2613
  6899  0B03  3001               	movlw	1
  6900  0B04                     u2005:	
  6901  0B04  1003               	clrc
  6902  0B05  0DF0               	rlf	___awdiv@divisor,f
  6903  0B06  0DF1               	rlf	___awdiv@divisor+1,f
  6904  0B07  3EFF               	addlw	-1
  6905  0B08  1D03               	skipz
  6906  0B09  2B04               	goto	u2005
  6907  0B0A  3001               	movlw	1
  6908  0B0B  00F4               	movwf	??___awdiv
  6909  0B0C  0874               	movf	??___awdiv,w
  6910  0B0D  07F5               	addwf	___awdiv@counter,f
  6911  0B0E  2B01               	goto	l2611
  6912  0B0F                     l2613:	
  6913  0B0F  3001               	movlw	1
  6914  0B10                     u2025:	
  6915  0B10  1003               	clrc
  6916  0B11  0DF7               	rlf	___awdiv@quotient,f
  6917  0B12  0DF8               	rlf	___awdiv@quotient+1,f
  6918  0B13  3EFF               	addlw	-1
  6919  0B14  1D03               	skipz
  6920  0B15  2B10               	goto	u2025
  6921  0B16  0871               	movf	___awdiv@divisor+1,w
  6922  0B17  0273               	subwf	___awdiv@dividend+1,w
  6923  0B18  1D03               	skipz
  6924  0B19  2B1C               	goto	u2035
  6925  0B1A  0870               	movf	___awdiv@divisor,w
  6926  0B1B  0272               	subwf	___awdiv@dividend,w
  6927  0B1C                     u2035:	
  6928  0B1C  1C03               	skipc
  6929  0B1D  2B25               	goto	l2619
  6930  0B1E  0870               	movf	___awdiv@divisor,w
  6931  0B1F  02F2               	subwf	___awdiv@dividend,f
  6932  0B20  0871               	movf	___awdiv@divisor+1,w
  6933  0B21  1C03               	skipc
  6934  0B22  03F3               	decf	___awdiv@dividend+1,f
  6935  0B23  02F3               	subwf	___awdiv@dividend+1,f
  6936  0B24  1477               	bsf	___awdiv@quotient,0
  6937  0B25                     l2619:	
  6938  0B25  3001               	movlw	1
  6939  0B26                     u2045:	
  6940  0B26  1003               	clrc
  6941  0B27  0CF1               	rrf	___awdiv@divisor+1,f
  6942  0B28  0CF0               	rrf	___awdiv@divisor,f
  6943  0B29  3EFF               	addlw	-1
  6944  0B2A  1D03               	skipz
  6945  0B2B  2B26               	goto	u2045
  6946  0B2C  3001               	movlw	1
  6947  0B2D  02F5               	subwf	___awdiv@counter,f
  6948  0B2E  1D03               	btfss	3,2
  6949  0B2F  2B0F               	goto	l2613
  6950  0B30                     l2623:	
  6951  0B30  0876               	movf	___awdiv@sign,w
  6952  0B31  1903               	btfsc	3,2
  6953  0B32  2B38               	goto	l2627
  6954  0B33  09F7               	comf	___awdiv@quotient,f
  6955  0B34  09F8               	comf	___awdiv@quotient+1,f
  6956  0B35  0AF7               	incf	___awdiv@quotient,f
  6957  0B36  1903               	skipnz
  6958  0B37  0AF8               	incf	___awdiv@quotient+1,f
  6959  0B38                     l2627:	
  6960  0B38  0878               	movf	___awdiv@quotient+1,w
  6961  0B39  00F1               	movwf	?___awdiv+1
  6962  0B3A  0877               	movf	___awdiv@quotient,w
  6963  0B3B  00F0               	movwf	?___awdiv
  6964  0B3C  0008               	return
  6965  0B3D                     __end_of___awdiv:	
  6966                           
  6967                           	psect	text25
  6968  0CBE                     __ptext25:	
  6969 ;; *************** function _OPINIT *****************
  6970 ;; Defined at:
  6971 ;;		line 241 in file "FMCW.c"
  6972 ;; Parameters:    Size  Location     Type
  6973 ;;  fmcwtxrx        2    4[COMMON] int 
  6974 ;; Auto vars:     Size  Location     Type
  6975 ;;		None
  6976 ;; Return value:  Size  Location     Type
  6977 ;;                  1    wreg      void 
  6978 ;; Registers used:
  6979 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6980 ;; Tracked objects:
  6981 ;;		On entry : 0/0
  6982 ;;		On exit  : 0/0
  6983 ;;		Unchanged: 0/0
  6984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6985 ;;      Params:         2       0       0       0       0
  6986 ;;      Locals:         0       0       0       0       0
  6987 ;;      Temps:          0       0       0       0       0
  6988 ;;      Totals:         2       0       0       0       0
  6989 ;;Total ram usage:        2 bytes
  6990 ;; Hardware stack levels used:    1
  6991 ;; Hardware stack levels required when called:    2
  6992 ;; This function calls:
  6993 ;;		_H_OUT
  6994 ;;		_L_OUT
  6995 ;;		_STBOUT
  6996 ;; This function is called by:
  6997 ;;		_FMTX
  6998 ;;		_CWTX
  6999 ;;		_FMRX
  7000 ;; This function uses a non-reentrant model
  7001 ;;
  7002                           
  7003                           
  7004                           ;psect for function _OPINIT
  7005  0CBE                     _OPINIT:	
  7006                           
  7007                           ;FMCW.c: 243: L_OUT(fmcwtxrx);
  7008                           
  7009                           ;incstack = 0
  7010                           ; Regs used in _OPINIT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7011  0CBE  0875               	movf	OPINIT@fmcwtxrx+1,w
  7012  0CBF  00F3               	movwf	L_OUT@fmcwtxrx+1
  7013  0CC0  0874               	movf	OPINIT@fmcwtxrx,w
  7014  0CC1  00F2               	movwf	L_OUT@fmcwtxrx
  7015  0CC2  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7016                           
  7017                           ;FMCW.c: 244: L_OUT(fmcwtxrx);
  7018  0CC7  0875               	movf	OPINIT@fmcwtxrx+1,w
  7019  0CC8  00F3               	movwf	L_OUT@fmcwtxrx+1
  7020  0CC9  0874               	movf	OPINIT@fmcwtxrx,w
  7021  0CCA  00F2               	movwf	L_OUT@fmcwtxrx
  7022  0CCB  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7023                           
  7024                           ;FMCW.c: 245: L_OUT(fmcwtxrx);
  7025  0CD0  0875               	movf	OPINIT@fmcwtxrx+1,w
  7026  0CD1  00F3               	movwf	L_OUT@fmcwtxrx+1
  7027  0CD2  0874               	movf	OPINIT@fmcwtxrx,w
  7028  0CD3  00F2               	movwf	L_OUT@fmcwtxrx
  7029  0CD4  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7030                           
  7031                           ;FMCW.c: 246: H_OUT(fmcwtxrx);
  7032  0CD9  0875               	movf	OPINIT@fmcwtxrx+1,w
  7033  0CDA  00F3               	movwf	H_OUT@fmcwtxrx+1
  7034  0CDB  0874               	movf	OPINIT@fmcwtxrx,w
  7035  0CDC  00F2               	movwf	H_OUT@fmcwtxrx
  7036  0CDD  120A  158A  220C  120A  158A  	fcall	_H_OUT
  7037                           
  7038                           ;FMCW.c: 247: H_OUT(fmcwtxrx);
  7039  0CE2  0875               	movf	OPINIT@fmcwtxrx+1,w
  7040  0CE3  00F3               	movwf	H_OUT@fmcwtxrx+1
  7041  0CE4  0874               	movf	OPINIT@fmcwtxrx,w
  7042  0CE5  00F2               	movwf	H_OUT@fmcwtxrx
  7043  0CE6  120A  158A  220C  120A  158A  	fcall	_H_OUT
  7044                           
  7045                           ;FMCW.c: 248: L_OUT(fmcwtxrx);
  7046  0CEB  0875               	movf	OPINIT@fmcwtxrx+1,w
  7047  0CEC  00F3               	movwf	L_OUT@fmcwtxrx+1
  7048  0CED  0874               	movf	OPINIT@fmcwtxrx,w
  7049  0CEE  00F2               	movwf	L_OUT@fmcwtxrx
  7050  0CEF  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7051                           
  7052                           ;FMCW.c: 249: L_OUT(fmcwtxrx);
  7053  0CF4  0875               	movf	OPINIT@fmcwtxrx+1,w
  7054  0CF5  00F3               	movwf	L_OUT@fmcwtxrx+1
  7055  0CF6  0874               	movf	OPINIT@fmcwtxrx,w
  7056  0CF7  00F2               	movwf	L_OUT@fmcwtxrx
  7057  0CF8  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7058                           
  7059                           ;FMCW.c: 250: L_OUT(fmcwtxrx);
  7060  0CFD  0875               	movf	OPINIT@fmcwtxrx+1,w
  7061  0CFE  00F3               	movwf	L_OUT@fmcwtxrx+1
  7062  0CFF  0874               	movf	OPINIT@fmcwtxrx,w
  7063  0D00  00F2               	movwf	L_OUT@fmcwtxrx
  7064  0D01  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7065                           
  7066                           ;FMCW.c: 251: L_OUT(fmcwtxrx);
  7067  0D06  0875               	movf	OPINIT@fmcwtxrx+1,w
  7068  0D07  00F3               	movwf	L_OUT@fmcwtxrx+1
  7069  0D08  0874               	movf	OPINIT@fmcwtxrx,w
  7070  0D09  00F2               	movwf	L_OUT@fmcwtxrx
  7071  0D0A  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7072                           
  7073                           ;FMCW.c: 252: L_OUT(fmcwtxrx);
  7074  0D0F  0875               	movf	OPINIT@fmcwtxrx+1,w
  7075  0D10  00F3               	movwf	L_OUT@fmcwtxrx+1
  7076  0D11  0874               	movf	OPINIT@fmcwtxrx,w
  7077  0D12  00F2               	movwf	L_OUT@fmcwtxrx
  7078  0D13  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7079                           
  7080                           ;FMCW.c: 253: H_OUT(fmcwtxrx);
  7081  0D18  0875               	movf	OPINIT@fmcwtxrx+1,w
  7082  0D19  00F3               	movwf	H_OUT@fmcwtxrx+1
  7083  0D1A  0874               	movf	OPINIT@fmcwtxrx,w
  7084  0D1B  00F2               	movwf	H_OUT@fmcwtxrx
  7085  0D1C  120A  158A  220C  120A  158A  	fcall	_H_OUT
  7086                           
  7087                           ;FMCW.c: 256: L_OUT(fmcwtxrx);
  7088  0D21  0875               	movf	OPINIT@fmcwtxrx+1,w
  7089  0D22  00F3               	movwf	L_OUT@fmcwtxrx+1
  7090  0D23  0874               	movf	OPINIT@fmcwtxrx,w
  7091  0D24  00F2               	movwf	L_OUT@fmcwtxrx
  7092  0D25  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7093                           
  7094                           ;FMCW.c: 257: L_OUT(fmcwtxrx);
  7095  0D2A  0875               	movf	OPINIT@fmcwtxrx+1,w
  7096  0D2B  00F3               	movwf	L_OUT@fmcwtxrx+1
  7097  0D2C  0874               	movf	OPINIT@fmcwtxrx,w
  7098  0D2D  00F2               	movwf	L_OUT@fmcwtxrx
  7099  0D2E  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7100                           
  7101                           ;FMCW.c: 260: STBOUT(fmcwtxrx);
  7102  0D33  0875               	movf	OPINIT@fmcwtxrx+1,w
  7103  0D34  00F3               	movwf	STBOUT@fmcwtxrx+1
  7104  0D35  0874               	movf	OPINIT@fmcwtxrx,w
  7105  0D36  00F2               	movwf	STBOUT@fmcwtxrx
  7106  0D37  120A  158A  2170   	fcall	_STBOUT
  7107  0D3A  0008               	return
  7108  0D3B                     __end_of_OPINIT:	
  7109                           
  7110                           	psect	text26
  7111  0970                     __ptext26:	
  7112 ;; *************** function _STBOUT *****************
  7113 ;; Defined at:
  7114 ;;		line 107 in file "FMCW.c"
  7115 ;; Parameters:    Size  Location     Type
  7116 ;;  fmcwtxrx        2    2[COMMON] int 
  7117 ;; Auto vars:     Size  Location     Type
  7118 ;;		None
  7119 ;; Return value:  Size  Location     Type
  7120 ;;                  1    wreg      void 
  7121 ;; Registers used:
  7122 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7123 ;; Tracked objects:
  7124 ;;		On entry : 0/0
  7125 ;;		On exit  : 0/0
  7126 ;;		Unchanged: 0/0
  7127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7128 ;;      Params:         2       0       0       0       0
  7129 ;;      Locals:         0       0       0       0       0
  7130 ;;      Temps:          0       0       0       0       0
  7131 ;;      Totals:         2       0       0       0       0
  7132 ;;Total ram usage:        2 bytes
  7133 ;; Hardware stack levels used:    1
  7134 ;; Hardware stack levels required when called:    1
  7135 ;; This function calls:
  7136 ;;		__NOP
  7137 ;; This function is called by:
  7138 ;;		_OUTFQ
  7139 ;;		_RFDOUT
  7140 ;;		_OPINIT
  7141 ;; This function uses a non-reentrant model
  7142 ;;
  7143                           
  7144                           
  7145                           ;psect for function _STBOUT
  7146  0970                     _STBOUT:	
  7147                           
  7148                           ;FMCW.c: 108: if(fmcwtxrx == 1)
  7149                           
  7150                           ;incstack = 0
  7151                           ; Regs used in _STBOUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7152  0970  0372               	decf	STBOUT@fmcwtxrx,w
  7153  0971  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7154  0972  1D03               	btfss	3,2
  7155  0973  297F               	goto	l2571
  7156                           
  7157                           ;FMCW.c: 109: {
  7158                           ;FMCW.c: 110: PORTAbits.RA5 = 1;
  7159  0974  1283               	bcf	3,5	;RP0=0, select bank0
  7160  0975  1303               	bcf	3,6	;RP1=0, select bank0
  7161  0976  1685               	bsf	5,5	;volatile
  7162                           
  7163                           ;FMCW.c: 111: _NOP();
  7164  0977  120A  158A  204A  120A  158A  	fcall	__NOP
  7165                           
  7166                           ;FMCW.c: 112: PORTAbits.RA5 = 0;
  7167  097C  1283               	bcf	3,5	;RP0=0, select bank0
  7168  097D  1303               	bcf	3,6	;RP1=0, select bank0
  7169  097E  1285               	bcf	5,5	;volatile
  7170  097F                     l2571:	
  7171                           
  7172                           ;FMCW.c: 113: }
  7173                           ;FMCW.c: 114: if(fmcwtxrx == 2)
  7174  097F  3002               	movlw	2
  7175  0980  0672               	xorwf	STBOUT@fmcwtxrx,w
  7176  0981  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7177  0982  1D03               	btfss	3,2
  7178  0983  298F               	goto	l2579
  7179                           
  7180                           ;FMCW.c: 115: {
  7181                           ;FMCW.c: 116: PORTDbits.RD0 = 1;
  7182  0984  1283               	bcf	3,5	;RP0=0, select bank0
  7183  0985  1303               	bcf	3,6	;RP1=0, select bank0
  7184  0986  1408               	bsf	8,0	;volatile
  7185                           
  7186                           ;FMCW.c: 117: _NOP();
  7187  0987  120A  158A  204A  120A  158A  	fcall	__NOP
  7188                           
  7189                           ;FMCW.c: 118: PORTDbits.RD0 = 0;
  7190  098C  1283               	bcf	3,5	;RP0=0, select bank0
  7191  098D  1303               	bcf	3,6	;RP1=0, select bank0
  7192  098E  1008               	bcf	8,0	;volatile
  7193  098F                     l2579:	
  7194                           
  7195                           ;FMCW.c: 119: }
  7196                           ;FMCW.c: 120: if(fmcwtxrx == 3)
  7197  098F  3003               	movlw	3
  7198  0990  0672               	xorwf	STBOUT@fmcwtxrx,w
  7199  0991  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7200  0992  1D03               	btfss	3,2
  7201  0993  0008               	return
  7202                           
  7203                           ;FMCW.c: 121: {
  7204                           ;FMCW.c: 122: PORTBbits.RB0 = 1;
  7205  0994  1283               	bcf	3,5	;RP0=0, select bank0
  7206  0995  1303               	bcf	3,6	;RP1=0, select bank0
  7207  0996  1406               	bsf	6,0	;volatile
  7208                           
  7209                           ;FMCW.c: 123: _NOP();
  7210  0997  120A  158A  204A   	fcall	__NOP
  7211                           
  7212                           ;FMCW.c: 124: PORTBbits.RB0 = 0;
  7213  099A  1283               	bcf	3,5	;RP0=0, select bank0
  7214  099B  1303               	bcf	3,6	;RP1=0, select bank0
  7215  099C  1006               	bcf	6,0	;volatile
  7216  099D  0008               	return
  7217  099E                     __end_of_STBOUT:	
  7218                           
  7219                           	psect	text27
  7220  0A52                     __ptext27:	
  7221 ;; *************** function _L_OUT *****************
  7222 ;; Defined at:
  7223 ;;		line 40 in file "FMCW.c"
  7224 ;; Parameters:    Size  Location     Type
  7225 ;;  fmcwtxrx        2    2[COMMON] int 
  7226 ;; Auto vars:     Size  Location     Type
  7227 ;;		None
  7228 ;; Return value:  Size  Location     Type
  7229 ;;                  1    wreg      void 
  7230 ;; Registers used:
  7231 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7232 ;; Tracked objects:
  7233 ;;		On entry : 0/0
  7234 ;;		On exit  : 0/0
  7235 ;;		Unchanged: 0/0
  7236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7237 ;;      Params:         2       0       0       0       0
  7238 ;;      Locals:         0       0       0       0       0
  7239 ;;      Temps:          0       0       0       0       0
  7240 ;;      Totals:         2       0       0       0       0
  7241 ;;Total ram usage:        2 bytes
  7242 ;; Hardware stack levels used:    1
  7243 ;; Hardware stack levels required when called:    1
  7244 ;; This function calls:
  7245 ;;		__NOP
  7246 ;; This function is called by:
  7247 ;;		_OUTFQ
  7248 ;;		_RFDOUT
  7249 ;;		_OPINIT
  7250 ;; This function uses a non-reentrant model
  7251 ;;
  7252                           
  7253                           
  7254                           ;psect for function _L_OUT
  7255  0A52                     _L_OUT:	
  7256                           
  7257                           ;FMCW.c: 41: if(fmcwtxrx == 1)
  7258                           
  7259                           ;incstack = 0
  7260                           ; Regs used in _L_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7261  0A52  0372               	decf	L_OUT@fmcwtxrx,w
  7262  0A53  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7263  0A54  1D03               	btfss	3,2
  7264  0A55  2A69               	goto	l2513
  7265                           
  7266                           ;FMCW.c: 42: {
  7267                           ;FMCW.c: 43: PORTEbits.RE0 = 0;
  7268  0A56  1283               	bcf	3,5	;RP0=0, select bank0
  7269  0A57  1303               	bcf	3,6	;RP1=0, select bank0
  7270  0A58  1009               	bcf	9,0	;volatile
  7271                           
  7272                           ;FMCW.c: 44: _NOP();
  7273  0A59  120A  158A  204A  120A  158A  	fcall	__NOP
  7274                           
  7275                           ;FMCW.c: 45: PORTEbits.RE1 = 1;
  7276  0A5E  1283               	bcf	3,5	;RP0=0, select bank0
  7277  0A5F  1303               	bcf	3,6	;RP1=0, select bank0
  7278  0A60  1489               	bsf	9,1	;volatile
  7279                           
  7280                           ;FMCW.c: 46: _NOP();
  7281  0A61  120A  158A  204A  120A  158A  	fcall	__NOP
  7282                           
  7283                           ;FMCW.c: 47: PORTEbits.RE1 = 0;
  7284  0A66  1283               	bcf	3,5	;RP0=0, select bank0
  7285  0A67  1303               	bcf	3,6	;RP1=0, select bank0
  7286  0A68  1089               	bcf	9,1	;volatile
  7287  0A69                     l2513:	
  7288                           
  7289                           ;FMCW.c: 48: }
  7290                           ;FMCW.c: 49: if(fmcwtxrx == 2)
  7291  0A69  3002               	movlw	2
  7292  0A6A  0672               	xorwf	L_OUT@fmcwtxrx,w
  7293  0A6B  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7294  0A6C  1D03               	btfss	3,2
  7295  0A6D  2A81               	goto	l2523
  7296                           
  7297                           ;FMCW.c: 50: {
  7298                           ;FMCW.c: 51: PORTDbits.RD1 = 0;
  7299  0A6E  1283               	bcf	3,5	;RP0=0, select bank0
  7300  0A6F  1303               	bcf	3,6	;RP1=0, select bank0
  7301  0A70  1088               	bcf	8,1	;volatile
  7302                           
  7303                           ;FMCW.c: 52: _NOP();
  7304  0A71  120A  158A  204A  120A  158A  	fcall	__NOP
  7305                           
  7306                           ;FMCW.c: 53: PORTDbits.RD2 = 1;
  7307  0A76  1283               	bcf	3,5	;RP0=0, select bank0
  7308  0A77  1303               	bcf	3,6	;RP1=0, select bank0
  7309  0A78  1508               	bsf	8,2	;volatile
  7310                           
  7311                           ;FMCW.c: 54: _NOP();
  7312  0A79  120A  158A  204A  120A  158A  	fcall	__NOP
  7313                           
  7314                           ;FMCW.c: 55: PORTDbits.RD2 = 0;
  7315  0A7E  1283               	bcf	3,5	;RP0=0, select bank0
  7316  0A7F  1303               	bcf	3,6	;RP1=0, select bank0
  7317  0A80  1108               	bcf	8,2	;volatile
  7318  0A81                     l2523:	
  7319                           
  7320                           ;FMCW.c: 56: }
  7321                           ;FMCW.c: 57: if(fmcwtxrx == 3)
  7322  0A81  3003               	movlw	3
  7323  0A82  0672               	xorwf	L_OUT@fmcwtxrx,w
  7324  0A83  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7325  0A84  1D03               	btfss	3,2
  7326  0A85  0008               	return
  7327                           
  7328                           ;FMCW.c: 58: {
  7329                           ;FMCW.c: 59: PORTAbits.RA3 = 0;
  7330  0A86  1283               	bcf	3,5	;RP0=0, select bank0
  7331  0A87  1303               	bcf	3,6	;RP1=0, select bank0
  7332  0A88  1185               	bcf	5,3	;volatile
  7333                           
  7334                           ;FMCW.c: 60: _NOP();
  7335  0A89  120A  158A  204A  120A  158A  	fcall	__NOP
  7336                           
  7337                           ;FMCW.c: 61: PORTAbits.RA2 = 1;
  7338  0A8E  1283               	bcf	3,5	;RP0=0, select bank0
  7339  0A8F  1303               	bcf	3,6	;RP1=0, select bank0
  7340  0A90  1505               	bsf	5,2	;volatile
  7341                           
  7342                           ;FMCW.c: 62: _NOP();
  7343  0A91  120A  158A  204A   	fcall	__NOP
  7344                           
  7345                           ;FMCW.c: 63: PORTAbits.RA2 = 0;
  7346  0A94  1283               	bcf	3,5	;RP0=0, select bank0
  7347  0A95  1303               	bcf	3,6	;RP1=0, select bank0
  7348  0A96  1105               	bcf	5,2	;volatile
  7349  0A97  0008               	return
  7350  0A98                     __end_of_L_OUT:	
  7351                           
  7352                           	psect	text28
  7353  0A0C                     __ptext28:	
  7354 ;; *************** function _H_OUT *****************
  7355 ;; Defined at:
  7356 ;;		line 74 in file "FMCW.c"
  7357 ;; Parameters:    Size  Location     Type
  7358 ;;  fmcwtxrx        2    2[COMMON] int 
  7359 ;; Auto vars:     Size  Location     Type
  7360 ;;		None
  7361 ;; Return value:  Size  Location     Type
  7362 ;;                  1    wreg      void 
  7363 ;; Registers used:
  7364 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7365 ;; Tracked objects:
  7366 ;;		On entry : 0/0
  7367 ;;		On exit  : 0/0
  7368 ;;		Unchanged: 0/0
  7369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7370 ;;      Params:         2       0       0       0       0
  7371 ;;      Locals:         0       0       0       0       0
  7372 ;;      Temps:          0       0       0       0       0
  7373 ;;      Totals:         2       0       0       0       0
  7374 ;;Total ram usage:        2 bytes
  7375 ;; Hardware stack levels used:    1
  7376 ;; Hardware stack levels required when called:    1
  7377 ;; This function calls:
  7378 ;;		__NOP
  7379 ;; This function is called by:
  7380 ;;		_OUTFQ
  7381 ;;		_RFDOUT
  7382 ;;		_OPINIT
  7383 ;; This function uses a non-reentrant model
  7384 ;;
  7385                           
  7386                           
  7387                           ;psect for function _H_OUT
  7388  0A0C                     _H_OUT:	
  7389                           
  7390                           ;FMCW.c: 75: if(fmcwtxrx == 1)
  7391                           
  7392                           ;incstack = 0
  7393                           ; Regs used in _H_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7394  0A0C  0372               	decf	H_OUT@fmcwtxrx,w
  7395  0A0D  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7396  0A0E  1D03               	btfss	3,2
  7397  0A0F  2A23               	goto	l2543
  7398                           
  7399                           ;FMCW.c: 76: {
  7400                           ;FMCW.c: 77: PORTEbits.RE0 = 1;
  7401  0A10  1283               	bcf	3,5	;RP0=0, select bank0
  7402  0A11  1303               	bcf	3,6	;RP1=0, select bank0
  7403  0A12  1409               	bsf	9,0	;volatile
  7404                           
  7405                           ;FMCW.c: 78: _NOP();
  7406  0A13  120A  158A  204A  120A  158A  	fcall	__NOP
  7407                           
  7408                           ;FMCW.c: 79: PORTEbits.RE1 = 1;
  7409  0A18  1283               	bcf	3,5	;RP0=0, select bank0
  7410  0A19  1303               	bcf	3,6	;RP1=0, select bank0
  7411  0A1A  1489               	bsf	9,1	;volatile
  7412                           
  7413                           ;FMCW.c: 80: _NOP();
  7414  0A1B  120A  158A  204A  120A  158A  	fcall	__NOP
  7415                           
  7416                           ;FMCW.c: 81: PORTEbits.RE1 = 0;
  7417  0A20  1283               	bcf	3,5	;RP0=0, select bank0
  7418  0A21  1303               	bcf	3,6	;RP1=0, select bank0
  7419  0A22  1089               	bcf	9,1	;volatile
  7420  0A23                     l2543:	
  7421                           
  7422                           ;FMCW.c: 82: }
  7423                           ;FMCW.c: 83: if(fmcwtxrx == 2)
  7424  0A23  3002               	movlw	2
  7425  0A24  0672               	xorwf	H_OUT@fmcwtxrx,w
  7426  0A25  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7427  0A26  1D03               	btfss	3,2
  7428  0A27  2A3B               	goto	l2553
  7429                           
  7430                           ;FMCW.c: 84: {
  7431                           ;FMCW.c: 85: PORTDbits.RD1 = 1;
  7432  0A28  1283               	bcf	3,5	;RP0=0, select bank0
  7433  0A29  1303               	bcf	3,6	;RP1=0, select bank0
  7434  0A2A  1488               	bsf	8,1	;volatile
  7435                           
  7436                           ;FMCW.c: 86: _NOP();
  7437  0A2B  120A  158A  204A  120A  158A  	fcall	__NOP
  7438                           
  7439                           ;FMCW.c: 87: PORTDbits.RD2 = 1;
  7440  0A30  1283               	bcf	3,5	;RP0=0, select bank0
  7441  0A31  1303               	bcf	3,6	;RP1=0, select bank0
  7442  0A32  1508               	bsf	8,2	;volatile
  7443                           
  7444                           ;FMCW.c: 88: _NOP();
  7445  0A33  120A  158A  204A  120A  158A  	fcall	__NOP
  7446                           
  7447                           ;FMCW.c: 89: PORTDbits.RD2 = 0;
  7448  0A38  1283               	bcf	3,5	;RP0=0, select bank0
  7449  0A39  1303               	bcf	3,6	;RP1=0, select bank0
  7450  0A3A  1108               	bcf	8,2	;volatile
  7451  0A3B                     l2553:	
  7452                           
  7453                           ;FMCW.c: 90: }
  7454                           ;FMCW.c: 91: if(fmcwtxrx == 3)
  7455  0A3B  3003               	movlw	3
  7456  0A3C  0672               	xorwf	H_OUT@fmcwtxrx,w
  7457  0A3D  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7458  0A3E  1D03               	btfss	3,2
  7459  0A3F  0008               	return
  7460                           
  7461                           ;FMCW.c: 92: {
  7462                           ;FMCW.c: 93: PORTAbits.RA3 = 1;
  7463  0A40  1283               	bcf	3,5	;RP0=0, select bank0
  7464  0A41  1303               	bcf	3,6	;RP1=0, select bank0
  7465  0A42  1585               	bsf	5,3	;volatile
  7466                           
  7467                           ;FMCW.c: 94: _NOP();
  7468  0A43  120A  158A  204A  120A  158A  	fcall	__NOP
  7469                           
  7470                           ;FMCW.c: 95: PORTAbits.RA2 = 1;
  7471  0A48  1283               	bcf	3,5	;RP0=0, select bank0
  7472  0A49  1303               	bcf	3,6	;RP1=0, select bank0
  7473  0A4A  1505               	bsf	5,2	;volatile
  7474                           
  7475                           ;FMCW.c: 96: _NOP();
  7476  0A4B  120A  158A  204A   	fcall	__NOP
  7477                           
  7478                           ;FMCW.c: 97: PORTAbits.RA2 = 0;
  7479  0A4E  1283               	bcf	3,5	;RP0=0, select bank0
  7480  0A4F  1303               	bcf	3,6	;RP1=0, select bank0
  7481  0A50  1105               	bcf	5,2	;volatile
  7482  0A51  0008               	return
  7483  0A52                     __end_of_H_OUT:	
  7484                           
  7485                           	psect	text29
  7486  084A                     __ptext29:	
  7487 ;; *************** function __NOP *****************
  7488 ;; Defined at:
  7489 ;;		line 349 in file "FMCW.c"
  7490 ;; Parameters:    Size  Location     Type
  7491 ;;		None
  7492 ;; Auto vars:     Size  Location     Type
  7493 ;;  i               2    0[COMMON] int 
  7494 ;; Return value:  Size  Location     Type
  7495 ;;                  1    wreg      void 
  7496 ;; Registers used:
  7497 ;;		wreg, status,2, btemp+1
  7498 ;; Tracked objects:
  7499 ;;		On entry : 0/0
  7500 ;;		On exit  : 0/0
  7501 ;;		Unchanged: 0/0
  7502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7503 ;;      Params:         0       0       0       0       0
  7504 ;;      Locals:         2       0       0       0       0
  7505 ;;      Temps:          0       0       0       0       0
  7506 ;;      Totals:         2       0       0       0       0
  7507 ;;Total ram usage:        2 bytes
  7508 ;; Hardware stack levels used:    1
  7509 ;; This function calls:
  7510 ;;		Nothing
  7511 ;; This function is called by:
  7512 ;;		_L_OUT
  7513 ;;		_H_OUT
  7514 ;;		_STBOUT
  7515 ;; This function uses a non-reentrant model
  7516 ;;
  7517                           
  7518                           
  7519                           ;psect for function __NOP
  7520  084A                     __NOP:	
  7521                           
  7522                           ;FMCW.c: 350: for(int i=0; i<5; i++){
  7523                           
  7524                           ;incstack = 0
  7525                           ; Regs used in __NOP: [wreg+status,2+btemp+1]
  7526  084A  01F0               	clrf	__NOP@i
  7527  084B  01F1               	clrf	__NOP@i+1
  7528  084C                     L9:	
  7529  084C  0871               	movf	__NOP@i+1,w
  7530  084D  3A80               	xorlw	128
  7531  084E  00FF               	movwf	127
  7532  084F  3080               	movlw	128
  7533  0850  027F               	subwf	127,w
  7534  0851  1D03               	skipz
  7535  0852  2855               	goto	u1815
  7536  0853  3005               	movlw	5
  7537  0854  0270               	subwf	__NOP@i,w
  7538  0855                     u1815:	
  7539  0855  1803               	btfsc	3,0
  7540  0856  0008               	return
  7541                           
  7542                           ;FMCW.c: 351: __nop();
  7543  0857  0000               	nop
  7544  0858  3001               	movlw	1
  7545  0859  07F0               	addwf	__NOP@i,f
  7546  085A  1803               	skipnc
  7547  085B  0AF1               	incf	__NOP@i+1,f
  7548  085C  3000               	movlw	0
  7549  085D  07F1               	addwf	__NOP@i+1,f
  7550  085E  284C               	goto	L9
  7551  085F                     __end_of__NOP:	
  7552  007E                     btemp	set	126	;btemp
  7553  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    2
    Data        91
    BSS         107
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      80
    BANK1            80     33      72
    BANK3            96      0      92
    BANK2            96      0      57

Pointer List with Targets:

    FMRX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), FMRX_Nprg(BANK3[10]), 

    CWTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@CWTX_Nprg(BANK1[10]), CWTX_Nprg(BANK1[10]), 

    FMTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    OUTFQ@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), main@CWTX_Nprg(BANK1[10]), main@FMTX_Nprg(BANK1[10]), 
		 -> FMRX_Nprg(BANK3[10]), CWTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    EEPROM_Write@data	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 

    main@dData	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 

    sp__ReceivePacket_data	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 


Critical Paths under _main in COMMON

    _TXOBC_waddress->_putch
    _ReceivePacket_data->_fcscheck
    _ReceivePacket_data->_waitFlag
    _waitFlag->_getbit
    _getdata->_getbit
    _NM_waddress->_putch
    _Init_I2C_M->___lldiv
    _FMTX->_OUTFQ
    _FMTX->_RFDOUT
    _FMRX->_OUTFQ
    _FMRX->_RFDOUT
    _EEPROM_Write->_I2C_Master_Write
    _CWTX->_OUTFQ
    _CWTX->_RFDOUT
    _RFDOUT->___awdiv
    _OUTFQ->___awdiv
    _OPINIT->_H_OUT
    _OPINIT->_L_OUT
    _OPINIT->_STBOUT
    _STBOUT->__NOP
    _L_OUT->__NOP
    _H_OUT->__NOP

Critical Paths under _main in BANK0

    _main->_CWTX
    _main->_FMRX
    _main->_FMTX
    _ReceivePacket_data->_waitFlag
    _FMTX->_OUTFQ
    _FMRX->_OUTFQ
    _CWTX->_OUTFQ

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0   33012
                                             66 BANK0      4     4      0
                                              0 BANK1     33    33      0
                               _CWTX
                       _EEPROM_Write
                               _FMRX
                               _FMTX
                         _Init_I2C_M
                           _Init_MPU
                        _Init_SERIAL
                        _NM_waddress
                 _ReceivePacket_data
                          _Reset_EPS
                     _TXOBC_waddress
 ---------------------------------------------------------------------------------
 (1) _TXOBC_waddress                                       5     3      2     194
                                              1 COMMON     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _Reset_EPS                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ReceivePacket_data                                   6     6      0    2691
                                             10 COMMON     2     2      0
                                             29 BANK0      4     4      0
                           _fcscheck
                            _getdata
                           _waitFlag
 ---------------------------------------------------------------------------------
 (2) _waitFlag                                            33    33      0    2205
                                              6 COMMON     4     4      0
                                              0 BANK0     29    29      0
                             _getbit
 ---------------------------------------------------------------------------------
 (2) _getdata                                             10    10      0     212
                                              6 COMMON     2     2      0
                                              0 BANK0      7     7      0
                             _getbit
 ---------------------------------------------------------------------------------
 (3) _getbit                                               6     4      2      46
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _fcscheck                                            10     8      2     161
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (1) _NM_waddress                                          3     1      2     194
                                              1 COMMON     3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_SERIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_MPU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_I2C_M                                           8     4      4     343
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _FMTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _FMRX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         8     5      3     527
                                              2 COMMON     8     5      3
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     234
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CWTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (2) _RFDOUT                                              37    33      4    3231
                                              9 COMMON     4     0      4
                                              0 BANK0     33    33      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _OUTFQ                                               64    60      4    3853
                                              9 COMMON     4     0      4
                                              0 BANK0     60    60      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _OPINIT                                               2     0      2    2075
                                              4 COMMON     2     0      2
                              _H_OUT
                              _L_OUT
                             _STBOUT
 ---------------------------------------------------------------------------------
 (3) _STBOUT                                               2     0      2     271
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _L_OUT                                                2     0      2     801
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _H_OUT                                                2     0      2     536
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (4) __NOP                                                 2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CWTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _EEPROM_Write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _FMRX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _FMTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _Init_I2C_M
     ___lldiv
   _Init_MPU
   _Init_SERIAL
   _NM_waddress
     _putch
   _ReceivePacket_data
     _fcscheck
     _getdata
       _getbit
     _waitFlag
       _getbit
   _Reset_EPS
   _TXOBC_waddress
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      5C       9       95.8%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      39      11       59.4%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     21      48       7       90.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     46      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     13B      12        0.0%
ABS                  0      0     13B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jun 25 02:42:23 2018

                             pc 0002                     __CFG_CP$OFF 0000                              l69 17F9  
                  ___awdiv@sign 0076                              fsr 0004                             l210 0566  
                           l275 0091                             l438 0FF1                             l439 0FDC  
                           l490 081E                             _RA1 0029                             _RB2 0032  
                           _RC2 003A                             _RB4 0034                             _RB5 0035  
                           _RC5 003D                             _PEN 048A                    __CFG_CPD$OFF 0000  
                           _SEN 0488                             _RX9 00C6                             _TX9 04C6  
                           fsr0 0004                             indf 0000                    __CFG_FOSC$HS 0000  
                  __CFG_LVP$OFF 0000                            l3013 07B0                            l3031 0C24  
                          l3015 032F                            l3113 00BD                            l3131 00F7  
                          l3211 0DAC                            l3203 0D75                            l3035 0C32  
                          l3141 0160                            l3125 00E8                            l3221 0DD5  
                          l3029 0C21                            l3151 0205                            l3143 019D  
                          l3119 00D9                            l3063 0059                            l3039 0C3D  
                          l2513 0A69                            l2601 0AF9                            l3153 020C  
                          l3161 02A4                            l3225 0DEF                            l3217 0DBB  
                          l3241 0BBA                            l3049 0C01                            l2523 0A81  
                          l2611 0B01                            l3171 02C6                            l3075 008A  
                          l3331 0C8A                            l2613 0B0F                            l3157 0293  
                          l3165 02B7                            l3229 0E02                            l3253 0BEF  
                          l3069 0076                            l3077 0038                            l2543 0A23  
                          l2623 0B30                            l3175 02E0                            l3183 030D  
                          l3191 0D4A                            l3239 0BAA                            l2711 040E  
                          l2553 0A3B                            l3249 0BE2                            l3089 00A9  
                          l2721 0429                            l3337 0CB2                            l3345 0CB8  
                          l2571 097F                            l2627 0B38                            l2619 0B25  
                          l3179 02FA                            l2803 0538                            l2651 0355  
                          l3197 0D66                            l3445 0B6D                            l2493 0AD2  
                          l2725 0436                            l2821 0564                            l3447 0B87  
                          l2495 0ADF                            l2903 065A                            l2751 048C  
                          l2671 0386                            l2913 0675                            l2841 0597  
                          l2737 0464                            l2657 035E                            l2649 0336  
                          l3721 0F1F                            l2579 098F                            l2595 0AEE  
                          l2851 05AE                            l2827 056F                            l2763 04BA  
                          l2747 047F                            l2667 0379                            l3715 0F0E  
                          l2917 0682                            l2861 05C9                            l2837 058A  
                          l2773 04D5                            l2685 03B8                            l3741 0FC4  
                          l2943 06D8                            l2695 03D3                            l2929 06B0  
                          l2865 05D6                            l2777 04E2                            l2955 0706  
                          l2939 06CB                            l2891 062C                            l2699 03E0  
                          l3691 0E97                            l2981 075C                            l2965 0721  
                          l2877 0604                            l2789 0510                            l2991 0777  
                          l2887 061F                            l2799 052B                            l2969 072E  
                          l2995 0784                            STR_1 080F                            STR_2 080F  
                          STR_3 080F                            STR_4 080F                            STR_5 080F  
                          STR_6 080F                            STR_7 0808                            STR_8 0808  
                          STR_9 0808                            _BRGH 04C2                            _CREN 00C4  
                          _FERR 00C2                            u2005 0B04                            u2025 0B10  
                          u2035 0B1C                            u2045 0B26                            u3005 0BBC  
                          u3015 0BD1                            u3025 0BE3                            u2305 04F7  
                          u2225 044B                            u2145 039F                            u3135 09B0  
                          u2415 05EB                            u3055 0C88                            u2345 054D  
                          u2265 04A1                            u2185 03F5                            u3065 0CB0  
                          u1815 0855                            u2615 0799                            u2535 06ED  
                          u2455 0641                            _FMRX 0918                            u3450 0F3C  
                          u2715 0046                            u3507 0E24                            u3460 0F52  
                          _FMTX 0944                            u1845 0AC2                            u3517 0E4E  
                          u3470 0F68                            u2575 0743                            u2495 0697  
                          u3607 09E8                            u3527 0EAE                            u2905 0D64  
                          u3617 09F6                            u3537 0ECF                            u2835 02A2  
                          u2755 00BB                            u2915 0D73                            u3627 0A04  
                          u3547 0EED                            u2845 02B5                            u2765 00D7  
                          u2925 0DAA                            u3637 0011                            u3557 0F2C  
                          u2855 02C4                            u2775 00E6                            u2935 0DB9  
                          u3647 0022                            u3567 0FBD                            u2785 00F5  
                          u3657 0AC6                            u3577 0FE7                            u3667 0B92  
                          u3587 0FF9                            _RCIE 0465                            _RCEN 048B  
                          _RCIF 0065                            _CWTX 08EC                            u2885 030B  
                          u2965 0E00                            u3597 09DA                            u2895 0D48  
                          u2985 0BAE                            _OERR 00C1                            _TMR1 000E  
                          _SPEN 00C7                            _RSEN 0489                            _SREN 00C5  
                          _TXIE 0464                            _TXEN 04C5                            _TXIF 0064  
                          _SYNC 04C4                            __NOP 084A  TXOBC_waddress@TXOBC_wad_header 0075  
                  __CFG_WRT$OFF 0000                            _main 0E1C                     _NM_waddress 0838  
                 ??_Init_SERIAL 0070                            btemp 007E                    getbit@oldbit 00E6  
                   Init_I2C_M@c 0020                            start 0000    ReceivePacket_data@fcschecker 003D  
          __end_of_EEPROM_Write 0B9A                           ?_FMRX 005C                           ?_FMTX 005C  
                         ?_CWTX 005C                ?_I2C_Master_Wait 0070                ?_I2C_Master_Stop 0070  
                         ?__NOP 0070                           ?_main 0070                           _ACKEN 048C  
                         _ACKDT 048D                 __end_of___awdiv 0B3D                           STR_10 0808  
                         STR_11 0808                           STR_12 0808                   __CFG_WDTE$OFF 0000  
               __end_of___lldiv 0BF8                 ___awdiv@divisor 0070         __size_of_TXOBC_waddress 003A  
               ___awdiv@counter 0075                           _RCREG 001A                           _SPBRG 0099  
                         _PORTA 0005                           _PORTB 0006                           _PORTC 0007  
                         _PORTD 0008                           _PORTE 0009                           _H_OUT 0A0C  
                         _OUTFQ 00AC                           _TRISA 0085                           _TRISB 0086  
                         _TRISC 0087                           _TRISD 0088                           _TRISE 0089  
                         _L_OUT 0A52                           _TXREG 0019                   __CFG_PWRTE$ON 0000  
                         _dData 0110                 __end_of_getdata 0C59                           _eflag 0066  
                 getdata@dstuff 0022                           _putch 17F8                  __CFG_BOREN$OFF 0000  
                         pclath 000A                           status 0003                           wtemp0 007E  
                    _Init_I2C_M 099E                EEPROM_Write@data 0074      __end_of_ReceivePacket_data 0CBE  
                  __end_of_FMRX 0944                    __end_of_FMTX 0970                    __end_of_CWTX 0918  
                  __end_of__NOP 085F                 __initialization 07B3                    __end_of_main 1000  
           __end_of_Init_SERIAL 0891                __end_of_Init_MPU 0878                          ??_FMRX 007D  
                        ??_FMTX 007D                          ??_CWTX 007D                          ??__NOP 0070  
                        ??_main 0062                          ?_H_OUT 0072        EEPROM_Write@high_address 0072  
                        ?_OUTFQ 0079                          ?_L_OUT 0072               ?_I2C_Master_Start 0070  
             ?_I2C_Master_Write 0070                          OUTFQ@i 0056              ??_I2C_Master_Start 0070  
                        OUTFQ@j 005A              ??_I2C_Master_Write 0072                ___awdiv@dividend 0072  
                    _eDataField 0130                          ?_putch 0070                          _RFDOUT 0D3B  
                        _OPINIT 0CBE                          _SSPADD 0093                          _STBOUT 0970  
                        _STATUS 0003                          _SSPCON 0014                          _SSPBUF 0013  
                        __NOP@i 0070                __end_of_fcscheck 00AC                       ??___awdiv 0074  
                        _dfcshi 006F                       ??___lldiv 0078                          _dfcslo 006E  
                        _efcshi 006C                          _efcslo 006D                          _getbit 0A98  
            __size_of_Reset_EPS 0023                          _estuff 00E2                ___awdiv@quotient 0077  
                    _dPacketnum 0068                       ??_getdata 0076                     RFDOUT@i_485 003B  
                   RFDOUT@i_486 003F                __end_of_waitFlag 07B3      EEPROM_Write@EEPROM_address 0078  
       __end_of__initialization 07FC         EEPROM_Write@low_address 0073                     ?_Init_I2C_M 0020  
                   _Init_SERIAL 0878           __size_of_EEPROM_Write 005D                   __end_of_H_OUT 0A52  
                 __end_of_OUTFQ 0327                   __end_of_L_OUT 0A98                   L_OUT@fmcwtxrx 0072  
                __pcstackCOMMON 0070                    __pidataBANK1 08AA                    __pidataBANK2 0891  
                  __pidataBANK3 08C4                   __end_of_putch 1800                  _TXOBC_waddress 09D2  
                       ??_H_OUT 0074                         ??_OUTFQ 0020                         ??_L_OUT 0074  
                       ??_putch 0070                    _EEPROM_Write 0B3D                      __pbssBANK0 0066  
                    __pbssBANK1 00DB                      __pbssBANK2 0110                      __pbssBANK3 0190  
             __end_of_Reset_EPS 002A                       ?_Init_MPU 0070                         ?_RFDOUT 0079  
                       ?_OPINIT 0074                    ?_NM_waddress 0071                         ?_STBOUT 0072  
                       RFDOUT@i 003D                      __pmaintext 0E1C                      _ebitstatus 00E0  
                       ?_getbit 0070          __end_of_TXOBC_waddress 0A0C     TXOBC_waddress@whigh_address 0071  
           __size_of_Init_I2C_M 0034                       OUTFQ@Nprg 007B                       ?_fcscheck 0070  
                       _SSPCON2 0091                         _SSPSTAT 0094                      __stringtab 0800  
                    ??_Init_MPU 0070                 __size_of_RFDOUT 00E1                 __size_of_OPINIT 007D  
               __size_of_STBOUT 002E                       ?_waitFlag 0070                         _dPacket 0190  
                       _ePacket 00DB                         ___awdiv 0AE4                         ___lldiv 0B9A  
               __size_of_getbit 004C                     waitFlag@buf 003C                 ?_TXOBC_waddress 0071  
                       __ptext1 09D2                         __ptext2 0007                         __ptext3 0C59  
                       __ptext4 0327                         __ptext5 0BF8                         __ptext6 0A98  
                       __ptext7 002A                         __ptext8 0838                         __ptext9 17F8  
                       _getdata 0BF8              _ReceivePacket_data 0C59                       _T1CONbits 0010  
      __size_of_I2C_Master_Wait 0009        __size_of_I2C_Master_Stop 0007                      ??_fcscheck 0072  
           ?_ReceivePacket_data 0070                         getbit@i 0074                         clrloop0 0817  
          end_of_initialization 07FC                    RFDOUT@Nref_b 0023                       _FMRX_Nref 00C1  
                     _FMRX_Nprg 01E2                       _FMTX_Nref 00C5                       _FMTX_Nprg 00D1  
                     _CWTX_Nref 00C3                       _CWTX_Nprg 00C7                     OUTFQ@Nprg_b 0030  
     __size_of_I2C_Master_Start 0007       __size_of_I2C_Master_Write 0008                 ___lldiv@divisor 0070  
               ___lldiv@counter 007D                      ??_waitFlag 0076            ??_ReceivePacket_data 007A  
                    fcscheck@bt 0074                  OPINIT@fmcwtxrx 0074                       _PORTAbits 0005  
                     _PORTBbits 0006                       _PORTCbits 0007                       _PORTDbits 0008  
                     _PORTEbits 0009                      getdata@buf 0026                    ??_Init_I2C_M 0024  
                  ?_Init_SERIAL 0070                  __end_of_RFDOUT 0E1C                  __end_of_OPINIT 0D3B  
                __end_of_STBOUT 099E            __size_of_NM_waddress 0012                  __end_of_getbit 0AE4  
    TXOBC_waddress@wlow_address 0072             start_initialization 07B3              __end_of_Init_I2C_M 09D2  
                      ??_RFDOUT 0020                        ??_OPINIT 0076               ??_I2C_Master_Wait 0070  
             ??_I2C_Master_Stop 0070                        ??_STBOUT 0074               __size_of_Init_MPU 0019  
                     _Reset_EPS 0007               getdata@dbitstatus 0024                      init_fetch0 0827  
                      ??_getbit 0072                     __pdataBANK1 00C1                     __pdataBANK2 0130  
                   __pdataBANK3 01C4                      RFDOUT@Nref 007B             __end_of_commandSize 0808  
      NM_waddress@whigh_address 0071                       ___latbits 0002                   __pcstackBANK0 0020  
                 __pcstackBANK1 00A0                        FMRX@Nref 005C                        FMRX@Nprg 005E  
                      FMTX@Nref 005C                        FMTX@Nprg 005E                        FMRX@fmrx 0060  
                      FMTX@fmtx 0060                        CWTX@Nref 005C                        CWTX@Nprg 005E  
             __size_of_fcscheck 0082                   waitFlag@j_120 0028                   waitFlag@j_122 002A  
                 waitFlag@j_131 0034                   waitFlag@j_124 002C                   waitFlag@j_116 0024  
                 waitFlag@j_133 0036                   waitFlag@j_125 002E                   waitFlag@j_118 0026  
                 waitFlag@j_135 0038                   waitFlag@j_127 0030                   waitFlag@j_129 0032  
                      CWTX@cwtx 0060                _I2C_Master_Start 17E2                      ?_Reset_EPS 0070  
              _I2C_Master_Write 17F0                ??_TXOBC_waddress 0073         getdata@bufstore_counter 0020  
                      ?___awdiv 0070                        ?___lldiv 0070               __size_of_waitFlag 048C  
                     __pstrings 0800                        ?_getdata 0070                  __size_of_H_OUT 0046  
                __size_of_OUTFQ 027B                  __size_of_L_OUT 0046                  __size_of_putch 0008  
                 H_OUT@fmcwtxrx 0072                       clear_ram0 0816                        _PIE1bits 008C  
                    OUTFQ@i_474 0052                      OUTFQ@i_476 0058                       _rcv_state 006A  
          __size_of_Init_SERIAL 0019                        _PIR1bits 000C                      OUTFQ@count 0054  
                   _commandSize 0806                       fcscheck@i 0075                       main@F1460 01D8  
                     main@F1462 01CE                       main@F1464 01C4                     __stringbase 0805  
                     main@dData 00C0                        _Init_MPU 085F                     ??_Reset_EPS 0070  
                 fcscheck@i_147 0077     __size_of_ReceivePacket_data 0065                __size_of___awdiv 0059  
              __size_of___lldiv 005E              __end_of__stringtab 0806                __size_of_getdata 0061  
               _I2C_Master_Wait 081E                 _I2C_Master_Stop 17E9                  RFDOUT@fmcwtxrx 0079  
                      _efcsflag 00E4                        _fcscheck 002A                        __ptext10 0878  
                      __ptext11 085F                        __ptext20 081E                        __ptext12 099E  
                      __ptext21 08EC                        __ptext13 0B9A                        __ptext22 0D3B  
                      __ptext14 0944                        __ptext23 00AC                        __ptext15 0918  
                      __ptext24 0AE4                        __ptext16 0B3D                        __ptext25 0CBE  
                      __ptext17 17F0                        __ptext26 0970                        __ptext18 17E9  
                      __ptext27 0A52                        __ptext19 17E2                        __ptext28 0A0C  
                      __ptext29 084A                   ?_EEPROM_Write 0072                   __size_of_FMRX 002C  
                 __size_of_FMTX 002C                   __size_of_CWTX 002C                   __size_of__NOP 0015  
                 ??_NM_waddress 0073                       waitFlag@i 0020                       waitFlag@j 0022  
                 __size_of_main 01E4                  STBOUT@fmcwtxrx 0072                        _waitFlag 0327  
      NM_waddress@NM_wad_header 0073                   OUTFQ@fmcwtxrx 0079        __end_of_I2C_Master_Start 17E9  
                     putch@byte 0070        __end_of_I2C_Master_Write 17F8                      _INTCONbits 000B  
                      init_ram0 082B                    fcscheck@byte 0079                  ??_EEPROM_Write 0075  
            waitFlag@flag_judge 003A                ___lldiv@dividend 0074                       stringcode 0800  
                 main@FMRX_Nprg 00B4               main@NM_wad_header 00BF                   main@FMTX_Nprg 00A0  
           __end_of_NM_waddress 084A                   main@CWTX_Nprg 00AA         __end_of_I2C_Master_Wait 0827  
       __end_of_I2C_Master_Stop 17F0                ___lldiv@quotient 0079               I2C_Master_Write@d 0070  
           EEPROM_Write@Address 0079                        stringdir 0800                        stringtab 0800  
           ReceivePacket_data@i 003F         NM_waddress@wlow_address 0072            main@TXOBC_wad_header 00BE  
