

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Wed Jan 24 22:31:24 2018

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	dabs	1,0x7E,2
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  008F                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  0105                     	;# 
   116  0107                     	;# 
   117  0108                     	;# 
   118  0109                     	;# 
   119  010C                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  0185                     	;# 
   125  0187                     	;# 
   126  0188                     	;# 
   127  0189                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  000E                     	;# 
   146  000F                     	;# 
   147  0010                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0013                     	;# 
   151  0014                     	;# 
   152  0015                     	;# 
   153  0015                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001B                     	;# 
   160  001B                     	;# 
   161  001C                     	;# 
   162  001D                     	;# 
   163  001E                     	;# 
   164  001F                     	;# 
   165  0081                     	;# 
   166  0085                     	;# 
   167  0086                     	;# 
   168  0087                     	;# 
   169  0088                     	;# 
   170  0089                     	;# 
   171  008C                     	;# 
   172  008D                     	;# 
   173  008E                     	;# 
   174  008F                     	;# 
   175  0090                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0094                     	;# 
   182  0095                     	;# 
   183  0096                     	;# 
   184  0097                     	;# 
   185  0098                     	;# 
   186  0099                     	;# 
   187  009A                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  0105                     	;# 
   194  0107                     	;# 
   195  0108                     	;# 
   196  0109                     	;# 
   197  010C                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  010F                     	;# 
   202  0185                     	;# 
   203  0187                     	;# 
   204  0188                     	;# 
   205  0189                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  0000                     	;# 
   209  0001                     	;# 
   210  0002                     	;# 
   211  0003                     	;# 
   212  0004                     	;# 
   213  0005                     	;# 
   214  0006                     	;# 
   215  0007                     	;# 
   216  0008                     	;# 
   217  0009                     	;# 
   218  000A                     	;# 
   219  000B                     	;# 
   220  000C                     	;# 
   221  000D                     	;# 
   222  000E                     	;# 
   223  000E                     	;# 
   224  000F                     	;# 
   225  0010                     	;# 
   226  0011                     	;# 
   227  0012                     	;# 
   228  0013                     	;# 
   229  0014                     	;# 
   230  0015                     	;# 
   231  0015                     	;# 
   232  0016                     	;# 
   233  0017                     	;# 
   234  0018                     	;# 
   235  0019                     	;# 
   236  001A                     	;# 
   237  001B                     	;# 
   238  001B                     	;# 
   239  001C                     	;# 
   240  001D                     	;# 
   241  001E                     	;# 
   242  001F                     	;# 
   243  0081                     	;# 
   244  0085                     	;# 
   245  0086                     	;# 
   246  0087                     	;# 
   247  0088                     	;# 
   248  0089                     	;# 
   249  008C                     	;# 
   250  008D                     	;# 
   251  008E                     	;# 
   252  008F                     	;# 
   253  0090                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0094                     	;# 
   260  0095                     	;# 
   261  0096                     	;# 
   262  0097                     	;# 
   263  0098                     	;# 
   264  0099                     	;# 
   265  009A                     	;# 
   266  009B                     	;# 
   267  009C                     	;# 
   268  009D                     	;# 
   269  009E                     	;# 
   270  009F                     	;# 
   271  0105                     	;# 
   272  0107                     	;# 
   273  0108                     	;# 
   274  0109                     	;# 
   275  010C                     	;# 
   276  010C                     	;# 
   277  010D                     	;# 
   278  010E                     	;# 
   279  010F                     	;# 
   280  0185                     	;# 
   281  0187                     	;# 
   282  0188                     	;# 
   283  0189                     	;# 
   284  018C                     	;# 
   285  018D                     	;# 
   286  0000                     	;# 
   287  0001                     	;# 
   288  0002                     	;# 
   289  0003                     	;# 
   290  0004                     	;# 
   291  0005                     	;# 
   292  0006                     	;# 
   293  0007                     	;# 
   294  0008                     	;# 
   295  0009                     	;# 
   296  000A                     	;# 
   297  000B                     	;# 
   298  000C                     	;# 
   299  000D                     	;# 
   300  000E                     	;# 
   301  000E                     	;# 
   302  000F                     	;# 
   303  0010                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0013                     	;# 
   307  0014                     	;# 
   308  0015                     	;# 
   309  0015                     	;# 
   310  0016                     	;# 
   311  0017                     	;# 
   312  0018                     	;# 
   313  0019                     	;# 
   314  001A                     	;# 
   315  001B                     	;# 
   316  001B                     	;# 
   317  001C                     	;# 
   318  001D                     	;# 
   319  001E                     	;# 
   320  001F                     	;# 
   321  0081                     	;# 
   322  0085                     	;# 
   323  0086                     	;# 
   324  0087                     	;# 
   325  0088                     	;# 
   326  0089                     	;# 
   327  008C                     	;# 
   328  008D                     	;# 
   329  008E                     	;# 
   330  008F                     	;# 
   331  0090                     	;# 
   332  0091                     	;# 
   333  0092                     	;# 
   334  0093                     	;# 
   335  0093                     	;# 
   336  0093                     	;# 
   337  0094                     	;# 
   338  0095                     	;# 
   339  0096                     	;# 
   340  0097                     	;# 
   341  0098                     	;# 
   342  0099                     	;# 
   343  009A                     	;# 
   344  009B                     	;# 
   345  009C                     	;# 
   346  009D                     	;# 
   347  009E                     	;# 
   348  009F                     	;# 
   349  0105                     	;# 
   350  0107                     	;# 
   351  0108                     	;# 
   352  0109                     	;# 
   353  010C                     	;# 
   354  010C                     	;# 
   355  010D                     	;# 
   356  010E                     	;# 
   357  010F                     	;# 
   358  0185                     	;# 
   359  0187                     	;# 
   360  0188                     	;# 
   361  0189                     	;# 
   362  018C                     	;# 
   363  018D                     	;# 
   364  0000                     	;# 
   365  0001                     	;# 
   366  0002                     	;# 
   367  0003                     	;# 
   368  0004                     	;# 
   369  0005                     	;# 
   370  0006                     	;# 
   371  0007                     	;# 
   372  0008                     	;# 
   373  0009                     	;# 
   374  000A                     	;# 
   375  000B                     	;# 
   376  000C                     	;# 
   377  000D                     	;# 
   378  000E                     	;# 
   379  000E                     	;# 
   380  000F                     	;# 
   381  0010                     	;# 
   382  0011                     	;# 
   383  0012                     	;# 
   384  0013                     	;# 
   385  0014                     	;# 
   386  0015                     	;# 
   387  0015                     	;# 
   388  0016                     	;# 
   389  0017                     	;# 
   390  0018                     	;# 
   391  0019                     	;# 
   392  001A                     	;# 
   393  001B                     	;# 
   394  001B                     	;# 
   395  001C                     	;# 
   396  001D                     	;# 
   397  001E                     	;# 
   398  001F                     	;# 
   399  0081                     	;# 
   400  0085                     	;# 
   401  0086                     	;# 
   402  0087                     	;# 
   403  0088                     	;# 
   404  0089                     	;# 
   405  008C                     	;# 
   406  008D                     	;# 
   407  008E                     	;# 
   408  008F                     	;# 
   409  0090                     	;# 
   410  0091                     	;# 
   411  0092                     	;# 
   412  0093                     	;# 
   413  0093                     	;# 
   414  0093                     	;# 
   415  0094                     	;# 
   416  0095                     	;# 
   417  0096                     	;# 
   418  0097                     	;# 
   419  0098                     	;# 
   420  0099                     	;# 
   421  009A                     	;# 
   422  009B                     	;# 
   423  009C                     	;# 
   424  009D                     	;# 
   425  009E                     	;# 
   426  009F                     	;# 
   427  0105                     	;# 
   428  0107                     	;# 
   429  0108                     	;# 
   430  0109                     	;# 
   431  010C                     	;# 
   432  010C                     	;# 
   433  010D                     	;# 
   434  010E                     	;# 
   435  010F                     	;# 
   436  0185                     	;# 
   437  0187                     	;# 
   438  0188                     	;# 
   439  0189                     	;# 
   440  018C                     	;# 
   441  018D                     	;# 
   442  0000                     	;# 
   443  0001                     	;# 
   444  0002                     	;# 
   445  0003                     	;# 
   446  0004                     	;# 
   447  0005                     	;# 
   448  0006                     	;# 
   449  0007                     	;# 
   450  0008                     	;# 
   451  0009                     	;# 
   452  000A                     	;# 
   453  000B                     	;# 
   454  000C                     	;# 
   455  000D                     	;# 
   456  000E                     	;# 
   457  000E                     	;# 
   458  000F                     	;# 
   459  0010                     	;# 
   460  0011                     	;# 
   461  0012                     	;# 
   462  0013                     	;# 
   463  0014                     	;# 
   464  0015                     	;# 
   465  0015                     	;# 
   466  0016                     	;# 
   467  0017                     	;# 
   468  0018                     	;# 
   469  0019                     	;# 
   470  001A                     	;# 
   471  001B                     	;# 
   472  001B                     	;# 
   473  001C                     	;# 
   474  001D                     	;# 
   475  001E                     	;# 
   476  001F                     	;# 
   477  0081                     	;# 
   478  0085                     	;# 
   479  0086                     	;# 
   480  0087                     	;# 
   481  0088                     	;# 
   482  0089                     	;# 
   483  008C                     	;# 
   484  008D                     	;# 
   485  008E                     	;# 
   486  008F                     	;# 
   487  0090                     	;# 
   488  0091                     	;# 
   489  0092                     	;# 
   490  0093                     	;# 
   491  0093                     	;# 
   492  0093                     	;# 
   493  0094                     	;# 
   494  0095                     	;# 
   495  0096                     	;# 
   496  0097                     	;# 
   497  0098                     	;# 
   498  0099                     	;# 
   499  009A                     	;# 
   500  009B                     	;# 
   501  009C                     	;# 
   502  009D                     	;# 
   503  009E                     	;# 
   504  009F                     	;# 
   505  0105                     	;# 
   506  0107                     	;# 
   507  0108                     	;# 
   508  0109                     	;# 
   509  010C                     	;# 
   510  010C                     	;# 
   511  010D                     	;# 
   512  010E                     	;# 
   513  010F                     	;# 
   514  0185                     	;# 
   515  0187                     	;# 
   516  0188                     	;# 
   517  0189                     	;# 
   518  018C                     	;# 
   519  018D                     	;# 
   520  0000                     	;# 
   521  0001                     	;# 
   522  0002                     	;# 
   523  0003                     	;# 
   524  0004                     	;# 
   525  0005                     	;# 
   526  0006                     	;# 
   527  0007                     	;# 
   528  0008                     	;# 
   529  0009                     	;# 
   530  000A                     	;# 
   531  000B                     	;# 
   532  000C                     	;# 
   533  000D                     	;# 
   534  000E                     	;# 
   535  000E                     	;# 
   536  000F                     	;# 
   537  0010                     	;# 
   538  0011                     	;# 
   539  0012                     	;# 
   540  0013                     	;# 
   541  0014                     	;# 
   542  0015                     	;# 
   543  0015                     	;# 
   544  0016                     	;# 
   545  0017                     	;# 
   546  0018                     	;# 
   547  0019                     	;# 
   548  001A                     	;# 
   549  001B                     	;# 
   550  001B                     	;# 
   551  001C                     	;# 
   552  001D                     	;# 
   553  001E                     	;# 
   554  001F                     	;# 
   555  0081                     	;# 
   556  0085                     	;# 
   557  0086                     	;# 
   558  0087                     	;# 
   559  0088                     	;# 
   560  0089                     	;# 
   561  008C                     	;# 
   562  008D                     	;# 
   563  008E                     	;# 
   564  008F                     	;# 
   565  0090                     	;# 
   566  0091                     	;# 
   567  0092                     	;# 
   568  0093                     	;# 
   569  0093                     	;# 
   570  0093                     	;# 
   571  0094                     	;# 
   572  0095                     	;# 
   573  0096                     	;# 
   574  0097                     	;# 
   575  0098                     	;# 
   576  0099                     	;# 
   577  009A                     	;# 
   578  009B                     	;# 
   579  009C                     	;# 
   580  009D                     	;# 
   581  009E                     	;# 
   582  009F                     	;# 
   583  0105                     	;# 
   584  0107                     	;# 
   585  0108                     	;# 
   586  0109                     	;# 
   587  010C                     	;# 
   588  010C                     	;# 
   589  010D                     	;# 
   590  010E                     	;# 
   591  010F                     	;# 
   592  0185                     	;# 
   593  0187                     	;# 
   594  0188                     	;# 
   595  0189                     	;# 
   596  018C                     	;# 
   597  018D                     	;# 
   598  0000                     	;# 
   599  0001                     	;# 
   600  0002                     	;# 
   601  0003                     	;# 
   602  0004                     	;# 
   603  0005                     	;# 
   604  0006                     	;# 
   605  0007                     	;# 
   606  0008                     	;# 
   607  0009                     	;# 
   608  000A                     	;# 
   609  000B                     	;# 
   610  000C                     	;# 
   611  000D                     	;# 
   612  000E                     	;# 
   613  000E                     	;# 
   614  000F                     	;# 
   615  0010                     	;# 
   616  0011                     	;# 
   617  0012                     	;# 
   618  0013                     	;# 
   619  0014                     	;# 
   620  0015                     	;# 
   621  0015                     	;# 
   622  0016                     	;# 
   623  0017                     	;# 
   624  0018                     	;# 
   625  0019                     	;# 
   626  001A                     	;# 
   627  001B                     	;# 
   628  001B                     	;# 
   629  001C                     	;# 
   630  001D                     	;# 
   631  001E                     	;# 
   632  001F                     	;# 
   633  0081                     	;# 
   634  0085                     	;# 
   635  0086                     	;# 
   636  0087                     	;# 
   637  0088                     	;# 
   638  0089                     	;# 
   639  008C                     	;# 
   640  008D                     	;# 
   641  008E                     	;# 
   642  008F                     	;# 
   643  0090                     	;# 
   644  0091                     	;# 
   645  0092                     	;# 
   646  0093                     	;# 
   647  0093                     	;# 
   648  0093                     	;# 
   649  0094                     	;# 
   650  0095                     	;# 
   651  0096                     	;# 
   652  0097                     	;# 
   653  0098                     	;# 
   654  0099                     	;# 
   655  009A                     	;# 
   656  009B                     	;# 
   657  009C                     	;# 
   658  009D                     	;# 
   659  009E                     	;# 
   660  009F                     	;# 
   661  0105                     	;# 
   662  0107                     	;# 
   663  0108                     	;# 
   664  0109                     	;# 
   665  010C                     	;# 
   666  010C                     	;# 
   667  010D                     	;# 
   668  010E                     	;# 
   669  010F                     	;# 
   670  0185                     	;# 
   671  0187                     	;# 
   672  0188                     	;# 
   673  0189                     	;# 
   674  018C                     	;# 
   675  018D                     	;# 
   676  0000                     	;# 
   677  0001                     	;# 
   678  0002                     	;# 
   679  0003                     	;# 
   680  0004                     	;# 
   681  0005                     	;# 
   682  0006                     	;# 
   683  0007                     	;# 
   684  0008                     	;# 
   685  0009                     	;# 
   686  000A                     	;# 
   687  000B                     	;# 
   688  000C                     	;# 
   689  000D                     	;# 
   690  000E                     	;# 
   691  000E                     	;# 
   692  000F                     	;# 
   693  0010                     	;# 
   694  0011                     	;# 
   695  0012                     	;# 
   696  0013                     	;# 
   697  0014                     	;# 
   698  0015                     	;# 
   699  0015                     	;# 
   700  0016                     	;# 
   701  0017                     	;# 
   702  0018                     	;# 
   703  0019                     	;# 
   704  001A                     	;# 
   705  001B                     	;# 
   706  001B                     	;# 
   707  001C                     	;# 
   708  001D                     	;# 
   709  001E                     	;# 
   710  001F                     	;# 
   711  0081                     	;# 
   712  0085                     	;# 
   713  0086                     	;# 
   714  0087                     	;# 
   715  0088                     	;# 
   716  0089                     	;# 
   717  008C                     	;# 
   718  008D                     	;# 
   719  008E                     	;# 
   720  008F                     	;# 
   721  0090                     	;# 
   722  0091                     	;# 
   723  0092                     	;# 
   724  0093                     	;# 
   725  0093                     	;# 
   726  0093                     	;# 
   727  0094                     	;# 
   728  0095                     	;# 
   729  0096                     	;# 
   730  0097                     	;# 
   731  0098                     	;# 
   732  0099                     	;# 
   733  009A                     	;# 
   734  009B                     	;# 
   735  009C                     	;# 
   736  009D                     	;# 
   737  009E                     	;# 
   738  009F                     	;# 
   739  0105                     	;# 
   740  0107                     	;# 
   741  0108                     	;# 
   742  0109                     	;# 
   743  010C                     	;# 
   744  010C                     	;# 
   745  010D                     	;# 
   746  010E                     	;# 
   747  010F                     	;# 
   748  0185                     	;# 
   749  0187                     	;# 
   750  0188                     	;# 
   751  0189                     	;# 
   752  018C                     	;# 
   753  018D                     	;# 
   754  0000                     	;# 
   755  0001                     	;# 
   756  0002                     	;# 
   757  0003                     	;# 
   758  0004                     	;# 
   759  0005                     	;# 
   760  0006                     	;# 
   761  0007                     	;# 
   762  0008                     	;# 
   763  0009                     	;# 
   764  000A                     	;# 
   765  000B                     	;# 
   766  000C                     	;# 
   767  000D                     	;# 
   768  000E                     	;# 
   769  000E                     	;# 
   770  000F                     	;# 
   771  0010                     	;# 
   772  0011                     	;# 
   773  0012                     	;# 
   774  0013                     	;# 
   775  0014                     	;# 
   776  0015                     	;# 
   777  0015                     	;# 
   778  0016                     	;# 
   779  0017                     	;# 
   780  0018                     	;# 
   781  0019                     	;# 
   782  001A                     	;# 
   783  001B                     	;# 
   784  001B                     	;# 
   785  001C                     	;# 
   786  001D                     	;# 
   787  001E                     	;# 
   788  001F                     	;# 
   789  0081                     	;# 
   790  0085                     	;# 
   791  0086                     	;# 
   792  0087                     	;# 
   793  0088                     	;# 
   794  0089                     	;# 
   795  008C                     	;# 
   796  008D                     	;# 
   797  008E                     	;# 
   798  008F                     	;# 
   799  0090                     	;# 
   800  0091                     	;# 
   801  0092                     	;# 
   802  0093                     	;# 
   803  0093                     	;# 
   804  0093                     	;# 
   805  0094                     	;# 
   806  0095                     	;# 
   807  0096                     	;# 
   808  0097                     	;# 
   809  0098                     	;# 
   810  0099                     	;# 
   811  009A                     	;# 
   812  009B                     	;# 
   813  009C                     	;# 
   814  009D                     	;# 
   815  009E                     	;# 
   816  009F                     	;# 
   817  0105                     	;# 
   818  0107                     	;# 
   819  0108                     	;# 
   820  0109                     	;# 
   821  010C                     	;# 
   822  010C                     	;# 
   823  010D                     	;# 
   824  010E                     	;# 
   825  010F                     	;# 
   826  0185                     	;# 
   827  0187                     	;# 
   828  0188                     	;# 
   829  0189                     	;# 
   830  018C                     	;# 
   831  018D                     	;# 
   832                           
   833                           	psect	idataBANK1
   834  086E                     __pidataBANK1:	
   835                           
   836                           ;initializer for _CWTX_Nref
   837  086E  34A0               	retlw	160
   838  086F  3400               	retlw	0
   839                           
   840                           ;initializer for _FMRX_Nref
   841  0870  3400               	retlw	0
   842  0871  340A               	retlw	10
   843                           
   844                           ;initializer for _FMTX_Nref
   845  0872  3400               	retlw	0
   846  0873  340A               	retlw	10
   847                           
   848                           ;initializer for _CWTX_Nprg
   849  0874  3400               	retlw	0
   850  0875  3400               	retlw	0
   851  0876  3401               	retlw	1
   852  0877  3400               	retlw	0
   853  0878  3407               	retlw	7
   854  0879  3400               	retlw	0
   855  087A  3404               	retlw	4
   856  087B  3400               	retlw	0
   857  087C  3407               	retlw	7
   858  087D  3400               	retlw	0
   859                           
   860                           ;initializer for _FMTX_Nprg
   861  087E  3408               	retlw	8
   862  087F  3400               	retlw	0
   863  0880  3407               	retlw	7
   864  0881  3400               	retlw	0
   865  0882  3403               	retlw	3
   866  0883  3400               	retlw	0
   867  0884  3400               	retlw	0
   868  0885  3400               	retlw	0
   869  0886  3400               	retlw	0
   870  0887  3400               	retlw	0
   871                           
   872                           	psect	idataBANK2
   873  0855                     __pidataBANK2:	
   874                           
   875                           ;initializer for _eDataField
   876  0855  3448               	retlw	72
   877  0856  3465               	retlw	101
   878  0857  346C               	retlw	108
   879  0858  346C               	retlw	108
   880  0859  346F               	retlw	111
   881  085A  3421               	retlw	33
   882  085B  3420               	retlw	32
   883  085C  3449               	retlw	73
   884  085D  3427               	retlw	39
   885  085E  346D               	retlw	109
   886  085F  3420               	retlw	32
   887  0860  344F               	retlw	79
   888  0861  3472               	retlw	114
   889  0862  3469               	retlw	105
   890  0863  3467               	retlw	103
   891  0864  3461               	retlw	97
   892  0865  346D               	retlw	109
   893  0866  3469               	retlw	105
   894  0867  3453               	retlw	83
   895  0868  3461               	retlw	97
   896  0869  3474               	retlw	116
   897  086A  3431               	retlw	49
   898  086B  3421               	retlw	33
   899  086C  3421               	retlw	33
   900  086D  3400               	retlw	0
   901                           
   902                           	psect	idataBANK3
   903  08A5                     __pidataBANK3:	
   904                           
   905                           ;initializer for main@F2007
   906  08A5  3408               	retlw	8
   907  08A6  3400               	retlw	0
   908  08A7  3407               	retlw	7
   909  08A8  3400               	retlw	0
   910  08A9  3403               	retlw	3
   911  08AA  3400               	retlw	0
   912  08AB  3400               	retlw	0
   913  08AC  3400               	retlw	0
   914  08AD  3400               	retlw	0
   915  08AE  3400               	retlw	0
   916                           
   917                           ;initializer for main@F2009
   918  08AF  3400               	retlw	0
   919  08B0  3400               	retlw	0
   920  08B1  3401               	retlw	1
   921  08B2  3400               	retlw	0
   922  08B3  3407               	retlw	7
   923  08B4  3400               	retlw	0
   924  08B5  3404               	retlw	4
   925  08B6  3400               	retlw	0
   926  08B7  3407               	retlw	7
   927  08B8  3400               	retlw	0
   928                           
   929                           ;initializer for main@F2011
   930  08B9  3402               	retlw	2
   931  08BA  3400               	retlw	0
   932  08BB  3404               	retlw	4
   933  08BC  3400               	retlw	0
   934  08BD  3408               	retlw	8
   935  08BE  3400               	retlw	0
   936  08BF  3408               	retlw	8
   937  08C0  3400               	retlw	0
   938  08C1  3407               	retlw	7
   939  08C2  3400               	retlw	0
   940                           
   941                           ;initializer for _FMRX_Nprg
   942  08C3  3402               	retlw	2
   943  08C4  3400               	retlw	0
   944  08C5  3404               	retlw	4
   945  08C6  3400               	retlw	0
   946  08C7  3408               	retlw	8
   947  08C8  3400               	retlw	0
   948  08C9  3408               	retlw	8
   949  08CA  3400               	retlw	0
   950  08CB  3407               	retlw	7
   951  08CC  3400               	retlw	0
   952                           
   953                           	psect	strings
   954  0800                     __pstrings:	
   955  0800                     stringtab:	
   956  0800                     __stringtab:	
   957  0800                     stringcode:	
   958                           ;	String table - string pointers are 1 byte each
   959                           
   960  0800                     stringdir:	
   961  0800  3008               	movlw	high stringdir
   962  0801  008A               	movwf	10
   963  0802  0804               	movf	4,w
   964  0803  0A84               	incf	4,f
   965  0804  0782               	addwf	2,f
   966  0805                     __stringbase:	
   967  0805  3400               	retlw	0
   968  0806                     __end_of__stringtab:	
   969  0806                     _commandSize:	
   970  0806  3420               	retlw	32
   971  0807  3400               	retlw	0
   972  0808                     __end_of_commandSize:	
   973  000E                     _TMR1	set	14
   974  000B                     _INTCONbits	set	11
   975  000C                     _PIR1bits	set	12
   976  0005                     _PORTA	set	5
   977  0005                     _PORTAbits	set	5
   978  0006                     _PORTB	set	6
   979  0007                     _PORTC	set	7
   980  0007                     _PORTCbits	set	7
   981  0008                     _PORTD	set	8
   982  0008                     _PORTDbits	set	8
   983  0009                     _PORTE	set	9
   984  0009                     _PORTEbits	set	9
   985  001A                     _RCREG	set	26
   986  0013                     _SSPBUF	set	19
   987  0014                     _SSPCON	set	20
   988  0003                     _STATUS	set	3
   989  0010                     _T1CONbits	set	16
   990  0019                     _TXREG	set	25
   991  00C4                     _CREN	set	196
   992  00C2                     _FERR	set	194
   993  00C1                     _OERR	set	193
   994  0029                     _RA1	set	41
   995  0032                     _RB2	set	50
   996  0034                     _RB4	set	52
   997  0035                     _RB5	set	53
   998  003A                     _RC2	set	58
   999  0065                     _RCIF	set	101
  1000  00C6                     _RX9	set	198
  1001  00C7                     _SPEN	set	199
  1002  00C5                     _SREN	set	197
  1003  0064                     _TXIF	set	100
  1004  008C                     _PIE1bits	set	140
  1005  0099                     _SPBRG	set	153
  1006  0093                     _SSPADD	set	147
  1007  0091                     _SSPCON2	set	145
  1008  0094                     _SSPSTAT	set	148
  1009  0085                     _TRISA	set	133
  1010  0086                     _TRISB	set	134
  1011  0087                     _TRISC	set	135
  1012  0088                     _TRISD	set	136
  1013  0089                     _TRISE	set	137
  1014  048D                     _ACKDT	set	1165
  1015  048C                     _ACKEN	set	1164
  1016  04C2                     _BRGH	set	1218
  1017  048A                     _PEN	set	1162
  1018  048B                     _RCEN	set	1163
  1019  0465                     _RCIE	set	1125
  1020  0489                     _RSEN	set	1161
  1021  0488                     _SEN	set	1160
  1022  04C4                     _SYNC	set	1220
  1023  04C6                     _TX9	set	1222
  1024  04C5                     _TXEN	set	1221
  1025  0464                     _TXIE	set	1124
  1026  0188                     _ANSEL	set	392
  1027  0189                     _ANSELH	set	393
  1028  0808                     STR_15:	
  1029  0808  3473               	retlw	115	;'s'
  1030  0809  3474               	retlw	116	;'t'
  1031  080A  3461               	retlw	97	;'a'
  1032  080B  3472               	retlw	114	;'r'
  1033  080C  3474               	retlw	116	;'t'
  1034  080D  340D               	retlw	13
  1035  080E  340A               	retlw	10
  1036  080F  3400               	retlw	0
  1037  0810                     STR_7:	
  1038  0810  344A               	retlw	74	;'J'
  1039  0811  3451               	retlw	81	;'Q'
  1040  0812  3431               	retlw	49	;'1'
  1041  0813  345A               	retlw	90	;'Z'
  1042  0814  3448               	retlw	72	;'H'
  1043  0815  3458               	retlw	88	;'X'
  1044  0816  3400               	retlw	0
  1045  0817                     STR_1:	
  1046  0817  344A               	retlw	74	;'J'
  1047  0818  3451               	retlw	81	;'Q'
  1048  0819  3431               	retlw	49	;'1'
  1049  081A  3459               	retlw	89	;'Y'
  1050  081B  3443               	retlw	67	;'C'
  1051  081C  345A               	retlw	90	;'Z'
  1052  081D  3400               	retlw	0
  1053  081E                     STR_16:	
  1054  081E  3425               	retlw	37	;'%'
  1055  081F  3463               	retlw	99	;'c'
  1056  0820  3400               	retlw	0
  1057  0810                     
  1058                           ; #config settings
  1059  0000                     
  1060                           	psect	cinit
  1061  07B3                     start_initialization:	
  1062  07B3                     __initialization:	
  1063                           
  1064                           ; Initialize objects allocated to BANK3
  1065  07B3  1783               	bsf	3,7	;select IRP bank2
  1066  07B4  30EA               	movlw	low (__pdataBANK3+40)
  1067  07B5  00FD               	movwf	btemp+-1
  1068  07B6  3008               	movlw	high __pidataBANK3
  1069  07B7  00FE               	movwf	btemp
  1070  07B8  30A5               	movlw	low __pidataBANK3
  1071  07B9  00FF               	movwf	btemp+1
  1072  07BA  30C2               	movlw	low __pdataBANK3
  1073  07BB  0084               	movwf	4
  1074  07BC  160A  118A  27E1  120A  118A  	fcall	init_ram0
  1075                           
  1076                           ; Initialize objects allocated to BANK2
  1077  07C1  3059               	movlw	low (__pdataBANK2+25)
  1078  07C2  00FD               	movwf	btemp+-1
  1079  07C3  3008               	movlw	high __pidataBANK2
  1080  07C4  00FE               	movwf	btemp
  1081  07C5  3055               	movlw	low __pidataBANK2
  1082  07C6  00FF               	movwf	btemp+1
  1083  07C7  3040               	movlw	low __pdataBANK2
  1084  07C8  0084               	movwf	4
  1085  07C9  160A  118A  27E1  120A  118A  	fcall	init_ram0
  1086                           
  1087                           ; Initialize objects allocated to BANK1
  1088  07CE  1383               	bcf	3,7	;select IRP bank0
  1089  07CF  30DC               	movlw	low (__pdataBANK1+26)
  1090  07D0  00FD               	movwf	btemp+-1
  1091  07D1  3008               	movlw	high __pidataBANK1
  1092  07D2  00FE               	movwf	btemp
  1093  07D3  306E               	movlw	low __pidataBANK1
  1094  07D4  00FF               	movwf	btemp+1
  1095  07D5  30C2               	movlw	low __pdataBANK1
  1096  07D6  0084               	movwf	4
  1097  07D7  160A  118A  27E1  120A  118A  	fcall	init_ram0
  1098                           
  1099                           ; Clear objects allocated to BANK3
  1100  07DC  1783               	bsf	3,7	;select IRP bank2
  1101  07DD  3090               	movlw	low __pbssBANK3
  1102  07DE  0084               	movwf	4
  1103  07DF  30C2               	movlw	low (__pbssBANK3+50)
  1104  07E0  160A  118A  27CC  120A  118A  	fcall	clear_ram0
  1105                           
  1106                           ; Clear objects allocated to BANK2
  1107  07E5  3010               	movlw	low __pbssBANK2
  1108  07E6  0084               	movwf	4
  1109  07E7  3040               	movlw	low (__pbssBANK2+48)
  1110  07E8  160A  118A  27CC  120A  118A  	fcall	clear_ram0
  1111                           
  1112                           ; Clear objects allocated to BANK1
  1113  07ED  1383               	bcf	3,7	;select IRP bank0
  1114  07EE  30DC               	movlw	low __pbssBANK1
  1115  07EF  0084               	movwf	4
  1116  07F0  30E9               	movlw	low (__pbssBANK1+13)
  1117  07F1  160A  118A  27CC  120A  118A  	fcall	clear_ram0
  1118                           
  1119                           ; Clear objects allocated to BANK0
  1120  07F6  3066               	movlw	low __pbssBANK0
  1121  07F7  0084               	movwf	4
  1122  07F8  3070               	movlw	low (__pbssBANK0+10)
  1123  07F9  160A  118A  27CC   	fcall	clear_ram0
  1124  07FC                     end_of_initialization:	
  1125                           ;End of C runtime variable initialization code
  1126                           
  1127  07FC                     __end_of__initialization:	
  1128  07FC  0183               	clrf	3
  1129  07FD  120A  158A  2E0A   	ljmp	_main	;jump to C main() function
  1130                           
  1131                           	psect	bssBANK0
  1132  0066                     __pbssBANK0:	
  1133  0066                     _dPacketnum:	
  1134  0066                     	ds	2
  1135  0068                     _eflag:	
  1136  0068                     	ds	2
  1137  006A                     _rcv_state:	
  1138  006A                     	ds	2
  1139  006C                     _dfcshi:	
  1140  006C                     	ds	1
  1141  006D                     _dfcslo:	
  1142  006D                     	ds	1
  1143  006E                     _efcshi:	
  1144  006E                     	ds	1
  1145  006F                     _efcslo:	
  1146  006F                     	ds	1
  1147                           
  1148                           	psect	bssBANK1
  1149  00DC                     __pbssBANK1:	
  1150  00DC                     _ePacket:	
  1151  00DC                     	ds	5
  1152  00E1                     _ebitstatus:	
  1153  00E1                     	ds	2
  1154  00E3                     _efcsflag:	
  1155  00E3                     	ds	2
  1156  00E5                     _estuff:	
  1157  00E5                     	ds	2
  1158  00E7                     getbit@oldbit:	
  1159  00E7                     	ds	2
  1160                           
  1161                           	psect	dataBANK1
  1162  00C2                     __pdataBANK1:	
  1163  00C2                     _CWTX_Nref:	
  1164  00C2                     	ds	2
  1165  00C4                     _FMRX_Nref:	
  1166  00C4                     	ds	2
  1167  00C6                     _FMTX_Nref:	
  1168  00C6                     	ds	2
  1169  00C8                     _CWTX_Nprg:	
  1170  00C8                     	ds	10
  1171  00D2                     _FMTX_Nprg:	
  1172  00D2                     	ds	10
  1173                           
  1174                           	psect	bssBANK3
  1175  0190                     __pbssBANK3:	
  1176  0190                     _dPacket:	
  1177  0190                     	ds	50
  1178                           
  1179                           	psect	dataBANK3
  1180  01C2                     __pdataBANK3:	
  1181  01C2                     main@F2007:	
  1182  01C2                     	ds	10
  1183  01CC                     main@F2009:	
  1184  01CC                     	ds	10
  1185  01D6                     main@F2011:	
  1186  01D6                     	ds	10
  1187  01E0                     _FMRX_Nprg:	
  1188  01E0                     	ds	10
  1189                           
  1190                           	psect	bssBANK2
  1191  0110                     __pbssBANK2:	
  1192  0110                     _EEPROMData:	
  1193  0110                     	ds	32
  1194  0130                     _dData:	
  1195  0130                     	ds	16
  1196                           
  1197                           	psect	dataBANK2
  1198  0140                     __pdataBANK2:	
  1199  0140                     _eDataField:	
  1200  0140                     	ds	25
  1201                           
  1202                           	psect	inittext
  1203  17DD                     init_fetch0:	
  1204                           ;	Called with low address in FSR and high address in W
  1205                           
  1206  17DD  087E               	movf	126,w
  1207  17DE  008A               	movwf	10
  1208  17DF  087F               	movf	127,w
  1209  17E0  0082               	movwf	2
  1210  17E1                     init_ram0:	
  1211                           ;Called with:
  1212                           ;	high address of idata address in btemp 
  1213                           ;	low address of idata address in btemp+1 
  1214                           ;	low address of data in FSR
  1215                           ;	high address + 1 of data in btemp-1
  1216                           
  1217  17E1  27DD  160A  118A   	fcall	init_fetch0
  1218  17E4  0080               	movwf	0
  1219  17E5  0A84               	incf	4,f
  1220  17E6  0804               	movf	4,w
  1221  17E7  067D               	xorwf	125,w
  1222  17E8  1903               	btfsc	3,2
  1223  17E9  3400               	retlw	0
  1224  17EA  0AFF               	incf	127,f
  1225  17EB  1903               	btfsc	3,2
  1226  17EC  0AFE               	incf	126,f
  1227  17ED  2FE1               	goto	init_ram0
  1228                           
  1229                           	psect	clrtext
  1230  17CC                     clear_ram0:	
  1231                           ;	Called with FSR containing the base address, and
  1232                           ;	W with the last address+1
  1233                           
  1234  17CC  0064               	clrwdt	;clear the watchdog before getting into this loop
  1235  17CD                     clrloop0:	
  1236  17CD  0180               	clrf	0	;clear RAM location pointed to by FSR
  1237  17CE  0A84               	incf	4,f	;increment pointer
  1238  17CF  0604               	xorwf	4,w	;XOR with final address
  1239  17D0  1903               	btfsc	3,2	;have we reached the end yet?
  1240  17D1  3400               	retlw	0	;all done for this memory range, return
  1241  17D2  0604               	xorwf	4,w	;XOR again to restore value
  1242  17D3  2FCD               	goto	clrloop0	;do the next byte
  1243                           
  1244                           	psect	cstackBANK1
  1245  00A0                     __pcstackBANK1:	
  1246  00A0                     main@FMTX_Nprg:	
  1247                           
  1248                           ; 10 bytes @ 0x0
  1249  00A0                     	ds	10
  1250  00AA                     main@CWTX_Nprg:	
  1251                           
  1252                           ; 10 bytes @ 0xA
  1253  00AA                     	ds	10
  1254  00B4                     main@FMRX_Nprg:	
  1255                           
  1256                           ; 10 bytes @ 0x14
  1257  00B4                     	ds	10
  1258  00BE                     main@NM_wad_header:	
  1259                           
  1260                           ; 1 bytes @ 0x1E
  1261  00BE                     	ds	1
  1262  00BF                     main@i:	
  1263                           
  1264                           ; 2 bytes @ 0x1F
  1265  00BF                     	ds	2
  1266  00C1                     main@dData:	
  1267                           
  1268                           ; 1 bytes @ 0x21
  1269  00C1                     	ds	1
  1270                           
  1271                           	psect	cstackCOMMON
  1272  0070                     __pcstackCOMMON:	
  1273  0070                     ?_Reset_EPS:	
  1274  0070                     ??_Reset_EPS:	
  1275                           ; 1 bytes @ 0x0
  1276                           
  1277  0070                     ?__NOP:	
  1278                           ; 1 bytes @ 0x0
  1279                           
  1280  0070                     ??__NOP:	
  1281                           ; 1 bytes @ 0x0
  1282                           
  1283  0070                     ?_Init_SERIAL:	
  1284                           ; 1 bytes @ 0x0
  1285                           
  1286  0070                     ??_Init_SERIAL:	
  1287                           ; 1 bytes @ 0x0
  1288                           
  1289  0070                     ?_putch:	
  1290                           ; 1 bytes @ 0x0
  1291                           
  1292  0070                     ??_putch:	
  1293                           ; 1 bytes @ 0x0
  1294                           
  1295  0070                     ?_Init_MPU:	
  1296                           ; 1 bytes @ 0x0
  1297                           
  1298  0070                     ??_Init_MPU:	
  1299                           ; 1 bytes @ 0x0
  1300                           
  1301  0070                     ?_waitFlag:	
  1302                           ; 1 bytes @ 0x0
  1303                           
  1304  0070                     ?_getdata:	
  1305                           ; 1 bytes @ 0x0
  1306                           
  1307  0070                     ?_ReceivePacket_data:	
  1308                           ; 1 bytes @ 0x0
  1309                           
  1310  0070                     ?_main:	
  1311                           ; 1 bytes @ 0x0
  1312                           
  1313  0070                     ?_I2C_Master_Wait:	
  1314                           ; 1 bytes @ 0x0
  1315                           
  1316  0070                     ??_I2C_Master_Wait:	
  1317                           ; 1 bytes @ 0x0
  1318                           
  1319  0070                     ?_I2C_Master_Start:	
  1320                           ; 1 bytes @ 0x0
  1321                           
  1322  0070                     ??_I2C_Master_Start:	
  1323                           ; 1 bytes @ 0x0
  1324                           
  1325  0070                     ?_I2C_Master_Stop:	
  1326                           ; 1 bytes @ 0x0
  1327                           
  1328  0070                     ??_I2C_Master_Stop:	
  1329                           ; 1 bytes @ 0x0
  1330                           
  1331  0070                     ?_I2C_Master_Write:	
  1332                           ; 1 bytes @ 0x0
  1333                           
  1334  0070                     ?_getbit:	
  1335                           ; 1 bytes @ 0x0
  1336                           
  1337  0070                     ?_fcscheck:	
  1338                           ; 2 bytes @ 0x0
  1339                           
  1340  0070                     ?___awdiv:	
  1341                           ; 2 bytes @ 0x0
  1342                           
  1343  0070                     ?___lldiv:	
  1344                           ; 2 bytes @ 0x0
  1345                           
  1346  0070                     putch@byte:	
  1347                           ; 4 bytes @ 0x0
  1348                           
  1349  0070                     I2C_Master_Write@d:	
  1350                           ; 1 bytes @ 0x0
  1351                           
  1352  0070                     __NOP@i:	
  1353                           ; 2 bytes @ 0x0
  1354                           
  1355  0070                     ___awdiv@divisor:	
  1356                           ; 2 bytes @ 0x0
  1357                           
  1358  0070                     ___lldiv@divisor:	
  1359                           ; 2 bytes @ 0x0
  1360                           
  1361                           
  1362                           ; 4 bytes @ 0x0
  1363  0070                     	ds	1
  1364  0071                     ?_NM_waddress:	
  1365  0071                     ?_printf:	
  1366                           ; 1 bytes @ 0x1
  1367                           
  1368  0071                     NM_waddress@whigh_address:	
  1369                           ; 2 bytes @ 0x1
  1370                           
  1371                           
  1372                           ; 1 bytes @ 0x1
  1373  0071                     	ds	1
  1374  0072                     ?_EEPROM_Write:	
  1375  0072                     ??_getbit:	
  1376                           ; 1 bytes @ 0x2
  1377                           
  1378  0072                     ??_fcscheck:	
  1379                           ; 1 bytes @ 0x2
  1380                           
  1381  0072                     ??_I2C_Master_Write:	
  1382                           ; 1 bytes @ 0x2
  1383                           
  1384  0072                     ?_L_OUT:	
  1385                           ; 1 bytes @ 0x2
  1386                           
  1387  0072                     ?_H_OUT:	
  1388                           ; 1 bytes @ 0x2
  1389                           
  1390  0072                     ?_STBOUT:	
  1391                           ; 1 bytes @ 0x2
  1392                           
  1393  0072                     NM_waddress@wlow_address:	
  1394                           ; 1 bytes @ 0x2
  1395                           
  1396  0072                     EEPROM_Write@high_address:	
  1397                           ; 1 bytes @ 0x2
  1398                           
  1399  0072                     L_OUT@fmcwtxrx:	
  1400                           ; 1 bytes @ 0x2
  1401                           
  1402  0072                     H_OUT@fmcwtxrx:	
  1403                           ; 2 bytes @ 0x2
  1404                           
  1405  0072                     STBOUT@fmcwtxrx:	
  1406                           ; 2 bytes @ 0x2
  1407                           
  1408  0072                     ___awdiv@dividend:	
  1409                           ; 2 bytes @ 0x2
  1410                           
  1411                           
  1412                           ; 2 bytes @ 0x2
  1413  0072                     	ds	1
  1414  0073                     ??_printf:	
  1415  0073                     ??_NM_waddress:	
  1416                           ; 1 bytes @ 0x3
  1417                           
  1418  0073                     NM_waddress@NM_wad_header:	
  1419                           ; 1 bytes @ 0x3
  1420                           
  1421  0073                     EEPROM_Write@low_address:	
  1422                           ; 1 bytes @ 0x3
  1423                           
  1424                           
  1425                           ; 1 bytes @ 0x3
  1426  0073                     	ds	1
  1427  0074                     ??_L_OUT:	
  1428  0074                     ??_H_OUT:	
  1429                           ; 1 bytes @ 0x4
  1430                           
  1431  0074                     ??_STBOUT:	
  1432                           ; 1 bytes @ 0x4
  1433                           
  1434  0074                     ?_OPINIT:	
  1435                           ; 1 bytes @ 0x4
  1436                           
  1437  0074                     ??___awdiv:	
  1438                           ; 1 bytes @ 0x4
  1439                           
  1440  0074                     fcscheck@bt:	
  1441                           ; 1 bytes @ 0x4
  1442                           
  1443  0074                     EEPROM_Write@data:	
  1444                           ; 1 bytes @ 0x4
  1445                           
  1446  0074                     printf@flag:	
  1447                           ; 1 bytes @ 0x4
  1448                           
  1449  0074                     getbit@i:	
  1450                           ; 1 bytes @ 0x4
  1451                           
  1452  0074                     OPINIT@fmcwtxrx:	
  1453                           ; 2 bytes @ 0x4
  1454                           
  1455  0074                     ___lldiv@dividend:	
  1456                           ; 2 bytes @ 0x4
  1457                           
  1458                           
  1459                           ; 4 bytes @ 0x4
  1460  0074                     	ds	1
  1461  0075                     ??_EEPROM_Write:	
  1462  0075                     printf@ap:	
  1463                           ; 1 bytes @ 0x5
  1464                           
  1465  0075                     ___awdiv@counter:	
  1466                           ; 1 bytes @ 0x5
  1467                           
  1468  0075                     fcscheck@i:	
  1469                           ; 1 bytes @ 0x5
  1470                           
  1471                           
  1472                           ; 2 bytes @ 0x5
  1473  0075                     	ds	1
  1474  0076                     ??_waitFlag:	
  1475  0076                     ??_getdata:	
  1476                           ; 1 bytes @ 0x6
  1477                           
  1478  0076                     ??_OPINIT:	
  1479                           ; 1 bytes @ 0x6
  1480                           
  1481  0076                     printf@f:	
  1482                           ; 1 bytes @ 0x6
  1483                           
  1484  0076                     ___awdiv@sign:	
  1485                           ; 1 bytes @ 0x6
  1486                           
  1487                           
  1488                           ; 1 bytes @ 0x6
  1489  0076                     	ds	1
  1490  0077                     printf@c:	
  1491  0077                     fcscheck@i_142:	
  1492                           ; 1 bytes @ 0x7
  1493                           
  1494  0077                     ___awdiv@quotient:	
  1495                           ; 2 bytes @ 0x7
  1496                           
  1497                           
  1498                           ; 2 bytes @ 0x7
  1499  0077                     	ds	1
  1500  0078                     ??___lldiv:	
  1501  0078                     EEPROM_Write@EEPROM_address:	
  1502                           ; 1 bytes @ 0x8
  1503                           
  1504                           
  1505                           ; 1 bytes @ 0x8
  1506  0078                     	ds	1
  1507  0079                     ?_OUTFQ:	
  1508  0079                     ?_RFDOUT:	
  1509                           ; 1 bytes @ 0x9
  1510                           
  1511  0079                     fcscheck@byte:	
  1512                           ; 1 bytes @ 0x9
  1513                           
  1514  0079                     EEPROM_Write@Address:	
  1515                           ; 1 bytes @ 0x9
  1516                           
  1517  0079                     OUTFQ@fmcwtxrx:	
  1518                           ; 1 bytes @ 0x9
  1519                           
  1520  0079                     RFDOUT@fmcwtxrx:	
  1521                           ; 2 bytes @ 0x9
  1522                           
  1523  0079                     ___lldiv@quotient:	
  1524                           ; 2 bytes @ 0x9
  1525                           
  1526                           
  1527                           ; 4 bytes @ 0x9
  1528  0079                     	ds	1
  1529  007A                     ??_ReceivePacket_data:	
  1530                           
  1531                           ; 1 bytes @ 0xA
  1532  007A                     	ds	1
  1533  007B                     OUTFQ@Nprg:	
  1534  007B                     RFDOUT@Nref:	
  1535                           ; 2 bytes @ 0xB
  1536                           
  1537                           
  1538                           ; 2 bytes @ 0xB
  1539  007B                     	ds	2
  1540  007D                     ??_FMTX:	
  1541  007D                     ??_CWTX:	
  1542                           ; 1 bytes @ 0xD
  1543                           
  1544  007D                     ??_FMRX:	
  1545                           ; 1 bytes @ 0xD
  1546                           
  1547  007D                     ___lldiv@counter:	
  1548                           ; 1 bytes @ 0xD
  1549                           
  1550                           
  1551                           ; 1 bytes @ 0xD
  1552  007D                     	ds	1
  1553                           
  1554                           	psect	cstackBANK0
  1555  0020                     __pcstackBANK0:	
  1556  0020                     ?_Init_I2C_M:	
  1557  0020                     ??_OUTFQ:	
  1558                           ; 1 bytes @ 0x0
  1559                           
  1560  0020                     ??_RFDOUT:	
  1561                           ; 1 bytes @ 0x0
  1562                           
  1563  0020                     waitFlag@i:	
  1564                           ; 1 bytes @ 0x0
  1565                           
  1566  0020                     getdata@bufstore_counter:	
  1567                           ; 2 bytes @ 0x0
  1568                           
  1569  0020                     Init_I2C_M@c:	
  1570                           ; 2 bytes @ 0x0
  1571                           
  1572                           
  1573                           ; 4 bytes @ 0x0
  1574  0020                     	ds	2
  1575  0022                     waitFlag@j:	
  1576  0022                     getdata@dstuff:	
  1577                           ; 2 bytes @ 0x2
  1578                           
  1579                           
  1580                           ; 2 bytes @ 0x2
  1581  0022                     	ds	1
  1582  0023                     RFDOUT@Nref_b:	
  1583                           
  1584                           ; 24 bytes @ 0x3
  1585  0023                     	ds	1
  1586  0024                     ??_Init_I2C_M:	
  1587  0024                     waitFlag@j_111:	
  1588                           ; 1 bytes @ 0x4
  1589                           
  1590  0024                     getdata@dbitstatus:	
  1591                           ; 2 bytes @ 0x4
  1592                           
  1593                           
  1594                           ; 2 bytes @ 0x4
  1595  0024                     	ds	2
  1596  0026                     getdata@buf:	
  1597  0026                     waitFlag@j_113:	
  1598                           ; 1 bytes @ 0x6
  1599                           
  1600                           
  1601                           ; 2 bytes @ 0x6
  1602  0026                     	ds	2
  1603  0028                     waitFlag@j_115:	
  1604                           
  1605                           ; 2 bytes @ 0x8
  1606  0028                     	ds	2
  1607  002A                     waitFlag@j_117:	
  1608                           
  1609                           ; 2 bytes @ 0xA
  1610  002A                     	ds	2
  1611  002C                     waitFlag@j_119:	
  1612                           
  1613                           ; 2 bytes @ 0xC
  1614  002C                     	ds	2
  1615  002E                     waitFlag@j_120:	
  1616                           
  1617                           ; 2 bytes @ 0xE
  1618  002E                     	ds	2
  1619  0030                     waitFlag@j_122:	
  1620  0030                     OUTFQ@Nprg_b:	
  1621                           ; 2 bytes @ 0x10
  1622                           
  1623                           
  1624                           ; 34 bytes @ 0x10
  1625  0030                     	ds	2
  1626  0032                     waitFlag@j_124:	
  1627                           
  1628                           ; 2 bytes @ 0x12
  1629  0032                     	ds	2
  1630  0034                     waitFlag@j_126:	
  1631                           
  1632                           ; 2 bytes @ 0x14
  1633  0034                     	ds	2
  1634  0036                     waitFlag@j_128:	
  1635                           
  1636                           ; 2 bytes @ 0x16
  1637  0036                     	ds	2
  1638  0038                     waitFlag@j_130:	
  1639                           
  1640                           ; 2 bytes @ 0x18
  1641  0038                     	ds	2
  1642  003A                     waitFlag@flag_judge:	
  1643                           
  1644                           ; 2 bytes @ 0x1A
  1645  003A                     	ds	1
  1646  003B                     RFDOUT@i_473:	
  1647                           
  1648                           ; 2 bytes @ 0x1B
  1649  003B                     	ds	1
  1650  003C                     waitFlag@buf:	
  1651                           
  1652                           ; 1 bytes @ 0x1C
  1653  003C                     	ds	1
  1654  003D                     ReceivePacket_data@fcschecker:	
  1655  003D                     RFDOUT@i:	
  1656                           ; 2 bytes @ 0x1D
  1657                           
  1658                           
  1659                           ; 2 bytes @ 0x1D
  1660  003D                     	ds	2
  1661  003F                     ReceivePacket_data@i:	
  1662  003F                     RFDOUT@i_474:	
  1663                           ; 2 bytes @ 0x1F
  1664                           
  1665                           
  1666                           ; 2 bytes @ 0x1F
  1667  003F                     	ds	19
  1668  0052                     OUTFQ@i_462:	
  1669                           
  1670                           ; 2 bytes @ 0x32
  1671  0052                     	ds	2
  1672  0054                     OUTFQ@count:	
  1673                           
  1674                           ; 2 bytes @ 0x34
  1675  0054                     	ds	2
  1676  0056                     OUTFQ@i:	
  1677                           
  1678                           ; 2 bytes @ 0x36
  1679  0056                     	ds	2
  1680  0058                     OUTFQ@i_464:	
  1681                           
  1682                           ; 2 bytes @ 0x38
  1683  0058                     	ds	2
  1684  005A                     OUTFQ@j:	
  1685                           
  1686                           ; 2 bytes @ 0x3A
  1687  005A                     	ds	2
  1688  005C                     ?_FMTX:	
  1689  005C                     ?_CWTX:	
  1690                           ; 1 bytes @ 0x3C
  1691                           
  1692  005C                     ?_FMRX:	
  1693                           ; 1 bytes @ 0x3C
  1694                           
  1695  005C                     FMTX@Nref:	
  1696                           ; 1 bytes @ 0x3C
  1697                           
  1698  005C                     CWTX@Nref:	
  1699                           ; 2 bytes @ 0x3C
  1700                           
  1701  005C                     FMRX@Nref:	
  1702                           ; 2 bytes @ 0x3C
  1703                           
  1704                           
  1705                           ; 2 bytes @ 0x3C
  1706  005C                     	ds	2
  1707  005E                     FMTX@Nprg:	
  1708  005E                     CWTX@Nprg:	
  1709                           ; 2 bytes @ 0x3E
  1710                           
  1711  005E                     FMRX@Nprg:	
  1712                           ; 2 bytes @ 0x3E
  1713                           
  1714                           
  1715                           ; 2 bytes @ 0x3E
  1716  005E                     	ds	2
  1717  0060                     FMTX@fmtx:	
  1718  0060                     CWTX@cwtx:	
  1719                           ; 2 bytes @ 0x40
  1720                           
  1721  0060                     FMRX@fmrx:	
  1722                           ; 2 bytes @ 0x40
  1723                           
  1724                           
  1725                           ; 2 bytes @ 0x40
  1726  0060                     	ds	2
  1727  0062                     ??_main:	
  1728                           
  1729                           ; 1 bytes @ 0x42
  1730  0062                     	ds	4
  1731                           
  1732                           	psect	maintext
  1733  0E0A                     __pmaintext:	
  1734 ;;
  1735 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1736 ;;
  1737 ;; *************** function _main *****************
  1738 ;; Defined at:
  1739 ;;		line 38 in file "main.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;		None
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;  FMRX_Nprg      10   20[BANK1 ] int [5]
  1744 ;;  CWTX_Nprg      10   10[BANK1 ] int [5]
  1745 ;;  FMTX_Nprg      10    0[BANK1 ] int [5]
  1746 ;;  NM_wad_heade    1   30[BANK1 ] unsigned char 
  1747 ;;  i               2   31[BANK1 ] unsigned int 
  1748 ;;  dData           1   33[BANK1 ] PTR unsigned char 
  1749 ;;		 -> NULL(0), dData(16), 
  1750 ;; Return value:  Size  Location     Type
  1751 ;;                  1    wreg      void 
  1752 ;; Registers used:
  1753 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1754 ;; Tracked objects:
  1755 ;;		On entry : B00/0
  1756 ;;		On exit  : 0/0
  1757 ;;		Unchanged: 0/0
  1758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1759 ;;      Params:         0       0       0       0       0
  1760 ;;      Locals:         0       0      34       0       0
  1761 ;;      Temps:          0       4       0       0       0
  1762 ;;      Totals:         0       4      34       0       0
  1763 ;;Total ram usage:       38 bytes
  1764 ;; Hardware stack levels required when called:    4
  1765 ;; This function calls:
  1766 ;;		_CWTX
  1767 ;;		_EEPROM_Write
  1768 ;;		_FMRX
  1769 ;;		_FMTX
  1770 ;;		_Init_I2C_M
  1771 ;;		_Init_MPU
  1772 ;;		_Init_SERIAL
  1773 ;;		_NM_waddress
  1774 ;;		_ReceivePacket_data
  1775 ;;		_Reset_EPS
  1776 ;;		_printf
  1777 ;; This function is called by:
  1778 ;;		Startup code after reset
  1779 ;; This function uses a non-reentrant model
  1780 ;;
  1781                           
  1782                           
  1783                           ;psect for function _main
  1784  0E0A                     _main:	
  1785                           
  1786                           ;main.c: 43: _delay((unsigned long)((3000)*(10000000/4000.0)));
  1787                           
  1788                           ;incstack = 0
  1789                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1790  0E0A  3027               	movlw	39
  1791  0E0B  1283               	bcf	3,5	;RP0=0, select bank0
  1792  0E0C  1303               	bcf	3,6	;RP1=0, select bank0
  1793  0E0D  00E4               	movwf	??_main+2
  1794  0E0E  300D               	movlw	13
  1795  0E0F  00E3               	movwf	??_main+1
  1796  0E10  304B               	movlw	75
  1797  0E11  00E2               	movwf	??_main
  1798  0E12                     u3627:	
  1799  0E12  0BE2               	decfsz	??_main,f
  1800  0E13  2E12               	goto	u3627
  1801  0E14  0BE3               	decfsz	??_main+1,f
  1802  0E15  2E12               	goto	u3627
  1803  0E16  0BE4               	decfsz	??_main+2,f
  1804  0E17  2E12               	goto	u3627
  1805  0E18  0000               	nop
  1806                           
  1807                           ;main.c: 45: Init_SERIAL();
  1808  0E19  120A  158A  203C  120A  158A  	fcall	_Init_SERIAL
  1809                           
  1810                           ;main.c: 46: Init_MPU();
  1811  0E1E  120A  158A  2088  120A  158A  	fcall	_Init_MPU
  1812                           
  1813                           ;main.c: 47: Init_I2C_M(400000);
  1814  0E23  3000               	movlw	0
  1815  0E24  1283               	bcf	3,5	;RP0=0, select bank0
  1816  0E25  1303               	bcf	3,6	;RP1=0, select bank0
  1817  0E26  00A3               	movwf	Init_I2C_M@c+3
  1818  0E27  3006               	movlw	6
  1819  0E28  00A2               	movwf	Init_I2C_M@c+2
  1820  0E29  301A               	movlw	26
  1821  0E2A  00A1               	movwf	Init_I2C_M@c+1
  1822  0E2B  3080               	movlw	128
  1823  0E2C  00A0               	movwf	Init_I2C_M@c
  1824  0E2D  120A  158A  217F  120A  158A  	fcall	_Init_I2C_M
  1825                           
  1826                           ;main.c: 54: RB2 = 1;
  1827  0E32  1283               	bcf	3,5	;RP0=0, select bank0
  1828  0E33  1303               	bcf	3,6	;RP1=0, select bank0
  1829  0E34  1506               	bsf	6,2	;volatile
  1830                           
  1831                           ;main.c: 55: _delay((unsigned long)((500)*(10000000/4000.0)));
  1832  0E35  3007               	movlw	7
  1833  0E36  00E4               	movwf	??_main+2
  1834  0E37  3058               	movlw	88
  1835  0E38  00E3               	movwf	??_main+1
  1836  0E39  305E               	movlw	94
  1837  0E3A  00E2               	movwf	??_main
  1838  0E3B                     u3637:	
  1839  0E3B  0BE2               	decfsz	??_main,f
  1840  0E3C  2E3B               	goto	u3637
  1841  0E3D  0BE3               	decfsz	??_main+1,f
  1842  0E3E  2E3B               	goto	u3637
  1843  0E3F  0BE4               	decfsz	??_main+2,f
  1844  0E40  2E3B               	goto	u3637
  1845  0E41  2E42               	nop2
  1846                           
  1847                           ;main.c: 57: FMTX(FMTX_Nref, FMTX_Nprg);
  1848  0E42  1683               	bsf	3,5	;RP0=1, select bank1
  1849  0E43  1303               	bcf	3,6	;RP1=0, select bank1
  1850  0E44  0847               	movf	(_FMTX_Nref+1)^(0+128),w
  1851  0E45  1283               	bcf	3,5	;RP0=0, select bank0
  1852  0E46  1303               	bcf	3,6	;RP1=0, select bank0
  1853  0E47  00DD               	movwf	FMTX@Nref+1
  1854  0E48  1683               	bsf	3,5	;RP0=1, select bank1
  1855  0E49  1303               	bcf	3,6	;RP1=0, select bank1
  1856  0E4A  0846               	movf	_FMTX_Nref^(0+128),w
  1857  0E4B  1283               	bcf	3,5	;RP0=0, select bank0
  1858  0E4C  1303               	bcf	3,6	;RP1=0, select bank0
  1859  0E4D  00DC               	movwf	FMTX@Nref
  1860  0E4E  30D2               	movlw	(low (_FMTX_Nprg| 0))& (0+255)
  1861  0E4F  00DE               	movwf	FMTX@Nprg
  1862  0E50  3000               	movlw	0
  1863  0E51  00DF               	movwf	FMTX@Nprg+1
  1864  0E52  120A  158A  2125  120A  158A  	fcall	_FMTX
  1865                           
  1866                           ;main.c: 58: CWTX(CWTX_Nref, CWTX_Nprg);
  1867  0E57  1683               	bsf	3,5	;RP0=1, select bank1
  1868  0E58  1303               	bcf	3,6	;RP1=0, select bank1
  1869  0E59  0843               	movf	(_CWTX_Nref+1)^(0+128),w
  1870  0E5A  1283               	bcf	3,5	;RP0=0, select bank0
  1871  0E5B  1303               	bcf	3,6	;RP1=0, select bank0
  1872  0E5C  00DD               	movwf	CWTX@Nref+1
  1873  0E5D  1683               	bsf	3,5	;RP0=1, select bank1
  1874  0E5E  1303               	bcf	3,6	;RP1=0, select bank1
  1875  0E5F  0842               	movf	_CWTX_Nref^(0+128),w
  1876  0E60  1283               	bcf	3,5	;RP0=0, select bank0
  1877  0E61  1303               	bcf	3,6	;RP1=0, select bank0
  1878  0E62  00DC               	movwf	CWTX@Nref
  1879  0E63  30C8               	movlw	(low (_CWTX_Nprg| 0))& (0+255)
  1880  0E64  00DE               	movwf	CWTX@Nprg
  1881  0E65  3000               	movlw	0
  1882  0E66  00DF               	movwf	CWTX@Nprg+1
  1883  0E67  120A  158A  20CD  120A  158A  	fcall	_CWTX
  1884                           
  1885                           ;main.c: 59: FMRX(FMRX_Nref, FMRX_Nprg);
  1886  0E6C  1683               	bsf	3,5	;RP0=1, select bank1
  1887  0E6D  1303               	bcf	3,6	;RP1=0, select bank1
  1888  0E6E  0845               	movf	(_FMRX_Nref+1)^(0+128),w
  1889  0E6F  1283               	bcf	3,5	;RP0=0, select bank0
  1890  0E70  1303               	bcf	3,6	;RP1=0, select bank0
  1891  0E71  00DD               	movwf	FMRX@Nref+1
  1892  0E72  1683               	bsf	3,5	;RP0=1, select bank1
  1893  0E73  1303               	bcf	3,6	;RP1=0, select bank1
  1894  0E74  0844               	movf	_FMRX_Nref^(0+128),w
  1895  0E75  1283               	bcf	3,5	;RP0=0, select bank0
  1896  0E76  1303               	bcf	3,6	;RP1=0, select bank0
  1897  0E77  00DC               	movwf	FMRX@Nref
  1898  0E78  30E0               	movlw	(low (_FMRX_Nprg| (0+256)))& (0+255)
  1899  0E79  00DE               	movwf	FMRX@Nprg
  1900  0E7A  3001               	movlw	1
  1901  0E7B  00DF               	movwf	FMRX@Nprg+1
  1902  0E7C  120A  158A  20F9  120A  158A  	fcall	_FMRX
  1903                           
  1904                           ;main.c: 60: RB2 = 0;
  1905  0E81  1283               	bcf	3,5	;RP0=0, select bank0
  1906  0E82  1303               	bcf	3,6	;RP1=0, select bank0
  1907  0E83  1106               	bcf	6,2	;volatile
  1908                           
  1909                           ;main.c: 61: printf("start\r\n");
  1910  0E84  3003               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1911  0E85  120A  158A  223F  120A  158A  	fcall	_printf
  1912  0E8A                     l3803:	
  1913                           ;main.c: 63: while(1){
  1914                           
  1915                           
  1916                           ;main.c: 78: UBYTE *dData;
  1917                           ;main.c: 79: dData = ReceivePacket_data();
  1918  0E8A  120A  158A  2447  120A  158A  	fcall	_ReceivePacket_data
  1919  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  1920  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  1921  0E91  00E2               	movwf	??_main
  1922  0E92  0862               	movf	??_main,w
  1923  0E93  1683               	bsf	3,5	;RP0=1, select bank1
  1924  0E94  1303               	bcf	3,6	;RP1=0, select bank1
  1925  0E95  00C1               	movwf	main@dData^(0+128)
  1926                           
  1927                           ;main.c: 80: RB2 = 1;
  1928  0E96  1283               	bcf	3,5	;RP0=0, select bank0
  1929  0E97  1303               	bcf	3,6	;RP1=0, select bank0
  1930  0E98  1506               	bsf	6,2	;volatile
  1931                           
  1932                           ;main.c: 81: _delay((unsigned long)((500)*(10000000/4000.0)));
  1933  0E99  3007               	movlw	7
  1934  0E9A  00E4               	movwf	??_main+2
  1935  0E9B  3058               	movlw	88
  1936  0E9C  00E3               	movwf	??_main+1
  1937  0E9D  305E               	movlw	94
  1938  0E9E  00E2               	movwf	??_main
  1939  0E9F                     u3647:	
  1940  0E9F  0BE2               	decfsz	??_main,f
  1941  0EA0  2E9F               	goto	u3647
  1942  0EA1  0BE3               	decfsz	??_main+1,f
  1943  0EA2  2E9F               	goto	u3647
  1944  0EA3  0BE4               	decfsz	??_main+2,f
  1945  0EA4  2E9F               	goto	u3647
  1946  0EA5  2EA6               	nop2
  1947                           
  1948                           ;main.c: 82: RB2 = 0;
  1949  0EA6  1283               	bcf	3,5	;RP0=0, select bank0
  1950  0EA7  1303               	bcf	3,6	;RP1=0, select bank0
  1951  0EA8  1106               	bcf	6,2	;volatile
  1952                           
  1953                           ;main.c: 84: EEPROM_Write(0x50,0x00,0x00,dData);
  1954  0EA9  01F2               	clrf	EEPROM_Write@high_address
  1955  0EAA  01F3               	clrf	EEPROM_Write@low_address
  1956  0EAB  1683               	bsf	3,5	;RP0=1, select bank1
  1957  0EAC  1303               	bcf	3,6	;RP1=0, select bank1
  1958  0EAD  0841               	movf	main@dData^(0+128),w
  1959  0EAE  1283               	bcf	3,5	;RP0=0, select bank0
  1960  0EAF  1303               	bcf	3,6	;RP1=0, select bank0
  1961  0EB0  00E2               	movwf	??_main
  1962  0EB1  0862               	movf	??_main,w
  1963  0EB2  00F4               	movwf	EEPROM_Write@data
  1964  0EB3  3050               	movlw	80
  1965  0EB4  120A  158A  232B  120A  158A  	fcall	_EEPROM_Write
  1966                           
  1967                           ;main.c: 86: for (UINT i = 0;i < 32;i++){
  1968  0EB9  1683               	bsf	3,5	;RP0=1, select bank1
  1969  0EBA  1303               	bcf	3,6	;RP1=0, select bank1
  1970  0EBB  01BF               	clrf	main@i^(0+128)
  1971  0EBC  01C0               	clrf	(main@i+1)^(0+128)
  1972  0EBD  3000               	movlw	0
  1973  0EBE  0240               	subwf	(main@i+1)^(0+128),w
  1974  0EBF  3020               	movlw	32
  1975  0EC0  1903               	skipnz
  1976  0EC1  023F               	subwf	main@i^(0+128),w
  1977  0EC2  1803               	btfsc	3,0
  1978  0EC3  2EF3               	goto	l3827
  1979  0EC4                     l3819:	
  1980                           
  1981                           ;main.c: 87: printf("%c", dData[i]);
  1982  0EC4  083F               	movf	main@i^(0+128),w
  1983  0EC5  0741               	addwf	main@dData^(0+128),w
  1984  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  1985  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  1986  0EC8  00E2               	movwf	??_main
  1987  0EC9  0862               	movf	??_main,w
  1988  0ECA  0084               	movwf	4
  1989  0ECB  1783               	bsf	3,7	;select IRP bank2
  1990  0ECC  0800               	movf	0,w
  1991  0ECD  00E3               	movwf	??_main+1
  1992  0ECE  01E4               	clrf	??_main+2
  1993  0ECF  0863               	movf	??_main+1,w
  1994  0ED0  00F1               	movwf	?_printf
  1995  0ED1  0864               	movf	??_main+2,w
  1996  0ED2  00F2               	movwf	?_printf+1
  1997  0ED3  3019               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  1998  0ED4  120A  158A  223F  120A  158A  	fcall	_printf
  1999                           
  2000                           ;main.c: 88: dData[i] = 0x00;
  2001  0ED9  1683               	bsf	3,5	;RP0=1, select bank1
  2002  0EDA  1303               	bcf	3,6	;RP1=0, select bank1
  2003  0EDB  083F               	movf	main@i^(0+128),w
  2004  0EDC  0741               	addwf	main@dData^(0+128),w
  2005  0EDD  1283               	bcf	3,5	;RP0=0, select bank0
  2006  0EDE  1303               	bcf	3,6	;RP1=0, select bank0
  2007  0EDF  00E2               	movwf	??_main
  2008  0EE0  0862               	movf	??_main,w
  2009  0EE1  0084               	movwf	4
  2010  0EE2  1783               	bsf	3,7	;select IRP bank2
  2011  0EE3  0180               	clrf	0
  2012  0EE4  3001               	movlw	1
  2013  0EE5  1683               	bsf	3,5	;RP0=1, select bank1
  2014  0EE6  1303               	bcf	3,6	;RP1=0, select bank1
  2015  0EE7  07BF               	addwf	main@i^(0+128),f
  2016  0EE8  1803               	skipnc
  2017  0EE9  0AC0               	incf	(main@i+1)^(0+128),f
  2018  0EEA  3000               	movlw	0
  2019  0EEB  07C0               	addwf	(main@i+1)^(0+128),f
  2020  0EEC  3000               	movlw	0
  2021  0EED  0240               	subwf	(main@i+1)^(0+128),w
  2022  0EEE  3020               	movlw	32
  2023  0EEF  1903               	skipnz
  2024  0EF0  023F               	subwf	main@i^(0+128),w
  2025  0EF1  1C03               	skipc
  2026  0EF2  2EC4               	goto	l3819
  2027  0EF3                     l3827:	
  2028                           
  2029                           ;main.c: 89: }
  2030                           ;main.c: 95: if(dData[0]=='n'){
  2031  0EF3  0841               	movf	main@dData^(0+128),w
  2032  0EF4  0084               	movwf	4
  2033  0EF5  306E               	movlw	110
  2034  0EF6  1783               	bsf	3,7	;select IRP bank2
  2035  0EF7  0600               	xorwf	0,w
  2036  0EF8  1D03               	btfss	3,2
  2037  0EF9  2F0B               	goto	l3833
  2038                           
  2039                           ;main.c: 97: UBYTE NM_wad_header = 0x72;
  2040  0EFA  3072               	movlw	114
  2041  0EFB  1283               	bcf	3,5	;RP0=0, select bank0
  2042  0EFC  1303               	bcf	3,6	;RP1=0, select bank0
  2043  0EFD  00E2               	movwf	??_main
  2044  0EFE  0862               	movf	??_main,w
  2045  0EFF  1683               	bsf	3,5	;RP0=1, select bank1
  2046  0F00  1303               	bcf	3,6	;RP1=0, select bank1
  2047  0F01  00BE               	movwf	main@NM_wad_header^(0+128)
  2048                           
  2049                           ;main.c: 98: NM_waddress(NM_wad_header, 0x00, 0x00);
  2050  0F02  01F1               	clrf	NM_waddress@whigh_address
  2051  0F03  01F2               	clrf	NM_waddress@wlow_address
  2052  0F04  083E               	movf	main@NM_wad_header^(0+128),w
  2053  0F05  160A  118A  27EE  120A  158A  	fcall	_NM_waddress
  2054                           
  2055                           ;main.c: 100: }else if(dData[0]=='p'){
  2056  0F0A  2FF0               	goto	l3869
  2057  0F0B                     l3833:	
  2058  0F0B  1683               	bsf	3,5	;RP0=1, select bank1
  2059  0F0C  1303               	bcf	3,6	;RP1=0, select bank1
  2060  0F0D  0841               	movf	main@dData^(0+128),w
  2061  0F0E  0084               	movwf	4
  2062  0F0F  3070               	movlw	112
  2063  0F10  1783               	bsf	3,7	;select IRP bank2
  2064  0F11  0600               	xorwf	0,w
  2065  0F12  1D03               	btfss	3,2
  2066  0F13  2FF0               	goto	l3869
  2067                           
  2068                           ;main.c: 102: RB2 = 1;
  2069  0F14  1283               	bcf	3,5	;RP0=0, select bank0
  2070  0F15  1303               	bcf	3,6	;RP1=0, select bank0
  2071  0F16  1506               	bsf	6,2	;volatile
  2072                           
  2073                           ;main.c: 103: _delay((unsigned long)((500)*(10000000/4000.0)));
  2074  0F17  3007               	movlw	7
  2075  0F18  00E4               	movwf	??_main+2
  2076  0F19  3058               	movlw	88
  2077  0F1A  00E3               	movwf	??_main+1
  2078  0F1B  305E               	movlw	94
  2079  0F1C  00E2               	movwf	??_main
  2080  0F1D                     u3657:	
  2081  0F1D  0BE2               	decfsz	??_main,f
  2082  0F1E  2F1D               	goto	u3657
  2083  0F1F  0BE3               	decfsz	??_main+1,f
  2084  0F20  2F1D               	goto	u3657
  2085  0F21  0BE4               	decfsz	??_main+2,f
  2086  0F22  2F1D               	goto	u3657
  2087  0F23  2F24               	nop2
  2088                           
  2089                           ;main.c: 104: RB2 = 0;
  2090  0F24  1283               	bcf	3,5	;RP0=0, select bank0
  2091  0F25  1303               	bcf	3,6	;RP1=0, select bank0
  2092  0F26  1106               	bcf	6,2	;volatile
  2093                           
  2094                           ;main.c: 105: if(dData[2] == 'r'){
  2095  0F27  1683               	bsf	3,5	;RP0=1, select bank1
  2096  0F28  1303               	bcf	3,6	;RP1=0, select bank1
  2097  0F29  0841               	movf	main@dData^(0+128),w
  2098  0F2A  3E02               	addlw	2
  2099  0F2B  0084               	movwf	4
  2100  0F2C  3072               	movlw	114
  2101  0F2D  1783               	bsf	3,7	;select IRP bank2
  2102  0F2E  0600               	xorwf	0,w
  2103  0F2F  1903               	btfsc	3,2
  2104  0F30  2FD9               	goto	l3865
  2105  0F31  2FF0               	goto	l3869
  2106  0F32                     l3845:	
  2107                           ;main.c: 111: case 'E':
  2108                           
  2109                           ;main.c: 110: switch(dData[3]){
  2110                           
  2111                           
  2112                           ;main.c: 116: Reset_EPS();
  2113  0F32  120A  118A  2007  120A  158A  	fcall	_Reset_EPS
  2114                           
  2115                           ;main.c: 117: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2116  0F37  3040               	movlw	64
  2117  0F38  1283               	bcf	3,5	;RP0=0, select bank0
  2118  0F39  1303               	bcf	3,6	;RP1=0, select bank0
  2119  0F3A  00E4               	movwf	??_main+2
  2120  0F3B  306A               	movlw	106
  2121  0F3C  00E3               	movwf	??_main+1
  2122  0F3D  30D5               	movlw	213
  2123  0F3E  00E2               	movwf	??_main
  2124  0F3F                     u3667:	
  2125  0F3F  0BE2               	decfsz	??_main,f
  2126  0F40  2F3F               	goto	u3667
  2127  0F41  0BE3               	decfsz	??_main+1,f
  2128  0F42  2F3F               	goto	u3667
  2129  0F43  0BE4               	decfsz	??_main+2,f
  2130  0F44  2F3F               	goto	u3667
  2131  0F45  2F46               	nop2
  2132                           
  2133                           ;main.c: 120: int FMTX_Nprg[5] = {8,7,3,0,0};
  2134  0F46  30A0               	movlw	main@FMTX_Nprg& (0+255)
  2135  0F47  0084               	movwf	4
  2136  0F48  30C2               	movlw	low main@F2007
  2137  0F49  1283               	bcf	3,5	;RP0=0, select bank0
  2138  0F4A  1303               	bcf	3,6	;RP1=0, select bank0
  2139  0F4B  00E2               	movwf	??_main
  2140  0F4C  0804               	movf	4,w
  2141  0F4D  00E3               	movwf	??_main+1
  2142  0F4E  300A               	movlw	10
  2143  0F4F  00E4               	movwf	??_main+2
  2144  0F50                     u3570:	
  2145  0F50  0862               	movf	??_main,w
  2146  0F51  0084               	movwf	4
  2147  0F52  1783               	bsf	3,7	;select IRP bank3
  2148  0F53  0800               	movf	0,w
  2149  0F54  00E5               	movwf	??_main+3
  2150  0F55  0AE2               	incf	??_main,f
  2151  0F56  0863               	movf	??_main+1,w
  2152  0F57  0084               	movwf	4
  2153  0F58  1383               	bcf	3,7	;select IRP bank1
  2154  0F59  0865               	movf	??_main+3,w
  2155  0F5A  0080               	movwf	0
  2156  0F5B  0AE3               	incf	??_main+1,f
  2157  0F5C  0BE4               	decfsz	??_main+2,f
  2158  0F5D  2F50               	goto	u3570
  2159                           
  2160                           ;main.c: 121: int CWTX_Nprg[5] = {0,1,7,4,7};
  2161  0F5E  30AA               	movlw	main@CWTX_Nprg& (0+255)
  2162  0F5F  0084               	movwf	4
  2163  0F60  30CC               	movlw	low main@F2009
  2164  0F61  00E2               	movwf	??_main
  2165  0F62  0804               	movf	4,w
  2166  0F63  00E3               	movwf	??_main+1
  2167  0F64  300A               	movlw	10
  2168  0F65  00E4               	movwf	??_main+2
  2169  0F66                     u3580:	
  2170  0F66  0862               	movf	??_main,w
  2171  0F67  0084               	movwf	4
  2172  0F68  1783               	bsf	3,7	;select IRP bank3
  2173  0F69  0800               	movf	0,w
  2174  0F6A  00E5               	movwf	??_main+3
  2175  0F6B  0AE2               	incf	??_main,f
  2176  0F6C  0863               	movf	??_main+1,w
  2177  0F6D  0084               	movwf	4
  2178  0F6E  1383               	bcf	3,7	;select IRP bank1
  2179  0F6F  0865               	movf	??_main+3,w
  2180  0F70  0080               	movwf	0
  2181  0F71  0AE3               	incf	??_main+1,f
  2182  0F72  0BE4               	decfsz	??_main+2,f
  2183  0F73  2F66               	goto	u3580
  2184                           
  2185                           ;main.c: 122: int FMRX_Nprg[5] = {2,4,8,8,7};
  2186  0F74  30B4               	movlw	main@FMRX_Nprg& (0+255)
  2187  0F75  0084               	movwf	4
  2188  0F76  30D6               	movlw	low main@F2011
  2189  0F77  00E2               	movwf	??_main
  2190  0F78  0804               	movf	4,w
  2191  0F79  00E3               	movwf	??_main+1
  2192  0F7A  300A               	movlw	10
  2193  0F7B  00E4               	movwf	??_main+2
  2194  0F7C                     u3590:	
  2195  0F7C  0862               	movf	??_main,w
  2196  0F7D  0084               	movwf	4
  2197  0F7E  1783               	bsf	3,7	;select IRP bank3
  2198  0F7F  0800               	movf	0,w
  2199  0F80  00E5               	movwf	??_main+3
  2200  0F81  0AE2               	incf	??_main,f
  2201  0F82  0863               	movf	??_main+1,w
  2202  0F83  0084               	movwf	4
  2203  0F84  1383               	bcf	3,7	;select IRP bank1
  2204  0F85  0865               	movf	??_main+3,w
  2205  0F86  0080               	movwf	0
  2206  0F87  0AE3               	incf	??_main+1,f
  2207  0F88  0BE4               	decfsz	??_main+2,f
  2208  0F89  2F7C               	goto	u3590
  2209                           
  2210                           ;main.c: 124: FMTX(FMTX_Nref, FMTX_Nprg);
  2211  0F8A  1683               	bsf	3,5	;RP0=1, select bank1
  2212  0F8B  1303               	bcf	3,6	;RP1=0, select bank1
  2213  0F8C  0847               	movf	(_FMTX_Nref+1)^(0+128),w
  2214  0F8D  1283               	bcf	3,5	;RP0=0, select bank0
  2215  0F8E  1303               	bcf	3,6	;RP1=0, select bank0
  2216  0F8F  00DD               	movwf	FMTX@Nref+1
  2217  0F90  1683               	bsf	3,5	;RP0=1, select bank1
  2218  0F91  1303               	bcf	3,6	;RP1=0, select bank1
  2219  0F92  0846               	movf	_FMTX_Nref^(0+128),w
  2220  0F93  1283               	bcf	3,5	;RP0=0, select bank0
  2221  0F94  1303               	bcf	3,6	;RP1=0, select bank0
  2222  0F95  00DC               	movwf	FMTX@Nref
  2223  0F96  30A0               	movlw	(low (main@FMTX_Nprg| 0))& (0+255)
  2224  0F97  00DE               	movwf	FMTX@Nprg
  2225  0F98  3000               	movlw	0
  2226  0F99  00DF               	movwf	FMTX@Nprg+1
  2227  0F9A  120A  158A  2125  120A  158A  	fcall	_FMTX
  2228                           
  2229                           ;main.c: 125: CWTX(CWTX_Nref, CWTX_Nprg);
  2230  0F9F  1683               	bsf	3,5	;RP0=1, select bank1
  2231  0FA0  1303               	bcf	3,6	;RP1=0, select bank1
  2232  0FA1  0843               	movf	(_CWTX_Nref+1)^(0+128),w
  2233  0FA2  1283               	bcf	3,5	;RP0=0, select bank0
  2234  0FA3  1303               	bcf	3,6	;RP1=0, select bank0
  2235  0FA4  00DD               	movwf	CWTX@Nref+1
  2236  0FA5  1683               	bsf	3,5	;RP0=1, select bank1
  2237  0FA6  1303               	bcf	3,6	;RP1=0, select bank1
  2238  0FA7  0842               	movf	_CWTX_Nref^(0+128),w
  2239  0FA8  1283               	bcf	3,5	;RP0=0, select bank0
  2240  0FA9  1303               	bcf	3,6	;RP1=0, select bank0
  2241  0FAA  00DC               	movwf	CWTX@Nref
  2242  0FAB  30AA               	movlw	(low (main@CWTX_Nprg| 0))& (0+255)
  2243  0FAC  00DE               	movwf	CWTX@Nprg
  2244  0FAD  3000               	movlw	0
  2245  0FAE  00DF               	movwf	CWTX@Nprg+1
  2246  0FAF  120A  158A  20CD  120A  158A  	fcall	_CWTX
  2247                           
  2248                           ;main.c: 126: FMRX(FMRX_Nref, FMRX_Nprg);
  2249  0FB4  1683               	bsf	3,5	;RP0=1, select bank1
  2250  0FB5  1303               	bcf	3,6	;RP1=0, select bank1
  2251  0FB6  0845               	movf	(_FMRX_Nref+1)^(0+128),w
  2252  0FB7  1283               	bcf	3,5	;RP0=0, select bank0
  2253  0FB8  1303               	bcf	3,6	;RP1=0, select bank0
  2254  0FB9  00DD               	movwf	FMRX@Nref+1
  2255  0FBA  1683               	bsf	3,5	;RP0=1, select bank1
  2256  0FBB  1303               	bcf	3,6	;RP1=0, select bank1
  2257  0FBC  0844               	movf	_FMRX_Nref^(0+128),w
  2258  0FBD  1283               	bcf	3,5	;RP0=0, select bank0
  2259  0FBE  1303               	bcf	3,6	;RP1=0, select bank0
  2260  0FBF  00DC               	movwf	FMRX@Nref
  2261  0FC0  30B4               	movlw	(low (main@FMRX_Nprg| 0))& (0+255)
  2262  0FC1  00DE               	movwf	FMRX@Nprg
  2263  0FC2  3000               	movlw	0
  2264  0FC3  00DF               	movwf	FMRX@Nprg+1
  2265  0FC4  120A  158A  20F9  120A  158A  	fcall	_FMRX
  2266                           
  2267                           ;main.c: 127: _delay((unsigned long)((500)*(10000000/4000.0)));
  2268  0FC9  3007               	movlw	7
  2269  0FCA  1283               	bcf	3,5	;RP0=0, select bank0
  2270  0FCB  1303               	bcf	3,6	;RP1=0, select bank0
  2271  0FCC  00E4               	movwf	??_main+2
  2272  0FCD  3058               	movlw	88
  2273  0FCE  00E3               	movwf	??_main+1
  2274  0FCF  305E               	movlw	94
  2275  0FD0  00E2               	movwf	??_main
  2276  0FD1                     u3677:	
  2277  0FD1  0BE2               	decfsz	??_main,f
  2278  0FD2  2FD1               	goto	u3677
  2279  0FD3  0BE3               	decfsz	??_main+1,f
  2280  0FD4  2FD1               	goto	u3677
  2281  0FD5  0BE4               	decfsz	??_main+2,f
  2282  0FD6  2FD1               	goto	u3677
  2283  0FD7  2FD8               	nop2
  2284                           
  2285                           ;main.c: 144: }
  2286                           
  2287                           ;main.c: 143: break;
  2288                           
  2289                           ;main.c: 141: default:
  2290                           
  2291                           ;main.c: 140: break;
  2292                           
  2293                           ;main.c: 138: case 'T':
  2294                           
  2295                           ;main.c: 137: break;
  2296                           
  2297                           ;main.c: 135: case 'N':
  2298                           
  2299                           ;main.c: 134: break;
  2300                           
  2301                           ;main.c: 132: case '3':
  2302                           
  2303                           ;main.c: 131: break;
  2304                           
  2305                           ;main.c: 129: case 'I':
  2306                           
  2307                           ;main.c: 128: break;
  2308  0FD8  2FF0               	goto	l3869
  2309  0FD9                     l3865:	
  2310  0FD9  1683               	bsf	3,5	;RP0=1, select bank1
  2311  0FDA  1303               	bcf	3,6	;RP1=0, select bank1
  2312  0FDB  0841               	movf	main@dData^(0+128),w
  2313  0FDC  3E03               	addlw	3
  2314  0FDD  0084               	movwf	4
  2315  0FDE  1783               	bsf	3,7	;select IRP bank2
  2316  0FDF  0800               	movf	0,w
  2317                           
  2318                           ; Switch size 1, requested type "space"
  2319                           ; Number of cases is 5, Range of values is 51 to 84
  2320                           ; switch strategies available:
  2321                           ; Name         Instructions Cycles
  2322                           ; simple_byte           16     9 (average)
  2323                           ; direct_byte          113    11 (fixed)
  2324                           ; jumptable            263     9 (fixed)
  2325                           ;	Chosen strategy is simple_byte
  2326  0FE0  3A33               	xorlw	51	; case 51
  2327  0FE1  1903               	skipnz
  2328  0FE2  2FF0               	goto	l3869
  2329  0FE3  3A76               	xorlw	118	; case 69
  2330  0FE4  1903               	skipnz
  2331  0FE5  2F32               	goto	l3845
  2332  0FE6  3A0C               	xorlw	12	; case 73
  2333  0FE7  1903               	skipnz
  2334  0FE8  2FF0               	goto	l3869
  2335  0FE9  3A07               	xorlw	7	; case 78
  2336  0FEA  1903               	skipnz
  2337  0FEB  2FF0               	goto	l3869
  2338  0FEC  3A1A               	xorlw	26	; case 84
  2339  0FED  1903               	skipnz
  2340  0FEE  2FF0               	goto	l3869
  2341  0FEF  2FF0               	goto	l3869
  2342  0FF0                     l3869:	
  2343                           ;main.c: 146: }else if(dData[2] == 't'){
  2344                           
  2345                           
  2346                           ;main.c: 148: }
  2347                           ;main.c: 149: }
  2348                           ;main.c: 193: _delay((unsigned long)((500)*(10000000/4000.0)));
  2349  0FF0  3007               	movlw	7
  2350  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  2351  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
  2352  0FF3  00E4               	movwf	??_main+2
  2353  0FF4  3058               	movlw	88
  2354  0FF5  00E3               	movwf	??_main+1
  2355  0FF6  305E               	movlw	94
  2356  0FF7  00E2               	movwf	??_main
  2357  0FF8                     u3687:	
  2358  0FF8  0BE2               	decfsz	??_main,f
  2359  0FF9  2FF8               	goto	u3687
  2360  0FFA  0BE3               	decfsz	??_main+1,f
  2361  0FFB  2FF8               	goto	u3687
  2362  0FFC  0BE4               	decfsz	??_main+2,f
  2363  0FFD  2FF8               	goto	u3687
  2364  0FFE  2FFF               	nop2
  2365  0FFF  2E8A               	goto	l3803
  2366  1000                     __end_of_main:	
  2367                           ;main.c: 194: }
  2368                           ;main.c: 195: return;
  2369                           
  2370                           
  2371                           	psect	text1
  2372  0A3F                     __ptext1:	
  2373 ;; *************** function _printf *****************
  2374 ;; Defined at:
  2375 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  2376 ;; Parameters:    Size  Location     Type
  2377 ;;  f               1    wreg     PTR const unsigned char 
  2378 ;;		 -> STR_16(3), STR_15(8), 
  2379 ;; Auto vars:     Size  Location     Type
  2380 ;;  f               1    6[COMMON] PTR const unsigned char 
  2381 ;;		 -> STR_16(3), STR_15(8), 
  2382 ;;  tmpval          4    0        struct .
  2383 ;;  cp              2    0        PTR const unsigned char 
  2384 ;;  len             2    0        unsigned int 
  2385 ;;  val             2    0        unsigned int 
  2386 ;;  c               1    7[COMMON] char 
  2387 ;;  ap              1    5[COMMON] PTR void [1]
  2388 ;;		 -> ?_printf(2), 
  2389 ;;  flag            1    4[COMMON] unsigned char 
  2390 ;;  prec            1    0        char 
  2391 ;; Return value:  Size  Location     Type
  2392 ;;                  2    1[COMMON] int 
  2393 ;; Registers used:
  2394 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2395 ;; Tracked objects:
  2396 ;;		On entry : 0/0
  2397 ;;		On exit  : 0/0
  2398 ;;		Unchanged: 0/0
  2399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2400 ;;      Params:         2       0       0       0       0
  2401 ;;      Locals:         4       0       0       0       0
  2402 ;;      Temps:          1       0       0       0       0
  2403 ;;      Totals:         7       0       0       0       0
  2404 ;;Total ram usage:        7 bytes
  2405 ;; Hardware stack levels used:    1
  2406 ;; Hardware stack levels required when called:    1
  2407 ;; This function calls:
  2408 ;;		_putch
  2409 ;; This function is called by:
  2410 ;;		_main
  2411 ;; This function uses a non-reentrant model
  2412 ;;
  2413                           
  2414                           
  2415                           ;psect for function _printf
  2416  0A3F                     _printf:	
  2417                           
  2418                           ;incstack = 0
  2419                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2420                           ;printf@f stored from wreg
  2421  0A3F  00F6               	movwf	printf@f
  2422                           
  2423                           ;doprnt.c: 466: va_list ap;
  2424                           ;doprnt.c: 499: signed char c;
  2425                           ;doprnt.c: 506: signed char prec;
  2426                           ;doprnt.c: 508: unsigned char flag;
  2427                           ;doprnt.c: 523: union {
  2428                           ;doprnt.c: 524: unsigned long vd;
  2429                           ;doprnt.c: 525: double integ;
  2430                           ;doprnt.c: 526: } tmpval;
  2431                           ;doprnt.c: 528: unsigned int val;
  2432                           ;doprnt.c: 529: unsigned len;
  2433                           ;doprnt.c: 530: const char * cp;
  2434                           ;doprnt.c: 533: *ap = __va_start();
  2435  0A40  3071               	movlw	(low (?_printf| 0))& (0+255)
  2436  0A41  00F3               	movwf	??_printf
  2437  0A42  0873               	movf	??_printf,w
  2438  0A43  00F5               	movwf	printf@ap
  2439  0A44                     l3519:	
  2440                           ;doprnt.c: 1422: {
  2441                           
  2442                           ;doprnt.c: 536: while(c = *f++) {
  2443                           
  2444  0A44  3001               	movlw	1
  2445  0A45  07F6               	addwf	printf@f,f
  2446  0A46  30FF               	movlw	-1
  2447  0A47  0776               	addwf	printf@f,w
  2448  0A48  0084               	movwf	4
  2449  0A49  120A  158A  2000  120A  158A  	fcall	stringdir
  2450  0A4E  00F3               	movwf	??_printf
  2451  0A4F  0873               	movf	??_printf,w
  2452  0A50  00F7               	movwf	printf@c
  2453  0A51  0877               	movf	printf@c,w
  2454  0A52  1903               	btfsc	3,2
  2455  0A53  0008               	return
  2456                           
  2457                           ;doprnt.c: 538: if(c != '%')
  2458  0A54  3025               	movlw	37
  2459  0A55  0677               	xorwf	printf@c,w
  2460  0A56  1903               	btfsc	3,2
  2461  0A57  2A5F               	goto	l3507
  2462                           
  2463                           ;doprnt.c: 540: {
  2464                           ;doprnt.c: 541: (putch(c) );
  2465  0A58  0877               	movf	printf@c,w
  2466  0A59  160A  118A  27C4  120A  158A  	fcall	_putch
  2467                           
  2468                           ;doprnt.c: 542: continue;
  2469  0A5E  2A44               	goto	l3519
  2470  0A5F                     l3507:	
  2471                           
  2472                           ;doprnt.c: 543: }
  2473                           ;doprnt.c: 548: flag = 0;
  2474  0A5F  01F4               	clrf	printf@flag
  2475                           
  2476                           ;doprnt.c: 635: switch(c = *f++) {
  2477  0A60  2A72               	goto	l3517
  2478  0A61                     l3509:	
  2479                           ;doprnt.c: 784: case 'c':
  2480                           
  2481                           ;doprnt.c: 638: goto alldone;
  2482                           
  2483                           ;doprnt.c: 637: case 0:
  2484                           
  2485                           
  2486                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2487  0A61  0875               	movf	printf@ap,w
  2488  0A62  0084               	movwf	4
  2489  0A63  0800               	movf	0,w
  2490  0A64  00F3               	movwf	??_printf
  2491  0A65  0873               	movf	??_printf,w
  2492  0A66  00F7               	movwf	printf@c
  2493  0A67  3002               	movlw	2
  2494  0A68  00F3               	movwf	??_printf
  2495  0A69  0873               	movf	??_printf,w
  2496  0A6A  07F5               	addwf	printf@ap,f
  2497  0A6B                     l3513:	
  2498                           ;doprnt.c: 802: default:
  2499                           
  2500                           
  2501                           ;doprnt.c: 809: (putch(c) );
  2502  0A6B  0877               	movf	printf@c,w
  2503  0A6C  160A  118A  27C4  120A  158A  	fcall	_putch
  2504                           
  2505                           ;doprnt.c: 822: }
  2506                           
  2507                           ;doprnt.c: 810: continue;
  2508  0A71  2A44               	goto	l3519
  2509  0A72                     l3517:	
  2510  0A72  3001               	movlw	1
  2511  0A73  07F6               	addwf	printf@f,f
  2512  0A74  30FF               	movlw	-1
  2513  0A75  0776               	addwf	printf@f,w
  2514  0A76  0084               	movwf	4
  2515  0A77  120A  158A  2000  120A  158A  	fcall	stringdir
  2516  0A7C  00F7               	movwf	printf@c
  2517                           
  2518                           ; Switch size 1, requested type "space"
  2519                           ; Number of cases is 2, Range of values is 0 to 99
  2520                           ; switch strategies available:
  2521                           ; Name         Instructions Cycles
  2522                           ; simple_byte            7     4 (average)
  2523                           ; jumptable            260     6 (fixed)
  2524                           ;	Chosen strategy is simple_byte
  2525  0A7D  3A00               	xorlw	0	; case 0
  2526  0A7E  1903               	skipnz
  2527  0A7F  2A85               	goto	l665
  2528  0A80  3A63               	xorlw	99	; case 99
  2529  0A81  1903               	skipnz
  2530  0A82  2A61               	goto	l3509
  2531  0A83  2A6B               	goto	l3513
  2532  0A84  2A44               	goto	l3519
  2533  0A85                     l665:	
  2534                           ;doprnt.c: 1540: return 0;
  2535                           ;	Return value of _printf is never used
  2536                           
  2537                           ;doprnt.c: 1469: }
  2538                           ;doprnt.c: 1533: }
  2539                           ;doprnt.c: 1535: alldone:
  2540                           
  2541  0A85  0008               	return
  2542  0A86                     __end_of_printf:	
  2543                           
  2544                           	psect	text2
  2545  0007                     __ptext2:	
  2546 ;; *************** function _Reset_EPS *****************
  2547 ;; Defined at:
  2548 ;;		line 19 in file "EPS.c"
  2549 ;; Parameters:    Size  Location     Type
  2550 ;;		None
  2551 ;; Auto vars:     Size  Location     Type
  2552 ;;		None
  2553 ;; Return value:  Size  Location     Type
  2554 ;;                  1    wreg      void 
  2555 ;; Registers used:
  2556 ;;		wreg
  2557 ;; Tracked objects:
  2558 ;;		On entry : 0/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2562 ;;      Params:         0       0       0       0       0
  2563 ;;      Locals:         0       0       0       0       0
  2564 ;;      Temps:          3       0       0       0       0
  2565 ;;      Totals:         3       0       0       0       0
  2566 ;;Total ram usage:        3 bytes
  2567 ;; Hardware stack levels used:    1
  2568 ;; This function calls:
  2569 ;;		Nothing
  2570 ;; This function is called by:
  2571 ;;		_main
  2572 ;; This function uses a non-reentrant model
  2573 ;;
  2574                           
  2575                           
  2576                           ;psect for function _Reset_EPS
  2577  0007                     _Reset_EPS:	
  2578                           
  2579                           ;EPS.c: 20: RB4 = 1;
  2580                           
  2581                           ;incstack = 0
  2582                           ; Regs used in _Reset_EPS: [wreg]
  2583  0007  1283               	bcf	3,5	;RP0=0, select bank0
  2584  0008  1303               	bcf	3,6	;RP1=0, select bank0
  2585  0009  1606               	bsf	6,4	;volatile
  2586                           
  2587                           ;EPS.c: 21: RA1 = 1;
  2588  000A  1485               	bsf	5,1	;volatile
  2589                           
  2590                           ;EPS.c: 22: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2591  000B  3040               	movlw	64
  2592  000C  00F2               	movwf	??_Reset_EPS+2
  2593  000D  306A               	movlw	106
  2594  000E  00F1               	movwf	??_Reset_EPS+1
  2595  000F  30D5               	movlw	213
  2596  0010  00F0               	movwf	??_Reset_EPS
  2597  0011                     u3697:	
  2598  0011  0BF0               	decfsz	??_Reset_EPS,f
  2599  0012  2811               	goto	u3697
  2600  0013  0BF1               	decfsz	??_Reset_EPS+1,f
  2601  0014  2811               	goto	u3697
  2602  0015  0BF2               	decfsz	??_Reset_EPS+2,f
  2603  0016  2811               	goto	u3697
  2604  0017  2818               	nop2
  2605                           
  2606                           ;EPS.c: 23: RB4 = 0;
  2607  0018  1283               	bcf	3,5	;RP0=0, select bank0
  2608  0019  1303               	bcf	3,6	;RP1=0, select bank0
  2609  001A  1206               	bcf	6,4	;volatile
  2610                           
  2611                           ;EPS.c: 24: RA1 = 0;
  2612  001B  1085               	bcf	5,1	;volatile
  2613                           
  2614                           ;EPS.c: 25: _delay((unsigned long)((500)*(10000000/4000.0)));
  2615  001C  3007               	movlw	7
  2616  001D  00F2               	movwf	??_Reset_EPS+2
  2617  001E  3058               	movlw	88
  2618  001F  00F1               	movwf	??_Reset_EPS+1
  2619  0020  305E               	movlw	94
  2620  0021  00F0               	movwf	??_Reset_EPS
  2621  0022                     u3707:	
  2622  0022  0BF0               	decfsz	??_Reset_EPS,f
  2623  0023  2822               	goto	u3707
  2624  0024  0BF1               	decfsz	??_Reset_EPS+1,f
  2625  0025  2822               	goto	u3707
  2626  0026  0BF2               	decfsz	??_Reset_EPS+2,f
  2627  0027  2822               	goto	u3707
  2628  0028  2829               	nop2
  2629  0029  0008               	return
  2630  002A                     __end_of_Reset_EPS:	
  2631                           
  2632                           	psect	text3
  2633  0C47                     __ptext3:	
  2634 ;; *************** function _ReceivePacket_data *****************
  2635 ;; Defined at:
  2636 ;;		line 359 in file "decode_AX25.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;		None
  2639 ;; Auto vars:     Size  Location     Type
  2640 ;;  i               2   31[BANK0 ] unsigned int 
  2641 ;;  fcschecker      2   29[BANK0 ] unsigned int 
  2642 ;; Return value:  Size  Location     Type
  2643 ;;                  1    wreg      PTR unsigned char 
  2644 ;; Registers used:
  2645 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2646 ;; Tracked objects:
  2647 ;;		On entry : 0/0
  2648 ;;		On exit  : 0/0
  2649 ;;		Unchanged: 0/0
  2650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2651 ;;      Params:         0       0       0       0       0
  2652 ;;      Locals:         0       4       0       0       0
  2653 ;;      Temps:          2       0       0       0       0
  2654 ;;      Totals:         2       4       0       0       0
  2655 ;;Total ram usage:        6 bytes
  2656 ;; Hardware stack levels used:    1
  2657 ;; Hardware stack levels required when called:    2
  2658 ;; This function calls:
  2659 ;;		_fcscheck
  2660 ;;		_getdata
  2661 ;;		_waitFlag
  2662 ;; This function is called by:
  2663 ;;		_main
  2664 ;; This function uses a non-reentrant model
  2665 ;;
  2666                           
  2667                           
  2668                           ;psect for function _ReceivePacket_data
  2669  0C47                     _ReceivePacket_data:	
  2670                           
  2671                           ;decode_AX25.c: 360: UINT fcschecker;
  2672                           ;decode_AX25.c: 363: waitFlag();
  2673                           
  2674                           ;incstack = 0
  2675                           ; Regs used in _ReceivePacket_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2676  0C47  120A  118A  2327  120A  158A  	fcall	_waitFlag
  2677                           
  2678                           ;decode_AX25.c: 365: getdata();
  2679  0C4C  120A  158A  23E6  120A  158A  	fcall	_getdata
  2680                           
  2681                           ;decode_AX25.c: 367: fcschecker = fcscheck();
  2682  0C51  120A  118A  202A  120A  158A  	fcall	_fcscheck
  2683  0C56  0871               	movf	?_fcscheck+1,w
  2684  0C57  1283               	bcf	3,5	;RP0=0, select bank0
  2685  0C58  1303               	bcf	3,6	;RP1=0, select bank0
  2686  0C59  00BE               	movwf	ReceivePacket_data@fcschecker+1
  2687  0C5A  0870               	movf	?_fcscheck,w
  2688  0C5B  00BD               	movwf	ReceivePacket_data@fcschecker
  2689                           
  2690                           ;decode_AX25.c: 369: if(fcschecker == 1){
  2691  0C5C  033D               	decf	ReceivePacket_data@fcschecker,w
  2692  0C5D  043E               	iorwf	ReceivePacket_data@fcschecker+1,w
  2693  0C5E  1D03               	btfss	3,2
  2694  0C5F  2CA6               	goto	l3415
  2695                           
  2696                           ;decode_AX25.c: 370: for(UINT i=0; i<commandSize; i++){
  2697  0C60  01BF               	clrf	ReceivePacket_data@i
  2698  0C61  01C0               	clrf	ReceivePacket_data@i+1
  2699  0C62  3001               	movlw	low (_commandSize-__stringbase)
  2700  0C63  0084               	movwf	4
  2701  0C64  120A  158A  2000  120A  158A  	fcall	stringdir
  2702  0C69  00FA               	movwf	??_ReceivePacket_data
  2703  0C6A  120A  158A  2000  120A  158A  	fcall	stringdir
  2704  0C6F  00FB               	movwf	??_ReceivePacket_data+1
  2705  0C70  087B               	movf	??_ReceivePacket_data+1,w
  2706  0C71  0240               	subwf	ReceivePacket_data@i+1,w
  2707  0C72  1D03               	skipz
  2708  0C73  2C76               	goto	u3115
  2709  0C74  087A               	movf	??_ReceivePacket_data,w
  2710  0C75  023F               	subwf	ReceivePacket_data@i,w
  2711  0C76                     u3115:	
  2712  0C76  1803               	btfsc	3,0
  2713  0C77  2CA0               	goto	l3407
  2714  0C78                     l3401:	
  2715                           
  2716                           ;decode_AX25.c: 371: dData[i] = dPacket[i+20];
  2717  0C78  083F               	movf	ReceivePacket_data@i,w
  2718  0C79  3E14               	addlw	20
  2719  0C7A  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2720  0C7B  0084               	movwf	4
  2721  0C7C  1783               	bsf	3,7	;select IRP bank3
  2722  0C7D  0800               	movf	0,w
  2723  0C7E  00FA               	movwf	??_ReceivePacket_data
  2724  0C7F  083F               	movf	ReceivePacket_data@i,w
  2725  0C80  3E30               	addlw	(low (_dData| (0+256)))& (0+255)
  2726  0C81  0084               	movwf	4
  2727  0C82  087A               	movf	??_ReceivePacket_data,w
  2728  0C83  0080               	movwf	0
  2729  0C84  3001               	movlw	1
  2730  0C85  07BF               	addwf	ReceivePacket_data@i,f
  2731  0C86  1803               	skipnc
  2732  0C87  0AC0               	incf	ReceivePacket_data@i+1,f
  2733  0C88  3000               	movlw	0
  2734  0C89  07C0               	addwf	ReceivePacket_data@i+1,f
  2735  0C8A  3001               	movlw	low (_commandSize-__stringbase)
  2736  0C8B  0084               	movwf	4
  2737  0C8C  120A  158A  2000  120A  158A  	fcall	stringdir
  2738  0C91  00FA               	movwf	??_ReceivePacket_data
  2739  0C92  120A  158A  2000  120A  158A  	fcall	stringdir
  2740  0C97  00FB               	movwf	??_ReceivePacket_data+1
  2741  0C98  087B               	movf	??_ReceivePacket_data+1,w
  2742  0C99  0240               	subwf	ReceivePacket_data@i+1,w
  2743  0C9A  1D03               	skipz
  2744  0C9B  2C9E               	goto	u3125
  2745  0C9C  087A               	movf	??_ReceivePacket_data,w
  2746  0C9D  023F               	subwf	ReceivePacket_data@i,w
  2747  0C9E                     u3125:	
  2748  0C9E  1C03               	skipc
  2749  0C9F  2C78               	goto	l3401
  2750  0CA0                     l3407:	
  2751                           
  2752                           ;decode_AX25.c: 372: }
  2753                           ;decode_AX25.c: 373: dPacketnum = 0;
  2754  0CA0  01E6               	clrf	_dPacketnum
  2755  0CA1  01E7               	clrf	_dPacketnum+1
  2756                           
  2757                           ;decode_AX25.c: 374: rcv_state = 0;
  2758  0CA2  01EA               	clrf	_rcv_state
  2759  0CA3  01EB               	clrf	_rcv_state+1
  2760                           
  2761                           ;decode_AX25.c: 375: return dData;
  2762  0CA4  3030               	movlw	(low (_dData| (0+256)))& (0+255)
  2763                           
  2764                           ;decode_AX25.c: 376: }else{
  2765  0CA5  0008               	return
  2766  0CA6                     l3415:	
  2767                           
  2768                           ;decode_AX25.c: 377: dPacketnum = 0;
  2769  0CA6  01E6               	clrf	_dPacketnum
  2770  0CA7  01E7               	clrf	_dPacketnum+1
  2771                           
  2772                           ;decode_AX25.c: 378: rcv_state = 0;
  2773  0CA8  01EA               	clrf	_rcv_state
  2774  0CA9  01EB               	clrf	_rcv_state+1
  2775                           
  2776                           ;decode_AX25.c: 379: return 0x00;
  2777  0CAA  3000               	movlw	0
  2778  0CAB  0008               	return
  2779  0CAC                     __end_of_ReceivePacket_data:	
  2780                           
  2781                           	psect	text4
  2782  0327                     __ptext4:	
  2783 ;; *************** function _waitFlag *****************
  2784 ;; Defined at:
  2785 ;;		line 54 in file "decode_AX25.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;		None
  2788 ;; Auto vars:     Size  Location     Type
  2789 ;;  j               2   24[BANK0 ] unsigned int 
  2790 ;;  j               2   10[BANK0 ] unsigned int 
  2791 ;;  j               2   22[BANK0 ] unsigned int 
  2792 ;;  j               2    8[BANK0 ] unsigned int 
  2793 ;;  j               2   20[BANK0 ] unsigned int 
  2794 ;;  j               2    6[BANK0 ] unsigned int 
  2795 ;;  j               2   18[BANK0 ] unsigned int 
  2796 ;;  j               2    4[BANK0 ] unsigned int 
  2797 ;;  j               2   16[BANK0 ] unsigned int 
  2798 ;;  j               2    2[BANK0 ] unsigned int 
  2799 ;;  i               2    0[BANK0 ] unsigned int 
  2800 ;;  j               2   14[BANK0 ] unsigned int 
  2801 ;;  j               2   12[BANK0 ] unsigned int 
  2802 ;;  flag_judge      2   26[BANK0 ] unsigned int 
  2803 ;;  buf             1   28[BANK0 ] unsigned char 
  2804 ;; Return value:  Size  Location     Type
  2805 ;;                  1    wreg      void 
  2806 ;; Registers used:
  2807 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2808 ;; Tracked objects:
  2809 ;;		On entry : 0/0
  2810 ;;		On exit  : 0/0
  2811 ;;		Unchanged: 0/0
  2812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2813 ;;      Params:         0       0       0       0       0
  2814 ;;      Locals:         0      29       0       0       0
  2815 ;;      Temps:          4       0       0       0       0
  2816 ;;      Totals:         4      29       0       0       0
  2817 ;;Total ram usage:       33 bytes
  2818 ;; Hardware stack levels used:    1
  2819 ;; Hardware stack levels required when called:    1
  2820 ;; This function calls:
  2821 ;;		_getbit
  2822 ;; This function is called by:
  2823 ;;		_ReceivePacket_data
  2824 ;;		_ReceivePacket
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828                           
  2829                           ;psect for function _waitFlag
  2830  0327                     _waitFlag:	
  2831                           
  2832                           ;decode_AX25.c: 55: UINT flag_judge;
  2833                           ;decode_AX25.c: 56: UBYTE buf = 0xff;
  2834                           
  2835                           ;incstack = 0
  2836                           ; Regs used in _waitFlag: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2837  0327  30FF               	movlw	255
  2838  0328  00F6               	movwf	??_waitFlag
  2839  0329  0876               	movf	??_waitFlag,w
  2840  032A  1283               	bcf	3,5	;RP0=0, select bank0
  2841  032B  1303               	bcf	3,6	;RP1=0, select bank0
  2842  032C  00BC               	movwf	waitFlag@buf
  2843  032D                     L6:	
  2844                           
  2845                           ;decode_AX25.c: 271: rcv_state = 0;
  2846  032D  01EA               	clrf	_rcv_state
  2847  032E  01EB               	clrf	_rcv_state+1
  2848  032F                     l3099:	
  2849  032F  3000               	movlw	0
  2850  0330  026B               	subwf	_rcv_state+1,w
  2851  0331  3002               	movlw	2
  2852  0332  1903               	skipnz
  2853  0333  026A               	subwf	_rcv_state,w
  2854  0334  1803               	btfsc	3,0
  2855  0335  0008               	return
  2856  0336                     l2733:	
  2857                           ;decode_AX25.c: 59: while(buf != 0x7e){
  2858                           
  2859                           ;decode_AX25.c: 58: while(rcv_state < 2){
  2860                           
  2861                           ;decode_AX25.c: 57: rcv_state = 0;
  2862                           
  2863  0336  307E               	movlw	126
  2864  0337  063C               	xorwf	waitFlag@buf,w
  2865  0338  1903               	btfsc	3,2
  2866  0339  2B86               	goto	l2755
  2867                           
  2868                           ;decode_AX25.c: 60: flag_judge = getbit();
  2869  033A  120A  158A  2286  120A  118A  	fcall	_getbit
  2870  033F  0871               	movf	?_getbit+1,w
  2871  0340  1283               	bcf	3,5	;RP0=0, select bank0
  2872  0341  1303               	bcf	3,6	;RP1=0, select bank0
  2873  0342  00BB               	movwf	waitFlag@flag_judge+1
  2874  0343  0870               	movf	?_getbit,w
  2875  0344  00BA               	movwf	waitFlag@flag_judge
  2876                           
  2877                           ;decode_AX25.c: 61: buf = buf << 1;
  2878  0345  083C               	movf	waitFlag@buf,w
  2879  0346  00F6               	movwf	??_waitFlag
  2880  0347  0776               	addwf	??_waitFlag,w
  2881  0348  00F7               	movwf	??_waitFlag+1
  2882  0349  0877               	movf	??_waitFlag+1,w
  2883  034A  00BC               	movwf	waitFlag@buf
  2884                           
  2885                           ;decode_AX25.c: 63: buf = buf | 0x00;
  2886  034B  083A               	movf	waitFlag@flag_judge,w
  2887  034C  043B               	iorwf	waitFlag@flag_judge+1,w
  2888  034D  1903               	btfsc	3,2
  2889  034E  2B36               	goto	l2733
  2890                           
  2891                           ;decode_AX25.c: 65: buf = buf | 0x01;
  2892                           
  2893                           ;decode_AX25.c: 64: }else{
  2894  034F  083C               	movf	waitFlag@buf,w
  2895  0350  3801               	iorlw	1
  2896  0351  00F6               	movwf	??_waitFlag
  2897  0352  0876               	movf	??_waitFlag,w
  2898  0353  00BC               	movwf	waitFlag@buf
  2899  0354  2B36               	goto	l2733
  2900  0355                     l2735:	
  2901                           ;decode_AX25.c: 66: }
  2902                           ;decode_AX25.c: 67: }
  2903                           ;decode_AX25.c: 71: while(buf == 0x7e){
  2904                           
  2905                           
  2906                           ;decode_AX25.c: 72: for(UINT i=0;i<8;i++){
  2907  0355  01A0               	clrf	waitFlag@i
  2908  0356  01A1               	clrf	waitFlag@i+1
  2909  0357  3000               	movlw	0
  2910  0358  0221               	subwf	waitFlag@i+1,w
  2911  0359  3008               	movlw	8
  2912  035A  1903               	skipnz
  2913  035B  0220               	subwf	waitFlag@i,w
  2914  035C  1803               	btfsc	3,0
  2915  035D  2B86               	goto	l2755
  2916  035E                     l2741:	
  2917                           
  2918                           ;decode_AX25.c: 73: flag_judge = getbit();
  2919  035E  120A  158A  2286  120A  118A  	fcall	_getbit
  2920  0363  0871               	movf	?_getbit+1,w
  2921  0364  1283               	bcf	3,5	;RP0=0, select bank0
  2922  0365  1303               	bcf	3,6	;RP1=0, select bank0
  2923  0366  00BB               	movwf	waitFlag@flag_judge+1
  2924  0367  0870               	movf	?_getbit,w
  2925  0368  00BA               	movwf	waitFlag@flag_judge
  2926                           
  2927                           ;decode_AX25.c: 74: buf = buf >> 1;
  2928  0369  083C               	movf	waitFlag@buf,w
  2929  036A  00F6               	movwf	??_waitFlag
  2930  036B  1003               	clrc
  2931  036C  0C76               	rrf	??_waitFlag,w
  2932  036D  00F7               	movwf	??_waitFlag+1
  2933  036E  0877               	movf	??_waitFlag+1,w
  2934  036F  00BC               	movwf	waitFlag@buf
  2935                           
  2936                           ;decode_AX25.c: 76: buf = buf | 0x00;
  2937  0370  083A               	movf	waitFlag@flag_judge,w
  2938  0371  043B               	iorwf	waitFlag@flag_judge+1,w
  2939  0372  1903               	btfsc	3,2
  2940  0373  2B79               	goto	l2751
  2941                           
  2942                           ;decode_AX25.c: 78: buf = buf | 0x80;
  2943                           
  2944                           ;decode_AX25.c: 77: }else{
  2945  0374  083C               	movf	waitFlag@buf,w
  2946  0375  3880               	iorlw	128
  2947  0376  00F6               	movwf	??_waitFlag
  2948  0377  0876               	movf	??_waitFlag,w
  2949  0378  00BC               	movwf	waitFlag@buf
  2950  0379                     l2751:	
  2951  0379  3001               	movlw	1
  2952  037A  07A0               	addwf	waitFlag@i,f
  2953  037B  1803               	skipnc
  2954  037C  0AA1               	incf	waitFlag@i+1,f
  2955  037D  3000               	movlw	0
  2956  037E  07A1               	addwf	waitFlag@i+1,f
  2957  037F  3000               	movlw	0
  2958  0380  0221               	subwf	waitFlag@i+1,w
  2959  0381  3008               	movlw	8
  2960  0382  1903               	skipnz
  2961  0383  0220               	subwf	waitFlag@i,w
  2962  0384  1C03               	skipc
  2963  0385  2B5E               	goto	l2741
  2964  0386                     l2755:	
  2965  0386  307E               	movlw	126
  2966  0387  063C               	xorwf	waitFlag@buf,w
  2967  0388  1903               	btfsc	3,2
  2968  0389  2B55               	goto	l2735
  2969                           
  2970                           ;decode_AX25.c: 79: }
  2971                           ;decode_AX25.c: 80: }
  2972                           ;decode_AX25.c: 81: }
  2973                           ;decode_AX25.c: 82: if(buf == ("JQ1YCZ"[0] << 1)){
  2974  038A  3012               	movlw	low (STR_1-__stringbase)
  2975  038B  0084               	movwf	4
  2976  038C  120A  158A  2000  120A  118A  	fcall	stringdir
  2977  0391  00F6               	movwf	??_waitFlag
  2978  0392  01F7               	clrf	??_waitFlag+1
  2979  0393  1003               	clrc
  2980  0394  0DF6               	rlf	??_waitFlag,f
  2981  0395  0DF7               	rlf	??_waitFlag+1,f
  2982  0396  083C               	movf	waitFlag@buf,w
  2983  0397  00F8               	movwf	??_waitFlag+2
  2984  0398  01F9               	clrf	??_waitFlag+3
  2985  0399  0877               	movf	??_waitFlag+1,w
  2986  039A  0679               	xorwf	??_waitFlag+3,w
  2987  039B  1D03               	skipz
  2988  039C  2B9F               	goto	u2205
  2989  039D  0876               	movf	??_waitFlag,w
  2990  039E  0678               	xorwf	??_waitFlag+2,w
  2991  039F                     u2205:	
  2992  039F  1D03               	skipz
  2993  03A0  2D64               	goto	l2905
  2994                           
  2995                           ;decode_AX25.c: 83: dPacket[dPacketnum] = buf;
  2996  03A1  083C               	movf	waitFlag@buf,w
  2997  03A2  00F6               	movwf	??_waitFlag
  2998  03A3  0866               	movf	_dPacketnum,w
  2999  03A4  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3000  03A5  0084               	movwf	4
  3001  03A6  0876               	movf	??_waitFlag,w
  3002  03A7  1783               	bsf	3,7	;select IRP bank3
  3003  03A8  0080               	movwf	0
  3004                           
  3005                           ;decode_AX25.c: 84: dPacketnum ++;
  3006  03A9  3001               	movlw	1
  3007  03AA  07E6               	addwf	_dPacketnum,f
  3008  03AB  1803               	skipnc
  3009  03AC  0AE7               	incf	_dPacketnum+1,f
  3010  03AD  3000               	movlw	0
  3011  03AE  07E7               	addwf	_dPacketnum+1,f
  3012                           
  3013                           ;decode_AX25.c: 85: for(UINT j=0;j<8;j++){
  3014  03AF  01A2               	clrf	waitFlag@j
  3015  03B0  01A3               	clrf	waitFlag@j+1
  3016  03B1  3000               	movlw	0
  3017  03B2  0223               	subwf	waitFlag@j+1,w
  3018  03B3  3008               	movlw	8
  3019  03B4  1903               	skipnz
  3020  03B5  0222               	subwf	waitFlag@j,w
  3021  03B6  1803               	btfsc	3,0
  3022  03B7  2BE0               	goto	l2783
  3023  03B8                     l2769:	
  3024                           
  3025                           ;decode_AX25.c: 86: flag_judge = getbit();
  3026  03B8  120A  158A  2286  120A  118A  	fcall	_getbit
  3027  03BD  0871               	movf	?_getbit+1,w
  3028  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  3029  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  3030  03C0  00BB               	movwf	waitFlag@flag_judge+1
  3031  03C1  0870               	movf	?_getbit,w
  3032  03C2  00BA               	movwf	waitFlag@flag_judge
  3033                           
  3034                           ;decode_AX25.c: 87: buf = buf >> 1;
  3035  03C3  083C               	movf	waitFlag@buf,w
  3036  03C4  00F6               	movwf	??_waitFlag
  3037  03C5  1003               	clrc
  3038  03C6  0C76               	rrf	??_waitFlag,w
  3039  03C7  00F7               	movwf	??_waitFlag+1
  3040  03C8  0877               	movf	??_waitFlag+1,w
  3041  03C9  00BC               	movwf	waitFlag@buf
  3042                           
  3043                           ;decode_AX25.c: 89: buf = buf | 0x00;
  3044  03CA  083A               	movf	waitFlag@flag_judge,w
  3045  03CB  043B               	iorwf	waitFlag@flag_judge+1,w
  3046  03CC  1903               	btfsc	3,2
  3047  03CD  2BD3               	goto	l2779
  3048                           
  3049                           ;decode_AX25.c: 91: buf = buf | 0x80;
  3050                           
  3051                           ;decode_AX25.c: 90: }else{
  3052  03CE  083C               	movf	waitFlag@buf,w
  3053  03CF  3880               	iorlw	128
  3054  03D0  00F6               	movwf	??_waitFlag
  3055  03D1  0876               	movf	??_waitFlag,w
  3056  03D2  00BC               	movwf	waitFlag@buf
  3057  03D3                     l2779:	
  3058  03D3  3001               	movlw	1
  3059  03D4  07A2               	addwf	waitFlag@j,f
  3060  03D5  1803               	skipnc
  3061  03D6  0AA3               	incf	waitFlag@j+1,f
  3062  03D7  3000               	movlw	0
  3063  03D8  07A3               	addwf	waitFlag@j+1,f
  3064  03D9  3000               	movlw	0
  3065  03DA  0223               	subwf	waitFlag@j+1,w
  3066  03DB  3008               	movlw	8
  3067  03DC  1903               	skipnz
  3068  03DD  0222               	subwf	waitFlag@j,w
  3069  03DE  1C03               	skipc
  3070  03DF  2BB8               	goto	l2769
  3071  03E0                     l2783:	
  3072                           
  3073                           ;decode_AX25.c: 92: }
  3074                           ;decode_AX25.c: 93: }
  3075                           ;decode_AX25.c: 94: if(buf == ("JQ1YCZ"[1] << 1)){
  3076  03E0  3013               	movlw	low (((STR_1+1)-__stringbase)| (0+32768))
  3077  03E1  0084               	movwf	4
  3078  03E2  120A  158A  2000  120A  118A  	fcall	stringdir
  3079  03E7  00F6               	movwf	??_waitFlag
  3080  03E8  01F7               	clrf	??_waitFlag+1
  3081  03E9  1003               	clrc
  3082  03EA  0DF6               	rlf	??_waitFlag,f
  3083  03EB  0DF7               	rlf	??_waitFlag+1,f
  3084  03EC  083C               	movf	waitFlag@buf,w
  3085  03ED  00F8               	movwf	??_waitFlag+2
  3086  03EE  01F9               	clrf	??_waitFlag+3
  3087  03EF  0877               	movf	??_waitFlag+1,w
  3088  03F0  0679               	xorwf	??_waitFlag+3,w
  3089  03F1  1D03               	skipz
  3090  03F2  2BF5               	goto	u2245
  3091  03F3  0876               	movf	??_waitFlag,w
  3092  03F4  0678               	xorwf	??_waitFlag+2,w
  3093  03F5                     u2245:	
  3094  03F5  1D03               	skipz
  3095  03F6  2D64               	goto	l2905
  3096                           
  3097                           ;decode_AX25.c: 95: dPacket[dPacketnum] = buf;
  3098  03F7  083C               	movf	waitFlag@buf,w
  3099  03F8  00F6               	movwf	??_waitFlag
  3100  03F9  0866               	movf	_dPacketnum,w
  3101  03FA  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3102  03FB  0084               	movwf	4
  3103  03FC  0876               	movf	??_waitFlag,w
  3104  03FD  1783               	bsf	3,7	;select IRP bank3
  3105  03FE  0080               	movwf	0
  3106                           
  3107                           ;decode_AX25.c: 96: dPacketnum ++;
  3108  03FF  3001               	movlw	1
  3109  0400  07E6               	addwf	_dPacketnum,f
  3110  0401  1803               	skipnc
  3111  0402  0AE7               	incf	_dPacketnum+1,f
  3112  0403  3000               	movlw	0
  3113  0404  07E7               	addwf	_dPacketnum+1,f
  3114                           
  3115                           ;decode_AX25.c: 97: for(UINT j=0;j<8;j++){
  3116  0405  01A4               	clrf	waitFlag@j_111
  3117  0406  01A5               	clrf	waitFlag@j_111+1
  3118  0407  3000               	movlw	0
  3119  0408  0225               	subwf	waitFlag@j_111+1,w
  3120  0409  3008               	movlw	8
  3121  040A  1903               	skipnz
  3122  040B  0224               	subwf	waitFlag@j_111,w
  3123  040C  1803               	btfsc	3,0
  3124  040D  2C36               	goto	l2809
  3125  040E                     l2795:	
  3126                           
  3127                           ;decode_AX25.c: 98: flag_judge = getbit();
  3128  040E  120A  158A  2286  120A  118A  	fcall	_getbit
  3129  0413  0871               	movf	?_getbit+1,w
  3130  0414  1283               	bcf	3,5	;RP0=0, select bank0
  3131  0415  1303               	bcf	3,6	;RP1=0, select bank0
  3132  0416  00BB               	movwf	waitFlag@flag_judge+1
  3133  0417  0870               	movf	?_getbit,w
  3134  0418  00BA               	movwf	waitFlag@flag_judge
  3135                           
  3136                           ;decode_AX25.c: 99: buf = buf >> 1;
  3137  0419  083C               	movf	waitFlag@buf,w
  3138  041A  00F6               	movwf	??_waitFlag
  3139  041B  1003               	clrc
  3140  041C  0C76               	rrf	??_waitFlag,w
  3141  041D  00F7               	movwf	??_waitFlag+1
  3142  041E  0877               	movf	??_waitFlag+1,w
  3143  041F  00BC               	movwf	waitFlag@buf
  3144                           
  3145                           ;decode_AX25.c: 101: buf = buf | 0x00;
  3146  0420  083A               	movf	waitFlag@flag_judge,w
  3147  0421  043B               	iorwf	waitFlag@flag_judge+1,w
  3148  0422  1903               	btfsc	3,2
  3149  0423  2C29               	goto	l2805
  3150                           
  3151                           ;decode_AX25.c: 103: buf = buf | 0x80;
  3152                           
  3153                           ;decode_AX25.c: 102: }else{
  3154  0424  083C               	movf	waitFlag@buf,w
  3155  0425  3880               	iorlw	128
  3156  0426  00F6               	movwf	??_waitFlag
  3157  0427  0876               	movf	??_waitFlag,w
  3158  0428  00BC               	movwf	waitFlag@buf
  3159  0429                     l2805:	
  3160  0429  3001               	movlw	1
  3161  042A  07A4               	addwf	waitFlag@j_111,f
  3162  042B  1803               	skipnc
  3163  042C  0AA5               	incf	waitFlag@j_111+1,f
  3164  042D  3000               	movlw	0
  3165  042E  07A5               	addwf	waitFlag@j_111+1,f
  3166  042F  3000               	movlw	0
  3167  0430  0225               	subwf	waitFlag@j_111+1,w
  3168  0431  3008               	movlw	8
  3169  0432  1903               	skipnz
  3170  0433  0224               	subwf	waitFlag@j_111,w
  3171  0434  1C03               	skipc
  3172  0435  2C0E               	goto	l2795
  3173  0436                     l2809:	
  3174                           
  3175                           ;decode_AX25.c: 104: }
  3176                           ;decode_AX25.c: 105: }
  3177                           ;decode_AX25.c: 106: if(buf == ("JQ1YCZ"[2] << 1)){
  3178  0436  3014               	movlw	low (((STR_1+2)-__stringbase)| (0+32768))
  3179  0437  0084               	movwf	4
  3180  0438  120A  158A  2000  120A  118A  	fcall	stringdir
  3181  043D  00F6               	movwf	??_waitFlag
  3182  043E  01F7               	clrf	??_waitFlag+1
  3183  043F  1003               	clrc
  3184  0440  0DF6               	rlf	??_waitFlag,f
  3185  0441  0DF7               	rlf	??_waitFlag+1,f
  3186  0442  083C               	movf	waitFlag@buf,w
  3187  0443  00F8               	movwf	??_waitFlag+2
  3188  0444  01F9               	clrf	??_waitFlag+3
  3189  0445  0877               	movf	??_waitFlag+1,w
  3190  0446  0679               	xorwf	??_waitFlag+3,w
  3191  0447  1D03               	skipz
  3192  0448  2C4B               	goto	u2285
  3193  0449  0876               	movf	??_waitFlag,w
  3194  044A  0678               	xorwf	??_waitFlag+2,w
  3195  044B                     u2285:	
  3196  044B  1D03               	skipz
  3197  044C  2D64               	goto	l2905
  3198                           
  3199                           ;decode_AX25.c: 107: dPacket[dPacketnum] = buf;
  3200  044D  083C               	movf	waitFlag@buf,w
  3201  044E  00F6               	movwf	??_waitFlag
  3202  044F  0866               	movf	_dPacketnum,w
  3203  0450  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3204  0451  0084               	movwf	4
  3205  0452  0876               	movf	??_waitFlag,w
  3206  0453  1783               	bsf	3,7	;select IRP bank3
  3207  0454  0080               	movwf	0
  3208                           
  3209                           ;decode_AX25.c: 108: dPacketnum ++;
  3210  0455  3001               	movlw	1
  3211  0456  07E6               	addwf	_dPacketnum,f
  3212  0457  1803               	skipnc
  3213  0458  0AE7               	incf	_dPacketnum+1,f
  3214  0459  3000               	movlw	0
  3215  045A  07E7               	addwf	_dPacketnum+1,f
  3216                           
  3217                           ;decode_AX25.c: 109: for(UINT j=0;j<8;j++){
  3218  045B  01A6               	clrf	waitFlag@j_113
  3219  045C  01A7               	clrf	waitFlag@j_113+1
  3220  045D  3000               	movlw	0
  3221  045E  0227               	subwf	waitFlag@j_113+1,w
  3222  045F  3008               	movlw	8
  3223  0460  1903               	skipnz
  3224  0461  0226               	subwf	waitFlag@j_113,w
  3225  0462  1803               	btfsc	3,0
  3226  0463  2C8C               	goto	l2835
  3227  0464                     l2821:	
  3228                           
  3229                           ;decode_AX25.c: 110: flag_judge = getbit();
  3230  0464  120A  158A  2286  120A  118A  	fcall	_getbit
  3231  0469  0871               	movf	?_getbit+1,w
  3232  046A  1283               	bcf	3,5	;RP0=0, select bank0
  3233  046B  1303               	bcf	3,6	;RP1=0, select bank0
  3234  046C  00BB               	movwf	waitFlag@flag_judge+1
  3235  046D  0870               	movf	?_getbit,w
  3236  046E  00BA               	movwf	waitFlag@flag_judge
  3237                           
  3238                           ;decode_AX25.c: 111: buf = buf >> 1;
  3239  046F  083C               	movf	waitFlag@buf,w
  3240  0470  00F6               	movwf	??_waitFlag
  3241  0471  1003               	clrc
  3242  0472  0C76               	rrf	??_waitFlag,w
  3243  0473  00F7               	movwf	??_waitFlag+1
  3244  0474  0877               	movf	??_waitFlag+1,w
  3245  0475  00BC               	movwf	waitFlag@buf
  3246                           
  3247                           ;decode_AX25.c: 113: buf = buf | 0x00;
  3248  0476  083A               	movf	waitFlag@flag_judge,w
  3249  0477  043B               	iorwf	waitFlag@flag_judge+1,w
  3250  0478  1903               	btfsc	3,2
  3251  0479  2C7F               	goto	l2831
  3252                           
  3253                           ;decode_AX25.c: 115: buf = buf | 0x80;
  3254                           
  3255                           ;decode_AX25.c: 114: }else{
  3256  047A  083C               	movf	waitFlag@buf,w
  3257  047B  3880               	iorlw	128
  3258  047C  00F6               	movwf	??_waitFlag
  3259  047D  0876               	movf	??_waitFlag,w
  3260  047E  00BC               	movwf	waitFlag@buf
  3261  047F                     l2831:	
  3262  047F  3001               	movlw	1
  3263  0480  07A6               	addwf	waitFlag@j_113,f
  3264  0481  1803               	skipnc
  3265  0482  0AA7               	incf	waitFlag@j_113+1,f
  3266  0483  3000               	movlw	0
  3267  0484  07A7               	addwf	waitFlag@j_113+1,f
  3268  0485  3000               	movlw	0
  3269  0486  0227               	subwf	waitFlag@j_113+1,w
  3270  0487  3008               	movlw	8
  3271  0488  1903               	skipnz
  3272  0489  0226               	subwf	waitFlag@j_113,w
  3273  048A  1C03               	skipc
  3274  048B  2C64               	goto	l2821
  3275  048C                     l2835:	
  3276                           
  3277                           ;decode_AX25.c: 116: }
  3278                           ;decode_AX25.c: 117: }
  3279                           ;decode_AX25.c: 118: if(buf == ("JQ1YCZ"[3] << 1)){
  3280  048C  3015               	movlw	low (((STR_1+3)-__stringbase)| (0+32768))
  3281  048D  0084               	movwf	4
  3282  048E  120A  158A  2000  120A  118A  	fcall	stringdir
  3283  0493  00F6               	movwf	??_waitFlag
  3284  0494  01F7               	clrf	??_waitFlag+1
  3285  0495  1003               	clrc
  3286  0496  0DF6               	rlf	??_waitFlag,f
  3287  0497  0DF7               	rlf	??_waitFlag+1,f
  3288  0498  083C               	movf	waitFlag@buf,w
  3289  0499  00F8               	movwf	??_waitFlag+2
  3290  049A  01F9               	clrf	??_waitFlag+3
  3291  049B  0877               	movf	??_waitFlag+1,w
  3292  049C  0679               	xorwf	??_waitFlag+3,w
  3293  049D  1D03               	skipz
  3294  049E  2CA1               	goto	u2325
  3295  049F  0876               	movf	??_waitFlag,w
  3296  04A0  0678               	xorwf	??_waitFlag+2,w
  3297  04A1                     u2325:	
  3298  04A1  1D03               	skipz
  3299  04A2  2D64               	goto	l2905
  3300                           
  3301                           ;decode_AX25.c: 119: dPacket[dPacketnum] = buf;
  3302  04A3  083C               	movf	waitFlag@buf,w
  3303  04A4  00F6               	movwf	??_waitFlag
  3304  04A5  0866               	movf	_dPacketnum,w
  3305  04A6  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3306  04A7  0084               	movwf	4
  3307  04A8  0876               	movf	??_waitFlag,w
  3308  04A9  1783               	bsf	3,7	;select IRP bank3
  3309  04AA  0080               	movwf	0
  3310                           
  3311                           ;decode_AX25.c: 120: dPacketnum ++;
  3312  04AB  3001               	movlw	1
  3313  04AC  07E6               	addwf	_dPacketnum,f
  3314  04AD  1803               	skipnc
  3315  04AE  0AE7               	incf	_dPacketnum+1,f
  3316  04AF  3000               	movlw	0
  3317  04B0  07E7               	addwf	_dPacketnum+1,f
  3318                           
  3319                           ;decode_AX25.c: 121: for(UINT j=0;j<8;j++){
  3320  04B1  01A8               	clrf	waitFlag@j_115
  3321  04B2  01A9               	clrf	waitFlag@j_115+1
  3322  04B3  3000               	movlw	0
  3323  04B4  0229               	subwf	waitFlag@j_115+1,w
  3324  04B5  3008               	movlw	8
  3325  04B6  1903               	skipnz
  3326  04B7  0228               	subwf	waitFlag@j_115,w
  3327  04B8  1803               	btfsc	3,0
  3328  04B9  2CE2               	goto	l2861
  3329  04BA                     l2847:	
  3330                           
  3331                           ;decode_AX25.c: 122: flag_judge = getbit();
  3332  04BA  120A  158A  2286  120A  118A  	fcall	_getbit
  3333  04BF  0871               	movf	?_getbit+1,w
  3334  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  3335  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  3336  04C2  00BB               	movwf	waitFlag@flag_judge+1
  3337  04C3  0870               	movf	?_getbit,w
  3338  04C4  00BA               	movwf	waitFlag@flag_judge
  3339                           
  3340                           ;decode_AX25.c: 123: buf = buf >> 1;
  3341  04C5  083C               	movf	waitFlag@buf,w
  3342  04C6  00F6               	movwf	??_waitFlag
  3343  04C7  1003               	clrc
  3344  04C8  0C76               	rrf	??_waitFlag,w
  3345  04C9  00F7               	movwf	??_waitFlag+1
  3346  04CA  0877               	movf	??_waitFlag+1,w
  3347  04CB  00BC               	movwf	waitFlag@buf
  3348                           
  3349                           ;decode_AX25.c: 125: buf = buf | 0x00;
  3350  04CC  083A               	movf	waitFlag@flag_judge,w
  3351  04CD  043B               	iorwf	waitFlag@flag_judge+1,w
  3352  04CE  1903               	btfsc	3,2
  3353  04CF  2CD5               	goto	l2857
  3354                           
  3355                           ;decode_AX25.c: 127: buf = buf | 0x80;
  3356                           
  3357                           ;decode_AX25.c: 126: }else{
  3358  04D0  083C               	movf	waitFlag@buf,w
  3359  04D1  3880               	iorlw	128
  3360  04D2  00F6               	movwf	??_waitFlag
  3361  04D3  0876               	movf	??_waitFlag,w
  3362  04D4  00BC               	movwf	waitFlag@buf
  3363  04D5                     l2857:	
  3364  04D5  3001               	movlw	1
  3365  04D6  07A8               	addwf	waitFlag@j_115,f
  3366  04D7  1803               	skipnc
  3367  04D8  0AA9               	incf	waitFlag@j_115+1,f
  3368  04D9  3000               	movlw	0
  3369  04DA  07A9               	addwf	waitFlag@j_115+1,f
  3370  04DB  3000               	movlw	0
  3371  04DC  0229               	subwf	waitFlag@j_115+1,w
  3372  04DD  3008               	movlw	8
  3373  04DE  1903               	skipnz
  3374  04DF  0228               	subwf	waitFlag@j_115,w
  3375  04E0  1C03               	skipc
  3376  04E1  2CBA               	goto	l2847
  3377  04E2                     l2861:	
  3378                           
  3379                           ;decode_AX25.c: 128: }
  3380                           ;decode_AX25.c: 129: }
  3381                           ;decode_AX25.c: 130: if(buf == ("JQ1YCZ"[4] << 1)){
  3382  04E2  3016               	movlw	low (((STR_1+4)-__stringbase)| (0+32768))
  3383  04E3  0084               	movwf	4
  3384  04E4  120A  158A  2000  120A  118A  	fcall	stringdir
  3385  04E9  00F6               	movwf	??_waitFlag
  3386  04EA  01F7               	clrf	??_waitFlag+1
  3387  04EB  1003               	clrc
  3388  04EC  0DF6               	rlf	??_waitFlag,f
  3389  04ED  0DF7               	rlf	??_waitFlag+1,f
  3390  04EE  083C               	movf	waitFlag@buf,w
  3391  04EF  00F8               	movwf	??_waitFlag+2
  3392  04F0  01F9               	clrf	??_waitFlag+3
  3393  04F1  0877               	movf	??_waitFlag+1,w
  3394  04F2  0679               	xorwf	??_waitFlag+3,w
  3395  04F3  1D03               	skipz
  3396  04F4  2CF7               	goto	u2365
  3397  04F5  0876               	movf	??_waitFlag,w
  3398  04F6  0678               	xorwf	??_waitFlag+2,w
  3399  04F7                     u2365:	
  3400  04F7  1D03               	skipz
  3401  04F8  2D64               	goto	l2905
  3402                           
  3403                           ;decode_AX25.c: 131: dPacket[dPacketnum] = buf;
  3404  04F9  083C               	movf	waitFlag@buf,w
  3405  04FA  00F6               	movwf	??_waitFlag
  3406  04FB  0866               	movf	_dPacketnum,w
  3407  04FC  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3408  04FD  0084               	movwf	4
  3409  04FE  0876               	movf	??_waitFlag,w
  3410  04FF  1783               	bsf	3,7	;select IRP bank3
  3411  0500  0080               	movwf	0
  3412                           
  3413                           ;decode_AX25.c: 132: dPacketnum ++;
  3414  0501  3001               	movlw	1
  3415  0502  07E6               	addwf	_dPacketnum,f
  3416  0503  1803               	skipnc
  3417  0504  0AE7               	incf	_dPacketnum+1,f
  3418  0505  3000               	movlw	0
  3419  0506  07E7               	addwf	_dPacketnum+1,f
  3420                           
  3421                           ;decode_AX25.c: 133: for(UINT j=0;j<8;j++){
  3422  0507  01AA               	clrf	waitFlag@j_117
  3423  0508  01AB               	clrf	waitFlag@j_117+1
  3424  0509  3000               	movlw	0
  3425  050A  022B               	subwf	waitFlag@j_117+1,w
  3426  050B  3008               	movlw	8
  3427  050C  1903               	skipnz
  3428  050D  022A               	subwf	waitFlag@j_117,w
  3429  050E  1803               	btfsc	3,0
  3430  050F  2D38               	goto	l2887
  3431  0510                     l2873:	
  3432                           
  3433                           ;decode_AX25.c: 134: flag_judge = getbit();
  3434  0510  120A  158A  2286  120A  118A  	fcall	_getbit
  3435  0515  0871               	movf	?_getbit+1,w
  3436  0516  1283               	bcf	3,5	;RP0=0, select bank0
  3437  0517  1303               	bcf	3,6	;RP1=0, select bank0
  3438  0518  00BB               	movwf	waitFlag@flag_judge+1
  3439  0519  0870               	movf	?_getbit,w
  3440  051A  00BA               	movwf	waitFlag@flag_judge
  3441                           
  3442                           ;decode_AX25.c: 135: buf = buf >> 1;
  3443  051B  083C               	movf	waitFlag@buf,w
  3444  051C  00F6               	movwf	??_waitFlag
  3445  051D  1003               	clrc
  3446  051E  0C76               	rrf	??_waitFlag,w
  3447  051F  00F7               	movwf	??_waitFlag+1
  3448  0520  0877               	movf	??_waitFlag+1,w
  3449  0521  00BC               	movwf	waitFlag@buf
  3450                           
  3451                           ;decode_AX25.c: 137: buf = buf | 0x00;
  3452  0522  083A               	movf	waitFlag@flag_judge,w
  3453  0523  043B               	iorwf	waitFlag@flag_judge+1,w
  3454  0524  1903               	btfsc	3,2
  3455  0525  2D2B               	goto	l2883
  3456                           
  3457                           ;decode_AX25.c: 139: buf = buf | 0x80;
  3458                           
  3459                           ;decode_AX25.c: 138: }else{
  3460  0526  083C               	movf	waitFlag@buf,w
  3461  0527  3880               	iorlw	128
  3462  0528  00F6               	movwf	??_waitFlag
  3463  0529  0876               	movf	??_waitFlag,w
  3464  052A  00BC               	movwf	waitFlag@buf
  3465  052B                     l2883:	
  3466  052B  3001               	movlw	1
  3467  052C  07AA               	addwf	waitFlag@j_117,f
  3468  052D  1803               	skipnc
  3469  052E  0AAB               	incf	waitFlag@j_117+1,f
  3470  052F  3000               	movlw	0
  3471  0530  07AB               	addwf	waitFlag@j_117+1,f
  3472  0531  3000               	movlw	0
  3473  0532  022B               	subwf	waitFlag@j_117+1,w
  3474  0533  3008               	movlw	8
  3475  0534  1903               	skipnz
  3476  0535  022A               	subwf	waitFlag@j_117,w
  3477  0536  1C03               	skipc
  3478  0537  2D10               	goto	l2873
  3479  0538                     l2887:	
  3480                           
  3481                           ;decode_AX25.c: 140: }
  3482                           ;decode_AX25.c: 141: }
  3483                           ;decode_AX25.c: 142: if(buf == ("JQ1YCZ"[5] << 1)){
  3484  0538  3017               	movlw	low (((STR_1+5)-__stringbase)| (0+32768))
  3485  0539  0084               	movwf	4
  3486  053A  120A  158A  2000  120A  118A  	fcall	stringdir
  3487  053F  00F6               	movwf	??_waitFlag
  3488  0540  01F7               	clrf	??_waitFlag+1
  3489  0541  1003               	clrc
  3490  0542  0DF6               	rlf	??_waitFlag,f
  3491  0543  0DF7               	rlf	??_waitFlag+1,f
  3492  0544  083C               	movf	waitFlag@buf,w
  3493  0545  00F8               	movwf	??_waitFlag+2
  3494  0546  01F9               	clrf	??_waitFlag+3
  3495  0547  0877               	movf	??_waitFlag+1,w
  3496  0548  0679               	xorwf	??_waitFlag+3,w
  3497  0549  1D03               	skipz
  3498  054A  2D4D               	goto	u2405
  3499  054B  0876               	movf	??_waitFlag,w
  3500  054C  0678               	xorwf	??_waitFlag+2,w
  3501  054D                     u2405:	
  3502  054D  1D03               	skipz
  3503  054E  2D64               	goto	l2905
  3504                           
  3505                           ;decode_AX25.c: 143: dPacket[dPacketnum] = buf;
  3506  054F  083C               	movf	waitFlag@buf,w
  3507  0550  00F6               	movwf	??_waitFlag
  3508  0551  0866               	movf	_dPacketnum,w
  3509  0552  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3510  0553  0084               	movwf	4
  3511  0554  0876               	movf	??_waitFlag,w
  3512  0555  1783               	bsf	3,7	;select IRP bank3
  3513  0556  0080               	movwf	0
  3514                           
  3515                           ;decode_AX25.c: 144: dPacketnum ++;
  3516  0557  3001               	movlw	1
  3517  0558  07E6               	addwf	_dPacketnum,f
  3518  0559  1803               	skipnc
  3519  055A  0AE7               	incf	_dPacketnum+1,f
  3520  055B  3000               	movlw	0
  3521  055C  07E7               	addwf	_dPacketnum+1,f
  3522                           
  3523                           ;decode_AX25.c: 145: rcv_state ++;
  3524  055D  3001               	movlw	1
  3525  055E  07EA               	addwf	_rcv_state,f
  3526  055F  1803               	skipnc
  3527  0560  0AEB               	incf	_rcv_state+1,f
  3528  0561  3000               	movlw	0
  3529  0562  07EB               	addwf	_rcv_state+1,f
  3530                           
  3531                           ;decode_AX25.c: 146: }else{
  3532  0563  2D66               	goto	l207
  3533  0564                     l2905:	
  3534                           ;decode_AX25.c: 160: }
  3535                           ;decode_AX25.c: 161: }else{
  3536                           
  3537                           ;decode_AX25.c: 159: dPacketnum = 0;
  3538                           
  3539                           ;decode_AX25.c: 157: }
  3540                           ;decode_AX25.c: 158: }else{
  3541                           
  3542                           ;decode_AX25.c: 156: dPacketnum = 0;
  3543                           
  3544                           ;decode_AX25.c: 154: }
  3545                           ;decode_AX25.c: 155: }else{
  3546                           
  3547                           ;decode_AX25.c: 153: dPacketnum = 0;
  3548                           
  3549                           ;decode_AX25.c: 151: }
  3550                           ;decode_AX25.c: 152: }else{
  3551                           
  3552                           ;decode_AX25.c: 150: dPacketnum = 0;
  3553                           
  3554                           ;decode_AX25.c: 148: }
  3555                           ;decode_AX25.c: 149: }else{
  3556                           
  3557                           ;decode_AX25.c: 147: dPacketnum = 0;
  3558                           
  3559                           
  3560                           ;decode_AX25.c: 162: dPacketnum = 0;
  3561  0564  01E6               	clrf	_dPacketnum
  3562  0565  01E7               	clrf	_dPacketnum+1
  3563  0566                     l207:	
  3564                           
  3565                           ;decode_AX25.c: 163: }
  3566                           ;decode_AX25.c: 165: for(UINT j=0;j<8;j++){
  3567  0566  01AC               	clrf	waitFlag@j_119
  3568  0567  01AD               	clrf	waitFlag@j_119+1
  3569  0568  3000               	movlw	0
  3570  0569  022D               	subwf	waitFlag@j_119+1,w
  3571  056A  3008               	movlw	8
  3572  056B  1903               	skipnz
  3573  056C  022C               	subwf	waitFlag@j_119,w
  3574  056D  1803               	btfsc	3,0
  3575  056E  2D97               	goto	l2925
  3576  056F                     l2911:	
  3577                           
  3578                           ;decode_AX25.c: 166: flag_judge = getbit();
  3579  056F  120A  158A  2286  120A  118A  	fcall	_getbit
  3580  0574  0871               	movf	?_getbit+1,w
  3581  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3582  0576  1303               	bcf	3,6	;RP1=0, select bank0
  3583  0577  00BB               	movwf	waitFlag@flag_judge+1
  3584  0578  0870               	movf	?_getbit,w
  3585  0579  00BA               	movwf	waitFlag@flag_judge
  3586                           
  3587                           ;decode_AX25.c: 167: buf = buf >> 1;
  3588  057A  083C               	movf	waitFlag@buf,w
  3589  057B  00F6               	movwf	??_waitFlag
  3590  057C  1003               	clrc
  3591  057D  0C76               	rrf	??_waitFlag,w
  3592  057E  00F7               	movwf	??_waitFlag+1
  3593  057F  0877               	movf	??_waitFlag+1,w
  3594  0580  00BC               	movwf	waitFlag@buf
  3595                           
  3596                           ;decode_AX25.c: 169: buf = buf | 0x00;
  3597  0581  083A               	movf	waitFlag@flag_judge,w
  3598  0582  043B               	iorwf	waitFlag@flag_judge+1,w
  3599  0583  1903               	btfsc	3,2
  3600  0584  2D8A               	goto	l2921
  3601                           
  3602                           ;decode_AX25.c: 171: buf = buf | 0x80;
  3603                           
  3604                           ;decode_AX25.c: 170: }else{
  3605  0585  083C               	movf	waitFlag@buf,w
  3606  0586  3880               	iorlw	128
  3607  0587  00F6               	movwf	??_waitFlag
  3608  0588  0876               	movf	??_waitFlag,w
  3609  0589  00BC               	movwf	waitFlag@buf
  3610  058A                     l2921:	
  3611  058A  3001               	movlw	1
  3612  058B  07AC               	addwf	waitFlag@j_119,f
  3613  058C  1803               	skipnc
  3614  058D  0AAD               	incf	waitFlag@j_119+1,f
  3615  058E  3000               	movlw	0
  3616  058F  07AD               	addwf	waitFlag@j_119+1,f
  3617  0590  3000               	movlw	0
  3618  0591  022D               	subwf	waitFlag@j_119+1,w
  3619  0592  3008               	movlw	8
  3620  0593  1903               	skipnz
  3621  0594  022C               	subwf	waitFlag@j_119,w
  3622  0595  1C03               	skipc
  3623  0596  2D6F               	goto	l2911
  3624  0597                     l2925:	
  3625                           
  3626                           ;decode_AX25.c: 172: }
  3627                           ;decode_AX25.c: 173: }
  3628                           ;decode_AX25.c: 174: dPacket[dPacketnum] = buf;
  3629  0597  083C               	movf	waitFlag@buf,w
  3630  0598  00F6               	movwf	??_waitFlag
  3631  0599  0866               	movf	_dPacketnum,w
  3632  059A  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3633  059B  0084               	movwf	4
  3634  059C  0876               	movf	??_waitFlag,w
  3635  059D  1783               	bsf	3,7	;select IRP bank3
  3636  059E  0080               	movwf	0
  3637                           
  3638                           ;decode_AX25.c: 175: dPacketnum ++;
  3639  059F  3001               	movlw	1
  3640  05A0  07E6               	addwf	_dPacketnum,f
  3641  05A1  1803               	skipnc
  3642  05A2  0AE7               	incf	_dPacketnum+1,f
  3643  05A3  3000               	movlw	0
  3644  05A4  07E7               	addwf	_dPacketnum+1,f
  3645                           
  3646                           ;decode_AX25.c: 176: for(UINT j=0;j<8;j++){
  3647  05A5  01AE               	clrf	waitFlag@j_120
  3648  05A6  01AF               	clrf	waitFlag@j_120+1
  3649  05A7  3000               	movlw	0
  3650  05A8  022F               	subwf	waitFlag@j_120+1,w
  3651  05A9  3008               	movlw	8
  3652  05AA  1903               	skipnz
  3653  05AB  022E               	subwf	waitFlag@j_120,w
  3654  05AC  1803               	btfsc	3,0
  3655  05AD  2DD6               	goto	l2949
  3656  05AE                     l2935:	
  3657                           
  3658                           ;decode_AX25.c: 177: flag_judge = getbit();
  3659  05AE  120A  158A  2286  120A  118A  	fcall	_getbit
  3660  05B3  0871               	movf	?_getbit+1,w
  3661  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  3662  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  3663  05B6  00BB               	movwf	waitFlag@flag_judge+1
  3664  05B7  0870               	movf	?_getbit,w
  3665  05B8  00BA               	movwf	waitFlag@flag_judge
  3666                           
  3667                           ;decode_AX25.c: 178: buf = buf >> 1;
  3668  05B9  083C               	movf	waitFlag@buf,w
  3669  05BA  00F6               	movwf	??_waitFlag
  3670  05BB  1003               	clrc
  3671  05BC  0C76               	rrf	??_waitFlag,w
  3672  05BD  00F7               	movwf	??_waitFlag+1
  3673  05BE  0877               	movf	??_waitFlag+1,w
  3674  05BF  00BC               	movwf	waitFlag@buf
  3675                           
  3676                           ;decode_AX25.c: 180: buf = buf | 0x00;
  3677  05C0  083A               	movf	waitFlag@flag_judge,w
  3678  05C1  043B               	iorwf	waitFlag@flag_judge+1,w
  3679  05C2  1903               	btfsc	3,2
  3680  05C3  2DC9               	goto	l2945
  3681                           
  3682                           ;decode_AX25.c: 182: buf = buf | 0x80;
  3683                           
  3684                           ;decode_AX25.c: 181: }else{
  3685  05C4  083C               	movf	waitFlag@buf,w
  3686  05C5  3880               	iorlw	128
  3687  05C6  00F6               	movwf	??_waitFlag
  3688  05C7  0876               	movf	??_waitFlag,w
  3689  05C8  00BC               	movwf	waitFlag@buf
  3690  05C9                     l2945:	
  3691  05C9  3001               	movlw	1
  3692  05CA  07AE               	addwf	waitFlag@j_120,f
  3693  05CB  1803               	skipnc
  3694  05CC  0AAF               	incf	waitFlag@j_120+1,f
  3695  05CD  3000               	movlw	0
  3696  05CE  07AF               	addwf	waitFlag@j_120+1,f
  3697  05CF  3000               	movlw	0
  3698  05D0  022F               	subwf	waitFlag@j_120+1,w
  3699  05D1  3008               	movlw	8
  3700  05D2  1903               	skipnz
  3701  05D3  022E               	subwf	waitFlag@j_120,w
  3702  05D4  1C03               	skipc
  3703  05D5  2DAE               	goto	l2935
  3704  05D6                     l2949:	
  3705                           
  3706                           ;decode_AX25.c: 183: }
  3707                           ;decode_AX25.c: 184: }
  3708                           ;decode_AX25.c: 185: if(buf == ("JQ1ZHX"[0] << 1)){
  3709  05D6  300B               	movlw	low (STR_7-__stringbase)
  3710  05D7  0084               	movwf	4
  3711  05D8  120A  158A  2000  120A  118A  	fcall	stringdir
  3712  05DD  00F6               	movwf	??_waitFlag
  3713  05DE  01F7               	clrf	??_waitFlag+1
  3714  05DF  1003               	clrc
  3715  05E0  0DF6               	rlf	??_waitFlag,f
  3716  05E1  0DF7               	rlf	??_waitFlag+1,f
  3717  05E2  083C               	movf	waitFlag@buf,w
  3718  05E3  00F8               	movwf	??_waitFlag+2
  3719  05E4  01F9               	clrf	??_waitFlag+3
  3720  05E5  0877               	movf	??_waitFlag+1,w
  3721  05E6  0679               	xorwf	??_waitFlag+3,w
  3722  05E7  1D03               	skipz
  3723  05E8  2DEB               	goto	u2475
  3724  05E9  0876               	movf	??_waitFlag,w
  3725  05EA  0678               	xorwf	??_waitFlag+2,w
  3726  05EB                     u2475:	
  3727  05EB  1D03               	skipz
  3728  05EC  2FB0               	goto	l3097
  3729                           
  3730                           ;decode_AX25.c: 186: dPacket[dPacketnum] = buf;
  3731  05ED  083C               	movf	waitFlag@buf,w
  3732  05EE  00F6               	movwf	??_waitFlag
  3733  05EF  0866               	movf	_dPacketnum,w
  3734  05F0  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3735  05F1  0084               	movwf	4
  3736  05F2  0876               	movf	??_waitFlag,w
  3737  05F3  1783               	bsf	3,7	;select IRP bank3
  3738  05F4  0080               	movwf	0
  3739                           
  3740                           ;decode_AX25.c: 187: dPacketnum ++;
  3741  05F5  3001               	movlw	1
  3742  05F6  07E6               	addwf	_dPacketnum,f
  3743  05F7  1803               	skipnc
  3744  05F8  0AE7               	incf	_dPacketnum+1,f
  3745  05F9  3000               	movlw	0
  3746  05FA  07E7               	addwf	_dPacketnum+1,f
  3747                           
  3748                           ;decode_AX25.c: 188: for(UINT j=0;j<8;j++){
  3749  05FB  01B0               	clrf	waitFlag@j_122
  3750  05FC  01B1               	clrf	waitFlag@j_122+1
  3751  05FD  3000               	movlw	0
  3752  05FE  0231               	subwf	waitFlag@j_122+1,w
  3753  05FF  3008               	movlw	8
  3754  0600  1903               	skipnz
  3755  0601  0230               	subwf	waitFlag@j_122,w
  3756  0602  1803               	btfsc	3,0
  3757  0603  2E2C               	goto	l2975
  3758  0604                     l2961:	
  3759                           
  3760                           ;decode_AX25.c: 189: flag_judge = getbit();
  3761  0604  120A  158A  2286  120A  118A  	fcall	_getbit
  3762  0609  0871               	movf	?_getbit+1,w
  3763  060A  1283               	bcf	3,5	;RP0=0, select bank0
  3764  060B  1303               	bcf	3,6	;RP1=0, select bank0
  3765  060C  00BB               	movwf	waitFlag@flag_judge+1
  3766  060D  0870               	movf	?_getbit,w
  3767  060E  00BA               	movwf	waitFlag@flag_judge
  3768                           
  3769                           ;decode_AX25.c: 190: buf = buf >> 1;
  3770  060F  083C               	movf	waitFlag@buf,w
  3771  0610  00F6               	movwf	??_waitFlag
  3772  0611  1003               	clrc
  3773  0612  0C76               	rrf	??_waitFlag,w
  3774  0613  00F7               	movwf	??_waitFlag+1
  3775  0614  0877               	movf	??_waitFlag+1,w
  3776  0615  00BC               	movwf	waitFlag@buf
  3777                           
  3778                           ;decode_AX25.c: 192: buf = buf | 0x00;
  3779  0616  083A               	movf	waitFlag@flag_judge,w
  3780  0617  043B               	iorwf	waitFlag@flag_judge+1,w
  3781  0618  1903               	btfsc	3,2
  3782  0619  2E1F               	goto	l2971
  3783                           
  3784                           ;decode_AX25.c: 194: buf = buf | 0x80;
  3785                           
  3786                           ;decode_AX25.c: 193: }else{
  3787  061A  083C               	movf	waitFlag@buf,w
  3788  061B  3880               	iorlw	128
  3789  061C  00F6               	movwf	??_waitFlag
  3790  061D  0876               	movf	??_waitFlag,w
  3791  061E  00BC               	movwf	waitFlag@buf
  3792  061F                     l2971:	
  3793  061F  3001               	movlw	1
  3794  0620  07B0               	addwf	waitFlag@j_122,f
  3795  0621  1803               	skipnc
  3796  0622  0AB1               	incf	waitFlag@j_122+1,f
  3797  0623  3000               	movlw	0
  3798  0624  07B1               	addwf	waitFlag@j_122+1,f
  3799  0625  3000               	movlw	0
  3800  0626  0231               	subwf	waitFlag@j_122+1,w
  3801  0627  3008               	movlw	8
  3802  0628  1903               	skipnz
  3803  0629  0230               	subwf	waitFlag@j_122,w
  3804  062A  1C03               	skipc
  3805  062B  2E04               	goto	l2961
  3806  062C                     l2975:	
  3807                           
  3808                           ;decode_AX25.c: 195: }
  3809                           ;decode_AX25.c: 196: }
  3810                           ;decode_AX25.c: 197: if(buf == ("JQ1ZHX"[1] << 1)){
  3811  062C  300C               	movlw	low (((STR_7+1)-__stringbase)| (0+32768))
  3812  062D  0084               	movwf	4
  3813  062E  120A  158A  2000  120A  118A  	fcall	stringdir
  3814  0633  00F6               	movwf	??_waitFlag
  3815  0634  01F7               	clrf	??_waitFlag+1
  3816  0635  1003               	clrc
  3817  0636  0DF6               	rlf	??_waitFlag,f
  3818  0637  0DF7               	rlf	??_waitFlag+1,f
  3819  0638  083C               	movf	waitFlag@buf,w
  3820  0639  00F8               	movwf	??_waitFlag+2
  3821  063A  01F9               	clrf	??_waitFlag+3
  3822  063B  0877               	movf	??_waitFlag+1,w
  3823  063C  0679               	xorwf	??_waitFlag+3,w
  3824  063D  1D03               	skipz
  3825  063E  2E41               	goto	u2515
  3826  063F  0876               	movf	??_waitFlag,w
  3827  0640  0678               	xorwf	??_waitFlag+2,w
  3828  0641                     u2515:	
  3829  0641  1D03               	skipz
  3830  0642  2FB0               	goto	l3097
  3831                           
  3832                           ;decode_AX25.c: 198: dPacket[dPacketnum] = buf;
  3833  0643  083C               	movf	waitFlag@buf,w
  3834  0644  00F6               	movwf	??_waitFlag
  3835  0645  0866               	movf	_dPacketnum,w
  3836  0646  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3837  0647  0084               	movwf	4
  3838  0648  0876               	movf	??_waitFlag,w
  3839  0649  1783               	bsf	3,7	;select IRP bank3
  3840  064A  0080               	movwf	0
  3841                           
  3842                           ;decode_AX25.c: 199: dPacketnum ++;
  3843  064B  3001               	movlw	1
  3844  064C  07E6               	addwf	_dPacketnum,f
  3845  064D  1803               	skipnc
  3846  064E  0AE7               	incf	_dPacketnum+1,f
  3847  064F  3000               	movlw	0
  3848  0650  07E7               	addwf	_dPacketnum+1,f
  3849                           
  3850                           ;decode_AX25.c: 200: for(UINT j=0;j<8;j++){
  3851  0651  01B2               	clrf	waitFlag@j_124
  3852  0652  01B3               	clrf	waitFlag@j_124+1
  3853  0653  3000               	movlw	0
  3854  0654  0233               	subwf	waitFlag@j_124+1,w
  3855  0655  3008               	movlw	8
  3856  0656  1903               	skipnz
  3857  0657  0232               	subwf	waitFlag@j_124,w
  3858  0658  1803               	btfsc	3,0
  3859  0659  2E82               	goto	l3001
  3860  065A                     l2987:	
  3861                           
  3862                           ;decode_AX25.c: 201: flag_judge = getbit();
  3863  065A  120A  158A  2286  120A  118A  	fcall	_getbit
  3864  065F  0871               	movf	?_getbit+1,w
  3865  0660  1283               	bcf	3,5	;RP0=0, select bank0
  3866  0661  1303               	bcf	3,6	;RP1=0, select bank0
  3867  0662  00BB               	movwf	waitFlag@flag_judge+1
  3868  0663  0870               	movf	?_getbit,w
  3869  0664  00BA               	movwf	waitFlag@flag_judge
  3870                           
  3871                           ;decode_AX25.c: 202: buf = buf >> 1;
  3872  0665  083C               	movf	waitFlag@buf,w
  3873  0666  00F6               	movwf	??_waitFlag
  3874  0667  1003               	clrc
  3875  0668  0C76               	rrf	??_waitFlag,w
  3876  0669  00F7               	movwf	??_waitFlag+1
  3877  066A  0877               	movf	??_waitFlag+1,w
  3878  066B  00BC               	movwf	waitFlag@buf
  3879                           
  3880                           ;decode_AX25.c: 204: buf = buf | 0x00;
  3881  066C  083A               	movf	waitFlag@flag_judge,w
  3882  066D  043B               	iorwf	waitFlag@flag_judge+1,w
  3883  066E  1903               	btfsc	3,2
  3884  066F  2E75               	goto	l2997
  3885                           
  3886                           ;decode_AX25.c: 206: buf = buf | 0x80;
  3887                           
  3888                           ;decode_AX25.c: 205: }else{
  3889  0670  083C               	movf	waitFlag@buf,w
  3890  0671  3880               	iorlw	128
  3891  0672  00F6               	movwf	??_waitFlag
  3892  0673  0876               	movf	??_waitFlag,w
  3893  0674  00BC               	movwf	waitFlag@buf
  3894  0675                     l2997:	
  3895  0675  3001               	movlw	1
  3896  0676  07B2               	addwf	waitFlag@j_124,f
  3897  0677  1803               	skipnc
  3898  0678  0AB3               	incf	waitFlag@j_124+1,f
  3899  0679  3000               	movlw	0
  3900  067A  07B3               	addwf	waitFlag@j_124+1,f
  3901  067B  3000               	movlw	0
  3902  067C  0233               	subwf	waitFlag@j_124+1,w
  3903  067D  3008               	movlw	8
  3904  067E  1903               	skipnz
  3905  067F  0232               	subwf	waitFlag@j_124,w
  3906  0680  1C03               	skipc
  3907  0681  2E5A               	goto	l2987
  3908  0682                     l3001:	
  3909                           
  3910                           ;decode_AX25.c: 207: }
  3911                           ;decode_AX25.c: 208: }
  3912                           ;decode_AX25.c: 209: if(buf == ("JQ1ZHX"[2] << 1)){
  3913  0682  300D               	movlw	low (((STR_7+2)-__stringbase)| (0+32768))
  3914  0683  0084               	movwf	4
  3915  0684  120A  158A  2000  120A  118A  	fcall	stringdir
  3916  0689  00F6               	movwf	??_waitFlag
  3917  068A  01F7               	clrf	??_waitFlag+1
  3918  068B  1003               	clrc
  3919  068C  0DF6               	rlf	??_waitFlag,f
  3920  068D  0DF7               	rlf	??_waitFlag+1,f
  3921  068E  083C               	movf	waitFlag@buf,w
  3922  068F  00F8               	movwf	??_waitFlag+2
  3923  0690  01F9               	clrf	??_waitFlag+3
  3924  0691  0877               	movf	??_waitFlag+1,w
  3925  0692  0679               	xorwf	??_waitFlag+3,w
  3926  0693  1D03               	skipz
  3927  0694  2E97               	goto	u2555
  3928  0695  0876               	movf	??_waitFlag,w
  3929  0696  0678               	xorwf	??_waitFlag+2,w
  3930  0697                     u2555:	
  3931  0697  1D03               	skipz
  3932  0698  2FB0               	goto	l3097
  3933                           
  3934                           ;decode_AX25.c: 210: dPacket[dPacketnum] = buf;
  3935  0699  083C               	movf	waitFlag@buf,w
  3936  069A  00F6               	movwf	??_waitFlag
  3937  069B  0866               	movf	_dPacketnum,w
  3938  069C  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3939  069D  0084               	movwf	4
  3940  069E  0876               	movf	??_waitFlag,w
  3941  069F  1783               	bsf	3,7	;select IRP bank3
  3942  06A0  0080               	movwf	0
  3943                           
  3944                           ;decode_AX25.c: 211: dPacketnum ++;
  3945  06A1  3001               	movlw	1
  3946  06A2  07E6               	addwf	_dPacketnum,f
  3947  06A3  1803               	skipnc
  3948  06A4  0AE7               	incf	_dPacketnum+1,f
  3949  06A5  3000               	movlw	0
  3950  06A6  07E7               	addwf	_dPacketnum+1,f
  3951                           
  3952                           ;decode_AX25.c: 212: for(UINT j=0;j<8;j++){
  3953  06A7  01B4               	clrf	waitFlag@j_126
  3954  06A8  01B5               	clrf	waitFlag@j_126+1
  3955  06A9  3000               	movlw	0
  3956  06AA  0235               	subwf	waitFlag@j_126+1,w
  3957  06AB  3008               	movlw	8
  3958  06AC  1903               	skipnz
  3959  06AD  0234               	subwf	waitFlag@j_126,w
  3960  06AE  1803               	btfsc	3,0
  3961  06AF  2ED8               	goto	l3027
  3962  06B0                     l3013:	
  3963                           
  3964                           ;decode_AX25.c: 213: flag_judge = getbit();
  3965  06B0  120A  158A  2286  120A  118A  	fcall	_getbit
  3966  06B5  0871               	movf	?_getbit+1,w
  3967  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  3968  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  3969  06B8  00BB               	movwf	waitFlag@flag_judge+1
  3970  06B9  0870               	movf	?_getbit,w
  3971  06BA  00BA               	movwf	waitFlag@flag_judge
  3972                           
  3973                           ;decode_AX25.c: 214: buf = buf >> 1;
  3974  06BB  083C               	movf	waitFlag@buf,w
  3975  06BC  00F6               	movwf	??_waitFlag
  3976  06BD  1003               	clrc
  3977  06BE  0C76               	rrf	??_waitFlag,w
  3978  06BF  00F7               	movwf	??_waitFlag+1
  3979  06C0  0877               	movf	??_waitFlag+1,w
  3980  06C1  00BC               	movwf	waitFlag@buf
  3981                           
  3982                           ;decode_AX25.c: 216: buf = buf | 0x00;
  3983  06C2  083A               	movf	waitFlag@flag_judge,w
  3984  06C3  043B               	iorwf	waitFlag@flag_judge+1,w
  3985  06C4  1903               	btfsc	3,2
  3986  06C5  2ECB               	goto	l3023
  3987                           
  3988                           ;decode_AX25.c: 218: buf = buf | 0x80;
  3989                           
  3990                           ;decode_AX25.c: 217: }else{
  3991  06C6  083C               	movf	waitFlag@buf,w
  3992  06C7  3880               	iorlw	128
  3993  06C8  00F6               	movwf	??_waitFlag
  3994  06C9  0876               	movf	??_waitFlag,w
  3995  06CA  00BC               	movwf	waitFlag@buf
  3996  06CB                     l3023:	
  3997  06CB  3001               	movlw	1
  3998  06CC  07B4               	addwf	waitFlag@j_126,f
  3999  06CD  1803               	skipnc
  4000  06CE  0AB5               	incf	waitFlag@j_126+1,f
  4001  06CF  3000               	movlw	0
  4002  06D0  07B5               	addwf	waitFlag@j_126+1,f
  4003  06D1  3000               	movlw	0
  4004  06D2  0235               	subwf	waitFlag@j_126+1,w
  4005  06D3  3008               	movlw	8
  4006  06D4  1903               	skipnz
  4007  06D5  0234               	subwf	waitFlag@j_126,w
  4008  06D6  1C03               	skipc
  4009  06D7  2EB0               	goto	l3013
  4010  06D8                     l3027:	
  4011                           
  4012                           ;decode_AX25.c: 219: }
  4013                           ;decode_AX25.c: 220: }
  4014                           ;decode_AX25.c: 221: if(buf == ("JQ1ZHX"[3] << 1)){
  4015  06D8  300E               	movlw	low (((STR_7+3)-__stringbase)| (0+32768))
  4016  06D9  0084               	movwf	4
  4017  06DA  120A  158A  2000  120A  118A  	fcall	stringdir
  4018  06DF  00F6               	movwf	??_waitFlag
  4019  06E0  01F7               	clrf	??_waitFlag+1
  4020  06E1  1003               	clrc
  4021  06E2  0DF6               	rlf	??_waitFlag,f
  4022  06E3  0DF7               	rlf	??_waitFlag+1,f
  4023  06E4  083C               	movf	waitFlag@buf,w
  4024  06E5  00F8               	movwf	??_waitFlag+2
  4025  06E6  01F9               	clrf	??_waitFlag+3
  4026  06E7  0877               	movf	??_waitFlag+1,w
  4027  06E8  0679               	xorwf	??_waitFlag+3,w
  4028  06E9  1D03               	skipz
  4029  06EA  2EED               	goto	u2595
  4030  06EB  0876               	movf	??_waitFlag,w
  4031  06EC  0678               	xorwf	??_waitFlag+2,w
  4032  06ED                     u2595:	
  4033  06ED  1D03               	skipz
  4034  06EE  2FB0               	goto	l3097
  4035                           
  4036                           ;decode_AX25.c: 222: dPacket[dPacketnum] = buf;
  4037  06EF  083C               	movf	waitFlag@buf,w
  4038  06F0  00F6               	movwf	??_waitFlag
  4039  06F1  0866               	movf	_dPacketnum,w
  4040  06F2  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4041  06F3  0084               	movwf	4
  4042  06F4  0876               	movf	??_waitFlag,w
  4043  06F5  1783               	bsf	3,7	;select IRP bank3
  4044  06F6  0080               	movwf	0
  4045                           
  4046                           ;decode_AX25.c: 223: dPacketnum ++;
  4047  06F7  3001               	movlw	1
  4048  06F8  07E6               	addwf	_dPacketnum,f
  4049  06F9  1803               	skipnc
  4050  06FA  0AE7               	incf	_dPacketnum+1,f
  4051  06FB  3000               	movlw	0
  4052  06FC  07E7               	addwf	_dPacketnum+1,f
  4053                           
  4054                           ;decode_AX25.c: 224: for(UINT j=0;j<8;j++){
  4055  06FD  01B6               	clrf	waitFlag@j_128
  4056  06FE  01B7               	clrf	waitFlag@j_128+1
  4057  06FF  3000               	movlw	0
  4058  0700  0237               	subwf	waitFlag@j_128+1,w
  4059  0701  3008               	movlw	8
  4060  0702  1903               	skipnz
  4061  0703  0236               	subwf	waitFlag@j_128,w
  4062  0704  1803               	btfsc	3,0
  4063  0705  2F2E               	goto	l3053
  4064  0706                     l3039:	
  4065                           
  4066                           ;decode_AX25.c: 225: flag_judge = getbit();
  4067  0706  120A  158A  2286  120A  118A  	fcall	_getbit
  4068  070B  0871               	movf	?_getbit+1,w
  4069  070C  1283               	bcf	3,5	;RP0=0, select bank0
  4070  070D  1303               	bcf	3,6	;RP1=0, select bank0
  4071  070E  00BB               	movwf	waitFlag@flag_judge+1
  4072  070F  0870               	movf	?_getbit,w
  4073  0710  00BA               	movwf	waitFlag@flag_judge
  4074                           
  4075                           ;decode_AX25.c: 226: buf = buf >> 1;
  4076  0711  083C               	movf	waitFlag@buf,w
  4077  0712  00F6               	movwf	??_waitFlag
  4078  0713  1003               	clrc
  4079  0714  0C76               	rrf	??_waitFlag,w
  4080  0715  00F7               	movwf	??_waitFlag+1
  4081  0716  0877               	movf	??_waitFlag+1,w
  4082  0717  00BC               	movwf	waitFlag@buf
  4083                           
  4084                           ;decode_AX25.c: 228: buf = buf | 0x00;
  4085  0718  083A               	movf	waitFlag@flag_judge,w
  4086  0719  043B               	iorwf	waitFlag@flag_judge+1,w
  4087  071A  1903               	btfsc	3,2
  4088  071B  2F21               	goto	l3049
  4089                           
  4090                           ;decode_AX25.c: 230: buf = buf | 0x80;
  4091                           
  4092                           ;decode_AX25.c: 229: }else{
  4093  071C  083C               	movf	waitFlag@buf,w
  4094  071D  3880               	iorlw	128
  4095  071E  00F6               	movwf	??_waitFlag
  4096  071F  0876               	movf	??_waitFlag,w
  4097  0720  00BC               	movwf	waitFlag@buf
  4098  0721                     l3049:	
  4099  0721  3001               	movlw	1
  4100  0722  07B6               	addwf	waitFlag@j_128,f
  4101  0723  1803               	skipnc
  4102  0724  0AB7               	incf	waitFlag@j_128+1,f
  4103  0725  3000               	movlw	0
  4104  0726  07B7               	addwf	waitFlag@j_128+1,f
  4105  0727  3000               	movlw	0
  4106  0728  0237               	subwf	waitFlag@j_128+1,w
  4107  0729  3008               	movlw	8
  4108  072A  1903               	skipnz
  4109  072B  0236               	subwf	waitFlag@j_128,w
  4110  072C  1C03               	skipc
  4111  072D  2F06               	goto	l3039
  4112  072E                     l3053:	
  4113                           
  4114                           ;decode_AX25.c: 231: }
  4115                           ;decode_AX25.c: 232: }
  4116                           ;decode_AX25.c: 233: if(buf == ("JQ1ZHX"[4] << 1)){
  4117  072E  300F               	movlw	low (((STR_7+4)-__stringbase)| (0+32768))
  4118  072F  0084               	movwf	4
  4119  0730  120A  158A  2000  120A  118A  	fcall	stringdir
  4120  0735  00F6               	movwf	??_waitFlag
  4121  0736  01F7               	clrf	??_waitFlag+1
  4122  0737  1003               	clrc
  4123  0738  0DF6               	rlf	??_waitFlag,f
  4124  0739  0DF7               	rlf	??_waitFlag+1,f
  4125  073A  083C               	movf	waitFlag@buf,w
  4126  073B  00F8               	movwf	??_waitFlag+2
  4127  073C  01F9               	clrf	??_waitFlag+3
  4128  073D  0877               	movf	??_waitFlag+1,w
  4129  073E  0679               	xorwf	??_waitFlag+3,w
  4130  073F  1D03               	skipz
  4131  0740  2F43               	goto	u2635
  4132  0741  0876               	movf	??_waitFlag,w
  4133  0742  0678               	xorwf	??_waitFlag+2,w
  4134  0743                     u2635:	
  4135  0743  1D03               	skipz
  4136  0744  2FB0               	goto	l3097
  4137                           
  4138                           ;decode_AX25.c: 234: dPacket[dPacketnum] = buf;
  4139  0745  083C               	movf	waitFlag@buf,w
  4140  0746  00F6               	movwf	??_waitFlag
  4141  0747  0866               	movf	_dPacketnum,w
  4142  0748  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4143  0749  0084               	movwf	4
  4144  074A  0876               	movf	??_waitFlag,w
  4145  074B  1783               	bsf	3,7	;select IRP bank3
  4146  074C  0080               	movwf	0
  4147                           
  4148                           ;decode_AX25.c: 235: dPacketnum ++;
  4149  074D  3001               	movlw	1
  4150  074E  07E6               	addwf	_dPacketnum,f
  4151  074F  1803               	skipnc
  4152  0750  0AE7               	incf	_dPacketnum+1,f
  4153  0751  3000               	movlw	0
  4154  0752  07E7               	addwf	_dPacketnum+1,f
  4155                           
  4156                           ;decode_AX25.c: 236: for(UINT j=0;j<8;j++){
  4157  0753  01B8               	clrf	waitFlag@j_130
  4158  0754  01B9               	clrf	waitFlag@j_130+1
  4159  0755  3000               	movlw	0
  4160  0756  0239               	subwf	waitFlag@j_130+1,w
  4161  0757  3008               	movlw	8
  4162  0758  1903               	skipnz
  4163  0759  0238               	subwf	waitFlag@j_130,w
  4164  075A  1803               	btfsc	3,0
  4165  075B  2F84               	goto	l3079
  4166  075C                     l3065:	
  4167                           
  4168                           ;decode_AX25.c: 237: flag_judge = getbit();
  4169  075C  120A  158A  2286  120A  118A  	fcall	_getbit
  4170  0761  0871               	movf	?_getbit+1,w
  4171  0762  1283               	bcf	3,5	;RP0=0, select bank0
  4172  0763  1303               	bcf	3,6	;RP1=0, select bank0
  4173  0764  00BB               	movwf	waitFlag@flag_judge+1
  4174  0765  0870               	movf	?_getbit,w
  4175  0766  00BA               	movwf	waitFlag@flag_judge
  4176                           
  4177                           ;decode_AX25.c: 238: buf = buf >> 1;
  4178  0767  083C               	movf	waitFlag@buf,w
  4179  0768  00F6               	movwf	??_waitFlag
  4180  0769  1003               	clrc
  4181  076A  0C76               	rrf	??_waitFlag,w
  4182  076B  00F7               	movwf	??_waitFlag+1
  4183  076C  0877               	movf	??_waitFlag+1,w
  4184  076D  00BC               	movwf	waitFlag@buf
  4185                           
  4186                           ;decode_AX25.c: 240: buf = buf | 0x00;
  4187  076E  083A               	movf	waitFlag@flag_judge,w
  4188  076F  043B               	iorwf	waitFlag@flag_judge+1,w
  4189  0770  1903               	btfsc	3,2
  4190  0771  2F77               	goto	l3075
  4191                           
  4192                           ;decode_AX25.c: 242: buf = buf | 0x80;
  4193                           
  4194                           ;decode_AX25.c: 241: }else{
  4195  0772  083C               	movf	waitFlag@buf,w
  4196  0773  3880               	iorlw	128
  4197  0774  00F6               	movwf	??_waitFlag
  4198  0775  0876               	movf	??_waitFlag,w
  4199  0776  00BC               	movwf	waitFlag@buf
  4200  0777                     l3075:	
  4201  0777  3001               	movlw	1
  4202  0778  07B8               	addwf	waitFlag@j_130,f
  4203  0779  1803               	skipnc
  4204  077A  0AB9               	incf	waitFlag@j_130+1,f
  4205  077B  3000               	movlw	0
  4206  077C  07B9               	addwf	waitFlag@j_130+1,f
  4207  077D  3000               	movlw	0
  4208  077E  0239               	subwf	waitFlag@j_130+1,w
  4209  077F  3008               	movlw	8
  4210  0780  1903               	skipnz
  4211  0781  0238               	subwf	waitFlag@j_130,w
  4212  0782  1C03               	skipc
  4213  0783  2F5C               	goto	l3065
  4214  0784                     l3079:	
  4215                           
  4216                           ;decode_AX25.c: 243: }
  4217                           ;decode_AX25.c: 244: }
  4218                           ;decode_AX25.c: 245: if(buf == ("JQ1ZHX"[5] << 1)){
  4219  0784  3010               	movlw	low (((STR_7+5)-__stringbase)| (0+32768))
  4220  0785  0084               	movwf	4
  4221  0786  120A  158A  2000  120A  118A  	fcall	stringdir
  4222  078B  00F6               	movwf	??_waitFlag
  4223  078C  01F7               	clrf	??_waitFlag+1
  4224  078D  1003               	clrc
  4225  078E  0DF6               	rlf	??_waitFlag,f
  4226  078F  0DF7               	rlf	??_waitFlag+1,f
  4227  0790  083C               	movf	waitFlag@buf,w
  4228  0791  00F8               	movwf	??_waitFlag+2
  4229  0792  01F9               	clrf	??_waitFlag+3
  4230  0793  0877               	movf	??_waitFlag+1,w
  4231  0794  0679               	xorwf	??_waitFlag+3,w
  4232  0795  1D03               	skipz
  4233  0796  2F99               	goto	u2675
  4234  0797  0876               	movf	??_waitFlag,w
  4235  0798  0678               	xorwf	??_waitFlag+2,w
  4236  0799                     u2675:	
  4237  0799  1D03               	skipz
  4238  079A  2FB0               	goto	l3097
  4239                           
  4240                           ;decode_AX25.c: 246: dPacket[dPacketnum] = buf;
  4241  079B  083C               	movf	waitFlag@buf,w
  4242  079C  00F6               	movwf	??_waitFlag
  4243  079D  0866               	movf	_dPacketnum,w
  4244  079E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4245  079F  0084               	movwf	4
  4246  07A0  0876               	movf	??_waitFlag,w
  4247  07A1  1783               	bsf	3,7	;select IRP bank3
  4248  07A2  0080               	movwf	0
  4249                           
  4250                           ;decode_AX25.c: 247: dPacketnum ++;
  4251  07A3  3001               	movlw	1
  4252  07A4  07E6               	addwf	_dPacketnum,f
  4253  07A5  1803               	skipnc
  4254  07A6  0AE7               	incf	_dPacketnum+1,f
  4255  07A7  3000               	movlw	0
  4256  07A8  07E7               	addwf	_dPacketnum+1,f
  4257                           
  4258                           ;decode_AX25.c: 248: rcv_state ++;
  4259  07A9  3001               	movlw	1
  4260  07AA  07EA               	addwf	_rcv_state,f
  4261  07AB  1803               	skipnc
  4262  07AC  0AEB               	incf	_rcv_state+1,f
  4263  07AD  3000               	movlw	0
  4264  07AE  07EB               	addwf	_rcv_state+1,f
  4265                           
  4266                           ;decode_AX25.c: 249: }else{
  4267  07AF  2B2F               	goto	l3099
  4268  07B0                     l3097:	
  4269                           ;decode_AX25.c: 268: }
  4270                           ;decode_AX25.c: 269: }else{
  4271                           
  4272                           ;decode_AX25.c: 267: rcv_state = 0;
  4273                           
  4274                           ;decode_AX25.c: 266: dPacketnum = 0;
  4275                           
  4276                           ;decode_AX25.c: 264: }
  4277                           ;decode_AX25.c: 265: }else{
  4278                           
  4279                           ;decode_AX25.c: 263: rcv_state = 0;
  4280                           
  4281                           ;decode_AX25.c: 262: dPacketnum = 0;
  4282                           
  4283                           ;decode_AX25.c: 260: }
  4284                           ;decode_AX25.c: 261: }else{
  4285                           
  4286                           ;decode_AX25.c: 259: rcv_state = 0;
  4287                           
  4288                           ;decode_AX25.c: 258: dPacketnum = 0;
  4289                           
  4290                           ;decode_AX25.c: 256: }
  4291                           ;decode_AX25.c: 257: }else{
  4292                           
  4293                           ;decode_AX25.c: 255: rcv_state = 0;
  4294                           
  4295                           ;decode_AX25.c: 254: dPacketnum = 0;
  4296                           
  4297                           ;decode_AX25.c: 252: }
  4298                           ;decode_AX25.c: 253: }else{
  4299                           
  4300                           ;decode_AX25.c: 251: rcv_state = 0;
  4301                           
  4302                           ;decode_AX25.c: 250: dPacketnum = 0;
  4303                           
  4304                           
  4305                           ;decode_AX25.c: 270: dPacketnum = 0;
  4306  07B0  01E6               	clrf	_dPacketnum
  4307  07B1  01E7               	clrf	_dPacketnum+1
  4308  07B2  2B2D               	goto	L6
  4309  07B3                     __end_of_waitFlag:	
  4310                           
  4311                           	psect	text5
  4312  0BE6                     __ptext5:	
  4313 ;; *************** function _getdata *****************
  4314 ;; Defined at:
  4315 ;;		line 278 in file "decode_AX25.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;		None
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;  dbitstatus      2    4[BANK0 ] unsigned int 
  4320 ;;  dstuff          2    2[BANK0 ] unsigned int 
  4321 ;;  bufstore_cou    2    0[BANK0 ] unsigned int 
  4322 ;;  buf             1    6[BANK0 ] unsigned char 
  4323 ;;  dammy_data      1    0        unsigned char 
  4324 ;; Return value:  Size  Location     Type
  4325 ;;                  1    wreg      void 
  4326 ;; Registers used:
  4327 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4328 ;; Tracked objects:
  4329 ;;		On entry : 0/0
  4330 ;;		On exit  : 0/0
  4331 ;;		Unchanged: 0/0
  4332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4333 ;;      Params:         0       0       0       0       0
  4334 ;;      Locals:         0       7       0       0       0
  4335 ;;      Temps:          2       0       0       0       0
  4336 ;;      Totals:         2       7       0       0       0
  4337 ;;Total ram usage:        9 bytes
  4338 ;; Hardware stack levels used:    1
  4339 ;; Hardware stack levels required when called:    1
  4340 ;; This function calls:
  4341 ;;		_getbit
  4342 ;; This function is called by:
  4343 ;;		_ReceivePacket_data
  4344 ;;		_ReceivePacket
  4345 ;; This function uses a non-reentrant model
  4346 ;;
  4347                           
  4348                           
  4349                           ;psect for function _getdata
  4350  0BE6                     _getdata:	
  4351                           
  4352                           ;decode_AX25.c: 279: UBYTE buf = 0x00;
  4353                           
  4354                           ;incstack = 0
  4355                           ; Regs used in _getdata: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4356  0BE6  1283               	bcf	3,5	;RP0=0, select bank0
  4357  0BE7  1303               	bcf	3,6	;RP1=0, select bank0
  4358  0BE8  01A6               	clrf	getdata@buf
  4359                           
  4360                           ;decode_AX25.c: 280: UINT dstuff = 0;
  4361  0BE9  01A2               	clrf	getdata@dstuff
  4362  0BEA  01A3               	clrf	getdata@dstuff+1
  4363                           
  4364                           ;decode_AX25.c: 281: UBYTE dammy_data;
  4365                           ;decode_AX25.c: 282: UINT bufstore_counter = 0;
  4366  0BEB  01A0               	clrf	getdata@bufstore_counter
  4367  0BEC  01A1               	clrf	getdata@bufstore_counter+1
  4368                           
  4369                           ;decode_AX25.c: 283: UINT dbitstatus = 0;
  4370  0BED  01A4               	clrf	getdata@dbitstatus
  4371  0BEE  01A5               	clrf	getdata@dbitstatus+1
  4372  0BEF                     l3133:	
  4373                           ;decode_AX25.c: 285: while(rcv_state == 2){
  4374                           
  4375  0BEF  3002               	movlw	2
  4376  0BF0  066A               	xorwf	_rcv_state,w
  4377  0BF1  046B               	iorwf	_rcv_state+1,w
  4378  0BF2  1D03               	btfss	3,2
  4379  0BF3  0008               	return
  4380                           
  4381                           ;decode_AX25.c: 286: dbitstatus = getbit();
  4382  0BF4  120A  158A  2286  120A  158A  	fcall	_getbit
  4383  0BF9  0871               	movf	?_getbit+1,w
  4384  0BFA  1283               	bcf	3,5	;RP0=0, select bank0
  4385  0BFB  1303               	bcf	3,6	;RP1=0, select bank0
  4386  0BFC  00A5               	movwf	getdata@dbitstatus+1
  4387  0BFD  0870               	movf	?_getbit,w
  4388  0BFE  00A4               	movwf	getdata@dbitstatus
  4389                           
  4390                           ;decode_AX25.c: 287: if(dstuff == 5){
  4391  0BFF  3005               	movlw	5
  4392  0C00  0622               	xorwf	getdata@dstuff,w
  4393  0C01  0423               	iorwf	getdata@dstuff+1,w
  4394  0C02  1D03               	btfss	3,2
  4395  0C03  2C12               	goto	l3115
  4396                           
  4397                           ;decode_AX25.c: 288: if(dbitstatus == 1){
  4398  0C04  0324               	decf	getdata@dbitstatus,w
  4399  0C05  0425               	iorwf	getdata@dbitstatus+1,w
  4400  0C06  1D03               	btfss	3,2
  4401  0C07  2C0F               	goto	l3113
  4402                           
  4403                           ;decode_AX25.c: 289: rcv_state ++;
  4404  0C08  3001               	movlw	1
  4405  0C09  07EA               	addwf	_rcv_state,f
  4406  0C0A  1803               	skipnc
  4407  0C0B  0AEB               	incf	_rcv_state+1,f
  4408  0C0C  3000               	movlw	0
  4409  0C0D  07EB               	addwf	_rcv_state+1,f
  4410                           
  4411                           ;decode_AX25.c: 290: break;
  4412  0C0E  0008               	return
  4413  0C0F                     l3113:	
  4414                           ;decode_AX25.c: 291: }else{
  4415                           
  4416                           
  4417                           ;decode_AX25.c: 292: dstuff = 0;
  4418  0C0F  01A2               	clrf	getdata@dstuff
  4419  0C10  01A3               	clrf	getdata@dstuff+1
  4420                           
  4421                           ;decode_AX25.c: 293: }
  4422                           ;decode_AX25.c: 294: }else{
  4423  0C11  2BEF               	goto	l3133
  4424  0C12                     l3115:	
  4425                           
  4426                           ;decode_AX25.c: 295: buf = buf >> 1;
  4427  0C12  0826               	movf	getdata@buf,w
  4428  0C13  00F6               	movwf	??_getdata
  4429  0C14  1003               	clrc
  4430  0C15  0C76               	rrf	??_getdata,w
  4431  0C16  00F7               	movwf	??_getdata+1
  4432  0C17  0877               	movf	??_getdata+1,w
  4433  0C18  00A6               	movwf	getdata@buf
  4434                           
  4435                           ;decode_AX25.c: 297: buf = buf | 0x00;
  4436  0C19  0824               	movf	getdata@dbitstatus,w
  4437  0C1A  0425               	iorwf	getdata@dbitstatus+1,w
  4438  0C1B  1D03               	btfss	3,2
  4439  0C1C  2C20               	goto	l3119
  4440                           
  4441                           ;decode_AX25.c: 298: dstuff = 0;
  4442  0C1D  01A2               	clrf	getdata@dstuff
  4443  0C1E  01A3               	clrf	getdata@dstuff+1
  4444                           
  4445                           ;decode_AX25.c: 299: }else{
  4446  0C1F  2C2B               	goto	l3123
  4447  0C20                     l3119:	
  4448                           
  4449                           ;decode_AX25.c: 300: buf = buf | 0x80;
  4450  0C20  0826               	movf	getdata@buf,w
  4451  0C21  3880               	iorlw	128
  4452  0C22  00F6               	movwf	??_getdata
  4453  0C23  0876               	movf	??_getdata,w
  4454  0C24  00A6               	movwf	getdata@buf
  4455                           
  4456                           ;decode_AX25.c: 301: dstuff ++;
  4457  0C25  3001               	movlw	1
  4458  0C26  07A2               	addwf	getdata@dstuff,f
  4459  0C27  1803               	skipnc
  4460  0C28  0AA3               	incf	getdata@dstuff+1,f
  4461  0C29  3000               	movlw	0
  4462  0C2A  07A3               	addwf	getdata@dstuff+1,f
  4463  0C2B                     l3123:	
  4464                           
  4465                           ;decode_AX25.c: 302: }
  4466                           ;decode_AX25.c: 303: bufstore_counter ++;
  4467  0C2B  3001               	movlw	1
  4468  0C2C  07A0               	addwf	getdata@bufstore_counter,f
  4469  0C2D  1803               	skipnc
  4470  0C2E  0AA1               	incf	getdata@bufstore_counter+1,f
  4471  0C2F  3000               	movlw	0
  4472  0C30  07A1               	addwf	getdata@bufstore_counter+1,f
  4473                           
  4474                           ;decode_AX25.c: 304: if(bufstore_counter == 8){
  4475  0C31  3008               	movlw	8
  4476  0C32  0620               	xorwf	getdata@bufstore_counter,w
  4477  0C33  0421               	iorwf	getdata@bufstore_counter+1,w
  4478  0C34  1D03               	btfss	3,2
  4479  0C35  2BEF               	goto	l3133
  4480                           
  4481                           ;decode_AX25.c: 305: bufstore_counter = 0;
  4482  0C36  01A0               	clrf	getdata@bufstore_counter
  4483  0C37  01A1               	clrf	getdata@bufstore_counter+1
  4484                           
  4485                           ;decode_AX25.c: 306: dPacket[dPacketnum] = buf;
  4486  0C38  0826               	movf	getdata@buf,w
  4487  0C39  00F6               	movwf	??_getdata
  4488  0C3A  0866               	movf	_dPacketnum,w
  4489  0C3B  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4490  0C3C  0084               	movwf	4
  4491  0C3D  0876               	movf	??_getdata,w
  4492  0C3E  1783               	bsf	3,7	;select IRP bank3
  4493  0C3F  0080               	movwf	0
  4494                           
  4495                           ;decode_AX25.c: 307: dPacketnum ++;
  4496  0C40  3001               	movlw	1
  4497  0C41  07E6               	addwf	_dPacketnum,f
  4498  0C42  1803               	skipnc
  4499  0C43  0AE7               	incf	_dPacketnum+1,f
  4500  0C44  3000               	movlw	0
  4501  0C45  07E7               	addwf	_dPacketnum+1,f
  4502  0C46  2BEF               	goto	l3133
  4503  0C47                     __end_of_getdata:	
  4504                           
  4505                           	psect	text6
  4506  0A86                     __ptext6:	
  4507 ;; *************** function _getbit *****************
  4508 ;; Defined at:
  4509 ;;		line 40 in file "decode_AX25.c"
  4510 ;; Parameters:    Size  Location     Type
  4511 ;;		None
  4512 ;; Auto vars:     Size  Location     Type
  4513 ;;  i               2    4[COMMON] unsigned int 
  4514 ;; Return value:  Size  Location     Type
  4515 ;;                  2    0[COMMON] unsigned int 
  4516 ;; Registers used:
  4517 ;;		wreg, status,2, status,0
  4518 ;; Tracked objects:
  4519 ;;		On entry : 0/0
  4520 ;;		On exit  : 0/0
  4521 ;;		Unchanged: 0/0
  4522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4523 ;;      Params:         2       0       0       0       0
  4524 ;;      Locals:         2       0       0       0       0
  4525 ;;      Temps:          2       0       0       0       0
  4526 ;;      Totals:         6       0       0       0       0
  4527 ;;Total ram usage:        6 bytes
  4528 ;; Hardware stack levels used:    1
  4529 ;; This function calls:
  4530 ;;		Nothing
  4531 ;; This function is called by:
  4532 ;;		_waitFlag
  4533 ;;		_getdata
  4534 ;;		_conv_DI_UARTRX
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           
  4539                           ;psect for function _getbit
  4540  0A86                     _getbit:	
  4541                           
  4542                           ;decode_AX25.c: 41: static UINT oldbit;
  4543                           ;decode_AX25.c: 42: oldbit = RB5;
  4544                           
  4545                           ;incstack = 0
  4546                           ; Regs used in _getbit: [wreg+status,2+status,0]
  4547  0A86  1003               	clrc
  4548  0A87  1283               	bcf	3,5	;RP0=0, select bank0
  4549  0A88  1303               	bcf	3,6	;RP1=0, select bank0
  4550  0A89  1A86               	btfsc	6,5	;volatile
  4551  0A8A  1403               	setc
  4552  0A8B  3000               	movlw	0
  4553  0A8C  1803               	skipnc
  4554  0A8D  3001               	movlw	1
  4555  0A8E  00F2               	movwf	??_getbit
  4556  0A8F  01F3               	clrf	??_getbit+1
  4557  0A90  0872               	movf	??_getbit,w
  4558  0A91  1683               	bsf	3,5	;RP0=1, select bank1
  4559  0A92  1303               	bcf	3,6	;RP1=0, select bank1
  4560  0A93  00E7               	movwf	getbit@oldbit^(0+128)
  4561  0A94  0873               	movf	??_getbit+1,w
  4562  0A95  00E8               	movwf	(getbit@oldbit+1)^(0+128)
  4563                           
  4564                           ;decode_AX25.c: 43: for(UINT i=0;i<62;i++){
  4565  0A96  01F4               	clrf	getbit@i
  4566  0A97  01F5               	clrf	getbit@i+1
  4567  0A98  3000               	movlw	0
  4568  0A99  0275               	subwf	getbit@i+1,w
  4569  0A9A  303E               	movlw	62
  4570  0A9B  1903               	skipnz
  4571  0A9C  0274               	subwf	getbit@i,w
  4572  0A9D  1803               	btfsc	3,0
  4573  0A9E  2ACD               	goto	l2579
  4574                           
  4575                           ;decode_AX25.c: 44: if(RB5 != oldbit){
  4576  0A9F  1003               	clrc
  4577  0AA0                     L7:	
  4578  0AA0  1283               	bcf	3,5	;RP0=0, select bank0
  4579  0AA1  1A86               	btfsc	6,5	;volatile
  4580  0AA2  1403               	setc
  4581  0AA3  3000               	movlw	0
  4582  0AA4  1803               	skipnc
  4583  0AA5  3001               	movlw	1
  4584  0AA6  00F2               	movwf	??_getbit
  4585  0AA7  01F3               	clrf	??_getbit+1
  4586  0AA8  1683               	bsf	3,5	;RP0=1, select bank1
  4587  0AA9  1303               	bcf	3,6	;RP1=0, select bank1
  4588  0AAA  0868               	movf	(getbit@oldbit+1)^(0+128),w
  4589  0AAB  0673               	xorwf	??_getbit+1,w
  4590  0AAC  1D03               	skipz
  4591  0AAD  2AB0               	goto	u1905
  4592  0AAE  0867               	movf	getbit@oldbit^(0+128),w
  4593  0AAF  0672               	xorwf	??_getbit,w
  4594  0AB0                     u1905:	
  4595  0AB0  1903               	skipnz
  4596  0AB1  2AC0               	goto	l2577
  4597                           
  4598                           ;decode_AX25.c: 45: _delay((unsigned long)((400)*(10000000/4000000.0)));
  4599  0AB2  30F9               	movlw	249
  4600  0AB3  00F2               	movwf	??_getbit
  4601  0AB4                     u3717:	
  4602  0AB4  0000               	nop
  4603  0AB5  0BF2               	decfsz	??_getbit,f
  4604  0AB6  2AB4               	goto	u3717
  4605  0AB7  2AB8               	nop2	;nop
  4606  0AB8  0000               	nop
  4607                           
  4608                           ;decode_AX25.c: 46: RC2= 1- RC2;
  4609  0AB9  3004               	movlw	4
  4610  0ABA  1283               	bcf	3,5	;RP0=0, select bank0
  4611  0ABB  1303               	bcf	3,6	;RP1=0, select bank0
  4612  0ABC  0687               	xorwf	7,f
  4613                           
  4614                           ;decode_AX25.c: 47: return 0;
  4615  0ABD  01F0               	clrf	?_getbit
  4616  0ABE  01F1               	clrf	?_getbit+1
  4617  0ABF  0008               	return
  4618  0AC0                     l2577:	
  4619  0AC0  3001               	movlw	1
  4620  0AC1  07F4               	addwf	getbit@i,f
  4621  0AC2  1803               	skipnc
  4622  0AC3  0AF5               	incf	getbit@i+1,f
  4623  0AC4  3000               	movlw	0
  4624  0AC5  07F5               	addwf	getbit@i+1,f
  4625  0AC6  3000               	movlw	0
  4626  0AC7  0275               	subwf	getbit@i+1,w
  4627  0AC8  303E               	movlw	62
  4628  0AC9  1903               	skipnz
  4629  0ACA  0274               	subwf	getbit@i,w
  4630  0ACB  1C03               	skipc
  4631  0ACC  2AA0               	goto	L7
  4632  0ACD                     l2579:	
  4633                           
  4634                           ;decode_AX25.c: 48: }
  4635                           ;decode_AX25.c: 49: }
  4636                           ;decode_AX25.c: 50: return 1;
  4637  0ACD  3001               	movlw	1
  4638  0ACE  00F0               	movwf	?_getbit
  4639  0ACF  3000               	movlw	0
  4640  0AD0  00F1               	movwf	?_getbit+1
  4641  0AD1  0008               	return
  4642  0AD2                     __end_of_getbit:	
  4643                           
  4644                           	psect	text7
  4645  002A                     __ptext7:	
  4646 ;; *************** function _fcscheck *****************
  4647 ;; Defined at:
  4648 ;;		line 313 in file "decode_AX25.c"
  4649 ;; Parameters:    Size  Location     Type
  4650 ;;		None
  4651 ;; Auto vars:     Size  Location     Type
  4652 ;;  i               2    7[COMMON] unsigned int 
  4653 ;;  i               2    5[COMMON] unsigned int 
  4654 ;;  byte            1    9[COMMON] unsigned char 
  4655 ;;  bt              1    4[COMMON] unsigned char 
  4656 ;; Return value:  Size  Location     Type
  4657 ;;                  2    0[COMMON] unsigned int 
  4658 ;; Registers used:
  4659 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4660 ;; Tracked objects:
  4661 ;;		On entry : 0/0
  4662 ;;		On exit  : 0/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4665 ;;      Params:         2       0       0       0       0
  4666 ;;      Locals:         6       0       0       0       0
  4667 ;;      Temps:          2       0       0       0       0
  4668 ;;      Totals:        10       0       0       0       0
  4669 ;;Total ram usage:       10 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; This function calls:
  4672 ;;		Nothing
  4673 ;; This function is called by:
  4674 ;;		_ReceivePacket_data
  4675 ;;		_ReceivePacket
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           
  4680                           ;psect for function _fcscheck
  4681  002A                     _fcscheck:	
  4682                           
  4683                           ;decode_AX25.c: 314: UBYTE bt,byte;
  4684                           ;decode_AX25.c: 315: dfcslo = dfcshi = 0xff;
  4685                           
  4686                           ;incstack = 0
  4687                           ; Regs used in _fcscheck: [wreg-fsr0h+status,2+status,0]
  4688  002A  30FF               	movlw	255
  4689  002B  1283               	bcf	3,5	;RP0=0, select bank0
  4690  002C  1303               	bcf	3,6	;RP1=0, select bank0
  4691  002D  00EC               	movwf	_dfcshi
  4692  002E  00F2               	movwf	??_fcscheck
  4693  002F  0872               	movf	??_fcscheck,w
  4694  0030  00ED               	movwf	_dfcslo
  4695                           
  4696                           ;decode_AX25.c: 316: while(rcv_state == 3){
  4697  0031  3003               	movlw	3
  4698  0032  066A               	xorwf	_rcv_state,w
  4699  0033  046B               	iorwf	_rcv_state+1,w
  4700  0034  1D03               	btfss	3,2
  4701  0035  0008               	return
  4702                           
  4703                           ;decode_AX25.c: 317: for(UINT i=0;i<dPacketnum-2;i++){
  4704  0036  01F5               	clrf	fcscheck@i
  4705  0037  01F6               	clrf	fcscheck@i+1
  4706  0038                     l3161:	
  4707  0038  0866               	movf	_dPacketnum,w
  4708  0039  3EFE               	addlw	254
  4709  003A  00F2               	movwf	??_fcscheck
  4710  003B  0867               	movf	_dPacketnum+1,w
  4711  003C  1803               	skipnc
  4712  003D  3E01               	addlw	1
  4713  003E  3EFF               	addlw	255
  4714  003F  00F3               	movwf	??_fcscheck+1
  4715  0040  0873               	movf	??_fcscheck+1,w
  4716  0041  0276               	subwf	fcscheck@i+1,w
  4717  0042  1D03               	skipz
  4718  0043  2846               	goto	u2775
  4719  0044  0872               	movf	??_fcscheck,w
  4720  0045  0275               	subwf	fcscheck@i,w
  4721  0046                     u2775:	
  4722  0046  1803               	btfsc	3,0
  4723  0047  2891               	goto	l272
  4724                           
  4725                           ;decode_AX25.c: 318: byte = dPacket[i];
  4726  0048  0875               	movf	fcscheck@i,w
  4727  0049  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4728  004A  0084               	movwf	4
  4729  004B  1783               	bsf	3,7	;select IRP bank3
  4730  004C  0800               	movf	0,w
  4731  004D  00F2               	movwf	??_fcscheck
  4732  004E  0872               	movf	??_fcscheck,w
  4733  004F  00F9               	movwf	fcscheck@byte
  4734                           
  4735                           ;decode_AX25.c: 319: for(UINT i=0;i<8;i++){
  4736  0050  01F7               	clrf	fcscheck@i_142
  4737  0051  01F8               	clrf	fcscheck@i_142+1
  4738  0052  3000               	movlw	0
  4739  0053  0278               	subwf	fcscheck@i_142+1,w
  4740  0054  3008               	movlw	8
  4741  0055  1903               	skipnz
  4742  0056  0277               	subwf	fcscheck@i_142,w
  4743  0057  1803               	btfsc	3,0
  4744  0058  288A               	goto	l3159
  4745  0059                     l3147:	
  4746                           
  4747                           ;decode_AX25.c: 320: bt = byte & 0x01;
  4748  0059  0879               	movf	fcscheck@byte,w
  4749  005A  3901               	andlw	1
  4750  005B  00F2               	movwf	??_fcscheck
  4751  005C  0872               	movf	??_fcscheck,w
  4752  005D  00F4               	movwf	fcscheck@bt
  4753  005E  1003               	bcf	3,0	;# 
  4754  005F  0CEC               	rrf	_dfcshi,f	;# 
  4755  0060  0CED               	rrf	_dfcslo,f	;# 
  4756                           
  4757                           ;decode_AX25.c: 326: if(((STATUS & 0x01)^bt) == 0x01){
  4758  0061  3001               	movlw	1
  4759  0062  1283               	bcf	3,5	;RP0=0, select bank0
  4760  0063  1303               	bcf	3,6	;RP1=0, select bank0
  4761  0064  0503               	andwf	3,w	;volatile
  4762  0065  00F2               	movwf	??_fcscheck
  4763  0066  0874               	movf	fcscheck@bt,w
  4764  0067  0672               	xorwf	??_fcscheck,w
  4765  0068  00F3               	movwf	??_fcscheck+1
  4766  0069  0373               	decf	??_fcscheck+1,w
  4767  006A  1D03               	btfss	3,2
  4768  006B  2876               	goto	l3153
  4769                           
  4770                           ;decode_AX25.c: 327: dfcshi = dfcshi ^ 0x84;
  4771  006C  086C               	movf	_dfcshi,w
  4772  006D  3A84               	xorlw	132
  4773  006E  00F2               	movwf	??_fcscheck
  4774  006F  0872               	movf	??_fcscheck,w
  4775  0070  00EC               	movwf	_dfcshi
  4776                           
  4777                           ;decode_AX25.c: 328: dfcslo = dfcslo ^ 0x08;
  4778  0071  086D               	movf	_dfcslo,w
  4779  0072  3A08               	xorlw	8
  4780  0073  00F2               	movwf	??_fcscheck
  4781  0074  0872               	movf	??_fcscheck,w
  4782  0075  00ED               	movwf	_dfcslo
  4783  0076                     l3153:	
  4784                           
  4785                           ;decode_AX25.c: 329: }
  4786                           ;decode_AX25.c: 330: byte = byte >> 1;
  4787  0076  0879               	movf	fcscheck@byte,w
  4788  0077  00F2               	movwf	??_fcscheck
  4789  0078  1003               	clrc
  4790  0079  0C72               	rrf	??_fcscheck,w
  4791  007A  00F3               	movwf	??_fcscheck+1
  4792  007B  0873               	movf	??_fcscheck+1,w
  4793  007C  00F9               	movwf	fcscheck@byte
  4794  007D  3001               	movlw	1
  4795  007E  07F7               	addwf	fcscheck@i_142,f
  4796  007F  1803               	skipnc
  4797  0080  0AF8               	incf	fcscheck@i_142+1,f
  4798  0081  3000               	movlw	0
  4799  0082  07F8               	addwf	fcscheck@i_142+1,f
  4800  0083  3000               	movlw	0
  4801  0084  0278               	subwf	fcscheck@i_142+1,w
  4802  0085  3008               	movlw	8
  4803  0086  1903               	skipnz
  4804  0087  0277               	subwf	fcscheck@i_142,w
  4805  0088  1C03               	skipc
  4806  0089  2859               	goto	l3147
  4807  008A                     l3159:	
  4808  008A  3001               	movlw	1
  4809  008B  07F5               	addwf	fcscheck@i,f
  4810  008C  1803               	skipnc
  4811  008D  0AF6               	incf	fcscheck@i+1,f
  4812  008E  3000               	movlw	0
  4813  008F  07F6               	addwf	fcscheck@i+1,f
  4814  0090  2838               	goto	l3161
  4815  0091                     l272:	
  4816                           
  4817                           ;decode_AX25.c: 331: }
  4818                           ;decode_AX25.c: 332: }
  4819                           ;decode_AX25.c: 333: dfcslo = dfcslo ^ 0xff;
  4820  0091  09ED               	comf	_dfcslo,f
  4821                           
  4822                           ;decode_AX25.c: 334: dfcshi = dfcshi ^ 0xff;
  4823  0092  09EC               	comf	_dfcshi,f
  4824                           
  4825                           ;decode_AX25.c: 337: if((dPacket[dPacketnum-2] == dfcslo) && (dPacket[dPacketnum-1] == d
      +                          fcshi)){
  4826  0093  0866               	movf	_dPacketnum,w
  4827  0094  3EFE               	addlw	254
  4828  0095  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4829  0096  0084               	movwf	4
  4830  0097  1783               	bsf	3,7	;select IRP bank3
  4831  0098  0800               	movf	0,w
  4832  0099  066D               	xorwf	_dfcslo,w
  4833  009A  1D03               	skipz
  4834  009B  28A9               	goto	l3173
  4835  009C  0866               	movf	_dPacketnum,w
  4836  009D  3EFF               	addlw	255
  4837  009E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4838  009F  0084               	movwf	4
  4839  00A0  0800               	movf	0,w
  4840  00A1  066C               	xorwf	_dfcshi,w
  4841  00A2  1D03               	skipz
  4842  00A3  28A9               	goto	l3173
  4843                           
  4844                           ;decode_AX25.c: 342: return 1;
  4845  00A4  3001               	movlw	1
  4846  00A5  00F0               	movwf	?_fcscheck
  4847  00A6  3000               	movlw	0
  4848  00A7  00F1               	movwf	?_fcscheck+1
  4849  00A8  0008               	return
  4850  00A9                     l3173:	
  4851                           ;decode_AX25.c: 343: }else{
  4852                           
  4853                           
  4854                           ;decode_AX25.c: 348: return 0;
  4855  00A9  01F0               	clrf	?_fcscheck
  4856  00AA  01F1               	clrf	?_fcscheck+1
  4857  00AB  0008               	return
  4858  00AC                     __end_of_fcscheck:	
  4859                           
  4860                           	psect	text8
  4861  17EE                     __ptext8:	
  4862 ;; *************** function _NM_waddress *****************
  4863 ;; Defined at:
  4864 ;;		line 71 in file "UART.c"
  4865 ;; Parameters:    Size  Location     Type
  4866 ;;  NM_wad_heade    1    wreg     unsigned char 
  4867 ;;  whigh_addres    1    1[COMMON] unsigned char 
  4868 ;;  wlow_address    1    2[COMMON] unsigned char 
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;  NM_wad_heade    1    3[COMMON] unsigned char 
  4871 ;; Return value:  Size  Location     Type
  4872 ;;                  1    wreg      void 
  4873 ;; Registers used:
  4874 ;;		wreg, status,2, status,0, pclath, cstack
  4875 ;; Tracked objects:
  4876 ;;		On entry : 0/0
  4877 ;;		On exit  : 0/0
  4878 ;;		Unchanged: 0/0
  4879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4880 ;;      Params:         2       0       0       0       0
  4881 ;;      Locals:         1       0       0       0       0
  4882 ;;      Temps:          0       0       0       0       0
  4883 ;;      Totals:         3       0       0       0       0
  4884 ;;Total ram usage:        3 bytes
  4885 ;; Hardware stack levels used:    1
  4886 ;; Hardware stack levels required when called:    1
  4887 ;; This function calls:
  4888 ;;		_putch
  4889 ;; This function is called by:
  4890 ;;		_main
  4891 ;; This function uses a non-reentrant model
  4892 ;;
  4893                           
  4894                           
  4895                           ;psect for function _NM_waddress
  4896  17EE                     _NM_waddress:	
  4897                           
  4898                           ;incstack = 0
  4899                           ; Regs used in _NM_waddress: [wreg+status,2+status,0+pclath+cstack]
  4900                           ;NM_waddress@NM_wad_header stored from wreg
  4901  17EE  00F3               	movwf	NM_waddress@NM_wad_header
  4902                           
  4903                           ;UART.c: 72: putch(NM_wad_header);
  4904  17EF  0873               	movf	NM_waddress@NM_wad_header,w
  4905  17F0  160A  118A  27C4  160A  118A  	fcall	_putch
  4906                           
  4907                           ;UART.c: 73: putch(whigh_address);
  4908  17F5  0871               	movf	NM_waddress@whigh_address,w
  4909  17F6  160A  118A  27C4  160A  118A  	fcall	_putch
  4910                           
  4911                           ;UART.c: 74: putch(wlow_address);
  4912  17FB  0872               	movf	NM_waddress@wlow_address,w
  4913  17FC  160A  118A  27C4   	fcall	_putch
  4914  17FF  0008               	return
  4915  1800                     __end_of_NM_waddress:	
  4916                           
  4917                           	psect	text9
  4918  17C4                     __ptext9:	
  4919 ;; *************** function _putch *****************
  4920 ;; Defined at:
  4921 ;;		line 38 in file "UART.c"
  4922 ;; Parameters:    Size  Location     Type
  4923 ;;  byte            1    wreg     unsigned char 
  4924 ;; Auto vars:     Size  Location     Type
  4925 ;;  byte            1    0[COMMON] unsigned char 
  4926 ;; Return value:  Size  Location     Type
  4927 ;;                  1    wreg      void 
  4928 ;; Registers used:
  4929 ;;		wreg
  4930 ;; Tracked objects:
  4931 ;;		On entry : 0/0
  4932 ;;		On exit  : 0/0
  4933 ;;		Unchanged: 0/0
  4934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4935 ;;      Params:         0       0       0       0       0
  4936 ;;      Locals:         1       0       0       0       0
  4937 ;;      Temps:          0       0       0       0       0
  4938 ;;      Totals:         1       0       0       0       0
  4939 ;;Total ram usage:        1 bytes
  4940 ;; Hardware stack levels used:    1
  4941 ;; This function calls:
  4942 ;;		Nothing
  4943 ;; This function is called by:
  4944 ;;		_NM_waddress
  4945 ;;		_printf
  4946 ;;		_putstr
  4947 ;;		_putcrlf
  4948 ;;		_put_error
  4949 ;;		_put_ok
  4950 ;;		_putAX25
  4951 ;;		_conv_DI_UARTRX
  4952 ;;		_test_Packetmaker
  4953 ;;		_EEPROM_Read
  4954 ;; This function uses a non-reentrant model
  4955 ;;
  4956                           
  4957                           
  4958                           ;psect for function _putch
  4959  17C4                     _putch:	
  4960                           
  4961                           ;incstack = 0
  4962                           ; Regs used in _putch: [wreg]
  4963                           ;putch@byte stored from wreg
  4964  17C4  00F0               	movwf	putch@byte
  4965  17C5                     l65:	
  4966                           ;UART.c: 39: while(!TXIF);
  4967                           
  4968  17C5  1283               	bcf	3,5	;RP0=0, select bank0
  4969  17C6  1303               	bcf	3,6	;RP1=0, select bank0
  4970  17C7  1E0C               	btfss	12,4	;volatile
  4971  17C8  2FC5               	goto	l65
  4972                           
  4973                           ;UART.c: 40: TXREG = byte;
  4974  17C9  0870               	movf	putch@byte,w
  4975  17CA  0099               	movwf	25	;volatile
  4976  17CB  0008               	return
  4977  17CC                     __end_of_putch:	
  4978                           
  4979                           	psect	text10
  4980  083C                     __ptext10:	
  4981 ;; *************** function _Init_SERIAL *****************
  4982 ;; Defined at:
  4983 ;;		line 5 in file "UART.c"
  4984 ;; Parameters:    Size  Location     Type
  4985 ;;		None
  4986 ;; Auto vars:     Size  Location     Type
  4987 ;;		None
  4988 ;; Return value:  Size  Location     Type
  4989 ;;                  1    wreg      void 
  4990 ;; Registers used:
  4991 ;;		wreg
  4992 ;; Tracked objects:
  4993 ;;		On entry : 0/0
  4994 ;;		On exit  : 0/0
  4995 ;;		Unchanged: 0/0
  4996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4997 ;;      Params:         0       0       0       0       0
  4998 ;;      Locals:         0       0       0       0       0
  4999 ;;      Temps:          0       0       0       0       0
  5000 ;;      Totals:         0       0       0       0       0
  5001 ;;Total ram usage:        0 bytes
  5002 ;; Hardware stack levels used:    1
  5003 ;; This function calls:
  5004 ;;		Nothing
  5005 ;; This function is called by:
  5006 ;;		_main
  5007 ;; This function uses a non-reentrant model
  5008 ;;
  5009                           
  5010                           
  5011                           ;psect for function _Init_SERIAL
  5012  083C                     _Init_SERIAL:	
  5013                           
  5014                           ;UART.c: 6: SPBRG = 10;
  5015                           
  5016                           ;incstack = 0
  5017                           ; Regs used in _Init_SERIAL: [wreg]
  5018  083C  300A               	movlw	10
  5019  083D  1683               	bsf	3,5	;RP0=1, select bank1
  5020  083E  1303               	bcf	3,6	;RP1=0, select bank1
  5021  083F  0099               	movwf	25	;volatile
  5022                           
  5023                           ;UART.c: 7: BRGH = 0;
  5024  0840  1118               	bcf	24,2	;volatile
  5025                           
  5026                           ;UART.c: 8: SYNC = 0;
  5027  0841  1218               	bcf	24,4	;volatile
  5028                           
  5029                           ;UART.c: 9: SPEN = 1;
  5030  0842  1283               	bcf	3,5	;RP0=0, select bank0
  5031  0843  1303               	bcf	3,6	;RP1=0, select bank0
  5032  0844  1798               	bsf	24,7	;volatile
  5033                           
  5034                           ;UART.c: 10: CREN = 1;
  5035  0845  1618               	bsf	24,4	;volatile
  5036                           
  5037                           ;UART.c: 11: SREN = 0;
  5038  0846  1298               	bcf	24,5	;volatile
  5039                           
  5040                           ;UART.c: 12: RCIF = 0;
  5041  0847  128C               	bcf	12,5	;volatile
  5042                           
  5043                           ;UART.c: 13: TXIE = 0;
  5044  0848  1683               	bsf	3,5	;RP0=1, select bank1
  5045  0849  1303               	bcf	3,6	;RP1=0, select bank1
  5046  084A  120C               	bcf	12,4	;volatile
  5047                           
  5048                           ;UART.c: 14: RCIE = 1;
  5049  084B  168C               	bsf	12,5	;volatile
  5050                           
  5051                           ;UART.c: 15: TX9 = 0;
  5052  084C  1318               	bcf	24,6	;volatile
  5053                           
  5054                           ;UART.c: 16: RX9 = 0;
  5055  084D  1283               	bcf	3,5	;RP0=0, select bank0
  5056  084E  1303               	bcf	3,6	;RP1=0, select bank0
  5057  084F  1318               	bcf	24,6	;volatile
  5058                           
  5059                           ;UART.c: 17: TXEN = 0;
  5060  0850  1683               	bsf	3,5	;RP0=1, select bank1
  5061  0851  1303               	bcf	3,6	;RP1=0, select bank1
  5062  0852  1298               	bcf	24,5	;volatile
  5063                           
  5064                           ;UART.c: 18: TXEN = 1;
  5065  0853  1698               	bsf	24,5	;volatile
  5066  0854  0008               	return
  5067  0855                     __end_of_Init_SERIAL:	
  5068                           
  5069                           	psect	text11
  5070  0888                     __ptext11:	
  5071 ;; *************** function _Init_MPU *****************
  5072 ;; Defined at:
  5073 ;;		line 8 in file "Init_MPU.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;		None
  5076 ;; Auto vars:     Size  Location     Type
  5077 ;;		None
  5078 ;; Return value:  Size  Location     Type
  5079 ;;                  1    wreg      void 
  5080 ;; Registers used:
  5081 ;;		wreg, status,2
  5082 ;; Tracked objects:
  5083 ;;		On entry : 0/0
  5084 ;;		On exit  : 0/0
  5085 ;;		Unchanged: 0/0
  5086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5087 ;;      Params:         0       0       0       0       0
  5088 ;;      Locals:         0       0       0       0       0
  5089 ;;      Temps:          0       0       0       0       0
  5090 ;;      Totals:         0       0       0       0       0
  5091 ;;Total ram usage:        0 bytes
  5092 ;; Hardware stack levels used:    1
  5093 ;; This function calls:
  5094 ;;		Nothing
  5095 ;; This function is called by:
  5096 ;;		_main
  5097 ;; This function uses a non-reentrant model
  5098 ;;
  5099                           
  5100                           
  5101                           ;psect for function _Init_MPU
  5102  0888                     _Init_MPU:	
  5103                           
  5104                           ;Init_MPU.c: 11: PORTA = 0x00;
  5105                           
  5106                           ;incstack = 0
  5107                           ; Regs used in _Init_MPU: [wreg+status,2]
  5108  0888  1283               	bcf	3,5	;RP0=0, select bank0
  5109  0889  1303               	bcf	3,6	;RP1=0, select bank0
  5110  088A  0185               	clrf	5	;volatile
  5111                           
  5112                           ;Init_MPU.c: 12: PORTB = 0x00;
  5113  088B  0186               	clrf	6	;volatile
  5114                           
  5115                           ;Init_MPU.c: 13: PORTC = 0x00;
  5116  088C  0187               	clrf	7	;volatile
  5117                           
  5118                           ;Init_MPU.c: 14: PORTD = 0x00;
  5119  088D  0188               	clrf	8	;volatile
  5120                           
  5121                           ;Init_MPU.c: 15: PORTE = 0x00;
  5122  088E  0189               	clrf	9	;volatile
  5123                           
  5124                           ;Init_MPU.c: 18: ANSEL = 0x00;
  5125  088F  1683               	bsf	3,5	;RP0=1, select bank3
  5126  0890  1703               	bsf	3,6	;RP1=1, select bank3
  5127  0891  0188               	clrf	8	;volatile
  5128                           
  5129                           ;Init_MPU.c: 19: ANSELH = 0x00;
  5130  0892  0189               	clrf	9	;volatile
  5131                           
  5132                           ;Init_MPU.c: 23: TRISA = 0b10000000;
  5133  0893  3080               	movlw	128
  5134  0894  1683               	bsf	3,5	;RP0=1, select bank1
  5135  0895  1303               	bcf	3,6	;RP1=0, select bank1
  5136  0896  0085               	movwf	5	;volatile
  5137                           
  5138                           ;Init_MPU.c: 24: TRISB = 0b00100000;
  5139  0897  3020               	movlw	32
  5140  0898  0086               	movwf	6	;volatile
  5141                           
  5142                           ;Init_MPU.c: 25: TRISC = 0b10011000;
  5143  0899  3098               	movlw	152
  5144  089A  0087               	movwf	7	;volatile
  5145                           
  5146                           ;Init_MPU.c: 26: TRISD = 0b00000000;
  5147  089B  0188               	clrf	8	;volatile
  5148                           
  5149                           ;Init_MPU.c: 27: TRISE = 0b00000000;
  5150  089C  0189               	clrf	9	;volatile
  5151                           
  5152                           ;Init_MPU.c: 30: PORTA = 0x00;
  5153  089D  1283               	bcf	3,5	;RP0=0, select bank0
  5154  089E  1303               	bcf	3,6	;RP1=0, select bank0
  5155  089F  0185               	clrf	5	;volatile
  5156                           
  5157                           ;Init_MPU.c: 31: PORTB = 0x00;
  5158  08A0  0186               	clrf	6	;volatile
  5159                           
  5160                           ;Init_MPU.c: 32: PORTC = 0x00;
  5161  08A1  0187               	clrf	7	;volatile
  5162                           
  5163                           ;Init_MPU.c: 33: PORTD = 0x00;
  5164  08A2  0188               	clrf	8	;volatile
  5165                           
  5166                           ;Init_MPU.c: 34: PORTE = 0x00;
  5167  08A3  0189               	clrf	9	;volatile
  5168  08A4  0008               	return
  5169  08A5                     __end_of_Init_MPU:	
  5170                           
  5171                           	psect	text12
  5172  097F                     __ptext12:	
  5173 ;; *************** function _Init_I2C_M *****************
  5174 ;; Defined at:
  5175 ;;		line 8 in file "I2C.c"
  5176 ;; Parameters:    Size  Location     Type
  5177 ;;  c               4    0[BANK0 ] const unsigned long 
  5178 ;; Auto vars:     Size  Location     Type
  5179 ;;		None
  5180 ;; Return value:  Size  Location     Type
  5181 ;;                  1    wreg      void 
  5182 ;; Registers used:
  5183 ;;		wreg, status,2, status,0, pclath, cstack
  5184 ;; Tracked objects:
  5185 ;;		On entry : 0/0
  5186 ;;		On exit  : 0/0
  5187 ;;		Unchanged: 0/0
  5188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5189 ;;      Params:         0       4       0       0       0
  5190 ;;      Locals:         0       0       0       0       0
  5191 ;;      Temps:          0       4       0       0       0
  5192 ;;      Totals:         0       8       0       0       0
  5193 ;;Total ram usage:        8 bytes
  5194 ;; Hardware stack levels used:    1
  5195 ;; Hardware stack levels required when called:    1
  5196 ;; This function calls:
  5197 ;;		___lldiv
  5198 ;; This function is called by:
  5199 ;;		_main
  5200 ;; This function uses a non-reentrant model
  5201 ;;
  5202                           
  5203                           
  5204                           ;psect for function _Init_I2C_M
  5205  097F                     _Init_I2C_M:	
  5206                           
  5207                           ;I2C.c: 9: SSPCON = 0b00101000;
  5208                           
  5209                           ;incstack = 0
  5210                           ; Regs used in _Init_I2C_M: [wreg+status,2+status,0+pclath+cstack]
  5211  097F  3028               	movlw	40
  5212  0980  1283               	bcf	3,5	;RP0=0, select bank0
  5213  0981  1303               	bcf	3,6	;RP1=0, select bank0
  5214  0982  0094               	movwf	20	;volatile
  5215                           
  5216                           ;I2C.c: 10: SSPCON2 = 0;
  5217  0983  1683               	bsf	3,5	;RP0=1, select bank1
  5218  0984  1303               	bcf	3,6	;RP1=0, select bank1
  5219  0985  0191               	clrf	17	;volatile
  5220                           
  5221                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  5222  0986  1283               	bcf	3,5	;RP0=0, select bank0
  5223  0987  1303               	bcf	3,6	;RP1=0, select bank0
  5224  0988  0820               	movf	Init_I2C_M@c,w
  5225  0989  00A4               	movwf	??_Init_I2C_M
  5226  098A  0821               	movf	Init_I2C_M@c+1,w
  5227  098B  00A5               	movwf	??_Init_I2C_M+1
  5228  098C  0822               	movf	Init_I2C_M@c+2,w
  5229  098D  00A6               	movwf	??_Init_I2C_M+2
  5230  098E  0823               	movf	Init_I2C_M@c+3,w
  5231  098F  00A7               	movwf	??_Init_I2C_M+3
  5232  0990  3002               	movlw	2
  5233  0991                     u3195:	
  5234  0991  1003               	clrc
  5235  0992  0DA4               	rlf	??_Init_I2C_M,f
  5236  0993  0DA5               	rlf	??_Init_I2C_M+1,f
  5237  0994  0DA6               	rlf	??_Init_I2C_M+2,f
  5238  0995  0DA7               	rlf	??_Init_I2C_M+3,f
  5239  0996  3EFF               	addlw	-1
  5240  0997  1D03               	skipz
  5241  0998  2991               	goto	u3195
  5242  0999  0827               	movf	??_Init_I2C_M+3,w
  5243  099A  00F3               	movwf	___lldiv@divisor+3
  5244  099B  0826               	movf	??_Init_I2C_M+2,w
  5245  099C  00F2               	movwf	___lldiv@divisor+2
  5246  099D  0825               	movf	??_Init_I2C_M+1,w
  5247  099E  00F1               	movwf	___lldiv@divisor+1
  5248  099F  0824               	movf	??_Init_I2C_M,w
  5249  09A0  00F0               	movwf	___lldiv@divisor
  5250  09A1  3000               	movlw	0
  5251  09A2  00F7               	movwf	___lldiv@dividend+3
  5252  09A3  3098               	movlw	152
  5253  09A4  00F6               	movwf	___lldiv@dividend+2
  5254  09A5  3096               	movlw	150
  5255  09A6  00F5               	movwf	___lldiv@dividend+1
  5256  09A7  3080               	movlw	128
  5257  09A8  00F4               	movwf	___lldiv@dividend
  5258  09A9  120A  158A  2388   	fcall	___lldiv
  5259  09AC  0870               	movf	?___lldiv,w
  5260  09AD  3EFF               	addlw	255
  5261  09AE  1683               	bsf	3,5	;RP0=1, select bank1
  5262  09AF  1303               	bcf	3,6	;RP1=0, select bank1
  5263  09B0  0093               	movwf	19	;volatile
  5264                           
  5265                           ;I2C.c: 12: SSPSTAT = 0;
  5266  09B1  0194               	clrf	20	;volatile
  5267  09B2  0008               	return
  5268  09B3                     __end_of_Init_I2C_M:	
  5269                           
  5270                           	psect	text13
  5271  0B88                     __ptext13:	
  5272 ;; *************** function ___lldiv *****************
  5273 ;; Defined at:
  5274 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;  divisor         4    0[COMMON] unsigned long 
  5277 ;;  dividend        4    4[COMMON] unsigned long 
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;  quotient        4    9[COMMON] unsigned long 
  5280 ;;  counter         1   13[COMMON] unsigned char 
  5281 ;; Return value:  Size  Location     Type
  5282 ;;                  4    0[COMMON] unsigned long 
  5283 ;; Registers used:
  5284 ;;		wreg, status,2, status,0
  5285 ;; Tracked objects:
  5286 ;;		On entry : 0/0
  5287 ;;		On exit  : 0/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5290 ;;      Params:         8       0       0       0       0
  5291 ;;      Locals:         5       0       0       0       0
  5292 ;;      Temps:          1       0       0       0       0
  5293 ;;      Totals:        14       0       0       0       0
  5294 ;;Total ram usage:       14 bytes
  5295 ;; Hardware stack levels used:    1
  5296 ;; This function calls:
  5297 ;;		Nothing
  5298 ;; This function is called by:
  5299 ;;		_Init_I2C_M
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           
  5304                           ;psect for function ___lldiv
  5305  0B88                     ___lldiv:	
  5306                           
  5307                           ;incstack = 0
  5308                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5309  0B88  3000               	movlw	0
  5310  0B89  00FC               	movwf	___lldiv@quotient+3
  5311  0B8A  3000               	movlw	0
  5312  0B8B  00FB               	movwf	___lldiv@quotient+2
  5313  0B8C  3000               	movlw	0
  5314  0B8D  00FA               	movwf	___lldiv@quotient+1
  5315  0B8E  3000               	movlw	0
  5316  0B8F  00F9               	movwf	___lldiv@quotient
  5317  0B90  0873               	movf	___lldiv@divisor+3,w
  5318  0B91  0472               	iorwf	___lldiv@divisor+2,w
  5319  0B92  0471               	iorwf	___lldiv@divisor+1,w
  5320  0B93  0470               	iorwf	___lldiv@divisor,w
  5321  0B94  1903               	skipnz
  5322  0B95  2BDD               	goto	l3337
  5323  0B96  01FD               	clrf	___lldiv@counter
  5324  0B97  0AFD               	incf	___lldiv@counter,f
  5325  0B98                     l3323:	
  5326  0B98  1BF3               	btfsc	___lldiv@divisor+3,7
  5327  0B99  2BA8               	goto	l3325
  5328  0B9A  3001               	movlw	1
  5329  0B9B  00F8               	movwf	??___lldiv
  5330  0B9C                     u3045:	
  5331  0B9C  1003               	clrc
  5332  0B9D  0DF0               	rlf	___lldiv@divisor,f
  5333  0B9E  0DF1               	rlf	___lldiv@divisor+1,f
  5334  0B9F  0DF2               	rlf	___lldiv@divisor+2,f
  5335  0BA0  0DF3               	rlf	___lldiv@divisor+3,f
  5336  0BA1  0BF8               	decfsz	??___lldiv,f
  5337  0BA2  2B9C               	goto	u3045
  5338  0BA3  3001               	movlw	1
  5339  0BA4  00F8               	movwf	??___lldiv
  5340  0BA5  0878               	movf	??___lldiv,w
  5341  0BA6  07FD               	addwf	___lldiv@counter,f
  5342  0BA7  2B98               	goto	l3323
  5343  0BA8                     l3325:	
  5344  0BA8  3001               	movlw	1
  5345  0BA9  00F8               	movwf	??___lldiv
  5346  0BAA                     u3065:	
  5347  0BAA  1003               	clrc
  5348  0BAB  0DF9               	rlf	___lldiv@quotient,f
  5349  0BAC  0DFA               	rlf	___lldiv@quotient+1,f
  5350  0BAD  0DFB               	rlf	___lldiv@quotient+2,f
  5351  0BAE  0DFC               	rlf	___lldiv@quotient+3,f
  5352  0BAF  0BF8               	decfsz	??___lldiv,f
  5353  0BB0  2BAA               	goto	u3065
  5354  0BB1  0873               	movf	___lldiv@divisor+3,w
  5355  0BB2  0277               	subwf	___lldiv@dividend+3,w
  5356  0BB3  1D03               	skipz
  5357  0BB4  2BBF               	goto	u3075
  5358  0BB5  0872               	movf	___lldiv@divisor+2,w
  5359  0BB6  0276               	subwf	___lldiv@dividend+2,w
  5360  0BB7  1D03               	skipz
  5361  0BB8  2BBF               	goto	u3075
  5362  0BB9  0871               	movf	___lldiv@divisor+1,w
  5363  0BBA  0275               	subwf	___lldiv@dividend+1,w
  5364  0BBB  1D03               	skipz
  5365  0BBC  2BBF               	goto	u3075
  5366  0BBD  0870               	movf	___lldiv@divisor,w
  5367  0BBE  0274               	subwf	___lldiv@dividend,w
  5368  0BBF                     u3075:	
  5369  0BBF  1C03               	skipc
  5370  0BC0  2BD0               	goto	l3333
  5371  0BC1  0870               	movf	___lldiv@divisor,w
  5372  0BC2  02F4               	subwf	___lldiv@dividend,f
  5373  0BC3  0871               	movf	___lldiv@divisor+1,w
  5374  0BC4  1C03               	skipc
  5375  0BC5  0F71               	incfsz	___lldiv@divisor+1,w
  5376  0BC6  02F5               	subwf	___lldiv@dividend+1,f
  5377  0BC7  0872               	movf	___lldiv@divisor+2,w
  5378  0BC8  1C03               	skipc
  5379  0BC9  0F72               	incfsz	___lldiv@divisor+2,w
  5380  0BCA  02F6               	subwf	___lldiv@dividend+2,f
  5381  0BCB  0873               	movf	___lldiv@divisor+3,w
  5382  0BCC  1C03               	skipc
  5383  0BCD  0F73               	incfsz	___lldiv@divisor+3,w
  5384  0BCE  02F7               	subwf	___lldiv@dividend+3,f
  5385  0BCF  1479               	bsf	___lldiv@quotient,0
  5386  0BD0                     l3333:	
  5387  0BD0  3001               	movlw	1
  5388  0BD1                     u3085:	
  5389  0BD1  1003               	clrc
  5390  0BD2  0CF3               	rrf	___lldiv@divisor+3,f
  5391  0BD3  0CF2               	rrf	___lldiv@divisor+2,f
  5392  0BD4  0CF1               	rrf	___lldiv@divisor+1,f
  5393  0BD5  0CF0               	rrf	___lldiv@divisor,f
  5394  0BD6  3EFF               	addlw	-1
  5395  0BD7  1D03               	skipz
  5396  0BD8  2BD1               	goto	u3085
  5397  0BD9  3001               	movlw	1
  5398  0BDA  02FD               	subwf	___lldiv@counter,f
  5399  0BDB  1D03               	btfss	3,2
  5400  0BDC  2BA8               	goto	l3325
  5401  0BDD                     l3337:	
  5402  0BDD  087C               	movf	___lldiv@quotient+3,w
  5403  0BDE  00F3               	movwf	?___lldiv+3
  5404  0BDF  087B               	movf	___lldiv@quotient+2,w
  5405  0BE0  00F2               	movwf	?___lldiv+2
  5406  0BE1  087A               	movf	___lldiv@quotient+1,w
  5407  0BE2  00F1               	movwf	?___lldiv+1
  5408  0BE3  0879               	movf	___lldiv@quotient,w
  5409  0BE4  00F0               	movwf	?___lldiv
  5410  0BE5  0008               	return
  5411  0BE6                     __end_of___lldiv:	
  5412                           
  5413                           	psect	text14
  5414  0925                     __ptext14:	
  5415 ;; *************** function _FMTX *****************
  5416 ;; Defined at:
  5417 ;;		line 270 in file "FMCW.c"
  5418 ;; Parameters:    Size  Location     Type
  5419 ;;  Nref            2   60[BANK0 ] int 
  5420 ;;  Nprg            2   62[BANK0 ] PTR int 
  5421 ;;		 -> RAM(512), main@FMTX_Nprg(10), FMTX_Nprg(10), 
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;  fmtx            2   64[BANK0 ] int 
  5424 ;; Return value:  Size  Location     Type
  5425 ;;                  1    wreg      void 
  5426 ;; Registers used:
  5427 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5428 ;; Tracked objects:
  5429 ;;		On entry : 0/0
  5430 ;;		On exit  : 0/0
  5431 ;;		Unchanged: 0/0
  5432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5433 ;;      Params:         0       4       0       0       0
  5434 ;;      Locals:         0       2       0       0       0
  5435 ;;      Temps:          0       0       0       0       0
  5436 ;;      Totals:         0       6       0       0       0
  5437 ;;Total ram usage:        6 bytes
  5438 ;; Hardware stack levels used:    1
  5439 ;; Hardware stack levels required when called:    3
  5440 ;; This function calls:
  5441 ;;		_OPINIT
  5442 ;;		_OUTFQ
  5443 ;;		_RFDOUT
  5444 ;; This function is called by:
  5445 ;;		_main
  5446 ;;		_SetPLL
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450                           
  5451                           ;psect for function _FMTX
  5452  0925                     _FMTX:	
  5453                           
  5454                           ;FMCW.c: 271: int fmtx = 1;
  5455                           
  5456                           ;incstack = 0
  5457                           ; Regs used in _FMTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5458  0925  3001               	movlw	1
  5459  0926  1283               	bcf	3,5	;RP0=0, select bank0
  5460  0927  1303               	bcf	3,6	;RP1=0, select bank0
  5461  0928  00E0               	movwf	FMTX@fmtx
  5462  0929  3000               	movlw	0
  5463  092A  00E1               	movwf	FMTX@fmtx+1
  5464                           
  5465                           ;FMCW.c: 272: OPINIT(fmtx);
  5466  092B  0861               	movf	FMTX@fmtx+1,w
  5467  092C  00F5               	movwf	OPINIT@fmcwtxrx+1
  5468  092D  0860               	movf	FMTX@fmtx,w
  5469  092E  00F4               	movwf	OPINIT@fmcwtxrx
  5470  092F  120A  158A  24AC  120A  158A  	fcall	_OPINIT
  5471                           
  5472                           ;FMCW.c: 273: RFDOUT(fmtx, Nref);
  5473  0934  1283               	bcf	3,5	;RP0=0, select bank0
  5474  0935  1303               	bcf	3,6	;RP1=0, select bank0
  5475  0936  0861               	movf	FMTX@fmtx+1,w
  5476  0937  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5477  0938  0860               	movf	FMTX@fmtx,w
  5478  0939  00F9               	movwf	RFDOUT@fmcwtxrx
  5479  093A  085D               	movf	FMTX@Nref+1,w
  5480  093B  00FC               	movwf	RFDOUT@Nref+1
  5481  093C  085C               	movf	FMTX@Nref,w
  5482  093D  00FB               	movwf	RFDOUT@Nref
  5483  093E  120A  158A  2529  120A  158A  	fcall	_RFDOUT
  5484                           
  5485                           ;FMCW.c: 274: OUTFQ(fmtx, Nprg);
  5486  0943  1283               	bcf	3,5	;RP0=0, select bank0
  5487  0944  1303               	bcf	3,6	;RP1=0, select bank0
  5488  0945  0861               	movf	FMTX@fmtx+1,w
  5489  0946  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5490  0947  0860               	movf	FMTX@fmtx,w
  5491  0948  00F9               	movwf	OUTFQ@fmcwtxrx
  5492  0949  085E               	movf	FMTX@Nprg,w
  5493  094A  00FB               	movwf	OUTFQ@Nprg
  5494  094B  085F               	movf	FMTX@Nprg+1,w
  5495  094C  00FC               	movwf	OUTFQ@Nprg+1
  5496  094D  120A  118A  20AC   	fcall	_OUTFQ
  5497  0950  0008               	return
  5498  0951                     __end_of_FMTX:	
  5499                           
  5500                           	psect	text15
  5501  08F9                     __ptext15:	
  5502 ;; *************** function _FMRX *****************
  5503 ;; Defined at:
  5504 ;;		line 298 in file "FMCW.c"
  5505 ;; Parameters:    Size  Location     Type
  5506 ;;  Nref            2   60[BANK0 ] int 
  5507 ;;  Nprg            2   62[BANK0 ] PTR int 
  5508 ;;		 -> RAM(512), main@FMRX_Nprg(10), FMRX_Nprg(10), 
  5509 ;; Auto vars:     Size  Location     Type
  5510 ;;  fmrx            2   64[BANK0 ] int 
  5511 ;; Return value:  Size  Location     Type
  5512 ;;                  1    wreg      void 
  5513 ;; Registers used:
  5514 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5515 ;; Tracked objects:
  5516 ;;		On entry : 0/0
  5517 ;;		On exit  : 0/0
  5518 ;;		Unchanged: 0/0
  5519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5520 ;;      Params:         0       4       0       0       0
  5521 ;;      Locals:         0       2       0       0       0
  5522 ;;      Temps:          0       0       0       0       0
  5523 ;;      Totals:         0       6       0       0       0
  5524 ;;Total ram usage:        6 bytes
  5525 ;; Hardware stack levels used:    1
  5526 ;; Hardware stack levels required when called:    3
  5527 ;; This function calls:
  5528 ;;		_OPINIT
  5529 ;;		_OUTFQ
  5530 ;;		_RFDOUT
  5531 ;; This function is called by:
  5532 ;;		_main
  5533 ;;		_SetPLL
  5534 ;; This function uses a non-reentrant model
  5535 ;;
  5536                           
  5537                           
  5538                           ;psect for function _FMRX
  5539  08F9                     _FMRX:	
  5540                           
  5541                           ;FMCW.c: 299: int fmrx = 3;
  5542                           
  5543                           ;incstack = 0
  5544                           ; Regs used in _FMRX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5545  08F9  3003               	movlw	3
  5546  08FA  1283               	bcf	3,5	;RP0=0, select bank0
  5547  08FB  1303               	bcf	3,6	;RP1=0, select bank0
  5548  08FC  00E0               	movwf	FMRX@fmrx
  5549  08FD  3000               	movlw	0
  5550  08FE  00E1               	movwf	FMRX@fmrx+1
  5551                           
  5552                           ;FMCW.c: 300: OPINIT(fmrx);
  5553  08FF  0861               	movf	FMRX@fmrx+1,w
  5554  0900  00F5               	movwf	OPINIT@fmcwtxrx+1
  5555  0901  0860               	movf	FMRX@fmrx,w
  5556  0902  00F4               	movwf	OPINIT@fmcwtxrx
  5557  0903  120A  158A  24AC  120A  158A  	fcall	_OPINIT
  5558                           
  5559                           ;FMCW.c: 301: RFDOUT(fmrx, Nref);
  5560  0908  1283               	bcf	3,5	;RP0=0, select bank0
  5561  0909  1303               	bcf	3,6	;RP1=0, select bank0
  5562  090A  0861               	movf	FMRX@fmrx+1,w
  5563  090B  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5564  090C  0860               	movf	FMRX@fmrx,w
  5565  090D  00F9               	movwf	RFDOUT@fmcwtxrx
  5566  090E  085D               	movf	FMRX@Nref+1,w
  5567  090F  00FC               	movwf	RFDOUT@Nref+1
  5568  0910  085C               	movf	FMRX@Nref,w
  5569  0911  00FB               	movwf	RFDOUT@Nref
  5570  0912  120A  158A  2529  120A  158A  	fcall	_RFDOUT
  5571                           
  5572                           ;FMCW.c: 302: OUTFQ(fmrx, Nprg);
  5573  0917  1283               	bcf	3,5	;RP0=0, select bank0
  5574  0918  1303               	bcf	3,6	;RP1=0, select bank0
  5575  0919  0861               	movf	FMRX@fmrx+1,w
  5576  091A  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5577  091B  0860               	movf	FMRX@fmrx,w
  5578  091C  00F9               	movwf	OUTFQ@fmcwtxrx
  5579  091D  085E               	movf	FMRX@Nprg,w
  5580  091E  00FB               	movwf	OUTFQ@Nprg
  5581  091F  085F               	movf	FMRX@Nprg+1,w
  5582  0920  00FC               	movwf	OUTFQ@Nprg+1
  5583  0921  120A  118A  20AC   	fcall	_OUTFQ
  5584  0924  0008               	return
  5585  0925                     __end_of_FMRX:	
  5586                           
  5587                           	psect	text16
  5588  0B2B                     __ptext16:	
  5589 ;; *************** function _EEPROM_Write *****************
  5590 ;; Defined at:
  5591 ;;		line 51 in file "I2C.c"
  5592 ;; Parameters:    Size  Location     Type
  5593 ;;  EEPROM_addre    1    wreg     unsigned char 
  5594 ;;  high_address    1    2[COMMON] unsigned char 
  5595 ;;  low_address     1    3[COMMON] unsigned char 
  5596 ;;  data            1    4[COMMON] PTR unsigned char 
  5597 ;;		 -> NULL(0), dData(16), 
  5598 ;; Auto vars:     Size  Location     Type
  5599 ;;  EEPROM_addre    1    8[COMMON] unsigned char 
  5600 ;;  Address         1    9[COMMON] unsigned char 
  5601 ;; Return value:  Size  Location     Type
  5602 ;;                  1    wreg      void 
  5603 ;; Registers used:
  5604 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5605 ;; Tracked objects:
  5606 ;;		On entry : 0/0
  5607 ;;		On exit  : 0/0
  5608 ;;		Unchanged: 0/0
  5609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5610 ;;      Params:         3       0       0       0       0
  5611 ;;      Locals:         2       0       0       0       0
  5612 ;;      Temps:          3       0       0       0       0
  5613 ;;      Totals:         8       0       0       0       0
  5614 ;;Total ram usage:        8 bytes
  5615 ;; Hardware stack levels used:    1
  5616 ;; Hardware stack levels required when called:    2
  5617 ;; This function calls:
  5618 ;;		_I2C_Master_Start
  5619 ;;		_I2C_Master_Stop
  5620 ;;		_I2C_Master_Write
  5621 ;; This function is called by:
  5622 ;;		_main
  5623 ;; This function uses a non-reentrant model
  5624 ;;
  5625                           
  5626                           
  5627                           ;psect for function _EEPROM_Write
  5628  0B2B                     _EEPROM_Write:	
  5629                           
  5630                           ;incstack = 0
  5631                           ; Regs used in _EEPROM_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5632                           ;EEPROM_Write@EEPROM_address stored from wreg
  5633  0B2B  00F8               	movwf	EEPROM_Write@EEPROM_address
  5634                           
  5635                           ;I2C.c: 52: UBYTE Address = EEPROM_address << 1;
  5636  0B2C  0878               	movf	EEPROM_Write@EEPROM_address,w
  5637  0B2D  00F5               	movwf	??_EEPROM_Write
  5638  0B2E  0775               	addwf	??_EEPROM_Write,w
  5639  0B2F  00F6               	movwf	??_EEPROM_Write+1
  5640  0B30  0876               	movf	??_EEPROM_Write+1,w
  5641  0B31  00F9               	movwf	EEPROM_Write@Address
  5642                           
  5643                           ;I2C.c: 55: I2C_Master_Start();
  5644  0B32  160A  118A  27AE  120A  158A  	fcall	_I2C_Master_Start
  5645                           
  5646                           ;I2C.c: 56: I2C_Master_Write(Address);
  5647  0B37  0879               	movf	EEPROM_Write@Address,w
  5648  0B38  00F5               	movwf	??_EEPROM_Write
  5649  0B39  01F6               	clrf	??_EEPROM_Write+1
  5650  0B3A  0875               	movf	??_EEPROM_Write,w
  5651  0B3B  00F0               	movwf	I2C_Master_Write@d
  5652  0B3C  0876               	movf	??_EEPROM_Write+1,w
  5653  0B3D  00F1               	movwf	I2C_Master_Write@d+1
  5654  0B3E  160A  118A  27BC  120A  158A  	fcall	_I2C_Master_Write
  5655                           
  5656                           ;I2C.c: 57: I2C_Master_Write(high_address);
  5657  0B43  0872               	movf	EEPROM_Write@high_address,w
  5658  0B44  00F5               	movwf	??_EEPROM_Write
  5659  0B45  01F6               	clrf	??_EEPROM_Write+1
  5660  0B46  0875               	movf	??_EEPROM_Write,w
  5661  0B47  00F0               	movwf	I2C_Master_Write@d
  5662  0B48  0876               	movf	??_EEPROM_Write+1,w
  5663  0B49  00F1               	movwf	I2C_Master_Write@d+1
  5664  0B4A  160A  118A  27BC  120A  158A  	fcall	_I2C_Master_Write
  5665                           
  5666                           ;I2C.c: 58: I2C_Master_Write(low_address);
  5667  0B4F  0873               	movf	EEPROM_Write@low_address,w
  5668  0B50  00F5               	movwf	??_EEPROM_Write
  5669  0B51  01F6               	clrf	??_EEPROM_Write+1
  5670  0B52  0875               	movf	??_EEPROM_Write,w
  5671  0B53  00F0               	movwf	I2C_Master_Write@d
  5672  0B54  0876               	movf	??_EEPROM_Write+1,w
  5673  0B55  00F1               	movwf	I2C_Master_Write@d+1
  5674  0B56  160A  118A  27BC  120A  158A  	fcall	_I2C_Master_Write
  5675  0B5B                     l3535:	
  5676                           ;I2C.c: 59: while(*data){
  5677                           
  5678  0B5B  0874               	movf	EEPROM_Write@data,w
  5679  0B5C  0084               	movwf	4
  5680  0B5D  1783               	bsf	3,7	;select IRP bank2
  5681  0B5E  0800               	movf	0,w
  5682  0B5F  1903               	btfsc	3,2
  5683  0B60  2B75               	goto	l3537
  5684                           
  5685                           ;I2C.c: 60: I2C_Master_Write(*data);
  5686  0B61  0874               	movf	EEPROM_Write@data,w
  5687  0B62  0084               	movwf	4
  5688  0B63  1783               	bsf	3,7	;select IRP bank2
  5689  0B64  0800               	movf	0,w
  5690  0B65  00F5               	movwf	??_EEPROM_Write
  5691  0B66  01F6               	clrf	??_EEPROM_Write+1
  5692  0B67  0875               	movf	??_EEPROM_Write,w
  5693  0B68  00F0               	movwf	I2C_Master_Write@d
  5694  0B69  0876               	movf	??_EEPROM_Write+1,w
  5695  0B6A  00F1               	movwf	I2C_Master_Write@d+1
  5696  0B6B  160A  118A  27BC  120A  158A  	fcall	_I2C_Master_Write
  5697                           
  5698                           ;I2C.c: 61: ++data;
  5699  0B70  3001               	movlw	1
  5700  0B71  00F5               	movwf	??_EEPROM_Write
  5701  0B72  0875               	movf	??_EEPROM_Write,w
  5702  0B73  07F4               	addwf	EEPROM_Write@data,f
  5703  0B74  2B5B               	goto	l3535
  5704  0B75                     l3537:	
  5705                           
  5706                           ;I2C.c: 62: }
  5707                           ;I2C.c: 63: I2C_Master_Stop();
  5708  0B75  160A  118A  27B5  120A  158A  	fcall	_I2C_Master_Stop
  5709                           
  5710                           ;I2C.c: 64: _delay((unsigned long)((200)*(10000000/4000.0)));
  5711  0B7A  3003               	movlw	3
  5712  0B7B  00F7               	movwf	??_EEPROM_Write+2
  5713  0B7C  308A               	movlw	138
  5714  0B7D  00F6               	movwf	??_EEPROM_Write+1
  5715  0B7E  3056               	movlw	86
  5716  0B7F  00F5               	movwf	??_EEPROM_Write
  5717  0B80                     u3727:	
  5718  0B80  0BF5               	decfsz	??_EEPROM_Write,f
  5719  0B81  2B80               	goto	u3727
  5720  0B82  0BF6               	decfsz	??_EEPROM_Write+1,f
  5721  0B83  2B80               	goto	u3727
  5722  0B84  0BF7               	decfsz	??_EEPROM_Write+2,f
  5723  0B85  2B80               	goto	u3727
  5724  0B86  2B87               	nop2
  5725  0B87  0008               	return
  5726  0B88                     __end_of_EEPROM_Write:	
  5727                           
  5728                           	psect	text17
  5729  17BC                     __ptext17:	
  5730 ;; *************** function _I2C_Master_Write *****************
  5731 ;; Defined at:
  5732 ;;		line 34 in file "I2C.c"
  5733 ;; Parameters:    Size  Location     Type
  5734 ;;  d               2    0[COMMON] unsigned int 
  5735 ;; Auto vars:     Size  Location     Type
  5736 ;;		None
  5737 ;; Return value:  Size  Location     Type
  5738 ;;                  1    wreg      void 
  5739 ;; Registers used:
  5740 ;;		wreg, status,2, status,0, pclath, cstack
  5741 ;; Tracked objects:
  5742 ;;		On entry : 0/0
  5743 ;;		On exit  : 0/0
  5744 ;;		Unchanged: 0/0
  5745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5746 ;;      Params:         2       0       0       0       0
  5747 ;;      Locals:         0       0       0       0       0
  5748 ;;      Temps:          0       0       0       0       0
  5749 ;;      Totals:         2       0       0       0       0
  5750 ;;Total ram usage:        2 bytes
  5751 ;; Hardware stack levels used:    1
  5752 ;; Hardware stack levels required when called:    1
  5753 ;; This function calls:
  5754 ;;		_I2C_Master_Wait
  5755 ;; This function is called by:
  5756 ;;		_EEPROM_Write
  5757 ;;		_EEPROM_Read
  5758 ;; This function uses a non-reentrant model
  5759 ;;
  5760                           
  5761                           
  5762                           ;psect for function _I2C_Master_Write
  5763  17BC                     _I2C_Master_Write:	
  5764                           
  5765                           ;I2C.c: 35: I2C_Master_Wait();
  5766                           
  5767                           ;incstack = 0
  5768                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5769  17BC  160A  118A  27D4   	fcall	_I2C_Master_Wait
  5770                           
  5771                           ;I2C.c: 36: SSPBUF = d;
  5772  17BF  0870               	movf	I2C_Master_Write@d,w
  5773  17C0  1283               	bcf	3,5	;RP0=0, select bank0
  5774  17C1  1303               	bcf	3,6	;RP1=0, select bank0
  5775  17C2  0093               	movwf	19	;volatile
  5776  17C3  0008               	return
  5777  17C4                     __end_of_I2C_Master_Write:	
  5778                           
  5779                           	psect	text18
  5780  17B5                     __ptext18:	
  5781 ;; *************** function _I2C_Master_Stop *****************
  5782 ;; Defined at:
  5783 ;;		line 29 in file "I2C.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;		None
  5786 ;; Auto vars:     Size  Location     Type
  5787 ;;		None
  5788 ;; Return value:  Size  Location     Type
  5789 ;;                  1    wreg      void 
  5790 ;; Registers used:
  5791 ;;		wreg, status,2, status,0, pclath, cstack
  5792 ;; Tracked objects:
  5793 ;;		On entry : 0/0
  5794 ;;		On exit  : 0/0
  5795 ;;		Unchanged: 0/0
  5796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5797 ;;      Params:         0       0       0       0       0
  5798 ;;      Locals:         0       0       0       0       0
  5799 ;;      Temps:          0       0       0       0       0
  5800 ;;      Totals:         0       0       0       0       0
  5801 ;;Total ram usage:        0 bytes
  5802 ;; Hardware stack levels used:    1
  5803 ;; Hardware stack levels required when called:    1
  5804 ;; This function calls:
  5805 ;;		_I2C_Master_Wait
  5806 ;; This function is called by:
  5807 ;;		_EEPROM_Write
  5808 ;;		_EEPROM_Read
  5809 ;; This function uses a non-reentrant model
  5810 ;;
  5811                           
  5812                           
  5813                           ;psect for function _I2C_Master_Stop
  5814  17B5                     _I2C_Master_Stop:	
  5815                           
  5816                           ;I2C.c: 30: I2C_Master_Wait();
  5817                           
  5818                           ;incstack = 0
  5819                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5820  17B5  160A  118A  27D4   	fcall	_I2C_Master_Wait
  5821                           
  5822                           ;I2C.c: 31: PEN = 1;
  5823  17B8  1683               	bsf	3,5	;RP0=1, select bank1
  5824  17B9  1303               	bcf	3,6	;RP1=0, select bank1
  5825  17BA  1511               	bsf	17,2	;volatile
  5826  17BB  0008               	return
  5827  17BC                     __end_of_I2C_Master_Stop:	
  5828                           
  5829                           	psect	text19
  5830  17AE                     __ptext19:	
  5831 ;; *************** function _I2C_Master_Start *****************
  5832 ;; Defined at:
  5833 ;;		line 19 in file "I2C.c"
  5834 ;; Parameters:    Size  Location     Type
  5835 ;;		None
  5836 ;; Auto vars:     Size  Location     Type
  5837 ;;		None
  5838 ;; Return value:  Size  Location     Type
  5839 ;;                  1    wreg      void 
  5840 ;; Registers used:
  5841 ;;		wreg, status,2, status,0, pclath, cstack
  5842 ;; Tracked objects:
  5843 ;;		On entry : 0/0
  5844 ;;		On exit  : 0/0
  5845 ;;		Unchanged: 0/0
  5846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5847 ;;      Params:         0       0       0       0       0
  5848 ;;      Locals:         0       0       0       0       0
  5849 ;;      Temps:          0       0       0       0       0
  5850 ;;      Totals:         0       0       0       0       0
  5851 ;;Total ram usage:        0 bytes
  5852 ;; Hardware stack levels used:    1
  5853 ;; Hardware stack levels required when called:    1
  5854 ;; This function calls:
  5855 ;;		_I2C_Master_Wait
  5856 ;; This function is called by:
  5857 ;;		_EEPROM_Write
  5858 ;;		_EEPROM_Read
  5859 ;; This function uses a non-reentrant model
  5860 ;;
  5861                           
  5862                           
  5863                           ;psect for function _I2C_Master_Start
  5864  17AE                     _I2C_Master_Start:	
  5865                           
  5866                           ;I2C.c: 20: I2C_Master_Wait();
  5867                           
  5868                           ;incstack = 0
  5869                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5870  17AE  160A  118A  27D4   	fcall	_I2C_Master_Wait
  5871                           
  5872                           ;I2C.c: 21: SEN = 1;
  5873  17B1  1683               	bsf	3,5	;RP0=1, select bank1
  5874  17B2  1303               	bcf	3,6	;RP1=0, select bank1
  5875  17B3  1411               	bsf	17,0	;volatile
  5876  17B4  0008               	return
  5877  17B5                     __end_of_I2C_Master_Start:	
  5878                           
  5879                           	psect	text20
  5880  17D4                     __ptext20:	
  5881 ;; *************** function _I2C_Master_Wait *****************
  5882 ;; Defined at:
  5883 ;;		line 15 in file "I2C.c"
  5884 ;; Parameters:    Size  Location     Type
  5885 ;;		None
  5886 ;; Auto vars:     Size  Location     Type
  5887 ;;		None
  5888 ;; Return value:  Size  Location     Type
  5889 ;;                  1    wreg      void 
  5890 ;; Registers used:
  5891 ;;		wreg, status,2
  5892 ;; Tracked objects:
  5893 ;;		On entry : 0/0
  5894 ;;		On exit  : 0/0
  5895 ;;		Unchanged: 0/0
  5896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5897 ;;      Params:         0       0       0       0       0
  5898 ;;      Locals:         0       0       0       0       0
  5899 ;;      Temps:          0       0       0       0       0
  5900 ;;      Totals:         0       0       0       0       0
  5901 ;;Total ram usage:        0 bytes
  5902 ;; Hardware stack levels used:    1
  5903 ;; This function calls:
  5904 ;;		Nothing
  5905 ;; This function is called by:
  5906 ;;		_I2C_Master_Start
  5907 ;;		_I2C_Master_Stop
  5908 ;;		_I2C_Master_Write
  5909 ;;		_I2C_Master_RepeatedStart
  5910 ;;		_I2C_Master_Read
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           
  5915                           ;psect for function _I2C_Master_Wait
  5916  17D4                     _I2C_Master_Wait:	
  5917  17D4                     l490:	
  5918                           ;I2C.c: 16: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5919                           
  5920                           ;incstack = 0
  5921                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5922                           
  5923  17D4  1683               	bsf	3,5	;RP0=1, select bank1
  5924  17D5  1303               	bcf	3,6	;RP1=0, select bank1
  5925  17D6  1914               	btfsc	20,2	;volatile
  5926  17D7  2FD4               	goto	l490
  5927  17D8  0811               	movf	17,w	;volatile
  5928  17D9  391F               	andlw	31
  5929  17DA  1903               	btfsc	3,2
  5930  17DB  0008               	return
  5931  17DC  2FD4               	goto	l490
  5932  17DD                     __end_of_I2C_Master_Wait:	
  5933                           
  5934                           	psect	text21
  5935  08CD                     __ptext21:	
  5936 ;; *************** function _CWTX *****************
  5937 ;; Defined at:
  5938 ;;		line 284 in file "FMCW.c"
  5939 ;; Parameters:    Size  Location     Type
  5940 ;;  Nref            2   60[BANK0 ] int 
  5941 ;;  Nprg            2   62[BANK0 ] PTR int 
  5942 ;;		 -> RAM(512), main@CWTX_Nprg(10), CWTX_Nprg(10), 
  5943 ;; Auto vars:     Size  Location     Type
  5944 ;;  cwtx            2   64[BANK0 ] int 
  5945 ;; Return value:  Size  Location     Type
  5946 ;;                  1    wreg      void 
  5947 ;; Registers used:
  5948 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5954 ;;      Params:         0       4       0       0       0
  5955 ;;      Locals:         0       2       0       0       0
  5956 ;;      Temps:          0       0       0       0       0
  5957 ;;      Totals:         0       6       0       0       0
  5958 ;;Total ram usage:        6 bytes
  5959 ;; Hardware stack levels used:    1
  5960 ;; Hardware stack levels required when called:    3
  5961 ;; This function calls:
  5962 ;;		_OPINIT
  5963 ;;		_OUTFQ
  5964 ;;		_RFDOUT
  5965 ;; This function is called by:
  5966 ;;		_main
  5967 ;;		_SetPLL
  5968 ;; This function uses a non-reentrant model
  5969 ;;
  5970                           
  5971                           
  5972                           ;psect for function _CWTX
  5973  08CD                     _CWTX:	
  5974                           
  5975                           ;FMCW.c: 285: int cwtx = 2;
  5976                           
  5977                           ;incstack = 0
  5978                           ; Regs used in _CWTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5979  08CD  3002               	movlw	2
  5980  08CE  1283               	bcf	3,5	;RP0=0, select bank0
  5981  08CF  1303               	bcf	3,6	;RP1=0, select bank0
  5982  08D0  00E0               	movwf	CWTX@cwtx
  5983  08D1  3000               	movlw	0
  5984  08D2  00E1               	movwf	CWTX@cwtx+1
  5985                           
  5986                           ;FMCW.c: 286: OPINIT(cwtx);
  5987  08D3  0861               	movf	CWTX@cwtx+1,w
  5988  08D4  00F5               	movwf	OPINIT@fmcwtxrx+1
  5989  08D5  0860               	movf	CWTX@cwtx,w
  5990  08D6  00F4               	movwf	OPINIT@fmcwtxrx
  5991  08D7  120A  158A  24AC  120A  158A  	fcall	_OPINIT
  5992                           
  5993                           ;FMCW.c: 287: RFDOUT(cwtx, Nref);
  5994  08DC  1283               	bcf	3,5	;RP0=0, select bank0
  5995  08DD  1303               	bcf	3,6	;RP1=0, select bank0
  5996  08DE  0861               	movf	CWTX@cwtx+1,w
  5997  08DF  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5998  08E0  0860               	movf	CWTX@cwtx,w
  5999  08E1  00F9               	movwf	RFDOUT@fmcwtxrx
  6000  08E2  085D               	movf	CWTX@Nref+1,w
  6001  08E3  00FC               	movwf	RFDOUT@Nref+1
  6002  08E4  085C               	movf	CWTX@Nref,w
  6003  08E5  00FB               	movwf	RFDOUT@Nref
  6004  08E6  120A  158A  2529  120A  158A  	fcall	_RFDOUT
  6005                           
  6006                           ;FMCW.c: 288: OUTFQ(cwtx, Nprg);
  6007  08EB  1283               	bcf	3,5	;RP0=0, select bank0
  6008  08EC  1303               	bcf	3,6	;RP1=0, select bank0
  6009  08ED  0861               	movf	CWTX@cwtx+1,w
  6010  08EE  00FA               	movwf	OUTFQ@fmcwtxrx+1
  6011  08EF  0860               	movf	CWTX@cwtx,w
  6012  08F0  00F9               	movwf	OUTFQ@fmcwtxrx
  6013  08F1  085E               	movf	CWTX@Nprg,w
  6014  08F2  00FB               	movwf	OUTFQ@Nprg
  6015  08F3  085F               	movf	CWTX@Nprg+1,w
  6016  08F4  00FC               	movwf	OUTFQ@Nprg+1
  6017  08F5  120A  118A  20AC   	fcall	_OUTFQ
  6018  08F8  0008               	return
  6019  08F9                     __end_of_CWTX:	
  6020                           
  6021                           	psect	text22
  6022  0D29                     __ptext22:	
  6023 ;; *************** function _RFDOUT *****************
  6024 ;; Defined at:
  6025 ;;		line 200 in file "FMCW.c"
  6026 ;; Parameters:    Size  Location     Type
  6027 ;;  fmcwtxrx        2    9[COMMON] int 
  6028 ;;  Nref            2   11[COMMON] int 
  6029 ;; Auto vars:     Size  Location     Type
  6030 ;;  i               2   31[BANK0 ] int 
  6031 ;;  i               2   27[BANK0 ] int 
  6032 ;;  i               2   29[BANK0 ] int 
  6033 ;;  Nref_b         24    3[BANK0 ] int [12]
  6034 ;; Return value:  Size  Location     Type
  6035 ;;                  1    wreg      void 
  6036 ;; Registers used:
  6037 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6038 ;; Tracked objects:
  6039 ;;		On entry : 0/0
  6040 ;;		On exit  : 0/0
  6041 ;;		Unchanged: 0/0
  6042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6043 ;;      Params:         4       0       0       0       0
  6044 ;;      Locals:         0      30       0       0       0
  6045 ;;      Temps:          0       3       0       0       0
  6046 ;;      Totals:         4      33       0       0       0
  6047 ;;Total ram usage:       37 bytes
  6048 ;; Hardware stack levels used:    1
  6049 ;; Hardware stack levels required when called:    2
  6050 ;; This function calls:
  6051 ;;		_H_OUT
  6052 ;;		_L_OUT
  6053 ;;		_STBOUT
  6054 ;;		___awdiv
  6055 ;; This function is called by:
  6056 ;;		_FMTX
  6057 ;;		_CWTX
  6058 ;;		_FMRX
  6059 ;; This function uses a non-reentrant model
  6060 ;;
  6061                           
  6062                           
  6063                           ;psect for function _RFDOUT
  6064  0D29                     _RFDOUT:	
  6065                           
  6066                           ;FMCW.c: 201: int Nref_b[12];
  6067                           ;FMCW.c: 203: for(int i=0; i<12; i++){
  6068                           
  6069                           ;incstack = 0
  6070                           ; Regs used in _RFDOUT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6071  0D29  1283               	bcf	3,5	;RP0=0, select bank0
  6072  0D2A  1303               	bcf	3,6	;RP1=0, select bank0
  6073  0D2B  01BD               	clrf	RFDOUT@i
  6074  0D2C  01BE               	clrf	RFDOUT@i+1
  6075  0D2D  083E               	movf	RFDOUT@i+1,w
  6076  0D2E  3A80               	xorlw	128
  6077  0D2F  00FF               	movwf	127
  6078  0D30  3080               	movlw	128
  6079  0D31  027F               	subwf	127,w
  6080  0D32  1D03               	skipz
  6081  0D33  2D36               	goto	u2955
  6082  0D34  300C               	movlw	12
  6083  0D35  023D               	subwf	RFDOUT@i,w
  6084  0D36                     u2955:	
  6085  0D36  1803               	btfsc	3,0
  6086  0D37  2D54               	goto	l3281
  6087  0D38                     l3275:	
  6088                           
  6089                           ;FMCW.c: 204: Nref_b[i] = 0;
  6090  0D38  1283               	bcf	3,5	;RP0=0, select bank0
  6091  0D39  1303               	bcf	3,6	;RP1=0, select bank0
  6092  0D3A  083D               	movf	RFDOUT@i,w
  6093  0D3B  00A0               	movwf	??_RFDOUT
  6094  0D3C  0720               	addwf	??_RFDOUT,w
  6095  0D3D  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6096  0D3E  0084               	movwf	4
  6097  0D3F  1383               	bcf	3,7	;select IRP bank0
  6098  0D40  0180               	clrf	0
  6099  0D41  0A84               	incf	4,f
  6100  0D42  0180               	clrf	0
  6101  0D43  3001               	movlw	1
  6102  0D44  07BD               	addwf	RFDOUT@i,f
  6103  0D45  1803               	skipnc
  6104  0D46  0ABE               	incf	RFDOUT@i+1,f
  6105  0D47  3000               	movlw	0
  6106  0D48  07BE               	addwf	RFDOUT@i+1,f
  6107  0D49  083E               	movf	RFDOUT@i+1,w
  6108  0D4A  3A80               	xorlw	128
  6109  0D4B  00FF               	movwf	127
  6110  0D4C  3080               	movlw	128
  6111  0D4D  027F               	subwf	127,w
  6112  0D4E  1D03               	skipz
  6113  0D4F  2D52               	goto	u2965
  6114  0D50  300C               	movlw	12
  6115  0D51  023D               	subwf	RFDOUT@i,w
  6116  0D52                     u2965:	
  6117  0D52  1C03               	skipc
  6118  0D53  2D38               	goto	l3275
  6119  0D54                     l3281:	
  6120                           
  6121                           ;FMCW.c: 205: }
  6122                           ;FMCW.c: 208: for(int i=0; Nref>0; i++){
  6123  0D54  1283               	bcf	3,5	;RP0=0, select bank0
  6124  0D55  1303               	bcf	3,6	;RP1=0, select bank0
  6125  0D56  01BB               	clrf	RFDOUT@i_473
  6126  0D57  01BC               	clrf	RFDOUT@i_473+1
  6127  0D58  087C               	movf	RFDOUT@Nref+1,w
  6128  0D59  3A80               	xorlw	128
  6129  0D5A  00FF               	movwf	127
  6130  0D5B  3080               	movlw	128
  6131  0D5C  027F               	subwf	127,w
  6132  0D5D  1D03               	skipz
  6133  0D5E  2D61               	goto	u2975
  6134  0D5F  3001               	movlw	1
  6135  0D60  027B               	subwf	RFDOUT@Nref,w
  6136  0D61                     u2975:	
  6137  0D61  1C03               	btfss	3,0
  6138  0D62  2D9A               	goto	l3295
  6139  0D63                     l3287:	
  6140                           
  6141                           ;FMCW.c: 209: Nref_b[i] = Nref % 2;
  6142  0D63  3001               	movlw	1
  6143  0D64  057B               	andwf	RFDOUT@Nref,w
  6144  0D65  1283               	bcf	3,5	;RP0=0, select bank0
  6145  0D66  1303               	bcf	3,6	;RP1=0, select bank0
  6146  0D67  00A0               	movwf	??_RFDOUT
  6147  0D68  3000               	movlw	0
  6148  0D69  057C               	andwf	RFDOUT@Nref+1,w
  6149  0D6A  00A1               	movwf	??_RFDOUT+1
  6150  0D6B  083B               	movf	RFDOUT@i_473,w
  6151  0D6C  00A2               	movwf	??_RFDOUT+2
  6152  0D6D  0722               	addwf	??_RFDOUT+2,w
  6153  0D6E  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6154  0D6F  0084               	movwf	4
  6155  0D70  0820               	movf	??_RFDOUT,w
  6156  0D71  1383               	bcf	3,7	;select IRP bank0
  6157  0D72  0080               	movwf	0
  6158  0D73  0A84               	incf	4,f
  6159  0D74  0821               	movf	??_RFDOUT+1,w
  6160  0D75  0080               	movwf	0
  6161                           
  6162                           ;FMCW.c: 210: Nref = Nref / 2;
  6163  0D76  3002               	movlw	2
  6164  0D77  00F0               	movwf	___awdiv@divisor
  6165  0D78  3000               	movlw	0
  6166  0D79  00F1               	movwf	___awdiv@divisor+1
  6167  0D7A  087C               	movf	RFDOUT@Nref+1,w
  6168  0D7B  00F3               	movwf	___awdiv@dividend+1
  6169  0D7C  087B               	movf	RFDOUT@Nref,w
  6170  0D7D  00F2               	movwf	___awdiv@dividend
  6171  0D7E  120A  158A  22D2  120A  158A  	fcall	___awdiv
  6172  0D83  0871               	movf	?___awdiv+1,w
  6173  0D84  00FC               	movwf	RFDOUT@Nref+1
  6174  0D85  0870               	movf	?___awdiv,w
  6175  0D86  00FB               	movwf	RFDOUT@Nref
  6176  0D87  3001               	movlw	1
  6177  0D88  1283               	bcf	3,5	;RP0=0, select bank0
  6178  0D89  1303               	bcf	3,6	;RP1=0, select bank0
  6179  0D8A  07BB               	addwf	RFDOUT@i_473,f
  6180  0D8B  1803               	skipnc
  6181  0D8C  0ABC               	incf	RFDOUT@i_473+1,f
  6182  0D8D  3000               	movlw	0
  6183  0D8E  07BC               	addwf	RFDOUT@i_473+1,f
  6184  0D8F  087C               	movf	RFDOUT@Nref+1,w
  6185  0D90  3A80               	xorlw	128
  6186  0D91  00FF               	movwf	127
  6187  0D92  3080               	movlw	128
  6188  0D93  027F               	subwf	127,w
  6189  0D94  1D03               	skipz
  6190  0D95  2D98               	goto	u2985
  6191  0D96  3001               	movlw	1
  6192  0D97  027B               	subwf	RFDOUT@Nref,w
  6193  0D98                     u2985:	
  6194  0D98  1803               	skipnc
  6195  0D99  2D63               	goto	l3287
  6196  0D9A                     l3295:	
  6197                           
  6198                           ;FMCW.c: 211: }
  6199                           ;FMCW.c: 214: for (int i=0; i<12; i++)
  6200  0D9A  1283               	bcf	3,5	;RP0=0, select bank0
  6201  0D9B  1303               	bcf	3,6	;RP1=0, select bank0
  6202  0D9C  01BF               	clrf	RFDOUT@i_474
  6203  0D9D  01C0               	clrf	RFDOUT@i_474+1
  6204  0D9E  0840               	movf	RFDOUT@i_474+1,w
  6205  0D9F  3A80               	xorlw	128
  6206  0DA0  00FF               	movwf	127
  6207  0DA1  3080               	movlw	128
  6208  0DA2  027F               	subwf	127,w
  6209  0DA3  1D03               	skipz
  6210  0DA4  2DA7               	goto	u2995
  6211  0DA5  300C               	movlw	12
  6212  0DA6  023F               	subwf	RFDOUT@i_474,w
  6213  0DA7                     u2995:	
  6214  0DA7  1803               	btfsc	3,0
  6215  0DA8  2DF0               	goto	l3313
  6216  0DA9                     l3301:	
  6217                           
  6218                           ;FMCW.c: 215: {
  6219                           ;FMCW.c: 216: if(Nref_b[i] == 0)
  6220  0DA9  1283               	bcf	3,5	;RP0=0, select bank0
  6221  0DAA  1303               	bcf	3,6	;RP1=0, select bank0
  6222  0DAB  083F               	movf	RFDOUT@i_474,w
  6223  0DAC  00A0               	movwf	??_RFDOUT
  6224  0DAD  0720               	addwf	??_RFDOUT,w
  6225  0DAE  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6226  0DAF  0084               	movwf	4
  6227  0DB0  1383               	bcf	3,7	;select IRP bank0
  6228  0DB1  0800               	movf	0,w
  6229  0DB2  00A1               	movwf	??_RFDOUT+1
  6230  0DB3  0A84               	incf	4,f
  6231  0DB4  0800               	movf	0,w
  6232  0DB5  00A2               	movwf	??_RFDOUT+2
  6233  0DB6  0821               	movf	??_RFDOUT+1,w
  6234  0DB7  0422               	iorwf	??_RFDOUT+2,w
  6235  0DB8  1D03               	btfss	3,2
  6236  0DB9  2DC3               	goto	l3305
  6237                           
  6238                           ;FMCW.c: 217: {
  6239                           ;FMCW.c: 218: L_OUT(fmcwtxrx);
  6240  0DBA  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6241  0DBB  00F3               	movwf	L_OUT@fmcwtxrx+1
  6242  0DBC  0879               	movf	RFDOUT@fmcwtxrx,w
  6243  0DBD  00F2               	movwf	L_OUT@fmcwtxrx
  6244  0DBE  120A  158A  21F9  120A  158A  	fcall	_L_OUT
  6245  0DC3                     l3305:	
  6246                           
  6247                           ;FMCW.c: 219: }
  6248                           ;FMCW.c: 220: if(Nref_b[i] == 1)
  6249  0DC3  1283               	bcf	3,5	;RP0=0, select bank0
  6250  0DC4  1303               	bcf	3,6	;RP1=0, select bank0
  6251  0DC5  083F               	movf	RFDOUT@i_474,w
  6252  0DC6  00A0               	movwf	??_RFDOUT
  6253  0DC7  0720               	addwf	??_RFDOUT,w
  6254  0DC8  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6255  0DC9  0084               	movwf	4
  6256  0DCA  1383               	bcf	3,7	;select IRP bank0
  6257  0DCB  0800               	movf	0,w
  6258  0DCC  00A1               	movwf	??_RFDOUT+1
  6259  0DCD  0A84               	incf	4,f
  6260  0DCE  0800               	movf	0,w
  6261  0DCF  00A2               	movwf	??_RFDOUT+2
  6262  0DD0  0321               	decf	??_RFDOUT+1,w
  6263  0DD1  0422               	iorwf	??_RFDOUT+2,w
  6264  0DD2  1D03               	btfss	3,2
  6265  0DD3  2DDD               	goto	l3309
  6266                           
  6267                           ;FMCW.c: 221: {
  6268                           ;FMCW.c: 222: H_OUT(fmcwtxrx);
  6269  0DD4  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6270  0DD5  00F3               	movwf	H_OUT@fmcwtxrx+1
  6271  0DD6  0879               	movf	RFDOUT@fmcwtxrx,w
  6272  0DD7  00F2               	movwf	H_OUT@fmcwtxrx
  6273  0DD8  120A  158A  21B3  120A  158A  	fcall	_H_OUT
  6274  0DDD                     l3309:	
  6275  0DDD  3001               	movlw	1
  6276  0DDE  1283               	bcf	3,5	;RP0=0, select bank0
  6277  0DDF  1303               	bcf	3,6	;RP1=0, select bank0
  6278  0DE0  07BF               	addwf	RFDOUT@i_474,f
  6279  0DE1  1803               	skipnc
  6280  0DE2  0AC0               	incf	RFDOUT@i_474+1,f
  6281  0DE3  3000               	movlw	0
  6282  0DE4  07C0               	addwf	RFDOUT@i_474+1,f
  6283  0DE5  0840               	movf	RFDOUT@i_474+1,w
  6284  0DE6  3A80               	xorlw	128
  6285  0DE7  00FF               	movwf	127
  6286  0DE8  3080               	movlw	128
  6287  0DE9  027F               	subwf	127,w
  6288  0DEA  1D03               	skipz
  6289  0DEB  2DEE               	goto	u3025
  6290  0DEC  300C               	movlw	12
  6291  0DED  023F               	subwf	RFDOUT@i_474,w
  6292  0DEE                     u3025:	
  6293  0DEE  1C03               	skipc
  6294  0DEF  2DA9               	goto	l3301
  6295  0DF0                     l3313:	
  6296                           
  6297                           ;FMCW.c: 223: }
  6298                           ;FMCW.c: 224: }
  6299                           ;FMCW.c: 227: H_OUT(fmcwtxrx);
  6300  0DF0  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6301  0DF1  00F3               	movwf	H_OUT@fmcwtxrx+1
  6302  0DF2  0879               	movf	RFDOUT@fmcwtxrx,w
  6303  0DF3  00F2               	movwf	H_OUT@fmcwtxrx
  6304  0DF4  120A  158A  21B3  120A  158A  	fcall	_H_OUT
  6305                           
  6306                           ;FMCW.c: 228: H_OUT(fmcwtxrx);
  6307  0DF9  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6308  0DFA  00F3               	movwf	H_OUT@fmcwtxrx+1
  6309  0DFB  0879               	movf	RFDOUT@fmcwtxrx,w
  6310  0DFC  00F2               	movwf	H_OUT@fmcwtxrx
  6311  0DFD  120A  158A  21B3  120A  158A  	fcall	_H_OUT
  6312                           
  6313                           ;FMCW.c: 231: STBOUT(fmcwtxrx);
  6314  0E02  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6315  0E03  00F3               	movwf	STBOUT@fmcwtxrx+1
  6316  0E04  0879               	movf	RFDOUT@fmcwtxrx,w
  6317  0E05  00F2               	movwf	STBOUT@fmcwtxrx
  6318  0E06  120A  158A  2151   	fcall	_STBOUT
  6319  0E09  0008               	return
  6320  0E0A                     __end_of_RFDOUT:	
  6321                           
  6322                           	psect	text23
  6323  00AC                     __ptext23:	
  6324 ;; *************** function _OUTFQ *****************
  6325 ;; Defined at:
  6326 ;;		line 136 in file "FMCW.c"
  6327 ;; Parameters:    Size  Location     Type
  6328 ;;  fmcwtxrx        2    9[COMMON] int 
  6329 ;;  Nprg            2   11[COMMON] PTR int 
  6330 ;;		 -> RAM(512), main@FMRX_Nprg(10), main@CWTX_Nprg(10), main@FMTX_Nprg(10), 
  6331 ;;		 -> FMRX_Nprg(10), CWTX_Nprg(10), FMTX_Nprg(10), 
  6332 ;; Auto vars:     Size  Location     Type
  6333 ;;  j               2   58[BANK0 ] int 
  6334 ;;  i               2   56[BANK0 ] int 
  6335 ;;  i               2   50[BANK0 ] int 
  6336 ;;  i               2   54[BANK0 ] int 
  6337 ;;  Nprg_b         34   16[BANK0 ] int [17]
  6338 ;;  count           2   52[BANK0 ] int 
  6339 ;; Return value:  Size  Location     Type
  6340 ;;                  1    wreg      void 
  6341 ;; Registers used:
  6342 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6343 ;; Tracked objects:
  6344 ;;		On entry : 0/0
  6345 ;;		On exit  : 0/0
  6346 ;;		Unchanged: 0/0
  6347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6348 ;;      Params:         4       0       0       0       0
  6349 ;;      Locals:         0      44       0       0       0
  6350 ;;      Temps:          0      16       0       0       0
  6351 ;;      Totals:         4      60       0       0       0
  6352 ;;Total ram usage:       64 bytes
  6353 ;; Hardware stack levels used:    1
  6354 ;; Hardware stack levels required when called:    2
  6355 ;; This function calls:
  6356 ;;		_H_OUT
  6357 ;;		_L_OUT
  6358 ;;		_STBOUT
  6359 ;;		___awdiv
  6360 ;; This function is called by:
  6361 ;;		_FMTX
  6362 ;;		_CWTX
  6363 ;;		_FMRX
  6364 ;; This function uses a non-reentrant model
  6365 ;;
  6366                           
  6367                           
  6368                           ;psect for function _OUTFQ
  6369  00AC                     _OUTFQ:	
  6370                           
  6371                           ;FMCW.c: 137: int count = 0;
  6372                           
  6373                           ;incstack = 0
  6374                           ; Regs used in _OUTFQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6375  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  6376  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  6377  00AE  01D4               	clrf	OUTFQ@count
  6378  00AF  01D5               	clrf	OUTFQ@count+1
  6379                           
  6380                           ;FMCW.c: 138: int Nprg_b[17];
  6381                           ;FMCW.c: 140: for(int i=0; i<17; i++){
  6382  00B0  01D6               	clrf	OUTFQ@i
  6383  00B1  01D7               	clrf	OUTFQ@i+1
  6384  00B2  0857               	movf	OUTFQ@i+1,w
  6385  00B3  3A80               	xorlw	128
  6386  00B4  00FF               	movwf	127
  6387  00B5  3080               	movlw	128
  6388  00B6  027F               	subwf	127,w
  6389  00B7  1D03               	skipz
  6390  00B8  28BB               	goto	u2815
  6391  00B9  3011               	movlw	17
  6392  00BA  0256               	subwf	OUTFQ@i,w
  6393  00BB                     u2815:	
  6394  00BB  1803               	btfsc	3,0
  6395  00BC  28D9               	goto	l3203
  6396  00BD                     l3197:	
  6397                           
  6398                           ;FMCW.c: 141: Nprg_b[i] = 0;
  6399  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  6400  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  6401  00BF  0856               	movf	OUTFQ@i,w
  6402  00C0  00A0               	movwf	??_OUTFQ
  6403  00C1  0720               	addwf	??_OUTFQ,w
  6404  00C2  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6405  00C3  0084               	movwf	4
  6406  00C4  1383               	bcf	3,7	;select IRP bank0
  6407  00C5  0180               	clrf	0
  6408  00C6  0A84               	incf	4,f
  6409  00C7  0180               	clrf	0
  6410  00C8  3001               	movlw	1
  6411  00C9  07D6               	addwf	OUTFQ@i,f
  6412  00CA  1803               	skipnc
  6413  00CB  0AD7               	incf	OUTFQ@i+1,f
  6414  00CC  3000               	movlw	0
  6415  00CD  07D7               	addwf	OUTFQ@i+1,f
  6416  00CE  0857               	movf	OUTFQ@i+1,w
  6417  00CF  3A80               	xorlw	128
  6418  00D0  00FF               	movwf	127
  6419  00D1  3080               	movlw	128
  6420  00D2  027F               	subwf	127,w
  6421  00D3  1D03               	skipz
  6422  00D4  28D7               	goto	u2825
  6423  00D5  3011               	movlw	17
  6424  00D6  0256               	subwf	OUTFQ@i,w
  6425  00D7                     u2825:	
  6426  00D7  1C03               	skipc
  6427  00D8  28BD               	goto	l3197
  6428  00D9                     l3203:	
  6429                           
  6430                           ;FMCW.c: 142: }
  6431                           ;FMCW.c: 145: for(int i = 0; i < 17; i++){
  6432  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  6433  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  6434  00DB  01D2               	clrf	OUTFQ@i_462
  6435  00DC  01D3               	clrf	OUTFQ@i_462+1
  6436  00DD  0853               	movf	OUTFQ@i_462+1,w
  6437  00DE  3A80               	xorlw	128
  6438  00DF  00FF               	movwf	127
  6439  00E0  3080               	movlw	128
  6440  00E1  027F               	subwf	127,w
  6441  00E2  1D03               	skipz
  6442  00E3  28E6               	goto	u2835
  6443  00E4  3011               	movlw	17
  6444  00E5  0252               	subwf	OUTFQ@i_462,w
  6445  00E6                     u2835:	
  6446  00E6  1803               	btfsc	3,0
  6447  00E7  2AB7               	goto	l3249
  6448  00E8                     l3209:	
  6449                           
  6450                           ;FMCW.c: 146: for(int j = 0; j<5; j++){
  6451  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  6452  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  6453  00EA  01DA               	clrf	OUTFQ@j
  6454  00EB  01DB               	clrf	OUTFQ@j+1
  6455  00EC  085B               	movf	OUTFQ@j+1,w
  6456  00ED  3A80               	xorlw	128
  6457  00EE  00FF               	movwf	127
  6458  00EF  3080               	movlw	128
  6459  00F0  027F               	subwf	127,w
  6460  00F1  1D03               	skipz
  6461  00F2  28F5               	goto	u2845
  6462  00F3  3005               	movlw	5
  6463  00F4  025A               	subwf	OUTFQ@j,w
  6464  00F5                     u2845:	
  6465  00F5  1803               	btfsc	3,0
  6466  00F6  2AA4               	goto	l3245
  6467  00F7                     l3215:	
  6468                           
  6469                           ;FMCW.c: 147: if(Nprg[j] % 2 == 0) {
  6470  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  6471  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  6472  00F9  085B               	movf	OUTFQ@j+1,w
  6473  00FA  00A1               	movwf	??_OUTFQ+1
  6474  00FB  085A               	movf	OUTFQ@j,w
  6475  00FC  00A0               	movwf	??_OUTFQ
  6476  00FD  1003               	clrc
  6477  00FE  0DA0               	rlf	??_OUTFQ,f
  6478  00FF  0DA1               	rlf	??_OUTFQ+1,f
  6479  0100  0820               	movf	??_OUTFQ,w
  6480  0101  077B               	addwf	OUTFQ@Nprg,w
  6481  0102  00A2               	movwf	??_OUTFQ+2
  6482  0103  0821               	movf	??_OUTFQ+1,w
  6483  0104  1803               	skipnc
  6484  0105  0A21               	incf	??_OUTFQ+1,w
  6485  0106  077C               	addwf	OUTFQ@Nprg+1,w
  6486  0107  00A3               	movwf	??_OUTFQ+3
  6487  0108  0822               	movf	??_OUTFQ+2,w
  6488  0109  0084               	movwf	4
  6489  010A  1783               	bsf	3,7
  6490  010B  1C23               	btfss	??_OUTFQ+3,0
  6491  010C  1383               	bcf	3,7
  6492  010D  0800               	movf	0,w
  6493  010E  00A4               	movwf	??_OUTFQ+4
  6494  010F  0A84               	incf	4,f
  6495  0110  0800               	movf	0,w
  6496  0111  00A5               	movwf	??_OUTFQ+5
  6497  0112  1824               	btfsc	??_OUTFQ+4,0
  6498  0113  299D               	goto	l3227
  6499                           
  6500                           ;FMCW.c: 148: if(j == 4){
  6501  0114  3004               	movlw	4
  6502  0115  065A               	xorwf	OUTFQ@j,w
  6503  0116  045B               	iorwf	OUTFQ@j+1,w
  6504  0117  1D03               	btfss	3,2
  6505  0118  2960               	goto	l3225
  6506                           
  6507                           ;FMCW.c: 149: Nprg[j] = Nprg[j] / 2;
  6508  0119  3002               	movlw	2
  6509  011A  00F0               	movwf	___awdiv@divisor
  6510  011B  3000               	movlw	0
  6511  011C  00F1               	movwf	___awdiv@divisor+1
  6512  011D  085B               	movf	OUTFQ@j+1,w
  6513  011E  00A1               	movwf	??_OUTFQ+1
  6514  011F  085A               	movf	OUTFQ@j,w
  6515  0120  00A0               	movwf	??_OUTFQ
  6516  0121  1003               	clrc
  6517  0122  0DA0               	rlf	??_OUTFQ,f
  6518  0123  0DA1               	rlf	??_OUTFQ+1,f
  6519  0124  0820               	movf	??_OUTFQ,w
  6520  0125  077B               	addwf	OUTFQ@Nprg,w
  6521  0126  00A2               	movwf	??_OUTFQ+2
  6522  0127  0821               	movf	??_OUTFQ+1,w
  6523  0128  1803               	skipnc
  6524  0129  0A21               	incf	??_OUTFQ+1,w
  6525  012A  077C               	addwf	OUTFQ@Nprg+1,w
  6526  012B  00A3               	movwf	??_OUTFQ+3
  6527  012C  0822               	movf	??_OUTFQ+2,w
  6528  012D  0084               	movwf	4
  6529  012E  1783               	bsf	3,7
  6530  012F  1C23               	btfss	??_OUTFQ+3,0
  6531  0130  1383               	bcf	3,7
  6532  0131  0800               	movf	0,w
  6533  0132  00F2               	movwf	___awdiv@dividend
  6534  0133  0A84               	incf	4,f
  6535  0134  0800               	movf	0,w
  6536  0135  00F3               	movwf	___awdiv@dividend+1
  6537  0136  120A  158A  22D2  120A  118A  	fcall	___awdiv
  6538  013B  1283               	bcf	3,5	;RP0=0, select bank0
  6539  013C  1303               	bcf	3,6	;RP1=0, select bank0
  6540  013D  085B               	movf	OUTFQ@j+1,w
  6541  013E  00A5               	movwf	??_OUTFQ+5
  6542  013F  085A               	movf	OUTFQ@j,w
  6543  0140  00A4               	movwf	??_OUTFQ+4
  6544  0141  1003               	clrc
  6545  0142  0DA4               	rlf	??_OUTFQ+4,f
  6546  0143  0DA5               	rlf	??_OUTFQ+5,f
  6547  0144  0824               	movf	??_OUTFQ+4,w
  6548  0145  077B               	addwf	OUTFQ@Nprg,w
  6549  0146  00A6               	movwf	??_OUTFQ+6
  6550  0147  0825               	movf	??_OUTFQ+5,w
  6551  0148  1803               	skipnc
  6552  0149  0A25               	incf	??_OUTFQ+5,w
  6553  014A  077C               	addwf	OUTFQ@Nprg+1,w
  6554  014B  00A7               	movwf	??_OUTFQ+7
  6555  014C  0826               	movf	??_OUTFQ+6,w
  6556  014D  0084               	movwf	4
  6557  014E  1783               	bsf	3,7
  6558  014F  1C27               	btfss	??_OUTFQ+7,0
  6559  0150  1383               	bcf	3,7
  6560  0151  0870               	movf	?___awdiv,w
  6561  0152  0080               	movwf	0
  6562  0153  0A84               	incf	4,f
  6563  0154  0871               	movf	?___awdiv+1,w
  6564  0155  0080               	movwf	0
  6565                           
  6566                           ;FMCW.c: 150: Nprg_b[count] = 0;
  6567  0156  0854               	movf	OUTFQ@count,w
  6568  0157  00A0               	movwf	??_OUTFQ
  6569  0158  0720               	addwf	??_OUTFQ,w
  6570  0159  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6571  015A  0084               	movwf	4
  6572  015B  1383               	bcf	3,7	;select IRP bank0
  6573  015C  0180               	clrf	0
  6574  015D  0A84               	incf	4,f
  6575  015E  0180               	clrf	0
  6576  015F  2A05               	goto	l3235
  6577  0160                     l3225:	
  6578                           ;FMCW.c: 152: }
  6579                           
  6580                           ;FMCW.c: 151: count++;
  6581                           
  6582                           
  6583                           ;FMCW.c: 153: else{
  6584                           ;FMCW.c: 154: Nprg[j] = Nprg[j] / 2;
  6585  0160  3002               	movlw	2
  6586  0161  00F0               	movwf	___awdiv@divisor
  6587  0162  3000               	movlw	0
  6588  0163  00F1               	movwf	___awdiv@divisor+1
  6589  0164  085B               	movf	OUTFQ@j+1,w
  6590  0165  00A1               	movwf	??_OUTFQ+1
  6591  0166  085A               	movf	OUTFQ@j,w
  6592  0167  00A0               	movwf	??_OUTFQ
  6593  0168  1003               	clrc
  6594  0169  0DA0               	rlf	??_OUTFQ,f
  6595  016A  0DA1               	rlf	??_OUTFQ+1,f
  6596  016B  0820               	movf	??_OUTFQ,w
  6597  016C  077B               	addwf	OUTFQ@Nprg,w
  6598  016D  00A2               	movwf	??_OUTFQ+2
  6599  016E  0821               	movf	??_OUTFQ+1,w
  6600  016F  1803               	skipnc
  6601  0170  0A21               	incf	??_OUTFQ+1,w
  6602  0171  077C               	addwf	OUTFQ@Nprg+1,w
  6603  0172  00A3               	movwf	??_OUTFQ+3
  6604  0173  0822               	movf	??_OUTFQ+2,w
  6605  0174  0084               	movwf	4
  6606  0175  1783               	bsf	3,7
  6607  0176  1C23               	btfss	??_OUTFQ+3,0
  6608  0177  1383               	bcf	3,7
  6609  0178  0800               	movf	0,w
  6610  0179  00F2               	movwf	___awdiv@dividend
  6611  017A  0A84               	incf	4,f
  6612  017B  0800               	movf	0,w
  6613  017C  00F3               	movwf	___awdiv@dividend+1
  6614  017D  120A  158A  22D2  120A  118A  	fcall	___awdiv
  6615  0182  1283               	bcf	3,5	;RP0=0, select bank0
  6616  0183  1303               	bcf	3,6	;RP1=0, select bank0
  6617  0184  085B               	movf	OUTFQ@j+1,w
  6618  0185  00A5               	movwf	??_OUTFQ+5
  6619  0186  085A               	movf	OUTFQ@j,w
  6620  0187  00A4               	movwf	??_OUTFQ+4
  6621  0188  1003               	clrc
  6622  0189  0DA4               	rlf	??_OUTFQ+4,f
  6623  018A  0DA5               	rlf	??_OUTFQ+5,f
  6624  018B  0824               	movf	??_OUTFQ+4,w
  6625  018C  077B               	addwf	OUTFQ@Nprg,w
  6626  018D  00A6               	movwf	??_OUTFQ+6
  6627  018E  0825               	movf	??_OUTFQ+5,w
  6628  018F  1803               	skipnc
  6629  0190  0A25               	incf	??_OUTFQ+5,w
  6630  0191  077C               	addwf	OUTFQ@Nprg+1,w
  6631  0192  00A7               	movwf	??_OUTFQ+7
  6632  0193  0826               	movf	??_OUTFQ+6,w
  6633  0194  0084               	movwf	4
  6634  0195  1783               	bsf	3,7
  6635  0196  1C27               	btfss	??_OUTFQ+7,0
  6636  0197  1383               	bcf	3,7
  6637  0198  0870               	movf	?___awdiv,w
  6638  0199  0080               	movwf	0
  6639  019A  0A84               	incf	4,f
  6640  019B  0871               	movf	?___awdiv+1,w
  6641  019C  2A92               	goto	L8
  6642  019D                     l3227:	
  6643                           ;FMCW.c: 155: }
  6644                           ;FMCW.c: 156: }
  6645                           
  6646                           
  6647                           ;FMCW.c: 157: else if(Nprg[j] % 2 == 1) {
  6648  019D  085B               	movf	OUTFQ@j+1,w
  6649  019E  00A1               	movwf	??_OUTFQ+1
  6650  019F  085A               	movf	OUTFQ@j,w
  6651  01A0  00A0               	movwf	??_OUTFQ
  6652  01A1  1003               	clrc
  6653  01A2  0DA0               	rlf	??_OUTFQ,f
  6654  01A3  0DA1               	rlf	??_OUTFQ+1,f
  6655  01A4  0820               	movf	??_OUTFQ,w
  6656  01A5  077B               	addwf	OUTFQ@Nprg,w
  6657  01A6  00A2               	movwf	??_OUTFQ+2
  6658  01A7  0821               	movf	??_OUTFQ+1,w
  6659  01A8  1803               	skipnc
  6660  01A9  0A21               	incf	??_OUTFQ+1,w
  6661  01AA  077C               	addwf	OUTFQ@Nprg+1,w
  6662  01AB  00A3               	movwf	??_OUTFQ+3
  6663  01AC  0822               	movf	??_OUTFQ+2,w
  6664  01AD  0084               	movwf	4
  6665  01AE  1783               	bsf	3,7
  6666  01AF  1C23               	btfss	??_OUTFQ+3,0
  6667  01B0  1383               	bcf	3,7
  6668  01B1  0800               	movf	0,w
  6669  01B2  00A4               	movwf	??_OUTFQ+4
  6670  01B3  0A84               	incf	4,f
  6671  01B4  0800               	movf	0,w
  6672  01B5  00A5               	movwf	??_OUTFQ+5
  6673  01B6  1C24               	btfss	??_OUTFQ+4,0
  6674  01B7  2A93               	goto	l3241
  6675                           
  6676                           ;FMCW.c: 158: if(j == 4){
  6677  01B8  3004               	movlw	4
  6678  01B9  065A               	xorwf	OUTFQ@j,w
  6679  01BA  045B               	iorwf	OUTFQ@j+1,w
  6680  01BB  1D03               	btfss	3,2
  6681  01BC  2A0C               	goto	l3237
  6682                           
  6683                           ;FMCW.c: 159: Nprg[j] = Nprg[j] / 2;
  6684  01BD  3002               	movlw	2
  6685  01BE  00F0               	movwf	___awdiv@divisor
  6686  01BF  3000               	movlw	0
  6687  01C0  00F1               	movwf	___awdiv@divisor+1
  6688  01C1  085B               	movf	OUTFQ@j+1,w
  6689  01C2  00A1               	movwf	??_OUTFQ+1
  6690  01C3  085A               	movf	OUTFQ@j,w
  6691  01C4  00A0               	movwf	??_OUTFQ
  6692  01C5  1003               	clrc
  6693  01C6  0DA0               	rlf	??_OUTFQ,f
  6694  01C7  0DA1               	rlf	??_OUTFQ+1,f
  6695  01C8  0820               	movf	??_OUTFQ,w
  6696  01C9  077B               	addwf	OUTFQ@Nprg,w
  6697  01CA  00A2               	movwf	??_OUTFQ+2
  6698  01CB  0821               	movf	??_OUTFQ+1,w
  6699  01CC  1803               	skipnc
  6700  01CD  0A21               	incf	??_OUTFQ+1,w
  6701  01CE  077C               	addwf	OUTFQ@Nprg+1,w
  6702  01CF  00A3               	movwf	??_OUTFQ+3
  6703  01D0  0822               	movf	??_OUTFQ+2,w
  6704  01D1  0084               	movwf	4
  6705  01D2  1783               	bsf	3,7
  6706  01D3  1C23               	btfss	??_OUTFQ+3,0
  6707  01D4  1383               	bcf	3,7
  6708  01D5  0800               	movf	0,w
  6709  01D6  00F2               	movwf	___awdiv@dividend
  6710  01D7  0A84               	incf	4,f
  6711  01D8  0800               	movf	0,w
  6712  01D9  00F3               	movwf	___awdiv@dividend+1
  6713  01DA  120A  158A  22D2  120A  118A  	fcall	___awdiv
  6714  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  6715  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  6716  01E1  085B               	movf	OUTFQ@j+1,w
  6717  01E2  00A5               	movwf	??_OUTFQ+5
  6718  01E3  085A               	movf	OUTFQ@j,w
  6719  01E4  00A4               	movwf	??_OUTFQ+4
  6720  01E5  1003               	clrc
  6721  01E6  0DA4               	rlf	??_OUTFQ+4,f
  6722  01E7  0DA5               	rlf	??_OUTFQ+5,f
  6723  01E8  0824               	movf	??_OUTFQ+4,w
  6724  01E9  077B               	addwf	OUTFQ@Nprg,w
  6725  01EA  00A6               	movwf	??_OUTFQ+6
  6726  01EB  0825               	movf	??_OUTFQ+5,w
  6727  01EC  1803               	skipnc
  6728  01ED  0A25               	incf	??_OUTFQ+5,w
  6729  01EE  077C               	addwf	OUTFQ@Nprg+1,w
  6730  01EF  00A7               	movwf	??_OUTFQ+7
  6731  01F0  0826               	movf	??_OUTFQ+6,w
  6732  01F1  0084               	movwf	4
  6733  01F2  1783               	bsf	3,7
  6734  01F3  1C27               	btfss	??_OUTFQ+7,0
  6735  01F4  1383               	bcf	3,7
  6736  01F5  0870               	movf	?___awdiv,w
  6737  01F6  0080               	movwf	0
  6738  01F7  0A84               	incf	4,f
  6739  01F8  0871               	movf	?___awdiv+1,w
  6740  01F9  0080               	movwf	0
  6741                           
  6742                           ;FMCW.c: 160: Nprg_b[count] = 1;
  6743  01FA  0854               	movf	OUTFQ@count,w
  6744  01FB  00A0               	movwf	??_OUTFQ
  6745  01FC  0720               	addwf	??_OUTFQ,w
  6746  01FD  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6747  01FE  0084               	movwf	4
  6748  01FF  3001               	movlw	1
  6749  0200  1383               	bcf	3,7	;select IRP bank0
  6750  0201  0080               	movwf	0
  6751  0202  0A84               	incf	4,f
  6752  0203  3000               	movlw	0
  6753  0204  0080               	movwf	0
  6754  0205                     l3235:	
  6755                           
  6756                           ;FMCW.c: 161: count++;
  6757  0205  3001               	movlw	1
  6758  0206  07D4               	addwf	OUTFQ@count,f
  6759  0207  1803               	skipnc
  6760  0208  0AD5               	incf	OUTFQ@count+1,f
  6761  0209  3000               	movlw	0
  6762  020A  07D5               	addwf	OUTFQ@count+1,f
  6763                           
  6764                           ;FMCW.c: 162: }
  6765  020B  2A93               	goto	l3241
  6766  020C                     l3237:	
  6767                           
  6768                           ;FMCW.c: 163: else{
  6769                           ;FMCW.c: 164: Nprg[j] = Nprg[j] / 2;
  6770  020C  3002               	movlw	2
  6771  020D  00F0               	movwf	___awdiv@divisor
  6772  020E  3000               	movlw	0
  6773  020F  00F1               	movwf	___awdiv@divisor+1
  6774  0210  085B               	movf	OUTFQ@j+1,w
  6775  0211  00A1               	movwf	??_OUTFQ+1
  6776  0212  085A               	movf	OUTFQ@j,w
  6777  0213  00A0               	movwf	??_OUTFQ
  6778  0214  1003               	clrc
  6779  0215  0DA0               	rlf	??_OUTFQ,f
  6780  0216  0DA1               	rlf	??_OUTFQ+1,f
  6781  0217  0820               	movf	??_OUTFQ,w
  6782  0218  077B               	addwf	OUTFQ@Nprg,w
  6783  0219  00A2               	movwf	??_OUTFQ+2
  6784  021A  0821               	movf	??_OUTFQ+1,w
  6785  021B  1803               	skipnc
  6786  021C  0A21               	incf	??_OUTFQ+1,w
  6787  021D  077C               	addwf	OUTFQ@Nprg+1,w
  6788  021E  00A3               	movwf	??_OUTFQ+3
  6789  021F  0822               	movf	??_OUTFQ+2,w
  6790  0220  0084               	movwf	4
  6791  0221  1783               	bsf	3,7
  6792  0222  1C23               	btfss	??_OUTFQ+3,0
  6793  0223  1383               	bcf	3,7
  6794  0224  0800               	movf	0,w
  6795  0225  00F2               	movwf	___awdiv@dividend
  6796  0226  0A84               	incf	4,f
  6797  0227  0800               	movf	0,w
  6798  0228  00F3               	movwf	___awdiv@dividend+1
  6799  0229  120A  158A  22D2  120A  118A  	fcall	___awdiv
  6800  022E  1283               	bcf	3,5	;RP0=0, select bank0
  6801  022F  1303               	bcf	3,6	;RP1=0, select bank0
  6802  0230  085B               	movf	OUTFQ@j+1,w
  6803  0231  00A5               	movwf	??_OUTFQ+5
  6804  0232  085A               	movf	OUTFQ@j,w
  6805  0233  00A4               	movwf	??_OUTFQ+4
  6806  0234  1003               	clrc
  6807  0235  0DA4               	rlf	??_OUTFQ+4,f
  6808  0236  0DA5               	rlf	??_OUTFQ+5,f
  6809  0237  0824               	movf	??_OUTFQ+4,w
  6810  0238  077B               	addwf	OUTFQ@Nprg,w
  6811  0239  00A6               	movwf	??_OUTFQ+6
  6812  023A  0825               	movf	??_OUTFQ+5,w
  6813  023B  1803               	skipnc
  6814  023C  0A25               	incf	??_OUTFQ+5,w
  6815  023D  077C               	addwf	OUTFQ@Nprg+1,w
  6816  023E  00A7               	movwf	??_OUTFQ+7
  6817  023F  0826               	movf	??_OUTFQ+6,w
  6818  0240  0084               	movwf	4
  6819  0241  1783               	bsf	3,7
  6820  0242  1C27               	btfss	??_OUTFQ+7,0
  6821  0243  1383               	bcf	3,7
  6822  0244  0870               	movf	?___awdiv,w
  6823  0245  0080               	movwf	0
  6824  0246  0A84               	incf	4,f
  6825  0247  0871               	movf	?___awdiv+1,w
  6826  0248  0080               	movwf	0
  6827                           
  6828                           ;FMCW.c: 165: Nprg[j+1] = Nprg[j+1] + 10;
  6829  0249  085B               	movf	OUTFQ@j+1,w
  6830  024A  00A1               	movwf	??_OUTFQ+1
  6831  024B  085A               	movf	OUTFQ@j,w
  6832  024C  00A0               	movwf	??_OUTFQ
  6833  024D  1003               	clrc
  6834  024E  0DA0               	rlf	??_OUTFQ,f
  6835  024F  0DA1               	rlf	??_OUTFQ+1,f
  6836  0250  0820               	movf	??_OUTFQ,w
  6837  0251  3E02               	addlw	2
  6838  0252  00A2               	movwf	??_OUTFQ+2
  6839  0253  0821               	movf	??_OUTFQ+1,w
  6840  0254  1803               	skipnc
  6841  0255  3E01               	addlw	1
  6842  0256  3E00               	addlw	0
  6843  0257  00A3               	movwf	??_OUTFQ+3
  6844  0258  0822               	movf	??_OUTFQ+2,w
  6845  0259  077B               	addwf	OUTFQ@Nprg,w
  6846  025A  00A4               	movwf	??_OUTFQ+4
  6847  025B  0823               	movf	??_OUTFQ+3,w
  6848  025C  1803               	skipnc
  6849  025D  0A23               	incf	??_OUTFQ+3,w
  6850  025E  077C               	addwf	OUTFQ@Nprg+1,w
  6851  025F  00A5               	movwf	??_OUTFQ+5
  6852  0260  0824               	movf	??_OUTFQ+4,w
  6853  0261  0084               	movwf	4
  6854  0262  1783               	bsf	3,7
  6855  0263  1C25               	btfss	??_OUTFQ+5,0
  6856  0264  1383               	bcf	3,7
  6857  0265  0800               	movf	0,w
  6858  0266  00A6               	movwf	??_OUTFQ+6
  6859  0267  0A84               	incf	4,f
  6860  0268  0800               	movf	0,w
  6861  0269  00A7               	movwf	??_OUTFQ+7
  6862  026A  0826               	movf	??_OUTFQ+6,w
  6863  026B  3E0A               	addlw	10
  6864  026C  00A8               	movwf	??_OUTFQ+8
  6865  026D  0827               	movf	??_OUTFQ+7,w
  6866  026E  1803               	skipnc
  6867  026F  3E01               	addlw	1
  6868  0270  3E00               	addlw	0
  6869  0271  00A9               	movwf	??_OUTFQ+9
  6870  0272  085B               	movf	OUTFQ@j+1,w
  6871  0273  00AB               	movwf	??_OUTFQ+11
  6872  0274  085A               	movf	OUTFQ@j,w
  6873  0275  00AA               	movwf	??_OUTFQ+10
  6874  0276  1003               	clrc
  6875  0277  0DAA               	rlf	??_OUTFQ+10,f
  6876  0278  0DAB               	rlf	??_OUTFQ+11,f
  6877  0279  082A               	movf	??_OUTFQ+10,w
  6878  027A  3E02               	addlw	2
  6879  027B  00AC               	movwf	??_OUTFQ+12
  6880  027C  082B               	movf	??_OUTFQ+11,w
  6881  027D  1803               	skipnc
  6882  027E  3E01               	addlw	1
  6883  027F  3E00               	addlw	0
  6884  0280  00AD               	movwf	??_OUTFQ+13
  6885  0281  082C               	movf	??_OUTFQ+12,w
  6886  0282  077B               	addwf	OUTFQ@Nprg,w
  6887  0283  00AE               	movwf	??_OUTFQ+14
  6888  0284  082D               	movf	??_OUTFQ+13,w
  6889  0285  1803               	skipnc
  6890  0286  0A2D               	incf	??_OUTFQ+13,w
  6891  0287  077C               	addwf	OUTFQ@Nprg+1,w
  6892  0288  00AF               	movwf	??_OUTFQ+15
  6893  0289  082E               	movf	??_OUTFQ+14,w
  6894  028A  0084               	movwf	4
  6895  028B  1783               	bsf	3,7
  6896  028C  1C2F               	btfss	??_OUTFQ+15,0
  6897  028D  1383               	bcf	3,7
  6898  028E  0828               	movf	??_OUTFQ+8,w
  6899  028F  0080               	movwf	0
  6900  0290  0A84               	incf	4,f
  6901  0291  0829               	movf	??_OUTFQ+9,w
  6902  0292                     L8:	
  6903  0292  0080               	movwf	0
  6904  0293                     l3241:	
  6905  0293  3001               	movlw	1
  6906  0294  07DA               	addwf	OUTFQ@j,f
  6907  0295  1803               	skipnc
  6908  0296  0ADB               	incf	OUTFQ@j+1,f
  6909  0297  3000               	movlw	0
  6910  0298  07DB               	addwf	OUTFQ@j+1,f
  6911  0299  085B               	movf	OUTFQ@j+1,w
  6912  029A  3A80               	xorlw	128
  6913  029B  00FF               	movwf	127
  6914  029C  3080               	movlw	128
  6915  029D  027F               	subwf	127,w
  6916  029E  1D03               	skipz
  6917  029F  2AA2               	goto	u2895
  6918  02A0  3005               	movlw	5
  6919  02A1  025A               	subwf	OUTFQ@j,w
  6920  02A2                     u2895:	
  6921  02A2  1C03               	skipc
  6922  02A3  28F7               	goto	l3215
  6923  02A4                     l3245:	
  6924  02A4  3001               	movlw	1
  6925  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  6926  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  6927  02A7  07D2               	addwf	OUTFQ@i_462,f
  6928  02A8  1803               	skipnc
  6929  02A9  0AD3               	incf	OUTFQ@i_462+1,f
  6930  02AA  3000               	movlw	0
  6931  02AB  07D3               	addwf	OUTFQ@i_462+1,f
  6932  02AC  0853               	movf	OUTFQ@i_462+1,w
  6933  02AD  3A80               	xorlw	128
  6934  02AE  00FF               	movwf	127
  6935  02AF  3080               	movlw	128
  6936  02B0  027F               	subwf	127,w
  6937  02B1  1D03               	skipz
  6938  02B2  2AB5               	goto	u2905
  6939  02B3  3011               	movlw	17
  6940  02B4  0252               	subwf	OUTFQ@i_462,w
  6941  02B5                     u2905:	
  6942  02B5  1C03               	skipc
  6943  02B6  28E8               	goto	l3209
  6944  02B7                     l3249:	
  6945                           
  6946                           ;FMCW.c: 166: }
  6947                           ;FMCW.c: 167: }
  6948                           ;FMCW.c: 168: }
  6949                           ;FMCW.c: 169: }
  6950                           ;FMCW.c: 172: for (int i=0; i<17; i++)
  6951  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  6952  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  6953  02B9  01D8               	clrf	OUTFQ@i_464
  6954  02BA  01D9               	clrf	OUTFQ@i_464+1
  6955  02BB  0859               	movf	OUTFQ@i_464+1,w
  6956  02BC  3A80               	xorlw	128
  6957  02BD  00FF               	movwf	127
  6958  02BE  3080               	movlw	128
  6959  02BF  027F               	subwf	127,w
  6960  02C0  1D03               	skipz
  6961  02C1  2AC4               	goto	u2915
  6962  02C2  3011               	movlw	17
  6963  02C3  0258               	subwf	OUTFQ@i_464,w
  6964  02C4                     u2915:	
  6965  02C4  1803               	btfsc	3,0
  6966  02C5  2B0D               	goto	l3267
  6967  02C6                     l3255:	
  6968                           
  6969                           ;FMCW.c: 173: {
  6970                           ;FMCW.c: 174: if(Nprg_b[i] == 0)
  6971  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  6972  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  6973  02C8  0858               	movf	OUTFQ@i_464,w
  6974  02C9  00A0               	movwf	??_OUTFQ
  6975  02CA  0720               	addwf	??_OUTFQ,w
  6976  02CB  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6977  02CC  0084               	movwf	4
  6978  02CD  1383               	bcf	3,7	;select IRP bank0
  6979  02CE  0800               	movf	0,w
  6980  02CF  00A1               	movwf	??_OUTFQ+1
  6981  02D0  0A84               	incf	4,f
  6982  02D1  0800               	movf	0,w
  6983  02D2  00A2               	movwf	??_OUTFQ+2
  6984  02D3  0821               	movf	??_OUTFQ+1,w
  6985  02D4  0422               	iorwf	??_OUTFQ+2,w
  6986  02D5  1D03               	btfss	3,2
  6987  02D6  2AE0               	goto	l3259
  6988                           
  6989                           ;FMCW.c: 175: {
  6990                           ;FMCW.c: 176: L_OUT(fmcwtxrx);
  6991  02D7  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6992  02D8  00F3               	movwf	L_OUT@fmcwtxrx+1
  6993  02D9  0879               	movf	OUTFQ@fmcwtxrx,w
  6994  02DA  00F2               	movwf	L_OUT@fmcwtxrx
  6995  02DB  120A  158A  21F9  120A  118A  	fcall	_L_OUT
  6996  02E0                     l3259:	
  6997                           
  6998                           ;FMCW.c: 177: }
  6999                           ;FMCW.c: 178: if(Nprg_b[i] == 1)
  7000  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  7001  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  7002  02E2  0858               	movf	OUTFQ@i_464,w
  7003  02E3  00A0               	movwf	??_OUTFQ
  7004  02E4  0720               	addwf	??_OUTFQ,w
  7005  02E5  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  7006  02E6  0084               	movwf	4
  7007  02E7  1383               	bcf	3,7	;select IRP bank0
  7008  02E8  0800               	movf	0,w
  7009  02E9  00A1               	movwf	??_OUTFQ+1
  7010  02EA  0A84               	incf	4,f
  7011  02EB  0800               	movf	0,w
  7012  02EC  00A2               	movwf	??_OUTFQ+2
  7013  02ED  0321               	decf	??_OUTFQ+1,w
  7014  02EE  0422               	iorwf	??_OUTFQ+2,w
  7015  02EF  1D03               	btfss	3,2
  7016  02F0  2AFA               	goto	l3263
  7017                           
  7018                           ;FMCW.c: 179: {
  7019                           ;FMCW.c: 180: H_OUT(fmcwtxrx);
  7020  02F1  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7021  02F2  00F3               	movwf	H_OUT@fmcwtxrx+1
  7022  02F3  0879               	movf	OUTFQ@fmcwtxrx,w
  7023  02F4  00F2               	movwf	H_OUT@fmcwtxrx
  7024  02F5  120A  158A  21B3  120A  118A  	fcall	_H_OUT
  7025  02FA                     l3263:	
  7026  02FA  3001               	movlw	1
  7027  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  7028  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  7029  02FD  07D8               	addwf	OUTFQ@i_464,f
  7030  02FE  1803               	skipnc
  7031  02FF  0AD9               	incf	OUTFQ@i_464+1,f
  7032  0300  3000               	movlw	0
  7033  0301  07D9               	addwf	OUTFQ@i_464+1,f
  7034  0302  0859               	movf	OUTFQ@i_464+1,w
  7035  0303  3A80               	xorlw	128
  7036  0304  00FF               	movwf	127
  7037  0305  3080               	movlw	128
  7038  0306  027F               	subwf	127,w
  7039  0307  1D03               	skipz
  7040  0308  2B0B               	goto	u2945
  7041  0309  3011               	movlw	17
  7042  030A  0258               	subwf	OUTFQ@i_464,w
  7043  030B                     u2945:	
  7044  030B  1C03               	skipc
  7045  030C  2AC6               	goto	l3255
  7046  030D                     l3267:	
  7047                           
  7048                           ;FMCW.c: 181: }
  7049                           ;FMCW.c: 182: }
  7050                           ;FMCW.c: 185: H_OUT(fmcwtxrx);
  7051  030D  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7052  030E  00F3               	movwf	H_OUT@fmcwtxrx+1
  7053  030F  0879               	movf	OUTFQ@fmcwtxrx,w
  7054  0310  00F2               	movwf	H_OUT@fmcwtxrx
  7055  0311  120A  158A  21B3  120A  118A  	fcall	_H_OUT
  7056                           
  7057                           ;FMCW.c: 186: L_OUT(fmcwtxrx);
  7058  0316  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7059  0317  00F3               	movwf	L_OUT@fmcwtxrx+1
  7060  0318  0879               	movf	OUTFQ@fmcwtxrx,w
  7061  0319  00F2               	movwf	L_OUT@fmcwtxrx
  7062  031A  120A  158A  21F9  120A  118A  	fcall	_L_OUT
  7063                           
  7064                           ;FMCW.c: 189: STBOUT(fmcwtxrx);
  7065  031F  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7066  0320  00F3               	movwf	STBOUT@fmcwtxrx+1
  7067  0321  0879               	movf	OUTFQ@fmcwtxrx,w
  7068  0322  00F2               	movwf	STBOUT@fmcwtxrx
  7069  0323  120A  158A  2151   	fcall	_STBOUT
  7070  0326  0008               	return
  7071  0327                     __end_of_OUTFQ:	
  7072                           
  7073                           	psect	text24
  7074  0AD2                     __ptext24:	
  7075 ;; *************** function ___awdiv *****************
  7076 ;; Defined at:
  7077 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  7078 ;; Parameters:    Size  Location     Type
  7079 ;;  divisor         2    0[COMMON] int 
  7080 ;;  dividend        2    2[COMMON] int 
  7081 ;; Auto vars:     Size  Location     Type
  7082 ;;  quotient        2    7[COMMON] int 
  7083 ;;  sign            1    6[COMMON] unsigned char 
  7084 ;;  counter         1    5[COMMON] unsigned char 
  7085 ;; Return value:  Size  Location     Type
  7086 ;;                  2    0[COMMON] int 
  7087 ;; Registers used:
  7088 ;;		wreg, status,2, status,0
  7089 ;; Tracked objects:
  7090 ;;		On entry : 0/0
  7091 ;;		On exit  : 0/0
  7092 ;;		Unchanged: 0/0
  7093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7094 ;;      Params:         4       0       0       0       0
  7095 ;;      Locals:         4       0       0       0       0
  7096 ;;      Temps:          1       0       0       0       0
  7097 ;;      Totals:         9       0       0       0       0
  7098 ;;Total ram usage:        9 bytes
  7099 ;; Hardware stack levels used:    1
  7100 ;; This function calls:
  7101 ;;		Nothing
  7102 ;; This function is called by:
  7103 ;;		_OUTFQ
  7104 ;;		_RFDOUT
  7105 ;; This function uses a non-reentrant model
  7106 ;;
  7107                           
  7108                           
  7109                           ;psect for function ___awdiv
  7110  0AD2                     ___awdiv:	
  7111                           
  7112                           ;incstack = 0
  7113                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7114  0AD2  01F6               	clrf	___awdiv@sign
  7115  0AD3  1FF1               	btfss	___awdiv@divisor+1,7
  7116  0AD4  2ADC               	goto	l2679
  7117  0AD5  09F0               	comf	___awdiv@divisor,f
  7118  0AD6  09F1               	comf	___awdiv@divisor+1,f
  7119  0AD7  0AF0               	incf	___awdiv@divisor,f
  7120  0AD8  1903               	skipnz
  7121  0AD9  0AF1               	incf	___awdiv@divisor+1,f
  7122  0ADA  01F6               	clrf	___awdiv@sign
  7123  0ADB  0AF6               	incf	___awdiv@sign,f
  7124  0ADC                     l2679:	
  7125  0ADC  1FF3               	btfss	___awdiv@dividend+1,7
  7126  0ADD  2AE7               	goto	l2685
  7127  0ADE  09F2               	comf	___awdiv@dividend,f
  7128  0ADF  09F3               	comf	___awdiv@dividend+1,f
  7129  0AE0  0AF2               	incf	___awdiv@dividend,f
  7130  0AE1  1903               	skipnz
  7131  0AE2  0AF3               	incf	___awdiv@dividend+1,f
  7132  0AE3  3001               	movlw	1
  7133  0AE4  00F4               	movwf	??___awdiv
  7134  0AE5  0874               	movf	??___awdiv,w
  7135  0AE6  06F6               	xorwf	___awdiv@sign,f
  7136  0AE7                     l2685:	
  7137  0AE7  01F7               	clrf	___awdiv@quotient
  7138  0AE8  01F8               	clrf	___awdiv@quotient+1
  7139  0AE9  0870               	movf	___awdiv@divisor,w
  7140  0AEA  0471               	iorwf	___awdiv@divisor+1,w
  7141  0AEB  1903               	btfsc	3,2
  7142  0AEC  2B1E               	goto	l2707
  7143  0AED  01F5               	clrf	___awdiv@counter
  7144  0AEE  0AF5               	incf	___awdiv@counter,f
  7145  0AEF                     l2695:	
  7146  0AEF  1BF1               	btfsc	___awdiv@divisor+1,7
  7147  0AF0  2AFD               	goto	l2697
  7148  0AF1  3001               	movlw	1
  7149  0AF2                     u2065:	
  7150  0AF2  1003               	clrc
  7151  0AF3  0DF0               	rlf	___awdiv@divisor,f
  7152  0AF4  0DF1               	rlf	___awdiv@divisor+1,f
  7153  0AF5  3EFF               	addlw	-1
  7154  0AF6  1D03               	skipz
  7155  0AF7  2AF2               	goto	u2065
  7156  0AF8  3001               	movlw	1
  7157  0AF9  00F4               	movwf	??___awdiv
  7158  0AFA  0874               	movf	??___awdiv,w
  7159  0AFB  07F5               	addwf	___awdiv@counter,f
  7160  0AFC  2AEF               	goto	l2695
  7161  0AFD                     l2697:	
  7162  0AFD  3001               	movlw	1
  7163  0AFE                     u2085:	
  7164  0AFE  1003               	clrc
  7165  0AFF  0DF7               	rlf	___awdiv@quotient,f
  7166  0B00  0DF8               	rlf	___awdiv@quotient+1,f
  7167  0B01  3EFF               	addlw	-1
  7168  0B02  1D03               	skipz
  7169  0B03  2AFE               	goto	u2085
  7170  0B04  0871               	movf	___awdiv@divisor+1,w
  7171  0B05  0273               	subwf	___awdiv@dividend+1,w
  7172  0B06  1D03               	skipz
  7173  0B07  2B0A               	goto	u2095
  7174  0B08  0870               	movf	___awdiv@divisor,w
  7175  0B09  0272               	subwf	___awdiv@dividend,w
  7176  0B0A                     u2095:	
  7177  0B0A  1C03               	skipc
  7178  0B0B  2B13               	goto	l2703
  7179  0B0C  0870               	movf	___awdiv@divisor,w
  7180  0B0D  02F2               	subwf	___awdiv@dividend,f
  7181  0B0E  0871               	movf	___awdiv@divisor+1,w
  7182  0B0F  1C03               	skipc
  7183  0B10  03F3               	decf	___awdiv@dividend+1,f
  7184  0B11  02F3               	subwf	___awdiv@dividend+1,f
  7185  0B12  1477               	bsf	___awdiv@quotient,0
  7186  0B13                     l2703:	
  7187  0B13  3001               	movlw	1
  7188  0B14                     u2105:	
  7189  0B14  1003               	clrc
  7190  0B15  0CF1               	rrf	___awdiv@divisor+1,f
  7191  0B16  0CF0               	rrf	___awdiv@divisor,f
  7192  0B17  3EFF               	addlw	-1
  7193  0B18  1D03               	skipz
  7194  0B19  2B14               	goto	u2105
  7195  0B1A  3001               	movlw	1
  7196  0B1B  02F5               	subwf	___awdiv@counter,f
  7197  0B1C  1D03               	btfss	3,2
  7198  0B1D  2AFD               	goto	l2697
  7199  0B1E                     l2707:	
  7200  0B1E  0876               	movf	___awdiv@sign,w
  7201  0B1F  1903               	btfsc	3,2
  7202  0B20  2B26               	goto	l2711
  7203  0B21  09F7               	comf	___awdiv@quotient,f
  7204  0B22  09F8               	comf	___awdiv@quotient+1,f
  7205  0B23  0AF7               	incf	___awdiv@quotient,f
  7206  0B24  1903               	skipnz
  7207  0B25  0AF8               	incf	___awdiv@quotient+1,f
  7208  0B26                     l2711:	
  7209  0B26  0878               	movf	___awdiv@quotient+1,w
  7210  0B27  00F1               	movwf	?___awdiv+1
  7211  0B28  0877               	movf	___awdiv@quotient,w
  7212  0B29  00F0               	movwf	?___awdiv
  7213  0B2A  0008               	return
  7214  0B2B                     __end_of___awdiv:	
  7215                           
  7216                           	psect	text25
  7217  0CAC                     __ptext25:	
  7218 ;; *************** function _OPINIT *****************
  7219 ;; Defined at:
  7220 ;;		line 241 in file "FMCW.c"
  7221 ;; Parameters:    Size  Location     Type
  7222 ;;  fmcwtxrx        2    4[COMMON] int 
  7223 ;; Auto vars:     Size  Location     Type
  7224 ;;		None
  7225 ;; Return value:  Size  Location     Type
  7226 ;;                  1    wreg      void 
  7227 ;; Registers used:
  7228 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7229 ;; Tracked objects:
  7230 ;;		On entry : 0/0
  7231 ;;		On exit  : 0/0
  7232 ;;		Unchanged: 0/0
  7233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7234 ;;      Params:         2       0       0       0       0
  7235 ;;      Locals:         0       0       0       0       0
  7236 ;;      Temps:          0       0       0       0       0
  7237 ;;      Totals:         2       0       0       0       0
  7238 ;;Total ram usage:        2 bytes
  7239 ;; Hardware stack levels used:    1
  7240 ;; Hardware stack levels required when called:    2
  7241 ;; This function calls:
  7242 ;;		_H_OUT
  7243 ;;		_L_OUT
  7244 ;;		_STBOUT
  7245 ;; This function is called by:
  7246 ;;		_FMTX
  7247 ;;		_CWTX
  7248 ;;		_FMRX
  7249 ;; This function uses a non-reentrant model
  7250 ;;
  7251                           
  7252                           
  7253                           ;psect for function _OPINIT
  7254  0CAC                     _OPINIT:	
  7255                           
  7256                           ;FMCW.c: 243: L_OUT(fmcwtxrx);
  7257                           
  7258                           ;incstack = 0
  7259                           ; Regs used in _OPINIT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7260  0CAC  0875               	movf	OPINIT@fmcwtxrx+1,w
  7261  0CAD  00F3               	movwf	L_OUT@fmcwtxrx+1
  7262  0CAE  0874               	movf	OPINIT@fmcwtxrx,w
  7263  0CAF  00F2               	movwf	L_OUT@fmcwtxrx
  7264  0CB0  120A  158A  21F9  120A  158A  	fcall	_L_OUT
  7265                           
  7266                           ;FMCW.c: 244: L_OUT(fmcwtxrx);
  7267  0CB5  0875               	movf	OPINIT@fmcwtxrx+1,w
  7268  0CB6  00F3               	movwf	L_OUT@fmcwtxrx+1
  7269  0CB7  0874               	movf	OPINIT@fmcwtxrx,w
  7270  0CB8  00F2               	movwf	L_OUT@fmcwtxrx
  7271  0CB9  120A  158A  21F9  120A  158A  	fcall	_L_OUT
  7272                           
  7273                           ;FMCW.c: 245: L_OUT(fmcwtxrx);
  7274  0CBE  0875               	movf	OPINIT@fmcwtxrx+1,w
  7275  0CBF  00F3               	movwf	L_OUT@fmcwtxrx+1
  7276  0CC0  0874               	movf	OPINIT@fmcwtxrx,w
  7277  0CC1  00F2               	movwf	L_OUT@fmcwtxrx
  7278  0CC2  120A  158A  21F9  120A  158A  	fcall	_L_OUT
  7279                           
  7280                           ;FMCW.c: 246: H_OUT(fmcwtxrx);
  7281  0CC7  0875               	movf	OPINIT@fmcwtxrx+1,w
  7282  0CC8  00F3               	movwf	H_OUT@fmcwtxrx+1
  7283  0CC9  0874               	movf	OPINIT@fmcwtxrx,w
  7284  0CCA  00F2               	movwf	H_OUT@fmcwtxrx
  7285  0CCB  120A  158A  21B3  120A  158A  	fcall	_H_OUT
  7286                           
  7287                           ;FMCW.c: 247: H_OUT(fmcwtxrx);
  7288  0CD0  0875               	movf	OPINIT@fmcwtxrx+1,w
  7289  0CD1  00F3               	movwf	H_OUT@fmcwtxrx+1
  7290  0CD2  0874               	movf	OPINIT@fmcwtxrx,w
  7291  0CD3  00F2               	movwf	H_OUT@fmcwtxrx
  7292  0CD4  120A  158A  21B3  120A  158A  	fcall	_H_OUT
  7293                           
  7294                           ;FMCW.c: 248: L_OUT(fmcwtxrx);
  7295  0CD9  0875               	movf	OPINIT@fmcwtxrx+1,w
  7296  0CDA  00F3               	movwf	L_OUT@fmcwtxrx+1
  7297  0CDB  0874               	movf	OPINIT@fmcwtxrx,w
  7298  0CDC  00F2               	movwf	L_OUT@fmcwtxrx
  7299  0CDD  120A  158A  21F9  120A  158A  	fcall	_L_OUT
  7300                           
  7301                           ;FMCW.c: 249: L_OUT(fmcwtxrx);
  7302  0CE2  0875               	movf	OPINIT@fmcwtxrx+1,w
  7303  0CE3  00F3               	movwf	L_OUT@fmcwtxrx+1
  7304  0CE4  0874               	movf	OPINIT@fmcwtxrx,w
  7305  0CE5  00F2               	movwf	L_OUT@fmcwtxrx
  7306  0CE6  120A  158A  21F9  120A  158A  	fcall	_L_OUT
  7307                           
  7308                           ;FMCW.c: 250: L_OUT(fmcwtxrx);
  7309  0CEB  0875               	movf	OPINIT@fmcwtxrx+1,w
  7310  0CEC  00F3               	movwf	L_OUT@fmcwtxrx+1
  7311  0CED  0874               	movf	OPINIT@fmcwtxrx,w
  7312  0CEE  00F2               	movwf	L_OUT@fmcwtxrx
  7313  0CEF  120A  158A  21F9  120A  158A  	fcall	_L_OUT
  7314                           
  7315                           ;FMCW.c: 251: L_OUT(fmcwtxrx);
  7316  0CF4  0875               	movf	OPINIT@fmcwtxrx+1,w
  7317  0CF5  00F3               	movwf	L_OUT@fmcwtxrx+1
  7318  0CF6  0874               	movf	OPINIT@fmcwtxrx,w
  7319  0CF7  00F2               	movwf	L_OUT@fmcwtxrx
  7320  0CF8  120A  158A  21F9  120A  158A  	fcall	_L_OUT
  7321                           
  7322                           ;FMCW.c: 252: L_OUT(fmcwtxrx);
  7323  0CFD  0875               	movf	OPINIT@fmcwtxrx+1,w
  7324  0CFE  00F3               	movwf	L_OUT@fmcwtxrx+1
  7325  0CFF  0874               	movf	OPINIT@fmcwtxrx,w
  7326  0D00  00F2               	movwf	L_OUT@fmcwtxrx
  7327  0D01  120A  158A  21F9  120A  158A  	fcall	_L_OUT
  7328                           
  7329                           ;FMCW.c: 253: H_OUT(fmcwtxrx);
  7330  0D06  0875               	movf	OPINIT@fmcwtxrx+1,w
  7331  0D07  00F3               	movwf	H_OUT@fmcwtxrx+1
  7332  0D08  0874               	movf	OPINIT@fmcwtxrx,w
  7333  0D09  00F2               	movwf	H_OUT@fmcwtxrx
  7334  0D0A  120A  158A  21B3  120A  158A  	fcall	_H_OUT
  7335                           
  7336                           ;FMCW.c: 256: L_OUT(fmcwtxrx);
  7337  0D0F  0875               	movf	OPINIT@fmcwtxrx+1,w
  7338  0D10  00F3               	movwf	L_OUT@fmcwtxrx+1
  7339  0D11  0874               	movf	OPINIT@fmcwtxrx,w
  7340  0D12  00F2               	movwf	L_OUT@fmcwtxrx
  7341  0D13  120A  158A  21F9  120A  158A  	fcall	_L_OUT
  7342                           
  7343                           ;FMCW.c: 257: L_OUT(fmcwtxrx);
  7344  0D18  0875               	movf	OPINIT@fmcwtxrx+1,w
  7345  0D19  00F3               	movwf	L_OUT@fmcwtxrx+1
  7346  0D1A  0874               	movf	OPINIT@fmcwtxrx,w
  7347  0D1B  00F2               	movwf	L_OUT@fmcwtxrx
  7348  0D1C  120A  158A  21F9  120A  158A  	fcall	_L_OUT
  7349                           
  7350                           ;FMCW.c: 260: STBOUT(fmcwtxrx);
  7351  0D21  0875               	movf	OPINIT@fmcwtxrx+1,w
  7352  0D22  00F3               	movwf	STBOUT@fmcwtxrx+1
  7353  0D23  0874               	movf	OPINIT@fmcwtxrx,w
  7354  0D24  00F2               	movwf	STBOUT@fmcwtxrx
  7355  0D25  120A  158A  2151   	fcall	_STBOUT
  7356  0D28  0008               	return
  7357  0D29                     __end_of_OPINIT:	
  7358                           
  7359                           	psect	text26
  7360  0951                     __ptext26:	
  7361 ;; *************** function _STBOUT *****************
  7362 ;; Defined at:
  7363 ;;		line 107 in file "FMCW.c"
  7364 ;; Parameters:    Size  Location     Type
  7365 ;;  fmcwtxrx        2    2[COMMON] int 
  7366 ;; Auto vars:     Size  Location     Type
  7367 ;;		None
  7368 ;; Return value:  Size  Location     Type
  7369 ;;                  1    wreg      void 
  7370 ;; Registers used:
  7371 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7372 ;; Tracked objects:
  7373 ;;		On entry : 0/0
  7374 ;;		On exit  : 0/0
  7375 ;;		Unchanged: 0/0
  7376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7377 ;;      Params:         2       0       0       0       0
  7378 ;;      Locals:         0       0       0       0       0
  7379 ;;      Temps:          0       0       0       0       0
  7380 ;;      Totals:         2       0       0       0       0
  7381 ;;Total ram usage:        2 bytes
  7382 ;; Hardware stack levels used:    1
  7383 ;; Hardware stack levels required when called:    1
  7384 ;; This function calls:
  7385 ;;		__NOP
  7386 ;; This function is called by:
  7387 ;;		_OUTFQ
  7388 ;;		_RFDOUT
  7389 ;;		_OPINIT
  7390 ;; This function uses a non-reentrant model
  7391 ;;
  7392                           
  7393                           
  7394                           ;psect for function _STBOUT
  7395  0951                     _STBOUT:	
  7396                           
  7397                           ;FMCW.c: 108: if(fmcwtxrx == 1)
  7398                           
  7399                           ;incstack = 0
  7400                           ; Regs used in _STBOUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7401  0951  0372               	decf	STBOUT@fmcwtxrx,w
  7402  0952  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7403  0953  1D03               	btfss	3,2
  7404  0954  2960               	goto	l2655
  7405                           
  7406                           ;FMCW.c: 109: {
  7407                           ;FMCW.c: 110: PORTAbits.RA5 = 1;
  7408  0955  1283               	bcf	3,5	;RP0=0, select bank0
  7409  0956  1303               	bcf	3,6	;RP1=0, select bank0
  7410  0957  1685               	bsf	5,5	;volatile
  7411                           
  7412                           ;FMCW.c: 111: _NOP();
  7413  0958  120A  158A  2027  120A  158A  	fcall	__NOP
  7414                           
  7415                           ;FMCW.c: 112: PORTAbits.RA5 = 0;
  7416  095D  1283               	bcf	3,5	;RP0=0, select bank0
  7417  095E  1303               	bcf	3,6	;RP1=0, select bank0
  7418  095F  1285               	bcf	5,5	;volatile
  7419  0960                     l2655:	
  7420                           
  7421                           ;FMCW.c: 113: }
  7422                           ;FMCW.c: 114: if(fmcwtxrx == 2)
  7423  0960  3002               	movlw	2
  7424  0961  0672               	xorwf	STBOUT@fmcwtxrx,w
  7425  0962  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7426  0963  1D03               	btfss	3,2
  7427  0964  2970               	goto	l2663
  7428                           
  7429                           ;FMCW.c: 115: {
  7430                           ;FMCW.c: 116: PORTDbits.RD0 = 1;
  7431  0965  1283               	bcf	3,5	;RP0=0, select bank0
  7432  0966  1303               	bcf	3,6	;RP1=0, select bank0
  7433  0967  1408               	bsf	8,0	;volatile
  7434                           
  7435                           ;FMCW.c: 117: _NOP();
  7436  0968  120A  158A  2027  120A  158A  	fcall	__NOP
  7437                           
  7438                           ;FMCW.c: 118: PORTDbits.RD0 = 0;
  7439  096D  1283               	bcf	3,5	;RP0=0, select bank0
  7440  096E  1303               	bcf	3,6	;RP1=0, select bank0
  7441  096F  1008               	bcf	8,0	;volatile
  7442  0970                     l2663:	
  7443                           
  7444                           ;FMCW.c: 119: }
  7445                           ;FMCW.c: 120: if(fmcwtxrx == 3)
  7446  0970  3003               	movlw	3
  7447  0971  0672               	xorwf	STBOUT@fmcwtxrx,w
  7448  0972  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7449  0973  1D03               	btfss	3,2
  7450  0974  0008               	return
  7451                           
  7452                           ;FMCW.c: 121: {
  7453                           ;FMCW.c: 122: PORTAbits.RA4 = 1;
  7454  0975  1283               	bcf	3,5	;RP0=0, select bank0
  7455  0976  1303               	bcf	3,6	;RP1=0, select bank0
  7456  0977  1605               	bsf	5,4	;volatile
  7457                           
  7458                           ;FMCW.c: 123: _NOP();
  7459  0978  120A  158A  2027   	fcall	__NOP
  7460                           
  7461                           ;FMCW.c: 124: PORTAbits.RA4 = 0;
  7462  097B  1283               	bcf	3,5	;RP0=0, select bank0
  7463  097C  1303               	bcf	3,6	;RP1=0, select bank0
  7464  097D  1205               	bcf	5,4	;volatile
  7465  097E  0008               	return
  7466  097F                     __end_of_STBOUT:	
  7467                           
  7468                           	psect	text27
  7469  09F9                     __ptext27:	
  7470 ;; *************** function _L_OUT *****************
  7471 ;; Defined at:
  7472 ;;		line 40 in file "FMCW.c"
  7473 ;; Parameters:    Size  Location     Type
  7474 ;;  fmcwtxrx        2    2[COMMON] int 
  7475 ;; Auto vars:     Size  Location     Type
  7476 ;;		None
  7477 ;; Return value:  Size  Location     Type
  7478 ;;                  1    wreg      void 
  7479 ;; Registers used:
  7480 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7481 ;; Tracked objects:
  7482 ;;		On entry : 0/0
  7483 ;;		On exit  : 0/0
  7484 ;;		Unchanged: 0/0
  7485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7486 ;;      Params:         2       0       0       0       0
  7487 ;;      Locals:         0       0       0       0       0
  7488 ;;      Temps:          0       0       0       0       0
  7489 ;;      Totals:         2       0       0       0       0
  7490 ;;Total ram usage:        2 bytes
  7491 ;; Hardware stack levels used:    1
  7492 ;; Hardware stack levels required when called:    1
  7493 ;; This function calls:
  7494 ;;		__NOP
  7495 ;; This function is called by:
  7496 ;;		_OUTFQ
  7497 ;;		_RFDOUT
  7498 ;;		_OPINIT
  7499 ;; This function uses a non-reentrant model
  7500 ;;
  7501                           
  7502                           
  7503                           ;psect for function _L_OUT
  7504  09F9                     _L_OUT:	
  7505                           
  7506                           ;FMCW.c: 41: if(fmcwtxrx == 1)
  7507                           
  7508                           ;incstack = 0
  7509                           ; Regs used in _L_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7510  09F9  0372               	decf	L_OUT@fmcwtxrx,w
  7511  09FA  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7512  09FB  1D03               	btfss	3,2
  7513  09FC  2A10               	goto	l2597
  7514                           
  7515                           ;FMCW.c: 42: {
  7516                           ;FMCW.c: 43: PORTEbits.RE0 = 0;
  7517  09FD  1283               	bcf	3,5	;RP0=0, select bank0
  7518  09FE  1303               	bcf	3,6	;RP1=0, select bank0
  7519  09FF  1009               	bcf	9,0	;volatile
  7520                           
  7521                           ;FMCW.c: 44: _NOP();
  7522  0A00  120A  158A  2027  120A  158A  	fcall	__NOP
  7523                           
  7524                           ;FMCW.c: 45: PORTEbits.RE1 = 1;
  7525  0A05  1283               	bcf	3,5	;RP0=0, select bank0
  7526  0A06  1303               	bcf	3,6	;RP1=0, select bank0
  7527  0A07  1489               	bsf	9,1	;volatile
  7528                           
  7529                           ;FMCW.c: 46: _NOP();
  7530  0A08  120A  158A  2027  120A  158A  	fcall	__NOP
  7531                           
  7532                           ;FMCW.c: 47: PORTEbits.RE1 = 0;
  7533  0A0D  1283               	bcf	3,5	;RP0=0, select bank0
  7534  0A0E  1303               	bcf	3,6	;RP1=0, select bank0
  7535  0A0F  1089               	bcf	9,1	;volatile
  7536  0A10                     l2597:	
  7537                           
  7538                           ;FMCW.c: 48: }
  7539                           ;FMCW.c: 49: if(fmcwtxrx == 2)
  7540  0A10  3002               	movlw	2
  7541  0A11  0672               	xorwf	L_OUT@fmcwtxrx,w
  7542  0A12  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7543  0A13  1D03               	btfss	3,2
  7544  0A14  2A28               	goto	l2607
  7545                           
  7546                           ;FMCW.c: 50: {
  7547                           ;FMCW.c: 51: PORTDbits.RD1 = 0;
  7548  0A15  1283               	bcf	3,5	;RP0=0, select bank0
  7549  0A16  1303               	bcf	3,6	;RP1=0, select bank0
  7550  0A17  1088               	bcf	8,1	;volatile
  7551                           
  7552                           ;FMCW.c: 52: _NOP();
  7553  0A18  120A  158A  2027  120A  158A  	fcall	__NOP
  7554                           
  7555                           ;FMCW.c: 53: PORTDbits.RD2 = 1;
  7556  0A1D  1283               	bcf	3,5	;RP0=0, select bank0
  7557  0A1E  1303               	bcf	3,6	;RP1=0, select bank0
  7558  0A1F  1508               	bsf	8,2	;volatile
  7559                           
  7560                           ;FMCW.c: 54: _NOP();
  7561  0A20  120A  158A  2027  120A  158A  	fcall	__NOP
  7562                           
  7563                           ;FMCW.c: 55: PORTDbits.RD2 = 0;
  7564  0A25  1283               	bcf	3,5	;RP0=0, select bank0
  7565  0A26  1303               	bcf	3,6	;RP1=0, select bank0
  7566  0A27  1108               	bcf	8,2	;volatile
  7567  0A28                     l2607:	
  7568                           
  7569                           ;FMCW.c: 56: }
  7570                           ;FMCW.c: 57: if(fmcwtxrx == 3)
  7571  0A28  3003               	movlw	3
  7572  0A29  0672               	xorwf	L_OUT@fmcwtxrx,w
  7573  0A2A  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7574  0A2B  1D03               	btfss	3,2
  7575  0A2C  0008               	return
  7576                           
  7577                           ;FMCW.c: 58: {
  7578                           ;FMCW.c: 59: PORTAbits.RA3 = 0;
  7579  0A2D  1283               	bcf	3,5	;RP0=0, select bank0
  7580  0A2E  1303               	bcf	3,6	;RP1=0, select bank0
  7581  0A2F  1185               	bcf	5,3	;volatile
  7582                           
  7583                           ;FMCW.c: 60: _NOP();
  7584  0A30  120A  158A  2027  120A  158A  	fcall	__NOP
  7585                           
  7586                           ;FMCW.c: 61: PORTAbits.RA2 = 1;
  7587  0A35  1283               	bcf	3,5	;RP0=0, select bank0
  7588  0A36  1303               	bcf	3,6	;RP1=0, select bank0
  7589  0A37  1505               	bsf	5,2	;volatile
  7590                           
  7591                           ;FMCW.c: 62: _NOP();
  7592  0A38  120A  158A  2027   	fcall	__NOP
  7593                           
  7594                           ;FMCW.c: 63: PORTAbits.RA2 = 0;
  7595  0A3B  1283               	bcf	3,5	;RP0=0, select bank0
  7596  0A3C  1303               	bcf	3,6	;RP1=0, select bank0
  7597  0A3D  1105               	bcf	5,2	;volatile
  7598  0A3E  0008               	return
  7599  0A3F                     __end_of_L_OUT:	
  7600                           
  7601                           	psect	text28
  7602  09B3                     __ptext28:	
  7603 ;; *************** function _H_OUT *****************
  7604 ;; Defined at:
  7605 ;;		line 74 in file "FMCW.c"
  7606 ;; Parameters:    Size  Location     Type
  7607 ;;  fmcwtxrx        2    2[COMMON] int 
  7608 ;; Auto vars:     Size  Location     Type
  7609 ;;		None
  7610 ;; Return value:  Size  Location     Type
  7611 ;;                  1    wreg      void 
  7612 ;; Registers used:
  7613 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7614 ;; Tracked objects:
  7615 ;;		On entry : 0/0
  7616 ;;		On exit  : 0/0
  7617 ;;		Unchanged: 0/0
  7618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7619 ;;      Params:         2       0       0       0       0
  7620 ;;      Locals:         0       0       0       0       0
  7621 ;;      Temps:          0       0       0       0       0
  7622 ;;      Totals:         2       0       0       0       0
  7623 ;;Total ram usage:        2 bytes
  7624 ;; Hardware stack levels used:    1
  7625 ;; Hardware stack levels required when called:    1
  7626 ;; This function calls:
  7627 ;;		__NOP
  7628 ;; This function is called by:
  7629 ;;		_OUTFQ
  7630 ;;		_RFDOUT
  7631 ;;		_OPINIT
  7632 ;; This function uses a non-reentrant model
  7633 ;;
  7634                           
  7635                           
  7636                           ;psect for function _H_OUT
  7637  09B3                     _H_OUT:	
  7638                           
  7639                           ;FMCW.c: 75: if(fmcwtxrx == 1)
  7640                           
  7641                           ;incstack = 0
  7642                           ; Regs used in _H_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7643  09B3  0372               	decf	H_OUT@fmcwtxrx,w
  7644  09B4  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7645  09B5  1D03               	btfss	3,2
  7646  09B6  29CA               	goto	l2627
  7647                           
  7648                           ;FMCW.c: 76: {
  7649                           ;FMCW.c: 77: PORTEbits.RE0 = 1;
  7650  09B7  1283               	bcf	3,5	;RP0=0, select bank0
  7651  09B8  1303               	bcf	3,6	;RP1=0, select bank0
  7652  09B9  1409               	bsf	9,0	;volatile
  7653                           
  7654                           ;FMCW.c: 78: _NOP();
  7655  09BA  120A  158A  2027  120A  158A  	fcall	__NOP
  7656                           
  7657                           ;FMCW.c: 79: PORTEbits.RE1 = 1;
  7658  09BF  1283               	bcf	3,5	;RP0=0, select bank0
  7659  09C0  1303               	bcf	3,6	;RP1=0, select bank0
  7660  09C1  1489               	bsf	9,1	;volatile
  7661                           
  7662                           ;FMCW.c: 80: _NOP();
  7663  09C2  120A  158A  2027  120A  158A  	fcall	__NOP
  7664                           
  7665                           ;FMCW.c: 81: PORTEbits.RE1 = 0;
  7666  09C7  1283               	bcf	3,5	;RP0=0, select bank0
  7667  09C8  1303               	bcf	3,6	;RP1=0, select bank0
  7668  09C9  1089               	bcf	9,1	;volatile
  7669  09CA                     l2627:	
  7670                           
  7671                           ;FMCW.c: 82: }
  7672                           ;FMCW.c: 83: if(fmcwtxrx == 2)
  7673  09CA  3002               	movlw	2
  7674  09CB  0672               	xorwf	H_OUT@fmcwtxrx,w
  7675  09CC  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7676  09CD  1D03               	btfss	3,2
  7677  09CE  29E2               	goto	l2637
  7678                           
  7679                           ;FMCW.c: 84: {
  7680                           ;FMCW.c: 85: PORTDbits.RD1 = 1;
  7681  09CF  1283               	bcf	3,5	;RP0=0, select bank0
  7682  09D0  1303               	bcf	3,6	;RP1=0, select bank0
  7683  09D1  1488               	bsf	8,1	;volatile
  7684                           
  7685                           ;FMCW.c: 86: _NOP();
  7686  09D2  120A  158A  2027  120A  158A  	fcall	__NOP
  7687                           
  7688                           ;FMCW.c: 87: PORTDbits.RD2 = 1;
  7689  09D7  1283               	bcf	3,5	;RP0=0, select bank0
  7690  09D8  1303               	bcf	3,6	;RP1=0, select bank0
  7691  09D9  1508               	bsf	8,2	;volatile
  7692                           
  7693                           ;FMCW.c: 88: _NOP();
  7694  09DA  120A  158A  2027  120A  158A  	fcall	__NOP
  7695                           
  7696                           ;FMCW.c: 89: PORTDbits.RD2 = 0;
  7697  09DF  1283               	bcf	3,5	;RP0=0, select bank0
  7698  09E0  1303               	bcf	3,6	;RP1=0, select bank0
  7699  09E1  1108               	bcf	8,2	;volatile
  7700  09E2                     l2637:	
  7701                           
  7702                           ;FMCW.c: 90: }
  7703                           ;FMCW.c: 91: if(fmcwtxrx == 3)
  7704  09E2  3003               	movlw	3
  7705  09E3  0672               	xorwf	H_OUT@fmcwtxrx,w
  7706  09E4  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7707  09E5  1D03               	btfss	3,2
  7708  09E6  0008               	return
  7709                           
  7710                           ;FMCW.c: 92: {
  7711                           ;FMCW.c: 93: PORTAbits.RA3 = 1;
  7712  09E7  1283               	bcf	3,5	;RP0=0, select bank0
  7713  09E8  1303               	bcf	3,6	;RP1=0, select bank0
  7714  09E9  1585               	bsf	5,3	;volatile
  7715                           
  7716                           ;FMCW.c: 94: _NOP();
  7717  09EA  120A  158A  2027  120A  158A  	fcall	__NOP
  7718                           
  7719                           ;FMCW.c: 95: PORTAbits.RA2 = 1;
  7720  09EF  1283               	bcf	3,5	;RP0=0, select bank0
  7721  09F0  1303               	bcf	3,6	;RP1=0, select bank0
  7722  09F1  1505               	bsf	5,2	;volatile
  7723                           
  7724                           ;FMCW.c: 96: _NOP();
  7725  09F2  120A  158A  2027   	fcall	__NOP
  7726                           
  7727                           ;FMCW.c: 97: PORTAbits.RA2 = 0;
  7728  09F5  1283               	bcf	3,5	;RP0=0, select bank0
  7729  09F6  1303               	bcf	3,6	;RP1=0, select bank0
  7730  09F7  1105               	bcf	5,2	;volatile
  7731  09F8  0008               	return
  7732  09F9                     __end_of_H_OUT:	
  7733                           
  7734                           	psect	text29
  7735  0827                     __ptext29:	
  7736 ;; *************** function __NOP *****************
  7737 ;; Defined at:
  7738 ;;		line 349 in file "FMCW.c"
  7739 ;; Parameters:    Size  Location     Type
  7740 ;;		None
  7741 ;; Auto vars:     Size  Location     Type
  7742 ;;  i               2    0[COMMON] int 
  7743 ;; Return value:  Size  Location     Type
  7744 ;;                  1    wreg      void 
  7745 ;; Registers used:
  7746 ;;		wreg, status,2, btemp+1
  7747 ;; Tracked objects:
  7748 ;;		On entry : 0/0
  7749 ;;		On exit  : 0/0
  7750 ;;		Unchanged: 0/0
  7751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7752 ;;      Params:         0       0       0       0       0
  7753 ;;      Locals:         2       0       0       0       0
  7754 ;;      Temps:          0       0       0       0       0
  7755 ;;      Totals:         2       0       0       0       0
  7756 ;;Total ram usage:        2 bytes
  7757 ;; Hardware stack levels used:    1
  7758 ;; This function calls:
  7759 ;;		Nothing
  7760 ;; This function is called by:
  7761 ;;		_L_OUT
  7762 ;;		_H_OUT
  7763 ;;		_STBOUT
  7764 ;; This function uses a non-reentrant model
  7765 ;;
  7766                           
  7767                           
  7768                           ;psect for function __NOP
  7769  0827                     __NOP:	
  7770                           
  7771                           ;FMCW.c: 350: for(int i=0; i<5; i++){
  7772                           
  7773                           ;incstack = 0
  7774                           ; Regs used in __NOP: [wreg+status,2+btemp+1]
  7775  0827  01F0               	clrf	__NOP@i
  7776  0828  01F1               	clrf	__NOP@i+1
  7777  0829                     L9:	
  7778  0829  0871               	movf	__NOP@i+1,w
  7779  082A  3A80               	xorlw	128
  7780  082B  00FF               	movwf	127
  7781  082C  3080               	movlw	128
  7782  082D  027F               	subwf	127,w
  7783  082E  1D03               	skipz
  7784  082F  2832               	goto	u1875
  7785  0830  3005               	movlw	5
  7786  0831  0270               	subwf	__NOP@i,w
  7787  0832                     u1875:	
  7788  0832  1803               	btfsc	3,0
  7789  0833  0008               	return
  7790                           
  7791                           ;FMCW.c: 351: __nop();
  7792  0834  0000               	nop
  7793  0835  3001               	movlw	1
  7794  0836  07F0               	addwf	__NOP@i,f
  7795  0837  1803               	skipnc
  7796  0838  0AF1               	incf	__NOP@i+1,f
  7797  0839  3000               	movlw	0
  7798  083A  07F1               	addwf	__NOP@i+1,f
  7799  083B  2829               	goto	L9
  7800  083C                     __end_of__NOP:	
  7801  007E                     btemp	set	126	;btemp
  7802  007E                     wtemp	set	126
  7803  007E                     wtemp0	set	126
  7804  0080                     wtemp1	set	128
  7805  0082                     wtemp2	set	130
  7806  0084                     wtemp3	set	132
  7807  0086                     wtemp4	set	134
  7808  0088                     wtemp5	set	136
  7809  007F                     wtemp6	set	127
  7810  007E                     ttemp	set	126
  7811  007E                     ttemp0	set	126
  7812  0081                     ttemp1	set	129
  7813  0084                     ttemp2	set	132
  7814  0087                     ttemp3	set	135
  7815  007F                     ttemp4	set	127
  7816  007E                     ltemp	set	126
  7817  007E                     ltemp0	set	126
  7818  0082                     ltemp1	set	130
  7819  0086                     ltemp2	set	134
  7820  0080                     ltemp3	set	128


Data Sizes:
    Strings     25
    Constant    2
    Data        91
    BSS         121
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      80
    BANK1            80     34      73
    BANK3            96      0      90
    BANK2            96      0      73

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_16(CODE[3]), STR_15(CODE[8]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 

    FMRX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), FMRX_Nprg(BANK3[10]), 

    CWTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@CWTX_Nprg(BANK1[10]), CWTX_Nprg(BANK1[10]), 

    FMTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    OUTFQ@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), main@CWTX_Nprg(BANK1[10]), main@FMTX_Nprg(BANK1[10]), 
		 -> FMRX_Nprg(BANK3[10]), CWTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    sp__EEPROM_Read	PTR unsigned char  size(1) Largest target is 32
		 -> EEPROMData(BANK2[32]), 

    EEPROM_Write@data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK2[16]), 

    main@dData	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK2[16]), 

    sp__ReceivePacket_data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK2[16]), 


Critical Paths under _main in COMMON

    _printf->_putch
    _ReceivePacket_data->_fcscheck
    _ReceivePacket_data->_waitFlag
    _waitFlag->_getbit
    _getdata->_getbit
    _NM_waddress->_putch
    _Init_I2C_M->___lldiv
    _FMTX->_OUTFQ
    _FMTX->_RFDOUT
    _FMRX->_OUTFQ
    _FMRX->_RFDOUT
    _EEPROM_Write->_I2C_Master_Write
    _CWTX->_OUTFQ
    _CWTX->_RFDOUT
    _RFDOUT->___awdiv
    _OUTFQ->___awdiv
    _OPINIT->_H_OUT
    _OPINIT->_L_OUT
    _OPINIT->_STBOUT
    _STBOUT->__NOP
    _L_OUT->__NOP
    _H_OUT->__NOP

Critical Paths under _main in BANK0

    _main->_CWTX
    _main->_FMRX
    _main->_FMTX
    _ReceivePacket_data->_waitFlag
    _FMTX->_OUTFQ
    _FMRX->_OUTFQ
    _CWTX->_OUTFQ

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                38    38      0   33355
                                             66 BANK0      4     4      0
                                              0 BANK1     34    34      0
                               _CWTX
                       _EEPROM_Write
                               _FMRX
                               _FMTX
                         _Init_I2C_M
                           _Init_MPU
                        _Init_SERIAL
                        _NM_waddress
                 _ReceivePacket_data
                          _Reset_EPS
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     214
                                              1 COMMON     7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _Reset_EPS                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ReceivePacket_data                                   6     6      0    2691
                                             10 COMMON     2     2      0
                                             29 BANK0      4     4      0
                           _fcscheck
                            _getdata
                           _waitFlag
 ---------------------------------------------------------------------------------
 (2) _waitFlag                                            33    33      0    2205
                                              6 COMMON     4     4      0
                                              0 BANK0     29    29      0
                             _getbit
 ---------------------------------------------------------------------------------
 (2) _getdata                                             10    10      0     212
                                              6 COMMON     2     2      0
                                              0 BANK0      7     7      0
                             _getbit
 ---------------------------------------------------------------------------------
 (3) _getbit                                               6     4      2      46
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _fcscheck                                            10     8      2     161
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (1) _NM_waddress                                          3     1      2     194
                                              1 COMMON     3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_SERIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_MPU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_I2C_M                                           8     4      4     343
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _FMTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _FMRX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         8     5      3     739
                                              2 COMMON     8     5      3
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     446
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CWTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (2) _RFDOUT                                              37    33      4    3231
                                              9 COMMON     4     0      4
                                              0 BANK0     33    33      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _OUTFQ                                               64    60      4    3853
                                              9 COMMON     4     0      4
                                              0 BANK0     60    60      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _OPINIT                                               2     0      2    2075
                                              4 COMMON     2     0      2
                              _H_OUT
                              _L_OUT
                             _STBOUT
 ---------------------------------------------------------------------------------
 (3) _STBOUT                                               2     0      2     271
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _L_OUT                                                2     0      2     801
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _H_OUT                                                2     0      2     536
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (4) __NOP                                                 2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CWTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _EEPROM_Write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _FMRX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _FMTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _Init_I2C_M
     ___lldiv
   _Init_MPU
   _Init_SERIAL
   _NM_waddress
     _putch
   _ReceivePacket_data
     _fcscheck
     _getdata
       _getbit
     _waitFlag
       _getbit
   _Reset_EPS
   _printf
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      5A       9       93.8%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      49      11       76.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     22      49       7       91.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     46      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     14A      12        0.0%
ABS                  0      0     14A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Jan 24 22:31:24 2018

                           pc 0002                   __CFG_CP$OFF 0000                            l65 17C5  
                ___awdiv@sign 0076                            fsr 0004                           l207 0566  
                         l272 0091                           l490 17D4                           l665 0A85  
                         _RA1 0029                           _RB2 0032                           _RC2 003A  
                         _RB4 0034                           _RB5 0035                           _PEN 048A  
                __CFG_CPD$OFF 0000                           _SEN 0488                           _RX9 00C6  
                         _TX9 04C6                           fsr0 0004                           indf 0000  
                __CFG_FOSC$HS 0000                  __CFG_LVP$OFF 0000                          l3001 0682  
                        l3013 06B0                          l3023 06CB                          l3113 0C0F  
                        l3203 00D9                          l3123 0C2B                          l3115 0C12  
                        l3027 06D8                          l3301 0DA9                          l3133 0BEF  
                        l3053 072E                          l3215 00F7                          l3119 0C20  
                        l3039 0706                          l3241 0293                          l3225 0160  
                        l3209 00E8                          l3305 0DC3                          l3313 0DF0  
                        l3153 0076                          l3161 0038                          l3065 075C  
                        l3049 0721                          l3401 0C78                          l3235 0205  
                        l3227 019D                          l3323 0B98                          l3147 0059  
                        l3075 0777                          l3237 020C                          l3245 02A4  
                        l3309 0DDD                          l3333 0BD0                          l3325 0BA8  
                        l3173 00A9                          l2607 0A28                          l2711 0B26  
                        l2703 0B13                          l3263 02FA                          l3255 02C6  
                        l3159 008A                          l3079 0784                          l3407 0CA0  
                        l3415 0CA6                          l3249 02B7                          l3281 0D54  
                        l3337 0BDD                          l3097 07B0                          l3513 0A6B  
                        l2627 09CA                          l2707 0B1E                          l3259 02E0  
                        l3267 030D                          l3275 0D38                          l3099 032F  
                        l3507 0A5F                          l2637 09E2                          l3197 00BD  
                        l2821 0464                          l2805 0429                          l2741 035E  
                        l2733 0336                          l3509 0A61                          l3517 0A72  
                        l2663 0970                          l2655 0960                          l3295 0D9A  
                        l3287 0D63                          l3535 0B5B                          l2911 056F  
                        l2831 047F                          l2751 0379                          l2735 0355  
                        l3519 0A44                          l3537 0B75                          l2577 0AC0  
                        l2921 058A                          l2809 0436                          l2905 0564  
                        l2579 0ACD                          l2835 048C                          l2755 0386  
                        l3803 0E8A                          l2597 0A10                          l2685 0AE7  
                        l2925 0597                          l2861 04E2                          l2695 0AEF  
                        l2679 0ADC                          l2935 05AE                          l2847 04BA  
                        l2783 03E0                          l2697 0AFD                          l2961 0604  
                        l2945 05C9                          l2873 0510                          l2857 04D5  
                        l2769 03B8                          l3833 0F0B                          l2971 061F  
                        l2883 052B                          l2795 040E                          l2779 03D3  
                        l3827 0EF3                          l3819 0EC4                          l2949 05D6  
                        l3845 0F32                          l2975 062C                          l2887 0538  
                        l3865 0FD9                          l2987 065A                          l2997 0675  
                        l3869 0FF0                          STR_1 0817                          STR_2 0817  
                        STR_3 0817                          STR_4 0817                          STR_5 0817  
                        STR_6 0817                          STR_7 0810                          STR_8 0810  
                        STR_9 0810                          _BRGH 04C2                          _CREN 00C4  
                        _FERR 00C2                          u2105 0B14                          u2205 039F  
                        u2065 0AF2                          u3025 0DEE                          u3115 0C76  
                        u2085 0AFE                          u3045 0B9C                          u2405 054D  
                        u2325 04A1                          u2245 03F5                          u3125 0C9E  
                        u2095 0B0A                          u3065 0BAA                          u3075 0BBF  
                        u2515 0641                          u3085 0BD1                          u2365 04F7  
                        u2285 044B                          _FMRX 08F9                          u1905 0AB0  
                        u3195 0991                          u2635 0743                          u2555 0697  
                        u2475 05EB                          _FMTX 0925                          u2815 00BB  
                        u2905 02B5                          u2825 00D7                          u3570 0F50  
                        u1875 0832                          u2915 02C4                          u2835 00E6  
                        u2675 0799                          u2595 06ED                          u3707 0022  
                        u3627 0E12                          u3580 0F66                          u2845 00F5  
                        u3717 0AB4                          u3637 0E3B                          u3590 0F7C  
                        u3727 0B80                          u2775 0046                          u3647 0E9F  
                        u2945 030B                          u3657 0F1D                          u2955 0D36  
                        u3667 0F3F                          _RCIE 0465                          _RCEN 048B  
                        _RCIF 0065                          _CWTX 08CD                          u2965 0D52  
                        u3677 0FD1                          u2895 02A2                          u2975 0D61  
                        u3687 0FF8                          u2985 0D98                          u3697 0011  
                        u2995 0DA7                          _OERR 00C1                          _TMR1 000E  
                        _SPEN 00C7                          _RSEN 0489                          _SREN 00C5  
                        _TXIE 0464                          _TXEN 04C5                          _TXIF 0064  
                        _SYNC 04C4                          __NOP 0827                  __CFG_WRT$OFF 0000  
                        _main 0E0A                   _NM_waddress 17EE                 ??_Init_SERIAL 0070  
                        btemp 007E                 __CFG_BOREN$ON 0000                          ltemp 007E  
                getbit@oldbit 00E7                   Init_I2C_M@c 0020                          start 0000  
ReceivePacket_data@fcschecker 003D                          ttemp 007E                          wtemp 007E  
               __CFG_IESO$OFF 0000                 __CFG_MCLRE$ON 0000          __end_of_EEPROM_Write 0B88  
                       ?_FMRX 005C                         ?_FMTX 005C                         ?_CWTX 005C  
            ?_I2C_Master_Wait 0070              ?_I2C_Master_Stop 0070                         ?__NOP 0070  
                       ?_main 0070                         _ACKEN 048C                         _ACKDT 048D  
             __end_of___awdiv 0B2B                         STR_10 0810                         STR_11 0810  
                       STR_12 0810                         STR_15 0808                         STR_16 081E  
               __CFG_WDTE$OFF 0000                         _ANSEL 0188               __end_of___lldiv 0BE6  
             ___awdiv@divisor 0070               ___awdiv@counter 0075                         _RCREG 001A  
                       _SPBRG 0099                         _PORTA 0005                         _PORTB 0006  
                       _PORTC 0007                         _PORTD 0008                         _PORTE 0009  
                       _H_OUT 09B3                         _OUTFQ 00AC                         _TRISA 0085  
                       _TRISB 0086                         _TRISC 0087                         _TRISD 0088  
                       _TRISE 0089                         _L_OUT 09F9                         _TXREG 0019  
               __CFG_PWRTE$ON 0000                __CFG_FCMEN$OFF 0000                         _dData 0130  
             __end_of_getdata 0C47                         _eflag 0068                 getdata@dstuff 0022  
                       _putch 17C4                         main@i 00BF                         pclath 000A  
                       ltemp0 007E                         ltemp1 0082                         ltemp2 0086  
                       ltemp3 0080                         ttemp0 007E                         ttemp1 0081  
                       ttemp2 0084                         ttemp3 0087                         ttemp4 007F  
                       status 0003                         wtemp0 007E                         wtemp1 0080  
                       wtemp2 0082                         wtemp3 0084                         wtemp4 0086  
                       wtemp5 0088                         wtemp6 007F                    _Init_I2C_M 097F  
            EEPROM_Write@data 0074    __end_of_ReceivePacket_data 0CAC                  __end_of_FMRX 0925  
                __end_of_FMTX 0951                  __end_of_CWTX 08F9                  __end_of__NOP 083C  
             __initialization 07B3                  __end_of_main 1000           __end_of_Init_SERIAL 0855  
            __end_of_Init_MPU 08A5                        ??_FMRX 007D                        ??_FMTX 007D  
                      ??_CWTX 007D                        ??__NOP 0070                        ??_main 0062  
                      ?_H_OUT 0072      EEPROM_Write@high_address 0072                        ?_OUTFQ 0079  
                      ?_L_OUT 0072             ?_I2C_Master_Start 0070             ?_I2C_Master_Write 0070  
                      OUTFQ@i 0056            ??_I2C_Master_Start 0070                        OUTFQ@j 005A  
          ??_I2C_Master_Write 0072              ___awdiv@dividend 0072                    _eDataField 0140  
                      ?_putch 0070                        _ANSELH 0189                        _RFDOUT 0D29  
                      _OPINIT 0CAC                        _SSPADD 0093                        _STBOUT 0951  
                      _STATUS 0003                        _SSPCON 0014                        _SSPBUF 0013  
                      __NOP@i 0070              __end_of_fcscheck 00AC                     ??___awdiv 0074  
                      _dfcshi 006C                     ??___lldiv 0078                        _dfcslo 006D  
                      _efcshi 006E                        _efcslo 006F                        _getbit 0A86  
          __size_of_Reset_EPS 0023                        _estuff 00E5              ___awdiv@quotient 0077  
                  _dPacketnum 0066                        _printf 0A3F                     ??_getdata 0076  
                 RFDOUT@i_473 003B                   RFDOUT@i_474 003F              __end_of_waitFlag 07B3  
  EEPROM_Write@EEPROM_address 0078       __end_of__initialization 07FC       EEPROM_Write@low_address 0073  
                 ?_Init_I2C_M 0020                   _Init_SERIAL 083C         __size_of_EEPROM_Write 005D  
               __end_of_H_OUT 09F9                 __end_of_OUTFQ 0327                 __end_of_L_OUT 0A3F  
               L_OUT@fmcwtxrx 0072                __pcstackCOMMON 0070                  __pidataBANK1 086E  
                __pidataBANK2 0855                  __pidataBANK3 08A5                 __end_of_putch 17CC  
                     ??_H_OUT 0074                       ??_OUTFQ 0020                       ??_L_OUT 0074  
                     ??_putch 0070                  _EEPROM_Write 0B2B                    __pbssBANK0 0066  
                  __pbssBANK1 00DC                    __pbssBANK2 0110                    __pbssBANK3 0190  
           __end_of_Reset_EPS 002A                     ?_Init_MPU 0070                       ?_RFDOUT 0079  
                     ?_OPINIT 0074                  ?_NM_waddress 0071                       ?_STBOUT 0072  
                     RFDOUT@i 003D                    __pmaintext 0E0A                    _ebitstatus 00E1  
                     ?_getbit 0070                       ?_printf 0071           __size_of_Init_I2C_M 0034  
                   OUTFQ@Nprg 007B                     ?_fcscheck 0070                       _SSPCON2 0091  
                     _SSPSTAT 0094                    __stringtab 0800                    ??_Init_MPU 0070  
             __size_of_RFDOUT 00E1               __size_of_OPINIT 007D               __size_of_STBOUT 002E  
                   ?_waitFlag 0070                       _dPacket 0190                       _ePacket 00DC  
                     ___awdiv 0AD2                       ___lldiv 0B88               __size_of_getbit 004C  
                 waitFlag@buf 003C                       __ptext1 0A3F                       __ptext2 0007  
                     __ptext3 0C47                       __ptext4 0327                       __ptext5 0BE6  
                     __ptext6 0A86                       __ptext7 002A                       __ptext8 17EE  
                     __ptext9 17C4               __size_of_printf 0047                       _getdata 0BE6  
          _ReceivePacket_data 0C47                     _T1CONbits 0010      __size_of_I2C_Master_Wait 0009  
    __size_of_I2C_Master_Stop 0007                    ??_fcscheck 0072           ?_ReceivePacket_data 0070  
                     getbit@i 0074                       clrloop0 17CD          end_of_initialization 07FC  
                RFDOUT@Nref_b 0023                     _FMRX_Nref 00C4                     _FMRX_Nprg 01E0  
                   _FMTX_Nref 00C6                     _FMTX_Nprg 00D2                     _CWTX_Nref 00C2  
                   _CWTX_Nprg 00C8                   OUTFQ@Nprg_b 0030     __size_of_I2C_Master_Start 0007  
   __size_of_I2C_Master_Write 0008               ___lldiv@divisor 0070               ___lldiv@counter 007D  
                  ??_waitFlag 0076          ??_ReceivePacket_data 007A                       printf@c 0077  
                     printf@f 0076                    fcscheck@bt 0074                OPINIT@fmcwtxrx 0074  
                   _PORTAbits 0005                     _PORTCbits 0007                     _PORTDbits 0008  
                   _PORTEbits 0009                    getdata@buf 0026                  ??_Init_I2C_M 0024  
                ?_Init_SERIAL 0070                __end_of_RFDOUT 0E0A                __end_of_OPINIT 0D29  
              __end_of_STBOUT 097F          __size_of_NM_waddress 0012                __end_of_getbit 0AD2  
              __end_of_printf 0A86           start_initialization 07B3            __end_of_Init_I2C_M 09B3  
                    ??_RFDOUT 0020                      ??_OPINIT 0076             ??_I2C_Master_Wait 0070  
           ??_I2C_Master_Stop 0070                      ??_STBOUT 0074             __size_of_Init_MPU 001D  
                   _Reset_EPS 0007             getdata@dbitstatus 0024                    init_fetch0 17DD  
                    ??_getbit 0072                   __pdataBANK1 00C2                   __pdataBANK2 0140  
                 __pdataBANK3 01C2                    RFDOUT@Nref 007B                      ??_printf 0073  
         __end_of_commandSize 0808      NM_waddress@whigh_address 0071                     ___latbits 0002  
               __pcstackBANK0 0020                 __pcstackBANK1 00A0                      FMRX@Nref 005C  
                    FMRX@Nprg 005E                      FMTX@Nref 005C                      FMTX@Nprg 005E  
                    FMRX@fmrx 0060                      FMTX@fmtx 0060                      CWTX@Nref 005C  
                    CWTX@Nprg 005E             __size_of_fcscheck 0082                 waitFlag@j_111 0024  
               waitFlag@j_120 002E                 waitFlag@j_113 0026                 waitFlag@j_130 0038  
               waitFlag@j_122 0030                 waitFlag@j_115 0028                 waitFlag@j_124 0032  
               waitFlag@j_117 002A                 waitFlag@j_126 0034                 waitFlag@j_119 002C  
               waitFlag@j_128 0036                      CWTX@cwtx 0060              _I2C_Master_Start 17AE  
                  ?_Reset_EPS 0070              _I2C_Master_Write 17BC       getdata@bufstore_counter 0020  
                    ?___awdiv 0070                      ?___lldiv 0070             __size_of_waitFlag 048C  
                   __pstrings 0800                      ?_getdata 0070                __size_of_H_OUT 0046  
              __size_of_OUTFQ 027B                __size_of_L_OUT 0046                __size_of_putch 0008  
               H_OUT@fmcwtxrx 0072                     clear_ram0 17CC                      _PIE1bits 008C  
                  OUTFQ@i_462 0052                    OUTFQ@i_464 0058                     _rcv_state 006A  
        __size_of_Init_SERIAL 0019                      _PIR1bits 000C                    OUTFQ@count 0054  
                 _commandSize 0806                     fcscheck@i 0075                     main@F2011 01D6  
                   main@F2007 01C2                     main@F2009 01CC                   __stringbase 0805  
                   main@dData 00C1                    printf@flag 0074                      _Init_MPU 0888  
                 ??_Reset_EPS 0070                 fcscheck@i_142 0077   __size_of_ReceivePacket_data 0065  
            __size_of___awdiv 0059              __size_of___lldiv 005E            __end_of__stringtab 0806  
                  _EEPROMData 0110              __size_of_getdata 0061               _I2C_Master_Wait 17D4  
             _I2C_Master_Stop 17B5                RFDOUT@fmcwtxrx 0079                      _efcsflag 00E3  
                    _fcscheck 002A                      __ptext10 083C                      __ptext11 0888  
                    __ptext20 17D4                      __ptext12 097F                      __ptext21 08CD  
                    __ptext13 0B88                      __ptext22 0D29                      __ptext14 0925  
                    __ptext23 00AC                      __ptext15 08F9                      __ptext24 0AD2  
                    __ptext16 0B2B                      __ptext25 0CAC                      __ptext17 17BC  
                    __ptext26 0951                      __ptext18 17B5                      __ptext27 09F9  
                    __ptext19 17AE                      __ptext28 09B3                      __ptext29 0827  
           __CFG_BOR4V$BOR21V 0000                 ?_EEPROM_Write 0072                 __size_of_FMRX 002C  
               __size_of_FMTX 002C                 __size_of_CWTX 002C                 __size_of__NOP 0015  
               ??_NM_waddress 0073                     waitFlag@i 0020                     waitFlag@j 0022  
               __size_of_main 01F6                STBOUT@fmcwtxrx 0072                      _waitFlag 0327  
    NM_waddress@NM_wad_header 0073                 OUTFQ@fmcwtxrx 0079      __end_of_I2C_Master_Start 17B5  
                   putch@byte 0070      __end_of_I2C_Master_Write 17C4                    _INTCONbits 000B  
                    init_ram0 17E1                  fcscheck@byte 0079                ??_EEPROM_Write 0075  
          waitFlag@flag_judge 003A              ___lldiv@dividend 0074                     stringcode 0800  
               main@FMRX_Nprg 00B4             main@NM_wad_header 00BE                 main@FMTX_Nprg 00A0  
         __end_of_NM_waddress 1800                      printf@ap 0075                 main@CWTX_Nprg 00AA  
     __end_of_I2C_Master_Wait 17DD       __end_of_I2C_Master_Stop 17BC              ___lldiv@quotient 0079  
           I2C_Master_Write@d 0070           EEPROM_Write@Address 0079                      stringdir 0800  
                    stringtab 0800           ReceivePacket_data@i 003F       NM_waddress@wlow_address 0072  
