

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Dec 03 03:24:51 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	dabs	1,0x7E,2
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  008F                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  0105                     	;# 
   116  0107                     	;# 
   117  0108                     	;# 
   118  0109                     	;# 
   119  010C                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  0185                     	;# 
   125  0187                     	;# 
   126  0188                     	;# 
   127  0189                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  000E                     	;# 
   146  000F                     	;# 
   147  0010                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0013                     	;# 
   151  0014                     	;# 
   152  0015                     	;# 
   153  0015                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001B                     	;# 
   160  001B                     	;# 
   161  001C                     	;# 
   162  001D                     	;# 
   163  001E                     	;# 
   164  001F                     	;# 
   165  0081                     	;# 
   166  0085                     	;# 
   167  0086                     	;# 
   168  0087                     	;# 
   169  0088                     	;# 
   170  0089                     	;# 
   171  008C                     	;# 
   172  008D                     	;# 
   173  008E                     	;# 
   174  008F                     	;# 
   175  0090                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0094                     	;# 
   182  0095                     	;# 
   183  0096                     	;# 
   184  0097                     	;# 
   185  0098                     	;# 
   186  0099                     	;# 
   187  009A                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  0105                     	;# 
   194  0107                     	;# 
   195  0108                     	;# 
   196  0109                     	;# 
   197  010C                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  010F                     	;# 
   202  0185                     	;# 
   203  0187                     	;# 
   204  0188                     	;# 
   205  0189                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  0000                     	;# 
   209  0001                     	;# 
   210  0002                     	;# 
   211  0003                     	;# 
   212  0004                     	;# 
   213  0005                     	;# 
   214  0006                     	;# 
   215  0007                     	;# 
   216  0008                     	;# 
   217  0009                     	;# 
   218  000A                     	;# 
   219  000B                     	;# 
   220  000C                     	;# 
   221  000D                     	;# 
   222  000E                     	;# 
   223  000E                     	;# 
   224  000F                     	;# 
   225  0010                     	;# 
   226  0011                     	;# 
   227  0012                     	;# 
   228  0013                     	;# 
   229  0014                     	;# 
   230  0015                     	;# 
   231  0015                     	;# 
   232  0016                     	;# 
   233  0017                     	;# 
   234  0018                     	;# 
   235  0019                     	;# 
   236  001A                     	;# 
   237  001B                     	;# 
   238  001B                     	;# 
   239  001C                     	;# 
   240  001D                     	;# 
   241  001E                     	;# 
   242  001F                     	;# 
   243  0081                     	;# 
   244  0085                     	;# 
   245  0086                     	;# 
   246  0087                     	;# 
   247  0088                     	;# 
   248  0089                     	;# 
   249  008C                     	;# 
   250  008D                     	;# 
   251  008E                     	;# 
   252  008F                     	;# 
   253  0090                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0094                     	;# 
   260  0095                     	;# 
   261  0096                     	;# 
   262  0097                     	;# 
   263  0098                     	;# 
   264  0099                     	;# 
   265  009A                     	;# 
   266  009B                     	;# 
   267  009C                     	;# 
   268  009D                     	;# 
   269  009E                     	;# 
   270  009F                     	;# 
   271  0105                     	;# 
   272  0107                     	;# 
   273  0108                     	;# 
   274  0109                     	;# 
   275  010C                     	;# 
   276  010C                     	;# 
   277  010D                     	;# 
   278  010E                     	;# 
   279  010F                     	;# 
   280  0185                     	;# 
   281  0187                     	;# 
   282  0188                     	;# 
   283  0189                     	;# 
   284  018C                     	;# 
   285  018D                     	;# 
   286  0000                     	;# 
   287  0001                     	;# 
   288  0002                     	;# 
   289  0003                     	;# 
   290  0004                     	;# 
   291  0005                     	;# 
   292  0006                     	;# 
   293  0007                     	;# 
   294  0008                     	;# 
   295  0009                     	;# 
   296  000A                     	;# 
   297  000B                     	;# 
   298  000C                     	;# 
   299  000D                     	;# 
   300  000E                     	;# 
   301  000E                     	;# 
   302  000F                     	;# 
   303  0010                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0013                     	;# 
   307  0014                     	;# 
   308  0015                     	;# 
   309  0015                     	;# 
   310  0016                     	;# 
   311  0017                     	;# 
   312  0018                     	;# 
   313  0019                     	;# 
   314  001A                     	;# 
   315  001B                     	;# 
   316  001B                     	;# 
   317  001C                     	;# 
   318  001D                     	;# 
   319  001E                     	;# 
   320  001F                     	;# 
   321  0081                     	;# 
   322  0085                     	;# 
   323  0086                     	;# 
   324  0087                     	;# 
   325  0088                     	;# 
   326  0089                     	;# 
   327  008C                     	;# 
   328  008D                     	;# 
   329  008E                     	;# 
   330  008F                     	;# 
   331  0090                     	;# 
   332  0091                     	;# 
   333  0092                     	;# 
   334  0093                     	;# 
   335  0093                     	;# 
   336  0093                     	;# 
   337  0094                     	;# 
   338  0095                     	;# 
   339  0096                     	;# 
   340  0097                     	;# 
   341  0098                     	;# 
   342  0099                     	;# 
   343  009A                     	;# 
   344  009B                     	;# 
   345  009C                     	;# 
   346  009D                     	;# 
   347  009E                     	;# 
   348  009F                     	;# 
   349  0105                     	;# 
   350  0107                     	;# 
   351  0108                     	;# 
   352  0109                     	;# 
   353  010C                     	;# 
   354  010C                     	;# 
   355  010D                     	;# 
   356  010E                     	;# 
   357  010F                     	;# 
   358  0185                     	;# 
   359  0187                     	;# 
   360  0188                     	;# 
   361  0189                     	;# 
   362  018C                     	;# 
   363  018D                     	;# 
   364  0000                     	;# 
   365  0001                     	;# 
   366  0002                     	;# 
   367  0003                     	;# 
   368  0004                     	;# 
   369  0005                     	;# 
   370  0006                     	;# 
   371  0007                     	;# 
   372  0008                     	;# 
   373  0009                     	;# 
   374  000A                     	;# 
   375  000B                     	;# 
   376  000C                     	;# 
   377  000D                     	;# 
   378  000E                     	;# 
   379  000E                     	;# 
   380  000F                     	;# 
   381  0010                     	;# 
   382  0011                     	;# 
   383  0012                     	;# 
   384  0013                     	;# 
   385  0014                     	;# 
   386  0015                     	;# 
   387  0015                     	;# 
   388  0016                     	;# 
   389  0017                     	;# 
   390  0018                     	;# 
   391  0019                     	;# 
   392  001A                     	;# 
   393  001B                     	;# 
   394  001B                     	;# 
   395  001C                     	;# 
   396  001D                     	;# 
   397  001E                     	;# 
   398  001F                     	;# 
   399  0081                     	;# 
   400  0085                     	;# 
   401  0086                     	;# 
   402  0087                     	;# 
   403  0088                     	;# 
   404  0089                     	;# 
   405  008C                     	;# 
   406  008D                     	;# 
   407  008E                     	;# 
   408  008F                     	;# 
   409  0090                     	;# 
   410  0091                     	;# 
   411  0092                     	;# 
   412  0093                     	;# 
   413  0093                     	;# 
   414  0093                     	;# 
   415  0094                     	;# 
   416  0095                     	;# 
   417  0096                     	;# 
   418  0097                     	;# 
   419  0098                     	;# 
   420  0099                     	;# 
   421  009A                     	;# 
   422  009B                     	;# 
   423  009C                     	;# 
   424  009D                     	;# 
   425  009E                     	;# 
   426  009F                     	;# 
   427  0105                     	;# 
   428  0107                     	;# 
   429  0108                     	;# 
   430  0109                     	;# 
   431  010C                     	;# 
   432  010C                     	;# 
   433  010D                     	;# 
   434  010E                     	;# 
   435  010F                     	;# 
   436  0185                     	;# 
   437  0187                     	;# 
   438  0188                     	;# 
   439  0189                     	;# 
   440  018C                     	;# 
   441  018D                     	;# 
   442  0000                     	;# 
   443  0001                     	;# 
   444  0002                     	;# 
   445  0003                     	;# 
   446  0004                     	;# 
   447  0005                     	;# 
   448  0006                     	;# 
   449  0007                     	;# 
   450  0008                     	;# 
   451  0009                     	;# 
   452  000A                     	;# 
   453  000B                     	;# 
   454  000C                     	;# 
   455  000D                     	;# 
   456  000E                     	;# 
   457  000E                     	;# 
   458  000F                     	;# 
   459  0010                     	;# 
   460  0011                     	;# 
   461  0012                     	;# 
   462  0013                     	;# 
   463  0014                     	;# 
   464  0015                     	;# 
   465  0015                     	;# 
   466  0016                     	;# 
   467  0017                     	;# 
   468  0018                     	;# 
   469  0019                     	;# 
   470  001A                     	;# 
   471  001B                     	;# 
   472  001B                     	;# 
   473  001C                     	;# 
   474  001D                     	;# 
   475  001E                     	;# 
   476  001F                     	;# 
   477  0081                     	;# 
   478  0085                     	;# 
   479  0086                     	;# 
   480  0087                     	;# 
   481  0088                     	;# 
   482  0089                     	;# 
   483  008C                     	;# 
   484  008D                     	;# 
   485  008E                     	;# 
   486  008F                     	;# 
   487  0090                     	;# 
   488  0091                     	;# 
   489  0092                     	;# 
   490  0093                     	;# 
   491  0093                     	;# 
   492  0093                     	;# 
   493  0094                     	;# 
   494  0095                     	;# 
   495  0096                     	;# 
   496  0097                     	;# 
   497  0098                     	;# 
   498  0099                     	;# 
   499  009A                     	;# 
   500  009B                     	;# 
   501  009C                     	;# 
   502  009D                     	;# 
   503  009E                     	;# 
   504  009F                     	;# 
   505  0105                     	;# 
   506  0107                     	;# 
   507  0108                     	;# 
   508  0109                     	;# 
   509  010C                     	;# 
   510  010C                     	;# 
   511  010D                     	;# 
   512  010E                     	;# 
   513  010F                     	;# 
   514  0185                     	;# 
   515  0187                     	;# 
   516  0188                     	;# 
   517  0189                     	;# 
   518  018C                     	;# 
   519  018D                     	;# 
   520  0000                     	;# 
   521  0001                     	;# 
   522  0002                     	;# 
   523  0003                     	;# 
   524  0004                     	;# 
   525  0005                     	;# 
   526  0006                     	;# 
   527  0007                     	;# 
   528  0008                     	;# 
   529  0009                     	;# 
   530  000A                     	;# 
   531  000B                     	;# 
   532  000C                     	;# 
   533  000D                     	;# 
   534  000E                     	;# 
   535  000E                     	;# 
   536  000F                     	;# 
   537  0010                     	;# 
   538  0011                     	;# 
   539  0012                     	;# 
   540  0013                     	;# 
   541  0014                     	;# 
   542  0015                     	;# 
   543  0015                     	;# 
   544  0016                     	;# 
   545  0017                     	;# 
   546  0018                     	;# 
   547  0019                     	;# 
   548  001A                     	;# 
   549  001B                     	;# 
   550  001B                     	;# 
   551  001C                     	;# 
   552  001D                     	;# 
   553  001E                     	;# 
   554  001F                     	;# 
   555  0081                     	;# 
   556  0085                     	;# 
   557  0086                     	;# 
   558  0087                     	;# 
   559  0088                     	;# 
   560  0089                     	;# 
   561  008C                     	;# 
   562  008D                     	;# 
   563  008E                     	;# 
   564  008F                     	;# 
   565  0090                     	;# 
   566  0091                     	;# 
   567  0092                     	;# 
   568  0093                     	;# 
   569  0093                     	;# 
   570  0093                     	;# 
   571  0094                     	;# 
   572  0095                     	;# 
   573  0096                     	;# 
   574  0097                     	;# 
   575  0098                     	;# 
   576  0099                     	;# 
   577  009A                     	;# 
   578  009B                     	;# 
   579  009C                     	;# 
   580  009D                     	;# 
   581  009E                     	;# 
   582  009F                     	;# 
   583  0105                     	;# 
   584  0107                     	;# 
   585  0108                     	;# 
   586  0109                     	;# 
   587  010C                     	;# 
   588  010C                     	;# 
   589  010D                     	;# 
   590  010E                     	;# 
   591  010F                     	;# 
   592  0185                     	;# 
   593  0187                     	;# 
   594  0188                     	;# 
   595  0189                     	;# 
   596  018C                     	;# 
   597  018D                     	;# 
   598  0000                     	;# 
   599  0001                     	;# 
   600  0002                     	;# 
   601  0003                     	;# 
   602  0004                     	;# 
   603  0005                     	;# 
   604  0006                     	;# 
   605  0007                     	;# 
   606  0008                     	;# 
   607  0009                     	;# 
   608  000A                     	;# 
   609  000B                     	;# 
   610  000C                     	;# 
   611  000D                     	;# 
   612  000E                     	;# 
   613  000E                     	;# 
   614  000F                     	;# 
   615  0010                     	;# 
   616  0011                     	;# 
   617  0012                     	;# 
   618  0013                     	;# 
   619  0014                     	;# 
   620  0015                     	;# 
   621  0015                     	;# 
   622  0016                     	;# 
   623  0017                     	;# 
   624  0018                     	;# 
   625  0019                     	;# 
   626  001A                     	;# 
   627  001B                     	;# 
   628  001B                     	;# 
   629  001C                     	;# 
   630  001D                     	;# 
   631  001E                     	;# 
   632  001F                     	;# 
   633  0081                     	;# 
   634  0085                     	;# 
   635  0086                     	;# 
   636  0087                     	;# 
   637  0088                     	;# 
   638  0089                     	;# 
   639  008C                     	;# 
   640  008D                     	;# 
   641  008E                     	;# 
   642  008F                     	;# 
   643  0090                     	;# 
   644  0091                     	;# 
   645  0092                     	;# 
   646  0093                     	;# 
   647  0093                     	;# 
   648  0093                     	;# 
   649  0094                     	;# 
   650  0095                     	;# 
   651  0096                     	;# 
   652  0097                     	;# 
   653  0098                     	;# 
   654  0099                     	;# 
   655  009A                     	;# 
   656  009B                     	;# 
   657  009C                     	;# 
   658  009D                     	;# 
   659  009E                     	;# 
   660  009F                     	;# 
   661  0105                     	;# 
   662  0107                     	;# 
   663  0108                     	;# 
   664  0109                     	;# 
   665  010C                     	;# 
   666  010C                     	;# 
   667  010D                     	;# 
   668  010E                     	;# 
   669  010F                     	;# 
   670  0185                     	;# 
   671  0187                     	;# 
   672  0188                     	;# 
   673  0189                     	;# 
   674  018C                     	;# 
   675  018D                     	;# 
   676  0000                     	;# 
   677  0001                     	;# 
   678  0002                     	;# 
   679  0003                     	;# 
   680  0004                     	;# 
   681  0005                     	;# 
   682  0006                     	;# 
   683  0007                     	;# 
   684  0008                     	;# 
   685  0009                     	;# 
   686  000A                     	;# 
   687  000B                     	;# 
   688  000C                     	;# 
   689  000D                     	;# 
   690  000E                     	;# 
   691  000E                     	;# 
   692  000F                     	;# 
   693  0010                     	;# 
   694  0011                     	;# 
   695  0012                     	;# 
   696  0013                     	;# 
   697  0014                     	;# 
   698  0015                     	;# 
   699  0015                     	;# 
   700  0016                     	;# 
   701  0017                     	;# 
   702  0018                     	;# 
   703  0019                     	;# 
   704  001A                     	;# 
   705  001B                     	;# 
   706  001B                     	;# 
   707  001C                     	;# 
   708  001D                     	;# 
   709  001E                     	;# 
   710  001F                     	;# 
   711  0081                     	;# 
   712  0085                     	;# 
   713  0086                     	;# 
   714  0087                     	;# 
   715  0088                     	;# 
   716  0089                     	;# 
   717  008C                     	;# 
   718  008D                     	;# 
   719  008E                     	;# 
   720  008F                     	;# 
   721  0090                     	;# 
   722  0091                     	;# 
   723  0092                     	;# 
   724  0093                     	;# 
   725  0093                     	;# 
   726  0093                     	;# 
   727  0094                     	;# 
   728  0095                     	;# 
   729  0096                     	;# 
   730  0097                     	;# 
   731  0098                     	;# 
   732  0099                     	;# 
   733  009A                     	;# 
   734  009B                     	;# 
   735  009C                     	;# 
   736  009D                     	;# 
   737  009E                     	;# 
   738  009F                     	;# 
   739  0105                     	;# 
   740  0107                     	;# 
   741  0108                     	;# 
   742  0109                     	;# 
   743  010C                     	;# 
   744  010C                     	;# 
   745  010D                     	;# 
   746  010E                     	;# 
   747  010F                     	;# 
   748  0185                     	;# 
   749  0187                     	;# 
   750  0188                     	;# 
   751  0189                     	;# 
   752  018C                     	;# 
   753  018D                     	;# 
   754                           
   755                           	psect	idataBANK1
   756  0883                     __pidataBANK1:	
   757                           
   758                           ;initializer for _CWTX_Nref
   759  0883  34A0               	retlw	160
   760  0884  3400               	retlw	0
   761                           
   762                           ;initializer for _FMRX_Nref
   763  0885  3400               	retlw	0
   764  0886  340A               	retlw	10
   765                           
   766                           ;initializer for _FMTX_Nref
   767  0887  3400               	retlw	0
   768  0888  340A               	retlw	10
   769                           
   770                           ;initializer for _CWTX_Nprg
   771  0889  3400               	retlw	0
   772  088A  3400               	retlw	0
   773  088B  3401               	retlw	1
   774  088C  3400               	retlw	0
   775  088D  3407               	retlw	7
   776  088E  3400               	retlw	0
   777  088F  3404               	retlw	4
   778  0890  3400               	retlw	0
   779  0891  3407               	retlw	7
   780  0892  3400               	retlw	0
   781                           
   782                           ;initializer for _FMTX_Nprg
   783  0893  3408               	retlw	8
   784  0894  3400               	retlw	0
   785  0895  3407               	retlw	7
   786  0896  3400               	retlw	0
   787  0897  3403               	retlw	3
   788  0898  3400               	retlw	0
   789  0899  3400               	retlw	0
   790  089A  3400               	retlw	0
   791  089B  3400               	retlw	0
   792  089C  3400               	retlw	0
   793                           
   794                           	psect	idataBANK2
   795  086A                     __pidataBANK2:	
   796                           
   797                           ;initializer for _eDataField
   798  086A  3448               	retlw	72
   799  086B  3465               	retlw	101
   800  086C  346C               	retlw	108
   801  086D  346C               	retlw	108
   802  086E  346F               	retlw	111
   803  086F  3421               	retlw	33
   804  0870  3420               	retlw	32
   805  0871  3449               	retlw	73
   806  0872  3427               	retlw	39
   807  0873  346D               	retlw	109
   808  0874  3420               	retlw	32
   809  0875  344F               	retlw	79
   810  0876  3472               	retlw	114
   811  0877  3469               	retlw	105
   812  0878  3467               	retlw	103
   813  0879  3461               	retlw	97
   814  087A  346D               	retlw	109
   815  087B  3469               	retlw	105
   816  087C  3453               	retlw	83
   817  087D  3461               	retlw	97
   818  087E  3474               	retlw	116
   819  087F  3431               	retlw	49
   820  0880  3421               	retlw	33
   821  0881  3421               	retlw	33
   822  0882  3400               	retlw	0
   823                           
   824                           	psect	idataBANK3
   825  08BA                     __pidataBANK3:	
   826                           
   827                           ;initializer for main@F2006
   828  08BA  3408               	retlw	8
   829  08BB  3400               	retlw	0
   830  08BC  3407               	retlw	7
   831  08BD  3400               	retlw	0
   832  08BE  3403               	retlw	3
   833  08BF  3400               	retlw	0
   834  08C0  3400               	retlw	0
   835  08C1  3400               	retlw	0
   836  08C2  3400               	retlw	0
   837  08C3  3400               	retlw	0
   838                           
   839                           ;initializer for main@F2008
   840  08C4  3400               	retlw	0
   841  08C5  3400               	retlw	0
   842  08C6  3401               	retlw	1
   843  08C7  3400               	retlw	0
   844  08C8  3407               	retlw	7
   845  08C9  3400               	retlw	0
   846  08CA  3404               	retlw	4
   847  08CB  3400               	retlw	0
   848  08CC  3407               	retlw	7
   849  08CD  3400               	retlw	0
   850                           
   851                           ;initializer for main@F2010
   852  08CE  3402               	retlw	2
   853  08CF  3400               	retlw	0
   854  08D0  3404               	retlw	4
   855  08D1  3400               	retlw	0
   856  08D2  3408               	retlw	8
   857  08D3  3400               	retlw	0
   858  08D4  3408               	retlw	8
   859  08D5  3400               	retlw	0
   860  08D6  3407               	retlw	7
   861  08D7  3400               	retlw	0
   862                           
   863                           ;initializer for _FMRX_Nprg
   864  08D8  3402               	retlw	2
   865  08D9  3400               	retlw	0
   866  08DA  3404               	retlw	4
   867  08DB  3400               	retlw	0
   868  08DC  3408               	retlw	8
   869  08DD  3400               	retlw	0
   870  08DE  3408               	retlw	8
   871  08DF  3400               	retlw	0
   872  08E0  3407               	retlw	7
   873  08E1  3400               	retlw	0
   874                           
   875                           	psect	strings
   876  0800                     __pstrings:	
   877  0800                     stringtab:	
   878  0800                     __stringtab:	
   879  0800                     stringcode:	
   880                           ;	String table - string pointers are 1 byte each
   881                           
   882  0800                     stringdir:	
   883  0800  3008               	movlw	high stringdir
   884  0801  008A               	movwf	10
   885  0802  0804               	movf	4,w
   886  0803  0A84               	incf	4,f
   887  0804  0782               	addwf	2,f
   888  0805                     __stringbase:	
   889  0805  3400               	retlw	0
   890  0806                     __end_of__stringtab:	
   891  0806                     _commandSize:	
   892  0806  3420               	retlw	32
   893  0807  3400               	retlw	0
   894  0808                     __end_of_commandSize:	
   895  0005                     _PORTA	set	5
   896  0005                     _PORTAbits	set	5
   897  0006                     _PORTB	set	6
   898  0007                     _PORTC	set	7
   899  0007                     _PORTCbits	set	7
   900  0008                     _PORTD	set	8
   901  0008                     _PORTDbits	set	8
   902  0009                     _PORTE	set	9
   903  0009                     _PORTEbits	set	9
   904  001A                     _RCREG	set	26
   905  0013                     _SSPBUF	set	19
   906  0014                     _SSPCON	set	20
   907  0003                     _STATUS	set	3
   908  0019                     _TXREG	set	25
   909  00C4                     _CREN	set	196
   910  0029                     _RA1	set	41
   911  0032                     _RB2	set	50
   912  0034                     _RB4	set	52
   913  0035                     _RB5	set	53
   914  003A                     _RC2	set	58
   915  0065                     _RCIF	set	101
   916  00C6                     _RX9	set	198
   917  00C7                     _SPEN	set	199
   918  00C5                     _SREN	set	197
   919  0064                     _TXIF	set	100
   920  0099                     _SPBRG	set	153
   921  0093                     _SSPADD	set	147
   922  0091                     _SSPCON2	set	145
   923  0094                     _SSPSTAT	set	148
   924  0085                     _TRISA	set	133
   925  0086                     _TRISB	set	134
   926  0087                     _TRISC	set	135
   927  0088                     _TRISD	set	136
   928  0089                     _TRISE	set	137
   929  048D                     _ACKDT	set	1165
   930  048C                     _ACKEN	set	1164
   931  04C2                     _BRGH	set	1218
   932  048A                     _PEN	set	1162
   933  048B                     _RCEN	set	1163
   934  0465                     _RCIE	set	1125
   935  0489                     _RSEN	set	1161
   936  0488                     _SEN	set	1160
   937  04C4                     _SYNC	set	1220
   938  04C6                     _TX9	set	1222
   939  04C5                     _TXEN	set	1221
   940  0464                     _TXIE	set	1124
   941  0188                     _ANSEL	set	392
   942  0189                     _ANSELH	set	393
   943  0808                     STR_15:	
   944  0808  3473               	retlw	115	;'s'
   945  0809  3474               	retlw	116	;'t'
   946  080A  3461               	retlw	97	;'a'
   947  080B  3472               	retlw	114	;'r'
   948  080C  3474               	retlw	116	;'t'
   949  080D  340D               	retlw	13
   950  080E  340A               	retlw	10
   951  080F  3400               	retlw	0
   952  0810                     STR_7:	
   953  0810  344A               	retlw	74	;'J'
   954  0811  3451               	retlw	81	;'Q'
   955  0812  3431               	retlw	49	;'1'
   956  0813  345A               	retlw	90	;'Z'
   957  0814  3448               	retlw	72	;'H'
   958  0815  3458               	retlw	88	;'X'
   959  0816  3400               	retlw	0
   960  0817                     STR_1:	
   961  0817  344A               	retlw	74	;'J'
   962  0818  3451               	retlw	81	;'Q'
   963  0819  3431               	retlw	49	;'1'
   964  081A  3459               	retlw	89	;'Y'
   965  081B  3443               	retlw	67	;'C'
   966  081C  345A               	retlw	90	;'Z'
   967  081D  3400               	retlw	0
   968  081E                     STR_16:	
   969  081E  3425               	retlw	37	;'%'
   970  081F  3463               	retlw	99	;'c'
   971  0820  3400               	retlw	0
   972  0810                     
   973                           ; #config settings
   974  0000                     
   975                           	psect	cinit
   976  07B3                     start_initialization:	
   977  07B3                     __initialization:	
   978                           
   979                           ; Initialize objects allocated to BANK3
   980  07B3  1783               	bsf	3,7	;select IRP bank2
   981  07B4  30EA               	movlw	low (__pdataBANK3+40)
   982  07B5  00FD               	movwf	btemp+-1
   983  07B6  3008               	movlw	high __pidataBANK3
   984  07B7  00FE               	movwf	btemp
   985  07B8  30BA               	movlw	low __pidataBANK3
   986  07B9  00FF               	movwf	btemp+1
   987  07BA  30C2               	movlw	low __pdataBANK3
   988  07BB  0084               	movwf	4
   989  07BC  160A  118A  27F3  120A  118A  	fcall	init_ram0
   990                           
   991                           ; Initialize objects allocated to BANK2
   992  07C1  3069               	movlw	low (__pdataBANK2+25)
   993  07C2  00FD               	movwf	btemp+-1
   994  07C3  3008               	movlw	high __pidataBANK2
   995  07C4  00FE               	movwf	btemp
   996  07C5  306A               	movlw	low __pidataBANK2
   997  07C6  00FF               	movwf	btemp+1
   998  07C7  3050               	movlw	low __pdataBANK2
   999  07C8  0084               	movwf	4
  1000  07C9  160A  118A  27F3  120A  118A  	fcall	init_ram0
  1001                           
  1002                           ; Initialize objects allocated to BANK1
  1003  07CE  1383               	bcf	3,7	;select IRP bank0
  1004  07CF  30DC               	movlw	low (__pdataBANK1+26)
  1005  07D0  00FD               	movwf	btemp+-1
  1006  07D1  3008               	movlw	high __pidataBANK1
  1007  07D2  00FE               	movwf	btemp
  1008  07D3  3083               	movlw	low __pidataBANK1
  1009  07D4  00FF               	movwf	btemp+1
  1010  07D5  30C2               	movlw	low __pdataBANK1
  1011  07D6  0084               	movwf	4
  1012  07D7  160A  118A  27F3  120A  118A  	fcall	init_ram0
  1013                           
  1014                           ; Clear objects allocated to BANK3
  1015  07DC  1783               	bsf	3,7	;select IRP bank2
  1016  07DD  3090               	movlw	low __pbssBANK3
  1017  07DE  0084               	movwf	4
  1018  07DF  30C2               	movlw	low (__pbssBANK3+50)
  1019  07E0  160A  118A  27E7  120A  118A  	fcall	clear_ram0
  1020                           
  1021                           ; Clear objects allocated to BANK2
  1022  07E5  3010               	movlw	low __pbssBANK2
  1023  07E6  0084               	movwf	4
  1024  07E7  3050               	movlw	low (__pbssBANK2+64)
  1025  07E8  160A  118A  27E7  120A  118A  	fcall	clear_ram0
  1026                           
  1027                           ; Clear objects allocated to BANK1
  1028  07ED  1383               	bcf	3,7	;select IRP bank0
  1029  07EE  30DC               	movlw	low __pbssBANK1
  1030  07EF  0084               	movwf	4
  1031  07F0  30E9               	movlw	low (__pbssBANK1+13)
  1032  07F1  160A  118A  27E7  120A  118A  	fcall	clear_ram0
  1033                           
  1034                           ; Clear objects allocated to BANK0
  1035  07F6  3066               	movlw	low __pbssBANK0
  1036  07F7  0084               	movwf	4
  1037  07F8  3070               	movlw	low (__pbssBANK0+10)
  1038  07F9  160A  118A  27E7   	fcall	clear_ram0
  1039  07FC                     end_of_initialization:	
  1040                           ;End of C runtime variable initialization code
  1041                           
  1042  07FC                     __end_of__initialization:	
  1043  07FC  0183               	clrf	3
  1044  07FD  120A  158A  2E1F   	ljmp	_main	;jump to C main() function
  1045                           
  1046                           	psect	bssBANK0
  1047  0066                     __pbssBANK0:	
  1048  0066                     _dPacketnum:	
  1049  0066                     	ds	2
  1050  0068                     _eflag:	
  1051  0068                     	ds	2
  1052  006A                     _rcv_state:	
  1053  006A                     	ds	2
  1054  006C                     _dfcshi:	
  1055  006C                     	ds	1
  1056  006D                     _dfcslo:	
  1057  006D                     	ds	1
  1058  006E                     _efcshi:	
  1059  006E                     	ds	1
  1060  006F                     _efcslo:	
  1061  006F                     	ds	1
  1062                           
  1063                           	psect	bssBANK1
  1064  00DC                     __pbssBANK1:	
  1065  00DC                     _ePacket:	
  1066  00DC                     	ds	5
  1067  00E1                     _ebitstatus:	
  1068  00E1                     	ds	2
  1069  00E3                     _efcsflag:	
  1070  00E3                     	ds	2
  1071  00E5                     _estuff:	
  1072  00E5                     	ds	2
  1073  00E7                     getbit@oldbit:	
  1074  00E7                     	ds	2
  1075                           
  1076                           	psect	dataBANK1
  1077  00C2                     __pdataBANK1:	
  1078  00C2                     _CWTX_Nref:	
  1079  00C2                     	ds	2
  1080  00C4                     _FMRX_Nref:	
  1081  00C4                     	ds	2
  1082  00C6                     _FMTX_Nref:	
  1083  00C6                     	ds	2
  1084  00C8                     _CWTX_Nprg:	
  1085  00C8                     	ds	10
  1086  00D2                     _FMTX_Nprg:	
  1087  00D2                     	ds	10
  1088                           
  1089                           	psect	bssBANK3
  1090  0190                     __pbssBANK3:	
  1091  0190                     _dPacket:	
  1092  0190                     	ds	50
  1093                           
  1094                           	psect	dataBANK3
  1095  01C2                     __pdataBANK3:	
  1096  01C2                     main@F2006:	
  1097  01C2                     	ds	10
  1098  01CC                     main@F2008:	
  1099  01CC                     	ds	10
  1100  01D6                     main@F2010:	
  1101  01D6                     	ds	10
  1102  01E0                     _FMRX_Nprg:	
  1103  01E0                     	ds	10
  1104                           
  1105                           	psect	bssBANK2
  1106  0110                     __pbssBANK2:	
  1107  0110                     _EEPROMData:	
  1108  0110                     	ds	32
  1109  0130                     _dData:	
  1110  0130                     	ds	32
  1111                           
  1112                           	psect	dataBANK2
  1113  0150                     __pdataBANK2:	
  1114  0150                     _eDataField:	
  1115  0150                     	ds	25
  1116                           
  1117                           	psect	inittext
  1118  17EF                     init_fetch0:	
  1119                           ;	Called with low address in FSR and high address in W
  1120                           
  1121  17EF  087E               	movf	126,w
  1122  17F0  008A               	movwf	10
  1123  17F1  087F               	movf	127,w
  1124  17F2  0082               	movwf	2
  1125  17F3                     init_ram0:	
  1126                           ;Called with:
  1127                           ;	high address of idata address in btemp 
  1128                           ;	low address of idata address in btemp+1 
  1129                           ;	low address of data in FSR
  1130                           ;	high address + 1 of data in btemp-1
  1131                           
  1132  17F3  27EF  160A  118A   	fcall	init_fetch0
  1133  17F6  0080               	movwf	0
  1134  17F7  0A84               	incf	4,f
  1135  17F8  0804               	movf	4,w
  1136  17F9  067D               	xorwf	125,w
  1137  17FA  1903               	btfsc	3,2
  1138  17FB  3400               	retlw	0
  1139  17FC  0AFF               	incf	127,f
  1140  17FD  1903               	btfsc	3,2
  1141  17FE  0AFE               	incf	126,f
  1142  17FF  2FF3               	goto	init_ram0
  1143                           
  1144                           	psect	clrtext
  1145  17E7                     clear_ram0:	
  1146                           ;	Called with FSR containing the base address, and
  1147                           ;	W with the last address+1
  1148                           
  1149  17E7  0064               	clrwdt	;clear the watchdog before getting into this loop
  1150  17E8                     clrloop0:	
  1151  17E8  0180               	clrf	0	;clear RAM location pointed to by FSR
  1152  17E9  0A84               	incf	4,f	;increment pointer
  1153  17EA  0604               	xorwf	4,w	;XOR with final address
  1154  17EB  1903               	btfsc	3,2	;have we reached the end yet?
  1155  17EC  3400               	retlw	0	;all done for this memory range, return
  1156  17ED  0604               	xorwf	4,w	;XOR again to restore value
  1157  17EE  2FE8               	goto	clrloop0	;do the next byte
  1158                           
  1159                           	psect	cstackBANK1
  1160  00A0                     __pcstackBANK1:	
  1161  00A0                     main@FMTX_Nprg:	
  1162                           
  1163                           ; 10 bytes @ 0x0
  1164  00A0                     	ds	10
  1165  00AA                     main@CWTX_Nprg:	
  1166                           
  1167                           ; 10 bytes @ 0xA
  1168  00AA                     	ds	10
  1169  00B4                     main@FMRX_Nprg:	
  1170                           
  1171                           ; 10 bytes @ 0x14
  1172  00B4                     	ds	10
  1173  00BE                     main@NM_wad_header:	
  1174                           
  1175                           ; 1 bytes @ 0x1E
  1176  00BE                     	ds	1
  1177  00BF                     main@i:	
  1178                           
  1179                           ; 2 bytes @ 0x1F
  1180  00BF                     	ds	2
  1181  00C1                     main@dData:	
  1182                           
  1183                           ; 1 bytes @ 0x21
  1184  00C1                     	ds	1
  1185                           
  1186                           	psect	cstackCOMMON
  1187  0070                     __pcstackCOMMON:	
  1188  0070                     ?_Reset_EPS:	
  1189  0070                     ??_Reset_EPS:	
  1190                           ; 1 bytes @ 0x0
  1191                           
  1192  0070                     ?__NOP:	
  1193                           ; 1 bytes @ 0x0
  1194                           
  1195  0070                     ??__NOP:	
  1196                           ; 1 bytes @ 0x0
  1197                           
  1198  0070                     ?_Init_SERIAL:	
  1199                           ; 1 bytes @ 0x0
  1200                           
  1201  0070                     ??_Init_SERIAL:	
  1202                           ; 1 bytes @ 0x0
  1203                           
  1204  0070                     ?_putch:	
  1205                           ; 1 bytes @ 0x0
  1206                           
  1207  0070                     ??_putch:	
  1208                           ; 1 bytes @ 0x0
  1209                           
  1210  0070                     ?_Init_MPU:	
  1211                           ; 1 bytes @ 0x0
  1212                           
  1213  0070                     ??_Init_MPU:	
  1214                           ; 1 bytes @ 0x0
  1215                           
  1216  0070                     ?_waitFlag:	
  1217                           ; 1 bytes @ 0x0
  1218                           
  1219  0070                     ?_getdata:	
  1220                           ; 1 bytes @ 0x0
  1221                           
  1222  0070                     ?_ReceivePacket_data:	
  1223                           ; 1 bytes @ 0x0
  1224                           
  1225  0070                     ?_main:	
  1226                           ; 1 bytes @ 0x0
  1227                           
  1228  0070                     ?_I2C_Master_Wait:	
  1229                           ; 1 bytes @ 0x0
  1230                           
  1231  0070                     ??_I2C_Master_Wait:	
  1232                           ; 1 bytes @ 0x0
  1233                           
  1234  0070                     ?_I2C_Master_Start:	
  1235                           ; 1 bytes @ 0x0
  1236                           
  1237  0070                     ??_I2C_Master_Start:	
  1238                           ; 1 bytes @ 0x0
  1239                           
  1240  0070                     ?_I2C_Master_Stop:	
  1241                           ; 1 bytes @ 0x0
  1242                           
  1243  0070                     ??_I2C_Master_Stop:	
  1244                           ; 1 bytes @ 0x0
  1245                           
  1246  0070                     ?_I2C_Master_Write:	
  1247                           ; 1 bytes @ 0x0
  1248                           
  1249  0070                     ?_getbit:	
  1250                           ; 1 bytes @ 0x0
  1251                           
  1252  0070                     ?_fcscheck:	
  1253                           ; 2 bytes @ 0x0
  1254                           
  1255  0070                     ?___awdiv:	
  1256                           ; 2 bytes @ 0x0
  1257                           
  1258  0070                     ?___lldiv:	
  1259                           ; 2 bytes @ 0x0
  1260                           
  1261  0070                     putch@byte:	
  1262                           ; 4 bytes @ 0x0
  1263                           
  1264  0070                     I2C_Master_Write@d:	
  1265                           ; 1 bytes @ 0x0
  1266                           
  1267  0070                     __NOP@i:	
  1268                           ; 2 bytes @ 0x0
  1269                           
  1270  0070                     ___awdiv@divisor:	
  1271                           ; 2 bytes @ 0x0
  1272                           
  1273  0070                     ___lldiv@divisor:	
  1274                           ; 2 bytes @ 0x0
  1275                           
  1276                           
  1277                           ; 4 bytes @ 0x0
  1278  0070                     	ds	1
  1279  0071                     ?_NM_waddress:	
  1280  0071                     ?_printf:	
  1281                           ; 1 bytes @ 0x1
  1282                           
  1283  0071                     NM_waddress@whigh_address:	
  1284                           ; 2 bytes @ 0x1
  1285                           
  1286                           
  1287                           ; 1 bytes @ 0x1
  1288  0071                     	ds	1
  1289  0072                     ?_EEPROM_Write:	
  1290  0072                     ??_getbit:	
  1291                           ; 1 bytes @ 0x2
  1292                           
  1293  0072                     ??_fcscheck:	
  1294                           ; 1 bytes @ 0x2
  1295                           
  1296  0072                     ??_I2C_Master_Write:	
  1297                           ; 1 bytes @ 0x2
  1298                           
  1299  0072                     ?_L_OUT:	
  1300                           ; 1 bytes @ 0x2
  1301                           
  1302  0072                     ?_H_OUT:	
  1303                           ; 1 bytes @ 0x2
  1304                           
  1305  0072                     ?_STBOUT:	
  1306                           ; 1 bytes @ 0x2
  1307                           
  1308  0072                     NM_waddress@wlow_address:	
  1309                           ; 1 bytes @ 0x2
  1310                           
  1311  0072                     EEPROM_Write@high_address:	
  1312                           ; 1 bytes @ 0x2
  1313                           
  1314  0072                     L_OUT@fmcwtxrx:	
  1315                           ; 1 bytes @ 0x2
  1316                           
  1317  0072                     H_OUT@fmcwtxrx:	
  1318                           ; 2 bytes @ 0x2
  1319                           
  1320  0072                     STBOUT@fmcwtxrx:	
  1321                           ; 2 bytes @ 0x2
  1322                           
  1323  0072                     ___awdiv@dividend:	
  1324                           ; 2 bytes @ 0x2
  1325                           
  1326                           
  1327                           ; 2 bytes @ 0x2
  1328  0072                     	ds	1
  1329  0073                     ??_printf:	
  1330  0073                     ??_NM_waddress:	
  1331                           ; 1 bytes @ 0x3
  1332                           
  1333  0073                     NM_waddress@NM_wad_header:	
  1334                           ; 1 bytes @ 0x3
  1335                           
  1336  0073                     EEPROM_Write@low_address:	
  1337                           ; 1 bytes @ 0x3
  1338                           
  1339                           
  1340                           ; 1 bytes @ 0x3
  1341  0073                     	ds	1
  1342  0074                     ??_L_OUT:	
  1343  0074                     ??_H_OUT:	
  1344                           ; 1 bytes @ 0x4
  1345                           
  1346  0074                     ??_STBOUT:	
  1347                           ; 1 bytes @ 0x4
  1348                           
  1349  0074                     ?_OPINIT:	
  1350                           ; 1 bytes @ 0x4
  1351                           
  1352  0074                     ??___awdiv:	
  1353                           ; 1 bytes @ 0x4
  1354                           
  1355  0074                     fcscheck@bt:	
  1356                           ; 1 bytes @ 0x4
  1357                           
  1358  0074                     EEPROM_Write@data:	
  1359                           ; 1 bytes @ 0x4
  1360                           
  1361  0074                     printf@flag:	
  1362                           ; 1 bytes @ 0x4
  1363                           
  1364  0074                     getbit@i:	
  1365                           ; 1 bytes @ 0x4
  1366                           
  1367  0074                     OPINIT@fmcwtxrx:	
  1368                           ; 2 bytes @ 0x4
  1369                           
  1370  0074                     ___lldiv@dividend:	
  1371                           ; 2 bytes @ 0x4
  1372                           
  1373                           
  1374                           ; 4 bytes @ 0x4
  1375  0074                     	ds	1
  1376  0075                     ??_EEPROM_Write:	
  1377  0075                     printf@ap:	
  1378                           ; 1 bytes @ 0x5
  1379                           
  1380  0075                     ___awdiv@counter:	
  1381                           ; 1 bytes @ 0x5
  1382                           
  1383  0075                     fcscheck@i:	
  1384                           ; 1 bytes @ 0x5
  1385                           
  1386                           
  1387                           ; 2 bytes @ 0x5
  1388  0075                     	ds	1
  1389  0076                     ??_waitFlag:	
  1390  0076                     ??_getdata:	
  1391                           ; 1 bytes @ 0x6
  1392                           
  1393  0076                     ??_OPINIT:	
  1394                           ; 1 bytes @ 0x6
  1395                           
  1396  0076                     printf@f:	
  1397                           ; 1 bytes @ 0x6
  1398                           
  1399  0076                     ___awdiv@sign:	
  1400                           ; 1 bytes @ 0x6
  1401                           
  1402                           
  1403                           ; 1 bytes @ 0x6
  1404  0076                     	ds	1
  1405  0077                     printf@c:	
  1406  0077                     fcscheck@i_136:	
  1407                           ; 1 bytes @ 0x7
  1408                           
  1409  0077                     ___awdiv@quotient:	
  1410                           ; 2 bytes @ 0x7
  1411                           
  1412                           
  1413                           ; 2 bytes @ 0x7
  1414  0077                     	ds	1
  1415  0078                     ??___lldiv:	
  1416  0078                     EEPROM_Write@EEPROM_address:	
  1417                           ; 1 bytes @ 0x8
  1418                           
  1419                           
  1420                           ; 1 bytes @ 0x8
  1421  0078                     	ds	1
  1422  0079                     ?_OUTFQ:	
  1423  0079                     ?_RFDOUT:	
  1424                           ; 1 bytes @ 0x9
  1425                           
  1426  0079                     fcscheck@byte:	
  1427                           ; 1 bytes @ 0x9
  1428                           
  1429  0079                     EEPROM_Write@Address:	
  1430                           ; 1 bytes @ 0x9
  1431                           
  1432  0079                     OUTFQ@fmcwtxrx:	
  1433                           ; 1 bytes @ 0x9
  1434                           
  1435  0079                     RFDOUT@fmcwtxrx:	
  1436                           ; 2 bytes @ 0x9
  1437                           
  1438  0079                     ___lldiv@quotient:	
  1439                           ; 2 bytes @ 0x9
  1440                           
  1441                           
  1442                           ; 4 bytes @ 0x9
  1443  0079                     	ds	1
  1444  007A                     ??_ReceivePacket_data:	
  1445                           
  1446                           ; 1 bytes @ 0xA
  1447  007A                     	ds	1
  1448  007B                     OUTFQ@Nprg:	
  1449  007B                     RFDOUT@Nref:	
  1450                           ; 2 bytes @ 0xB
  1451                           
  1452                           
  1453                           ; 2 bytes @ 0xB
  1454  007B                     	ds	2
  1455  007D                     ??_FMTX:	
  1456  007D                     ??_CWTX:	
  1457                           ; 1 bytes @ 0xD
  1458                           
  1459  007D                     ??_FMRX:	
  1460                           ; 1 bytes @ 0xD
  1461                           
  1462  007D                     ___lldiv@counter:	
  1463                           ; 1 bytes @ 0xD
  1464                           
  1465                           
  1466                           ; 1 bytes @ 0xD
  1467  007D                     	ds	1
  1468                           
  1469                           	psect	cstackBANK0
  1470  0020                     __pcstackBANK0:	
  1471  0020                     ?_Init_I2C_M:	
  1472  0020                     ??_OUTFQ:	
  1473                           ; 1 bytes @ 0x0
  1474                           
  1475  0020                     ??_RFDOUT:	
  1476                           ; 1 bytes @ 0x0
  1477                           
  1478  0020                     waitFlag@i:	
  1479                           ; 1 bytes @ 0x0
  1480                           
  1481  0020                     getdata@bufstore_counter:	
  1482                           ; 2 bytes @ 0x0
  1483                           
  1484  0020                     Init_I2C_M@c:	
  1485                           ; 2 bytes @ 0x0
  1486                           
  1487                           
  1488                           ; 4 bytes @ 0x0
  1489  0020                     	ds	2
  1490  0022                     waitFlag@j:	
  1491  0022                     getdata@dstuff:	
  1492                           ; 2 bytes @ 0x2
  1493                           
  1494                           
  1495                           ; 2 bytes @ 0x2
  1496  0022                     	ds	1
  1497  0023                     RFDOUT@Nref_b:	
  1498                           
  1499                           ; 24 bytes @ 0x3
  1500  0023                     	ds	1
  1501  0024                     ??_Init_I2C_M:	
  1502  0024                     waitFlag@j_105:	
  1503                           ; 1 bytes @ 0x4
  1504                           
  1505  0024                     getdata@dbitstatus:	
  1506                           ; 2 bytes @ 0x4
  1507                           
  1508                           
  1509                           ; 2 bytes @ 0x4
  1510  0024                     	ds	2
  1511  0026                     getdata@buf:	
  1512  0026                     waitFlag@j_107:	
  1513                           ; 1 bytes @ 0x6
  1514                           
  1515                           
  1516                           ; 2 bytes @ 0x6
  1517  0026                     	ds	2
  1518  0028                     waitFlag@j_109:	
  1519                           
  1520                           ; 2 bytes @ 0x8
  1521  0028                     	ds	2
  1522  002A                     waitFlag@j_111:	
  1523                           
  1524                           ; 2 bytes @ 0xA
  1525  002A                     	ds	2
  1526  002C                     waitFlag@j_113:	
  1527                           
  1528                           ; 2 bytes @ 0xC
  1529  002C                     	ds	2
  1530  002E                     waitFlag@j_114:	
  1531                           
  1532                           ; 2 bytes @ 0xE
  1533  002E                     	ds	2
  1534  0030                     waitFlag@j_116:	
  1535  0030                     OUTFQ@Nprg_b:	
  1536                           ; 2 bytes @ 0x10
  1537                           
  1538                           
  1539                           ; 34 bytes @ 0x10
  1540  0030                     	ds	2
  1541  0032                     waitFlag@j_118:	
  1542                           
  1543                           ; 2 bytes @ 0x12
  1544  0032                     	ds	2
  1545  0034                     waitFlag@j_120:	
  1546                           
  1547                           ; 2 bytes @ 0x14
  1548  0034                     	ds	2
  1549  0036                     waitFlag@j_122:	
  1550                           
  1551                           ; 2 bytes @ 0x16
  1552  0036                     	ds	2
  1553  0038                     waitFlag@j_124:	
  1554                           
  1555                           ; 2 bytes @ 0x18
  1556  0038                     	ds	2
  1557  003A                     waitFlag@flag_judge:	
  1558                           
  1559                           ; 2 bytes @ 0x1A
  1560  003A                     	ds	1
  1561  003B                     RFDOUT@i_470:	
  1562                           
  1563                           ; 2 bytes @ 0x1B
  1564  003B                     	ds	1
  1565  003C                     waitFlag@buf:	
  1566                           
  1567                           ; 1 bytes @ 0x1C
  1568  003C                     	ds	1
  1569  003D                     ReceivePacket_data@fcschecker:	
  1570  003D                     RFDOUT@i:	
  1571                           ; 2 bytes @ 0x1D
  1572                           
  1573                           
  1574                           ; 2 bytes @ 0x1D
  1575  003D                     	ds	2
  1576  003F                     ReceivePacket_data@i:	
  1577  003F                     RFDOUT@i_471:	
  1578                           ; 2 bytes @ 0x1F
  1579                           
  1580                           
  1581                           ; 2 bytes @ 0x1F
  1582  003F                     	ds	19
  1583  0052                     OUTFQ@i_459:	
  1584                           
  1585                           ; 2 bytes @ 0x32
  1586  0052                     	ds	2
  1587  0054                     OUTFQ@count:	
  1588                           
  1589                           ; 2 bytes @ 0x34
  1590  0054                     	ds	2
  1591  0056                     OUTFQ@i:	
  1592                           
  1593                           ; 2 bytes @ 0x36
  1594  0056                     	ds	2
  1595  0058                     OUTFQ@i_461:	
  1596                           
  1597                           ; 2 bytes @ 0x38
  1598  0058                     	ds	2
  1599  005A                     OUTFQ@j:	
  1600                           
  1601                           ; 2 bytes @ 0x3A
  1602  005A                     	ds	2
  1603  005C                     ?_FMTX:	
  1604  005C                     ?_CWTX:	
  1605                           ; 1 bytes @ 0x3C
  1606                           
  1607  005C                     ?_FMRX:	
  1608                           ; 1 bytes @ 0x3C
  1609                           
  1610  005C                     FMTX@Nref:	
  1611                           ; 1 bytes @ 0x3C
  1612                           
  1613  005C                     CWTX@Nref:	
  1614                           ; 2 bytes @ 0x3C
  1615                           
  1616  005C                     FMRX@Nref:	
  1617                           ; 2 bytes @ 0x3C
  1618                           
  1619                           
  1620                           ; 2 bytes @ 0x3C
  1621  005C                     	ds	2
  1622  005E                     FMTX@Nprg:	
  1623  005E                     CWTX@Nprg:	
  1624                           ; 2 bytes @ 0x3E
  1625                           
  1626  005E                     FMRX@Nprg:	
  1627                           ; 2 bytes @ 0x3E
  1628                           
  1629                           
  1630                           ; 2 bytes @ 0x3E
  1631  005E                     	ds	2
  1632  0060                     FMTX@fmtx:	
  1633  0060                     CWTX@cwtx:	
  1634                           ; 2 bytes @ 0x40
  1635                           
  1636  0060                     FMRX@fmrx:	
  1637                           ; 2 bytes @ 0x40
  1638                           
  1639                           
  1640                           ; 2 bytes @ 0x40
  1641  0060                     	ds	2
  1642  0062                     ??_main:	
  1643                           
  1644                           ; 1 bytes @ 0x42
  1645  0062                     	ds	4
  1646                           
  1647                           	psect	maintext
  1648  0E1F                     __pmaintext:	
  1649 ;;
  1650 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1651 ;;
  1652 ;; *************** function _main *****************
  1653 ;; Defined at:
  1654 ;;		line 38 in file "main.c"
  1655 ;; Parameters:    Size  Location     Type
  1656 ;;		None
  1657 ;; Auto vars:     Size  Location     Type
  1658 ;;  FMRX_Nprg      10   20[BANK1 ] int [5]
  1659 ;;  CWTX_Nprg      10   10[BANK1 ] int [5]
  1660 ;;  FMTX_Nprg      10    0[BANK1 ] int [5]
  1661 ;;  NM_wad_heade    1   30[BANK1 ] unsigned char 
  1662 ;;  i               2   31[BANK1 ] unsigned int 
  1663 ;;  dData           1   33[BANK1 ] PTR unsigned char 
  1664 ;;		 -> NULL(0), dData(32), 
  1665 ;; Return value:  Size  Location     Type
  1666 ;;                  1    wreg      void 
  1667 ;; Registers used:
  1668 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1669 ;; Tracked objects:
  1670 ;;		On entry : B00/0
  1671 ;;		On exit  : 0/0
  1672 ;;		Unchanged: 0/0
  1673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1674 ;;      Params:         0       0       0       0       0
  1675 ;;      Locals:         0       0      34       0       0
  1676 ;;      Temps:          0       4       0       0       0
  1677 ;;      Totals:         0       4      34       0       0
  1678 ;;Total ram usage:       38 bytes
  1679 ;; Hardware stack levels required when called:    4
  1680 ;; This function calls:
  1681 ;;		_CWTX
  1682 ;;		_EEPROM_Write
  1683 ;;		_FMRX
  1684 ;;		_FMTX
  1685 ;;		_Init_I2C_M
  1686 ;;		_Init_MPU
  1687 ;;		_Init_SERIAL
  1688 ;;		_NM_waddress
  1689 ;;		_ReceivePacket_data
  1690 ;;		_Reset_EPS
  1691 ;;		_printf
  1692 ;; This function is called by:
  1693 ;;		Startup code after reset
  1694 ;; This function uses a non-reentrant model
  1695 ;;
  1696                           
  1697                           
  1698                           ;psect for function _main
  1699  0E1F                     _main:	
  1700                           
  1701                           ;main.c: 43: _delay((unsigned long)((500)*(10000000/4000.0)));
  1702                           
  1703                           ;incstack = 0
  1704                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1705  0E1F  3007               	movlw	7
  1706  0E20  1283               	bcf	3,5	;RP0=0, select bank0
  1707  0E21  1303               	bcf	3,6	;RP1=0, select bank0
  1708  0E22  00E4               	movwf	??_main+2
  1709  0E23  3058               	movlw	88
  1710  0E24  00E3               	movwf	??_main+1
  1711  0E25  305E               	movlw	94
  1712  0E26  00E2               	movwf	??_main
  1713  0E27                     u3607:	
  1714  0E27  0BE2               	decfsz	??_main,f
  1715  0E28  2E27               	goto	u3607
  1716  0E29  0BE3               	decfsz	??_main+1,f
  1717  0E2A  2E27               	goto	u3607
  1718  0E2B  0BE4               	decfsz	??_main+2,f
  1719  0E2C  2E27               	goto	u3607
  1720  0E2D  2E2E               	nop2
  1721                           
  1722                           ;main.c: 45: Init_SERIAL();
  1723  0E2E  120A  158A  2051  120A  158A  	fcall	_Init_SERIAL
  1724                           
  1725                           ;main.c: 46: Init_MPU();
  1726  0E33  120A  158A  209D  120A  158A  	fcall	_Init_MPU
  1727                           
  1728                           ;main.c: 47: Init_I2C_M(400000);
  1729  0E38  3000               	movlw	0
  1730  0E39  1283               	bcf	3,5	;RP0=0, select bank0
  1731  0E3A  1303               	bcf	3,6	;RP1=0, select bank0
  1732  0E3B  00A3               	movwf	Init_I2C_M@c+3
  1733  0E3C  3006               	movlw	6
  1734  0E3D  00A2               	movwf	Init_I2C_M@c+2
  1735  0E3E  301A               	movlw	26
  1736  0E3F  00A1               	movwf	Init_I2C_M@c+1
  1737  0E40  3080               	movlw	128
  1738  0E41  00A0               	movwf	Init_I2C_M@c
  1739  0E42  120A  158A  2194  120A  158A  	fcall	_Init_I2C_M
  1740                           
  1741                           ;main.c: 52: RB2 = 1;
  1742  0E47  1283               	bcf	3,5	;RP0=0, select bank0
  1743  0E48  1303               	bcf	3,6	;RP1=0, select bank0
  1744  0E49  1506               	bsf	6,2	;volatile
  1745                           
  1746                           ;main.c: 53: _delay((unsigned long)((500)*(10000000/4000.0)));
  1747  0E4A  3007               	movlw	7
  1748  0E4B  00E4               	movwf	??_main+2
  1749  0E4C  3058               	movlw	88
  1750  0E4D  00E3               	movwf	??_main+1
  1751  0E4E  305E               	movlw	94
  1752  0E4F  00E2               	movwf	??_main
  1753  0E50                     u3617:	
  1754  0E50  0BE2               	decfsz	??_main,f
  1755  0E51  2E50               	goto	u3617
  1756  0E52  0BE3               	decfsz	??_main+1,f
  1757  0E53  2E50               	goto	u3617
  1758  0E54  0BE4               	decfsz	??_main+2,f
  1759  0E55  2E50               	goto	u3617
  1760  0E56  2E57               	nop2
  1761                           
  1762                           ;main.c: 55: FMTX(FMTX_Nref, FMTX_Nprg);
  1763  0E57  1683               	bsf	3,5	;RP0=1, select bank1
  1764  0E58  1303               	bcf	3,6	;RP1=0, select bank1
  1765  0E59  0847               	movf	(_FMTX_Nref+1)^(0+128),w
  1766  0E5A  1283               	bcf	3,5	;RP0=0, select bank0
  1767  0E5B  1303               	bcf	3,6	;RP1=0, select bank0
  1768  0E5C  00DD               	movwf	FMTX@Nref+1
  1769  0E5D  1683               	bsf	3,5	;RP0=1, select bank1
  1770  0E5E  1303               	bcf	3,6	;RP1=0, select bank1
  1771  0E5F  0846               	movf	_FMTX_Nref^(0+128),w
  1772  0E60  1283               	bcf	3,5	;RP0=0, select bank0
  1773  0E61  1303               	bcf	3,6	;RP1=0, select bank0
  1774  0E62  00DC               	movwf	FMTX@Nref
  1775  0E63  30D2               	movlw	(low (_FMTX_Nprg| 0))& (0+255)
  1776  0E64  00DE               	movwf	FMTX@Nprg
  1777  0E65  3000               	movlw	0
  1778  0E66  00DF               	movwf	FMTX@Nprg+1
  1779  0E67  120A  158A  213A  120A  158A  	fcall	_FMTX
  1780                           
  1781                           ;main.c: 56: CWTX(CWTX_Nref, CWTX_Nprg);
  1782  0E6C  1683               	bsf	3,5	;RP0=1, select bank1
  1783  0E6D  1303               	bcf	3,6	;RP1=0, select bank1
  1784  0E6E  0843               	movf	(_CWTX_Nref+1)^(0+128),w
  1785  0E6F  1283               	bcf	3,5	;RP0=0, select bank0
  1786  0E70  1303               	bcf	3,6	;RP1=0, select bank0
  1787  0E71  00DD               	movwf	CWTX@Nref+1
  1788  0E72  1683               	bsf	3,5	;RP0=1, select bank1
  1789  0E73  1303               	bcf	3,6	;RP1=0, select bank1
  1790  0E74  0842               	movf	_CWTX_Nref^(0+128),w
  1791  0E75  1283               	bcf	3,5	;RP0=0, select bank0
  1792  0E76  1303               	bcf	3,6	;RP1=0, select bank0
  1793  0E77  00DC               	movwf	CWTX@Nref
  1794  0E78  30C8               	movlw	(low (_CWTX_Nprg| 0))& (0+255)
  1795  0E79  00DE               	movwf	CWTX@Nprg
  1796  0E7A  3000               	movlw	0
  1797  0E7B  00DF               	movwf	CWTX@Nprg+1
  1798  0E7C  120A  158A  20E2  120A  158A  	fcall	_CWTX
  1799                           
  1800                           ;main.c: 57: FMRX(FMRX_Nref, FMRX_Nprg);
  1801  0E81  1683               	bsf	3,5	;RP0=1, select bank1
  1802  0E82  1303               	bcf	3,6	;RP1=0, select bank1
  1803  0E83  0845               	movf	(_FMRX_Nref+1)^(0+128),w
  1804  0E84  1283               	bcf	3,5	;RP0=0, select bank0
  1805  0E85  1303               	bcf	3,6	;RP1=0, select bank0
  1806  0E86  00DD               	movwf	FMRX@Nref+1
  1807  0E87  1683               	bsf	3,5	;RP0=1, select bank1
  1808  0E88  1303               	bcf	3,6	;RP1=0, select bank1
  1809  0E89  0844               	movf	_FMRX_Nref^(0+128),w
  1810  0E8A  1283               	bcf	3,5	;RP0=0, select bank0
  1811  0E8B  1303               	bcf	3,6	;RP1=0, select bank0
  1812  0E8C  00DC               	movwf	FMRX@Nref
  1813  0E8D  30E0               	movlw	(low (_FMRX_Nprg| (0+256)))& (0+255)
  1814  0E8E  00DE               	movwf	FMRX@Nprg
  1815  0E8F  3001               	movlw	1
  1816  0E90  00DF               	movwf	FMRX@Nprg+1
  1817  0E91  120A  158A  210E  120A  158A  	fcall	_FMRX
  1818                           
  1819                           ;main.c: 58: RB2 = 0;
  1820  0E96  1283               	bcf	3,5	;RP0=0, select bank0
  1821  0E97  1303               	bcf	3,6	;RP1=0, select bank0
  1822  0E98  1106               	bcf	6,2	;volatile
  1823                           
  1824                           ;main.c: 59: printf("start\r\n");
  1825  0E99  3003               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1826  0E9A  120A  158A  2254  120A  158A  	fcall	_printf
  1827  0E9F                     l3765:	
  1828                           ;main.c: 60: while(1){
  1829                           
  1830                           
  1831                           ;main.c: 74: UBYTE *dData;
  1832                           ;main.c: 75: dData = ReceivePacket_data();
  1833  0E9F  120A  158A  245C  120A  158A  	fcall	_ReceivePacket_data
  1834  0EA4  1283               	bcf	3,5	;RP0=0, select bank0
  1835  0EA5  1303               	bcf	3,6	;RP1=0, select bank0
  1836  0EA6  00E2               	movwf	??_main
  1837  0EA7  0862               	movf	??_main,w
  1838  0EA8  1683               	bsf	3,5	;RP0=1, select bank1
  1839  0EA9  1303               	bcf	3,6	;RP1=0, select bank1
  1840  0EAA  00C1               	movwf	main@dData^(0+128)
  1841                           
  1842                           ;main.c: 81: EEPROM_Write(0x50,0x00,0x00,dData);
  1843  0EAB  01F2               	clrf	EEPROM_Write@high_address
  1844  0EAC  01F3               	clrf	EEPROM_Write@low_address
  1845  0EAD  0841               	movf	main@dData^(0+128),w
  1846  0EAE  1283               	bcf	3,5	;RP0=0, select bank0
  1847  0EAF  1303               	bcf	3,6	;RP1=0, select bank0
  1848  0EB0  00E2               	movwf	??_main
  1849  0EB1  0862               	movf	??_main,w
  1850  0EB2  00F4               	movwf	EEPROM_Write@data
  1851  0EB3  3050               	movlw	80
  1852  0EB4  120A  158A  2340  120A  158A  	fcall	_EEPROM_Write
  1853                           
  1854                           ;main.c: 83: for (UINT i = 0;i < 32;i++){
  1855  0EB9  1683               	bsf	3,5	;RP0=1, select bank1
  1856  0EBA  1303               	bcf	3,6	;RP1=0, select bank1
  1857  0EBB  01BF               	clrf	main@i^(0+128)
  1858  0EBC  01C0               	clrf	(main@i+1)^(0+128)
  1859  0EBD  3000               	movlw	0
  1860  0EBE  0240               	subwf	(main@i+1)^(0+128),w
  1861  0EBF  3020               	movlw	32
  1862  0EC0  1903               	skipnz
  1863  0EC1  023F               	subwf	main@i^(0+128),w
  1864  0EC2  1803               	btfsc	3,0
  1865  0EC3  2EF3               	goto	l3783
  1866  0EC4                     l3775:	
  1867                           
  1868                           ;main.c: 84: printf("%c", dData[i]);
  1869  0EC4  083F               	movf	main@i^(0+128),w
  1870  0EC5  0741               	addwf	main@dData^(0+128),w
  1871  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  1872  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  1873  0EC8  00E2               	movwf	??_main
  1874  0EC9  0862               	movf	??_main,w
  1875  0ECA  0084               	movwf	4
  1876  0ECB  1783               	bsf	3,7	;select IRP bank2
  1877  0ECC  0800               	movf	0,w
  1878  0ECD  00E3               	movwf	??_main+1
  1879  0ECE  01E4               	clrf	??_main+2
  1880  0ECF  0863               	movf	??_main+1,w
  1881  0ED0  00F1               	movwf	?_printf
  1882  0ED1  0864               	movf	??_main+2,w
  1883  0ED2  00F2               	movwf	?_printf+1
  1884  0ED3  3019               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  1885  0ED4  120A  158A  2254  120A  158A  	fcall	_printf
  1886                           
  1887                           ;main.c: 85: dData[i] = 0x00;
  1888  0ED9  1683               	bsf	3,5	;RP0=1, select bank1
  1889  0EDA  1303               	bcf	3,6	;RP1=0, select bank1
  1890  0EDB  083F               	movf	main@i^(0+128),w
  1891  0EDC  0741               	addwf	main@dData^(0+128),w
  1892  0EDD  1283               	bcf	3,5	;RP0=0, select bank0
  1893  0EDE  1303               	bcf	3,6	;RP1=0, select bank0
  1894  0EDF  00E2               	movwf	??_main
  1895  0EE0  0862               	movf	??_main,w
  1896  0EE1  0084               	movwf	4
  1897  0EE2  1783               	bsf	3,7	;select IRP bank2
  1898  0EE3  0180               	clrf	0
  1899  0EE4  3001               	movlw	1
  1900  0EE5  1683               	bsf	3,5	;RP0=1, select bank1
  1901  0EE6  1303               	bcf	3,6	;RP1=0, select bank1
  1902  0EE7  07BF               	addwf	main@i^(0+128),f
  1903  0EE8  1803               	skipnc
  1904  0EE9  0AC0               	incf	(main@i+1)^(0+128),f
  1905  0EEA  3000               	movlw	0
  1906  0EEB  07C0               	addwf	(main@i+1)^(0+128),f
  1907  0EEC  3000               	movlw	0
  1908  0EED  0240               	subwf	(main@i+1)^(0+128),w
  1909  0EEE  3020               	movlw	32
  1910  0EEF  1903               	skipnz
  1911  0EF0  023F               	subwf	main@i^(0+128),w
  1912  0EF1  1C03               	skipc
  1913  0EF2  2EC4               	goto	l3775
  1914  0EF3                     l3783:	
  1915                           
  1916                           ;main.c: 86: }
  1917                           ;main.c: 92: if(dData[0]=='n'){
  1918  0EF3  0841               	movf	main@dData^(0+128),w
  1919  0EF4  0084               	movwf	4
  1920  0EF5  306E               	movlw	110
  1921  0EF6  1783               	bsf	3,7	;select IRP bank2
  1922  0EF7  0600               	xorwf	0,w
  1923  0EF8  1D03               	btfss	3,2
  1924  0EF9  2F0B               	goto	l3789
  1925                           
  1926                           ;main.c: 94: UBYTE NM_wad_header = 0x72;
  1927  0EFA  3072               	movlw	114
  1928  0EFB  1283               	bcf	3,5	;RP0=0, select bank0
  1929  0EFC  1303               	bcf	3,6	;RP1=0, select bank0
  1930  0EFD  00E2               	movwf	??_main
  1931  0EFE  0862               	movf	??_main,w
  1932  0EFF  1683               	bsf	3,5	;RP0=1, select bank1
  1933  0F00  1303               	bcf	3,6	;RP1=0, select bank1
  1934  0F01  00BE               	movwf	main@NM_wad_header^(0+128)
  1935                           
  1936                           ;main.c: 95: NM_waddress(NM_wad_header, 0x00, 0x00);
  1937  0F02  01F1               	clrf	NM_waddress@whigh_address
  1938  0F03  01F2               	clrf	NM_waddress@wlow_address
  1939  0F04  083E               	movf	main@NM_wad_header^(0+128),w
  1940  0F05  120A  158A  202A  120A  158A  	fcall	_NM_waddress
  1941                           
  1942                           ;main.c: 97: }else if(dData[0]=='p'){
  1943  0F0A  2FF0               	goto	l3825
  1944  0F0B                     l3789:	
  1945  0F0B  1683               	bsf	3,5	;RP0=1, select bank1
  1946  0F0C  1303               	bcf	3,6	;RP1=0, select bank1
  1947  0F0D  0841               	movf	main@dData^(0+128),w
  1948  0F0E  0084               	movwf	4
  1949  0F0F  3070               	movlw	112
  1950  0F10  1783               	bsf	3,7	;select IRP bank2
  1951  0F11  0600               	xorwf	0,w
  1952  0F12  1D03               	btfss	3,2
  1953  0F13  2FF0               	goto	l3825
  1954                           
  1955                           ;main.c: 99: RB2 = 1;
  1956  0F14  1283               	bcf	3,5	;RP0=0, select bank0
  1957  0F15  1303               	bcf	3,6	;RP1=0, select bank0
  1958  0F16  1506               	bsf	6,2	;volatile
  1959                           
  1960                           ;main.c: 100: _delay((unsigned long)((500)*(10000000/4000.0)));
  1961  0F17  3007               	movlw	7
  1962  0F18  00E4               	movwf	??_main+2
  1963  0F19  3058               	movlw	88
  1964  0F1A  00E3               	movwf	??_main+1
  1965  0F1B  305E               	movlw	94
  1966  0F1C  00E2               	movwf	??_main
  1967  0F1D                     u3627:	
  1968  0F1D  0BE2               	decfsz	??_main,f
  1969  0F1E  2F1D               	goto	u3627
  1970  0F1F  0BE3               	decfsz	??_main+1,f
  1971  0F20  2F1D               	goto	u3627
  1972  0F21  0BE4               	decfsz	??_main+2,f
  1973  0F22  2F1D               	goto	u3627
  1974  0F23  2F24               	nop2
  1975                           
  1976                           ;main.c: 101: RB2 = 0;
  1977  0F24  1283               	bcf	3,5	;RP0=0, select bank0
  1978  0F25  1303               	bcf	3,6	;RP1=0, select bank0
  1979  0F26  1106               	bcf	6,2	;volatile
  1980                           
  1981                           ;main.c: 102: if(dData[2] == 'r'){
  1982  0F27  1683               	bsf	3,5	;RP0=1, select bank1
  1983  0F28  1303               	bcf	3,6	;RP1=0, select bank1
  1984  0F29  0841               	movf	main@dData^(0+128),w
  1985  0F2A  3E02               	addlw	2
  1986  0F2B  0084               	movwf	4
  1987  0F2C  3072               	movlw	114
  1988  0F2D  1783               	bsf	3,7	;select IRP bank2
  1989  0F2E  0600               	xorwf	0,w
  1990  0F2F  1903               	btfsc	3,2
  1991  0F30  2FD9               	goto	l3821
  1992  0F31  2FF0               	goto	l3825
  1993  0F32                     l3801:	
  1994                           ;main.c: 108: case 'E':
  1995                           
  1996                           ;main.c: 107: switch(dData[3]){
  1997                           
  1998                           
  1999                           ;main.c: 113: Reset_EPS();
  2000  0F32  120A  118A  2007  120A  158A  	fcall	_Reset_EPS
  2001                           
  2002                           ;main.c: 114: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2003  0F37  3040               	movlw	64
  2004  0F38  1283               	bcf	3,5	;RP0=0, select bank0
  2005  0F39  1303               	bcf	3,6	;RP1=0, select bank0
  2006  0F3A  00E4               	movwf	??_main+2
  2007  0F3B  306A               	movlw	106
  2008  0F3C  00E3               	movwf	??_main+1
  2009  0F3D  30D5               	movlw	213
  2010  0F3E  00E2               	movwf	??_main
  2011  0F3F                     u3637:	
  2012  0F3F  0BE2               	decfsz	??_main,f
  2013  0F40  2F3F               	goto	u3637
  2014  0F41  0BE3               	decfsz	??_main+1,f
  2015  0F42  2F3F               	goto	u3637
  2016  0F43  0BE4               	decfsz	??_main+2,f
  2017  0F44  2F3F               	goto	u3637
  2018  0F45  2F46               	nop2
  2019                           
  2020                           ;main.c: 117: int FMTX_Nprg[5] = {8,7,3,0,0};
  2021  0F46  30A0               	movlw	main@FMTX_Nprg& (0+255)
  2022  0F47  0084               	movwf	4
  2023  0F48  30C2               	movlw	low main@F2006
  2024  0F49  1283               	bcf	3,5	;RP0=0, select bank0
  2025  0F4A  1303               	bcf	3,6	;RP1=0, select bank0
  2026  0F4B  00E2               	movwf	??_main
  2027  0F4C  0804               	movf	4,w
  2028  0F4D  00E3               	movwf	??_main+1
  2029  0F4E  300A               	movlw	10
  2030  0F4F  00E4               	movwf	??_main+2
  2031  0F50                     u3550:	
  2032  0F50  0862               	movf	??_main,w
  2033  0F51  0084               	movwf	4
  2034  0F52  1783               	bsf	3,7	;select IRP bank3
  2035  0F53  0800               	movf	0,w
  2036  0F54  00E5               	movwf	??_main+3
  2037  0F55  0AE2               	incf	??_main,f
  2038  0F56  0863               	movf	??_main+1,w
  2039  0F57  0084               	movwf	4
  2040  0F58  1383               	bcf	3,7	;select IRP bank1
  2041  0F59  0865               	movf	??_main+3,w
  2042  0F5A  0080               	movwf	0
  2043  0F5B  0AE3               	incf	??_main+1,f
  2044  0F5C  0BE4               	decfsz	??_main+2,f
  2045  0F5D  2F50               	goto	u3550
  2046                           
  2047                           ;main.c: 118: int CWTX_Nprg[5] = {0,1,7,4,7};
  2048  0F5E  30AA               	movlw	main@CWTX_Nprg& (0+255)
  2049  0F5F  0084               	movwf	4
  2050  0F60  30CC               	movlw	low main@F2008
  2051  0F61  00E2               	movwf	??_main
  2052  0F62  0804               	movf	4,w
  2053  0F63  00E3               	movwf	??_main+1
  2054  0F64  300A               	movlw	10
  2055  0F65  00E4               	movwf	??_main+2
  2056  0F66                     u3560:	
  2057  0F66  0862               	movf	??_main,w
  2058  0F67  0084               	movwf	4
  2059  0F68  1783               	bsf	3,7	;select IRP bank3
  2060  0F69  0800               	movf	0,w
  2061  0F6A  00E5               	movwf	??_main+3
  2062  0F6B  0AE2               	incf	??_main,f
  2063  0F6C  0863               	movf	??_main+1,w
  2064  0F6D  0084               	movwf	4
  2065  0F6E  1383               	bcf	3,7	;select IRP bank1
  2066  0F6F  0865               	movf	??_main+3,w
  2067  0F70  0080               	movwf	0
  2068  0F71  0AE3               	incf	??_main+1,f
  2069  0F72  0BE4               	decfsz	??_main+2,f
  2070  0F73  2F66               	goto	u3560
  2071                           
  2072                           ;main.c: 119: int FMRX_Nprg[5] = {2,4,8,8,7};
  2073  0F74  30B4               	movlw	main@FMRX_Nprg& (0+255)
  2074  0F75  0084               	movwf	4
  2075  0F76  30D6               	movlw	low main@F2010
  2076  0F77  00E2               	movwf	??_main
  2077  0F78  0804               	movf	4,w
  2078  0F79  00E3               	movwf	??_main+1
  2079  0F7A  300A               	movlw	10
  2080  0F7B  00E4               	movwf	??_main+2
  2081  0F7C                     u3570:	
  2082  0F7C  0862               	movf	??_main,w
  2083  0F7D  0084               	movwf	4
  2084  0F7E  1783               	bsf	3,7	;select IRP bank3
  2085  0F7F  0800               	movf	0,w
  2086  0F80  00E5               	movwf	??_main+3
  2087  0F81  0AE2               	incf	??_main,f
  2088  0F82  0863               	movf	??_main+1,w
  2089  0F83  0084               	movwf	4
  2090  0F84  1383               	bcf	3,7	;select IRP bank1
  2091  0F85  0865               	movf	??_main+3,w
  2092  0F86  0080               	movwf	0
  2093  0F87  0AE3               	incf	??_main+1,f
  2094  0F88  0BE4               	decfsz	??_main+2,f
  2095  0F89  2F7C               	goto	u3570
  2096                           
  2097                           ;main.c: 121: FMTX(FMTX_Nref, FMTX_Nprg);
  2098  0F8A  1683               	bsf	3,5	;RP0=1, select bank1
  2099  0F8B  1303               	bcf	3,6	;RP1=0, select bank1
  2100  0F8C  0847               	movf	(_FMTX_Nref+1)^(0+128),w
  2101  0F8D  1283               	bcf	3,5	;RP0=0, select bank0
  2102  0F8E  1303               	bcf	3,6	;RP1=0, select bank0
  2103  0F8F  00DD               	movwf	FMTX@Nref+1
  2104  0F90  1683               	bsf	3,5	;RP0=1, select bank1
  2105  0F91  1303               	bcf	3,6	;RP1=0, select bank1
  2106  0F92  0846               	movf	_FMTX_Nref^(0+128),w
  2107  0F93  1283               	bcf	3,5	;RP0=0, select bank0
  2108  0F94  1303               	bcf	3,6	;RP1=0, select bank0
  2109  0F95  00DC               	movwf	FMTX@Nref
  2110  0F96  30A0               	movlw	(low (main@FMTX_Nprg| 0))& (0+255)
  2111  0F97  00DE               	movwf	FMTX@Nprg
  2112  0F98  3000               	movlw	0
  2113  0F99  00DF               	movwf	FMTX@Nprg+1
  2114  0F9A  120A  158A  213A  120A  158A  	fcall	_FMTX
  2115                           
  2116                           ;main.c: 122: CWTX(CWTX_Nref, CWTX_Nprg);
  2117  0F9F  1683               	bsf	3,5	;RP0=1, select bank1
  2118  0FA0  1303               	bcf	3,6	;RP1=0, select bank1
  2119  0FA1  0843               	movf	(_CWTX_Nref+1)^(0+128),w
  2120  0FA2  1283               	bcf	3,5	;RP0=0, select bank0
  2121  0FA3  1303               	bcf	3,6	;RP1=0, select bank0
  2122  0FA4  00DD               	movwf	CWTX@Nref+1
  2123  0FA5  1683               	bsf	3,5	;RP0=1, select bank1
  2124  0FA6  1303               	bcf	3,6	;RP1=0, select bank1
  2125  0FA7  0842               	movf	_CWTX_Nref^(0+128),w
  2126  0FA8  1283               	bcf	3,5	;RP0=0, select bank0
  2127  0FA9  1303               	bcf	3,6	;RP1=0, select bank0
  2128  0FAA  00DC               	movwf	CWTX@Nref
  2129  0FAB  30AA               	movlw	(low (main@CWTX_Nprg| 0))& (0+255)
  2130  0FAC  00DE               	movwf	CWTX@Nprg
  2131  0FAD  3000               	movlw	0
  2132  0FAE  00DF               	movwf	CWTX@Nprg+1
  2133  0FAF  120A  158A  20E2  120A  158A  	fcall	_CWTX
  2134                           
  2135                           ;main.c: 123: FMRX(FMRX_Nref, FMRX_Nprg);
  2136  0FB4  1683               	bsf	3,5	;RP0=1, select bank1
  2137  0FB5  1303               	bcf	3,6	;RP1=0, select bank1
  2138  0FB6  0845               	movf	(_FMRX_Nref+1)^(0+128),w
  2139  0FB7  1283               	bcf	3,5	;RP0=0, select bank0
  2140  0FB8  1303               	bcf	3,6	;RP1=0, select bank0
  2141  0FB9  00DD               	movwf	FMRX@Nref+1
  2142  0FBA  1683               	bsf	3,5	;RP0=1, select bank1
  2143  0FBB  1303               	bcf	3,6	;RP1=0, select bank1
  2144  0FBC  0844               	movf	_FMRX_Nref^(0+128),w
  2145  0FBD  1283               	bcf	3,5	;RP0=0, select bank0
  2146  0FBE  1303               	bcf	3,6	;RP1=0, select bank0
  2147  0FBF  00DC               	movwf	FMRX@Nref
  2148  0FC0  30B4               	movlw	(low (main@FMRX_Nprg| 0))& (0+255)
  2149  0FC1  00DE               	movwf	FMRX@Nprg
  2150  0FC2  3000               	movlw	0
  2151  0FC3  00DF               	movwf	FMRX@Nprg+1
  2152  0FC4  120A  158A  210E  120A  158A  	fcall	_FMRX
  2153                           
  2154                           ;main.c: 124: _delay((unsigned long)((500)*(10000000/4000.0)));
  2155  0FC9  3007               	movlw	7
  2156  0FCA  1283               	bcf	3,5	;RP0=0, select bank0
  2157  0FCB  1303               	bcf	3,6	;RP1=0, select bank0
  2158  0FCC  00E4               	movwf	??_main+2
  2159  0FCD  3058               	movlw	88
  2160  0FCE  00E3               	movwf	??_main+1
  2161  0FCF  305E               	movlw	94
  2162  0FD0  00E2               	movwf	??_main
  2163  0FD1                     u3647:	
  2164  0FD1  0BE2               	decfsz	??_main,f
  2165  0FD2  2FD1               	goto	u3647
  2166  0FD3  0BE3               	decfsz	??_main+1,f
  2167  0FD4  2FD1               	goto	u3647
  2168  0FD5  0BE4               	decfsz	??_main+2,f
  2169  0FD6  2FD1               	goto	u3647
  2170  0FD7  2FD8               	nop2
  2171                           
  2172                           ;main.c: 141: }
  2173                           
  2174                           ;main.c: 140: break;
  2175                           
  2176                           ;main.c: 138: default:
  2177                           
  2178                           ;main.c: 137: break;
  2179                           
  2180                           ;main.c: 135: case 'T':
  2181                           
  2182                           ;main.c: 134: break;
  2183                           
  2184                           ;main.c: 132: case 'N':
  2185                           
  2186                           ;main.c: 131: break;
  2187                           
  2188                           ;main.c: 129: case '3':
  2189                           
  2190                           ;main.c: 128: break;
  2191                           
  2192                           ;main.c: 126: case 'I':
  2193                           
  2194                           ;main.c: 125: break;
  2195  0FD8  2FF0               	goto	l3825
  2196  0FD9                     l3821:	
  2197  0FD9  1683               	bsf	3,5	;RP0=1, select bank1
  2198  0FDA  1303               	bcf	3,6	;RP1=0, select bank1
  2199  0FDB  0841               	movf	main@dData^(0+128),w
  2200  0FDC  3E03               	addlw	3
  2201  0FDD  0084               	movwf	4
  2202  0FDE  1783               	bsf	3,7	;select IRP bank2
  2203  0FDF  0800               	movf	0,w
  2204                           
  2205                           ; Switch size 1, requested type "space"
  2206                           ; Number of cases is 5, Range of values is 51 to 84
  2207                           ; switch strategies available:
  2208                           ; Name         Instructions Cycles
  2209                           ; simple_byte           16     9 (average)
  2210                           ; direct_byte          113    11 (fixed)
  2211                           ; jumptable            263     9 (fixed)
  2212                           ;	Chosen strategy is simple_byte
  2213  0FE0  3A33               	xorlw	51	; case 51
  2214  0FE1  1903               	skipnz
  2215  0FE2  2FF0               	goto	l3825
  2216  0FE3  3A76               	xorlw	118	; case 69
  2217  0FE4  1903               	skipnz
  2218  0FE5  2F32               	goto	l3801
  2219  0FE6  3A0C               	xorlw	12	; case 73
  2220  0FE7  1903               	skipnz
  2221  0FE8  2FF0               	goto	l3825
  2222  0FE9  3A07               	xorlw	7	; case 78
  2223  0FEA  1903               	skipnz
  2224  0FEB  2FF0               	goto	l3825
  2225  0FEC  3A1A               	xorlw	26	; case 84
  2226  0FED  1903               	skipnz
  2227  0FEE  2FF0               	goto	l3825
  2228  0FEF  2FF0               	goto	l3825
  2229  0FF0                     l3825:	
  2230                           ;main.c: 143: }else if(dData[2] == 't'){
  2231                           
  2232                           
  2233                           ;main.c: 145: }
  2234                           ;main.c: 146: }
  2235                           ;main.c: 190: _delay((unsigned long)((500)*(10000000/4000.0)));
  2236  0FF0  3007               	movlw	7
  2237  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  2238  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
  2239  0FF3  00E4               	movwf	??_main+2
  2240  0FF4  3058               	movlw	88
  2241  0FF5  00E3               	movwf	??_main+1
  2242  0FF6  305E               	movlw	94
  2243  0FF7  00E2               	movwf	??_main
  2244  0FF8                     u3657:	
  2245  0FF8  0BE2               	decfsz	??_main,f
  2246  0FF9  2FF8               	goto	u3657
  2247  0FFA  0BE3               	decfsz	??_main+1,f
  2248  0FFB  2FF8               	goto	u3657
  2249  0FFC  0BE4               	decfsz	??_main+2,f
  2250  0FFD  2FF8               	goto	u3657
  2251  0FFE  2FFF               	nop2
  2252  0FFF  2E9F               	goto	l3765
  2253  1000                     __end_of_main:	
  2254                           ;main.c: 191: }
  2255                           ;main.c: 192: return;
  2256                           
  2257                           
  2258                           	psect	text1
  2259  0A54                     __ptext1:	
  2260 ;; *************** function _printf *****************
  2261 ;; Defined at:
  2262 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  2263 ;; Parameters:    Size  Location     Type
  2264 ;;  f               1    wreg     PTR const unsigned char 
  2265 ;;		 -> STR_16(3), STR_15(8), 
  2266 ;; Auto vars:     Size  Location     Type
  2267 ;;  f               1    6[COMMON] PTR const unsigned char 
  2268 ;;		 -> STR_16(3), STR_15(8), 
  2269 ;;  tmpval          4    0        struct .
  2270 ;;  cp              2    0        PTR const unsigned char 
  2271 ;;  len             2    0        unsigned int 
  2272 ;;  val             2    0        unsigned int 
  2273 ;;  c               1    7[COMMON] char 
  2274 ;;  ap              1    5[COMMON] PTR void [1]
  2275 ;;		 -> ?_printf(2), 
  2276 ;;  flag            1    4[COMMON] unsigned char 
  2277 ;;  prec            1    0        char 
  2278 ;; Return value:  Size  Location     Type
  2279 ;;                  2    1[COMMON] int 
  2280 ;; Registers used:
  2281 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2282 ;; Tracked objects:
  2283 ;;		On entry : 0/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2287 ;;      Params:         2       0       0       0       0
  2288 ;;      Locals:         4       0       0       0       0
  2289 ;;      Temps:          1       0       0       0       0
  2290 ;;      Totals:         7       0       0       0       0
  2291 ;;Total ram usage:        7 bytes
  2292 ;; Hardware stack levels used:    1
  2293 ;; Hardware stack levels required when called:    1
  2294 ;; This function calls:
  2295 ;;		_putch
  2296 ;; This function is called by:
  2297 ;;		_main
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           
  2302                           ;psect for function _printf
  2303  0A54                     _printf:	
  2304                           
  2305                           ;incstack = 0
  2306                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2307                           ;printf@f stored from wreg
  2308  0A54  00F6               	movwf	printf@f
  2309                           
  2310                           ;doprnt.c: 466: va_list ap;
  2311                           ;doprnt.c: 499: signed char c;
  2312                           ;doprnt.c: 506: signed char prec;
  2313                           ;doprnt.c: 508: unsigned char flag;
  2314                           ;doprnt.c: 523: union {
  2315                           ;doprnt.c: 524: unsigned long vd;
  2316                           ;doprnt.c: 525: double integ;
  2317                           ;doprnt.c: 526: } tmpval;
  2318                           ;doprnt.c: 528: unsigned int val;
  2319                           ;doprnt.c: 529: unsigned len;
  2320                           ;doprnt.c: 530: const char * cp;
  2321                           ;doprnt.c: 533: *ap = __va_start();
  2322  0A55  3071               	movlw	(low (?_printf| 0))& (0+255)
  2323  0A56  00F3               	movwf	??_printf
  2324  0A57  0873               	movf	??_printf,w
  2325  0A58  00F5               	movwf	printf@ap
  2326  0A59                     l3481:	
  2327                           ;doprnt.c: 1422: {
  2328                           
  2329                           ;doprnt.c: 536: while(c = *f++) {
  2330                           
  2331  0A59  3001               	movlw	1
  2332  0A5A  07F6               	addwf	printf@f,f
  2333  0A5B  30FF               	movlw	-1
  2334  0A5C  0776               	addwf	printf@f,w
  2335  0A5D  0084               	movwf	4
  2336  0A5E  120A  158A  2000  120A  158A  	fcall	stringdir
  2337  0A63  00F3               	movwf	??_printf
  2338  0A64  0873               	movf	??_printf,w
  2339  0A65  00F7               	movwf	printf@c
  2340  0A66  0877               	movf	printf@c,w
  2341  0A67  1903               	btfsc	3,2
  2342  0A68  0008               	return
  2343                           
  2344                           ;doprnt.c: 538: if(c != '%')
  2345  0A69  3025               	movlw	37
  2346  0A6A  0677               	xorwf	printf@c,w
  2347  0A6B  1903               	btfsc	3,2
  2348  0A6C  2A74               	goto	l3469
  2349                           
  2350                           ;doprnt.c: 540: {
  2351                           ;doprnt.c: 541: (putch(c) );
  2352  0A6D  0877               	movf	printf@c,w
  2353  0A6E  160A  118A  27DF  120A  158A  	fcall	_putch
  2354                           
  2355                           ;doprnt.c: 542: continue;
  2356  0A73  2A59               	goto	l3481
  2357  0A74                     l3469:	
  2358                           
  2359                           ;doprnt.c: 543: }
  2360                           ;doprnt.c: 548: flag = 0;
  2361  0A74  01F4               	clrf	printf@flag
  2362                           
  2363                           ;doprnt.c: 635: switch(c = *f++) {
  2364  0A75  2A87               	goto	l3479
  2365  0A76                     l3471:	
  2366                           ;doprnt.c: 784: case 'c':
  2367                           
  2368                           ;doprnt.c: 638: goto alldone;
  2369                           
  2370                           ;doprnt.c: 637: case 0:
  2371                           
  2372                           
  2373                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2374  0A76  0875               	movf	printf@ap,w
  2375  0A77  0084               	movwf	4
  2376  0A78  0800               	movf	0,w
  2377  0A79  00F3               	movwf	??_printf
  2378  0A7A  0873               	movf	??_printf,w
  2379  0A7B  00F7               	movwf	printf@c
  2380  0A7C  3002               	movlw	2
  2381  0A7D  00F3               	movwf	??_printf
  2382  0A7E  0873               	movf	??_printf,w
  2383  0A7F  07F5               	addwf	printf@ap,f
  2384  0A80                     l3475:	
  2385                           ;doprnt.c: 802: default:
  2386                           
  2387                           
  2388                           ;doprnt.c: 809: (putch(c) );
  2389  0A80  0877               	movf	printf@c,w
  2390  0A81  160A  118A  27DF  120A  158A  	fcall	_putch
  2391                           
  2392                           ;doprnt.c: 822: }
  2393                           
  2394                           ;doprnt.c: 810: continue;
  2395  0A86  2A59               	goto	l3481
  2396  0A87                     l3479:	
  2397  0A87  3001               	movlw	1
  2398  0A88  07F6               	addwf	printf@f,f
  2399  0A89  30FF               	movlw	-1
  2400  0A8A  0776               	addwf	printf@f,w
  2401  0A8B  0084               	movwf	4
  2402  0A8C  120A  158A  2000  120A  158A  	fcall	stringdir
  2403  0A91  00F7               	movwf	printf@c
  2404                           
  2405                           ; Switch size 1, requested type "space"
  2406                           ; Number of cases is 2, Range of values is 0 to 99
  2407                           ; switch strategies available:
  2408                           ; Name         Instructions Cycles
  2409                           ; simple_byte            7     4 (average)
  2410                           ; jumptable            260     6 (fixed)
  2411                           ;	Chosen strategy is simple_byte
  2412  0A92  3A00               	xorlw	0	; case 0
  2413  0A93  1903               	skipnz
  2414  0A94  2A9A               	goto	l643
  2415  0A95  3A63               	xorlw	99	; case 99
  2416  0A96  1903               	skipnz
  2417  0A97  2A76               	goto	l3471
  2418  0A98  2A80               	goto	l3475
  2419  0A99  2A59               	goto	l3481
  2420  0A9A                     l643:	
  2421                           ;doprnt.c: 1540: return 0;
  2422                           ;	Return value of _printf is never used
  2423                           
  2424                           ;doprnt.c: 1469: }
  2425                           ;doprnt.c: 1533: }
  2426                           ;doprnt.c: 1535: alldone:
  2427                           
  2428  0A9A  0008               	return
  2429  0A9B                     __end_of_printf:	
  2430                           
  2431                           	psect	text2
  2432  0007                     __ptext2:	
  2433 ;; *************** function _Reset_EPS *****************
  2434 ;; Defined at:
  2435 ;;		line 19 in file "EPS.c"
  2436 ;; Parameters:    Size  Location     Type
  2437 ;;		None
  2438 ;; Auto vars:     Size  Location     Type
  2439 ;;		None
  2440 ;; Return value:  Size  Location     Type
  2441 ;;                  1    wreg      void 
  2442 ;; Registers used:
  2443 ;;		wreg
  2444 ;; Tracked objects:
  2445 ;;		On entry : 0/0
  2446 ;;		On exit  : 0/0
  2447 ;;		Unchanged: 0/0
  2448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2449 ;;      Params:         0       0       0       0       0
  2450 ;;      Locals:         0       0       0       0       0
  2451 ;;      Temps:          3       0       0       0       0
  2452 ;;      Totals:         3       0       0       0       0
  2453 ;;Total ram usage:        3 bytes
  2454 ;; Hardware stack levels used:    1
  2455 ;; This function calls:
  2456 ;;		Nothing
  2457 ;; This function is called by:
  2458 ;;		_main
  2459 ;; This function uses a non-reentrant model
  2460 ;;
  2461                           
  2462                           
  2463                           ;psect for function _Reset_EPS
  2464  0007                     _Reset_EPS:	
  2465                           
  2466                           ;EPS.c: 20: RB4 = 1;
  2467                           
  2468                           ;incstack = 0
  2469                           ; Regs used in _Reset_EPS: [wreg]
  2470  0007  1283               	bcf	3,5	;RP0=0, select bank0
  2471  0008  1303               	bcf	3,6	;RP1=0, select bank0
  2472  0009  1606               	bsf	6,4	;volatile
  2473                           
  2474                           ;EPS.c: 21: RA1 = 1;
  2475  000A  1485               	bsf	5,1	;volatile
  2476                           
  2477                           ;EPS.c: 22: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2478  000B  3040               	movlw	64
  2479  000C  00F2               	movwf	??_Reset_EPS+2
  2480  000D  306A               	movlw	106
  2481  000E  00F1               	movwf	??_Reset_EPS+1
  2482  000F  30D5               	movlw	213
  2483  0010  00F0               	movwf	??_Reset_EPS
  2484  0011                     u3667:	
  2485  0011  0BF0               	decfsz	??_Reset_EPS,f
  2486  0012  2811               	goto	u3667
  2487  0013  0BF1               	decfsz	??_Reset_EPS+1,f
  2488  0014  2811               	goto	u3667
  2489  0015  0BF2               	decfsz	??_Reset_EPS+2,f
  2490  0016  2811               	goto	u3667
  2491  0017  2818               	nop2
  2492                           
  2493                           ;EPS.c: 23: RB4 = 0;
  2494  0018  1283               	bcf	3,5	;RP0=0, select bank0
  2495  0019  1303               	bcf	3,6	;RP1=0, select bank0
  2496  001A  1206               	bcf	6,4	;volatile
  2497                           
  2498                           ;EPS.c: 24: RA1 = 0;
  2499  001B  1085               	bcf	5,1	;volatile
  2500                           
  2501                           ;EPS.c: 25: _delay((unsigned long)((500)*(10000000/4000.0)));
  2502  001C  3007               	movlw	7
  2503  001D  00F2               	movwf	??_Reset_EPS+2
  2504  001E  3058               	movlw	88
  2505  001F  00F1               	movwf	??_Reset_EPS+1
  2506  0020  305E               	movlw	94
  2507  0021  00F0               	movwf	??_Reset_EPS
  2508  0022                     u3677:	
  2509  0022  0BF0               	decfsz	??_Reset_EPS,f
  2510  0023  2822               	goto	u3677
  2511  0024  0BF1               	decfsz	??_Reset_EPS+1,f
  2512  0025  2822               	goto	u3677
  2513  0026  0BF2               	decfsz	??_Reset_EPS+2,f
  2514  0027  2822               	goto	u3677
  2515  0028  2829               	nop2
  2516  0029  0008               	return
  2517  002A                     __end_of_Reset_EPS:	
  2518                           
  2519                           	psect	text3
  2520  0C5C                     __ptext3:	
  2521 ;; *************** function _ReceivePacket_data *****************
  2522 ;; Defined at:
  2523 ;;		line 359 in file "decode_AX25.c"
  2524 ;; Parameters:    Size  Location     Type
  2525 ;;		None
  2526 ;; Auto vars:     Size  Location     Type
  2527 ;;  i               2   31[BANK0 ] unsigned int 
  2528 ;;  fcschecker      2   29[BANK0 ] unsigned int 
  2529 ;; Return value:  Size  Location     Type
  2530 ;;                  1    wreg      PTR unsigned char 
  2531 ;; Registers used:
  2532 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2533 ;; Tracked objects:
  2534 ;;		On entry : 0/0
  2535 ;;		On exit  : 0/0
  2536 ;;		Unchanged: 0/0
  2537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2538 ;;      Params:         0       0       0       0       0
  2539 ;;      Locals:         0       4       0       0       0
  2540 ;;      Temps:          2       0       0       0       0
  2541 ;;      Totals:         2       4       0       0       0
  2542 ;;Total ram usage:        6 bytes
  2543 ;; Hardware stack levels used:    1
  2544 ;; Hardware stack levels required when called:    2
  2545 ;; This function calls:
  2546 ;;		_fcscheck
  2547 ;;		_getdata
  2548 ;;		_waitFlag
  2549 ;; This function is called by:
  2550 ;;		_main
  2551 ;; This function uses a non-reentrant model
  2552 ;;
  2553                           
  2554                           
  2555                           ;psect for function _ReceivePacket_data
  2556  0C5C                     _ReceivePacket_data:	
  2557                           
  2558                           ;decode_AX25.c: 360: UINT fcschecker;
  2559                           ;decode_AX25.c: 363: waitFlag();
  2560                           
  2561                           ;incstack = 0
  2562                           ; Regs used in _ReceivePacket_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2563  0C5C  120A  118A  2327  120A  158A  	fcall	_waitFlag
  2564                           
  2565                           ;decode_AX25.c: 365: getdata();
  2566  0C61  120A  158A  23FB  120A  158A  	fcall	_getdata
  2567                           
  2568                           ;decode_AX25.c: 367: fcschecker = fcscheck();
  2569  0C66  120A  118A  202A  120A  158A  	fcall	_fcscheck
  2570  0C6B  0871               	movf	?_fcscheck+1,w
  2571  0C6C  1283               	bcf	3,5	;RP0=0, select bank0
  2572  0C6D  1303               	bcf	3,6	;RP1=0, select bank0
  2573  0C6E  00BE               	movwf	ReceivePacket_data@fcschecker+1
  2574  0C6F  0870               	movf	?_fcscheck,w
  2575  0C70  00BD               	movwf	ReceivePacket_data@fcschecker
  2576                           
  2577                           ;decode_AX25.c: 369: if(fcschecker == 1){
  2578  0C71  033D               	decf	ReceivePacket_data@fcschecker,w
  2579  0C72  043E               	iorwf	ReceivePacket_data@fcschecker+1,w
  2580  0C73  1D03               	btfss	3,2
  2581  0C74  2CBB               	goto	l3377
  2582                           
  2583                           ;decode_AX25.c: 370: for(UINT i=0; i<commandSize; i++){
  2584  0C75  01BF               	clrf	ReceivePacket_data@i
  2585  0C76  01C0               	clrf	ReceivePacket_data@i+1
  2586  0C77  3001               	movlw	low (_commandSize-__stringbase)
  2587  0C78  0084               	movwf	4
  2588  0C79  120A  158A  2000  120A  158A  	fcall	stringdir
  2589  0C7E  00FA               	movwf	??_ReceivePacket_data
  2590  0C7F  120A  158A  2000  120A  158A  	fcall	stringdir
  2591  0C84  00FB               	movwf	??_ReceivePacket_data+1
  2592  0C85  087B               	movf	??_ReceivePacket_data+1,w
  2593  0C86  0240               	subwf	ReceivePacket_data@i+1,w
  2594  0C87  1D03               	skipz
  2595  0C88  2C8B               	goto	u3095
  2596  0C89  087A               	movf	??_ReceivePacket_data,w
  2597  0C8A  023F               	subwf	ReceivePacket_data@i,w
  2598  0C8B                     u3095:	
  2599  0C8B  1803               	btfsc	3,0
  2600  0C8C  2CB5               	goto	l3369
  2601  0C8D                     l3363:	
  2602                           
  2603                           ;decode_AX25.c: 371: dData[i] = dPacket[i+20];
  2604  0C8D  083F               	movf	ReceivePacket_data@i,w
  2605  0C8E  3E14               	addlw	20
  2606  0C8F  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2607  0C90  0084               	movwf	4
  2608  0C91  1783               	bsf	3,7	;select IRP bank3
  2609  0C92  0800               	movf	0,w
  2610  0C93  00FA               	movwf	??_ReceivePacket_data
  2611  0C94  083F               	movf	ReceivePacket_data@i,w
  2612  0C95  3E30               	addlw	(low (_dData| (0+256)))& (0+255)
  2613  0C96  0084               	movwf	4
  2614  0C97  087A               	movf	??_ReceivePacket_data,w
  2615  0C98  0080               	movwf	0
  2616  0C99  3001               	movlw	1
  2617  0C9A  07BF               	addwf	ReceivePacket_data@i,f
  2618  0C9B  1803               	skipnc
  2619  0C9C  0AC0               	incf	ReceivePacket_data@i+1,f
  2620  0C9D  3000               	movlw	0
  2621  0C9E  07C0               	addwf	ReceivePacket_data@i+1,f
  2622  0C9F  3001               	movlw	low (_commandSize-__stringbase)
  2623  0CA0  0084               	movwf	4
  2624  0CA1  120A  158A  2000  120A  158A  	fcall	stringdir
  2625  0CA6  00FA               	movwf	??_ReceivePacket_data
  2626  0CA7  120A  158A  2000  120A  158A  	fcall	stringdir
  2627  0CAC  00FB               	movwf	??_ReceivePacket_data+1
  2628  0CAD  087B               	movf	??_ReceivePacket_data+1,w
  2629  0CAE  0240               	subwf	ReceivePacket_data@i+1,w
  2630  0CAF  1D03               	skipz
  2631  0CB0  2CB3               	goto	u3105
  2632  0CB1  087A               	movf	??_ReceivePacket_data,w
  2633  0CB2  023F               	subwf	ReceivePacket_data@i,w
  2634  0CB3                     u3105:	
  2635  0CB3  1C03               	skipc
  2636  0CB4  2C8D               	goto	l3363
  2637  0CB5                     l3369:	
  2638                           
  2639                           ;decode_AX25.c: 372: }
  2640                           ;decode_AX25.c: 373: dPacketnum = 0;
  2641  0CB5  01E6               	clrf	_dPacketnum
  2642  0CB6  01E7               	clrf	_dPacketnum+1
  2643                           
  2644                           ;decode_AX25.c: 374: rcv_state = 0;
  2645  0CB7  01EA               	clrf	_rcv_state
  2646  0CB8  01EB               	clrf	_rcv_state+1
  2647                           
  2648                           ;decode_AX25.c: 375: return dData;
  2649  0CB9  3030               	movlw	(low (_dData| (0+256)))& (0+255)
  2650                           
  2651                           ;decode_AX25.c: 376: }else{
  2652  0CBA  0008               	return
  2653  0CBB                     l3377:	
  2654                           
  2655                           ;decode_AX25.c: 377: dPacketnum = 0;
  2656  0CBB  01E6               	clrf	_dPacketnum
  2657  0CBC  01E7               	clrf	_dPacketnum+1
  2658                           
  2659                           ;decode_AX25.c: 378: rcv_state = 0;
  2660  0CBD  01EA               	clrf	_rcv_state
  2661  0CBE  01EB               	clrf	_rcv_state+1
  2662                           
  2663                           ;decode_AX25.c: 379: return 0x00;
  2664  0CBF  3000               	movlw	0
  2665  0CC0  0008               	return
  2666  0CC1                     __end_of_ReceivePacket_data:	
  2667                           
  2668                           	psect	text4
  2669  0327                     __ptext4:	
  2670 ;; *************** function _waitFlag *****************
  2671 ;; Defined at:
  2672 ;;		line 54 in file "decode_AX25.c"
  2673 ;; Parameters:    Size  Location     Type
  2674 ;;		None
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;  j               2   24[BANK0 ] unsigned int 
  2677 ;;  j               2   10[BANK0 ] unsigned int 
  2678 ;;  j               2   22[BANK0 ] unsigned int 
  2679 ;;  j               2    8[BANK0 ] unsigned int 
  2680 ;;  j               2   20[BANK0 ] unsigned int 
  2681 ;;  j               2    6[BANK0 ] unsigned int 
  2682 ;;  j               2   18[BANK0 ] unsigned int 
  2683 ;;  j               2    4[BANK0 ] unsigned int 
  2684 ;;  j               2   16[BANK0 ] unsigned int 
  2685 ;;  j               2    2[BANK0 ] unsigned int 
  2686 ;;  i               2    0[BANK0 ] unsigned int 
  2687 ;;  j               2   14[BANK0 ] unsigned int 
  2688 ;;  j               2   12[BANK0 ] unsigned int 
  2689 ;;  flag_judge      2   26[BANK0 ] unsigned int 
  2690 ;;  buf             1   28[BANK0 ] unsigned char 
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      void 
  2693 ;; Registers used:
  2694 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2700 ;;      Params:         0       0       0       0       0
  2701 ;;      Locals:         0      29       0       0       0
  2702 ;;      Temps:          4       0       0       0       0
  2703 ;;      Totals:         4      29       0       0       0
  2704 ;;Total ram usage:       33 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:    1
  2707 ;; This function calls:
  2708 ;;		_getbit
  2709 ;; This function is called by:
  2710 ;;		_ReceivePacket_data
  2711 ;;		_ReceivePacket
  2712 ;; This function uses a non-reentrant model
  2713 ;;
  2714                           
  2715                           
  2716                           ;psect for function _waitFlag
  2717  0327                     _waitFlag:	
  2718                           
  2719                           ;decode_AX25.c: 55: UINT flag_judge;
  2720                           ;decode_AX25.c: 56: UBYTE buf = 0xff;
  2721                           
  2722                           ;incstack = 0
  2723                           ; Regs used in _waitFlag: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2724  0327  30FF               	movlw	255
  2725  0328  00F6               	movwf	??_waitFlag
  2726  0329  0876               	movf	??_waitFlag,w
  2727  032A  1283               	bcf	3,5	;RP0=0, select bank0
  2728  032B  1303               	bcf	3,6	;RP1=0, select bank0
  2729  032C  00BC               	movwf	waitFlag@buf
  2730  032D                     L6:	
  2731                           
  2732                           ;decode_AX25.c: 271: rcv_state = 0;
  2733  032D  01EA               	clrf	_rcv_state
  2734  032E  01EB               	clrf	_rcv_state+1
  2735  032F                     l3061:	
  2736  032F  3000               	movlw	0
  2737  0330  026B               	subwf	_rcv_state+1,w
  2738  0331  3002               	movlw	2
  2739  0332  1903               	skipnz
  2740  0333  026A               	subwf	_rcv_state,w
  2741  0334  1803               	btfsc	3,0
  2742  0335  0008               	return
  2743  0336                     l2695:	
  2744                           ;decode_AX25.c: 59: while(buf != 0x7e){
  2745                           
  2746                           ;decode_AX25.c: 58: while(rcv_state < 2){
  2747                           
  2748                           ;decode_AX25.c: 57: rcv_state = 0;
  2749                           
  2750  0336  307E               	movlw	126
  2751  0337  063C               	xorwf	waitFlag@buf,w
  2752  0338  1903               	btfsc	3,2
  2753  0339  2B86               	goto	l2717
  2754                           
  2755                           ;decode_AX25.c: 60: flag_judge = getbit();
  2756  033A  120A  158A  229B  120A  118A  	fcall	_getbit
  2757  033F  0871               	movf	?_getbit+1,w
  2758  0340  1283               	bcf	3,5	;RP0=0, select bank0
  2759  0341  1303               	bcf	3,6	;RP1=0, select bank0
  2760  0342  00BB               	movwf	waitFlag@flag_judge+1
  2761  0343  0870               	movf	?_getbit,w
  2762  0344  00BA               	movwf	waitFlag@flag_judge
  2763                           
  2764                           ;decode_AX25.c: 61: buf = buf << 1;
  2765  0345  083C               	movf	waitFlag@buf,w
  2766  0346  00F6               	movwf	??_waitFlag
  2767  0347  0776               	addwf	??_waitFlag,w
  2768  0348  00F7               	movwf	??_waitFlag+1
  2769  0349  0877               	movf	??_waitFlag+1,w
  2770  034A  00BC               	movwf	waitFlag@buf
  2771                           
  2772                           ;decode_AX25.c: 63: buf = buf | 0x00;
  2773  034B  083A               	movf	waitFlag@flag_judge,w
  2774  034C  043B               	iorwf	waitFlag@flag_judge+1,w
  2775  034D  1903               	btfsc	3,2
  2776  034E  2B36               	goto	l2695
  2777                           
  2778                           ;decode_AX25.c: 65: buf = buf | 0x01;
  2779                           
  2780                           ;decode_AX25.c: 64: }else{
  2781  034F  083C               	movf	waitFlag@buf,w
  2782  0350  3801               	iorlw	1
  2783  0351  00F6               	movwf	??_waitFlag
  2784  0352  0876               	movf	??_waitFlag,w
  2785  0353  00BC               	movwf	waitFlag@buf
  2786  0354  2B36               	goto	l2695
  2787  0355                     l2697:	
  2788                           ;decode_AX25.c: 66: }
  2789                           ;decode_AX25.c: 67: }
  2790                           ;decode_AX25.c: 71: while(buf == 0x7e){
  2791                           
  2792                           
  2793                           ;decode_AX25.c: 72: for(UINT i=0;i<8;i++){
  2794  0355  01A0               	clrf	waitFlag@i
  2795  0356  01A1               	clrf	waitFlag@i+1
  2796  0357  3000               	movlw	0
  2797  0358  0221               	subwf	waitFlag@i+1,w
  2798  0359  3008               	movlw	8
  2799  035A  1903               	skipnz
  2800  035B  0220               	subwf	waitFlag@i,w
  2801  035C  1803               	btfsc	3,0
  2802  035D  2B86               	goto	l2717
  2803  035E                     l2703:	
  2804                           
  2805                           ;decode_AX25.c: 73: flag_judge = getbit();
  2806  035E  120A  158A  229B  120A  118A  	fcall	_getbit
  2807  0363  0871               	movf	?_getbit+1,w
  2808  0364  1283               	bcf	3,5	;RP0=0, select bank0
  2809  0365  1303               	bcf	3,6	;RP1=0, select bank0
  2810  0366  00BB               	movwf	waitFlag@flag_judge+1
  2811  0367  0870               	movf	?_getbit,w
  2812  0368  00BA               	movwf	waitFlag@flag_judge
  2813                           
  2814                           ;decode_AX25.c: 74: buf = buf >> 1;
  2815  0369  083C               	movf	waitFlag@buf,w
  2816  036A  00F6               	movwf	??_waitFlag
  2817  036B  1003               	clrc
  2818  036C  0C76               	rrf	??_waitFlag,w
  2819  036D  00F7               	movwf	??_waitFlag+1
  2820  036E  0877               	movf	??_waitFlag+1,w
  2821  036F  00BC               	movwf	waitFlag@buf
  2822                           
  2823                           ;decode_AX25.c: 76: buf = buf | 0x00;
  2824  0370  083A               	movf	waitFlag@flag_judge,w
  2825  0371  043B               	iorwf	waitFlag@flag_judge+1,w
  2826  0372  1903               	btfsc	3,2
  2827  0373  2B79               	goto	l2713
  2828                           
  2829                           ;decode_AX25.c: 78: buf = buf | 0x80;
  2830                           
  2831                           ;decode_AX25.c: 77: }else{
  2832  0374  083C               	movf	waitFlag@buf,w
  2833  0375  3880               	iorlw	128
  2834  0376  00F6               	movwf	??_waitFlag
  2835  0377  0876               	movf	??_waitFlag,w
  2836  0378  00BC               	movwf	waitFlag@buf
  2837  0379                     l2713:	
  2838  0379  3001               	movlw	1
  2839  037A  07A0               	addwf	waitFlag@i,f
  2840  037B  1803               	skipnc
  2841  037C  0AA1               	incf	waitFlag@i+1,f
  2842  037D  3000               	movlw	0
  2843  037E  07A1               	addwf	waitFlag@i+1,f
  2844  037F  3000               	movlw	0
  2845  0380  0221               	subwf	waitFlag@i+1,w
  2846  0381  3008               	movlw	8
  2847  0382  1903               	skipnz
  2848  0383  0220               	subwf	waitFlag@i,w
  2849  0384  1C03               	skipc
  2850  0385  2B5E               	goto	l2703
  2851  0386                     l2717:	
  2852  0386  307E               	movlw	126
  2853  0387  063C               	xorwf	waitFlag@buf,w
  2854  0388  1903               	btfsc	3,2
  2855  0389  2B55               	goto	l2697
  2856                           
  2857                           ;decode_AX25.c: 79: }
  2858                           ;decode_AX25.c: 80: }
  2859                           ;decode_AX25.c: 81: }
  2860                           ;decode_AX25.c: 82: if(buf == ("JQ1YCZ"[0] << 1)){
  2861  038A  3012               	movlw	low (STR_1-__stringbase)
  2862  038B  0084               	movwf	4
  2863  038C  120A  158A  2000  120A  118A  	fcall	stringdir
  2864  0391  00F6               	movwf	??_waitFlag
  2865  0392  01F7               	clrf	??_waitFlag+1
  2866  0393  1003               	clrc
  2867  0394  0DF6               	rlf	??_waitFlag,f
  2868  0395  0DF7               	rlf	??_waitFlag+1,f
  2869  0396  083C               	movf	waitFlag@buf,w
  2870  0397  00F8               	movwf	??_waitFlag+2
  2871  0398  01F9               	clrf	??_waitFlag+3
  2872  0399  0877               	movf	??_waitFlag+1,w
  2873  039A  0679               	xorwf	??_waitFlag+3,w
  2874  039B  1D03               	skipz
  2875  039C  2B9F               	goto	u2185
  2876  039D  0876               	movf	??_waitFlag,w
  2877  039E  0678               	xorwf	??_waitFlag+2,w
  2878  039F                     u2185:	
  2879  039F  1D03               	skipz
  2880  03A0  2D64               	goto	l2867
  2881                           
  2882                           ;decode_AX25.c: 83: dPacket[dPacketnum] = buf;
  2883  03A1  083C               	movf	waitFlag@buf,w
  2884  03A2  00F6               	movwf	??_waitFlag
  2885  03A3  0866               	movf	_dPacketnum,w
  2886  03A4  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2887  03A5  0084               	movwf	4
  2888  03A6  0876               	movf	??_waitFlag,w
  2889  03A7  1783               	bsf	3,7	;select IRP bank3
  2890  03A8  0080               	movwf	0
  2891                           
  2892                           ;decode_AX25.c: 84: dPacketnum ++;
  2893  03A9  3001               	movlw	1
  2894  03AA  07E6               	addwf	_dPacketnum,f
  2895  03AB  1803               	skipnc
  2896  03AC  0AE7               	incf	_dPacketnum+1,f
  2897  03AD  3000               	movlw	0
  2898  03AE  07E7               	addwf	_dPacketnum+1,f
  2899                           
  2900                           ;decode_AX25.c: 85: for(UINT j=0;j<8;j++){
  2901  03AF  01A2               	clrf	waitFlag@j
  2902  03B0  01A3               	clrf	waitFlag@j+1
  2903  03B1  3000               	movlw	0
  2904  03B2  0223               	subwf	waitFlag@j+1,w
  2905  03B3  3008               	movlw	8
  2906  03B4  1903               	skipnz
  2907  03B5  0222               	subwf	waitFlag@j,w
  2908  03B6  1803               	btfsc	3,0
  2909  03B7  2BE0               	goto	l2745
  2910  03B8                     l2731:	
  2911                           
  2912                           ;decode_AX25.c: 86: flag_judge = getbit();
  2913  03B8  120A  158A  229B  120A  118A  	fcall	_getbit
  2914  03BD  0871               	movf	?_getbit+1,w
  2915  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  2916  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  2917  03C0  00BB               	movwf	waitFlag@flag_judge+1
  2918  03C1  0870               	movf	?_getbit,w
  2919  03C2  00BA               	movwf	waitFlag@flag_judge
  2920                           
  2921                           ;decode_AX25.c: 87: buf = buf >> 1;
  2922  03C3  083C               	movf	waitFlag@buf,w
  2923  03C4  00F6               	movwf	??_waitFlag
  2924  03C5  1003               	clrc
  2925  03C6  0C76               	rrf	??_waitFlag,w
  2926  03C7  00F7               	movwf	??_waitFlag+1
  2927  03C8  0877               	movf	??_waitFlag+1,w
  2928  03C9  00BC               	movwf	waitFlag@buf
  2929                           
  2930                           ;decode_AX25.c: 89: buf = buf | 0x00;
  2931  03CA  083A               	movf	waitFlag@flag_judge,w
  2932  03CB  043B               	iorwf	waitFlag@flag_judge+1,w
  2933  03CC  1903               	btfsc	3,2
  2934  03CD  2BD3               	goto	l2741
  2935                           
  2936                           ;decode_AX25.c: 91: buf = buf | 0x80;
  2937                           
  2938                           ;decode_AX25.c: 90: }else{
  2939  03CE  083C               	movf	waitFlag@buf,w
  2940  03CF  3880               	iorlw	128
  2941  03D0  00F6               	movwf	??_waitFlag
  2942  03D1  0876               	movf	??_waitFlag,w
  2943  03D2  00BC               	movwf	waitFlag@buf
  2944  03D3                     l2741:	
  2945  03D3  3001               	movlw	1
  2946  03D4  07A2               	addwf	waitFlag@j,f
  2947  03D5  1803               	skipnc
  2948  03D6  0AA3               	incf	waitFlag@j+1,f
  2949  03D7  3000               	movlw	0
  2950  03D8  07A3               	addwf	waitFlag@j+1,f
  2951  03D9  3000               	movlw	0
  2952  03DA  0223               	subwf	waitFlag@j+1,w
  2953  03DB  3008               	movlw	8
  2954  03DC  1903               	skipnz
  2955  03DD  0222               	subwf	waitFlag@j,w
  2956  03DE  1C03               	skipc
  2957  03DF  2BB8               	goto	l2731
  2958  03E0                     l2745:	
  2959                           
  2960                           ;decode_AX25.c: 92: }
  2961                           ;decode_AX25.c: 93: }
  2962                           ;decode_AX25.c: 94: if(buf == ("JQ1YCZ"[1] << 1)){
  2963  03E0  3013               	movlw	low (((STR_1+1)-__stringbase)| (0+32768))
  2964  03E1  0084               	movwf	4
  2965  03E2  120A  158A  2000  120A  118A  	fcall	stringdir
  2966  03E7  00F6               	movwf	??_waitFlag
  2967  03E8  01F7               	clrf	??_waitFlag+1
  2968  03E9  1003               	clrc
  2969  03EA  0DF6               	rlf	??_waitFlag,f
  2970  03EB  0DF7               	rlf	??_waitFlag+1,f
  2971  03EC  083C               	movf	waitFlag@buf,w
  2972  03ED  00F8               	movwf	??_waitFlag+2
  2973  03EE  01F9               	clrf	??_waitFlag+3
  2974  03EF  0877               	movf	??_waitFlag+1,w
  2975  03F0  0679               	xorwf	??_waitFlag+3,w
  2976  03F1  1D03               	skipz
  2977  03F2  2BF5               	goto	u2225
  2978  03F3  0876               	movf	??_waitFlag,w
  2979  03F4  0678               	xorwf	??_waitFlag+2,w
  2980  03F5                     u2225:	
  2981  03F5  1D03               	skipz
  2982  03F6  2D64               	goto	l2867
  2983                           
  2984                           ;decode_AX25.c: 95: dPacket[dPacketnum] = buf;
  2985  03F7  083C               	movf	waitFlag@buf,w
  2986  03F8  00F6               	movwf	??_waitFlag
  2987  03F9  0866               	movf	_dPacketnum,w
  2988  03FA  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2989  03FB  0084               	movwf	4
  2990  03FC  0876               	movf	??_waitFlag,w
  2991  03FD  1783               	bsf	3,7	;select IRP bank3
  2992  03FE  0080               	movwf	0
  2993                           
  2994                           ;decode_AX25.c: 96: dPacketnum ++;
  2995  03FF  3001               	movlw	1
  2996  0400  07E6               	addwf	_dPacketnum,f
  2997  0401  1803               	skipnc
  2998  0402  0AE7               	incf	_dPacketnum+1,f
  2999  0403  3000               	movlw	0
  3000  0404  07E7               	addwf	_dPacketnum+1,f
  3001                           
  3002                           ;decode_AX25.c: 97: for(UINT j=0;j<8;j++){
  3003  0405  01A4               	clrf	waitFlag@j_105
  3004  0406  01A5               	clrf	waitFlag@j_105+1
  3005  0407  3000               	movlw	0
  3006  0408  0225               	subwf	waitFlag@j_105+1,w
  3007  0409  3008               	movlw	8
  3008  040A  1903               	skipnz
  3009  040B  0224               	subwf	waitFlag@j_105,w
  3010  040C  1803               	btfsc	3,0
  3011  040D  2C36               	goto	l2771
  3012  040E                     l2757:	
  3013                           
  3014                           ;decode_AX25.c: 98: flag_judge = getbit();
  3015  040E  120A  158A  229B  120A  118A  	fcall	_getbit
  3016  0413  0871               	movf	?_getbit+1,w
  3017  0414  1283               	bcf	3,5	;RP0=0, select bank0
  3018  0415  1303               	bcf	3,6	;RP1=0, select bank0
  3019  0416  00BB               	movwf	waitFlag@flag_judge+1
  3020  0417  0870               	movf	?_getbit,w
  3021  0418  00BA               	movwf	waitFlag@flag_judge
  3022                           
  3023                           ;decode_AX25.c: 99: buf = buf >> 1;
  3024  0419  083C               	movf	waitFlag@buf,w
  3025  041A  00F6               	movwf	??_waitFlag
  3026  041B  1003               	clrc
  3027  041C  0C76               	rrf	??_waitFlag,w
  3028  041D  00F7               	movwf	??_waitFlag+1
  3029  041E  0877               	movf	??_waitFlag+1,w
  3030  041F  00BC               	movwf	waitFlag@buf
  3031                           
  3032                           ;decode_AX25.c: 101: buf = buf | 0x00;
  3033  0420  083A               	movf	waitFlag@flag_judge,w
  3034  0421  043B               	iorwf	waitFlag@flag_judge+1,w
  3035  0422  1903               	btfsc	3,2
  3036  0423  2C29               	goto	l2767
  3037                           
  3038                           ;decode_AX25.c: 103: buf = buf | 0x80;
  3039                           
  3040                           ;decode_AX25.c: 102: }else{
  3041  0424  083C               	movf	waitFlag@buf,w
  3042  0425  3880               	iorlw	128
  3043  0426  00F6               	movwf	??_waitFlag
  3044  0427  0876               	movf	??_waitFlag,w
  3045  0428  00BC               	movwf	waitFlag@buf
  3046  0429                     l2767:	
  3047  0429  3001               	movlw	1
  3048  042A  07A4               	addwf	waitFlag@j_105,f
  3049  042B  1803               	skipnc
  3050  042C  0AA5               	incf	waitFlag@j_105+1,f
  3051  042D  3000               	movlw	0
  3052  042E  07A5               	addwf	waitFlag@j_105+1,f
  3053  042F  3000               	movlw	0
  3054  0430  0225               	subwf	waitFlag@j_105+1,w
  3055  0431  3008               	movlw	8
  3056  0432  1903               	skipnz
  3057  0433  0224               	subwf	waitFlag@j_105,w
  3058  0434  1C03               	skipc
  3059  0435  2C0E               	goto	l2757
  3060  0436                     l2771:	
  3061                           
  3062                           ;decode_AX25.c: 104: }
  3063                           ;decode_AX25.c: 105: }
  3064                           ;decode_AX25.c: 106: if(buf == ("JQ1YCZ"[2] << 1)){
  3065  0436  3014               	movlw	low (((STR_1+2)-__stringbase)| (0+32768))
  3066  0437  0084               	movwf	4
  3067  0438  120A  158A  2000  120A  118A  	fcall	stringdir
  3068  043D  00F6               	movwf	??_waitFlag
  3069  043E  01F7               	clrf	??_waitFlag+1
  3070  043F  1003               	clrc
  3071  0440  0DF6               	rlf	??_waitFlag,f
  3072  0441  0DF7               	rlf	??_waitFlag+1,f
  3073  0442  083C               	movf	waitFlag@buf,w
  3074  0443  00F8               	movwf	??_waitFlag+2
  3075  0444  01F9               	clrf	??_waitFlag+3
  3076  0445  0877               	movf	??_waitFlag+1,w
  3077  0446  0679               	xorwf	??_waitFlag+3,w
  3078  0447  1D03               	skipz
  3079  0448  2C4B               	goto	u2265
  3080  0449  0876               	movf	??_waitFlag,w
  3081  044A  0678               	xorwf	??_waitFlag+2,w
  3082  044B                     u2265:	
  3083  044B  1D03               	skipz
  3084  044C  2D64               	goto	l2867
  3085                           
  3086                           ;decode_AX25.c: 107: dPacket[dPacketnum] = buf;
  3087  044D  083C               	movf	waitFlag@buf,w
  3088  044E  00F6               	movwf	??_waitFlag
  3089  044F  0866               	movf	_dPacketnum,w
  3090  0450  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3091  0451  0084               	movwf	4
  3092  0452  0876               	movf	??_waitFlag,w
  3093  0453  1783               	bsf	3,7	;select IRP bank3
  3094  0454  0080               	movwf	0
  3095                           
  3096                           ;decode_AX25.c: 108: dPacketnum ++;
  3097  0455  3001               	movlw	1
  3098  0456  07E6               	addwf	_dPacketnum,f
  3099  0457  1803               	skipnc
  3100  0458  0AE7               	incf	_dPacketnum+1,f
  3101  0459  3000               	movlw	0
  3102  045A  07E7               	addwf	_dPacketnum+1,f
  3103                           
  3104                           ;decode_AX25.c: 109: for(UINT j=0;j<8;j++){
  3105  045B  01A6               	clrf	waitFlag@j_107
  3106  045C  01A7               	clrf	waitFlag@j_107+1
  3107  045D  3000               	movlw	0
  3108  045E  0227               	subwf	waitFlag@j_107+1,w
  3109  045F  3008               	movlw	8
  3110  0460  1903               	skipnz
  3111  0461  0226               	subwf	waitFlag@j_107,w
  3112  0462  1803               	btfsc	3,0
  3113  0463  2C8C               	goto	l2797
  3114  0464                     l2783:	
  3115                           
  3116                           ;decode_AX25.c: 110: flag_judge = getbit();
  3117  0464  120A  158A  229B  120A  118A  	fcall	_getbit
  3118  0469  0871               	movf	?_getbit+1,w
  3119  046A  1283               	bcf	3,5	;RP0=0, select bank0
  3120  046B  1303               	bcf	3,6	;RP1=0, select bank0
  3121  046C  00BB               	movwf	waitFlag@flag_judge+1
  3122  046D  0870               	movf	?_getbit,w
  3123  046E  00BA               	movwf	waitFlag@flag_judge
  3124                           
  3125                           ;decode_AX25.c: 111: buf = buf >> 1;
  3126  046F  083C               	movf	waitFlag@buf,w
  3127  0470  00F6               	movwf	??_waitFlag
  3128  0471  1003               	clrc
  3129  0472  0C76               	rrf	??_waitFlag,w
  3130  0473  00F7               	movwf	??_waitFlag+1
  3131  0474  0877               	movf	??_waitFlag+1,w
  3132  0475  00BC               	movwf	waitFlag@buf
  3133                           
  3134                           ;decode_AX25.c: 113: buf = buf | 0x00;
  3135  0476  083A               	movf	waitFlag@flag_judge,w
  3136  0477  043B               	iorwf	waitFlag@flag_judge+1,w
  3137  0478  1903               	btfsc	3,2
  3138  0479  2C7F               	goto	l2793
  3139                           
  3140                           ;decode_AX25.c: 115: buf = buf | 0x80;
  3141                           
  3142                           ;decode_AX25.c: 114: }else{
  3143  047A  083C               	movf	waitFlag@buf,w
  3144  047B  3880               	iorlw	128
  3145  047C  00F6               	movwf	??_waitFlag
  3146  047D  0876               	movf	??_waitFlag,w
  3147  047E  00BC               	movwf	waitFlag@buf
  3148  047F                     l2793:	
  3149  047F  3001               	movlw	1
  3150  0480  07A6               	addwf	waitFlag@j_107,f
  3151  0481  1803               	skipnc
  3152  0482  0AA7               	incf	waitFlag@j_107+1,f
  3153  0483  3000               	movlw	0
  3154  0484  07A7               	addwf	waitFlag@j_107+1,f
  3155  0485  3000               	movlw	0
  3156  0486  0227               	subwf	waitFlag@j_107+1,w
  3157  0487  3008               	movlw	8
  3158  0488  1903               	skipnz
  3159  0489  0226               	subwf	waitFlag@j_107,w
  3160  048A  1C03               	skipc
  3161  048B  2C64               	goto	l2783
  3162  048C                     l2797:	
  3163                           
  3164                           ;decode_AX25.c: 116: }
  3165                           ;decode_AX25.c: 117: }
  3166                           ;decode_AX25.c: 118: if(buf == ("JQ1YCZ"[3] << 1)){
  3167  048C  3015               	movlw	low (((STR_1+3)-__stringbase)| (0+32768))
  3168  048D  0084               	movwf	4
  3169  048E  120A  158A  2000  120A  118A  	fcall	stringdir
  3170  0493  00F6               	movwf	??_waitFlag
  3171  0494  01F7               	clrf	??_waitFlag+1
  3172  0495  1003               	clrc
  3173  0496  0DF6               	rlf	??_waitFlag,f
  3174  0497  0DF7               	rlf	??_waitFlag+1,f
  3175  0498  083C               	movf	waitFlag@buf,w
  3176  0499  00F8               	movwf	??_waitFlag+2
  3177  049A  01F9               	clrf	??_waitFlag+3
  3178  049B  0877               	movf	??_waitFlag+1,w
  3179  049C  0679               	xorwf	??_waitFlag+3,w
  3180  049D  1D03               	skipz
  3181  049E  2CA1               	goto	u2305
  3182  049F  0876               	movf	??_waitFlag,w
  3183  04A0  0678               	xorwf	??_waitFlag+2,w
  3184  04A1                     u2305:	
  3185  04A1  1D03               	skipz
  3186  04A2  2D64               	goto	l2867
  3187                           
  3188                           ;decode_AX25.c: 119: dPacket[dPacketnum] = buf;
  3189  04A3  083C               	movf	waitFlag@buf,w
  3190  04A4  00F6               	movwf	??_waitFlag
  3191  04A5  0866               	movf	_dPacketnum,w
  3192  04A6  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3193  04A7  0084               	movwf	4
  3194  04A8  0876               	movf	??_waitFlag,w
  3195  04A9  1783               	bsf	3,7	;select IRP bank3
  3196  04AA  0080               	movwf	0
  3197                           
  3198                           ;decode_AX25.c: 120: dPacketnum ++;
  3199  04AB  3001               	movlw	1
  3200  04AC  07E6               	addwf	_dPacketnum,f
  3201  04AD  1803               	skipnc
  3202  04AE  0AE7               	incf	_dPacketnum+1,f
  3203  04AF  3000               	movlw	0
  3204  04B0  07E7               	addwf	_dPacketnum+1,f
  3205                           
  3206                           ;decode_AX25.c: 121: for(UINT j=0;j<8;j++){
  3207  04B1  01A8               	clrf	waitFlag@j_109
  3208  04B2  01A9               	clrf	waitFlag@j_109+1
  3209  04B3  3000               	movlw	0
  3210  04B4  0229               	subwf	waitFlag@j_109+1,w
  3211  04B5  3008               	movlw	8
  3212  04B6  1903               	skipnz
  3213  04B7  0228               	subwf	waitFlag@j_109,w
  3214  04B8  1803               	btfsc	3,0
  3215  04B9  2CE2               	goto	l2823
  3216  04BA                     l2809:	
  3217                           
  3218                           ;decode_AX25.c: 122: flag_judge = getbit();
  3219  04BA  120A  158A  229B  120A  118A  	fcall	_getbit
  3220  04BF  0871               	movf	?_getbit+1,w
  3221  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  3222  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  3223  04C2  00BB               	movwf	waitFlag@flag_judge+1
  3224  04C3  0870               	movf	?_getbit,w
  3225  04C4  00BA               	movwf	waitFlag@flag_judge
  3226                           
  3227                           ;decode_AX25.c: 123: buf = buf >> 1;
  3228  04C5  083C               	movf	waitFlag@buf,w
  3229  04C6  00F6               	movwf	??_waitFlag
  3230  04C7  1003               	clrc
  3231  04C8  0C76               	rrf	??_waitFlag,w
  3232  04C9  00F7               	movwf	??_waitFlag+1
  3233  04CA  0877               	movf	??_waitFlag+1,w
  3234  04CB  00BC               	movwf	waitFlag@buf
  3235                           
  3236                           ;decode_AX25.c: 125: buf = buf | 0x00;
  3237  04CC  083A               	movf	waitFlag@flag_judge,w
  3238  04CD  043B               	iorwf	waitFlag@flag_judge+1,w
  3239  04CE  1903               	btfsc	3,2
  3240  04CF  2CD5               	goto	l2819
  3241                           
  3242                           ;decode_AX25.c: 127: buf = buf | 0x80;
  3243                           
  3244                           ;decode_AX25.c: 126: }else{
  3245  04D0  083C               	movf	waitFlag@buf,w
  3246  04D1  3880               	iorlw	128
  3247  04D2  00F6               	movwf	??_waitFlag
  3248  04D3  0876               	movf	??_waitFlag,w
  3249  04D4  00BC               	movwf	waitFlag@buf
  3250  04D5                     l2819:	
  3251  04D5  3001               	movlw	1
  3252  04D6  07A8               	addwf	waitFlag@j_109,f
  3253  04D7  1803               	skipnc
  3254  04D8  0AA9               	incf	waitFlag@j_109+1,f
  3255  04D9  3000               	movlw	0
  3256  04DA  07A9               	addwf	waitFlag@j_109+1,f
  3257  04DB  3000               	movlw	0
  3258  04DC  0229               	subwf	waitFlag@j_109+1,w
  3259  04DD  3008               	movlw	8
  3260  04DE  1903               	skipnz
  3261  04DF  0228               	subwf	waitFlag@j_109,w
  3262  04E0  1C03               	skipc
  3263  04E1  2CBA               	goto	l2809
  3264  04E2                     l2823:	
  3265                           
  3266                           ;decode_AX25.c: 128: }
  3267                           ;decode_AX25.c: 129: }
  3268                           ;decode_AX25.c: 130: if(buf == ("JQ1YCZ"[4] << 1)){
  3269  04E2  3016               	movlw	low (((STR_1+4)-__stringbase)| (0+32768))
  3270  04E3  0084               	movwf	4
  3271  04E4  120A  158A  2000  120A  118A  	fcall	stringdir
  3272  04E9  00F6               	movwf	??_waitFlag
  3273  04EA  01F7               	clrf	??_waitFlag+1
  3274  04EB  1003               	clrc
  3275  04EC  0DF6               	rlf	??_waitFlag,f
  3276  04ED  0DF7               	rlf	??_waitFlag+1,f
  3277  04EE  083C               	movf	waitFlag@buf,w
  3278  04EF  00F8               	movwf	??_waitFlag+2
  3279  04F0  01F9               	clrf	??_waitFlag+3
  3280  04F1  0877               	movf	??_waitFlag+1,w
  3281  04F2  0679               	xorwf	??_waitFlag+3,w
  3282  04F3  1D03               	skipz
  3283  04F4  2CF7               	goto	u2345
  3284  04F5  0876               	movf	??_waitFlag,w
  3285  04F6  0678               	xorwf	??_waitFlag+2,w
  3286  04F7                     u2345:	
  3287  04F7  1D03               	skipz
  3288  04F8  2D64               	goto	l2867
  3289                           
  3290                           ;decode_AX25.c: 131: dPacket[dPacketnum] = buf;
  3291  04F9  083C               	movf	waitFlag@buf,w
  3292  04FA  00F6               	movwf	??_waitFlag
  3293  04FB  0866               	movf	_dPacketnum,w
  3294  04FC  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3295  04FD  0084               	movwf	4
  3296  04FE  0876               	movf	??_waitFlag,w
  3297  04FF  1783               	bsf	3,7	;select IRP bank3
  3298  0500  0080               	movwf	0
  3299                           
  3300                           ;decode_AX25.c: 132: dPacketnum ++;
  3301  0501  3001               	movlw	1
  3302  0502  07E6               	addwf	_dPacketnum,f
  3303  0503  1803               	skipnc
  3304  0504  0AE7               	incf	_dPacketnum+1,f
  3305  0505  3000               	movlw	0
  3306  0506  07E7               	addwf	_dPacketnum+1,f
  3307                           
  3308                           ;decode_AX25.c: 133: for(UINT j=0;j<8;j++){
  3309  0507  01AA               	clrf	waitFlag@j_111
  3310  0508  01AB               	clrf	waitFlag@j_111+1
  3311  0509  3000               	movlw	0
  3312  050A  022B               	subwf	waitFlag@j_111+1,w
  3313  050B  3008               	movlw	8
  3314  050C  1903               	skipnz
  3315  050D  022A               	subwf	waitFlag@j_111,w
  3316  050E  1803               	btfsc	3,0
  3317  050F  2D38               	goto	l2849
  3318  0510                     l2835:	
  3319                           
  3320                           ;decode_AX25.c: 134: flag_judge = getbit();
  3321  0510  120A  158A  229B  120A  118A  	fcall	_getbit
  3322  0515  0871               	movf	?_getbit+1,w
  3323  0516  1283               	bcf	3,5	;RP0=0, select bank0
  3324  0517  1303               	bcf	3,6	;RP1=0, select bank0
  3325  0518  00BB               	movwf	waitFlag@flag_judge+1
  3326  0519  0870               	movf	?_getbit,w
  3327  051A  00BA               	movwf	waitFlag@flag_judge
  3328                           
  3329                           ;decode_AX25.c: 135: buf = buf >> 1;
  3330  051B  083C               	movf	waitFlag@buf,w
  3331  051C  00F6               	movwf	??_waitFlag
  3332  051D  1003               	clrc
  3333  051E  0C76               	rrf	??_waitFlag,w
  3334  051F  00F7               	movwf	??_waitFlag+1
  3335  0520  0877               	movf	??_waitFlag+1,w
  3336  0521  00BC               	movwf	waitFlag@buf
  3337                           
  3338                           ;decode_AX25.c: 137: buf = buf | 0x00;
  3339  0522  083A               	movf	waitFlag@flag_judge,w
  3340  0523  043B               	iorwf	waitFlag@flag_judge+1,w
  3341  0524  1903               	btfsc	3,2
  3342  0525  2D2B               	goto	l2845
  3343                           
  3344                           ;decode_AX25.c: 139: buf = buf | 0x80;
  3345                           
  3346                           ;decode_AX25.c: 138: }else{
  3347  0526  083C               	movf	waitFlag@buf,w
  3348  0527  3880               	iorlw	128
  3349  0528  00F6               	movwf	??_waitFlag
  3350  0529  0876               	movf	??_waitFlag,w
  3351  052A  00BC               	movwf	waitFlag@buf
  3352  052B                     l2845:	
  3353  052B  3001               	movlw	1
  3354  052C  07AA               	addwf	waitFlag@j_111,f
  3355  052D  1803               	skipnc
  3356  052E  0AAB               	incf	waitFlag@j_111+1,f
  3357  052F  3000               	movlw	0
  3358  0530  07AB               	addwf	waitFlag@j_111+1,f
  3359  0531  3000               	movlw	0
  3360  0532  022B               	subwf	waitFlag@j_111+1,w
  3361  0533  3008               	movlw	8
  3362  0534  1903               	skipnz
  3363  0535  022A               	subwf	waitFlag@j_111,w
  3364  0536  1C03               	skipc
  3365  0537  2D10               	goto	l2835
  3366  0538                     l2849:	
  3367                           
  3368                           ;decode_AX25.c: 140: }
  3369                           ;decode_AX25.c: 141: }
  3370                           ;decode_AX25.c: 142: if(buf == ("JQ1YCZ"[5] << 1)){
  3371  0538  3017               	movlw	low (((STR_1+5)-__stringbase)| (0+32768))
  3372  0539  0084               	movwf	4
  3373  053A  120A  158A  2000  120A  118A  	fcall	stringdir
  3374  053F  00F6               	movwf	??_waitFlag
  3375  0540  01F7               	clrf	??_waitFlag+1
  3376  0541  1003               	clrc
  3377  0542  0DF6               	rlf	??_waitFlag,f
  3378  0543  0DF7               	rlf	??_waitFlag+1,f
  3379  0544  083C               	movf	waitFlag@buf,w
  3380  0545  00F8               	movwf	??_waitFlag+2
  3381  0546  01F9               	clrf	??_waitFlag+3
  3382  0547  0877               	movf	??_waitFlag+1,w
  3383  0548  0679               	xorwf	??_waitFlag+3,w
  3384  0549  1D03               	skipz
  3385  054A  2D4D               	goto	u2385
  3386  054B  0876               	movf	??_waitFlag,w
  3387  054C  0678               	xorwf	??_waitFlag+2,w
  3388  054D                     u2385:	
  3389  054D  1D03               	skipz
  3390  054E  2D64               	goto	l2867
  3391                           
  3392                           ;decode_AX25.c: 143: dPacket[dPacketnum] = buf;
  3393  054F  083C               	movf	waitFlag@buf,w
  3394  0550  00F6               	movwf	??_waitFlag
  3395  0551  0866               	movf	_dPacketnum,w
  3396  0552  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3397  0553  0084               	movwf	4
  3398  0554  0876               	movf	??_waitFlag,w
  3399  0555  1783               	bsf	3,7	;select IRP bank3
  3400  0556  0080               	movwf	0
  3401                           
  3402                           ;decode_AX25.c: 144: dPacketnum ++;
  3403  0557  3001               	movlw	1
  3404  0558  07E6               	addwf	_dPacketnum,f
  3405  0559  1803               	skipnc
  3406  055A  0AE7               	incf	_dPacketnum+1,f
  3407  055B  3000               	movlw	0
  3408  055C  07E7               	addwf	_dPacketnum+1,f
  3409                           
  3410                           ;decode_AX25.c: 145: rcv_state ++;
  3411  055D  3001               	movlw	1
  3412  055E  07EA               	addwf	_rcv_state,f
  3413  055F  1803               	skipnc
  3414  0560  0AEB               	incf	_rcv_state+1,f
  3415  0561  3000               	movlw	0
  3416  0562  07EB               	addwf	_rcv_state+1,f
  3417                           
  3418                           ;decode_AX25.c: 146: }else{
  3419  0563  2D66               	goto	l198
  3420  0564                     l2867:	
  3421                           ;decode_AX25.c: 160: }
  3422                           ;decode_AX25.c: 161: }else{
  3423                           
  3424                           ;decode_AX25.c: 159: dPacketnum = 0;
  3425                           
  3426                           ;decode_AX25.c: 157: }
  3427                           ;decode_AX25.c: 158: }else{
  3428                           
  3429                           ;decode_AX25.c: 156: dPacketnum = 0;
  3430                           
  3431                           ;decode_AX25.c: 154: }
  3432                           ;decode_AX25.c: 155: }else{
  3433                           
  3434                           ;decode_AX25.c: 153: dPacketnum = 0;
  3435                           
  3436                           ;decode_AX25.c: 151: }
  3437                           ;decode_AX25.c: 152: }else{
  3438                           
  3439                           ;decode_AX25.c: 150: dPacketnum = 0;
  3440                           
  3441                           ;decode_AX25.c: 148: }
  3442                           ;decode_AX25.c: 149: }else{
  3443                           
  3444                           ;decode_AX25.c: 147: dPacketnum = 0;
  3445                           
  3446                           
  3447                           ;decode_AX25.c: 162: dPacketnum = 0;
  3448  0564  01E6               	clrf	_dPacketnum
  3449  0565  01E7               	clrf	_dPacketnum+1
  3450  0566                     l198:	
  3451                           
  3452                           ;decode_AX25.c: 163: }
  3453                           ;decode_AX25.c: 165: for(UINT j=0;j<8;j++){
  3454  0566  01AC               	clrf	waitFlag@j_113
  3455  0567  01AD               	clrf	waitFlag@j_113+1
  3456  0568  3000               	movlw	0
  3457  0569  022D               	subwf	waitFlag@j_113+1,w
  3458  056A  3008               	movlw	8
  3459  056B  1903               	skipnz
  3460  056C  022C               	subwf	waitFlag@j_113,w
  3461  056D  1803               	btfsc	3,0
  3462  056E  2D97               	goto	l2887
  3463  056F                     l2873:	
  3464                           
  3465                           ;decode_AX25.c: 166: flag_judge = getbit();
  3466  056F  120A  158A  229B  120A  118A  	fcall	_getbit
  3467  0574  0871               	movf	?_getbit+1,w
  3468  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3469  0576  1303               	bcf	3,6	;RP1=0, select bank0
  3470  0577  00BB               	movwf	waitFlag@flag_judge+1
  3471  0578  0870               	movf	?_getbit,w
  3472  0579  00BA               	movwf	waitFlag@flag_judge
  3473                           
  3474                           ;decode_AX25.c: 167: buf = buf >> 1;
  3475  057A  083C               	movf	waitFlag@buf,w
  3476  057B  00F6               	movwf	??_waitFlag
  3477  057C  1003               	clrc
  3478  057D  0C76               	rrf	??_waitFlag,w
  3479  057E  00F7               	movwf	??_waitFlag+1
  3480  057F  0877               	movf	??_waitFlag+1,w
  3481  0580  00BC               	movwf	waitFlag@buf
  3482                           
  3483                           ;decode_AX25.c: 169: buf = buf | 0x00;
  3484  0581  083A               	movf	waitFlag@flag_judge,w
  3485  0582  043B               	iorwf	waitFlag@flag_judge+1,w
  3486  0583  1903               	btfsc	3,2
  3487  0584  2D8A               	goto	l2883
  3488                           
  3489                           ;decode_AX25.c: 171: buf = buf | 0x80;
  3490                           
  3491                           ;decode_AX25.c: 170: }else{
  3492  0585  083C               	movf	waitFlag@buf,w
  3493  0586  3880               	iorlw	128
  3494  0587  00F6               	movwf	??_waitFlag
  3495  0588  0876               	movf	??_waitFlag,w
  3496  0589  00BC               	movwf	waitFlag@buf
  3497  058A                     l2883:	
  3498  058A  3001               	movlw	1
  3499  058B  07AC               	addwf	waitFlag@j_113,f
  3500  058C  1803               	skipnc
  3501  058D  0AAD               	incf	waitFlag@j_113+1,f
  3502  058E  3000               	movlw	0
  3503  058F  07AD               	addwf	waitFlag@j_113+1,f
  3504  0590  3000               	movlw	0
  3505  0591  022D               	subwf	waitFlag@j_113+1,w
  3506  0592  3008               	movlw	8
  3507  0593  1903               	skipnz
  3508  0594  022C               	subwf	waitFlag@j_113,w
  3509  0595  1C03               	skipc
  3510  0596  2D6F               	goto	l2873
  3511  0597                     l2887:	
  3512                           
  3513                           ;decode_AX25.c: 172: }
  3514                           ;decode_AX25.c: 173: }
  3515                           ;decode_AX25.c: 174: dPacket[dPacketnum] = buf;
  3516  0597  083C               	movf	waitFlag@buf,w
  3517  0598  00F6               	movwf	??_waitFlag
  3518  0599  0866               	movf	_dPacketnum,w
  3519  059A  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3520  059B  0084               	movwf	4
  3521  059C  0876               	movf	??_waitFlag,w
  3522  059D  1783               	bsf	3,7	;select IRP bank3
  3523  059E  0080               	movwf	0
  3524                           
  3525                           ;decode_AX25.c: 175: dPacketnum ++;
  3526  059F  3001               	movlw	1
  3527  05A0  07E6               	addwf	_dPacketnum,f
  3528  05A1  1803               	skipnc
  3529  05A2  0AE7               	incf	_dPacketnum+1,f
  3530  05A3  3000               	movlw	0
  3531  05A4  07E7               	addwf	_dPacketnum+1,f
  3532                           
  3533                           ;decode_AX25.c: 176: for(UINT j=0;j<8;j++){
  3534  05A5  01AE               	clrf	waitFlag@j_114
  3535  05A6  01AF               	clrf	waitFlag@j_114+1
  3536  05A7  3000               	movlw	0
  3537  05A8  022F               	subwf	waitFlag@j_114+1,w
  3538  05A9  3008               	movlw	8
  3539  05AA  1903               	skipnz
  3540  05AB  022E               	subwf	waitFlag@j_114,w
  3541  05AC  1803               	btfsc	3,0
  3542  05AD  2DD6               	goto	l2911
  3543  05AE                     l2897:	
  3544                           
  3545                           ;decode_AX25.c: 177: flag_judge = getbit();
  3546  05AE  120A  158A  229B  120A  118A  	fcall	_getbit
  3547  05B3  0871               	movf	?_getbit+1,w
  3548  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  3549  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  3550  05B6  00BB               	movwf	waitFlag@flag_judge+1
  3551  05B7  0870               	movf	?_getbit,w
  3552  05B8  00BA               	movwf	waitFlag@flag_judge
  3553                           
  3554                           ;decode_AX25.c: 178: buf = buf >> 1;
  3555  05B9  083C               	movf	waitFlag@buf,w
  3556  05BA  00F6               	movwf	??_waitFlag
  3557  05BB  1003               	clrc
  3558  05BC  0C76               	rrf	??_waitFlag,w
  3559  05BD  00F7               	movwf	??_waitFlag+1
  3560  05BE  0877               	movf	??_waitFlag+1,w
  3561  05BF  00BC               	movwf	waitFlag@buf
  3562                           
  3563                           ;decode_AX25.c: 180: buf = buf | 0x00;
  3564  05C0  083A               	movf	waitFlag@flag_judge,w
  3565  05C1  043B               	iorwf	waitFlag@flag_judge+1,w
  3566  05C2  1903               	btfsc	3,2
  3567  05C3  2DC9               	goto	l2907
  3568                           
  3569                           ;decode_AX25.c: 182: buf = buf | 0x80;
  3570                           
  3571                           ;decode_AX25.c: 181: }else{
  3572  05C4  083C               	movf	waitFlag@buf,w
  3573  05C5  3880               	iorlw	128
  3574  05C6  00F6               	movwf	??_waitFlag
  3575  05C7  0876               	movf	??_waitFlag,w
  3576  05C8  00BC               	movwf	waitFlag@buf
  3577  05C9                     l2907:	
  3578  05C9  3001               	movlw	1
  3579  05CA  07AE               	addwf	waitFlag@j_114,f
  3580  05CB  1803               	skipnc
  3581  05CC  0AAF               	incf	waitFlag@j_114+1,f
  3582  05CD  3000               	movlw	0
  3583  05CE  07AF               	addwf	waitFlag@j_114+1,f
  3584  05CF  3000               	movlw	0
  3585  05D0  022F               	subwf	waitFlag@j_114+1,w
  3586  05D1  3008               	movlw	8
  3587  05D2  1903               	skipnz
  3588  05D3  022E               	subwf	waitFlag@j_114,w
  3589  05D4  1C03               	skipc
  3590  05D5  2DAE               	goto	l2897
  3591  05D6                     l2911:	
  3592                           
  3593                           ;decode_AX25.c: 183: }
  3594                           ;decode_AX25.c: 184: }
  3595                           ;decode_AX25.c: 185: if(buf == ("JQ1ZHX"[0] << 1)){
  3596  05D6  300B               	movlw	low (STR_7-__stringbase)
  3597  05D7  0084               	movwf	4
  3598  05D8  120A  158A  2000  120A  118A  	fcall	stringdir
  3599  05DD  00F6               	movwf	??_waitFlag
  3600  05DE  01F7               	clrf	??_waitFlag+1
  3601  05DF  1003               	clrc
  3602  05E0  0DF6               	rlf	??_waitFlag,f
  3603  05E1  0DF7               	rlf	??_waitFlag+1,f
  3604  05E2  083C               	movf	waitFlag@buf,w
  3605  05E3  00F8               	movwf	??_waitFlag+2
  3606  05E4  01F9               	clrf	??_waitFlag+3
  3607  05E5  0877               	movf	??_waitFlag+1,w
  3608  05E6  0679               	xorwf	??_waitFlag+3,w
  3609  05E7  1D03               	skipz
  3610  05E8  2DEB               	goto	u2455
  3611  05E9  0876               	movf	??_waitFlag,w
  3612  05EA  0678               	xorwf	??_waitFlag+2,w
  3613  05EB                     u2455:	
  3614  05EB  1D03               	skipz
  3615  05EC  2FB0               	goto	l3059
  3616                           
  3617                           ;decode_AX25.c: 186: dPacket[dPacketnum] = buf;
  3618  05ED  083C               	movf	waitFlag@buf,w
  3619  05EE  00F6               	movwf	??_waitFlag
  3620  05EF  0866               	movf	_dPacketnum,w
  3621  05F0  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3622  05F1  0084               	movwf	4
  3623  05F2  0876               	movf	??_waitFlag,w
  3624  05F3  1783               	bsf	3,7	;select IRP bank3
  3625  05F4  0080               	movwf	0
  3626                           
  3627                           ;decode_AX25.c: 187: dPacketnum ++;
  3628  05F5  3001               	movlw	1
  3629  05F6  07E6               	addwf	_dPacketnum,f
  3630  05F7  1803               	skipnc
  3631  05F8  0AE7               	incf	_dPacketnum+1,f
  3632  05F9  3000               	movlw	0
  3633  05FA  07E7               	addwf	_dPacketnum+1,f
  3634                           
  3635                           ;decode_AX25.c: 188: for(UINT j=0;j<8;j++){
  3636  05FB  01B0               	clrf	waitFlag@j_116
  3637  05FC  01B1               	clrf	waitFlag@j_116+1
  3638  05FD  3000               	movlw	0
  3639  05FE  0231               	subwf	waitFlag@j_116+1,w
  3640  05FF  3008               	movlw	8
  3641  0600  1903               	skipnz
  3642  0601  0230               	subwf	waitFlag@j_116,w
  3643  0602  1803               	btfsc	3,0
  3644  0603  2E2C               	goto	l2937
  3645  0604                     l2923:	
  3646                           
  3647                           ;decode_AX25.c: 189: flag_judge = getbit();
  3648  0604  120A  158A  229B  120A  118A  	fcall	_getbit
  3649  0609  0871               	movf	?_getbit+1,w
  3650  060A  1283               	bcf	3,5	;RP0=0, select bank0
  3651  060B  1303               	bcf	3,6	;RP1=0, select bank0
  3652  060C  00BB               	movwf	waitFlag@flag_judge+1
  3653  060D  0870               	movf	?_getbit,w
  3654  060E  00BA               	movwf	waitFlag@flag_judge
  3655                           
  3656                           ;decode_AX25.c: 190: buf = buf >> 1;
  3657  060F  083C               	movf	waitFlag@buf,w
  3658  0610  00F6               	movwf	??_waitFlag
  3659  0611  1003               	clrc
  3660  0612  0C76               	rrf	??_waitFlag,w
  3661  0613  00F7               	movwf	??_waitFlag+1
  3662  0614  0877               	movf	??_waitFlag+1,w
  3663  0615  00BC               	movwf	waitFlag@buf
  3664                           
  3665                           ;decode_AX25.c: 192: buf = buf | 0x00;
  3666  0616  083A               	movf	waitFlag@flag_judge,w
  3667  0617  043B               	iorwf	waitFlag@flag_judge+1,w
  3668  0618  1903               	btfsc	3,2
  3669  0619  2E1F               	goto	l2933
  3670                           
  3671                           ;decode_AX25.c: 194: buf = buf | 0x80;
  3672                           
  3673                           ;decode_AX25.c: 193: }else{
  3674  061A  083C               	movf	waitFlag@buf,w
  3675  061B  3880               	iorlw	128
  3676  061C  00F6               	movwf	??_waitFlag
  3677  061D  0876               	movf	??_waitFlag,w
  3678  061E  00BC               	movwf	waitFlag@buf
  3679  061F                     l2933:	
  3680  061F  3001               	movlw	1
  3681  0620  07B0               	addwf	waitFlag@j_116,f
  3682  0621  1803               	skipnc
  3683  0622  0AB1               	incf	waitFlag@j_116+1,f
  3684  0623  3000               	movlw	0
  3685  0624  07B1               	addwf	waitFlag@j_116+1,f
  3686  0625  3000               	movlw	0
  3687  0626  0231               	subwf	waitFlag@j_116+1,w
  3688  0627  3008               	movlw	8
  3689  0628  1903               	skipnz
  3690  0629  0230               	subwf	waitFlag@j_116,w
  3691  062A  1C03               	skipc
  3692  062B  2E04               	goto	l2923
  3693  062C                     l2937:	
  3694                           
  3695                           ;decode_AX25.c: 195: }
  3696                           ;decode_AX25.c: 196: }
  3697                           ;decode_AX25.c: 197: if(buf == ("JQ1ZHX"[1] << 1)){
  3698  062C  300C               	movlw	low (((STR_7+1)-__stringbase)| (0+32768))
  3699  062D  0084               	movwf	4
  3700  062E  120A  158A  2000  120A  118A  	fcall	stringdir
  3701  0633  00F6               	movwf	??_waitFlag
  3702  0634  01F7               	clrf	??_waitFlag+1
  3703  0635  1003               	clrc
  3704  0636  0DF6               	rlf	??_waitFlag,f
  3705  0637  0DF7               	rlf	??_waitFlag+1,f
  3706  0638  083C               	movf	waitFlag@buf,w
  3707  0639  00F8               	movwf	??_waitFlag+2
  3708  063A  01F9               	clrf	??_waitFlag+3
  3709  063B  0877               	movf	??_waitFlag+1,w
  3710  063C  0679               	xorwf	??_waitFlag+3,w
  3711  063D  1D03               	skipz
  3712  063E  2E41               	goto	u2495
  3713  063F  0876               	movf	??_waitFlag,w
  3714  0640  0678               	xorwf	??_waitFlag+2,w
  3715  0641                     u2495:	
  3716  0641  1D03               	skipz
  3717  0642  2FB0               	goto	l3059
  3718                           
  3719                           ;decode_AX25.c: 198: dPacket[dPacketnum] = buf;
  3720  0643  083C               	movf	waitFlag@buf,w
  3721  0644  00F6               	movwf	??_waitFlag
  3722  0645  0866               	movf	_dPacketnum,w
  3723  0646  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3724  0647  0084               	movwf	4
  3725  0648  0876               	movf	??_waitFlag,w
  3726  0649  1783               	bsf	3,7	;select IRP bank3
  3727  064A  0080               	movwf	0
  3728                           
  3729                           ;decode_AX25.c: 199: dPacketnum ++;
  3730  064B  3001               	movlw	1
  3731  064C  07E6               	addwf	_dPacketnum,f
  3732  064D  1803               	skipnc
  3733  064E  0AE7               	incf	_dPacketnum+1,f
  3734  064F  3000               	movlw	0
  3735  0650  07E7               	addwf	_dPacketnum+1,f
  3736                           
  3737                           ;decode_AX25.c: 200: for(UINT j=0;j<8;j++){
  3738  0651  01B2               	clrf	waitFlag@j_118
  3739  0652  01B3               	clrf	waitFlag@j_118+1
  3740  0653  3000               	movlw	0
  3741  0654  0233               	subwf	waitFlag@j_118+1,w
  3742  0655  3008               	movlw	8
  3743  0656  1903               	skipnz
  3744  0657  0232               	subwf	waitFlag@j_118,w
  3745  0658  1803               	btfsc	3,0
  3746  0659  2E82               	goto	l2963
  3747  065A                     l2949:	
  3748                           
  3749                           ;decode_AX25.c: 201: flag_judge = getbit();
  3750  065A  120A  158A  229B  120A  118A  	fcall	_getbit
  3751  065F  0871               	movf	?_getbit+1,w
  3752  0660  1283               	bcf	3,5	;RP0=0, select bank0
  3753  0661  1303               	bcf	3,6	;RP1=0, select bank0
  3754  0662  00BB               	movwf	waitFlag@flag_judge+1
  3755  0663  0870               	movf	?_getbit,w
  3756  0664  00BA               	movwf	waitFlag@flag_judge
  3757                           
  3758                           ;decode_AX25.c: 202: buf = buf >> 1;
  3759  0665  083C               	movf	waitFlag@buf,w
  3760  0666  00F6               	movwf	??_waitFlag
  3761  0667  1003               	clrc
  3762  0668  0C76               	rrf	??_waitFlag,w
  3763  0669  00F7               	movwf	??_waitFlag+1
  3764  066A  0877               	movf	??_waitFlag+1,w
  3765  066B  00BC               	movwf	waitFlag@buf
  3766                           
  3767                           ;decode_AX25.c: 204: buf = buf | 0x00;
  3768  066C  083A               	movf	waitFlag@flag_judge,w
  3769  066D  043B               	iorwf	waitFlag@flag_judge+1,w
  3770  066E  1903               	btfsc	3,2
  3771  066F  2E75               	goto	l2959
  3772                           
  3773                           ;decode_AX25.c: 206: buf = buf | 0x80;
  3774                           
  3775                           ;decode_AX25.c: 205: }else{
  3776  0670  083C               	movf	waitFlag@buf,w
  3777  0671  3880               	iorlw	128
  3778  0672  00F6               	movwf	??_waitFlag
  3779  0673  0876               	movf	??_waitFlag,w
  3780  0674  00BC               	movwf	waitFlag@buf
  3781  0675                     l2959:	
  3782  0675  3001               	movlw	1
  3783  0676  07B2               	addwf	waitFlag@j_118,f
  3784  0677  1803               	skipnc
  3785  0678  0AB3               	incf	waitFlag@j_118+1,f
  3786  0679  3000               	movlw	0
  3787  067A  07B3               	addwf	waitFlag@j_118+1,f
  3788  067B  3000               	movlw	0
  3789  067C  0233               	subwf	waitFlag@j_118+1,w
  3790  067D  3008               	movlw	8
  3791  067E  1903               	skipnz
  3792  067F  0232               	subwf	waitFlag@j_118,w
  3793  0680  1C03               	skipc
  3794  0681  2E5A               	goto	l2949
  3795  0682                     l2963:	
  3796                           
  3797                           ;decode_AX25.c: 207: }
  3798                           ;decode_AX25.c: 208: }
  3799                           ;decode_AX25.c: 209: if(buf == ("JQ1ZHX"[2] << 1)){
  3800  0682  300D               	movlw	low (((STR_7+2)-__stringbase)| (0+32768))
  3801  0683  0084               	movwf	4
  3802  0684  120A  158A  2000  120A  118A  	fcall	stringdir
  3803  0689  00F6               	movwf	??_waitFlag
  3804  068A  01F7               	clrf	??_waitFlag+1
  3805  068B  1003               	clrc
  3806  068C  0DF6               	rlf	??_waitFlag,f
  3807  068D  0DF7               	rlf	??_waitFlag+1,f
  3808  068E  083C               	movf	waitFlag@buf,w
  3809  068F  00F8               	movwf	??_waitFlag+2
  3810  0690  01F9               	clrf	??_waitFlag+3
  3811  0691  0877               	movf	??_waitFlag+1,w
  3812  0692  0679               	xorwf	??_waitFlag+3,w
  3813  0693  1D03               	skipz
  3814  0694  2E97               	goto	u2535
  3815  0695  0876               	movf	??_waitFlag,w
  3816  0696  0678               	xorwf	??_waitFlag+2,w
  3817  0697                     u2535:	
  3818  0697  1D03               	skipz
  3819  0698  2FB0               	goto	l3059
  3820                           
  3821                           ;decode_AX25.c: 210: dPacket[dPacketnum] = buf;
  3822  0699  083C               	movf	waitFlag@buf,w
  3823  069A  00F6               	movwf	??_waitFlag
  3824  069B  0866               	movf	_dPacketnum,w
  3825  069C  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3826  069D  0084               	movwf	4
  3827  069E  0876               	movf	??_waitFlag,w
  3828  069F  1783               	bsf	3,7	;select IRP bank3
  3829  06A0  0080               	movwf	0
  3830                           
  3831                           ;decode_AX25.c: 211: dPacketnum ++;
  3832  06A1  3001               	movlw	1
  3833  06A2  07E6               	addwf	_dPacketnum,f
  3834  06A3  1803               	skipnc
  3835  06A4  0AE7               	incf	_dPacketnum+1,f
  3836  06A5  3000               	movlw	0
  3837  06A6  07E7               	addwf	_dPacketnum+1,f
  3838                           
  3839                           ;decode_AX25.c: 212: for(UINT j=0;j<8;j++){
  3840  06A7  01B4               	clrf	waitFlag@j_120
  3841  06A8  01B5               	clrf	waitFlag@j_120+1
  3842  06A9  3000               	movlw	0
  3843  06AA  0235               	subwf	waitFlag@j_120+1,w
  3844  06AB  3008               	movlw	8
  3845  06AC  1903               	skipnz
  3846  06AD  0234               	subwf	waitFlag@j_120,w
  3847  06AE  1803               	btfsc	3,0
  3848  06AF  2ED8               	goto	l2989
  3849  06B0                     l2975:	
  3850                           
  3851                           ;decode_AX25.c: 213: flag_judge = getbit();
  3852  06B0  120A  158A  229B  120A  118A  	fcall	_getbit
  3853  06B5  0871               	movf	?_getbit+1,w
  3854  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  3855  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  3856  06B8  00BB               	movwf	waitFlag@flag_judge+1
  3857  06B9  0870               	movf	?_getbit,w
  3858  06BA  00BA               	movwf	waitFlag@flag_judge
  3859                           
  3860                           ;decode_AX25.c: 214: buf = buf >> 1;
  3861  06BB  083C               	movf	waitFlag@buf,w
  3862  06BC  00F6               	movwf	??_waitFlag
  3863  06BD  1003               	clrc
  3864  06BE  0C76               	rrf	??_waitFlag,w
  3865  06BF  00F7               	movwf	??_waitFlag+1
  3866  06C0  0877               	movf	??_waitFlag+1,w
  3867  06C1  00BC               	movwf	waitFlag@buf
  3868                           
  3869                           ;decode_AX25.c: 216: buf = buf | 0x00;
  3870  06C2  083A               	movf	waitFlag@flag_judge,w
  3871  06C3  043B               	iorwf	waitFlag@flag_judge+1,w
  3872  06C4  1903               	btfsc	3,2
  3873  06C5  2ECB               	goto	l2985
  3874                           
  3875                           ;decode_AX25.c: 218: buf = buf | 0x80;
  3876                           
  3877                           ;decode_AX25.c: 217: }else{
  3878  06C6  083C               	movf	waitFlag@buf,w
  3879  06C7  3880               	iorlw	128
  3880  06C8  00F6               	movwf	??_waitFlag
  3881  06C9  0876               	movf	??_waitFlag,w
  3882  06CA  00BC               	movwf	waitFlag@buf
  3883  06CB                     l2985:	
  3884  06CB  3001               	movlw	1
  3885  06CC  07B4               	addwf	waitFlag@j_120,f
  3886  06CD  1803               	skipnc
  3887  06CE  0AB5               	incf	waitFlag@j_120+1,f
  3888  06CF  3000               	movlw	0
  3889  06D0  07B5               	addwf	waitFlag@j_120+1,f
  3890  06D1  3000               	movlw	0
  3891  06D2  0235               	subwf	waitFlag@j_120+1,w
  3892  06D3  3008               	movlw	8
  3893  06D4  1903               	skipnz
  3894  06D5  0234               	subwf	waitFlag@j_120,w
  3895  06D6  1C03               	skipc
  3896  06D7  2EB0               	goto	l2975
  3897  06D8                     l2989:	
  3898                           
  3899                           ;decode_AX25.c: 219: }
  3900                           ;decode_AX25.c: 220: }
  3901                           ;decode_AX25.c: 221: if(buf == ("JQ1ZHX"[3] << 1)){
  3902  06D8  300E               	movlw	low (((STR_7+3)-__stringbase)| (0+32768))
  3903  06D9  0084               	movwf	4
  3904  06DA  120A  158A  2000  120A  118A  	fcall	stringdir
  3905  06DF  00F6               	movwf	??_waitFlag
  3906  06E0  01F7               	clrf	??_waitFlag+1
  3907  06E1  1003               	clrc
  3908  06E2  0DF6               	rlf	??_waitFlag,f
  3909  06E3  0DF7               	rlf	??_waitFlag+1,f
  3910  06E4  083C               	movf	waitFlag@buf,w
  3911  06E5  00F8               	movwf	??_waitFlag+2
  3912  06E6  01F9               	clrf	??_waitFlag+3
  3913  06E7  0877               	movf	??_waitFlag+1,w
  3914  06E8  0679               	xorwf	??_waitFlag+3,w
  3915  06E9  1D03               	skipz
  3916  06EA  2EED               	goto	u2575
  3917  06EB  0876               	movf	??_waitFlag,w
  3918  06EC  0678               	xorwf	??_waitFlag+2,w
  3919  06ED                     u2575:	
  3920  06ED  1D03               	skipz
  3921  06EE  2FB0               	goto	l3059
  3922                           
  3923                           ;decode_AX25.c: 222: dPacket[dPacketnum] = buf;
  3924  06EF  083C               	movf	waitFlag@buf,w
  3925  06F0  00F6               	movwf	??_waitFlag
  3926  06F1  0866               	movf	_dPacketnum,w
  3927  06F2  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3928  06F3  0084               	movwf	4
  3929  06F4  0876               	movf	??_waitFlag,w
  3930  06F5  1783               	bsf	3,7	;select IRP bank3
  3931  06F6  0080               	movwf	0
  3932                           
  3933                           ;decode_AX25.c: 223: dPacketnum ++;
  3934  06F7  3001               	movlw	1
  3935  06F8  07E6               	addwf	_dPacketnum,f
  3936  06F9  1803               	skipnc
  3937  06FA  0AE7               	incf	_dPacketnum+1,f
  3938  06FB  3000               	movlw	0
  3939  06FC  07E7               	addwf	_dPacketnum+1,f
  3940                           
  3941                           ;decode_AX25.c: 224: for(UINT j=0;j<8;j++){
  3942  06FD  01B6               	clrf	waitFlag@j_122
  3943  06FE  01B7               	clrf	waitFlag@j_122+1
  3944  06FF  3000               	movlw	0
  3945  0700  0237               	subwf	waitFlag@j_122+1,w
  3946  0701  3008               	movlw	8
  3947  0702  1903               	skipnz
  3948  0703  0236               	subwf	waitFlag@j_122,w
  3949  0704  1803               	btfsc	3,0
  3950  0705  2F2E               	goto	l3015
  3951  0706                     l3001:	
  3952                           
  3953                           ;decode_AX25.c: 225: flag_judge = getbit();
  3954  0706  120A  158A  229B  120A  118A  	fcall	_getbit
  3955  070B  0871               	movf	?_getbit+1,w
  3956  070C  1283               	bcf	3,5	;RP0=0, select bank0
  3957  070D  1303               	bcf	3,6	;RP1=0, select bank0
  3958  070E  00BB               	movwf	waitFlag@flag_judge+1
  3959  070F  0870               	movf	?_getbit,w
  3960  0710  00BA               	movwf	waitFlag@flag_judge
  3961                           
  3962                           ;decode_AX25.c: 226: buf = buf >> 1;
  3963  0711  083C               	movf	waitFlag@buf,w
  3964  0712  00F6               	movwf	??_waitFlag
  3965  0713  1003               	clrc
  3966  0714  0C76               	rrf	??_waitFlag,w
  3967  0715  00F7               	movwf	??_waitFlag+1
  3968  0716  0877               	movf	??_waitFlag+1,w
  3969  0717  00BC               	movwf	waitFlag@buf
  3970                           
  3971                           ;decode_AX25.c: 228: buf = buf | 0x00;
  3972  0718  083A               	movf	waitFlag@flag_judge,w
  3973  0719  043B               	iorwf	waitFlag@flag_judge+1,w
  3974  071A  1903               	btfsc	3,2
  3975  071B  2F21               	goto	l3011
  3976                           
  3977                           ;decode_AX25.c: 230: buf = buf | 0x80;
  3978                           
  3979                           ;decode_AX25.c: 229: }else{
  3980  071C  083C               	movf	waitFlag@buf,w
  3981  071D  3880               	iorlw	128
  3982  071E  00F6               	movwf	??_waitFlag
  3983  071F  0876               	movf	??_waitFlag,w
  3984  0720  00BC               	movwf	waitFlag@buf
  3985  0721                     l3011:	
  3986  0721  3001               	movlw	1
  3987  0722  07B6               	addwf	waitFlag@j_122,f
  3988  0723  1803               	skipnc
  3989  0724  0AB7               	incf	waitFlag@j_122+1,f
  3990  0725  3000               	movlw	0
  3991  0726  07B7               	addwf	waitFlag@j_122+1,f
  3992  0727  3000               	movlw	0
  3993  0728  0237               	subwf	waitFlag@j_122+1,w
  3994  0729  3008               	movlw	8
  3995  072A  1903               	skipnz
  3996  072B  0236               	subwf	waitFlag@j_122,w
  3997  072C  1C03               	skipc
  3998  072D  2F06               	goto	l3001
  3999  072E                     l3015:	
  4000                           
  4001                           ;decode_AX25.c: 231: }
  4002                           ;decode_AX25.c: 232: }
  4003                           ;decode_AX25.c: 233: if(buf == ("JQ1ZHX"[4] << 1)){
  4004  072E  300F               	movlw	low (((STR_7+4)-__stringbase)| (0+32768))
  4005  072F  0084               	movwf	4
  4006  0730  120A  158A  2000  120A  118A  	fcall	stringdir
  4007  0735  00F6               	movwf	??_waitFlag
  4008  0736  01F7               	clrf	??_waitFlag+1
  4009  0737  1003               	clrc
  4010  0738  0DF6               	rlf	??_waitFlag,f
  4011  0739  0DF7               	rlf	??_waitFlag+1,f
  4012  073A  083C               	movf	waitFlag@buf,w
  4013  073B  00F8               	movwf	??_waitFlag+2
  4014  073C  01F9               	clrf	??_waitFlag+3
  4015  073D  0877               	movf	??_waitFlag+1,w
  4016  073E  0679               	xorwf	??_waitFlag+3,w
  4017  073F  1D03               	skipz
  4018  0740  2F43               	goto	u2615
  4019  0741  0876               	movf	??_waitFlag,w
  4020  0742  0678               	xorwf	??_waitFlag+2,w
  4021  0743                     u2615:	
  4022  0743  1D03               	skipz
  4023  0744  2FB0               	goto	l3059
  4024                           
  4025                           ;decode_AX25.c: 234: dPacket[dPacketnum] = buf;
  4026  0745  083C               	movf	waitFlag@buf,w
  4027  0746  00F6               	movwf	??_waitFlag
  4028  0747  0866               	movf	_dPacketnum,w
  4029  0748  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4030  0749  0084               	movwf	4
  4031  074A  0876               	movf	??_waitFlag,w
  4032  074B  1783               	bsf	3,7	;select IRP bank3
  4033  074C  0080               	movwf	0
  4034                           
  4035                           ;decode_AX25.c: 235: dPacketnum ++;
  4036  074D  3001               	movlw	1
  4037  074E  07E6               	addwf	_dPacketnum,f
  4038  074F  1803               	skipnc
  4039  0750  0AE7               	incf	_dPacketnum+1,f
  4040  0751  3000               	movlw	0
  4041  0752  07E7               	addwf	_dPacketnum+1,f
  4042                           
  4043                           ;decode_AX25.c: 236: for(UINT j=0;j<8;j++){
  4044  0753  01B8               	clrf	waitFlag@j_124
  4045  0754  01B9               	clrf	waitFlag@j_124+1
  4046  0755  3000               	movlw	0
  4047  0756  0239               	subwf	waitFlag@j_124+1,w
  4048  0757  3008               	movlw	8
  4049  0758  1903               	skipnz
  4050  0759  0238               	subwf	waitFlag@j_124,w
  4051  075A  1803               	btfsc	3,0
  4052  075B  2F84               	goto	l3041
  4053  075C                     l3027:	
  4054                           
  4055                           ;decode_AX25.c: 237: flag_judge = getbit();
  4056  075C  120A  158A  229B  120A  118A  	fcall	_getbit
  4057  0761  0871               	movf	?_getbit+1,w
  4058  0762  1283               	bcf	3,5	;RP0=0, select bank0
  4059  0763  1303               	bcf	3,6	;RP1=0, select bank0
  4060  0764  00BB               	movwf	waitFlag@flag_judge+1
  4061  0765  0870               	movf	?_getbit,w
  4062  0766  00BA               	movwf	waitFlag@flag_judge
  4063                           
  4064                           ;decode_AX25.c: 238: buf = buf >> 1;
  4065  0767  083C               	movf	waitFlag@buf,w
  4066  0768  00F6               	movwf	??_waitFlag
  4067  0769  1003               	clrc
  4068  076A  0C76               	rrf	??_waitFlag,w
  4069  076B  00F7               	movwf	??_waitFlag+1
  4070  076C  0877               	movf	??_waitFlag+1,w
  4071  076D  00BC               	movwf	waitFlag@buf
  4072                           
  4073                           ;decode_AX25.c: 240: buf = buf | 0x00;
  4074  076E  083A               	movf	waitFlag@flag_judge,w
  4075  076F  043B               	iorwf	waitFlag@flag_judge+1,w
  4076  0770  1903               	btfsc	3,2
  4077  0771  2F77               	goto	l3037
  4078                           
  4079                           ;decode_AX25.c: 242: buf = buf | 0x80;
  4080                           
  4081                           ;decode_AX25.c: 241: }else{
  4082  0772  083C               	movf	waitFlag@buf,w
  4083  0773  3880               	iorlw	128
  4084  0774  00F6               	movwf	??_waitFlag
  4085  0775  0876               	movf	??_waitFlag,w
  4086  0776  00BC               	movwf	waitFlag@buf
  4087  0777                     l3037:	
  4088  0777  3001               	movlw	1
  4089  0778  07B8               	addwf	waitFlag@j_124,f
  4090  0779  1803               	skipnc
  4091  077A  0AB9               	incf	waitFlag@j_124+1,f
  4092  077B  3000               	movlw	0
  4093  077C  07B9               	addwf	waitFlag@j_124+1,f
  4094  077D  3000               	movlw	0
  4095  077E  0239               	subwf	waitFlag@j_124+1,w
  4096  077F  3008               	movlw	8
  4097  0780  1903               	skipnz
  4098  0781  0238               	subwf	waitFlag@j_124,w
  4099  0782  1C03               	skipc
  4100  0783  2F5C               	goto	l3027
  4101  0784                     l3041:	
  4102                           
  4103                           ;decode_AX25.c: 243: }
  4104                           ;decode_AX25.c: 244: }
  4105                           ;decode_AX25.c: 245: if(buf == ("JQ1ZHX"[5] << 1)){
  4106  0784  3010               	movlw	low (((STR_7+5)-__stringbase)| (0+32768))
  4107  0785  0084               	movwf	4
  4108  0786  120A  158A  2000  120A  118A  	fcall	stringdir
  4109  078B  00F6               	movwf	??_waitFlag
  4110  078C  01F7               	clrf	??_waitFlag+1
  4111  078D  1003               	clrc
  4112  078E  0DF6               	rlf	??_waitFlag,f
  4113  078F  0DF7               	rlf	??_waitFlag+1,f
  4114  0790  083C               	movf	waitFlag@buf,w
  4115  0791  00F8               	movwf	??_waitFlag+2
  4116  0792  01F9               	clrf	??_waitFlag+3
  4117  0793  0877               	movf	??_waitFlag+1,w
  4118  0794  0679               	xorwf	??_waitFlag+3,w
  4119  0795  1D03               	skipz
  4120  0796  2F99               	goto	u2655
  4121  0797  0876               	movf	??_waitFlag,w
  4122  0798  0678               	xorwf	??_waitFlag+2,w
  4123  0799                     u2655:	
  4124  0799  1D03               	skipz
  4125  079A  2FB0               	goto	l3059
  4126                           
  4127                           ;decode_AX25.c: 246: dPacket[dPacketnum] = buf;
  4128  079B  083C               	movf	waitFlag@buf,w
  4129  079C  00F6               	movwf	??_waitFlag
  4130  079D  0866               	movf	_dPacketnum,w
  4131  079E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4132  079F  0084               	movwf	4
  4133  07A0  0876               	movf	??_waitFlag,w
  4134  07A1  1783               	bsf	3,7	;select IRP bank3
  4135  07A2  0080               	movwf	0
  4136                           
  4137                           ;decode_AX25.c: 247: dPacketnum ++;
  4138  07A3  3001               	movlw	1
  4139  07A4  07E6               	addwf	_dPacketnum,f
  4140  07A5  1803               	skipnc
  4141  07A6  0AE7               	incf	_dPacketnum+1,f
  4142  07A7  3000               	movlw	0
  4143  07A8  07E7               	addwf	_dPacketnum+1,f
  4144                           
  4145                           ;decode_AX25.c: 248: rcv_state ++;
  4146  07A9  3001               	movlw	1
  4147  07AA  07EA               	addwf	_rcv_state,f
  4148  07AB  1803               	skipnc
  4149  07AC  0AEB               	incf	_rcv_state+1,f
  4150  07AD  3000               	movlw	0
  4151  07AE  07EB               	addwf	_rcv_state+1,f
  4152                           
  4153                           ;decode_AX25.c: 249: }else{
  4154  07AF  2B2F               	goto	l3061
  4155  07B0                     l3059:	
  4156                           ;decode_AX25.c: 268: }
  4157                           ;decode_AX25.c: 269: }else{
  4158                           
  4159                           ;decode_AX25.c: 267: rcv_state = 0;
  4160                           
  4161                           ;decode_AX25.c: 266: dPacketnum = 0;
  4162                           
  4163                           ;decode_AX25.c: 264: }
  4164                           ;decode_AX25.c: 265: }else{
  4165                           
  4166                           ;decode_AX25.c: 263: rcv_state = 0;
  4167                           
  4168                           ;decode_AX25.c: 262: dPacketnum = 0;
  4169                           
  4170                           ;decode_AX25.c: 260: }
  4171                           ;decode_AX25.c: 261: }else{
  4172                           
  4173                           ;decode_AX25.c: 259: rcv_state = 0;
  4174                           
  4175                           ;decode_AX25.c: 258: dPacketnum = 0;
  4176                           
  4177                           ;decode_AX25.c: 256: }
  4178                           ;decode_AX25.c: 257: }else{
  4179                           
  4180                           ;decode_AX25.c: 255: rcv_state = 0;
  4181                           
  4182                           ;decode_AX25.c: 254: dPacketnum = 0;
  4183                           
  4184                           ;decode_AX25.c: 252: }
  4185                           ;decode_AX25.c: 253: }else{
  4186                           
  4187                           ;decode_AX25.c: 251: rcv_state = 0;
  4188                           
  4189                           ;decode_AX25.c: 250: dPacketnum = 0;
  4190                           
  4191                           
  4192                           ;decode_AX25.c: 270: dPacketnum = 0;
  4193  07B0  01E6               	clrf	_dPacketnum
  4194  07B1  01E7               	clrf	_dPacketnum+1
  4195  07B2  2B2D               	goto	L6
  4196  07B3                     __end_of_waitFlag:	
  4197                           
  4198                           	psect	text5
  4199  0BFB                     __ptext5:	
  4200 ;; *************** function _getdata *****************
  4201 ;; Defined at:
  4202 ;;		line 278 in file "decode_AX25.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;		None
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;  dbitstatus      2    4[BANK0 ] unsigned int 
  4207 ;;  dstuff          2    2[BANK0 ] unsigned int 
  4208 ;;  bufstore_cou    2    0[BANK0 ] unsigned int 
  4209 ;;  buf             1    6[BANK0 ] unsigned char 
  4210 ;;  dammy_data      1    0        unsigned char 
  4211 ;; Return value:  Size  Location     Type
  4212 ;;                  1    wreg      void 
  4213 ;; Registers used:
  4214 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4215 ;; Tracked objects:
  4216 ;;		On entry : 0/0
  4217 ;;		On exit  : 0/0
  4218 ;;		Unchanged: 0/0
  4219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4220 ;;      Params:         0       0       0       0       0
  4221 ;;      Locals:         0       7       0       0       0
  4222 ;;      Temps:          2       0       0       0       0
  4223 ;;      Totals:         2       7       0       0       0
  4224 ;;Total ram usage:        9 bytes
  4225 ;; Hardware stack levels used:    1
  4226 ;; Hardware stack levels required when called:    1
  4227 ;; This function calls:
  4228 ;;		_getbit
  4229 ;; This function is called by:
  4230 ;;		_ReceivePacket_data
  4231 ;;		_ReceivePacket
  4232 ;; This function uses a non-reentrant model
  4233 ;;
  4234                           
  4235                           
  4236                           ;psect for function _getdata
  4237  0BFB                     _getdata:	
  4238                           
  4239                           ;decode_AX25.c: 279: UBYTE buf = 0x00;
  4240                           
  4241                           ;incstack = 0
  4242                           ; Regs used in _getdata: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4243  0BFB  1283               	bcf	3,5	;RP0=0, select bank0
  4244  0BFC  1303               	bcf	3,6	;RP1=0, select bank0
  4245  0BFD  01A6               	clrf	getdata@buf
  4246                           
  4247                           ;decode_AX25.c: 280: UINT dstuff = 0;
  4248  0BFE  01A2               	clrf	getdata@dstuff
  4249  0BFF  01A3               	clrf	getdata@dstuff+1
  4250                           
  4251                           ;decode_AX25.c: 281: UBYTE dammy_data;
  4252                           ;decode_AX25.c: 282: UINT bufstore_counter = 0;
  4253  0C00  01A0               	clrf	getdata@bufstore_counter
  4254  0C01  01A1               	clrf	getdata@bufstore_counter+1
  4255                           
  4256                           ;decode_AX25.c: 283: UINT dbitstatus = 0;
  4257  0C02  01A4               	clrf	getdata@dbitstatus
  4258  0C03  01A5               	clrf	getdata@dbitstatus+1
  4259  0C04                     l3095:	
  4260                           ;decode_AX25.c: 285: while(rcv_state == 2){
  4261                           
  4262  0C04  3002               	movlw	2
  4263  0C05  066A               	xorwf	_rcv_state,w
  4264  0C06  046B               	iorwf	_rcv_state+1,w
  4265  0C07  1D03               	btfss	3,2
  4266  0C08  0008               	return
  4267                           
  4268                           ;decode_AX25.c: 286: dbitstatus = getbit();
  4269  0C09  120A  158A  229B  120A  158A  	fcall	_getbit
  4270  0C0E  0871               	movf	?_getbit+1,w
  4271  0C0F  1283               	bcf	3,5	;RP0=0, select bank0
  4272  0C10  1303               	bcf	3,6	;RP1=0, select bank0
  4273  0C11  00A5               	movwf	getdata@dbitstatus+1
  4274  0C12  0870               	movf	?_getbit,w
  4275  0C13  00A4               	movwf	getdata@dbitstatus
  4276                           
  4277                           ;decode_AX25.c: 287: if(dstuff == 5){
  4278  0C14  3005               	movlw	5
  4279  0C15  0622               	xorwf	getdata@dstuff,w
  4280  0C16  0423               	iorwf	getdata@dstuff+1,w
  4281  0C17  1D03               	btfss	3,2
  4282  0C18  2C27               	goto	l3077
  4283                           
  4284                           ;decode_AX25.c: 288: if(dbitstatus == 1){
  4285  0C19  0324               	decf	getdata@dbitstatus,w
  4286  0C1A  0425               	iorwf	getdata@dbitstatus+1,w
  4287  0C1B  1D03               	btfss	3,2
  4288  0C1C  2C24               	goto	l3075
  4289                           
  4290                           ;decode_AX25.c: 289: rcv_state ++;
  4291  0C1D  3001               	movlw	1
  4292  0C1E  07EA               	addwf	_rcv_state,f
  4293  0C1F  1803               	skipnc
  4294  0C20  0AEB               	incf	_rcv_state+1,f
  4295  0C21  3000               	movlw	0
  4296  0C22  07EB               	addwf	_rcv_state+1,f
  4297                           
  4298                           ;decode_AX25.c: 290: break;
  4299  0C23  0008               	return
  4300  0C24                     l3075:	
  4301                           ;decode_AX25.c: 291: }else{
  4302                           
  4303                           
  4304                           ;decode_AX25.c: 292: dstuff = 0;
  4305  0C24  01A2               	clrf	getdata@dstuff
  4306  0C25  01A3               	clrf	getdata@dstuff+1
  4307                           
  4308                           ;decode_AX25.c: 293: }
  4309                           ;decode_AX25.c: 294: }else{
  4310  0C26  2C04               	goto	l3095
  4311  0C27                     l3077:	
  4312                           
  4313                           ;decode_AX25.c: 295: buf = buf >> 1;
  4314  0C27  0826               	movf	getdata@buf,w
  4315  0C28  00F6               	movwf	??_getdata
  4316  0C29  1003               	clrc
  4317  0C2A  0C76               	rrf	??_getdata,w
  4318  0C2B  00F7               	movwf	??_getdata+1
  4319  0C2C  0877               	movf	??_getdata+1,w
  4320  0C2D  00A6               	movwf	getdata@buf
  4321                           
  4322                           ;decode_AX25.c: 297: buf = buf | 0x00;
  4323  0C2E  0824               	movf	getdata@dbitstatus,w
  4324  0C2F  0425               	iorwf	getdata@dbitstatus+1,w
  4325  0C30  1D03               	btfss	3,2
  4326  0C31  2C35               	goto	l3081
  4327                           
  4328                           ;decode_AX25.c: 298: dstuff = 0;
  4329  0C32  01A2               	clrf	getdata@dstuff
  4330  0C33  01A3               	clrf	getdata@dstuff+1
  4331                           
  4332                           ;decode_AX25.c: 299: }else{
  4333  0C34  2C40               	goto	l3085
  4334  0C35                     l3081:	
  4335                           
  4336                           ;decode_AX25.c: 300: buf = buf | 0x80;
  4337  0C35  0826               	movf	getdata@buf,w
  4338  0C36  3880               	iorlw	128
  4339  0C37  00F6               	movwf	??_getdata
  4340  0C38  0876               	movf	??_getdata,w
  4341  0C39  00A6               	movwf	getdata@buf
  4342                           
  4343                           ;decode_AX25.c: 301: dstuff ++;
  4344  0C3A  3001               	movlw	1
  4345  0C3B  07A2               	addwf	getdata@dstuff,f
  4346  0C3C  1803               	skipnc
  4347  0C3D  0AA3               	incf	getdata@dstuff+1,f
  4348  0C3E  3000               	movlw	0
  4349  0C3F  07A3               	addwf	getdata@dstuff+1,f
  4350  0C40                     l3085:	
  4351                           
  4352                           ;decode_AX25.c: 302: }
  4353                           ;decode_AX25.c: 303: bufstore_counter ++;
  4354  0C40  3001               	movlw	1
  4355  0C41  07A0               	addwf	getdata@bufstore_counter,f
  4356  0C42  1803               	skipnc
  4357  0C43  0AA1               	incf	getdata@bufstore_counter+1,f
  4358  0C44  3000               	movlw	0
  4359  0C45  07A1               	addwf	getdata@bufstore_counter+1,f
  4360                           
  4361                           ;decode_AX25.c: 304: if(bufstore_counter == 8){
  4362  0C46  3008               	movlw	8
  4363  0C47  0620               	xorwf	getdata@bufstore_counter,w
  4364  0C48  0421               	iorwf	getdata@bufstore_counter+1,w
  4365  0C49  1D03               	btfss	3,2
  4366  0C4A  2C04               	goto	l3095
  4367                           
  4368                           ;decode_AX25.c: 305: bufstore_counter = 0;
  4369  0C4B  01A0               	clrf	getdata@bufstore_counter
  4370  0C4C  01A1               	clrf	getdata@bufstore_counter+1
  4371                           
  4372                           ;decode_AX25.c: 306: dPacket[dPacketnum] = buf;
  4373  0C4D  0826               	movf	getdata@buf,w
  4374  0C4E  00F6               	movwf	??_getdata
  4375  0C4F  0866               	movf	_dPacketnum,w
  4376  0C50  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4377  0C51  0084               	movwf	4
  4378  0C52  0876               	movf	??_getdata,w
  4379  0C53  1783               	bsf	3,7	;select IRP bank3
  4380  0C54  0080               	movwf	0
  4381                           
  4382                           ;decode_AX25.c: 307: dPacketnum ++;
  4383  0C55  3001               	movlw	1
  4384  0C56  07E6               	addwf	_dPacketnum,f
  4385  0C57  1803               	skipnc
  4386  0C58  0AE7               	incf	_dPacketnum+1,f
  4387  0C59  3000               	movlw	0
  4388  0C5A  07E7               	addwf	_dPacketnum+1,f
  4389  0C5B  2C04               	goto	l3095
  4390  0C5C                     __end_of_getdata:	
  4391                           
  4392                           	psect	text6
  4393  0A9B                     __ptext6:	
  4394 ;; *************** function _getbit *****************
  4395 ;; Defined at:
  4396 ;;		line 40 in file "decode_AX25.c"
  4397 ;; Parameters:    Size  Location     Type
  4398 ;;		None
  4399 ;; Auto vars:     Size  Location     Type
  4400 ;;  i               2    4[COMMON] unsigned int 
  4401 ;; Return value:  Size  Location     Type
  4402 ;;                  2    0[COMMON] unsigned int 
  4403 ;; Registers used:
  4404 ;;		wreg, status,2, status,0
  4405 ;; Tracked objects:
  4406 ;;		On entry : 0/0
  4407 ;;		On exit  : 0/0
  4408 ;;		Unchanged: 0/0
  4409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4410 ;;      Params:         2       0       0       0       0
  4411 ;;      Locals:         2       0       0       0       0
  4412 ;;      Temps:          2       0       0       0       0
  4413 ;;      Totals:         6       0       0       0       0
  4414 ;;Total ram usage:        6 bytes
  4415 ;; Hardware stack levels used:    1
  4416 ;; This function calls:
  4417 ;;		Nothing
  4418 ;; This function is called by:
  4419 ;;		_waitFlag
  4420 ;;		_getdata
  4421 ;;		_conv_DI_UARTRX
  4422 ;; This function uses a non-reentrant model
  4423 ;;
  4424                           
  4425                           
  4426                           ;psect for function _getbit
  4427  0A9B                     _getbit:	
  4428                           
  4429                           ;decode_AX25.c: 41: static UINT oldbit;
  4430                           ;decode_AX25.c: 42: oldbit = RB5;
  4431                           
  4432                           ;incstack = 0
  4433                           ; Regs used in _getbit: [wreg+status,2+status,0]
  4434  0A9B  1003               	clrc
  4435  0A9C  1283               	bcf	3,5	;RP0=0, select bank0
  4436  0A9D  1303               	bcf	3,6	;RP1=0, select bank0
  4437  0A9E  1A86               	btfsc	6,5	;volatile
  4438  0A9F  1403               	setc
  4439  0AA0  3000               	movlw	0
  4440  0AA1  1803               	skipnc
  4441  0AA2  3001               	movlw	1
  4442  0AA3  00F2               	movwf	??_getbit
  4443  0AA4  01F3               	clrf	??_getbit+1
  4444  0AA5  0872               	movf	??_getbit,w
  4445  0AA6  1683               	bsf	3,5	;RP0=1, select bank1
  4446  0AA7  1303               	bcf	3,6	;RP1=0, select bank1
  4447  0AA8  00E7               	movwf	getbit@oldbit^(0+128)
  4448  0AA9  0873               	movf	??_getbit+1,w
  4449  0AAA  00E8               	movwf	(getbit@oldbit+1)^(0+128)
  4450                           
  4451                           ;decode_AX25.c: 43: for(UINT i=0;i<62;i++){
  4452  0AAB  01F4               	clrf	getbit@i
  4453  0AAC  01F5               	clrf	getbit@i+1
  4454  0AAD  3000               	movlw	0
  4455  0AAE  0275               	subwf	getbit@i+1,w
  4456  0AAF  303E               	movlw	62
  4457  0AB0  1903               	skipnz
  4458  0AB1  0274               	subwf	getbit@i,w
  4459  0AB2  1803               	btfsc	3,0
  4460  0AB3  2AE2               	goto	l2541
  4461                           
  4462                           ;decode_AX25.c: 44: if(RB5 != oldbit){
  4463  0AB4  1003               	clrc
  4464  0AB5                     L7:	
  4465  0AB5  1283               	bcf	3,5	;RP0=0, select bank0
  4466  0AB6  1A86               	btfsc	6,5	;volatile
  4467  0AB7  1403               	setc
  4468  0AB8  3000               	movlw	0
  4469  0AB9  1803               	skipnc
  4470  0ABA  3001               	movlw	1
  4471  0ABB  00F2               	movwf	??_getbit
  4472  0ABC  01F3               	clrf	??_getbit+1
  4473  0ABD  1683               	bsf	3,5	;RP0=1, select bank1
  4474  0ABE  1303               	bcf	3,6	;RP1=0, select bank1
  4475  0ABF  0868               	movf	(getbit@oldbit+1)^(0+128),w
  4476  0AC0  0673               	xorwf	??_getbit+1,w
  4477  0AC1  1D03               	skipz
  4478  0AC2  2AC5               	goto	u1885
  4479  0AC3  0867               	movf	getbit@oldbit^(0+128),w
  4480  0AC4  0672               	xorwf	??_getbit,w
  4481  0AC5                     u1885:	
  4482  0AC5  1903               	skipnz
  4483  0AC6  2AD5               	goto	l2539
  4484                           
  4485                           ;decode_AX25.c: 45: _delay((unsigned long)((400)*(10000000/4000000.0)));
  4486  0AC7  30F9               	movlw	249
  4487  0AC8  00F2               	movwf	??_getbit
  4488  0AC9                     u3687:	
  4489  0AC9  0000               	nop
  4490  0ACA  0BF2               	decfsz	??_getbit,f
  4491  0ACB  2AC9               	goto	u3687
  4492  0ACC  2ACD               	nop2	;nop
  4493  0ACD  0000               	nop
  4494                           
  4495                           ;decode_AX25.c: 46: RC2= 1- RC2;
  4496  0ACE  3004               	movlw	4
  4497  0ACF  1283               	bcf	3,5	;RP0=0, select bank0
  4498  0AD0  1303               	bcf	3,6	;RP1=0, select bank0
  4499  0AD1  0687               	xorwf	7,f
  4500                           
  4501                           ;decode_AX25.c: 47: return 0;
  4502  0AD2  01F0               	clrf	?_getbit
  4503  0AD3  01F1               	clrf	?_getbit+1
  4504  0AD4  0008               	return
  4505  0AD5                     l2539:	
  4506  0AD5  3001               	movlw	1
  4507  0AD6  07F4               	addwf	getbit@i,f
  4508  0AD7  1803               	skipnc
  4509  0AD8  0AF5               	incf	getbit@i+1,f
  4510  0AD9  3000               	movlw	0
  4511  0ADA  07F5               	addwf	getbit@i+1,f
  4512  0ADB  3000               	movlw	0
  4513  0ADC  0275               	subwf	getbit@i+1,w
  4514  0ADD  303E               	movlw	62
  4515  0ADE  1903               	skipnz
  4516  0ADF  0274               	subwf	getbit@i,w
  4517  0AE0  1C03               	skipc
  4518  0AE1  2AB5               	goto	L7
  4519  0AE2                     l2541:	
  4520                           
  4521                           ;decode_AX25.c: 48: }
  4522                           ;decode_AX25.c: 49: }
  4523                           ;decode_AX25.c: 50: return 1;
  4524  0AE2  3001               	movlw	1
  4525  0AE3  00F0               	movwf	?_getbit
  4526  0AE4  3000               	movlw	0
  4527  0AE5  00F1               	movwf	?_getbit+1
  4528  0AE6  0008               	return
  4529  0AE7                     __end_of_getbit:	
  4530                           
  4531                           	psect	text7
  4532  002A                     __ptext7:	
  4533 ;; *************** function _fcscheck *****************
  4534 ;; Defined at:
  4535 ;;		line 313 in file "decode_AX25.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;		None
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;  i               2    7[COMMON] unsigned int 
  4540 ;;  i               2    5[COMMON] unsigned int 
  4541 ;;  byte            1    9[COMMON] unsigned char 
  4542 ;;  bt              1    4[COMMON] unsigned char 
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  2    0[COMMON] unsigned int 
  4545 ;; Registers used:
  4546 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 0/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4552 ;;      Params:         2       0       0       0       0
  4553 ;;      Locals:         6       0       0       0       0
  4554 ;;      Temps:          2       0       0       0       0
  4555 ;;      Totals:        10       0       0       0       0
  4556 ;;Total ram usage:       10 bytes
  4557 ;; Hardware stack levels used:    1
  4558 ;; This function calls:
  4559 ;;		Nothing
  4560 ;; This function is called by:
  4561 ;;		_ReceivePacket_data
  4562 ;;		_ReceivePacket
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           
  4567                           ;psect for function _fcscheck
  4568  002A                     _fcscheck:	
  4569                           
  4570                           ;decode_AX25.c: 314: UBYTE bt,byte;
  4571                           ;decode_AX25.c: 315: dfcslo = dfcshi = 0xff;
  4572                           
  4573                           ;incstack = 0
  4574                           ; Regs used in _fcscheck: [wreg-fsr0h+status,2+status,0]
  4575  002A  30FF               	movlw	255
  4576  002B  1283               	bcf	3,5	;RP0=0, select bank0
  4577  002C  1303               	bcf	3,6	;RP1=0, select bank0
  4578  002D  00EC               	movwf	_dfcshi
  4579  002E  00F2               	movwf	??_fcscheck
  4580  002F  0872               	movf	??_fcscheck,w
  4581  0030  00ED               	movwf	_dfcslo
  4582                           
  4583                           ;decode_AX25.c: 316: while(rcv_state == 3){
  4584  0031  3003               	movlw	3
  4585  0032  066A               	xorwf	_rcv_state,w
  4586  0033  046B               	iorwf	_rcv_state+1,w
  4587  0034  1D03               	btfss	3,2
  4588  0035  0008               	return
  4589                           
  4590                           ;decode_AX25.c: 317: for(UINT i=0;i<dPacketnum-2;i++){
  4591  0036  01F5               	clrf	fcscheck@i
  4592  0037  01F6               	clrf	fcscheck@i+1
  4593  0038                     l3123:	
  4594  0038  0866               	movf	_dPacketnum,w
  4595  0039  3EFE               	addlw	254
  4596  003A  00F2               	movwf	??_fcscheck
  4597  003B  0867               	movf	_dPacketnum+1,w
  4598  003C  1803               	skipnc
  4599  003D  3E01               	addlw	1
  4600  003E  3EFF               	addlw	255
  4601  003F  00F3               	movwf	??_fcscheck+1
  4602  0040  0873               	movf	??_fcscheck+1,w
  4603  0041  0276               	subwf	fcscheck@i+1,w
  4604  0042  1D03               	skipz
  4605  0043  2846               	goto	u2755
  4606  0044  0872               	movf	??_fcscheck,w
  4607  0045  0275               	subwf	fcscheck@i,w
  4608  0046                     u2755:	
  4609  0046  1803               	btfsc	3,0
  4610  0047  2891               	goto	l263
  4611                           
  4612                           ;decode_AX25.c: 318: byte = dPacket[i];
  4613  0048  0875               	movf	fcscheck@i,w
  4614  0049  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4615  004A  0084               	movwf	4
  4616  004B  1783               	bsf	3,7	;select IRP bank3
  4617  004C  0800               	movf	0,w
  4618  004D  00F2               	movwf	??_fcscheck
  4619  004E  0872               	movf	??_fcscheck,w
  4620  004F  00F9               	movwf	fcscheck@byte
  4621                           
  4622                           ;decode_AX25.c: 319: for(UINT i=0;i<8;i++){
  4623  0050  01F7               	clrf	fcscheck@i_136
  4624  0051  01F8               	clrf	fcscheck@i_136+1
  4625  0052  3000               	movlw	0
  4626  0053  0278               	subwf	fcscheck@i_136+1,w
  4627  0054  3008               	movlw	8
  4628  0055  1903               	skipnz
  4629  0056  0277               	subwf	fcscheck@i_136,w
  4630  0057  1803               	btfsc	3,0
  4631  0058  288A               	goto	l3121
  4632  0059                     l3109:	
  4633                           
  4634                           ;decode_AX25.c: 320: bt = byte & 0x01;
  4635  0059  0879               	movf	fcscheck@byte,w
  4636  005A  3901               	andlw	1
  4637  005B  00F2               	movwf	??_fcscheck
  4638  005C  0872               	movf	??_fcscheck,w
  4639  005D  00F4               	movwf	fcscheck@bt
  4640  005E  1003               	bcf	3,0	;# 
  4641  005F  0CEC               	rrf	_dfcshi,f	;# 
  4642  0060  0CED               	rrf	_dfcslo,f	;# 
  4643                           
  4644                           ;decode_AX25.c: 326: if(((STATUS & 0x01)^bt) == 0x01){
  4645  0061  3001               	movlw	1
  4646  0062  1283               	bcf	3,5	;RP0=0, select bank0
  4647  0063  1303               	bcf	3,6	;RP1=0, select bank0
  4648  0064  0503               	andwf	3,w	;volatile
  4649  0065  00F2               	movwf	??_fcscheck
  4650  0066  0874               	movf	fcscheck@bt,w
  4651  0067  0672               	xorwf	??_fcscheck,w
  4652  0068  00F3               	movwf	??_fcscheck+1
  4653  0069  0373               	decf	??_fcscheck+1,w
  4654  006A  1D03               	btfss	3,2
  4655  006B  2876               	goto	l3115
  4656                           
  4657                           ;decode_AX25.c: 327: dfcshi = dfcshi ^ 0x84;
  4658  006C  086C               	movf	_dfcshi,w
  4659  006D  3A84               	xorlw	132
  4660  006E  00F2               	movwf	??_fcscheck
  4661  006F  0872               	movf	??_fcscheck,w
  4662  0070  00EC               	movwf	_dfcshi
  4663                           
  4664                           ;decode_AX25.c: 328: dfcslo = dfcslo ^ 0x08;
  4665  0071  086D               	movf	_dfcslo,w
  4666  0072  3A08               	xorlw	8
  4667  0073  00F2               	movwf	??_fcscheck
  4668  0074  0872               	movf	??_fcscheck,w
  4669  0075  00ED               	movwf	_dfcslo
  4670  0076                     l3115:	
  4671                           
  4672                           ;decode_AX25.c: 329: }
  4673                           ;decode_AX25.c: 330: byte = byte >> 1;
  4674  0076  0879               	movf	fcscheck@byte,w
  4675  0077  00F2               	movwf	??_fcscheck
  4676  0078  1003               	clrc
  4677  0079  0C72               	rrf	??_fcscheck,w
  4678  007A  00F3               	movwf	??_fcscheck+1
  4679  007B  0873               	movf	??_fcscheck+1,w
  4680  007C  00F9               	movwf	fcscheck@byte
  4681  007D  3001               	movlw	1
  4682  007E  07F7               	addwf	fcscheck@i_136,f
  4683  007F  1803               	skipnc
  4684  0080  0AF8               	incf	fcscheck@i_136+1,f
  4685  0081  3000               	movlw	0
  4686  0082  07F8               	addwf	fcscheck@i_136+1,f
  4687  0083  3000               	movlw	0
  4688  0084  0278               	subwf	fcscheck@i_136+1,w
  4689  0085  3008               	movlw	8
  4690  0086  1903               	skipnz
  4691  0087  0277               	subwf	fcscheck@i_136,w
  4692  0088  1C03               	skipc
  4693  0089  2859               	goto	l3109
  4694  008A                     l3121:	
  4695  008A  3001               	movlw	1
  4696  008B  07F5               	addwf	fcscheck@i,f
  4697  008C  1803               	skipnc
  4698  008D  0AF6               	incf	fcscheck@i+1,f
  4699  008E  3000               	movlw	0
  4700  008F  07F6               	addwf	fcscheck@i+1,f
  4701  0090  2838               	goto	l3123
  4702  0091                     l263:	
  4703                           
  4704                           ;decode_AX25.c: 331: }
  4705                           ;decode_AX25.c: 332: }
  4706                           ;decode_AX25.c: 333: dfcslo = dfcslo ^ 0xff;
  4707  0091  09ED               	comf	_dfcslo,f
  4708                           
  4709                           ;decode_AX25.c: 334: dfcshi = dfcshi ^ 0xff;
  4710  0092  09EC               	comf	_dfcshi,f
  4711                           
  4712                           ;decode_AX25.c: 337: if((dPacket[dPacketnum-2] == dfcslo) && (dPacket[dPacketnum-1] == d
      +                          fcshi)){
  4713  0093  0866               	movf	_dPacketnum,w
  4714  0094  3EFE               	addlw	254
  4715  0095  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4716  0096  0084               	movwf	4
  4717  0097  1783               	bsf	3,7	;select IRP bank3
  4718  0098  0800               	movf	0,w
  4719  0099  066D               	xorwf	_dfcslo,w
  4720  009A  1D03               	skipz
  4721  009B  28A9               	goto	l3135
  4722  009C  0866               	movf	_dPacketnum,w
  4723  009D  3EFF               	addlw	255
  4724  009E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4725  009F  0084               	movwf	4
  4726  00A0  0800               	movf	0,w
  4727  00A1  066C               	xorwf	_dfcshi,w
  4728  00A2  1D03               	skipz
  4729  00A3  28A9               	goto	l3135
  4730                           
  4731                           ;decode_AX25.c: 342: return 1;
  4732  00A4  3001               	movlw	1
  4733  00A5  00F0               	movwf	?_fcscheck
  4734  00A6  3000               	movlw	0
  4735  00A7  00F1               	movwf	?_fcscheck+1
  4736  00A8  0008               	return
  4737  00A9                     l3135:	
  4738                           ;decode_AX25.c: 343: }else{
  4739                           
  4740                           
  4741                           ;decode_AX25.c: 348: return 0;
  4742  00A9  01F0               	clrf	?_fcscheck
  4743  00AA  01F1               	clrf	?_fcscheck+1
  4744  00AB  0008               	return
  4745  00AC                     __end_of_fcscheck:	
  4746                           
  4747                           	psect	text8
  4748  082A                     __ptext8:	
  4749 ;; *************** function _NM_waddress *****************
  4750 ;; Defined at:
  4751 ;;		line 68 in file "UART.c"
  4752 ;; Parameters:    Size  Location     Type
  4753 ;;  NM_wad_heade    1    wreg     unsigned char 
  4754 ;;  whigh_addres    1    1[COMMON] unsigned char 
  4755 ;;  wlow_address    1    2[COMMON] unsigned char 
  4756 ;; Auto vars:     Size  Location     Type
  4757 ;;  NM_wad_heade    1    3[COMMON] unsigned char 
  4758 ;; Return value:  Size  Location     Type
  4759 ;;                  1    wreg      void 
  4760 ;; Registers used:
  4761 ;;		wreg, status,2, status,0, pclath, cstack
  4762 ;; Tracked objects:
  4763 ;;		On entry : 0/0
  4764 ;;		On exit  : 0/0
  4765 ;;		Unchanged: 0/0
  4766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4767 ;;      Params:         2       0       0       0       0
  4768 ;;      Locals:         1       0       0       0       0
  4769 ;;      Temps:          0       0       0       0       0
  4770 ;;      Totals:         3       0       0       0       0
  4771 ;;Total ram usage:        3 bytes
  4772 ;; Hardware stack levels used:    1
  4773 ;; Hardware stack levels required when called:    1
  4774 ;; This function calls:
  4775 ;;		_putch
  4776 ;; This function is called by:
  4777 ;;		_main
  4778 ;; This function uses a non-reentrant model
  4779 ;;
  4780                           
  4781                           
  4782                           ;psect for function _NM_waddress
  4783  082A                     _NM_waddress:	
  4784                           
  4785                           ;incstack = 0
  4786                           ; Regs used in _NM_waddress: [wreg+status,2+status,0+pclath+cstack]
  4787                           ;NM_waddress@NM_wad_header stored from wreg
  4788  082A  00F3               	movwf	NM_waddress@NM_wad_header
  4789                           
  4790                           ;UART.c: 69: putch(NM_wad_header);
  4791  082B  0873               	movf	NM_waddress@NM_wad_header,w
  4792  082C  160A  118A  27DF  120A  158A  	fcall	_putch
  4793                           
  4794                           ;UART.c: 70: putch(whigh_address);
  4795  0831  0871               	movf	NM_waddress@whigh_address,w
  4796  0832  160A  118A  27DF  120A  158A  	fcall	_putch
  4797                           
  4798                           ;UART.c: 71: putch(wlow_address);
  4799  0837  0872               	movf	NM_waddress@wlow_address,w
  4800  0838  160A  118A  27DF   	fcall	_putch
  4801  083B  0008               	return
  4802  083C                     __end_of_NM_waddress:	
  4803                           
  4804                           	psect	text9
  4805  17DF                     __ptext9:	
  4806 ;; *************** function _putch *****************
  4807 ;; Defined at:
  4808 ;;		line 35 in file "UART.c"
  4809 ;; Parameters:    Size  Location     Type
  4810 ;;  byte            1    wreg     unsigned char 
  4811 ;; Auto vars:     Size  Location     Type
  4812 ;;  byte            1    0[COMMON] unsigned char 
  4813 ;; Return value:  Size  Location     Type
  4814 ;;                  1    wreg      void 
  4815 ;; Registers used:
  4816 ;;		wreg
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4822 ;;      Params:         0       0       0       0       0
  4823 ;;      Locals:         1       0       0       0       0
  4824 ;;      Temps:          0       0       0       0       0
  4825 ;;      Totals:         1       0       0       0       0
  4826 ;;Total ram usage:        1 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; This function calls:
  4829 ;;		Nothing
  4830 ;; This function is called by:
  4831 ;;		_NM_waddress
  4832 ;;		_printf
  4833 ;;		_putstr
  4834 ;;		_putcrlf
  4835 ;;		_put_error
  4836 ;;		_put_ok
  4837 ;;		_putAX25
  4838 ;;		_conv_DI_UARTRX
  4839 ;;		_test_Packetmaker
  4840 ;;		_EEPROM_Read
  4841 ;; This function uses a non-reentrant model
  4842 ;;
  4843                           
  4844                           
  4845                           ;psect for function _putch
  4846  17DF                     _putch:	
  4847                           
  4848                           ;incstack = 0
  4849                           ; Regs used in _putch: [wreg]
  4850                           ;putch@byte stored from wreg
  4851  17DF  00F0               	movwf	putch@byte
  4852  17E0                     l56:	
  4853                           ;UART.c: 36: while(!TXIF);
  4854                           
  4855  17E0  1283               	bcf	3,5	;RP0=0, select bank0
  4856  17E1  1303               	bcf	3,6	;RP1=0, select bank0
  4857  17E2  1E0C               	btfss	12,4	;volatile
  4858  17E3  2FE0               	goto	l56
  4859                           
  4860                           ;UART.c: 37: TXREG = byte;
  4861  17E4  0870               	movf	putch@byte,w
  4862  17E5  0099               	movwf	25	;volatile
  4863  17E6  0008               	return
  4864  17E7                     __end_of_putch:	
  4865                           
  4866                           	psect	text10
  4867  0851                     __ptext10:	
  4868 ;; *************** function _Init_SERIAL *****************
  4869 ;; Defined at:
  4870 ;;		line 5 in file "UART.c"
  4871 ;; Parameters:    Size  Location     Type
  4872 ;;		None
  4873 ;; Auto vars:     Size  Location     Type
  4874 ;;		None
  4875 ;; Return value:  Size  Location     Type
  4876 ;;                  1    wreg      void 
  4877 ;; Registers used:
  4878 ;;		wreg
  4879 ;; Tracked objects:
  4880 ;;		On entry : 0/0
  4881 ;;		On exit  : 0/0
  4882 ;;		Unchanged: 0/0
  4883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4884 ;;      Params:         0       0       0       0       0
  4885 ;;      Locals:         0       0       0       0       0
  4886 ;;      Temps:          0       0       0       0       0
  4887 ;;      Totals:         0       0       0       0       0
  4888 ;;Total ram usage:        0 bytes
  4889 ;; Hardware stack levels used:    1
  4890 ;; This function calls:
  4891 ;;		Nothing
  4892 ;; This function is called by:
  4893 ;;		_main
  4894 ;; This function uses a non-reentrant model
  4895 ;;
  4896                           
  4897                           
  4898                           ;psect for function _Init_SERIAL
  4899  0851                     _Init_SERIAL:	
  4900                           
  4901                           ;UART.c: 6: SPBRG = 10;
  4902                           
  4903                           ;incstack = 0
  4904                           ; Regs used in _Init_SERIAL: [wreg]
  4905  0851  300A               	movlw	10
  4906  0852  1683               	bsf	3,5	;RP0=1, select bank1
  4907  0853  1303               	bcf	3,6	;RP1=0, select bank1
  4908  0854  0099               	movwf	25	;volatile
  4909                           
  4910                           ;UART.c: 7: BRGH = 0;
  4911  0855  1118               	bcf	24,2	;volatile
  4912                           
  4913                           ;UART.c: 8: SYNC = 0;
  4914  0856  1218               	bcf	24,4	;volatile
  4915                           
  4916                           ;UART.c: 9: SPEN = 1;
  4917  0857  1283               	bcf	3,5	;RP0=0, select bank0
  4918  0858  1303               	bcf	3,6	;RP1=0, select bank0
  4919  0859  1798               	bsf	24,7	;volatile
  4920                           
  4921                           ;UART.c: 10: CREN = 1;
  4922  085A  1618               	bsf	24,4	;volatile
  4923                           
  4924                           ;UART.c: 11: SREN = 0;
  4925  085B  1298               	bcf	24,5	;volatile
  4926                           
  4927                           ;UART.c: 12: RCIF = 0;
  4928  085C  128C               	bcf	12,5	;volatile
  4929                           
  4930                           ;UART.c: 13: TXIE = 0;
  4931  085D  1683               	bsf	3,5	;RP0=1, select bank1
  4932  085E  1303               	bcf	3,6	;RP1=0, select bank1
  4933  085F  120C               	bcf	12,4	;volatile
  4934                           
  4935                           ;UART.c: 14: RCIE = 1;
  4936  0860  168C               	bsf	12,5	;volatile
  4937                           
  4938                           ;UART.c: 15: TX9 = 0;
  4939  0861  1318               	bcf	24,6	;volatile
  4940                           
  4941                           ;UART.c: 16: RX9 = 0;
  4942  0862  1283               	bcf	3,5	;RP0=0, select bank0
  4943  0863  1303               	bcf	3,6	;RP1=0, select bank0
  4944  0864  1318               	bcf	24,6	;volatile
  4945                           
  4946                           ;UART.c: 17: TXEN = 0;
  4947  0865  1683               	bsf	3,5	;RP0=1, select bank1
  4948  0866  1303               	bcf	3,6	;RP1=0, select bank1
  4949  0867  1298               	bcf	24,5	;volatile
  4950                           
  4951                           ;UART.c: 18: TXEN = 1;
  4952  0868  1698               	bsf	24,5	;volatile
  4953  0869  0008               	return
  4954  086A                     __end_of_Init_SERIAL:	
  4955                           
  4956                           	psect	text11
  4957  089D                     __ptext11:	
  4958 ;; *************** function _Init_MPU *****************
  4959 ;; Defined at:
  4960 ;;		line 8 in file "Init_MPU.c"
  4961 ;; Parameters:    Size  Location     Type
  4962 ;;		None
  4963 ;; Auto vars:     Size  Location     Type
  4964 ;;		None
  4965 ;; Return value:  Size  Location     Type
  4966 ;;                  1    wreg      void 
  4967 ;; Registers used:
  4968 ;;		wreg, status,2
  4969 ;; Tracked objects:
  4970 ;;		On entry : 0/0
  4971 ;;		On exit  : 0/0
  4972 ;;		Unchanged: 0/0
  4973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4974 ;;      Params:         0       0       0       0       0
  4975 ;;      Locals:         0       0       0       0       0
  4976 ;;      Temps:          0       0       0       0       0
  4977 ;;      Totals:         0       0       0       0       0
  4978 ;;Total ram usage:        0 bytes
  4979 ;; Hardware stack levels used:    1
  4980 ;; This function calls:
  4981 ;;		Nothing
  4982 ;; This function is called by:
  4983 ;;		_main
  4984 ;; This function uses a non-reentrant model
  4985 ;;
  4986                           
  4987                           
  4988                           ;psect for function _Init_MPU
  4989  089D                     _Init_MPU:	
  4990                           
  4991                           ;Init_MPU.c: 11: PORTA = 0x00;
  4992                           
  4993                           ;incstack = 0
  4994                           ; Regs used in _Init_MPU: [wreg+status,2]
  4995  089D  1283               	bcf	3,5	;RP0=0, select bank0
  4996  089E  1303               	bcf	3,6	;RP1=0, select bank0
  4997  089F  0185               	clrf	5	;volatile
  4998                           
  4999                           ;Init_MPU.c: 12: PORTB = 0x00;
  5000  08A0  0186               	clrf	6	;volatile
  5001                           
  5002                           ;Init_MPU.c: 13: PORTC = 0x00;
  5003  08A1  0187               	clrf	7	;volatile
  5004                           
  5005                           ;Init_MPU.c: 14: PORTD = 0x00;
  5006  08A2  0188               	clrf	8	;volatile
  5007                           
  5008                           ;Init_MPU.c: 15: PORTE = 0x00;
  5009  08A3  0189               	clrf	9	;volatile
  5010                           
  5011                           ;Init_MPU.c: 18: ANSEL = 0x00;
  5012  08A4  1683               	bsf	3,5	;RP0=1, select bank3
  5013  08A5  1703               	bsf	3,6	;RP1=1, select bank3
  5014  08A6  0188               	clrf	8	;volatile
  5015                           
  5016                           ;Init_MPU.c: 19: ANSELH = 0x00;
  5017  08A7  0189               	clrf	9	;volatile
  5018                           
  5019                           ;Init_MPU.c: 23: TRISA = 0b10000000;
  5020  08A8  3080               	movlw	128
  5021  08A9  1683               	bsf	3,5	;RP0=1, select bank1
  5022  08AA  1303               	bcf	3,6	;RP1=0, select bank1
  5023  08AB  0085               	movwf	5	;volatile
  5024                           
  5025                           ;Init_MPU.c: 24: TRISB = 0b00100000;
  5026  08AC  3020               	movlw	32
  5027  08AD  0086               	movwf	6	;volatile
  5028                           
  5029                           ;Init_MPU.c: 25: TRISC = 0b10011000;
  5030  08AE  3098               	movlw	152
  5031  08AF  0087               	movwf	7	;volatile
  5032                           
  5033                           ;Init_MPU.c: 26: TRISD = 0b00000000;
  5034  08B0  0188               	clrf	8	;volatile
  5035                           
  5036                           ;Init_MPU.c: 27: TRISE = 0b00000000;
  5037  08B1  0189               	clrf	9	;volatile
  5038                           
  5039                           ;Init_MPU.c: 30: PORTA = 0x00;
  5040  08B2  1283               	bcf	3,5	;RP0=0, select bank0
  5041  08B3  1303               	bcf	3,6	;RP1=0, select bank0
  5042  08B4  0185               	clrf	5	;volatile
  5043                           
  5044                           ;Init_MPU.c: 31: PORTB = 0x00;
  5045  08B5  0186               	clrf	6	;volatile
  5046                           
  5047                           ;Init_MPU.c: 32: PORTC = 0x00;
  5048  08B6  0187               	clrf	7	;volatile
  5049                           
  5050                           ;Init_MPU.c: 33: PORTD = 0x00;
  5051  08B7  0188               	clrf	8	;volatile
  5052                           
  5053                           ;Init_MPU.c: 34: PORTE = 0x00;
  5054  08B8  0189               	clrf	9	;volatile
  5055  08B9  0008               	return
  5056  08BA                     __end_of_Init_MPU:	
  5057                           
  5058                           	psect	text12
  5059  0994                     __ptext12:	
  5060 ;; *************** function _Init_I2C_M *****************
  5061 ;; Defined at:
  5062 ;;		line 8 in file "I2C.c"
  5063 ;; Parameters:    Size  Location     Type
  5064 ;;  c               4    0[BANK0 ] const unsigned long 
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;		None
  5067 ;; Return value:  Size  Location     Type
  5068 ;;                  1    wreg      void 
  5069 ;; Registers used:
  5070 ;;		wreg, status,2, status,0, pclath, cstack
  5071 ;; Tracked objects:
  5072 ;;		On entry : 0/0
  5073 ;;		On exit  : 0/0
  5074 ;;		Unchanged: 0/0
  5075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5076 ;;      Params:         0       4       0       0       0
  5077 ;;      Locals:         0       0       0       0       0
  5078 ;;      Temps:          0       4       0       0       0
  5079 ;;      Totals:         0       8       0       0       0
  5080 ;;Total ram usage:        8 bytes
  5081 ;; Hardware stack levels used:    1
  5082 ;; Hardware stack levels required when called:    1
  5083 ;; This function calls:
  5084 ;;		___lldiv
  5085 ;; This function is called by:
  5086 ;;		_main
  5087 ;; This function uses a non-reentrant model
  5088 ;;
  5089                           
  5090                           
  5091                           ;psect for function _Init_I2C_M
  5092  0994                     _Init_I2C_M:	
  5093                           
  5094                           ;I2C.c: 9: SSPCON = 0b00101000;
  5095                           
  5096                           ;incstack = 0
  5097                           ; Regs used in _Init_I2C_M: [wreg+status,2+status,0+pclath+cstack]
  5098  0994  3028               	movlw	40
  5099  0995  1283               	bcf	3,5	;RP0=0, select bank0
  5100  0996  1303               	bcf	3,6	;RP1=0, select bank0
  5101  0997  0094               	movwf	20	;volatile
  5102                           
  5103                           ;I2C.c: 10: SSPCON2 = 0;
  5104  0998  1683               	bsf	3,5	;RP0=1, select bank1
  5105  0999  1303               	bcf	3,6	;RP1=0, select bank1
  5106  099A  0191               	clrf	17	;volatile
  5107                           
  5108                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  5109  099B  1283               	bcf	3,5	;RP0=0, select bank0
  5110  099C  1303               	bcf	3,6	;RP1=0, select bank0
  5111  099D  0820               	movf	Init_I2C_M@c,w
  5112  099E  00A4               	movwf	??_Init_I2C_M
  5113  099F  0821               	movf	Init_I2C_M@c+1,w
  5114  09A0  00A5               	movwf	??_Init_I2C_M+1
  5115  09A1  0822               	movf	Init_I2C_M@c+2,w
  5116  09A2  00A6               	movwf	??_Init_I2C_M+2
  5117  09A3  0823               	movf	Init_I2C_M@c+3,w
  5118  09A4  00A7               	movwf	??_Init_I2C_M+3
  5119  09A5  3002               	movlw	2
  5120  09A6                     u3175:	
  5121  09A6  1003               	clrc
  5122  09A7  0DA4               	rlf	??_Init_I2C_M,f
  5123  09A8  0DA5               	rlf	??_Init_I2C_M+1,f
  5124  09A9  0DA6               	rlf	??_Init_I2C_M+2,f
  5125  09AA  0DA7               	rlf	??_Init_I2C_M+3,f
  5126  09AB  3EFF               	addlw	-1
  5127  09AC  1D03               	skipz
  5128  09AD  29A6               	goto	u3175
  5129  09AE  0827               	movf	??_Init_I2C_M+3,w
  5130  09AF  00F3               	movwf	___lldiv@divisor+3
  5131  09B0  0826               	movf	??_Init_I2C_M+2,w
  5132  09B1  00F2               	movwf	___lldiv@divisor+2
  5133  09B2  0825               	movf	??_Init_I2C_M+1,w
  5134  09B3  00F1               	movwf	___lldiv@divisor+1
  5135  09B4  0824               	movf	??_Init_I2C_M,w
  5136  09B5  00F0               	movwf	___lldiv@divisor
  5137  09B6  3000               	movlw	0
  5138  09B7  00F7               	movwf	___lldiv@dividend+3
  5139  09B8  3098               	movlw	152
  5140  09B9  00F6               	movwf	___lldiv@dividend+2
  5141  09BA  3096               	movlw	150
  5142  09BB  00F5               	movwf	___lldiv@dividend+1
  5143  09BC  3080               	movlw	128
  5144  09BD  00F4               	movwf	___lldiv@dividend
  5145  09BE  120A  158A  239D   	fcall	___lldiv
  5146  09C1  0870               	movf	?___lldiv,w
  5147  09C2  3EFF               	addlw	255
  5148  09C3  1683               	bsf	3,5	;RP0=1, select bank1
  5149  09C4  1303               	bcf	3,6	;RP1=0, select bank1
  5150  09C5  0093               	movwf	19	;volatile
  5151                           
  5152                           ;I2C.c: 12: SSPSTAT = 0;
  5153  09C6  0194               	clrf	20	;volatile
  5154  09C7  0008               	return
  5155  09C8                     __end_of_Init_I2C_M:	
  5156                           
  5157                           	psect	text13
  5158  0B9D                     __ptext13:	
  5159 ;; *************** function ___lldiv *****************
  5160 ;; Defined at:
  5161 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  5162 ;; Parameters:    Size  Location     Type
  5163 ;;  divisor         4    0[COMMON] unsigned long 
  5164 ;;  dividend        4    4[COMMON] unsigned long 
  5165 ;; Auto vars:     Size  Location     Type
  5166 ;;  quotient        4    9[COMMON] unsigned long 
  5167 ;;  counter         1   13[COMMON] unsigned char 
  5168 ;; Return value:  Size  Location     Type
  5169 ;;                  4    0[COMMON] unsigned long 
  5170 ;; Registers used:
  5171 ;;		wreg, status,2, status,0
  5172 ;; Tracked objects:
  5173 ;;		On entry : 0/0
  5174 ;;		On exit  : 0/0
  5175 ;;		Unchanged: 0/0
  5176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5177 ;;      Params:         8       0       0       0       0
  5178 ;;      Locals:         5       0       0       0       0
  5179 ;;      Temps:          1       0       0       0       0
  5180 ;;      Totals:        14       0       0       0       0
  5181 ;;Total ram usage:       14 bytes
  5182 ;; Hardware stack levels used:    1
  5183 ;; This function calls:
  5184 ;;		Nothing
  5185 ;; This function is called by:
  5186 ;;		_Init_I2C_M
  5187 ;; This function uses a non-reentrant model
  5188 ;;
  5189                           
  5190                           
  5191                           ;psect for function ___lldiv
  5192  0B9D                     ___lldiv:	
  5193                           
  5194                           ;incstack = 0
  5195                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5196  0B9D  3000               	movlw	0
  5197  0B9E  00FC               	movwf	___lldiv@quotient+3
  5198  0B9F  3000               	movlw	0
  5199  0BA0  00FB               	movwf	___lldiv@quotient+2
  5200  0BA1  3000               	movlw	0
  5201  0BA2  00FA               	movwf	___lldiv@quotient+1
  5202  0BA3  3000               	movlw	0
  5203  0BA4  00F9               	movwf	___lldiv@quotient
  5204  0BA5  0873               	movf	___lldiv@divisor+3,w
  5205  0BA6  0472               	iorwf	___lldiv@divisor+2,w
  5206  0BA7  0471               	iorwf	___lldiv@divisor+1,w
  5207  0BA8  0470               	iorwf	___lldiv@divisor,w
  5208  0BA9  1903               	skipnz
  5209  0BAA  2BF2               	goto	l3299
  5210  0BAB  01FD               	clrf	___lldiv@counter
  5211  0BAC  0AFD               	incf	___lldiv@counter,f
  5212  0BAD                     l3285:	
  5213  0BAD  1BF3               	btfsc	___lldiv@divisor+3,7
  5214  0BAE  2BBD               	goto	l3287
  5215  0BAF  3001               	movlw	1
  5216  0BB0  00F8               	movwf	??___lldiv
  5217  0BB1                     u3025:	
  5218  0BB1  1003               	clrc
  5219  0BB2  0DF0               	rlf	___lldiv@divisor,f
  5220  0BB3  0DF1               	rlf	___lldiv@divisor+1,f
  5221  0BB4  0DF2               	rlf	___lldiv@divisor+2,f
  5222  0BB5  0DF3               	rlf	___lldiv@divisor+3,f
  5223  0BB6  0BF8               	decfsz	??___lldiv,f
  5224  0BB7  2BB1               	goto	u3025
  5225  0BB8  3001               	movlw	1
  5226  0BB9  00F8               	movwf	??___lldiv
  5227  0BBA  0878               	movf	??___lldiv,w
  5228  0BBB  07FD               	addwf	___lldiv@counter,f
  5229  0BBC  2BAD               	goto	l3285
  5230  0BBD                     l3287:	
  5231  0BBD  3001               	movlw	1
  5232  0BBE  00F8               	movwf	??___lldiv
  5233  0BBF                     u3045:	
  5234  0BBF  1003               	clrc
  5235  0BC0  0DF9               	rlf	___lldiv@quotient,f
  5236  0BC1  0DFA               	rlf	___lldiv@quotient+1,f
  5237  0BC2  0DFB               	rlf	___lldiv@quotient+2,f
  5238  0BC3  0DFC               	rlf	___lldiv@quotient+3,f
  5239  0BC4  0BF8               	decfsz	??___lldiv,f
  5240  0BC5  2BBF               	goto	u3045
  5241  0BC6  0873               	movf	___lldiv@divisor+3,w
  5242  0BC7  0277               	subwf	___lldiv@dividend+3,w
  5243  0BC8  1D03               	skipz
  5244  0BC9  2BD4               	goto	u3055
  5245  0BCA  0872               	movf	___lldiv@divisor+2,w
  5246  0BCB  0276               	subwf	___lldiv@dividend+2,w
  5247  0BCC  1D03               	skipz
  5248  0BCD  2BD4               	goto	u3055
  5249  0BCE  0871               	movf	___lldiv@divisor+1,w
  5250  0BCF  0275               	subwf	___lldiv@dividend+1,w
  5251  0BD0  1D03               	skipz
  5252  0BD1  2BD4               	goto	u3055
  5253  0BD2  0870               	movf	___lldiv@divisor,w
  5254  0BD3  0274               	subwf	___lldiv@dividend,w
  5255  0BD4                     u3055:	
  5256  0BD4  1C03               	skipc
  5257  0BD5  2BE5               	goto	l3295
  5258  0BD6  0870               	movf	___lldiv@divisor,w
  5259  0BD7  02F4               	subwf	___lldiv@dividend,f
  5260  0BD8  0871               	movf	___lldiv@divisor+1,w
  5261  0BD9  1C03               	skipc
  5262  0BDA  0F71               	incfsz	___lldiv@divisor+1,w
  5263  0BDB  02F5               	subwf	___lldiv@dividend+1,f
  5264  0BDC  0872               	movf	___lldiv@divisor+2,w
  5265  0BDD  1C03               	skipc
  5266  0BDE  0F72               	incfsz	___lldiv@divisor+2,w
  5267  0BDF  02F6               	subwf	___lldiv@dividend+2,f
  5268  0BE0  0873               	movf	___lldiv@divisor+3,w
  5269  0BE1  1C03               	skipc
  5270  0BE2  0F73               	incfsz	___lldiv@divisor+3,w
  5271  0BE3  02F7               	subwf	___lldiv@dividend+3,f
  5272  0BE4  1479               	bsf	___lldiv@quotient,0
  5273  0BE5                     l3295:	
  5274  0BE5  3001               	movlw	1
  5275  0BE6                     u3065:	
  5276  0BE6  1003               	clrc
  5277  0BE7  0CF3               	rrf	___lldiv@divisor+3,f
  5278  0BE8  0CF2               	rrf	___lldiv@divisor+2,f
  5279  0BE9  0CF1               	rrf	___lldiv@divisor+1,f
  5280  0BEA  0CF0               	rrf	___lldiv@divisor,f
  5281  0BEB  3EFF               	addlw	-1
  5282  0BEC  1D03               	skipz
  5283  0BED  2BE6               	goto	u3065
  5284  0BEE  3001               	movlw	1
  5285  0BEF  02FD               	subwf	___lldiv@counter,f
  5286  0BF0  1D03               	btfss	3,2
  5287  0BF1  2BBD               	goto	l3287
  5288  0BF2                     l3299:	
  5289  0BF2  087C               	movf	___lldiv@quotient+3,w
  5290  0BF3  00F3               	movwf	?___lldiv+3
  5291  0BF4  087B               	movf	___lldiv@quotient+2,w
  5292  0BF5  00F2               	movwf	?___lldiv+2
  5293  0BF6  087A               	movf	___lldiv@quotient+1,w
  5294  0BF7  00F1               	movwf	?___lldiv+1
  5295  0BF8  0879               	movf	___lldiv@quotient,w
  5296  0BF9  00F0               	movwf	?___lldiv
  5297  0BFA  0008               	return
  5298  0BFB                     __end_of___lldiv:	
  5299                           
  5300                           	psect	text14
  5301  093A                     __ptext14:	
  5302 ;; *************** function _FMTX *****************
  5303 ;; Defined at:
  5304 ;;		line 270 in file "FMCW.c"
  5305 ;; Parameters:    Size  Location     Type
  5306 ;;  Nref            2   60[BANK0 ] int 
  5307 ;;  Nprg            2   62[BANK0 ] PTR int 
  5308 ;;		 -> RAM(512), main@FMTX_Nprg(10), FMTX_Nprg(10), 
  5309 ;; Auto vars:     Size  Location     Type
  5310 ;;  fmtx            2   64[BANK0 ] int 
  5311 ;; Return value:  Size  Location     Type
  5312 ;;                  1    wreg      void 
  5313 ;; Registers used:
  5314 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5315 ;; Tracked objects:
  5316 ;;		On entry : 0/0
  5317 ;;		On exit  : 0/0
  5318 ;;		Unchanged: 0/0
  5319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5320 ;;      Params:         0       4       0       0       0
  5321 ;;      Locals:         0       2       0       0       0
  5322 ;;      Temps:          0       0       0       0       0
  5323 ;;      Totals:         0       6       0       0       0
  5324 ;;Total ram usage:        6 bytes
  5325 ;; Hardware stack levels used:    1
  5326 ;; Hardware stack levels required when called:    3
  5327 ;; This function calls:
  5328 ;;		_OPINIT
  5329 ;;		_OUTFQ
  5330 ;;		_RFDOUT
  5331 ;; This function is called by:
  5332 ;;		_main
  5333 ;;		_SetPLL
  5334 ;; This function uses a non-reentrant model
  5335 ;;
  5336                           
  5337                           
  5338                           ;psect for function _FMTX
  5339  093A                     _FMTX:	
  5340                           
  5341                           ;FMCW.c: 271: int fmtx = 1;
  5342                           
  5343                           ;incstack = 0
  5344                           ; Regs used in _FMTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5345  093A  3001               	movlw	1
  5346  093B  1283               	bcf	3,5	;RP0=0, select bank0
  5347  093C  1303               	bcf	3,6	;RP1=0, select bank0
  5348  093D  00E0               	movwf	FMTX@fmtx
  5349  093E  3000               	movlw	0
  5350  093F  00E1               	movwf	FMTX@fmtx+1
  5351                           
  5352                           ;FMCW.c: 272: OPINIT(fmtx);
  5353  0940  0861               	movf	FMTX@fmtx+1,w
  5354  0941  00F5               	movwf	OPINIT@fmcwtxrx+1
  5355  0942  0860               	movf	FMTX@fmtx,w
  5356  0943  00F4               	movwf	OPINIT@fmcwtxrx
  5357  0944  120A  158A  24C1  120A  158A  	fcall	_OPINIT
  5358                           
  5359                           ;FMCW.c: 273: RFDOUT(fmtx, Nref);
  5360  0949  1283               	bcf	3,5	;RP0=0, select bank0
  5361  094A  1303               	bcf	3,6	;RP1=0, select bank0
  5362  094B  0861               	movf	FMTX@fmtx+1,w
  5363  094C  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5364  094D  0860               	movf	FMTX@fmtx,w
  5365  094E  00F9               	movwf	RFDOUT@fmcwtxrx
  5366  094F  085D               	movf	FMTX@Nref+1,w
  5367  0950  00FC               	movwf	RFDOUT@Nref+1
  5368  0951  085C               	movf	FMTX@Nref,w
  5369  0952  00FB               	movwf	RFDOUT@Nref
  5370  0953  120A  158A  253E  120A  158A  	fcall	_RFDOUT
  5371                           
  5372                           ;FMCW.c: 274: OUTFQ(fmtx, Nprg);
  5373  0958  1283               	bcf	3,5	;RP0=0, select bank0
  5374  0959  1303               	bcf	3,6	;RP1=0, select bank0
  5375  095A  0861               	movf	FMTX@fmtx+1,w
  5376  095B  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5377  095C  0860               	movf	FMTX@fmtx,w
  5378  095D  00F9               	movwf	OUTFQ@fmcwtxrx
  5379  095E  085E               	movf	FMTX@Nprg,w
  5380  095F  00FB               	movwf	OUTFQ@Nprg
  5381  0960  085F               	movf	FMTX@Nprg+1,w
  5382  0961  00FC               	movwf	OUTFQ@Nprg+1
  5383  0962  120A  118A  20AC   	fcall	_OUTFQ
  5384  0965  0008               	return
  5385  0966                     __end_of_FMTX:	
  5386                           
  5387                           	psect	text15
  5388  090E                     __ptext15:	
  5389 ;; *************** function _FMRX *****************
  5390 ;; Defined at:
  5391 ;;		line 298 in file "FMCW.c"
  5392 ;; Parameters:    Size  Location     Type
  5393 ;;  Nref            2   60[BANK0 ] int 
  5394 ;;  Nprg            2   62[BANK0 ] PTR int 
  5395 ;;		 -> RAM(512), main@FMRX_Nprg(10), FMRX_Nprg(10), 
  5396 ;; Auto vars:     Size  Location     Type
  5397 ;;  fmrx            2   64[BANK0 ] int 
  5398 ;; Return value:  Size  Location     Type
  5399 ;;                  1    wreg      void 
  5400 ;; Registers used:
  5401 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5402 ;; Tracked objects:
  5403 ;;		On entry : 0/0
  5404 ;;		On exit  : 0/0
  5405 ;;		Unchanged: 0/0
  5406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5407 ;;      Params:         0       4       0       0       0
  5408 ;;      Locals:         0       2       0       0       0
  5409 ;;      Temps:          0       0       0       0       0
  5410 ;;      Totals:         0       6       0       0       0
  5411 ;;Total ram usage:        6 bytes
  5412 ;; Hardware stack levels used:    1
  5413 ;; Hardware stack levels required when called:    3
  5414 ;; This function calls:
  5415 ;;		_OPINIT
  5416 ;;		_OUTFQ
  5417 ;;		_RFDOUT
  5418 ;; This function is called by:
  5419 ;;		_main
  5420 ;;		_SetPLL
  5421 ;; This function uses a non-reentrant model
  5422 ;;
  5423                           
  5424                           
  5425                           ;psect for function _FMRX
  5426  090E                     _FMRX:	
  5427                           
  5428                           ;FMCW.c: 299: int fmrx = 3;
  5429                           
  5430                           ;incstack = 0
  5431                           ; Regs used in _FMRX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5432  090E  3003               	movlw	3
  5433  090F  1283               	bcf	3,5	;RP0=0, select bank0
  5434  0910  1303               	bcf	3,6	;RP1=0, select bank0
  5435  0911  00E0               	movwf	FMRX@fmrx
  5436  0912  3000               	movlw	0
  5437  0913  00E1               	movwf	FMRX@fmrx+1
  5438                           
  5439                           ;FMCW.c: 300: OPINIT(fmrx);
  5440  0914  0861               	movf	FMRX@fmrx+1,w
  5441  0915  00F5               	movwf	OPINIT@fmcwtxrx+1
  5442  0916  0860               	movf	FMRX@fmrx,w
  5443  0917  00F4               	movwf	OPINIT@fmcwtxrx
  5444  0918  120A  158A  24C1  120A  158A  	fcall	_OPINIT
  5445                           
  5446                           ;FMCW.c: 301: RFDOUT(fmrx, Nref);
  5447  091D  1283               	bcf	3,5	;RP0=0, select bank0
  5448  091E  1303               	bcf	3,6	;RP1=0, select bank0
  5449  091F  0861               	movf	FMRX@fmrx+1,w
  5450  0920  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5451  0921  0860               	movf	FMRX@fmrx,w
  5452  0922  00F9               	movwf	RFDOUT@fmcwtxrx
  5453  0923  085D               	movf	FMRX@Nref+1,w
  5454  0924  00FC               	movwf	RFDOUT@Nref+1
  5455  0925  085C               	movf	FMRX@Nref,w
  5456  0926  00FB               	movwf	RFDOUT@Nref
  5457  0927  120A  158A  253E  120A  158A  	fcall	_RFDOUT
  5458                           
  5459                           ;FMCW.c: 302: OUTFQ(fmrx, Nprg);
  5460  092C  1283               	bcf	3,5	;RP0=0, select bank0
  5461  092D  1303               	bcf	3,6	;RP1=0, select bank0
  5462  092E  0861               	movf	FMRX@fmrx+1,w
  5463  092F  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5464  0930  0860               	movf	FMRX@fmrx,w
  5465  0931  00F9               	movwf	OUTFQ@fmcwtxrx
  5466  0932  085E               	movf	FMRX@Nprg,w
  5467  0933  00FB               	movwf	OUTFQ@Nprg
  5468  0934  085F               	movf	FMRX@Nprg+1,w
  5469  0935  00FC               	movwf	OUTFQ@Nprg+1
  5470  0936  120A  118A  20AC   	fcall	_OUTFQ
  5471  0939  0008               	return
  5472  093A                     __end_of_FMRX:	
  5473                           
  5474                           	psect	text16
  5475  0B40                     __ptext16:	
  5476 ;; *************** function _EEPROM_Write *****************
  5477 ;; Defined at:
  5478 ;;		line 51 in file "I2C.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;  EEPROM_addre    1    wreg     unsigned char 
  5481 ;;  high_address    1    2[COMMON] unsigned char 
  5482 ;;  low_address     1    3[COMMON] unsigned char 
  5483 ;;  data            1    4[COMMON] PTR unsigned char 
  5484 ;;		 -> NULL(0), dData(32), 
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;  EEPROM_addre    1    8[COMMON] unsigned char 
  5487 ;;  Address         1    9[COMMON] unsigned char 
  5488 ;; Return value:  Size  Location     Type
  5489 ;;                  1    wreg      void 
  5490 ;; Registers used:
  5491 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5492 ;; Tracked objects:
  5493 ;;		On entry : 0/0
  5494 ;;		On exit  : 0/0
  5495 ;;		Unchanged: 0/0
  5496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5497 ;;      Params:         3       0       0       0       0
  5498 ;;      Locals:         2       0       0       0       0
  5499 ;;      Temps:          3       0       0       0       0
  5500 ;;      Totals:         8       0       0       0       0
  5501 ;;Total ram usage:        8 bytes
  5502 ;; Hardware stack levels used:    1
  5503 ;; Hardware stack levels required when called:    2
  5504 ;; This function calls:
  5505 ;;		_I2C_Master_Start
  5506 ;;		_I2C_Master_Stop
  5507 ;;		_I2C_Master_Write
  5508 ;; This function is called by:
  5509 ;;		_main
  5510 ;; This function uses a non-reentrant model
  5511 ;;
  5512                           
  5513                           
  5514                           ;psect for function _EEPROM_Write
  5515  0B40                     _EEPROM_Write:	
  5516                           
  5517                           ;incstack = 0
  5518                           ; Regs used in _EEPROM_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5519                           ;EEPROM_Write@EEPROM_address stored from wreg
  5520  0B40  00F8               	movwf	EEPROM_Write@EEPROM_address
  5521                           
  5522                           ;I2C.c: 52: UBYTE Address = EEPROM_address << 1;
  5523  0B41  0878               	movf	EEPROM_Write@EEPROM_address,w
  5524  0B42  00F5               	movwf	??_EEPROM_Write
  5525  0B43  0775               	addwf	??_EEPROM_Write,w
  5526  0B44  00F6               	movwf	??_EEPROM_Write+1
  5527  0B45  0876               	movf	??_EEPROM_Write+1,w
  5528  0B46  00F9               	movwf	EEPROM_Write@Address
  5529                           
  5530                           ;I2C.c: 55: I2C_Master_Start();
  5531  0B47  160A  118A  27C9  120A  158A  	fcall	_I2C_Master_Start
  5532                           
  5533                           ;I2C.c: 56: I2C_Master_Write(Address);
  5534  0B4C  0879               	movf	EEPROM_Write@Address,w
  5535  0B4D  00F5               	movwf	??_EEPROM_Write
  5536  0B4E  01F6               	clrf	??_EEPROM_Write+1
  5537  0B4F  0875               	movf	??_EEPROM_Write,w
  5538  0B50  00F0               	movwf	I2C_Master_Write@d
  5539  0B51  0876               	movf	??_EEPROM_Write+1,w
  5540  0B52  00F1               	movwf	I2C_Master_Write@d+1
  5541  0B53  160A  118A  27D7  120A  158A  	fcall	_I2C_Master_Write
  5542                           
  5543                           ;I2C.c: 57: I2C_Master_Write(high_address);
  5544  0B58  0872               	movf	EEPROM_Write@high_address,w
  5545  0B59  00F5               	movwf	??_EEPROM_Write
  5546  0B5A  01F6               	clrf	??_EEPROM_Write+1
  5547  0B5B  0875               	movf	??_EEPROM_Write,w
  5548  0B5C  00F0               	movwf	I2C_Master_Write@d
  5549  0B5D  0876               	movf	??_EEPROM_Write+1,w
  5550  0B5E  00F1               	movwf	I2C_Master_Write@d+1
  5551  0B5F  160A  118A  27D7  120A  158A  	fcall	_I2C_Master_Write
  5552                           
  5553                           ;I2C.c: 58: I2C_Master_Write(low_address);
  5554  0B64  0873               	movf	EEPROM_Write@low_address,w
  5555  0B65  00F5               	movwf	??_EEPROM_Write
  5556  0B66  01F6               	clrf	??_EEPROM_Write+1
  5557  0B67  0875               	movf	??_EEPROM_Write,w
  5558  0B68  00F0               	movwf	I2C_Master_Write@d
  5559  0B69  0876               	movf	??_EEPROM_Write+1,w
  5560  0B6A  00F1               	movwf	I2C_Master_Write@d+1
  5561  0B6B  160A  118A  27D7  120A  158A  	fcall	_I2C_Master_Write
  5562  0B70                     l3497:	
  5563                           ;I2C.c: 59: while(*data){
  5564                           
  5565  0B70  0874               	movf	EEPROM_Write@data,w
  5566  0B71  0084               	movwf	4
  5567  0B72  1783               	bsf	3,7	;select IRP bank2
  5568  0B73  0800               	movf	0,w
  5569  0B74  1903               	btfsc	3,2
  5570  0B75  2B8A               	goto	l3499
  5571                           
  5572                           ;I2C.c: 60: I2C_Master_Write(*data);
  5573  0B76  0874               	movf	EEPROM_Write@data,w
  5574  0B77  0084               	movwf	4
  5575  0B78  1783               	bsf	3,7	;select IRP bank2
  5576  0B79  0800               	movf	0,w
  5577  0B7A  00F5               	movwf	??_EEPROM_Write
  5578  0B7B  01F6               	clrf	??_EEPROM_Write+1
  5579  0B7C  0875               	movf	??_EEPROM_Write,w
  5580  0B7D  00F0               	movwf	I2C_Master_Write@d
  5581  0B7E  0876               	movf	??_EEPROM_Write+1,w
  5582  0B7F  00F1               	movwf	I2C_Master_Write@d+1
  5583  0B80  160A  118A  27D7  120A  158A  	fcall	_I2C_Master_Write
  5584                           
  5585                           ;I2C.c: 61: ++data;
  5586  0B85  3001               	movlw	1
  5587  0B86  00F5               	movwf	??_EEPROM_Write
  5588  0B87  0875               	movf	??_EEPROM_Write,w
  5589  0B88  07F4               	addwf	EEPROM_Write@data,f
  5590  0B89  2B70               	goto	l3497
  5591  0B8A                     l3499:	
  5592                           
  5593                           ;I2C.c: 62: }
  5594                           ;I2C.c: 63: I2C_Master_Stop();
  5595  0B8A  160A  118A  27D0  120A  158A  	fcall	_I2C_Master_Stop
  5596                           
  5597                           ;I2C.c: 64: _delay((unsigned long)((200)*(10000000/4000.0)));
  5598  0B8F  3003               	movlw	3
  5599  0B90  00F7               	movwf	??_EEPROM_Write+2
  5600  0B91  308A               	movlw	138
  5601  0B92  00F6               	movwf	??_EEPROM_Write+1
  5602  0B93  3056               	movlw	86
  5603  0B94  00F5               	movwf	??_EEPROM_Write
  5604  0B95                     u3697:	
  5605  0B95  0BF5               	decfsz	??_EEPROM_Write,f
  5606  0B96  2B95               	goto	u3697
  5607  0B97  0BF6               	decfsz	??_EEPROM_Write+1,f
  5608  0B98  2B95               	goto	u3697
  5609  0B99  0BF7               	decfsz	??_EEPROM_Write+2,f
  5610  0B9A  2B95               	goto	u3697
  5611  0B9B  2B9C               	nop2
  5612  0B9C  0008               	return
  5613  0B9D                     __end_of_EEPROM_Write:	
  5614                           
  5615                           	psect	text17
  5616  17D7                     __ptext17:	
  5617 ;; *************** function _I2C_Master_Write *****************
  5618 ;; Defined at:
  5619 ;;		line 34 in file "I2C.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;  d               2    0[COMMON] unsigned int 
  5622 ;; Auto vars:     Size  Location     Type
  5623 ;;		None
  5624 ;; Return value:  Size  Location     Type
  5625 ;;                  1    wreg      void 
  5626 ;; Registers used:
  5627 ;;		wreg, status,2, status,0, pclath, cstack
  5628 ;; Tracked objects:
  5629 ;;		On entry : 0/0
  5630 ;;		On exit  : 0/0
  5631 ;;		Unchanged: 0/0
  5632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5633 ;;      Params:         2       0       0       0       0
  5634 ;;      Locals:         0       0       0       0       0
  5635 ;;      Temps:          0       0       0       0       0
  5636 ;;      Totals:         2       0       0       0       0
  5637 ;;Total ram usage:        2 bytes
  5638 ;; Hardware stack levels used:    1
  5639 ;; Hardware stack levels required when called:    1
  5640 ;; This function calls:
  5641 ;;		_I2C_Master_Wait
  5642 ;; This function is called by:
  5643 ;;		_EEPROM_Write
  5644 ;;		_EEPROM_Read
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           
  5649                           ;psect for function _I2C_Master_Write
  5650  17D7                     _I2C_Master_Write:	
  5651                           
  5652                           ;I2C.c: 35: I2C_Master_Wait();
  5653                           
  5654                           ;incstack = 0
  5655                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5656  17D7  120A  158A  2021   	fcall	_I2C_Master_Wait
  5657                           
  5658                           ;I2C.c: 36: SSPBUF = d;
  5659  17DA  0870               	movf	I2C_Master_Write@d,w
  5660  17DB  1283               	bcf	3,5	;RP0=0, select bank0
  5661  17DC  1303               	bcf	3,6	;RP1=0, select bank0
  5662  17DD  0093               	movwf	19	;volatile
  5663  17DE  0008               	return
  5664  17DF                     __end_of_I2C_Master_Write:	
  5665                           
  5666                           	psect	text18
  5667  17D0                     __ptext18:	
  5668 ;; *************** function _I2C_Master_Stop *****************
  5669 ;; Defined at:
  5670 ;;		line 29 in file "I2C.c"
  5671 ;; Parameters:    Size  Location     Type
  5672 ;;		None
  5673 ;; Auto vars:     Size  Location     Type
  5674 ;;		None
  5675 ;; Return value:  Size  Location     Type
  5676 ;;                  1    wreg      void 
  5677 ;; Registers used:
  5678 ;;		wreg, status,2, status,0, pclath, cstack
  5679 ;; Tracked objects:
  5680 ;;		On entry : 0/0
  5681 ;;		On exit  : 0/0
  5682 ;;		Unchanged: 0/0
  5683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5684 ;;      Params:         0       0       0       0       0
  5685 ;;      Locals:         0       0       0       0       0
  5686 ;;      Temps:          0       0       0       0       0
  5687 ;;      Totals:         0       0       0       0       0
  5688 ;;Total ram usage:        0 bytes
  5689 ;; Hardware stack levels used:    1
  5690 ;; Hardware stack levels required when called:    1
  5691 ;; This function calls:
  5692 ;;		_I2C_Master_Wait
  5693 ;; This function is called by:
  5694 ;;		_EEPROM_Write
  5695 ;;		_EEPROM_Read
  5696 ;; This function uses a non-reentrant model
  5697 ;;
  5698                           
  5699                           
  5700                           ;psect for function _I2C_Master_Stop
  5701  17D0                     _I2C_Master_Stop:	
  5702                           
  5703                           ;I2C.c: 30: I2C_Master_Wait();
  5704                           
  5705                           ;incstack = 0
  5706                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5707  17D0  120A  158A  2021   	fcall	_I2C_Master_Wait
  5708                           
  5709                           ;I2C.c: 31: PEN = 1;
  5710  17D3  1683               	bsf	3,5	;RP0=1, select bank1
  5711  17D4  1303               	bcf	3,6	;RP1=0, select bank1
  5712  17D5  1511               	bsf	17,2	;volatile
  5713  17D6  0008               	return
  5714  17D7                     __end_of_I2C_Master_Stop:	
  5715                           
  5716                           	psect	text19
  5717  17C9                     __ptext19:	
  5718 ;; *************** function _I2C_Master_Start *****************
  5719 ;; Defined at:
  5720 ;;		line 19 in file "I2C.c"
  5721 ;; Parameters:    Size  Location     Type
  5722 ;;		None
  5723 ;; Auto vars:     Size  Location     Type
  5724 ;;		None
  5725 ;; Return value:  Size  Location     Type
  5726 ;;                  1    wreg      void 
  5727 ;; Registers used:
  5728 ;;		wreg, status,2, status,0, pclath, cstack
  5729 ;; Tracked objects:
  5730 ;;		On entry : 0/0
  5731 ;;		On exit  : 0/0
  5732 ;;		Unchanged: 0/0
  5733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5734 ;;      Params:         0       0       0       0       0
  5735 ;;      Locals:         0       0       0       0       0
  5736 ;;      Temps:          0       0       0       0       0
  5737 ;;      Totals:         0       0       0       0       0
  5738 ;;Total ram usage:        0 bytes
  5739 ;; Hardware stack levels used:    1
  5740 ;; Hardware stack levels required when called:    1
  5741 ;; This function calls:
  5742 ;;		_I2C_Master_Wait
  5743 ;; This function is called by:
  5744 ;;		_EEPROM_Write
  5745 ;;		_EEPROM_Read
  5746 ;; This function uses a non-reentrant model
  5747 ;;
  5748                           
  5749                           
  5750                           ;psect for function _I2C_Master_Start
  5751  17C9                     _I2C_Master_Start:	
  5752                           
  5753                           ;I2C.c: 20: I2C_Master_Wait();
  5754                           
  5755                           ;incstack = 0
  5756                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5757  17C9  120A  158A  2021   	fcall	_I2C_Master_Wait
  5758                           
  5759                           ;I2C.c: 21: SEN = 1;
  5760  17CC  1683               	bsf	3,5	;RP0=1, select bank1
  5761  17CD  1303               	bcf	3,6	;RP1=0, select bank1
  5762  17CE  1411               	bsf	17,0	;volatile
  5763  17CF  0008               	return
  5764  17D0                     __end_of_I2C_Master_Start:	
  5765                           
  5766                           	psect	text20
  5767  0821                     __ptext20:	
  5768 ;; *************** function _I2C_Master_Wait *****************
  5769 ;; Defined at:
  5770 ;;		line 15 in file "I2C.c"
  5771 ;; Parameters:    Size  Location     Type
  5772 ;;		None
  5773 ;; Auto vars:     Size  Location     Type
  5774 ;;		None
  5775 ;; Return value:  Size  Location     Type
  5776 ;;                  1    wreg      void 
  5777 ;; Registers used:
  5778 ;;		wreg, status,2
  5779 ;; Tracked objects:
  5780 ;;		On entry : 0/0
  5781 ;;		On exit  : 0/0
  5782 ;;		Unchanged: 0/0
  5783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5784 ;;      Params:         0       0       0       0       0
  5785 ;;      Locals:         0       0       0       0       0
  5786 ;;      Temps:          0       0       0       0       0
  5787 ;;      Totals:         0       0       0       0       0
  5788 ;;Total ram usage:        0 bytes
  5789 ;; Hardware stack levels used:    1
  5790 ;; This function calls:
  5791 ;;		Nothing
  5792 ;; This function is called by:
  5793 ;;		_I2C_Master_Start
  5794 ;;		_I2C_Master_Stop
  5795 ;;		_I2C_Master_Write
  5796 ;;		_I2C_Master_RepeatedStart
  5797 ;;		_I2C_Master_Read
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801                           
  5802                           ;psect for function _I2C_Master_Wait
  5803  0821                     _I2C_Master_Wait:	
  5804  0821                     l481:	
  5805                           ;I2C.c: 16: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5806                           
  5807                           ;incstack = 0
  5808                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5809                           
  5810  0821  1683               	bsf	3,5	;RP0=1, select bank1
  5811  0822  1303               	bcf	3,6	;RP1=0, select bank1
  5812  0823  1914               	btfsc	20,2	;volatile
  5813  0824  2821               	goto	l481
  5814  0825  0811               	movf	17,w	;volatile
  5815  0826  391F               	andlw	31
  5816  0827  1903               	btfsc	3,2
  5817  0828  0008               	return
  5818  0829  2821               	goto	l481
  5819  082A                     __end_of_I2C_Master_Wait:	
  5820                           
  5821                           	psect	text21
  5822  08E2                     __ptext21:	
  5823 ;; *************** function _CWTX *****************
  5824 ;; Defined at:
  5825 ;;		line 284 in file "FMCW.c"
  5826 ;; Parameters:    Size  Location     Type
  5827 ;;  Nref            2   60[BANK0 ] int 
  5828 ;;  Nprg            2   62[BANK0 ] PTR int 
  5829 ;;		 -> RAM(512), main@CWTX_Nprg(10), CWTX_Nprg(10), 
  5830 ;; Auto vars:     Size  Location     Type
  5831 ;;  cwtx            2   64[BANK0 ] int 
  5832 ;; Return value:  Size  Location     Type
  5833 ;;                  1    wreg      void 
  5834 ;; Registers used:
  5835 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5836 ;; Tracked objects:
  5837 ;;		On entry : 0/0
  5838 ;;		On exit  : 0/0
  5839 ;;		Unchanged: 0/0
  5840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5841 ;;      Params:         0       4       0       0       0
  5842 ;;      Locals:         0       2       0       0       0
  5843 ;;      Temps:          0       0       0       0       0
  5844 ;;      Totals:         0       6       0       0       0
  5845 ;;Total ram usage:        6 bytes
  5846 ;; Hardware stack levels used:    1
  5847 ;; Hardware stack levels required when called:    3
  5848 ;; This function calls:
  5849 ;;		_OPINIT
  5850 ;;		_OUTFQ
  5851 ;;		_RFDOUT
  5852 ;; This function is called by:
  5853 ;;		_main
  5854 ;;		_SetPLL
  5855 ;; This function uses a non-reentrant model
  5856 ;;
  5857                           
  5858                           
  5859                           ;psect for function _CWTX
  5860  08E2                     _CWTX:	
  5861                           
  5862                           ;FMCW.c: 285: int cwtx = 2;
  5863                           
  5864                           ;incstack = 0
  5865                           ; Regs used in _CWTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5866  08E2  3002               	movlw	2
  5867  08E3  1283               	bcf	3,5	;RP0=0, select bank0
  5868  08E4  1303               	bcf	3,6	;RP1=0, select bank0
  5869  08E5  00E0               	movwf	CWTX@cwtx
  5870  08E6  3000               	movlw	0
  5871  08E7  00E1               	movwf	CWTX@cwtx+1
  5872                           
  5873                           ;FMCW.c: 286: OPINIT(cwtx);
  5874  08E8  0861               	movf	CWTX@cwtx+1,w
  5875  08E9  00F5               	movwf	OPINIT@fmcwtxrx+1
  5876  08EA  0860               	movf	CWTX@cwtx,w
  5877  08EB  00F4               	movwf	OPINIT@fmcwtxrx
  5878  08EC  120A  158A  24C1  120A  158A  	fcall	_OPINIT
  5879                           
  5880                           ;FMCW.c: 287: RFDOUT(cwtx, Nref);
  5881  08F1  1283               	bcf	3,5	;RP0=0, select bank0
  5882  08F2  1303               	bcf	3,6	;RP1=0, select bank0
  5883  08F3  0861               	movf	CWTX@cwtx+1,w
  5884  08F4  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5885  08F5  0860               	movf	CWTX@cwtx,w
  5886  08F6  00F9               	movwf	RFDOUT@fmcwtxrx
  5887  08F7  085D               	movf	CWTX@Nref+1,w
  5888  08F8  00FC               	movwf	RFDOUT@Nref+1
  5889  08F9  085C               	movf	CWTX@Nref,w
  5890  08FA  00FB               	movwf	RFDOUT@Nref
  5891  08FB  120A  158A  253E  120A  158A  	fcall	_RFDOUT
  5892                           
  5893                           ;FMCW.c: 288: OUTFQ(cwtx, Nprg);
  5894  0900  1283               	bcf	3,5	;RP0=0, select bank0
  5895  0901  1303               	bcf	3,6	;RP1=0, select bank0
  5896  0902  0861               	movf	CWTX@cwtx+1,w
  5897  0903  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5898  0904  0860               	movf	CWTX@cwtx,w
  5899  0905  00F9               	movwf	OUTFQ@fmcwtxrx
  5900  0906  085E               	movf	CWTX@Nprg,w
  5901  0907  00FB               	movwf	OUTFQ@Nprg
  5902  0908  085F               	movf	CWTX@Nprg+1,w
  5903  0909  00FC               	movwf	OUTFQ@Nprg+1
  5904  090A  120A  118A  20AC   	fcall	_OUTFQ
  5905  090D  0008               	return
  5906  090E                     __end_of_CWTX:	
  5907                           
  5908                           	psect	text22
  5909  0D3E                     __ptext22:	
  5910 ;; *************** function _RFDOUT *****************
  5911 ;; Defined at:
  5912 ;;		line 200 in file "FMCW.c"
  5913 ;; Parameters:    Size  Location     Type
  5914 ;;  fmcwtxrx        2    9[COMMON] int 
  5915 ;;  Nref            2   11[COMMON] int 
  5916 ;; Auto vars:     Size  Location     Type
  5917 ;;  i               2   31[BANK0 ] int 
  5918 ;;  i               2   27[BANK0 ] int 
  5919 ;;  i               2   29[BANK0 ] int 
  5920 ;;  Nref_b         24    3[BANK0 ] int [12]
  5921 ;; Return value:  Size  Location     Type
  5922 ;;                  1    wreg      void 
  5923 ;; Registers used:
  5924 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5925 ;; Tracked objects:
  5926 ;;		On entry : 0/0
  5927 ;;		On exit  : 0/0
  5928 ;;		Unchanged: 0/0
  5929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5930 ;;      Params:         4       0       0       0       0
  5931 ;;      Locals:         0      30       0       0       0
  5932 ;;      Temps:          0       3       0       0       0
  5933 ;;      Totals:         4      33       0       0       0
  5934 ;;Total ram usage:       37 bytes
  5935 ;; Hardware stack levels used:    1
  5936 ;; Hardware stack levels required when called:    2
  5937 ;; This function calls:
  5938 ;;		_H_OUT
  5939 ;;		_L_OUT
  5940 ;;		_STBOUT
  5941 ;;		___awdiv
  5942 ;; This function is called by:
  5943 ;;		_FMTX
  5944 ;;		_CWTX
  5945 ;;		_FMRX
  5946 ;; This function uses a non-reentrant model
  5947 ;;
  5948                           
  5949                           
  5950                           ;psect for function _RFDOUT
  5951  0D3E                     _RFDOUT:	
  5952                           
  5953                           ;FMCW.c: 201: int Nref_b[12];
  5954                           ;FMCW.c: 203: for(int i=0; i<12; i++){
  5955                           
  5956                           ;incstack = 0
  5957                           ; Regs used in _RFDOUT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5958  0D3E  1283               	bcf	3,5	;RP0=0, select bank0
  5959  0D3F  1303               	bcf	3,6	;RP1=0, select bank0
  5960  0D40  01BD               	clrf	RFDOUT@i
  5961  0D41  01BE               	clrf	RFDOUT@i+1
  5962  0D42  083E               	movf	RFDOUT@i+1,w
  5963  0D43  3A80               	xorlw	128
  5964  0D44  00FF               	movwf	127
  5965  0D45  3080               	movlw	128
  5966  0D46  027F               	subwf	127,w
  5967  0D47  1D03               	skipz
  5968  0D48  2D4B               	goto	u2935
  5969  0D49  300C               	movlw	12
  5970  0D4A  023D               	subwf	RFDOUT@i,w
  5971  0D4B                     u2935:	
  5972  0D4B  1803               	btfsc	3,0
  5973  0D4C  2D69               	goto	l3243
  5974  0D4D                     l3237:	
  5975                           
  5976                           ;FMCW.c: 204: Nref_b[i] = 0;
  5977  0D4D  1283               	bcf	3,5	;RP0=0, select bank0
  5978  0D4E  1303               	bcf	3,6	;RP1=0, select bank0
  5979  0D4F  083D               	movf	RFDOUT@i,w
  5980  0D50  00A0               	movwf	??_RFDOUT
  5981  0D51  0720               	addwf	??_RFDOUT,w
  5982  0D52  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  5983  0D53  0084               	movwf	4
  5984  0D54  1383               	bcf	3,7	;select IRP bank0
  5985  0D55  0180               	clrf	0
  5986  0D56  0A84               	incf	4,f
  5987  0D57  0180               	clrf	0
  5988  0D58  3001               	movlw	1
  5989  0D59  07BD               	addwf	RFDOUT@i,f
  5990  0D5A  1803               	skipnc
  5991  0D5B  0ABE               	incf	RFDOUT@i+1,f
  5992  0D5C  3000               	movlw	0
  5993  0D5D  07BE               	addwf	RFDOUT@i+1,f
  5994  0D5E  083E               	movf	RFDOUT@i+1,w
  5995  0D5F  3A80               	xorlw	128
  5996  0D60  00FF               	movwf	127
  5997  0D61  3080               	movlw	128
  5998  0D62  027F               	subwf	127,w
  5999  0D63  1D03               	skipz
  6000  0D64  2D67               	goto	u2945
  6001  0D65  300C               	movlw	12
  6002  0D66  023D               	subwf	RFDOUT@i,w
  6003  0D67                     u2945:	
  6004  0D67  1C03               	skipc
  6005  0D68  2D4D               	goto	l3237
  6006  0D69                     l3243:	
  6007                           
  6008                           ;FMCW.c: 205: }
  6009                           ;FMCW.c: 208: for(int i=0; Nref>0; i++){
  6010  0D69  1283               	bcf	3,5	;RP0=0, select bank0
  6011  0D6A  1303               	bcf	3,6	;RP1=0, select bank0
  6012  0D6B  01BB               	clrf	RFDOUT@i_470
  6013  0D6C  01BC               	clrf	RFDOUT@i_470+1
  6014  0D6D  087C               	movf	RFDOUT@Nref+1,w
  6015  0D6E  3A80               	xorlw	128
  6016  0D6F  00FF               	movwf	127
  6017  0D70  3080               	movlw	128
  6018  0D71  027F               	subwf	127,w
  6019  0D72  1D03               	skipz
  6020  0D73  2D76               	goto	u2955
  6021  0D74  3001               	movlw	1
  6022  0D75  027B               	subwf	RFDOUT@Nref,w
  6023  0D76                     u2955:	
  6024  0D76  1C03               	btfss	3,0
  6025  0D77  2DAF               	goto	l3257
  6026  0D78                     l3249:	
  6027                           
  6028                           ;FMCW.c: 209: Nref_b[i] = Nref % 2;
  6029  0D78  3001               	movlw	1
  6030  0D79  057B               	andwf	RFDOUT@Nref,w
  6031  0D7A  1283               	bcf	3,5	;RP0=0, select bank0
  6032  0D7B  1303               	bcf	3,6	;RP1=0, select bank0
  6033  0D7C  00A0               	movwf	??_RFDOUT
  6034  0D7D  3000               	movlw	0
  6035  0D7E  057C               	andwf	RFDOUT@Nref+1,w
  6036  0D7F  00A1               	movwf	??_RFDOUT+1
  6037  0D80  083B               	movf	RFDOUT@i_470,w
  6038  0D81  00A2               	movwf	??_RFDOUT+2
  6039  0D82  0722               	addwf	??_RFDOUT+2,w
  6040  0D83  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6041  0D84  0084               	movwf	4
  6042  0D85  0820               	movf	??_RFDOUT,w
  6043  0D86  1383               	bcf	3,7	;select IRP bank0
  6044  0D87  0080               	movwf	0
  6045  0D88  0A84               	incf	4,f
  6046  0D89  0821               	movf	??_RFDOUT+1,w
  6047  0D8A  0080               	movwf	0
  6048                           
  6049                           ;FMCW.c: 210: Nref = Nref / 2;
  6050  0D8B  3002               	movlw	2
  6051  0D8C  00F0               	movwf	___awdiv@divisor
  6052  0D8D  3000               	movlw	0
  6053  0D8E  00F1               	movwf	___awdiv@divisor+1
  6054  0D8F  087C               	movf	RFDOUT@Nref+1,w
  6055  0D90  00F3               	movwf	___awdiv@dividend+1
  6056  0D91  087B               	movf	RFDOUT@Nref,w
  6057  0D92  00F2               	movwf	___awdiv@dividend
  6058  0D93  120A  158A  22E7  120A  158A  	fcall	___awdiv
  6059  0D98  0871               	movf	?___awdiv+1,w
  6060  0D99  00FC               	movwf	RFDOUT@Nref+1
  6061  0D9A  0870               	movf	?___awdiv,w
  6062  0D9B  00FB               	movwf	RFDOUT@Nref
  6063  0D9C  3001               	movlw	1
  6064  0D9D  1283               	bcf	3,5	;RP0=0, select bank0
  6065  0D9E  1303               	bcf	3,6	;RP1=0, select bank0
  6066  0D9F  07BB               	addwf	RFDOUT@i_470,f
  6067  0DA0  1803               	skipnc
  6068  0DA1  0ABC               	incf	RFDOUT@i_470+1,f
  6069  0DA2  3000               	movlw	0
  6070  0DA3  07BC               	addwf	RFDOUT@i_470+1,f
  6071  0DA4  087C               	movf	RFDOUT@Nref+1,w
  6072  0DA5  3A80               	xorlw	128
  6073  0DA6  00FF               	movwf	127
  6074  0DA7  3080               	movlw	128
  6075  0DA8  027F               	subwf	127,w
  6076  0DA9  1D03               	skipz
  6077  0DAA  2DAD               	goto	u2965
  6078  0DAB  3001               	movlw	1
  6079  0DAC  027B               	subwf	RFDOUT@Nref,w
  6080  0DAD                     u2965:	
  6081  0DAD  1803               	skipnc
  6082  0DAE  2D78               	goto	l3249
  6083  0DAF                     l3257:	
  6084                           
  6085                           ;FMCW.c: 211: }
  6086                           ;FMCW.c: 214: for (int i=0; i<12; i++)
  6087  0DAF  1283               	bcf	3,5	;RP0=0, select bank0
  6088  0DB0  1303               	bcf	3,6	;RP1=0, select bank0
  6089  0DB1  01BF               	clrf	RFDOUT@i_471
  6090  0DB2  01C0               	clrf	RFDOUT@i_471+1
  6091  0DB3  0840               	movf	RFDOUT@i_471+1,w
  6092  0DB4  3A80               	xorlw	128
  6093  0DB5  00FF               	movwf	127
  6094  0DB6  3080               	movlw	128
  6095  0DB7  027F               	subwf	127,w
  6096  0DB8  1D03               	skipz
  6097  0DB9  2DBC               	goto	u2975
  6098  0DBA  300C               	movlw	12
  6099  0DBB  023F               	subwf	RFDOUT@i_471,w
  6100  0DBC                     u2975:	
  6101  0DBC  1803               	btfsc	3,0
  6102  0DBD  2E05               	goto	l3275
  6103  0DBE                     l3263:	
  6104                           
  6105                           ;FMCW.c: 215: {
  6106                           ;FMCW.c: 216: if(Nref_b[i] == 0)
  6107  0DBE  1283               	bcf	3,5	;RP0=0, select bank0
  6108  0DBF  1303               	bcf	3,6	;RP1=0, select bank0
  6109  0DC0  083F               	movf	RFDOUT@i_471,w
  6110  0DC1  00A0               	movwf	??_RFDOUT
  6111  0DC2  0720               	addwf	??_RFDOUT,w
  6112  0DC3  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6113  0DC4  0084               	movwf	4
  6114  0DC5  1383               	bcf	3,7	;select IRP bank0
  6115  0DC6  0800               	movf	0,w
  6116  0DC7  00A1               	movwf	??_RFDOUT+1
  6117  0DC8  0A84               	incf	4,f
  6118  0DC9  0800               	movf	0,w
  6119  0DCA  00A2               	movwf	??_RFDOUT+2
  6120  0DCB  0821               	movf	??_RFDOUT+1,w
  6121  0DCC  0422               	iorwf	??_RFDOUT+2,w
  6122  0DCD  1D03               	btfss	3,2
  6123  0DCE  2DD8               	goto	l3267
  6124                           
  6125                           ;FMCW.c: 217: {
  6126                           ;FMCW.c: 218: L_OUT(fmcwtxrx);
  6127  0DCF  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6128  0DD0  00F3               	movwf	L_OUT@fmcwtxrx+1
  6129  0DD1  0879               	movf	RFDOUT@fmcwtxrx,w
  6130  0DD2  00F2               	movwf	L_OUT@fmcwtxrx
  6131  0DD3  120A  158A  220E  120A  158A  	fcall	_L_OUT
  6132  0DD8                     l3267:	
  6133                           
  6134                           ;FMCW.c: 219: }
  6135                           ;FMCW.c: 220: if(Nref_b[i] == 1)
  6136  0DD8  1283               	bcf	3,5	;RP0=0, select bank0
  6137  0DD9  1303               	bcf	3,6	;RP1=0, select bank0
  6138  0DDA  083F               	movf	RFDOUT@i_471,w
  6139  0DDB  00A0               	movwf	??_RFDOUT
  6140  0DDC  0720               	addwf	??_RFDOUT,w
  6141  0DDD  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6142  0DDE  0084               	movwf	4
  6143  0DDF  1383               	bcf	3,7	;select IRP bank0
  6144  0DE0  0800               	movf	0,w
  6145  0DE1  00A1               	movwf	??_RFDOUT+1
  6146  0DE2  0A84               	incf	4,f
  6147  0DE3  0800               	movf	0,w
  6148  0DE4  00A2               	movwf	??_RFDOUT+2
  6149  0DE5  0321               	decf	??_RFDOUT+1,w
  6150  0DE6  0422               	iorwf	??_RFDOUT+2,w
  6151  0DE7  1D03               	btfss	3,2
  6152  0DE8  2DF2               	goto	l3271
  6153                           
  6154                           ;FMCW.c: 221: {
  6155                           ;FMCW.c: 222: H_OUT(fmcwtxrx);
  6156  0DE9  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6157  0DEA  00F3               	movwf	H_OUT@fmcwtxrx+1
  6158  0DEB  0879               	movf	RFDOUT@fmcwtxrx,w
  6159  0DEC  00F2               	movwf	H_OUT@fmcwtxrx
  6160  0DED  120A  158A  21C8  120A  158A  	fcall	_H_OUT
  6161  0DF2                     l3271:	
  6162  0DF2  3001               	movlw	1
  6163  0DF3  1283               	bcf	3,5	;RP0=0, select bank0
  6164  0DF4  1303               	bcf	3,6	;RP1=0, select bank0
  6165  0DF5  07BF               	addwf	RFDOUT@i_471,f
  6166  0DF6  1803               	skipnc
  6167  0DF7  0AC0               	incf	RFDOUT@i_471+1,f
  6168  0DF8  3000               	movlw	0
  6169  0DF9  07C0               	addwf	RFDOUT@i_471+1,f
  6170  0DFA  0840               	movf	RFDOUT@i_471+1,w
  6171  0DFB  3A80               	xorlw	128
  6172  0DFC  00FF               	movwf	127
  6173  0DFD  3080               	movlw	128
  6174  0DFE  027F               	subwf	127,w
  6175  0DFF  1D03               	skipz
  6176  0E00  2E03               	goto	u3005
  6177  0E01  300C               	movlw	12
  6178  0E02  023F               	subwf	RFDOUT@i_471,w
  6179  0E03                     u3005:	
  6180  0E03  1C03               	skipc
  6181  0E04  2DBE               	goto	l3263
  6182  0E05                     l3275:	
  6183                           
  6184                           ;FMCW.c: 223: }
  6185                           ;FMCW.c: 224: }
  6186                           ;FMCW.c: 227: H_OUT(fmcwtxrx);
  6187  0E05  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6188  0E06  00F3               	movwf	H_OUT@fmcwtxrx+1
  6189  0E07  0879               	movf	RFDOUT@fmcwtxrx,w
  6190  0E08  00F2               	movwf	H_OUT@fmcwtxrx
  6191  0E09  120A  158A  21C8  120A  158A  	fcall	_H_OUT
  6192                           
  6193                           ;FMCW.c: 228: H_OUT(fmcwtxrx);
  6194  0E0E  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6195  0E0F  00F3               	movwf	H_OUT@fmcwtxrx+1
  6196  0E10  0879               	movf	RFDOUT@fmcwtxrx,w
  6197  0E11  00F2               	movwf	H_OUT@fmcwtxrx
  6198  0E12  120A  158A  21C8  120A  158A  	fcall	_H_OUT
  6199                           
  6200                           ;FMCW.c: 231: STBOUT(fmcwtxrx);
  6201  0E17  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6202  0E18  00F3               	movwf	STBOUT@fmcwtxrx+1
  6203  0E19  0879               	movf	RFDOUT@fmcwtxrx,w
  6204  0E1A  00F2               	movwf	STBOUT@fmcwtxrx
  6205  0E1B  120A  158A  2166   	fcall	_STBOUT
  6206  0E1E  0008               	return
  6207  0E1F                     __end_of_RFDOUT:	
  6208                           
  6209                           	psect	text23
  6210  00AC                     __ptext23:	
  6211 ;; *************** function _OUTFQ *****************
  6212 ;; Defined at:
  6213 ;;		line 136 in file "FMCW.c"
  6214 ;; Parameters:    Size  Location     Type
  6215 ;;  fmcwtxrx        2    9[COMMON] int 
  6216 ;;  Nprg            2   11[COMMON] PTR int 
  6217 ;;		 -> RAM(512), main@FMRX_Nprg(10), main@CWTX_Nprg(10), main@FMTX_Nprg(10), 
  6218 ;;		 -> FMRX_Nprg(10), CWTX_Nprg(10), FMTX_Nprg(10), 
  6219 ;; Auto vars:     Size  Location     Type
  6220 ;;  j               2   58[BANK0 ] int 
  6221 ;;  i               2   56[BANK0 ] int 
  6222 ;;  i               2   50[BANK0 ] int 
  6223 ;;  i               2   54[BANK0 ] int 
  6224 ;;  Nprg_b         34   16[BANK0 ] int [17]
  6225 ;;  count           2   52[BANK0 ] int 
  6226 ;; Return value:  Size  Location     Type
  6227 ;;                  1    wreg      void 
  6228 ;; Registers used:
  6229 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6230 ;; Tracked objects:
  6231 ;;		On entry : 0/0
  6232 ;;		On exit  : 0/0
  6233 ;;		Unchanged: 0/0
  6234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6235 ;;      Params:         4       0       0       0       0
  6236 ;;      Locals:         0      44       0       0       0
  6237 ;;      Temps:          0      16       0       0       0
  6238 ;;      Totals:         4      60       0       0       0
  6239 ;;Total ram usage:       64 bytes
  6240 ;; Hardware stack levels used:    1
  6241 ;; Hardware stack levels required when called:    2
  6242 ;; This function calls:
  6243 ;;		_H_OUT
  6244 ;;		_L_OUT
  6245 ;;		_STBOUT
  6246 ;;		___awdiv
  6247 ;; This function is called by:
  6248 ;;		_FMTX
  6249 ;;		_CWTX
  6250 ;;		_FMRX
  6251 ;; This function uses a non-reentrant model
  6252 ;;
  6253                           
  6254                           
  6255                           ;psect for function _OUTFQ
  6256  00AC                     _OUTFQ:	
  6257                           
  6258                           ;FMCW.c: 137: int count = 0;
  6259                           
  6260                           ;incstack = 0
  6261                           ; Regs used in _OUTFQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6262  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  6263  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  6264  00AE  01D4               	clrf	OUTFQ@count
  6265  00AF  01D5               	clrf	OUTFQ@count+1
  6266                           
  6267                           ;FMCW.c: 138: int Nprg_b[17];
  6268                           ;FMCW.c: 140: for(int i=0; i<17; i++){
  6269  00B0  01D6               	clrf	OUTFQ@i
  6270  00B1  01D7               	clrf	OUTFQ@i+1
  6271  00B2  0857               	movf	OUTFQ@i+1,w
  6272  00B3  3A80               	xorlw	128
  6273  00B4  00FF               	movwf	127
  6274  00B5  3080               	movlw	128
  6275  00B6  027F               	subwf	127,w
  6276  00B7  1D03               	skipz
  6277  00B8  28BB               	goto	u2795
  6278  00B9  3011               	movlw	17
  6279  00BA  0256               	subwf	OUTFQ@i,w
  6280  00BB                     u2795:	
  6281  00BB  1803               	btfsc	3,0
  6282  00BC  28D9               	goto	l3165
  6283  00BD                     l3159:	
  6284                           
  6285                           ;FMCW.c: 141: Nprg_b[i] = 0;
  6286  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  6287  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  6288  00BF  0856               	movf	OUTFQ@i,w
  6289  00C0  00A0               	movwf	??_OUTFQ
  6290  00C1  0720               	addwf	??_OUTFQ,w
  6291  00C2  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6292  00C3  0084               	movwf	4
  6293  00C4  1383               	bcf	3,7	;select IRP bank0
  6294  00C5  0180               	clrf	0
  6295  00C6  0A84               	incf	4,f
  6296  00C7  0180               	clrf	0
  6297  00C8  3001               	movlw	1
  6298  00C9  07D6               	addwf	OUTFQ@i,f
  6299  00CA  1803               	skipnc
  6300  00CB  0AD7               	incf	OUTFQ@i+1,f
  6301  00CC  3000               	movlw	0
  6302  00CD  07D7               	addwf	OUTFQ@i+1,f
  6303  00CE  0857               	movf	OUTFQ@i+1,w
  6304  00CF  3A80               	xorlw	128
  6305  00D0  00FF               	movwf	127
  6306  00D1  3080               	movlw	128
  6307  00D2  027F               	subwf	127,w
  6308  00D3  1D03               	skipz
  6309  00D4  28D7               	goto	u2805
  6310  00D5  3011               	movlw	17
  6311  00D6  0256               	subwf	OUTFQ@i,w
  6312  00D7                     u2805:	
  6313  00D7  1C03               	skipc
  6314  00D8  28BD               	goto	l3159
  6315  00D9                     l3165:	
  6316                           
  6317                           ;FMCW.c: 142: }
  6318                           ;FMCW.c: 145: for(int i = 0; i < 17; i++){
  6319  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  6320  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  6321  00DB  01D2               	clrf	OUTFQ@i_459
  6322  00DC  01D3               	clrf	OUTFQ@i_459+1
  6323  00DD  0853               	movf	OUTFQ@i_459+1,w
  6324  00DE  3A80               	xorlw	128
  6325  00DF  00FF               	movwf	127
  6326  00E0  3080               	movlw	128
  6327  00E1  027F               	subwf	127,w
  6328  00E2  1D03               	skipz
  6329  00E3  28E6               	goto	u2815
  6330  00E4  3011               	movlw	17
  6331  00E5  0252               	subwf	OUTFQ@i_459,w
  6332  00E6                     u2815:	
  6333  00E6  1803               	btfsc	3,0
  6334  00E7  2AB7               	goto	l3211
  6335  00E8                     l3171:	
  6336                           
  6337                           ;FMCW.c: 146: for(int j = 0; j<5; j++){
  6338  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  6339  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  6340  00EA  01DA               	clrf	OUTFQ@j
  6341  00EB  01DB               	clrf	OUTFQ@j+1
  6342  00EC  085B               	movf	OUTFQ@j+1,w
  6343  00ED  3A80               	xorlw	128
  6344  00EE  00FF               	movwf	127
  6345  00EF  3080               	movlw	128
  6346  00F0  027F               	subwf	127,w
  6347  00F1  1D03               	skipz
  6348  00F2  28F5               	goto	u2825
  6349  00F3  3005               	movlw	5
  6350  00F4  025A               	subwf	OUTFQ@j,w
  6351  00F5                     u2825:	
  6352  00F5  1803               	btfsc	3,0
  6353  00F6  2AA4               	goto	l3207
  6354  00F7                     l3177:	
  6355                           
  6356                           ;FMCW.c: 147: if(Nprg[j] % 2 == 0) {
  6357  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  6358  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  6359  00F9  085B               	movf	OUTFQ@j+1,w
  6360  00FA  00A1               	movwf	??_OUTFQ+1
  6361  00FB  085A               	movf	OUTFQ@j,w
  6362  00FC  00A0               	movwf	??_OUTFQ
  6363  00FD  1003               	clrc
  6364  00FE  0DA0               	rlf	??_OUTFQ,f
  6365  00FF  0DA1               	rlf	??_OUTFQ+1,f
  6366  0100  0820               	movf	??_OUTFQ,w
  6367  0101  077B               	addwf	OUTFQ@Nprg,w
  6368  0102  00A2               	movwf	??_OUTFQ+2
  6369  0103  0821               	movf	??_OUTFQ+1,w
  6370  0104  1803               	skipnc
  6371  0105  0A21               	incf	??_OUTFQ+1,w
  6372  0106  077C               	addwf	OUTFQ@Nprg+1,w
  6373  0107  00A3               	movwf	??_OUTFQ+3
  6374  0108  0822               	movf	??_OUTFQ+2,w
  6375  0109  0084               	movwf	4
  6376  010A  1783               	bsf	3,7
  6377  010B  1C23               	btfss	??_OUTFQ+3,0
  6378  010C  1383               	bcf	3,7
  6379  010D  0800               	movf	0,w
  6380  010E  00A4               	movwf	??_OUTFQ+4
  6381  010F  0A84               	incf	4,f
  6382  0110  0800               	movf	0,w
  6383  0111  00A5               	movwf	??_OUTFQ+5
  6384  0112  1824               	btfsc	??_OUTFQ+4,0
  6385  0113  299D               	goto	l3189
  6386                           
  6387                           ;FMCW.c: 148: if(j == 4){
  6388  0114  3004               	movlw	4
  6389  0115  065A               	xorwf	OUTFQ@j,w
  6390  0116  045B               	iorwf	OUTFQ@j+1,w
  6391  0117  1D03               	btfss	3,2
  6392  0118  2960               	goto	l3187
  6393                           
  6394                           ;FMCW.c: 149: Nprg[j] = Nprg[j] / 2;
  6395  0119  3002               	movlw	2
  6396  011A  00F0               	movwf	___awdiv@divisor
  6397  011B  3000               	movlw	0
  6398  011C  00F1               	movwf	___awdiv@divisor+1
  6399  011D  085B               	movf	OUTFQ@j+1,w
  6400  011E  00A1               	movwf	??_OUTFQ+1
  6401  011F  085A               	movf	OUTFQ@j,w
  6402  0120  00A0               	movwf	??_OUTFQ
  6403  0121  1003               	clrc
  6404  0122  0DA0               	rlf	??_OUTFQ,f
  6405  0123  0DA1               	rlf	??_OUTFQ+1,f
  6406  0124  0820               	movf	??_OUTFQ,w
  6407  0125  077B               	addwf	OUTFQ@Nprg,w
  6408  0126  00A2               	movwf	??_OUTFQ+2
  6409  0127  0821               	movf	??_OUTFQ+1,w
  6410  0128  1803               	skipnc
  6411  0129  0A21               	incf	??_OUTFQ+1,w
  6412  012A  077C               	addwf	OUTFQ@Nprg+1,w
  6413  012B  00A3               	movwf	??_OUTFQ+3
  6414  012C  0822               	movf	??_OUTFQ+2,w
  6415  012D  0084               	movwf	4
  6416  012E  1783               	bsf	3,7
  6417  012F  1C23               	btfss	??_OUTFQ+3,0
  6418  0130  1383               	bcf	3,7
  6419  0131  0800               	movf	0,w
  6420  0132  00F2               	movwf	___awdiv@dividend
  6421  0133  0A84               	incf	4,f
  6422  0134  0800               	movf	0,w
  6423  0135  00F3               	movwf	___awdiv@dividend+1
  6424  0136  120A  158A  22E7  120A  118A  	fcall	___awdiv
  6425  013B  1283               	bcf	3,5	;RP0=0, select bank0
  6426  013C  1303               	bcf	3,6	;RP1=0, select bank0
  6427  013D  085B               	movf	OUTFQ@j+1,w
  6428  013E  00A5               	movwf	??_OUTFQ+5
  6429  013F  085A               	movf	OUTFQ@j,w
  6430  0140  00A4               	movwf	??_OUTFQ+4
  6431  0141  1003               	clrc
  6432  0142  0DA4               	rlf	??_OUTFQ+4,f
  6433  0143  0DA5               	rlf	??_OUTFQ+5,f
  6434  0144  0824               	movf	??_OUTFQ+4,w
  6435  0145  077B               	addwf	OUTFQ@Nprg,w
  6436  0146  00A6               	movwf	??_OUTFQ+6
  6437  0147  0825               	movf	??_OUTFQ+5,w
  6438  0148  1803               	skipnc
  6439  0149  0A25               	incf	??_OUTFQ+5,w
  6440  014A  077C               	addwf	OUTFQ@Nprg+1,w
  6441  014B  00A7               	movwf	??_OUTFQ+7
  6442  014C  0826               	movf	??_OUTFQ+6,w
  6443  014D  0084               	movwf	4
  6444  014E  1783               	bsf	3,7
  6445  014F  1C27               	btfss	??_OUTFQ+7,0
  6446  0150  1383               	bcf	3,7
  6447  0151  0870               	movf	?___awdiv,w
  6448  0152  0080               	movwf	0
  6449  0153  0A84               	incf	4,f
  6450  0154  0871               	movf	?___awdiv+1,w
  6451  0155  0080               	movwf	0
  6452                           
  6453                           ;FMCW.c: 150: Nprg_b[count] = 0;
  6454  0156  0854               	movf	OUTFQ@count,w
  6455  0157  00A0               	movwf	??_OUTFQ
  6456  0158  0720               	addwf	??_OUTFQ,w
  6457  0159  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6458  015A  0084               	movwf	4
  6459  015B  1383               	bcf	3,7	;select IRP bank0
  6460  015C  0180               	clrf	0
  6461  015D  0A84               	incf	4,f
  6462  015E  0180               	clrf	0
  6463  015F  2A05               	goto	l3197
  6464  0160                     l3187:	
  6465                           ;FMCW.c: 152: }
  6466                           
  6467                           ;FMCW.c: 151: count++;
  6468                           
  6469                           
  6470                           ;FMCW.c: 153: else{
  6471                           ;FMCW.c: 154: Nprg[j] = Nprg[j] / 2;
  6472  0160  3002               	movlw	2
  6473  0161  00F0               	movwf	___awdiv@divisor
  6474  0162  3000               	movlw	0
  6475  0163  00F1               	movwf	___awdiv@divisor+1
  6476  0164  085B               	movf	OUTFQ@j+1,w
  6477  0165  00A1               	movwf	??_OUTFQ+1
  6478  0166  085A               	movf	OUTFQ@j,w
  6479  0167  00A0               	movwf	??_OUTFQ
  6480  0168  1003               	clrc
  6481  0169  0DA0               	rlf	??_OUTFQ,f
  6482  016A  0DA1               	rlf	??_OUTFQ+1,f
  6483  016B  0820               	movf	??_OUTFQ,w
  6484  016C  077B               	addwf	OUTFQ@Nprg,w
  6485  016D  00A2               	movwf	??_OUTFQ+2
  6486  016E  0821               	movf	??_OUTFQ+1,w
  6487  016F  1803               	skipnc
  6488  0170  0A21               	incf	??_OUTFQ+1,w
  6489  0171  077C               	addwf	OUTFQ@Nprg+1,w
  6490  0172  00A3               	movwf	??_OUTFQ+3
  6491  0173  0822               	movf	??_OUTFQ+2,w
  6492  0174  0084               	movwf	4
  6493  0175  1783               	bsf	3,7
  6494  0176  1C23               	btfss	??_OUTFQ+3,0
  6495  0177  1383               	bcf	3,7
  6496  0178  0800               	movf	0,w
  6497  0179  00F2               	movwf	___awdiv@dividend
  6498  017A  0A84               	incf	4,f
  6499  017B  0800               	movf	0,w
  6500  017C  00F3               	movwf	___awdiv@dividend+1
  6501  017D  120A  158A  22E7  120A  118A  	fcall	___awdiv
  6502  0182  1283               	bcf	3,5	;RP0=0, select bank0
  6503  0183  1303               	bcf	3,6	;RP1=0, select bank0
  6504  0184  085B               	movf	OUTFQ@j+1,w
  6505  0185  00A5               	movwf	??_OUTFQ+5
  6506  0186  085A               	movf	OUTFQ@j,w
  6507  0187  00A4               	movwf	??_OUTFQ+4
  6508  0188  1003               	clrc
  6509  0189  0DA4               	rlf	??_OUTFQ+4,f
  6510  018A  0DA5               	rlf	??_OUTFQ+5,f
  6511  018B  0824               	movf	??_OUTFQ+4,w
  6512  018C  077B               	addwf	OUTFQ@Nprg,w
  6513  018D  00A6               	movwf	??_OUTFQ+6
  6514  018E  0825               	movf	??_OUTFQ+5,w
  6515  018F  1803               	skipnc
  6516  0190  0A25               	incf	??_OUTFQ+5,w
  6517  0191  077C               	addwf	OUTFQ@Nprg+1,w
  6518  0192  00A7               	movwf	??_OUTFQ+7
  6519  0193  0826               	movf	??_OUTFQ+6,w
  6520  0194  0084               	movwf	4
  6521  0195  1783               	bsf	3,7
  6522  0196  1C27               	btfss	??_OUTFQ+7,0
  6523  0197  1383               	bcf	3,7
  6524  0198  0870               	movf	?___awdiv,w
  6525  0199  0080               	movwf	0
  6526  019A  0A84               	incf	4,f
  6527  019B  0871               	movf	?___awdiv+1,w
  6528  019C  2A92               	goto	L8
  6529  019D                     l3189:	
  6530                           ;FMCW.c: 155: }
  6531                           ;FMCW.c: 156: }
  6532                           
  6533                           
  6534                           ;FMCW.c: 157: else if(Nprg[j] % 2 == 1) {
  6535  019D  085B               	movf	OUTFQ@j+1,w
  6536  019E  00A1               	movwf	??_OUTFQ+1
  6537  019F  085A               	movf	OUTFQ@j,w
  6538  01A0  00A0               	movwf	??_OUTFQ
  6539  01A1  1003               	clrc
  6540  01A2  0DA0               	rlf	??_OUTFQ,f
  6541  01A3  0DA1               	rlf	??_OUTFQ+1,f
  6542  01A4  0820               	movf	??_OUTFQ,w
  6543  01A5  077B               	addwf	OUTFQ@Nprg,w
  6544  01A6  00A2               	movwf	??_OUTFQ+2
  6545  01A7  0821               	movf	??_OUTFQ+1,w
  6546  01A8  1803               	skipnc
  6547  01A9  0A21               	incf	??_OUTFQ+1,w
  6548  01AA  077C               	addwf	OUTFQ@Nprg+1,w
  6549  01AB  00A3               	movwf	??_OUTFQ+3
  6550  01AC  0822               	movf	??_OUTFQ+2,w
  6551  01AD  0084               	movwf	4
  6552  01AE  1783               	bsf	3,7
  6553  01AF  1C23               	btfss	??_OUTFQ+3,0
  6554  01B0  1383               	bcf	3,7
  6555  01B1  0800               	movf	0,w
  6556  01B2  00A4               	movwf	??_OUTFQ+4
  6557  01B3  0A84               	incf	4,f
  6558  01B4  0800               	movf	0,w
  6559  01B5  00A5               	movwf	??_OUTFQ+5
  6560  01B6  1C24               	btfss	??_OUTFQ+4,0
  6561  01B7  2A93               	goto	l3203
  6562                           
  6563                           ;FMCW.c: 158: if(j == 4){
  6564  01B8  3004               	movlw	4
  6565  01B9  065A               	xorwf	OUTFQ@j,w
  6566  01BA  045B               	iorwf	OUTFQ@j+1,w
  6567  01BB  1D03               	btfss	3,2
  6568  01BC  2A0C               	goto	l3199
  6569                           
  6570                           ;FMCW.c: 159: Nprg[j] = Nprg[j] / 2;
  6571  01BD  3002               	movlw	2
  6572  01BE  00F0               	movwf	___awdiv@divisor
  6573  01BF  3000               	movlw	0
  6574  01C0  00F1               	movwf	___awdiv@divisor+1
  6575  01C1  085B               	movf	OUTFQ@j+1,w
  6576  01C2  00A1               	movwf	??_OUTFQ+1
  6577  01C3  085A               	movf	OUTFQ@j,w
  6578  01C4  00A0               	movwf	??_OUTFQ
  6579  01C5  1003               	clrc
  6580  01C6  0DA0               	rlf	??_OUTFQ,f
  6581  01C7  0DA1               	rlf	??_OUTFQ+1,f
  6582  01C8  0820               	movf	??_OUTFQ,w
  6583  01C9  077B               	addwf	OUTFQ@Nprg,w
  6584  01CA  00A2               	movwf	??_OUTFQ+2
  6585  01CB  0821               	movf	??_OUTFQ+1,w
  6586  01CC  1803               	skipnc
  6587  01CD  0A21               	incf	??_OUTFQ+1,w
  6588  01CE  077C               	addwf	OUTFQ@Nprg+1,w
  6589  01CF  00A3               	movwf	??_OUTFQ+3
  6590  01D0  0822               	movf	??_OUTFQ+2,w
  6591  01D1  0084               	movwf	4
  6592  01D2  1783               	bsf	3,7
  6593  01D3  1C23               	btfss	??_OUTFQ+3,0
  6594  01D4  1383               	bcf	3,7
  6595  01D5  0800               	movf	0,w
  6596  01D6  00F2               	movwf	___awdiv@dividend
  6597  01D7  0A84               	incf	4,f
  6598  01D8  0800               	movf	0,w
  6599  01D9  00F3               	movwf	___awdiv@dividend+1
  6600  01DA  120A  158A  22E7  120A  118A  	fcall	___awdiv
  6601  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  6602  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  6603  01E1  085B               	movf	OUTFQ@j+1,w
  6604  01E2  00A5               	movwf	??_OUTFQ+5
  6605  01E3  085A               	movf	OUTFQ@j,w
  6606  01E4  00A4               	movwf	??_OUTFQ+4
  6607  01E5  1003               	clrc
  6608  01E6  0DA4               	rlf	??_OUTFQ+4,f
  6609  01E7  0DA5               	rlf	??_OUTFQ+5,f
  6610  01E8  0824               	movf	??_OUTFQ+4,w
  6611  01E9  077B               	addwf	OUTFQ@Nprg,w
  6612  01EA  00A6               	movwf	??_OUTFQ+6
  6613  01EB  0825               	movf	??_OUTFQ+5,w
  6614  01EC  1803               	skipnc
  6615  01ED  0A25               	incf	??_OUTFQ+5,w
  6616  01EE  077C               	addwf	OUTFQ@Nprg+1,w
  6617  01EF  00A7               	movwf	??_OUTFQ+7
  6618  01F0  0826               	movf	??_OUTFQ+6,w
  6619  01F1  0084               	movwf	4
  6620  01F2  1783               	bsf	3,7
  6621  01F3  1C27               	btfss	??_OUTFQ+7,0
  6622  01F4  1383               	bcf	3,7
  6623  01F5  0870               	movf	?___awdiv,w
  6624  01F6  0080               	movwf	0
  6625  01F7  0A84               	incf	4,f
  6626  01F8  0871               	movf	?___awdiv+1,w
  6627  01F9  0080               	movwf	0
  6628                           
  6629                           ;FMCW.c: 160: Nprg_b[count] = 1;
  6630  01FA  0854               	movf	OUTFQ@count,w
  6631  01FB  00A0               	movwf	??_OUTFQ
  6632  01FC  0720               	addwf	??_OUTFQ,w
  6633  01FD  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6634  01FE  0084               	movwf	4
  6635  01FF  3001               	movlw	1
  6636  0200  1383               	bcf	3,7	;select IRP bank0
  6637  0201  0080               	movwf	0
  6638  0202  0A84               	incf	4,f
  6639  0203  3000               	movlw	0
  6640  0204  0080               	movwf	0
  6641  0205                     l3197:	
  6642                           
  6643                           ;FMCW.c: 161: count++;
  6644  0205  3001               	movlw	1
  6645  0206  07D4               	addwf	OUTFQ@count,f
  6646  0207  1803               	skipnc
  6647  0208  0AD5               	incf	OUTFQ@count+1,f
  6648  0209  3000               	movlw	0
  6649  020A  07D5               	addwf	OUTFQ@count+1,f
  6650                           
  6651                           ;FMCW.c: 162: }
  6652  020B  2A93               	goto	l3203
  6653  020C                     l3199:	
  6654                           
  6655                           ;FMCW.c: 163: else{
  6656                           ;FMCW.c: 164: Nprg[j] = Nprg[j] / 2;
  6657  020C  3002               	movlw	2
  6658  020D  00F0               	movwf	___awdiv@divisor
  6659  020E  3000               	movlw	0
  6660  020F  00F1               	movwf	___awdiv@divisor+1
  6661  0210  085B               	movf	OUTFQ@j+1,w
  6662  0211  00A1               	movwf	??_OUTFQ+1
  6663  0212  085A               	movf	OUTFQ@j,w
  6664  0213  00A0               	movwf	??_OUTFQ
  6665  0214  1003               	clrc
  6666  0215  0DA0               	rlf	??_OUTFQ,f
  6667  0216  0DA1               	rlf	??_OUTFQ+1,f
  6668  0217  0820               	movf	??_OUTFQ,w
  6669  0218  077B               	addwf	OUTFQ@Nprg,w
  6670  0219  00A2               	movwf	??_OUTFQ+2
  6671  021A  0821               	movf	??_OUTFQ+1,w
  6672  021B  1803               	skipnc
  6673  021C  0A21               	incf	??_OUTFQ+1,w
  6674  021D  077C               	addwf	OUTFQ@Nprg+1,w
  6675  021E  00A3               	movwf	??_OUTFQ+3
  6676  021F  0822               	movf	??_OUTFQ+2,w
  6677  0220  0084               	movwf	4
  6678  0221  1783               	bsf	3,7
  6679  0222  1C23               	btfss	??_OUTFQ+3,0
  6680  0223  1383               	bcf	3,7
  6681  0224  0800               	movf	0,w
  6682  0225  00F2               	movwf	___awdiv@dividend
  6683  0226  0A84               	incf	4,f
  6684  0227  0800               	movf	0,w
  6685  0228  00F3               	movwf	___awdiv@dividend+1
  6686  0229  120A  158A  22E7  120A  118A  	fcall	___awdiv
  6687  022E  1283               	bcf	3,5	;RP0=0, select bank0
  6688  022F  1303               	bcf	3,6	;RP1=0, select bank0
  6689  0230  085B               	movf	OUTFQ@j+1,w
  6690  0231  00A5               	movwf	??_OUTFQ+5
  6691  0232  085A               	movf	OUTFQ@j,w
  6692  0233  00A4               	movwf	??_OUTFQ+4
  6693  0234  1003               	clrc
  6694  0235  0DA4               	rlf	??_OUTFQ+4,f
  6695  0236  0DA5               	rlf	??_OUTFQ+5,f
  6696  0237  0824               	movf	??_OUTFQ+4,w
  6697  0238  077B               	addwf	OUTFQ@Nprg,w
  6698  0239  00A6               	movwf	??_OUTFQ+6
  6699  023A  0825               	movf	??_OUTFQ+5,w
  6700  023B  1803               	skipnc
  6701  023C  0A25               	incf	??_OUTFQ+5,w
  6702  023D  077C               	addwf	OUTFQ@Nprg+1,w
  6703  023E  00A7               	movwf	??_OUTFQ+7
  6704  023F  0826               	movf	??_OUTFQ+6,w
  6705  0240  0084               	movwf	4
  6706  0241  1783               	bsf	3,7
  6707  0242  1C27               	btfss	??_OUTFQ+7,0
  6708  0243  1383               	bcf	3,7
  6709  0244  0870               	movf	?___awdiv,w
  6710  0245  0080               	movwf	0
  6711  0246  0A84               	incf	4,f
  6712  0247  0871               	movf	?___awdiv+1,w
  6713  0248  0080               	movwf	0
  6714                           
  6715                           ;FMCW.c: 165: Nprg[j+1] = Nprg[j+1] + 10;
  6716  0249  085B               	movf	OUTFQ@j+1,w
  6717  024A  00A1               	movwf	??_OUTFQ+1
  6718  024B  085A               	movf	OUTFQ@j,w
  6719  024C  00A0               	movwf	??_OUTFQ
  6720  024D  1003               	clrc
  6721  024E  0DA0               	rlf	??_OUTFQ,f
  6722  024F  0DA1               	rlf	??_OUTFQ+1,f
  6723  0250  0820               	movf	??_OUTFQ,w
  6724  0251  3E02               	addlw	2
  6725  0252  00A2               	movwf	??_OUTFQ+2
  6726  0253  0821               	movf	??_OUTFQ+1,w
  6727  0254  1803               	skipnc
  6728  0255  3E01               	addlw	1
  6729  0256  3E00               	addlw	0
  6730  0257  00A3               	movwf	??_OUTFQ+3
  6731  0258  0822               	movf	??_OUTFQ+2,w
  6732  0259  077B               	addwf	OUTFQ@Nprg,w
  6733  025A  00A4               	movwf	??_OUTFQ+4
  6734  025B  0823               	movf	??_OUTFQ+3,w
  6735  025C  1803               	skipnc
  6736  025D  0A23               	incf	??_OUTFQ+3,w
  6737  025E  077C               	addwf	OUTFQ@Nprg+1,w
  6738  025F  00A5               	movwf	??_OUTFQ+5
  6739  0260  0824               	movf	??_OUTFQ+4,w
  6740  0261  0084               	movwf	4
  6741  0262  1783               	bsf	3,7
  6742  0263  1C25               	btfss	??_OUTFQ+5,0
  6743  0264  1383               	bcf	3,7
  6744  0265  0800               	movf	0,w
  6745  0266  00A6               	movwf	??_OUTFQ+6
  6746  0267  0A84               	incf	4,f
  6747  0268  0800               	movf	0,w
  6748  0269  00A7               	movwf	??_OUTFQ+7
  6749  026A  0826               	movf	??_OUTFQ+6,w
  6750  026B  3E0A               	addlw	10
  6751  026C  00A8               	movwf	??_OUTFQ+8
  6752  026D  0827               	movf	??_OUTFQ+7,w
  6753  026E  1803               	skipnc
  6754  026F  3E01               	addlw	1
  6755  0270  3E00               	addlw	0
  6756  0271  00A9               	movwf	??_OUTFQ+9
  6757  0272  085B               	movf	OUTFQ@j+1,w
  6758  0273  00AB               	movwf	??_OUTFQ+11
  6759  0274  085A               	movf	OUTFQ@j,w
  6760  0275  00AA               	movwf	??_OUTFQ+10
  6761  0276  1003               	clrc
  6762  0277  0DAA               	rlf	??_OUTFQ+10,f
  6763  0278  0DAB               	rlf	??_OUTFQ+11,f
  6764  0279  082A               	movf	??_OUTFQ+10,w
  6765  027A  3E02               	addlw	2
  6766  027B  00AC               	movwf	??_OUTFQ+12
  6767  027C  082B               	movf	??_OUTFQ+11,w
  6768  027D  1803               	skipnc
  6769  027E  3E01               	addlw	1
  6770  027F  3E00               	addlw	0
  6771  0280  00AD               	movwf	??_OUTFQ+13
  6772  0281  082C               	movf	??_OUTFQ+12,w
  6773  0282  077B               	addwf	OUTFQ@Nprg,w
  6774  0283  00AE               	movwf	??_OUTFQ+14
  6775  0284  082D               	movf	??_OUTFQ+13,w
  6776  0285  1803               	skipnc
  6777  0286  0A2D               	incf	??_OUTFQ+13,w
  6778  0287  077C               	addwf	OUTFQ@Nprg+1,w
  6779  0288  00AF               	movwf	??_OUTFQ+15
  6780  0289  082E               	movf	??_OUTFQ+14,w
  6781  028A  0084               	movwf	4
  6782  028B  1783               	bsf	3,7
  6783  028C  1C2F               	btfss	??_OUTFQ+15,0
  6784  028D  1383               	bcf	3,7
  6785  028E  0828               	movf	??_OUTFQ+8,w
  6786  028F  0080               	movwf	0
  6787  0290  0A84               	incf	4,f
  6788  0291  0829               	movf	??_OUTFQ+9,w
  6789  0292                     L8:	
  6790  0292  0080               	movwf	0
  6791  0293                     l3203:	
  6792  0293  3001               	movlw	1
  6793  0294  07DA               	addwf	OUTFQ@j,f
  6794  0295  1803               	skipnc
  6795  0296  0ADB               	incf	OUTFQ@j+1,f
  6796  0297  3000               	movlw	0
  6797  0298  07DB               	addwf	OUTFQ@j+1,f
  6798  0299  085B               	movf	OUTFQ@j+1,w
  6799  029A  3A80               	xorlw	128
  6800  029B  00FF               	movwf	127
  6801  029C  3080               	movlw	128
  6802  029D  027F               	subwf	127,w
  6803  029E  1D03               	skipz
  6804  029F  2AA2               	goto	u2875
  6805  02A0  3005               	movlw	5
  6806  02A1  025A               	subwf	OUTFQ@j,w
  6807  02A2                     u2875:	
  6808  02A2  1C03               	skipc
  6809  02A3  28F7               	goto	l3177
  6810  02A4                     l3207:	
  6811  02A4  3001               	movlw	1
  6812  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  6813  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  6814  02A7  07D2               	addwf	OUTFQ@i_459,f
  6815  02A8  1803               	skipnc
  6816  02A9  0AD3               	incf	OUTFQ@i_459+1,f
  6817  02AA  3000               	movlw	0
  6818  02AB  07D3               	addwf	OUTFQ@i_459+1,f
  6819  02AC  0853               	movf	OUTFQ@i_459+1,w
  6820  02AD  3A80               	xorlw	128
  6821  02AE  00FF               	movwf	127
  6822  02AF  3080               	movlw	128
  6823  02B0  027F               	subwf	127,w
  6824  02B1  1D03               	skipz
  6825  02B2  2AB5               	goto	u2885
  6826  02B3  3011               	movlw	17
  6827  02B4  0252               	subwf	OUTFQ@i_459,w
  6828  02B5                     u2885:	
  6829  02B5  1C03               	skipc
  6830  02B6  28E8               	goto	l3171
  6831  02B7                     l3211:	
  6832                           
  6833                           ;FMCW.c: 166: }
  6834                           ;FMCW.c: 167: }
  6835                           ;FMCW.c: 168: }
  6836                           ;FMCW.c: 169: }
  6837                           ;FMCW.c: 172: for (int i=0; i<17; i++)
  6838  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  6839  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  6840  02B9  01D8               	clrf	OUTFQ@i_461
  6841  02BA  01D9               	clrf	OUTFQ@i_461+1
  6842  02BB  0859               	movf	OUTFQ@i_461+1,w
  6843  02BC  3A80               	xorlw	128
  6844  02BD  00FF               	movwf	127
  6845  02BE  3080               	movlw	128
  6846  02BF  027F               	subwf	127,w
  6847  02C0  1D03               	skipz
  6848  02C1  2AC4               	goto	u2895
  6849  02C2  3011               	movlw	17
  6850  02C3  0258               	subwf	OUTFQ@i_461,w
  6851  02C4                     u2895:	
  6852  02C4  1803               	btfsc	3,0
  6853  02C5  2B0D               	goto	l3229
  6854  02C6                     l3217:	
  6855                           
  6856                           ;FMCW.c: 173: {
  6857                           ;FMCW.c: 174: if(Nprg_b[i] == 0)
  6858  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  6859  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  6860  02C8  0858               	movf	OUTFQ@i_461,w
  6861  02C9  00A0               	movwf	??_OUTFQ
  6862  02CA  0720               	addwf	??_OUTFQ,w
  6863  02CB  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6864  02CC  0084               	movwf	4
  6865  02CD  1383               	bcf	3,7	;select IRP bank0
  6866  02CE  0800               	movf	0,w
  6867  02CF  00A1               	movwf	??_OUTFQ+1
  6868  02D0  0A84               	incf	4,f
  6869  02D1  0800               	movf	0,w
  6870  02D2  00A2               	movwf	??_OUTFQ+2
  6871  02D3  0821               	movf	??_OUTFQ+1,w
  6872  02D4  0422               	iorwf	??_OUTFQ+2,w
  6873  02D5  1D03               	btfss	3,2
  6874  02D6  2AE0               	goto	l3221
  6875                           
  6876                           ;FMCW.c: 175: {
  6877                           ;FMCW.c: 176: L_OUT(fmcwtxrx);
  6878  02D7  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6879  02D8  00F3               	movwf	L_OUT@fmcwtxrx+1
  6880  02D9  0879               	movf	OUTFQ@fmcwtxrx,w
  6881  02DA  00F2               	movwf	L_OUT@fmcwtxrx
  6882  02DB  120A  158A  220E  120A  118A  	fcall	_L_OUT
  6883  02E0                     l3221:	
  6884                           
  6885                           ;FMCW.c: 177: }
  6886                           ;FMCW.c: 178: if(Nprg_b[i] == 1)
  6887  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  6888  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  6889  02E2  0858               	movf	OUTFQ@i_461,w
  6890  02E3  00A0               	movwf	??_OUTFQ
  6891  02E4  0720               	addwf	??_OUTFQ,w
  6892  02E5  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6893  02E6  0084               	movwf	4
  6894  02E7  1383               	bcf	3,7	;select IRP bank0
  6895  02E8  0800               	movf	0,w
  6896  02E9  00A1               	movwf	??_OUTFQ+1
  6897  02EA  0A84               	incf	4,f
  6898  02EB  0800               	movf	0,w
  6899  02EC  00A2               	movwf	??_OUTFQ+2
  6900  02ED  0321               	decf	??_OUTFQ+1,w
  6901  02EE  0422               	iorwf	??_OUTFQ+2,w
  6902  02EF  1D03               	btfss	3,2
  6903  02F0  2AFA               	goto	l3225
  6904                           
  6905                           ;FMCW.c: 179: {
  6906                           ;FMCW.c: 180: H_OUT(fmcwtxrx);
  6907  02F1  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6908  02F2  00F3               	movwf	H_OUT@fmcwtxrx+1
  6909  02F3  0879               	movf	OUTFQ@fmcwtxrx,w
  6910  02F4  00F2               	movwf	H_OUT@fmcwtxrx
  6911  02F5  120A  158A  21C8  120A  118A  	fcall	_H_OUT
  6912  02FA                     l3225:	
  6913  02FA  3001               	movlw	1
  6914  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  6915  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  6916  02FD  07D8               	addwf	OUTFQ@i_461,f
  6917  02FE  1803               	skipnc
  6918  02FF  0AD9               	incf	OUTFQ@i_461+1,f
  6919  0300  3000               	movlw	0
  6920  0301  07D9               	addwf	OUTFQ@i_461+1,f
  6921  0302  0859               	movf	OUTFQ@i_461+1,w
  6922  0303  3A80               	xorlw	128
  6923  0304  00FF               	movwf	127
  6924  0305  3080               	movlw	128
  6925  0306  027F               	subwf	127,w
  6926  0307  1D03               	skipz
  6927  0308  2B0B               	goto	u2925
  6928  0309  3011               	movlw	17
  6929  030A  0258               	subwf	OUTFQ@i_461,w
  6930  030B                     u2925:	
  6931  030B  1C03               	skipc
  6932  030C  2AC6               	goto	l3217
  6933  030D                     l3229:	
  6934                           
  6935                           ;FMCW.c: 181: }
  6936                           ;FMCW.c: 182: }
  6937                           ;FMCW.c: 185: H_OUT(fmcwtxrx);
  6938  030D  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6939  030E  00F3               	movwf	H_OUT@fmcwtxrx+1
  6940  030F  0879               	movf	OUTFQ@fmcwtxrx,w
  6941  0310  00F2               	movwf	H_OUT@fmcwtxrx
  6942  0311  120A  158A  21C8  120A  118A  	fcall	_H_OUT
  6943                           
  6944                           ;FMCW.c: 186: L_OUT(fmcwtxrx);
  6945  0316  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6946  0317  00F3               	movwf	L_OUT@fmcwtxrx+1
  6947  0318  0879               	movf	OUTFQ@fmcwtxrx,w
  6948  0319  00F2               	movwf	L_OUT@fmcwtxrx
  6949  031A  120A  158A  220E  120A  118A  	fcall	_L_OUT
  6950                           
  6951                           ;FMCW.c: 189: STBOUT(fmcwtxrx);
  6952  031F  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6953  0320  00F3               	movwf	STBOUT@fmcwtxrx+1
  6954  0321  0879               	movf	OUTFQ@fmcwtxrx,w
  6955  0322  00F2               	movwf	STBOUT@fmcwtxrx
  6956  0323  120A  158A  2166   	fcall	_STBOUT
  6957  0326  0008               	return
  6958  0327                     __end_of_OUTFQ:	
  6959                           
  6960                           	psect	text24
  6961  0AE7                     __ptext24:	
  6962 ;; *************** function ___awdiv *****************
  6963 ;; Defined at:
  6964 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  6965 ;; Parameters:    Size  Location     Type
  6966 ;;  divisor         2    0[COMMON] int 
  6967 ;;  dividend        2    2[COMMON] int 
  6968 ;; Auto vars:     Size  Location     Type
  6969 ;;  quotient        2    7[COMMON] int 
  6970 ;;  sign            1    6[COMMON] unsigned char 
  6971 ;;  counter         1    5[COMMON] unsigned char 
  6972 ;; Return value:  Size  Location     Type
  6973 ;;                  2    0[COMMON] int 
  6974 ;; Registers used:
  6975 ;;		wreg, status,2, status,0
  6976 ;; Tracked objects:
  6977 ;;		On entry : 0/0
  6978 ;;		On exit  : 0/0
  6979 ;;		Unchanged: 0/0
  6980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6981 ;;      Params:         4       0       0       0       0
  6982 ;;      Locals:         4       0       0       0       0
  6983 ;;      Temps:          1       0       0       0       0
  6984 ;;      Totals:         9       0       0       0       0
  6985 ;;Total ram usage:        9 bytes
  6986 ;; Hardware stack levels used:    1
  6987 ;; This function calls:
  6988 ;;		Nothing
  6989 ;; This function is called by:
  6990 ;;		_OUTFQ
  6991 ;;		_RFDOUT
  6992 ;; This function uses a non-reentrant model
  6993 ;;
  6994                           
  6995                           
  6996                           ;psect for function ___awdiv
  6997  0AE7                     ___awdiv:	
  6998                           
  6999                           ;incstack = 0
  7000                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7001  0AE7  01F6               	clrf	___awdiv@sign
  7002  0AE8  1FF1               	btfss	___awdiv@divisor+1,7
  7003  0AE9  2AF1               	goto	l2641
  7004  0AEA  09F0               	comf	___awdiv@divisor,f
  7005  0AEB  09F1               	comf	___awdiv@divisor+1,f
  7006  0AEC  0AF0               	incf	___awdiv@divisor,f
  7007  0AED  1903               	skipnz
  7008  0AEE  0AF1               	incf	___awdiv@divisor+1,f
  7009  0AEF  01F6               	clrf	___awdiv@sign
  7010  0AF0  0AF6               	incf	___awdiv@sign,f
  7011  0AF1                     l2641:	
  7012  0AF1  1FF3               	btfss	___awdiv@dividend+1,7
  7013  0AF2  2AFC               	goto	l2647
  7014  0AF3  09F2               	comf	___awdiv@dividend,f
  7015  0AF4  09F3               	comf	___awdiv@dividend+1,f
  7016  0AF5  0AF2               	incf	___awdiv@dividend,f
  7017  0AF6  1903               	skipnz
  7018  0AF7  0AF3               	incf	___awdiv@dividend+1,f
  7019  0AF8  3001               	movlw	1
  7020  0AF9  00F4               	movwf	??___awdiv
  7021  0AFA  0874               	movf	??___awdiv,w
  7022  0AFB  06F6               	xorwf	___awdiv@sign,f
  7023  0AFC                     l2647:	
  7024  0AFC  01F7               	clrf	___awdiv@quotient
  7025  0AFD  01F8               	clrf	___awdiv@quotient+1
  7026  0AFE  0870               	movf	___awdiv@divisor,w
  7027  0AFF  0471               	iorwf	___awdiv@divisor+1,w
  7028  0B00  1903               	btfsc	3,2
  7029  0B01  2B33               	goto	l2669
  7030  0B02  01F5               	clrf	___awdiv@counter
  7031  0B03  0AF5               	incf	___awdiv@counter,f
  7032  0B04                     l2657:	
  7033  0B04  1BF1               	btfsc	___awdiv@divisor+1,7
  7034  0B05  2B12               	goto	l2659
  7035  0B06  3001               	movlw	1
  7036  0B07                     u2045:	
  7037  0B07  1003               	clrc
  7038  0B08  0DF0               	rlf	___awdiv@divisor,f
  7039  0B09  0DF1               	rlf	___awdiv@divisor+1,f
  7040  0B0A  3EFF               	addlw	-1
  7041  0B0B  1D03               	skipz
  7042  0B0C  2B07               	goto	u2045
  7043  0B0D  3001               	movlw	1
  7044  0B0E  00F4               	movwf	??___awdiv
  7045  0B0F  0874               	movf	??___awdiv,w
  7046  0B10  07F5               	addwf	___awdiv@counter,f
  7047  0B11  2B04               	goto	l2657
  7048  0B12                     l2659:	
  7049  0B12  3001               	movlw	1
  7050  0B13                     u2065:	
  7051  0B13  1003               	clrc
  7052  0B14  0DF7               	rlf	___awdiv@quotient,f
  7053  0B15  0DF8               	rlf	___awdiv@quotient+1,f
  7054  0B16  3EFF               	addlw	-1
  7055  0B17  1D03               	skipz
  7056  0B18  2B13               	goto	u2065
  7057  0B19  0871               	movf	___awdiv@divisor+1,w
  7058  0B1A  0273               	subwf	___awdiv@dividend+1,w
  7059  0B1B  1D03               	skipz
  7060  0B1C  2B1F               	goto	u2075
  7061  0B1D  0870               	movf	___awdiv@divisor,w
  7062  0B1E  0272               	subwf	___awdiv@dividend,w
  7063  0B1F                     u2075:	
  7064  0B1F  1C03               	skipc
  7065  0B20  2B28               	goto	l2665
  7066  0B21  0870               	movf	___awdiv@divisor,w
  7067  0B22  02F2               	subwf	___awdiv@dividend,f
  7068  0B23  0871               	movf	___awdiv@divisor+1,w
  7069  0B24  1C03               	skipc
  7070  0B25  03F3               	decf	___awdiv@dividend+1,f
  7071  0B26  02F3               	subwf	___awdiv@dividend+1,f
  7072  0B27  1477               	bsf	___awdiv@quotient,0
  7073  0B28                     l2665:	
  7074  0B28  3001               	movlw	1
  7075  0B29                     u2085:	
  7076  0B29  1003               	clrc
  7077  0B2A  0CF1               	rrf	___awdiv@divisor+1,f
  7078  0B2B  0CF0               	rrf	___awdiv@divisor,f
  7079  0B2C  3EFF               	addlw	-1
  7080  0B2D  1D03               	skipz
  7081  0B2E  2B29               	goto	u2085
  7082  0B2F  3001               	movlw	1
  7083  0B30  02F5               	subwf	___awdiv@counter,f
  7084  0B31  1D03               	btfss	3,2
  7085  0B32  2B12               	goto	l2659
  7086  0B33                     l2669:	
  7087  0B33  0876               	movf	___awdiv@sign,w
  7088  0B34  1903               	btfsc	3,2
  7089  0B35  2B3B               	goto	l2673
  7090  0B36  09F7               	comf	___awdiv@quotient,f
  7091  0B37  09F8               	comf	___awdiv@quotient+1,f
  7092  0B38  0AF7               	incf	___awdiv@quotient,f
  7093  0B39  1903               	skipnz
  7094  0B3A  0AF8               	incf	___awdiv@quotient+1,f
  7095  0B3B                     l2673:	
  7096  0B3B  0878               	movf	___awdiv@quotient+1,w
  7097  0B3C  00F1               	movwf	?___awdiv+1
  7098  0B3D  0877               	movf	___awdiv@quotient,w
  7099  0B3E  00F0               	movwf	?___awdiv
  7100  0B3F  0008               	return
  7101  0B40                     __end_of___awdiv:	
  7102                           
  7103                           	psect	text25
  7104  0CC1                     __ptext25:	
  7105 ;; *************** function _OPINIT *****************
  7106 ;; Defined at:
  7107 ;;		line 241 in file "FMCW.c"
  7108 ;; Parameters:    Size  Location     Type
  7109 ;;  fmcwtxrx        2    4[COMMON] int 
  7110 ;; Auto vars:     Size  Location     Type
  7111 ;;		None
  7112 ;; Return value:  Size  Location     Type
  7113 ;;                  1    wreg      void 
  7114 ;; Registers used:
  7115 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7116 ;; Tracked objects:
  7117 ;;		On entry : 0/0
  7118 ;;		On exit  : 0/0
  7119 ;;		Unchanged: 0/0
  7120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7121 ;;      Params:         2       0       0       0       0
  7122 ;;      Locals:         0       0       0       0       0
  7123 ;;      Temps:          0       0       0       0       0
  7124 ;;      Totals:         2       0       0       0       0
  7125 ;;Total ram usage:        2 bytes
  7126 ;; Hardware stack levels used:    1
  7127 ;; Hardware stack levels required when called:    2
  7128 ;; This function calls:
  7129 ;;		_H_OUT
  7130 ;;		_L_OUT
  7131 ;;		_STBOUT
  7132 ;; This function is called by:
  7133 ;;		_FMTX
  7134 ;;		_CWTX
  7135 ;;		_FMRX
  7136 ;; This function uses a non-reentrant model
  7137 ;;
  7138                           
  7139                           
  7140                           ;psect for function _OPINIT
  7141  0CC1                     _OPINIT:	
  7142                           
  7143                           ;FMCW.c: 243: L_OUT(fmcwtxrx);
  7144                           
  7145                           ;incstack = 0
  7146                           ; Regs used in _OPINIT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7147  0CC1  0875               	movf	OPINIT@fmcwtxrx+1,w
  7148  0CC2  00F3               	movwf	L_OUT@fmcwtxrx+1
  7149  0CC3  0874               	movf	OPINIT@fmcwtxrx,w
  7150  0CC4  00F2               	movwf	L_OUT@fmcwtxrx
  7151  0CC5  120A  158A  220E  120A  158A  	fcall	_L_OUT
  7152                           
  7153                           ;FMCW.c: 244: L_OUT(fmcwtxrx);
  7154  0CCA  0875               	movf	OPINIT@fmcwtxrx+1,w
  7155  0CCB  00F3               	movwf	L_OUT@fmcwtxrx+1
  7156  0CCC  0874               	movf	OPINIT@fmcwtxrx,w
  7157  0CCD  00F2               	movwf	L_OUT@fmcwtxrx
  7158  0CCE  120A  158A  220E  120A  158A  	fcall	_L_OUT
  7159                           
  7160                           ;FMCW.c: 245: L_OUT(fmcwtxrx);
  7161  0CD3  0875               	movf	OPINIT@fmcwtxrx+1,w
  7162  0CD4  00F3               	movwf	L_OUT@fmcwtxrx+1
  7163  0CD5  0874               	movf	OPINIT@fmcwtxrx,w
  7164  0CD6  00F2               	movwf	L_OUT@fmcwtxrx
  7165  0CD7  120A  158A  220E  120A  158A  	fcall	_L_OUT
  7166                           
  7167                           ;FMCW.c: 246: H_OUT(fmcwtxrx);
  7168  0CDC  0875               	movf	OPINIT@fmcwtxrx+1,w
  7169  0CDD  00F3               	movwf	H_OUT@fmcwtxrx+1
  7170  0CDE  0874               	movf	OPINIT@fmcwtxrx,w
  7171  0CDF  00F2               	movwf	H_OUT@fmcwtxrx
  7172  0CE0  120A  158A  21C8  120A  158A  	fcall	_H_OUT
  7173                           
  7174                           ;FMCW.c: 247: H_OUT(fmcwtxrx);
  7175  0CE5  0875               	movf	OPINIT@fmcwtxrx+1,w
  7176  0CE6  00F3               	movwf	H_OUT@fmcwtxrx+1
  7177  0CE7  0874               	movf	OPINIT@fmcwtxrx,w
  7178  0CE8  00F2               	movwf	H_OUT@fmcwtxrx
  7179  0CE9  120A  158A  21C8  120A  158A  	fcall	_H_OUT
  7180                           
  7181                           ;FMCW.c: 248: L_OUT(fmcwtxrx);
  7182  0CEE  0875               	movf	OPINIT@fmcwtxrx+1,w
  7183  0CEF  00F3               	movwf	L_OUT@fmcwtxrx+1
  7184  0CF0  0874               	movf	OPINIT@fmcwtxrx,w
  7185  0CF1  00F2               	movwf	L_OUT@fmcwtxrx
  7186  0CF2  120A  158A  220E  120A  158A  	fcall	_L_OUT
  7187                           
  7188                           ;FMCW.c: 249: L_OUT(fmcwtxrx);
  7189  0CF7  0875               	movf	OPINIT@fmcwtxrx+1,w
  7190  0CF8  00F3               	movwf	L_OUT@fmcwtxrx+1
  7191  0CF9  0874               	movf	OPINIT@fmcwtxrx,w
  7192  0CFA  00F2               	movwf	L_OUT@fmcwtxrx
  7193  0CFB  120A  158A  220E  120A  158A  	fcall	_L_OUT
  7194                           
  7195                           ;FMCW.c: 250: L_OUT(fmcwtxrx);
  7196  0D00  0875               	movf	OPINIT@fmcwtxrx+1,w
  7197  0D01  00F3               	movwf	L_OUT@fmcwtxrx+1
  7198  0D02  0874               	movf	OPINIT@fmcwtxrx,w
  7199  0D03  00F2               	movwf	L_OUT@fmcwtxrx
  7200  0D04  120A  158A  220E  120A  158A  	fcall	_L_OUT
  7201                           
  7202                           ;FMCW.c: 251: L_OUT(fmcwtxrx);
  7203  0D09  0875               	movf	OPINIT@fmcwtxrx+1,w
  7204  0D0A  00F3               	movwf	L_OUT@fmcwtxrx+1
  7205  0D0B  0874               	movf	OPINIT@fmcwtxrx,w
  7206  0D0C  00F2               	movwf	L_OUT@fmcwtxrx
  7207  0D0D  120A  158A  220E  120A  158A  	fcall	_L_OUT
  7208                           
  7209                           ;FMCW.c: 252: L_OUT(fmcwtxrx);
  7210  0D12  0875               	movf	OPINIT@fmcwtxrx+1,w
  7211  0D13  00F3               	movwf	L_OUT@fmcwtxrx+1
  7212  0D14  0874               	movf	OPINIT@fmcwtxrx,w
  7213  0D15  00F2               	movwf	L_OUT@fmcwtxrx
  7214  0D16  120A  158A  220E  120A  158A  	fcall	_L_OUT
  7215                           
  7216                           ;FMCW.c: 253: H_OUT(fmcwtxrx);
  7217  0D1B  0875               	movf	OPINIT@fmcwtxrx+1,w
  7218  0D1C  00F3               	movwf	H_OUT@fmcwtxrx+1
  7219  0D1D  0874               	movf	OPINIT@fmcwtxrx,w
  7220  0D1E  00F2               	movwf	H_OUT@fmcwtxrx
  7221  0D1F  120A  158A  21C8  120A  158A  	fcall	_H_OUT
  7222                           
  7223                           ;FMCW.c: 256: L_OUT(fmcwtxrx);
  7224  0D24  0875               	movf	OPINIT@fmcwtxrx+1,w
  7225  0D25  00F3               	movwf	L_OUT@fmcwtxrx+1
  7226  0D26  0874               	movf	OPINIT@fmcwtxrx,w
  7227  0D27  00F2               	movwf	L_OUT@fmcwtxrx
  7228  0D28  120A  158A  220E  120A  158A  	fcall	_L_OUT
  7229                           
  7230                           ;FMCW.c: 257: L_OUT(fmcwtxrx);
  7231  0D2D  0875               	movf	OPINIT@fmcwtxrx+1,w
  7232  0D2E  00F3               	movwf	L_OUT@fmcwtxrx+1
  7233  0D2F  0874               	movf	OPINIT@fmcwtxrx,w
  7234  0D30  00F2               	movwf	L_OUT@fmcwtxrx
  7235  0D31  120A  158A  220E  120A  158A  	fcall	_L_OUT
  7236                           
  7237                           ;FMCW.c: 260: STBOUT(fmcwtxrx);
  7238  0D36  0875               	movf	OPINIT@fmcwtxrx+1,w
  7239  0D37  00F3               	movwf	STBOUT@fmcwtxrx+1
  7240  0D38  0874               	movf	OPINIT@fmcwtxrx,w
  7241  0D39  00F2               	movwf	STBOUT@fmcwtxrx
  7242  0D3A  120A  158A  2166   	fcall	_STBOUT
  7243  0D3D  0008               	return
  7244  0D3E                     __end_of_OPINIT:	
  7245                           
  7246                           	psect	text26
  7247  0966                     __ptext26:	
  7248 ;; *************** function _STBOUT *****************
  7249 ;; Defined at:
  7250 ;;		line 107 in file "FMCW.c"
  7251 ;; Parameters:    Size  Location     Type
  7252 ;;  fmcwtxrx        2    2[COMMON] int 
  7253 ;; Auto vars:     Size  Location     Type
  7254 ;;		None
  7255 ;; Return value:  Size  Location     Type
  7256 ;;                  1    wreg      void 
  7257 ;; Registers used:
  7258 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7259 ;; Tracked objects:
  7260 ;;		On entry : 0/0
  7261 ;;		On exit  : 0/0
  7262 ;;		Unchanged: 0/0
  7263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7264 ;;      Params:         2       0       0       0       0
  7265 ;;      Locals:         0       0       0       0       0
  7266 ;;      Temps:          0       0       0       0       0
  7267 ;;      Totals:         2       0       0       0       0
  7268 ;;Total ram usage:        2 bytes
  7269 ;; Hardware stack levels used:    1
  7270 ;; Hardware stack levels required when called:    1
  7271 ;; This function calls:
  7272 ;;		__NOP
  7273 ;; This function is called by:
  7274 ;;		_OUTFQ
  7275 ;;		_RFDOUT
  7276 ;;		_OPINIT
  7277 ;; This function uses a non-reentrant model
  7278 ;;
  7279                           
  7280                           
  7281                           ;psect for function _STBOUT
  7282  0966                     _STBOUT:	
  7283                           
  7284                           ;FMCW.c: 108: if(fmcwtxrx == 1)
  7285                           
  7286                           ;incstack = 0
  7287                           ; Regs used in _STBOUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7288  0966  0372               	decf	STBOUT@fmcwtxrx,w
  7289  0967  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7290  0968  1D03               	btfss	3,2
  7291  0969  2975               	goto	l2617
  7292                           
  7293                           ;FMCW.c: 109: {
  7294                           ;FMCW.c: 110: PORTAbits.RA5 = 1;
  7295  096A  1283               	bcf	3,5	;RP0=0, select bank0
  7296  096B  1303               	bcf	3,6	;RP1=0, select bank0
  7297  096C  1685               	bsf	5,5	;volatile
  7298                           
  7299                           ;FMCW.c: 111: _NOP();
  7300  096D  120A  158A  203C  120A  158A  	fcall	__NOP
  7301                           
  7302                           ;FMCW.c: 112: PORTAbits.RA5 = 0;
  7303  0972  1283               	bcf	3,5	;RP0=0, select bank0
  7304  0973  1303               	bcf	3,6	;RP1=0, select bank0
  7305  0974  1285               	bcf	5,5	;volatile
  7306  0975                     l2617:	
  7307                           
  7308                           ;FMCW.c: 113: }
  7309                           ;FMCW.c: 114: if(fmcwtxrx == 2)
  7310  0975  3002               	movlw	2
  7311  0976  0672               	xorwf	STBOUT@fmcwtxrx,w
  7312  0977  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7313  0978  1D03               	btfss	3,2
  7314  0979  2985               	goto	l2625
  7315                           
  7316                           ;FMCW.c: 115: {
  7317                           ;FMCW.c: 116: PORTDbits.RD0 = 1;
  7318  097A  1283               	bcf	3,5	;RP0=0, select bank0
  7319  097B  1303               	bcf	3,6	;RP1=0, select bank0
  7320  097C  1408               	bsf	8,0	;volatile
  7321                           
  7322                           ;FMCW.c: 117: _NOP();
  7323  097D  120A  158A  203C  120A  158A  	fcall	__NOP
  7324                           
  7325                           ;FMCW.c: 118: PORTDbits.RD0 = 0;
  7326  0982  1283               	bcf	3,5	;RP0=0, select bank0
  7327  0983  1303               	bcf	3,6	;RP1=0, select bank0
  7328  0984  1008               	bcf	8,0	;volatile
  7329  0985                     l2625:	
  7330                           
  7331                           ;FMCW.c: 119: }
  7332                           ;FMCW.c: 120: if(fmcwtxrx == 3)
  7333  0985  3003               	movlw	3
  7334  0986  0672               	xorwf	STBOUT@fmcwtxrx,w
  7335  0987  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7336  0988  1D03               	btfss	3,2
  7337  0989  0008               	return
  7338                           
  7339                           ;FMCW.c: 121: {
  7340                           ;FMCW.c: 122: PORTAbits.RA4 = 1;
  7341  098A  1283               	bcf	3,5	;RP0=0, select bank0
  7342  098B  1303               	bcf	3,6	;RP1=0, select bank0
  7343  098C  1605               	bsf	5,4	;volatile
  7344                           
  7345                           ;FMCW.c: 123: _NOP();
  7346  098D  120A  158A  203C   	fcall	__NOP
  7347                           
  7348                           ;FMCW.c: 124: PORTAbits.RA4 = 0;
  7349  0990  1283               	bcf	3,5	;RP0=0, select bank0
  7350  0991  1303               	bcf	3,6	;RP1=0, select bank0
  7351  0992  1205               	bcf	5,4	;volatile
  7352  0993  0008               	return
  7353  0994                     __end_of_STBOUT:	
  7354                           
  7355                           	psect	text27
  7356  0A0E                     __ptext27:	
  7357 ;; *************** function _L_OUT *****************
  7358 ;; Defined at:
  7359 ;;		line 40 in file "FMCW.c"
  7360 ;; Parameters:    Size  Location     Type
  7361 ;;  fmcwtxrx        2    2[COMMON] int 
  7362 ;; Auto vars:     Size  Location     Type
  7363 ;;		None
  7364 ;; Return value:  Size  Location     Type
  7365 ;;                  1    wreg      void 
  7366 ;; Registers used:
  7367 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7368 ;; Tracked objects:
  7369 ;;		On entry : 0/0
  7370 ;;		On exit  : 0/0
  7371 ;;		Unchanged: 0/0
  7372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7373 ;;      Params:         2       0       0       0       0
  7374 ;;      Locals:         0       0       0       0       0
  7375 ;;      Temps:          0       0       0       0       0
  7376 ;;      Totals:         2       0       0       0       0
  7377 ;;Total ram usage:        2 bytes
  7378 ;; Hardware stack levels used:    1
  7379 ;; Hardware stack levels required when called:    1
  7380 ;; This function calls:
  7381 ;;		__NOP
  7382 ;; This function is called by:
  7383 ;;		_OUTFQ
  7384 ;;		_RFDOUT
  7385 ;;		_OPINIT
  7386 ;; This function uses a non-reentrant model
  7387 ;;
  7388                           
  7389                           
  7390                           ;psect for function _L_OUT
  7391  0A0E                     _L_OUT:	
  7392                           
  7393                           ;FMCW.c: 41: if(fmcwtxrx == 1)
  7394                           
  7395                           ;incstack = 0
  7396                           ; Regs used in _L_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7397  0A0E  0372               	decf	L_OUT@fmcwtxrx,w
  7398  0A0F  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7399  0A10  1D03               	btfss	3,2
  7400  0A11  2A25               	goto	l2559
  7401                           
  7402                           ;FMCW.c: 42: {
  7403                           ;FMCW.c: 43: PORTEbits.RE0 = 0;
  7404  0A12  1283               	bcf	3,5	;RP0=0, select bank0
  7405  0A13  1303               	bcf	3,6	;RP1=0, select bank0
  7406  0A14  1009               	bcf	9,0	;volatile
  7407                           
  7408                           ;FMCW.c: 44: _NOP();
  7409  0A15  120A  158A  203C  120A  158A  	fcall	__NOP
  7410                           
  7411                           ;FMCW.c: 45: PORTEbits.RE1 = 1;
  7412  0A1A  1283               	bcf	3,5	;RP0=0, select bank0
  7413  0A1B  1303               	bcf	3,6	;RP1=0, select bank0
  7414  0A1C  1489               	bsf	9,1	;volatile
  7415                           
  7416                           ;FMCW.c: 46: _NOP();
  7417  0A1D  120A  158A  203C  120A  158A  	fcall	__NOP
  7418                           
  7419                           ;FMCW.c: 47: PORTEbits.RE1 = 0;
  7420  0A22  1283               	bcf	3,5	;RP0=0, select bank0
  7421  0A23  1303               	bcf	3,6	;RP1=0, select bank0
  7422  0A24  1089               	bcf	9,1	;volatile
  7423  0A25                     l2559:	
  7424                           
  7425                           ;FMCW.c: 48: }
  7426                           ;FMCW.c: 49: if(fmcwtxrx == 2)
  7427  0A25  3002               	movlw	2
  7428  0A26  0672               	xorwf	L_OUT@fmcwtxrx,w
  7429  0A27  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7430  0A28  1D03               	btfss	3,2
  7431  0A29  2A3D               	goto	l2569
  7432                           
  7433                           ;FMCW.c: 50: {
  7434                           ;FMCW.c: 51: PORTDbits.RD1 = 0;
  7435  0A2A  1283               	bcf	3,5	;RP0=0, select bank0
  7436  0A2B  1303               	bcf	3,6	;RP1=0, select bank0
  7437  0A2C  1088               	bcf	8,1	;volatile
  7438                           
  7439                           ;FMCW.c: 52: _NOP();
  7440  0A2D  120A  158A  203C  120A  158A  	fcall	__NOP
  7441                           
  7442                           ;FMCW.c: 53: PORTDbits.RD2 = 1;
  7443  0A32  1283               	bcf	3,5	;RP0=0, select bank0
  7444  0A33  1303               	bcf	3,6	;RP1=0, select bank0
  7445  0A34  1508               	bsf	8,2	;volatile
  7446                           
  7447                           ;FMCW.c: 54: _NOP();
  7448  0A35  120A  158A  203C  120A  158A  	fcall	__NOP
  7449                           
  7450                           ;FMCW.c: 55: PORTDbits.RD2 = 0;
  7451  0A3A  1283               	bcf	3,5	;RP0=0, select bank0
  7452  0A3B  1303               	bcf	3,6	;RP1=0, select bank0
  7453  0A3C  1108               	bcf	8,2	;volatile
  7454  0A3D                     l2569:	
  7455                           
  7456                           ;FMCW.c: 56: }
  7457                           ;FMCW.c: 57: if(fmcwtxrx == 3)
  7458  0A3D  3003               	movlw	3
  7459  0A3E  0672               	xorwf	L_OUT@fmcwtxrx,w
  7460  0A3F  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7461  0A40  1D03               	btfss	3,2
  7462  0A41  0008               	return
  7463                           
  7464                           ;FMCW.c: 58: {
  7465                           ;FMCW.c: 59: PORTAbits.RA3 = 0;
  7466  0A42  1283               	bcf	3,5	;RP0=0, select bank0
  7467  0A43  1303               	bcf	3,6	;RP1=0, select bank0
  7468  0A44  1185               	bcf	5,3	;volatile
  7469                           
  7470                           ;FMCW.c: 60: _NOP();
  7471  0A45  120A  158A  203C  120A  158A  	fcall	__NOP
  7472                           
  7473                           ;FMCW.c: 61: PORTAbits.RA2 = 1;
  7474  0A4A  1283               	bcf	3,5	;RP0=0, select bank0
  7475  0A4B  1303               	bcf	3,6	;RP1=0, select bank0
  7476  0A4C  1505               	bsf	5,2	;volatile
  7477                           
  7478                           ;FMCW.c: 62: _NOP();
  7479  0A4D  120A  158A  203C   	fcall	__NOP
  7480                           
  7481                           ;FMCW.c: 63: PORTAbits.RA2 = 0;
  7482  0A50  1283               	bcf	3,5	;RP0=0, select bank0
  7483  0A51  1303               	bcf	3,6	;RP1=0, select bank0
  7484  0A52  1105               	bcf	5,2	;volatile
  7485  0A53  0008               	return
  7486  0A54                     __end_of_L_OUT:	
  7487                           
  7488                           	psect	text28
  7489  09C8                     __ptext28:	
  7490 ;; *************** function _H_OUT *****************
  7491 ;; Defined at:
  7492 ;;		line 74 in file "FMCW.c"
  7493 ;; Parameters:    Size  Location     Type
  7494 ;;  fmcwtxrx        2    2[COMMON] int 
  7495 ;; Auto vars:     Size  Location     Type
  7496 ;;		None
  7497 ;; Return value:  Size  Location     Type
  7498 ;;                  1    wreg      void 
  7499 ;; Registers used:
  7500 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7501 ;; Tracked objects:
  7502 ;;		On entry : 0/0
  7503 ;;		On exit  : 0/0
  7504 ;;		Unchanged: 0/0
  7505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7506 ;;      Params:         2       0       0       0       0
  7507 ;;      Locals:         0       0       0       0       0
  7508 ;;      Temps:          0       0       0       0       0
  7509 ;;      Totals:         2       0       0       0       0
  7510 ;;Total ram usage:        2 bytes
  7511 ;; Hardware stack levels used:    1
  7512 ;; Hardware stack levels required when called:    1
  7513 ;; This function calls:
  7514 ;;		__NOP
  7515 ;; This function is called by:
  7516 ;;		_OUTFQ
  7517 ;;		_RFDOUT
  7518 ;;		_OPINIT
  7519 ;; This function uses a non-reentrant model
  7520 ;;
  7521                           
  7522                           
  7523                           ;psect for function _H_OUT
  7524  09C8                     _H_OUT:	
  7525                           
  7526                           ;FMCW.c: 75: if(fmcwtxrx == 1)
  7527                           
  7528                           ;incstack = 0
  7529                           ; Regs used in _H_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7530  09C8  0372               	decf	H_OUT@fmcwtxrx,w
  7531  09C9  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7532  09CA  1D03               	btfss	3,2
  7533  09CB  29DF               	goto	l2589
  7534                           
  7535                           ;FMCW.c: 76: {
  7536                           ;FMCW.c: 77: PORTEbits.RE0 = 1;
  7537  09CC  1283               	bcf	3,5	;RP0=0, select bank0
  7538  09CD  1303               	bcf	3,6	;RP1=0, select bank0
  7539  09CE  1409               	bsf	9,0	;volatile
  7540                           
  7541                           ;FMCW.c: 78: _NOP();
  7542  09CF  120A  158A  203C  120A  158A  	fcall	__NOP
  7543                           
  7544                           ;FMCW.c: 79: PORTEbits.RE1 = 1;
  7545  09D4  1283               	bcf	3,5	;RP0=0, select bank0
  7546  09D5  1303               	bcf	3,6	;RP1=0, select bank0
  7547  09D6  1489               	bsf	9,1	;volatile
  7548                           
  7549                           ;FMCW.c: 80: _NOP();
  7550  09D7  120A  158A  203C  120A  158A  	fcall	__NOP
  7551                           
  7552                           ;FMCW.c: 81: PORTEbits.RE1 = 0;
  7553  09DC  1283               	bcf	3,5	;RP0=0, select bank0
  7554  09DD  1303               	bcf	3,6	;RP1=0, select bank0
  7555  09DE  1089               	bcf	9,1	;volatile
  7556  09DF                     l2589:	
  7557                           
  7558                           ;FMCW.c: 82: }
  7559                           ;FMCW.c: 83: if(fmcwtxrx == 2)
  7560  09DF  3002               	movlw	2
  7561  09E0  0672               	xorwf	H_OUT@fmcwtxrx,w
  7562  09E1  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7563  09E2  1D03               	btfss	3,2
  7564  09E3  29F7               	goto	l2599
  7565                           
  7566                           ;FMCW.c: 84: {
  7567                           ;FMCW.c: 85: PORTDbits.RD1 = 1;
  7568  09E4  1283               	bcf	3,5	;RP0=0, select bank0
  7569  09E5  1303               	bcf	3,6	;RP1=0, select bank0
  7570  09E6  1488               	bsf	8,1	;volatile
  7571                           
  7572                           ;FMCW.c: 86: _NOP();
  7573  09E7  120A  158A  203C  120A  158A  	fcall	__NOP
  7574                           
  7575                           ;FMCW.c: 87: PORTDbits.RD2 = 1;
  7576  09EC  1283               	bcf	3,5	;RP0=0, select bank0
  7577  09ED  1303               	bcf	3,6	;RP1=0, select bank0
  7578  09EE  1508               	bsf	8,2	;volatile
  7579                           
  7580                           ;FMCW.c: 88: _NOP();
  7581  09EF  120A  158A  203C  120A  158A  	fcall	__NOP
  7582                           
  7583                           ;FMCW.c: 89: PORTDbits.RD2 = 0;
  7584  09F4  1283               	bcf	3,5	;RP0=0, select bank0
  7585  09F5  1303               	bcf	3,6	;RP1=0, select bank0
  7586  09F6  1108               	bcf	8,2	;volatile
  7587  09F7                     l2599:	
  7588                           
  7589                           ;FMCW.c: 90: }
  7590                           ;FMCW.c: 91: if(fmcwtxrx == 3)
  7591  09F7  3003               	movlw	3
  7592  09F8  0672               	xorwf	H_OUT@fmcwtxrx,w
  7593  09F9  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7594  09FA  1D03               	btfss	3,2
  7595  09FB  0008               	return
  7596                           
  7597                           ;FMCW.c: 92: {
  7598                           ;FMCW.c: 93: PORTAbits.RA3 = 1;
  7599  09FC  1283               	bcf	3,5	;RP0=0, select bank0
  7600  09FD  1303               	bcf	3,6	;RP1=0, select bank0
  7601  09FE  1585               	bsf	5,3	;volatile
  7602                           
  7603                           ;FMCW.c: 94: _NOP();
  7604  09FF  120A  158A  203C  120A  158A  	fcall	__NOP
  7605                           
  7606                           ;FMCW.c: 95: PORTAbits.RA2 = 1;
  7607  0A04  1283               	bcf	3,5	;RP0=0, select bank0
  7608  0A05  1303               	bcf	3,6	;RP1=0, select bank0
  7609  0A06  1505               	bsf	5,2	;volatile
  7610                           
  7611                           ;FMCW.c: 96: _NOP();
  7612  0A07  120A  158A  203C   	fcall	__NOP
  7613                           
  7614                           ;FMCW.c: 97: PORTAbits.RA2 = 0;
  7615  0A0A  1283               	bcf	3,5	;RP0=0, select bank0
  7616  0A0B  1303               	bcf	3,6	;RP1=0, select bank0
  7617  0A0C  1105               	bcf	5,2	;volatile
  7618  0A0D  0008               	return
  7619  0A0E                     __end_of_H_OUT:	
  7620                           
  7621                           	psect	text29
  7622  083C                     __ptext29:	
  7623 ;; *************** function __NOP *****************
  7624 ;; Defined at:
  7625 ;;		line 349 in file "FMCW.c"
  7626 ;; Parameters:    Size  Location     Type
  7627 ;;		None
  7628 ;; Auto vars:     Size  Location     Type
  7629 ;;  i               2    0[COMMON] int 
  7630 ;; Return value:  Size  Location     Type
  7631 ;;                  1    wreg      void 
  7632 ;; Registers used:
  7633 ;;		wreg, status,2, btemp+1
  7634 ;; Tracked objects:
  7635 ;;		On entry : 0/0
  7636 ;;		On exit  : 0/0
  7637 ;;		Unchanged: 0/0
  7638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7639 ;;      Params:         0       0       0       0       0
  7640 ;;      Locals:         2       0       0       0       0
  7641 ;;      Temps:          0       0       0       0       0
  7642 ;;      Totals:         2       0       0       0       0
  7643 ;;Total ram usage:        2 bytes
  7644 ;; Hardware stack levels used:    1
  7645 ;; This function calls:
  7646 ;;		Nothing
  7647 ;; This function is called by:
  7648 ;;		_L_OUT
  7649 ;;		_H_OUT
  7650 ;;		_STBOUT
  7651 ;; This function uses a non-reentrant model
  7652 ;;
  7653                           
  7654                           
  7655                           ;psect for function __NOP
  7656  083C                     __NOP:	
  7657                           
  7658                           ;FMCW.c: 350: for(int i=0; i<5; i++){
  7659                           
  7660                           ;incstack = 0
  7661                           ; Regs used in __NOP: [wreg+status,2+btemp+1]
  7662  083C  01F0               	clrf	__NOP@i
  7663  083D  01F1               	clrf	__NOP@i+1
  7664  083E                     L9:	
  7665  083E  0871               	movf	__NOP@i+1,w
  7666  083F  3A80               	xorlw	128
  7667  0840  00FF               	movwf	127
  7668  0841  3080               	movlw	128
  7669  0842  027F               	subwf	127,w
  7670  0843  1D03               	skipz
  7671  0844  2847               	goto	u1855
  7672  0845  3005               	movlw	5
  7673  0846  0270               	subwf	__NOP@i,w
  7674  0847                     u1855:	
  7675  0847  1803               	btfsc	3,0
  7676  0848  0008               	return
  7677                           
  7678                           ;FMCW.c: 351: __nop();
  7679  0849  0000               	nop
  7680  084A  3001               	movlw	1
  7681  084B  07F0               	addwf	__NOP@i,f
  7682  084C  1803               	skipnc
  7683  084D  0AF1               	incf	__NOP@i+1,f
  7684  084E  3000               	movlw	0
  7685  084F  07F1               	addwf	__NOP@i+1,f
  7686  0850  283E               	goto	L9
  7687  0851                     __end_of__NOP:	
  7688  007E                     btemp	set	126	;btemp
  7689  007E                     wtemp	set	126
  7690  007E                     wtemp0	set	126
  7691  0080                     wtemp1	set	128
  7692  0082                     wtemp2	set	130
  7693  0084                     wtemp3	set	132
  7694  0086                     wtemp4	set	134
  7695  0088                     wtemp5	set	136
  7696  007F                     wtemp6	set	127
  7697  007E                     ttemp	set	126
  7698  007E                     ttemp0	set	126
  7699  0081                     ttemp1	set	129
  7700  0084                     ttemp2	set	132
  7701  0087                     ttemp3	set	135
  7702  007F                     ttemp4	set	127
  7703  007E                     ltemp	set	126
  7704  007E                     ltemp0	set	126
  7705  0082                     ltemp1	set	130
  7706  0086                     ltemp2	set	134
  7707  0080                     ltemp3	set	128


Data Sizes:
    Strings     25
    Constant    2
    Data        91
    BSS         137
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      80
    BANK1            80     34      73
    BANK3            96      0      90
    BANK2            96      0      89

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_16(CODE[3]), STR_15(CODE[8]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 

    FMRX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), FMRX_Nprg(BANK3[10]), 

    CWTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@CWTX_Nprg(BANK1[10]), CWTX_Nprg(BANK1[10]), 

    FMTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    OUTFQ@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), main@CWTX_Nprg(BANK1[10]), main@FMTX_Nprg(BANK1[10]), 
		 -> FMRX_Nprg(BANK3[10]), CWTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    sp__EEPROM_Read	PTR unsigned char  size(1) Largest target is 32
		 -> EEPROMData(BANK2[32]), 

    EEPROM_Write@data	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 

    main@dData	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 

    sp__ReceivePacket_data	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 


Critical Paths under _main in COMMON

    _printf->_putch
    _ReceivePacket_data->_fcscheck
    _ReceivePacket_data->_waitFlag
    _waitFlag->_getbit
    _getdata->_getbit
    _NM_waddress->_putch
    _Init_I2C_M->___lldiv
    _FMTX->_OUTFQ
    _FMTX->_RFDOUT
    _FMRX->_OUTFQ
    _FMRX->_RFDOUT
    _EEPROM_Write->_I2C_Master_Write
    _CWTX->_OUTFQ
    _CWTX->_RFDOUT
    _RFDOUT->___awdiv
    _OUTFQ->___awdiv
    _OPINIT->_H_OUT
    _OPINIT->_L_OUT
    _OPINIT->_STBOUT
    _STBOUT->__NOP
    _L_OUT->__NOP
    _H_OUT->__NOP

Critical Paths under _main in BANK0

    _main->_CWTX
    _main->_FMRX
    _main->_FMTX
    _ReceivePacket_data->_waitFlag
    _FMTX->_OUTFQ
    _FMRX->_OUTFQ
    _CWTX->_OUTFQ

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                38    38      0   33355
                                             66 BANK0      4     4      0
                                              0 BANK1     34    34      0
                               _CWTX
                       _EEPROM_Write
                               _FMRX
                               _FMTX
                         _Init_I2C_M
                           _Init_MPU
                        _Init_SERIAL
                        _NM_waddress
                 _ReceivePacket_data
                          _Reset_EPS
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     214
                                              1 COMMON     7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _Reset_EPS                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ReceivePacket_data                                   6     6      0    2691
                                             10 COMMON     2     2      0
                                             29 BANK0      4     4      0
                           _fcscheck
                            _getdata
                           _waitFlag
 ---------------------------------------------------------------------------------
 (2) _waitFlag                                            33    33      0    2205
                                              6 COMMON     4     4      0
                                              0 BANK0     29    29      0
                             _getbit
 ---------------------------------------------------------------------------------
 (2) _getdata                                             10    10      0     212
                                              6 COMMON     2     2      0
                                              0 BANK0      7     7      0
                             _getbit
 ---------------------------------------------------------------------------------
 (3) _getbit                                               6     4      2      46
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _fcscheck                                            10     8      2     161
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (1) _NM_waddress                                          3     1      2     194
                                              1 COMMON     3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_SERIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_MPU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_I2C_M                                           8     4      4     343
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _FMTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _FMRX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         8     5      3     739
                                              2 COMMON     8     5      3
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     446
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CWTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (2) _RFDOUT                                              37    33      4    3231
                                              9 COMMON     4     0      4
                                              0 BANK0     33    33      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _OUTFQ                                               64    60      4    3853
                                              9 COMMON     4     0      4
                                              0 BANK0     60    60      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _OPINIT                                               2     0      2    2075
                                              4 COMMON     2     0      2
                              _H_OUT
                              _L_OUT
                             _STBOUT
 ---------------------------------------------------------------------------------
 (3) _STBOUT                                               2     0      2     271
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _L_OUT                                                2     0      2     801
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _H_OUT                                                2     0      2     536
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (4) __NOP                                                 2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CWTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _EEPROM_Write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _FMRX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _FMTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _Init_I2C_M
     ___lldiv
   _Init_MPU
   _Init_SERIAL
   _NM_waddress
     _putch
   _ReceivePacket_data
     _fcscheck
     _getdata
       _getbit
     _waitFlag
       _getbit
   _Reset_EPS
   _printf
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      5A       9       93.8%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      59      11       92.7%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     22      49       7       91.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     46      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     15A      12        0.0%
ABS                  0      0     15A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Dec 03 03:24:51 2017

                           pc 0002                   __CFG_CP$OFF 0000                            l56 17E0  
                ___awdiv@sign 0076                            fsr 0004                           l263 0091  
                         l198 0566                           l481 0821                           l643 0A9A  
                         _RA1 0029                           _RB2 0032                           _RC2 003A  
                         _RB4 0034                           _RB5 0035                           _PEN 048A  
                __CFG_CPD$OFF 0000                           _SEN 0488                           _RX9 00C6  
                         _TX9 04C6                           fsr0 0004                           indf 0000  
                __CFG_FOSC$HS 0000                  __CFG_LVP$OFF 0000                          l3001 0706  
                        l3011 0721                          l3015 072E                          l3121 008A  
                        l3041 0784                          l3203 0293                          l3211 02B7  
                        l3115 0076                          l3123 0038                          l3027 075C  
                        l3221 02E0                          l3109 0059                          l3037 0777  
                        l3061 032F                          l3207 02A4                          l3135 00A9  
                        l3225 02FA                          l3217 02C6                          l3081 0C35  
                        l3171 00E8                          l3243 0D69                          l3075 0C24  
                        l3059 07B0                          l3229 030D                          l3165 00D9  
                        l3237 0D4D                          l2541 0AE2                          l3085 0C40  
                        l3077 0C27                          l3159 00BD                          l3271 0DF2  
                        l3263 0DBE                          l3095 0C04                          l2703 035E  
                        l2625 0985                          l2617 0975                          l2641 0AF1  
                        l3177 00F7                          l3257 0DAF                          l3249 0D78  
                        l2713 0379                          l3187 0160                          l3267 0DD8  
                        l3275 0E05                          l2539 0AD5                          l2731 03B8  
                        l3363 0C8D                          l3197 0205                          l3189 019D  
                        l3285 0BAD                          l2741 03D3                          l2717 0386  
                        l2559 0A25                          l2647 0AFC                          l3199 020C  
                        l3295 0BE5                          l3287 0BBD                          l2911 05D6  
                        l2823 04E2                          l3471 0A76                          l2569 0A3D  
                        l2673 0B3B                          l2665 0B28                          l2657 0B04  
                        l2809 04BA                          l2745 03E0                          l3369 0CB5  
                        l3377 0CBB                          l3481 0A59                          l3801 0F32  
                        l2659 0B12                          l3299 0BF2                          l2923 0604  
                        l2907 05C9                          l2835 0510                          l2819 04D5  
                        l2771 0436                          l3475 0A80                          l2589 09DF  
                        l2669 0B33                          l2933 061F                          l2845 052B  
                        l2757 040E                          l3469 0A74                          l3821 0FD9  
                        l2599 09F7                          l2783 0464                          l2767 0429  
                        l2695 0336                          l3479 0A87                          l3497 0B70  
                        l2937 062C                          l2873 056F                          l2849 0538  
                        l2793 047F                          l2697 0355                          l3825 0FF0  
                        l3499 0B8A                          l2963 0682                          l2883 058A  
                        l2867 0564                          l2949 065A                          l2797 048C  
                        l3765 0E9F                          l2975 06B0                          l2959 0675  
                        l2887 0597                          l3783 0EF3                          l3775 0EC4  
                        l2985 06CB                          l2897 05AE                          l2989 06D8  
                        l3789 0F0B                          STR_1 0817                          STR_2 0817  
                        STR_3 0817                          STR_4 0817                          STR_5 0817  
                        STR_6 0817                          STR_7 0810                          STR_8 0810  
                        STR_9 0810                          _BRGH 04C2                          _CREN 00C4  
                        u2045 0B07                          u3005 0E03                          u2065 0B13  
                        u3025 0BB1                          u2305 04A1                          u2225 03F5  
                        u3105 0CB3                          u2075 0B1F                          u2085 0B29  
                        u3045 0BBF                          u3055 0BD4                          u3065 0BE6  
                        u2345 04F7                          u2265 044B                          u2185 039F  
                        u3175 09A6                          u2615 0743                          u2535 0697  
                        u2455 05EB                          u3095 0C8B                          _FMRX 090E  
                        u2385 054D                          _FMTX 093A                          u2805 00D7  
                        u3550 0F50                          u1855 0847                          u2815 00E6  
                        u2655 0799                          u2575 06ED                          u2495 0641  
                        u3607 0E27                          u3560 0F66                          u2825 00F5  
                        u3617 0E50                          u3570 0F7C                          u2755 0046  
                        u3627 0F1D                          u2925 030B                          u1885 0AC5  
                        u3637 0F3F                          u2935 0D4B                          u3647 0FD1  
                        u2945 0D67                          u3657 0FF8                          u2875 02A2  
                        u2795 00BB                          u2955 0D76                          u3667 0011  
                        _RCIE 0465                          _RCEN 048B                          _RCIF 0065  
                        _CWTX 08E2                          u2885 02B5                          u2965 0DAD  
                        u3677 0022                          u2895 02C4                          u2975 0DBC  
                        u3687 0AC9                          u3697 0B95                          _SPEN 00C7  
                        _RSEN 0489                          _SREN 00C5                          _TXIE 0464  
                        _TXEN 04C5                          _TXIF 0064                          _SYNC 04C4  
                        __NOP 083C                  __CFG_WRT$OFF 0000                          _main 0E1F  
                 _NM_waddress 082A                 ??_Init_SERIAL 0070                          btemp 007E  
               __CFG_BOREN$ON 0000                          ltemp 007E                  getbit@oldbit 00E7  
                 Init_I2C_M@c 0020                          start 0000  ReceivePacket_data@fcschecker 003D  
                        ttemp 007E                          wtemp 007E                 __CFG_IESO$OFF 0000  
               __CFG_MCLRE$ON 0000          __end_of_EEPROM_Write 0B9D                         ?_FMRX 005C  
                       ?_FMTX 005C                         ?_CWTX 005C              ?_I2C_Master_Wait 0070  
            ?_I2C_Master_Stop 0070                         ?__NOP 0070                         ?_main 0070  
                       _ACKEN 048C                         _ACKDT 048D               __end_of___awdiv 0B40  
                       STR_10 0810                         STR_11 0810                         STR_12 0810  
                       STR_15 0808                         STR_16 081E                 __CFG_WDTE$OFF 0000  
                       _ANSEL 0188               __end_of___lldiv 0BFB               ___awdiv@divisor 0070  
             ___awdiv@counter 0075                         _RCREG 001A                         _SPBRG 0099  
                       _PORTA 0005                         _PORTB 0006                         _PORTC 0007  
                       _PORTD 0008                         _PORTE 0009                         _H_OUT 09C8  
                       _OUTFQ 00AC                         _TRISA 0085                         _TRISB 0086  
                       _TRISC 0087                         _TRISD 0088                         _TRISE 0089  
                       _L_OUT 0A0E                         _TXREG 0019                 __CFG_PWRTE$ON 0000  
              __CFG_FCMEN$OFF 0000                         _dData 0130               __end_of_getdata 0C5C  
                       _eflag 0068                 getdata@dstuff 0022                         _putch 17DF  
                       main@i 00BF                         pclath 000A                         ltemp0 007E  
                       ltemp1 0082                         ltemp2 0086                         ltemp3 0080  
                       ttemp0 007E                         ttemp1 0081                         ttemp2 0084  
                       ttemp3 0087                         ttemp4 007F                         status 0003  
                       wtemp0 007E                         wtemp1 0080                         wtemp2 0082  
                       wtemp3 0084                         wtemp4 0086                         wtemp5 0088  
                       wtemp6 007F                    _Init_I2C_M 0994              EEPROM_Write@data 0074  
  __end_of_ReceivePacket_data 0CC1                  __end_of_FMRX 093A                  __end_of_FMTX 0966  
                __end_of_CWTX 090E                  __end_of__NOP 0851               __initialization 07B3  
                __end_of_main 1000           __end_of_Init_SERIAL 086A              __end_of_Init_MPU 08BA  
                      ??_FMRX 007D                        ??_FMTX 007D                        ??_CWTX 007D  
                      ??__NOP 0070                        ??_main 0062                        ?_H_OUT 0072  
    EEPROM_Write@high_address 0072                        ?_OUTFQ 0079                        ?_L_OUT 0072  
           ?_I2C_Master_Start 0070             ?_I2C_Master_Write 0070                        OUTFQ@i 0056  
          ??_I2C_Master_Start 0070                        OUTFQ@j 005A            ??_I2C_Master_Write 0072  
            ___awdiv@dividend 0072                    _eDataField 0150                        ?_putch 0070  
                      _ANSELH 0189                        _RFDOUT 0D3E                        _OPINIT 0CC1  
                      _SSPADD 0093                        _STBOUT 0966                        _STATUS 0003  
                      _SSPCON 0014                        _SSPBUF 0013                        __NOP@i 0070  
            __end_of_fcscheck 00AC                     ??___awdiv 0074                        _dfcshi 006C  
                   ??___lldiv 0078                        _dfcslo 006D                        _efcshi 006E  
                      _efcslo 006F                        _getbit 0A9B            __size_of_Reset_EPS 0023  
                      _estuff 00E5              ___awdiv@quotient 0077                    _dPacketnum 0066  
                      _printf 0A54                     ??_getdata 0076                   RFDOUT@i_470 003B  
                 RFDOUT@i_471 003F              __end_of_waitFlag 07B3    EEPROM_Write@EEPROM_address 0078  
     __end_of__initialization 07FC       EEPROM_Write@low_address 0073                   ?_Init_I2C_M 0020  
                 _Init_SERIAL 0851         __size_of_EEPROM_Write 005D                 __end_of_H_OUT 0A0E  
               __end_of_OUTFQ 0327                 __end_of_L_OUT 0A54                 L_OUT@fmcwtxrx 0072  
              __pcstackCOMMON 0070                  __pidataBANK1 0883                  __pidataBANK2 086A  
                __pidataBANK3 08BA                 __end_of_putch 17E7                       ??_H_OUT 0074  
                     ??_OUTFQ 0020                       ??_L_OUT 0074                       ??_putch 0070  
                _EEPROM_Write 0B40                    __pbssBANK0 0066                    __pbssBANK1 00DC  
                  __pbssBANK2 0110                    __pbssBANK3 0190             __end_of_Reset_EPS 002A  
                   ?_Init_MPU 0070                       ?_RFDOUT 0079                       ?_OPINIT 0074  
                ?_NM_waddress 0071                       ?_STBOUT 0072                       RFDOUT@i 003D  
                  __pmaintext 0E1F                    _ebitstatus 00E1                       ?_getbit 0070  
                     ?_printf 0071           __size_of_Init_I2C_M 0034                     OUTFQ@Nprg 007B  
                   ?_fcscheck 0070                       _SSPCON2 0091                       _SSPSTAT 0094  
                  __stringtab 0800                    ??_Init_MPU 0070               __size_of_RFDOUT 00E1  
             __size_of_OPINIT 007D               __size_of_STBOUT 002E                     ?_waitFlag 0070  
                     _dPacket 0190                       _ePacket 00DC                       ___awdiv 0AE7  
                     ___lldiv 0B9D               __size_of_getbit 004C                   waitFlag@buf 003C  
                     __ptext1 0A54                       __ptext2 0007                       __ptext3 0C5C  
                     __ptext4 0327                       __ptext5 0BFB                       __ptext6 0A9B  
                     __ptext7 002A                       __ptext8 082A                       __ptext9 17DF  
             __size_of_printf 0047                       _getdata 0BFB            _ReceivePacket_data 0C5C  
    __size_of_I2C_Master_Wait 0009      __size_of_I2C_Master_Stop 0007                    ??_fcscheck 0072  
         ?_ReceivePacket_data 0070                       getbit@i 0074                       clrloop0 17E8  
        end_of_initialization 07FC                  RFDOUT@Nref_b 0023                     _FMRX_Nref 00C4  
                   _FMRX_Nprg 01E0                     _FMTX_Nref 00C6                     _FMTX_Nprg 00D2  
                   _CWTX_Nref 00C2                     _CWTX_Nprg 00C8                   OUTFQ@Nprg_b 0030  
   __size_of_I2C_Master_Start 0007     __size_of_I2C_Master_Write 0008               ___lldiv@divisor 0070  
             ___lldiv@counter 007D                    ??_waitFlag 0076          ??_ReceivePacket_data 007A  
                     printf@c 0077                       printf@f 0076                    fcscheck@bt 0074  
              OPINIT@fmcwtxrx 0074                     _PORTAbits 0005                     _PORTCbits 0007  
                   _PORTDbits 0008                     _PORTEbits 0009                    getdata@buf 0026  
                ??_Init_I2C_M 0024                  ?_Init_SERIAL 0070                __end_of_RFDOUT 0E1F  
              __end_of_OPINIT 0D3E                __end_of_STBOUT 0994          __size_of_NM_waddress 0012  
              __end_of_getbit 0AE7                __end_of_printf 0A9B           start_initialization 07B3  
          __end_of_Init_I2C_M 09C8                      ??_RFDOUT 0020                      ??_OPINIT 0076  
           ??_I2C_Master_Wait 0070             ??_I2C_Master_Stop 0070                      ??_STBOUT 0074  
           __size_of_Init_MPU 001D                     _Reset_EPS 0007             getdata@dbitstatus 0024  
                  init_fetch0 17EF                      ??_getbit 0072                   __pdataBANK1 00C2  
                 __pdataBANK2 0150                   __pdataBANK3 01C2                    RFDOUT@Nref 007B  
                    ??_printf 0073           __end_of_commandSize 0808      NM_waddress@whigh_address 0071  
                   ___latbits 0002                 __pcstackBANK0 0020                 __pcstackBANK1 00A0  
                    FMRX@Nref 005C                      FMRX@Nprg 005E                      FMTX@Nref 005C  
                    FMTX@Nprg 005E                      FMRX@fmrx 0060                      FMTX@fmtx 0060  
                    CWTX@Nref 005C                      CWTX@Nprg 005E             __size_of_fcscheck 0082  
               waitFlag@j_111 002A                 waitFlag@j_120 0034                 waitFlag@j_113 002C  
               waitFlag@j_105 0024                 waitFlag@j_122 0036                 waitFlag@j_114 002E  
               waitFlag@j_107 0026                 waitFlag@j_124 0038                 waitFlag@j_116 0030  
               waitFlag@j_109 0028                 waitFlag@j_118 0032                      CWTX@cwtx 0060  
            _I2C_Master_Start 17C9                    ?_Reset_EPS 0070              _I2C_Master_Write 17D7  
     getdata@bufstore_counter 0020                      ?___awdiv 0070                      ?___lldiv 0070  
           __size_of_waitFlag 048C                     __pstrings 0800                      ?_getdata 0070  
              __size_of_H_OUT 0046                __size_of_OUTFQ 027B                __size_of_L_OUT 0046  
              __size_of_putch 0008                 H_OUT@fmcwtxrx 0072                     clear_ram0 17E7  
                  OUTFQ@i_461 0058                    OUTFQ@i_459 0052                     _rcv_state 006A  
        __size_of_Init_SERIAL 0019                    OUTFQ@count 0054                   _commandSize 0806  
                   fcscheck@i 0075                     main@F2010 01D6                     main@F2006 01C2  
                   main@F2008 01CC                   __stringbase 0805                     main@dData 00C1  
                  printf@flag 0074                      _Init_MPU 089D                   ??_Reset_EPS 0070  
               fcscheck@i_136 0077   __size_of_ReceivePacket_data 0065              __size_of___awdiv 0059  
            __size_of___lldiv 005E            __end_of__stringtab 0806                    _EEPROMData 0110  
            __size_of_getdata 0061               _I2C_Master_Wait 0821               _I2C_Master_Stop 17D0  
              RFDOUT@fmcwtxrx 0079                      _efcsflag 00E3                      _fcscheck 002A  
                    __ptext10 0851                      __ptext11 089D                      __ptext20 0821  
                    __ptext12 0994                      __ptext21 08E2                      __ptext13 0B9D  
                    __ptext22 0D3E                      __ptext14 093A                      __ptext23 00AC  
                    __ptext15 090E                      __ptext24 0AE7                      __ptext16 0B40  
                    __ptext25 0CC1                      __ptext17 17D7                      __ptext26 0966  
                    __ptext18 17D0                      __ptext27 0A0E                      __ptext19 17C9  
                    __ptext28 09C8                      __ptext29 083C             __CFG_BOR4V$BOR21V 0000  
               ?_EEPROM_Write 0072                 __size_of_FMRX 002C                 __size_of_FMTX 002C  
               __size_of_CWTX 002C                 __size_of__NOP 0015                 ??_NM_waddress 0073  
                   waitFlag@i 0020                     waitFlag@j 0022                 __size_of_main 01E1  
              STBOUT@fmcwtxrx 0072                      _waitFlag 0327      NM_waddress@NM_wad_header 0073  
               OUTFQ@fmcwtxrx 0079      __end_of_I2C_Master_Start 17D0                     putch@byte 0070  
    __end_of_I2C_Master_Write 17DF                      init_ram0 17F3                  fcscheck@byte 0079  
              ??_EEPROM_Write 0075            waitFlag@flag_judge 003A              ___lldiv@dividend 0074  
                   stringcode 0800                 main@FMRX_Nprg 00B4             main@NM_wad_header 00BE  
               main@FMTX_Nprg 00A0           __end_of_NM_waddress 083C                      printf@ap 0075  
               main@CWTX_Nprg 00AA       __end_of_I2C_Master_Wait 082A       __end_of_I2C_Master_Stop 17D7  
            ___lldiv@quotient 0079             I2C_Master_Write@d 0070           EEPROM_Write@Address 0079  
                    stringdir 0800                      stringtab 0800           ReceivePacket_data@i 003F  
     NM_waddress@wlow_address 0072  
