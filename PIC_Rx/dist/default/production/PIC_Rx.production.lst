

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Wed Nov 22 17:30:57 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	dabs	1,0x7E,2
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  008F                     	;# 
    98  0090                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  0105                     	;# 
   117  0107                     	;# 
   118  0108                     	;# 
   119  0109                     	;# 
   120  010C                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  010F                     	;# 
   125  0185                     	;# 
   126  0187                     	;# 
   127  0188                     	;# 
   128  0189                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  0000                     	;# 
   132  0001                     	;# 
   133  0002                     	;# 
   134  0003                     	;# 
   135  0004                     	;# 
   136  0005                     	;# 
   137  0006                     	;# 
   138  0007                     	;# 
   139  0008                     	;# 
   140  0009                     	;# 
   141  000A                     	;# 
   142  000B                     	;# 
   143  000C                     	;# 
   144  000D                     	;# 
   145  000E                     	;# 
   146  000E                     	;# 
   147  000F                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0013                     	;# 
   152  0014                     	;# 
   153  0015                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0017                     	;# 
   157  0018                     	;# 
   158  0019                     	;# 
   159  001A                     	;# 
   160  001B                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001D                     	;# 
   164  001E                     	;# 
   165  001F                     	;# 
   166  0081                     	;# 
   167  0085                     	;# 
   168  0086                     	;# 
   169  0087                     	;# 
   170  0088                     	;# 
   171  0089                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  008F                     	;# 
   176  0090                     	;# 
   177  0091                     	;# 
   178  0092                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0094                     	;# 
   183  0095                     	;# 
   184  0096                     	;# 
   185  0097                     	;# 
   186  0098                     	;# 
   187  0099                     	;# 
   188  009A                     	;# 
   189  009B                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  009F                     	;# 
   194  0105                     	;# 
   195  0107                     	;# 
   196  0108                     	;# 
   197  0109                     	;# 
   198  010C                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  010F                     	;# 
   203  0185                     	;# 
   204  0187                     	;# 
   205  0188                     	;# 
   206  0189                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  0000                     	;# 
   210  0001                     	;# 
   211  0002                     	;# 
   212  0003                     	;# 
   213  0004                     	;# 
   214  0005                     	;# 
   215  0006                     	;# 
   216  0007                     	;# 
   217  0008                     	;# 
   218  0009                     	;# 
   219  000A                     	;# 
   220  000B                     	;# 
   221  000C                     	;# 
   222  000D                     	;# 
   223  000E                     	;# 
   224  000E                     	;# 
   225  000F                     	;# 
   226  0010                     	;# 
   227  0011                     	;# 
   228  0012                     	;# 
   229  0013                     	;# 
   230  0014                     	;# 
   231  0015                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0017                     	;# 
   235  0018                     	;# 
   236  0019                     	;# 
   237  001A                     	;# 
   238  001B                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  001D                     	;# 
   242  001E                     	;# 
   243  001F                     	;# 
   244  0081                     	;# 
   245  0085                     	;# 
   246  0086                     	;# 
   247  0087                     	;# 
   248  0088                     	;# 
   249  0089                     	;# 
   250  008C                     	;# 
   251  008D                     	;# 
   252  008E                     	;# 
   253  008F                     	;# 
   254  0090                     	;# 
   255  0091                     	;# 
   256  0092                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0093                     	;# 
   260  0094                     	;# 
   261  0095                     	;# 
   262  0096                     	;# 
   263  0097                     	;# 
   264  0098                     	;# 
   265  0099                     	;# 
   266  009A                     	;# 
   267  009B                     	;# 
   268  009C                     	;# 
   269  009D                     	;# 
   270  009E                     	;# 
   271  009F                     	;# 
   272  0105                     	;# 
   273  0107                     	;# 
   274  0108                     	;# 
   275  0109                     	;# 
   276  010C                     	;# 
   277  010C                     	;# 
   278  010D                     	;# 
   279  010E                     	;# 
   280  010F                     	;# 
   281  0185                     	;# 
   282  0187                     	;# 
   283  0188                     	;# 
   284  0189                     	;# 
   285  018C                     	;# 
   286  018D                     	;# 
   287  0000                     	;# 
   288  0001                     	;# 
   289  0002                     	;# 
   290  0003                     	;# 
   291  0004                     	;# 
   292  0005                     	;# 
   293  0006                     	;# 
   294  0007                     	;# 
   295  0008                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000D                     	;# 
   301  000E                     	;# 
   302  000E                     	;# 
   303  000F                     	;# 
   304  0010                     	;# 
   305  0011                     	;# 
   306  0012                     	;# 
   307  0013                     	;# 
   308  0014                     	;# 
   309  0015                     	;# 
   310  0015                     	;# 
   311  0016                     	;# 
   312  0017                     	;# 
   313  0018                     	;# 
   314  0019                     	;# 
   315  001A                     	;# 
   316  001B                     	;# 
   317  001B                     	;# 
   318  001C                     	;# 
   319  001D                     	;# 
   320  001E                     	;# 
   321  001F                     	;# 
   322  0081                     	;# 
   323  0085                     	;# 
   324  0086                     	;# 
   325  0087                     	;# 
   326  0088                     	;# 
   327  0089                     	;# 
   328  008C                     	;# 
   329  008D                     	;# 
   330  008E                     	;# 
   331  008F                     	;# 
   332  0090                     	;# 
   333  0091                     	;# 
   334  0092                     	;# 
   335  0093                     	;# 
   336  0093                     	;# 
   337  0093                     	;# 
   338  0094                     	;# 
   339  0095                     	;# 
   340  0096                     	;# 
   341  0097                     	;# 
   342  0098                     	;# 
   343  0099                     	;# 
   344  009A                     	;# 
   345  009B                     	;# 
   346  009C                     	;# 
   347  009D                     	;# 
   348  009E                     	;# 
   349  009F                     	;# 
   350  0105                     	;# 
   351  0107                     	;# 
   352  0108                     	;# 
   353  0109                     	;# 
   354  010C                     	;# 
   355  010C                     	;# 
   356  010D                     	;# 
   357  010E                     	;# 
   358  010F                     	;# 
   359  0185                     	;# 
   360  0187                     	;# 
   361  0188                     	;# 
   362  0189                     	;# 
   363  018C                     	;# 
   364  018D                     	;# 
   365  0000                     	;# 
   366  0001                     	;# 
   367  0002                     	;# 
   368  0003                     	;# 
   369  0004                     	;# 
   370  0005                     	;# 
   371  0006                     	;# 
   372  0007                     	;# 
   373  0008                     	;# 
   374  0009                     	;# 
   375  000A                     	;# 
   376  000B                     	;# 
   377  000C                     	;# 
   378  000D                     	;# 
   379  000E                     	;# 
   380  000E                     	;# 
   381  000F                     	;# 
   382  0010                     	;# 
   383  0011                     	;# 
   384  0012                     	;# 
   385  0013                     	;# 
   386  0014                     	;# 
   387  0015                     	;# 
   388  0015                     	;# 
   389  0016                     	;# 
   390  0017                     	;# 
   391  0018                     	;# 
   392  0019                     	;# 
   393  001A                     	;# 
   394  001B                     	;# 
   395  001B                     	;# 
   396  001C                     	;# 
   397  001D                     	;# 
   398  001E                     	;# 
   399  001F                     	;# 
   400  0081                     	;# 
   401  0085                     	;# 
   402  0086                     	;# 
   403  0087                     	;# 
   404  0088                     	;# 
   405  0089                     	;# 
   406  008C                     	;# 
   407  008D                     	;# 
   408  008E                     	;# 
   409  008F                     	;# 
   410  0090                     	;# 
   411  0091                     	;# 
   412  0092                     	;# 
   413  0093                     	;# 
   414  0093                     	;# 
   415  0093                     	;# 
   416  0094                     	;# 
   417  0095                     	;# 
   418  0096                     	;# 
   419  0097                     	;# 
   420  0098                     	;# 
   421  0099                     	;# 
   422  009A                     	;# 
   423  009B                     	;# 
   424  009C                     	;# 
   425  009D                     	;# 
   426  009E                     	;# 
   427  009F                     	;# 
   428  0105                     	;# 
   429  0107                     	;# 
   430  0108                     	;# 
   431  0109                     	;# 
   432  010C                     	;# 
   433  010C                     	;# 
   434  010D                     	;# 
   435  010E                     	;# 
   436  010F                     	;# 
   437  0185                     	;# 
   438  0187                     	;# 
   439  0188                     	;# 
   440  0189                     	;# 
   441  018C                     	;# 
   442  018D                     	;# 
   443  0000                     	;# 
   444  0001                     	;# 
   445  0002                     	;# 
   446  0003                     	;# 
   447  0004                     	;# 
   448  0005                     	;# 
   449  0006                     	;# 
   450  0007                     	;# 
   451  0008                     	;# 
   452  0009                     	;# 
   453  000A                     	;# 
   454  000B                     	;# 
   455  000C                     	;# 
   456  000D                     	;# 
   457  000E                     	;# 
   458  000E                     	;# 
   459  000F                     	;# 
   460  0010                     	;# 
   461  0011                     	;# 
   462  0012                     	;# 
   463  0013                     	;# 
   464  0014                     	;# 
   465  0015                     	;# 
   466  0015                     	;# 
   467  0016                     	;# 
   468  0017                     	;# 
   469  0018                     	;# 
   470  0019                     	;# 
   471  001A                     	;# 
   472  001B                     	;# 
   473  001B                     	;# 
   474  001C                     	;# 
   475  001D                     	;# 
   476  001E                     	;# 
   477  001F                     	;# 
   478  0081                     	;# 
   479  0085                     	;# 
   480  0086                     	;# 
   481  0087                     	;# 
   482  0088                     	;# 
   483  0089                     	;# 
   484  008C                     	;# 
   485  008D                     	;# 
   486  008E                     	;# 
   487  008F                     	;# 
   488  0090                     	;# 
   489  0091                     	;# 
   490  0092                     	;# 
   491  0093                     	;# 
   492  0093                     	;# 
   493  0093                     	;# 
   494  0094                     	;# 
   495  0095                     	;# 
   496  0096                     	;# 
   497  0097                     	;# 
   498  0098                     	;# 
   499  0099                     	;# 
   500  009A                     	;# 
   501  009B                     	;# 
   502  009C                     	;# 
   503  009D                     	;# 
   504  009E                     	;# 
   505  009F                     	;# 
   506  0105                     	;# 
   507  0107                     	;# 
   508  0108                     	;# 
   509  0109                     	;# 
   510  010C                     	;# 
   511  010C                     	;# 
   512  010D                     	;# 
   513  010E                     	;# 
   514  010F                     	;# 
   515  0185                     	;# 
   516  0187                     	;# 
   517  0188                     	;# 
   518  0189                     	;# 
   519  018C                     	;# 
   520  018D                     	;# 
   521  0000                     	;# 
   522  0001                     	;# 
   523  0002                     	;# 
   524  0003                     	;# 
   525  0004                     	;# 
   526  0005                     	;# 
   527  0006                     	;# 
   528  0007                     	;# 
   529  0008                     	;# 
   530  0009                     	;# 
   531  000A                     	;# 
   532  000B                     	;# 
   533  000C                     	;# 
   534  000D                     	;# 
   535  000E                     	;# 
   536  000E                     	;# 
   537  000F                     	;# 
   538  0010                     	;# 
   539  0011                     	;# 
   540  0012                     	;# 
   541  0013                     	;# 
   542  0014                     	;# 
   543  0015                     	;# 
   544  0015                     	;# 
   545  0016                     	;# 
   546  0017                     	;# 
   547  0018                     	;# 
   548  0019                     	;# 
   549  001A                     	;# 
   550  001B                     	;# 
   551  001B                     	;# 
   552  001C                     	;# 
   553  001D                     	;# 
   554  001E                     	;# 
   555  001F                     	;# 
   556  0081                     	;# 
   557  0085                     	;# 
   558  0086                     	;# 
   559  0087                     	;# 
   560  0088                     	;# 
   561  0089                     	;# 
   562  008C                     	;# 
   563  008D                     	;# 
   564  008E                     	;# 
   565  008F                     	;# 
   566  0090                     	;# 
   567  0091                     	;# 
   568  0092                     	;# 
   569  0093                     	;# 
   570  0093                     	;# 
   571  0093                     	;# 
   572  0094                     	;# 
   573  0095                     	;# 
   574  0096                     	;# 
   575  0097                     	;# 
   576  0098                     	;# 
   577  0099                     	;# 
   578  009A                     	;# 
   579  009B                     	;# 
   580  009C                     	;# 
   581  009D                     	;# 
   582  009E                     	;# 
   583  009F                     	;# 
   584  0105                     	;# 
   585  0107                     	;# 
   586  0108                     	;# 
   587  0109                     	;# 
   588  010C                     	;# 
   589  010C                     	;# 
   590  010D                     	;# 
   591  010E                     	;# 
   592  010F                     	;# 
   593  0185                     	;# 
   594  0187                     	;# 
   595  0188                     	;# 
   596  0189                     	;# 
   597  018C                     	;# 
   598  018D                     	;# 
   599  0000                     	;# 
   600  0001                     	;# 
   601  0002                     	;# 
   602  0003                     	;# 
   603  0004                     	;# 
   604  0005                     	;# 
   605  0006                     	;# 
   606  0007                     	;# 
   607  0008                     	;# 
   608  0009                     	;# 
   609  000A                     	;# 
   610  000B                     	;# 
   611  000C                     	;# 
   612  000D                     	;# 
   613  000E                     	;# 
   614  000E                     	;# 
   615  000F                     	;# 
   616  0010                     	;# 
   617  0011                     	;# 
   618  0012                     	;# 
   619  0013                     	;# 
   620  0014                     	;# 
   621  0015                     	;# 
   622  0015                     	;# 
   623  0016                     	;# 
   624  0017                     	;# 
   625  0018                     	;# 
   626  0019                     	;# 
   627  001A                     	;# 
   628  001B                     	;# 
   629  001B                     	;# 
   630  001C                     	;# 
   631  001D                     	;# 
   632  001E                     	;# 
   633  001F                     	;# 
   634  0081                     	;# 
   635  0085                     	;# 
   636  0086                     	;# 
   637  0087                     	;# 
   638  0088                     	;# 
   639  0089                     	;# 
   640  008C                     	;# 
   641  008D                     	;# 
   642  008E                     	;# 
   643  008F                     	;# 
   644  0090                     	;# 
   645  0091                     	;# 
   646  0092                     	;# 
   647  0093                     	;# 
   648  0093                     	;# 
   649  0093                     	;# 
   650  0094                     	;# 
   651  0095                     	;# 
   652  0096                     	;# 
   653  0097                     	;# 
   654  0098                     	;# 
   655  0099                     	;# 
   656  009A                     	;# 
   657  009B                     	;# 
   658  009C                     	;# 
   659  009D                     	;# 
   660  009E                     	;# 
   661  009F                     	;# 
   662  0105                     	;# 
   663  0107                     	;# 
   664  0108                     	;# 
   665  0109                     	;# 
   666  010C                     	;# 
   667  010C                     	;# 
   668  010D                     	;# 
   669  010E                     	;# 
   670  010F                     	;# 
   671  0185                     	;# 
   672  0187                     	;# 
   673  0188                     	;# 
   674  0189                     	;# 
   675  018C                     	;# 
   676  018D                     	;# 
   677  0000                     	;# 
   678  0001                     	;# 
   679  0002                     	;# 
   680  0003                     	;# 
   681  0004                     	;# 
   682  0005                     	;# 
   683  0006                     	;# 
   684  0007                     	;# 
   685  0008                     	;# 
   686  0009                     	;# 
   687  000A                     	;# 
   688  000B                     	;# 
   689  000C                     	;# 
   690  000D                     	;# 
   691  000E                     	;# 
   692  000E                     	;# 
   693  000F                     	;# 
   694  0010                     	;# 
   695  0011                     	;# 
   696  0012                     	;# 
   697  0013                     	;# 
   698  0014                     	;# 
   699  0015                     	;# 
   700  0015                     	;# 
   701  0016                     	;# 
   702  0017                     	;# 
   703  0018                     	;# 
   704  0019                     	;# 
   705  001A                     	;# 
   706  001B                     	;# 
   707  001B                     	;# 
   708  001C                     	;# 
   709  001D                     	;# 
   710  001E                     	;# 
   711  001F                     	;# 
   712  0081                     	;# 
   713  0085                     	;# 
   714  0086                     	;# 
   715  0087                     	;# 
   716  0088                     	;# 
   717  0089                     	;# 
   718  008C                     	;# 
   719  008D                     	;# 
   720  008E                     	;# 
   721  008F                     	;# 
   722  0090                     	;# 
   723  0091                     	;# 
   724  0092                     	;# 
   725  0093                     	;# 
   726  0093                     	;# 
   727  0093                     	;# 
   728  0094                     	;# 
   729  0095                     	;# 
   730  0096                     	;# 
   731  0097                     	;# 
   732  0098                     	;# 
   733  0099                     	;# 
   734  009A                     	;# 
   735  009B                     	;# 
   736  009C                     	;# 
   737  009D                     	;# 
   738  009E                     	;# 
   739  009F                     	;# 
   740  0105                     	;# 
   741  0107                     	;# 
   742  0108                     	;# 
   743  0109                     	;# 
   744  010C                     	;# 
   745  010C                     	;# 
   746  010D                     	;# 
   747  010E                     	;# 
   748  010F                     	;# 
   749  0185                     	;# 
   750  0187                     	;# 
   751  0188                     	;# 
   752  0189                     	;# 
   753  018C                     	;# 
   754  018D                     	;# 
   755                           
   756                           	psect	idataBANK1
   757  0003                     __pidataBANK1:	
   758                           
   759                           ;initializer for main@F2005
   760  0003  3445               	retlw	69
   761  0004  3441               	retlw	65
   762  0005  3400               	retlw	0
   763                           
   764                           ;initializer for _CWTX_Nref
   765  0006  34A0               	retlw	160
   766  0007  3400               	retlw	0
   767                           
   768                           ;initializer for _FMRX_Nref
   769  0008  3400               	retlw	0
   770  0009  340A               	retlw	10
   771                           
   772                           ;initializer for _FMTX_Nref
   773  000A  3400               	retlw	0
   774  000B  340A               	retlw	10
   775                           
   776                           ;initializer for _CWTX_Nprg
   777  000C  3400               	retlw	0
   778  000D  3400               	retlw	0
   779  000E  3401               	retlw	1
   780  000F  3400               	retlw	0
   781  0010  3407               	retlw	7
   782  0011  3400               	retlw	0
   783  0012  3404               	retlw	4
   784  0013  3400               	retlw	0
   785  0014  3407               	retlw	7
   786  0015  3400               	retlw	0
   787                           
   788                           ;initializer for _FMTX_Nprg
   789  0016  3408               	retlw	8
   790  0017  3400               	retlw	0
   791  0018  3407               	retlw	7
   792  0019  3400               	retlw	0
   793  001A  3403               	retlw	3
   794  001B  3400               	retlw	0
   795  001C  3400               	retlw	0
   796  001D  3400               	retlw	0
   797  001E  3400               	retlw	0
   798  001F  3400               	retlw	0
   799                           
   800                           	psect	idataBANK2
   801  0831                     __pidataBANK2:	
   802                           
   803                           ;initializer for _eDataField
   804  0831  3448               	retlw	72
   805  0832  3465               	retlw	101
   806  0833  346C               	retlw	108
   807  0834  346C               	retlw	108
   808  0835  346F               	retlw	111
   809  0836  3421               	retlw	33
   810  0837  3420               	retlw	32
   811  0838  3449               	retlw	73
   812  0839  3427               	retlw	39
   813  083A  346D               	retlw	109
   814  083B  3420               	retlw	32
   815  083C  344F               	retlw	79
   816  083D  3472               	retlw	114
   817  083E  3469               	retlw	105
   818  083F  3467               	retlw	103
   819  0840  3461               	retlw	97
   820  0841  346D               	retlw	109
   821  0842  3469               	retlw	105
   822  0843  3453               	retlw	83
   823  0844  3461               	retlw	97
   824  0845  3474               	retlw	116
   825  0846  3431               	retlw	49
   826  0847  3421               	retlw	33
   827  0848  3421               	retlw	33
   828  0849  3400               	retlw	0
   829                           
   830                           	psect	idataBANK3
   831  088A                     __pidataBANK3:	
   832                           
   833                           ;initializer for main@F2010
   834  088A  3408               	retlw	8
   835  088B  3400               	retlw	0
   836  088C  3407               	retlw	7
   837  088D  3400               	retlw	0
   838  088E  3403               	retlw	3
   839  088F  3400               	retlw	0
   840  0890  3400               	retlw	0
   841  0891  3400               	retlw	0
   842  0892  3400               	retlw	0
   843  0893  3400               	retlw	0
   844                           
   845                           ;initializer for main@F2012
   846  0894  3400               	retlw	0
   847  0895  3400               	retlw	0
   848  0896  3401               	retlw	1
   849  0897  3400               	retlw	0
   850  0898  3407               	retlw	7
   851  0899  3400               	retlw	0
   852  089A  3404               	retlw	4
   853  089B  3400               	retlw	0
   854  089C  3407               	retlw	7
   855  089D  3400               	retlw	0
   856                           
   857                           ;initializer for main@F2014
   858  089E  3402               	retlw	2
   859  089F  3400               	retlw	0
   860  08A0  3404               	retlw	4
   861  08A1  3400               	retlw	0
   862  08A2  3408               	retlw	8
   863  08A3  3400               	retlw	0
   864  08A4  3408               	retlw	8
   865  08A5  3400               	retlw	0
   866  08A6  3407               	retlw	7
   867  08A7  3400               	retlw	0
   868                           
   869                           ;initializer for _FMRX_Nprg
   870  08A8  3402               	retlw	2
   871  08A9  3400               	retlw	0
   872  08AA  3404               	retlw	4
   873  08AB  3400               	retlw	0
   874  08AC  3408               	retlw	8
   875  08AD  3400               	retlw	0
   876  08AE  3408               	retlw	8
   877  08AF  3400               	retlw	0
   878  08B0  3407               	retlw	7
   879  08B1  3400               	retlw	0
   880  0005                     _PORTA	set	5
   881  0005                     _PORTAbits	set	5
   882  0006                     _PORTB	set	6
   883  0007                     _PORTC	set	7
   884  0007                     _PORTCbits	set	7
   885  0008                     _PORTD	set	8
   886  0008                     _PORTDbits	set	8
   887  0009                     _PORTE	set	9
   888  0009                     _PORTEbits	set	9
   889  001A                     _RCREG	set	26
   890  0013                     _SSPBUF	set	19
   891  0014                     _SSPCON	set	20
   892  0003                     _STATUS	set	3
   893  0019                     _TXREG	set	25
   894  00C4                     _CREN	set	196
   895  0029                     _RA1	set	41
   896  0032                     _RB2	set	50
   897  0034                     _RB4	set	52
   898  0035                     _RB5	set	53
   899  003A                     _RC2	set	58
   900  0065                     _RCIF	set	101
   901  00C6                     _RX9	set	198
   902  00C7                     _SPEN	set	199
   903  00C5                     _SREN	set	197
   904  0064                     _TXIF	set	100
   905  0099                     _SPBRG	set	153
   906  0093                     _SSPADD	set	147
   907  0091                     _SSPCON2	set	145
   908  0094                     _SSPSTAT	set	148
   909  0085                     _TRISA	set	133
   910  0086                     _TRISB	set	134
   911  0087                     _TRISC	set	135
   912  0088                     _TRISD	set	136
   913  0089                     _TRISE	set	137
   914  048D                     _ACKDT	set	1165
   915  048C                     _ACKEN	set	1164
   916  04C2                     _BRGH	set	1218
   917  048A                     _PEN	set	1162
   918  048B                     _RCEN	set	1163
   919  0465                     _RCIE	set	1125
   920  0489                     _RSEN	set	1161
   921  0488                     _SEN	set	1160
   922  04C4                     _SYNC	set	1220
   923  04C6                     _TX9	set	1222
   924  04C5                     _TXEN	set	1221
   925  0464                     _TXIE	set	1124
   926  0188                     _ANSEL	set	392
   927  0189                     _ANSELH	set	393
   928                           
   929                           	psect	strings
   930  0800                     __pstrings:	
   931  0800                     stringtab:	
   932  0800                     __stringtab:	
   933                           
   934                           ;	String table - string pointers are 1 byte each
   935  0800  1BFF               	btfsc	btemp+1,7
   936  0801  280A               	ljmp	stringcode
   937  0802  1383               	bcf	3,7
   938  0803  187F               	btfsc	btemp+1,0
   939  0804  1783               	bsf	3,7
   940  0805  0800               	movf	0,w
   941  0806  0A84               	incf	4,f
   942  0807  1903               	skipnz
   943  0808  0AFF               	incf	btemp+1,f
   944  0809  0008               	return
   945  080A                     stringcode:	
   946  080A                     stringdir:	
   947  080A  3008               	movlw	high stringdir
   948  080B  008A               	movwf	10
   949  080C  0804               	movf	4,w
   950  080D  0A84               	incf	4,f
   951  080E  0782               	addwf	2,f
   952  080F                     __stringbase:	
   953  080F  3400               	retlw	0
   954  0810                     __end_of__stringtab:	
   955  0810                     STR_16:	
   956  0810  3428               	retlw	40	;'('
   957  0811  346E               	retlw	110	;'n'
   958  0812  3475               	retlw	117	;'u'
   959  0813  346C               	retlw	108	;'l'
   960  0814  346C               	retlw	108	;'l'
   961  0815  3429               	retlw	41	;')'
   962  0816  3400               	retlw	0
   963  0817                     STR_7:	
   964  0817  344A               	retlw	74	;'J'
   965  0818  3451               	retlw	81	;'Q'
   966  0819  3431               	retlw	49	;'1'
   967  081A  345A               	retlw	90	;'Z'
   968  081B  3448               	retlw	72	;'H'
   969  081C  3458               	retlw	88	;'X'
   970  081D  3400               	retlw	0
   971  081E                     STR_1:	
   972  081E  344A               	retlw	74	;'J'
   973  081F  3451               	retlw	81	;'Q'
   974  0820  3431               	retlw	49	;'1'
   975  0821  3459               	retlw	89	;'Y'
   976  0822  3443               	retlw	67	;'C'
   977  0823  345A               	retlw	90	;'Z'
   978  0824  3400               	retlw	0
   979  0825                     STR_15:	
   980  0825  3425               	retlw	37	;'%'
   981  0826  3473               	retlw	115	;'s'
   982  0827  3425               	retlw	37	;'%'
   983  0828  3463               	retlw	99	;'c'
   984  0829  3400               	retlw	0
   985  0817                     
   986                           ; #config settings
   987  0000                     
   988                           	psect	cinit
   989  07B3                     start_initialization:	
   990  07B3                     __initialization:	
   991                           
   992                           ; Initialize objects allocated to BANK3
   993  07B3  1783               	bsf	3,7	;select IRP bank2
   994  07B4  30EA               	movlw	low (__pdataBANK3+40)
   995  07B5  00FD               	movwf	btemp+-1
   996  07B6  3008               	movlw	high __pidataBANK3
   997  07B7  00FE               	movwf	btemp
   998  07B8  308A               	movlw	low __pidataBANK3
   999  07B9  00FF               	movwf	btemp+1
  1000  07BA  30C2               	movlw	low __pdataBANK3
  1001  07BB  0084               	movwf	4
  1002  07BC  160A  118A  27B3  120A  118A  	fcall	init_ram0
  1003                           
  1004                           ; Initialize objects allocated to BANK2
  1005  07C1  3069               	movlw	low (__pdataBANK2+25)
  1006  07C2  00FD               	movwf	btemp+-1
  1007  07C3  3008               	movlw	high __pidataBANK2
  1008  07C4  00FE               	movwf	btemp
  1009  07C5  3031               	movlw	low __pidataBANK2
  1010  07C6  00FF               	movwf	btemp+1
  1011  07C7  3050               	movlw	low __pdataBANK2
  1012  07C8  0084               	movwf	4
  1013  07C9  160A  118A  27B3  120A  118A  	fcall	init_ram0
  1014                           
  1015                           ; Initialize objects allocated to BANK1
  1016  07CE  1383               	bcf	3,7	;select IRP bank0
  1017  07CF  30E1               	movlw	low (__pdataBANK1+29)
  1018  07D0  00FD               	movwf	btemp+-1
  1019  07D1  3000               	movlw	high __pidataBANK1
  1020  07D2  00FE               	movwf	btemp
  1021  07D3  3003               	movlw	low __pidataBANK1
  1022  07D4  00FF               	movwf	btemp+1
  1023  07D5  30C4               	movlw	low __pdataBANK1
  1024  07D6  0084               	movwf	4
  1025  07D7  160A  118A  27B3  120A  118A  	fcall	init_ram0
  1026                           
  1027                           ; Clear objects allocated to BANK3
  1028  07DC  1783               	bsf	3,7	;select IRP bank2
  1029  07DD  3090               	movlw	low __pbssBANK3
  1030  07DE  0084               	movwf	4
  1031  07DF  30C2               	movlw	low (__pbssBANK3+50)
  1032  07E0  160A  118A  279E  120A  118A  	fcall	clear_ram0
  1033                           
  1034                           ; Clear objects allocated to BANK2
  1035  07E5  3010               	movlw	low __pbssBANK2
  1036  07E6  0084               	movwf	4
  1037  07E7  3050               	movlw	low (__pbssBANK2+64)
  1038  07E8  160A  118A  279E  120A  118A  	fcall	clear_ram0
  1039                           
  1040                           ; Clear objects allocated to BANK1
  1041  07ED  1383               	bcf	3,7	;select IRP bank0
  1042  07EE  30E1               	movlw	low __pbssBANK1
  1043  07EF  0084               	movwf	4
  1044  07F0  30EE               	movlw	low (__pbssBANK1+13)
  1045  07F1  160A  118A  279E  120A  118A  	fcall	clear_ram0
  1046                           
  1047                           ; Clear objects allocated to BANK0
  1048  07F6  3066               	movlw	low __pbssBANK0
  1049  07F7  0084               	movwf	4
  1050  07F8  3070               	movlw	low (__pbssBANK0+10)
  1051  07F9  160A  118A  279E   	fcall	clear_ram0
  1052  07FC                     end_of_initialization:	
  1053                           ;End of C runtime variable initialization code
  1054                           
  1055  07FC                     __end_of__initialization:	
  1056  07FC  0183               	clrf	3
  1057  07FD  120A  158A  2E40   	ljmp	_main	;jump to C main() function
  1058                           
  1059                           	psect	bssBANK0
  1060  0066                     __pbssBANK0:	
  1061  0066                     _dPacketnum:	
  1062  0066                     	ds	2
  1063  0068                     _eflag:	
  1064  0068                     	ds	2
  1065  006A                     _rcv_state:	
  1066  006A                     	ds	2
  1067  006C                     _dfcshi:	
  1068  006C                     	ds	1
  1069  006D                     _dfcslo:	
  1070  006D                     	ds	1
  1071  006E                     _efcshi:	
  1072  006E                     	ds	1
  1073  006F                     _efcslo:	
  1074  006F                     	ds	1
  1075                           
  1076                           	psect	bssBANK1
  1077  00E1                     __pbssBANK1:	
  1078  00E1                     _ePacket:	
  1079  00E1                     	ds	5
  1080  00E6                     _ebitstatus:	
  1081  00E6                     	ds	2
  1082  00E8                     _efcsflag:	
  1083  00E8                     	ds	2
  1084  00EA                     _estuff:	
  1085  00EA                     	ds	2
  1086  00EC                     getbit@oldbit:	
  1087  00EC                     	ds	2
  1088                           
  1089                           	psect	dataBANK1
  1090  00C4                     __pdataBANK1:	
  1091  00C4                     main@F2005:	
  1092  00C4                     	ds	3
  1093  00C7                     _CWTX_Nref:	
  1094  00C7                     	ds	2
  1095  00C9                     _FMRX_Nref:	
  1096  00C9                     	ds	2
  1097  00CB                     _FMTX_Nref:	
  1098  00CB                     	ds	2
  1099  00CD                     _CWTX_Nprg:	
  1100  00CD                     	ds	10
  1101  00D7                     _FMTX_Nprg:	
  1102  00D7                     	ds	10
  1103                           
  1104                           	psect	bssBANK3
  1105  0190                     __pbssBANK3:	
  1106  0190                     _dPacket:	
  1107  0190                     	ds	50
  1108                           
  1109                           	psect	dataBANK3
  1110  01C2                     __pdataBANK3:	
  1111  01C2                     main@F2010:	
  1112  01C2                     	ds	10
  1113  01CC                     main@F2012:	
  1114  01CC                     	ds	10
  1115  01D6                     main@F2014:	
  1116  01D6                     	ds	10
  1117  01E0                     _FMRX_Nprg:	
  1118  01E0                     	ds	10
  1119                           
  1120                           	psect	bssBANK2
  1121  0110                     __pbssBANK2:	
  1122  0110                     _EEPROMData:	
  1123  0110                     	ds	32
  1124  0130                     _dData:	
  1125  0130                     	ds	32
  1126                           
  1127                           	psect	dataBANK2
  1128  0150                     __pdataBANK2:	
  1129  0150                     _eDataField:	
  1130  0150                     	ds	25
  1131                           
  1132                           	psect	inittext
  1133  17AF                     init_fetch0:	
  1134                           ;	Called with low address in FSR and high address in W
  1135                           
  1136  17AF  087E               	movf	126,w
  1137  17B0  008A               	movwf	10
  1138  17B1  087F               	movf	127,w
  1139  17B2  0082               	movwf	2
  1140  17B3                     init_ram0:	
  1141                           ;Called with:
  1142                           ;	high address of idata address in btemp 
  1143                           ;	low address of idata address in btemp+1 
  1144                           ;	low address of data in FSR
  1145                           ;	high address + 1 of data in btemp-1
  1146                           
  1147  17B3  27AF  160A  118A   	fcall	init_fetch0
  1148  17B6  0080               	movwf	0
  1149  17B7  0A84               	incf	4,f
  1150  17B8  0804               	movf	4,w
  1151  17B9  067D               	xorwf	125,w
  1152  17BA  1903               	btfsc	3,2
  1153  17BB  3400               	retlw	0
  1154  17BC  0AFF               	incf	127,f
  1155  17BD  1903               	btfsc	3,2
  1156  17BE  0AFE               	incf	126,f
  1157  17BF  2FB3               	goto	init_ram0
  1158                           
  1159                           	psect	clrtext
  1160  179E                     clear_ram0:	
  1161                           ;	Called with FSR containing the base address, and
  1162                           ;	W with the last address+1
  1163                           
  1164  179E  0064               	clrwdt	;clear the watchdog before getting into this loop
  1165  179F                     clrloop0:	
  1166  179F  0180               	clrf	0	;clear RAM location pointed to by FSR
  1167  17A0  0A84               	incf	4,f	;increment pointer
  1168  17A1  0604               	xorwf	4,w	;XOR with final address
  1169  17A2  1903               	btfsc	3,2	;have we reached the end yet?
  1170  17A3  3400               	retlw	0	;all done for this memory range, return
  1171  17A4  0604               	xorwf	4,w	;XOR again to restore value
  1172  17A5  2F9F               	goto	clrloop0	;do the next byte
  1173                           
  1174                           	psect	cstackBANK1
  1175  00A0                     __pcstackBANK1:	
  1176  00A0                     main@EPS_kill:	
  1177  00A0                     main@EPS_kill_1:	
  1178                           ; 0 bytes @ 0x0
  1179                           
  1180                           
  1181                           ; 3 bytes @ 0x0
  1182  00A0                     	ds	3
  1183  00A3                     main@FMTX_Nprg:	
  1184                           
  1185                           ; 10 bytes @ 0x3
  1186  00A3                     	ds	10
  1187  00AD                     main@CWTX_Nprg:	
  1188                           
  1189                           ; 10 bytes @ 0xD
  1190  00AD                     	ds	10
  1191  00B7                     main@FMRX_Nprg:	
  1192                           
  1193                           ; 10 bytes @ 0x17
  1194  00B7                     	ds	10
  1195  00C1                     main@NM_wad_header:	
  1196                           
  1197                           ; 1 bytes @ 0x21
  1198  00C1                     	ds	1
  1199  00C2                     main@EPS_kill_2:	
  1200                           
  1201                           ; 1 bytes @ 0x22
  1202  00C2                     	ds	1
  1203  00C3                     main@dData:	
  1204                           
  1205                           ; 1 bytes @ 0x23
  1206  00C3                     	ds	1
  1207                           
  1208                           	psect	cstackCOMMON
  1209  0070                     __pcstackCOMMON:	
  1210  0070                     ?_Reset_EPS:	
  1211  0070                     ??_Reset_EPS:	
  1212                           ; 1 bytes @ 0x0
  1213                           
  1214  0070                     ?__NOP:	
  1215                           ; 1 bytes @ 0x0
  1216                           
  1217  0070                     ??__NOP:	
  1218                           ; 1 bytes @ 0x0
  1219                           
  1220  0070                     ?_Init_SERIAL:	
  1221                           ; 1 bytes @ 0x0
  1222                           
  1223  0070                     ??_Init_SERIAL:	
  1224                           ; 1 bytes @ 0x0
  1225                           
  1226  0070                     ?_putch:	
  1227                           ; 1 bytes @ 0x0
  1228                           
  1229  0070                     ??_putch:	
  1230                           ; 1 bytes @ 0x0
  1231                           
  1232  0070                     ?_Init_MPU:	
  1233                           ; 1 bytes @ 0x0
  1234                           
  1235  0070                     ??_Init_MPU:	
  1236                           ; 1 bytes @ 0x0
  1237                           
  1238  0070                     ?_waitFlag:	
  1239                           ; 1 bytes @ 0x0
  1240                           
  1241  0070                     ?_getdata:	
  1242                           ; 1 bytes @ 0x0
  1243                           
  1244  0070                     ?_ReceivePacket_data:	
  1245                           ; 1 bytes @ 0x0
  1246                           
  1247  0070                     ?_main:	
  1248                           ; 1 bytes @ 0x0
  1249                           
  1250  0070                     ?_I2C_Master_Wait:	
  1251                           ; 1 bytes @ 0x0
  1252                           
  1253  0070                     ??_I2C_Master_Wait:	
  1254                           ; 1 bytes @ 0x0
  1255                           
  1256  0070                     ?_I2C_Master_Start:	
  1257                           ; 1 bytes @ 0x0
  1258                           
  1259  0070                     ??_I2C_Master_Start:	
  1260                           ; 1 bytes @ 0x0
  1261                           
  1262  0070                     ?_I2C_Master_Stop:	
  1263                           ; 1 bytes @ 0x0
  1264                           
  1265  0070                     ??_I2C_Master_Stop:	
  1266                           ; 1 bytes @ 0x0
  1267                           
  1268  0070                     ?_I2C_Master_Write:	
  1269                           ; 1 bytes @ 0x0
  1270                           
  1271  0070                     ?_sprintf:	
  1272                           ; 1 bytes @ 0x0
  1273                           
  1274  0070                     ?_strcmp:	
  1275                           ; 2 bytes @ 0x0
  1276                           
  1277  0070                     ?_getbit:	
  1278                           ; 2 bytes @ 0x0
  1279                           
  1280  0070                     ?_fcscheck:	
  1281                           ; 2 bytes @ 0x0
  1282                           
  1283  0070                     ?___awdiv:	
  1284                           ; 2 bytes @ 0x0
  1285                           
  1286  0070                     ?___lldiv:	
  1287                           ; 2 bytes @ 0x0
  1288                           
  1289  0070                     putch@byte:	
  1290                           ; 4 bytes @ 0x0
  1291                           
  1292  0070                     I2C_Master_Write@d:	
  1293                           ; 1 bytes @ 0x0
  1294                           
  1295  0070                     __NOP@i:	
  1296                           ; 2 bytes @ 0x0
  1297                           
  1298  0070                     sprintf@sp:	
  1299                           ; 2 bytes @ 0x0
  1300                           
  1301  0070                     ___awdiv@divisor:	
  1302                           ; 2 bytes @ 0x0
  1303                           
  1304  0070                     strcmp@s2:	
  1305                           ; 2 bytes @ 0x0
  1306                           
  1307  0070                     ___lldiv@divisor:	
  1308                           ; 2 bytes @ 0x0
  1309                           
  1310                           
  1311                           ; 4 bytes @ 0x0
  1312  0070                     	ds	1
  1313  0071                     ?_NM_waddress:	
  1314  0071                     NM_waddress@whigh_address:	
  1315                           ; 1 bytes @ 0x1
  1316                           
  1317                           
  1318                           ; 1 bytes @ 0x1
  1319  0071                     	ds	1
  1320  0072                     ?_EEPROM_Write:	
  1321  0072                     ??_strcmp:	
  1322                           ; 1 bytes @ 0x2
  1323                           
  1324  0072                     ??_getbit:	
  1325                           ; 1 bytes @ 0x2
  1326                           
  1327  0072                     ??_fcscheck:	
  1328                           ; 1 bytes @ 0x2
  1329                           
  1330  0072                     ??_I2C_Master_Write:	
  1331                           ; 1 bytes @ 0x2
  1332                           
  1333  0072                     ?_L_OUT:	
  1334                           ; 1 bytes @ 0x2
  1335                           
  1336  0072                     ?_H_OUT:	
  1337                           ; 1 bytes @ 0x2
  1338                           
  1339  0072                     ?_STBOUT:	
  1340                           ; 1 bytes @ 0x2
  1341                           
  1342  0072                     NM_waddress@wlow_address:	
  1343                           ; 1 bytes @ 0x2
  1344                           
  1345  0072                     EEPROM_Write@high_address:	
  1346                           ; 1 bytes @ 0x2
  1347                           
  1348  0072                     sprintf@f:	
  1349                           ; 1 bytes @ 0x2
  1350                           
  1351  0072                     L_OUT@fmcwtxrx:	
  1352                           ; 1 bytes @ 0x2
  1353                           
  1354  0072                     H_OUT@fmcwtxrx:	
  1355                           ; 2 bytes @ 0x2
  1356                           
  1357  0072                     STBOUT@fmcwtxrx:	
  1358                           ; 2 bytes @ 0x2
  1359                           
  1360  0072                     ___awdiv@dividend:	
  1361                           ; 2 bytes @ 0x2
  1362                           
  1363                           
  1364                           ; 2 bytes @ 0x2
  1365  0072                     	ds	1
  1366  0073                     ??_NM_waddress:	
  1367  0073                     NM_waddress@NM_wad_header:	
  1368                           ; 1 bytes @ 0x3
  1369                           
  1370  0073                     EEPROM_Write@low_address:	
  1371                           ; 1 bytes @ 0x3
  1372                           
  1373                           
  1374                           ; 1 bytes @ 0x3
  1375  0073                     	ds	1
  1376  0074                     ??_L_OUT:	
  1377  0074                     ??_H_OUT:	
  1378                           ; 1 bytes @ 0x4
  1379                           
  1380  0074                     ??_STBOUT:	
  1381                           ; 1 bytes @ 0x4
  1382                           
  1383  0074                     ?_OPINIT:	
  1384                           ; 1 bytes @ 0x4
  1385                           
  1386  0074                     ??___awdiv:	
  1387                           ; 1 bytes @ 0x4
  1388                           
  1389  0074                     fcscheck@bt:	
  1390                           ; 1 bytes @ 0x4
  1391                           
  1392  0074                     EEPROM_Write@data:	
  1393                           ; 1 bytes @ 0x4
  1394                           
  1395  0074                     strcmp@r:	
  1396                           ; 1 bytes @ 0x4
  1397                           
  1398  0074                     getbit@i:	
  1399                           ; 1 bytes @ 0x4
  1400                           
  1401  0074                     OPINIT@fmcwtxrx:	
  1402                           ; 2 bytes @ 0x4
  1403                           
  1404  0074                     ___lldiv@dividend:	
  1405                           ; 2 bytes @ 0x4
  1406                           
  1407                           
  1408                           ; 4 bytes @ 0x4
  1409  0074                     	ds	1
  1410  0075                     ??_EEPROM_Write:	
  1411  0075                     ___awdiv@counter:	
  1412                           ; 1 bytes @ 0x5
  1413                           
  1414  0075                     strcmp@s1:	
  1415                           ; 1 bytes @ 0x5
  1416                           
  1417  0075                     fcscheck@i:	
  1418                           ; 1 bytes @ 0x5
  1419                           
  1420                           
  1421                           ; 2 bytes @ 0x5
  1422  0075                     	ds	1
  1423  0076                     ??_sprintf:	
  1424  0076                     ??_waitFlag:	
  1425                           ; 1 bytes @ 0x6
  1426                           
  1427  0076                     ??_getdata:	
  1428                           ; 1 bytes @ 0x6
  1429                           
  1430  0076                     ??_OPINIT:	
  1431                           ; 1 bytes @ 0x6
  1432                           
  1433  0076                     ___awdiv@sign:	
  1434                           ; 1 bytes @ 0x6
  1435                           
  1436                           
  1437                           ; 1 bytes @ 0x6
  1438  0076                     	ds	1
  1439  0077                     sprintf@flag:	
  1440  0077                     fcscheck@i_136:	
  1441                           ; 1 bytes @ 0x7
  1442                           
  1443  0077                     ___awdiv@quotient:	
  1444                           ; 2 bytes @ 0x7
  1445                           
  1446                           
  1447                           ; 2 bytes @ 0x7
  1448  0077                     	ds	1
  1449  0078                     ??___lldiv:	
  1450  0078                     EEPROM_Write@EEPROM_address:	
  1451                           ; 1 bytes @ 0x8
  1452                           
  1453  0078                     sprintf@ap:	
  1454                           ; 1 bytes @ 0x8
  1455                           
  1456                           
  1457                           ; 1 bytes @ 0x8
  1458  0078                     	ds	1
  1459  0079                     ?_OUTFQ:	
  1460  0079                     ?_RFDOUT:	
  1461                           ; 1 bytes @ 0x9
  1462                           
  1463  0079                     fcscheck@byte:	
  1464                           ; 1 bytes @ 0x9
  1465                           
  1466  0079                     EEPROM_Write@Address:	
  1467                           ; 1 bytes @ 0x9
  1468                           
  1469  0079                     OUTFQ@fmcwtxrx:	
  1470                           ; 1 bytes @ 0x9
  1471                           
  1472  0079                     RFDOUT@fmcwtxrx:	
  1473                           ; 2 bytes @ 0x9
  1474                           
  1475  0079                     sprintf@cp:	
  1476                           ; 2 bytes @ 0x9
  1477                           
  1478  0079                     ___lldiv@quotient:	
  1479                           ; 2 bytes @ 0x9
  1480                           
  1481                           
  1482                           ; 4 bytes @ 0x9
  1483  0079                     	ds	1
  1484  007A                     ??_ReceivePacket_data:	
  1485                           
  1486                           ; 1 bytes @ 0xA
  1487  007A                     	ds	1
  1488  007B                     sprintf@c:	
  1489  007B                     OUTFQ@Nprg:	
  1490                           ; 1 bytes @ 0xB
  1491                           
  1492  007B                     RFDOUT@Nref:	
  1493                           ; 2 bytes @ 0xB
  1494                           
  1495                           
  1496                           ; 2 bytes @ 0xB
  1497  007B                     	ds	2
  1498  007D                     ??_FMTX:	
  1499  007D                     ??_CWTX:	
  1500                           ; 1 bytes @ 0xD
  1501                           
  1502  007D                     ??_FMRX:	
  1503                           ; 1 bytes @ 0xD
  1504                           
  1505  007D                     ___lldiv@counter:	
  1506                           ; 1 bytes @ 0xD
  1507                           
  1508                           
  1509                           ; 1 bytes @ 0xD
  1510  007D                     	ds	1
  1511                           
  1512                           	psect	cstackBANK0
  1513  0020                     __pcstackBANK0:	
  1514  0020                     ?_Init_I2C_M:	
  1515  0020                     ??_OUTFQ:	
  1516                           ; 1 bytes @ 0x0
  1517                           
  1518  0020                     ??_RFDOUT:	
  1519                           ; 1 bytes @ 0x0
  1520                           
  1521  0020                     waitFlag@i:	
  1522                           ; 1 bytes @ 0x0
  1523                           
  1524  0020                     getdata@bufstore_counter:	
  1525                           ; 2 bytes @ 0x0
  1526                           
  1527  0020                     Init_I2C_M@c:	
  1528                           ; 2 bytes @ 0x0
  1529                           
  1530                           
  1531                           ; 4 bytes @ 0x0
  1532  0020                     	ds	2
  1533  0022                     waitFlag@j:	
  1534  0022                     getdata@dstuff:	
  1535                           ; 2 bytes @ 0x2
  1536                           
  1537                           
  1538                           ; 2 bytes @ 0x2
  1539  0022                     	ds	1
  1540  0023                     RFDOUT@Nref_b:	
  1541                           
  1542                           ; 24 bytes @ 0x3
  1543  0023                     	ds	1
  1544  0024                     ??_Init_I2C_M:	
  1545  0024                     waitFlag@j_105:	
  1546                           ; 1 bytes @ 0x4
  1547                           
  1548  0024                     getdata@dbitstatus:	
  1549                           ; 2 bytes @ 0x4
  1550                           
  1551                           
  1552                           ; 2 bytes @ 0x4
  1553  0024                     	ds	2
  1554  0026                     getdata@buf:	
  1555  0026                     waitFlag@j_107:	
  1556                           ; 1 bytes @ 0x6
  1557                           
  1558                           
  1559                           ; 2 bytes @ 0x6
  1560  0026                     	ds	2
  1561  0028                     waitFlag@j_109:	
  1562                           
  1563                           ; 2 bytes @ 0x8
  1564  0028                     	ds	2
  1565  002A                     waitFlag@j_111:	
  1566                           
  1567                           ; 2 bytes @ 0xA
  1568  002A                     	ds	2
  1569  002C                     waitFlag@j_113:	
  1570                           
  1571                           ; 2 bytes @ 0xC
  1572  002C                     	ds	2
  1573  002E                     waitFlag@j_114:	
  1574                           
  1575                           ; 2 bytes @ 0xE
  1576  002E                     	ds	2
  1577  0030                     waitFlag@j_116:	
  1578  0030                     OUTFQ@Nprg_b:	
  1579                           ; 2 bytes @ 0x10
  1580                           
  1581                           
  1582                           ; 34 bytes @ 0x10
  1583  0030                     	ds	2
  1584  0032                     waitFlag@j_118:	
  1585                           
  1586                           ; 2 bytes @ 0x12
  1587  0032                     	ds	2
  1588  0034                     waitFlag@j_120:	
  1589                           
  1590                           ; 2 bytes @ 0x14
  1591  0034                     	ds	2
  1592  0036                     waitFlag@j_122:	
  1593                           
  1594                           ; 2 bytes @ 0x16
  1595  0036                     	ds	2
  1596  0038                     waitFlag@j_124:	
  1597                           
  1598                           ; 2 bytes @ 0x18
  1599  0038                     	ds	2
  1600  003A                     waitFlag@flag_judge:	
  1601                           
  1602                           ; 2 bytes @ 0x1A
  1603  003A                     	ds	1
  1604  003B                     RFDOUT@i_479:	
  1605                           
  1606                           ; 2 bytes @ 0x1B
  1607  003B                     	ds	1
  1608  003C                     waitFlag@buf:	
  1609                           
  1610                           ; 1 bytes @ 0x1C
  1611  003C                     	ds	1
  1612  003D                     ReceivePacket_data@fcschecker:	
  1613  003D                     RFDOUT@i:	
  1614                           ; 2 bytes @ 0x1D
  1615                           
  1616                           
  1617                           ; 2 bytes @ 0x1D
  1618  003D                     	ds	2
  1619  003F                     ReceivePacket_data@i:	
  1620  003F                     RFDOUT@i_480:	
  1621                           ; 2 bytes @ 0x1F
  1622                           
  1623                           
  1624                           ; 2 bytes @ 0x1F
  1625  003F                     	ds	19
  1626  0052                     OUTFQ@i_468:	
  1627                           
  1628                           ; 2 bytes @ 0x32
  1629  0052                     	ds	2
  1630  0054                     OUTFQ@count:	
  1631                           
  1632                           ; 2 bytes @ 0x34
  1633  0054                     	ds	2
  1634  0056                     OUTFQ@i:	
  1635                           
  1636                           ; 2 bytes @ 0x36
  1637  0056                     	ds	2
  1638  0058                     OUTFQ@i_470:	
  1639                           
  1640                           ; 2 bytes @ 0x38
  1641  0058                     	ds	2
  1642  005A                     OUTFQ@j:	
  1643                           
  1644                           ; 2 bytes @ 0x3A
  1645  005A                     	ds	2
  1646  005C                     ?_FMTX:	
  1647  005C                     ?_CWTX:	
  1648                           ; 1 bytes @ 0x3C
  1649                           
  1650  005C                     ?_FMRX:	
  1651                           ; 1 bytes @ 0x3C
  1652                           
  1653  005C                     FMTX@Nref:	
  1654                           ; 1 bytes @ 0x3C
  1655                           
  1656  005C                     CWTX@Nref:	
  1657                           ; 2 bytes @ 0x3C
  1658                           
  1659  005C                     FMRX@Nref:	
  1660                           ; 2 bytes @ 0x3C
  1661                           
  1662                           
  1663                           ; 2 bytes @ 0x3C
  1664  005C                     	ds	2
  1665  005E                     FMTX@Nprg:	
  1666  005E                     CWTX@Nprg:	
  1667                           ; 2 bytes @ 0x3E
  1668                           
  1669  005E                     FMRX@Nprg:	
  1670                           ; 2 bytes @ 0x3E
  1671                           
  1672                           
  1673                           ; 2 bytes @ 0x3E
  1674  005E                     	ds	2
  1675  0060                     FMTX@fmtx:	
  1676  0060                     CWTX@cwtx:	
  1677                           ; 2 bytes @ 0x40
  1678                           
  1679  0060                     FMRX@fmrx:	
  1680                           ; 2 bytes @ 0x40
  1681                           
  1682                           
  1683                           ; 2 bytes @ 0x40
  1684  0060                     	ds	2
  1685  0062                     ??_main:	
  1686                           
  1687                           ; 1 bytes @ 0x42
  1688  0062                     	ds	4
  1689                           
  1690                           	psect	maintext
  1691  0E40                     __pmaintext:	
  1692 ;;
  1693 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1694 ;;
  1695 ;; *************** function _main *****************
  1696 ;; Defined at:
  1697 ;;		line 39 in file "main.c"
  1698 ;; Parameters:    Size  Location     Type
  1699 ;;		None
  1700 ;; Auto vars:     Size  Location     Type
  1701 ;;  FMRX_Nprg      10   23[BANK1 ] int [5]
  1702 ;;  CWTX_Nprg      10   13[BANK1 ] int [5]
  1703 ;;  FMTX_Nprg      10    3[BANK1 ] int [5]
  1704 ;;  EPS_kill_1      3    0[BANK1 ] unsigned char [3]
  1705 ;;  dData           1   35[BANK1 ] PTR unsigned char 
  1706 ;;		 -> NULL(0), dData(32), 
  1707 ;;  EPS_kill_2      1   34[BANK1 ] unsigned char 
  1708 ;;  NM_wad_heade    1   33[BANK1 ] unsigned char 
  1709 ;;  EPS_kill        0    0[BANK1 ] unsigned char [0]
  1710 ;; Return value:  Size  Location     Type
  1711 ;;                  1    wreg      void 
  1712 ;; Registers used:
  1713 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1714 ;; Tracked objects:
  1715 ;;		On entry : B00/0
  1716 ;;		On exit  : 0/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1719 ;;      Params:         0       0       0       0       0
  1720 ;;      Locals:         0       0      36       0       0
  1721 ;;      Temps:          0       4       0       0       0
  1722 ;;      Totals:         0       4      36       0       0
  1723 ;;Total ram usage:       40 bytes
  1724 ;; Hardware stack levels required when called:    4
  1725 ;; This function calls:
  1726 ;;		_CWTX
  1727 ;;		_EEPROM_Write
  1728 ;;		_FMRX
  1729 ;;		_FMTX
  1730 ;;		_Init_I2C_M
  1731 ;;		_Init_MPU
  1732 ;;		_Init_SERIAL
  1733 ;;		_NM_waddress
  1734 ;;		_ReceivePacket_data
  1735 ;;		_Reset_EPS
  1736 ;;		_sprintf
  1737 ;;		_strcmp
  1738 ;; This function is called by:
  1739 ;;		Startup code after reset
  1740 ;; This function uses a non-reentrant model
  1741 ;;
  1742                           
  1743                           
  1744                           ;psect for function _main
  1745  0E40                     _main:	
  1746                           
  1747                           ;main.c: 44: _delay((unsigned long)((500)*(10000000/4000.0)));
  1748                           
  1749                           ;incstack = 0
  1750                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1751  0E40  3007               	movlw	7
  1752  0E41  1283               	bcf	3,5	;RP0=0, select bank0
  1753  0E42  1303               	bcf	3,6	;RP1=0, select bank0
  1754  0E43  00E4               	movwf	??_main+2
  1755  0E44  3058               	movlw	88
  1756  0E45  00E3               	movwf	??_main+1
  1757  0E46  305E               	movlw	94
  1758  0E47  00E2               	movwf	??_main
  1759  0E48                     u3587:	
  1760  0E48  0BE2               	decfsz	??_main,f
  1761  0E49  2E48               	goto	u3587
  1762  0E4A  0BE3               	decfsz	??_main+1,f
  1763  0E4B  2E48               	goto	u3587
  1764  0E4C  0BE4               	decfsz	??_main+2,f
  1765  0E4D  2E48               	goto	u3587
  1766  0E4E  2E4F               	nop2
  1767                           
  1768                           ;main.c: 46: Init_SERIAL();
  1769  0E4F  160A  118A  27E7  120A  158A  	fcall	_Init_SERIAL
  1770                           
  1771                           ;main.c: 47: Init_MPU();
  1772  0E54  120A  158A  204A  120A  158A  	fcall	_Init_MPU
  1773                           
  1774                           ;main.c: 48: Init_I2C_M(400000);
  1775  0E59  3000               	movlw	0
  1776  0E5A  1283               	bcf	3,5	;RP0=0, select bank0
  1777  0E5B  1303               	bcf	3,6	;RP1=0, select bank0
  1778  0E5C  00A3               	movwf	Init_I2C_M@c+3
  1779  0E5D  3006               	movlw	6
  1780  0E5E  00A2               	movwf	Init_I2C_M@c+2
  1781  0E5F  301A               	movlw	26
  1782  0E60  00A1               	movwf	Init_I2C_M@c+1
  1783  0E61  3080               	movlw	128
  1784  0E62  00A0               	movwf	Init_I2C_M@c
  1785  0E63  120A  158A  218F  120A  158A  	fcall	_Init_I2C_M
  1786                           
  1787                           ;main.c: 54: RB2 = 1;
  1788  0E68  1283               	bcf	3,5	;RP0=0, select bank0
  1789  0E69  1303               	bcf	3,6	;RP1=0, select bank0
  1790  0E6A  1506               	bsf	6,2	;volatile
  1791                           
  1792                           ;main.c: 55: _delay((unsigned long)((500)*(10000000/4000.0)));
  1793  0E6B  3007               	movlw	7
  1794  0E6C  00E4               	movwf	??_main+2
  1795  0E6D  3058               	movlw	88
  1796  0E6E  00E3               	movwf	??_main+1
  1797  0E6F  305E               	movlw	94
  1798  0E70  00E2               	movwf	??_main
  1799  0E71                     u3597:	
  1800  0E71  0BE2               	decfsz	??_main,f
  1801  0E72  2E71               	goto	u3597
  1802  0E73  0BE3               	decfsz	??_main+1,f
  1803  0E74  2E71               	goto	u3597
  1804  0E75  0BE4               	decfsz	??_main+2,f
  1805  0E76  2E71               	goto	u3597
  1806  0E77  2E78               	nop2
  1807                           
  1808                           ;main.c: 57: FMTX(FMTX_Nref, FMTX_Nprg);
  1809  0E78  1683               	bsf	3,5	;RP0=1, select bank1
  1810  0E79  1303               	bcf	3,6	;RP1=0, select bank1
  1811  0E7A  084C               	movf	(_FMTX_Nref+1)^(0+128),w
  1812  0E7B  1283               	bcf	3,5	;RP0=0, select bank0
  1813  0E7C  1303               	bcf	3,6	;RP1=0, select bank0
  1814  0E7D  00DD               	movwf	FMTX@Nref+1
  1815  0E7E  1683               	bsf	3,5	;RP0=1, select bank1
  1816  0E7F  1303               	bcf	3,6	;RP1=0, select bank1
  1817  0E80  084B               	movf	_FMTX_Nref^(0+128),w
  1818  0E81  1283               	bcf	3,5	;RP0=0, select bank0
  1819  0E82  1303               	bcf	3,6	;RP1=0, select bank0
  1820  0E83  00DC               	movwf	FMTX@Nref
  1821  0E84  30D7               	movlw	(low (_FMTX_Nprg| 0))& (0+255)
  1822  0E85  00DE               	movwf	FMTX@Nprg
  1823  0E86  3000               	movlw	0
  1824  0E87  00DF               	movwf	FMTX@Nprg+1
  1825  0E88  120A  158A  2135  120A  158A  	fcall	_FMTX
  1826                           
  1827                           ;main.c: 58: CWTX(CWTX_Nref, CWTX_Nprg);
  1828  0E8D  1683               	bsf	3,5	;RP0=1, select bank1
  1829  0E8E  1303               	bcf	3,6	;RP1=0, select bank1
  1830  0E8F  0848               	movf	(_CWTX_Nref+1)^(0+128),w
  1831  0E90  1283               	bcf	3,5	;RP0=0, select bank0
  1832  0E91  1303               	bcf	3,6	;RP1=0, select bank0
  1833  0E92  00DD               	movwf	CWTX@Nref+1
  1834  0E93  1683               	bsf	3,5	;RP0=1, select bank1
  1835  0E94  1303               	bcf	3,6	;RP1=0, select bank1
  1836  0E95  0847               	movf	_CWTX_Nref^(0+128),w
  1837  0E96  1283               	bcf	3,5	;RP0=0, select bank0
  1838  0E97  1303               	bcf	3,6	;RP1=0, select bank0
  1839  0E98  00DC               	movwf	CWTX@Nref
  1840  0E99  30CD               	movlw	(low (_CWTX_Nprg| 0))& (0+255)
  1841  0E9A  00DE               	movwf	CWTX@Nprg
  1842  0E9B  3000               	movlw	0
  1843  0E9C  00DF               	movwf	CWTX@Nprg+1
  1844  0E9D  120A  158A  20DD  120A  158A  	fcall	_CWTX
  1845                           
  1846                           ;main.c: 59: FMRX(FMRX_Nref, FMRX_Nprg);
  1847  0EA2  1683               	bsf	3,5	;RP0=1, select bank1
  1848  0EA3  1303               	bcf	3,6	;RP1=0, select bank1
  1849  0EA4  084A               	movf	(_FMRX_Nref+1)^(0+128),w
  1850  0EA5  1283               	bcf	3,5	;RP0=0, select bank0
  1851  0EA6  1303               	bcf	3,6	;RP1=0, select bank0
  1852  0EA7  00DD               	movwf	FMRX@Nref+1
  1853  0EA8  1683               	bsf	3,5	;RP0=1, select bank1
  1854  0EA9  1303               	bcf	3,6	;RP1=0, select bank1
  1855  0EAA  0849               	movf	_FMRX_Nref^(0+128),w
  1856  0EAB  1283               	bcf	3,5	;RP0=0, select bank0
  1857  0EAC  1303               	bcf	3,6	;RP1=0, select bank0
  1858  0EAD  00DC               	movwf	FMRX@Nref
  1859  0EAE  30E0               	movlw	(low (_FMRX_Nprg| (0+256)))& (0+255)
  1860  0EAF  00DE               	movwf	FMRX@Nprg
  1861  0EB0  3001               	movlw	1
  1862  0EB1  00DF               	movwf	FMRX@Nprg+1
  1863  0EB2  120A  158A  2109  120A  158A  	fcall	_FMRX
  1864                           
  1865                           ;main.c: 60: RB2 = 0;
  1866  0EB7  1283               	bcf	3,5	;RP0=0, select bank0
  1867  0EB8  1303               	bcf	3,6	;RP1=0, select bank0
  1868  0EB9  1106               	bcf	6,2	;volatile
  1869  0EBA                     l3818:	
  1870                           ;main.c: 62: while(1){
  1871                           
  1872                           
  1873                           ;main.c: 76: UBYTE *dData;
  1874                           ;main.c: 77: dData = ReceivePacket_data();
  1875  0EBA  120A  158A  229B  120A  158A  	fcall	_ReceivePacket_data
  1876  0EBF  1283               	bcf	3,5	;RP0=0, select bank0
  1877  0EC0  1303               	bcf	3,6	;RP1=0, select bank0
  1878  0EC1  00E2               	movwf	??_main
  1879  0EC2  0862               	movf	??_main,w
  1880  0EC3  1683               	bsf	3,5	;RP0=1, select bank1
  1881  0EC4  1303               	bcf	3,6	;RP1=0, select bank1
  1882  0EC5  00C3               	movwf	main@dData^(0+128)
  1883                           
  1884                           ;main.c: 78: RB2 = 1;
  1885  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  1886  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  1887  0EC8  1506               	bsf	6,2	;volatile
  1888                           
  1889                           ;main.c: 79: _delay((unsigned long)((500)*(10000000/4000.0)));
  1890  0EC9  3007               	movlw	7
  1891  0ECA  00E4               	movwf	??_main+2
  1892  0ECB  3058               	movlw	88
  1893  0ECC  00E3               	movwf	??_main+1
  1894  0ECD  305E               	movlw	94
  1895  0ECE  00E2               	movwf	??_main
  1896  0ECF                     u3607:	
  1897  0ECF  0BE2               	decfsz	??_main,f
  1898  0ED0  2ECF               	goto	u3607
  1899  0ED1  0BE3               	decfsz	??_main+1,f
  1900  0ED2  2ECF               	goto	u3607
  1901  0ED3  0BE4               	decfsz	??_main+2,f
  1902  0ED4  2ECF               	goto	u3607
  1903  0ED5  2ED6               	nop2
  1904                           
  1905                           ;main.c: 80: RB2 = 0;
  1906  0ED6  1283               	bcf	3,5	;RP0=0, select bank0
  1907  0ED7  1303               	bcf	3,6	;RP1=0, select bank0
  1908  0ED8  1106               	bcf	6,2	;volatile
  1909                           
  1910                           ;main.c: 94: EEPROM_Write(0x50,0x00,0x00,dData);
  1911  0ED9  01F2               	clrf	EEPROM_Write@high_address
  1912  0EDA  01F3               	clrf	EEPROM_Write@low_address
  1913  0EDB  1683               	bsf	3,5	;RP0=1, select bank1
  1914  0EDC  1303               	bcf	3,6	;RP1=0, select bank1
  1915  0EDD  0843               	movf	main@dData^(0+128),w
  1916  0EDE  1283               	bcf	3,5	;RP0=0, select bank0
  1917  0EDF  1303               	bcf	3,6	;RP1=0, select bank0
  1918  0EE0  00E2               	movwf	??_main
  1919  0EE1  0862               	movf	??_main,w
  1920  0EE2  00F4               	movwf	EEPROM_Write@data
  1921  0EE3  3050               	movlw	80
  1922  0EE4  120A  158A  2344  120A  158A  	fcall	_EEPROM_Write
  1923                           
  1924                           ;main.c: 97: UBYTE NM_wad_header = 0x72;
  1925  0EE9  3072               	movlw	114
  1926  0EEA  1283               	bcf	3,5	;RP0=0, select bank0
  1927  0EEB  1303               	bcf	3,6	;RP1=0, select bank0
  1928  0EEC  00E2               	movwf	??_main
  1929  0EED  0862               	movf	??_main,w
  1930  0EEE  1683               	bsf	3,5	;RP0=1, select bank1
  1931  0EEF  1303               	bcf	3,6	;RP1=0, select bank1
  1932  0EF0  00C1               	movwf	main@NM_wad_header^(0+128)
  1933                           
  1934                           ;main.c: 98: NM_waddress(NM_wad_header, 0x00, 0x00);
  1935  0EF1  01F1               	clrf	NM_waddress@whigh_address
  1936  0EF2  01F2               	clrf	NM_waddress@wlow_address
  1937  0EF3  0841               	movf	main@NM_wad_header^(0+128),w
  1938  0EF4  160A  118A  27C0  120A  158A  	fcall	_NM_waddress
  1939                           
  1940                           ;main.c: 109: UBYTE EPS_kill[];
  1941                           ;main.c: 110: UBYTE EPS_kill_1[] = "EA";
  1942  0EF9  1683               	bsf	3,5	;RP0=1, select bank1
  1943  0EFA  1303               	bcf	3,6	;RP1=0, select bank1
  1944  0EFB  0844               	movf	main@F2005^(0+128),w
  1945  0EFC  00A0               	movwf	main@EPS_kill_1^(0+128)
  1946  0EFD  0845               	movf	(main@F2005+1)^(0+128),w
  1947  0EFE  00A1               	movwf	(main@EPS_kill_1+1)^(0+128)
  1948  0EFF  0846               	movf	(main@F2005+2)^(0+128),w
  1949  0F00  00A2               	movwf	(main@EPS_kill_1+2)^(0+128)
  1950                           
  1951                           ;main.c: 111: UBYTE EPS_kill_2 = 0x0D;
  1952  0F01  300D               	movlw	13
  1953  0F02  1283               	bcf	3,5	;RP0=0, select bank0
  1954  0F03  1303               	bcf	3,6	;RP1=0, select bank0
  1955  0F04  00E2               	movwf	??_main
  1956  0F05  0862               	movf	??_main,w
  1957  0F06  1683               	bsf	3,5	;RP0=1, select bank1
  1958  0F07  1303               	bcf	3,6	;RP1=0, select bank1
  1959  0F08  00C2               	movwf	main@EPS_kill_2^(0+128)
  1960                           
  1961                           ;main.c: 112: sprintf(EPS_kill,"%s%c",EPS_kill_1,EPS_kill_2);
  1962  0F09  30A0               	movlw	low main@EPS_kill
  1963  0F0A  00F0               	movwf	sprintf@sp
  1964  0F0B  3000               	movlw	high main@EPS_kill
  1965  0F0C  00F1               	movwf	sprintf@sp+1
  1966  0F0D  3016               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1967  0F0E  1283               	bcf	3,5	;RP0=0, select bank0
  1968  0F0F  1303               	bcf	3,6	;RP1=0, select bank0
  1969  0F10  00E2               	movwf	??_main
  1970  0F11  0862               	movf	??_main,w
  1971  0F12  00F2               	movwf	sprintf@f
  1972  0F13  30A0               	movlw	(low (main@EPS_kill_1| 0))& (0+255)
  1973  0F14  00E3               	movwf	??_main+1
  1974  0F15  0863               	movf	??_main+1,w
  1975  0F16  00F3               	movwf	?_sprintf+3
  1976  0F17  1683               	bsf	3,5	;RP0=1, select bank1
  1977  0F18  1303               	bcf	3,6	;RP1=0, select bank1
  1978  0F19  0842               	movf	main@EPS_kill_2^(0+128),w
  1979  0F1A  1283               	bcf	3,5	;RP0=0, select bank0
  1980  0F1B  1303               	bcf	3,6	;RP1=0, select bank0
  1981  0F1C  00E4               	movwf	??_main+2
  1982  0F1D  01E5               	clrf	??_main+3
  1983  0F1E  0864               	movf	??_main+2,w
  1984  0F1F  00F4               	movwf	?_sprintf+4
  1985  0F20  0865               	movf	??_main+3,w
  1986  0F21  00F5               	movwf	?_sprintf+5
  1987  0F22  120A  118A  2020  120A  158A  	fcall	_sprintf
  1988                           
  1989                           ;main.c: 121: if (strcmp(dData,EPS_kill) == 0){
  1990  0F27  30A0               	movlw	low main@EPS_kill
  1991  0F28  00F0               	movwf	strcmp@s2
  1992  0F29  3000               	movlw	high main@EPS_kill
  1993  0F2A  00F1               	movwf	strcmp@s2+1
  1994  0F2B  1683               	bsf	3,5	;RP0=1, select bank1
  1995  0F2C  1303               	bcf	3,6	;RP1=0, select bank1
  1996  0F2D  0843               	movf	main@dData^(0+128),w
  1997  0F2E  120A  158A  20B2  120A  158A  	fcall	_strcmp
  1998  0F33  0870               	movf	?_strcmp,w
  1999  0F34  0471               	iorwf	?_strcmp+1,w
  2000  0F35  1D03               	btfss	3,2
  2001  0F36  2FF0               	goto	l3862
  2002                           
  2003                           ;main.c: 122: RB2 = 1;
  2004  0F37  1283               	bcf	3,5	;RP0=0, select bank0
  2005  0F38  1303               	bcf	3,6	;RP1=0, select bank0
  2006  0F39  1506               	bsf	6,2	;volatile
  2007                           
  2008                           ;main.c: 123: _delay((unsigned long)((500)*(10000000/4000.0)));
  2009  0F3A  3007               	movlw	7
  2010  0F3B  00E4               	movwf	??_main+2
  2011  0F3C  3058               	movlw	88
  2012  0F3D  00E3               	movwf	??_main+1
  2013  0F3E  305E               	movlw	94
  2014  0F3F  00E2               	movwf	??_main
  2015  0F40                     u3617:	
  2016  0F40  0BE2               	decfsz	??_main,f
  2017  0F41  2F40               	goto	u3617
  2018  0F42  0BE3               	decfsz	??_main+1,f
  2019  0F43  2F40               	goto	u3617
  2020  0F44  0BE4               	decfsz	??_main+2,f
  2021  0F45  2F40               	goto	u3617
  2022  0F46  2F47               	nop2
  2023                           
  2024                           ;main.c: 124: RB2 = 0;
  2025  0F47  1283               	bcf	3,5	;RP0=0, select bank0
  2026  0F48  1303               	bcf	3,6	;RP1=0, select bank0
  2027  0F49  1106               	bcf	6,2	;volatile
  2028                           
  2029                           ;main.c: 125: Reset_EPS();
  2030  0F4A  120A  158A  2067  120A  158A  	fcall	_Reset_EPS
  2031                           
  2032                           ;main.c: 126: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2033  0F4F  3040               	movlw	64
  2034  0F50  1283               	bcf	3,5	;RP0=0, select bank0
  2035  0F51  1303               	bcf	3,6	;RP1=0, select bank0
  2036  0F52  00E4               	movwf	??_main+2
  2037  0F53  306A               	movlw	106
  2038  0F54  00E3               	movwf	??_main+1
  2039  0F55  30D5               	movlw	213
  2040  0F56  00E2               	movwf	??_main
  2041  0F57                     u3627:	
  2042  0F57  0BE2               	decfsz	??_main,f
  2043  0F58  2F57               	goto	u3627
  2044  0F59  0BE3               	decfsz	??_main+1,f
  2045  0F5A  2F57               	goto	u3627
  2046  0F5B  0BE4               	decfsz	??_main+2,f
  2047  0F5C  2F57               	goto	u3627
  2048  0F5D  2F5E               	nop2
  2049                           
  2050                           ;main.c: 129: int FMTX_Nprg[5] = {8,7,3,0,0};
  2051  0F5E  30A3               	movlw	main@FMTX_Nprg& (0+255)
  2052  0F5F  0084               	movwf	4
  2053  0F60  30C2               	movlw	low main@F2010
  2054  0F61  1283               	bcf	3,5	;RP0=0, select bank0
  2055  0F62  1303               	bcf	3,6	;RP1=0, select bank0
  2056  0F63  00E2               	movwf	??_main
  2057  0F64  0804               	movf	4,w
  2058  0F65  00E3               	movwf	??_main+1
  2059  0F66  300A               	movlw	10
  2060  0F67  00E4               	movwf	??_main+2
  2061  0F68                     u3530:	
  2062  0F68  0862               	movf	??_main,w
  2063  0F69  0084               	movwf	4
  2064  0F6A  1783               	bsf	3,7	;select IRP bank3
  2065  0F6B  0800               	movf	0,w
  2066  0F6C  00E5               	movwf	??_main+3
  2067  0F6D  0AE2               	incf	??_main,f
  2068  0F6E  0863               	movf	??_main+1,w
  2069  0F6F  0084               	movwf	4
  2070  0F70  1383               	bcf	3,7	;select IRP bank1
  2071  0F71  0865               	movf	??_main+3,w
  2072  0F72  0080               	movwf	0
  2073  0F73  0AE3               	incf	??_main+1,f
  2074  0F74  0BE4               	decfsz	??_main+2,f
  2075  0F75  2F68               	goto	u3530
  2076                           
  2077                           ;main.c: 130: int CWTX_Nprg[5] = {0,1,7,4,7};
  2078  0F76  30AD               	movlw	main@CWTX_Nprg& (0+255)
  2079  0F77  0084               	movwf	4
  2080  0F78  30CC               	movlw	low main@F2012
  2081  0F79  00E2               	movwf	??_main
  2082  0F7A  0804               	movf	4,w
  2083  0F7B  00E3               	movwf	??_main+1
  2084  0F7C  300A               	movlw	10
  2085  0F7D  00E4               	movwf	??_main+2
  2086  0F7E                     u3540:	
  2087  0F7E  0862               	movf	??_main,w
  2088  0F7F  0084               	movwf	4
  2089  0F80  1783               	bsf	3,7	;select IRP bank3
  2090  0F81  0800               	movf	0,w
  2091  0F82  00E5               	movwf	??_main+3
  2092  0F83  0AE2               	incf	??_main,f
  2093  0F84  0863               	movf	??_main+1,w
  2094  0F85  0084               	movwf	4
  2095  0F86  1383               	bcf	3,7	;select IRP bank1
  2096  0F87  0865               	movf	??_main+3,w
  2097  0F88  0080               	movwf	0
  2098  0F89  0AE3               	incf	??_main+1,f
  2099  0F8A  0BE4               	decfsz	??_main+2,f
  2100  0F8B  2F7E               	goto	u3540
  2101                           
  2102                           ;main.c: 131: int FMRX_Nprg[5] = {2,4,8,8,7};
  2103  0F8C  30B7               	movlw	main@FMRX_Nprg& (0+255)
  2104  0F8D  0084               	movwf	4
  2105  0F8E  30D6               	movlw	low main@F2014
  2106  0F8F  00E2               	movwf	??_main
  2107  0F90  0804               	movf	4,w
  2108  0F91  00E3               	movwf	??_main+1
  2109  0F92  300A               	movlw	10
  2110  0F93  00E4               	movwf	??_main+2
  2111  0F94                     u3550:	
  2112  0F94  0862               	movf	??_main,w
  2113  0F95  0084               	movwf	4
  2114  0F96  1783               	bsf	3,7	;select IRP bank3
  2115  0F97  0800               	movf	0,w
  2116  0F98  00E5               	movwf	??_main+3
  2117  0F99  0AE2               	incf	??_main,f
  2118  0F9A  0863               	movf	??_main+1,w
  2119  0F9B  0084               	movwf	4
  2120  0F9C  1383               	bcf	3,7	;select IRP bank1
  2121  0F9D  0865               	movf	??_main+3,w
  2122  0F9E  0080               	movwf	0
  2123  0F9F  0AE3               	incf	??_main+1,f
  2124  0FA0  0BE4               	decfsz	??_main+2,f
  2125  0FA1  2F94               	goto	u3550
  2126                           
  2127                           ;main.c: 133: FMTX(FMTX_Nref, FMTX_Nprg);
  2128  0FA2  1683               	bsf	3,5	;RP0=1, select bank1
  2129  0FA3  1303               	bcf	3,6	;RP1=0, select bank1
  2130  0FA4  084C               	movf	(_FMTX_Nref+1)^(0+128),w
  2131  0FA5  1283               	bcf	3,5	;RP0=0, select bank0
  2132  0FA6  1303               	bcf	3,6	;RP1=0, select bank0
  2133  0FA7  00DD               	movwf	FMTX@Nref+1
  2134  0FA8  1683               	bsf	3,5	;RP0=1, select bank1
  2135  0FA9  1303               	bcf	3,6	;RP1=0, select bank1
  2136  0FAA  084B               	movf	_FMTX_Nref^(0+128),w
  2137  0FAB  1283               	bcf	3,5	;RP0=0, select bank0
  2138  0FAC  1303               	bcf	3,6	;RP1=0, select bank0
  2139  0FAD  00DC               	movwf	FMTX@Nref
  2140  0FAE  30A3               	movlw	(low (main@FMTX_Nprg| 0))& (0+255)
  2141  0FAF  00DE               	movwf	FMTX@Nprg
  2142  0FB0  3000               	movlw	0
  2143  0FB1  00DF               	movwf	FMTX@Nprg+1
  2144  0FB2  120A  158A  2135  120A  158A  	fcall	_FMTX
  2145                           
  2146                           ;main.c: 134: CWTX(CWTX_Nref, CWTX_Nprg);
  2147  0FB7  1683               	bsf	3,5	;RP0=1, select bank1
  2148  0FB8  1303               	bcf	3,6	;RP1=0, select bank1
  2149  0FB9  0848               	movf	(_CWTX_Nref+1)^(0+128),w
  2150  0FBA  1283               	bcf	3,5	;RP0=0, select bank0
  2151  0FBB  1303               	bcf	3,6	;RP1=0, select bank0
  2152  0FBC  00DD               	movwf	CWTX@Nref+1
  2153  0FBD  1683               	bsf	3,5	;RP0=1, select bank1
  2154  0FBE  1303               	bcf	3,6	;RP1=0, select bank1
  2155  0FBF  0847               	movf	_CWTX_Nref^(0+128),w
  2156  0FC0  1283               	bcf	3,5	;RP0=0, select bank0
  2157  0FC1  1303               	bcf	3,6	;RP1=0, select bank0
  2158  0FC2  00DC               	movwf	CWTX@Nref
  2159  0FC3  30AD               	movlw	(low (main@CWTX_Nprg| 0))& (0+255)
  2160  0FC4  00DE               	movwf	CWTX@Nprg
  2161  0FC5  3000               	movlw	0
  2162  0FC6  00DF               	movwf	CWTX@Nprg+1
  2163  0FC7  120A  158A  20DD  120A  158A  	fcall	_CWTX
  2164                           
  2165                           ;main.c: 135: FMRX(FMRX_Nref, FMRX_Nprg);
  2166  0FCC  1683               	bsf	3,5	;RP0=1, select bank1
  2167  0FCD  1303               	bcf	3,6	;RP1=0, select bank1
  2168  0FCE  084A               	movf	(_FMRX_Nref+1)^(0+128),w
  2169  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  2170  0FD0  1303               	bcf	3,6	;RP1=0, select bank0
  2171  0FD1  00DD               	movwf	FMRX@Nref+1
  2172  0FD2  1683               	bsf	3,5	;RP0=1, select bank1
  2173  0FD3  1303               	bcf	3,6	;RP1=0, select bank1
  2174  0FD4  0849               	movf	_FMRX_Nref^(0+128),w
  2175  0FD5  1283               	bcf	3,5	;RP0=0, select bank0
  2176  0FD6  1303               	bcf	3,6	;RP1=0, select bank0
  2177  0FD7  00DC               	movwf	FMRX@Nref
  2178  0FD8  30B7               	movlw	(low (main@FMRX_Nprg| 0))& (0+255)
  2179  0FD9  00DE               	movwf	FMRX@Nprg
  2180  0FDA  3000               	movlw	0
  2181  0FDB  00DF               	movwf	FMRX@Nprg+1
  2182  0FDC  120A  158A  2109  120A  158A  	fcall	_FMRX
  2183                           
  2184                           ;main.c: 136: _delay((unsigned long)((500)*(10000000/4000.0)));
  2185  0FE1  3007               	movlw	7
  2186  0FE2  1283               	bcf	3,5	;RP0=0, select bank0
  2187  0FE3  1303               	bcf	3,6	;RP1=0, select bank0
  2188  0FE4  00E4               	movwf	??_main+2
  2189  0FE5  3058               	movlw	88
  2190  0FE6  00E3               	movwf	??_main+1
  2191  0FE7  305E               	movlw	94
  2192  0FE8  00E2               	movwf	??_main
  2193  0FE9                     u3637:	
  2194  0FE9  0BE2               	decfsz	??_main,f
  2195  0FEA  2FE9               	goto	u3637
  2196  0FEB  0BE3               	decfsz	??_main+1,f
  2197  0FEC  2FE9               	goto	u3637
  2198  0FED  0BE4               	decfsz	??_main+2,f
  2199  0FEE  2FE9               	goto	u3637
  2200  0FEF  2FF0               	nop2
  2201  0FF0                     l3862:	
  2202                           
  2203                           ;main.c: 138: }
  2204                           ;main.c: 143: _delay((unsigned long)((500)*(10000000/4000.0)));
  2205  0FF0  3007               	movlw	7
  2206  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  2207  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
  2208  0FF3  00E4               	movwf	??_main+2
  2209  0FF4  3058               	movlw	88
  2210  0FF5  00E3               	movwf	??_main+1
  2211  0FF6  305E               	movlw	94
  2212  0FF7  00E2               	movwf	??_main
  2213  0FF8                     u3647:	
  2214  0FF8  0BE2               	decfsz	??_main,f
  2215  0FF9  2FF8               	goto	u3647
  2216  0FFA  0BE3               	decfsz	??_main+1,f
  2217  0FFB  2FF8               	goto	u3647
  2218  0FFC  0BE4               	decfsz	??_main+2,f
  2219  0FFD  2FF8               	goto	u3647
  2220  0FFE  2FFF               	nop2
  2221  0FFF  2EBA               	goto	l3818
  2222  1000                     __end_of_main:	
  2223                           ;main.c: 144: }
  2224                           ;main.c: 145: return;
  2225                           
  2226                           
  2227                           	psect	text1
  2228  08B2                     __ptext1:	
  2229 ;; *************** function _strcmp *****************
  2230 ;; Defined at:
  2231 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strcmp.c"
  2232 ;; Parameters:    Size  Location     Type
  2233 ;;  s1              1    wreg     PTR const unsigned char 
  2234 ;;		 -> NULL(0), dData(32), 
  2235 ;;  s2              2    0[COMMON] PTR const unsigned char 
  2236 ;;		 -> main@EPS_kill(0), 
  2237 ;; Auto vars:     Size  Location     Type
  2238 ;;  s1              1    5[COMMON] PTR const unsigned char 
  2239 ;;		 -> NULL(0), dData(32), 
  2240 ;;  r               1    4[COMMON] char 
  2241 ;; Return value:  Size  Location     Type
  2242 ;;                  2    0[COMMON] int 
  2243 ;; Registers used:
  2244 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2250 ;;      Params:         2       0       0       0       0
  2251 ;;      Locals:         2       0       0       0       0
  2252 ;;      Temps:          2       0       0       0       0
  2253 ;;      Totals:         6       0       0       0       0
  2254 ;;Total ram usage:        6 bytes
  2255 ;; Hardware stack levels used:    1
  2256 ;; This function calls:
  2257 ;;		Nothing
  2258 ;; This function is called by:
  2259 ;;		_main
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           
  2264                           ;psect for function _strcmp
  2265  08B2                     _strcmp:	
  2266                           
  2267                           ;incstack = 0
  2268                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0]
  2269                           ;strcmp@s1 stored from wreg
  2270  08B2  00F5               	movwf	strcmp@s1
  2271  08B3  28BE               	goto	l3550
  2272  08B4                     l3548:	
  2273  08B4  3001               	movlw	1
  2274  08B5  00F2               	movwf	??_strcmp
  2275  08B6  0872               	movf	??_strcmp,w
  2276  08B7  07F5               	addwf	strcmp@s1,f
  2277  08B8  3001               	movlw	1
  2278  08B9  07F0               	addwf	strcmp@s2,f
  2279  08BA  1803               	skipnc
  2280  08BB  0AF1               	incf	strcmp@s2+1,f
  2281  08BC  3000               	movlw	0
  2282  08BD  07F1               	addwf	strcmp@s2+1,f
  2283  08BE                     l3550:	
  2284  08BE  0875               	movf	strcmp@s1,w
  2285  08BF  0084               	movwf	4
  2286  08C0  1783               	bsf	3,7	;select IRP bank2
  2287  08C1  0800               	movf	0,w
  2288  08C2  00F2               	movwf	??_strcmp
  2289  08C3  0870               	movf	strcmp@s2,w
  2290  08C4  0084               	movwf	4
  2291  08C5  1783               	bsf	3,7
  2292  08C6  1C71               	btfss	strcmp@s2+1,0
  2293  08C7  1383               	bcf	3,7
  2294  08C8  0300               	decf	0,w
  2295  08C9  3AFF               	xorlw	255
  2296  08CA  0772               	addwf	??_strcmp,w
  2297  08CB  00F3               	movwf	??_strcmp+1
  2298  08CC  0873               	movf	??_strcmp+1,w
  2299  08CD  00F4               	movwf	strcmp@r
  2300  08CE  0874               	movf	strcmp@r,w
  2301  08CF  1D03               	btfss	3,2
  2302  08D0  28D7               	goto	l3554
  2303  08D1  0875               	movf	strcmp@s1,w
  2304  08D2  0084               	movwf	4
  2305  08D3  1783               	bsf	3,7	;select IRP bank2
  2306  08D4  0800               	movf	0,w
  2307  08D5  1D03               	btfss	3,2
  2308  08D6  28B4               	goto	l3548
  2309  08D7                     l3554:	
  2310  08D7  0874               	movf	strcmp@r,w
  2311  08D8  00F0               	movwf	?_strcmp
  2312  08D9  01F1               	clrf	?_strcmp+1
  2313  08DA  1BF0               	btfsc	?_strcmp,7
  2314  08DB  03F1               	decf	?_strcmp+1,f
  2315  08DC  0008               	return
  2316  08DD                     __end_of_strcmp:	
  2317                           
  2318                           	psect	text2
  2319  0020                     __ptext2:	
  2320 ;; *************** function _sprintf *****************
  2321 ;; Defined at:
  2322 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;  sp              2    0[COMMON] PTR unsigned char 
  2325 ;;		 -> main@EPS_kill(0), 
  2326 ;;  f               1    2[COMMON] PTR const unsigned char 
  2327 ;;		 -> STR_15(5), 
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;  tmpval          4    0        struct .
  2330 ;;  cp              2    9[COMMON] PTR const unsigned char 
  2331 ;;		 -> STR_16(7), main@EPS_kill_1(3), 
  2332 ;;  len             2    0        unsigned int 
  2333 ;;  val             2    0        unsigned int 
  2334 ;;  c               1   11[COMMON] char 
  2335 ;;  ap              1    8[COMMON] PTR void [1]
  2336 ;;		 -> ?_sprintf(2), 
  2337 ;;  flag            1    7[COMMON] unsigned char 
  2338 ;;  prec            1    0        char 
  2339 ;; Return value:  Size  Location     Type
  2340 ;;                  2    0[COMMON] int 
  2341 ;; Registers used:
  2342 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  2343 ;; Tracked objects:
  2344 ;;		On entry : 0/0
  2345 ;;		On exit  : 0/0
  2346 ;;		Unchanged: 0/0
  2347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2348 ;;      Params:         6       0       0       0       0
  2349 ;;      Locals:         5       0       0       0       0
  2350 ;;      Temps:          1       0       0       0       0
  2351 ;;      Totals:        12       0       0       0       0
  2352 ;;Total ram usage:       12 bytes
  2353 ;; Hardware stack levels used:    2
  2354 ;; This function calls:
  2355 ;;		Nothing
  2356 ;; This function is called by:
  2357 ;;		_main
  2358 ;; This function uses a non-reentrant model
  2359 ;;
  2360                           
  2361                           
  2362                           ;psect for function _sprintf
  2363  0020                     _sprintf:	
  2364                           
  2365                           ;doprnt.c: 494: va_list ap;
  2366                           ;doprnt.c: 499: signed char c;
  2367                           ;doprnt.c: 506: signed char prec;
  2368                           ;doprnt.c: 508: unsigned char flag;
  2369                           ;doprnt.c: 523: union {
  2370                           ;doprnt.c: 524: unsigned long vd;
  2371                           ;doprnt.c: 525: double integ;
  2372                           ;doprnt.c: 526: } tmpval;
  2373                           ;doprnt.c: 528: unsigned int val;
  2374                           ;doprnt.c: 529: unsigned len;
  2375                           ;doprnt.c: 530: const char * cp;
  2376                           ;doprnt.c: 533: *ap = __va_start();
  2377                           
  2378                           ;incstack = 0
  2379                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  2380  0020  3073               	movlw	(low ((?_sprintf| 0+3)))& (0+255)
  2381  0021  00F6               	movwf	??_sprintf
  2382  0022  0876               	movf	??_sprintf,w
  2383  0023  00F8               	movwf	sprintf@ap
  2384                           
  2385                           ;doprnt.c: 635: switch(c = *f++) {
  2386  0024  287A               	goto	l3540
  2387  0025                     l3512:	
  2388                           ;doprnt.c: 728: case 's':
  2389                           
  2390                           ;doprnt.c: 638: goto alldone;
  2391                           
  2392                           ;doprnt.c: 637: case 0:
  2393                           
  2394                           
  2395                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  2396  0025  0878               	movf	sprintf@ap,w
  2397  0026  0084               	movwf	4
  2398  0027  0800               	movf	0,w
  2399  0028  00F9               	movwf	sprintf@cp
  2400  0029  3000               	movlw	0
  2401  002A  00FA               	movwf	sprintf@cp+1
  2402  002B  3001               	movlw	1
  2403  002C  00F6               	movwf	??_sprintf
  2404  002D  0876               	movf	??_sprintf,w
  2405  002E  07F8               	addwf	sprintf@ap,f
  2406                           
  2407                           ;doprnt.c: 740: if(!cp)
  2408  002F  0879               	movf	sprintf@cp,w
  2409  0030  047A               	iorwf	sprintf@cp+1,w
  2410  0031  1D03               	btfss	3,2
  2411  0032  2837               	goto	l3526
  2412                           
  2413                           ;doprnt.c: 741: cp = "(null)";
  2414  0033  3001               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  2415  0034  00F9               	movwf	sprintf@cp
  2416  0035  3080               	movlw	128
  2417  0036  00FA               	movwf	sprintf@cp+1
  2418  0037                     l3526:	
  2419                           ;doprnt.c: 777: while(*cp)
  2420                           
  2421  0037  087A               	movf	sprintf@cp+1,w
  2422  0038  1283               	bcf	3,5	;RP0=0, select bank0
  2423  0039  1303               	bcf	3,6	;RP1=0, select bank0
  2424  003A  00FF               	movwf	127
  2425  003B  0879               	movf	sprintf@cp,w
  2426  003C  0084               	movwf	4
  2427  003D  120A  158A  2000  120A  118A  	fcall	stringtab
  2428  0042  3A00               	xorlw	0
  2429  0043  1903               	btfsc	3,2
  2430  0044  287A               	goto	l3540
  2431                           
  2432                           ;doprnt.c: 778: ((*sp++ = (*cp++)));
  2433  0045  087A               	movf	sprintf@cp+1,w
  2434  0046  1283               	bcf	3,5	;RP0=0, select bank0
  2435  0047  1303               	bcf	3,6	;RP1=0, select bank0
  2436  0048  00FF               	movwf	127
  2437  0049  0879               	movf	sprintf@cp,w
  2438  004A  0084               	movwf	4
  2439  004B  120A  158A  2000  120A  118A  	fcall	stringtab
  2440  0050  00F6               	movwf	??_sprintf
  2441  0051  0870               	movf	sprintf@sp,w
  2442  0052  0084               	movwf	4
  2443  0053  1383               	bcf	3,7
  2444  0054  1871               	btfsc	sprintf@sp+1,0
  2445  0055  1783               	bsf	3,7
  2446  0056  0876               	movf	??_sprintf,w
  2447  0057  0080               	movwf	0
  2448  0058  3001               	movlw	1
  2449  0059  07F9               	addwf	sprintf@cp,f
  2450  005A  1803               	skipnc
  2451  005B  0AFA               	incf	sprintf@cp+1,f
  2452  005C  3001               	movlw	1
  2453  005D  07F0               	addwf	sprintf@sp,f
  2454  005E  1803               	skipnc
  2455  005F  0AF1               	incf	sprintf@sp+1,f
  2456  0060  3000               	movlw	0
  2457  0061  07F1               	addwf	sprintf@sp+1,f
  2458  0062  2837               	goto	l3526
  2459  0063                     l3528:	
  2460                           ;doprnt.c: 784: case 'c':
  2461                           
  2462                           ;doprnt.c: 779: continue;
  2463                           
  2464                           
  2465                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2466  0063  0878               	movf	sprintf@ap,w
  2467  0064  0084               	movwf	4
  2468  0065  0800               	movf	0,w
  2469  0066  00F6               	movwf	??_sprintf
  2470  0067  0876               	movf	??_sprintf,w
  2471  0068  00FB               	movwf	sprintf@c
  2472  0069  3002               	movlw	2
  2473  006A  00F6               	movwf	??_sprintf
  2474  006B  0876               	movf	??_sprintf,w
  2475  006C  07F8               	addwf	sprintf@ap,f
  2476  006D                     l3532:	
  2477                           ;doprnt.c: 802: default:
  2478                           
  2479                           
  2480                           ;doprnt.c: 809: ((*sp++ = (c)));
  2481  006D  0870               	movf	sprintf@sp,w
  2482  006E  0084               	movwf	4
  2483  006F  1383               	bcf	3,7
  2484  0070  1871               	btfsc	sprintf@sp+1,0
  2485  0071  1783               	bsf	3,7
  2486  0072  087B               	movf	sprintf@c,w
  2487  0073  0080               	movwf	0
  2488  0074  3001               	movlw	1
  2489  0075  07F0               	addwf	sprintf@sp,f
  2490  0076  1803               	skipnc
  2491  0077  0AF1               	incf	sprintf@sp+1,f
  2492  0078  3000               	movlw	0
  2493  0079  07F1               	addwf	sprintf@sp+1,f
  2494  007A                     l3540:	
  2495                           ;doprnt.c: 1422: {
  2496                           
  2497                           ;doprnt.c: 536: while(c = *f++) {
  2498                           
  2499                           ;doprnt.c: 822: }
  2500                           
  2501                           ;doprnt.c: 810: continue;
  2502                           
  2503  007A  3001               	movlw	1
  2504  007B  07F2               	addwf	sprintf@f,f
  2505  007C  30FF               	movlw	-1
  2506  007D  0772               	addwf	sprintf@f,w
  2507  007E  0084               	movwf	4
  2508  007F  120A  158A  200A  120A  118A  	fcall	stringdir
  2509  0084  00F6               	movwf	??_sprintf
  2510  0085  0876               	movf	??_sprintf,w
  2511  0086  00FB               	movwf	sprintf@c
  2512  0087  087B               	movf	sprintf@c,w
  2513  0088  1903               	btfsc	3,2
  2514  0089  28A5               	goto	l3542
  2515                           
  2516                           ;doprnt.c: 538: if(c != '%')
  2517  008A  3025               	movlw	37
  2518  008B  067B               	xorwf	sprintf@c,w
  2519  008C  1D03               	btfss	3,2
  2520  008D  286D               	goto	l3532
  2521                           
  2522                           ;doprnt.c: 543: }
  2523                           ;doprnt.c: 548: flag = 0;
  2524                           
  2525                           ;doprnt.c: 542: continue;
  2526                           
  2527                           ;doprnt.c: 540: {
  2528                           ;doprnt.c: 541: ((*sp++ = (c)));
  2529  008E  01F7               	clrf	sprintf@flag
  2530  008F  3001               	movlw	1
  2531  0090  07F2               	addwf	sprintf@f,f
  2532  0091  30FF               	movlw	-1
  2533  0092  0772               	addwf	sprintf@f,w
  2534  0093  0084               	movwf	4
  2535  0094  120A  158A  200A  120A  118A  	fcall	stringdir
  2536  0099  00FB               	movwf	sprintf@c
  2537                           
  2538                           ; Switch size 1, requested type "space"
  2539                           ; Number of cases is 3, Range of values is 0 to 115
  2540                           ; switch strategies available:
  2541                           ; Name         Instructions Cycles
  2542                           ; simple_byte           10     6 (average)
  2543                           ; jumptable            260     6 (fixed)
  2544                           ;	Chosen strategy is simple_byte
  2545  009A  3A00               	xorlw	0	; case 0
  2546  009B  1903               	skipnz
  2547  009C  28A5               	goto	l3542
  2548  009D  3A63               	xorlw	99	; case 99
  2549  009E  1903               	skipnz
  2550  009F  2863               	goto	l3528
  2551  00A0  3A10               	xorlw	16	; case 115
  2552  00A1  1903               	skipnz
  2553  00A2  2825               	goto	l3512
  2554  00A3  286D               	goto	l3532
  2555  00A4  287A               	goto	l3540
  2556  00A5                     l3542:	
  2557                           ;doprnt.c: 1469: }
  2558                           ;doprnt.c: 1533: }
  2559                           ;doprnt.c: 1535: alldone:
  2560                           
  2561                           
  2562                           ;doprnt.c: 1538: *sp = 0;
  2563  00A5  0870               	movf	sprintf@sp,w
  2564  00A6  0084               	movwf	4
  2565  00A7  1783               	bsf	3,7
  2566  00A8  1C71               	btfss	sprintf@sp+1,0
  2567  00A9  1383               	bcf	3,7
  2568  00AA  0180               	clrf	0
  2569  00AB  0008               	return
  2570  00AC                     __end_of_sprintf:	
  2571                           ;doprnt.c: 1540: return 0;
  2572                           ;	Return value of _sprintf is never used
  2573                           
  2574                           
  2575                           	psect	text3
  2576  0867                     __ptext3:	
  2577 ;; *************** function _Reset_EPS *****************
  2578 ;; Defined at:
  2579 ;;		line 19 in file "EPS.c"
  2580 ;; Parameters:    Size  Location     Type
  2581 ;;		None
  2582 ;; Auto vars:     Size  Location     Type
  2583 ;;		None
  2584 ;; Return value:  Size  Location     Type
  2585 ;;                  1    wreg      void 
  2586 ;; Registers used:
  2587 ;;		wreg
  2588 ;; Tracked objects:
  2589 ;;		On entry : 0/0
  2590 ;;		On exit  : 0/0
  2591 ;;		Unchanged: 0/0
  2592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2593 ;;      Params:         0       0       0       0       0
  2594 ;;      Locals:         0       0       0       0       0
  2595 ;;      Temps:          3       0       0       0       0
  2596 ;;      Totals:         3       0       0       0       0
  2597 ;;Total ram usage:        3 bytes
  2598 ;; Hardware stack levels used:    1
  2599 ;; This function calls:
  2600 ;;		Nothing
  2601 ;; This function is called by:
  2602 ;;		_main
  2603 ;; This function uses a non-reentrant model
  2604 ;;
  2605                           
  2606                           
  2607                           ;psect for function _Reset_EPS
  2608  0867                     _Reset_EPS:	
  2609                           
  2610                           ;EPS.c: 20: RB4 = 1;
  2611                           
  2612                           ;incstack = 0
  2613                           ; Regs used in _Reset_EPS: [wreg]
  2614  0867  1283               	bcf	3,5	;RP0=0, select bank0
  2615  0868  1303               	bcf	3,6	;RP1=0, select bank0
  2616  0869  1606               	bsf	6,4	;volatile
  2617                           
  2618                           ;EPS.c: 21: RA1 = 1;
  2619  086A  1485               	bsf	5,1	;volatile
  2620                           
  2621                           ;EPS.c: 22: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2622  086B  3040               	movlw	64
  2623  086C  00F2               	movwf	??_Reset_EPS+2
  2624  086D  306A               	movlw	106
  2625  086E  00F1               	movwf	??_Reset_EPS+1
  2626  086F  30D5               	movlw	213
  2627  0870  00F0               	movwf	??_Reset_EPS
  2628  0871                     u3657:	
  2629  0871  0BF0               	decfsz	??_Reset_EPS,f
  2630  0872  2871               	goto	u3657
  2631  0873  0BF1               	decfsz	??_Reset_EPS+1,f
  2632  0874  2871               	goto	u3657
  2633  0875  0BF2               	decfsz	??_Reset_EPS+2,f
  2634  0876  2871               	goto	u3657
  2635  0877  2878               	nop2
  2636                           
  2637                           ;EPS.c: 23: RB4 = 0;
  2638  0878  1283               	bcf	3,5	;RP0=0, select bank0
  2639  0879  1303               	bcf	3,6	;RP1=0, select bank0
  2640  087A  1206               	bcf	6,4	;volatile
  2641                           
  2642                           ;EPS.c: 24: RA1 = 0;
  2643  087B  1085               	bcf	5,1	;volatile
  2644                           
  2645                           ;EPS.c: 25: _delay((unsigned long)((500)*(10000000/4000.0)));
  2646  087C  3007               	movlw	7
  2647  087D  00F2               	movwf	??_Reset_EPS+2
  2648  087E  3058               	movlw	88
  2649  087F  00F1               	movwf	??_Reset_EPS+1
  2650  0880  305E               	movlw	94
  2651  0881  00F0               	movwf	??_Reset_EPS
  2652  0882                     u3667:	
  2653  0882  0BF0               	decfsz	??_Reset_EPS,f
  2654  0883  2882               	goto	u3667
  2655  0884  0BF1               	decfsz	??_Reset_EPS+1,f
  2656  0885  2882               	goto	u3667
  2657  0886  0BF2               	decfsz	??_Reset_EPS+2,f
  2658  0887  2882               	goto	u3667
  2659  0888  2889               	nop2
  2660  0889  0008               	return
  2661  088A                     __end_of_Reset_EPS:	
  2662                           
  2663                           	psect	text4
  2664  0A9B                     __ptext4:	
  2665 ;; *************** function _ReceivePacket_data *****************
  2666 ;; Defined at:
  2667 ;;		line 358 in file "decode_AX25.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;		None
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;  i               2   31[BANK0 ] unsigned int 
  2672 ;;  fcschecker      2   29[BANK0 ] unsigned int 
  2673 ;; Return value:  Size  Location     Type
  2674 ;;                  1    wreg      PTR unsigned char 
  2675 ;; Registers used:
  2676 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2677 ;; Tracked objects:
  2678 ;;		On entry : 0/0
  2679 ;;		On exit  : 0/0
  2680 ;;		Unchanged: 0/0
  2681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2682 ;;      Params:         0       0       0       0       0
  2683 ;;      Locals:         0       4       0       0       0
  2684 ;;      Temps:          2       0       0       0       0
  2685 ;;      Totals:         2       4       0       0       0
  2686 ;;Total ram usage:        6 bytes
  2687 ;; Hardware stack levels used:    1
  2688 ;; Hardware stack levels required when called:    2
  2689 ;; This function calls:
  2690 ;;		_fcscheck
  2691 ;;		_getdata
  2692 ;;		_waitFlag
  2693 ;; This function is called by:
  2694 ;;		_main
  2695 ;; This function uses a non-reentrant model
  2696 ;;
  2697                           
  2698                           
  2699                           ;psect for function _ReceivePacket_data
  2700  0A9B                     _ReceivePacket_data:	
  2701                           
  2702                           ;decode_AX25.c: 359: UINT fcschecker;
  2703                           ;decode_AX25.c: 362: waitFlag();
  2704                           
  2705                           ;incstack = 0
  2706                           ; Regs used in _ReceivePacket_data: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2707  0A9B  120A  118A  2327  120A  158A  	fcall	_waitFlag
  2708                           
  2709                           ;decode_AX25.c: 363: RB2 = 1;
  2710  0AA0  1283               	bcf	3,5	;RP0=0, select bank0
  2711  0AA1  1303               	bcf	3,6	;RP1=0, select bank0
  2712  0AA2  1506               	bsf	6,2	;volatile
  2713                           
  2714                           ;decode_AX25.c: 364: getdata();
  2715  0AA3  120A  158A  23FF  120A  158A  	fcall	_getdata
  2716                           
  2717                           ;decode_AX25.c: 365: RB2 = 0;
  2718  0AA8  1283               	bcf	3,5	;RP0=0, select bank0
  2719  0AA9  1303               	bcf	3,6	;RP1=0, select bank0
  2720  0AAA  1106               	bcf	6,2	;volatile
  2721                           
  2722                           ;decode_AX25.c: 366: fcschecker = fcscheck();
  2723  0AAB  120A  158A  24DD  120A  158A  	fcall	_fcscheck
  2724  0AB0  0871               	movf	?_fcscheck+1,w
  2725  0AB1  1283               	bcf	3,5	;RP0=0, select bank0
  2726  0AB2  1303               	bcf	3,6	;RP1=0, select bank0
  2727  0AB3  00BE               	movwf	ReceivePacket_data@fcschecker+1
  2728  0AB4  0870               	movf	?_fcscheck,w
  2729  0AB5  00BD               	movwf	ReceivePacket_data@fcschecker
  2730                           
  2731                           ;decode_AX25.c: 368: if(fcschecker == 1){
  2732  0AB6  033D               	decf	ReceivePacket_data@fcschecker,w
  2733  0AB7  043E               	iorwf	ReceivePacket_data@fcschecker+1,w
  2734  0AB8  1D03               	btfss	3,2
  2735  0AB9  2AE5               	goto	l3396
  2736                           
  2737                           ;decode_AX25.c: 369: for(UINT i=0; i<dPacketnum-18; i++){
  2738  0ABA  01BF               	clrf	ReceivePacket_data@i
  2739  0ABB  01C0               	clrf	ReceivePacket_data@i+1
  2740  0ABC                     l3386:	
  2741  0ABC  0866               	movf	_dPacketnum,w
  2742  0ABD  3EEE               	addlw	238
  2743  0ABE  00FA               	movwf	??_ReceivePacket_data
  2744  0ABF  0867               	movf	_dPacketnum+1,w
  2745  0AC0  1803               	skipnc
  2746  0AC1  3E01               	addlw	1
  2747  0AC2  3EFF               	addlw	255
  2748  0AC3  00FB               	movwf	??_ReceivePacket_data+1
  2749  0AC4  087B               	movf	??_ReceivePacket_data+1,w
  2750  0AC5  0240               	subwf	ReceivePacket_data@i+1,w
  2751  0AC6  1D03               	skipz
  2752  0AC7  2ACA               	goto	u3085
  2753  0AC8  087A               	movf	??_ReceivePacket_data,w
  2754  0AC9  023F               	subwf	ReceivePacket_data@i,w
  2755  0ACA                     u3085:	
  2756  0ACA  1803               	btfsc	3,0
  2757  0ACB  2ADF               	goto	l3388
  2758                           
  2759                           ;decode_AX25.c: 370: dData[i] = dPacket[i+16];
  2760  0ACC  083F               	movf	ReceivePacket_data@i,w
  2761  0ACD  3E10               	addlw	16
  2762  0ACE  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2763  0ACF  0084               	movwf	4
  2764  0AD0  1783               	bsf	3,7	;select IRP bank3
  2765  0AD1  0800               	movf	0,w
  2766  0AD2  00FA               	movwf	??_ReceivePacket_data
  2767  0AD3  083F               	movf	ReceivePacket_data@i,w
  2768  0AD4  3E30               	addlw	(low (_dData| (0+256)))& (0+255)
  2769  0AD5  0084               	movwf	4
  2770  0AD6  087A               	movf	??_ReceivePacket_data,w
  2771  0AD7  0080               	movwf	0
  2772  0AD8  3001               	movlw	1
  2773  0AD9  07BF               	addwf	ReceivePacket_data@i,f
  2774  0ADA  1803               	skipnc
  2775  0ADB  0AC0               	incf	ReceivePacket_data@i+1,f
  2776  0ADC  3000               	movlw	0
  2777  0ADD  07C0               	addwf	ReceivePacket_data@i+1,f
  2778  0ADE  2ABC               	goto	l3386
  2779  0ADF                     l3388:	
  2780                           
  2781                           ;decode_AX25.c: 371: }
  2782                           ;decode_AX25.c: 372: dPacketnum = 0;
  2783  0ADF  01E6               	clrf	_dPacketnum
  2784  0AE0  01E7               	clrf	_dPacketnum+1
  2785                           
  2786                           ;decode_AX25.c: 373: rcv_state = 0;
  2787  0AE1  01EA               	clrf	_rcv_state
  2788  0AE2  01EB               	clrf	_rcv_state+1
  2789                           
  2790                           ;decode_AX25.c: 374: return dData;
  2791  0AE3  3030               	movlw	(low (_dData| (0+256)))& (0+255)
  2792                           
  2793                           ;decode_AX25.c: 375: }else{
  2794  0AE4  0008               	return
  2795  0AE5                     l3396:	
  2796                           
  2797                           ;decode_AX25.c: 376: dPacketnum = 0;
  2798  0AE5  01E6               	clrf	_dPacketnum
  2799  0AE6  01E7               	clrf	_dPacketnum+1
  2800                           
  2801                           ;decode_AX25.c: 377: rcv_state = 0;
  2802  0AE7  01EA               	clrf	_rcv_state
  2803  0AE8  01EB               	clrf	_rcv_state+1
  2804                           
  2805                           ;decode_AX25.c: 378: return 0x00;
  2806  0AE9  3000               	movlw	0
  2807  0AEA  0008               	return
  2808  0AEB                     __end_of_ReceivePacket_data:	
  2809                           
  2810                           	psect	text5
  2811  0327                     __ptext5:	
  2812 ;; *************** function _waitFlag *****************
  2813 ;; Defined at:
  2814 ;;		line 53 in file "decode_AX25.c"
  2815 ;; Parameters:    Size  Location     Type
  2816 ;;		None
  2817 ;; Auto vars:     Size  Location     Type
  2818 ;;  j               2   24[BANK0 ] unsigned int 
  2819 ;;  j               2   10[BANK0 ] unsigned int 
  2820 ;;  j               2   22[BANK0 ] unsigned int 
  2821 ;;  j               2    8[BANK0 ] unsigned int 
  2822 ;;  j               2   20[BANK0 ] unsigned int 
  2823 ;;  j               2    6[BANK0 ] unsigned int 
  2824 ;;  j               2   18[BANK0 ] unsigned int 
  2825 ;;  j               2    4[BANK0 ] unsigned int 
  2826 ;;  j               2   16[BANK0 ] unsigned int 
  2827 ;;  j               2    2[BANK0 ] unsigned int 
  2828 ;;  i               2    0[BANK0 ] unsigned int 
  2829 ;;  j               2   14[BANK0 ] unsigned int 
  2830 ;;  j               2   12[BANK0 ] unsigned int 
  2831 ;;  flag_judge      2   26[BANK0 ] unsigned int 
  2832 ;;  buf             1   28[BANK0 ] unsigned char 
  2833 ;; Return value:  Size  Location     Type
  2834 ;;                  1    wreg      void 
  2835 ;; Registers used:
  2836 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2837 ;; Tracked objects:
  2838 ;;		On entry : 0/0
  2839 ;;		On exit  : 0/0
  2840 ;;		Unchanged: 0/0
  2841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2842 ;;      Params:         0       0       0       0       0
  2843 ;;      Locals:         0      29       0       0       0
  2844 ;;      Temps:          4       0       0       0       0
  2845 ;;      Totals:         4      29       0       0       0
  2846 ;;Total ram usage:       33 bytes
  2847 ;; Hardware stack levels used:    1
  2848 ;; Hardware stack levels required when called:    1
  2849 ;; This function calls:
  2850 ;;		_getbit
  2851 ;; This function is called by:
  2852 ;;		_ReceivePacket_data
  2853 ;;		_ReceivePacket
  2854 ;; This function uses a non-reentrant model
  2855 ;;
  2856                           
  2857                           
  2858                           ;psect for function _waitFlag
  2859  0327                     _waitFlag:	
  2860                           
  2861                           ;decode_AX25.c: 54: UINT flag_judge;
  2862                           ;decode_AX25.c: 55: UBYTE buf = 0xff;
  2863                           
  2864                           ;incstack = 0
  2865                           ; Regs used in _waitFlag: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2866  0327  30FF               	movlw	255
  2867  0328  00F6               	movwf	??_waitFlag
  2868  0329  0876               	movf	??_waitFlag,w
  2869  032A  1283               	bcf	3,5	;RP0=0, select bank0
  2870  032B  1303               	bcf	3,6	;RP1=0, select bank0
  2871  032C  00BC               	movwf	waitFlag@buf
  2872  032D                     L6:	
  2873                           
  2874                           ;decode_AX25.c: 270: rcv_state = 0;
  2875  032D  01EA               	clrf	_rcv_state
  2876  032E  01EB               	clrf	_rcv_state+1
  2877  032F                     l3080:	
  2878  032F  3000               	movlw	0
  2879  0330  026B               	subwf	_rcv_state+1,w
  2880  0331  3002               	movlw	2
  2881  0332  1903               	skipnz
  2882  0333  026A               	subwf	_rcv_state,w
  2883  0334  1803               	btfsc	3,0
  2884  0335  0008               	return
  2885  0336                     l2714:	
  2886                           ;decode_AX25.c: 58: while(buf != 0x7e){
  2887                           
  2888                           ;decode_AX25.c: 57: while(rcv_state < 2){
  2889                           
  2890                           ;decode_AX25.c: 56: rcv_state = 0;
  2891                           
  2892  0336  307E               	movlw	126
  2893  0337  063C               	xorwf	waitFlag@buf,w
  2894  0338  1903               	btfsc	3,2
  2895  0339  2B86               	goto	l2736
  2896                           
  2897                           ;decode_AX25.c: 59: flag_judge = getbit();
  2898  033A  120A  158A  224F  120A  118A  	fcall	_getbit
  2899  033F  0871               	movf	?_getbit+1,w
  2900  0340  1283               	bcf	3,5	;RP0=0, select bank0
  2901  0341  1303               	bcf	3,6	;RP1=0, select bank0
  2902  0342  00BB               	movwf	waitFlag@flag_judge+1
  2903  0343  0870               	movf	?_getbit,w
  2904  0344  00BA               	movwf	waitFlag@flag_judge
  2905                           
  2906                           ;decode_AX25.c: 60: buf = buf << 1;
  2907  0345  083C               	movf	waitFlag@buf,w
  2908  0346  00F6               	movwf	??_waitFlag
  2909  0347  0776               	addwf	??_waitFlag,w
  2910  0348  00F7               	movwf	??_waitFlag+1
  2911  0349  0877               	movf	??_waitFlag+1,w
  2912  034A  00BC               	movwf	waitFlag@buf
  2913                           
  2914                           ;decode_AX25.c: 62: buf = buf | 0x00;
  2915  034B  083A               	movf	waitFlag@flag_judge,w
  2916  034C  043B               	iorwf	waitFlag@flag_judge+1,w
  2917  034D  1903               	btfsc	3,2
  2918  034E  2B36               	goto	l2714
  2919                           
  2920                           ;decode_AX25.c: 64: buf = buf | 0x01;
  2921                           
  2922                           ;decode_AX25.c: 63: }else{
  2923  034F  083C               	movf	waitFlag@buf,w
  2924  0350  3801               	iorlw	1
  2925  0351  00F6               	movwf	??_waitFlag
  2926  0352  0876               	movf	??_waitFlag,w
  2927  0353  00BC               	movwf	waitFlag@buf
  2928  0354  2B36               	goto	l2714
  2929  0355                     l2716:	
  2930                           ;decode_AX25.c: 65: }
  2931                           ;decode_AX25.c: 66: }
  2932                           ;decode_AX25.c: 70: while(buf == 0x7e){
  2933                           
  2934                           
  2935                           ;decode_AX25.c: 71: for(UINT i=0;i<8;i++){
  2936  0355  01A0               	clrf	waitFlag@i
  2937  0356  01A1               	clrf	waitFlag@i+1
  2938  0357  3000               	movlw	0
  2939  0358  0221               	subwf	waitFlag@i+1,w
  2940  0359  3008               	movlw	8
  2941  035A  1903               	skipnz
  2942  035B  0220               	subwf	waitFlag@i,w
  2943  035C  1803               	btfsc	3,0
  2944  035D  2B86               	goto	l2736
  2945  035E                     l2722:	
  2946                           
  2947                           ;decode_AX25.c: 72: flag_judge = getbit();
  2948  035E  120A  158A  224F  120A  118A  	fcall	_getbit
  2949  0363  0871               	movf	?_getbit+1,w
  2950  0364  1283               	bcf	3,5	;RP0=0, select bank0
  2951  0365  1303               	bcf	3,6	;RP1=0, select bank0
  2952  0366  00BB               	movwf	waitFlag@flag_judge+1
  2953  0367  0870               	movf	?_getbit,w
  2954  0368  00BA               	movwf	waitFlag@flag_judge
  2955                           
  2956                           ;decode_AX25.c: 73: buf = buf >> 1;
  2957  0369  083C               	movf	waitFlag@buf,w
  2958  036A  00F6               	movwf	??_waitFlag
  2959  036B  1003               	clrc
  2960  036C  0C76               	rrf	??_waitFlag,w
  2961  036D  00F7               	movwf	??_waitFlag+1
  2962  036E  0877               	movf	??_waitFlag+1,w
  2963  036F  00BC               	movwf	waitFlag@buf
  2964                           
  2965                           ;decode_AX25.c: 75: buf = buf | 0x00;
  2966  0370  083A               	movf	waitFlag@flag_judge,w
  2967  0371  043B               	iorwf	waitFlag@flag_judge+1,w
  2968  0372  1903               	btfsc	3,2
  2969  0373  2B79               	goto	l2732
  2970                           
  2971                           ;decode_AX25.c: 77: buf = buf | 0x80;
  2972                           
  2973                           ;decode_AX25.c: 76: }else{
  2974  0374  083C               	movf	waitFlag@buf,w
  2975  0375  3880               	iorlw	128
  2976  0376  00F6               	movwf	??_waitFlag
  2977  0377  0876               	movf	??_waitFlag,w
  2978  0378  00BC               	movwf	waitFlag@buf
  2979  0379                     l2732:	
  2980  0379  3001               	movlw	1
  2981  037A  07A0               	addwf	waitFlag@i,f
  2982  037B  1803               	skipnc
  2983  037C  0AA1               	incf	waitFlag@i+1,f
  2984  037D  3000               	movlw	0
  2985  037E  07A1               	addwf	waitFlag@i+1,f
  2986  037F  3000               	movlw	0
  2987  0380  0221               	subwf	waitFlag@i+1,w
  2988  0381  3008               	movlw	8
  2989  0382  1903               	skipnz
  2990  0383  0220               	subwf	waitFlag@i,w
  2991  0384  1C03               	skipc
  2992  0385  2B5E               	goto	l2722
  2993  0386                     l2736:	
  2994  0386  307E               	movlw	126
  2995  0387  063C               	xorwf	waitFlag@buf,w
  2996  0388  1903               	btfsc	3,2
  2997  0389  2B55               	goto	l2716
  2998                           
  2999                           ;decode_AX25.c: 78: }
  3000                           ;decode_AX25.c: 79: }
  3001                           ;decode_AX25.c: 80: }
  3002                           ;decode_AX25.c: 81: if(buf == ("JQ1YCZ"[0] << 1)){
  3003  038A  300F               	movlw	low (STR_1-__stringbase)
  3004  038B  0084               	movwf	4
  3005  038C  120A  158A  200A  120A  118A  	fcall	stringdir
  3006  0391  00F6               	movwf	??_waitFlag
  3007  0392  01F7               	clrf	??_waitFlag+1
  3008  0393  1003               	clrc
  3009  0394  0DF6               	rlf	??_waitFlag,f
  3010  0395  0DF7               	rlf	??_waitFlag+1,f
  3011  0396  083C               	movf	waitFlag@buf,w
  3012  0397  00F8               	movwf	??_waitFlag+2
  3013  0398  01F9               	clrf	??_waitFlag+3
  3014  0399  0877               	movf	??_waitFlag+1,w
  3015  039A  0679               	xorwf	??_waitFlag+3,w
  3016  039B  1D03               	skipz
  3017  039C  2B9F               	goto	u2175
  3018  039D  0876               	movf	??_waitFlag,w
  3019  039E  0678               	xorwf	??_waitFlag+2,w
  3020  039F                     u2175:	
  3021  039F  1D03               	skipz
  3022  03A0  2D64               	goto	l2886
  3023                           
  3024                           ;decode_AX25.c: 82: dPacket[dPacketnum] = buf;
  3025  03A1  083C               	movf	waitFlag@buf,w
  3026  03A2  00F6               	movwf	??_waitFlag
  3027  03A3  0866               	movf	_dPacketnum,w
  3028  03A4  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3029  03A5  0084               	movwf	4
  3030  03A6  0876               	movf	??_waitFlag,w
  3031  03A7  1783               	bsf	3,7	;select IRP bank3
  3032  03A8  0080               	movwf	0
  3033                           
  3034                           ;decode_AX25.c: 83: dPacketnum ++;
  3035  03A9  3001               	movlw	1
  3036  03AA  07E6               	addwf	_dPacketnum,f
  3037  03AB  1803               	skipnc
  3038  03AC  0AE7               	incf	_dPacketnum+1,f
  3039  03AD  3000               	movlw	0
  3040  03AE  07E7               	addwf	_dPacketnum+1,f
  3041                           
  3042                           ;decode_AX25.c: 84: for(UINT j=0;j<8;j++){
  3043  03AF  01A2               	clrf	waitFlag@j
  3044  03B0  01A3               	clrf	waitFlag@j+1
  3045  03B1  3000               	movlw	0
  3046  03B2  0223               	subwf	waitFlag@j+1,w
  3047  03B3  3008               	movlw	8
  3048  03B4  1903               	skipnz
  3049  03B5  0222               	subwf	waitFlag@j,w
  3050  03B6  1803               	btfsc	3,0
  3051  03B7  2BE0               	goto	l2764
  3052  03B8                     l2750:	
  3053                           
  3054                           ;decode_AX25.c: 85: flag_judge = getbit();
  3055  03B8  120A  158A  224F  120A  118A  	fcall	_getbit
  3056  03BD  0871               	movf	?_getbit+1,w
  3057  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  3058  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  3059  03C0  00BB               	movwf	waitFlag@flag_judge+1
  3060  03C1  0870               	movf	?_getbit,w
  3061  03C2  00BA               	movwf	waitFlag@flag_judge
  3062                           
  3063                           ;decode_AX25.c: 86: buf = buf >> 1;
  3064  03C3  083C               	movf	waitFlag@buf,w
  3065  03C4  00F6               	movwf	??_waitFlag
  3066  03C5  1003               	clrc
  3067  03C6  0C76               	rrf	??_waitFlag,w
  3068  03C7  00F7               	movwf	??_waitFlag+1
  3069  03C8  0877               	movf	??_waitFlag+1,w
  3070  03C9  00BC               	movwf	waitFlag@buf
  3071                           
  3072                           ;decode_AX25.c: 88: buf = buf | 0x00;
  3073  03CA  083A               	movf	waitFlag@flag_judge,w
  3074  03CB  043B               	iorwf	waitFlag@flag_judge+1,w
  3075  03CC  1903               	btfsc	3,2
  3076  03CD  2BD3               	goto	l2760
  3077                           
  3078                           ;decode_AX25.c: 90: buf = buf | 0x80;
  3079                           
  3080                           ;decode_AX25.c: 89: }else{
  3081  03CE  083C               	movf	waitFlag@buf,w
  3082  03CF  3880               	iorlw	128
  3083  03D0  00F6               	movwf	??_waitFlag
  3084  03D1  0876               	movf	??_waitFlag,w
  3085  03D2  00BC               	movwf	waitFlag@buf
  3086  03D3                     l2760:	
  3087  03D3  3001               	movlw	1
  3088  03D4  07A2               	addwf	waitFlag@j,f
  3089  03D5  1803               	skipnc
  3090  03D6  0AA3               	incf	waitFlag@j+1,f
  3091  03D7  3000               	movlw	0
  3092  03D8  07A3               	addwf	waitFlag@j+1,f
  3093  03D9  3000               	movlw	0
  3094  03DA  0223               	subwf	waitFlag@j+1,w
  3095  03DB  3008               	movlw	8
  3096  03DC  1903               	skipnz
  3097  03DD  0222               	subwf	waitFlag@j,w
  3098  03DE  1C03               	skipc
  3099  03DF  2BB8               	goto	l2750
  3100  03E0                     l2764:	
  3101                           
  3102                           ;decode_AX25.c: 91: }
  3103                           ;decode_AX25.c: 92: }
  3104                           ;decode_AX25.c: 93: if(buf == ("JQ1YCZ"[1] << 1)){
  3105  03E0  3010               	movlw	low (((STR_1+1)-__stringbase)| (0+32768))
  3106  03E1  0084               	movwf	4
  3107  03E2  120A  158A  200A  120A  118A  	fcall	stringdir
  3108  03E7  00F6               	movwf	??_waitFlag
  3109  03E8  01F7               	clrf	??_waitFlag+1
  3110  03E9  1003               	clrc
  3111  03EA  0DF6               	rlf	??_waitFlag,f
  3112  03EB  0DF7               	rlf	??_waitFlag+1,f
  3113  03EC  083C               	movf	waitFlag@buf,w
  3114  03ED  00F8               	movwf	??_waitFlag+2
  3115  03EE  01F9               	clrf	??_waitFlag+3
  3116  03EF  0877               	movf	??_waitFlag+1,w
  3117  03F0  0679               	xorwf	??_waitFlag+3,w
  3118  03F1  1D03               	skipz
  3119  03F2  2BF5               	goto	u2215
  3120  03F3  0876               	movf	??_waitFlag,w
  3121  03F4  0678               	xorwf	??_waitFlag+2,w
  3122  03F5                     u2215:	
  3123  03F5  1D03               	skipz
  3124  03F6  2D64               	goto	l2886
  3125                           
  3126                           ;decode_AX25.c: 94: dPacket[dPacketnum] = buf;
  3127  03F7  083C               	movf	waitFlag@buf,w
  3128  03F8  00F6               	movwf	??_waitFlag
  3129  03F9  0866               	movf	_dPacketnum,w
  3130  03FA  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3131  03FB  0084               	movwf	4
  3132  03FC  0876               	movf	??_waitFlag,w
  3133  03FD  1783               	bsf	3,7	;select IRP bank3
  3134  03FE  0080               	movwf	0
  3135                           
  3136                           ;decode_AX25.c: 95: dPacketnum ++;
  3137  03FF  3001               	movlw	1
  3138  0400  07E6               	addwf	_dPacketnum,f
  3139  0401  1803               	skipnc
  3140  0402  0AE7               	incf	_dPacketnum+1,f
  3141  0403  3000               	movlw	0
  3142  0404  07E7               	addwf	_dPacketnum+1,f
  3143                           
  3144                           ;decode_AX25.c: 96: for(UINT j=0;j<8;j++){
  3145  0405  01A4               	clrf	waitFlag@j_105
  3146  0406  01A5               	clrf	waitFlag@j_105+1
  3147  0407  3000               	movlw	0
  3148  0408  0225               	subwf	waitFlag@j_105+1,w
  3149  0409  3008               	movlw	8
  3150  040A  1903               	skipnz
  3151  040B  0224               	subwf	waitFlag@j_105,w
  3152  040C  1803               	btfsc	3,0
  3153  040D  2C36               	goto	l2790
  3154  040E                     l2776:	
  3155                           
  3156                           ;decode_AX25.c: 97: flag_judge = getbit();
  3157  040E  120A  158A  224F  120A  118A  	fcall	_getbit
  3158  0413  0871               	movf	?_getbit+1,w
  3159  0414  1283               	bcf	3,5	;RP0=0, select bank0
  3160  0415  1303               	bcf	3,6	;RP1=0, select bank0
  3161  0416  00BB               	movwf	waitFlag@flag_judge+1
  3162  0417  0870               	movf	?_getbit,w
  3163  0418  00BA               	movwf	waitFlag@flag_judge
  3164                           
  3165                           ;decode_AX25.c: 98: buf = buf >> 1;
  3166  0419  083C               	movf	waitFlag@buf,w
  3167  041A  00F6               	movwf	??_waitFlag
  3168  041B  1003               	clrc
  3169  041C  0C76               	rrf	??_waitFlag,w
  3170  041D  00F7               	movwf	??_waitFlag+1
  3171  041E  0877               	movf	??_waitFlag+1,w
  3172  041F  00BC               	movwf	waitFlag@buf
  3173                           
  3174                           ;decode_AX25.c: 100: buf = buf | 0x00;
  3175  0420  083A               	movf	waitFlag@flag_judge,w
  3176  0421  043B               	iorwf	waitFlag@flag_judge+1,w
  3177  0422  1903               	btfsc	3,2
  3178  0423  2C29               	goto	l2786
  3179                           
  3180                           ;decode_AX25.c: 102: buf = buf | 0x80;
  3181                           
  3182                           ;decode_AX25.c: 101: }else{
  3183  0424  083C               	movf	waitFlag@buf,w
  3184  0425  3880               	iorlw	128
  3185  0426  00F6               	movwf	??_waitFlag
  3186  0427  0876               	movf	??_waitFlag,w
  3187  0428  00BC               	movwf	waitFlag@buf
  3188  0429                     l2786:	
  3189  0429  3001               	movlw	1
  3190  042A  07A4               	addwf	waitFlag@j_105,f
  3191  042B  1803               	skipnc
  3192  042C  0AA5               	incf	waitFlag@j_105+1,f
  3193  042D  3000               	movlw	0
  3194  042E  07A5               	addwf	waitFlag@j_105+1,f
  3195  042F  3000               	movlw	0
  3196  0430  0225               	subwf	waitFlag@j_105+1,w
  3197  0431  3008               	movlw	8
  3198  0432  1903               	skipnz
  3199  0433  0224               	subwf	waitFlag@j_105,w
  3200  0434  1C03               	skipc
  3201  0435  2C0E               	goto	l2776
  3202  0436                     l2790:	
  3203                           
  3204                           ;decode_AX25.c: 103: }
  3205                           ;decode_AX25.c: 104: }
  3206                           ;decode_AX25.c: 105: if(buf == ("JQ1YCZ"[2] << 1)){
  3207  0436  3011               	movlw	low (((STR_1+2)-__stringbase)| (0+32768))
  3208  0437  0084               	movwf	4
  3209  0438  120A  158A  200A  120A  118A  	fcall	stringdir
  3210  043D  00F6               	movwf	??_waitFlag
  3211  043E  01F7               	clrf	??_waitFlag+1
  3212  043F  1003               	clrc
  3213  0440  0DF6               	rlf	??_waitFlag,f
  3214  0441  0DF7               	rlf	??_waitFlag+1,f
  3215  0442  083C               	movf	waitFlag@buf,w
  3216  0443  00F8               	movwf	??_waitFlag+2
  3217  0444  01F9               	clrf	??_waitFlag+3
  3218  0445  0877               	movf	??_waitFlag+1,w
  3219  0446  0679               	xorwf	??_waitFlag+3,w
  3220  0447  1D03               	skipz
  3221  0448  2C4B               	goto	u2255
  3222  0449  0876               	movf	??_waitFlag,w
  3223  044A  0678               	xorwf	??_waitFlag+2,w
  3224  044B                     u2255:	
  3225  044B  1D03               	skipz
  3226  044C  2D64               	goto	l2886
  3227                           
  3228                           ;decode_AX25.c: 106: dPacket[dPacketnum] = buf;
  3229  044D  083C               	movf	waitFlag@buf,w
  3230  044E  00F6               	movwf	??_waitFlag
  3231  044F  0866               	movf	_dPacketnum,w
  3232  0450  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3233  0451  0084               	movwf	4
  3234  0452  0876               	movf	??_waitFlag,w
  3235  0453  1783               	bsf	3,7	;select IRP bank3
  3236  0454  0080               	movwf	0
  3237                           
  3238                           ;decode_AX25.c: 107: dPacketnum ++;
  3239  0455  3001               	movlw	1
  3240  0456  07E6               	addwf	_dPacketnum,f
  3241  0457  1803               	skipnc
  3242  0458  0AE7               	incf	_dPacketnum+1,f
  3243  0459  3000               	movlw	0
  3244  045A  07E7               	addwf	_dPacketnum+1,f
  3245                           
  3246                           ;decode_AX25.c: 108: for(UINT j=0;j<8;j++){
  3247  045B  01A6               	clrf	waitFlag@j_107
  3248  045C  01A7               	clrf	waitFlag@j_107+1
  3249  045D  3000               	movlw	0
  3250  045E  0227               	subwf	waitFlag@j_107+1,w
  3251  045F  3008               	movlw	8
  3252  0460  1903               	skipnz
  3253  0461  0226               	subwf	waitFlag@j_107,w
  3254  0462  1803               	btfsc	3,0
  3255  0463  2C8C               	goto	l2816
  3256  0464                     l2802:	
  3257                           
  3258                           ;decode_AX25.c: 109: flag_judge = getbit();
  3259  0464  120A  158A  224F  120A  118A  	fcall	_getbit
  3260  0469  0871               	movf	?_getbit+1,w
  3261  046A  1283               	bcf	3,5	;RP0=0, select bank0
  3262  046B  1303               	bcf	3,6	;RP1=0, select bank0
  3263  046C  00BB               	movwf	waitFlag@flag_judge+1
  3264  046D  0870               	movf	?_getbit,w
  3265  046E  00BA               	movwf	waitFlag@flag_judge
  3266                           
  3267                           ;decode_AX25.c: 110: buf = buf >> 1;
  3268  046F  083C               	movf	waitFlag@buf,w
  3269  0470  00F6               	movwf	??_waitFlag
  3270  0471  1003               	clrc
  3271  0472  0C76               	rrf	??_waitFlag,w
  3272  0473  00F7               	movwf	??_waitFlag+1
  3273  0474  0877               	movf	??_waitFlag+1,w
  3274  0475  00BC               	movwf	waitFlag@buf
  3275                           
  3276                           ;decode_AX25.c: 112: buf = buf | 0x00;
  3277  0476  083A               	movf	waitFlag@flag_judge,w
  3278  0477  043B               	iorwf	waitFlag@flag_judge+1,w
  3279  0478  1903               	btfsc	3,2
  3280  0479  2C7F               	goto	l2812
  3281                           
  3282                           ;decode_AX25.c: 114: buf = buf | 0x80;
  3283                           
  3284                           ;decode_AX25.c: 113: }else{
  3285  047A  083C               	movf	waitFlag@buf,w
  3286  047B  3880               	iorlw	128
  3287  047C  00F6               	movwf	??_waitFlag
  3288  047D  0876               	movf	??_waitFlag,w
  3289  047E  00BC               	movwf	waitFlag@buf
  3290  047F                     l2812:	
  3291  047F  3001               	movlw	1
  3292  0480  07A6               	addwf	waitFlag@j_107,f
  3293  0481  1803               	skipnc
  3294  0482  0AA7               	incf	waitFlag@j_107+1,f
  3295  0483  3000               	movlw	0
  3296  0484  07A7               	addwf	waitFlag@j_107+1,f
  3297  0485  3000               	movlw	0
  3298  0486  0227               	subwf	waitFlag@j_107+1,w
  3299  0487  3008               	movlw	8
  3300  0488  1903               	skipnz
  3301  0489  0226               	subwf	waitFlag@j_107,w
  3302  048A  1C03               	skipc
  3303  048B  2C64               	goto	l2802
  3304  048C                     l2816:	
  3305                           
  3306                           ;decode_AX25.c: 115: }
  3307                           ;decode_AX25.c: 116: }
  3308                           ;decode_AX25.c: 117: if(buf == ("JQ1YCZ"[3] << 1)){
  3309  048C  3012               	movlw	low (((STR_1+3)-__stringbase)| (0+32768))
  3310  048D  0084               	movwf	4
  3311  048E  120A  158A  200A  120A  118A  	fcall	stringdir
  3312  0493  00F6               	movwf	??_waitFlag
  3313  0494  01F7               	clrf	??_waitFlag+1
  3314  0495  1003               	clrc
  3315  0496  0DF6               	rlf	??_waitFlag,f
  3316  0497  0DF7               	rlf	??_waitFlag+1,f
  3317  0498  083C               	movf	waitFlag@buf,w
  3318  0499  00F8               	movwf	??_waitFlag+2
  3319  049A  01F9               	clrf	??_waitFlag+3
  3320  049B  0877               	movf	??_waitFlag+1,w
  3321  049C  0679               	xorwf	??_waitFlag+3,w
  3322  049D  1D03               	skipz
  3323  049E  2CA1               	goto	u2295
  3324  049F  0876               	movf	??_waitFlag,w
  3325  04A0  0678               	xorwf	??_waitFlag+2,w
  3326  04A1                     u2295:	
  3327  04A1  1D03               	skipz
  3328  04A2  2D64               	goto	l2886
  3329                           
  3330                           ;decode_AX25.c: 118: dPacket[dPacketnum] = buf;
  3331  04A3  083C               	movf	waitFlag@buf,w
  3332  04A4  00F6               	movwf	??_waitFlag
  3333  04A5  0866               	movf	_dPacketnum,w
  3334  04A6  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3335  04A7  0084               	movwf	4
  3336  04A8  0876               	movf	??_waitFlag,w
  3337  04A9  1783               	bsf	3,7	;select IRP bank3
  3338  04AA  0080               	movwf	0
  3339                           
  3340                           ;decode_AX25.c: 119: dPacketnum ++;
  3341  04AB  3001               	movlw	1
  3342  04AC  07E6               	addwf	_dPacketnum,f
  3343  04AD  1803               	skipnc
  3344  04AE  0AE7               	incf	_dPacketnum+1,f
  3345  04AF  3000               	movlw	0
  3346  04B0  07E7               	addwf	_dPacketnum+1,f
  3347                           
  3348                           ;decode_AX25.c: 120: for(UINT j=0;j<8;j++){
  3349  04B1  01A8               	clrf	waitFlag@j_109
  3350  04B2  01A9               	clrf	waitFlag@j_109+1
  3351  04B3  3000               	movlw	0
  3352  04B4  0229               	subwf	waitFlag@j_109+1,w
  3353  04B5  3008               	movlw	8
  3354  04B6  1903               	skipnz
  3355  04B7  0228               	subwf	waitFlag@j_109,w
  3356  04B8  1803               	btfsc	3,0
  3357  04B9  2CE2               	goto	l2842
  3358  04BA                     l2828:	
  3359                           
  3360                           ;decode_AX25.c: 121: flag_judge = getbit();
  3361  04BA  120A  158A  224F  120A  118A  	fcall	_getbit
  3362  04BF  0871               	movf	?_getbit+1,w
  3363  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  3364  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  3365  04C2  00BB               	movwf	waitFlag@flag_judge+1
  3366  04C3  0870               	movf	?_getbit,w
  3367  04C4  00BA               	movwf	waitFlag@flag_judge
  3368                           
  3369                           ;decode_AX25.c: 122: buf = buf >> 1;
  3370  04C5  083C               	movf	waitFlag@buf,w
  3371  04C6  00F6               	movwf	??_waitFlag
  3372  04C7  1003               	clrc
  3373  04C8  0C76               	rrf	??_waitFlag,w
  3374  04C9  00F7               	movwf	??_waitFlag+1
  3375  04CA  0877               	movf	??_waitFlag+1,w
  3376  04CB  00BC               	movwf	waitFlag@buf
  3377                           
  3378                           ;decode_AX25.c: 124: buf = buf | 0x00;
  3379  04CC  083A               	movf	waitFlag@flag_judge,w
  3380  04CD  043B               	iorwf	waitFlag@flag_judge+1,w
  3381  04CE  1903               	btfsc	3,2
  3382  04CF  2CD5               	goto	l2838
  3383                           
  3384                           ;decode_AX25.c: 126: buf = buf | 0x80;
  3385                           
  3386                           ;decode_AX25.c: 125: }else{
  3387  04D0  083C               	movf	waitFlag@buf,w
  3388  04D1  3880               	iorlw	128
  3389  04D2  00F6               	movwf	??_waitFlag
  3390  04D3  0876               	movf	??_waitFlag,w
  3391  04D4  00BC               	movwf	waitFlag@buf
  3392  04D5                     l2838:	
  3393  04D5  3001               	movlw	1
  3394  04D6  07A8               	addwf	waitFlag@j_109,f
  3395  04D7  1803               	skipnc
  3396  04D8  0AA9               	incf	waitFlag@j_109+1,f
  3397  04D9  3000               	movlw	0
  3398  04DA  07A9               	addwf	waitFlag@j_109+1,f
  3399  04DB  3000               	movlw	0
  3400  04DC  0229               	subwf	waitFlag@j_109+1,w
  3401  04DD  3008               	movlw	8
  3402  04DE  1903               	skipnz
  3403  04DF  0228               	subwf	waitFlag@j_109,w
  3404  04E0  1C03               	skipc
  3405  04E1  2CBA               	goto	l2828
  3406  04E2                     l2842:	
  3407                           
  3408                           ;decode_AX25.c: 127: }
  3409                           ;decode_AX25.c: 128: }
  3410                           ;decode_AX25.c: 129: if(buf == ("JQ1YCZ"[4] << 1)){
  3411  04E2  3013               	movlw	low (((STR_1+4)-__stringbase)| (0+32768))
  3412  04E3  0084               	movwf	4
  3413  04E4  120A  158A  200A  120A  118A  	fcall	stringdir
  3414  04E9  00F6               	movwf	??_waitFlag
  3415  04EA  01F7               	clrf	??_waitFlag+1
  3416  04EB  1003               	clrc
  3417  04EC  0DF6               	rlf	??_waitFlag,f
  3418  04ED  0DF7               	rlf	??_waitFlag+1,f
  3419  04EE  083C               	movf	waitFlag@buf,w
  3420  04EF  00F8               	movwf	??_waitFlag+2
  3421  04F0  01F9               	clrf	??_waitFlag+3
  3422  04F1  0877               	movf	??_waitFlag+1,w
  3423  04F2  0679               	xorwf	??_waitFlag+3,w
  3424  04F3  1D03               	skipz
  3425  04F4  2CF7               	goto	u2335
  3426  04F5  0876               	movf	??_waitFlag,w
  3427  04F6  0678               	xorwf	??_waitFlag+2,w
  3428  04F7                     u2335:	
  3429  04F7  1D03               	skipz
  3430  04F8  2D64               	goto	l2886
  3431                           
  3432                           ;decode_AX25.c: 130: dPacket[dPacketnum] = buf;
  3433  04F9  083C               	movf	waitFlag@buf,w
  3434  04FA  00F6               	movwf	??_waitFlag
  3435  04FB  0866               	movf	_dPacketnum,w
  3436  04FC  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3437  04FD  0084               	movwf	4
  3438  04FE  0876               	movf	??_waitFlag,w
  3439  04FF  1783               	bsf	3,7	;select IRP bank3
  3440  0500  0080               	movwf	0
  3441                           
  3442                           ;decode_AX25.c: 131: dPacketnum ++;
  3443  0501  3001               	movlw	1
  3444  0502  07E6               	addwf	_dPacketnum,f
  3445  0503  1803               	skipnc
  3446  0504  0AE7               	incf	_dPacketnum+1,f
  3447  0505  3000               	movlw	0
  3448  0506  07E7               	addwf	_dPacketnum+1,f
  3449                           
  3450                           ;decode_AX25.c: 132: for(UINT j=0;j<8;j++){
  3451  0507  01AA               	clrf	waitFlag@j_111
  3452  0508  01AB               	clrf	waitFlag@j_111+1
  3453  0509  3000               	movlw	0
  3454  050A  022B               	subwf	waitFlag@j_111+1,w
  3455  050B  3008               	movlw	8
  3456  050C  1903               	skipnz
  3457  050D  022A               	subwf	waitFlag@j_111,w
  3458  050E  1803               	btfsc	3,0
  3459  050F  2D38               	goto	l2868
  3460  0510                     l2854:	
  3461                           
  3462                           ;decode_AX25.c: 133: flag_judge = getbit();
  3463  0510  120A  158A  224F  120A  118A  	fcall	_getbit
  3464  0515  0871               	movf	?_getbit+1,w
  3465  0516  1283               	bcf	3,5	;RP0=0, select bank0
  3466  0517  1303               	bcf	3,6	;RP1=0, select bank0
  3467  0518  00BB               	movwf	waitFlag@flag_judge+1
  3468  0519  0870               	movf	?_getbit,w
  3469  051A  00BA               	movwf	waitFlag@flag_judge
  3470                           
  3471                           ;decode_AX25.c: 134: buf = buf >> 1;
  3472  051B  083C               	movf	waitFlag@buf,w
  3473  051C  00F6               	movwf	??_waitFlag
  3474  051D  1003               	clrc
  3475  051E  0C76               	rrf	??_waitFlag,w
  3476  051F  00F7               	movwf	??_waitFlag+1
  3477  0520  0877               	movf	??_waitFlag+1,w
  3478  0521  00BC               	movwf	waitFlag@buf
  3479                           
  3480                           ;decode_AX25.c: 136: buf = buf | 0x00;
  3481  0522  083A               	movf	waitFlag@flag_judge,w
  3482  0523  043B               	iorwf	waitFlag@flag_judge+1,w
  3483  0524  1903               	btfsc	3,2
  3484  0525  2D2B               	goto	l2864
  3485                           
  3486                           ;decode_AX25.c: 138: buf = buf | 0x80;
  3487                           
  3488                           ;decode_AX25.c: 137: }else{
  3489  0526  083C               	movf	waitFlag@buf,w
  3490  0527  3880               	iorlw	128
  3491  0528  00F6               	movwf	??_waitFlag
  3492  0529  0876               	movf	??_waitFlag,w
  3493  052A  00BC               	movwf	waitFlag@buf
  3494  052B                     l2864:	
  3495  052B  3001               	movlw	1
  3496  052C  07AA               	addwf	waitFlag@j_111,f
  3497  052D  1803               	skipnc
  3498  052E  0AAB               	incf	waitFlag@j_111+1,f
  3499  052F  3000               	movlw	0
  3500  0530  07AB               	addwf	waitFlag@j_111+1,f
  3501  0531  3000               	movlw	0
  3502  0532  022B               	subwf	waitFlag@j_111+1,w
  3503  0533  3008               	movlw	8
  3504  0534  1903               	skipnz
  3505  0535  022A               	subwf	waitFlag@j_111,w
  3506  0536  1C03               	skipc
  3507  0537  2D10               	goto	l2854
  3508  0538                     l2868:	
  3509                           
  3510                           ;decode_AX25.c: 139: }
  3511                           ;decode_AX25.c: 140: }
  3512                           ;decode_AX25.c: 141: if(buf == ("JQ1YCZ"[5] << 1)){
  3513  0538  3014               	movlw	low (((STR_1+5)-__stringbase)| (0+32768))
  3514  0539  0084               	movwf	4
  3515  053A  120A  158A  200A  120A  118A  	fcall	stringdir
  3516  053F  00F6               	movwf	??_waitFlag
  3517  0540  01F7               	clrf	??_waitFlag+1
  3518  0541  1003               	clrc
  3519  0542  0DF6               	rlf	??_waitFlag,f
  3520  0543  0DF7               	rlf	??_waitFlag+1,f
  3521  0544  083C               	movf	waitFlag@buf,w
  3522  0545  00F8               	movwf	??_waitFlag+2
  3523  0546  01F9               	clrf	??_waitFlag+3
  3524  0547  0877               	movf	??_waitFlag+1,w
  3525  0548  0679               	xorwf	??_waitFlag+3,w
  3526  0549  1D03               	skipz
  3527  054A  2D4D               	goto	u2375
  3528  054B  0876               	movf	??_waitFlag,w
  3529  054C  0678               	xorwf	??_waitFlag+2,w
  3530  054D                     u2375:	
  3531  054D  1D03               	skipz
  3532  054E  2D64               	goto	l2886
  3533                           
  3534                           ;decode_AX25.c: 142: dPacket[dPacketnum] = buf;
  3535  054F  083C               	movf	waitFlag@buf,w
  3536  0550  00F6               	movwf	??_waitFlag
  3537  0551  0866               	movf	_dPacketnum,w
  3538  0552  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3539  0553  0084               	movwf	4
  3540  0554  0876               	movf	??_waitFlag,w
  3541  0555  1783               	bsf	3,7	;select IRP bank3
  3542  0556  0080               	movwf	0
  3543                           
  3544                           ;decode_AX25.c: 143: dPacketnum ++;
  3545  0557  3001               	movlw	1
  3546  0558  07E6               	addwf	_dPacketnum,f
  3547  0559  1803               	skipnc
  3548  055A  0AE7               	incf	_dPacketnum+1,f
  3549  055B  3000               	movlw	0
  3550  055C  07E7               	addwf	_dPacketnum+1,f
  3551                           
  3552                           ;decode_AX25.c: 144: rcv_state ++;
  3553  055D  3001               	movlw	1
  3554  055E  07EA               	addwf	_rcv_state,f
  3555  055F  1803               	skipnc
  3556  0560  0AEB               	incf	_rcv_state+1,f
  3557  0561  3000               	movlw	0
  3558  0562  07EB               	addwf	_rcv_state+1,f
  3559                           
  3560                           ;decode_AX25.c: 145: }else{
  3561  0563  2D66               	goto	l198
  3562  0564                     l2886:	
  3563                           ;decode_AX25.c: 159: }
  3564                           ;decode_AX25.c: 160: }else{
  3565                           
  3566                           ;decode_AX25.c: 158: dPacketnum = 0;
  3567                           
  3568                           ;decode_AX25.c: 156: }
  3569                           ;decode_AX25.c: 157: }else{
  3570                           
  3571                           ;decode_AX25.c: 155: dPacketnum = 0;
  3572                           
  3573                           ;decode_AX25.c: 153: }
  3574                           ;decode_AX25.c: 154: }else{
  3575                           
  3576                           ;decode_AX25.c: 152: dPacketnum = 0;
  3577                           
  3578                           ;decode_AX25.c: 150: }
  3579                           ;decode_AX25.c: 151: }else{
  3580                           
  3581                           ;decode_AX25.c: 149: dPacketnum = 0;
  3582                           
  3583                           ;decode_AX25.c: 147: }
  3584                           ;decode_AX25.c: 148: }else{
  3585                           
  3586                           ;decode_AX25.c: 146: dPacketnum = 0;
  3587                           
  3588                           
  3589                           ;decode_AX25.c: 161: dPacketnum = 0;
  3590  0564  01E6               	clrf	_dPacketnum
  3591  0565  01E7               	clrf	_dPacketnum+1
  3592  0566                     l198:	
  3593                           
  3594                           ;decode_AX25.c: 162: }
  3595                           ;decode_AX25.c: 164: for(UINT j=0;j<8;j++){
  3596  0566  01AC               	clrf	waitFlag@j_113
  3597  0567  01AD               	clrf	waitFlag@j_113+1
  3598  0568  3000               	movlw	0
  3599  0569  022D               	subwf	waitFlag@j_113+1,w
  3600  056A  3008               	movlw	8
  3601  056B  1903               	skipnz
  3602  056C  022C               	subwf	waitFlag@j_113,w
  3603  056D  1803               	btfsc	3,0
  3604  056E  2D97               	goto	l2906
  3605  056F                     l2892:	
  3606                           
  3607                           ;decode_AX25.c: 165: flag_judge = getbit();
  3608  056F  120A  158A  224F  120A  118A  	fcall	_getbit
  3609  0574  0871               	movf	?_getbit+1,w
  3610  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3611  0576  1303               	bcf	3,6	;RP1=0, select bank0
  3612  0577  00BB               	movwf	waitFlag@flag_judge+1
  3613  0578  0870               	movf	?_getbit,w
  3614  0579  00BA               	movwf	waitFlag@flag_judge
  3615                           
  3616                           ;decode_AX25.c: 166: buf = buf >> 1;
  3617  057A  083C               	movf	waitFlag@buf,w
  3618  057B  00F6               	movwf	??_waitFlag
  3619  057C  1003               	clrc
  3620  057D  0C76               	rrf	??_waitFlag,w
  3621  057E  00F7               	movwf	??_waitFlag+1
  3622  057F  0877               	movf	??_waitFlag+1,w
  3623  0580  00BC               	movwf	waitFlag@buf
  3624                           
  3625                           ;decode_AX25.c: 168: buf = buf | 0x00;
  3626  0581  083A               	movf	waitFlag@flag_judge,w
  3627  0582  043B               	iorwf	waitFlag@flag_judge+1,w
  3628  0583  1903               	btfsc	3,2
  3629  0584  2D8A               	goto	l2902
  3630                           
  3631                           ;decode_AX25.c: 170: buf = buf | 0x80;
  3632                           
  3633                           ;decode_AX25.c: 169: }else{
  3634  0585  083C               	movf	waitFlag@buf,w
  3635  0586  3880               	iorlw	128
  3636  0587  00F6               	movwf	??_waitFlag
  3637  0588  0876               	movf	??_waitFlag,w
  3638  0589  00BC               	movwf	waitFlag@buf
  3639  058A                     l2902:	
  3640  058A  3001               	movlw	1
  3641  058B  07AC               	addwf	waitFlag@j_113,f
  3642  058C  1803               	skipnc
  3643  058D  0AAD               	incf	waitFlag@j_113+1,f
  3644  058E  3000               	movlw	0
  3645  058F  07AD               	addwf	waitFlag@j_113+1,f
  3646  0590  3000               	movlw	0
  3647  0591  022D               	subwf	waitFlag@j_113+1,w
  3648  0592  3008               	movlw	8
  3649  0593  1903               	skipnz
  3650  0594  022C               	subwf	waitFlag@j_113,w
  3651  0595  1C03               	skipc
  3652  0596  2D6F               	goto	l2892
  3653  0597                     l2906:	
  3654                           
  3655                           ;decode_AX25.c: 171: }
  3656                           ;decode_AX25.c: 172: }
  3657                           ;decode_AX25.c: 173: dPacket[dPacketnum] = buf;
  3658  0597  083C               	movf	waitFlag@buf,w
  3659  0598  00F6               	movwf	??_waitFlag
  3660  0599  0866               	movf	_dPacketnum,w
  3661  059A  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3662  059B  0084               	movwf	4
  3663  059C  0876               	movf	??_waitFlag,w
  3664  059D  1783               	bsf	3,7	;select IRP bank3
  3665  059E  0080               	movwf	0
  3666                           
  3667                           ;decode_AX25.c: 174: dPacketnum ++;
  3668  059F  3001               	movlw	1
  3669  05A0  07E6               	addwf	_dPacketnum,f
  3670  05A1  1803               	skipnc
  3671  05A2  0AE7               	incf	_dPacketnum+1,f
  3672  05A3  3000               	movlw	0
  3673  05A4  07E7               	addwf	_dPacketnum+1,f
  3674                           
  3675                           ;decode_AX25.c: 175: for(UINT j=0;j<8;j++){
  3676  05A5  01AE               	clrf	waitFlag@j_114
  3677  05A6  01AF               	clrf	waitFlag@j_114+1
  3678  05A7  3000               	movlw	0
  3679  05A8  022F               	subwf	waitFlag@j_114+1,w
  3680  05A9  3008               	movlw	8
  3681  05AA  1903               	skipnz
  3682  05AB  022E               	subwf	waitFlag@j_114,w
  3683  05AC  1803               	btfsc	3,0
  3684  05AD  2DD6               	goto	l2930
  3685  05AE                     l2916:	
  3686                           
  3687                           ;decode_AX25.c: 176: flag_judge = getbit();
  3688  05AE  120A  158A  224F  120A  118A  	fcall	_getbit
  3689  05B3  0871               	movf	?_getbit+1,w
  3690  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  3691  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  3692  05B6  00BB               	movwf	waitFlag@flag_judge+1
  3693  05B7  0870               	movf	?_getbit,w
  3694  05B8  00BA               	movwf	waitFlag@flag_judge
  3695                           
  3696                           ;decode_AX25.c: 177: buf = buf >> 1;
  3697  05B9  083C               	movf	waitFlag@buf,w
  3698  05BA  00F6               	movwf	??_waitFlag
  3699  05BB  1003               	clrc
  3700  05BC  0C76               	rrf	??_waitFlag,w
  3701  05BD  00F7               	movwf	??_waitFlag+1
  3702  05BE  0877               	movf	??_waitFlag+1,w
  3703  05BF  00BC               	movwf	waitFlag@buf
  3704                           
  3705                           ;decode_AX25.c: 179: buf = buf | 0x00;
  3706  05C0  083A               	movf	waitFlag@flag_judge,w
  3707  05C1  043B               	iorwf	waitFlag@flag_judge+1,w
  3708  05C2  1903               	btfsc	3,2
  3709  05C3  2DC9               	goto	l2926
  3710                           
  3711                           ;decode_AX25.c: 181: buf = buf | 0x80;
  3712                           
  3713                           ;decode_AX25.c: 180: }else{
  3714  05C4  083C               	movf	waitFlag@buf,w
  3715  05C5  3880               	iorlw	128
  3716  05C6  00F6               	movwf	??_waitFlag
  3717  05C7  0876               	movf	??_waitFlag,w
  3718  05C8  00BC               	movwf	waitFlag@buf
  3719  05C9                     l2926:	
  3720  05C9  3001               	movlw	1
  3721  05CA  07AE               	addwf	waitFlag@j_114,f
  3722  05CB  1803               	skipnc
  3723  05CC  0AAF               	incf	waitFlag@j_114+1,f
  3724  05CD  3000               	movlw	0
  3725  05CE  07AF               	addwf	waitFlag@j_114+1,f
  3726  05CF  3000               	movlw	0
  3727  05D0  022F               	subwf	waitFlag@j_114+1,w
  3728  05D1  3008               	movlw	8
  3729  05D2  1903               	skipnz
  3730  05D3  022E               	subwf	waitFlag@j_114,w
  3731  05D4  1C03               	skipc
  3732  05D5  2DAE               	goto	l2916
  3733  05D6                     l2930:	
  3734                           
  3735                           ;decode_AX25.c: 182: }
  3736                           ;decode_AX25.c: 183: }
  3737                           ;decode_AX25.c: 184: if(buf == ("JQ1ZHX"[0] << 1)){
  3738  05D6  3008               	movlw	low (STR_7-__stringbase)
  3739  05D7  0084               	movwf	4
  3740  05D8  120A  158A  200A  120A  118A  	fcall	stringdir
  3741  05DD  00F6               	movwf	??_waitFlag
  3742  05DE  01F7               	clrf	??_waitFlag+1
  3743  05DF  1003               	clrc
  3744  05E0  0DF6               	rlf	??_waitFlag,f
  3745  05E1  0DF7               	rlf	??_waitFlag+1,f
  3746  05E2  083C               	movf	waitFlag@buf,w
  3747  05E3  00F8               	movwf	??_waitFlag+2
  3748  05E4  01F9               	clrf	??_waitFlag+3
  3749  05E5  0877               	movf	??_waitFlag+1,w
  3750  05E6  0679               	xorwf	??_waitFlag+3,w
  3751  05E7  1D03               	skipz
  3752  05E8  2DEB               	goto	u2445
  3753  05E9  0876               	movf	??_waitFlag,w
  3754  05EA  0678               	xorwf	??_waitFlag+2,w
  3755  05EB                     u2445:	
  3756  05EB  1D03               	skipz
  3757  05EC  2FB0               	goto	l3078
  3758                           
  3759                           ;decode_AX25.c: 185: dPacket[dPacketnum] = buf;
  3760  05ED  083C               	movf	waitFlag@buf,w
  3761  05EE  00F6               	movwf	??_waitFlag
  3762  05EF  0866               	movf	_dPacketnum,w
  3763  05F0  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3764  05F1  0084               	movwf	4
  3765  05F2  0876               	movf	??_waitFlag,w
  3766  05F3  1783               	bsf	3,7	;select IRP bank3
  3767  05F4  0080               	movwf	0
  3768                           
  3769                           ;decode_AX25.c: 186: dPacketnum ++;
  3770  05F5  3001               	movlw	1
  3771  05F6  07E6               	addwf	_dPacketnum,f
  3772  05F7  1803               	skipnc
  3773  05F8  0AE7               	incf	_dPacketnum+1,f
  3774  05F9  3000               	movlw	0
  3775  05FA  07E7               	addwf	_dPacketnum+1,f
  3776                           
  3777                           ;decode_AX25.c: 187: for(UINT j=0;j<8;j++){
  3778  05FB  01B0               	clrf	waitFlag@j_116
  3779  05FC  01B1               	clrf	waitFlag@j_116+1
  3780  05FD  3000               	movlw	0
  3781  05FE  0231               	subwf	waitFlag@j_116+1,w
  3782  05FF  3008               	movlw	8
  3783  0600  1903               	skipnz
  3784  0601  0230               	subwf	waitFlag@j_116,w
  3785  0602  1803               	btfsc	3,0
  3786  0603  2E2C               	goto	l2956
  3787  0604                     l2942:	
  3788                           
  3789                           ;decode_AX25.c: 188: flag_judge = getbit();
  3790  0604  120A  158A  224F  120A  118A  	fcall	_getbit
  3791  0609  0871               	movf	?_getbit+1,w
  3792  060A  1283               	bcf	3,5	;RP0=0, select bank0
  3793  060B  1303               	bcf	3,6	;RP1=0, select bank0
  3794  060C  00BB               	movwf	waitFlag@flag_judge+1
  3795  060D  0870               	movf	?_getbit,w
  3796  060E  00BA               	movwf	waitFlag@flag_judge
  3797                           
  3798                           ;decode_AX25.c: 189: buf = buf >> 1;
  3799  060F  083C               	movf	waitFlag@buf,w
  3800  0610  00F6               	movwf	??_waitFlag
  3801  0611  1003               	clrc
  3802  0612  0C76               	rrf	??_waitFlag,w
  3803  0613  00F7               	movwf	??_waitFlag+1
  3804  0614  0877               	movf	??_waitFlag+1,w
  3805  0615  00BC               	movwf	waitFlag@buf
  3806                           
  3807                           ;decode_AX25.c: 191: buf = buf | 0x00;
  3808  0616  083A               	movf	waitFlag@flag_judge,w
  3809  0617  043B               	iorwf	waitFlag@flag_judge+1,w
  3810  0618  1903               	btfsc	3,2
  3811  0619  2E1F               	goto	l2952
  3812                           
  3813                           ;decode_AX25.c: 193: buf = buf | 0x80;
  3814                           
  3815                           ;decode_AX25.c: 192: }else{
  3816  061A  083C               	movf	waitFlag@buf,w
  3817  061B  3880               	iorlw	128
  3818  061C  00F6               	movwf	??_waitFlag
  3819  061D  0876               	movf	??_waitFlag,w
  3820  061E  00BC               	movwf	waitFlag@buf
  3821  061F                     l2952:	
  3822  061F  3001               	movlw	1
  3823  0620  07B0               	addwf	waitFlag@j_116,f
  3824  0621  1803               	skipnc
  3825  0622  0AB1               	incf	waitFlag@j_116+1,f
  3826  0623  3000               	movlw	0
  3827  0624  07B1               	addwf	waitFlag@j_116+1,f
  3828  0625  3000               	movlw	0
  3829  0626  0231               	subwf	waitFlag@j_116+1,w
  3830  0627  3008               	movlw	8
  3831  0628  1903               	skipnz
  3832  0629  0230               	subwf	waitFlag@j_116,w
  3833  062A  1C03               	skipc
  3834  062B  2E04               	goto	l2942
  3835  062C                     l2956:	
  3836                           
  3837                           ;decode_AX25.c: 194: }
  3838                           ;decode_AX25.c: 195: }
  3839                           ;decode_AX25.c: 196: if(buf == ("JQ1ZHX"[1] << 1)){
  3840  062C  3009               	movlw	low (((STR_7+1)-__stringbase)| (0+32768))
  3841  062D  0084               	movwf	4
  3842  062E  120A  158A  200A  120A  118A  	fcall	stringdir
  3843  0633  00F6               	movwf	??_waitFlag
  3844  0634  01F7               	clrf	??_waitFlag+1
  3845  0635  1003               	clrc
  3846  0636  0DF6               	rlf	??_waitFlag,f
  3847  0637  0DF7               	rlf	??_waitFlag+1,f
  3848  0638  083C               	movf	waitFlag@buf,w
  3849  0639  00F8               	movwf	??_waitFlag+2
  3850  063A  01F9               	clrf	??_waitFlag+3
  3851  063B  0877               	movf	??_waitFlag+1,w
  3852  063C  0679               	xorwf	??_waitFlag+3,w
  3853  063D  1D03               	skipz
  3854  063E  2E41               	goto	u2485
  3855  063F  0876               	movf	??_waitFlag,w
  3856  0640  0678               	xorwf	??_waitFlag+2,w
  3857  0641                     u2485:	
  3858  0641  1D03               	skipz
  3859  0642  2FB0               	goto	l3078
  3860                           
  3861                           ;decode_AX25.c: 197: dPacket[dPacketnum] = buf;
  3862  0643  083C               	movf	waitFlag@buf,w
  3863  0644  00F6               	movwf	??_waitFlag
  3864  0645  0866               	movf	_dPacketnum,w
  3865  0646  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3866  0647  0084               	movwf	4
  3867  0648  0876               	movf	??_waitFlag,w
  3868  0649  1783               	bsf	3,7	;select IRP bank3
  3869  064A  0080               	movwf	0
  3870                           
  3871                           ;decode_AX25.c: 198: dPacketnum ++;
  3872  064B  3001               	movlw	1
  3873  064C  07E6               	addwf	_dPacketnum,f
  3874  064D  1803               	skipnc
  3875  064E  0AE7               	incf	_dPacketnum+1,f
  3876  064F  3000               	movlw	0
  3877  0650  07E7               	addwf	_dPacketnum+1,f
  3878                           
  3879                           ;decode_AX25.c: 199: for(UINT j=0;j<8;j++){
  3880  0651  01B2               	clrf	waitFlag@j_118
  3881  0652  01B3               	clrf	waitFlag@j_118+1
  3882  0653  3000               	movlw	0
  3883  0654  0233               	subwf	waitFlag@j_118+1,w
  3884  0655  3008               	movlw	8
  3885  0656  1903               	skipnz
  3886  0657  0232               	subwf	waitFlag@j_118,w
  3887  0658  1803               	btfsc	3,0
  3888  0659  2E82               	goto	l2982
  3889  065A                     l2968:	
  3890                           
  3891                           ;decode_AX25.c: 200: flag_judge = getbit();
  3892  065A  120A  158A  224F  120A  118A  	fcall	_getbit
  3893  065F  0871               	movf	?_getbit+1,w
  3894  0660  1283               	bcf	3,5	;RP0=0, select bank0
  3895  0661  1303               	bcf	3,6	;RP1=0, select bank0
  3896  0662  00BB               	movwf	waitFlag@flag_judge+1
  3897  0663  0870               	movf	?_getbit,w
  3898  0664  00BA               	movwf	waitFlag@flag_judge
  3899                           
  3900                           ;decode_AX25.c: 201: buf = buf >> 1;
  3901  0665  083C               	movf	waitFlag@buf,w
  3902  0666  00F6               	movwf	??_waitFlag
  3903  0667  1003               	clrc
  3904  0668  0C76               	rrf	??_waitFlag,w
  3905  0669  00F7               	movwf	??_waitFlag+1
  3906  066A  0877               	movf	??_waitFlag+1,w
  3907  066B  00BC               	movwf	waitFlag@buf
  3908                           
  3909                           ;decode_AX25.c: 203: buf = buf | 0x00;
  3910  066C  083A               	movf	waitFlag@flag_judge,w
  3911  066D  043B               	iorwf	waitFlag@flag_judge+1,w
  3912  066E  1903               	btfsc	3,2
  3913  066F  2E75               	goto	l2978
  3914                           
  3915                           ;decode_AX25.c: 205: buf = buf | 0x80;
  3916                           
  3917                           ;decode_AX25.c: 204: }else{
  3918  0670  083C               	movf	waitFlag@buf,w
  3919  0671  3880               	iorlw	128
  3920  0672  00F6               	movwf	??_waitFlag
  3921  0673  0876               	movf	??_waitFlag,w
  3922  0674  00BC               	movwf	waitFlag@buf
  3923  0675                     l2978:	
  3924  0675  3001               	movlw	1
  3925  0676  07B2               	addwf	waitFlag@j_118,f
  3926  0677  1803               	skipnc
  3927  0678  0AB3               	incf	waitFlag@j_118+1,f
  3928  0679  3000               	movlw	0
  3929  067A  07B3               	addwf	waitFlag@j_118+1,f
  3930  067B  3000               	movlw	0
  3931  067C  0233               	subwf	waitFlag@j_118+1,w
  3932  067D  3008               	movlw	8
  3933  067E  1903               	skipnz
  3934  067F  0232               	subwf	waitFlag@j_118,w
  3935  0680  1C03               	skipc
  3936  0681  2E5A               	goto	l2968
  3937  0682                     l2982:	
  3938                           
  3939                           ;decode_AX25.c: 206: }
  3940                           ;decode_AX25.c: 207: }
  3941                           ;decode_AX25.c: 208: if(buf == ("JQ1ZHX"[2] << 1)){
  3942  0682  300A               	movlw	low (((STR_7+2)-__stringbase)| (0+32768))
  3943  0683  0084               	movwf	4
  3944  0684  120A  158A  200A  120A  118A  	fcall	stringdir
  3945  0689  00F6               	movwf	??_waitFlag
  3946  068A  01F7               	clrf	??_waitFlag+1
  3947  068B  1003               	clrc
  3948  068C  0DF6               	rlf	??_waitFlag,f
  3949  068D  0DF7               	rlf	??_waitFlag+1,f
  3950  068E  083C               	movf	waitFlag@buf,w
  3951  068F  00F8               	movwf	??_waitFlag+2
  3952  0690  01F9               	clrf	??_waitFlag+3
  3953  0691  0877               	movf	??_waitFlag+1,w
  3954  0692  0679               	xorwf	??_waitFlag+3,w
  3955  0693  1D03               	skipz
  3956  0694  2E97               	goto	u2525
  3957  0695  0876               	movf	??_waitFlag,w
  3958  0696  0678               	xorwf	??_waitFlag+2,w
  3959  0697                     u2525:	
  3960  0697  1D03               	skipz
  3961  0698  2FB0               	goto	l3078
  3962                           
  3963                           ;decode_AX25.c: 209: dPacket[dPacketnum] = buf;
  3964  0699  083C               	movf	waitFlag@buf,w
  3965  069A  00F6               	movwf	??_waitFlag
  3966  069B  0866               	movf	_dPacketnum,w
  3967  069C  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3968  069D  0084               	movwf	4
  3969  069E  0876               	movf	??_waitFlag,w
  3970  069F  1783               	bsf	3,7	;select IRP bank3
  3971  06A0  0080               	movwf	0
  3972                           
  3973                           ;decode_AX25.c: 210: dPacketnum ++;
  3974  06A1  3001               	movlw	1
  3975  06A2  07E6               	addwf	_dPacketnum,f
  3976  06A3  1803               	skipnc
  3977  06A4  0AE7               	incf	_dPacketnum+1,f
  3978  06A5  3000               	movlw	0
  3979  06A6  07E7               	addwf	_dPacketnum+1,f
  3980                           
  3981                           ;decode_AX25.c: 211: for(UINT j=0;j<8;j++){
  3982  06A7  01B4               	clrf	waitFlag@j_120
  3983  06A8  01B5               	clrf	waitFlag@j_120+1
  3984  06A9  3000               	movlw	0
  3985  06AA  0235               	subwf	waitFlag@j_120+1,w
  3986  06AB  3008               	movlw	8
  3987  06AC  1903               	skipnz
  3988  06AD  0234               	subwf	waitFlag@j_120,w
  3989  06AE  1803               	btfsc	3,0
  3990  06AF  2ED8               	goto	l3008
  3991  06B0                     l2994:	
  3992                           
  3993                           ;decode_AX25.c: 212: flag_judge = getbit();
  3994  06B0  120A  158A  224F  120A  118A  	fcall	_getbit
  3995  06B5  0871               	movf	?_getbit+1,w
  3996  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  3997  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  3998  06B8  00BB               	movwf	waitFlag@flag_judge+1
  3999  06B9  0870               	movf	?_getbit,w
  4000  06BA  00BA               	movwf	waitFlag@flag_judge
  4001                           
  4002                           ;decode_AX25.c: 213: buf = buf >> 1;
  4003  06BB  083C               	movf	waitFlag@buf,w
  4004  06BC  00F6               	movwf	??_waitFlag
  4005  06BD  1003               	clrc
  4006  06BE  0C76               	rrf	??_waitFlag,w
  4007  06BF  00F7               	movwf	??_waitFlag+1
  4008  06C0  0877               	movf	??_waitFlag+1,w
  4009  06C1  00BC               	movwf	waitFlag@buf
  4010                           
  4011                           ;decode_AX25.c: 215: buf = buf | 0x00;
  4012  06C2  083A               	movf	waitFlag@flag_judge,w
  4013  06C3  043B               	iorwf	waitFlag@flag_judge+1,w
  4014  06C4  1903               	btfsc	3,2
  4015  06C5  2ECB               	goto	l3004
  4016                           
  4017                           ;decode_AX25.c: 217: buf = buf | 0x80;
  4018                           
  4019                           ;decode_AX25.c: 216: }else{
  4020  06C6  083C               	movf	waitFlag@buf,w
  4021  06C7  3880               	iorlw	128
  4022  06C8  00F6               	movwf	??_waitFlag
  4023  06C9  0876               	movf	??_waitFlag,w
  4024  06CA  00BC               	movwf	waitFlag@buf
  4025  06CB                     l3004:	
  4026  06CB  3001               	movlw	1
  4027  06CC  07B4               	addwf	waitFlag@j_120,f
  4028  06CD  1803               	skipnc
  4029  06CE  0AB5               	incf	waitFlag@j_120+1,f
  4030  06CF  3000               	movlw	0
  4031  06D0  07B5               	addwf	waitFlag@j_120+1,f
  4032  06D1  3000               	movlw	0
  4033  06D2  0235               	subwf	waitFlag@j_120+1,w
  4034  06D3  3008               	movlw	8
  4035  06D4  1903               	skipnz
  4036  06D5  0234               	subwf	waitFlag@j_120,w
  4037  06D6  1C03               	skipc
  4038  06D7  2EB0               	goto	l2994
  4039  06D8                     l3008:	
  4040                           
  4041                           ;decode_AX25.c: 218: }
  4042                           ;decode_AX25.c: 219: }
  4043                           ;decode_AX25.c: 220: if(buf == ("JQ1ZHX"[3] << 1)){
  4044  06D8  300B               	movlw	low (((STR_7+3)-__stringbase)| (0+32768))
  4045  06D9  0084               	movwf	4
  4046  06DA  120A  158A  200A  120A  118A  	fcall	stringdir
  4047  06DF  00F6               	movwf	??_waitFlag
  4048  06E0  01F7               	clrf	??_waitFlag+1
  4049  06E1  1003               	clrc
  4050  06E2  0DF6               	rlf	??_waitFlag,f
  4051  06E3  0DF7               	rlf	??_waitFlag+1,f
  4052  06E4  083C               	movf	waitFlag@buf,w
  4053  06E5  00F8               	movwf	??_waitFlag+2
  4054  06E6  01F9               	clrf	??_waitFlag+3
  4055  06E7  0877               	movf	??_waitFlag+1,w
  4056  06E8  0679               	xorwf	??_waitFlag+3,w
  4057  06E9  1D03               	skipz
  4058  06EA  2EED               	goto	u2565
  4059  06EB  0876               	movf	??_waitFlag,w
  4060  06EC  0678               	xorwf	??_waitFlag+2,w
  4061  06ED                     u2565:	
  4062  06ED  1D03               	skipz
  4063  06EE  2FB0               	goto	l3078
  4064                           
  4065                           ;decode_AX25.c: 221: dPacket[dPacketnum] = buf;
  4066  06EF  083C               	movf	waitFlag@buf,w
  4067  06F0  00F6               	movwf	??_waitFlag
  4068  06F1  0866               	movf	_dPacketnum,w
  4069  06F2  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4070  06F3  0084               	movwf	4
  4071  06F4  0876               	movf	??_waitFlag,w
  4072  06F5  1783               	bsf	3,7	;select IRP bank3
  4073  06F6  0080               	movwf	0
  4074                           
  4075                           ;decode_AX25.c: 222: dPacketnum ++;
  4076  06F7  3001               	movlw	1
  4077  06F8  07E6               	addwf	_dPacketnum,f
  4078  06F9  1803               	skipnc
  4079  06FA  0AE7               	incf	_dPacketnum+1,f
  4080  06FB  3000               	movlw	0
  4081  06FC  07E7               	addwf	_dPacketnum+1,f
  4082                           
  4083                           ;decode_AX25.c: 223: for(UINT j=0;j<8;j++){
  4084  06FD  01B6               	clrf	waitFlag@j_122
  4085  06FE  01B7               	clrf	waitFlag@j_122+1
  4086  06FF  3000               	movlw	0
  4087  0700  0237               	subwf	waitFlag@j_122+1,w
  4088  0701  3008               	movlw	8
  4089  0702  1903               	skipnz
  4090  0703  0236               	subwf	waitFlag@j_122,w
  4091  0704  1803               	btfsc	3,0
  4092  0705  2F2E               	goto	l3034
  4093  0706                     l3020:	
  4094                           
  4095                           ;decode_AX25.c: 224: flag_judge = getbit();
  4096  0706  120A  158A  224F  120A  118A  	fcall	_getbit
  4097  070B  0871               	movf	?_getbit+1,w
  4098  070C  1283               	bcf	3,5	;RP0=0, select bank0
  4099  070D  1303               	bcf	3,6	;RP1=0, select bank0
  4100  070E  00BB               	movwf	waitFlag@flag_judge+1
  4101  070F  0870               	movf	?_getbit,w
  4102  0710  00BA               	movwf	waitFlag@flag_judge
  4103                           
  4104                           ;decode_AX25.c: 225: buf = buf >> 1;
  4105  0711  083C               	movf	waitFlag@buf,w
  4106  0712  00F6               	movwf	??_waitFlag
  4107  0713  1003               	clrc
  4108  0714  0C76               	rrf	??_waitFlag,w
  4109  0715  00F7               	movwf	??_waitFlag+1
  4110  0716  0877               	movf	??_waitFlag+1,w
  4111  0717  00BC               	movwf	waitFlag@buf
  4112                           
  4113                           ;decode_AX25.c: 227: buf = buf | 0x00;
  4114  0718  083A               	movf	waitFlag@flag_judge,w
  4115  0719  043B               	iorwf	waitFlag@flag_judge+1,w
  4116  071A  1903               	btfsc	3,2
  4117  071B  2F21               	goto	l3030
  4118                           
  4119                           ;decode_AX25.c: 229: buf = buf | 0x80;
  4120                           
  4121                           ;decode_AX25.c: 228: }else{
  4122  071C  083C               	movf	waitFlag@buf,w
  4123  071D  3880               	iorlw	128
  4124  071E  00F6               	movwf	??_waitFlag
  4125  071F  0876               	movf	??_waitFlag,w
  4126  0720  00BC               	movwf	waitFlag@buf
  4127  0721                     l3030:	
  4128  0721  3001               	movlw	1
  4129  0722  07B6               	addwf	waitFlag@j_122,f
  4130  0723  1803               	skipnc
  4131  0724  0AB7               	incf	waitFlag@j_122+1,f
  4132  0725  3000               	movlw	0
  4133  0726  07B7               	addwf	waitFlag@j_122+1,f
  4134  0727  3000               	movlw	0
  4135  0728  0237               	subwf	waitFlag@j_122+1,w
  4136  0729  3008               	movlw	8
  4137  072A  1903               	skipnz
  4138  072B  0236               	subwf	waitFlag@j_122,w
  4139  072C  1C03               	skipc
  4140  072D  2F06               	goto	l3020
  4141  072E                     l3034:	
  4142                           
  4143                           ;decode_AX25.c: 230: }
  4144                           ;decode_AX25.c: 231: }
  4145                           ;decode_AX25.c: 232: if(buf == ("JQ1ZHX"[4] << 1)){
  4146  072E  300C               	movlw	low (((STR_7+4)-__stringbase)| (0+32768))
  4147  072F  0084               	movwf	4
  4148  0730  120A  158A  200A  120A  118A  	fcall	stringdir
  4149  0735  00F6               	movwf	??_waitFlag
  4150  0736  01F7               	clrf	??_waitFlag+1
  4151  0737  1003               	clrc
  4152  0738  0DF6               	rlf	??_waitFlag,f
  4153  0739  0DF7               	rlf	??_waitFlag+1,f
  4154  073A  083C               	movf	waitFlag@buf,w
  4155  073B  00F8               	movwf	??_waitFlag+2
  4156  073C  01F9               	clrf	??_waitFlag+3
  4157  073D  0877               	movf	??_waitFlag+1,w
  4158  073E  0679               	xorwf	??_waitFlag+3,w
  4159  073F  1D03               	skipz
  4160  0740  2F43               	goto	u2605
  4161  0741  0876               	movf	??_waitFlag,w
  4162  0742  0678               	xorwf	??_waitFlag+2,w
  4163  0743                     u2605:	
  4164  0743  1D03               	skipz
  4165  0744  2FB0               	goto	l3078
  4166                           
  4167                           ;decode_AX25.c: 233: dPacket[dPacketnum] = buf;
  4168  0745  083C               	movf	waitFlag@buf,w
  4169  0746  00F6               	movwf	??_waitFlag
  4170  0747  0866               	movf	_dPacketnum,w
  4171  0748  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4172  0749  0084               	movwf	4
  4173  074A  0876               	movf	??_waitFlag,w
  4174  074B  1783               	bsf	3,7	;select IRP bank3
  4175  074C  0080               	movwf	0
  4176                           
  4177                           ;decode_AX25.c: 234: dPacketnum ++;
  4178  074D  3001               	movlw	1
  4179  074E  07E6               	addwf	_dPacketnum,f
  4180  074F  1803               	skipnc
  4181  0750  0AE7               	incf	_dPacketnum+1,f
  4182  0751  3000               	movlw	0
  4183  0752  07E7               	addwf	_dPacketnum+1,f
  4184                           
  4185                           ;decode_AX25.c: 235: for(UINT j=0;j<8;j++){
  4186  0753  01B8               	clrf	waitFlag@j_124
  4187  0754  01B9               	clrf	waitFlag@j_124+1
  4188  0755  3000               	movlw	0
  4189  0756  0239               	subwf	waitFlag@j_124+1,w
  4190  0757  3008               	movlw	8
  4191  0758  1903               	skipnz
  4192  0759  0238               	subwf	waitFlag@j_124,w
  4193  075A  1803               	btfsc	3,0
  4194  075B  2F84               	goto	l3060
  4195  075C                     l3046:	
  4196                           
  4197                           ;decode_AX25.c: 236: flag_judge = getbit();
  4198  075C  120A  158A  224F  120A  118A  	fcall	_getbit
  4199  0761  0871               	movf	?_getbit+1,w
  4200  0762  1283               	bcf	3,5	;RP0=0, select bank0
  4201  0763  1303               	bcf	3,6	;RP1=0, select bank0
  4202  0764  00BB               	movwf	waitFlag@flag_judge+1
  4203  0765  0870               	movf	?_getbit,w
  4204  0766  00BA               	movwf	waitFlag@flag_judge
  4205                           
  4206                           ;decode_AX25.c: 237: buf = buf >> 1;
  4207  0767  083C               	movf	waitFlag@buf,w
  4208  0768  00F6               	movwf	??_waitFlag
  4209  0769  1003               	clrc
  4210  076A  0C76               	rrf	??_waitFlag,w
  4211  076B  00F7               	movwf	??_waitFlag+1
  4212  076C  0877               	movf	??_waitFlag+1,w
  4213  076D  00BC               	movwf	waitFlag@buf
  4214                           
  4215                           ;decode_AX25.c: 239: buf = buf | 0x00;
  4216  076E  083A               	movf	waitFlag@flag_judge,w
  4217  076F  043B               	iorwf	waitFlag@flag_judge+1,w
  4218  0770  1903               	btfsc	3,2
  4219  0771  2F77               	goto	l3056
  4220                           
  4221                           ;decode_AX25.c: 241: buf = buf | 0x80;
  4222                           
  4223                           ;decode_AX25.c: 240: }else{
  4224  0772  083C               	movf	waitFlag@buf,w
  4225  0773  3880               	iorlw	128
  4226  0774  00F6               	movwf	??_waitFlag
  4227  0775  0876               	movf	??_waitFlag,w
  4228  0776  00BC               	movwf	waitFlag@buf
  4229  0777                     l3056:	
  4230  0777  3001               	movlw	1
  4231  0778  07B8               	addwf	waitFlag@j_124,f
  4232  0779  1803               	skipnc
  4233  077A  0AB9               	incf	waitFlag@j_124+1,f
  4234  077B  3000               	movlw	0
  4235  077C  07B9               	addwf	waitFlag@j_124+1,f
  4236  077D  3000               	movlw	0
  4237  077E  0239               	subwf	waitFlag@j_124+1,w
  4238  077F  3008               	movlw	8
  4239  0780  1903               	skipnz
  4240  0781  0238               	subwf	waitFlag@j_124,w
  4241  0782  1C03               	skipc
  4242  0783  2F5C               	goto	l3046
  4243  0784                     l3060:	
  4244                           
  4245                           ;decode_AX25.c: 242: }
  4246                           ;decode_AX25.c: 243: }
  4247                           ;decode_AX25.c: 244: if(buf == ("JQ1ZHX"[5] << 1)){
  4248  0784  300D               	movlw	low (((STR_7+5)-__stringbase)| (0+32768))
  4249  0785  0084               	movwf	4
  4250  0786  120A  158A  200A  120A  118A  	fcall	stringdir
  4251  078B  00F6               	movwf	??_waitFlag
  4252  078C  01F7               	clrf	??_waitFlag+1
  4253  078D  1003               	clrc
  4254  078E  0DF6               	rlf	??_waitFlag,f
  4255  078F  0DF7               	rlf	??_waitFlag+1,f
  4256  0790  083C               	movf	waitFlag@buf,w
  4257  0791  00F8               	movwf	??_waitFlag+2
  4258  0792  01F9               	clrf	??_waitFlag+3
  4259  0793  0877               	movf	??_waitFlag+1,w
  4260  0794  0679               	xorwf	??_waitFlag+3,w
  4261  0795  1D03               	skipz
  4262  0796  2F99               	goto	u2645
  4263  0797  0876               	movf	??_waitFlag,w
  4264  0798  0678               	xorwf	??_waitFlag+2,w
  4265  0799                     u2645:	
  4266  0799  1D03               	skipz
  4267  079A  2FB0               	goto	l3078
  4268                           
  4269                           ;decode_AX25.c: 245: dPacket[dPacketnum] = buf;
  4270  079B  083C               	movf	waitFlag@buf,w
  4271  079C  00F6               	movwf	??_waitFlag
  4272  079D  0866               	movf	_dPacketnum,w
  4273  079E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4274  079F  0084               	movwf	4
  4275  07A0  0876               	movf	??_waitFlag,w
  4276  07A1  1783               	bsf	3,7	;select IRP bank3
  4277  07A2  0080               	movwf	0
  4278                           
  4279                           ;decode_AX25.c: 246: dPacketnum ++;
  4280  07A3  3001               	movlw	1
  4281  07A4  07E6               	addwf	_dPacketnum,f
  4282  07A5  1803               	skipnc
  4283  07A6  0AE7               	incf	_dPacketnum+1,f
  4284  07A7  3000               	movlw	0
  4285  07A8  07E7               	addwf	_dPacketnum+1,f
  4286                           
  4287                           ;decode_AX25.c: 247: rcv_state ++;
  4288  07A9  3001               	movlw	1
  4289  07AA  07EA               	addwf	_rcv_state,f
  4290  07AB  1803               	skipnc
  4291  07AC  0AEB               	incf	_rcv_state+1,f
  4292  07AD  3000               	movlw	0
  4293  07AE  07EB               	addwf	_rcv_state+1,f
  4294                           
  4295                           ;decode_AX25.c: 248: }else{
  4296  07AF  2B2F               	goto	l3080
  4297  07B0                     l3078:	
  4298                           ;decode_AX25.c: 267: }
  4299                           ;decode_AX25.c: 268: }else{
  4300                           
  4301                           ;decode_AX25.c: 266: rcv_state = 0;
  4302                           
  4303                           ;decode_AX25.c: 265: dPacketnum = 0;
  4304                           
  4305                           ;decode_AX25.c: 263: }
  4306                           ;decode_AX25.c: 264: }else{
  4307                           
  4308                           ;decode_AX25.c: 262: rcv_state = 0;
  4309                           
  4310                           ;decode_AX25.c: 261: dPacketnum = 0;
  4311                           
  4312                           ;decode_AX25.c: 259: }
  4313                           ;decode_AX25.c: 260: }else{
  4314                           
  4315                           ;decode_AX25.c: 258: rcv_state = 0;
  4316                           
  4317                           ;decode_AX25.c: 257: dPacketnum = 0;
  4318                           
  4319                           ;decode_AX25.c: 255: }
  4320                           ;decode_AX25.c: 256: }else{
  4321                           
  4322                           ;decode_AX25.c: 254: rcv_state = 0;
  4323                           
  4324                           ;decode_AX25.c: 253: dPacketnum = 0;
  4325                           
  4326                           ;decode_AX25.c: 251: }
  4327                           ;decode_AX25.c: 252: }else{
  4328                           
  4329                           ;decode_AX25.c: 250: rcv_state = 0;
  4330                           
  4331                           ;decode_AX25.c: 249: dPacketnum = 0;
  4332                           
  4333                           
  4334                           ;decode_AX25.c: 269: dPacketnum = 0;
  4335  07B0  01E6               	clrf	_dPacketnum
  4336  07B1  01E7               	clrf	_dPacketnum+1
  4337  07B2  2B2D               	goto	L6
  4338  07B3                     __end_of_waitFlag:	
  4339                           
  4340                           	psect	text6
  4341  0BFF                     __ptext6:	
  4342 ;; *************** function _getdata *****************
  4343 ;; Defined at:
  4344 ;;		line 277 in file "decode_AX25.c"
  4345 ;; Parameters:    Size  Location     Type
  4346 ;;		None
  4347 ;; Auto vars:     Size  Location     Type
  4348 ;;  dbitstatus      2    4[BANK0 ] unsigned int 
  4349 ;;  dstuff          2    2[BANK0 ] unsigned int 
  4350 ;;  bufstore_cou    2    0[BANK0 ] unsigned int 
  4351 ;;  buf             1    6[BANK0 ] unsigned char 
  4352 ;;  dammy_data      1    0        unsigned char 
  4353 ;; Return value:  Size  Location     Type
  4354 ;;                  1    wreg      void 
  4355 ;; Registers used:
  4356 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4357 ;; Tracked objects:
  4358 ;;		On entry : 0/0
  4359 ;;		On exit  : 0/0
  4360 ;;		Unchanged: 0/0
  4361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4362 ;;      Params:         0       0       0       0       0
  4363 ;;      Locals:         0       7       0       0       0
  4364 ;;      Temps:          2       0       0       0       0
  4365 ;;      Totals:         2       7       0       0       0
  4366 ;;Total ram usage:        9 bytes
  4367 ;; Hardware stack levels used:    1
  4368 ;; Hardware stack levels required when called:    1
  4369 ;; This function calls:
  4370 ;;		_getbit
  4371 ;; This function is called by:
  4372 ;;		_ReceivePacket_data
  4373 ;;		_ReceivePacket
  4374 ;; This function uses a non-reentrant model
  4375 ;;
  4376                           
  4377                           
  4378                           ;psect for function _getdata
  4379  0BFF                     _getdata:	
  4380                           
  4381                           ;decode_AX25.c: 278: UBYTE buf = 0x00;
  4382                           
  4383                           ;incstack = 0
  4384                           ; Regs used in _getdata: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4385  0BFF  1283               	bcf	3,5	;RP0=0, select bank0
  4386  0C00  1303               	bcf	3,6	;RP1=0, select bank0
  4387  0C01  01A6               	clrf	getdata@buf
  4388                           
  4389                           ;decode_AX25.c: 279: UINT dstuff = 0;
  4390  0C02  01A2               	clrf	getdata@dstuff
  4391  0C03  01A3               	clrf	getdata@dstuff+1
  4392                           
  4393                           ;decode_AX25.c: 280: UBYTE dammy_data;
  4394                           ;decode_AX25.c: 281: UINT bufstore_counter = 0;
  4395  0C04  01A0               	clrf	getdata@bufstore_counter
  4396  0C05  01A1               	clrf	getdata@bufstore_counter+1
  4397                           
  4398                           ;decode_AX25.c: 282: UINT dbitstatus = 0;
  4399  0C06  01A4               	clrf	getdata@dbitstatus
  4400  0C07  01A5               	clrf	getdata@dbitstatus+1
  4401  0C08                     l3114:	
  4402                           ;decode_AX25.c: 284: while(rcv_state == 2){
  4403                           
  4404  0C08  3002               	movlw	2
  4405  0C09  066A               	xorwf	_rcv_state,w
  4406  0C0A  046B               	iorwf	_rcv_state+1,w
  4407  0C0B  1D03               	btfss	3,2
  4408  0C0C  0008               	return
  4409                           
  4410                           ;decode_AX25.c: 285: dbitstatus = getbit();
  4411  0C0D  120A  158A  224F  120A  158A  	fcall	_getbit
  4412  0C12  0871               	movf	?_getbit+1,w
  4413  0C13  1283               	bcf	3,5	;RP0=0, select bank0
  4414  0C14  1303               	bcf	3,6	;RP1=0, select bank0
  4415  0C15  00A5               	movwf	getdata@dbitstatus+1
  4416  0C16  0870               	movf	?_getbit,w
  4417  0C17  00A4               	movwf	getdata@dbitstatus
  4418                           
  4419                           ;decode_AX25.c: 286: if(dstuff == 5){
  4420  0C18  3005               	movlw	5
  4421  0C19  0622               	xorwf	getdata@dstuff,w
  4422  0C1A  0423               	iorwf	getdata@dstuff+1,w
  4423  0C1B  1D03               	btfss	3,2
  4424  0C1C  2C2B               	goto	l3096
  4425                           
  4426                           ;decode_AX25.c: 287: if(dbitstatus == 1){
  4427  0C1D  0324               	decf	getdata@dbitstatus,w
  4428  0C1E  0425               	iorwf	getdata@dbitstatus+1,w
  4429  0C1F  1D03               	btfss	3,2
  4430  0C20  2C28               	goto	l3094
  4431                           
  4432                           ;decode_AX25.c: 288: rcv_state ++;
  4433  0C21  3001               	movlw	1
  4434  0C22  07EA               	addwf	_rcv_state,f
  4435  0C23  1803               	skipnc
  4436  0C24  0AEB               	incf	_rcv_state+1,f
  4437  0C25  3000               	movlw	0
  4438  0C26  07EB               	addwf	_rcv_state+1,f
  4439                           
  4440                           ;decode_AX25.c: 289: break;
  4441  0C27  0008               	return
  4442  0C28                     l3094:	
  4443                           ;decode_AX25.c: 290: }else{
  4444                           
  4445                           
  4446                           ;decode_AX25.c: 291: dstuff = 0;
  4447  0C28  01A2               	clrf	getdata@dstuff
  4448  0C29  01A3               	clrf	getdata@dstuff+1
  4449                           
  4450                           ;decode_AX25.c: 292: }
  4451                           ;decode_AX25.c: 293: }else{
  4452  0C2A  2C08               	goto	l3114
  4453  0C2B                     l3096:	
  4454                           
  4455                           ;decode_AX25.c: 294: buf = buf >> 1;
  4456  0C2B  0826               	movf	getdata@buf,w
  4457  0C2C  00F6               	movwf	??_getdata
  4458  0C2D  1003               	clrc
  4459  0C2E  0C76               	rrf	??_getdata,w
  4460  0C2F  00F7               	movwf	??_getdata+1
  4461  0C30  0877               	movf	??_getdata+1,w
  4462  0C31  00A6               	movwf	getdata@buf
  4463                           
  4464                           ;decode_AX25.c: 296: buf = buf | 0x00;
  4465  0C32  0824               	movf	getdata@dbitstatus,w
  4466  0C33  0425               	iorwf	getdata@dbitstatus+1,w
  4467  0C34  1D03               	btfss	3,2
  4468  0C35  2C39               	goto	l3100
  4469                           
  4470                           ;decode_AX25.c: 297: dstuff = 0;
  4471  0C36  01A2               	clrf	getdata@dstuff
  4472  0C37  01A3               	clrf	getdata@dstuff+1
  4473                           
  4474                           ;decode_AX25.c: 298: }else{
  4475  0C38  2C44               	goto	l3104
  4476  0C39                     l3100:	
  4477                           
  4478                           ;decode_AX25.c: 299: buf = buf | 0x80;
  4479  0C39  0826               	movf	getdata@buf,w
  4480  0C3A  3880               	iorlw	128
  4481  0C3B  00F6               	movwf	??_getdata
  4482  0C3C  0876               	movf	??_getdata,w
  4483  0C3D  00A6               	movwf	getdata@buf
  4484                           
  4485                           ;decode_AX25.c: 300: dstuff ++;
  4486  0C3E  3001               	movlw	1
  4487  0C3F  07A2               	addwf	getdata@dstuff,f
  4488  0C40  1803               	skipnc
  4489  0C41  0AA3               	incf	getdata@dstuff+1,f
  4490  0C42  3000               	movlw	0
  4491  0C43  07A3               	addwf	getdata@dstuff+1,f
  4492  0C44                     l3104:	
  4493                           
  4494                           ;decode_AX25.c: 301: }
  4495                           ;decode_AX25.c: 302: bufstore_counter ++;
  4496  0C44  3001               	movlw	1
  4497  0C45  07A0               	addwf	getdata@bufstore_counter,f
  4498  0C46  1803               	skipnc
  4499  0C47  0AA1               	incf	getdata@bufstore_counter+1,f
  4500  0C48  3000               	movlw	0
  4501  0C49  07A1               	addwf	getdata@bufstore_counter+1,f
  4502                           
  4503                           ;decode_AX25.c: 303: if(bufstore_counter == 8){
  4504  0C4A  3008               	movlw	8
  4505  0C4B  0620               	xorwf	getdata@bufstore_counter,w
  4506  0C4C  0421               	iorwf	getdata@bufstore_counter+1,w
  4507  0C4D  1D03               	btfss	3,2
  4508  0C4E  2C08               	goto	l3114
  4509                           
  4510                           ;decode_AX25.c: 304: bufstore_counter = 0;
  4511  0C4F  01A0               	clrf	getdata@bufstore_counter
  4512  0C50  01A1               	clrf	getdata@bufstore_counter+1
  4513                           
  4514                           ;decode_AX25.c: 305: dPacket[dPacketnum] = buf;
  4515  0C51  0826               	movf	getdata@buf,w
  4516  0C52  00F6               	movwf	??_getdata
  4517  0C53  0866               	movf	_dPacketnum,w
  4518  0C54  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4519  0C55  0084               	movwf	4
  4520  0C56  0876               	movf	??_getdata,w
  4521  0C57  1783               	bsf	3,7	;select IRP bank3
  4522  0C58  0080               	movwf	0
  4523                           
  4524                           ;decode_AX25.c: 306: dPacketnum ++;
  4525  0C59  3001               	movlw	1
  4526  0C5A  07E6               	addwf	_dPacketnum,f
  4527  0C5B  1803               	skipnc
  4528  0C5C  0AE7               	incf	_dPacketnum+1,f
  4529  0C5D  3000               	movlw	0
  4530  0C5E  07E7               	addwf	_dPacketnum+1,f
  4531  0C5F  2C08               	goto	l3114
  4532  0C60                     __end_of_getdata:	
  4533                           
  4534                           	psect	text7
  4535  0A4F                     __ptext7:	
  4536 ;; *************** function _getbit *****************
  4537 ;; Defined at:
  4538 ;;		line 39 in file "decode_AX25.c"
  4539 ;; Parameters:    Size  Location     Type
  4540 ;;		None
  4541 ;; Auto vars:     Size  Location     Type
  4542 ;;  i               2    4[COMMON] unsigned int 
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  2    0[COMMON] unsigned int 
  4545 ;; Registers used:
  4546 ;;		wreg, status,2, status,0
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 0/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4552 ;;      Params:         2       0       0       0       0
  4553 ;;      Locals:         2       0       0       0       0
  4554 ;;      Temps:          2       0       0       0       0
  4555 ;;      Totals:         6       0       0       0       0
  4556 ;;Total ram usage:        6 bytes
  4557 ;; Hardware stack levels used:    1
  4558 ;; This function calls:
  4559 ;;		Nothing
  4560 ;; This function is called by:
  4561 ;;		_waitFlag
  4562 ;;		_getdata
  4563 ;;		_conv_DI_UARTRX
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           
  4568                           ;psect for function _getbit
  4569  0A4F                     _getbit:	
  4570                           
  4571                           ;decode_AX25.c: 40: static UINT oldbit;
  4572                           ;decode_AX25.c: 41: oldbit = RB5;
  4573                           
  4574                           ;incstack = 0
  4575                           ; Regs used in _getbit: [wreg+status,2+status,0]
  4576  0A4F  1003               	clrc
  4577  0A50  1283               	bcf	3,5	;RP0=0, select bank0
  4578  0A51  1303               	bcf	3,6	;RP1=0, select bank0
  4579  0A52  1A86               	btfsc	6,5	;volatile
  4580  0A53  1403               	setc
  4581  0A54  3000               	movlw	0
  4582  0A55  1803               	skipnc
  4583  0A56  3001               	movlw	1
  4584  0A57  00F2               	movwf	??_getbit
  4585  0A58  01F3               	clrf	??_getbit+1
  4586  0A59  0872               	movf	??_getbit,w
  4587  0A5A  1683               	bsf	3,5	;RP0=1, select bank1
  4588  0A5B  1303               	bcf	3,6	;RP1=0, select bank1
  4589  0A5C  00EC               	movwf	getbit@oldbit^(0+128)
  4590  0A5D  0873               	movf	??_getbit+1,w
  4591  0A5E  00ED               	movwf	(getbit@oldbit+1)^(0+128)
  4592                           
  4593                           ;decode_AX25.c: 42: for(UINT i=0;i<62;i++){
  4594  0A5F  01F4               	clrf	getbit@i
  4595  0A60  01F5               	clrf	getbit@i+1
  4596  0A61  3000               	movlw	0
  4597  0A62  0275               	subwf	getbit@i+1,w
  4598  0A63  303E               	movlw	62
  4599  0A64  1903               	skipnz
  4600  0A65  0274               	subwf	getbit@i,w
  4601  0A66  1803               	btfsc	3,0
  4602  0A67  2A96               	goto	l2560
  4603                           
  4604                           ;decode_AX25.c: 43: if(RB5 != oldbit){
  4605  0A68  1003               	clrc
  4606  0A69                     L7:	
  4607  0A69  1283               	bcf	3,5	;RP0=0, select bank0
  4608  0A6A  1A86               	btfsc	6,5	;volatile
  4609  0A6B  1403               	setc
  4610  0A6C  3000               	movlw	0
  4611  0A6D  1803               	skipnc
  4612  0A6E  3001               	movlw	1
  4613  0A6F  00F2               	movwf	??_getbit
  4614  0A70  01F3               	clrf	??_getbit+1
  4615  0A71  1683               	bsf	3,5	;RP0=1, select bank1
  4616  0A72  1303               	bcf	3,6	;RP1=0, select bank1
  4617  0A73  086D               	movf	(getbit@oldbit+1)^(0+128),w
  4618  0A74  0673               	xorwf	??_getbit+1,w
  4619  0A75  1D03               	skipz
  4620  0A76  2A79               	goto	u1875
  4621  0A77  086C               	movf	getbit@oldbit^(0+128),w
  4622  0A78  0672               	xorwf	??_getbit,w
  4623  0A79                     u1875:	
  4624  0A79  1903               	skipnz
  4625  0A7A  2A89               	goto	l2558
  4626                           
  4627                           ;decode_AX25.c: 44: _delay((unsigned long)((400)*(10000000/4000000.0)));
  4628  0A7B  30F9               	movlw	249
  4629  0A7C  00F2               	movwf	??_getbit
  4630  0A7D                     u3677:	
  4631  0A7D  0000               	nop
  4632  0A7E  0BF2               	decfsz	??_getbit,f
  4633  0A7F  2A7D               	goto	u3677
  4634  0A80  2A81               	nop2	;nop
  4635  0A81  0000               	nop
  4636                           
  4637                           ;decode_AX25.c: 45: RC2= 1- RC2;
  4638  0A82  3004               	movlw	4
  4639  0A83  1283               	bcf	3,5	;RP0=0, select bank0
  4640  0A84  1303               	bcf	3,6	;RP1=0, select bank0
  4641  0A85  0687               	xorwf	7,f
  4642                           
  4643                           ;decode_AX25.c: 46: return 0;
  4644  0A86  01F0               	clrf	?_getbit
  4645  0A87  01F1               	clrf	?_getbit+1
  4646  0A88  0008               	return
  4647  0A89                     l2558:	
  4648  0A89  3001               	movlw	1
  4649  0A8A  07F4               	addwf	getbit@i,f
  4650  0A8B  1803               	skipnc
  4651  0A8C  0AF5               	incf	getbit@i+1,f
  4652  0A8D  3000               	movlw	0
  4653  0A8E  07F5               	addwf	getbit@i+1,f
  4654  0A8F  3000               	movlw	0
  4655  0A90  0275               	subwf	getbit@i+1,w
  4656  0A91  303E               	movlw	62
  4657  0A92  1903               	skipnz
  4658  0A93  0274               	subwf	getbit@i,w
  4659  0A94  1C03               	skipc
  4660  0A95  2A69               	goto	L7
  4661  0A96                     l2560:	
  4662                           
  4663                           ;decode_AX25.c: 47: }
  4664                           ;decode_AX25.c: 48: }
  4665                           ;decode_AX25.c: 49: return 1;
  4666  0A96  3001               	movlw	1
  4667  0A97  00F0               	movwf	?_getbit
  4668  0A98  3000               	movlw	0
  4669  0A99  00F1               	movwf	?_getbit+1
  4670  0A9A  0008               	return
  4671  0A9B                     __end_of_getbit:	
  4672                           
  4673                           	psect	text8
  4674  0CDD                     __ptext8:	
  4675 ;; *************** function _fcscheck *****************
  4676 ;; Defined at:
  4677 ;;		line 312 in file "decode_AX25.c"
  4678 ;; Parameters:    Size  Location     Type
  4679 ;;		None
  4680 ;; Auto vars:     Size  Location     Type
  4681 ;;  i               2    7[COMMON] unsigned int 
  4682 ;;  i               2    5[COMMON] unsigned int 
  4683 ;;  byte            1    9[COMMON] unsigned char 
  4684 ;;  bt              1    4[COMMON] unsigned char 
  4685 ;; Return value:  Size  Location     Type
  4686 ;;                  2    0[COMMON] unsigned int 
  4687 ;; Registers used:
  4688 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4689 ;; Tracked objects:
  4690 ;;		On entry : 0/0
  4691 ;;		On exit  : 0/0
  4692 ;;		Unchanged: 0/0
  4693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4694 ;;      Params:         2       0       0       0       0
  4695 ;;      Locals:         6       0       0       0       0
  4696 ;;      Temps:          2       0       0       0       0
  4697 ;;      Totals:        10       0       0       0       0
  4698 ;;Total ram usage:       10 bytes
  4699 ;; Hardware stack levels used:    1
  4700 ;; This function calls:
  4701 ;;		Nothing
  4702 ;; This function is called by:
  4703 ;;		_ReceivePacket_data
  4704 ;;		_ReceivePacket
  4705 ;; This function uses a non-reentrant model
  4706 ;;
  4707                           
  4708                           
  4709                           ;psect for function _fcscheck
  4710  0CDD                     _fcscheck:	
  4711                           
  4712                           ;decode_AX25.c: 313: UBYTE bt,byte;
  4713                           ;decode_AX25.c: 314: dfcslo = dfcshi = 0xff;
  4714                           
  4715                           ;incstack = 0
  4716                           ; Regs used in _fcscheck: [wreg-fsr0h+status,2+status,0]
  4717  0CDD  30FF               	movlw	255
  4718  0CDE  1283               	bcf	3,5	;RP0=0, select bank0
  4719  0CDF  1303               	bcf	3,6	;RP1=0, select bank0
  4720  0CE0  00EC               	movwf	_dfcshi
  4721  0CE1  00F2               	movwf	??_fcscheck
  4722  0CE2  0872               	movf	??_fcscheck,w
  4723  0CE3  00ED               	movwf	_dfcslo
  4724                           
  4725                           ;decode_AX25.c: 315: while(rcv_state == 3){
  4726  0CE4  3003               	movlw	3
  4727  0CE5  066A               	xorwf	_rcv_state,w
  4728  0CE6  046B               	iorwf	_rcv_state+1,w
  4729  0CE7  1D03               	btfss	3,2
  4730  0CE8  0008               	return
  4731                           
  4732                           ;decode_AX25.c: 316: for(UINT i=0;i<dPacketnum-2;i++){
  4733  0CE9  01F5               	clrf	fcscheck@i
  4734  0CEA  01F6               	clrf	fcscheck@i+1
  4735  0CEB                     l3142:	
  4736  0CEB  0866               	movf	_dPacketnum,w
  4737  0CEC  3EFE               	addlw	254
  4738  0CED  00F2               	movwf	??_fcscheck
  4739  0CEE  0867               	movf	_dPacketnum+1,w
  4740  0CEF  1803               	skipnc
  4741  0CF0  3E01               	addlw	1
  4742  0CF1  3EFF               	addlw	255
  4743  0CF2  00F3               	movwf	??_fcscheck+1
  4744  0CF3  0873               	movf	??_fcscheck+1,w
  4745  0CF4  0276               	subwf	fcscheck@i+1,w
  4746  0CF5  1D03               	skipz
  4747  0CF6  2CF9               	goto	u2745
  4748  0CF7  0872               	movf	??_fcscheck,w
  4749  0CF8  0275               	subwf	fcscheck@i,w
  4750  0CF9                     u2745:	
  4751  0CF9  1803               	btfsc	3,0
  4752  0CFA  2D44               	goto	l263
  4753                           
  4754                           ;decode_AX25.c: 317: byte = dPacket[i];
  4755  0CFB  0875               	movf	fcscheck@i,w
  4756  0CFC  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4757  0CFD  0084               	movwf	4
  4758  0CFE  1783               	bsf	3,7	;select IRP bank3
  4759  0CFF  0800               	movf	0,w
  4760  0D00  00F2               	movwf	??_fcscheck
  4761  0D01  0872               	movf	??_fcscheck,w
  4762  0D02  00F9               	movwf	fcscheck@byte
  4763                           
  4764                           ;decode_AX25.c: 318: for(UINT i=0;i<8;i++){
  4765  0D03  01F7               	clrf	fcscheck@i_136
  4766  0D04  01F8               	clrf	fcscheck@i_136+1
  4767  0D05  3000               	movlw	0
  4768  0D06  0278               	subwf	fcscheck@i_136+1,w
  4769  0D07  3008               	movlw	8
  4770  0D08  1903               	skipnz
  4771  0D09  0277               	subwf	fcscheck@i_136,w
  4772  0D0A  1803               	btfsc	3,0
  4773  0D0B  2D3D               	goto	l3140
  4774  0D0C                     l3128:	
  4775                           
  4776                           ;decode_AX25.c: 319: bt = byte & 0x01;
  4777  0D0C  0879               	movf	fcscheck@byte,w
  4778  0D0D  3901               	andlw	1
  4779  0D0E  00F2               	movwf	??_fcscheck
  4780  0D0F  0872               	movf	??_fcscheck,w
  4781  0D10  00F4               	movwf	fcscheck@bt
  4782  0D11  1003               	bcf	3,0	;# 
  4783  0D12  0CEC               	rrf	_dfcshi,f	;# 
  4784  0D13  0CED               	rrf	_dfcslo,f	;# 
  4785                           
  4786                           ;decode_AX25.c: 325: if(((STATUS & 0x01)^bt) == 0x01){
  4787  0D14  3001               	movlw	1
  4788  0D15  1283               	bcf	3,5	;RP0=0, select bank0
  4789  0D16  1303               	bcf	3,6	;RP1=0, select bank0
  4790  0D17  0503               	andwf	3,w	;volatile
  4791  0D18  00F2               	movwf	??_fcscheck
  4792  0D19  0874               	movf	fcscheck@bt,w
  4793  0D1A  0672               	xorwf	??_fcscheck,w
  4794  0D1B  00F3               	movwf	??_fcscheck+1
  4795  0D1C  0373               	decf	??_fcscheck+1,w
  4796  0D1D  1D03               	btfss	3,2
  4797  0D1E  2D29               	goto	l3134
  4798                           
  4799                           ;decode_AX25.c: 326: dfcshi = dfcshi ^ 0x84;
  4800  0D1F  086C               	movf	_dfcshi,w
  4801  0D20  3A84               	xorlw	132
  4802  0D21  00F2               	movwf	??_fcscheck
  4803  0D22  0872               	movf	??_fcscheck,w
  4804  0D23  00EC               	movwf	_dfcshi
  4805                           
  4806                           ;decode_AX25.c: 327: dfcslo = dfcslo ^ 0x08;
  4807  0D24  086D               	movf	_dfcslo,w
  4808  0D25  3A08               	xorlw	8
  4809  0D26  00F2               	movwf	??_fcscheck
  4810  0D27  0872               	movf	??_fcscheck,w
  4811  0D28  00ED               	movwf	_dfcslo
  4812  0D29                     l3134:	
  4813                           
  4814                           ;decode_AX25.c: 328: }
  4815                           ;decode_AX25.c: 329: byte = byte >> 1;
  4816  0D29  0879               	movf	fcscheck@byte,w
  4817  0D2A  00F2               	movwf	??_fcscheck
  4818  0D2B  1003               	clrc
  4819  0D2C  0C72               	rrf	??_fcscheck,w
  4820  0D2D  00F3               	movwf	??_fcscheck+1
  4821  0D2E  0873               	movf	??_fcscheck+1,w
  4822  0D2F  00F9               	movwf	fcscheck@byte
  4823  0D30  3001               	movlw	1
  4824  0D31  07F7               	addwf	fcscheck@i_136,f
  4825  0D32  1803               	skipnc
  4826  0D33  0AF8               	incf	fcscheck@i_136+1,f
  4827  0D34  3000               	movlw	0
  4828  0D35  07F8               	addwf	fcscheck@i_136+1,f
  4829  0D36  3000               	movlw	0
  4830  0D37  0278               	subwf	fcscheck@i_136+1,w
  4831  0D38  3008               	movlw	8
  4832  0D39  1903               	skipnz
  4833  0D3A  0277               	subwf	fcscheck@i_136,w
  4834  0D3B  1C03               	skipc
  4835  0D3C  2D0C               	goto	l3128
  4836  0D3D                     l3140:	
  4837  0D3D  3001               	movlw	1
  4838  0D3E  07F5               	addwf	fcscheck@i,f
  4839  0D3F  1803               	skipnc
  4840  0D40  0AF6               	incf	fcscheck@i+1,f
  4841  0D41  3000               	movlw	0
  4842  0D42  07F6               	addwf	fcscheck@i+1,f
  4843  0D43  2CEB               	goto	l3142
  4844  0D44                     l263:	
  4845                           
  4846                           ;decode_AX25.c: 330: }
  4847                           ;decode_AX25.c: 331: }
  4848                           ;decode_AX25.c: 332: dfcslo = dfcslo ^ 0xff;
  4849  0D44  09ED               	comf	_dfcslo,f
  4850                           
  4851                           ;decode_AX25.c: 333: dfcshi = dfcshi ^ 0xff;
  4852  0D45  09EC               	comf	_dfcshi,f
  4853                           
  4854                           ;decode_AX25.c: 336: if((dPacket[dPacketnum-2] == dfcslo) && (dPacket[dPacketnum-1] == d
      +                          fcshi)){
  4855  0D46  0866               	movf	_dPacketnum,w
  4856  0D47  3EFE               	addlw	254
  4857  0D48  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4858  0D49  0084               	movwf	4
  4859  0D4A  1783               	bsf	3,7	;select IRP bank3
  4860  0D4B  0800               	movf	0,w
  4861  0D4C  066D               	xorwf	_dfcslo,w
  4862  0D4D  1D03               	skipz
  4863  0D4E  2D5C               	goto	l3154
  4864  0D4F  0866               	movf	_dPacketnum,w
  4865  0D50  3EFF               	addlw	255
  4866  0D51  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4867  0D52  0084               	movwf	4
  4868  0D53  0800               	movf	0,w
  4869  0D54  066C               	xorwf	_dfcshi,w
  4870  0D55  1D03               	skipz
  4871  0D56  2D5C               	goto	l3154
  4872                           
  4873                           ;decode_AX25.c: 341: return 1;
  4874  0D57  3001               	movlw	1
  4875  0D58  00F0               	movwf	?_fcscheck
  4876  0D59  3000               	movlw	0
  4877  0D5A  00F1               	movwf	?_fcscheck+1
  4878  0D5B  0008               	return
  4879  0D5C                     l3154:	
  4880                           ;decode_AX25.c: 342: }else{
  4881                           
  4882                           
  4883                           ;decode_AX25.c: 347: return 0;
  4884  0D5C  01F0               	clrf	?_fcscheck
  4885  0D5D  01F1               	clrf	?_fcscheck+1
  4886  0D5E  0008               	return
  4887  0D5F                     __end_of_fcscheck:	
  4888                           
  4889                           	psect	text9
  4890  17C0                     __ptext9:	
  4891 ;; *************** function _NM_waddress *****************
  4892 ;; Defined at:
  4893 ;;		line 68 in file "UART.c"
  4894 ;; Parameters:    Size  Location     Type
  4895 ;;  NM_wad_heade    1    wreg     unsigned char 
  4896 ;;  whigh_addres    1    1[COMMON] unsigned char 
  4897 ;;  wlow_address    1    2[COMMON] unsigned char 
  4898 ;; Auto vars:     Size  Location     Type
  4899 ;;  NM_wad_heade    1    3[COMMON] unsigned char 
  4900 ;; Return value:  Size  Location     Type
  4901 ;;                  1    wreg      void 
  4902 ;; Registers used:
  4903 ;;		wreg, status,2, status,0, pclath, cstack
  4904 ;; Tracked objects:
  4905 ;;		On entry : 0/0
  4906 ;;		On exit  : 0/0
  4907 ;;		Unchanged: 0/0
  4908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4909 ;;      Params:         2       0       0       0       0
  4910 ;;      Locals:         1       0       0       0       0
  4911 ;;      Temps:          0       0       0       0       0
  4912 ;;      Totals:         3       0       0       0       0
  4913 ;;Total ram usage:        3 bytes
  4914 ;; Hardware stack levels used:    1
  4915 ;; Hardware stack levels required when called:    1
  4916 ;; This function calls:
  4917 ;;		_putch
  4918 ;; This function is called by:
  4919 ;;		_main
  4920 ;; This function uses a non-reentrant model
  4921 ;;
  4922                           
  4923                           
  4924                           ;psect for function _NM_waddress
  4925  17C0                     _NM_waddress:	
  4926                           
  4927                           ;incstack = 0
  4928                           ; Regs used in _NM_waddress: [wreg+status,2+status,0+pclath+cstack]
  4929                           ;NM_waddress@NM_wad_header stored from wreg
  4930  17C0  00F3               	movwf	NM_waddress@NM_wad_header
  4931                           
  4932                           ;UART.c: 69: putch(NM_wad_header);
  4933  17C1  0873               	movf	NM_waddress@NM_wad_header,w
  4934  17C2  160A  118A  2796  160A  118A  	fcall	_putch
  4935                           
  4936                           ;UART.c: 70: putch(whigh_address);
  4937  17C7  0871               	movf	NM_waddress@whigh_address,w
  4938  17C8  160A  118A  2796  160A  118A  	fcall	_putch
  4939                           
  4940                           ;UART.c: 71: putch(wlow_address);
  4941  17CD  0872               	movf	NM_waddress@wlow_address,w
  4942  17CE  160A  118A  2796   	fcall	_putch
  4943  17D1  0008               	return
  4944  17D2                     __end_of_NM_waddress:	
  4945                           
  4946                           	psect	text10
  4947  1796                     __ptext10:	
  4948 ;; *************** function _putch *****************
  4949 ;; Defined at:
  4950 ;;		line 35 in file "UART.c"
  4951 ;; Parameters:    Size  Location     Type
  4952 ;;  byte            1    wreg     unsigned char 
  4953 ;; Auto vars:     Size  Location     Type
  4954 ;;  byte            1    0[COMMON] unsigned char 
  4955 ;; Return value:  Size  Location     Type
  4956 ;;                  1    wreg      void 
  4957 ;; Registers used:
  4958 ;;		wreg
  4959 ;; Tracked objects:
  4960 ;;		On entry : 0/0
  4961 ;;		On exit  : 0/0
  4962 ;;		Unchanged: 0/0
  4963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4964 ;;      Params:         0       0       0       0       0
  4965 ;;      Locals:         1       0       0       0       0
  4966 ;;      Temps:          0       0       0       0       0
  4967 ;;      Totals:         1       0       0       0       0
  4968 ;;Total ram usage:        1 bytes
  4969 ;; Hardware stack levels used:    1
  4970 ;; This function calls:
  4971 ;;		Nothing
  4972 ;; This function is called by:
  4973 ;;		_NM_waddress
  4974 ;;		_putstr
  4975 ;;		_putcrlf
  4976 ;;		_put_error
  4977 ;;		_put_ok
  4978 ;;		_putAX25
  4979 ;;		_conv_DI_UARTRX
  4980 ;;		_test_Packetmaker
  4981 ;;		_EEPROM_Read
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           
  4986                           ;psect for function _putch
  4987  1796                     _putch:	
  4988                           
  4989                           ;incstack = 0
  4990                           ; Regs used in _putch: [wreg]
  4991                           ;putch@byte stored from wreg
  4992  1796  00F0               	movwf	putch@byte
  4993  1797                     l56:	
  4994                           ;UART.c: 36: while(!TXIF);
  4995                           
  4996  1797  1283               	bcf	3,5	;RP0=0, select bank0
  4997  1798  1303               	bcf	3,6	;RP1=0, select bank0
  4998  1799  1E0C               	btfss	12,4	;volatile
  4999  179A  2F97               	goto	l56
  5000                           
  5001                           ;UART.c: 37: TXREG = byte;
  5002  179B  0870               	movf	putch@byte,w
  5003  179C  0099               	movwf	25	;volatile
  5004  179D  0008               	return
  5005  179E                     __end_of_putch:	
  5006                           
  5007                           	psect	text11
  5008  17E7                     __ptext11:	
  5009 ;; *************** function _Init_SERIAL *****************
  5010 ;; Defined at:
  5011 ;;		line 5 in file "UART.c"
  5012 ;; Parameters:    Size  Location     Type
  5013 ;;		None
  5014 ;; Auto vars:     Size  Location     Type
  5015 ;;		None
  5016 ;; Return value:  Size  Location     Type
  5017 ;;                  1    wreg      void 
  5018 ;; Registers used:
  5019 ;;		wreg
  5020 ;; Tracked objects:
  5021 ;;		On entry : 0/0
  5022 ;;		On exit  : 0/0
  5023 ;;		Unchanged: 0/0
  5024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5025 ;;      Params:         0       0       0       0       0
  5026 ;;      Locals:         0       0       0       0       0
  5027 ;;      Temps:          0       0       0       0       0
  5028 ;;      Totals:         0       0       0       0       0
  5029 ;;Total ram usage:        0 bytes
  5030 ;; Hardware stack levels used:    1
  5031 ;; This function calls:
  5032 ;;		Nothing
  5033 ;; This function is called by:
  5034 ;;		_main
  5035 ;; This function uses a non-reentrant model
  5036 ;;
  5037                           
  5038                           
  5039                           ;psect for function _Init_SERIAL
  5040  17E7                     _Init_SERIAL:	
  5041                           
  5042                           ;UART.c: 6: SPBRG = 10;
  5043                           
  5044                           ;incstack = 0
  5045                           ; Regs used in _Init_SERIAL: [wreg]
  5046  17E7  300A               	movlw	10
  5047  17E8  1683               	bsf	3,5	;RP0=1, select bank1
  5048  17E9  1303               	bcf	3,6	;RP1=0, select bank1
  5049  17EA  0099               	movwf	25	;volatile
  5050                           
  5051                           ;UART.c: 7: BRGH = 0;
  5052  17EB  1118               	bcf	24,2	;volatile
  5053                           
  5054                           ;UART.c: 8: SYNC = 0;
  5055  17EC  1218               	bcf	24,4	;volatile
  5056                           
  5057                           ;UART.c: 9: SPEN = 1;
  5058  17ED  1283               	bcf	3,5	;RP0=0, select bank0
  5059  17EE  1303               	bcf	3,6	;RP1=0, select bank0
  5060  17EF  1798               	bsf	24,7	;volatile
  5061                           
  5062                           ;UART.c: 10: CREN = 1;
  5063  17F0  1618               	bsf	24,4	;volatile
  5064                           
  5065                           ;UART.c: 11: SREN = 0;
  5066  17F1  1298               	bcf	24,5	;volatile
  5067                           
  5068                           ;UART.c: 12: RCIF = 0;
  5069  17F2  128C               	bcf	12,5	;volatile
  5070                           
  5071                           ;UART.c: 13: TXIE = 0;
  5072  17F3  1683               	bsf	3,5	;RP0=1, select bank1
  5073  17F4  1303               	bcf	3,6	;RP1=0, select bank1
  5074  17F5  120C               	bcf	12,4	;volatile
  5075                           
  5076                           ;UART.c: 14: RCIE = 1;
  5077  17F6  168C               	bsf	12,5	;volatile
  5078                           
  5079                           ;UART.c: 15: TX9 = 0;
  5080  17F7  1318               	bcf	24,6	;volatile
  5081                           
  5082                           ;UART.c: 16: RX9 = 0;
  5083  17F8  1283               	bcf	3,5	;RP0=0, select bank0
  5084  17F9  1303               	bcf	3,6	;RP1=0, select bank0
  5085  17FA  1318               	bcf	24,6	;volatile
  5086                           
  5087                           ;UART.c: 17: TXEN = 0;
  5088  17FB  1683               	bsf	3,5	;RP0=1, select bank1
  5089  17FC  1303               	bcf	3,6	;RP1=0, select bank1
  5090  17FD  1298               	bcf	24,5	;volatile
  5091                           
  5092                           ;UART.c: 18: TXEN = 1;
  5093  17FE  1698               	bsf	24,5	;volatile
  5094  17FF  0008               	return
  5095  1800                     __end_of_Init_SERIAL:	
  5096                           
  5097                           	psect	text12
  5098  084A                     __ptext12:	
  5099 ;; *************** function _Init_MPU *****************
  5100 ;; Defined at:
  5101 ;;		line 8 in file "Init_MPU.c"
  5102 ;; Parameters:    Size  Location     Type
  5103 ;;		None
  5104 ;; Auto vars:     Size  Location     Type
  5105 ;;		None
  5106 ;; Return value:  Size  Location     Type
  5107 ;;                  1    wreg      void 
  5108 ;; Registers used:
  5109 ;;		wreg, status,2
  5110 ;; Tracked objects:
  5111 ;;		On entry : 0/0
  5112 ;;		On exit  : 0/0
  5113 ;;		Unchanged: 0/0
  5114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5115 ;;      Params:         0       0       0       0       0
  5116 ;;      Locals:         0       0       0       0       0
  5117 ;;      Temps:          0       0       0       0       0
  5118 ;;      Totals:         0       0       0       0       0
  5119 ;;Total ram usage:        0 bytes
  5120 ;; Hardware stack levels used:    1
  5121 ;; This function calls:
  5122 ;;		Nothing
  5123 ;; This function is called by:
  5124 ;;		_main
  5125 ;; This function uses a non-reentrant model
  5126 ;;
  5127                           
  5128                           
  5129                           ;psect for function _Init_MPU
  5130  084A                     _Init_MPU:	
  5131                           
  5132                           ;Init_MPU.c: 11: PORTA = 0x00;
  5133                           
  5134                           ;incstack = 0
  5135                           ; Regs used in _Init_MPU: [wreg+status,2]
  5136  084A  1283               	bcf	3,5	;RP0=0, select bank0
  5137  084B  1303               	bcf	3,6	;RP1=0, select bank0
  5138  084C  0185               	clrf	5	;volatile
  5139                           
  5140                           ;Init_MPU.c: 12: PORTB = 0x00;
  5141  084D  0186               	clrf	6	;volatile
  5142                           
  5143                           ;Init_MPU.c: 13: PORTC = 0x00;
  5144  084E  0187               	clrf	7	;volatile
  5145                           
  5146                           ;Init_MPU.c: 14: PORTD = 0x00;
  5147  084F  0188               	clrf	8	;volatile
  5148                           
  5149                           ;Init_MPU.c: 15: PORTE = 0x00;
  5150  0850  0189               	clrf	9	;volatile
  5151                           
  5152                           ;Init_MPU.c: 18: ANSEL = 0x00;
  5153  0851  1683               	bsf	3,5	;RP0=1, select bank3
  5154  0852  1703               	bsf	3,6	;RP1=1, select bank3
  5155  0853  0188               	clrf	8	;volatile
  5156                           
  5157                           ;Init_MPU.c: 19: ANSELH = 0x00;
  5158  0854  0189               	clrf	9	;volatile
  5159                           
  5160                           ;Init_MPU.c: 23: TRISA = 0b10000000;
  5161  0855  3080               	movlw	128
  5162  0856  1683               	bsf	3,5	;RP0=1, select bank1
  5163  0857  1303               	bcf	3,6	;RP1=0, select bank1
  5164  0858  0085               	movwf	5	;volatile
  5165                           
  5166                           ;Init_MPU.c: 24: TRISB = 0b00100000;
  5167  0859  3020               	movlw	32
  5168  085A  0086               	movwf	6	;volatile
  5169                           
  5170                           ;Init_MPU.c: 25: TRISC = 0b10011000;
  5171  085B  3098               	movlw	152
  5172  085C  0087               	movwf	7	;volatile
  5173                           
  5174                           ;Init_MPU.c: 26: TRISD = 0b00000000;
  5175  085D  0188               	clrf	8	;volatile
  5176                           
  5177                           ;Init_MPU.c: 27: TRISE = 0b00000000;
  5178  085E  0189               	clrf	9	;volatile
  5179                           
  5180                           ;Init_MPU.c: 30: PORTA = 0x00;
  5181  085F  1283               	bcf	3,5	;RP0=0, select bank0
  5182  0860  1303               	bcf	3,6	;RP1=0, select bank0
  5183  0861  0185               	clrf	5	;volatile
  5184                           
  5185                           ;Init_MPU.c: 31: PORTB = 0x00;
  5186  0862  0186               	clrf	6	;volatile
  5187                           
  5188                           ;Init_MPU.c: 32: PORTC = 0x00;
  5189  0863  0187               	clrf	7	;volatile
  5190                           
  5191                           ;Init_MPU.c: 33: PORTD = 0x00;
  5192  0864  0188               	clrf	8	;volatile
  5193                           
  5194                           ;Init_MPU.c: 34: PORTE = 0x00;
  5195  0865  0189               	clrf	9	;volatile
  5196  0866  0008               	return
  5197  0867                     __end_of_Init_MPU:	
  5198                           
  5199                           	psect	text13
  5200  098F                     __ptext13:	
  5201 ;; *************** function _Init_I2C_M *****************
  5202 ;; Defined at:
  5203 ;;		line 8 in file "I2C.c"
  5204 ;; Parameters:    Size  Location     Type
  5205 ;;  c               4    0[BANK0 ] const unsigned long 
  5206 ;; Auto vars:     Size  Location     Type
  5207 ;;		None
  5208 ;; Return value:  Size  Location     Type
  5209 ;;                  1    wreg      void 
  5210 ;; Registers used:
  5211 ;;		wreg, status,2, status,0, pclath, cstack
  5212 ;; Tracked objects:
  5213 ;;		On entry : 0/0
  5214 ;;		On exit  : 0/0
  5215 ;;		Unchanged: 0/0
  5216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5217 ;;      Params:         0       4       0       0       0
  5218 ;;      Locals:         0       0       0       0       0
  5219 ;;      Temps:          0       4       0       0       0
  5220 ;;      Totals:         0       8       0       0       0
  5221 ;;Total ram usage:        8 bytes
  5222 ;; Hardware stack levels used:    1
  5223 ;; Hardware stack levels required when called:    1
  5224 ;; This function calls:
  5225 ;;		___lldiv
  5226 ;; This function is called by:
  5227 ;;		_main
  5228 ;; This function uses a non-reentrant model
  5229 ;;
  5230                           
  5231                           
  5232                           ;psect for function _Init_I2C_M
  5233  098F                     _Init_I2C_M:	
  5234                           
  5235                           ;I2C.c: 9: SSPCON = 0b00101000;
  5236                           
  5237                           ;incstack = 0
  5238                           ; Regs used in _Init_I2C_M: [wreg+status,2+status,0+pclath+cstack]
  5239  098F  3028               	movlw	40
  5240  0990  1283               	bcf	3,5	;RP0=0, select bank0
  5241  0991  1303               	bcf	3,6	;RP1=0, select bank0
  5242  0992  0094               	movwf	20	;volatile
  5243                           
  5244                           ;I2C.c: 10: SSPCON2 = 0;
  5245  0993  1683               	bsf	3,5	;RP0=1, select bank1
  5246  0994  1303               	bcf	3,6	;RP1=0, select bank1
  5247  0995  0191               	clrf	17	;volatile
  5248                           
  5249                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  5250  0996  1283               	bcf	3,5	;RP0=0, select bank0
  5251  0997  1303               	bcf	3,6	;RP1=0, select bank0
  5252  0998  0820               	movf	Init_I2C_M@c,w
  5253  0999  00A4               	movwf	??_Init_I2C_M
  5254  099A  0821               	movf	Init_I2C_M@c+1,w
  5255  099B  00A5               	movwf	??_Init_I2C_M+1
  5256  099C  0822               	movf	Init_I2C_M@c+2,w
  5257  099D  00A6               	movwf	??_Init_I2C_M+2
  5258  099E  0823               	movf	Init_I2C_M@c+3,w
  5259  099F  00A7               	movwf	??_Init_I2C_M+3
  5260  09A0  3002               	movlw	2
  5261  09A1                     u3155:	
  5262  09A1  1003               	clrc
  5263  09A2  0DA4               	rlf	??_Init_I2C_M,f
  5264  09A3  0DA5               	rlf	??_Init_I2C_M+1,f
  5265  09A4  0DA6               	rlf	??_Init_I2C_M+2,f
  5266  09A5  0DA7               	rlf	??_Init_I2C_M+3,f
  5267  09A6  3EFF               	addlw	-1
  5268  09A7  1D03               	skipz
  5269  09A8  29A1               	goto	u3155
  5270  09A9  0827               	movf	??_Init_I2C_M+3,w
  5271  09AA  00F3               	movwf	___lldiv@divisor+3
  5272  09AB  0826               	movf	??_Init_I2C_M+2,w
  5273  09AC  00F2               	movwf	___lldiv@divisor+2
  5274  09AD  0825               	movf	??_Init_I2C_M+1,w
  5275  09AE  00F1               	movwf	___lldiv@divisor+1
  5276  09AF  0824               	movf	??_Init_I2C_M,w
  5277  09B0  00F0               	movwf	___lldiv@divisor
  5278  09B1  3000               	movlw	0
  5279  09B2  00F7               	movwf	___lldiv@dividend+3
  5280  09B3  3098               	movlw	152
  5281  09B4  00F6               	movwf	___lldiv@dividend+2
  5282  09B5  3096               	movlw	150
  5283  09B6  00F5               	movwf	___lldiv@dividend+1
  5284  09B7  3080               	movlw	128
  5285  09B8  00F4               	movwf	___lldiv@dividend
  5286  09B9  120A  158A  23A1   	fcall	___lldiv
  5287  09BC  0870               	movf	?___lldiv,w
  5288  09BD  3EFF               	addlw	255
  5289  09BE  1683               	bsf	3,5	;RP0=1, select bank1
  5290  09BF  1303               	bcf	3,6	;RP1=0, select bank1
  5291  09C0  0093               	movwf	19	;volatile
  5292                           
  5293                           ;I2C.c: 12: SSPSTAT = 0;
  5294  09C1  0194               	clrf	20	;volatile
  5295  09C2  0008               	return
  5296  09C3                     __end_of_Init_I2C_M:	
  5297                           
  5298                           	psect	text14
  5299  0BA1                     __ptext14:	
  5300 ;; *************** function ___lldiv *****************
  5301 ;; Defined at:
  5302 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  5303 ;; Parameters:    Size  Location     Type
  5304 ;;  divisor         4    0[COMMON] unsigned long 
  5305 ;;  dividend        4    4[COMMON] unsigned long 
  5306 ;; Auto vars:     Size  Location     Type
  5307 ;;  quotient        4    9[COMMON] unsigned long 
  5308 ;;  counter         1   13[COMMON] unsigned char 
  5309 ;; Return value:  Size  Location     Type
  5310 ;;                  4    0[COMMON] unsigned long 
  5311 ;; Registers used:
  5312 ;;		wreg, status,2, status,0
  5313 ;; Tracked objects:
  5314 ;;		On entry : 0/0
  5315 ;;		On exit  : 0/0
  5316 ;;		Unchanged: 0/0
  5317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5318 ;;      Params:         8       0       0       0       0
  5319 ;;      Locals:         5       0       0       0       0
  5320 ;;      Temps:          1       0       0       0       0
  5321 ;;      Totals:        14       0       0       0       0
  5322 ;;Total ram usage:       14 bytes
  5323 ;; Hardware stack levels used:    1
  5324 ;; This function calls:
  5325 ;;		Nothing
  5326 ;; This function is called by:
  5327 ;;		_Init_I2C_M
  5328 ;; This function uses a non-reentrant model
  5329 ;;
  5330                           
  5331                           
  5332                           ;psect for function ___lldiv
  5333  0BA1                     ___lldiv:	
  5334                           
  5335                           ;incstack = 0
  5336                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5337  0BA1  3000               	movlw	0
  5338  0BA2  00FC               	movwf	___lldiv@quotient+3
  5339  0BA3  3000               	movlw	0
  5340  0BA4  00FB               	movwf	___lldiv@quotient+2
  5341  0BA5  3000               	movlw	0
  5342  0BA6  00FA               	movwf	___lldiv@quotient+1
  5343  0BA7  3000               	movlw	0
  5344  0BA8  00F9               	movwf	___lldiv@quotient
  5345  0BA9  0873               	movf	___lldiv@divisor+3,w
  5346  0BAA  0472               	iorwf	___lldiv@divisor+2,w
  5347  0BAB  0471               	iorwf	___lldiv@divisor+1,w
  5348  0BAC  0470               	iorwf	___lldiv@divisor,w
  5349  0BAD  1903               	skipnz
  5350  0BAE  2BF6               	goto	l3318
  5351  0BAF  01FD               	clrf	___lldiv@counter
  5352  0BB0  0AFD               	incf	___lldiv@counter,f
  5353  0BB1                     l3304:	
  5354  0BB1  1BF3               	btfsc	___lldiv@divisor+3,7
  5355  0BB2  2BC1               	goto	l3306
  5356  0BB3  3001               	movlw	1
  5357  0BB4  00F8               	movwf	??___lldiv
  5358  0BB5                     u3015:	
  5359  0BB5  1003               	clrc
  5360  0BB6  0DF0               	rlf	___lldiv@divisor,f
  5361  0BB7  0DF1               	rlf	___lldiv@divisor+1,f
  5362  0BB8  0DF2               	rlf	___lldiv@divisor+2,f
  5363  0BB9  0DF3               	rlf	___lldiv@divisor+3,f
  5364  0BBA  0BF8               	decfsz	??___lldiv,f
  5365  0BBB  2BB5               	goto	u3015
  5366  0BBC  3001               	movlw	1
  5367  0BBD  00F8               	movwf	??___lldiv
  5368  0BBE  0878               	movf	??___lldiv,w
  5369  0BBF  07FD               	addwf	___lldiv@counter,f
  5370  0BC0  2BB1               	goto	l3304
  5371  0BC1                     l3306:	
  5372  0BC1  3001               	movlw	1
  5373  0BC2  00F8               	movwf	??___lldiv
  5374  0BC3                     u3035:	
  5375  0BC3  1003               	clrc
  5376  0BC4  0DF9               	rlf	___lldiv@quotient,f
  5377  0BC5  0DFA               	rlf	___lldiv@quotient+1,f
  5378  0BC6  0DFB               	rlf	___lldiv@quotient+2,f
  5379  0BC7  0DFC               	rlf	___lldiv@quotient+3,f
  5380  0BC8  0BF8               	decfsz	??___lldiv,f
  5381  0BC9  2BC3               	goto	u3035
  5382  0BCA  0873               	movf	___lldiv@divisor+3,w
  5383  0BCB  0277               	subwf	___lldiv@dividend+3,w
  5384  0BCC  1D03               	skipz
  5385  0BCD  2BD8               	goto	u3045
  5386  0BCE  0872               	movf	___lldiv@divisor+2,w
  5387  0BCF  0276               	subwf	___lldiv@dividend+2,w
  5388  0BD0  1D03               	skipz
  5389  0BD1  2BD8               	goto	u3045
  5390  0BD2  0871               	movf	___lldiv@divisor+1,w
  5391  0BD3  0275               	subwf	___lldiv@dividend+1,w
  5392  0BD4  1D03               	skipz
  5393  0BD5  2BD8               	goto	u3045
  5394  0BD6  0870               	movf	___lldiv@divisor,w
  5395  0BD7  0274               	subwf	___lldiv@dividend,w
  5396  0BD8                     u3045:	
  5397  0BD8  1C03               	skipc
  5398  0BD9  2BE9               	goto	l3314
  5399  0BDA  0870               	movf	___lldiv@divisor,w
  5400  0BDB  02F4               	subwf	___lldiv@dividend,f
  5401  0BDC  0871               	movf	___lldiv@divisor+1,w
  5402  0BDD  1C03               	skipc
  5403  0BDE  0F71               	incfsz	___lldiv@divisor+1,w
  5404  0BDF  02F5               	subwf	___lldiv@dividend+1,f
  5405  0BE0  0872               	movf	___lldiv@divisor+2,w
  5406  0BE1  1C03               	skipc
  5407  0BE2  0F72               	incfsz	___lldiv@divisor+2,w
  5408  0BE3  02F6               	subwf	___lldiv@dividend+2,f
  5409  0BE4  0873               	movf	___lldiv@divisor+3,w
  5410  0BE5  1C03               	skipc
  5411  0BE6  0F73               	incfsz	___lldiv@divisor+3,w
  5412  0BE7  02F7               	subwf	___lldiv@dividend+3,f
  5413  0BE8  1479               	bsf	___lldiv@quotient,0
  5414  0BE9                     l3314:	
  5415  0BE9  3001               	movlw	1
  5416  0BEA                     u3055:	
  5417  0BEA  1003               	clrc
  5418  0BEB  0CF3               	rrf	___lldiv@divisor+3,f
  5419  0BEC  0CF2               	rrf	___lldiv@divisor+2,f
  5420  0BED  0CF1               	rrf	___lldiv@divisor+1,f
  5421  0BEE  0CF0               	rrf	___lldiv@divisor,f
  5422  0BEF  3EFF               	addlw	-1
  5423  0BF0  1D03               	skipz
  5424  0BF1  2BEA               	goto	u3055
  5425  0BF2  3001               	movlw	1
  5426  0BF3  02FD               	subwf	___lldiv@counter,f
  5427  0BF4  1D03               	btfss	3,2
  5428  0BF5  2BC1               	goto	l3306
  5429  0BF6                     l3318:	
  5430  0BF6  087C               	movf	___lldiv@quotient+3,w
  5431  0BF7  00F3               	movwf	?___lldiv+3
  5432  0BF8  087B               	movf	___lldiv@quotient+2,w
  5433  0BF9  00F2               	movwf	?___lldiv+2
  5434  0BFA  087A               	movf	___lldiv@quotient+1,w
  5435  0BFB  00F1               	movwf	?___lldiv+1
  5436  0BFC  0879               	movf	___lldiv@quotient,w
  5437  0BFD  00F0               	movwf	?___lldiv
  5438  0BFE  0008               	return
  5439  0BFF                     __end_of___lldiv:	
  5440                           
  5441                           	psect	text15
  5442  0935                     __ptext15:	
  5443 ;; *************** function _FMTX *****************
  5444 ;; Defined at:
  5445 ;;		line 270 in file "FMCW.c"
  5446 ;; Parameters:    Size  Location     Type
  5447 ;;  Nref            2   60[BANK0 ] int 
  5448 ;;  Nprg            2   62[BANK0 ] PTR int 
  5449 ;;		 -> RAM(512), main@FMTX_Nprg(10), FMTX_Nprg(10), 
  5450 ;; Auto vars:     Size  Location     Type
  5451 ;;  fmtx            2   64[BANK0 ] int 
  5452 ;; Return value:  Size  Location     Type
  5453 ;;                  1    wreg      void 
  5454 ;; Registers used:
  5455 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5456 ;; Tracked objects:
  5457 ;;		On entry : 0/0
  5458 ;;		On exit  : 0/0
  5459 ;;		Unchanged: 0/0
  5460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5461 ;;      Params:         0       4       0       0       0
  5462 ;;      Locals:         0       2       0       0       0
  5463 ;;      Temps:          0       0       0       0       0
  5464 ;;      Totals:         0       6       0       0       0
  5465 ;;Total ram usage:        6 bytes
  5466 ;; Hardware stack levels used:    1
  5467 ;; Hardware stack levels required when called:    3
  5468 ;; This function calls:
  5469 ;;		_OPINIT
  5470 ;;		_OUTFQ
  5471 ;;		_RFDOUT
  5472 ;; This function is called by:
  5473 ;;		_main
  5474 ;;		_SetPLL
  5475 ;; This function uses a non-reentrant model
  5476 ;;
  5477                           
  5478                           
  5479                           ;psect for function _FMTX
  5480  0935                     _FMTX:	
  5481                           
  5482                           ;FMCW.c: 271: int fmtx = 1;
  5483                           
  5484                           ;incstack = 0
  5485                           ; Regs used in _FMTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5486  0935  3001               	movlw	1
  5487  0936  1283               	bcf	3,5	;RP0=0, select bank0
  5488  0937  1303               	bcf	3,6	;RP1=0, select bank0
  5489  0938  00E0               	movwf	FMTX@fmtx
  5490  0939  3000               	movlw	0
  5491  093A  00E1               	movwf	FMTX@fmtx+1
  5492                           
  5493                           ;FMCW.c: 272: OPINIT(fmtx);
  5494  093B  0861               	movf	FMTX@fmtx+1,w
  5495  093C  00F5               	movwf	OPINIT@fmcwtxrx+1
  5496  093D  0860               	movf	FMTX@fmtx,w
  5497  093E  00F4               	movwf	OPINIT@fmcwtxrx
  5498  093F  120A  158A  2460  120A  158A  	fcall	_OPINIT
  5499                           
  5500                           ;FMCW.c: 273: RFDOUT(fmtx, Nref);
  5501  0944  1283               	bcf	3,5	;RP0=0, select bank0
  5502  0945  1303               	bcf	3,6	;RP1=0, select bank0
  5503  0946  0861               	movf	FMTX@fmtx+1,w
  5504  0947  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5505  0948  0860               	movf	FMTX@fmtx,w
  5506  0949  00F9               	movwf	RFDOUT@fmcwtxrx
  5507  094A  085D               	movf	FMTX@Nref+1,w
  5508  094B  00FC               	movwf	RFDOUT@Nref+1
  5509  094C  085C               	movf	FMTX@Nref,w
  5510  094D  00FB               	movwf	RFDOUT@Nref
  5511  094E  120A  158A  255F  120A  158A  	fcall	_RFDOUT
  5512                           
  5513                           ;FMCW.c: 274: OUTFQ(fmtx, Nprg);
  5514  0953  1283               	bcf	3,5	;RP0=0, select bank0
  5515  0954  1303               	bcf	3,6	;RP1=0, select bank0
  5516  0955  0861               	movf	FMTX@fmtx+1,w
  5517  0956  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5518  0957  0860               	movf	FMTX@fmtx,w
  5519  0958  00F9               	movwf	OUTFQ@fmcwtxrx
  5520  0959  085E               	movf	FMTX@Nprg,w
  5521  095A  00FB               	movwf	OUTFQ@Nprg
  5522  095B  085F               	movf	FMTX@Nprg+1,w
  5523  095C  00FC               	movwf	OUTFQ@Nprg+1
  5524  095D  120A  118A  20AC   	fcall	_OUTFQ
  5525  0960  0008               	return
  5526  0961                     __end_of_FMTX:	
  5527                           
  5528                           	psect	text16
  5529  0909                     __ptext16:	
  5530 ;; *************** function _FMRX *****************
  5531 ;; Defined at:
  5532 ;;		line 298 in file "FMCW.c"
  5533 ;; Parameters:    Size  Location     Type
  5534 ;;  Nref            2   60[BANK0 ] int 
  5535 ;;  Nprg            2   62[BANK0 ] PTR int 
  5536 ;;		 -> RAM(512), main@FMRX_Nprg(10), FMRX_Nprg(10), 
  5537 ;; Auto vars:     Size  Location     Type
  5538 ;;  fmrx            2   64[BANK0 ] int 
  5539 ;; Return value:  Size  Location     Type
  5540 ;;                  1    wreg      void 
  5541 ;; Registers used:
  5542 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5543 ;; Tracked objects:
  5544 ;;		On entry : 0/0
  5545 ;;		On exit  : 0/0
  5546 ;;		Unchanged: 0/0
  5547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5548 ;;      Params:         0       4       0       0       0
  5549 ;;      Locals:         0       2       0       0       0
  5550 ;;      Temps:          0       0       0       0       0
  5551 ;;      Totals:         0       6       0       0       0
  5552 ;;Total ram usage:        6 bytes
  5553 ;; Hardware stack levels used:    1
  5554 ;; Hardware stack levels required when called:    3
  5555 ;; This function calls:
  5556 ;;		_OPINIT
  5557 ;;		_OUTFQ
  5558 ;;		_RFDOUT
  5559 ;; This function is called by:
  5560 ;;		_main
  5561 ;;		_SetPLL
  5562 ;; This function uses a non-reentrant model
  5563 ;;
  5564                           
  5565                           
  5566                           ;psect for function _FMRX
  5567  0909                     _FMRX:	
  5568                           
  5569                           ;FMCW.c: 299: int fmrx = 3;
  5570                           
  5571                           ;incstack = 0
  5572                           ; Regs used in _FMRX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5573  0909  3003               	movlw	3
  5574  090A  1283               	bcf	3,5	;RP0=0, select bank0
  5575  090B  1303               	bcf	3,6	;RP1=0, select bank0
  5576  090C  00E0               	movwf	FMRX@fmrx
  5577  090D  3000               	movlw	0
  5578  090E  00E1               	movwf	FMRX@fmrx+1
  5579                           
  5580                           ;FMCW.c: 300: OPINIT(fmrx);
  5581  090F  0861               	movf	FMRX@fmrx+1,w
  5582  0910  00F5               	movwf	OPINIT@fmcwtxrx+1
  5583  0911  0860               	movf	FMRX@fmrx,w
  5584  0912  00F4               	movwf	OPINIT@fmcwtxrx
  5585  0913  120A  158A  2460  120A  158A  	fcall	_OPINIT
  5586                           
  5587                           ;FMCW.c: 301: RFDOUT(fmrx, Nref);
  5588  0918  1283               	bcf	3,5	;RP0=0, select bank0
  5589  0919  1303               	bcf	3,6	;RP1=0, select bank0
  5590  091A  0861               	movf	FMRX@fmrx+1,w
  5591  091B  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5592  091C  0860               	movf	FMRX@fmrx,w
  5593  091D  00F9               	movwf	RFDOUT@fmcwtxrx
  5594  091E  085D               	movf	FMRX@Nref+1,w
  5595  091F  00FC               	movwf	RFDOUT@Nref+1
  5596  0920  085C               	movf	FMRX@Nref,w
  5597  0921  00FB               	movwf	RFDOUT@Nref
  5598  0922  120A  158A  255F  120A  158A  	fcall	_RFDOUT
  5599                           
  5600                           ;FMCW.c: 302: OUTFQ(fmrx, Nprg);
  5601  0927  1283               	bcf	3,5	;RP0=0, select bank0
  5602  0928  1303               	bcf	3,6	;RP1=0, select bank0
  5603  0929  0861               	movf	FMRX@fmrx+1,w
  5604  092A  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5605  092B  0860               	movf	FMRX@fmrx,w
  5606  092C  00F9               	movwf	OUTFQ@fmcwtxrx
  5607  092D  085E               	movf	FMRX@Nprg,w
  5608  092E  00FB               	movwf	OUTFQ@Nprg
  5609  092F  085F               	movf	FMRX@Nprg+1,w
  5610  0930  00FC               	movwf	OUTFQ@Nprg+1
  5611  0931  120A  118A  20AC   	fcall	_OUTFQ
  5612  0934  0008               	return
  5613  0935                     __end_of_FMRX:	
  5614                           
  5615                           	psect	text17
  5616  0B44                     __ptext17:	
  5617 ;; *************** function _EEPROM_Write *****************
  5618 ;; Defined at:
  5619 ;;		line 51 in file "I2C.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;  EEPROM_addre    1    wreg     unsigned char 
  5622 ;;  high_address    1    2[COMMON] unsigned char 
  5623 ;;  low_address     1    3[COMMON] unsigned char 
  5624 ;;  data            1    4[COMMON] PTR unsigned char 
  5625 ;;		 -> NULL(0), dData(32), 
  5626 ;; Auto vars:     Size  Location     Type
  5627 ;;  EEPROM_addre    1    8[COMMON] unsigned char 
  5628 ;;  Address         1    9[COMMON] unsigned char 
  5629 ;; Return value:  Size  Location     Type
  5630 ;;                  1    wreg      void 
  5631 ;; Registers used:
  5632 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5633 ;; Tracked objects:
  5634 ;;		On entry : 0/0
  5635 ;;		On exit  : 0/0
  5636 ;;		Unchanged: 0/0
  5637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5638 ;;      Params:         3       0       0       0       0
  5639 ;;      Locals:         2       0       0       0       0
  5640 ;;      Temps:          3       0       0       0       0
  5641 ;;      Totals:         8       0       0       0       0
  5642 ;;Total ram usage:        8 bytes
  5643 ;; Hardware stack levels used:    1
  5644 ;; Hardware stack levels required when called:    2
  5645 ;; This function calls:
  5646 ;;		_I2C_Master_Start
  5647 ;;		_I2C_Master_Stop
  5648 ;;		_I2C_Master_Write
  5649 ;; This function is called by:
  5650 ;;		_main
  5651 ;; This function uses a non-reentrant model
  5652 ;;
  5653                           
  5654                           
  5655                           ;psect for function _EEPROM_Write
  5656  0B44                     _EEPROM_Write:	
  5657                           
  5658                           ;incstack = 0
  5659                           ; Regs used in _EEPROM_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5660                           ;EEPROM_Write@EEPROM_address stored from wreg
  5661  0B44  00F8               	movwf	EEPROM_Write@EEPROM_address
  5662                           
  5663                           ;I2C.c: 52: UBYTE Address = EEPROM_address << 1;
  5664  0B45  0878               	movf	EEPROM_Write@EEPROM_address,w
  5665  0B46  00F5               	movwf	??_EEPROM_Write
  5666  0B47  0775               	addwf	??_EEPROM_Write,w
  5667  0B48  00F6               	movwf	??_EEPROM_Write+1
  5668  0B49  0876               	movf	??_EEPROM_Write+1,w
  5669  0B4A  00F9               	movwf	EEPROM_Write@Address
  5670                           
  5671                           ;I2C.c: 55: I2C_Master_Start();
  5672  0B4B  160A  118A  2787  120A  158A  	fcall	_I2C_Master_Start
  5673                           
  5674                           ;I2C.c: 56: I2C_Master_Write(Address);
  5675  0B50  0879               	movf	EEPROM_Write@Address,w
  5676  0B51  00F5               	movwf	??_EEPROM_Write
  5677  0B52  01F6               	clrf	??_EEPROM_Write+1
  5678  0B53  0875               	movf	??_EEPROM_Write,w
  5679  0B54  00F0               	movwf	I2C_Master_Write@d
  5680  0B55  0876               	movf	??_EEPROM_Write+1,w
  5681  0B56  00F1               	movwf	I2C_Master_Write@d+1
  5682  0B57  160A  118A  278E  120A  158A  	fcall	_I2C_Master_Write
  5683                           
  5684                           ;I2C.c: 57: I2C_Master_Write(high_address);
  5685  0B5C  0872               	movf	EEPROM_Write@high_address,w
  5686  0B5D  00F5               	movwf	??_EEPROM_Write
  5687  0B5E  01F6               	clrf	??_EEPROM_Write+1
  5688  0B5F  0875               	movf	??_EEPROM_Write,w
  5689  0B60  00F0               	movwf	I2C_Master_Write@d
  5690  0B61  0876               	movf	??_EEPROM_Write+1,w
  5691  0B62  00F1               	movwf	I2C_Master_Write@d+1
  5692  0B63  160A  118A  278E  120A  158A  	fcall	_I2C_Master_Write
  5693                           
  5694                           ;I2C.c: 58: I2C_Master_Write(low_address);
  5695  0B68  0873               	movf	EEPROM_Write@low_address,w
  5696  0B69  00F5               	movwf	??_EEPROM_Write
  5697  0B6A  01F6               	clrf	??_EEPROM_Write+1
  5698  0B6B  0875               	movf	??_EEPROM_Write,w
  5699  0B6C  00F0               	movwf	I2C_Master_Write@d
  5700  0B6D  0876               	movf	??_EEPROM_Write+1,w
  5701  0B6E  00F1               	movwf	I2C_Master_Write@d+1
  5702  0B6F  160A  118A  278E  120A  158A  	fcall	_I2C_Master_Write
  5703  0B74                     l3496:	
  5704                           ;I2C.c: 59: while(*data){
  5705                           
  5706  0B74  0874               	movf	EEPROM_Write@data,w
  5707  0B75  0084               	movwf	4
  5708  0B76  1783               	bsf	3,7	;select IRP bank2
  5709  0B77  0800               	movf	0,w
  5710  0B78  1903               	btfsc	3,2
  5711  0B79  2B8E               	goto	l3498
  5712                           
  5713                           ;I2C.c: 60: I2C_Master_Write(*data);
  5714  0B7A  0874               	movf	EEPROM_Write@data,w
  5715  0B7B  0084               	movwf	4
  5716  0B7C  1783               	bsf	3,7	;select IRP bank2
  5717  0B7D  0800               	movf	0,w
  5718  0B7E  00F5               	movwf	??_EEPROM_Write
  5719  0B7F  01F6               	clrf	??_EEPROM_Write+1
  5720  0B80  0875               	movf	??_EEPROM_Write,w
  5721  0B81  00F0               	movwf	I2C_Master_Write@d
  5722  0B82  0876               	movf	??_EEPROM_Write+1,w
  5723  0B83  00F1               	movwf	I2C_Master_Write@d+1
  5724  0B84  160A  118A  278E  120A  158A  	fcall	_I2C_Master_Write
  5725                           
  5726                           ;I2C.c: 61: ++data;
  5727  0B89  3001               	movlw	1
  5728  0B8A  00F5               	movwf	??_EEPROM_Write
  5729  0B8B  0875               	movf	??_EEPROM_Write,w
  5730  0B8C  07F4               	addwf	EEPROM_Write@data,f
  5731  0B8D  2B74               	goto	l3496
  5732  0B8E                     l3498:	
  5733                           
  5734                           ;I2C.c: 62: }
  5735                           ;I2C.c: 63: I2C_Master_Stop();
  5736  0B8E  120A  158A  202A  120A  158A  	fcall	_I2C_Master_Stop
  5737                           
  5738                           ;I2C.c: 64: _delay((unsigned long)((200)*(10000000/4000.0)));
  5739  0B93  3003               	movlw	3
  5740  0B94  00F7               	movwf	??_EEPROM_Write+2
  5741  0B95  308A               	movlw	138
  5742  0B96  00F6               	movwf	??_EEPROM_Write+1
  5743  0B97  3056               	movlw	86
  5744  0B98  00F5               	movwf	??_EEPROM_Write
  5745  0B99                     u3687:	
  5746  0B99  0BF5               	decfsz	??_EEPROM_Write,f
  5747  0B9A  2B99               	goto	u3687
  5748  0B9B  0BF6               	decfsz	??_EEPROM_Write+1,f
  5749  0B9C  2B99               	goto	u3687
  5750  0B9D  0BF7               	decfsz	??_EEPROM_Write+2,f
  5751  0B9E  2B99               	goto	u3687
  5752  0B9F  2BA0               	nop2
  5753  0BA0  0008               	return
  5754  0BA1                     __end_of_EEPROM_Write:	
  5755                           
  5756                           	psect	text18
  5757  178E                     __ptext18:	
  5758 ;; *************** function _I2C_Master_Write *****************
  5759 ;; Defined at:
  5760 ;;		line 34 in file "I2C.c"
  5761 ;; Parameters:    Size  Location     Type
  5762 ;;  d               2    0[COMMON] unsigned int 
  5763 ;; Auto vars:     Size  Location     Type
  5764 ;;		None
  5765 ;; Return value:  Size  Location     Type
  5766 ;;                  1    wreg      void 
  5767 ;; Registers used:
  5768 ;;		wreg, status,2, status,0, pclath, cstack
  5769 ;; Tracked objects:
  5770 ;;		On entry : 0/0
  5771 ;;		On exit  : 0/0
  5772 ;;		Unchanged: 0/0
  5773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5774 ;;      Params:         2       0       0       0       0
  5775 ;;      Locals:         0       0       0       0       0
  5776 ;;      Temps:          0       0       0       0       0
  5777 ;;      Totals:         2       0       0       0       0
  5778 ;;Total ram usage:        2 bytes
  5779 ;; Hardware stack levels used:    1
  5780 ;; Hardware stack levels required when called:    1
  5781 ;; This function calls:
  5782 ;;		_I2C_Master_Wait
  5783 ;; This function is called by:
  5784 ;;		_EEPROM_Write
  5785 ;;		_EEPROM_Read
  5786 ;; This function uses a non-reentrant model
  5787 ;;
  5788                           
  5789                           
  5790                           ;psect for function _I2C_Master_Write
  5791  178E                     _I2C_Master_Write:	
  5792                           
  5793                           ;I2C.c: 35: I2C_Master_Wait();
  5794                           
  5795                           ;incstack = 0
  5796                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5797  178E  160A  118A  27A6   	fcall	_I2C_Master_Wait
  5798                           
  5799                           ;I2C.c: 36: SSPBUF = d;
  5800  1791  0870               	movf	I2C_Master_Write@d,w
  5801  1792  1283               	bcf	3,5	;RP0=0, select bank0
  5802  1793  1303               	bcf	3,6	;RP1=0, select bank0
  5803  1794  0093               	movwf	19	;volatile
  5804  1795  0008               	return
  5805  1796                     __end_of_I2C_Master_Write:	
  5806                           
  5807                           	psect	text19
  5808  082A                     __ptext19:	
  5809 ;; *************** function _I2C_Master_Stop *****************
  5810 ;; Defined at:
  5811 ;;		line 29 in file "I2C.c"
  5812 ;; Parameters:    Size  Location     Type
  5813 ;;		None
  5814 ;; Auto vars:     Size  Location     Type
  5815 ;;		None
  5816 ;; Return value:  Size  Location     Type
  5817 ;;                  1    wreg      void 
  5818 ;; Registers used:
  5819 ;;		wreg, status,2, status,0, pclath, cstack
  5820 ;; Tracked objects:
  5821 ;;		On entry : 0/0
  5822 ;;		On exit  : 0/0
  5823 ;;		Unchanged: 0/0
  5824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5825 ;;      Params:         0       0       0       0       0
  5826 ;;      Locals:         0       0       0       0       0
  5827 ;;      Temps:          0       0       0       0       0
  5828 ;;      Totals:         0       0       0       0       0
  5829 ;;Total ram usage:        0 bytes
  5830 ;; Hardware stack levels used:    1
  5831 ;; Hardware stack levels required when called:    1
  5832 ;; This function calls:
  5833 ;;		_I2C_Master_Wait
  5834 ;; This function is called by:
  5835 ;;		_EEPROM_Write
  5836 ;;		_EEPROM_Read
  5837 ;; This function uses a non-reentrant model
  5838 ;;
  5839                           
  5840                           
  5841                           ;psect for function _I2C_Master_Stop
  5842  082A                     _I2C_Master_Stop:	
  5843                           
  5844                           ;I2C.c: 30: I2C_Master_Wait();
  5845                           
  5846                           ;incstack = 0
  5847                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5848  082A  160A  118A  27A6   	fcall	_I2C_Master_Wait
  5849                           
  5850                           ;I2C.c: 31: PEN = 1;
  5851  082D  1683               	bsf	3,5	;RP0=1, select bank1
  5852  082E  1303               	bcf	3,6	;RP1=0, select bank1
  5853  082F  1511               	bsf	17,2	;volatile
  5854  0830  0008               	return
  5855  0831                     __end_of_I2C_Master_Stop:	
  5856                           
  5857                           	psect	text20
  5858  1787                     __ptext20:	
  5859 ;; *************** function _I2C_Master_Start *****************
  5860 ;; Defined at:
  5861 ;;		line 19 in file "I2C.c"
  5862 ;; Parameters:    Size  Location     Type
  5863 ;;		None
  5864 ;; Auto vars:     Size  Location     Type
  5865 ;;		None
  5866 ;; Return value:  Size  Location     Type
  5867 ;;                  1    wreg      void 
  5868 ;; Registers used:
  5869 ;;		wreg, status,2, status,0, pclath, cstack
  5870 ;; Tracked objects:
  5871 ;;		On entry : 0/0
  5872 ;;		On exit  : 0/0
  5873 ;;		Unchanged: 0/0
  5874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5875 ;;      Params:         0       0       0       0       0
  5876 ;;      Locals:         0       0       0       0       0
  5877 ;;      Temps:          0       0       0       0       0
  5878 ;;      Totals:         0       0       0       0       0
  5879 ;;Total ram usage:        0 bytes
  5880 ;; Hardware stack levels used:    1
  5881 ;; Hardware stack levels required when called:    1
  5882 ;; This function calls:
  5883 ;;		_I2C_Master_Wait
  5884 ;; This function is called by:
  5885 ;;		_EEPROM_Write
  5886 ;;		_EEPROM_Read
  5887 ;; This function uses a non-reentrant model
  5888 ;;
  5889                           
  5890                           
  5891                           ;psect for function _I2C_Master_Start
  5892  1787                     _I2C_Master_Start:	
  5893                           
  5894                           ;I2C.c: 20: I2C_Master_Wait();
  5895                           
  5896                           ;incstack = 0
  5897                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5898  1787  160A  118A  27A6   	fcall	_I2C_Master_Wait
  5899                           
  5900                           ;I2C.c: 21: SEN = 1;
  5901  178A  1683               	bsf	3,5	;RP0=1, select bank1
  5902  178B  1303               	bcf	3,6	;RP1=0, select bank1
  5903  178C  1411               	bsf	17,0	;volatile
  5904  178D  0008               	return
  5905  178E                     __end_of_I2C_Master_Start:	
  5906                           
  5907                           	psect	text21
  5908  17A6                     __ptext21:	
  5909 ;; *************** function _I2C_Master_Wait *****************
  5910 ;; Defined at:
  5911 ;;		line 15 in file "I2C.c"
  5912 ;; Parameters:    Size  Location     Type
  5913 ;;		None
  5914 ;; Auto vars:     Size  Location     Type
  5915 ;;		None
  5916 ;; Return value:  Size  Location     Type
  5917 ;;                  1    wreg      void 
  5918 ;; Registers used:
  5919 ;;		wreg, status,2
  5920 ;; Tracked objects:
  5921 ;;		On entry : 0/0
  5922 ;;		On exit  : 0/0
  5923 ;;		Unchanged: 0/0
  5924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5925 ;;      Params:         0       0       0       0       0
  5926 ;;      Locals:         0       0       0       0       0
  5927 ;;      Temps:          0       0       0       0       0
  5928 ;;      Totals:         0       0       0       0       0
  5929 ;;Total ram usage:        0 bytes
  5930 ;; Hardware stack levels used:    1
  5931 ;; This function calls:
  5932 ;;		Nothing
  5933 ;; This function is called by:
  5934 ;;		_I2C_Master_Start
  5935 ;;		_I2C_Master_Stop
  5936 ;;		_I2C_Master_Write
  5937 ;;		_I2C_Master_RepeatedStart
  5938 ;;		_I2C_Master_Read
  5939 ;; This function uses a non-reentrant model
  5940 ;;
  5941                           
  5942                           
  5943                           ;psect for function _I2C_Master_Wait
  5944  17A6                     _I2C_Master_Wait:	
  5945  17A6                     l471:	
  5946                           ;I2C.c: 16: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5947                           
  5948                           ;incstack = 0
  5949                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5950                           
  5951  17A6  1683               	bsf	3,5	;RP0=1, select bank1
  5952  17A7  1303               	bcf	3,6	;RP1=0, select bank1
  5953  17A8  1914               	btfsc	20,2	;volatile
  5954  17A9  2FA6               	goto	l471
  5955  17AA  0811               	movf	17,w	;volatile
  5956  17AB  391F               	andlw	31
  5957  17AC  1903               	btfsc	3,2
  5958  17AD  0008               	return
  5959  17AE  2FA6               	goto	l471
  5960  17AF                     __end_of_I2C_Master_Wait:	
  5961                           
  5962                           	psect	text22
  5963  08DD                     __ptext22:	
  5964 ;; *************** function _CWTX *****************
  5965 ;; Defined at:
  5966 ;;		line 284 in file "FMCW.c"
  5967 ;; Parameters:    Size  Location     Type
  5968 ;;  Nref            2   60[BANK0 ] int 
  5969 ;;  Nprg            2   62[BANK0 ] PTR int 
  5970 ;;		 -> RAM(512), main@CWTX_Nprg(10), CWTX_Nprg(10), 
  5971 ;; Auto vars:     Size  Location     Type
  5972 ;;  cwtx            2   64[BANK0 ] int 
  5973 ;; Return value:  Size  Location     Type
  5974 ;;                  1    wreg      void 
  5975 ;; Registers used:
  5976 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5977 ;; Tracked objects:
  5978 ;;		On entry : 0/0
  5979 ;;		On exit  : 0/0
  5980 ;;		Unchanged: 0/0
  5981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5982 ;;      Params:         0       4       0       0       0
  5983 ;;      Locals:         0       2       0       0       0
  5984 ;;      Temps:          0       0       0       0       0
  5985 ;;      Totals:         0       6       0       0       0
  5986 ;;Total ram usage:        6 bytes
  5987 ;; Hardware stack levels used:    1
  5988 ;; Hardware stack levels required when called:    3
  5989 ;; This function calls:
  5990 ;;		_OPINIT
  5991 ;;		_OUTFQ
  5992 ;;		_RFDOUT
  5993 ;; This function is called by:
  5994 ;;		_main
  5995 ;;		_SetPLL
  5996 ;; This function uses a non-reentrant model
  5997 ;;
  5998                           
  5999                           
  6000                           ;psect for function _CWTX
  6001  08DD                     _CWTX:	
  6002                           
  6003                           ;FMCW.c: 285: int cwtx = 2;
  6004                           
  6005                           ;incstack = 0
  6006                           ; Regs used in _CWTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6007  08DD  3002               	movlw	2
  6008  08DE  1283               	bcf	3,5	;RP0=0, select bank0
  6009  08DF  1303               	bcf	3,6	;RP1=0, select bank0
  6010  08E0  00E0               	movwf	CWTX@cwtx
  6011  08E1  3000               	movlw	0
  6012  08E2  00E1               	movwf	CWTX@cwtx+1
  6013                           
  6014                           ;FMCW.c: 286: OPINIT(cwtx);
  6015  08E3  0861               	movf	CWTX@cwtx+1,w
  6016  08E4  00F5               	movwf	OPINIT@fmcwtxrx+1
  6017  08E5  0860               	movf	CWTX@cwtx,w
  6018  08E6  00F4               	movwf	OPINIT@fmcwtxrx
  6019  08E7  120A  158A  2460  120A  158A  	fcall	_OPINIT
  6020                           
  6021                           ;FMCW.c: 287: RFDOUT(cwtx, Nref);
  6022  08EC  1283               	bcf	3,5	;RP0=0, select bank0
  6023  08ED  1303               	bcf	3,6	;RP1=0, select bank0
  6024  08EE  0861               	movf	CWTX@cwtx+1,w
  6025  08EF  00FA               	movwf	RFDOUT@fmcwtxrx+1
  6026  08F0  0860               	movf	CWTX@cwtx,w
  6027  08F1  00F9               	movwf	RFDOUT@fmcwtxrx
  6028  08F2  085D               	movf	CWTX@Nref+1,w
  6029  08F3  00FC               	movwf	RFDOUT@Nref+1
  6030  08F4  085C               	movf	CWTX@Nref,w
  6031  08F5  00FB               	movwf	RFDOUT@Nref
  6032  08F6  120A  158A  255F  120A  158A  	fcall	_RFDOUT
  6033                           
  6034                           ;FMCW.c: 288: OUTFQ(cwtx, Nprg);
  6035  08FB  1283               	bcf	3,5	;RP0=0, select bank0
  6036  08FC  1303               	bcf	3,6	;RP1=0, select bank0
  6037  08FD  0861               	movf	CWTX@cwtx+1,w
  6038  08FE  00FA               	movwf	OUTFQ@fmcwtxrx+1
  6039  08FF  0860               	movf	CWTX@cwtx,w
  6040  0900  00F9               	movwf	OUTFQ@fmcwtxrx
  6041  0901  085E               	movf	CWTX@Nprg,w
  6042  0902  00FB               	movwf	OUTFQ@Nprg
  6043  0903  085F               	movf	CWTX@Nprg+1,w
  6044  0904  00FC               	movwf	OUTFQ@Nprg+1
  6045  0905  120A  118A  20AC   	fcall	_OUTFQ
  6046  0908  0008               	return
  6047  0909                     __end_of_CWTX:	
  6048                           
  6049                           	psect	text23
  6050  0D5F                     __ptext23:	
  6051 ;; *************** function _RFDOUT *****************
  6052 ;; Defined at:
  6053 ;;		line 200 in file "FMCW.c"
  6054 ;; Parameters:    Size  Location     Type
  6055 ;;  fmcwtxrx        2    9[COMMON] int 
  6056 ;;  Nref            2   11[COMMON] int 
  6057 ;; Auto vars:     Size  Location     Type
  6058 ;;  i               2   31[BANK0 ] int 
  6059 ;;  i               2   27[BANK0 ] int 
  6060 ;;  i               2   29[BANK0 ] int 
  6061 ;;  Nref_b         24    3[BANK0 ] int [12]
  6062 ;; Return value:  Size  Location     Type
  6063 ;;                  1    wreg      void 
  6064 ;; Registers used:
  6065 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6066 ;; Tracked objects:
  6067 ;;		On entry : 0/0
  6068 ;;		On exit  : 0/0
  6069 ;;		Unchanged: 0/0
  6070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6071 ;;      Params:         4       0       0       0       0
  6072 ;;      Locals:         0      30       0       0       0
  6073 ;;      Temps:          0       3       0       0       0
  6074 ;;      Totals:         4      33       0       0       0
  6075 ;;Total ram usage:       37 bytes
  6076 ;; Hardware stack levels used:    1
  6077 ;; Hardware stack levels required when called:    2
  6078 ;; This function calls:
  6079 ;;		_H_OUT
  6080 ;;		_L_OUT
  6081 ;;		_STBOUT
  6082 ;;		___awdiv
  6083 ;; This function is called by:
  6084 ;;		_FMTX
  6085 ;;		_CWTX
  6086 ;;		_FMRX
  6087 ;; This function uses a non-reentrant model
  6088 ;;
  6089                           
  6090                           
  6091                           ;psect for function _RFDOUT
  6092  0D5F                     _RFDOUT:	
  6093                           
  6094                           ;FMCW.c: 201: int Nref_b[12];
  6095                           ;FMCW.c: 203: for(int i=0; i<12; i++){
  6096                           
  6097                           ;incstack = 0
  6098                           ; Regs used in _RFDOUT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6099  0D5F  1283               	bcf	3,5	;RP0=0, select bank0
  6100  0D60  1303               	bcf	3,6	;RP1=0, select bank0
  6101  0D61  01BD               	clrf	RFDOUT@i
  6102  0D62  01BE               	clrf	RFDOUT@i+1
  6103  0D63  083E               	movf	RFDOUT@i+1,w
  6104  0D64  3A80               	xorlw	128
  6105  0D65  00FF               	movwf	127
  6106  0D66  3080               	movlw	128
  6107  0D67  027F               	subwf	127,w
  6108  0D68  1D03               	skipz
  6109  0D69  2D6C               	goto	u2925
  6110  0D6A  300C               	movlw	12
  6111  0D6B  023D               	subwf	RFDOUT@i,w
  6112  0D6C                     u2925:	
  6113  0D6C  1803               	btfsc	3,0
  6114  0D6D  2D8A               	goto	l3262
  6115  0D6E                     l3256:	
  6116                           
  6117                           ;FMCW.c: 204: Nref_b[i] = 0;
  6118  0D6E  1283               	bcf	3,5	;RP0=0, select bank0
  6119  0D6F  1303               	bcf	3,6	;RP1=0, select bank0
  6120  0D70  083D               	movf	RFDOUT@i,w
  6121  0D71  00A0               	movwf	??_RFDOUT
  6122  0D72  0720               	addwf	??_RFDOUT,w
  6123  0D73  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6124  0D74  0084               	movwf	4
  6125  0D75  1383               	bcf	3,7	;select IRP bank0
  6126  0D76  0180               	clrf	0
  6127  0D77  0A84               	incf	4,f
  6128  0D78  0180               	clrf	0
  6129  0D79  3001               	movlw	1
  6130  0D7A  07BD               	addwf	RFDOUT@i,f
  6131  0D7B  1803               	skipnc
  6132  0D7C  0ABE               	incf	RFDOUT@i+1,f
  6133  0D7D  3000               	movlw	0
  6134  0D7E  07BE               	addwf	RFDOUT@i+1,f
  6135  0D7F  083E               	movf	RFDOUT@i+1,w
  6136  0D80  3A80               	xorlw	128
  6137  0D81  00FF               	movwf	127
  6138  0D82  3080               	movlw	128
  6139  0D83  027F               	subwf	127,w
  6140  0D84  1D03               	skipz
  6141  0D85  2D88               	goto	u2935
  6142  0D86  300C               	movlw	12
  6143  0D87  023D               	subwf	RFDOUT@i,w
  6144  0D88                     u2935:	
  6145  0D88  1C03               	skipc
  6146  0D89  2D6E               	goto	l3256
  6147  0D8A                     l3262:	
  6148                           
  6149                           ;FMCW.c: 205: }
  6150                           ;FMCW.c: 208: for(int i=0; Nref>0; i++){
  6151  0D8A  1283               	bcf	3,5	;RP0=0, select bank0
  6152  0D8B  1303               	bcf	3,6	;RP1=0, select bank0
  6153  0D8C  01BB               	clrf	RFDOUT@i_479
  6154  0D8D  01BC               	clrf	RFDOUT@i_479+1
  6155  0D8E  087C               	movf	RFDOUT@Nref+1,w
  6156  0D8F  3A80               	xorlw	128
  6157  0D90  00FF               	movwf	127
  6158  0D91  3080               	movlw	128
  6159  0D92  027F               	subwf	127,w
  6160  0D93  1D03               	skipz
  6161  0D94  2D97               	goto	u2945
  6162  0D95  3001               	movlw	1
  6163  0D96  027B               	subwf	RFDOUT@Nref,w
  6164  0D97                     u2945:	
  6165  0D97  1C03               	btfss	3,0
  6166  0D98  2DD0               	goto	l3276
  6167  0D99                     l3268:	
  6168                           
  6169                           ;FMCW.c: 209: Nref_b[i] = Nref % 2;
  6170  0D99  3001               	movlw	1
  6171  0D9A  057B               	andwf	RFDOUT@Nref,w
  6172  0D9B  1283               	bcf	3,5	;RP0=0, select bank0
  6173  0D9C  1303               	bcf	3,6	;RP1=0, select bank0
  6174  0D9D  00A0               	movwf	??_RFDOUT
  6175  0D9E  3000               	movlw	0
  6176  0D9F  057C               	andwf	RFDOUT@Nref+1,w
  6177  0DA0  00A1               	movwf	??_RFDOUT+1
  6178  0DA1  083B               	movf	RFDOUT@i_479,w
  6179  0DA2  00A2               	movwf	??_RFDOUT+2
  6180  0DA3  0722               	addwf	??_RFDOUT+2,w
  6181  0DA4  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6182  0DA5  0084               	movwf	4
  6183  0DA6  0820               	movf	??_RFDOUT,w
  6184  0DA7  1383               	bcf	3,7	;select IRP bank0
  6185  0DA8  0080               	movwf	0
  6186  0DA9  0A84               	incf	4,f
  6187  0DAA  0821               	movf	??_RFDOUT+1,w
  6188  0DAB  0080               	movwf	0
  6189                           
  6190                           ;FMCW.c: 210: Nref = Nref / 2;
  6191  0DAC  3002               	movlw	2
  6192  0DAD  00F0               	movwf	___awdiv@divisor
  6193  0DAE  3000               	movlw	0
  6194  0DAF  00F1               	movwf	___awdiv@divisor+1
  6195  0DB0  087C               	movf	RFDOUT@Nref+1,w
  6196  0DB1  00F3               	movwf	___awdiv@dividend+1
  6197  0DB2  087B               	movf	RFDOUT@Nref,w
  6198  0DB3  00F2               	movwf	___awdiv@dividend
  6199  0DB4  120A  158A  22EB  120A  158A  	fcall	___awdiv
  6200  0DB9  0871               	movf	?___awdiv+1,w
  6201  0DBA  00FC               	movwf	RFDOUT@Nref+1
  6202  0DBB  0870               	movf	?___awdiv,w
  6203  0DBC  00FB               	movwf	RFDOUT@Nref
  6204  0DBD  3001               	movlw	1
  6205  0DBE  1283               	bcf	3,5	;RP0=0, select bank0
  6206  0DBF  1303               	bcf	3,6	;RP1=0, select bank0
  6207  0DC0  07BB               	addwf	RFDOUT@i_479,f
  6208  0DC1  1803               	skipnc
  6209  0DC2  0ABC               	incf	RFDOUT@i_479+1,f
  6210  0DC3  3000               	movlw	0
  6211  0DC4  07BC               	addwf	RFDOUT@i_479+1,f
  6212  0DC5  087C               	movf	RFDOUT@Nref+1,w
  6213  0DC6  3A80               	xorlw	128
  6214  0DC7  00FF               	movwf	127
  6215  0DC8  3080               	movlw	128
  6216  0DC9  027F               	subwf	127,w
  6217  0DCA  1D03               	skipz
  6218  0DCB  2DCE               	goto	u2955
  6219  0DCC  3001               	movlw	1
  6220  0DCD  027B               	subwf	RFDOUT@Nref,w
  6221  0DCE                     u2955:	
  6222  0DCE  1803               	skipnc
  6223  0DCF  2D99               	goto	l3268
  6224  0DD0                     l3276:	
  6225                           
  6226                           ;FMCW.c: 211: }
  6227                           ;FMCW.c: 214: for (int i=0; i<12; i++)
  6228  0DD0  1283               	bcf	3,5	;RP0=0, select bank0
  6229  0DD1  1303               	bcf	3,6	;RP1=0, select bank0
  6230  0DD2  01BF               	clrf	RFDOUT@i_480
  6231  0DD3  01C0               	clrf	RFDOUT@i_480+1
  6232  0DD4  0840               	movf	RFDOUT@i_480+1,w
  6233  0DD5  3A80               	xorlw	128
  6234  0DD6  00FF               	movwf	127
  6235  0DD7  3080               	movlw	128
  6236  0DD8  027F               	subwf	127,w
  6237  0DD9  1D03               	skipz
  6238  0DDA  2DDD               	goto	u2965
  6239  0DDB  300C               	movlw	12
  6240  0DDC  023F               	subwf	RFDOUT@i_480,w
  6241  0DDD                     u2965:	
  6242  0DDD  1803               	btfsc	3,0
  6243  0DDE  2E26               	goto	l3294
  6244  0DDF                     l3282:	
  6245                           
  6246                           ;FMCW.c: 215: {
  6247                           ;FMCW.c: 216: if(Nref_b[i] == 0)
  6248  0DDF  1283               	bcf	3,5	;RP0=0, select bank0
  6249  0DE0  1303               	bcf	3,6	;RP1=0, select bank0
  6250  0DE1  083F               	movf	RFDOUT@i_480,w
  6251  0DE2  00A0               	movwf	??_RFDOUT
  6252  0DE3  0720               	addwf	??_RFDOUT,w
  6253  0DE4  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6254  0DE5  0084               	movwf	4
  6255  0DE6  1383               	bcf	3,7	;select IRP bank0
  6256  0DE7  0800               	movf	0,w
  6257  0DE8  00A1               	movwf	??_RFDOUT+1
  6258  0DE9  0A84               	incf	4,f
  6259  0DEA  0800               	movf	0,w
  6260  0DEB  00A2               	movwf	??_RFDOUT+2
  6261  0DEC  0821               	movf	??_RFDOUT+1,w
  6262  0DED  0422               	iorwf	??_RFDOUT+2,w
  6263  0DEE  1D03               	btfss	3,2
  6264  0DEF  2DF9               	goto	l3286
  6265                           
  6266                           ;FMCW.c: 217: {
  6267                           ;FMCW.c: 218: L_OUT(fmcwtxrx);
  6268  0DF0  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6269  0DF1  00F3               	movwf	L_OUT@fmcwtxrx+1
  6270  0DF2  0879               	movf	RFDOUT@fmcwtxrx,w
  6271  0DF3  00F2               	movwf	L_OUT@fmcwtxrx
  6272  0DF4  120A  158A  2209  120A  158A  	fcall	_L_OUT
  6273  0DF9                     l3286:	
  6274                           
  6275                           ;FMCW.c: 219: }
  6276                           ;FMCW.c: 220: if(Nref_b[i] == 1)
  6277  0DF9  1283               	bcf	3,5	;RP0=0, select bank0
  6278  0DFA  1303               	bcf	3,6	;RP1=0, select bank0
  6279  0DFB  083F               	movf	RFDOUT@i_480,w
  6280  0DFC  00A0               	movwf	??_RFDOUT
  6281  0DFD  0720               	addwf	??_RFDOUT,w
  6282  0DFE  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6283  0DFF  0084               	movwf	4
  6284  0E00  1383               	bcf	3,7	;select IRP bank0
  6285  0E01  0800               	movf	0,w
  6286  0E02  00A1               	movwf	??_RFDOUT+1
  6287  0E03  0A84               	incf	4,f
  6288  0E04  0800               	movf	0,w
  6289  0E05  00A2               	movwf	??_RFDOUT+2
  6290  0E06  0321               	decf	??_RFDOUT+1,w
  6291  0E07  0422               	iorwf	??_RFDOUT+2,w
  6292  0E08  1D03               	btfss	3,2
  6293  0E09  2E13               	goto	l3290
  6294                           
  6295                           ;FMCW.c: 221: {
  6296                           ;FMCW.c: 222: H_OUT(fmcwtxrx);
  6297  0E0A  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6298  0E0B  00F3               	movwf	H_OUT@fmcwtxrx+1
  6299  0E0C  0879               	movf	RFDOUT@fmcwtxrx,w
  6300  0E0D  00F2               	movwf	H_OUT@fmcwtxrx
  6301  0E0E  120A  158A  21C3  120A  158A  	fcall	_H_OUT
  6302  0E13                     l3290:	
  6303  0E13  3001               	movlw	1
  6304  0E14  1283               	bcf	3,5	;RP0=0, select bank0
  6305  0E15  1303               	bcf	3,6	;RP1=0, select bank0
  6306  0E16  07BF               	addwf	RFDOUT@i_480,f
  6307  0E17  1803               	skipnc
  6308  0E18  0AC0               	incf	RFDOUT@i_480+1,f
  6309  0E19  3000               	movlw	0
  6310  0E1A  07C0               	addwf	RFDOUT@i_480+1,f
  6311  0E1B  0840               	movf	RFDOUT@i_480+1,w
  6312  0E1C  3A80               	xorlw	128
  6313  0E1D  00FF               	movwf	127
  6314  0E1E  3080               	movlw	128
  6315  0E1F  027F               	subwf	127,w
  6316  0E20  1D03               	skipz
  6317  0E21  2E24               	goto	u2995
  6318  0E22  300C               	movlw	12
  6319  0E23  023F               	subwf	RFDOUT@i_480,w
  6320  0E24                     u2995:	
  6321  0E24  1C03               	skipc
  6322  0E25  2DDF               	goto	l3282
  6323  0E26                     l3294:	
  6324                           
  6325                           ;FMCW.c: 223: }
  6326                           ;FMCW.c: 224: }
  6327                           ;FMCW.c: 227: H_OUT(fmcwtxrx);
  6328  0E26  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6329  0E27  00F3               	movwf	H_OUT@fmcwtxrx+1
  6330  0E28  0879               	movf	RFDOUT@fmcwtxrx,w
  6331  0E29  00F2               	movwf	H_OUT@fmcwtxrx
  6332  0E2A  120A  158A  21C3  120A  158A  	fcall	_H_OUT
  6333                           
  6334                           ;FMCW.c: 228: H_OUT(fmcwtxrx);
  6335  0E2F  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6336  0E30  00F3               	movwf	H_OUT@fmcwtxrx+1
  6337  0E31  0879               	movf	RFDOUT@fmcwtxrx,w
  6338  0E32  00F2               	movwf	H_OUT@fmcwtxrx
  6339  0E33  120A  158A  21C3  120A  158A  	fcall	_H_OUT
  6340                           
  6341                           ;FMCW.c: 231: STBOUT(fmcwtxrx);
  6342  0E38  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6343  0E39  00F3               	movwf	STBOUT@fmcwtxrx+1
  6344  0E3A  0879               	movf	RFDOUT@fmcwtxrx,w
  6345  0E3B  00F2               	movwf	STBOUT@fmcwtxrx
  6346  0E3C  120A  158A  2161   	fcall	_STBOUT
  6347  0E3F  0008               	return
  6348  0E40                     __end_of_RFDOUT:	
  6349                           
  6350                           	psect	text24
  6351  00AC                     __ptext24:	
  6352 ;; *************** function _OUTFQ *****************
  6353 ;; Defined at:
  6354 ;;		line 136 in file "FMCW.c"
  6355 ;; Parameters:    Size  Location     Type
  6356 ;;  fmcwtxrx        2    9[COMMON] int 
  6357 ;;  Nprg            2   11[COMMON] PTR int 
  6358 ;;		 -> RAM(512), main@FMRX_Nprg(10), main@CWTX_Nprg(10), main@FMTX_Nprg(10), 
  6359 ;;		 -> FMRX_Nprg(10), CWTX_Nprg(10), FMTX_Nprg(10), 
  6360 ;; Auto vars:     Size  Location     Type
  6361 ;;  j               2   58[BANK0 ] int 
  6362 ;;  i               2   56[BANK0 ] int 
  6363 ;;  i               2   50[BANK0 ] int 
  6364 ;;  i               2   54[BANK0 ] int 
  6365 ;;  Nprg_b         34   16[BANK0 ] int [17]
  6366 ;;  count           2   52[BANK0 ] int 
  6367 ;; Return value:  Size  Location     Type
  6368 ;;                  1    wreg      void 
  6369 ;; Registers used:
  6370 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6371 ;; Tracked objects:
  6372 ;;		On entry : 0/0
  6373 ;;		On exit  : 0/0
  6374 ;;		Unchanged: 0/0
  6375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6376 ;;      Params:         4       0       0       0       0
  6377 ;;      Locals:         0      44       0       0       0
  6378 ;;      Temps:          0      16       0       0       0
  6379 ;;      Totals:         4      60       0       0       0
  6380 ;;Total ram usage:       64 bytes
  6381 ;; Hardware stack levels used:    1
  6382 ;; Hardware stack levels required when called:    2
  6383 ;; This function calls:
  6384 ;;		_H_OUT
  6385 ;;		_L_OUT
  6386 ;;		_STBOUT
  6387 ;;		___awdiv
  6388 ;; This function is called by:
  6389 ;;		_FMTX
  6390 ;;		_CWTX
  6391 ;;		_FMRX
  6392 ;; This function uses a non-reentrant model
  6393 ;;
  6394                           
  6395                           
  6396                           ;psect for function _OUTFQ
  6397  00AC                     _OUTFQ:	
  6398                           
  6399                           ;FMCW.c: 137: int count = 0;
  6400                           
  6401                           ;incstack = 0
  6402                           ; Regs used in _OUTFQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6403  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  6404  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  6405  00AE  01D4               	clrf	OUTFQ@count
  6406  00AF  01D5               	clrf	OUTFQ@count+1
  6407                           
  6408                           ;FMCW.c: 138: int Nprg_b[17];
  6409                           ;FMCW.c: 140: for(int i=0; i<17; i++){
  6410  00B0  01D6               	clrf	OUTFQ@i
  6411  00B1  01D7               	clrf	OUTFQ@i+1
  6412  00B2  0857               	movf	OUTFQ@i+1,w
  6413  00B3  3A80               	xorlw	128
  6414  00B4  00FF               	movwf	127
  6415  00B5  3080               	movlw	128
  6416  00B6  027F               	subwf	127,w
  6417  00B7  1D03               	skipz
  6418  00B8  28BB               	goto	u2785
  6419  00B9  3011               	movlw	17
  6420  00BA  0256               	subwf	OUTFQ@i,w
  6421  00BB                     u2785:	
  6422  00BB  1803               	btfsc	3,0
  6423  00BC  28D9               	goto	l3184
  6424  00BD                     l3178:	
  6425                           
  6426                           ;FMCW.c: 141: Nprg_b[i] = 0;
  6427  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  6428  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  6429  00BF  0856               	movf	OUTFQ@i,w
  6430  00C0  00A0               	movwf	??_OUTFQ
  6431  00C1  0720               	addwf	??_OUTFQ,w
  6432  00C2  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6433  00C3  0084               	movwf	4
  6434  00C4  1383               	bcf	3,7	;select IRP bank0
  6435  00C5  0180               	clrf	0
  6436  00C6  0A84               	incf	4,f
  6437  00C7  0180               	clrf	0
  6438  00C8  3001               	movlw	1
  6439  00C9  07D6               	addwf	OUTFQ@i,f
  6440  00CA  1803               	skipnc
  6441  00CB  0AD7               	incf	OUTFQ@i+1,f
  6442  00CC  3000               	movlw	0
  6443  00CD  07D7               	addwf	OUTFQ@i+1,f
  6444  00CE  0857               	movf	OUTFQ@i+1,w
  6445  00CF  3A80               	xorlw	128
  6446  00D0  00FF               	movwf	127
  6447  00D1  3080               	movlw	128
  6448  00D2  027F               	subwf	127,w
  6449  00D3  1D03               	skipz
  6450  00D4  28D7               	goto	u2795
  6451  00D5  3011               	movlw	17
  6452  00D6  0256               	subwf	OUTFQ@i,w
  6453  00D7                     u2795:	
  6454  00D7  1C03               	skipc
  6455  00D8  28BD               	goto	l3178
  6456  00D9                     l3184:	
  6457                           
  6458                           ;FMCW.c: 142: }
  6459                           ;FMCW.c: 145: for(int i = 0; i < 17; i++){
  6460  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  6461  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  6462  00DB  01D2               	clrf	OUTFQ@i_468
  6463  00DC  01D3               	clrf	OUTFQ@i_468+1
  6464  00DD  0853               	movf	OUTFQ@i_468+1,w
  6465  00DE  3A80               	xorlw	128
  6466  00DF  00FF               	movwf	127
  6467  00E0  3080               	movlw	128
  6468  00E1  027F               	subwf	127,w
  6469  00E2  1D03               	skipz
  6470  00E3  28E6               	goto	u2805
  6471  00E4  3011               	movlw	17
  6472  00E5  0252               	subwf	OUTFQ@i_468,w
  6473  00E6                     u2805:	
  6474  00E6  1803               	btfsc	3,0
  6475  00E7  2AB7               	goto	l3230
  6476  00E8                     l3190:	
  6477                           
  6478                           ;FMCW.c: 146: for(int j = 0; j<5; j++){
  6479  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  6480  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  6481  00EA  01DA               	clrf	OUTFQ@j
  6482  00EB  01DB               	clrf	OUTFQ@j+1
  6483  00EC  085B               	movf	OUTFQ@j+1,w
  6484  00ED  3A80               	xorlw	128
  6485  00EE  00FF               	movwf	127
  6486  00EF  3080               	movlw	128
  6487  00F0  027F               	subwf	127,w
  6488  00F1  1D03               	skipz
  6489  00F2  28F5               	goto	u2815
  6490  00F3  3005               	movlw	5
  6491  00F4  025A               	subwf	OUTFQ@j,w
  6492  00F5                     u2815:	
  6493  00F5  1803               	btfsc	3,0
  6494  00F6  2AA4               	goto	l3226
  6495  00F7                     l3196:	
  6496                           
  6497                           ;FMCW.c: 147: if(Nprg[j] % 2 == 0) {
  6498  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  6499  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  6500  00F9  085B               	movf	OUTFQ@j+1,w
  6501  00FA  00A1               	movwf	??_OUTFQ+1
  6502  00FB  085A               	movf	OUTFQ@j,w
  6503  00FC  00A0               	movwf	??_OUTFQ
  6504  00FD  1003               	clrc
  6505  00FE  0DA0               	rlf	??_OUTFQ,f
  6506  00FF  0DA1               	rlf	??_OUTFQ+1,f
  6507  0100  0820               	movf	??_OUTFQ,w
  6508  0101  077B               	addwf	OUTFQ@Nprg,w
  6509  0102  00A2               	movwf	??_OUTFQ+2
  6510  0103  0821               	movf	??_OUTFQ+1,w
  6511  0104  1803               	skipnc
  6512  0105  0A21               	incf	??_OUTFQ+1,w
  6513  0106  077C               	addwf	OUTFQ@Nprg+1,w
  6514  0107  00A3               	movwf	??_OUTFQ+3
  6515  0108  0822               	movf	??_OUTFQ+2,w
  6516  0109  0084               	movwf	4
  6517  010A  1783               	bsf	3,7
  6518  010B  1C23               	btfss	??_OUTFQ+3,0
  6519  010C  1383               	bcf	3,7
  6520  010D  0800               	movf	0,w
  6521  010E  00A4               	movwf	??_OUTFQ+4
  6522  010F  0A84               	incf	4,f
  6523  0110  0800               	movf	0,w
  6524  0111  00A5               	movwf	??_OUTFQ+5
  6525  0112  1824               	btfsc	??_OUTFQ+4,0
  6526  0113  299D               	goto	l3208
  6527                           
  6528                           ;FMCW.c: 148: if(j == 4){
  6529  0114  3004               	movlw	4
  6530  0115  065A               	xorwf	OUTFQ@j,w
  6531  0116  045B               	iorwf	OUTFQ@j+1,w
  6532  0117  1D03               	btfss	3,2
  6533  0118  2960               	goto	l3206
  6534                           
  6535                           ;FMCW.c: 149: Nprg[j] = Nprg[j] / 2;
  6536  0119  3002               	movlw	2
  6537  011A  00F0               	movwf	___awdiv@divisor
  6538  011B  3000               	movlw	0
  6539  011C  00F1               	movwf	___awdiv@divisor+1
  6540  011D  085B               	movf	OUTFQ@j+1,w
  6541  011E  00A1               	movwf	??_OUTFQ+1
  6542  011F  085A               	movf	OUTFQ@j,w
  6543  0120  00A0               	movwf	??_OUTFQ
  6544  0121  1003               	clrc
  6545  0122  0DA0               	rlf	??_OUTFQ,f
  6546  0123  0DA1               	rlf	??_OUTFQ+1,f
  6547  0124  0820               	movf	??_OUTFQ,w
  6548  0125  077B               	addwf	OUTFQ@Nprg,w
  6549  0126  00A2               	movwf	??_OUTFQ+2
  6550  0127  0821               	movf	??_OUTFQ+1,w
  6551  0128  1803               	skipnc
  6552  0129  0A21               	incf	??_OUTFQ+1,w
  6553  012A  077C               	addwf	OUTFQ@Nprg+1,w
  6554  012B  00A3               	movwf	??_OUTFQ+3
  6555  012C  0822               	movf	??_OUTFQ+2,w
  6556  012D  0084               	movwf	4
  6557  012E  1783               	bsf	3,7
  6558  012F  1C23               	btfss	??_OUTFQ+3,0
  6559  0130  1383               	bcf	3,7
  6560  0131  0800               	movf	0,w
  6561  0132  00F2               	movwf	___awdiv@dividend
  6562  0133  0A84               	incf	4,f
  6563  0134  0800               	movf	0,w
  6564  0135  00F3               	movwf	___awdiv@dividend+1
  6565  0136  120A  158A  22EB  120A  118A  	fcall	___awdiv
  6566  013B  1283               	bcf	3,5	;RP0=0, select bank0
  6567  013C  1303               	bcf	3,6	;RP1=0, select bank0
  6568  013D  085B               	movf	OUTFQ@j+1,w
  6569  013E  00A5               	movwf	??_OUTFQ+5
  6570  013F  085A               	movf	OUTFQ@j,w
  6571  0140  00A4               	movwf	??_OUTFQ+4
  6572  0141  1003               	clrc
  6573  0142  0DA4               	rlf	??_OUTFQ+4,f
  6574  0143  0DA5               	rlf	??_OUTFQ+5,f
  6575  0144  0824               	movf	??_OUTFQ+4,w
  6576  0145  077B               	addwf	OUTFQ@Nprg,w
  6577  0146  00A6               	movwf	??_OUTFQ+6
  6578  0147  0825               	movf	??_OUTFQ+5,w
  6579  0148  1803               	skipnc
  6580  0149  0A25               	incf	??_OUTFQ+5,w
  6581  014A  077C               	addwf	OUTFQ@Nprg+1,w
  6582  014B  00A7               	movwf	??_OUTFQ+7
  6583  014C  0826               	movf	??_OUTFQ+6,w
  6584  014D  0084               	movwf	4
  6585  014E  1783               	bsf	3,7
  6586  014F  1C27               	btfss	??_OUTFQ+7,0
  6587  0150  1383               	bcf	3,7
  6588  0151  0870               	movf	?___awdiv,w
  6589  0152  0080               	movwf	0
  6590  0153  0A84               	incf	4,f
  6591  0154  0871               	movf	?___awdiv+1,w
  6592  0155  0080               	movwf	0
  6593                           
  6594                           ;FMCW.c: 150: Nprg_b[count] = 0;
  6595  0156  0854               	movf	OUTFQ@count,w
  6596  0157  00A0               	movwf	??_OUTFQ
  6597  0158  0720               	addwf	??_OUTFQ,w
  6598  0159  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6599  015A  0084               	movwf	4
  6600  015B  1383               	bcf	3,7	;select IRP bank0
  6601  015C  0180               	clrf	0
  6602  015D  0A84               	incf	4,f
  6603  015E  0180               	clrf	0
  6604  015F  2A05               	goto	l3216
  6605  0160                     l3206:	
  6606                           ;FMCW.c: 152: }
  6607                           
  6608                           ;FMCW.c: 151: count++;
  6609                           
  6610                           
  6611                           ;FMCW.c: 153: else{
  6612                           ;FMCW.c: 154: Nprg[j] = Nprg[j] / 2;
  6613  0160  3002               	movlw	2
  6614  0161  00F0               	movwf	___awdiv@divisor
  6615  0162  3000               	movlw	0
  6616  0163  00F1               	movwf	___awdiv@divisor+1
  6617  0164  085B               	movf	OUTFQ@j+1,w
  6618  0165  00A1               	movwf	??_OUTFQ+1
  6619  0166  085A               	movf	OUTFQ@j,w
  6620  0167  00A0               	movwf	??_OUTFQ
  6621  0168  1003               	clrc
  6622  0169  0DA0               	rlf	??_OUTFQ,f
  6623  016A  0DA1               	rlf	??_OUTFQ+1,f
  6624  016B  0820               	movf	??_OUTFQ,w
  6625  016C  077B               	addwf	OUTFQ@Nprg,w
  6626  016D  00A2               	movwf	??_OUTFQ+2
  6627  016E  0821               	movf	??_OUTFQ+1,w
  6628  016F  1803               	skipnc
  6629  0170  0A21               	incf	??_OUTFQ+1,w
  6630  0171  077C               	addwf	OUTFQ@Nprg+1,w
  6631  0172  00A3               	movwf	??_OUTFQ+3
  6632  0173  0822               	movf	??_OUTFQ+2,w
  6633  0174  0084               	movwf	4
  6634  0175  1783               	bsf	3,7
  6635  0176  1C23               	btfss	??_OUTFQ+3,0
  6636  0177  1383               	bcf	3,7
  6637  0178  0800               	movf	0,w
  6638  0179  00F2               	movwf	___awdiv@dividend
  6639  017A  0A84               	incf	4,f
  6640  017B  0800               	movf	0,w
  6641  017C  00F3               	movwf	___awdiv@dividend+1
  6642  017D  120A  158A  22EB  120A  118A  	fcall	___awdiv
  6643  0182  1283               	bcf	3,5	;RP0=0, select bank0
  6644  0183  1303               	bcf	3,6	;RP1=0, select bank0
  6645  0184  085B               	movf	OUTFQ@j+1,w
  6646  0185  00A5               	movwf	??_OUTFQ+5
  6647  0186  085A               	movf	OUTFQ@j,w
  6648  0187  00A4               	movwf	??_OUTFQ+4
  6649  0188  1003               	clrc
  6650  0189  0DA4               	rlf	??_OUTFQ+4,f
  6651  018A  0DA5               	rlf	??_OUTFQ+5,f
  6652  018B  0824               	movf	??_OUTFQ+4,w
  6653  018C  077B               	addwf	OUTFQ@Nprg,w
  6654  018D  00A6               	movwf	??_OUTFQ+6
  6655  018E  0825               	movf	??_OUTFQ+5,w
  6656  018F  1803               	skipnc
  6657  0190  0A25               	incf	??_OUTFQ+5,w
  6658  0191  077C               	addwf	OUTFQ@Nprg+1,w
  6659  0192  00A7               	movwf	??_OUTFQ+7
  6660  0193  0826               	movf	??_OUTFQ+6,w
  6661  0194  0084               	movwf	4
  6662  0195  1783               	bsf	3,7
  6663  0196  1C27               	btfss	??_OUTFQ+7,0
  6664  0197  1383               	bcf	3,7
  6665  0198  0870               	movf	?___awdiv,w
  6666  0199  0080               	movwf	0
  6667  019A  0A84               	incf	4,f
  6668  019B  0871               	movf	?___awdiv+1,w
  6669  019C  2A92               	goto	L8
  6670  019D                     l3208:	
  6671                           ;FMCW.c: 155: }
  6672                           ;FMCW.c: 156: }
  6673                           
  6674                           
  6675                           ;FMCW.c: 157: else if(Nprg[j] % 2 == 1) {
  6676  019D  085B               	movf	OUTFQ@j+1,w
  6677  019E  00A1               	movwf	??_OUTFQ+1
  6678  019F  085A               	movf	OUTFQ@j,w
  6679  01A0  00A0               	movwf	??_OUTFQ
  6680  01A1  1003               	clrc
  6681  01A2  0DA0               	rlf	??_OUTFQ,f
  6682  01A3  0DA1               	rlf	??_OUTFQ+1,f
  6683  01A4  0820               	movf	??_OUTFQ,w
  6684  01A5  077B               	addwf	OUTFQ@Nprg,w
  6685  01A6  00A2               	movwf	??_OUTFQ+2
  6686  01A7  0821               	movf	??_OUTFQ+1,w
  6687  01A8  1803               	skipnc
  6688  01A9  0A21               	incf	??_OUTFQ+1,w
  6689  01AA  077C               	addwf	OUTFQ@Nprg+1,w
  6690  01AB  00A3               	movwf	??_OUTFQ+3
  6691  01AC  0822               	movf	??_OUTFQ+2,w
  6692  01AD  0084               	movwf	4
  6693  01AE  1783               	bsf	3,7
  6694  01AF  1C23               	btfss	??_OUTFQ+3,0
  6695  01B0  1383               	bcf	3,7
  6696  01B1  0800               	movf	0,w
  6697  01B2  00A4               	movwf	??_OUTFQ+4
  6698  01B3  0A84               	incf	4,f
  6699  01B4  0800               	movf	0,w
  6700  01B5  00A5               	movwf	??_OUTFQ+5
  6701  01B6  1C24               	btfss	??_OUTFQ+4,0
  6702  01B7  2A93               	goto	l3222
  6703                           
  6704                           ;FMCW.c: 158: if(j == 4){
  6705  01B8  3004               	movlw	4
  6706  01B9  065A               	xorwf	OUTFQ@j,w
  6707  01BA  045B               	iorwf	OUTFQ@j+1,w
  6708  01BB  1D03               	btfss	3,2
  6709  01BC  2A0C               	goto	l3218
  6710                           
  6711                           ;FMCW.c: 159: Nprg[j] = Nprg[j] / 2;
  6712  01BD  3002               	movlw	2
  6713  01BE  00F0               	movwf	___awdiv@divisor
  6714  01BF  3000               	movlw	0
  6715  01C0  00F1               	movwf	___awdiv@divisor+1
  6716  01C1  085B               	movf	OUTFQ@j+1,w
  6717  01C2  00A1               	movwf	??_OUTFQ+1
  6718  01C3  085A               	movf	OUTFQ@j,w
  6719  01C4  00A0               	movwf	??_OUTFQ
  6720  01C5  1003               	clrc
  6721  01C6  0DA0               	rlf	??_OUTFQ,f
  6722  01C7  0DA1               	rlf	??_OUTFQ+1,f
  6723  01C8  0820               	movf	??_OUTFQ,w
  6724  01C9  077B               	addwf	OUTFQ@Nprg,w
  6725  01CA  00A2               	movwf	??_OUTFQ+2
  6726  01CB  0821               	movf	??_OUTFQ+1,w
  6727  01CC  1803               	skipnc
  6728  01CD  0A21               	incf	??_OUTFQ+1,w
  6729  01CE  077C               	addwf	OUTFQ@Nprg+1,w
  6730  01CF  00A3               	movwf	??_OUTFQ+3
  6731  01D0  0822               	movf	??_OUTFQ+2,w
  6732  01D1  0084               	movwf	4
  6733  01D2  1783               	bsf	3,7
  6734  01D3  1C23               	btfss	??_OUTFQ+3,0
  6735  01D4  1383               	bcf	3,7
  6736  01D5  0800               	movf	0,w
  6737  01D6  00F2               	movwf	___awdiv@dividend
  6738  01D7  0A84               	incf	4,f
  6739  01D8  0800               	movf	0,w
  6740  01D9  00F3               	movwf	___awdiv@dividend+1
  6741  01DA  120A  158A  22EB  120A  118A  	fcall	___awdiv
  6742  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  6743  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  6744  01E1  085B               	movf	OUTFQ@j+1,w
  6745  01E2  00A5               	movwf	??_OUTFQ+5
  6746  01E3  085A               	movf	OUTFQ@j,w
  6747  01E4  00A4               	movwf	??_OUTFQ+4
  6748  01E5  1003               	clrc
  6749  01E6  0DA4               	rlf	??_OUTFQ+4,f
  6750  01E7  0DA5               	rlf	??_OUTFQ+5,f
  6751  01E8  0824               	movf	??_OUTFQ+4,w
  6752  01E9  077B               	addwf	OUTFQ@Nprg,w
  6753  01EA  00A6               	movwf	??_OUTFQ+6
  6754  01EB  0825               	movf	??_OUTFQ+5,w
  6755  01EC  1803               	skipnc
  6756  01ED  0A25               	incf	??_OUTFQ+5,w
  6757  01EE  077C               	addwf	OUTFQ@Nprg+1,w
  6758  01EF  00A7               	movwf	??_OUTFQ+7
  6759  01F0  0826               	movf	??_OUTFQ+6,w
  6760  01F1  0084               	movwf	4
  6761  01F2  1783               	bsf	3,7
  6762  01F3  1C27               	btfss	??_OUTFQ+7,0
  6763  01F4  1383               	bcf	3,7
  6764  01F5  0870               	movf	?___awdiv,w
  6765  01F6  0080               	movwf	0
  6766  01F7  0A84               	incf	4,f
  6767  01F8  0871               	movf	?___awdiv+1,w
  6768  01F9  0080               	movwf	0
  6769                           
  6770                           ;FMCW.c: 160: Nprg_b[count] = 1;
  6771  01FA  0854               	movf	OUTFQ@count,w
  6772  01FB  00A0               	movwf	??_OUTFQ
  6773  01FC  0720               	addwf	??_OUTFQ,w
  6774  01FD  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6775  01FE  0084               	movwf	4
  6776  01FF  3001               	movlw	1
  6777  0200  1383               	bcf	3,7	;select IRP bank0
  6778  0201  0080               	movwf	0
  6779  0202  0A84               	incf	4,f
  6780  0203  3000               	movlw	0
  6781  0204  0080               	movwf	0
  6782  0205                     l3216:	
  6783                           
  6784                           ;FMCW.c: 161: count++;
  6785  0205  3001               	movlw	1
  6786  0206  07D4               	addwf	OUTFQ@count,f
  6787  0207  1803               	skipnc
  6788  0208  0AD5               	incf	OUTFQ@count+1,f
  6789  0209  3000               	movlw	0
  6790  020A  07D5               	addwf	OUTFQ@count+1,f
  6791                           
  6792                           ;FMCW.c: 162: }
  6793  020B  2A93               	goto	l3222
  6794  020C                     l3218:	
  6795                           
  6796                           ;FMCW.c: 163: else{
  6797                           ;FMCW.c: 164: Nprg[j] = Nprg[j] / 2;
  6798  020C  3002               	movlw	2
  6799  020D  00F0               	movwf	___awdiv@divisor
  6800  020E  3000               	movlw	0
  6801  020F  00F1               	movwf	___awdiv@divisor+1
  6802  0210  085B               	movf	OUTFQ@j+1,w
  6803  0211  00A1               	movwf	??_OUTFQ+1
  6804  0212  085A               	movf	OUTFQ@j,w
  6805  0213  00A0               	movwf	??_OUTFQ
  6806  0214  1003               	clrc
  6807  0215  0DA0               	rlf	??_OUTFQ,f
  6808  0216  0DA1               	rlf	??_OUTFQ+1,f
  6809  0217  0820               	movf	??_OUTFQ,w
  6810  0218  077B               	addwf	OUTFQ@Nprg,w
  6811  0219  00A2               	movwf	??_OUTFQ+2
  6812  021A  0821               	movf	??_OUTFQ+1,w
  6813  021B  1803               	skipnc
  6814  021C  0A21               	incf	??_OUTFQ+1,w
  6815  021D  077C               	addwf	OUTFQ@Nprg+1,w
  6816  021E  00A3               	movwf	??_OUTFQ+3
  6817  021F  0822               	movf	??_OUTFQ+2,w
  6818  0220  0084               	movwf	4
  6819  0221  1783               	bsf	3,7
  6820  0222  1C23               	btfss	??_OUTFQ+3,0
  6821  0223  1383               	bcf	3,7
  6822  0224  0800               	movf	0,w
  6823  0225  00F2               	movwf	___awdiv@dividend
  6824  0226  0A84               	incf	4,f
  6825  0227  0800               	movf	0,w
  6826  0228  00F3               	movwf	___awdiv@dividend+1
  6827  0229  120A  158A  22EB  120A  118A  	fcall	___awdiv
  6828  022E  1283               	bcf	3,5	;RP0=0, select bank0
  6829  022F  1303               	bcf	3,6	;RP1=0, select bank0
  6830  0230  085B               	movf	OUTFQ@j+1,w
  6831  0231  00A5               	movwf	??_OUTFQ+5
  6832  0232  085A               	movf	OUTFQ@j,w
  6833  0233  00A4               	movwf	??_OUTFQ+4
  6834  0234  1003               	clrc
  6835  0235  0DA4               	rlf	??_OUTFQ+4,f
  6836  0236  0DA5               	rlf	??_OUTFQ+5,f
  6837  0237  0824               	movf	??_OUTFQ+4,w
  6838  0238  077B               	addwf	OUTFQ@Nprg,w
  6839  0239  00A6               	movwf	??_OUTFQ+6
  6840  023A  0825               	movf	??_OUTFQ+5,w
  6841  023B  1803               	skipnc
  6842  023C  0A25               	incf	??_OUTFQ+5,w
  6843  023D  077C               	addwf	OUTFQ@Nprg+1,w
  6844  023E  00A7               	movwf	??_OUTFQ+7
  6845  023F  0826               	movf	??_OUTFQ+6,w
  6846  0240  0084               	movwf	4
  6847  0241  1783               	bsf	3,7
  6848  0242  1C27               	btfss	??_OUTFQ+7,0
  6849  0243  1383               	bcf	3,7
  6850  0244  0870               	movf	?___awdiv,w
  6851  0245  0080               	movwf	0
  6852  0246  0A84               	incf	4,f
  6853  0247  0871               	movf	?___awdiv+1,w
  6854  0248  0080               	movwf	0
  6855                           
  6856                           ;FMCW.c: 165: Nprg[j+1] = Nprg[j+1] + 10;
  6857  0249  085B               	movf	OUTFQ@j+1,w
  6858  024A  00A1               	movwf	??_OUTFQ+1
  6859  024B  085A               	movf	OUTFQ@j,w
  6860  024C  00A0               	movwf	??_OUTFQ
  6861  024D  1003               	clrc
  6862  024E  0DA0               	rlf	??_OUTFQ,f
  6863  024F  0DA1               	rlf	??_OUTFQ+1,f
  6864  0250  0820               	movf	??_OUTFQ,w
  6865  0251  3E02               	addlw	2
  6866  0252  00A2               	movwf	??_OUTFQ+2
  6867  0253  0821               	movf	??_OUTFQ+1,w
  6868  0254  1803               	skipnc
  6869  0255  3E01               	addlw	1
  6870  0256  3E00               	addlw	0
  6871  0257  00A3               	movwf	??_OUTFQ+3
  6872  0258  0822               	movf	??_OUTFQ+2,w
  6873  0259  077B               	addwf	OUTFQ@Nprg,w
  6874  025A  00A4               	movwf	??_OUTFQ+4
  6875  025B  0823               	movf	??_OUTFQ+3,w
  6876  025C  1803               	skipnc
  6877  025D  0A23               	incf	??_OUTFQ+3,w
  6878  025E  077C               	addwf	OUTFQ@Nprg+1,w
  6879  025F  00A5               	movwf	??_OUTFQ+5
  6880  0260  0824               	movf	??_OUTFQ+4,w
  6881  0261  0084               	movwf	4
  6882  0262  1783               	bsf	3,7
  6883  0263  1C25               	btfss	??_OUTFQ+5,0
  6884  0264  1383               	bcf	3,7
  6885  0265  0800               	movf	0,w
  6886  0266  00A6               	movwf	??_OUTFQ+6
  6887  0267  0A84               	incf	4,f
  6888  0268  0800               	movf	0,w
  6889  0269  00A7               	movwf	??_OUTFQ+7
  6890  026A  0826               	movf	??_OUTFQ+6,w
  6891  026B  3E0A               	addlw	10
  6892  026C  00A8               	movwf	??_OUTFQ+8
  6893  026D  0827               	movf	??_OUTFQ+7,w
  6894  026E  1803               	skipnc
  6895  026F  3E01               	addlw	1
  6896  0270  3E00               	addlw	0
  6897  0271  00A9               	movwf	??_OUTFQ+9
  6898  0272  085B               	movf	OUTFQ@j+1,w
  6899  0273  00AB               	movwf	??_OUTFQ+11
  6900  0274  085A               	movf	OUTFQ@j,w
  6901  0275  00AA               	movwf	??_OUTFQ+10
  6902  0276  1003               	clrc
  6903  0277  0DAA               	rlf	??_OUTFQ+10,f
  6904  0278  0DAB               	rlf	??_OUTFQ+11,f
  6905  0279  082A               	movf	??_OUTFQ+10,w
  6906  027A  3E02               	addlw	2
  6907  027B  00AC               	movwf	??_OUTFQ+12
  6908  027C  082B               	movf	??_OUTFQ+11,w
  6909  027D  1803               	skipnc
  6910  027E  3E01               	addlw	1
  6911  027F  3E00               	addlw	0
  6912  0280  00AD               	movwf	??_OUTFQ+13
  6913  0281  082C               	movf	??_OUTFQ+12,w
  6914  0282  077B               	addwf	OUTFQ@Nprg,w
  6915  0283  00AE               	movwf	??_OUTFQ+14
  6916  0284  082D               	movf	??_OUTFQ+13,w
  6917  0285  1803               	skipnc
  6918  0286  0A2D               	incf	??_OUTFQ+13,w
  6919  0287  077C               	addwf	OUTFQ@Nprg+1,w
  6920  0288  00AF               	movwf	??_OUTFQ+15
  6921  0289  082E               	movf	??_OUTFQ+14,w
  6922  028A  0084               	movwf	4
  6923  028B  1783               	bsf	3,7
  6924  028C  1C2F               	btfss	??_OUTFQ+15,0
  6925  028D  1383               	bcf	3,7
  6926  028E  0828               	movf	??_OUTFQ+8,w
  6927  028F  0080               	movwf	0
  6928  0290  0A84               	incf	4,f
  6929  0291  0829               	movf	??_OUTFQ+9,w
  6930  0292                     L8:	
  6931  0292  0080               	movwf	0
  6932  0293                     l3222:	
  6933  0293  3001               	movlw	1
  6934  0294  07DA               	addwf	OUTFQ@j,f
  6935  0295  1803               	skipnc
  6936  0296  0ADB               	incf	OUTFQ@j+1,f
  6937  0297  3000               	movlw	0
  6938  0298  07DB               	addwf	OUTFQ@j+1,f
  6939  0299  085B               	movf	OUTFQ@j+1,w
  6940  029A  3A80               	xorlw	128
  6941  029B  00FF               	movwf	127
  6942  029C  3080               	movlw	128
  6943  029D  027F               	subwf	127,w
  6944  029E  1D03               	skipz
  6945  029F  2AA2               	goto	u2865
  6946  02A0  3005               	movlw	5
  6947  02A1  025A               	subwf	OUTFQ@j,w
  6948  02A2                     u2865:	
  6949  02A2  1C03               	skipc
  6950  02A3  28F7               	goto	l3196
  6951  02A4                     l3226:	
  6952  02A4  3001               	movlw	1
  6953  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  6954  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  6955  02A7  07D2               	addwf	OUTFQ@i_468,f
  6956  02A8  1803               	skipnc
  6957  02A9  0AD3               	incf	OUTFQ@i_468+1,f
  6958  02AA  3000               	movlw	0
  6959  02AB  07D3               	addwf	OUTFQ@i_468+1,f
  6960  02AC  0853               	movf	OUTFQ@i_468+1,w
  6961  02AD  3A80               	xorlw	128
  6962  02AE  00FF               	movwf	127
  6963  02AF  3080               	movlw	128
  6964  02B0  027F               	subwf	127,w
  6965  02B1  1D03               	skipz
  6966  02B2  2AB5               	goto	u2875
  6967  02B3  3011               	movlw	17
  6968  02B4  0252               	subwf	OUTFQ@i_468,w
  6969  02B5                     u2875:	
  6970  02B5  1C03               	skipc
  6971  02B6  28E8               	goto	l3190
  6972  02B7                     l3230:	
  6973                           
  6974                           ;FMCW.c: 166: }
  6975                           ;FMCW.c: 167: }
  6976                           ;FMCW.c: 168: }
  6977                           ;FMCW.c: 169: }
  6978                           ;FMCW.c: 172: for (int i=0; i<17; i++)
  6979  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  6980  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  6981  02B9  01D8               	clrf	OUTFQ@i_470
  6982  02BA  01D9               	clrf	OUTFQ@i_470+1
  6983  02BB  0859               	movf	OUTFQ@i_470+1,w
  6984  02BC  3A80               	xorlw	128
  6985  02BD  00FF               	movwf	127
  6986  02BE  3080               	movlw	128
  6987  02BF  027F               	subwf	127,w
  6988  02C0  1D03               	skipz
  6989  02C1  2AC4               	goto	u2885
  6990  02C2  3011               	movlw	17
  6991  02C3  0258               	subwf	OUTFQ@i_470,w
  6992  02C4                     u2885:	
  6993  02C4  1803               	btfsc	3,0
  6994  02C5  2B0D               	goto	l3248
  6995  02C6                     l3236:	
  6996                           
  6997                           ;FMCW.c: 173: {
  6998                           ;FMCW.c: 174: if(Nprg_b[i] == 0)
  6999  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  7000  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  7001  02C8  0858               	movf	OUTFQ@i_470,w
  7002  02C9  00A0               	movwf	??_OUTFQ
  7003  02CA  0720               	addwf	??_OUTFQ,w
  7004  02CB  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  7005  02CC  0084               	movwf	4
  7006  02CD  1383               	bcf	3,7	;select IRP bank0
  7007  02CE  0800               	movf	0,w
  7008  02CF  00A1               	movwf	??_OUTFQ+1
  7009  02D0  0A84               	incf	4,f
  7010  02D1  0800               	movf	0,w
  7011  02D2  00A2               	movwf	??_OUTFQ+2
  7012  02D3  0821               	movf	??_OUTFQ+1,w
  7013  02D4  0422               	iorwf	??_OUTFQ+2,w
  7014  02D5  1D03               	btfss	3,2
  7015  02D6  2AE0               	goto	l3240
  7016                           
  7017                           ;FMCW.c: 175: {
  7018                           ;FMCW.c: 176: L_OUT(fmcwtxrx);
  7019  02D7  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7020  02D8  00F3               	movwf	L_OUT@fmcwtxrx+1
  7021  02D9  0879               	movf	OUTFQ@fmcwtxrx,w
  7022  02DA  00F2               	movwf	L_OUT@fmcwtxrx
  7023  02DB  120A  158A  2209  120A  118A  	fcall	_L_OUT
  7024  02E0                     l3240:	
  7025                           
  7026                           ;FMCW.c: 177: }
  7027                           ;FMCW.c: 178: if(Nprg_b[i] == 1)
  7028  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  7029  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  7030  02E2  0858               	movf	OUTFQ@i_470,w
  7031  02E3  00A0               	movwf	??_OUTFQ
  7032  02E4  0720               	addwf	??_OUTFQ,w
  7033  02E5  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  7034  02E6  0084               	movwf	4
  7035  02E7  1383               	bcf	3,7	;select IRP bank0
  7036  02E8  0800               	movf	0,w
  7037  02E9  00A1               	movwf	??_OUTFQ+1
  7038  02EA  0A84               	incf	4,f
  7039  02EB  0800               	movf	0,w
  7040  02EC  00A2               	movwf	??_OUTFQ+2
  7041  02ED  0321               	decf	??_OUTFQ+1,w
  7042  02EE  0422               	iorwf	??_OUTFQ+2,w
  7043  02EF  1D03               	btfss	3,2
  7044  02F0  2AFA               	goto	l3244
  7045                           
  7046                           ;FMCW.c: 179: {
  7047                           ;FMCW.c: 180: H_OUT(fmcwtxrx);
  7048  02F1  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7049  02F2  00F3               	movwf	H_OUT@fmcwtxrx+1
  7050  02F3  0879               	movf	OUTFQ@fmcwtxrx,w
  7051  02F4  00F2               	movwf	H_OUT@fmcwtxrx
  7052  02F5  120A  158A  21C3  120A  118A  	fcall	_H_OUT
  7053  02FA                     l3244:	
  7054  02FA  3001               	movlw	1
  7055  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  7056  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  7057  02FD  07D8               	addwf	OUTFQ@i_470,f
  7058  02FE  1803               	skipnc
  7059  02FF  0AD9               	incf	OUTFQ@i_470+1,f
  7060  0300  3000               	movlw	0
  7061  0301  07D9               	addwf	OUTFQ@i_470+1,f
  7062  0302  0859               	movf	OUTFQ@i_470+1,w
  7063  0303  3A80               	xorlw	128
  7064  0304  00FF               	movwf	127
  7065  0305  3080               	movlw	128
  7066  0306  027F               	subwf	127,w
  7067  0307  1D03               	skipz
  7068  0308  2B0B               	goto	u2915
  7069  0309  3011               	movlw	17
  7070  030A  0258               	subwf	OUTFQ@i_470,w
  7071  030B                     u2915:	
  7072  030B  1C03               	skipc
  7073  030C  2AC6               	goto	l3236
  7074  030D                     l3248:	
  7075                           
  7076                           ;FMCW.c: 181: }
  7077                           ;FMCW.c: 182: }
  7078                           ;FMCW.c: 185: H_OUT(fmcwtxrx);
  7079  030D  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7080  030E  00F3               	movwf	H_OUT@fmcwtxrx+1
  7081  030F  0879               	movf	OUTFQ@fmcwtxrx,w
  7082  0310  00F2               	movwf	H_OUT@fmcwtxrx
  7083  0311  120A  158A  21C3  120A  118A  	fcall	_H_OUT
  7084                           
  7085                           ;FMCW.c: 186: L_OUT(fmcwtxrx);
  7086  0316  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7087  0317  00F3               	movwf	L_OUT@fmcwtxrx+1
  7088  0318  0879               	movf	OUTFQ@fmcwtxrx,w
  7089  0319  00F2               	movwf	L_OUT@fmcwtxrx
  7090  031A  120A  158A  2209  120A  118A  	fcall	_L_OUT
  7091                           
  7092                           ;FMCW.c: 189: STBOUT(fmcwtxrx);
  7093  031F  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7094  0320  00F3               	movwf	STBOUT@fmcwtxrx+1
  7095  0321  0879               	movf	OUTFQ@fmcwtxrx,w
  7096  0322  00F2               	movwf	STBOUT@fmcwtxrx
  7097  0323  120A  158A  2161   	fcall	_STBOUT
  7098  0326  0008               	return
  7099  0327                     __end_of_OUTFQ:	
  7100                           
  7101                           	psect	text25
  7102  0AEB                     __ptext25:	
  7103 ;; *************** function ___awdiv *****************
  7104 ;; Defined at:
  7105 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  7106 ;; Parameters:    Size  Location     Type
  7107 ;;  divisor         2    0[COMMON] int 
  7108 ;;  dividend        2    2[COMMON] int 
  7109 ;; Auto vars:     Size  Location     Type
  7110 ;;  quotient        2    7[COMMON] int 
  7111 ;;  sign            1    6[COMMON] unsigned char 
  7112 ;;  counter         1    5[COMMON] unsigned char 
  7113 ;; Return value:  Size  Location     Type
  7114 ;;                  2    0[COMMON] int 
  7115 ;; Registers used:
  7116 ;;		wreg, status,2, status,0
  7117 ;; Tracked objects:
  7118 ;;		On entry : 0/0
  7119 ;;		On exit  : 0/0
  7120 ;;		Unchanged: 0/0
  7121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7122 ;;      Params:         4       0       0       0       0
  7123 ;;      Locals:         4       0       0       0       0
  7124 ;;      Temps:          1       0       0       0       0
  7125 ;;      Totals:         9       0       0       0       0
  7126 ;;Total ram usage:        9 bytes
  7127 ;; Hardware stack levels used:    1
  7128 ;; This function calls:
  7129 ;;		Nothing
  7130 ;; This function is called by:
  7131 ;;		_OUTFQ
  7132 ;;		_RFDOUT
  7133 ;; This function uses a non-reentrant model
  7134 ;;
  7135                           
  7136                           
  7137                           ;psect for function ___awdiv
  7138  0AEB                     ___awdiv:	
  7139                           
  7140                           ;incstack = 0
  7141                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7142  0AEB  01F6               	clrf	___awdiv@sign
  7143  0AEC  1FF1               	btfss	___awdiv@divisor+1,7
  7144  0AED  2AF5               	goto	l2660
  7145  0AEE  09F0               	comf	___awdiv@divisor,f
  7146  0AEF  09F1               	comf	___awdiv@divisor+1,f
  7147  0AF0  0AF0               	incf	___awdiv@divisor,f
  7148  0AF1  1903               	skipnz
  7149  0AF2  0AF1               	incf	___awdiv@divisor+1,f
  7150  0AF3  01F6               	clrf	___awdiv@sign
  7151  0AF4  0AF6               	incf	___awdiv@sign,f
  7152  0AF5                     l2660:	
  7153  0AF5  1FF3               	btfss	___awdiv@dividend+1,7
  7154  0AF6  2B00               	goto	l2666
  7155  0AF7  09F2               	comf	___awdiv@dividend,f
  7156  0AF8  09F3               	comf	___awdiv@dividend+1,f
  7157  0AF9  0AF2               	incf	___awdiv@dividend,f
  7158  0AFA  1903               	skipnz
  7159  0AFB  0AF3               	incf	___awdiv@dividend+1,f
  7160  0AFC  3001               	movlw	1
  7161  0AFD  00F4               	movwf	??___awdiv
  7162  0AFE  0874               	movf	??___awdiv,w
  7163  0AFF  06F6               	xorwf	___awdiv@sign,f
  7164  0B00                     l2666:	
  7165  0B00  01F7               	clrf	___awdiv@quotient
  7166  0B01  01F8               	clrf	___awdiv@quotient+1
  7167  0B02  0870               	movf	___awdiv@divisor,w
  7168  0B03  0471               	iorwf	___awdiv@divisor+1,w
  7169  0B04  1903               	btfsc	3,2
  7170  0B05  2B37               	goto	l2688
  7171  0B06  01F5               	clrf	___awdiv@counter
  7172  0B07  0AF5               	incf	___awdiv@counter,f
  7173  0B08                     l2676:	
  7174  0B08  1BF1               	btfsc	___awdiv@divisor+1,7
  7175  0B09  2B16               	goto	l2678
  7176  0B0A  3001               	movlw	1
  7177  0B0B                     u2035:	
  7178  0B0B  1003               	clrc
  7179  0B0C  0DF0               	rlf	___awdiv@divisor,f
  7180  0B0D  0DF1               	rlf	___awdiv@divisor+1,f
  7181  0B0E  3EFF               	addlw	-1
  7182  0B0F  1D03               	skipz
  7183  0B10  2B0B               	goto	u2035
  7184  0B11  3001               	movlw	1
  7185  0B12  00F4               	movwf	??___awdiv
  7186  0B13  0874               	movf	??___awdiv,w
  7187  0B14  07F5               	addwf	___awdiv@counter,f
  7188  0B15  2B08               	goto	l2676
  7189  0B16                     l2678:	
  7190  0B16  3001               	movlw	1
  7191  0B17                     u2055:	
  7192  0B17  1003               	clrc
  7193  0B18  0DF7               	rlf	___awdiv@quotient,f
  7194  0B19  0DF8               	rlf	___awdiv@quotient+1,f
  7195  0B1A  3EFF               	addlw	-1
  7196  0B1B  1D03               	skipz
  7197  0B1C  2B17               	goto	u2055
  7198  0B1D  0871               	movf	___awdiv@divisor+1,w
  7199  0B1E  0273               	subwf	___awdiv@dividend+1,w
  7200  0B1F  1D03               	skipz
  7201  0B20  2B23               	goto	u2065
  7202  0B21  0870               	movf	___awdiv@divisor,w
  7203  0B22  0272               	subwf	___awdiv@dividend,w
  7204  0B23                     u2065:	
  7205  0B23  1C03               	skipc
  7206  0B24  2B2C               	goto	l2684
  7207  0B25  0870               	movf	___awdiv@divisor,w
  7208  0B26  02F2               	subwf	___awdiv@dividend,f
  7209  0B27  0871               	movf	___awdiv@divisor+1,w
  7210  0B28  1C03               	skipc
  7211  0B29  03F3               	decf	___awdiv@dividend+1,f
  7212  0B2A  02F3               	subwf	___awdiv@dividend+1,f
  7213  0B2B  1477               	bsf	___awdiv@quotient,0
  7214  0B2C                     l2684:	
  7215  0B2C  3001               	movlw	1
  7216  0B2D                     u2075:	
  7217  0B2D  1003               	clrc
  7218  0B2E  0CF1               	rrf	___awdiv@divisor+1,f
  7219  0B2F  0CF0               	rrf	___awdiv@divisor,f
  7220  0B30  3EFF               	addlw	-1
  7221  0B31  1D03               	skipz
  7222  0B32  2B2D               	goto	u2075
  7223  0B33  3001               	movlw	1
  7224  0B34  02F5               	subwf	___awdiv@counter,f
  7225  0B35  1D03               	btfss	3,2
  7226  0B36  2B16               	goto	l2678
  7227  0B37                     l2688:	
  7228  0B37  0876               	movf	___awdiv@sign,w
  7229  0B38  1903               	btfsc	3,2
  7230  0B39  2B3F               	goto	l2692
  7231  0B3A  09F7               	comf	___awdiv@quotient,f
  7232  0B3B  09F8               	comf	___awdiv@quotient+1,f
  7233  0B3C  0AF7               	incf	___awdiv@quotient,f
  7234  0B3D  1903               	skipnz
  7235  0B3E  0AF8               	incf	___awdiv@quotient+1,f
  7236  0B3F                     l2692:	
  7237  0B3F  0878               	movf	___awdiv@quotient+1,w
  7238  0B40  00F1               	movwf	?___awdiv+1
  7239  0B41  0877               	movf	___awdiv@quotient,w
  7240  0B42  00F0               	movwf	?___awdiv
  7241  0B43  0008               	return
  7242  0B44                     __end_of___awdiv:	
  7243                           
  7244                           	psect	text26
  7245  0C60                     __ptext26:	
  7246 ;; *************** function _OPINIT *****************
  7247 ;; Defined at:
  7248 ;;		line 241 in file "FMCW.c"
  7249 ;; Parameters:    Size  Location     Type
  7250 ;;  fmcwtxrx        2    4[COMMON] int 
  7251 ;; Auto vars:     Size  Location     Type
  7252 ;;		None
  7253 ;; Return value:  Size  Location     Type
  7254 ;;                  1    wreg      void 
  7255 ;; Registers used:
  7256 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7257 ;; Tracked objects:
  7258 ;;		On entry : 0/0
  7259 ;;		On exit  : 0/0
  7260 ;;		Unchanged: 0/0
  7261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7262 ;;      Params:         2       0       0       0       0
  7263 ;;      Locals:         0       0       0       0       0
  7264 ;;      Temps:          0       0       0       0       0
  7265 ;;      Totals:         2       0       0       0       0
  7266 ;;Total ram usage:        2 bytes
  7267 ;; Hardware stack levels used:    1
  7268 ;; Hardware stack levels required when called:    2
  7269 ;; This function calls:
  7270 ;;		_H_OUT
  7271 ;;		_L_OUT
  7272 ;;		_STBOUT
  7273 ;; This function is called by:
  7274 ;;		_FMTX
  7275 ;;		_CWTX
  7276 ;;		_FMRX
  7277 ;; This function uses a non-reentrant model
  7278 ;;
  7279                           
  7280                           
  7281                           ;psect for function _OPINIT
  7282  0C60                     _OPINIT:	
  7283                           
  7284                           ;FMCW.c: 243: L_OUT(fmcwtxrx);
  7285                           
  7286                           ;incstack = 0
  7287                           ; Regs used in _OPINIT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7288  0C60  0875               	movf	OPINIT@fmcwtxrx+1,w
  7289  0C61  00F3               	movwf	L_OUT@fmcwtxrx+1
  7290  0C62  0874               	movf	OPINIT@fmcwtxrx,w
  7291  0C63  00F2               	movwf	L_OUT@fmcwtxrx
  7292  0C64  120A  158A  2209  120A  158A  	fcall	_L_OUT
  7293                           
  7294                           ;FMCW.c: 244: L_OUT(fmcwtxrx);
  7295  0C69  0875               	movf	OPINIT@fmcwtxrx+1,w
  7296  0C6A  00F3               	movwf	L_OUT@fmcwtxrx+1
  7297  0C6B  0874               	movf	OPINIT@fmcwtxrx,w
  7298  0C6C  00F2               	movwf	L_OUT@fmcwtxrx
  7299  0C6D  120A  158A  2209  120A  158A  	fcall	_L_OUT
  7300                           
  7301                           ;FMCW.c: 245: L_OUT(fmcwtxrx);
  7302  0C72  0875               	movf	OPINIT@fmcwtxrx+1,w
  7303  0C73  00F3               	movwf	L_OUT@fmcwtxrx+1
  7304  0C74  0874               	movf	OPINIT@fmcwtxrx,w
  7305  0C75  00F2               	movwf	L_OUT@fmcwtxrx
  7306  0C76  120A  158A  2209  120A  158A  	fcall	_L_OUT
  7307                           
  7308                           ;FMCW.c: 246: H_OUT(fmcwtxrx);
  7309  0C7B  0875               	movf	OPINIT@fmcwtxrx+1,w
  7310  0C7C  00F3               	movwf	H_OUT@fmcwtxrx+1
  7311  0C7D  0874               	movf	OPINIT@fmcwtxrx,w
  7312  0C7E  00F2               	movwf	H_OUT@fmcwtxrx
  7313  0C7F  120A  158A  21C3  120A  158A  	fcall	_H_OUT
  7314                           
  7315                           ;FMCW.c: 247: H_OUT(fmcwtxrx);
  7316  0C84  0875               	movf	OPINIT@fmcwtxrx+1,w
  7317  0C85  00F3               	movwf	H_OUT@fmcwtxrx+1
  7318  0C86  0874               	movf	OPINIT@fmcwtxrx,w
  7319  0C87  00F2               	movwf	H_OUT@fmcwtxrx
  7320  0C88  120A  158A  21C3  120A  158A  	fcall	_H_OUT
  7321                           
  7322                           ;FMCW.c: 248: L_OUT(fmcwtxrx);
  7323  0C8D  0875               	movf	OPINIT@fmcwtxrx+1,w
  7324  0C8E  00F3               	movwf	L_OUT@fmcwtxrx+1
  7325  0C8F  0874               	movf	OPINIT@fmcwtxrx,w
  7326  0C90  00F2               	movwf	L_OUT@fmcwtxrx
  7327  0C91  120A  158A  2209  120A  158A  	fcall	_L_OUT
  7328                           
  7329                           ;FMCW.c: 249: L_OUT(fmcwtxrx);
  7330  0C96  0875               	movf	OPINIT@fmcwtxrx+1,w
  7331  0C97  00F3               	movwf	L_OUT@fmcwtxrx+1
  7332  0C98  0874               	movf	OPINIT@fmcwtxrx,w
  7333  0C99  00F2               	movwf	L_OUT@fmcwtxrx
  7334  0C9A  120A  158A  2209  120A  158A  	fcall	_L_OUT
  7335                           
  7336                           ;FMCW.c: 250: L_OUT(fmcwtxrx);
  7337  0C9F  0875               	movf	OPINIT@fmcwtxrx+1,w
  7338  0CA0  00F3               	movwf	L_OUT@fmcwtxrx+1
  7339  0CA1  0874               	movf	OPINIT@fmcwtxrx,w
  7340  0CA2  00F2               	movwf	L_OUT@fmcwtxrx
  7341  0CA3  120A  158A  2209  120A  158A  	fcall	_L_OUT
  7342                           
  7343                           ;FMCW.c: 251: L_OUT(fmcwtxrx);
  7344  0CA8  0875               	movf	OPINIT@fmcwtxrx+1,w
  7345  0CA9  00F3               	movwf	L_OUT@fmcwtxrx+1
  7346  0CAA  0874               	movf	OPINIT@fmcwtxrx,w
  7347  0CAB  00F2               	movwf	L_OUT@fmcwtxrx
  7348  0CAC  120A  158A  2209  120A  158A  	fcall	_L_OUT
  7349                           
  7350                           ;FMCW.c: 252: L_OUT(fmcwtxrx);
  7351  0CB1  0875               	movf	OPINIT@fmcwtxrx+1,w
  7352  0CB2  00F3               	movwf	L_OUT@fmcwtxrx+1
  7353  0CB3  0874               	movf	OPINIT@fmcwtxrx,w
  7354  0CB4  00F2               	movwf	L_OUT@fmcwtxrx
  7355  0CB5  120A  158A  2209  120A  158A  	fcall	_L_OUT
  7356                           
  7357                           ;FMCW.c: 253: H_OUT(fmcwtxrx);
  7358  0CBA  0875               	movf	OPINIT@fmcwtxrx+1,w
  7359  0CBB  00F3               	movwf	H_OUT@fmcwtxrx+1
  7360  0CBC  0874               	movf	OPINIT@fmcwtxrx,w
  7361  0CBD  00F2               	movwf	H_OUT@fmcwtxrx
  7362  0CBE  120A  158A  21C3  120A  158A  	fcall	_H_OUT
  7363                           
  7364                           ;FMCW.c: 256: L_OUT(fmcwtxrx);
  7365  0CC3  0875               	movf	OPINIT@fmcwtxrx+1,w
  7366  0CC4  00F3               	movwf	L_OUT@fmcwtxrx+1
  7367  0CC5  0874               	movf	OPINIT@fmcwtxrx,w
  7368  0CC6  00F2               	movwf	L_OUT@fmcwtxrx
  7369  0CC7  120A  158A  2209  120A  158A  	fcall	_L_OUT
  7370                           
  7371                           ;FMCW.c: 257: L_OUT(fmcwtxrx);
  7372  0CCC  0875               	movf	OPINIT@fmcwtxrx+1,w
  7373  0CCD  00F3               	movwf	L_OUT@fmcwtxrx+1
  7374  0CCE  0874               	movf	OPINIT@fmcwtxrx,w
  7375  0CCF  00F2               	movwf	L_OUT@fmcwtxrx
  7376  0CD0  120A  158A  2209  120A  158A  	fcall	_L_OUT
  7377                           
  7378                           ;FMCW.c: 260: STBOUT(fmcwtxrx);
  7379  0CD5  0875               	movf	OPINIT@fmcwtxrx+1,w
  7380  0CD6  00F3               	movwf	STBOUT@fmcwtxrx+1
  7381  0CD7  0874               	movf	OPINIT@fmcwtxrx,w
  7382  0CD8  00F2               	movwf	STBOUT@fmcwtxrx
  7383  0CD9  120A  158A  2161   	fcall	_STBOUT
  7384  0CDC  0008               	return
  7385  0CDD                     __end_of_OPINIT:	
  7386                           
  7387                           	psect	text27
  7388  0961                     __ptext27:	
  7389 ;; *************** function _STBOUT *****************
  7390 ;; Defined at:
  7391 ;;		line 107 in file "FMCW.c"
  7392 ;; Parameters:    Size  Location     Type
  7393 ;;  fmcwtxrx        2    2[COMMON] int 
  7394 ;; Auto vars:     Size  Location     Type
  7395 ;;		None
  7396 ;; Return value:  Size  Location     Type
  7397 ;;                  1    wreg      void 
  7398 ;; Registers used:
  7399 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7400 ;; Tracked objects:
  7401 ;;		On entry : 0/0
  7402 ;;		On exit  : 0/0
  7403 ;;		Unchanged: 0/0
  7404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7405 ;;      Params:         2       0       0       0       0
  7406 ;;      Locals:         0       0       0       0       0
  7407 ;;      Temps:          0       0       0       0       0
  7408 ;;      Totals:         2       0       0       0       0
  7409 ;;Total ram usage:        2 bytes
  7410 ;; Hardware stack levels used:    1
  7411 ;; Hardware stack levels required when called:    1
  7412 ;; This function calls:
  7413 ;;		__NOP
  7414 ;; This function is called by:
  7415 ;;		_OUTFQ
  7416 ;;		_RFDOUT
  7417 ;;		_OPINIT
  7418 ;; This function uses a non-reentrant model
  7419 ;;
  7420                           
  7421                           
  7422                           ;psect for function _STBOUT
  7423  0961                     _STBOUT:	
  7424                           
  7425                           ;FMCW.c: 108: if(fmcwtxrx == 1)
  7426                           
  7427                           ;incstack = 0
  7428                           ; Regs used in _STBOUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7429  0961  0372               	decf	STBOUT@fmcwtxrx,w
  7430  0962  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7431  0963  1D03               	btfss	3,2
  7432  0964  2970               	goto	l2636
  7433                           
  7434                           ;FMCW.c: 109: {
  7435                           ;FMCW.c: 110: PORTAbits.RA5 = 1;
  7436  0965  1283               	bcf	3,5	;RP0=0, select bank0
  7437  0966  1303               	bcf	3,6	;RP1=0, select bank0
  7438  0967  1685               	bsf	5,5	;volatile
  7439                           
  7440                           ;FMCW.c: 111: _NOP();
  7441  0968  160A  118A  27D2  120A  158A  	fcall	__NOP
  7442                           
  7443                           ;FMCW.c: 112: PORTAbits.RA5 = 0;
  7444  096D  1283               	bcf	3,5	;RP0=0, select bank0
  7445  096E  1303               	bcf	3,6	;RP1=0, select bank0
  7446  096F  1285               	bcf	5,5	;volatile
  7447  0970                     l2636:	
  7448                           
  7449                           ;FMCW.c: 113: }
  7450                           ;FMCW.c: 114: if(fmcwtxrx == 2)
  7451  0970  3002               	movlw	2
  7452  0971  0672               	xorwf	STBOUT@fmcwtxrx,w
  7453  0972  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7454  0973  1D03               	btfss	3,2
  7455  0974  2980               	goto	l2644
  7456                           
  7457                           ;FMCW.c: 115: {
  7458                           ;FMCW.c: 116: PORTDbits.RD0 = 1;
  7459  0975  1283               	bcf	3,5	;RP0=0, select bank0
  7460  0976  1303               	bcf	3,6	;RP1=0, select bank0
  7461  0977  1408               	bsf	8,0	;volatile
  7462                           
  7463                           ;FMCW.c: 117: _NOP();
  7464  0978  160A  118A  27D2  120A  158A  	fcall	__NOP
  7465                           
  7466                           ;FMCW.c: 118: PORTDbits.RD0 = 0;
  7467  097D  1283               	bcf	3,5	;RP0=0, select bank0
  7468  097E  1303               	bcf	3,6	;RP1=0, select bank0
  7469  097F  1008               	bcf	8,0	;volatile
  7470  0980                     l2644:	
  7471                           
  7472                           ;FMCW.c: 119: }
  7473                           ;FMCW.c: 120: if(fmcwtxrx == 3)
  7474  0980  3003               	movlw	3
  7475  0981  0672               	xorwf	STBOUT@fmcwtxrx,w
  7476  0982  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7477  0983  1D03               	btfss	3,2
  7478  0984  0008               	return
  7479                           
  7480                           ;FMCW.c: 121: {
  7481                           ;FMCW.c: 122: PORTAbits.RA4 = 1;
  7482  0985  1283               	bcf	3,5	;RP0=0, select bank0
  7483  0986  1303               	bcf	3,6	;RP1=0, select bank0
  7484  0987  1605               	bsf	5,4	;volatile
  7485                           
  7486                           ;FMCW.c: 123: _NOP();
  7487  0988  160A  118A  27D2   	fcall	__NOP
  7488                           
  7489                           ;FMCW.c: 124: PORTAbits.RA4 = 0;
  7490  098B  1283               	bcf	3,5	;RP0=0, select bank0
  7491  098C  1303               	bcf	3,6	;RP1=0, select bank0
  7492  098D  1205               	bcf	5,4	;volatile
  7493  098E  0008               	return
  7494  098F                     __end_of_STBOUT:	
  7495                           
  7496                           	psect	text28
  7497  0A09                     __ptext28:	
  7498 ;; *************** function _L_OUT *****************
  7499 ;; Defined at:
  7500 ;;		line 40 in file "FMCW.c"
  7501 ;; Parameters:    Size  Location     Type
  7502 ;;  fmcwtxrx        2    2[COMMON] int 
  7503 ;; Auto vars:     Size  Location     Type
  7504 ;;		None
  7505 ;; Return value:  Size  Location     Type
  7506 ;;                  1    wreg      void 
  7507 ;; Registers used:
  7508 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7509 ;; Tracked objects:
  7510 ;;		On entry : 0/0
  7511 ;;		On exit  : 0/0
  7512 ;;		Unchanged: 0/0
  7513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7514 ;;      Params:         2       0       0       0       0
  7515 ;;      Locals:         0       0       0       0       0
  7516 ;;      Temps:          0       0       0       0       0
  7517 ;;      Totals:         2       0       0       0       0
  7518 ;;Total ram usage:        2 bytes
  7519 ;; Hardware stack levels used:    1
  7520 ;; Hardware stack levels required when called:    1
  7521 ;; This function calls:
  7522 ;;		__NOP
  7523 ;; This function is called by:
  7524 ;;		_OUTFQ
  7525 ;;		_RFDOUT
  7526 ;;		_OPINIT
  7527 ;; This function uses a non-reentrant model
  7528 ;;
  7529                           
  7530                           
  7531                           ;psect for function _L_OUT
  7532  0A09                     _L_OUT:	
  7533                           
  7534                           ;FMCW.c: 41: if(fmcwtxrx == 1)
  7535                           
  7536                           ;incstack = 0
  7537                           ; Regs used in _L_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7538  0A09  0372               	decf	L_OUT@fmcwtxrx,w
  7539  0A0A  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7540  0A0B  1D03               	btfss	3,2
  7541  0A0C  2A20               	goto	l2578
  7542                           
  7543                           ;FMCW.c: 42: {
  7544                           ;FMCW.c: 43: PORTEbits.RE0 = 0;
  7545  0A0D  1283               	bcf	3,5	;RP0=0, select bank0
  7546  0A0E  1303               	bcf	3,6	;RP1=0, select bank0
  7547  0A0F  1009               	bcf	9,0	;volatile
  7548                           
  7549                           ;FMCW.c: 44: _NOP();
  7550  0A10  160A  118A  27D2  120A  158A  	fcall	__NOP
  7551                           
  7552                           ;FMCW.c: 45: PORTEbits.RE1 = 1;
  7553  0A15  1283               	bcf	3,5	;RP0=0, select bank0
  7554  0A16  1303               	bcf	3,6	;RP1=0, select bank0
  7555  0A17  1489               	bsf	9,1	;volatile
  7556                           
  7557                           ;FMCW.c: 46: _NOP();
  7558  0A18  160A  118A  27D2  120A  158A  	fcall	__NOP
  7559                           
  7560                           ;FMCW.c: 47: PORTEbits.RE1 = 0;
  7561  0A1D  1283               	bcf	3,5	;RP0=0, select bank0
  7562  0A1E  1303               	bcf	3,6	;RP1=0, select bank0
  7563  0A1F  1089               	bcf	9,1	;volatile
  7564  0A20                     l2578:	
  7565                           
  7566                           ;FMCW.c: 48: }
  7567                           ;FMCW.c: 49: if(fmcwtxrx == 2)
  7568  0A20  3002               	movlw	2
  7569  0A21  0672               	xorwf	L_OUT@fmcwtxrx,w
  7570  0A22  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7571  0A23  1D03               	btfss	3,2
  7572  0A24  2A38               	goto	l2588
  7573                           
  7574                           ;FMCW.c: 50: {
  7575                           ;FMCW.c: 51: PORTDbits.RD1 = 0;
  7576  0A25  1283               	bcf	3,5	;RP0=0, select bank0
  7577  0A26  1303               	bcf	3,6	;RP1=0, select bank0
  7578  0A27  1088               	bcf	8,1	;volatile
  7579                           
  7580                           ;FMCW.c: 52: _NOP();
  7581  0A28  160A  118A  27D2  120A  158A  	fcall	__NOP
  7582                           
  7583                           ;FMCW.c: 53: PORTDbits.RD2 = 1;
  7584  0A2D  1283               	bcf	3,5	;RP0=0, select bank0
  7585  0A2E  1303               	bcf	3,6	;RP1=0, select bank0
  7586  0A2F  1508               	bsf	8,2	;volatile
  7587                           
  7588                           ;FMCW.c: 54: _NOP();
  7589  0A30  160A  118A  27D2  120A  158A  	fcall	__NOP
  7590                           
  7591                           ;FMCW.c: 55: PORTDbits.RD2 = 0;
  7592  0A35  1283               	bcf	3,5	;RP0=0, select bank0
  7593  0A36  1303               	bcf	3,6	;RP1=0, select bank0
  7594  0A37  1108               	bcf	8,2	;volatile
  7595  0A38                     l2588:	
  7596                           
  7597                           ;FMCW.c: 56: }
  7598                           ;FMCW.c: 57: if(fmcwtxrx == 3)
  7599  0A38  3003               	movlw	3
  7600  0A39  0672               	xorwf	L_OUT@fmcwtxrx,w
  7601  0A3A  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7602  0A3B  1D03               	btfss	3,2
  7603  0A3C  0008               	return
  7604                           
  7605                           ;FMCW.c: 58: {
  7606                           ;FMCW.c: 59: PORTAbits.RA3 = 0;
  7607  0A3D  1283               	bcf	3,5	;RP0=0, select bank0
  7608  0A3E  1303               	bcf	3,6	;RP1=0, select bank0
  7609  0A3F  1185               	bcf	5,3	;volatile
  7610                           
  7611                           ;FMCW.c: 60: _NOP();
  7612  0A40  160A  118A  27D2  120A  158A  	fcall	__NOP
  7613                           
  7614                           ;FMCW.c: 61: PORTAbits.RA2 = 1;
  7615  0A45  1283               	bcf	3,5	;RP0=0, select bank0
  7616  0A46  1303               	bcf	3,6	;RP1=0, select bank0
  7617  0A47  1505               	bsf	5,2	;volatile
  7618                           
  7619                           ;FMCW.c: 62: _NOP();
  7620  0A48  160A  118A  27D2   	fcall	__NOP
  7621                           
  7622                           ;FMCW.c: 63: PORTAbits.RA2 = 0;
  7623  0A4B  1283               	bcf	3,5	;RP0=0, select bank0
  7624  0A4C  1303               	bcf	3,6	;RP1=0, select bank0
  7625  0A4D  1105               	bcf	5,2	;volatile
  7626  0A4E  0008               	return
  7627  0A4F                     __end_of_L_OUT:	
  7628                           
  7629                           	psect	text29
  7630  09C3                     __ptext29:	
  7631 ;; *************** function _H_OUT *****************
  7632 ;; Defined at:
  7633 ;;		line 74 in file "FMCW.c"
  7634 ;; Parameters:    Size  Location     Type
  7635 ;;  fmcwtxrx        2    2[COMMON] int 
  7636 ;; Auto vars:     Size  Location     Type
  7637 ;;		None
  7638 ;; Return value:  Size  Location     Type
  7639 ;;                  1    wreg      void 
  7640 ;; Registers used:
  7641 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7642 ;; Tracked objects:
  7643 ;;		On entry : 0/0
  7644 ;;		On exit  : 0/0
  7645 ;;		Unchanged: 0/0
  7646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7647 ;;      Params:         2       0       0       0       0
  7648 ;;      Locals:         0       0       0       0       0
  7649 ;;      Temps:          0       0       0       0       0
  7650 ;;      Totals:         2       0       0       0       0
  7651 ;;Total ram usage:        2 bytes
  7652 ;; Hardware stack levels used:    1
  7653 ;; Hardware stack levels required when called:    1
  7654 ;; This function calls:
  7655 ;;		__NOP
  7656 ;; This function is called by:
  7657 ;;		_OUTFQ
  7658 ;;		_RFDOUT
  7659 ;;		_OPINIT
  7660 ;; This function uses a non-reentrant model
  7661 ;;
  7662                           
  7663                           
  7664                           ;psect for function _H_OUT
  7665  09C3                     _H_OUT:	
  7666                           
  7667                           ;FMCW.c: 75: if(fmcwtxrx == 1)
  7668                           
  7669                           ;incstack = 0
  7670                           ; Regs used in _H_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7671  09C3  0372               	decf	H_OUT@fmcwtxrx,w
  7672  09C4  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7673  09C5  1D03               	btfss	3,2
  7674  09C6  29DA               	goto	l2608
  7675                           
  7676                           ;FMCW.c: 76: {
  7677                           ;FMCW.c: 77: PORTEbits.RE0 = 1;
  7678  09C7  1283               	bcf	3,5	;RP0=0, select bank0
  7679  09C8  1303               	bcf	3,6	;RP1=0, select bank0
  7680  09C9  1409               	bsf	9,0	;volatile
  7681                           
  7682                           ;FMCW.c: 78: _NOP();
  7683  09CA  160A  118A  27D2  120A  158A  	fcall	__NOP
  7684                           
  7685                           ;FMCW.c: 79: PORTEbits.RE1 = 1;
  7686  09CF  1283               	bcf	3,5	;RP0=0, select bank0
  7687  09D0  1303               	bcf	3,6	;RP1=0, select bank0
  7688  09D1  1489               	bsf	9,1	;volatile
  7689                           
  7690                           ;FMCW.c: 80: _NOP();
  7691  09D2  160A  118A  27D2  120A  158A  	fcall	__NOP
  7692                           
  7693                           ;FMCW.c: 81: PORTEbits.RE1 = 0;
  7694  09D7  1283               	bcf	3,5	;RP0=0, select bank0
  7695  09D8  1303               	bcf	3,6	;RP1=0, select bank0
  7696  09D9  1089               	bcf	9,1	;volatile
  7697  09DA                     l2608:	
  7698                           
  7699                           ;FMCW.c: 82: }
  7700                           ;FMCW.c: 83: if(fmcwtxrx == 2)
  7701  09DA  3002               	movlw	2
  7702  09DB  0672               	xorwf	H_OUT@fmcwtxrx,w
  7703  09DC  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7704  09DD  1D03               	btfss	3,2
  7705  09DE  29F2               	goto	l2618
  7706                           
  7707                           ;FMCW.c: 84: {
  7708                           ;FMCW.c: 85: PORTDbits.RD1 = 1;
  7709  09DF  1283               	bcf	3,5	;RP0=0, select bank0
  7710  09E0  1303               	bcf	3,6	;RP1=0, select bank0
  7711  09E1  1488               	bsf	8,1	;volatile
  7712                           
  7713                           ;FMCW.c: 86: _NOP();
  7714  09E2  160A  118A  27D2  120A  158A  	fcall	__NOP
  7715                           
  7716                           ;FMCW.c: 87: PORTDbits.RD2 = 1;
  7717  09E7  1283               	bcf	3,5	;RP0=0, select bank0
  7718  09E8  1303               	bcf	3,6	;RP1=0, select bank0
  7719  09E9  1508               	bsf	8,2	;volatile
  7720                           
  7721                           ;FMCW.c: 88: _NOP();
  7722  09EA  160A  118A  27D2  120A  158A  	fcall	__NOP
  7723                           
  7724                           ;FMCW.c: 89: PORTDbits.RD2 = 0;
  7725  09EF  1283               	bcf	3,5	;RP0=0, select bank0
  7726  09F0  1303               	bcf	3,6	;RP1=0, select bank0
  7727  09F1  1108               	bcf	8,2	;volatile
  7728  09F2                     l2618:	
  7729                           
  7730                           ;FMCW.c: 90: }
  7731                           ;FMCW.c: 91: if(fmcwtxrx == 3)
  7732  09F2  3003               	movlw	3
  7733  09F3  0672               	xorwf	H_OUT@fmcwtxrx,w
  7734  09F4  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7735  09F5  1D03               	btfss	3,2
  7736  09F6  0008               	return
  7737                           
  7738                           ;FMCW.c: 92: {
  7739                           ;FMCW.c: 93: PORTAbits.RA3 = 1;
  7740  09F7  1283               	bcf	3,5	;RP0=0, select bank0
  7741  09F8  1303               	bcf	3,6	;RP1=0, select bank0
  7742  09F9  1585               	bsf	5,3	;volatile
  7743                           
  7744                           ;FMCW.c: 94: _NOP();
  7745  09FA  160A  118A  27D2  120A  158A  	fcall	__NOP
  7746                           
  7747                           ;FMCW.c: 95: PORTAbits.RA2 = 1;
  7748  09FF  1283               	bcf	3,5	;RP0=0, select bank0
  7749  0A00  1303               	bcf	3,6	;RP1=0, select bank0
  7750  0A01  1505               	bsf	5,2	;volatile
  7751                           
  7752                           ;FMCW.c: 96: _NOP();
  7753  0A02  160A  118A  27D2   	fcall	__NOP
  7754                           
  7755                           ;FMCW.c: 97: PORTAbits.RA2 = 0;
  7756  0A05  1283               	bcf	3,5	;RP0=0, select bank0
  7757  0A06  1303               	bcf	3,6	;RP1=0, select bank0
  7758  0A07  1105               	bcf	5,2	;volatile
  7759  0A08  0008               	return
  7760  0A09                     __end_of_H_OUT:	
  7761                           
  7762                           	psect	text30
  7763  17D2                     __ptext30:	
  7764 ;; *************** function __NOP *****************
  7765 ;; Defined at:
  7766 ;;		line 349 in file "FMCW.c"
  7767 ;; Parameters:    Size  Location     Type
  7768 ;;		None
  7769 ;; Auto vars:     Size  Location     Type
  7770 ;;  i               2    0[COMMON] int 
  7771 ;; Return value:  Size  Location     Type
  7772 ;;                  1    wreg      void 
  7773 ;; Registers used:
  7774 ;;		wreg, status,2, btemp+1
  7775 ;; Tracked objects:
  7776 ;;		On entry : 0/0
  7777 ;;		On exit  : 0/0
  7778 ;;		Unchanged: 0/0
  7779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7780 ;;      Params:         0       0       0       0       0
  7781 ;;      Locals:         2       0       0       0       0
  7782 ;;      Temps:          0       0       0       0       0
  7783 ;;      Totals:         2       0       0       0       0
  7784 ;;Total ram usage:        2 bytes
  7785 ;; Hardware stack levels used:    1
  7786 ;; This function calls:
  7787 ;;		Nothing
  7788 ;; This function is called by:
  7789 ;;		_L_OUT
  7790 ;;		_H_OUT
  7791 ;;		_STBOUT
  7792 ;; This function uses a non-reentrant model
  7793 ;;
  7794                           
  7795                           
  7796                           ;psect for function __NOP
  7797  17D2                     __NOP:	
  7798                           
  7799                           ;FMCW.c: 350: for(int i=0; i<5; i++){
  7800                           
  7801                           ;incstack = 0
  7802                           ; Regs used in __NOP: [wreg+status,2+btemp+1]
  7803  17D2  01F0               	clrf	__NOP@i
  7804  17D3  01F1               	clrf	__NOP@i+1
  7805  17D4                     L9:	
  7806  17D4  0871               	movf	__NOP@i+1,w
  7807  17D5  3A80               	xorlw	128
  7808  17D6  00FF               	movwf	127
  7809  17D7  3080               	movlw	128
  7810  17D8  027F               	subwf	127,w
  7811  17D9  1D03               	skipz
  7812  17DA  2FDD               	goto	u1845
  7813  17DB  3005               	movlw	5
  7814  17DC  0270               	subwf	__NOP@i,w
  7815  17DD                     u1845:	
  7816  17DD  1803               	btfsc	3,0
  7817  17DE  0008               	return
  7818                           
  7819                           ;FMCW.c: 351: __nop();
  7820  17DF  0000               	nop
  7821  17E0  3001               	movlw	1
  7822  17E1  07F0               	addwf	__NOP@i,f
  7823  17E2  1803               	skipnc
  7824  17E3  0AF1               	incf	__NOP@i+1,f
  7825  17E4  3000               	movlw	0
  7826  17E5  07F1               	addwf	__NOP@i+1,f
  7827  17E6  2FD4               	goto	L9
  7828  17E7                     __end_of__NOP:	
  7829  007E                     btemp	set	126	;btemp
  7830  007E                     wtemp	set	126
  7831  007E                     wtemp0	set	126
  7832  0080                     wtemp1	set	128
  7833  0082                     wtemp2	set	130
  7834  0084                     wtemp3	set	132
  7835  0086                     wtemp4	set	134
  7836  0088                     wtemp5	set	136
  7837  007F                     wtemp6	set	127
  7838  007E                     ttemp	set	126
  7839  007E                     ttemp0	set	126
  7840  0081                     ttemp1	set	129
  7841  0084                     ttemp2	set	132
  7842  0087                     ttemp3	set	135
  7843  007F                     ttemp4	set	127
  7844  007E                     ltemp	set	126
  7845  007E                     ltemp0	set	126
  7846  0082                     ltemp1	set	130
  7847  0086                     ltemp2	set	134
  7848  0080                     ltemp3	set	128


Data Sizes:
    Strings     26
    Constant    0
    Data        94
    BSS         137
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      80
    BANK1            80     36      78
    BANK3            96      0      90
    BANK2            96      0      89

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 0
		 -> main@EPS_kill(BANK1[0]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_15(CODE[5]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_16(CODE[7]), main@EPS_kill_1(BANK1[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 0
		 -> main@EPS_kill(BANK1[0]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMMON[2]), 

    FMRX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), FMRX_Nprg(BANK3[10]), 

    CWTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@CWTX_Nprg(BANK1[10]), CWTX_Nprg(BANK1[10]), 

    FMTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    OUTFQ@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), main@CWTX_Nprg(BANK1[10]), main@FMTX_Nprg(BANK1[10]), 
		 -> FMRX_Nprg(BANK3[10]), CWTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    sp__EEPROM_Read	PTR unsigned char  size(1) Largest target is 32
		 -> EEPROMData(BANK2[32]), 

    EEPROM_Write@data	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 

    main@dData	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 

    sp__ReceivePacket_data	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 


Critical Paths under _main in COMMON

    _ReceivePacket_data->_fcscheck
    _ReceivePacket_data->_waitFlag
    _waitFlag->_getbit
    _getdata->_getbit
    _NM_waddress->_putch
    _Init_I2C_M->___lldiv
    _FMTX->_OUTFQ
    _FMTX->_RFDOUT
    _FMRX->_OUTFQ
    _FMRX->_RFDOUT
    _EEPROM_Write->_I2C_Master_Write
    _CWTX->_OUTFQ
    _CWTX->_RFDOUT
    _RFDOUT->___awdiv
    _OUTFQ->___awdiv
    _OPINIT->_H_OUT
    _OPINIT->_L_OUT
    _OPINIT->_STBOUT
    _STBOUT->__NOP
    _L_OUT->__NOP
    _H_OUT->__NOP

Critical Paths under _main in BANK0

    _main->_CWTX
    _main->_FMRX
    _main->_FMTX
    _ReceivePacket_data->_waitFlag
    _FMTX->_OUTFQ
    _FMRX->_OUTFQ
    _CWTX->_OUTFQ

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                40    40      0   33596
                                             66 BANK0      4     4      0
                                              0 BANK1     36    36      0
                               _CWTX
                       _EEPROM_Write
                               _FMRX
                               _FMTX
                         _Init_I2C_M
                           _Init_MPU
                        _Init_SERIAL
                        _NM_waddress
                 _ReceivePacket_data
                          _Reset_EPS
                            _sprintf
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     4      2     171
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6     427
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (1) _Reset_EPS                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ReceivePacket_data                                   6     6      0    2669
                                             10 COMMON     2     2      0
                                             29 BANK0      4     4      0
                           _fcscheck
                            _getdata
                           _waitFlag
 ---------------------------------------------------------------------------------
 (2) _waitFlag                                            33    33      0    2205
                                              6 COMMON     4     4      0
                                              0 BANK0     29    29      0
                             _getbit
 ---------------------------------------------------------------------------------
 (2) _getdata                                             10    10      0     212
                                              6 COMMON     2     2      0
                                              0 BANK0      7     7      0
                             _getbit
 ---------------------------------------------------------------------------------
 (3) _getbit                                               6     4      2      46
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _fcscheck                                            10     8      2     161
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (1) _NM_waddress                                          3     1      2     194
                                              1 COMMON     3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_SERIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_MPU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_I2C_M                                           8     4      4     343
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _FMTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _FMRX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         8     5      3     739
                                              2 COMMON     8     5      3
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     446
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CWTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (2) _RFDOUT                                              37    33      4    3231
                                              9 COMMON     4     0      4
                                              0 BANK0     33    33      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _OUTFQ                                               64    60      4    3853
                                              9 COMMON     4     0      4
                                              0 BANK0     60    60      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _OPINIT                                               2     0      2    2075
                                              4 COMMON     2     0      2
                              _H_OUT
                              _L_OUT
                             _STBOUT
 ---------------------------------------------------------------------------------
 (3) _STBOUT                                               2     0      2     271
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _L_OUT                                                2     0      2     801
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _H_OUT                                                2     0      2     536
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (4) __NOP                                                 2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CWTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _EEPROM_Write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _FMRX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _FMTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _Init_I2C_M
     ___lldiv
   _Init_MPU
   _Init_SERIAL
   _NM_waddress
     _putch
   _ReceivePacket_data
     _fcscheck
     _getdata
       _getbit
     _waitFlag
       _getbit
   _Reset_EPS
   _sprintf
   _strcmp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      5A       9       93.8%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      59      11       92.7%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     24      4E       7       97.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     46      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     15F      12        0.0%
ABS                  0      0     15F       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Nov 22 17:30:57 2017

                           pc 0002                   __CFG_CP$OFF 0000                            l56 1797  
                ___awdiv@sign 0076                            fsr 0004                           l263 0D44  
                         l198 0566                           l471 17A6                           _RA1 0029  
                         _RB2 0032                           _RC2 003A                           _RB4 0034  
                         _RB5 0035                           _PEN 048A                  __CFG_CPD$OFF 0000  
                         _SEN 0488                           _RX9 00C6                           _TX9 04C6  
                         fsr0 0004                           indf 0000                  __CFG_FOSC$HS 0000  
                __CFG_LVP$OFF 0000                          l3100 0C39                          l3020 0706  
                        l3004 06CB                          l3030 0721                          l3104 0C44  
                        l3008 06D8                          l3114 0C08                          l3034 072E  
                        l3140 0D3D                          l3060 0784                          l3222 0293  
                        l3206 0160                          l3230 02B7                          l3134 0D29  
                        l3142 0CEB                          l3046 075C                          l3240 02E0  
                        l3216 0205                          l3208 019D                          l3304 0BB1  
                        l3128 0D0C                          l3056 0777                          l3080 032F  
                        l3218 020C                          l3226 02A4                          l3314 0BE9  
                        l3306 0BC1                          l3154 0D5C                          l3244 02FA  
                        l3236 02C6                          l3190 00E8                          l3262 0D8A  
                        l3318 0BF6                          l3094 0C28                          l3078 07B0  
                        l2608 09DA                          l3248 030D                          l3184 00D9  
                        l3256 0D6E                          l2560 0A96                          l3096 0C2B  
                        l3512 0025                          l2618 09F2                          l3178 00BD  
                        l3290 0E13                          l3282 0DDF                          l2802 0464  
                        l2722 035E                          l2714 0336                          l2644 0980  
                        l2636 0970                          l2660 0AF5                          l3196 00F7  
                        l3276 0DD0                          l3268 0D99                          l2812 047F  
                        l2732 0379                          l2716 0355                          l3532 006D  
                        l3540 007A                          l3286 0DF9                          l3294 0E26  
                        l2558 0A89                          l2902 058A                          l2750 03B8  
                        l3526 0037                          l3542 00A5                          l3550 08BE  
                        l2816 048C                          l2760 03D3                          l2736 0386  
                        l3528 0063                          l2578 0A20                          l2666 0B00  
                        l2930 05D6                          l2906 0597                          l2842 04E2  
                        l3386 0ABC                          l3554 08D7                          l2588 0A38  
                        l2692 0B3F                          l2684 0B2C                          l2676 0B08  
                        l2916 05AE                          l2828 04BA                          l2764 03E0  
                        l3388 0ADF                          l3396 0AE5                          l3548 08B4  
                        l2678 0B16                          l2942 0604                          l2926 05C9  
                        l2854 0510                          l2838 04D5                          l2790 0436  
                        l2688 0B37                          l3496 0B74                          l2952 061F  
                        l2864 052B                          l2776 040E                          l3498 0B8E  
                        l2786 0429                          l3818 0EBA                          l2956 062C  
                        l2892 056F                          l2868 0538                          l2982 0682  
                        l2886 0564                          l3862 0FF0                          l2968 065A  
                        l2994 06B0                          l2978 0675                          STR_1 081E  
                        STR_2 081E                          STR_3 081E                          STR_4 081E  
                        STR_5 081E                          STR_6 081E                          STR_7 0817  
                        STR_8 0817                          STR_9 0817                          _BRGH 04C2  
                        _CREN 00C4                          u2035 0B0B                          u2055 0B17  
                        u3015 0BB5                          u2215 03F5                          u2065 0B23  
                        u2075 0B2D                          u3035 0BC3                          u3045 0BD8  
                        u3055 0BEA                          u2335 04F7                          u2255 044B  
                        u2175 039F                          u3155 09A1                          u2605 0743  
                        u2525 0697                          u2445 05EB                          u3085 0ACA  
                        u2375 054D                          u2295 04A1                          _FMRX 0909  
                        u3530 0F68                          u3540 0F7E                          _FMTX 0935  
                        u1845 17DD                          u2805 00E6                          u2645 0799  
                        u2565 06ED                          u2485 0641                          u3550 0F94  
                        u2815 00F5                          u3607 0ECF                          u2745 0CF9  
                        u3617 0F40                          u2915 030B                          u1875 0A79  
                        u3627 0F57                          u2925 0D6C                          u3637 0FE9  
                        u2935 0D88                          u3647 0FF8                          u2865 02A2  
                        u2785 00BB                          u2945 0D97                          u3657 0871  
                        u2875 02B5                          u2795 00D7                          u2955 0DCE  
                        u3667 0882                          u3587 0E48                          _RCIE 0465  
                        _RCEN 048B                          _RCIF 0065                          _CWTX 08DD  
                        u2885 02C4                          u2965 0DDD                          u3677 0A7D  
                        u3597 0E71                          u3687 0B99                          u2995 0E24  
                        _SPEN 00C7                          _RSEN 0489                          _SREN 00C5  
                        _TXIE 0464                          _TXEN 04C5                          _TXIF 0064  
                        _SYNC 04C4                          __NOP 17D2                  __CFG_WRT$OFF 0000  
                        _main 0E40                   _NM_waddress 17C0                 ??_Init_SERIAL 0070  
                        btemp 007E                          ltemp 007E                  getbit@oldbit 00EC  
                 Init_I2C_M@c 0020                          start 0000  ReceivePacket_data@fcschecker 003D  
                        ttemp 007E                          wtemp 007E                 __CFG_IESO$OFF 0000  
               __CFG_MCLRE$ON 0000          __end_of_EEPROM_Write 0BA1                         ?_FMRX 005C  
                       ?_FMTX 005C                         ?_CWTX 005C              ?_I2C_Master_Wait 0070  
            ?_I2C_Master_Stop 0070                         ?__NOP 0070                         ?_main 0070  
                       _ACKEN 048C                         _ACKDT 048D               __end_of___awdiv 0B44  
                       STR_10 0817                         STR_11 0817                         STR_12 0817  
                       STR_15 0825                         STR_16 0810                 __CFG_WDTE$OFF 0000  
                       _ANSEL 0188               __end_of___lldiv 0BFF               ___awdiv@divisor 0070  
             ___awdiv@counter 0075                         _RCREG 001A                         _SPBRG 0099  
                       _PORTA 0005                         _PORTB 0006                         _PORTC 0007  
                       _PORTD 0008                         _PORTE 0009                         _H_OUT 09C3  
                       _OUTFQ 00AC                         _TRISA 0085                         _TRISB 0086  
                       _TRISC 0087                         _TRISD 0088                         _TRISE 0089  
                       _L_OUT 0A09                         _TXREG 0019                 __CFG_PWRTE$ON 0000  
              __CFG_FCMEN$OFF 0000                         _dData 0130               __end_of_getdata 0C60  
                       _eflag 0068                 getdata@dstuff 0022                         _putch 1796  
              __CFG_BOREN$OFF 0000                         pclath 000A                         ltemp0 007E  
                       ltemp1 0082                         ltemp2 0086                         ltemp3 0080  
                       ttemp0 007E                         ttemp1 0081                         ttemp2 0084  
                       ttemp3 0087                         ttemp4 007F                         status 0003  
                       wtemp0 007E                         wtemp1 0080                         wtemp2 0082  
                       wtemp3 0084                         wtemp4 0086                         wtemp5 0088  
                       wtemp6 007F               __end_of_sprintf 00AC                    _Init_I2C_M 098F  
            EEPROM_Write@data 0074    __end_of_ReceivePacket_data 0AEB                  __end_of_FMRX 0935  
                __end_of_FMTX 0961                  __end_of_CWTX 0909                  __end_of__NOP 17E7  
             __initialization 07B3                  __end_of_main 1000           __end_of_Init_SERIAL 1800  
            __end_of_Init_MPU 0867                        ??_FMRX 007D                        ??_FMTX 007D  
                      ??_CWTX 007D                        ??__NOP 0070                        ??_main 0062  
                      ?_H_OUT 0072      EEPROM_Write@high_address 0072                        ?_OUTFQ 0079  
                      ?_L_OUT 0072             ?_I2C_Master_Start 0070             ?_I2C_Master_Write 0070  
                      OUTFQ@i 0056            ??_I2C_Master_Start 0070                        OUTFQ@j 005A  
          ??_I2C_Master_Write 0072              ___awdiv@dividend 0072                    _eDataField 0150  
                      ?_putch 0070                        _ANSELH 0189                        _RFDOUT 0D5F  
                      _OPINIT 0C60                        _SSPADD 0093                        _STBOUT 0961  
                      _STATUS 0003                        _SSPCON 0014                        _SSPBUF 0013  
                      __NOP@i 0070              __end_of_fcscheck 0D5F                     ??___awdiv 0074  
                      _dfcshi 006C                     ??___lldiv 0078                        _dfcslo 006D  
                      _efcshi 006E                        _efcslo 006F                        _getbit 0A4F  
          __size_of_Reset_EPS 0023                        _estuff 00EA              ___awdiv@quotient 0077  
                  _dPacketnum 0066                     ??_getdata 0076                        _strcmp 08B2  
                 RFDOUT@i_480 003F                   RFDOUT@i_479 003B              __end_of_waitFlag 07B3  
                   ??_sprintf 0076    EEPROM_Write@EEPROM_address 0078       __end_of__initialization 07FC  
     EEPROM_Write@low_address 0073                   ?_Init_I2C_M 0020                   _Init_SERIAL 17E7  
       __size_of_EEPROM_Write 005D                 __end_of_H_OUT 0A09                 __end_of_OUTFQ 0327  
               __end_of_L_OUT 0A4F                 L_OUT@fmcwtxrx 0072                __pcstackCOMMON 0070  
                __pidataBANK1 0003                  __pidataBANK2 0831                  __pidataBANK3 088A  
               __end_of_putch 179E                       ??_H_OUT 0074                       ??_OUTFQ 0020  
                     ??_L_OUT 0074                       ??_putch 0070                  _EEPROM_Write 0B44  
                  __pbssBANK0 0066                    __pbssBANK1 00E1                    __pbssBANK2 0110  
                  __pbssBANK3 0190             __end_of_Reset_EPS 088A                     ?_Init_MPU 0070  
                     ?_RFDOUT 0079                       ?_OPINIT 0074                  ?_NM_waddress 0071  
                     ?_STBOUT 0072                       RFDOUT@i 003D                    __pmaintext 0E40  
                  _ebitstatus 00E6                       ?_getbit 0070                       ?_strcmp 0070  
         __size_of_Init_I2C_M 0034                     OUTFQ@Nprg 007B                     ?_fcscheck 0070  
                     _SSPCON2 0091                       _SSPSTAT 0094                    __stringtab 0800  
                  ??_Init_MPU 0070               __size_of_RFDOUT 00E1               __size_of_OPINIT 007D  
             __size_of_STBOUT 002E                     ?_waitFlag 0070                       _dPacket 0190  
                     _ePacket 00E1                       ___awdiv 0AEB                       ___lldiv 0BA1  
             __size_of_getbit 004C                   waitFlag@buf 003C                       __ptext1 08B2  
                     __ptext2 0020                       __ptext3 0867                       __ptext4 0A9B  
                     __ptext5 0327                       __ptext6 0BFF                       __ptext7 0A4F  
                     __ptext8 0CDD                       __ptext9 17C0                       _getdata 0BFF  
          _ReceivePacket_data 0A9B               __size_of_strcmp 002B      __size_of_I2C_Master_Wait 0009  
    __size_of_I2C_Master_Stop 0007                    ??_fcscheck 0072           ?_ReceivePacket_data 0070  
                     getbit@i 0074                       _sprintf 0020                       clrloop0 179F  
        end_of_initialization 07FC                  RFDOUT@Nref_b 0023                     _FMRX_Nref 00C9  
                   _FMRX_Nprg 01E0                     _FMTX_Nref 00CB                     _FMTX_Nprg 00D7  
                   _CWTX_Nref 00C7                     _CWTX_Nprg 00CD                   OUTFQ@Nprg_b 0030  
   __size_of_I2C_Master_Start 0007     __size_of_I2C_Master_Write 0008               ___lldiv@divisor 0070  
             ___lldiv@counter 007D                    ??_waitFlag 0076          ??_ReceivePacket_data 007A  
                  fcscheck@bt 0074                OPINIT@fmcwtxrx 0074                       strcmp@r 0074  
                   _PORTAbits 0005                     _PORTCbits 0007                     _PORTDbits 0008  
                   _PORTEbits 0009                    getdata@buf 0026                  ??_Init_I2C_M 0024  
                ?_Init_SERIAL 0070                __end_of_RFDOUT 0E40                __end_of_OPINIT 0CDD  
              __end_of_STBOUT 098F          __size_of_NM_waddress 0012                __end_of_getbit 0A9B  
              __end_of_strcmp 08DD           start_initialization 07B3            __end_of_Init_I2C_M 09C3  
                    ??_RFDOUT 0020                      ??_OPINIT 0076             ??_I2C_Master_Wait 0070  
           ??_I2C_Master_Stop 0070                      ??_STBOUT 0074             __size_of_Init_MPU 001D  
                   _Reset_EPS 0867             getdata@dbitstatus 0024                    init_fetch0 17AF  
                    ??_getbit 0072                   __pdataBANK1 00C4                   __pdataBANK2 0150  
                 __pdataBANK3 01C2                    RFDOUT@Nref 007B                      ??_strcmp 0072  
    NM_waddress@whigh_address 0071                     ___latbits 0002                 __pcstackBANK0 0020  
               __pcstackBANK1 00A0                      FMRX@Nref 005C                      FMRX@Nprg 005E  
                    FMTX@Nref 005C                      FMTX@Nprg 005E                      FMRX@fmrx 0060  
                    FMTX@fmtx 0060                      CWTX@Nref 005C                      CWTX@Nprg 005E  
           __size_of_fcscheck 0082                 waitFlag@j_111 002A                 waitFlag@j_120 0034  
               waitFlag@j_113 002C                 waitFlag@j_105 0024                 waitFlag@j_122 0036  
               waitFlag@j_114 002E                 waitFlag@j_107 0026                 waitFlag@j_124 0038  
               waitFlag@j_116 0030                 waitFlag@j_109 0028                 waitFlag@j_118 0032  
                    CWTX@cwtx 0060                   sprintf@flag 0077              _I2C_Master_Start 1787  
                  ?_Reset_EPS 0070              _I2C_Master_Write 178E       getdata@bufstore_counter 0020  
                    ?___awdiv 0070                      ?___lldiv 0070             __size_of_waitFlag 048C  
                   __pstrings 0800                      ?_getdata 0070                __size_of_H_OUT 0046  
              __size_of_OUTFQ 027B                __size_of_L_OUT 0046                      ?_sprintf 0070  
              __size_of_putch 0008                 H_OUT@fmcwtxrx 0072                     clear_ram0 179E  
                  OUTFQ@i_470 0058                    OUTFQ@i_468 0052                     _rcv_state 006A  
        __size_of_Init_SERIAL 0019                    OUTFQ@count 0054                     fcscheck@i 0075  
                   main@F2010 01C2                     main@F2012 01CC                     main@F2005 00C4  
                   main@F2014 01D6                   __stringbase 080F                     main@dData 00C3  
                    _Init_MPU 084A                   ??_Reset_EPS 0070                 fcscheck@i_136 0077  
 __size_of_ReceivePacket_data 0050              __size_of___awdiv 0059              __size_of___lldiv 005E  
          __end_of__stringtab 0810                    _EEPROMData 0110              __size_of_getdata 0061  
             _I2C_Master_Wait 17A6               _I2C_Master_Stop 082A                RFDOUT@fmcwtxrx 0079  
                    _efcsflag 00E8                      _fcscheck 0CDD                      __ptext10 1796  
                    __ptext11 17E7                      __ptext20 1787                      __ptext12 084A  
                    __ptext21 17A6                      __ptext13 098F                      __ptext30 17D2  
                    __ptext22 08DD                      __ptext14 0BA1                      __ptext23 0D5F  
                    __ptext15 0935                      __ptext24 00AC                      __ptext16 0909  
                    __ptext25 0AEB                      __ptext17 0B44                      __ptext26 0C60  
                    __ptext18 178E                      __ptext27 0961                      __ptext19 082A  
                    __ptext28 0A09                      __ptext29 09C3             __CFG_BOR4V$BOR40V 0000  
               ?_EEPROM_Write 0072              __size_of_sprintf 008C                 __size_of_FMRX 002C  
               __size_of_FMTX 002C                 __size_of_CWTX 002C                 __size_of__NOP 0015  
               ??_NM_waddress 0073                     waitFlag@i 0020                     waitFlag@j 0022  
               __size_of_main 01C0                STBOUT@fmcwtxrx 0072                      _waitFlag 0327  
    NM_waddress@NM_wad_header 0073                 OUTFQ@fmcwtxrx 0079                main@EPS_kill_1 00A0  
              main@EPS_kill_2 00C2      __end_of_I2C_Master_Start 178E                     putch@byte 0070  
    __end_of_I2C_Master_Write 1796                      init_ram0 17B3                  fcscheck@byte 0079  
              ??_EEPROM_Write 0075            waitFlag@flag_judge 003A                     sprintf@ap 0078  
                   sprintf@cp 0079                     sprintf@sp 0070              ___lldiv@dividend 0074  
                   stringcode 080A                 main@FMRX_Nprg 00B7             main@NM_wad_header 00C1  
               main@FMTX_Nprg 00A3           __end_of_NM_waddress 17D2                 main@CWTX_Nprg 00AD  
     __end_of_I2C_Master_Wait 17AF       __end_of_I2C_Master_Stop 0831                      sprintf@c 007B  
                    sprintf@f 0072                      strcmp@s1 0075                      strcmp@s2 0070  
            ___lldiv@quotient 0079             I2C_Master_Write@d 0070           EEPROM_Write@Address 0079  
                    stringdir 080A                      stringtab 0800           ReceivePacket_data@i 003F  
                main@EPS_kill 00A0       NM_waddress@wlow_address 0072  
