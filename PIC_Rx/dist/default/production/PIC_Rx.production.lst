

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Feb 24 21:52:17 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	dabs	1,0x7E,2
    52  0000                     
    53                           ; Version 1.45
    54                           ; Generated 16/11/2017 GMT
    55                           ; 
    56                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC16F887 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     	;# 
    88  0001                     	;# 
    89  0002                     	;# 
    90  0003                     	;# 
    91  0004                     	;# 
    92  0005                     	;# 
    93  0006                     	;# 
    94  0007                     	;# 
    95  0008                     	;# 
    96  0009                     	;# 
    97  000A                     	;# 
    98  000B                     	;# 
    99  000C                     	;# 
   100  000D                     	;# 
   101  000E                     	;# 
   102  000E                     	;# 
   103  000F                     	;# 
   104  0010                     	;# 
   105  0011                     	;# 
   106  0012                     	;# 
   107  0013                     	;# 
   108  0014                     	;# 
   109  0015                     	;# 
   110  0015                     	;# 
   111  0016                     	;# 
   112  0017                     	;# 
   113  0018                     	;# 
   114  0019                     	;# 
   115  001A                     	;# 
   116  001B                     	;# 
   117  001B                     	;# 
   118  001C                     	;# 
   119  001D                     	;# 
   120  001E                     	;# 
   121  001F                     	;# 
   122  0081                     	;# 
   123  0085                     	;# 
   124  0086                     	;# 
   125  0087                     	;# 
   126  0088                     	;# 
   127  0089                     	;# 
   128  008C                     	;# 
   129  008D                     	;# 
   130  008E                     	;# 
   131  008F                     	;# 
   132  0090                     	;# 
   133  0091                     	;# 
   134  0092                     	;# 
   135  0093                     	;# 
   136  0093                     	;# 
   137  0093                     	;# 
   138  0094                     	;# 
   139  0095                     	;# 
   140  0096                     	;# 
   141  0097                     	;# 
   142  0098                     	;# 
   143  0099                     	;# 
   144  009A                     	;# 
   145  009B                     	;# 
   146  009C                     	;# 
   147  009D                     	;# 
   148  009E                     	;# 
   149  009F                     	;# 
   150  0105                     	;# 
   151  0107                     	;# 
   152  0108                     	;# 
   153  0109                     	;# 
   154  010C                     	;# 
   155  010C                     	;# 
   156  010D                     	;# 
   157  010E                     	;# 
   158  010F                     	;# 
   159  0185                     	;# 
   160  0187                     	;# 
   161  0188                     	;# 
   162  0189                     	;# 
   163  018C                     	;# 
   164  018D                     	;# 
   165  0000                     	;# 
   166  0001                     	;# 
   167  0002                     	;# 
   168  0003                     	;# 
   169  0004                     	;# 
   170  0005                     	;# 
   171  0006                     	;# 
   172  0007                     	;# 
   173  0008                     	;# 
   174  0009                     	;# 
   175  000A                     	;# 
   176  000B                     	;# 
   177  000C                     	;# 
   178  000D                     	;# 
   179  000E                     	;# 
   180  000E                     	;# 
   181  000F                     	;# 
   182  0010                     	;# 
   183  0011                     	;# 
   184  0012                     	;# 
   185  0013                     	;# 
   186  0014                     	;# 
   187  0015                     	;# 
   188  0015                     	;# 
   189  0016                     	;# 
   190  0017                     	;# 
   191  0018                     	;# 
   192  0019                     	;# 
   193  001A                     	;# 
   194  001B                     	;# 
   195  001B                     	;# 
   196  001C                     	;# 
   197  001D                     	;# 
   198  001E                     	;# 
   199  001F                     	;# 
   200  0081                     	;# 
   201  0085                     	;# 
   202  0086                     	;# 
   203  0087                     	;# 
   204  0088                     	;# 
   205  0089                     	;# 
   206  008C                     	;# 
   207  008D                     	;# 
   208  008E                     	;# 
   209  008F                     	;# 
   210  0090                     	;# 
   211  0091                     	;# 
   212  0092                     	;# 
   213  0093                     	;# 
   214  0093                     	;# 
   215  0093                     	;# 
   216  0094                     	;# 
   217  0095                     	;# 
   218  0096                     	;# 
   219  0097                     	;# 
   220  0098                     	;# 
   221  0099                     	;# 
   222  009A                     	;# 
   223  009B                     	;# 
   224  009C                     	;# 
   225  009D                     	;# 
   226  009E                     	;# 
   227  009F                     	;# 
   228  0105                     	;# 
   229  0107                     	;# 
   230  0108                     	;# 
   231  0109                     	;# 
   232  010C                     	;# 
   233  010C                     	;# 
   234  010D                     	;# 
   235  010E                     	;# 
   236  010F                     	;# 
   237  0185                     	;# 
   238  0187                     	;# 
   239  0188                     	;# 
   240  0189                     	;# 
   241  018C                     	;# 
   242  018D                     	;# 
   243  0000                     	;# 
   244  0001                     	;# 
   245  0002                     	;# 
   246  0003                     	;# 
   247  0004                     	;# 
   248  0005                     	;# 
   249  0006                     	;# 
   250  0007                     	;# 
   251  0008                     	;# 
   252  0009                     	;# 
   253  000A                     	;# 
   254  000B                     	;# 
   255  000C                     	;# 
   256  000D                     	;# 
   257  000E                     	;# 
   258  000E                     	;# 
   259  000F                     	;# 
   260  0010                     	;# 
   261  0011                     	;# 
   262  0012                     	;# 
   263  0013                     	;# 
   264  0014                     	;# 
   265  0015                     	;# 
   266  0015                     	;# 
   267  0016                     	;# 
   268  0017                     	;# 
   269  0018                     	;# 
   270  0019                     	;# 
   271  001A                     	;# 
   272  001B                     	;# 
   273  001B                     	;# 
   274  001C                     	;# 
   275  001D                     	;# 
   276  001E                     	;# 
   277  001F                     	;# 
   278  0081                     	;# 
   279  0085                     	;# 
   280  0086                     	;# 
   281  0087                     	;# 
   282  0088                     	;# 
   283  0089                     	;# 
   284  008C                     	;# 
   285  008D                     	;# 
   286  008E                     	;# 
   287  008F                     	;# 
   288  0090                     	;# 
   289  0091                     	;# 
   290  0092                     	;# 
   291  0093                     	;# 
   292  0093                     	;# 
   293  0093                     	;# 
   294  0094                     	;# 
   295  0095                     	;# 
   296  0096                     	;# 
   297  0097                     	;# 
   298  0098                     	;# 
   299  0099                     	;# 
   300  009A                     	;# 
   301  009B                     	;# 
   302  009C                     	;# 
   303  009D                     	;# 
   304  009E                     	;# 
   305  009F                     	;# 
   306  0105                     	;# 
   307  0107                     	;# 
   308  0108                     	;# 
   309  0109                     	;# 
   310  010C                     	;# 
   311  010C                     	;# 
   312  010D                     	;# 
   313  010E                     	;# 
   314  010F                     	;# 
   315  0185                     	;# 
   316  0187                     	;# 
   317  0188                     	;# 
   318  0189                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  0000                     	;# 
   322  0001                     	;# 
   323  0002                     	;# 
   324  0003                     	;# 
   325  0004                     	;# 
   326  0005                     	;# 
   327  0006                     	;# 
   328  0007                     	;# 
   329  0008                     	;# 
   330  0009                     	;# 
   331  000A                     	;# 
   332  000B                     	;# 
   333  000C                     	;# 
   334  000D                     	;# 
   335  000E                     	;# 
   336  000E                     	;# 
   337  000F                     	;# 
   338  0010                     	;# 
   339  0011                     	;# 
   340  0012                     	;# 
   341  0013                     	;# 
   342  0014                     	;# 
   343  0015                     	;# 
   344  0015                     	;# 
   345  0016                     	;# 
   346  0017                     	;# 
   347  0018                     	;# 
   348  0019                     	;# 
   349  001A                     	;# 
   350  001B                     	;# 
   351  001B                     	;# 
   352  001C                     	;# 
   353  001D                     	;# 
   354  001E                     	;# 
   355  001F                     	;# 
   356  0081                     	;# 
   357  0085                     	;# 
   358  0086                     	;# 
   359  0087                     	;# 
   360  0088                     	;# 
   361  0089                     	;# 
   362  008C                     	;# 
   363  008D                     	;# 
   364  008E                     	;# 
   365  008F                     	;# 
   366  0090                     	;# 
   367  0091                     	;# 
   368  0092                     	;# 
   369  0093                     	;# 
   370  0093                     	;# 
   371  0093                     	;# 
   372  0094                     	;# 
   373  0095                     	;# 
   374  0096                     	;# 
   375  0097                     	;# 
   376  0098                     	;# 
   377  0099                     	;# 
   378  009A                     	;# 
   379  009B                     	;# 
   380  009C                     	;# 
   381  009D                     	;# 
   382  009E                     	;# 
   383  009F                     	;# 
   384  0105                     	;# 
   385  0107                     	;# 
   386  0108                     	;# 
   387  0109                     	;# 
   388  010C                     	;# 
   389  010C                     	;# 
   390  010D                     	;# 
   391  010E                     	;# 
   392  010F                     	;# 
   393  0185                     	;# 
   394  0187                     	;# 
   395  0188                     	;# 
   396  0189                     	;# 
   397  018C                     	;# 
   398  018D                     	;# 
   399  0000                     	;# 
   400  0001                     	;# 
   401  0002                     	;# 
   402  0003                     	;# 
   403  0004                     	;# 
   404  0005                     	;# 
   405  0006                     	;# 
   406  0007                     	;# 
   407  0008                     	;# 
   408  0009                     	;# 
   409  000A                     	;# 
   410  000B                     	;# 
   411  000C                     	;# 
   412  000D                     	;# 
   413  000E                     	;# 
   414  000E                     	;# 
   415  000F                     	;# 
   416  0010                     	;# 
   417  0011                     	;# 
   418  0012                     	;# 
   419  0013                     	;# 
   420  0014                     	;# 
   421  0015                     	;# 
   422  0015                     	;# 
   423  0016                     	;# 
   424  0017                     	;# 
   425  0018                     	;# 
   426  0019                     	;# 
   427  001A                     	;# 
   428  001B                     	;# 
   429  001B                     	;# 
   430  001C                     	;# 
   431  001D                     	;# 
   432  001E                     	;# 
   433  001F                     	;# 
   434  0081                     	;# 
   435  0085                     	;# 
   436  0086                     	;# 
   437  0087                     	;# 
   438  0088                     	;# 
   439  0089                     	;# 
   440  008C                     	;# 
   441  008D                     	;# 
   442  008E                     	;# 
   443  008F                     	;# 
   444  0090                     	;# 
   445  0091                     	;# 
   446  0092                     	;# 
   447  0093                     	;# 
   448  0093                     	;# 
   449  0093                     	;# 
   450  0094                     	;# 
   451  0095                     	;# 
   452  0096                     	;# 
   453  0097                     	;# 
   454  0098                     	;# 
   455  0099                     	;# 
   456  009A                     	;# 
   457  009B                     	;# 
   458  009C                     	;# 
   459  009D                     	;# 
   460  009E                     	;# 
   461  009F                     	;# 
   462  0105                     	;# 
   463  0107                     	;# 
   464  0108                     	;# 
   465  0109                     	;# 
   466  010C                     	;# 
   467  010C                     	;# 
   468  010D                     	;# 
   469  010E                     	;# 
   470  010F                     	;# 
   471  0185                     	;# 
   472  0187                     	;# 
   473  0188                     	;# 
   474  0189                     	;# 
   475  018C                     	;# 
   476  018D                     	;# 
   477  0000                     	;# 
   478  0001                     	;# 
   479  0002                     	;# 
   480  0003                     	;# 
   481  0004                     	;# 
   482  0005                     	;# 
   483  0006                     	;# 
   484  0007                     	;# 
   485  0008                     	;# 
   486  0009                     	;# 
   487  000A                     	;# 
   488  000B                     	;# 
   489  000C                     	;# 
   490  000D                     	;# 
   491  000E                     	;# 
   492  000E                     	;# 
   493  000F                     	;# 
   494  0010                     	;# 
   495  0011                     	;# 
   496  0012                     	;# 
   497  0013                     	;# 
   498  0014                     	;# 
   499  0015                     	;# 
   500  0015                     	;# 
   501  0016                     	;# 
   502  0017                     	;# 
   503  0018                     	;# 
   504  0019                     	;# 
   505  001A                     	;# 
   506  001B                     	;# 
   507  001B                     	;# 
   508  001C                     	;# 
   509  001D                     	;# 
   510  001E                     	;# 
   511  001F                     	;# 
   512  0081                     	;# 
   513  0085                     	;# 
   514  0086                     	;# 
   515  0087                     	;# 
   516  0088                     	;# 
   517  0089                     	;# 
   518  008C                     	;# 
   519  008D                     	;# 
   520  008E                     	;# 
   521  008F                     	;# 
   522  0090                     	;# 
   523  0091                     	;# 
   524  0092                     	;# 
   525  0093                     	;# 
   526  0093                     	;# 
   527  0093                     	;# 
   528  0094                     	;# 
   529  0095                     	;# 
   530  0096                     	;# 
   531  0097                     	;# 
   532  0098                     	;# 
   533  0099                     	;# 
   534  009A                     	;# 
   535  009B                     	;# 
   536  009C                     	;# 
   537  009D                     	;# 
   538  009E                     	;# 
   539  009F                     	;# 
   540  0105                     	;# 
   541  0107                     	;# 
   542  0108                     	;# 
   543  0109                     	;# 
   544  010C                     	;# 
   545  010C                     	;# 
   546  010D                     	;# 
   547  010E                     	;# 
   548  010F                     	;# 
   549  0185                     	;# 
   550  0187                     	;# 
   551  0188                     	;# 
   552  0189                     	;# 
   553  018C                     	;# 
   554  018D                     	;# 
   555  0000                     	;# 
   556  0001                     	;# 
   557  0002                     	;# 
   558  0003                     	;# 
   559  0004                     	;# 
   560  0005                     	;# 
   561  0006                     	;# 
   562  0007                     	;# 
   563  0008                     	;# 
   564  0009                     	;# 
   565  000A                     	;# 
   566  000B                     	;# 
   567  000C                     	;# 
   568  000D                     	;# 
   569  000E                     	;# 
   570  000E                     	;# 
   571  000F                     	;# 
   572  0010                     	;# 
   573  0011                     	;# 
   574  0012                     	;# 
   575  0013                     	;# 
   576  0014                     	;# 
   577  0015                     	;# 
   578  0015                     	;# 
   579  0016                     	;# 
   580  0017                     	;# 
   581  0018                     	;# 
   582  0019                     	;# 
   583  001A                     	;# 
   584  001B                     	;# 
   585  001B                     	;# 
   586  001C                     	;# 
   587  001D                     	;# 
   588  001E                     	;# 
   589  001F                     	;# 
   590  0081                     	;# 
   591  0085                     	;# 
   592  0086                     	;# 
   593  0087                     	;# 
   594  0088                     	;# 
   595  0089                     	;# 
   596  008C                     	;# 
   597  008D                     	;# 
   598  008E                     	;# 
   599  008F                     	;# 
   600  0090                     	;# 
   601  0091                     	;# 
   602  0092                     	;# 
   603  0093                     	;# 
   604  0093                     	;# 
   605  0093                     	;# 
   606  0094                     	;# 
   607  0095                     	;# 
   608  0096                     	;# 
   609  0097                     	;# 
   610  0098                     	;# 
   611  0099                     	;# 
   612  009A                     	;# 
   613  009B                     	;# 
   614  009C                     	;# 
   615  009D                     	;# 
   616  009E                     	;# 
   617  009F                     	;# 
   618  0105                     	;# 
   619  0107                     	;# 
   620  0108                     	;# 
   621  0109                     	;# 
   622  010C                     	;# 
   623  010C                     	;# 
   624  010D                     	;# 
   625  010E                     	;# 
   626  010F                     	;# 
   627  0185                     	;# 
   628  0187                     	;# 
   629  0188                     	;# 
   630  0189                     	;# 
   631  018C                     	;# 
   632  018D                     	;# 
   633  0000                     	;# 
   634  0001                     	;# 
   635  0002                     	;# 
   636  0003                     	;# 
   637  0004                     	;# 
   638  0005                     	;# 
   639  0006                     	;# 
   640  0007                     	;# 
   641  0008                     	;# 
   642  0009                     	;# 
   643  000A                     	;# 
   644  000B                     	;# 
   645  000C                     	;# 
   646  000D                     	;# 
   647  000E                     	;# 
   648  000E                     	;# 
   649  000F                     	;# 
   650  0010                     	;# 
   651  0011                     	;# 
   652  0012                     	;# 
   653  0013                     	;# 
   654  0014                     	;# 
   655  0015                     	;# 
   656  0015                     	;# 
   657  0016                     	;# 
   658  0017                     	;# 
   659  0018                     	;# 
   660  0019                     	;# 
   661  001A                     	;# 
   662  001B                     	;# 
   663  001B                     	;# 
   664  001C                     	;# 
   665  001D                     	;# 
   666  001E                     	;# 
   667  001F                     	;# 
   668  0081                     	;# 
   669  0085                     	;# 
   670  0086                     	;# 
   671  0087                     	;# 
   672  0088                     	;# 
   673  0089                     	;# 
   674  008C                     	;# 
   675  008D                     	;# 
   676  008E                     	;# 
   677  008F                     	;# 
   678  0090                     	;# 
   679  0091                     	;# 
   680  0092                     	;# 
   681  0093                     	;# 
   682  0093                     	;# 
   683  0093                     	;# 
   684  0094                     	;# 
   685  0095                     	;# 
   686  0096                     	;# 
   687  0097                     	;# 
   688  0098                     	;# 
   689  0099                     	;# 
   690  009A                     	;# 
   691  009B                     	;# 
   692  009C                     	;# 
   693  009D                     	;# 
   694  009E                     	;# 
   695  009F                     	;# 
   696  0105                     	;# 
   697  0107                     	;# 
   698  0108                     	;# 
   699  0109                     	;# 
   700  010C                     	;# 
   701  010C                     	;# 
   702  010D                     	;# 
   703  010E                     	;# 
   704  010F                     	;# 
   705  0185                     	;# 
   706  0187                     	;# 
   707  0188                     	;# 
   708  0189                     	;# 
   709  018C                     	;# 
   710  018D                     	;# 
   711  0000                     	;# 
   712  0001                     	;# 
   713  0002                     	;# 
   714  0003                     	;# 
   715  0004                     	;# 
   716  0005                     	;# 
   717  0006                     	;# 
   718  0007                     	;# 
   719  0008                     	;# 
   720  0009                     	;# 
   721  000A                     	;# 
   722  000B                     	;# 
   723  000C                     	;# 
   724  000D                     	;# 
   725  000E                     	;# 
   726  000E                     	;# 
   727  000F                     	;# 
   728  0010                     	;# 
   729  0011                     	;# 
   730  0012                     	;# 
   731  0013                     	;# 
   732  0014                     	;# 
   733  0015                     	;# 
   734  0015                     	;# 
   735  0016                     	;# 
   736  0017                     	;# 
   737  0018                     	;# 
   738  0019                     	;# 
   739  001A                     	;# 
   740  001B                     	;# 
   741  001B                     	;# 
   742  001C                     	;# 
   743  001D                     	;# 
   744  001E                     	;# 
   745  001F                     	;# 
   746  0081                     	;# 
   747  0085                     	;# 
   748  0086                     	;# 
   749  0087                     	;# 
   750  0088                     	;# 
   751  0089                     	;# 
   752  008C                     	;# 
   753  008D                     	;# 
   754  008E                     	;# 
   755  008F                     	;# 
   756  0090                     	;# 
   757  0091                     	;# 
   758  0092                     	;# 
   759  0093                     	;# 
   760  0093                     	;# 
   761  0093                     	;# 
   762  0094                     	;# 
   763  0095                     	;# 
   764  0096                     	;# 
   765  0097                     	;# 
   766  0098                     	;# 
   767  0099                     	;# 
   768  009A                     	;# 
   769  009B                     	;# 
   770  009C                     	;# 
   771  009D                     	;# 
   772  009E                     	;# 
   773  009F                     	;# 
   774  0105                     	;# 
   775  0107                     	;# 
   776  0108                     	;# 
   777  0109                     	;# 
   778  010C                     	;# 
   779  010C                     	;# 
   780  010D                     	;# 
   781  010E                     	;# 
   782  010F                     	;# 
   783  0185                     	;# 
   784  0187                     	;# 
   785  0188                     	;# 
   786  0189                     	;# 
   787  018C                     	;# 
   788  018D                     	;# 
   789  0000                     	;# 
   790  0001                     	;# 
   791  0002                     	;# 
   792  0003                     	;# 
   793  0004                     	;# 
   794  0005                     	;# 
   795  0006                     	;# 
   796  0007                     	;# 
   797  0008                     	;# 
   798  0009                     	;# 
   799  000A                     	;# 
   800  000B                     	;# 
   801  000C                     	;# 
   802  000D                     	;# 
   803  000E                     	;# 
   804  000E                     	;# 
   805  000F                     	;# 
   806  0010                     	;# 
   807  0011                     	;# 
   808  0012                     	;# 
   809  0013                     	;# 
   810  0014                     	;# 
   811  0015                     	;# 
   812  0015                     	;# 
   813  0016                     	;# 
   814  0017                     	;# 
   815  0018                     	;# 
   816  0019                     	;# 
   817  001A                     	;# 
   818  001B                     	;# 
   819  001B                     	;# 
   820  001C                     	;# 
   821  001D                     	;# 
   822  001E                     	;# 
   823  001F                     	;# 
   824  0081                     	;# 
   825  0085                     	;# 
   826  0086                     	;# 
   827  0087                     	;# 
   828  0088                     	;# 
   829  0089                     	;# 
   830  008C                     	;# 
   831  008D                     	;# 
   832  008E                     	;# 
   833  008F                     	;# 
   834  0090                     	;# 
   835  0091                     	;# 
   836  0092                     	;# 
   837  0093                     	;# 
   838  0093                     	;# 
   839  0093                     	;# 
   840  0094                     	;# 
   841  0095                     	;# 
   842  0096                     	;# 
   843  0097                     	;# 
   844  0098                     	;# 
   845  0099                     	;# 
   846  009A                     	;# 
   847  009B                     	;# 
   848  009C                     	;# 
   849  009D                     	;# 
   850  009E                     	;# 
   851  009F                     	;# 
   852  0105                     	;# 
   853  0107                     	;# 
   854  0108                     	;# 
   855  0109                     	;# 
   856  010C                     	;# 
   857  010C                     	;# 
   858  010D                     	;# 
   859  010E                     	;# 
   860  010F                     	;# 
   861  0185                     	;# 
   862  0187                     	;# 
   863  0188                     	;# 
   864  0189                     	;# 
   865  018C                     	;# 
   866  018D                     	;# 
   867                           
   868                           	psect	idataBANK1
   869  088C                     __pidataBANK1:	
   870                           
   871                           ;initializer for _FMRX_Nref
   872  088C  3400               	retlw	0
   873  088D  340A               	retlw	10
   874                           
   875                           ;initializer for _CWTX_Nref
   876  088E  34A0               	retlw	160
   877  088F  3400               	retlw	0
   878                           
   879                           ;initializer for _FMTX_Nref
   880  0890  3400               	retlw	0
   881  0891  340A               	retlw	10
   882                           
   883                           ;initializer for _CWTX_Nprg
   884  0892  3400               	retlw	0
   885  0893  3400               	retlw	0
   886  0894  3401               	retlw	1
   887  0895  3400               	retlw	0
   888  0896  3407               	retlw	7
   889  0897  3400               	retlw	0
   890  0898  3404               	retlw	4
   891  0899  3400               	retlw	0
   892  089A  3407               	retlw	7
   893  089B  3400               	retlw	0
   894                           
   895                           ;initializer for _FMTX_Nprg
   896  089C  3408               	retlw	8
   897  089D  3400               	retlw	0
   898  089E  3407               	retlw	7
   899  089F  3400               	retlw	0
   900  08A0  3403               	retlw	3
   901  08A1  3400               	retlw	0
   902  08A2  3400               	retlw	0
   903  08A3  3400               	retlw	0
   904  08A4  3400               	retlw	0
   905  08A5  3400               	retlw	0
   906                           
   907                           	psect	idataBANK2
   908  0873                     __pidataBANK2:	
   909                           
   910                           ;initializer for _eDataField
   911  0873  3448               	retlw	72
   912  0874  3465               	retlw	101
   913  0875  346C               	retlw	108
   914  0876  346C               	retlw	108
   915  0877  346F               	retlw	111
   916  0878  3421               	retlw	33
   917  0879  3420               	retlw	32
   918  087A  3449               	retlw	73
   919  087B  3427               	retlw	39
   920  087C  346D               	retlw	109
   921  087D  3420               	retlw	32
   922  087E  344F               	retlw	79
   923  087F  3472               	retlw	114
   924  0880  3469               	retlw	105
   925  0881  3467               	retlw	103
   926  0882  3461               	retlw	97
   927  0883  346D               	retlw	109
   928  0884  3469               	retlw	105
   929  0885  3453               	retlw	83
   930  0886  3461               	retlw	97
   931  0887  3474               	retlw	116
   932  0888  3431               	retlw	49
   933  0889  3421               	retlw	33
   934  088A  3421               	retlw	33
   935  088B  3400               	retlw	0
   936                           
   937                           	psect	idataBANK3
   938  08C3                     __pidataBANK3:	
   939                           
   940                           ;initializer for main@F2017
   941  08C3  3402               	retlw	2
   942  08C4  3400               	retlw	0
   943  08C5  3404               	retlw	4
   944  08C6  3400               	retlw	0
   945  08C7  3408               	retlw	8
   946  08C8  3400               	retlw	0
   947  08C9  3408               	retlw	8
   948  08CA  3400               	retlw	0
   949  08CB  3407               	retlw	7
   950  08CC  3400               	retlw	0
   951                           
   952                           ;initializer for main@F2015
   953  08CD  3400               	retlw	0
   954  08CE  3400               	retlw	0
   955  08CF  3401               	retlw	1
   956  08D0  3400               	retlw	0
   957  08D1  3407               	retlw	7
   958  08D2  3400               	retlw	0
   959  08D3  3404               	retlw	4
   960  08D4  3400               	retlw	0
   961  08D5  3407               	retlw	7
   962  08D6  3400               	retlw	0
   963                           
   964                           ;initializer for main@F2013
   965  08D7  3408               	retlw	8
   966  08D8  3400               	retlw	0
   967  08D9  3407               	retlw	7
   968  08DA  3400               	retlw	0
   969  08DB  3403               	retlw	3
   970  08DC  3400               	retlw	0
   971  08DD  3400               	retlw	0
   972  08DE  3400               	retlw	0
   973  08DF  3400               	retlw	0
   974  08E0  3400               	retlw	0
   975                           
   976                           ;initializer for _FMRX_Nprg
   977  08E1  3402               	retlw	2
   978  08E2  3400               	retlw	0
   979  08E3  3404               	retlw	4
   980  08E4  3400               	retlw	0
   981  08E5  3408               	retlw	8
   982  08E6  3400               	retlw	0
   983  08E7  3408               	retlw	8
   984  08E8  3400               	retlw	0
   985  08E9  3407               	retlw	7
   986  08EA  3400               	retlw	0
   987                           
   988                           	psect	strings
   989  0800                     __pstrings:	
   990  0800                     stringtab:	
   991  0800                     __stringtab:	
   992  0800                     stringcode:	
   993                           ;	String table - string pointers are 1 byte each
   994                           
   995  0800                     stringdir:	
   996  0800  3008               	movlw	high stringdir
   997  0801  008A               	movwf	10
   998  0802  0804               	movf	4,w
   999  0803  0A84               	incf	4,f
  1000  0804  0782               	addwf	2,f
  1001  0805                     __stringbase:	
  1002  0805  3400               	retlw	0
  1003  0806                     __end_of__stringtab:	
  1004  0806                     _commandSize:	
  1005  0806  3420               	retlw	32
  1006  0807  3400               	retlw	0
  1007  0808                     __end_of_commandSize:	
  1008  000E                     _TMR1	set	14
  1009  0010                     _T1CONbits	set	16
  1010  000C                     _PIR1bits	set	12
  1011  000B                     _INTCONbits	set	11
  1012  0008                     _PORTDbits	set	8
  1013  0007                     _PORTCbits	set	7
  1014  0009                     _PORTEbits	set	9
  1015  0005                     _PORTAbits	set	5
  1016  0013                     _SSPBUF	set	19
  1017  0014                     _SSPCON	set	20
  1018  0003                     _STATUS	set	3
  1019  0009                     _PORTE	set	9
  1020  0008                     _PORTD	set	8
  1021  0007                     _PORTC	set	7
  1022  0006                     _PORTB	set	6
  1023  0005                     _PORTA	set	5
  1024  0019                     _TXREG	set	25
  1025  001A                     _RCREG	set	26
  1026  0029                     _RA1	set	41
  1027  0034                     _RB4	set	52
  1028  0032                     _RB2	set	50
  1029  0035                     _RB5	set	53
  1030  003A                     _RC2	set	58
  1031  003D                     _RC5	set	61
  1032  0064                     _TXIF	set	100
  1033  00C1                     _OERR	set	193
  1034  00C2                     _FERR	set	194
  1035  00C6                     _RX9	set	198
  1036  0065                     _RCIF	set	101
  1037  00C5                     _SREN	set	197
  1038  00C4                     _CREN	set	196
  1039  00C7                     _SPEN	set	199
  1040  008C                     _PIE1bits	set	140
  1041  0094                     _SSPSTAT	set	148
  1042  0093                     _SSPADD	set	147
  1043  0091                     _SSPCON2	set	145
  1044  0089                     _TRISE	set	137
  1045  0088                     _TRISD	set	136
  1046  0087                     _TRISC	set	135
  1047  0086                     _TRISB	set	134
  1048  0085                     _TRISA	set	133
  1049  0099                     _SPBRG	set	153
  1050  048C                     _ACKEN	set	1164
  1051  048D                     _ACKDT	set	1165
  1052  048B                     _RCEN	set	1163
  1053  048A                     _PEN	set	1162
  1054  0489                     _RSEN	set	1161
  1055  0488                     _SEN	set	1160
  1056  04C5                     _TXEN	set	1221
  1057  04C6                     _TX9	set	1222
  1058  0465                     _RCIE	set	1125
  1059  0464                     _TXIE	set	1124
  1060  04C4                     _SYNC	set	1220
  1061  04C2                     _BRGH	set	1218
  1062  0189                     _ANSELH	set	393
  1063  0188                     _ANSEL	set	392
  1064  0808                     STR_7:	
  1065  0808  344A               	retlw	74	;'J'
  1066  0809  3451               	retlw	81	;'Q'
  1067  080A  3431               	retlw	49	;'1'
  1068  080B  345A               	retlw	90	;'Z'
  1069  080C  3448               	retlw	72	;'H'
  1070  080D  3458               	retlw	88	;'X'
  1071  080E  3400               	retlw	0
  1072  080F                     STR_1:	
  1073  080F  344A               	retlw	74	;'J'
  1074  0810  3451               	retlw	81	;'Q'
  1075  0811  3431               	retlw	49	;'1'
  1076  0812  3459               	retlw	89	;'Y'
  1077  0813  3443               	retlw	67	;'C'
  1078  0814  345A               	retlw	90	;'Z'
  1079  0815  3400               	retlw	0
  1080  0808                     
  1081                           ; #config settings
  1082  0000                     
  1083                           	psect	cinit
  1084  07B3                     start_initialization:	
  1085  07B3                     __initialization:	
  1086                           
  1087                           ; Initialize objects allocated to BANK3
  1088  07B3  1783               	bsf	3,7	;select IRP bank2
  1089  07B4  30EA               	movlw	low (__pdataBANK3+40)
  1090  07B5  00FD               	movwf	btemp+-1
  1091  07B6  3008               	movlw	high __pidataBANK3
  1092  07B7  00FE               	movwf	btemp
  1093  07B8  30C3               	movlw	low __pidataBANK3
  1094  07B9  00FF               	movwf	btemp+1
  1095  07BA  30C2               	movlw	low __pdataBANK3
  1096  07BB  0084               	movwf	4
  1097  07BC  120A  158A  2026  120A  118A  	fcall	init_ram0
  1098                           
  1099                           ; Initialize objects allocated to BANK2
  1100  07C1  3059               	movlw	low (__pdataBANK2+25)
  1101  07C2  00FD               	movwf	btemp+-1
  1102  07C3  3008               	movlw	high __pidataBANK2
  1103  07C4  00FE               	movwf	btemp
  1104  07C5  3073               	movlw	low __pidataBANK2
  1105  07C6  00FF               	movwf	btemp+1
  1106  07C7  3040               	movlw	low __pdataBANK2
  1107  07C8  0084               	movwf	4
  1108  07C9  120A  158A  2026  120A  118A  	fcall	init_ram0
  1109                           
  1110                           ; Initialize objects allocated to BANK1
  1111  07CE  1383               	bcf	3,7	;select IRP bank0
  1112  07CF  30DB               	movlw	low (__pdataBANK1+26)
  1113  07D0  00FD               	movwf	btemp+-1
  1114  07D1  3008               	movlw	high __pidataBANK1
  1115  07D2  00FE               	movwf	btemp
  1116  07D3  308C               	movlw	low __pidataBANK1
  1117  07D4  00FF               	movwf	btemp+1
  1118  07D5  30C1               	movlw	low __pdataBANK1
  1119  07D6  0084               	movwf	4
  1120  07D7  120A  158A  2026  120A  118A  	fcall	init_ram0
  1121                           
  1122                           ; Clear objects allocated to BANK3
  1123  07DC  1783               	bsf	3,7	;select IRP bank2
  1124  07DD  3090               	movlw	low __pbssBANK3
  1125  07DE  0084               	movwf	4
  1126  07DF  30C2               	movlw	low (__pbssBANK3+50)
  1127  07E0  160A  118A  27F8  120A  118A  	fcall	clear_ram0
  1128                           
  1129                           ; Clear objects allocated to BANK2
  1130  07E5  3010               	movlw	low __pbssBANK2
  1131  07E6  0084               	movwf	4
  1132  07E7  3040               	movlw	low (__pbssBANK2+48)
  1133  07E8  160A  118A  27F8  120A  118A  	fcall	clear_ram0
  1134                           
  1135                           ; Clear objects allocated to BANK1
  1136  07ED  1383               	bcf	3,7	;select IRP bank0
  1137  07EE  30DB               	movlw	low __pbssBANK1
  1138  07EF  0084               	movwf	4
  1139  07F0  30E8               	movlw	low (__pbssBANK1+13)
  1140  07F1  160A  118A  27F8  120A  118A  	fcall	clear_ram0
  1141                           
  1142                           ; Clear objects allocated to BANK0
  1143  07F6  3066               	movlw	low __pbssBANK0
  1144  07F7  0084               	movwf	4
  1145  07F8  3070               	movlw	low (__pbssBANK0+10)
  1146  07F9  160A  118A  27F8   	fcall	clear_ram0
  1147  07FC                     end_of_initialization:	
  1148                           ;End of C runtime variable initialization code
  1149                           
  1150  07FC                     __end_of__initialization:	
  1151  07FC  0183               	clrf	3
  1152  07FD  120A  158A  2E1B   	ljmp	_main	;jump to C main() function
  1153                           
  1154                           	psect	bssBANK0
  1155  0066                     __pbssBANK0:	
  1156  0066                     _eflag:	
  1157  0066                     	ds	2
  1158  0068                     _dPacketnum:	
  1159  0068                     	ds	2
  1160  006A                     _rcv_state:	
  1161  006A                     	ds	2
  1162  006C                     _efcshi:	
  1163  006C                     	ds	1
  1164  006D                     _efcslo:	
  1165  006D                     	ds	1
  1166  006E                     _dfcslo:	
  1167  006E                     	ds	1
  1168  006F                     _dfcshi:	
  1169  006F                     	ds	1
  1170                           
  1171                           	psect	bssBANK1
  1172  00DB                     __pbssBANK1:	
  1173  00DB                     _ePacket:	
  1174  00DB                     	ds	5
  1175  00E0                     _ebitstatus:	
  1176  00E0                     	ds	2
  1177  00E2                     _estuff:	
  1178  00E2                     	ds	2
  1179  00E4                     _efcsflag:	
  1180  00E4                     	ds	2
  1181  00E6                     getbit@oldbit:	
  1182  00E6                     	ds	2
  1183                           
  1184                           	psect	dataBANK1
  1185  00C1                     __pdataBANK1:	
  1186  00C1                     _FMRX_Nref:	
  1187  00C1                     	ds	2
  1188  00C3                     _CWTX_Nref:	
  1189  00C3                     	ds	2
  1190  00C5                     _FMTX_Nref:	
  1191  00C5                     	ds	2
  1192  00C7                     _CWTX_Nprg:	
  1193  00C7                     	ds	10
  1194  00D1                     _FMTX_Nprg:	
  1195  00D1                     	ds	10
  1196                           
  1197                           	psect	bssBANK3
  1198  0190                     __pbssBANK3:	
  1199  0190                     _dPacket:	
  1200  0190                     	ds	50
  1201                           
  1202                           	psect	dataBANK3
  1203  01C2                     __pdataBANK3:	
  1204  01C2                     main@F2017:	
  1205  01C2                     	ds	10
  1206  01CC                     main@F2015:	
  1207  01CC                     	ds	10
  1208  01D6                     main@F2013:	
  1209  01D6                     	ds	10
  1210  01E0                     _FMRX_Nprg:	
  1211  01E0                     	ds	10
  1212                           
  1213                           	psect	bssBANK2
  1214  0110                     __pbssBANK2:	
  1215  0110                     _EEPROMData:	
  1216  0110                     	ds	32
  1217  0130                     _dData:	
  1218  0130                     	ds	16
  1219                           
  1220                           	psect	dataBANK2
  1221  0140                     __pdataBANK2:	
  1222  0140                     _eDataField:	
  1223  0140                     	ds	25
  1224                           
  1225                           	psect	inittext
  1226  0822                     init_fetch0:	
  1227                           ;	Called with low address in FSR and high address in W
  1228                           
  1229  0822  087E               	movf	126,w
  1230  0823  008A               	movwf	10
  1231  0824  087F               	movf	127,w
  1232  0825  0082               	movwf	2
  1233  0826                     init_ram0:	
  1234                           ;Called with:
  1235                           ;	high address of idata address in btemp 
  1236                           ;	low address of idata address in btemp+1 
  1237                           ;	low address of data in FSR
  1238                           ;	high address + 1 of data in btemp-1
  1239                           
  1240  0826  2022  120A  158A   	fcall	init_fetch0
  1241  0829  0080               	movwf	0
  1242  082A  0A84               	incf	4,f
  1243  082B  0804               	movf	4,w
  1244  082C  067D               	xorwf	125,w
  1245  082D  1903               	btfsc	3,2
  1246  082E  3400               	retlw	0
  1247  082F  0AFF               	incf	127,f
  1248  0830  1903               	btfsc	3,2
  1249  0831  0AFE               	incf	126,f
  1250  0832  2826               	goto	init_ram0
  1251                           
  1252                           	psect	clrtext
  1253  17F8                     clear_ram0:	
  1254                           ;	Called with FSR containing the base address, and
  1255                           ;	W with the last address+1
  1256                           
  1257  17F8  0064               	clrwdt	;clear the watchdog before getting into this loop
  1258  17F9                     clrloop0:	
  1259  17F9  0180               	clrf	0	;clear RAM location pointed to by FSR
  1260  17FA  0A84               	incf	4,f	;increment pointer
  1261  17FB  0604               	xorwf	4,w	;XOR with final address
  1262  17FC  1903               	btfsc	3,2	;have we reached the end yet?
  1263  17FD  3400               	retlw	0	;all done for this memory range, return
  1264  17FE  0604               	xorwf	4,w	;XOR again to restore value
  1265  17FF  2FF9               	goto	clrloop0	;do the next byte
  1266                           
  1267                           	psect	cstackBANK1
  1268  00A0                     __pcstackBANK1:	
  1269  00A0                     main@FMTX_Nprg:	
  1270                           
  1271                           ; 10 bytes @ 0x0
  1272  00A0                     	ds	10
  1273  00AA                     main@CWTX_Nprg:	
  1274                           
  1275                           ; 10 bytes @ 0xA
  1276  00AA                     	ds	10
  1277  00B4                     main@FMRX_Nprg:	
  1278                           
  1279                           ; 10 bytes @ 0x14
  1280  00B4                     	ds	10
  1281  00BE                     main@TXOBC_wad_header:	
  1282                           
  1283                           ; 1 bytes @ 0x1E
  1284  00BE                     	ds	1
  1285  00BF                     main@NM_wad_header:	
  1286                           
  1287                           ; 1 bytes @ 0x1F
  1288  00BF                     	ds	1
  1289  00C0                     main@dData:	
  1290                           
  1291                           ; 1 bytes @ 0x20
  1292  00C0                     	ds	1
  1293                           
  1294                           	psect	cstackCOMMON
  1295  0070                     __pcstackCOMMON:	
  1296  0070                     ?_ReceivePacket_data:	
  1297  0070                     ?_Reset_EPS:	
  1298                           ; 1 bytes @ 0x0
  1299                           
  1300  0070                     ??_Reset_EPS:	
  1301                           ; 1 bytes @ 0x0
  1302                           
  1303  0070                     ?__NOP:	
  1304                           ; 1 bytes @ 0x0
  1305                           
  1306  0070                     ??__NOP:	
  1307                           ; 1 bytes @ 0x0
  1308                           
  1309  0070                     ?_Init_SERIAL:	
  1310                           ; 1 bytes @ 0x0
  1311                           
  1312  0070                     ??_Init_SERIAL:	
  1313                           ; 1 bytes @ 0x0
  1314                           
  1315  0070                     ?_putch:	
  1316                           ; 1 bytes @ 0x0
  1317                           
  1318  0070                     ??_putch:	
  1319                           ; 1 bytes @ 0x0
  1320                           
  1321  0070                     ?_Init_MPU:	
  1322                           ; 1 bytes @ 0x0
  1323                           
  1324  0070                     ??_Init_MPU:	
  1325                           ; 1 bytes @ 0x0
  1326                           
  1327  0070                     ?_waitFlag:	
  1328                           ; 1 bytes @ 0x0
  1329                           
  1330  0070                     ?_getdata:	
  1331                           ; 1 bytes @ 0x0
  1332                           
  1333  0070                     ?_main:	
  1334                           ; 1 bytes @ 0x0
  1335                           
  1336  0070                     ?_I2C_Master_Wait:	
  1337                           ; 1 bytes @ 0x0
  1338                           
  1339  0070                     ??_I2C_Master_Wait:	
  1340                           ; 1 bytes @ 0x0
  1341                           
  1342  0070                     ?_I2C_Master_Start:	
  1343                           ; 1 bytes @ 0x0
  1344                           
  1345  0070                     ??_I2C_Master_Start:	
  1346                           ; 1 bytes @ 0x0
  1347                           
  1348  0070                     ?_I2C_Master_Stop:	
  1349                           ; 1 bytes @ 0x0
  1350                           
  1351  0070                     ??_I2C_Master_Stop:	
  1352                           ; 1 bytes @ 0x0
  1353                           
  1354  0070                     ?_I2C_Master_Write:	
  1355                           ; 1 bytes @ 0x0
  1356                           
  1357  0070                     ?_getbit:	
  1358                           ; 1 bytes @ 0x0
  1359                           
  1360  0070                     ?_fcscheck:	
  1361                           ; 2 bytes @ 0x0
  1362                           
  1363  0070                     ?___awdiv:	
  1364                           ; 2 bytes @ 0x0
  1365                           
  1366  0070                     ?___lldiv:	
  1367                           ; 2 bytes @ 0x0
  1368                           
  1369  0070                     putch@byte:	
  1370                           ; 4 bytes @ 0x0
  1371                           
  1372  0070                     I2C_Master_Write@d:	
  1373                           ; 1 bytes @ 0x0
  1374                           
  1375  0070                     __NOP@i:	
  1376                           ; 2 bytes @ 0x0
  1377                           
  1378  0070                     ___awdiv@divisor:	
  1379                           ; 2 bytes @ 0x0
  1380                           
  1381  0070                     ___lldiv@divisor:	
  1382                           ; 2 bytes @ 0x0
  1383                           
  1384                           
  1385                           ; 4 bytes @ 0x0
  1386  0070                     	ds	1
  1387  0071                     ?_NM_waddress:	
  1388  0071                     ?_TXOBC_waddress:	
  1389                           ; 1 bytes @ 0x1
  1390                           
  1391  0071                     NM_waddress@whigh_address:	
  1392                           ; 1 bytes @ 0x1
  1393                           
  1394  0071                     TXOBC_waddress@whigh_address:	
  1395                           ; 1 bytes @ 0x1
  1396                           
  1397                           
  1398                           ; 1 bytes @ 0x1
  1399  0071                     	ds	1
  1400  0072                     ?_EEPROM_Write:	
  1401  0072                     ??_getbit:	
  1402                           ; 1 bytes @ 0x2
  1403                           
  1404  0072                     ??_fcscheck:	
  1405                           ; 1 bytes @ 0x2
  1406                           
  1407  0072                     ??_I2C_Master_Write:	
  1408                           ; 1 bytes @ 0x2
  1409                           
  1410  0072                     ?_L_OUT:	
  1411                           ; 1 bytes @ 0x2
  1412                           
  1413  0072                     ?_H_OUT:	
  1414                           ; 1 bytes @ 0x2
  1415                           
  1416  0072                     ?_STBOUT:	
  1417                           ; 1 bytes @ 0x2
  1418                           
  1419  0072                     NM_waddress@wlow_address:	
  1420                           ; 1 bytes @ 0x2
  1421                           
  1422  0072                     TXOBC_waddress@wlow_address:	
  1423                           ; 1 bytes @ 0x2
  1424                           
  1425  0072                     EEPROM_Write@high_address:	
  1426                           ; 1 bytes @ 0x2
  1427                           
  1428  0072                     L_OUT@fmcwtxrx:	
  1429                           ; 1 bytes @ 0x2
  1430                           
  1431  0072                     H_OUT@fmcwtxrx:	
  1432                           ; 2 bytes @ 0x2
  1433                           
  1434  0072                     STBOUT@fmcwtxrx:	
  1435                           ; 2 bytes @ 0x2
  1436                           
  1437  0072                     ___awdiv@dividend:	
  1438                           ; 2 bytes @ 0x2
  1439                           
  1440                           
  1441                           ; 2 bytes @ 0x2
  1442  0072                     	ds	1
  1443  0073                     ??_NM_waddress:	
  1444  0073                     ??_TXOBC_waddress:	
  1445                           ; 1 bytes @ 0x3
  1446                           
  1447  0073                     NM_waddress@NM_wad_header:	
  1448                           ; 1 bytes @ 0x3
  1449                           
  1450  0073                     EEPROM_Write@low_address:	
  1451                           ; 1 bytes @ 0x3
  1452                           
  1453                           
  1454                           ; 1 bytes @ 0x3
  1455  0073                     	ds	1
  1456  0074                     ??_L_OUT:	
  1457  0074                     ??_H_OUT:	
  1458                           ; 1 bytes @ 0x4
  1459                           
  1460  0074                     ??_STBOUT:	
  1461                           ; 1 bytes @ 0x4
  1462                           
  1463  0074                     ?_OPINIT:	
  1464                           ; 1 bytes @ 0x4
  1465                           
  1466  0074                     ??___awdiv:	
  1467                           ; 1 bytes @ 0x4
  1468                           
  1469  0074                     fcscheck@bt:	
  1470                           ; 1 bytes @ 0x4
  1471                           
  1472  0074                     EEPROM_Write@data:	
  1473                           ; 1 bytes @ 0x4
  1474                           
  1475  0074                     getbit@i:	
  1476                           ; 1 bytes @ 0x4
  1477                           
  1478  0074                     OPINIT@fmcwtxrx:	
  1479                           ; 2 bytes @ 0x4
  1480                           
  1481  0074                     ___lldiv@dividend:	
  1482                           ; 2 bytes @ 0x4
  1483                           
  1484                           
  1485                           ; 4 bytes @ 0x4
  1486  0074                     	ds	1
  1487  0075                     ??_EEPROM_Write:	
  1488  0075                     TXOBC_waddress@TXOBC_wad_header:	
  1489                           ; 1 bytes @ 0x5
  1490                           
  1491  0075                     ___awdiv@counter:	
  1492                           ; 1 bytes @ 0x5
  1493                           
  1494  0075                     fcscheck@i:	
  1495                           ; 1 bytes @ 0x5
  1496                           
  1497                           
  1498                           ; 2 bytes @ 0x5
  1499  0075                     	ds	1
  1500  0076                     ??_waitFlag:	
  1501  0076                     ??_getdata:	
  1502                           ; 1 bytes @ 0x6
  1503                           
  1504  0076                     ??_OPINIT:	
  1505                           ; 1 bytes @ 0x6
  1506                           
  1507  0076                     ___awdiv@sign:	
  1508                           ; 1 bytes @ 0x6
  1509                           
  1510                           
  1511                           ; 1 bytes @ 0x6
  1512  0076                     	ds	1
  1513  0077                     fcscheck@i_149:	
  1514  0077                     ___awdiv@quotient:	
  1515                           ; 2 bytes @ 0x7
  1516                           
  1517                           
  1518                           ; 2 bytes @ 0x7
  1519  0077                     	ds	1
  1520  0078                     ??___lldiv:	
  1521  0078                     EEPROM_Write@EEPROM_address:	
  1522                           ; 1 bytes @ 0x8
  1523                           
  1524                           
  1525                           ; 1 bytes @ 0x8
  1526  0078                     	ds	1
  1527  0079                     ?_OUTFQ:	
  1528  0079                     ?_RFDOUT:	
  1529                           ; 1 bytes @ 0x9
  1530                           
  1531  0079                     fcscheck@byte:	
  1532                           ; 1 bytes @ 0x9
  1533                           
  1534  0079                     EEPROM_Write@Address:	
  1535                           ; 1 bytes @ 0x9
  1536                           
  1537  0079                     OUTFQ@fmcwtxrx:	
  1538                           ; 1 bytes @ 0x9
  1539                           
  1540  0079                     RFDOUT@fmcwtxrx:	
  1541                           ; 2 bytes @ 0x9
  1542                           
  1543  0079                     ___lldiv@quotient:	
  1544                           ; 2 bytes @ 0x9
  1545                           
  1546                           
  1547                           ; 4 bytes @ 0x9
  1548  0079                     	ds	1
  1549  007A                     ??_ReceivePacket_data:	
  1550                           
  1551                           ; 1 bytes @ 0xA
  1552  007A                     	ds	1
  1553  007B                     OUTFQ@Nprg:	
  1554  007B                     RFDOUT@Nref:	
  1555                           ; 2 bytes @ 0xB
  1556                           
  1557                           
  1558                           ; 2 bytes @ 0xB
  1559  007B                     	ds	2
  1560  007D                     ??_FMTX:	
  1561  007D                     ??_CWTX:	
  1562                           ; 1 bytes @ 0xD
  1563                           
  1564  007D                     ??_FMRX:	
  1565                           ; 1 bytes @ 0xD
  1566                           
  1567  007D                     ___lldiv@counter:	
  1568                           ; 1 bytes @ 0xD
  1569                           
  1570                           
  1571                           ; 1 bytes @ 0xD
  1572  007D                     	ds	1
  1573                           
  1574                           	psect	cstackBANK0
  1575  0020                     __pcstackBANK0:	
  1576  0020                     ?_Init_I2C_M:	
  1577  0020                     ??_OUTFQ:	
  1578                           ; 1 bytes @ 0x0
  1579                           
  1580  0020                     ??_RFDOUT:	
  1581                           ; 1 bytes @ 0x0
  1582                           
  1583  0020                     waitFlag@i:	
  1584                           ; 1 bytes @ 0x0
  1585                           
  1586  0020                     getdata@bufstore_counter:	
  1587                           ; 2 bytes @ 0x0
  1588                           
  1589  0020                     Init_I2C_M@c:	
  1590                           ; 2 bytes @ 0x0
  1591                           
  1592                           
  1593                           ; 4 bytes @ 0x0
  1594  0020                     	ds	2
  1595  0022                     waitFlag@j:	
  1596  0022                     getdata@dstuff:	
  1597                           ; 2 bytes @ 0x2
  1598                           
  1599                           
  1600                           ; 2 bytes @ 0x2
  1601  0022                     	ds	1
  1602  0023                     RFDOUT@Nref_b:	
  1603                           
  1604                           ; 24 bytes @ 0x3
  1605  0023                     	ds	1
  1606  0024                     ??_Init_I2C_M:	
  1607  0024                     waitFlag@j_118:	
  1608                           ; 1 bytes @ 0x4
  1609                           
  1610  0024                     getdata@dbitstatus:	
  1611                           ; 2 bytes @ 0x4
  1612                           
  1613                           
  1614                           ; 2 bytes @ 0x4
  1615  0024                     	ds	2
  1616  0026                     getdata@buf:	
  1617  0026                     waitFlag@j_120:	
  1618                           ; 1 bytes @ 0x6
  1619                           
  1620                           
  1621                           ; 2 bytes @ 0x6
  1622  0026                     	ds	2
  1623  0028                     waitFlag@j_122:	
  1624                           
  1625                           ; 2 bytes @ 0x8
  1626  0028                     	ds	2
  1627  002A                     waitFlag@j_124:	
  1628                           
  1629                           ; 2 bytes @ 0xA
  1630  002A                     	ds	2
  1631  002C                     waitFlag@j_126:	
  1632                           
  1633                           ; 2 bytes @ 0xC
  1634  002C                     	ds	2
  1635  002E                     waitFlag@j_127:	
  1636                           
  1637                           ; 2 bytes @ 0xE
  1638  002E                     	ds	2
  1639  0030                     waitFlag@j_129:	
  1640  0030                     OUTFQ@Nprg_b:	
  1641                           ; 2 bytes @ 0x10
  1642                           
  1643                           
  1644                           ; 34 bytes @ 0x10
  1645  0030                     	ds	2
  1646  0032                     waitFlag@j_131:	
  1647                           
  1648                           ; 2 bytes @ 0x12
  1649  0032                     	ds	2
  1650  0034                     waitFlag@j_133:	
  1651                           
  1652                           ; 2 bytes @ 0x14
  1653  0034                     	ds	2
  1654  0036                     waitFlag@j_135:	
  1655                           
  1656                           ; 2 bytes @ 0x16
  1657  0036                     	ds	2
  1658  0038                     waitFlag@j_137:	
  1659                           
  1660                           ; 2 bytes @ 0x18
  1661  0038                     	ds	2
  1662  003A                     waitFlag@flag_judge:	
  1663                           
  1664                           ; 2 bytes @ 0x1A
  1665  003A                     	ds	1
  1666  003B                     RFDOUT@i_483:	
  1667                           
  1668                           ; 2 bytes @ 0x1B
  1669  003B                     	ds	1
  1670  003C                     waitFlag@buf:	
  1671                           
  1672                           ; 1 bytes @ 0x1C
  1673  003C                     	ds	1
  1674  003D                     ReceivePacket_data@fcschecker:	
  1675  003D                     RFDOUT@i:	
  1676                           ; 2 bytes @ 0x1D
  1677                           
  1678                           
  1679                           ; 2 bytes @ 0x1D
  1680  003D                     	ds	2
  1681  003F                     ReceivePacket_data@i:	
  1682  003F                     RFDOUT@i_484:	
  1683                           ; 2 bytes @ 0x1F
  1684                           
  1685                           
  1686                           ; 2 bytes @ 0x1F
  1687  003F                     	ds	19
  1688  0052                     OUTFQ@i_472:	
  1689                           
  1690                           ; 2 bytes @ 0x32
  1691  0052                     	ds	2
  1692  0054                     OUTFQ@count:	
  1693                           
  1694                           ; 2 bytes @ 0x34
  1695  0054                     	ds	2
  1696  0056                     OUTFQ@i:	
  1697                           
  1698                           ; 2 bytes @ 0x36
  1699  0056                     	ds	2
  1700  0058                     OUTFQ@i_474:	
  1701                           
  1702                           ; 2 bytes @ 0x38
  1703  0058                     	ds	2
  1704  005A                     OUTFQ@j:	
  1705                           
  1706                           ; 2 bytes @ 0x3A
  1707  005A                     	ds	2
  1708  005C                     ?_FMTX:	
  1709  005C                     ?_CWTX:	
  1710                           ; 1 bytes @ 0x3C
  1711                           
  1712  005C                     ?_FMRX:	
  1713                           ; 1 bytes @ 0x3C
  1714                           
  1715  005C                     FMTX@Nref:	
  1716                           ; 1 bytes @ 0x3C
  1717                           
  1718  005C                     CWTX@Nref:	
  1719                           ; 2 bytes @ 0x3C
  1720                           
  1721  005C                     FMRX@Nref:	
  1722                           ; 2 bytes @ 0x3C
  1723                           
  1724                           
  1725                           ; 2 bytes @ 0x3C
  1726  005C                     	ds	2
  1727  005E                     FMTX@Nprg:	
  1728  005E                     CWTX@Nprg:	
  1729                           ; 2 bytes @ 0x3E
  1730                           
  1731  005E                     FMRX@Nprg:	
  1732                           ; 2 bytes @ 0x3E
  1733                           
  1734                           
  1735                           ; 2 bytes @ 0x3E
  1736  005E                     	ds	2
  1737  0060                     FMTX@fmtx:	
  1738  0060                     CWTX@cwtx:	
  1739                           ; 2 bytes @ 0x40
  1740                           
  1741  0060                     FMRX@fmrx:	
  1742                           ; 2 bytes @ 0x40
  1743                           
  1744                           
  1745                           ; 2 bytes @ 0x40
  1746  0060                     	ds	2
  1747  0062                     ??_main:	
  1748                           
  1749                           ; 1 bytes @ 0x42
  1750  0062                     	ds	4
  1751                           
  1752                           	psect	maintext
  1753  0E1B                     __pmaintext:	
  1754 ;;
  1755 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1756 ;;
  1757 ;; *************** function _main *****************
  1758 ;; Defined at:
  1759 ;;		line 38 in file "main.c"
  1760 ;; Parameters:    Size  Location     Type
  1761 ;;		None
  1762 ;; Auto vars:     Size  Location     Type
  1763 ;;  FMRX_Nprg      10   20[BANK1 ] int [5]
  1764 ;;  CWTX_Nprg      10   10[BANK1 ] int [5]
  1765 ;;  FMTX_Nprg      10    0[BANK1 ] int [5]
  1766 ;;  NM_wad_heade    1   31[BANK1 ] unsigned char 
  1767 ;;  dData           1   32[BANK1 ] PTR unsigned char 
  1768 ;;		 -> NULL(0), dData(16), 
  1769 ;;  TXOBC_wad_he    1   30[BANK1 ] unsigned char 
  1770 ;; Return value:  Size  Location     Type
  1771 ;;                  1    wreg      void 
  1772 ;; Registers used:
  1773 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1774 ;; Tracked objects:
  1775 ;;		On entry : B00/0
  1776 ;;		On exit  : 0/0
  1777 ;;		Unchanged: 0/0
  1778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1779 ;;      Params:         0       0       0       0       0
  1780 ;;      Locals:         0       0      33       0       0
  1781 ;;      Temps:          0       4       0       0       0
  1782 ;;      Totals:         0       4      33       0       0
  1783 ;;Total ram usage:       37 bytes
  1784 ;; Hardware stack levels required when called:    4
  1785 ;; This function calls:
  1786 ;;		_CWTX
  1787 ;;		_EEPROM_Write
  1788 ;;		_FMRX
  1789 ;;		_FMTX
  1790 ;;		_Init_I2C_M
  1791 ;;		_Init_MPU
  1792 ;;		_Init_SERIAL
  1793 ;;		_NM_waddress
  1794 ;;		_ReceivePacket_data
  1795 ;;		_Reset_EPS
  1796 ;;		_TXOBC_waddress
  1797 ;; This function is called by:
  1798 ;;		Startup code after reset
  1799 ;; This function uses a non-reentrant model
  1800 ;;
  1801                           
  1802                           
  1803                           ;psect for function _main
  1804  0E1B                     _main:	
  1805                           
  1806                           ;main.c: 43: _delay((unsigned long)((200)*(10000000/4000.0)));
  1807                           
  1808                           ;incstack = 0
  1809                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1810  0E1B  3003               	movlw	3
  1811  0E1C  1283               	bcf	3,5	;RP0=0, select bank0
  1812  0E1D  1303               	bcf	3,6	;RP1=0, select bank0
  1813  0E1E  00E4               	movwf	??_main+2
  1814  0E1F  308A               	movlw	138
  1815  0E20  00E3               	movwf	??_main+1
  1816  0E21  3055               	movlw	85
  1817  0E22  00E2               	movwf	??_main
  1818  0E23                     u3547:	
  1819  0E23  0BE2               	decfsz	??_main,f
  1820  0E24  2E23               	goto	u3547
  1821  0E25  0BE3               	decfsz	??_main+1,f
  1822  0E26  2E23               	goto	u3547
  1823  0E27  0BE4               	decfsz	??_main+2,f
  1824  0E28  2E23               	goto	u3547
  1825                           
  1826                           ;main.c: 45: Init_SERIAL();
  1827  0E29  120A  158A  205A  120A  158A  	fcall	_Init_SERIAL
  1828                           
  1829                           ;main.c: 46: Init_MPU();
  1830  0E2E  120A  158A  20A6  120A  158A  	fcall	_Init_MPU
  1831                           
  1832                           ;main.c: 47: Init_I2C_M(400000);
  1833  0E33  3000               	movlw	0
  1834  0E34  1283               	bcf	3,5	;RP0=0, select bank0
  1835  0E35  1303               	bcf	3,6	;RP1=0, select bank0
  1836  0E36  00A3               	movwf	Init_I2C_M@c+3
  1837  0E37  3006               	movlw	6
  1838  0E38  00A2               	movwf	Init_I2C_M@c+2
  1839  0E39  301A               	movlw	26
  1840  0E3A  00A1               	movwf	Init_I2C_M@c+1
  1841  0E3B  3080               	movlw	128
  1842  0E3C  00A0               	movwf	Init_I2C_M@c
  1843  0E3D  120A  158A  219D  120A  158A  	fcall	_Init_I2C_M
  1844                           
  1845                           ;main.c: 54: RB2 = 1;
  1846  0E42  1283               	bcf	3,5	;RP0=0, select bank0
  1847  0E43  1303               	bcf	3,6	;RP1=0, select bank0
  1848  0E44  1506               	bsf	6,2	;volatile
  1849                           
  1850                           ;main.c: 55: _delay((unsigned long)((1000)*(10000000/4000.0)));
  1851  0E45  300D               	movlw	13
  1852  0E46  1283               	bcf	3,5	;RP0=0, select bank0
  1853  0E47  1303               	bcf	3,6	;RP1=0, select bank0
  1854  0E48  00E4               	movwf	??_main+2
  1855  0E49  30AF               	movlw	175
  1856  0E4A  00E3               	movwf	??_main+1
  1857  0E4B  30B5               	movlw	181
  1858  0E4C  00E2               	movwf	??_main
  1859  0E4D                     u3557:	
  1860  0E4D  0BE2               	decfsz	??_main,f
  1861  0E4E  2E4D               	goto	u3557
  1862  0E4F  0BE3               	decfsz	??_main+1,f
  1863  0E50  2E4D               	goto	u3557
  1864  0E51  0BE4               	decfsz	??_main+2,f
  1865  0E52  2E4D               	goto	u3557
  1866  0E53  2E54               	nop2
  1867                           
  1868                           ;main.c: 57: FMTX(FMTX_Nref, FMTX_Nprg);
  1869  0E54  1683               	bsf	3,5	;RP0=1, select bank1
  1870  0E55  1303               	bcf	3,6	;RP1=0, select bank1
  1871  0E56  0846               	movf	(_FMTX_Nref+1)^(0+128),w
  1872  0E57  1283               	bcf	3,5	;RP0=0, select bank0
  1873  0E58  1303               	bcf	3,6	;RP1=0, select bank0
  1874  0E59  00DD               	movwf	FMTX@Nref+1
  1875  0E5A  1683               	bsf	3,5	;RP0=1, select bank1
  1876  0E5B  1303               	bcf	3,6	;RP1=0, select bank1
  1877  0E5C  0845               	movf	_FMTX_Nref^(0+128),w
  1878  0E5D  1283               	bcf	3,5	;RP0=0, select bank0
  1879  0E5E  1303               	bcf	3,6	;RP1=0, select bank0
  1880  0E5F  00DC               	movwf	FMTX@Nref
  1881  0E60  30D1               	movlw	(low (_FMTX_Nprg| 0))& (0+255)
  1882  0E61  00DE               	movwf	FMTX@Nprg
  1883  0E62  3000               	movlw	0
  1884  0E63  00DF               	movwf	FMTX@Nprg+1
  1885  0E64  120A  158A  2143  120A  158A  	fcall	_FMTX
  1886                           
  1887                           ;main.c: 58: CWTX(CWTX_Nref, CWTX_Nprg);
  1888  0E69  1683               	bsf	3,5	;RP0=1, select bank1
  1889  0E6A  1303               	bcf	3,6	;RP1=0, select bank1
  1890  0E6B  0844               	movf	(_CWTX_Nref+1)^(0+128),w
  1891  0E6C  1283               	bcf	3,5	;RP0=0, select bank0
  1892  0E6D  1303               	bcf	3,6	;RP1=0, select bank0
  1893  0E6E  00DD               	movwf	CWTX@Nref+1
  1894  0E6F  1683               	bsf	3,5	;RP0=1, select bank1
  1895  0E70  1303               	bcf	3,6	;RP1=0, select bank1
  1896  0E71  0843               	movf	_CWTX_Nref^(0+128),w
  1897  0E72  1283               	bcf	3,5	;RP0=0, select bank0
  1898  0E73  1303               	bcf	3,6	;RP1=0, select bank0
  1899  0E74  00DC               	movwf	CWTX@Nref
  1900  0E75  30C7               	movlw	(low (_CWTX_Nprg| 0))& (0+255)
  1901  0E76  00DE               	movwf	CWTX@Nprg
  1902  0E77  3000               	movlw	0
  1903  0E78  00DF               	movwf	CWTX@Nprg+1
  1904  0E79  120A  158A  20EB  120A  158A  	fcall	_CWTX
  1905                           
  1906                           ;main.c: 59: FMRX(FMRX_Nref, FMRX_Nprg);
  1907  0E7E  1683               	bsf	3,5	;RP0=1, select bank1
  1908  0E7F  1303               	bcf	3,6	;RP1=0, select bank1
  1909  0E80  0842               	movf	(_FMRX_Nref+1)^(0+128),w
  1910  0E81  1283               	bcf	3,5	;RP0=0, select bank0
  1911  0E82  1303               	bcf	3,6	;RP1=0, select bank0
  1912  0E83  00DD               	movwf	FMRX@Nref+1
  1913  0E84  1683               	bsf	3,5	;RP0=1, select bank1
  1914  0E85  1303               	bcf	3,6	;RP1=0, select bank1
  1915  0E86  0841               	movf	_FMRX_Nref^(0+128),w
  1916  0E87  1283               	bcf	3,5	;RP0=0, select bank0
  1917  0E88  1303               	bcf	3,6	;RP1=0, select bank0
  1918  0E89  00DC               	movwf	FMRX@Nref
  1919  0E8A  30E0               	movlw	(low (_FMRX_Nprg| (0+256)))& (0+255)
  1920  0E8B  00DE               	movwf	FMRX@Nprg
  1921  0E8C  3001               	movlw	1
  1922  0E8D  00DF               	movwf	FMRX@Nprg+1
  1923  0E8E  120A  158A  2117  120A  158A  	fcall	_FMRX
  1924                           
  1925                           ;main.c: 60: RB2 = 0;
  1926  0E93  1283               	bcf	3,5	;RP0=0, select bank0
  1927  0E94  1303               	bcf	3,6	;RP1=0, select bank0
  1928  0E95  1106               	bcf	6,2	;volatile
  1929  0E96                     l3766:	
  1930                           ;main.c: 63: while(1){
  1931                           
  1932                           
  1933                           ;main.c: 78: UBYTE *dData;
  1934                           ;main.c: 79: dData = ReceivePacket_data();
  1935  0E96  120A  158A  2458  120A  158A  	fcall	_ReceivePacket_data
  1936  0E9B  1283               	bcf	3,5	;RP0=0, select bank0
  1937  0E9C  1303               	bcf	3,6	;RP1=0, select bank0
  1938  0E9D  00E2               	movwf	??_main
  1939  0E9E  0862               	movf	??_main,w
  1940  0E9F  1683               	bsf	3,5	;RP0=1, select bank1
  1941  0EA0  1303               	bcf	3,6	;RP1=0, select bank1
  1942  0EA1  00C0               	movwf	main@dData^(0+128)
  1943                           
  1944                           ;main.c: 80: RB2 = 1;
  1945  0EA2  1283               	bcf	3,5	;RP0=0, select bank0
  1946  0EA3  1303               	bcf	3,6	;RP1=0, select bank0
  1947  0EA4  1506               	bsf	6,2	;volatile
  1948                           
  1949                           ;main.c: 81: _delay((unsigned long)((500)*(10000000/4000.0)));
  1950  0EA5  3007               	movlw	7
  1951  0EA6  1283               	bcf	3,5	;RP0=0, select bank0
  1952  0EA7  1303               	bcf	3,6	;RP1=0, select bank0
  1953  0EA8  00E4               	movwf	??_main+2
  1954  0EA9  3058               	movlw	88
  1955  0EAA  00E3               	movwf	??_main+1
  1956  0EAB  3059               	movlw	89
  1957  0EAC  00E2               	movwf	??_main
  1958  0EAD                     u3567:	
  1959  0EAD  0BE2               	decfsz	??_main,f
  1960  0EAE  2EAD               	goto	u3567
  1961  0EAF  0BE3               	decfsz	??_main+1,f
  1962  0EB0  2EAD               	goto	u3567
  1963  0EB1  0BE4               	decfsz	??_main+2,f
  1964  0EB2  2EAD               	goto	u3567
  1965                           
  1966                           ;main.c: 82: RB2 = 0;
  1967  0EB3  1283               	bcf	3,5	;RP0=0, select bank0
  1968  0EB4  1303               	bcf	3,6	;RP1=0, select bank0
  1969  0EB5  1106               	bcf	6,2	;volatile
  1970                           
  1971                           ;main.c: 84: EEPROM_Write(0x50,0x00,0x00,dData);
  1972  0EB6  01F2               	clrf	EEPROM_Write@high_address
  1973  0EB7  01F3               	clrf	EEPROM_Write@low_address
  1974  0EB8  1683               	bsf	3,5	;RP0=1, select bank1
  1975  0EB9  1303               	bcf	3,6	;RP1=0, select bank1
  1976  0EBA  0840               	movf	main@dData^(0+128),w
  1977  0EBB  1283               	bcf	3,5	;RP0=0, select bank0
  1978  0EBC  1303               	bcf	3,6	;RP1=0, select bank0
  1979  0EBD  00E2               	movwf	??_main
  1980  0EBE  0862               	movf	??_main,w
  1981  0EBF  00F4               	movwf	EEPROM_Write@data
  1982  0EC0  3050               	movlw	80
  1983  0EC1  120A  158A  233C  120A  158A  	fcall	_EEPROM_Write
  1984                           
  1985                           ;main.c: 85: _delay((unsigned long)((100)*(10000000/4000.0)));
  1986  0EC6  3002               	movlw	2
  1987  0EC7  1283               	bcf	3,5	;RP0=0, select bank0
  1988  0EC8  1303               	bcf	3,6	;RP1=0, select bank0
  1989  0EC9  00E4               	movwf	??_main+2
  1990  0ECA  3045               	movlw	69
  1991  0ECB  00E3               	movwf	??_main+1
  1992  0ECC  30A9               	movlw	169
  1993  0ECD  00E2               	movwf	??_main
  1994  0ECE                     u3577:	
  1995  0ECE  0BE2               	decfsz	??_main,f
  1996  0ECF  2ECE               	goto	u3577
  1997  0ED0  0BE3               	decfsz	??_main+1,f
  1998  0ED1  2ECE               	goto	u3577
  1999  0ED2  0BE4               	decfsz	??_main+2,f
  2000  0ED3  2ECE               	goto	u3577
  2001                           
  2002                           ;main.c: 89: UBYTE TXOBC_wad_header = 0x74;
  2003  0ED4  3074               	movlw	116
  2004  0ED5  1283               	bcf	3,5	;RP0=0, select bank0
  2005  0ED6  1303               	bcf	3,6	;RP1=0, select bank0
  2006  0ED7  00E2               	movwf	??_main
  2007  0ED8  0862               	movf	??_main,w
  2008  0ED9  1683               	bsf	3,5	;RP0=1, select bank1
  2009  0EDA  1303               	bcf	3,6	;RP1=0, select bank1
  2010  0EDB  00BE               	movwf	main@TXOBC_wad_header^(0+128)
  2011                           
  2012                           ;main.c: 90: TXOBC_waddress(TXOBC_wad_header, 0x00, 0x00);
  2013  0EDC  01F1               	clrf	TXOBC_waddress@whigh_address
  2014  0EDD  01F2               	clrf	TXOBC_waddress@wlow_address
  2015  0EDE  083E               	movf	main@TXOBC_wad_header^(0+128),w
  2016  0EDF  120A  158A  21D1  120A  158A  	fcall	_TXOBC_waddress
  2017                           
  2018                           ;main.c: 98: _delay((unsigned long)((7000)*(10000000/4000.0)));
  2019  0EE4  3059               	movlw	89
  2020  0EE5  1283               	bcf	3,5	;RP0=0, select bank0
  2021  0EE6  1303               	bcf	3,6	;RP1=0, select bank0
  2022  0EE7  00E4               	movwf	??_main+2
  2023  0EE8  30C8               	movlw	200
  2024  0EE9  00E3               	movwf	??_main+1
  2025  0EEA  3007               	movlw	7
  2026  0EEB  00E2               	movwf	??_main
  2027  0EEC                     u3587:	
  2028  0EEC  0BE2               	decfsz	??_main,f
  2029  0EED  2EEC               	goto	u3587
  2030  0EEE  0BE3               	decfsz	??_main+1,f
  2031  0EEF  2EEC               	goto	u3587
  2032  0EF0  0BE4               	decfsz	??_main+2,f
  2033  0EF1  2EEC               	goto	u3587
  2034  0EF2  2EF3               	nop2
  2035                           
  2036                           ;main.c: 103: if(dData[0]=='n'){
  2037  0EF3  1683               	bsf	3,5	;RP0=1, select bank1
  2038  0EF4  1303               	bcf	3,6	;RP1=0, select bank1
  2039  0EF5  0840               	movf	main@dData^(0+128),w
  2040  0EF6  0084               	movwf	4
  2041  0EF7  306E               	movlw	110
  2042  0EF8  1783               	bsf	3,7	;select IRP bank2
  2043  0EF9  0600               	xorwf	0,w
  2044  0EFA  1D03               	btfss	3,2
  2045  0EFB  2F0D               	goto	l3790
  2046                           
  2047                           ;main.c: 105: UBYTE NM_wad_header = 0x72;
  2048  0EFC  3072               	movlw	114
  2049  0EFD  1283               	bcf	3,5	;RP0=0, select bank0
  2050  0EFE  1303               	bcf	3,6	;RP1=0, select bank0
  2051  0EFF  00E2               	movwf	??_main
  2052  0F00  0862               	movf	??_main,w
  2053  0F01  1683               	bsf	3,5	;RP0=1, select bank1
  2054  0F02  1303               	bcf	3,6	;RP1=0, select bank1
  2055  0F03  00BF               	movwf	main@NM_wad_header^(0+128)
  2056                           
  2057                           ;main.c: 106: NM_waddress(NM_wad_header, 0x00, 0x00);
  2058  0F04  01F1               	clrf	NM_waddress@whigh_address
  2059  0F05  01F2               	clrf	NM_waddress@wlow_address
  2060  0F06  083F               	movf	main@NM_wad_header^(0+128),w
  2061  0F07  120A  158A  2033  120A  158A  	fcall	_NM_waddress
  2062                           
  2063                           ;main.c: 108: }else if(dData[0]=='p'){
  2064  0F0C  2FF1               	goto	l442
  2065  0F0D                     l3790:	
  2066  0F0D  1683               	bsf	3,5	;RP0=1, select bank1
  2067  0F0E  1303               	bcf	3,6	;RP1=0, select bank1
  2068  0F0F  0840               	movf	main@dData^(0+128),w
  2069  0F10  0084               	movwf	4
  2070  0F11  3070               	movlw	112
  2071  0F12  1783               	bsf	3,7	;select IRP bank2
  2072  0F13  0600               	xorwf	0,w
  2073  0F14  1D03               	btfss	3,2
  2074  0F15  2FDC               	goto	l443
  2075                           
  2076                           ;main.c: 113: if(dData[2] == 'r'){
  2077  0F16  0840               	movf	main@dData^(0+128),w
  2078  0F17  3E02               	addlw	2
  2079  0F18  0084               	movwf	4
  2080  0F19  3072               	movlw	114
  2081  0F1A  0600               	xorwf	0,w
  2082  0F1B  1903               	btfsc	3,2
  2083  0F1C  2FC4               	goto	l3816
  2084  0F1D  2FF1               	goto	l442
  2085  0F1E                     l3796:	
  2086                           ;main.c: 119: case 'E':
  2087                           
  2088                           ;main.c: 118: switch(dData[3]){
  2089                           
  2090                           
  2091                           ;main.c: 126: Reset_EPS();
  2092  0F1E  120A  118A  2007  120A  158A  	fcall	_Reset_EPS
  2093                           
  2094                           ;main.c: 127: _delay((unsigned long)((3000)*(10000000/4000.0)));
  2095  0F23  3027               	movlw	39
  2096  0F24  1283               	bcf	3,5	;RP0=0, select bank0
  2097  0F25  1303               	bcf	3,6	;RP1=0, select bank0
  2098  0F26  00E4               	movwf	??_main+2
  2099  0F27  300D               	movlw	13
  2100  0F28  00E3               	movwf	??_main+1
  2101  0F29  3025               	movlw	37
  2102  0F2A  00E2               	movwf	??_main
  2103  0F2B                     u3597:	
  2104  0F2B  0BE2               	decfsz	??_main,f
  2105  0F2C  2F2B               	goto	u3597
  2106  0F2D  0BE3               	decfsz	??_main+1,f
  2107  0F2E  2F2B               	goto	u3597
  2108  0F2F  0BE4               	decfsz	??_main+2,f
  2109  0F30  2F2B               	goto	u3597
  2110  0F31  2F32               	nop2
  2111                           
  2112                           ;main.c: 130: int FMTX_Nprg[5] = {8,7,3,0,0};
  2113  0F32  30A0               	movlw	main@FMTX_Nprg& (0+255)
  2114  0F33  0084               	movwf	4
  2115  0F34  30D6               	movlw	low main@F2013
  2116  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  2117  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  2118  0F37  00E2               	movwf	??_main
  2119  0F38  0804               	movf	4,w
  2120  0F39  00E3               	movwf	??_main+1
  2121  0F3A  300A               	movlw	10
  2122  0F3B  00E4               	movwf	??_main+2
  2123  0F3C                     u3490:	
  2124  0F3C  0862               	movf	??_main,w
  2125  0F3D  0084               	movwf	4
  2126  0F3E  1783               	bsf	3,7	;select IRP bank3
  2127  0F3F  0800               	movf	0,w
  2128  0F40  00E5               	movwf	??_main+3
  2129  0F41  0AE2               	incf	??_main,f
  2130  0F42  0863               	movf	??_main+1,w
  2131  0F43  0084               	movwf	4
  2132  0F44  1383               	bcf	3,7	;select IRP bank1
  2133  0F45  0865               	movf	??_main+3,w
  2134  0F46  0080               	movwf	0
  2135  0F47  0AE3               	incf	??_main+1,f
  2136  0F48  0BE4               	decfsz	??_main+2,f
  2137  0F49  2F3C               	goto	u3490
  2138                           
  2139                           ;main.c: 131: int CWTX_Nprg[5] = {0,1,7,4,7};
  2140  0F4A  30AA               	movlw	main@CWTX_Nprg& (0+255)
  2141  0F4B  0084               	movwf	4
  2142  0F4C  30CC               	movlw	low main@F2015
  2143  0F4D  00E2               	movwf	??_main
  2144  0F4E  0804               	movf	4,w
  2145  0F4F  00E3               	movwf	??_main+1
  2146  0F50  300A               	movlw	10
  2147  0F51  00E4               	movwf	??_main+2
  2148  0F52                     u3500:	
  2149  0F52  0862               	movf	??_main,w
  2150  0F53  0084               	movwf	4
  2151  0F54  1783               	bsf	3,7	;select IRP bank3
  2152  0F55  0800               	movf	0,w
  2153  0F56  00E5               	movwf	??_main+3
  2154  0F57  0AE2               	incf	??_main,f
  2155  0F58  0863               	movf	??_main+1,w
  2156  0F59  0084               	movwf	4
  2157  0F5A  1383               	bcf	3,7	;select IRP bank1
  2158  0F5B  0865               	movf	??_main+3,w
  2159  0F5C  0080               	movwf	0
  2160  0F5D  0AE3               	incf	??_main+1,f
  2161  0F5E  0BE4               	decfsz	??_main+2,f
  2162  0F5F  2F52               	goto	u3500
  2163                           
  2164                           ;main.c: 132: int FMRX_Nprg[5] = {2,4,8,8,7};
  2165  0F60  30B4               	movlw	main@FMRX_Nprg& (0+255)
  2166  0F61  0084               	movwf	4
  2167  0F62  30C2               	movlw	low main@F2017
  2168  0F63  00E2               	movwf	??_main
  2169  0F64  0804               	movf	4,w
  2170  0F65  00E3               	movwf	??_main+1
  2171  0F66  300A               	movlw	10
  2172  0F67  00E4               	movwf	??_main+2
  2173  0F68                     u3510:	
  2174  0F68  0862               	movf	??_main,w
  2175  0F69  0084               	movwf	4
  2176  0F6A  1783               	bsf	3,7	;select IRP bank3
  2177  0F6B  0800               	movf	0,w
  2178  0F6C  00E5               	movwf	??_main+3
  2179  0F6D  0AE2               	incf	??_main,f
  2180  0F6E  0863               	movf	??_main+1,w
  2181  0F6F  0084               	movwf	4
  2182  0F70  1383               	bcf	3,7	;select IRP bank1
  2183  0F71  0865               	movf	??_main+3,w
  2184  0F72  0080               	movwf	0
  2185  0F73  0AE3               	incf	??_main+1,f
  2186  0F74  0BE4               	decfsz	??_main+2,f
  2187  0F75  2F68               	goto	u3510
  2188                           
  2189                           ;main.c: 134: FMTX(FMTX_Nref, FMTX_Nprg);
  2190  0F76  1683               	bsf	3,5	;RP0=1, select bank1
  2191  0F77  1303               	bcf	3,6	;RP1=0, select bank1
  2192  0F78  0846               	movf	(_FMTX_Nref+1)^(0+128),w
  2193  0F79  1283               	bcf	3,5	;RP0=0, select bank0
  2194  0F7A  1303               	bcf	3,6	;RP1=0, select bank0
  2195  0F7B  00DD               	movwf	FMTX@Nref+1
  2196  0F7C  1683               	bsf	3,5	;RP0=1, select bank1
  2197  0F7D  1303               	bcf	3,6	;RP1=0, select bank1
  2198  0F7E  0845               	movf	_FMTX_Nref^(0+128),w
  2199  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  2200  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  2201  0F81  00DC               	movwf	FMTX@Nref
  2202  0F82  30A0               	movlw	(low (main@FMTX_Nprg| 0))& (0+255)
  2203  0F83  00DE               	movwf	FMTX@Nprg
  2204  0F84  3000               	movlw	0
  2205  0F85  00DF               	movwf	FMTX@Nprg+1
  2206  0F86  120A  158A  2143  120A  158A  	fcall	_FMTX
  2207                           
  2208                           ;main.c: 135: CWTX(CWTX_Nref, CWTX_Nprg);
  2209  0F8B  1683               	bsf	3,5	;RP0=1, select bank1
  2210  0F8C  1303               	bcf	3,6	;RP1=0, select bank1
  2211  0F8D  0844               	movf	(_CWTX_Nref+1)^(0+128),w
  2212  0F8E  1283               	bcf	3,5	;RP0=0, select bank0
  2213  0F8F  1303               	bcf	3,6	;RP1=0, select bank0
  2214  0F90  00DD               	movwf	CWTX@Nref+1
  2215  0F91  1683               	bsf	3,5	;RP0=1, select bank1
  2216  0F92  1303               	bcf	3,6	;RP1=0, select bank1
  2217  0F93  0843               	movf	_CWTX_Nref^(0+128),w
  2218  0F94  1283               	bcf	3,5	;RP0=0, select bank0
  2219  0F95  1303               	bcf	3,6	;RP1=0, select bank0
  2220  0F96  00DC               	movwf	CWTX@Nref
  2221  0F97  30AA               	movlw	(low (main@CWTX_Nprg| 0))& (0+255)
  2222  0F98  00DE               	movwf	CWTX@Nprg
  2223  0F99  3000               	movlw	0
  2224  0F9A  00DF               	movwf	CWTX@Nprg+1
  2225  0F9B  120A  158A  20EB  120A  158A  	fcall	_CWTX
  2226                           
  2227                           ;main.c: 136: FMRX(FMRX_Nref, FMRX_Nprg);
  2228  0FA0  1683               	bsf	3,5	;RP0=1, select bank1
  2229  0FA1  1303               	bcf	3,6	;RP1=0, select bank1
  2230  0FA2  0842               	movf	(_FMRX_Nref+1)^(0+128),w
  2231  0FA3  1283               	bcf	3,5	;RP0=0, select bank0
  2232  0FA4  1303               	bcf	3,6	;RP1=0, select bank0
  2233  0FA5  00DD               	movwf	FMRX@Nref+1
  2234  0FA6  1683               	bsf	3,5	;RP0=1, select bank1
  2235  0FA7  1303               	bcf	3,6	;RP1=0, select bank1
  2236  0FA8  0841               	movf	_FMRX_Nref^(0+128),w
  2237  0FA9  1283               	bcf	3,5	;RP0=0, select bank0
  2238  0FAA  1303               	bcf	3,6	;RP1=0, select bank0
  2239  0FAB  00DC               	movwf	FMRX@Nref
  2240  0FAC  30B4               	movlw	(low (main@FMRX_Nprg| 0))& (0+255)
  2241  0FAD  00DE               	movwf	FMRX@Nprg
  2242  0FAE  3000               	movlw	0
  2243  0FAF  00DF               	movwf	FMRX@Nprg+1
  2244  0FB0  120A  158A  2117  120A  158A  	fcall	_FMRX
  2245                           
  2246                           ;main.c: 137: _delay((unsigned long)((500)*(10000000/4000.0)));
  2247  0FB5  3007               	movlw	7
  2248  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  2249  0FB7  1303               	bcf	3,6	;RP1=0, select bank0
  2250  0FB8  00E4               	movwf	??_main+2
  2251  0FB9  3058               	movlw	88
  2252  0FBA  00E3               	movwf	??_main+1
  2253  0FBB  3059               	movlw	89
  2254  0FBC  00E2               	movwf	??_main
  2255  0FBD                     u3607:	
  2256  0FBD  0BE2               	decfsz	??_main,f
  2257  0FBE  2FBD               	goto	u3607
  2258  0FBF  0BE3               	decfsz	??_main+1,f
  2259  0FC0  2FBD               	goto	u3607
  2260  0FC1  0BE4               	decfsz	??_main+2,f
  2261  0FC2  2FBD               	goto	u3607
  2262                           
  2263                           ;main.c: 154: }
  2264                           
  2265                           ;main.c: 153: break;
  2266                           
  2267                           ;main.c: 151: default:
  2268                           
  2269                           ;main.c: 150: break;
  2270                           
  2271                           ;main.c: 148: case 'T':
  2272                           
  2273                           ;main.c: 147: break;
  2274                           
  2275                           ;main.c: 145: case 'N':
  2276                           
  2277                           ;main.c: 144: break;
  2278                           
  2279                           ;main.c: 142: case '3':
  2280                           
  2281                           ;main.c: 141: break;
  2282                           
  2283                           ;main.c: 139: case 'I':
  2284                           
  2285                           ;main.c: 138: break;
  2286  0FC3  2FF1               	goto	l442
  2287  0FC4                     l3816:	
  2288  0FC4  1683               	bsf	3,5	;RP0=1, select bank1
  2289  0FC5  1303               	bcf	3,6	;RP1=0, select bank1
  2290  0FC6  0840               	movf	main@dData^(0+128),w
  2291  0FC7  3E03               	addlw	3
  2292  0FC8  0084               	movwf	4
  2293  0FC9  1783               	bsf	3,7	;select IRP bank2
  2294  0FCA  0800               	movf	0,w
  2295                           
  2296                           ; Switch size 1, requested type "space"
  2297                           ; Number of cases is 5, Range of values is 51 to 84
  2298                           ; switch strategies available:
  2299                           ; Name         Instructions Cycles
  2300                           ; simple_byte           16     9 (average)
  2301                           ; direct_byte          113    11 (fixed)
  2302                           ; jumptable            263     9 (fixed)
  2303                           ;	Chosen strategy is simple_byte
  2304  0FCB  3A33               	xorlw	51	; case 51
  2305  0FCC  1903               	skipnz
  2306  0FCD  2FF1               	goto	l442
  2307  0FCE  3A76               	xorlw	118	; case 69
  2308  0FCF  1903               	skipnz
  2309  0FD0  2F1E               	goto	l3796
  2310  0FD1  3A0C               	xorlw	12	; case 73
  2311  0FD2  1903               	skipnz
  2312  0FD3  2FF1               	goto	l442
  2313  0FD4  3A07               	xorlw	7	; case 78
  2314  0FD5  1903               	skipnz
  2315  0FD6  2FF1               	goto	l442
  2316  0FD7  3A1A               	xorlw	26	; case 84
  2317  0FD8  1903               	skipnz
  2318  0FD9  2FF1               	goto	l442
  2319  0FDA  2FF1               	goto	l442
  2320                           
  2321                           ;main.c: 158: }
  2322                           ;main.c: 159: }else{
  2323                           
  2324                           ;main.c: 156: }else if(dData[2] == 't'){
  2325  0FDB  2FF1               	goto	l442
  2326  0FDC                     l443:	
  2327                           
  2328                           ;main.c: 160: RB2 = 1;
  2329  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  2330  0FDD  1303               	bcf	3,6	;RP1=0, select bank0
  2331  0FDE  1506               	bsf	6,2	;volatile
  2332                           
  2333                           ;main.c: 161: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2334  0FDF  300D               	movlw	13
  2335  0FE0  1283               	bcf	3,5	;RP0=0, select bank0
  2336  0FE1  1303               	bcf	3,6	;RP1=0, select bank0
  2337  0FE2  00E4               	movwf	??_main+2
  2338  0FE3  30AF               	movlw	175
  2339  0FE4  00E3               	movwf	??_main+1
  2340  0FE5  30B5               	movlw	181
  2341  0FE6  00E2               	movwf	??_main
  2342  0FE7                     u3617:	
  2343  0FE7  0BE2               	decfsz	??_main,f
  2344  0FE8  2FE7               	goto	u3617
  2345  0FE9  0BE3               	decfsz	??_main+1,f
  2346  0FEA  2FE7               	goto	u3617
  2347  0FEB  0BE4               	decfsz	??_main+2,f
  2348  0FEC  2FE7               	goto	u3617
  2349  0FED  2FEE               	nop2
  2350                           
  2351                           ;main.c: 162: RB2 = 0;
  2352  0FEE  1283               	bcf	3,5	;RP0=0, select bank0
  2353  0FEF  1303               	bcf	3,6	;RP1=0, select bank0
  2354  0FF0  1106               	bcf	6,2	;volatile
  2355  0FF1                     l442:	
  2356                           
  2357                           ;main.c: 163: }
  2358                           ;main.c: 207: _delay((unsigned long)((500)*(10000000/4000.0)));
  2359  0FF1  3007               	movlw	7
  2360  0FF2  1283               	bcf	3,5	;RP0=0, select bank0
  2361  0FF3  1303               	bcf	3,6	;RP1=0, select bank0
  2362  0FF4  00E4               	movwf	??_main+2
  2363  0FF5  3058               	movlw	88
  2364  0FF6  00E3               	movwf	??_main+1
  2365  0FF7  3059               	movlw	89
  2366  0FF8  00E2               	movwf	??_main
  2367  0FF9                     u3627:	
  2368  0FF9  0BE2               	decfsz	??_main,f
  2369  0FFA  2FF9               	goto	u3627
  2370  0FFB  0BE3               	decfsz	??_main+1,f
  2371  0FFC  2FF9               	goto	u3627
  2372  0FFD  0BE4               	decfsz	??_main+2,f
  2373  0FFE  2FF9               	goto	u3627
  2374  0FFF  2E96               	goto	l3766
  2375  1000                     __end_of_main:	
  2376                           ;main.c: 208: }
  2377                           ;main.c: 209: return;
  2378                           
  2379                           
  2380                           	psect	text1
  2381  09D1                     __ptext1:	
  2382 ;; *************** function _TXOBC_waddress *****************
  2383 ;; Defined at:
  2384 ;;		line 78 in file "UART.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;  TXOBC_wad_he    1    wreg     unsigned char 
  2387 ;;  whigh_addres    1    1[COMMON] unsigned char 
  2388 ;;  wlow_address    1    2[COMMON] unsigned char 
  2389 ;; Auto vars:     Size  Location     Type
  2390 ;;  TXOBC_wad_he    1    5[COMMON] unsigned char 
  2391 ;; Return value:  Size  Location     Type
  2392 ;;                  1    wreg      void 
  2393 ;; Registers used:
  2394 ;;		wreg, status,2, status,0, pclath, cstack
  2395 ;; Tracked objects:
  2396 ;;		On entry : 0/0
  2397 ;;		On exit  : 0/0
  2398 ;;		Unchanged: 0/0
  2399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2400 ;;      Params:         2       0       0       0       0
  2401 ;;      Locals:         1       0       0       0       0
  2402 ;;      Temps:          2       0       0       0       0
  2403 ;;      Totals:         5       0       0       0       0
  2404 ;;Total ram usage:        5 bytes
  2405 ;; Hardware stack levels used:    1
  2406 ;; Hardware stack levels required when called:    1
  2407 ;; This function calls:
  2408 ;;		_putch
  2409 ;; This function is called by:
  2410 ;;		_main
  2411 ;; This function uses a non-reentrant model
  2412 ;;
  2413                           
  2414                           
  2415                           ;psect for function _TXOBC_waddress
  2416  09D1                     _TXOBC_waddress:	
  2417                           
  2418                           ;incstack = 0
  2419                           ; Regs used in _TXOBC_waddress: [wreg+status,2+status,0+pclath+cstack]
  2420                           ;TXOBC_waddress@TXOBC_wad_header stored from wreg
  2421  09D1  00F5               	movwf	TXOBC_waddress@TXOBC_wad_header
  2422                           
  2423                           ;UART.c: 79: RC5 = 1;
  2424  09D2  1283               	bcf	3,5	;RP0=0, select bank0
  2425  09D3  1303               	bcf	3,6	;RP1=0, select bank0
  2426  09D4  1687               	bsf	7,5	;volatile
  2427                           
  2428                           ;UART.c: 80: _delay((unsigned long)((50)*(10000000/4000.0)));
  2429  09D5  30A3               	movlw	163
  2430  09D6  00F4               	movwf	??_TXOBC_waddress+1
  2431  09D7  3055               	movlw	85
  2432  09D8  00F3               	movwf	??_TXOBC_waddress
  2433  09D9                     u3637:	
  2434  09D9  0BF3               	decfsz	??_TXOBC_waddress,f
  2435  09DA  29D9               	goto	u3637
  2436  09DB  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2437  09DC  29D9               	goto	u3637
  2438                           
  2439                           ;UART.c: 81: putch(TXOBC_wad_header);
  2440  09DD  0875               	movf	TXOBC_waddress@TXOBC_wad_header,w
  2441  09DE  160A  118A  27F0  120A  158A  	fcall	_putch
  2442                           
  2443                           ;UART.c: 82: _delay((unsigned long)((50)*(10000000/4000.0)));
  2444  09E3  30A3               	movlw	163
  2445  09E4  00F4               	movwf	??_TXOBC_waddress+1
  2446  09E5  3055               	movlw	85
  2447  09E6  00F3               	movwf	??_TXOBC_waddress
  2448  09E7                     u3647:	
  2449  09E7  0BF3               	decfsz	??_TXOBC_waddress,f
  2450  09E8  29E7               	goto	u3647
  2451  09E9  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2452  09EA  29E7               	goto	u3647
  2453                           
  2454                           ;UART.c: 83: putch(whigh_address);
  2455  09EB  0871               	movf	TXOBC_waddress@whigh_address,w
  2456  09EC  160A  118A  27F0  120A  158A  	fcall	_putch
  2457                           
  2458                           ;UART.c: 84: _delay((unsigned long)((50)*(10000000/4000.0)));
  2459  09F1  30A3               	movlw	163
  2460  09F2  00F4               	movwf	??_TXOBC_waddress+1
  2461  09F3  3055               	movlw	85
  2462  09F4  00F3               	movwf	??_TXOBC_waddress
  2463  09F5                     u3657:	
  2464  09F5  0BF3               	decfsz	??_TXOBC_waddress,f
  2465  09F6  29F5               	goto	u3657
  2466  09F7  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2467  09F8  29F5               	goto	u3657
  2468                           
  2469                           ;UART.c: 85: putch(wlow_address);
  2470  09F9  0872               	movf	TXOBC_waddress@wlow_address,w
  2471  09FA  160A  118A  27F0  120A  158A  	fcall	_putch
  2472                           
  2473                           ;UART.c: 86: _delay((unsigned long)((50)*(10000000/4000.0)));
  2474  09FF  30A3               	movlw	163
  2475  0A00  00F4               	movwf	??_TXOBC_waddress+1
  2476  0A01  3055               	movlw	85
  2477  0A02  00F3               	movwf	??_TXOBC_waddress
  2478  0A03                     u3667:	
  2479  0A03  0BF3               	decfsz	??_TXOBC_waddress,f
  2480  0A04  2A03               	goto	u3667
  2481  0A05  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2482  0A06  2A03               	goto	u3667
  2483                           
  2484                           ;UART.c: 87: RC5 = 0;
  2485  0A07  1283               	bcf	3,5	;RP0=0, select bank0
  2486  0A08  1303               	bcf	3,6	;RP1=0, select bank0
  2487  0A09  1287               	bcf	7,5	;volatile
  2488  0A0A  0008               	return
  2489  0A0B                     __end_of_TXOBC_waddress:	
  2490                           
  2491                           	psect	text2
  2492  0007                     __ptext2:	
  2493 ;; *************** function _Reset_EPS *****************
  2494 ;; Defined at:
  2495 ;;		line 19 in file "EPS.c"
  2496 ;; Parameters:    Size  Location     Type
  2497 ;;		None
  2498 ;; Auto vars:     Size  Location     Type
  2499 ;;		None
  2500 ;; Return value:  Size  Location     Type
  2501 ;;                  1    wreg      void 
  2502 ;; Registers used:
  2503 ;;		wreg
  2504 ;; Tracked objects:
  2505 ;;		On entry : 0/0
  2506 ;;		On exit  : 0/0
  2507 ;;		Unchanged: 0/0
  2508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2509 ;;      Params:         0       0       0       0       0
  2510 ;;      Locals:         0       0       0       0       0
  2511 ;;      Temps:          3       0       0       0       0
  2512 ;;      Totals:         3       0       0       0       0
  2513 ;;Total ram usage:        3 bytes
  2514 ;; Hardware stack levels used:    1
  2515 ;; This function calls:
  2516 ;;		Nothing
  2517 ;; This function is called by:
  2518 ;;		_main
  2519 ;; This function uses a non-reentrant model
  2520 ;;
  2521                           
  2522                           
  2523                           ;psect for function _Reset_EPS
  2524  0007                     _Reset_EPS:	
  2525                           
  2526                           ;EPS.c: 20: RB4 = 1;
  2527                           
  2528                           ;incstack = 0
  2529                           ; Regs used in _Reset_EPS: [wreg]
  2530  0007  1283               	bcf	3,5	;RP0=0, select bank0
  2531  0008  1303               	bcf	3,6	;RP1=0, select bank0
  2532  0009  1606               	bsf	6,4	;volatile
  2533                           
  2534                           ;EPS.c: 21: RA1 = 1;
  2535  000A  1485               	bsf	5,1	;volatile
  2536                           
  2537                           ;EPS.c: 22: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2538  000B  3040               	movlw	64
  2539  000C  00F2               	movwf	??_Reset_EPS+2
  2540  000D  306A               	movlw	106
  2541  000E  00F1               	movwf	??_Reset_EPS+1
  2542  000F  3097               	movlw	151
  2543  0010  00F0               	movwf	??_Reset_EPS
  2544  0011                     u3677:	
  2545  0011  0BF0               	decfsz	??_Reset_EPS,f
  2546  0012  2811               	goto	u3677
  2547  0013  0BF1               	decfsz	??_Reset_EPS+1,f
  2548  0014  2811               	goto	u3677
  2549  0015  0BF2               	decfsz	??_Reset_EPS+2,f
  2550  0016  2811               	goto	u3677
  2551  0017  2818               	nop2
  2552                           
  2553                           ;EPS.c: 23: RB4 = 0;
  2554  0018  1283               	bcf	3,5	;RP0=0, select bank0
  2555  0019  1303               	bcf	3,6	;RP1=0, select bank0
  2556  001A  1206               	bcf	6,4	;volatile
  2557                           
  2558                           ;EPS.c: 24: RA1 = 0;
  2559  001B  1085               	bcf	5,1	;volatile
  2560                           
  2561                           ;EPS.c: 25: _delay((unsigned long)((500)*(10000000/4000.0)));
  2562  001C  3007               	movlw	7
  2563  001D  00F2               	movwf	??_Reset_EPS+2
  2564  001E  3058               	movlw	88
  2565  001F  00F1               	movwf	??_Reset_EPS+1
  2566  0020  3059               	movlw	89
  2567  0021  00F0               	movwf	??_Reset_EPS
  2568  0022                     u3687:	
  2569  0022  0BF0               	decfsz	??_Reset_EPS,f
  2570  0023  2822               	goto	u3687
  2571  0024  0BF1               	decfsz	??_Reset_EPS+1,f
  2572  0025  2822               	goto	u3687
  2573  0026  0BF2               	decfsz	??_Reset_EPS+2,f
  2574  0027  2822               	goto	u3687
  2575  0028  2829               	nop2
  2576  0029  0008               	return
  2577  002A                     __end_of_Reset_EPS:	
  2578                           
  2579                           	psect	text3
  2580  0C58                     __ptext3:	
  2581 ;; *************** function _ReceivePacket_data *****************
  2582 ;; Defined at:
  2583 ;;		line 359 in file "decode_AX25.c"
  2584 ;; Parameters:    Size  Location     Type
  2585 ;;		None
  2586 ;; Auto vars:     Size  Location     Type
  2587 ;;  i               2   31[BANK0 ] unsigned int 
  2588 ;;  fcschecker      2   29[BANK0 ] unsigned int 
  2589 ;; Return value:  Size  Location     Type
  2590 ;;                  1    wreg      PTR unsigned char 
  2591 ;; Registers used:
  2592 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2593 ;; Tracked objects:
  2594 ;;		On entry : 0/0
  2595 ;;		On exit  : 0/0
  2596 ;;		Unchanged: 0/0
  2597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2598 ;;      Params:         0       0       0       0       0
  2599 ;;      Locals:         0       4       0       0       0
  2600 ;;      Temps:          2       0       0       0       0
  2601 ;;      Totals:         2       4       0       0       0
  2602 ;;Total ram usage:        6 bytes
  2603 ;; Hardware stack levels used:    1
  2604 ;; Hardware stack levels required when called:    2
  2605 ;; This function calls:
  2606 ;;		_fcscheck
  2607 ;;		_getdata
  2608 ;;		_waitFlag
  2609 ;; This function is called by:
  2610 ;;		_main
  2611 ;; This function uses a non-reentrant model
  2612 ;;
  2613                           
  2614                           
  2615                           ;psect for function _ReceivePacket_data
  2616  0C58                     _ReceivePacket_data:	
  2617                           
  2618                           ;decode_AX25.c: 360: UINT fcschecker;
  2619                           ;decode_AX25.c: 363: waitFlag();
  2620                           
  2621                           ;incstack = 0
  2622                           ; Regs used in _ReceivePacket_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2623  0C58  120A  118A  2327  120A  158A  	fcall	_waitFlag
  2624                           
  2625                           ;decode_AX25.c: 365: getdata();
  2626  0C5D  120A  158A  23F7  120A  158A  	fcall	_getdata
  2627                           
  2628                           ;decode_AX25.c: 367: fcschecker = fcscheck();
  2629  0C62  120A  118A  202A  120A  158A  	fcall	_fcscheck
  2630  0C67  0871               	movf	?_fcscheck+1,w
  2631  0C68  1283               	bcf	3,5	;RP0=0, select bank0
  2632  0C69  1303               	bcf	3,6	;RP1=0, select bank0
  2633  0C6A  00BE               	movwf	ReceivePacket_data@fcschecker+1
  2634  0C6B  0870               	movf	?_fcscheck,w
  2635  0C6C  00BD               	movwf	ReceivePacket_data@fcschecker
  2636                           
  2637                           ;decode_AX25.c: 369: if(fcschecker == 1){
  2638  0C6D  033D               	decf	ReceivePacket_data@fcschecker,w
  2639  0C6E  043E               	iorwf	ReceivePacket_data@fcschecker+1,w
  2640  0C6F  1D03               	btfss	3,2
  2641  0C70  2CB7               	goto	l3400
  2642                           
  2643                           ;decode_AX25.c: 370: for(UINT i=0; i<commandSize; i++){
  2644  0C71  01BF               	clrf	ReceivePacket_data@i
  2645  0C72  01C0               	clrf	ReceivePacket_data@i+1
  2646  0C73  3001               	movlw	low (_commandSize-__stringbase)
  2647  0C74  0084               	movwf	4
  2648  0C75  120A  158A  2000  120A  158A  	fcall	stringdir
  2649  0C7A  00FA               	movwf	??_ReceivePacket_data
  2650  0C7B  120A  158A  2000  120A  158A  	fcall	stringdir
  2651  0C80  00FB               	movwf	??_ReceivePacket_data+1
  2652  0C81  087B               	movf	??_ReceivePacket_data+1,w
  2653  0C82  0240               	subwf	ReceivePacket_data@i+1,w
  2654  0C83  1D03               	skipz
  2655  0C84  2C87               	goto	u3075
  2656  0C85  087A               	movf	??_ReceivePacket_data,w
  2657  0C86  023F               	subwf	ReceivePacket_data@i,w
  2658  0C87                     u3075:	
  2659  0C87  1803               	btfsc	3,0
  2660  0C88  2CB1               	goto	l3392
  2661  0C89                     l3386:	
  2662                           
  2663                           ;decode_AX25.c: 371: dData[i] = dPacket[i+20];
  2664  0C89  083F               	movf	ReceivePacket_data@i,w
  2665  0C8A  3E14               	addlw	20
  2666  0C8B  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2667  0C8C  0084               	movwf	4
  2668  0C8D  1783               	bsf	3,7	;select IRP bank3
  2669  0C8E  0800               	movf	0,w
  2670  0C8F  00FA               	movwf	??_ReceivePacket_data
  2671  0C90  083F               	movf	ReceivePacket_data@i,w
  2672  0C91  3E30               	addlw	(low (_dData| (0+256)))& (0+255)
  2673  0C92  0084               	movwf	4
  2674  0C93  087A               	movf	??_ReceivePacket_data,w
  2675  0C94  0080               	movwf	0
  2676  0C95  3001               	movlw	1
  2677  0C96  07BF               	addwf	ReceivePacket_data@i,f
  2678  0C97  1803               	skipnc
  2679  0C98  0AC0               	incf	ReceivePacket_data@i+1,f
  2680  0C99  3000               	movlw	0
  2681  0C9A  07C0               	addwf	ReceivePacket_data@i+1,f
  2682  0C9B  3001               	movlw	low (_commandSize-__stringbase)
  2683  0C9C  0084               	movwf	4
  2684  0C9D  120A  158A  2000  120A  158A  	fcall	stringdir
  2685  0CA2  00FA               	movwf	??_ReceivePacket_data
  2686  0CA3  120A  158A  2000  120A  158A  	fcall	stringdir
  2687  0CA8  00FB               	movwf	??_ReceivePacket_data+1
  2688  0CA9  087B               	movf	??_ReceivePacket_data+1,w
  2689  0CAA  0240               	subwf	ReceivePacket_data@i+1,w
  2690  0CAB  1D03               	skipz
  2691  0CAC  2CAF               	goto	u3085
  2692  0CAD  087A               	movf	??_ReceivePacket_data,w
  2693  0CAE  023F               	subwf	ReceivePacket_data@i,w
  2694  0CAF                     u3085:	
  2695  0CAF  1C03               	skipc
  2696  0CB0  2C89               	goto	l3386
  2697  0CB1                     l3392:	
  2698                           
  2699                           ;decode_AX25.c: 372: }
  2700                           ;decode_AX25.c: 373: dPacketnum = 0;
  2701  0CB1  01E8               	clrf	_dPacketnum
  2702  0CB2  01E9               	clrf	_dPacketnum+1
  2703                           
  2704                           ;decode_AX25.c: 374: rcv_state = 0;
  2705  0CB3  01EA               	clrf	_rcv_state
  2706  0CB4  01EB               	clrf	_rcv_state+1
  2707                           
  2708                           ;decode_AX25.c: 375: return dData;
  2709  0CB5  3030               	movlw	(low (_dData| (0+256)))& (0+255)
  2710                           
  2711                           ;decode_AX25.c: 376: }else{
  2712  0CB6  0008               	return
  2713  0CB7                     l3400:	
  2714                           
  2715                           ;decode_AX25.c: 377: dPacketnum = 0;
  2716  0CB7  01E8               	clrf	_dPacketnum
  2717  0CB8  01E9               	clrf	_dPacketnum+1
  2718                           
  2719                           ;decode_AX25.c: 378: rcv_state = 0;
  2720  0CB9  01EA               	clrf	_rcv_state
  2721  0CBA  01EB               	clrf	_rcv_state+1
  2722                           
  2723                           ;decode_AX25.c: 379: return 0x00;
  2724  0CBB  3000               	movlw	0
  2725  0CBC  0008               	return
  2726  0CBD                     __end_of_ReceivePacket_data:	
  2727                           
  2728                           	psect	text4
  2729  0327                     __ptext4:	
  2730 ;; *************** function _waitFlag *****************
  2731 ;; Defined at:
  2732 ;;		line 54 in file "decode_AX25.c"
  2733 ;; Parameters:    Size  Location     Type
  2734 ;;		None
  2735 ;; Auto vars:     Size  Location     Type
  2736 ;;  j               2   24[BANK0 ] unsigned int 
  2737 ;;  j               2   10[BANK0 ] unsigned int 
  2738 ;;  j               2   22[BANK0 ] unsigned int 
  2739 ;;  j               2    8[BANK0 ] unsigned int 
  2740 ;;  j               2   20[BANK0 ] unsigned int 
  2741 ;;  j               2    6[BANK0 ] unsigned int 
  2742 ;;  j               2   18[BANK0 ] unsigned int 
  2743 ;;  j               2    4[BANK0 ] unsigned int 
  2744 ;;  j               2   16[BANK0 ] unsigned int 
  2745 ;;  j               2    2[BANK0 ] unsigned int 
  2746 ;;  i               2    0[BANK0 ] unsigned int 
  2747 ;;  j               2   14[BANK0 ] unsigned int 
  2748 ;;  j               2   12[BANK0 ] unsigned int 
  2749 ;;  flag_judge      2   26[BANK0 ] unsigned int 
  2750 ;;  buf             1   28[BANK0 ] unsigned char 
  2751 ;; Return value:  Size  Location     Type
  2752 ;;                  1    wreg      void 
  2753 ;; Registers used:
  2754 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2760 ;;      Params:         0       0       0       0       0
  2761 ;;      Locals:         0      29       0       0       0
  2762 ;;      Temps:          4       0       0       0       0
  2763 ;;      Totals:         4      29       0       0       0
  2764 ;;Total ram usage:       33 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; Hardware stack levels required when called:    1
  2767 ;; This function calls:
  2768 ;;		_getbit
  2769 ;; This function is called by:
  2770 ;;		_ReceivePacket_data
  2771 ;;		_ReceivePacket
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           
  2776                           ;psect for function _waitFlag
  2777  0327                     _waitFlag:	
  2778                           
  2779                           ;decode_AX25.c: 55: UINT flag_judge;
  2780                           ;decode_AX25.c: 56: UBYTE buf = 0xff;
  2781                           
  2782                           ;incstack = 0
  2783                           ; Regs used in _waitFlag: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2784  0327  30FF               	movlw	255
  2785  0328  00F6               	movwf	??_waitFlag
  2786  0329  0876               	movf	??_waitFlag,w
  2787  032A  1283               	bcf	3,5	;RP0=0, select bank0
  2788  032B  1303               	bcf	3,6	;RP1=0, select bank0
  2789  032C  00BC               	movwf	waitFlag@buf
  2790  032D                     L6:	
  2791                           
  2792                           ;decode_AX25.c: 271: rcv_state = 0;
  2793  032D  01EA               	clrf	_rcv_state
  2794  032E  01EB               	clrf	_rcv_state+1
  2795  032F                     l3070:	
  2796  032F  3000               	movlw	0
  2797  0330  026B               	subwf	_rcv_state+1,w
  2798  0331  3002               	movlw	2
  2799  0332  1903               	skipnz
  2800  0333  026A               	subwf	_rcv_state,w
  2801  0334  1803               	btfsc	3,0
  2802  0335  0008               	return
  2803  0336                     l2704:	
  2804                           ;decode_AX25.c: 59: while(buf != 0x7e){
  2805                           
  2806                           ;decode_AX25.c: 58: while(rcv_state < 2){
  2807                           
  2808                           ;decode_AX25.c: 57: rcv_state = 0;
  2809                           
  2810  0336  307E               	movlw	126
  2811  0337  063C               	xorwf	waitFlag@buf,w
  2812  0338  1903               	btfsc	3,2
  2813  0339  2B86               	goto	l2726
  2814                           
  2815                           ;decode_AX25.c: 60: flag_judge = getbit();
  2816  033A  120A  158A  2297  120A  118A  	fcall	_getbit
  2817  033F  0871               	movf	?_getbit+1,w
  2818  0340  1283               	bcf	3,5	;RP0=0, select bank0
  2819  0341  1303               	bcf	3,6	;RP1=0, select bank0
  2820  0342  00BB               	movwf	waitFlag@flag_judge+1
  2821  0343  0870               	movf	?_getbit,w
  2822  0344  00BA               	movwf	waitFlag@flag_judge
  2823                           
  2824                           ;decode_AX25.c: 61: buf = buf << 1;
  2825  0345  083C               	movf	waitFlag@buf,w
  2826  0346  00F6               	movwf	??_waitFlag
  2827  0347  0776               	addwf	??_waitFlag,w
  2828  0348  00F7               	movwf	??_waitFlag+1
  2829  0349  0877               	movf	??_waitFlag+1,w
  2830  034A  00BC               	movwf	waitFlag@buf
  2831                           
  2832                           ;decode_AX25.c: 63: buf = buf | 0x00;
  2833  034B  083A               	movf	waitFlag@flag_judge,w
  2834  034C  043B               	iorwf	waitFlag@flag_judge+1,w
  2835  034D  1903               	btfsc	3,2
  2836  034E  2B36               	goto	l2704
  2837                           
  2838                           ;decode_AX25.c: 65: buf = buf | 0x01;
  2839                           
  2840                           ;decode_AX25.c: 64: }else{
  2841  034F  083C               	movf	waitFlag@buf,w
  2842  0350  3801               	iorlw	1
  2843  0351  00F6               	movwf	??_waitFlag
  2844  0352  0876               	movf	??_waitFlag,w
  2845  0353  00BC               	movwf	waitFlag@buf
  2846  0354  2B36               	goto	l2704
  2847  0355                     l2706:	
  2848                           ;decode_AX25.c: 66: }
  2849                           ;decode_AX25.c: 67: }
  2850                           ;decode_AX25.c: 71: while(buf == 0x7e){
  2851                           
  2852                           
  2853                           ;decode_AX25.c: 72: for(UINT i=0;i<8;i++){
  2854  0355  01A0               	clrf	waitFlag@i
  2855  0356  01A1               	clrf	waitFlag@i+1
  2856  0357  3000               	movlw	0
  2857  0358  0221               	subwf	waitFlag@i+1,w
  2858  0359  3008               	movlw	8
  2859  035A  1903               	skipnz
  2860  035B  0220               	subwf	waitFlag@i,w
  2861  035C  1803               	btfsc	3,0
  2862  035D  2B86               	goto	l2726
  2863  035E                     l2712:	
  2864                           
  2865                           ;decode_AX25.c: 73: flag_judge = getbit();
  2866  035E  120A  158A  2297  120A  118A  	fcall	_getbit
  2867  0363  0871               	movf	?_getbit+1,w
  2868  0364  1283               	bcf	3,5	;RP0=0, select bank0
  2869  0365  1303               	bcf	3,6	;RP1=0, select bank0
  2870  0366  00BB               	movwf	waitFlag@flag_judge+1
  2871  0367  0870               	movf	?_getbit,w
  2872  0368  00BA               	movwf	waitFlag@flag_judge
  2873                           
  2874                           ;decode_AX25.c: 74: buf = buf >> 1;
  2875  0369  083C               	movf	waitFlag@buf,w
  2876  036A  00F6               	movwf	??_waitFlag
  2877  036B  1003               	clrc
  2878  036C  0C76               	rrf	??_waitFlag,w
  2879  036D  00F7               	movwf	??_waitFlag+1
  2880  036E  0877               	movf	??_waitFlag+1,w
  2881  036F  00BC               	movwf	waitFlag@buf
  2882                           
  2883                           ;decode_AX25.c: 76: buf = buf | 0x00;
  2884  0370  083A               	movf	waitFlag@flag_judge,w
  2885  0371  043B               	iorwf	waitFlag@flag_judge+1,w
  2886  0372  1903               	btfsc	3,2
  2887  0373  2B79               	goto	l2722
  2888                           
  2889                           ;decode_AX25.c: 78: buf = buf | 0x80;
  2890                           
  2891                           ;decode_AX25.c: 77: }else{
  2892  0374  083C               	movf	waitFlag@buf,w
  2893  0375  3880               	iorlw	128
  2894  0376  00F6               	movwf	??_waitFlag
  2895  0377  0876               	movf	??_waitFlag,w
  2896  0378  00BC               	movwf	waitFlag@buf
  2897  0379                     l2722:	
  2898  0379  3001               	movlw	1
  2899  037A  07A0               	addwf	waitFlag@i,f
  2900  037B  1803               	skipnc
  2901  037C  0AA1               	incf	waitFlag@i+1,f
  2902  037D  3000               	movlw	0
  2903  037E  07A1               	addwf	waitFlag@i+1,f
  2904  037F  3000               	movlw	0
  2905  0380  0221               	subwf	waitFlag@i+1,w
  2906  0381  3008               	movlw	8
  2907  0382  1903               	skipnz
  2908  0383  0220               	subwf	waitFlag@i,w
  2909  0384  1C03               	skipc
  2910  0385  2B5E               	goto	l2712
  2911  0386                     l2726:	
  2912  0386  307E               	movlw	126
  2913  0387  063C               	xorwf	waitFlag@buf,w
  2914  0388  1903               	btfsc	3,2
  2915  0389  2B55               	goto	l2706
  2916                           
  2917                           ;decode_AX25.c: 79: }
  2918                           ;decode_AX25.c: 80: }
  2919                           ;decode_AX25.c: 81: }
  2920                           ;decode_AX25.c: 82: if(buf == ("JQ1YCZ"[0] << 1)){
  2921  038A  300A               	movlw	low (STR_1-__stringbase)
  2922  038B  0084               	movwf	4
  2923  038C  120A  158A  2000  120A  118A  	fcall	stringdir
  2924  0391  00F6               	movwf	??_waitFlag
  2925  0392  01F7               	clrf	??_waitFlag+1
  2926  0393  1003               	clrc
  2927  0394  0DF6               	rlf	??_waitFlag,f
  2928  0395  0DF7               	rlf	??_waitFlag+1,f
  2929  0396  083C               	movf	waitFlag@buf,w
  2930  0397  00F8               	movwf	??_waitFlag+2
  2931  0398  01F9               	clrf	??_waitFlag+3
  2932  0399  0877               	movf	??_waitFlag+1,w
  2933  039A  0679               	xorwf	??_waitFlag+3,w
  2934  039B  1D03               	skipz
  2935  039C  2B9F               	goto	u2165
  2936  039D  0876               	movf	??_waitFlag,w
  2937  039E  0678               	xorwf	??_waitFlag+2,w
  2938  039F                     u2165:	
  2939  039F  1D03               	skipz
  2940  03A0  2D64               	goto	l2876
  2941                           
  2942                           ;decode_AX25.c: 83: dPacket[dPacketnum] = buf;
  2943  03A1  083C               	movf	waitFlag@buf,w
  2944  03A2  00F6               	movwf	??_waitFlag
  2945  03A3  0868               	movf	_dPacketnum,w
  2946  03A4  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2947  03A5  0084               	movwf	4
  2948  03A6  0876               	movf	??_waitFlag,w
  2949  03A7  1783               	bsf	3,7	;select IRP bank3
  2950  03A8  0080               	movwf	0
  2951                           
  2952                           ;decode_AX25.c: 84: dPacketnum ++;
  2953  03A9  3001               	movlw	1
  2954  03AA  07E8               	addwf	_dPacketnum,f
  2955  03AB  1803               	skipnc
  2956  03AC  0AE9               	incf	_dPacketnum+1,f
  2957  03AD  3000               	movlw	0
  2958  03AE  07E9               	addwf	_dPacketnum+1,f
  2959                           
  2960                           ;decode_AX25.c: 85: for(UINT j=0;j<8;j++){
  2961  03AF  01A2               	clrf	waitFlag@j
  2962  03B0  01A3               	clrf	waitFlag@j+1
  2963  03B1  3000               	movlw	0
  2964  03B2  0223               	subwf	waitFlag@j+1,w
  2965  03B3  3008               	movlw	8
  2966  03B4  1903               	skipnz
  2967  03B5  0222               	subwf	waitFlag@j,w
  2968  03B6  1803               	btfsc	3,0
  2969  03B7  2BE0               	goto	l2754
  2970  03B8                     l2740:	
  2971                           
  2972                           ;decode_AX25.c: 86: flag_judge = getbit();
  2973  03B8  120A  158A  2297  120A  118A  	fcall	_getbit
  2974  03BD  0871               	movf	?_getbit+1,w
  2975  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  2976  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  2977  03C0  00BB               	movwf	waitFlag@flag_judge+1
  2978  03C1  0870               	movf	?_getbit,w
  2979  03C2  00BA               	movwf	waitFlag@flag_judge
  2980                           
  2981                           ;decode_AX25.c: 87: buf = buf >> 1;
  2982  03C3  083C               	movf	waitFlag@buf,w
  2983  03C4  00F6               	movwf	??_waitFlag
  2984  03C5  1003               	clrc
  2985  03C6  0C76               	rrf	??_waitFlag,w
  2986  03C7  00F7               	movwf	??_waitFlag+1
  2987  03C8  0877               	movf	??_waitFlag+1,w
  2988  03C9  00BC               	movwf	waitFlag@buf
  2989                           
  2990                           ;decode_AX25.c: 89: buf = buf | 0x00;
  2991  03CA  083A               	movf	waitFlag@flag_judge,w
  2992  03CB  043B               	iorwf	waitFlag@flag_judge+1,w
  2993  03CC  1903               	btfsc	3,2
  2994  03CD  2BD3               	goto	l2750
  2995                           
  2996                           ;decode_AX25.c: 91: buf = buf | 0x80;
  2997                           
  2998                           ;decode_AX25.c: 90: }else{
  2999  03CE  083C               	movf	waitFlag@buf,w
  3000  03CF  3880               	iorlw	128
  3001  03D0  00F6               	movwf	??_waitFlag
  3002  03D1  0876               	movf	??_waitFlag,w
  3003  03D2  00BC               	movwf	waitFlag@buf
  3004  03D3                     l2750:	
  3005  03D3  3001               	movlw	1
  3006  03D4  07A2               	addwf	waitFlag@j,f
  3007  03D5  1803               	skipnc
  3008  03D6  0AA3               	incf	waitFlag@j+1,f
  3009  03D7  3000               	movlw	0
  3010  03D8  07A3               	addwf	waitFlag@j+1,f
  3011  03D9  3000               	movlw	0
  3012  03DA  0223               	subwf	waitFlag@j+1,w
  3013  03DB  3008               	movlw	8
  3014  03DC  1903               	skipnz
  3015  03DD  0222               	subwf	waitFlag@j,w
  3016  03DE  1C03               	skipc
  3017  03DF  2BB8               	goto	l2740
  3018  03E0                     l2754:	
  3019                           
  3020                           ;decode_AX25.c: 92: }
  3021                           ;decode_AX25.c: 93: }
  3022                           ;decode_AX25.c: 94: if(buf == ("JQ1YCZ"[1] << 1)){
  3023  03E0  300B               	movlw	low (((STR_1+1)-__stringbase)| (0+32768))
  3024  03E1  0084               	movwf	4
  3025  03E2  120A  158A  2000  120A  118A  	fcall	stringdir
  3026  03E7  00F6               	movwf	??_waitFlag
  3027  03E8  01F7               	clrf	??_waitFlag+1
  3028  03E9  1003               	clrc
  3029  03EA  0DF6               	rlf	??_waitFlag,f
  3030  03EB  0DF7               	rlf	??_waitFlag+1,f
  3031  03EC  083C               	movf	waitFlag@buf,w
  3032  03ED  00F8               	movwf	??_waitFlag+2
  3033  03EE  01F9               	clrf	??_waitFlag+3
  3034  03EF  0877               	movf	??_waitFlag+1,w
  3035  03F0  0679               	xorwf	??_waitFlag+3,w
  3036  03F1  1D03               	skipz
  3037  03F2  2BF5               	goto	u2205
  3038  03F3  0876               	movf	??_waitFlag,w
  3039  03F4  0678               	xorwf	??_waitFlag+2,w
  3040  03F5                     u2205:	
  3041  03F5  1D03               	skipz
  3042  03F6  2D64               	goto	l2876
  3043                           
  3044                           ;decode_AX25.c: 95: dPacket[dPacketnum] = buf;
  3045  03F7  083C               	movf	waitFlag@buf,w
  3046  03F8  00F6               	movwf	??_waitFlag
  3047  03F9  0868               	movf	_dPacketnum,w
  3048  03FA  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3049  03FB  0084               	movwf	4
  3050  03FC  0876               	movf	??_waitFlag,w
  3051  03FD  1783               	bsf	3,7	;select IRP bank3
  3052  03FE  0080               	movwf	0
  3053                           
  3054                           ;decode_AX25.c: 96: dPacketnum ++;
  3055  03FF  3001               	movlw	1
  3056  0400  07E8               	addwf	_dPacketnum,f
  3057  0401  1803               	skipnc
  3058  0402  0AE9               	incf	_dPacketnum+1,f
  3059  0403  3000               	movlw	0
  3060  0404  07E9               	addwf	_dPacketnum+1,f
  3061                           
  3062                           ;decode_AX25.c: 97: for(UINT j=0;j<8;j++){
  3063  0405  01A4               	clrf	waitFlag@j_118
  3064  0406  01A5               	clrf	waitFlag@j_118+1
  3065  0407  3000               	movlw	0
  3066  0408  0225               	subwf	waitFlag@j_118+1,w
  3067  0409  3008               	movlw	8
  3068  040A  1903               	skipnz
  3069  040B  0224               	subwf	waitFlag@j_118,w
  3070  040C  1803               	btfsc	3,0
  3071  040D  2C36               	goto	l2780
  3072  040E                     l2766:	
  3073                           
  3074                           ;decode_AX25.c: 98: flag_judge = getbit();
  3075  040E  120A  158A  2297  120A  118A  	fcall	_getbit
  3076  0413  0871               	movf	?_getbit+1,w
  3077  0414  1283               	bcf	3,5	;RP0=0, select bank0
  3078  0415  1303               	bcf	3,6	;RP1=0, select bank0
  3079  0416  00BB               	movwf	waitFlag@flag_judge+1
  3080  0417  0870               	movf	?_getbit,w
  3081  0418  00BA               	movwf	waitFlag@flag_judge
  3082                           
  3083                           ;decode_AX25.c: 99: buf = buf >> 1;
  3084  0419  083C               	movf	waitFlag@buf,w
  3085  041A  00F6               	movwf	??_waitFlag
  3086  041B  1003               	clrc
  3087  041C  0C76               	rrf	??_waitFlag,w
  3088  041D  00F7               	movwf	??_waitFlag+1
  3089  041E  0877               	movf	??_waitFlag+1,w
  3090  041F  00BC               	movwf	waitFlag@buf
  3091                           
  3092                           ;decode_AX25.c: 101: buf = buf | 0x00;
  3093  0420  083A               	movf	waitFlag@flag_judge,w
  3094  0421  043B               	iorwf	waitFlag@flag_judge+1,w
  3095  0422  1903               	btfsc	3,2
  3096  0423  2C29               	goto	l2776
  3097                           
  3098                           ;decode_AX25.c: 103: buf = buf | 0x80;
  3099                           
  3100                           ;decode_AX25.c: 102: }else{
  3101  0424  083C               	movf	waitFlag@buf,w
  3102  0425  3880               	iorlw	128
  3103  0426  00F6               	movwf	??_waitFlag
  3104  0427  0876               	movf	??_waitFlag,w
  3105  0428  00BC               	movwf	waitFlag@buf
  3106  0429                     l2776:	
  3107  0429  3001               	movlw	1
  3108  042A  07A4               	addwf	waitFlag@j_118,f
  3109  042B  1803               	skipnc
  3110  042C  0AA5               	incf	waitFlag@j_118+1,f
  3111  042D  3000               	movlw	0
  3112  042E  07A5               	addwf	waitFlag@j_118+1,f
  3113  042F  3000               	movlw	0
  3114  0430  0225               	subwf	waitFlag@j_118+1,w
  3115  0431  3008               	movlw	8
  3116  0432  1903               	skipnz
  3117  0433  0224               	subwf	waitFlag@j_118,w
  3118  0434  1C03               	skipc
  3119  0435  2C0E               	goto	l2766
  3120  0436                     l2780:	
  3121                           
  3122                           ;decode_AX25.c: 104: }
  3123                           ;decode_AX25.c: 105: }
  3124                           ;decode_AX25.c: 106: if(buf == ("JQ1YCZ"[2] << 1)){
  3125  0436  300C               	movlw	low (((STR_1+2)-__stringbase)| (0+32768))
  3126  0437  0084               	movwf	4
  3127  0438  120A  158A  2000  120A  118A  	fcall	stringdir
  3128  043D  00F6               	movwf	??_waitFlag
  3129  043E  01F7               	clrf	??_waitFlag+1
  3130  043F  1003               	clrc
  3131  0440  0DF6               	rlf	??_waitFlag,f
  3132  0441  0DF7               	rlf	??_waitFlag+1,f
  3133  0442  083C               	movf	waitFlag@buf,w
  3134  0443  00F8               	movwf	??_waitFlag+2
  3135  0444  01F9               	clrf	??_waitFlag+3
  3136  0445  0877               	movf	??_waitFlag+1,w
  3137  0446  0679               	xorwf	??_waitFlag+3,w
  3138  0447  1D03               	skipz
  3139  0448  2C4B               	goto	u2245
  3140  0449  0876               	movf	??_waitFlag,w
  3141  044A  0678               	xorwf	??_waitFlag+2,w
  3142  044B                     u2245:	
  3143  044B  1D03               	skipz
  3144  044C  2D64               	goto	l2876
  3145                           
  3146                           ;decode_AX25.c: 107: dPacket[dPacketnum] = buf;
  3147  044D  083C               	movf	waitFlag@buf,w
  3148  044E  00F6               	movwf	??_waitFlag
  3149  044F  0868               	movf	_dPacketnum,w
  3150  0450  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3151  0451  0084               	movwf	4
  3152  0452  0876               	movf	??_waitFlag,w
  3153  0453  1783               	bsf	3,7	;select IRP bank3
  3154  0454  0080               	movwf	0
  3155                           
  3156                           ;decode_AX25.c: 108: dPacketnum ++;
  3157  0455  3001               	movlw	1
  3158  0456  07E8               	addwf	_dPacketnum,f
  3159  0457  1803               	skipnc
  3160  0458  0AE9               	incf	_dPacketnum+1,f
  3161  0459  3000               	movlw	0
  3162  045A  07E9               	addwf	_dPacketnum+1,f
  3163                           
  3164                           ;decode_AX25.c: 109: for(UINT j=0;j<8;j++){
  3165  045B  01A6               	clrf	waitFlag@j_120
  3166  045C  01A7               	clrf	waitFlag@j_120+1
  3167  045D  3000               	movlw	0
  3168  045E  0227               	subwf	waitFlag@j_120+1,w
  3169  045F  3008               	movlw	8
  3170  0460  1903               	skipnz
  3171  0461  0226               	subwf	waitFlag@j_120,w
  3172  0462  1803               	btfsc	3,0
  3173  0463  2C8C               	goto	l2806
  3174  0464                     l2792:	
  3175                           
  3176                           ;decode_AX25.c: 110: flag_judge = getbit();
  3177  0464  120A  158A  2297  120A  118A  	fcall	_getbit
  3178  0469  0871               	movf	?_getbit+1,w
  3179  046A  1283               	bcf	3,5	;RP0=0, select bank0
  3180  046B  1303               	bcf	3,6	;RP1=0, select bank0
  3181  046C  00BB               	movwf	waitFlag@flag_judge+1
  3182  046D  0870               	movf	?_getbit,w
  3183  046E  00BA               	movwf	waitFlag@flag_judge
  3184                           
  3185                           ;decode_AX25.c: 111: buf = buf >> 1;
  3186  046F  083C               	movf	waitFlag@buf,w
  3187  0470  00F6               	movwf	??_waitFlag
  3188  0471  1003               	clrc
  3189  0472  0C76               	rrf	??_waitFlag,w
  3190  0473  00F7               	movwf	??_waitFlag+1
  3191  0474  0877               	movf	??_waitFlag+1,w
  3192  0475  00BC               	movwf	waitFlag@buf
  3193                           
  3194                           ;decode_AX25.c: 113: buf = buf | 0x00;
  3195  0476  083A               	movf	waitFlag@flag_judge,w
  3196  0477  043B               	iorwf	waitFlag@flag_judge+1,w
  3197  0478  1903               	btfsc	3,2
  3198  0479  2C7F               	goto	l2802
  3199                           
  3200                           ;decode_AX25.c: 115: buf = buf | 0x80;
  3201                           
  3202                           ;decode_AX25.c: 114: }else{
  3203  047A  083C               	movf	waitFlag@buf,w
  3204  047B  3880               	iorlw	128
  3205  047C  00F6               	movwf	??_waitFlag
  3206  047D  0876               	movf	??_waitFlag,w
  3207  047E  00BC               	movwf	waitFlag@buf
  3208  047F                     l2802:	
  3209  047F  3001               	movlw	1
  3210  0480  07A6               	addwf	waitFlag@j_120,f
  3211  0481  1803               	skipnc
  3212  0482  0AA7               	incf	waitFlag@j_120+1,f
  3213  0483  3000               	movlw	0
  3214  0484  07A7               	addwf	waitFlag@j_120+1,f
  3215  0485  3000               	movlw	0
  3216  0486  0227               	subwf	waitFlag@j_120+1,w
  3217  0487  3008               	movlw	8
  3218  0488  1903               	skipnz
  3219  0489  0226               	subwf	waitFlag@j_120,w
  3220  048A  1C03               	skipc
  3221  048B  2C64               	goto	l2792
  3222  048C                     l2806:	
  3223                           
  3224                           ;decode_AX25.c: 116: }
  3225                           ;decode_AX25.c: 117: }
  3226                           ;decode_AX25.c: 118: if(buf == ("JQ1YCZ"[3] << 1)){
  3227  048C  300D               	movlw	low (((STR_1+3)-__stringbase)| (0+32768))
  3228  048D  0084               	movwf	4
  3229  048E  120A  158A  2000  120A  118A  	fcall	stringdir
  3230  0493  00F6               	movwf	??_waitFlag
  3231  0494  01F7               	clrf	??_waitFlag+1
  3232  0495  1003               	clrc
  3233  0496  0DF6               	rlf	??_waitFlag,f
  3234  0497  0DF7               	rlf	??_waitFlag+1,f
  3235  0498  083C               	movf	waitFlag@buf,w
  3236  0499  00F8               	movwf	??_waitFlag+2
  3237  049A  01F9               	clrf	??_waitFlag+3
  3238  049B  0877               	movf	??_waitFlag+1,w
  3239  049C  0679               	xorwf	??_waitFlag+3,w
  3240  049D  1D03               	skipz
  3241  049E  2CA1               	goto	u2285
  3242  049F  0876               	movf	??_waitFlag,w
  3243  04A0  0678               	xorwf	??_waitFlag+2,w
  3244  04A1                     u2285:	
  3245  04A1  1D03               	skipz
  3246  04A2  2D64               	goto	l2876
  3247                           
  3248                           ;decode_AX25.c: 119: dPacket[dPacketnum] = buf;
  3249  04A3  083C               	movf	waitFlag@buf,w
  3250  04A4  00F6               	movwf	??_waitFlag
  3251  04A5  0868               	movf	_dPacketnum,w
  3252  04A6  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3253  04A7  0084               	movwf	4
  3254  04A8  0876               	movf	??_waitFlag,w
  3255  04A9  1783               	bsf	3,7	;select IRP bank3
  3256  04AA  0080               	movwf	0
  3257                           
  3258                           ;decode_AX25.c: 120: dPacketnum ++;
  3259  04AB  3001               	movlw	1
  3260  04AC  07E8               	addwf	_dPacketnum,f
  3261  04AD  1803               	skipnc
  3262  04AE  0AE9               	incf	_dPacketnum+1,f
  3263  04AF  3000               	movlw	0
  3264  04B0  07E9               	addwf	_dPacketnum+1,f
  3265                           
  3266                           ;decode_AX25.c: 121: for(UINT j=0;j<8;j++){
  3267  04B1  01A8               	clrf	waitFlag@j_122
  3268  04B2  01A9               	clrf	waitFlag@j_122+1
  3269  04B3  3000               	movlw	0
  3270  04B4  0229               	subwf	waitFlag@j_122+1,w
  3271  04B5  3008               	movlw	8
  3272  04B6  1903               	skipnz
  3273  04B7  0228               	subwf	waitFlag@j_122,w
  3274  04B8  1803               	btfsc	3,0
  3275  04B9  2CE2               	goto	l2832
  3276  04BA                     l2818:	
  3277                           
  3278                           ;decode_AX25.c: 122: flag_judge = getbit();
  3279  04BA  120A  158A  2297  120A  118A  	fcall	_getbit
  3280  04BF  0871               	movf	?_getbit+1,w
  3281  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  3282  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  3283  04C2  00BB               	movwf	waitFlag@flag_judge+1
  3284  04C3  0870               	movf	?_getbit,w
  3285  04C4  00BA               	movwf	waitFlag@flag_judge
  3286                           
  3287                           ;decode_AX25.c: 123: buf = buf >> 1;
  3288  04C5  083C               	movf	waitFlag@buf,w
  3289  04C6  00F6               	movwf	??_waitFlag
  3290  04C7  1003               	clrc
  3291  04C8  0C76               	rrf	??_waitFlag,w
  3292  04C9  00F7               	movwf	??_waitFlag+1
  3293  04CA  0877               	movf	??_waitFlag+1,w
  3294  04CB  00BC               	movwf	waitFlag@buf
  3295                           
  3296                           ;decode_AX25.c: 125: buf = buf | 0x00;
  3297  04CC  083A               	movf	waitFlag@flag_judge,w
  3298  04CD  043B               	iorwf	waitFlag@flag_judge+1,w
  3299  04CE  1903               	btfsc	3,2
  3300  04CF  2CD5               	goto	l2828
  3301                           
  3302                           ;decode_AX25.c: 127: buf = buf | 0x80;
  3303                           
  3304                           ;decode_AX25.c: 126: }else{
  3305  04D0  083C               	movf	waitFlag@buf,w
  3306  04D1  3880               	iorlw	128
  3307  04D2  00F6               	movwf	??_waitFlag
  3308  04D3  0876               	movf	??_waitFlag,w
  3309  04D4  00BC               	movwf	waitFlag@buf
  3310  04D5                     l2828:	
  3311  04D5  3001               	movlw	1
  3312  04D6  07A8               	addwf	waitFlag@j_122,f
  3313  04D7  1803               	skipnc
  3314  04D8  0AA9               	incf	waitFlag@j_122+1,f
  3315  04D9  3000               	movlw	0
  3316  04DA  07A9               	addwf	waitFlag@j_122+1,f
  3317  04DB  3000               	movlw	0
  3318  04DC  0229               	subwf	waitFlag@j_122+1,w
  3319  04DD  3008               	movlw	8
  3320  04DE  1903               	skipnz
  3321  04DF  0228               	subwf	waitFlag@j_122,w
  3322  04E0  1C03               	skipc
  3323  04E1  2CBA               	goto	l2818
  3324  04E2                     l2832:	
  3325                           
  3326                           ;decode_AX25.c: 128: }
  3327                           ;decode_AX25.c: 129: }
  3328                           ;decode_AX25.c: 130: if(buf == ("JQ1YCZ"[4] << 1)){
  3329  04E2  300E               	movlw	low (((STR_1+4)-__stringbase)| (0+32768))
  3330  04E3  0084               	movwf	4
  3331  04E4  120A  158A  2000  120A  118A  	fcall	stringdir
  3332  04E9  00F6               	movwf	??_waitFlag
  3333  04EA  01F7               	clrf	??_waitFlag+1
  3334  04EB  1003               	clrc
  3335  04EC  0DF6               	rlf	??_waitFlag,f
  3336  04ED  0DF7               	rlf	??_waitFlag+1,f
  3337  04EE  083C               	movf	waitFlag@buf,w
  3338  04EF  00F8               	movwf	??_waitFlag+2
  3339  04F0  01F9               	clrf	??_waitFlag+3
  3340  04F1  0877               	movf	??_waitFlag+1,w
  3341  04F2  0679               	xorwf	??_waitFlag+3,w
  3342  04F3  1D03               	skipz
  3343  04F4  2CF7               	goto	u2325
  3344  04F5  0876               	movf	??_waitFlag,w
  3345  04F6  0678               	xorwf	??_waitFlag+2,w
  3346  04F7                     u2325:	
  3347  04F7  1D03               	skipz
  3348  04F8  2D64               	goto	l2876
  3349                           
  3350                           ;decode_AX25.c: 131: dPacket[dPacketnum] = buf;
  3351  04F9  083C               	movf	waitFlag@buf,w
  3352  04FA  00F6               	movwf	??_waitFlag
  3353  04FB  0868               	movf	_dPacketnum,w
  3354  04FC  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3355  04FD  0084               	movwf	4
  3356  04FE  0876               	movf	??_waitFlag,w
  3357  04FF  1783               	bsf	3,7	;select IRP bank3
  3358  0500  0080               	movwf	0
  3359                           
  3360                           ;decode_AX25.c: 132: dPacketnum ++;
  3361  0501  3001               	movlw	1
  3362  0502  07E8               	addwf	_dPacketnum,f
  3363  0503  1803               	skipnc
  3364  0504  0AE9               	incf	_dPacketnum+1,f
  3365  0505  3000               	movlw	0
  3366  0506  07E9               	addwf	_dPacketnum+1,f
  3367                           
  3368                           ;decode_AX25.c: 133: for(UINT j=0;j<8;j++){
  3369  0507  01AA               	clrf	waitFlag@j_124
  3370  0508  01AB               	clrf	waitFlag@j_124+1
  3371  0509  3000               	movlw	0
  3372  050A  022B               	subwf	waitFlag@j_124+1,w
  3373  050B  3008               	movlw	8
  3374  050C  1903               	skipnz
  3375  050D  022A               	subwf	waitFlag@j_124,w
  3376  050E  1803               	btfsc	3,0
  3377  050F  2D38               	goto	l2858
  3378  0510                     l2844:	
  3379                           
  3380                           ;decode_AX25.c: 134: flag_judge = getbit();
  3381  0510  120A  158A  2297  120A  118A  	fcall	_getbit
  3382  0515  0871               	movf	?_getbit+1,w
  3383  0516  1283               	bcf	3,5	;RP0=0, select bank0
  3384  0517  1303               	bcf	3,6	;RP1=0, select bank0
  3385  0518  00BB               	movwf	waitFlag@flag_judge+1
  3386  0519  0870               	movf	?_getbit,w
  3387  051A  00BA               	movwf	waitFlag@flag_judge
  3388                           
  3389                           ;decode_AX25.c: 135: buf = buf >> 1;
  3390  051B  083C               	movf	waitFlag@buf,w
  3391  051C  00F6               	movwf	??_waitFlag
  3392  051D  1003               	clrc
  3393  051E  0C76               	rrf	??_waitFlag,w
  3394  051F  00F7               	movwf	??_waitFlag+1
  3395  0520  0877               	movf	??_waitFlag+1,w
  3396  0521  00BC               	movwf	waitFlag@buf
  3397                           
  3398                           ;decode_AX25.c: 137: buf = buf | 0x00;
  3399  0522  083A               	movf	waitFlag@flag_judge,w
  3400  0523  043B               	iorwf	waitFlag@flag_judge+1,w
  3401  0524  1903               	btfsc	3,2
  3402  0525  2D2B               	goto	l2854
  3403                           
  3404                           ;decode_AX25.c: 139: buf = buf | 0x80;
  3405                           
  3406                           ;decode_AX25.c: 138: }else{
  3407  0526  083C               	movf	waitFlag@buf,w
  3408  0527  3880               	iorlw	128
  3409  0528  00F6               	movwf	??_waitFlag
  3410  0529  0876               	movf	??_waitFlag,w
  3411  052A  00BC               	movwf	waitFlag@buf
  3412  052B                     l2854:	
  3413  052B  3001               	movlw	1
  3414  052C  07AA               	addwf	waitFlag@j_124,f
  3415  052D  1803               	skipnc
  3416  052E  0AAB               	incf	waitFlag@j_124+1,f
  3417  052F  3000               	movlw	0
  3418  0530  07AB               	addwf	waitFlag@j_124+1,f
  3419  0531  3000               	movlw	0
  3420  0532  022B               	subwf	waitFlag@j_124+1,w
  3421  0533  3008               	movlw	8
  3422  0534  1903               	skipnz
  3423  0535  022A               	subwf	waitFlag@j_124,w
  3424  0536  1C03               	skipc
  3425  0537  2D10               	goto	l2844
  3426  0538                     l2858:	
  3427                           
  3428                           ;decode_AX25.c: 140: }
  3429                           ;decode_AX25.c: 141: }
  3430                           ;decode_AX25.c: 142: if(buf == ("JQ1YCZ"[5] << 1)){
  3431  0538  300F               	movlw	low (((STR_1+5)-__stringbase)| (0+32768))
  3432  0539  0084               	movwf	4
  3433  053A  120A  158A  2000  120A  118A  	fcall	stringdir
  3434  053F  00F6               	movwf	??_waitFlag
  3435  0540  01F7               	clrf	??_waitFlag+1
  3436  0541  1003               	clrc
  3437  0542  0DF6               	rlf	??_waitFlag,f
  3438  0543  0DF7               	rlf	??_waitFlag+1,f
  3439  0544  083C               	movf	waitFlag@buf,w
  3440  0545  00F8               	movwf	??_waitFlag+2
  3441  0546  01F9               	clrf	??_waitFlag+3
  3442  0547  0877               	movf	??_waitFlag+1,w
  3443  0548  0679               	xorwf	??_waitFlag+3,w
  3444  0549  1D03               	skipz
  3445  054A  2D4D               	goto	u2365
  3446  054B  0876               	movf	??_waitFlag,w
  3447  054C  0678               	xorwf	??_waitFlag+2,w
  3448  054D                     u2365:	
  3449  054D  1D03               	skipz
  3450  054E  2D64               	goto	l2876
  3451                           
  3452                           ;decode_AX25.c: 143: dPacket[dPacketnum] = buf;
  3453  054F  083C               	movf	waitFlag@buf,w
  3454  0550  00F6               	movwf	??_waitFlag
  3455  0551  0868               	movf	_dPacketnum,w
  3456  0552  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3457  0553  0084               	movwf	4
  3458  0554  0876               	movf	??_waitFlag,w
  3459  0555  1783               	bsf	3,7	;select IRP bank3
  3460  0556  0080               	movwf	0
  3461                           
  3462                           ;decode_AX25.c: 144: dPacketnum ++;
  3463  0557  3001               	movlw	1
  3464  0558  07E8               	addwf	_dPacketnum,f
  3465  0559  1803               	skipnc
  3466  055A  0AE9               	incf	_dPacketnum+1,f
  3467  055B  3000               	movlw	0
  3468  055C  07E9               	addwf	_dPacketnum+1,f
  3469                           
  3470                           ;decode_AX25.c: 145: rcv_state ++;
  3471  055D  3001               	movlw	1
  3472  055E  07EA               	addwf	_rcv_state,f
  3473  055F  1803               	skipnc
  3474  0560  0AEB               	incf	_rcv_state+1,f
  3475  0561  3000               	movlw	0
  3476  0562  07EB               	addwf	_rcv_state+1,f
  3477                           
  3478                           ;decode_AX25.c: 146: }else{
  3479  0563  2D66               	goto	l214
  3480  0564                     l2876:	
  3481                           ;decode_AX25.c: 160: }
  3482                           ;decode_AX25.c: 161: }else{
  3483                           
  3484                           ;decode_AX25.c: 159: dPacketnum = 0;
  3485                           
  3486                           ;decode_AX25.c: 157: }
  3487                           ;decode_AX25.c: 158: }else{
  3488                           
  3489                           ;decode_AX25.c: 156: dPacketnum = 0;
  3490                           
  3491                           ;decode_AX25.c: 154: }
  3492                           ;decode_AX25.c: 155: }else{
  3493                           
  3494                           ;decode_AX25.c: 153: dPacketnum = 0;
  3495                           
  3496                           ;decode_AX25.c: 151: }
  3497                           ;decode_AX25.c: 152: }else{
  3498                           
  3499                           ;decode_AX25.c: 150: dPacketnum = 0;
  3500                           
  3501                           ;decode_AX25.c: 148: }
  3502                           ;decode_AX25.c: 149: }else{
  3503                           
  3504                           ;decode_AX25.c: 147: dPacketnum = 0;
  3505                           
  3506                           
  3507                           ;decode_AX25.c: 162: dPacketnum = 0;
  3508  0564  01E8               	clrf	_dPacketnum
  3509  0565  01E9               	clrf	_dPacketnum+1
  3510  0566                     l214:	
  3511                           
  3512                           ;decode_AX25.c: 163: }
  3513                           ;decode_AX25.c: 165: for(UINT j=0;j<8;j++){
  3514  0566  01AC               	clrf	waitFlag@j_126
  3515  0567  01AD               	clrf	waitFlag@j_126+1
  3516  0568  3000               	movlw	0
  3517  0569  022D               	subwf	waitFlag@j_126+1,w
  3518  056A  3008               	movlw	8
  3519  056B  1903               	skipnz
  3520  056C  022C               	subwf	waitFlag@j_126,w
  3521  056D  1803               	btfsc	3,0
  3522  056E  2D97               	goto	l2896
  3523  056F                     l2882:	
  3524                           
  3525                           ;decode_AX25.c: 166: flag_judge = getbit();
  3526  056F  120A  158A  2297  120A  118A  	fcall	_getbit
  3527  0574  0871               	movf	?_getbit+1,w
  3528  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3529  0576  1303               	bcf	3,6	;RP1=0, select bank0
  3530  0577  00BB               	movwf	waitFlag@flag_judge+1
  3531  0578  0870               	movf	?_getbit,w
  3532  0579  00BA               	movwf	waitFlag@flag_judge
  3533                           
  3534                           ;decode_AX25.c: 167: buf = buf >> 1;
  3535  057A  083C               	movf	waitFlag@buf,w
  3536  057B  00F6               	movwf	??_waitFlag
  3537  057C  1003               	clrc
  3538  057D  0C76               	rrf	??_waitFlag,w
  3539  057E  00F7               	movwf	??_waitFlag+1
  3540  057F  0877               	movf	??_waitFlag+1,w
  3541  0580  00BC               	movwf	waitFlag@buf
  3542                           
  3543                           ;decode_AX25.c: 169: buf = buf | 0x00;
  3544  0581  083A               	movf	waitFlag@flag_judge,w
  3545  0582  043B               	iorwf	waitFlag@flag_judge+1,w
  3546  0583  1903               	btfsc	3,2
  3547  0584  2D8A               	goto	l2892
  3548                           
  3549                           ;decode_AX25.c: 171: buf = buf | 0x80;
  3550                           
  3551                           ;decode_AX25.c: 170: }else{
  3552  0585  083C               	movf	waitFlag@buf,w
  3553  0586  3880               	iorlw	128
  3554  0587  00F6               	movwf	??_waitFlag
  3555  0588  0876               	movf	??_waitFlag,w
  3556  0589  00BC               	movwf	waitFlag@buf
  3557  058A                     l2892:	
  3558  058A  3001               	movlw	1
  3559  058B  07AC               	addwf	waitFlag@j_126,f
  3560  058C  1803               	skipnc
  3561  058D  0AAD               	incf	waitFlag@j_126+1,f
  3562  058E  3000               	movlw	0
  3563  058F  07AD               	addwf	waitFlag@j_126+1,f
  3564  0590  3000               	movlw	0
  3565  0591  022D               	subwf	waitFlag@j_126+1,w
  3566  0592  3008               	movlw	8
  3567  0593  1903               	skipnz
  3568  0594  022C               	subwf	waitFlag@j_126,w
  3569  0595  1C03               	skipc
  3570  0596  2D6F               	goto	l2882
  3571  0597                     l2896:	
  3572                           
  3573                           ;decode_AX25.c: 172: }
  3574                           ;decode_AX25.c: 173: }
  3575                           ;decode_AX25.c: 174: dPacket[dPacketnum] = buf;
  3576  0597  083C               	movf	waitFlag@buf,w
  3577  0598  00F6               	movwf	??_waitFlag
  3578  0599  0868               	movf	_dPacketnum,w
  3579  059A  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3580  059B  0084               	movwf	4
  3581  059C  0876               	movf	??_waitFlag,w
  3582  059D  1783               	bsf	3,7	;select IRP bank3
  3583  059E  0080               	movwf	0
  3584                           
  3585                           ;decode_AX25.c: 175: dPacketnum ++;
  3586  059F  3001               	movlw	1
  3587  05A0  07E8               	addwf	_dPacketnum,f
  3588  05A1  1803               	skipnc
  3589  05A2  0AE9               	incf	_dPacketnum+1,f
  3590  05A3  3000               	movlw	0
  3591  05A4  07E9               	addwf	_dPacketnum+1,f
  3592                           
  3593                           ;decode_AX25.c: 176: for(UINT j=0;j<8;j++){
  3594  05A5  01AE               	clrf	waitFlag@j_127
  3595  05A6  01AF               	clrf	waitFlag@j_127+1
  3596  05A7  3000               	movlw	0
  3597  05A8  022F               	subwf	waitFlag@j_127+1,w
  3598  05A9  3008               	movlw	8
  3599  05AA  1903               	skipnz
  3600  05AB  022E               	subwf	waitFlag@j_127,w
  3601  05AC  1803               	btfsc	3,0
  3602  05AD  2DD6               	goto	l2920
  3603  05AE                     l2906:	
  3604                           
  3605                           ;decode_AX25.c: 177: flag_judge = getbit();
  3606  05AE  120A  158A  2297  120A  118A  	fcall	_getbit
  3607  05B3  0871               	movf	?_getbit+1,w
  3608  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  3609  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  3610  05B6  00BB               	movwf	waitFlag@flag_judge+1
  3611  05B7  0870               	movf	?_getbit,w
  3612  05B8  00BA               	movwf	waitFlag@flag_judge
  3613                           
  3614                           ;decode_AX25.c: 178: buf = buf >> 1;
  3615  05B9  083C               	movf	waitFlag@buf,w
  3616  05BA  00F6               	movwf	??_waitFlag
  3617  05BB  1003               	clrc
  3618  05BC  0C76               	rrf	??_waitFlag,w
  3619  05BD  00F7               	movwf	??_waitFlag+1
  3620  05BE  0877               	movf	??_waitFlag+1,w
  3621  05BF  00BC               	movwf	waitFlag@buf
  3622                           
  3623                           ;decode_AX25.c: 180: buf = buf | 0x00;
  3624  05C0  083A               	movf	waitFlag@flag_judge,w
  3625  05C1  043B               	iorwf	waitFlag@flag_judge+1,w
  3626  05C2  1903               	btfsc	3,2
  3627  05C3  2DC9               	goto	l2916
  3628                           
  3629                           ;decode_AX25.c: 182: buf = buf | 0x80;
  3630                           
  3631                           ;decode_AX25.c: 181: }else{
  3632  05C4  083C               	movf	waitFlag@buf,w
  3633  05C5  3880               	iorlw	128
  3634  05C6  00F6               	movwf	??_waitFlag
  3635  05C7  0876               	movf	??_waitFlag,w
  3636  05C8  00BC               	movwf	waitFlag@buf
  3637  05C9                     l2916:	
  3638  05C9  3001               	movlw	1
  3639  05CA  07AE               	addwf	waitFlag@j_127,f
  3640  05CB  1803               	skipnc
  3641  05CC  0AAF               	incf	waitFlag@j_127+1,f
  3642  05CD  3000               	movlw	0
  3643  05CE  07AF               	addwf	waitFlag@j_127+1,f
  3644  05CF  3000               	movlw	0
  3645  05D0  022F               	subwf	waitFlag@j_127+1,w
  3646  05D1  3008               	movlw	8
  3647  05D2  1903               	skipnz
  3648  05D3  022E               	subwf	waitFlag@j_127,w
  3649  05D4  1C03               	skipc
  3650  05D5  2DAE               	goto	l2906
  3651  05D6                     l2920:	
  3652                           
  3653                           ;decode_AX25.c: 183: }
  3654                           ;decode_AX25.c: 184: }
  3655                           ;decode_AX25.c: 185: if(buf == ("JQ1ZHX"[0] << 1)){
  3656  05D6  3003               	movlw	low (STR_7-__stringbase)
  3657  05D7  0084               	movwf	4
  3658  05D8  120A  158A  2000  120A  118A  	fcall	stringdir
  3659  05DD  00F6               	movwf	??_waitFlag
  3660  05DE  01F7               	clrf	??_waitFlag+1
  3661  05DF  1003               	clrc
  3662  05E0  0DF6               	rlf	??_waitFlag,f
  3663  05E1  0DF7               	rlf	??_waitFlag+1,f
  3664  05E2  083C               	movf	waitFlag@buf,w
  3665  05E3  00F8               	movwf	??_waitFlag+2
  3666  05E4  01F9               	clrf	??_waitFlag+3
  3667  05E5  0877               	movf	??_waitFlag+1,w
  3668  05E6  0679               	xorwf	??_waitFlag+3,w
  3669  05E7  1D03               	skipz
  3670  05E8  2DEB               	goto	u2435
  3671  05E9  0876               	movf	??_waitFlag,w
  3672  05EA  0678               	xorwf	??_waitFlag+2,w
  3673  05EB                     u2435:	
  3674  05EB  1D03               	skipz
  3675  05EC  2FB0               	goto	l3068
  3676                           
  3677                           ;decode_AX25.c: 186: dPacket[dPacketnum] = buf;
  3678  05ED  083C               	movf	waitFlag@buf,w
  3679  05EE  00F6               	movwf	??_waitFlag
  3680  05EF  0868               	movf	_dPacketnum,w
  3681  05F0  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3682  05F1  0084               	movwf	4
  3683  05F2  0876               	movf	??_waitFlag,w
  3684  05F3  1783               	bsf	3,7	;select IRP bank3
  3685  05F4  0080               	movwf	0
  3686                           
  3687                           ;decode_AX25.c: 187: dPacketnum ++;
  3688  05F5  3001               	movlw	1
  3689  05F6  07E8               	addwf	_dPacketnum,f
  3690  05F7  1803               	skipnc
  3691  05F8  0AE9               	incf	_dPacketnum+1,f
  3692  05F9  3000               	movlw	0
  3693  05FA  07E9               	addwf	_dPacketnum+1,f
  3694                           
  3695                           ;decode_AX25.c: 188: for(UINT j=0;j<8;j++){
  3696  05FB  01B0               	clrf	waitFlag@j_129
  3697  05FC  01B1               	clrf	waitFlag@j_129+1
  3698  05FD  3000               	movlw	0
  3699  05FE  0231               	subwf	waitFlag@j_129+1,w
  3700  05FF  3008               	movlw	8
  3701  0600  1903               	skipnz
  3702  0601  0230               	subwf	waitFlag@j_129,w
  3703  0602  1803               	btfsc	3,0
  3704  0603  2E2C               	goto	l2946
  3705  0604                     l2932:	
  3706                           
  3707                           ;decode_AX25.c: 189: flag_judge = getbit();
  3708  0604  120A  158A  2297  120A  118A  	fcall	_getbit
  3709  0609  0871               	movf	?_getbit+1,w
  3710  060A  1283               	bcf	3,5	;RP0=0, select bank0
  3711  060B  1303               	bcf	3,6	;RP1=0, select bank0
  3712  060C  00BB               	movwf	waitFlag@flag_judge+1
  3713  060D  0870               	movf	?_getbit,w
  3714  060E  00BA               	movwf	waitFlag@flag_judge
  3715                           
  3716                           ;decode_AX25.c: 190: buf = buf >> 1;
  3717  060F  083C               	movf	waitFlag@buf,w
  3718  0610  00F6               	movwf	??_waitFlag
  3719  0611  1003               	clrc
  3720  0612  0C76               	rrf	??_waitFlag,w
  3721  0613  00F7               	movwf	??_waitFlag+1
  3722  0614  0877               	movf	??_waitFlag+1,w
  3723  0615  00BC               	movwf	waitFlag@buf
  3724                           
  3725                           ;decode_AX25.c: 192: buf = buf | 0x00;
  3726  0616  083A               	movf	waitFlag@flag_judge,w
  3727  0617  043B               	iorwf	waitFlag@flag_judge+1,w
  3728  0618  1903               	btfsc	3,2
  3729  0619  2E1F               	goto	l2942
  3730                           
  3731                           ;decode_AX25.c: 194: buf = buf | 0x80;
  3732                           
  3733                           ;decode_AX25.c: 193: }else{
  3734  061A  083C               	movf	waitFlag@buf,w
  3735  061B  3880               	iorlw	128
  3736  061C  00F6               	movwf	??_waitFlag
  3737  061D  0876               	movf	??_waitFlag,w
  3738  061E  00BC               	movwf	waitFlag@buf
  3739  061F                     l2942:	
  3740  061F  3001               	movlw	1
  3741  0620  07B0               	addwf	waitFlag@j_129,f
  3742  0621  1803               	skipnc
  3743  0622  0AB1               	incf	waitFlag@j_129+1,f
  3744  0623  3000               	movlw	0
  3745  0624  07B1               	addwf	waitFlag@j_129+1,f
  3746  0625  3000               	movlw	0
  3747  0626  0231               	subwf	waitFlag@j_129+1,w
  3748  0627  3008               	movlw	8
  3749  0628  1903               	skipnz
  3750  0629  0230               	subwf	waitFlag@j_129,w
  3751  062A  1C03               	skipc
  3752  062B  2E04               	goto	l2932
  3753  062C                     l2946:	
  3754                           
  3755                           ;decode_AX25.c: 195: }
  3756                           ;decode_AX25.c: 196: }
  3757                           ;decode_AX25.c: 197: if(buf == ("JQ1ZHX"[1] << 1)){
  3758  062C  3004               	movlw	low (((STR_7+1)-__stringbase)| (0+32768))
  3759  062D  0084               	movwf	4
  3760  062E  120A  158A  2000  120A  118A  	fcall	stringdir
  3761  0633  00F6               	movwf	??_waitFlag
  3762  0634  01F7               	clrf	??_waitFlag+1
  3763  0635  1003               	clrc
  3764  0636  0DF6               	rlf	??_waitFlag,f
  3765  0637  0DF7               	rlf	??_waitFlag+1,f
  3766  0638  083C               	movf	waitFlag@buf,w
  3767  0639  00F8               	movwf	??_waitFlag+2
  3768  063A  01F9               	clrf	??_waitFlag+3
  3769  063B  0877               	movf	??_waitFlag+1,w
  3770  063C  0679               	xorwf	??_waitFlag+3,w
  3771  063D  1D03               	skipz
  3772  063E  2E41               	goto	u2475
  3773  063F  0876               	movf	??_waitFlag,w
  3774  0640  0678               	xorwf	??_waitFlag+2,w
  3775  0641                     u2475:	
  3776  0641  1D03               	skipz
  3777  0642  2FB0               	goto	l3068
  3778                           
  3779                           ;decode_AX25.c: 198: dPacket[dPacketnum] = buf;
  3780  0643  083C               	movf	waitFlag@buf,w
  3781  0644  00F6               	movwf	??_waitFlag
  3782  0645  0868               	movf	_dPacketnum,w
  3783  0646  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3784  0647  0084               	movwf	4
  3785  0648  0876               	movf	??_waitFlag,w
  3786  0649  1783               	bsf	3,7	;select IRP bank3
  3787  064A  0080               	movwf	0
  3788                           
  3789                           ;decode_AX25.c: 199: dPacketnum ++;
  3790  064B  3001               	movlw	1
  3791  064C  07E8               	addwf	_dPacketnum,f
  3792  064D  1803               	skipnc
  3793  064E  0AE9               	incf	_dPacketnum+1,f
  3794  064F  3000               	movlw	0
  3795  0650  07E9               	addwf	_dPacketnum+1,f
  3796                           
  3797                           ;decode_AX25.c: 200: for(UINT j=0;j<8;j++){
  3798  0651  01B2               	clrf	waitFlag@j_131
  3799  0652  01B3               	clrf	waitFlag@j_131+1
  3800  0653  3000               	movlw	0
  3801  0654  0233               	subwf	waitFlag@j_131+1,w
  3802  0655  3008               	movlw	8
  3803  0656  1903               	skipnz
  3804  0657  0232               	subwf	waitFlag@j_131,w
  3805  0658  1803               	btfsc	3,0
  3806  0659  2E82               	goto	l2972
  3807  065A                     l2958:	
  3808                           
  3809                           ;decode_AX25.c: 201: flag_judge = getbit();
  3810  065A  120A  158A  2297  120A  118A  	fcall	_getbit
  3811  065F  0871               	movf	?_getbit+1,w
  3812  0660  1283               	bcf	3,5	;RP0=0, select bank0
  3813  0661  1303               	bcf	3,6	;RP1=0, select bank0
  3814  0662  00BB               	movwf	waitFlag@flag_judge+1
  3815  0663  0870               	movf	?_getbit,w
  3816  0664  00BA               	movwf	waitFlag@flag_judge
  3817                           
  3818                           ;decode_AX25.c: 202: buf = buf >> 1;
  3819  0665  083C               	movf	waitFlag@buf,w
  3820  0666  00F6               	movwf	??_waitFlag
  3821  0667  1003               	clrc
  3822  0668  0C76               	rrf	??_waitFlag,w
  3823  0669  00F7               	movwf	??_waitFlag+1
  3824  066A  0877               	movf	??_waitFlag+1,w
  3825  066B  00BC               	movwf	waitFlag@buf
  3826                           
  3827                           ;decode_AX25.c: 204: buf = buf | 0x00;
  3828  066C  083A               	movf	waitFlag@flag_judge,w
  3829  066D  043B               	iorwf	waitFlag@flag_judge+1,w
  3830  066E  1903               	btfsc	3,2
  3831  066F  2E75               	goto	l2968
  3832                           
  3833                           ;decode_AX25.c: 206: buf = buf | 0x80;
  3834                           
  3835                           ;decode_AX25.c: 205: }else{
  3836  0670  083C               	movf	waitFlag@buf,w
  3837  0671  3880               	iorlw	128
  3838  0672  00F6               	movwf	??_waitFlag
  3839  0673  0876               	movf	??_waitFlag,w
  3840  0674  00BC               	movwf	waitFlag@buf
  3841  0675                     l2968:	
  3842  0675  3001               	movlw	1
  3843  0676  07B2               	addwf	waitFlag@j_131,f
  3844  0677  1803               	skipnc
  3845  0678  0AB3               	incf	waitFlag@j_131+1,f
  3846  0679  3000               	movlw	0
  3847  067A  07B3               	addwf	waitFlag@j_131+1,f
  3848  067B  3000               	movlw	0
  3849  067C  0233               	subwf	waitFlag@j_131+1,w
  3850  067D  3008               	movlw	8
  3851  067E  1903               	skipnz
  3852  067F  0232               	subwf	waitFlag@j_131,w
  3853  0680  1C03               	skipc
  3854  0681  2E5A               	goto	l2958
  3855  0682                     l2972:	
  3856                           
  3857                           ;decode_AX25.c: 207: }
  3858                           ;decode_AX25.c: 208: }
  3859                           ;decode_AX25.c: 209: if(buf == ("JQ1ZHX"[2] << 1)){
  3860  0682  3005               	movlw	low (((STR_7+2)-__stringbase)| (0+32768))
  3861  0683  0084               	movwf	4
  3862  0684  120A  158A  2000  120A  118A  	fcall	stringdir
  3863  0689  00F6               	movwf	??_waitFlag
  3864  068A  01F7               	clrf	??_waitFlag+1
  3865  068B  1003               	clrc
  3866  068C  0DF6               	rlf	??_waitFlag,f
  3867  068D  0DF7               	rlf	??_waitFlag+1,f
  3868  068E  083C               	movf	waitFlag@buf,w
  3869  068F  00F8               	movwf	??_waitFlag+2
  3870  0690  01F9               	clrf	??_waitFlag+3
  3871  0691  0877               	movf	??_waitFlag+1,w
  3872  0692  0679               	xorwf	??_waitFlag+3,w
  3873  0693  1D03               	skipz
  3874  0694  2E97               	goto	u2515
  3875  0695  0876               	movf	??_waitFlag,w
  3876  0696  0678               	xorwf	??_waitFlag+2,w
  3877  0697                     u2515:	
  3878  0697  1D03               	skipz
  3879  0698  2FB0               	goto	l3068
  3880                           
  3881                           ;decode_AX25.c: 210: dPacket[dPacketnum] = buf;
  3882  0699  083C               	movf	waitFlag@buf,w
  3883  069A  00F6               	movwf	??_waitFlag
  3884  069B  0868               	movf	_dPacketnum,w
  3885  069C  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3886  069D  0084               	movwf	4
  3887  069E  0876               	movf	??_waitFlag,w
  3888  069F  1783               	bsf	3,7	;select IRP bank3
  3889  06A0  0080               	movwf	0
  3890                           
  3891                           ;decode_AX25.c: 211: dPacketnum ++;
  3892  06A1  3001               	movlw	1
  3893  06A2  07E8               	addwf	_dPacketnum,f
  3894  06A3  1803               	skipnc
  3895  06A4  0AE9               	incf	_dPacketnum+1,f
  3896  06A5  3000               	movlw	0
  3897  06A6  07E9               	addwf	_dPacketnum+1,f
  3898                           
  3899                           ;decode_AX25.c: 212: for(UINT j=0;j<8;j++){
  3900  06A7  01B4               	clrf	waitFlag@j_133
  3901  06A8  01B5               	clrf	waitFlag@j_133+1
  3902  06A9  3000               	movlw	0
  3903  06AA  0235               	subwf	waitFlag@j_133+1,w
  3904  06AB  3008               	movlw	8
  3905  06AC  1903               	skipnz
  3906  06AD  0234               	subwf	waitFlag@j_133,w
  3907  06AE  1803               	btfsc	3,0
  3908  06AF  2ED8               	goto	l2998
  3909  06B0                     l2984:	
  3910                           
  3911                           ;decode_AX25.c: 213: flag_judge = getbit();
  3912  06B0  120A  158A  2297  120A  118A  	fcall	_getbit
  3913  06B5  0871               	movf	?_getbit+1,w
  3914  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  3915  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  3916  06B8  00BB               	movwf	waitFlag@flag_judge+1
  3917  06B9  0870               	movf	?_getbit,w
  3918  06BA  00BA               	movwf	waitFlag@flag_judge
  3919                           
  3920                           ;decode_AX25.c: 214: buf = buf >> 1;
  3921  06BB  083C               	movf	waitFlag@buf,w
  3922  06BC  00F6               	movwf	??_waitFlag
  3923  06BD  1003               	clrc
  3924  06BE  0C76               	rrf	??_waitFlag,w
  3925  06BF  00F7               	movwf	??_waitFlag+1
  3926  06C0  0877               	movf	??_waitFlag+1,w
  3927  06C1  00BC               	movwf	waitFlag@buf
  3928                           
  3929                           ;decode_AX25.c: 216: buf = buf | 0x00;
  3930  06C2  083A               	movf	waitFlag@flag_judge,w
  3931  06C3  043B               	iorwf	waitFlag@flag_judge+1,w
  3932  06C4  1903               	btfsc	3,2
  3933  06C5  2ECB               	goto	l2994
  3934                           
  3935                           ;decode_AX25.c: 218: buf = buf | 0x80;
  3936                           
  3937                           ;decode_AX25.c: 217: }else{
  3938  06C6  083C               	movf	waitFlag@buf,w
  3939  06C7  3880               	iorlw	128
  3940  06C8  00F6               	movwf	??_waitFlag
  3941  06C9  0876               	movf	??_waitFlag,w
  3942  06CA  00BC               	movwf	waitFlag@buf
  3943  06CB                     l2994:	
  3944  06CB  3001               	movlw	1
  3945  06CC  07B4               	addwf	waitFlag@j_133,f
  3946  06CD  1803               	skipnc
  3947  06CE  0AB5               	incf	waitFlag@j_133+1,f
  3948  06CF  3000               	movlw	0
  3949  06D0  07B5               	addwf	waitFlag@j_133+1,f
  3950  06D1  3000               	movlw	0
  3951  06D2  0235               	subwf	waitFlag@j_133+1,w
  3952  06D3  3008               	movlw	8
  3953  06D4  1903               	skipnz
  3954  06D5  0234               	subwf	waitFlag@j_133,w
  3955  06D6  1C03               	skipc
  3956  06D7  2EB0               	goto	l2984
  3957  06D8                     l2998:	
  3958                           
  3959                           ;decode_AX25.c: 219: }
  3960                           ;decode_AX25.c: 220: }
  3961                           ;decode_AX25.c: 221: if(buf == ("JQ1ZHX"[3] << 1)){
  3962  06D8  3006               	movlw	low (((STR_7+3)-__stringbase)| (0+32768))
  3963  06D9  0084               	movwf	4
  3964  06DA  120A  158A  2000  120A  118A  	fcall	stringdir
  3965  06DF  00F6               	movwf	??_waitFlag
  3966  06E0  01F7               	clrf	??_waitFlag+1
  3967  06E1  1003               	clrc
  3968  06E2  0DF6               	rlf	??_waitFlag,f
  3969  06E3  0DF7               	rlf	??_waitFlag+1,f
  3970  06E4  083C               	movf	waitFlag@buf,w
  3971  06E5  00F8               	movwf	??_waitFlag+2
  3972  06E6  01F9               	clrf	??_waitFlag+3
  3973  06E7  0877               	movf	??_waitFlag+1,w
  3974  06E8  0679               	xorwf	??_waitFlag+3,w
  3975  06E9  1D03               	skipz
  3976  06EA  2EED               	goto	u2555
  3977  06EB  0876               	movf	??_waitFlag,w
  3978  06EC  0678               	xorwf	??_waitFlag+2,w
  3979  06ED                     u2555:	
  3980  06ED  1D03               	skipz
  3981  06EE  2FB0               	goto	l3068
  3982                           
  3983                           ;decode_AX25.c: 222: dPacket[dPacketnum] = buf;
  3984  06EF  083C               	movf	waitFlag@buf,w
  3985  06F0  00F6               	movwf	??_waitFlag
  3986  06F1  0868               	movf	_dPacketnum,w
  3987  06F2  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3988  06F3  0084               	movwf	4
  3989  06F4  0876               	movf	??_waitFlag,w
  3990  06F5  1783               	bsf	3,7	;select IRP bank3
  3991  06F6  0080               	movwf	0
  3992                           
  3993                           ;decode_AX25.c: 223: dPacketnum ++;
  3994  06F7  3001               	movlw	1
  3995  06F8  07E8               	addwf	_dPacketnum,f
  3996  06F9  1803               	skipnc
  3997  06FA  0AE9               	incf	_dPacketnum+1,f
  3998  06FB  3000               	movlw	0
  3999  06FC  07E9               	addwf	_dPacketnum+1,f
  4000                           
  4001                           ;decode_AX25.c: 224: for(UINT j=0;j<8;j++){
  4002  06FD  01B6               	clrf	waitFlag@j_135
  4003  06FE  01B7               	clrf	waitFlag@j_135+1
  4004  06FF  3000               	movlw	0
  4005  0700  0237               	subwf	waitFlag@j_135+1,w
  4006  0701  3008               	movlw	8
  4007  0702  1903               	skipnz
  4008  0703  0236               	subwf	waitFlag@j_135,w
  4009  0704  1803               	btfsc	3,0
  4010  0705  2F2E               	goto	l3024
  4011  0706                     l3010:	
  4012                           
  4013                           ;decode_AX25.c: 225: flag_judge = getbit();
  4014  0706  120A  158A  2297  120A  118A  	fcall	_getbit
  4015  070B  0871               	movf	?_getbit+1,w
  4016  070C  1283               	bcf	3,5	;RP0=0, select bank0
  4017  070D  1303               	bcf	3,6	;RP1=0, select bank0
  4018  070E  00BB               	movwf	waitFlag@flag_judge+1
  4019  070F  0870               	movf	?_getbit,w
  4020  0710  00BA               	movwf	waitFlag@flag_judge
  4021                           
  4022                           ;decode_AX25.c: 226: buf = buf >> 1;
  4023  0711  083C               	movf	waitFlag@buf,w
  4024  0712  00F6               	movwf	??_waitFlag
  4025  0713  1003               	clrc
  4026  0714  0C76               	rrf	??_waitFlag,w
  4027  0715  00F7               	movwf	??_waitFlag+1
  4028  0716  0877               	movf	??_waitFlag+1,w
  4029  0717  00BC               	movwf	waitFlag@buf
  4030                           
  4031                           ;decode_AX25.c: 228: buf = buf | 0x00;
  4032  0718  083A               	movf	waitFlag@flag_judge,w
  4033  0719  043B               	iorwf	waitFlag@flag_judge+1,w
  4034  071A  1903               	btfsc	3,2
  4035  071B  2F21               	goto	l3020
  4036                           
  4037                           ;decode_AX25.c: 230: buf = buf | 0x80;
  4038                           
  4039                           ;decode_AX25.c: 229: }else{
  4040  071C  083C               	movf	waitFlag@buf,w
  4041  071D  3880               	iorlw	128
  4042  071E  00F6               	movwf	??_waitFlag
  4043  071F  0876               	movf	??_waitFlag,w
  4044  0720  00BC               	movwf	waitFlag@buf
  4045  0721                     l3020:	
  4046  0721  3001               	movlw	1
  4047  0722  07B6               	addwf	waitFlag@j_135,f
  4048  0723  1803               	skipnc
  4049  0724  0AB7               	incf	waitFlag@j_135+1,f
  4050  0725  3000               	movlw	0
  4051  0726  07B7               	addwf	waitFlag@j_135+1,f
  4052  0727  3000               	movlw	0
  4053  0728  0237               	subwf	waitFlag@j_135+1,w
  4054  0729  3008               	movlw	8
  4055  072A  1903               	skipnz
  4056  072B  0236               	subwf	waitFlag@j_135,w
  4057  072C  1C03               	skipc
  4058  072D  2F06               	goto	l3010
  4059  072E                     l3024:	
  4060                           
  4061                           ;decode_AX25.c: 231: }
  4062                           ;decode_AX25.c: 232: }
  4063                           ;decode_AX25.c: 233: if(buf == ("JQ1ZHX"[4] << 1)){
  4064  072E  3007               	movlw	low (((STR_7+4)-__stringbase)| (0+32768))
  4065  072F  0084               	movwf	4
  4066  0730  120A  158A  2000  120A  118A  	fcall	stringdir
  4067  0735  00F6               	movwf	??_waitFlag
  4068  0736  01F7               	clrf	??_waitFlag+1
  4069  0737  1003               	clrc
  4070  0738  0DF6               	rlf	??_waitFlag,f
  4071  0739  0DF7               	rlf	??_waitFlag+1,f
  4072  073A  083C               	movf	waitFlag@buf,w
  4073  073B  00F8               	movwf	??_waitFlag+2
  4074  073C  01F9               	clrf	??_waitFlag+3
  4075  073D  0877               	movf	??_waitFlag+1,w
  4076  073E  0679               	xorwf	??_waitFlag+3,w
  4077  073F  1D03               	skipz
  4078  0740  2F43               	goto	u2595
  4079  0741  0876               	movf	??_waitFlag,w
  4080  0742  0678               	xorwf	??_waitFlag+2,w
  4081  0743                     u2595:	
  4082  0743  1D03               	skipz
  4083  0744  2FB0               	goto	l3068
  4084                           
  4085                           ;decode_AX25.c: 234: dPacket[dPacketnum] = buf;
  4086  0745  083C               	movf	waitFlag@buf,w
  4087  0746  00F6               	movwf	??_waitFlag
  4088  0747  0868               	movf	_dPacketnum,w
  4089  0748  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4090  0749  0084               	movwf	4
  4091  074A  0876               	movf	??_waitFlag,w
  4092  074B  1783               	bsf	3,7	;select IRP bank3
  4093  074C  0080               	movwf	0
  4094                           
  4095                           ;decode_AX25.c: 235: dPacketnum ++;
  4096  074D  3001               	movlw	1
  4097  074E  07E8               	addwf	_dPacketnum,f
  4098  074F  1803               	skipnc
  4099  0750  0AE9               	incf	_dPacketnum+1,f
  4100  0751  3000               	movlw	0
  4101  0752  07E9               	addwf	_dPacketnum+1,f
  4102                           
  4103                           ;decode_AX25.c: 236: for(UINT j=0;j<8;j++){
  4104  0753  01B8               	clrf	waitFlag@j_137
  4105  0754  01B9               	clrf	waitFlag@j_137+1
  4106  0755  3000               	movlw	0
  4107  0756  0239               	subwf	waitFlag@j_137+1,w
  4108  0757  3008               	movlw	8
  4109  0758  1903               	skipnz
  4110  0759  0238               	subwf	waitFlag@j_137,w
  4111  075A  1803               	btfsc	3,0
  4112  075B  2F84               	goto	l3050
  4113  075C                     l3036:	
  4114                           
  4115                           ;decode_AX25.c: 237: flag_judge = getbit();
  4116  075C  120A  158A  2297  120A  118A  	fcall	_getbit
  4117  0761  0871               	movf	?_getbit+1,w
  4118  0762  1283               	bcf	3,5	;RP0=0, select bank0
  4119  0763  1303               	bcf	3,6	;RP1=0, select bank0
  4120  0764  00BB               	movwf	waitFlag@flag_judge+1
  4121  0765  0870               	movf	?_getbit,w
  4122  0766  00BA               	movwf	waitFlag@flag_judge
  4123                           
  4124                           ;decode_AX25.c: 238: buf = buf >> 1;
  4125  0767  083C               	movf	waitFlag@buf,w
  4126  0768  00F6               	movwf	??_waitFlag
  4127  0769  1003               	clrc
  4128  076A  0C76               	rrf	??_waitFlag,w
  4129  076B  00F7               	movwf	??_waitFlag+1
  4130  076C  0877               	movf	??_waitFlag+1,w
  4131  076D  00BC               	movwf	waitFlag@buf
  4132                           
  4133                           ;decode_AX25.c: 240: buf = buf | 0x00;
  4134  076E  083A               	movf	waitFlag@flag_judge,w
  4135  076F  043B               	iorwf	waitFlag@flag_judge+1,w
  4136  0770  1903               	btfsc	3,2
  4137  0771  2F77               	goto	l3046
  4138                           
  4139                           ;decode_AX25.c: 242: buf = buf | 0x80;
  4140                           
  4141                           ;decode_AX25.c: 241: }else{
  4142  0772  083C               	movf	waitFlag@buf,w
  4143  0773  3880               	iorlw	128
  4144  0774  00F6               	movwf	??_waitFlag
  4145  0775  0876               	movf	??_waitFlag,w
  4146  0776  00BC               	movwf	waitFlag@buf
  4147  0777                     l3046:	
  4148  0777  3001               	movlw	1
  4149  0778  07B8               	addwf	waitFlag@j_137,f
  4150  0779  1803               	skipnc
  4151  077A  0AB9               	incf	waitFlag@j_137+1,f
  4152  077B  3000               	movlw	0
  4153  077C  07B9               	addwf	waitFlag@j_137+1,f
  4154  077D  3000               	movlw	0
  4155  077E  0239               	subwf	waitFlag@j_137+1,w
  4156  077F  3008               	movlw	8
  4157  0780  1903               	skipnz
  4158  0781  0238               	subwf	waitFlag@j_137,w
  4159  0782  1C03               	skipc
  4160  0783  2F5C               	goto	l3036
  4161  0784                     l3050:	
  4162                           
  4163                           ;decode_AX25.c: 243: }
  4164                           ;decode_AX25.c: 244: }
  4165                           ;decode_AX25.c: 245: if(buf == ("JQ1ZHX"[5] << 1)){
  4166  0784  3008               	movlw	low (((STR_7+5)-__stringbase)| (0+32768))
  4167  0785  0084               	movwf	4
  4168  0786  120A  158A  2000  120A  118A  	fcall	stringdir
  4169  078B  00F6               	movwf	??_waitFlag
  4170  078C  01F7               	clrf	??_waitFlag+1
  4171  078D  1003               	clrc
  4172  078E  0DF6               	rlf	??_waitFlag,f
  4173  078F  0DF7               	rlf	??_waitFlag+1,f
  4174  0790  083C               	movf	waitFlag@buf,w
  4175  0791  00F8               	movwf	??_waitFlag+2
  4176  0792  01F9               	clrf	??_waitFlag+3
  4177  0793  0877               	movf	??_waitFlag+1,w
  4178  0794  0679               	xorwf	??_waitFlag+3,w
  4179  0795  1D03               	skipz
  4180  0796  2F99               	goto	u2635
  4181  0797  0876               	movf	??_waitFlag,w
  4182  0798  0678               	xorwf	??_waitFlag+2,w
  4183  0799                     u2635:	
  4184  0799  1D03               	skipz
  4185  079A  2FB0               	goto	l3068
  4186                           
  4187                           ;decode_AX25.c: 246: dPacket[dPacketnum] = buf;
  4188  079B  083C               	movf	waitFlag@buf,w
  4189  079C  00F6               	movwf	??_waitFlag
  4190  079D  0868               	movf	_dPacketnum,w
  4191  079E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4192  079F  0084               	movwf	4
  4193  07A0  0876               	movf	??_waitFlag,w
  4194  07A1  1783               	bsf	3,7	;select IRP bank3
  4195  07A2  0080               	movwf	0
  4196                           
  4197                           ;decode_AX25.c: 247: dPacketnum ++;
  4198  07A3  3001               	movlw	1
  4199  07A4  07E8               	addwf	_dPacketnum,f
  4200  07A5  1803               	skipnc
  4201  07A6  0AE9               	incf	_dPacketnum+1,f
  4202  07A7  3000               	movlw	0
  4203  07A8  07E9               	addwf	_dPacketnum+1,f
  4204                           
  4205                           ;decode_AX25.c: 248: rcv_state ++;
  4206  07A9  3001               	movlw	1
  4207  07AA  07EA               	addwf	_rcv_state,f
  4208  07AB  1803               	skipnc
  4209  07AC  0AEB               	incf	_rcv_state+1,f
  4210  07AD  3000               	movlw	0
  4211  07AE  07EB               	addwf	_rcv_state+1,f
  4212                           
  4213                           ;decode_AX25.c: 249: }else{
  4214  07AF  2B2F               	goto	l3070
  4215  07B0                     l3068:	
  4216                           ;decode_AX25.c: 268: }
  4217                           ;decode_AX25.c: 269: }else{
  4218                           
  4219                           ;decode_AX25.c: 267: rcv_state = 0;
  4220                           
  4221                           ;decode_AX25.c: 266: dPacketnum = 0;
  4222                           
  4223                           ;decode_AX25.c: 264: }
  4224                           ;decode_AX25.c: 265: }else{
  4225                           
  4226                           ;decode_AX25.c: 263: rcv_state = 0;
  4227                           
  4228                           ;decode_AX25.c: 262: dPacketnum = 0;
  4229                           
  4230                           ;decode_AX25.c: 260: }
  4231                           ;decode_AX25.c: 261: }else{
  4232                           
  4233                           ;decode_AX25.c: 259: rcv_state = 0;
  4234                           
  4235                           ;decode_AX25.c: 258: dPacketnum = 0;
  4236                           
  4237                           ;decode_AX25.c: 256: }
  4238                           ;decode_AX25.c: 257: }else{
  4239                           
  4240                           ;decode_AX25.c: 255: rcv_state = 0;
  4241                           
  4242                           ;decode_AX25.c: 254: dPacketnum = 0;
  4243                           
  4244                           ;decode_AX25.c: 252: }
  4245                           ;decode_AX25.c: 253: }else{
  4246                           
  4247                           ;decode_AX25.c: 251: rcv_state = 0;
  4248                           
  4249                           ;decode_AX25.c: 250: dPacketnum = 0;
  4250                           
  4251                           
  4252                           ;decode_AX25.c: 270: dPacketnum = 0;
  4253  07B0  01E8               	clrf	_dPacketnum
  4254  07B1  01E9               	clrf	_dPacketnum+1
  4255  07B2  2B2D               	goto	L6
  4256  07B3                     __end_of_waitFlag:	
  4257                           
  4258                           	psect	text5
  4259  0BF7                     __ptext5:	
  4260 ;; *************** function _getdata *****************
  4261 ;; Defined at:
  4262 ;;		line 278 in file "decode_AX25.c"
  4263 ;; Parameters:    Size  Location     Type
  4264 ;;		None
  4265 ;; Auto vars:     Size  Location     Type
  4266 ;;  dbitstatus      2    4[BANK0 ] unsigned int 
  4267 ;;  dstuff          2    2[BANK0 ] unsigned int 
  4268 ;;  bufstore_cou    2    0[BANK0 ] unsigned int 
  4269 ;;  buf             1    6[BANK0 ] unsigned char 
  4270 ;;  dammy_data      1    0        unsigned char 
  4271 ;; Return value:  Size  Location     Type
  4272 ;;                  1    wreg      void 
  4273 ;; Registers used:
  4274 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4275 ;; Tracked objects:
  4276 ;;		On entry : 0/0
  4277 ;;		On exit  : 0/0
  4278 ;;		Unchanged: 0/0
  4279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4280 ;;      Params:         0       0       0       0       0
  4281 ;;      Locals:         0       7       0       0       0
  4282 ;;      Temps:          2       0       0       0       0
  4283 ;;      Totals:         2       7       0       0       0
  4284 ;;Total ram usage:        9 bytes
  4285 ;; Hardware stack levels used:    1
  4286 ;; Hardware stack levels required when called:    1
  4287 ;; This function calls:
  4288 ;;		_getbit
  4289 ;; This function is called by:
  4290 ;;		_ReceivePacket_data
  4291 ;;		_ReceivePacket
  4292 ;; This function uses a non-reentrant model
  4293 ;;
  4294                           
  4295                           
  4296                           ;psect for function _getdata
  4297  0BF7                     _getdata:	
  4298                           
  4299                           ;decode_AX25.c: 279: UBYTE buf = 0x00;
  4300                           
  4301                           ;incstack = 0
  4302                           ; Regs used in _getdata: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4303  0BF7  1283               	bcf	3,5	;RP0=0, select bank0
  4304  0BF8  1303               	bcf	3,6	;RP1=0, select bank0
  4305  0BF9  01A6               	clrf	getdata@buf
  4306                           
  4307                           ;decode_AX25.c: 280: UINT dstuff = 0;
  4308  0BFA  01A2               	clrf	getdata@dstuff
  4309  0BFB  01A3               	clrf	getdata@dstuff+1
  4310                           
  4311                           ;decode_AX25.c: 281: UBYTE dammy_data;
  4312                           ;decode_AX25.c: 282: UINT bufstore_counter = 0;
  4313  0BFC  01A0               	clrf	getdata@bufstore_counter
  4314  0BFD  01A1               	clrf	getdata@bufstore_counter+1
  4315                           
  4316                           ;decode_AX25.c: 283: UINT dbitstatus = 0;
  4317  0BFE  01A4               	clrf	getdata@dbitstatus
  4318  0BFF  01A5               	clrf	getdata@dbitstatus+1
  4319  0C00                     l3104:	
  4320                           ;decode_AX25.c: 285: while(rcv_state == 2){
  4321                           
  4322  0C00  3002               	movlw	2
  4323  0C01  066A               	xorwf	_rcv_state,w
  4324  0C02  046B               	iorwf	_rcv_state+1,w
  4325  0C03  1D03               	btfss	3,2
  4326  0C04  0008               	return
  4327                           
  4328                           ;decode_AX25.c: 286: dbitstatus = getbit();
  4329  0C05  120A  158A  2297  120A  158A  	fcall	_getbit
  4330  0C0A  0871               	movf	?_getbit+1,w
  4331  0C0B  1283               	bcf	3,5	;RP0=0, select bank0
  4332  0C0C  1303               	bcf	3,6	;RP1=0, select bank0
  4333  0C0D  00A5               	movwf	getdata@dbitstatus+1
  4334  0C0E  0870               	movf	?_getbit,w
  4335  0C0F  00A4               	movwf	getdata@dbitstatus
  4336                           
  4337                           ;decode_AX25.c: 287: if(dstuff == 5){
  4338  0C10  3005               	movlw	5
  4339  0C11  0622               	xorwf	getdata@dstuff,w
  4340  0C12  0423               	iorwf	getdata@dstuff+1,w
  4341  0C13  1D03               	btfss	3,2
  4342  0C14  2C23               	goto	l3086
  4343                           
  4344                           ;decode_AX25.c: 288: if(dbitstatus == 1){
  4345  0C15  0324               	decf	getdata@dbitstatus,w
  4346  0C16  0425               	iorwf	getdata@dbitstatus+1,w
  4347  0C17  1D03               	btfss	3,2
  4348  0C18  2C20               	goto	l3084
  4349                           
  4350                           ;decode_AX25.c: 289: rcv_state ++;
  4351  0C19  3001               	movlw	1
  4352  0C1A  07EA               	addwf	_rcv_state,f
  4353  0C1B  1803               	skipnc
  4354  0C1C  0AEB               	incf	_rcv_state+1,f
  4355  0C1D  3000               	movlw	0
  4356  0C1E  07EB               	addwf	_rcv_state+1,f
  4357                           
  4358                           ;decode_AX25.c: 290: break;
  4359  0C1F  0008               	return
  4360  0C20                     l3084:	
  4361                           ;decode_AX25.c: 291: }else{
  4362                           
  4363                           
  4364                           ;decode_AX25.c: 292: dstuff = 0;
  4365  0C20  01A2               	clrf	getdata@dstuff
  4366  0C21  01A3               	clrf	getdata@dstuff+1
  4367                           
  4368                           ;decode_AX25.c: 293: }
  4369                           ;decode_AX25.c: 294: }else{
  4370  0C22  2C00               	goto	l3104
  4371  0C23                     l3086:	
  4372                           
  4373                           ;decode_AX25.c: 295: buf = buf >> 1;
  4374  0C23  0826               	movf	getdata@buf,w
  4375  0C24  00F6               	movwf	??_getdata
  4376  0C25  1003               	clrc
  4377  0C26  0C76               	rrf	??_getdata,w
  4378  0C27  00F7               	movwf	??_getdata+1
  4379  0C28  0877               	movf	??_getdata+1,w
  4380  0C29  00A6               	movwf	getdata@buf
  4381                           
  4382                           ;decode_AX25.c: 297: buf = buf | 0x00;
  4383  0C2A  0824               	movf	getdata@dbitstatus,w
  4384  0C2B  0425               	iorwf	getdata@dbitstatus+1,w
  4385  0C2C  1D03               	btfss	3,2
  4386  0C2D  2C31               	goto	l3090
  4387                           
  4388                           ;decode_AX25.c: 298: dstuff = 0;
  4389  0C2E  01A2               	clrf	getdata@dstuff
  4390  0C2F  01A3               	clrf	getdata@dstuff+1
  4391                           
  4392                           ;decode_AX25.c: 299: }else{
  4393  0C30  2C3C               	goto	l3094
  4394  0C31                     l3090:	
  4395                           
  4396                           ;decode_AX25.c: 300: buf = buf | 0x80;
  4397  0C31  0826               	movf	getdata@buf,w
  4398  0C32  3880               	iorlw	128
  4399  0C33  00F6               	movwf	??_getdata
  4400  0C34  0876               	movf	??_getdata,w
  4401  0C35  00A6               	movwf	getdata@buf
  4402                           
  4403                           ;decode_AX25.c: 301: dstuff ++;
  4404  0C36  3001               	movlw	1
  4405  0C37  07A2               	addwf	getdata@dstuff,f
  4406  0C38  1803               	skipnc
  4407  0C39  0AA3               	incf	getdata@dstuff+1,f
  4408  0C3A  3000               	movlw	0
  4409  0C3B  07A3               	addwf	getdata@dstuff+1,f
  4410  0C3C                     l3094:	
  4411                           
  4412                           ;decode_AX25.c: 302: }
  4413                           ;decode_AX25.c: 303: bufstore_counter ++;
  4414  0C3C  3001               	movlw	1
  4415  0C3D  07A0               	addwf	getdata@bufstore_counter,f
  4416  0C3E  1803               	skipnc
  4417  0C3F  0AA1               	incf	getdata@bufstore_counter+1,f
  4418  0C40  3000               	movlw	0
  4419  0C41  07A1               	addwf	getdata@bufstore_counter+1,f
  4420                           
  4421                           ;decode_AX25.c: 304: if(bufstore_counter == 8){
  4422  0C42  3008               	movlw	8
  4423  0C43  0620               	xorwf	getdata@bufstore_counter,w
  4424  0C44  0421               	iorwf	getdata@bufstore_counter+1,w
  4425  0C45  1D03               	btfss	3,2
  4426  0C46  2C00               	goto	l3104
  4427                           
  4428                           ;decode_AX25.c: 305: bufstore_counter = 0;
  4429  0C47  01A0               	clrf	getdata@bufstore_counter
  4430  0C48  01A1               	clrf	getdata@bufstore_counter+1
  4431                           
  4432                           ;decode_AX25.c: 306: dPacket[dPacketnum] = buf;
  4433  0C49  0826               	movf	getdata@buf,w
  4434  0C4A  00F6               	movwf	??_getdata
  4435  0C4B  0868               	movf	_dPacketnum,w
  4436  0C4C  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4437  0C4D  0084               	movwf	4
  4438  0C4E  0876               	movf	??_getdata,w
  4439  0C4F  1783               	bsf	3,7	;select IRP bank3
  4440  0C50  0080               	movwf	0
  4441                           
  4442                           ;decode_AX25.c: 307: dPacketnum ++;
  4443  0C51  3001               	movlw	1
  4444  0C52  07E8               	addwf	_dPacketnum,f
  4445  0C53  1803               	skipnc
  4446  0C54  0AE9               	incf	_dPacketnum+1,f
  4447  0C55  3000               	movlw	0
  4448  0C56  07E9               	addwf	_dPacketnum+1,f
  4449  0C57  2C00               	goto	l3104
  4450  0C58                     __end_of_getdata:	
  4451                           
  4452                           	psect	text6
  4453  0A97                     __ptext6:	
  4454 ;; *************** function _getbit *****************
  4455 ;; Defined at:
  4456 ;;		line 40 in file "decode_AX25.c"
  4457 ;; Parameters:    Size  Location     Type
  4458 ;;		None
  4459 ;; Auto vars:     Size  Location     Type
  4460 ;;  i               2    4[COMMON] unsigned int 
  4461 ;; Return value:  Size  Location     Type
  4462 ;;                  2    0[COMMON] unsigned int 
  4463 ;; Registers used:
  4464 ;;		wreg, status,2, status,0
  4465 ;; Tracked objects:
  4466 ;;		On entry : 0/0
  4467 ;;		On exit  : 0/0
  4468 ;;		Unchanged: 0/0
  4469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4470 ;;      Params:         2       0       0       0       0
  4471 ;;      Locals:         2       0       0       0       0
  4472 ;;      Temps:          2       0       0       0       0
  4473 ;;      Totals:         6       0       0       0       0
  4474 ;;Total ram usage:        6 bytes
  4475 ;; Hardware stack levels used:    1
  4476 ;; This function calls:
  4477 ;;		Nothing
  4478 ;; This function is called by:
  4479 ;;		_waitFlag
  4480 ;;		_getdata
  4481 ;;		_conv_DI_UARTRX
  4482 ;; This function uses a non-reentrant model
  4483 ;;
  4484                           
  4485                           
  4486                           ;psect for function _getbit
  4487  0A97                     _getbit:	
  4488                           
  4489                           ;decode_AX25.c: 41: static UINT oldbit;
  4490                           ;decode_AX25.c: 42: oldbit = RB5;
  4491                           
  4492                           ;incstack = 0
  4493                           ; Regs used in _getbit: [wreg+status,2+status,0]
  4494  0A97  1003               	clrc
  4495  0A98  1283               	bcf	3,5	;RP0=0, select bank0
  4496  0A99  1303               	bcf	3,6	;RP1=0, select bank0
  4497  0A9A  1A86               	btfsc	6,5	;volatile
  4498  0A9B  1403               	setc
  4499  0A9C  3000               	movlw	0
  4500  0A9D  1803               	skipnc
  4501  0A9E  3001               	movlw	1
  4502  0A9F  00F2               	movwf	??_getbit
  4503  0AA0  01F3               	clrf	??_getbit+1
  4504  0AA1  0872               	movf	??_getbit,w
  4505  0AA2  1683               	bsf	3,5	;RP0=1, select bank1
  4506  0AA3  1303               	bcf	3,6	;RP1=0, select bank1
  4507  0AA4  00E6               	movwf	getbit@oldbit^(0+128)
  4508  0AA5  0873               	movf	??_getbit+1,w
  4509  0AA6  00E7               	movwf	(getbit@oldbit+1)^(0+128)
  4510                           
  4511                           ;decode_AX25.c: 43: for(UINT i=0;i<62;i++){
  4512  0AA7  01F4               	clrf	getbit@i
  4513  0AA8  01F5               	clrf	getbit@i+1
  4514  0AA9  3000               	movlw	0
  4515  0AAA  0275               	subwf	getbit@i+1,w
  4516  0AAB  303E               	movlw	62
  4517  0AAC  1903               	skipnz
  4518  0AAD  0274               	subwf	getbit@i,w
  4519  0AAE  1803               	btfsc	3,0
  4520  0AAF  2ADE               	goto	l2550
  4521                           
  4522                           ;decode_AX25.c: 44: if(RB5 != oldbit){
  4523  0AB0  1003               	clrc
  4524  0AB1                     L7:	
  4525  0AB1  1283               	bcf	3,5	;RP0=0, select bank0
  4526  0AB2  1A86               	btfsc	6,5	;volatile
  4527  0AB3  1403               	setc
  4528  0AB4  3000               	movlw	0
  4529  0AB5  1803               	skipnc
  4530  0AB6  3001               	movlw	1
  4531  0AB7  00F2               	movwf	??_getbit
  4532  0AB8  01F3               	clrf	??_getbit+1
  4533  0AB9  1683               	bsf	3,5	;RP0=1, select bank1
  4534  0ABA  1303               	bcf	3,6	;RP1=0, select bank1
  4535  0ABB  0867               	movf	(getbit@oldbit+1)^(0+128),w
  4536  0ABC  0673               	xorwf	??_getbit+1,w
  4537  0ABD  1D03               	skipz
  4538  0ABE  2AC1               	goto	u1865
  4539  0ABF  0866               	movf	getbit@oldbit^(0+128),w
  4540  0AC0  0672               	xorwf	??_getbit,w
  4541  0AC1                     u1865:	
  4542  0AC1  1903               	skipnz
  4543  0AC2  2AD1               	goto	l2548
  4544                           
  4545                           ;decode_AX25.c: 45: _delay((unsigned long)((400)*(10000000/4000000.0)));
  4546  0AC3  30C7               	movlw	199
  4547  0AC4  00F2               	movwf	??_getbit
  4548  0AC5                     u3697:	
  4549  0AC5  2AC6               	nop2
  4550  0AC6  0BF2               	decfsz	??_getbit,f
  4551  0AC7  2AC5               	goto	u3697
  4552  0AC8  2AC9               	nop2
  4553  0AC9  2ACA               	nop2
  4554                           
  4555                           ;decode_AX25.c: 46: RC2= 1- RC2;
  4556  0ACA  3004               	movlw	4
  4557  0ACB  1283               	bcf	3,5	;RP0=0, select bank0
  4558  0ACC  1303               	bcf	3,6	;RP1=0, select bank0
  4559  0ACD  0687               	xorwf	7,f
  4560                           
  4561                           ;decode_AX25.c: 47: return 0;
  4562  0ACE  01F0               	clrf	?_getbit
  4563  0ACF  01F1               	clrf	?_getbit+1
  4564  0AD0  0008               	return
  4565  0AD1                     l2548:	
  4566  0AD1  3001               	movlw	1
  4567  0AD2  07F4               	addwf	getbit@i,f
  4568  0AD3  1803               	skipnc
  4569  0AD4  0AF5               	incf	getbit@i+1,f
  4570  0AD5  3000               	movlw	0
  4571  0AD6  07F5               	addwf	getbit@i+1,f
  4572  0AD7  3000               	movlw	0
  4573  0AD8  0275               	subwf	getbit@i+1,w
  4574  0AD9  303E               	movlw	62
  4575  0ADA  1903               	skipnz
  4576  0ADB  0274               	subwf	getbit@i,w
  4577  0ADC  1C03               	skipc
  4578  0ADD  2AB1               	goto	L7
  4579  0ADE                     l2550:	
  4580                           
  4581                           ;decode_AX25.c: 48: }
  4582                           ;decode_AX25.c: 49: }
  4583                           ;decode_AX25.c: 50: return 1;
  4584  0ADE  3001               	movlw	1
  4585  0ADF  00F0               	movwf	?_getbit
  4586  0AE0  3000               	movlw	0
  4587  0AE1  00F1               	movwf	?_getbit+1
  4588  0AE2  0008               	return
  4589  0AE3                     __end_of_getbit:	
  4590                           
  4591                           	psect	text7
  4592  002A                     __ptext7:	
  4593 ;; *************** function _fcscheck *****************
  4594 ;; Defined at:
  4595 ;;		line 313 in file "decode_AX25.c"
  4596 ;; Parameters:    Size  Location     Type
  4597 ;;		None
  4598 ;; Auto vars:     Size  Location     Type
  4599 ;;  i               2    7[COMMON] unsigned int 
  4600 ;;  i               2    5[COMMON] unsigned int 
  4601 ;;  byte            1    9[COMMON] unsigned char 
  4602 ;;  bt              1    4[COMMON] unsigned char 
  4603 ;; Return value:  Size  Location     Type
  4604 ;;                  2    0[COMMON] unsigned int 
  4605 ;; Registers used:
  4606 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4607 ;; Tracked objects:
  4608 ;;		On entry : 0/0
  4609 ;;		On exit  : 0/0
  4610 ;;		Unchanged: 0/0
  4611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4612 ;;      Params:         2       0       0       0       0
  4613 ;;      Locals:         6       0       0       0       0
  4614 ;;      Temps:          2       0       0       0       0
  4615 ;;      Totals:        10       0       0       0       0
  4616 ;;Total ram usage:       10 bytes
  4617 ;; Hardware stack levels used:    1
  4618 ;; This function calls:
  4619 ;;		Nothing
  4620 ;; This function is called by:
  4621 ;;		_ReceivePacket_data
  4622 ;;		_ReceivePacket
  4623 ;; This function uses a non-reentrant model
  4624 ;;
  4625                           
  4626                           
  4627                           ;psect for function _fcscheck
  4628  002A                     _fcscheck:	
  4629                           
  4630                           ;decode_AX25.c: 314: UBYTE bt,byte;
  4631                           ;decode_AX25.c: 315: dfcslo = dfcshi = 0xff;
  4632                           
  4633                           ;incstack = 0
  4634                           ; Regs used in _fcscheck: [wreg-fsr0h+status,2+status,0]
  4635  002A  30FF               	movlw	255
  4636  002B  1283               	bcf	3,5	;RP0=0, select bank0
  4637  002C  1303               	bcf	3,6	;RP1=0, select bank0
  4638  002D  00EF               	movwf	_dfcshi
  4639  002E  00F2               	movwf	??_fcscheck
  4640  002F  0872               	movf	??_fcscheck,w
  4641  0030  00EE               	movwf	_dfcslo
  4642                           
  4643                           ;decode_AX25.c: 316: while(rcv_state == 3){
  4644  0031  3003               	movlw	3
  4645  0032  066A               	xorwf	_rcv_state,w
  4646  0033  046B               	iorwf	_rcv_state+1,w
  4647  0034  1D03               	btfss	3,2
  4648  0035  0008               	return
  4649                           
  4650                           ;decode_AX25.c: 317: for(UINT i=0;i<dPacketnum-2;i++){
  4651  0036  01F5               	clrf	fcscheck@i
  4652  0037  01F6               	clrf	fcscheck@i+1
  4653  0038                     l3132:	
  4654  0038  0868               	movf	_dPacketnum,w
  4655  0039  3EFE               	addlw	254
  4656  003A  00F2               	movwf	??_fcscheck
  4657  003B  0869               	movf	_dPacketnum+1,w
  4658  003C  1803               	skipnc
  4659  003D  3E01               	addlw	1
  4660  003E  3EFF               	addlw	255
  4661  003F  00F3               	movwf	??_fcscheck+1
  4662  0040  0873               	movf	??_fcscheck+1,w
  4663  0041  0276               	subwf	fcscheck@i+1,w
  4664  0042  1D03               	skipz
  4665  0043  2846               	goto	u2735
  4666  0044  0872               	movf	??_fcscheck,w
  4667  0045  0275               	subwf	fcscheck@i,w
  4668  0046                     u2735:	
  4669  0046  1803               	btfsc	3,0
  4670  0047  2891               	goto	l279
  4671                           
  4672                           ;decode_AX25.c: 318: byte = dPacket[i];
  4673  0048  0875               	movf	fcscheck@i,w
  4674  0049  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4675  004A  0084               	movwf	4
  4676  004B  1783               	bsf	3,7	;select IRP bank3
  4677  004C  0800               	movf	0,w
  4678  004D  00F2               	movwf	??_fcscheck
  4679  004E  0872               	movf	??_fcscheck,w
  4680  004F  00F9               	movwf	fcscheck@byte
  4681                           
  4682                           ;decode_AX25.c: 319: for(UINT i=0;i<8;i++){
  4683  0050  01F7               	clrf	fcscheck@i_149
  4684  0051  01F8               	clrf	fcscheck@i_149+1
  4685  0052  3000               	movlw	0
  4686  0053  0278               	subwf	fcscheck@i_149+1,w
  4687  0054  3008               	movlw	8
  4688  0055  1903               	skipnz
  4689  0056  0277               	subwf	fcscheck@i_149,w
  4690  0057  1803               	btfsc	3,0
  4691  0058  288A               	goto	l3130
  4692  0059                     l3118:	
  4693                           
  4694                           ;decode_AX25.c: 320: bt = byte & 0x01;
  4695  0059  0879               	movf	fcscheck@byte,w
  4696  005A  3901               	andlw	1
  4697  005B  00F2               	movwf	??_fcscheck
  4698  005C  0872               	movf	??_fcscheck,w
  4699  005D  00F4               	movwf	fcscheck@bt
  4700  005E  1003               	bcf	3,0	;# 
  4701  005F  0CEF               	rrf	_dfcshi,f	;# 
  4702  0060  0CEE               	rrf	_dfcslo,f	;# 
  4703                           
  4704                           ;decode_AX25.c: 326: if(((STATUS & 0x01)^bt) == 0x01){
  4705  0061  3001               	movlw	1
  4706  0062  1283               	bcf	3,5	;RP0=0, select bank0
  4707  0063  1303               	bcf	3,6	;RP1=0, select bank0
  4708  0064  0503               	andwf	3,w	;volatile
  4709  0065  00F2               	movwf	??_fcscheck
  4710  0066  0874               	movf	fcscheck@bt,w
  4711  0067  0672               	xorwf	??_fcscheck,w
  4712  0068  00F3               	movwf	??_fcscheck+1
  4713  0069  0373               	decf	??_fcscheck+1,w
  4714  006A  1D03               	btfss	3,2
  4715  006B  2876               	goto	l3124
  4716                           
  4717                           ;decode_AX25.c: 327: dfcshi = dfcshi ^ 0x84;
  4718  006C  086F               	movf	_dfcshi,w
  4719  006D  3A84               	xorlw	132
  4720  006E  00F2               	movwf	??_fcscheck
  4721  006F  0872               	movf	??_fcscheck,w
  4722  0070  00EF               	movwf	_dfcshi
  4723                           
  4724                           ;decode_AX25.c: 328: dfcslo = dfcslo ^ 0x08;
  4725  0071  086E               	movf	_dfcslo,w
  4726  0072  3A08               	xorlw	8
  4727  0073  00F2               	movwf	??_fcscheck
  4728  0074  0872               	movf	??_fcscheck,w
  4729  0075  00EE               	movwf	_dfcslo
  4730  0076                     l3124:	
  4731                           
  4732                           ;decode_AX25.c: 329: }
  4733                           ;decode_AX25.c: 330: byte = byte >> 1;
  4734  0076  0879               	movf	fcscheck@byte,w
  4735  0077  00F2               	movwf	??_fcscheck
  4736  0078  1003               	clrc
  4737  0079  0C72               	rrf	??_fcscheck,w
  4738  007A  00F3               	movwf	??_fcscheck+1
  4739  007B  0873               	movf	??_fcscheck+1,w
  4740  007C  00F9               	movwf	fcscheck@byte
  4741  007D  3001               	movlw	1
  4742  007E  07F7               	addwf	fcscheck@i_149,f
  4743  007F  1803               	skipnc
  4744  0080  0AF8               	incf	fcscheck@i_149+1,f
  4745  0081  3000               	movlw	0
  4746  0082  07F8               	addwf	fcscheck@i_149+1,f
  4747  0083  3000               	movlw	0
  4748  0084  0278               	subwf	fcscheck@i_149+1,w
  4749  0085  3008               	movlw	8
  4750  0086  1903               	skipnz
  4751  0087  0277               	subwf	fcscheck@i_149,w
  4752  0088  1C03               	skipc
  4753  0089  2859               	goto	l3118
  4754  008A                     l3130:	
  4755  008A  3001               	movlw	1
  4756  008B  07F5               	addwf	fcscheck@i,f
  4757  008C  1803               	skipnc
  4758  008D  0AF6               	incf	fcscheck@i+1,f
  4759  008E  3000               	movlw	0
  4760  008F  07F6               	addwf	fcscheck@i+1,f
  4761  0090  2838               	goto	l3132
  4762  0091                     l279:	
  4763                           
  4764                           ;decode_AX25.c: 331: }
  4765                           ;decode_AX25.c: 332: }
  4766                           ;decode_AX25.c: 333: dfcslo = dfcslo ^ 0xff;
  4767  0091  09EE               	comf	_dfcslo,f
  4768                           
  4769                           ;decode_AX25.c: 334: dfcshi = dfcshi ^ 0xff;
  4770  0092  09EF               	comf	_dfcshi,f
  4771                           
  4772                           ;decode_AX25.c: 337: if((dPacket[dPacketnum-2] == dfcslo) && (dPacket[dPacketnum-1] == d
      +                          fcshi)){
  4773  0093  0868               	movf	_dPacketnum,w
  4774  0094  3EFE               	addlw	254
  4775  0095  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4776  0096  0084               	movwf	4
  4777  0097  1783               	bsf	3,7	;select IRP bank3
  4778  0098  0800               	movf	0,w
  4779  0099  066E               	xorwf	_dfcslo,w
  4780  009A  1D03               	skipz
  4781  009B  28A9               	goto	l3144
  4782  009C  0868               	movf	_dPacketnum,w
  4783  009D  3EFF               	addlw	255
  4784  009E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4785  009F  0084               	movwf	4
  4786  00A0  0800               	movf	0,w
  4787  00A1  066F               	xorwf	_dfcshi,w
  4788  00A2  1D03               	skipz
  4789  00A3  28A9               	goto	l3144
  4790                           
  4791                           ;decode_AX25.c: 342: return 1;
  4792  00A4  3001               	movlw	1
  4793  00A5  00F0               	movwf	?_fcscheck
  4794  00A6  3000               	movlw	0
  4795  00A7  00F1               	movwf	?_fcscheck+1
  4796  00A8  0008               	return
  4797  00A9                     l3144:	
  4798                           ;decode_AX25.c: 343: }else{
  4799                           
  4800                           
  4801                           ;decode_AX25.c: 348: return 0;
  4802  00A9  01F0               	clrf	?_fcscheck
  4803  00AA  01F1               	clrf	?_fcscheck+1
  4804  00AB  0008               	return
  4805  00AC                     __end_of_fcscheck:	
  4806                           
  4807                           	psect	text8
  4808  0833                     __ptext8:	
  4809 ;; *************** function _NM_waddress *****************
  4810 ;; Defined at:
  4811 ;;		line 72 in file "UART.c"
  4812 ;; Parameters:    Size  Location     Type
  4813 ;;  NM_wad_heade    1    wreg     unsigned char 
  4814 ;;  whigh_addres    1    1[COMMON] unsigned char 
  4815 ;;  wlow_address    1    2[COMMON] unsigned char 
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;  NM_wad_heade    1    3[COMMON] unsigned char 
  4818 ;; Return value:  Size  Location     Type
  4819 ;;                  1    wreg      void 
  4820 ;; Registers used:
  4821 ;;		wreg, status,2, status,0, pclath, cstack
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4827 ;;      Params:         2       0       0       0       0
  4828 ;;      Locals:         1       0       0       0       0
  4829 ;;      Temps:          0       0       0       0       0
  4830 ;;      Totals:         3       0       0       0       0
  4831 ;;Total ram usage:        3 bytes
  4832 ;; Hardware stack levels used:    1
  4833 ;; Hardware stack levels required when called:    1
  4834 ;; This function calls:
  4835 ;;		_putch
  4836 ;; This function is called by:
  4837 ;;		_main
  4838 ;; This function uses a non-reentrant model
  4839 ;;
  4840                           
  4841                           
  4842                           ;psect for function _NM_waddress
  4843  0833                     _NM_waddress:	
  4844                           
  4845                           ;incstack = 0
  4846                           ; Regs used in _NM_waddress: [wreg+status,2+status,0+pclath+cstack]
  4847                           ;NM_waddress@NM_wad_header stored from wreg
  4848  0833  00F3               	movwf	NM_waddress@NM_wad_header
  4849                           
  4850                           ;UART.c: 73: putch(NM_wad_header);
  4851  0834  0873               	movf	NM_waddress@NM_wad_header,w
  4852  0835  160A  118A  27F0  120A  158A  	fcall	_putch
  4853                           
  4854                           ;UART.c: 74: putch(whigh_address);
  4855  083A  0871               	movf	NM_waddress@whigh_address,w
  4856  083B  160A  118A  27F0  120A  158A  	fcall	_putch
  4857                           
  4858                           ;UART.c: 75: putch(wlow_address);
  4859  0840  0872               	movf	NM_waddress@wlow_address,w
  4860  0841  160A  118A  27F0   	fcall	_putch
  4861  0844  0008               	return
  4862  0845                     __end_of_NM_waddress:	
  4863                           
  4864                           	psect	text9
  4865  17F0                     __ptext9:	
  4866 ;; *************** function _putch *****************
  4867 ;; Defined at:
  4868 ;;		line 39 in file "UART.c"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;  byte            1    wreg     unsigned char 
  4871 ;; Auto vars:     Size  Location     Type
  4872 ;;  byte            1    0[COMMON] unsigned char 
  4873 ;; Return value:  Size  Location     Type
  4874 ;;                  1    wreg      void 
  4875 ;; Registers used:
  4876 ;;		wreg
  4877 ;; Tracked objects:
  4878 ;;		On entry : 0/0
  4879 ;;		On exit  : 0/0
  4880 ;;		Unchanged: 0/0
  4881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4882 ;;      Params:         0       0       0       0       0
  4883 ;;      Locals:         1       0       0       0       0
  4884 ;;      Temps:          0       0       0       0       0
  4885 ;;      Totals:         1       0       0       0       0
  4886 ;;Total ram usage:        1 bytes
  4887 ;; Hardware stack levels used:    1
  4888 ;; This function calls:
  4889 ;;		Nothing
  4890 ;; This function is called by:
  4891 ;;		_NM_waddress
  4892 ;;		_TXOBC_waddress
  4893 ;;		_putstr
  4894 ;;		_putcrlf
  4895 ;;		_put_error
  4896 ;;		_put_ok
  4897 ;;		_putAX25
  4898 ;;		_conv_DI_UARTRX
  4899 ;;		_test_Packetmaker
  4900 ;;		_EEPROM_Read
  4901 ;; This function uses a non-reentrant model
  4902 ;;
  4903                           
  4904                           
  4905                           ;psect for function _putch
  4906  17F0                     _putch:	
  4907                           
  4908                           ;incstack = 0
  4909                           ; Regs used in _putch: [wreg]
  4910                           ;putch@byte stored from wreg
  4911  17F0  00F0               	movwf	putch@byte
  4912  17F1                     l69:	
  4913                           ;UART.c: 40: while(!TXIF);
  4914                           
  4915  17F1  1283               	bcf	3,5	;RP0=0, select bank0
  4916  17F2  1303               	bcf	3,6	;RP1=0, select bank0
  4917  17F3  1E0C               	btfss	12,4	;volatile
  4918  17F4  2FF1               	goto	l69
  4919                           
  4920                           ;UART.c: 41: TXREG = byte;
  4921  17F5  0870               	movf	putch@byte,w
  4922  17F6  0099               	movwf	25	;volatile
  4923  17F7  0008               	return
  4924  17F8                     __end_of_putch:	
  4925                           
  4926                           	psect	text10
  4927  085A                     __ptext10:	
  4928 ;; *************** function _Init_SERIAL *****************
  4929 ;; Defined at:
  4930 ;;		line 6 in file "UART.c"
  4931 ;; Parameters:    Size  Location     Type
  4932 ;;		None
  4933 ;; Auto vars:     Size  Location     Type
  4934 ;;		None
  4935 ;; Return value:  Size  Location     Type
  4936 ;;                  1    wreg      void 
  4937 ;; Registers used:
  4938 ;;		wreg
  4939 ;; Tracked objects:
  4940 ;;		On entry : 0/0
  4941 ;;		On exit  : 0/0
  4942 ;;		Unchanged: 0/0
  4943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4944 ;;      Params:         0       0       0       0       0
  4945 ;;      Locals:         0       0       0       0       0
  4946 ;;      Temps:          0       0       0       0       0
  4947 ;;      Totals:         0       0       0       0       0
  4948 ;;Total ram usage:        0 bytes
  4949 ;; Hardware stack levels used:    1
  4950 ;; This function calls:
  4951 ;;		Nothing
  4952 ;; This function is called by:
  4953 ;;		_main
  4954 ;; This function uses a non-reentrant model
  4955 ;;
  4956                           
  4957                           
  4958                           ;psect for function _Init_SERIAL
  4959  085A                     _Init_SERIAL:	
  4960                           
  4961                           ;UART.c: 7: SPBRG = 10;
  4962                           
  4963                           ;incstack = 0
  4964                           ; Regs used in _Init_SERIAL: [wreg]
  4965  085A  300A               	movlw	10
  4966  085B  1683               	bsf	3,5	;RP0=1, select bank1
  4967  085C  1303               	bcf	3,6	;RP1=0, select bank1
  4968  085D  0099               	movwf	25	;volatile
  4969                           
  4970                           ;UART.c: 8: BRGH = 0;
  4971  085E  1118               	bcf	24,2	;volatile
  4972                           
  4973                           ;UART.c: 9: SYNC = 0;
  4974  085F  1218               	bcf	24,4	;volatile
  4975                           
  4976                           ;UART.c: 10: SPEN = 1;
  4977  0860  1283               	bcf	3,5	;RP0=0, select bank0
  4978  0861  1303               	bcf	3,6	;RP1=0, select bank0
  4979  0862  1798               	bsf	24,7	;volatile
  4980                           
  4981                           ;UART.c: 11: CREN = 1;
  4982  0863  1618               	bsf	24,4	;volatile
  4983                           
  4984                           ;UART.c: 12: SREN = 0;
  4985  0864  1298               	bcf	24,5	;volatile
  4986                           
  4987                           ;UART.c: 13: RCIF = 0;
  4988  0865  128C               	bcf	12,5	;volatile
  4989                           
  4990                           ;UART.c: 14: TXIE = 0;
  4991  0866  1683               	bsf	3,5	;RP0=1, select bank1
  4992  0867  1303               	bcf	3,6	;RP1=0, select bank1
  4993  0868  120C               	bcf	12,4	;volatile
  4994                           
  4995                           ;UART.c: 15: RCIE = 1;
  4996  0869  168C               	bsf	12,5	;volatile
  4997                           
  4998                           ;UART.c: 16: TX9 = 0;
  4999  086A  1318               	bcf	24,6	;volatile
  5000                           
  5001                           ;UART.c: 17: RX9 = 0;
  5002  086B  1283               	bcf	3,5	;RP0=0, select bank0
  5003  086C  1303               	bcf	3,6	;RP1=0, select bank0
  5004  086D  1318               	bcf	24,6	;volatile
  5005                           
  5006                           ;UART.c: 18: TXEN = 0;
  5007  086E  1683               	bsf	3,5	;RP0=1, select bank1
  5008  086F  1303               	bcf	3,6	;RP1=0, select bank1
  5009  0870  1298               	bcf	24,5	;volatile
  5010                           
  5011                           ;UART.c: 19: TXEN = 1;
  5012  0871  1698               	bsf	24,5	;volatile
  5013  0872  0008               	return
  5014  0873                     __end_of_Init_SERIAL:	
  5015                           
  5016                           	psect	text11
  5017  08A6                     __ptext11:	
  5018 ;; *************** function _Init_MPU *****************
  5019 ;; Defined at:
  5020 ;;		line 8 in file "Init_MPU.c"
  5021 ;; Parameters:    Size  Location     Type
  5022 ;;		None
  5023 ;; Auto vars:     Size  Location     Type
  5024 ;;		None
  5025 ;; Return value:  Size  Location     Type
  5026 ;;                  1    wreg      void 
  5027 ;; Registers used:
  5028 ;;		wreg, status,2
  5029 ;; Tracked objects:
  5030 ;;		On entry : 0/0
  5031 ;;		On exit  : 0/0
  5032 ;;		Unchanged: 0/0
  5033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5034 ;;      Params:         0       0       0       0       0
  5035 ;;      Locals:         0       0       0       0       0
  5036 ;;      Temps:          0       0       0       0       0
  5037 ;;      Totals:         0       0       0       0       0
  5038 ;;Total ram usage:        0 bytes
  5039 ;; Hardware stack levels used:    1
  5040 ;; This function calls:
  5041 ;;		Nothing
  5042 ;; This function is called by:
  5043 ;;		_main
  5044 ;; This function uses a non-reentrant model
  5045 ;;
  5046                           
  5047                           
  5048                           ;psect for function _Init_MPU
  5049  08A6                     _Init_MPU:	
  5050                           
  5051                           ;Init_MPU.c: 11: PORTA = 0x00;
  5052                           
  5053                           ;incstack = 0
  5054                           ; Regs used in _Init_MPU: [wreg+status,2]
  5055  08A6  1283               	bcf	3,5	;RP0=0, select bank0
  5056  08A7  1303               	bcf	3,6	;RP1=0, select bank0
  5057  08A8  0185               	clrf	5	;volatile
  5058                           
  5059                           ;Init_MPU.c: 12: PORTB = 0x00;
  5060  08A9  0186               	clrf	6	;volatile
  5061                           
  5062                           ;Init_MPU.c: 13: PORTC = 0x00;
  5063  08AA  0187               	clrf	7	;volatile
  5064                           
  5065                           ;Init_MPU.c: 14: PORTD = 0x00;
  5066  08AB  0188               	clrf	8	;volatile
  5067                           
  5068                           ;Init_MPU.c: 15: PORTE = 0x00;
  5069  08AC  0189               	clrf	9	;volatile
  5070                           
  5071                           ;Init_MPU.c: 18: ANSEL = 0x00;
  5072  08AD  1683               	bsf	3,5	;RP0=1, select bank3
  5073  08AE  1703               	bsf	3,6	;RP1=1, select bank3
  5074  08AF  0188               	clrf	8	;volatile
  5075                           
  5076                           ;Init_MPU.c: 19: ANSELH = 0x00;
  5077  08B0  0189               	clrf	9	;volatile
  5078                           
  5079                           ;Init_MPU.c: 23: TRISA = 0b10000000;
  5080  08B1  3080               	movlw	128
  5081  08B2  1683               	bsf	3,5	;RP0=1, select bank1
  5082  08B3  1303               	bcf	3,6	;RP1=0, select bank1
  5083  08B4  0085               	movwf	5	;volatile
  5084                           
  5085                           ;Init_MPU.c: 24: TRISB = 0b00100000;
  5086  08B5  3020               	movlw	32
  5087  08B6  0086               	movwf	6	;volatile
  5088                           
  5089                           ;Init_MPU.c: 25: TRISC = 0b10011000;
  5090  08B7  3098               	movlw	152
  5091  08B8  0087               	movwf	7	;volatile
  5092                           
  5093                           ;Init_MPU.c: 26: TRISD = 0b00000000;
  5094  08B9  0188               	clrf	8	;volatile
  5095                           
  5096                           ;Init_MPU.c: 27: TRISE = 0b00000000;
  5097  08BA  0189               	clrf	9	;volatile
  5098                           
  5099                           ;Init_MPU.c: 30: PORTA = 0x00;
  5100  08BB  1283               	bcf	3,5	;RP0=0, select bank0
  5101  08BC  1303               	bcf	3,6	;RP1=0, select bank0
  5102  08BD  0185               	clrf	5	;volatile
  5103                           
  5104                           ;Init_MPU.c: 31: PORTB = 0x00;
  5105  08BE  0186               	clrf	6	;volatile
  5106                           
  5107                           ;Init_MPU.c: 32: PORTC = 0x00;
  5108  08BF  0187               	clrf	7	;volatile
  5109                           
  5110                           ;Init_MPU.c: 33: PORTD = 0x00;
  5111  08C0  0188               	clrf	8	;volatile
  5112                           
  5113                           ;Init_MPU.c: 34: PORTE = 0x00;
  5114  08C1  0189               	clrf	9	;volatile
  5115  08C2  0008               	return
  5116  08C3                     __end_of_Init_MPU:	
  5117                           
  5118                           	psect	text12
  5119  099D                     __ptext12:	
  5120 ;; *************** function _Init_I2C_M *****************
  5121 ;; Defined at:
  5122 ;;		line 8 in file "I2C.c"
  5123 ;; Parameters:    Size  Location     Type
  5124 ;;  c               4    0[BANK0 ] const unsigned long 
  5125 ;; Auto vars:     Size  Location     Type
  5126 ;;		None
  5127 ;; Return value:  Size  Location     Type
  5128 ;;                  1    wreg      void 
  5129 ;; Registers used:
  5130 ;;		wreg, status,2, status,0, pclath, cstack
  5131 ;; Tracked objects:
  5132 ;;		On entry : 0/0
  5133 ;;		On exit  : 0/0
  5134 ;;		Unchanged: 0/0
  5135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5136 ;;      Params:         0       4       0       0       0
  5137 ;;      Locals:         0       0       0       0       0
  5138 ;;      Temps:          0       4       0       0       0
  5139 ;;      Totals:         0       8       0       0       0
  5140 ;;Total ram usage:        8 bytes
  5141 ;; Hardware stack levels used:    1
  5142 ;; Hardware stack levels required when called:    1
  5143 ;; This function calls:
  5144 ;;		___lldiv
  5145 ;; This function is called by:
  5146 ;;		_main
  5147 ;; This function uses a non-reentrant model
  5148 ;;
  5149                           
  5150                           
  5151                           ;psect for function _Init_I2C_M
  5152  099D                     _Init_I2C_M:	
  5153                           
  5154                           ;I2C.c: 9: SSPCON = 0b00101000;
  5155                           
  5156                           ;incstack = 0
  5157                           ; Regs used in _Init_I2C_M: [wreg+status,2+status,0+pclath+cstack]
  5158  099D  3028               	movlw	40
  5159  099E  1283               	bcf	3,5	;RP0=0, select bank0
  5160  099F  1303               	bcf	3,6	;RP1=0, select bank0
  5161  09A0  0094               	movwf	20	;volatile
  5162                           
  5163                           ;I2C.c: 10: SSPCON2 = 0;
  5164  09A1  1683               	bsf	3,5	;RP0=1, select bank1
  5165  09A2  1303               	bcf	3,6	;RP1=0, select bank1
  5166  09A3  0191               	clrf	17	;volatile
  5167                           
  5168                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  5169  09A4  1283               	bcf	3,5	;RP0=0, select bank0
  5170  09A5  1303               	bcf	3,6	;RP1=0, select bank0
  5171  09A6  0820               	movf	Init_I2C_M@c,w
  5172  09A7  00A4               	movwf	??_Init_I2C_M
  5173  09A8  0821               	movf	Init_I2C_M@c+1,w
  5174  09A9  00A5               	movwf	??_Init_I2C_M+1
  5175  09AA  0822               	movf	Init_I2C_M@c+2,w
  5176  09AB  00A6               	movwf	??_Init_I2C_M+2
  5177  09AC  0823               	movf	Init_I2C_M@c+3,w
  5178  09AD  00A7               	movwf	??_Init_I2C_M+3
  5179  09AE  3002               	movlw	2
  5180  09AF                     u3155:	
  5181  09AF  1003               	clrc
  5182  09B0  0DA4               	rlf	??_Init_I2C_M,f
  5183  09B1  0DA5               	rlf	??_Init_I2C_M+1,f
  5184  09B2  0DA6               	rlf	??_Init_I2C_M+2,f
  5185  09B3  0DA7               	rlf	??_Init_I2C_M+3,f
  5186  09B4  3EFF               	addlw	-1
  5187  09B5  1D03               	skipz
  5188  09B6  29AF               	goto	u3155
  5189  09B7  0827               	movf	??_Init_I2C_M+3,w
  5190  09B8  00F3               	movwf	___lldiv@divisor+3
  5191  09B9  0826               	movf	??_Init_I2C_M+2,w
  5192  09BA  00F2               	movwf	___lldiv@divisor+2
  5193  09BB  0825               	movf	??_Init_I2C_M+1,w
  5194  09BC  00F1               	movwf	___lldiv@divisor+1
  5195  09BD  0824               	movf	??_Init_I2C_M,w
  5196  09BE  00F0               	movwf	___lldiv@divisor
  5197  09BF  3000               	movlw	0
  5198  09C0  00F7               	movwf	___lldiv@dividend+3
  5199  09C1  3098               	movlw	152
  5200  09C2  00F6               	movwf	___lldiv@dividend+2
  5201  09C3  3096               	movlw	150
  5202  09C4  00F5               	movwf	___lldiv@dividend+1
  5203  09C5  3080               	movlw	128
  5204  09C6  00F4               	movwf	___lldiv@dividend
  5205  09C7  120A  158A  2399   	fcall	___lldiv
  5206  09CA  0870               	movf	?___lldiv,w
  5207  09CB  3EFF               	addlw	255
  5208  09CC  1683               	bsf	3,5	;RP0=1, select bank1
  5209  09CD  1303               	bcf	3,6	;RP1=0, select bank1
  5210  09CE  0093               	movwf	19	;volatile
  5211                           
  5212                           ;I2C.c: 12: SSPSTAT = 0;
  5213  09CF  0194               	clrf	20	;volatile
  5214  09D0  0008               	return
  5215  09D1                     __end_of_Init_I2C_M:	
  5216                           
  5217                           	psect	text13
  5218  0B99                     __ptext13:	
  5219 ;; *************** function ___lldiv *****************
  5220 ;; Defined at:
  5221 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5222 ;; Parameters:    Size  Location     Type
  5223 ;;  divisor         4    0[COMMON] unsigned long 
  5224 ;;  dividend        4    4[COMMON] unsigned long 
  5225 ;; Auto vars:     Size  Location     Type
  5226 ;;  quotient        4    9[COMMON] unsigned long 
  5227 ;;  counter         1   13[COMMON] unsigned char 
  5228 ;; Return value:  Size  Location     Type
  5229 ;;                  4    0[COMMON] unsigned long 
  5230 ;; Registers used:
  5231 ;;		wreg, status,2, status,0
  5232 ;; Tracked objects:
  5233 ;;		On entry : 0/0
  5234 ;;		On exit  : 0/0
  5235 ;;		Unchanged: 0/0
  5236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5237 ;;      Params:         8       0       0       0       0
  5238 ;;      Locals:         5       0       0       0       0
  5239 ;;      Temps:          1       0       0       0       0
  5240 ;;      Totals:        14       0       0       0       0
  5241 ;;Total ram usage:       14 bytes
  5242 ;; Hardware stack levels used:    1
  5243 ;; This function calls:
  5244 ;;		Nothing
  5245 ;; This function is called by:
  5246 ;;		_Init_I2C_M
  5247 ;; This function uses a non-reentrant model
  5248 ;;
  5249                           
  5250                           
  5251                           ;psect for function ___lldiv
  5252  0B99                     ___lldiv:	
  5253                           
  5254                           ;incstack = 0
  5255                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5256  0B99  3000               	movlw	0
  5257  0B9A  00FC               	movwf	___lldiv@quotient+3
  5258  0B9B  3000               	movlw	0
  5259  0B9C  00FB               	movwf	___lldiv@quotient+2
  5260  0B9D  3000               	movlw	0
  5261  0B9E  00FA               	movwf	___lldiv@quotient+1
  5262  0B9F  3000               	movlw	0
  5263  0BA0  00F9               	movwf	___lldiv@quotient
  5264  0BA1  0873               	movf	___lldiv@divisor+3,w
  5265  0BA2  0472               	iorwf	___lldiv@divisor+2,w
  5266  0BA3  0471               	iorwf	___lldiv@divisor+1,w
  5267  0BA4  0470               	iorwf	___lldiv@divisor,w
  5268  0BA5  1903               	skipnz
  5269  0BA6  2BEE               	goto	l3308
  5270  0BA7  01FD               	clrf	___lldiv@counter
  5271  0BA8  0AFD               	incf	___lldiv@counter,f
  5272  0BA9                     l3294:	
  5273  0BA9  1BF3               	btfsc	___lldiv@divisor+3,7
  5274  0BAA  2BB9               	goto	l3296
  5275  0BAB  3001               	movlw	1
  5276  0BAC  00F8               	movwf	??___lldiv
  5277  0BAD                     u3005:	
  5278  0BAD  1003               	clrc
  5279  0BAE  0DF0               	rlf	___lldiv@divisor,f
  5280  0BAF  0DF1               	rlf	___lldiv@divisor+1,f
  5281  0BB0  0DF2               	rlf	___lldiv@divisor+2,f
  5282  0BB1  0DF3               	rlf	___lldiv@divisor+3,f
  5283  0BB2  0BF8               	decfsz	??___lldiv,f
  5284  0BB3  2BAD               	goto	u3005
  5285  0BB4  3001               	movlw	1
  5286  0BB5  00F8               	movwf	??___lldiv
  5287  0BB6  0878               	movf	??___lldiv,w
  5288  0BB7  07FD               	addwf	___lldiv@counter,f
  5289  0BB8  2BA9               	goto	l3294
  5290  0BB9                     l3296:	
  5291  0BB9  3001               	movlw	1
  5292  0BBA  00F8               	movwf	??___lldiv
  5293  0BBB                     u3025:	
  5294  0BBB  1003               	clrc
  5295  0BBC  0DF9               	rlf	___lldiv@quotient,f
  5296  0BBD  0DFA               	rlf	___lldiv@quotient+1,f
  5297  0BBE  0DFB               	rlf	___lldiv@quotient+2,f
  5298  0BBF  0DFC               	rlf	___lldiv@quotient+3,f
  5299  0BC0  0BF8               	decfsz	??___lldiv,f
  5300  0BC1  2BBB               	goto	u3025
  5301  0BC2  0873               	movf	___lldiv@divisor+3,w
  5302  0BC3  0277               	subwf	___lldiv@dividend+3,w
  5303  0BC4  1D03               	skipz
  5304  0BC5  2BD0               	goto	u3035
  5305  0BC6  0872               	movf	___lldiv@divisor+2,w
  5306  0BC7  0276               	subwf	___lldiv@dividend+2,w
  5307  0BC8  1D03               	skipz
  5308  0BC9  2BD0               	goto	u3035
  5309  0BCA  0871               	movf	___lldiv@divisor+1,w
  5310  0BCB  0275               	subwf	___lldiv@dividend+1,w
  5311  0BCC  1D03               	skipz
  5312  0BCD  2BD0               	goto	u3035
  5313  0BCE  0870               	movf	___lldiv@divisor,w
  5314  0BCF  0274               	subwf	___lldiv@dividend,w
  5315  0BD0                     u3035:	
  5316  0BD0  1C03               	skipc
  5317  0BD1  2BE1               	goto	l3304
  5318  0BD2  0870               	movf	___lldiv@divisor,w
  5319  0BD3  02F4               	subwf	___lldiv@dividend,f
  5320  0BD4  0871               	movf	___lldiv@divisor+1,w
  5321  0BD5  1C03               	skipc
  5322  0BD6  0F71               	incfsz	___lldiv@divisor+1,w
  5323  0BD7  02F5               	subwf	___lldiv@dividend+1,f
  5324  0BD8  0872               	movf	___lldiv@divisor+2,w
  5325  0BD9  1C03               	skipc
  5326  0BDA  0F72               	incfsz	___lldiv@divisor+2,w
  5327  0BDB  02F6               	subwf	___lldiv@dividend+2,f
  5328  0BDC  0873               	movf	___lldiv@divisor+3,w
  5329  0BDD  1C03               	skipc
  5330  0BDE  0F73               	incfsz	___lldiv@divisor+3,w
  5331  0BDF  02F7               	subwf	___lldiv@dividend+3,f
  5332  0BE0  1479               	bsf	___lldiv@quotient,0
  5333  0BE1                     l3304:	
  5334  0BE1  3001               	movlw	1
  5335  0BE2                     u3045:	
  5336  0BE2  1003               	clrc
  5337  0BE3  0CF3               	rrf	___lldiv@divisor+3,f
  5338  0BE4  0CF2               	rrf	___lldiv@divisor+2,f
  5339  0BE5  0CF1               	rrf	___lldiv@divisor+1,f
  5340  0BE6  0CF0               	rrf	___lldiv@divisor,f
  5341  0BE7  3EFF               	addlw	-1
  5342  0BE8  1D03               	skipz
  5343  0BE9  2BE2               	goto	u3045
  5344  0BEA  3001               	movlw	1
  5345  0BEB  02FD               	subwf	___lldiv@counter,f
  5346  0BEC  1D03               	btfss	3,2
  5347  0BED  2BB9               	goto	l3296
  5348  0BEE                     l3308:	
  5349  0BEE  087C               	movf	___lldiv@quotient+3,w
  5350  0BEF  00F3               	movwf	?___lldiv+3
  5351  0BF0  087B               	movf	___lldiv@quotient+2,w
  5352  0BF1  00F2               	movwf	?___lldiv+2
  5353  0BF2  087A               	movf	___lldiv@quotient+1,w
  5354  0BF3  00F1               	movwf	?___lldiv+1
  5355  0BF4  0879               	movf	___lldiv@quotient,w
  5356  0BF5  00F0               	movwf	?___lldiv
  5357  0BF6  0008               	return
  5358  0BF7                     __end_of___lldiv:	
  5359                           
  5360                           	psect	text14
  5361  0943                     __ptext14:	
  5362 ;; *************** function _FMTX *****************
  5363 ;; Defined at:
  5364 ;;		line 270 in file "FMCW.c"
  5365 ;; Parameters:    Size  Location     Type
  5366 ;;  Nref            2   60[BANK0 ] int 
  5367 ;;  Nprg            2   62[BANK0 ] PTR int 
  5368 ;;		 -> RAM(512), main@FMTX_Nprg(10), FMTX_Nprg(10), 
  5369 ;; Auto vars:     Size  Location     Type
  5370 ;;  fmtx            2   64[BANK0 ] int 
  5371 ;; Return value:  Size  Location     Type
  5372 ;;                  1    wreg      void 
  5373 ;; Registers used:
  5374 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5375 ;; Tracked objects:
  5376 ;;		On entry : 0/0
  5377 ;;		On exit  : 0/0
  5378 ;;		Unchanged: 0/0
  5379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5380 ;;      Params:         0       4       0       0       0
  5381 ;;      Locals:         0       2       0       0       0
  5382 ;;      Temps:          0       0       0       0       0
  5383 ;;      Totals:         0       6       0       0       0
  5384 ;;Total ram usage:        6 bytes
  5385 ;; Hardware stack levels used:    1
  5386 ;; Hardware stack levels required when called:    3
  5387 ;; This function calls:
  5388 ;;		_OPINIT
  5389 ;;		_OUTFQ
  5390 ;;		_RFDOUT
  5391 ;; This function is called by:
  5392 ;;		_main
  5393 ;;		_SetPLL
  5394 ;; This function uses a non-reentrant model
  5395 ;;
  5396                           
  5397                           
  5398                           ;psect for function _FMTX
  5399  0943                     _FMTX:	
  5400                           
  5401                           ;FMCW.c: 271: int fmtx = 1;
  5402                           
  5403                           ;incstack = 0
  5404                           ; Regs used in _FMTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5405  0943  3001               	movlw	1
  5406  0944  1283               	bcf	3,5	;RP0=0, select bank0
  5407  0945  1303               	bcf	3,6	;RP1=0, select bank0
  5408  0946  00E0               	movwf	FMTX@fmtx
  5409  0947  3000               	movlw	0
  5410  0948  00E1               	movwf	FMTX@fmtx+1
  5411                           
  5412                           ;FMCW.c: 272: OPINIT(fmtx);
  5413  0949  0861               	movf	FMTX@fmtx+1,w
  5414  094A  00F5               	movwf	OPINIT@fmcwtxrx+1
  5415  094B  0860               	movf	FMTX@fmtx,w
  5416  094C  00F4               	movwf	OPINIT@fmcwtxrx
  5417  094D  120A  158A  24BD  120A  158A  	fcall	_OPINIT
  5418                           
  5419                           ;FMCW.c: 273: RFDOUT(fmtx, Nref);
  5420  0952  1283               	bcf	3,5	;RP0=0, select bank0
  5421  0953  1303               	bcf	3,6	;RP1=0, select bank0
  5422  0954  0861               	movf	FMTX@fmtx+1,w
  5423  0955  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5424  0956  0860               	movf	FMTX@fmtx,w
  5425  0957  00F9               	movwf	RFDOUT@fmcwtxrx
  5426  0958  085D               	movf	FMTX@Nref+1,w
  5427  0959  00FC               	movwf	RFDOUT@Nref+1
  5428  095A  085C               	movf	FMTX@Nref,w
  5429  095B  00FB               	movwf	RFDOUT@Nref
  5430  095C  120A  158A  253A  120A  158A  	fcall	_RFDOUT
  5431                           
  5432                           ;FMCW.c: 274: OUTFQ(fmtx, Nprg);
  5433  0961  1283               	bcf	3,5	;RP0=0, select bank0
  5434  0962  1303               	bcf	3,6	;RP1=0, select bank0
  5435  0963  0861               	movf	FMTX@fmtx+1,w
  5436  0964  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5437  0965  0860               	movf	FMTX@fmtx,w
  5438  0966  00F9               	movwf	OUTFQ@fmcwtxrx
  5439  0967  085E               	movf	FMTX@Nprg,w
  5440  0968  00FB               	movwf	OUTFQ@Nprg
  5441  0969  085F               	movf	FMTX@Nprg+1,w
  5442  096A  00FC               	movwf	OUTFQ@Nprg+1
  5443  096B  120A  118A  20AC   	fcall	_OUTFQ
  5444  096E  0008               	return
  5445  096F                     __end_of_FMTX:	
  5446                           
  5447                           	psect	text15
  5448  0917                     __ptext15:	
  5449 ;; *************** function _FMRX *****************
  5450 ;; Defined at:
  5451 ;;		line 298 in file "FMCW.c"
  5452 ;; Parameters:    Size  Location     Type
  5453 ;;  Nref            2   60[BANK0 ] int 
  5454 ;;  Nprg            2   62[BANK0 ] PTR int 
  5455 ;;		 -> RAM(512), main@FMRX_Nprg(10), FMRX_Nprg(10), 
  5456 ;; Auto vars:     Size  Location     Type
  5457 ;;  fmrx            2   64[BANK0 ] int 
  5458 ;; Return value:  Size  Location     Type
  5459 ;;                  1    wreg      void 
  5460 ;; Registers used:
  5461 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5462 ;; Tracked objects:
  5463 ;;		On entry : 0/0
  5464 ;;		On exit  : 0/0
  5465 ;;		Unchanged: 0/0
  5466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5467 ;;      Params:         0       4       0       0       0
  5468 ;;      Locals:         0       2       0       0       0
  5469 ;;      Temps:          0       0       0       0       0
  5470 ;;      Totals:         0       6       0       0       0
  5471 ;;Total ram usage:        6 bytes
  5472 ;; Hardware stack levels used:    1
  5473 ;; Hardware stack levels required when called:    3
  5474 ;; This function calls:
  5475 ;;		_OPINIT
  5476 ;;		_OUTFQ
  5477 ;;		_RFDOUT
  5478 ;; This function is called by:
  5479 ;;		_main
  5480 ;;		_SetPLL
  5481 ;; This function uses a non-reentrant model
  5482 ;;
  5483                           
  5484                           
  5485                           ;psect for function _FMRX
  5486  0917                     _FMRX:	
  5487                           
  5488                           ;FMCW.c: 299: int fmrx = 3;
  5489                           
  5490                           ;incstack = 0
  5491                           ; Regs used in _FMRX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5492  0917  3003               	movlw	3
  5493  0918  1283               	bcf	3,5	;RP0=0, select bank0
  5494  0919  1303               	bcf	3,6	;RP1=0, select bank0
  5495  091A  00E0               	movwf	FMRX@fmrx
  5496  091B  3000               	movlw	0
  5497  091C  00E1               	movwf	FMRX@fmrx+1
  5498                           
  5499                           ;FMCW.c: 300: OPINIT(fmrx);
  5500  091D  0861               	movf	FMRX@fmrx+1,w
  5501  091E  00F5               	movwf	OPINIT@fmcwtxrx+1
  5502  091F  0860               	movf	FMRX@fmrx,w
  5503  0920  00F4               	movwf	OPINIT@fmcwtxrx
  5504  0921  120A  158A  24BD  120A  158A  	fcall	_OPINIT
  5505                           
  5506                           ;FMCW.c: 301: RFDOUT(fmrx, Nref);
  5507  0926  1283               	bcf	3,5	;RP0=0, select bank0
  5508  0927  1303               	bcf	3,6	;RP1=0, select bank0
  5509  0928  0861               	movf	FMRX@fmrx+1,w
  5510  0929  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5511  092A  0860               	movf	FMRX@fmrx,w
  5512  092B  00F9               	movwf	RFDOUT@fmcwtxrx
  5513  092C  085D               	movf	FMRX@Nref+1,w
  5514  092D  00FC               	movwf	RFDOUT@Nref+1
  5515  092E  085C               	movf	FMRX@Nref,w
  5516  092F  00FB               	movwf	RFDOUT@Nref
  5517  0930  120A  158A  253A  120A  158A  	fcall	_RFDOUT
  5518                           
  5519                           ;FMCW.c: 302: OUTFQ(fmrx, Nprg);
  5520  0935  1283               	bcf	3,5	;RP0=0, select bank0
  5521  0936  1303               	bcf	3,6	;RP1=0, select bank0
  5522  0937  0861               	movf	FMRX@fmrx+1,w
  5523  0938  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5524  0939  0860               	movf	FMRX@fmrx,w
  5525  093A  00F9               	movwf	OUTFQ@fmcwtxrx
  5526  093B  085E               	movf	FMRX@Nprg,w
  5527  093C  00FB               	movwf	OUTFQ@Nprg
  5528  093D  085F               	movf	FMRX@Nprg+1,w
  5529  093E  00FC               	movwf	OUTFQ@Nprg+1
  5530  093F  120A  118A  20AC   	fcall	_OUTFQ
  5531  0942  0008               	return
  5532  0943                     __end_of_FMRX:	
  5533                           
  5534                           	psect	text16
  5535  0B3C                     __ptext16:	
  5536 ;; *************** function _EEPROM_Write *****************
  5537 ;; Defined at:
  5538 ;;		line 51 in file "I2C.c"
  5539 ;; Parameters:    Size  Location     Type
  5540 ;;  EEPROM_addre    1    wreg     unsigned char 
  5541 ;;  high_address    1    2[COMMON] unsigned char 
  5542 ;;  low_address     1    3[COMMON] unsigned char 
  5543 ;;  data            1    4[COMMON] PTR unsigned char 
  5544 ;;		 -> NULL(0), dData(16), 
  5545 ;; Auto vars:     Size  Location     Type
  5546 ;;  EEPROM_addre    1    8[COMMON] unsigned char 
  5547 ;;  Address         1    9[COMMON] unsigned char 
  5548 ;; Return value:  Size  Location     Type
  5549 ;;                  1    wreg      void 
  5550 ;; Registers used:
  5551 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5552 ;; Tracked objects:
  5553 ;;		On entry : 0/0
  5554 ;;		On exit  : 0/0
  5555 ;;		Unchanged: 0/0
  5556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5557 ;;      Params:         3       0       0       0       0
  5558 ;;      Locals:         2       0       0       0       0
  5559 ;;      Temps:          3       0       0       0       0
  5560 ;;      Totals:         8       0       0       0       0
  5561 ;;Total ram usage:        8 bytes
  5562 ;; Hardware stack levels used:    1
  5563 ;; Hardware stack levels required when called:    2
  5564 ;; This function calls:
  5565 ;;		_I2C_Master_Start
  5566 ;;		_I2C_Master_Stop
  5567 ;;		_I2C_Master_Write
  5568 ;; This function is called by:
  5569 ;;		_main
  5570 ;; This function uses a non-reentrant model
  5571 ;;
  5572                           
  5573                           
  5574                           ;psect for function _EEPROM_Write
  5575  0B3C                     _EEPROM_Write:	
  5576                           
  5577                           ;incstack = 0
  5578                           ; Regs used in _EEPROM_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5579                           ;EEPROM_Write@EEPROM_address stored from wreg
  5580  0B3C  00F8               	movwf	EEPROM_Write@EEPROM_address
  5581                           
  5582                           ;I2C.c: 52: UBYTE Address = EEPROM_address << 1;
  5583  0B3D  0878               	movf	EEPROM_Write@EEPROM_address,w
  5584  0B3E  00F5               	movwf	??_EEPROM_Write
  5585  0B3F  0775               	addwf	??_EEPROM_Write,w
  5586  0B40  00F6               	movwf	??_EEPROM_Write+1
  5587  0B41  0876               	movf	??_EEPROM_Write+1,w
  5588  0B42  00F9               	movwf	EEPROM_Write@Address
  5589                           
  5590                           ;I2C.c: 55: I2C_Master_Start();
  5591  0B43  160A  118A  27DA  120A  158A  	fcall	_I2C_Master_Start
  5592                           
  5593                           ;I2C.c: 56: I2C_Master_Write(Address);
  5594  0B48  0879               	movf	EEPROM_Write@Address,w
  5595  0B49  00F5               	movwf	??_EEPROM_Write
  5596  0B4A  01F6               	clrf	??_EEPROM_Write+1
  5597  0B4B  0875               	movf	??_EEPROM_Write,w
  5598  0B4C  00F0               	movwf	I2C_Master_Write@d
  5599  0B4D  0876               	movf	??_EEPROM_Write+1,w
  5600  0B4E  00F1               	movwf	I2C_Master_Write@d+1
  5601  0B4F  160A  118A  27E8  120A  158A  	fcall	_I2C_Master_Write
  5602                           
  5603                           ;I2C.c: 57: I2C_Master_Write(high_address);
  5604  0B54  0872               	movf	EEPROM_Write@high_address,w
  5605  0B55  00F5               	movwf	??_EEPROM_Write
  5606  0B56  01F6               	clrf	??_EEPROM_Write+1
  5607  0B57  0875               	movf	??_EEPROM_Write,w
  5608  0B58  00F0               	movwf	I2C_Master_Write@d
  5609  0B59  0876               	movf	??_EEPROM_Write+1,w
  5610  0B5A  00F1               	movwf	I2C_Master_Write@d+1
  5611  0B5B  160A  118A  27E8  120A  158A  	fcall	_I2C_Master_Write
  5612                           
  5613                           ;I2C.c: 58: I2C_Master_Write(low_address);
  5614  0B60  0873               	movf	EEPROM_Write@low_address,w
  5615  0B61  00F5               	movwf	??_EEPROM_Write
  5616  0B62  01F6               	clrf	??_EEPROM_Write+1
  5617  0B63  0875               	movf	??_EEPROM_Write,w
  5618  0B64  00F0               	movwf	I2C_Master_Write@d
  5619  0B65  0876               	movf	??_EEPROM_Write+1,w
  5620  0B66  00F1               	movwf	I2C_Master_Write@d+1
  5621  0B67  160A  118A  27E8  120A  158A  	fcall	_I2C_Master_Write
  5622  0B6C                     l3500:	
  5623                           ;I2C.c: 59: while(*data){
  5624                           
  5625  0B6C  0874               	movf	EEPROM_Write@data,w
  5626  0B6D  0084               	movwf	4
  5627  0B6E  1783               	bsf	3,7	;select IRP bank2
  5628  0B6F  0800               	movf	0,w
  5629  0B70  1903               	btfsc	3,2
  5630  0B71  2B86               	goto	l3502
  5631                           
  5632                           ;I2C.c: 60: I2C_Master_Write(*data);
  5633  0B72  0874               	movf	EEPROM_Write@data,w
  5634  0B73  0084               	movwf	4
  5635  0B74  1783               	bsf	3,7	;select IRP bank2
  5636  0B75  0800               	movf	0,w
  5637  0B76  00F5               	movwf	??_EEPROM_Write
  5638  0B77  01F6               	clrf	??_EEPROM_Write+1
  5639  0B78  0875               	movf	??_EEPROM_Write,w
  5640  0B79  00F0               	movwf	I2C_Master_Write@d
  5641  0B7A  0876               	movf	??_EEPROM_Write+1,w
  5642  0B7B  00F1               	movwf	I2C_Master_Write@d+1
  5643  0B7C  160A  118A  27E8  120A  158A  	fcall	_I2C_Master_Write
  5644                           
  5645                           ;I2C.c: 61: ++data;
  5646  0B81  3001               	movlw	1
  5647  0B82  00F5               	movwf	??_EEPROM_Write
  5648  0B83  0875               	movf	??_EEPROM_Write,w
  5649  0B84  07F4               	addwf	EEPROM_Write@data,f
  5650  0B85  2B6C               	goto	l3500
  5651  0B86                     l3502:	
  5652                           
  5653                           ;I2C.c: 62: }
  5654                           ;I2C.c: 63: I2C_Master_Stop();
  5655  0B86  160A  118A  27E1  120A  158A  	fcall	_I2C_Master_Stop
  5656                           
  5657                           ;I2C.c: 64: _delay((unsigned long)((200)*(10000000/4000.0)));
  5658  0B8B  3003               	movlw	3
  5659  0B8C  00F7               	movwf	??_EEPROM_Write+2
  5660  0B8D  308A               	movlw	138
  5661  0B8E  00F6               	movwf	??_EEPROM_Write+1
  5662  0B8F  3055               	movlw	85
  5663  0B90  00F5               	movwf	??_EEPROM_Write
  5664  0B91                     u3707:	
  5665  0B91  0BF5               	decfsz	??_EEPROM_Write,f
  5666  0B92  2B91               	goto	u3707
  5667  0B93  0BF6               	decfsz	??_EEPROM_Write+1,f
  5668  0B94  2B91               	goto	u3707
  5669  0B95  0BF7               	decfsz	??_EEPROM_Write+2,f
  5670  0B96  2B91               	goto	u3707
  5671  0B97  2B98               	nop2
  5672  0B98  0008               	return
  5673  0B99                     __end_of_EEPROM_Write:	
  5674                           
  5675                           	psect	text17
  5676  17E8                     __ptext17:	
  5677 ;; *************** function _I2C_Master_Write *****************
  5678 ;; Defined at:
  5679 ;;		line 34 in file "I2C.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;  d               2    0[COMMON] unsigned int 
  5682 ;; Auto vars:     Size  Location     Type
  5683 ;;		None
  5684 ;; Return value:  Size  Location     Type
  5685 ;;                  1    wreg      void 
  5686 ;; Registers used:
  5687 ;;		wreg, status,2, status,0, pclath, cstack
  5688 ;; Tracked objects:
  5689 ;;		On entry : 0/0
  5690 ;;		On exit  : 0/0
  5691 ;;		Unchanged: 0/0
  5692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5693 ;;      Params:         2       0       0       0       0
  5694 ;;      Locals:         0       0       0       0       0
  5695 ;;      Temps:          0       0       0       0       0
  5696 ;;      Totals:         2       0       0       0       0
  5697 ;;Total ram usage:        2 bytes
  5698 ;; Hardware stack levels used:    1
  5699 ;; Hardware stack levels required when called:    1
  5700 ;; This function calls:
  5701 ;;		_I2C_Master_Wait
  5702 ;; This function is called by:
  5703 ;;		_EEPROM_Write
  5704 ;;		_EEPROM_Read
  5705 ;; This function uses a non-reentrant model
  5706 ;;
  5707                           
  5708                           
  5709                           ;psect for function _I2C_Master_Write
  5710  17E8                     _I2C_Master_Write:	
  5711                           
  5712                           ;I2C.c: 35: I2C_Master_Wait();
  5713                           
  5714                           ;incstack = 0
  5715                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5716  17E8  120A  158A  2019   	fcall	_I2C_Master_Wait
  5717                           
  5718                           ;I2C.c: 36: SSPBUF = d;
  5719  17EB  0870               	movf	I2C_Master_Write@d,w
  5720  17EC  1283               	bcf	3,5	;RP0=0, select bank0
  5721  17ED  1303               	bcf	3,6	;RP1=0, select bank0
  5722  17EE  0093               	movwf	19	;volatile
  5723  17EF  0008               	return
  5724  17F0                     __end_of_I2C_Master_Write:	
  5725                           
  5726                           	psect	text18
  5727  17E1                     __ptext18:	
  5728 ;; *************** function _I2C_Master_Stop *****************
  5729 ;; Defined at:
  5730 ;;		line 29 in file "I2C.c"
  5731 ;; Parameters:    Size  Location     Type
  5732 ;;		None
  5733 ;; Auto vars:     Size  Location     Type
  5734 ;;		None
  5735 ;; Return value:  Size  Location     Type
  5736 ;;                  1    wreg      void 
  5737 ;; Registers used:
  5738 ;;		wreg, status,2, status,0, pclath, cstack
  5739 ;; Tracked objects:
  5740 ;;		On entry : 0/0
  5741 ;;		On exit  : 0/0
  5742 ;;		Unchanged: 0/0
  5743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5744 ;;      Params:         0       0       0       0       0
  5745 ;;      Locals:         0       0       0       0       0
  5746 ;;      Temps:          0       0       0       0       0
  5747 ;;      Totals:         0       0       0       0       0
  5748 ;;Total ram usage:        0 bytes
  5749 ;; Hardware stack levels used:    1
  5750 ;; Hardware stack levels required when called:    1
  5751 ;; This function calls:
  5752 ;;		_I2C_Master_Wait
  5753 ;; This function is called by:
  5754 ;;		_EEPROM_Write
  5755 ;;		_EEPROM_Read
  5756 ;; This function uses a non-reentrant model
  5757 ;;
  5758                           
  5759                           
  5760                           ;psect for function _I2C_Master_Stop
  5761  17E1                     _I2C_Master_Stop:	
  5762                           
  5763                           ;I2C.c: 30: I2C_Master_Wait();
  5764                           
  5765                           ;incstack = 0
  5766                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5767  17E1  120A  158A  2019   	fcall	_I2C_Master_Wait
  5768                           
  5769                           ;I2C.c: 31: PEN = 1;
  5770  17E4  1683               	bsf	3,5	;RP0=1, select bank1
  5771  17E5  1303               	bcf	3,6	;RP1=0, select bank1
  5772  17E6  1511               	bsf	17,2	;volatile
  5773  17E7  0008               	return
  5774  17E8                     __end_of_I2C_Master_Stop:	
  5775                           
  5776                           	psect	text19
  5777  17DA                     __ptext19:	
  5778 ;; *************** function _I2C_Master_Start *****************
  5779 ;; Defined at:
  5780 ;;		line 19 in file "I2C.c"
  5781 ;; Parameters:    Size  Location     Type
  5782 ;;		None
  5783 ;; Auto vars:     Size  Location     Type
  5784 ;;		None
  5785 ;; Return value:  Size  Location     Type
  5786 ;;                  1    wreg      void 
  5787 ;; Registers used:
  5788 ;;		wreg, status,2, status,0, pclath, cstack
  5789 ;; Tracked objects:
  5790 ;;		On entry : 0/0
  5791 ;;		On exit  : 0/0
  5792 ;;		Unchanged: 0/0
  5793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5794 ;;      Params:         0       0       0       0       0
  5795 ;;      Locals:         0       0       0       0       0
  5796 ;;      Temps:          0       0       0       0       0
  5797 ;;      Totals:         0       0       0       0       0
  5798 ;;Total ram usage:        0 bytes
  5799 ;; Hardware stack levels used:    1
  5800 ;; Hardware stack levels required when called:    1
  5801 ;; This function calls:
  5802 ;;		_I2C_Master_Wait
  5803 ;; This function is called by:
  5804 ;;		_EEPROM_Write
  5805 ;;		_EEPROM_Read
  5806 ;; This function uses a non-reentrant model
  5807 ;;
  5808                           
  5809                           
  5810                           ;psect for function _I2C_Master_Start
  5811  17DA                     _I2C_Master_Start:	
  5812                           
  5813                           ;I2C.c: 20: I2C_Master_Wait();
  5814                           
  5815                           ;incstack = 0
  5816                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5817  17DA  120A  158A  2019   	fcall	_I2C_Master_Wait
  5818                           
  5819                           ;I2C.c: 21: SEN = 1;
  5820  17DD  1683               	bsf	3,5	;RP0=1, select bank1
  5821  17DE  1303               	bcf	3,6	;RP1=0, select bank1
  5822  17DF  1411               	bsf	17,0	;volatile
  5823  17E0  0008               	return
  5824  17E1                     __end_of_I2C_Master_Start:	
  5825                           
  5826                           	psect	text20
  5827  0819                     __ptext20:	
  5828 ;; *************** function _I2C_Master_Wait *****************
  5829 ;; Defined at:
  5830 ;;		line 15 in file "I2C.c"
  5831 ;; Parameters:    Size  Location     Type
  5832 ;;		None
  5833 ;; Auto vars:     Size  Location     Type
  5834 ;;		None
  5835 ;; Return value:  Size  Location     Type
  5836 ;;                  1    wreg      void 
  5837 ;; Registers used:
  5838 ;;		wreg, status,2
  5839 ;; Tracked objects:
  5840 ;;		On entry : 0/0
  5841 ;;		On exit  : 0/0
  5842 ;;		Unchanged: 0/0
  5843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5844 ;;      Params:         0       0       0       0       0
  5845 ;;      Locals:         0       0       0       0       0
  5846 ;;      Temps:          0       0       0       0       0
  5847 ;;      Totals:         0       0       0       0       0
  5848 ;;Total ram usage:        0 bytes
  5849 ;; Hardware stack levels used:    1
  5850 ;; This function calls:
  5851 ;;		Nothing
  5852 ;; This function is called by:
  5853 ;;		_I2C_Master_Start
  5854 ;;		_I2C_Master_Stop
  5855 ;;		_I2C_Master_Write
  5856 ;;		_I2C_Master_RepeatedStart
  5857 ;;		_I2C_Master_Read
  5858 ;; This function uses a non-reentrant model
  5859 ;;
  5860                           
  5861                           
  5862                           ;psect for function _I2C_Master_Wait
  5863  0819                     _I2C_Master_Wait:	
  5864  0819                     l498:	
  5865                           ;I2C.c: 16: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5866                           
  5867                           ;incstack = 0
  5868                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5869                           
  5870  0819  1683               	bsf	3,5	;RP0=1, select bank1
  5871  081A  1303               	bcf	3,6	;RP1=0, select bank1
  5872  081B  1914               	btfsc	20,2	;volatile
  5873  081C  2819               	goto	l498
  5874  081D  0811               	movf	17,w	;volatile
  5875  081E  391F               	andlw	31
  5876  081F  1903               	btfsc	3,2
  5877  0820  0008               	return
  5878  0821  2819               	goto	l498
  5879  0822                     __end_of_I2C_Master_Wait:	
  5880                           
  5881                           	psect	text21
  5882  08EB                     __ptext21:	
  5883 ;; *************** function _CWTX *****************
  5884 ;; Defined at:
  5885 ;;		line 284 in file "FMCW.c"
  5886 ;; Parameters:    Size  Location     Type
  5887 ;;  Nref            2   60[BANK0 ] int 
  5888 ;;  Nprg            2   62[BANK0 ] PTR int 
  5889 ;;		 -> RAM(512), main@CWTX_Nprg(10), CWTX_Nprg(10), 
  5890 ;; Auto vars:     Size  Location     Type
  5891 ;;  cwtx            2   64[BANK0 ] int 
  5892 ;; Return value:  Size  Location     Type
  5893 ;;                  1    wreg      void 
  5894 ;; Registers used:
  5895 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5896 ;; Tracked objects:
  5897 ;;		On entry : 0/0
  5898 ;;		On exit  : 0/0
  5899 ;;		Unchanged: 0/0
  5900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5901 ;;      Params:         0       4       0       0       0
  5902 ;;      Locals:         0       2       0       0       0
  5903 ;;      Temps:          0       0       0       0       0
  5904 ;;      Totals:         0       6       0       0       0
  5905 ;;Total ram usage:        6 bytes
  5906 ;; Hardware stack levels used:    1
  5907 ;; Hardware stack levels required when called:    3
  5908 ;; This function calls:
  5909 ;;		_OPINIT
  5910 ;;		_OUTFQ
  5911 ;;		_RFDOUT
  5912 ;; This function is called by:
  5913 ;;		_main
  5914 ;;		_SetPLL
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           
  5919                           ;psect for function _CWTX
  5920  08EB                     _CWTX:	
  5921                           
  5922                           ;FMCW.c: 285: int cwtx = 2;
  5923                           
  5924                           ;incstack = 0
  5925                           ; Regs used in _CWTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5926  08EB  3002               	movlw	2
  5927  08EC  1283               	bcf	3,5	;RP0=0, select bank0
  5928  08ED  1303               	bcf	3,6	;RP1=0, select bank0
  5929  08EE  00E0               	movwf	CWTX@cwtx
  5930  08EF  3000               	movlw	0
  5931  08F0  00E1               	movwf	CWTX@cwtx+1
  5932                           
  5933                           ;FMCW.c: 286: OPINIT(cwtx);
  5934  08F1  0861               	movf	CWTX@cwtx+1,w
  5935  08F2  00F5               	movwf	OPINIT@fmcwtxrx+1
  5936  08F3  0860               	movf	CWTX@cwtx,w
  5937  08F4  00F4               	movwf	OPINIT@fmcwtxrx
  5938  08F5  120A  158A  24BD  120A  158A  	fcall	_OPINIT
  5939                           
  5940                           ;FMCW.c: 287: RFDOUT(cwtx, Nref);
  5941  08FA  1283               	bcf	3,5	;RP0=0, select bank0
  5942  08FB  1303               	bcf	3,6	;RP1=0, select bank0
  5943  08FC  0861               	movf	CWTX@cwtx+1,w
  5944  08FD  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5945  08FE  0860               	movf	CWTX@cwtx,w
  5946  08FF  00F9               	movwf	RFDOUT@fmcwtxrx
  5947  0900  085D               	movf	CWTX@Nref+1,w
  5948  0901  00FC               	movwf	RFDOUT@Nref+1
  5949  0902  085C               	movf	CWTX@Nref,w
  5950  0903  00FB               	movwf	RFDOUT@Nref
  5951  0904  120A  158A  253A  120A  158A  	fcall	_RFDOUT
  5952                           
  5953                           ;FMCW.c: 288: OUTFQ(cwtx, Nprg);
  5954  0909  1283               	bcf	3,5	;RP0=0, select bank0
  5955  090A  1303               	bcf	3,6	;RP1=0, select bank0
  5956  090B  0861               	movf	CWTX@cwtx+1,w
  5957  090C  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5958  090D  0860               	movf	CWTX@cwtx,w
  5959  090E  00F9               	movwf	OUTFQ@fmcwtxrx
  5960  090F  085E               	movf	CWTX@Nprg,w
  5961  0910  00FB               	movwf	OUTFQ@Nprg
  5962  0911  085F               	movf	CWTX@Nprg+1,w
  5963  0912  00FC               	movwf	OUTFQ@Nprg+1
  5964  0913  120A  118A  20AC   	fcall	_OUTFQ
  5965  0916  0008               	return
  5966  0917                     __end_of_CWTX:	
  5967                           
  5968                           	psect	text22
  5969  0D3A                     __ptext22:	
  5970 ;; *************** function _RFDOUT *****************
  5971 ;; Defined at:
  5972 ;;		line 200 in file "FMCW.c"
  5973 ;; Parameters:    Size  Location     Type
  5974 ;;  fmcwtxrx        2    9[COMMON] int 
  5975 ;;  Nref            2   11[COMMON] int 
  5976 ;; Auto vars:     Size  Location     Type
  5977 ;;  i               2   31[BANK0 ] int 
  5978 ;;  i               2   27[BANK0 ] int 
  5979 ;;  i               2   29[BANK0 ] int 
  5980 ;;  Nref_b         24    3[BANK0 ] int [12]
  5981 ;; Return value:  Size  Location     Type
  5982 ;;                  1    wreg      void 
  5983 ;; Registers used:
  5984 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5985 ;; Tracked objects:
  5986 ;;		On entry : 0/0
  5987 ;;		On exit  : 0/0
  5988 ;;		Unchanged: 0/0
  5989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5990 ;;      Params:         4       0       0       0       0
  5991 ;;      Locals:         0      30       0       0       0
  5992 ;;      Temps:          0       3       0       0       0
  5993 ;;      Totals:         4      33       0       0       0
  5994 ;;Total ram usage:       37 bytes
  5995 ;; Hardware stack levels used:    1
  5996 ;; Hardware stack levels required when called:    2
  5997 ;; This function calls:
  5998 ;;		_H_OUT
  5999 ;;		_L_OUT
  6000 ;;		_STBOUT
  6001 ;;		___awdiv
  6002 ;; This function is called by:
  6003 ;;		_FMTX
  6004 ;;		_CWTX
  6005 ;;		_FMRX
  6006 ;; This function uses a non-reentrant model
  6007 ;;
  6008                           
  6009                           
  6010                           ;psect for function _RFDOUT
  6011  0D3A                     _RFDOUT:	
  6012                           
  6013                           ;FMCW.c: 201: int Nref_b[12];
  6014                           ;FMCW.c: 203: for(int i=0; i<12; i++){
  6015                           
  6016                           ;incstack = 0
  6017                           ; Regs used in _RFDOUT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6018  0D3A  1283               	bcf	3,5	;RP0=0, select bank0
  6019  0D3B  1303               	bcf	3,6	;RP1=0, select bank0
  6020  0D3C  01BD               	clrf	RFDOUT@i
  6021  0D3D  01BE               	clrf	RFDOUT@i+1
  6022  0D3E  083E               	movf	RFDOUT@i+1,w
  6023  0D3F  3A80               	xorlw	128
  6024  0D40  00FF               	movwf	127
  6025  0D41  3080               	movlw	128
  6026  0D42  027F               	subwf	127,w
  6027  0D43  1D03               	skipz
  6028  0D44  2D47               	goto	u2915
  6029  0D45  300C               	movlw	12
  6030  0D46  023D               	subwf	RFDOUT@i,w
  6031  0D47                     u2915:	
  6032  0D47  1803               	btfsc	3,0
  6033  0D48  2D65               	goto	l3252
  6034  0D49                     l3246:	
  6035                           
  6036                           ;FMCW.c: 204: Nref_b[i] = 0;
  6037  0D49  1283               	bcf	3,5	;RP0=0, select bank0
  6038  0D4A  1303               	bcf	3,6	;RP1=0, select bank0
  6039  0D4B  083D               	movf	RFDOUT@i,w
  6040  0D4C  00A0               	movwf	??_RFDOUT
  6041  0D4D  0720               	addwf	??_RFDOUT,w
  6042  0D4E  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6043  0D4F  0084               	movwf	4
  6044  0D50  1383               	bcf	3,7	;select IRP bank0
  6045  0D51  0180               	clrf	0
  6046  0D52  0A84               	incf	4,f
  6047  0D53  0180               	clrf	0
  6048  0D54  3001               	movlw	1
  6049  0D55  07BD               	addwf	RFDOUT@i,f
  6050  0D56  1803               	skipnc
  6051  0D57  0ABE               	incf	RFDOUT@i+1,f
  6052  0D58  3000               	movlw	0
  6053  0D59  07BE               	addwf	RFDOUT@i+1,f
  6054  0D5A  083E               	movf	RFDOUT@i+1,w
  6055  0D5B  3A80               	xorlw	128
  6056  0D5C  00FF               	movwf	127
  6057  0D5D  3080               	movlw	128
  6058  0D5E  027F               	subwf	127,w
  6059  0D5F  1D03               	skipz
  6060  0D60  2D63               	goto	u2925
  6061  0D61  300C               	movlw	12
  6062  0D62  023D               	subwf	RFDOUT@i,w
  6063  0D63                     u2925:	
  6064  0D63  1C03               	skipc
  6065  0D64  2D49               	goto	l3246
  6066  0D65                     l3252:	
  6067                           
  6068                           ;FMCW.c: 205: }
  6069                           ;FMCW.c: 208: for(int i=0; Nref>0; i++){
  6070  0D65  1283               	bcf	3,5	;RP0=0, select bank0
  6071  0D66  1303               	bcf	3,6	;RP1=0, select bank0
  6072  0D67  01BB               	clrf	RFDOUT@i_483
  6073  0D68  01BC               	clrf	RFDOUT@i_483+1
  6074  0D69  087C               	movf	RFDOUT@Nref+1,w
  6075  0D6A  3A80               	xorlw	128
  6076  0D6B  00FF               	movwf	127
  6077  0D6C  3080               	movlw	128
  6078  0D6D  027F               	subwf	127,w
  6079  0D6E  1D03               	skipz
  6080  0D6F  2D72               	goto	u2935
  6081  0D70  3001               	movlw	1
  6082  0D71  027B               	subwf	RFDOUT@Nref,w
  6083  0D72                     u2935:	
  6084  0D72  1C03               	btfss	3,0
  6085  0D73  2DAB               	goto	l3266
  6086  0D74                     l3258:	
  6087                           
  6088                           ;FMCW.c: 209: Nref_b[i] = Nref % 2;
  6089  0D74  3001               	movlw	1
  6090  0D75  057B               	andwf	RFDOUT@Nref,w
  6091  0D76  1283               	bcf	3,5	;RP0=0, select bank0
  6092  0D77  1303               	bcf	3,6	;RP1=0, select bank0
  6093  0D78  00A0               	movwf	??_RFDOUT
  6094  0D79  3000               	movlw	0
  6095  0D7A  057C               	andwf	RFDOUT@Nref+1,w
  6096  0D7B  00A1               	movwf	??_RFDOUT+1
  6097  0D7C  083B               	movf	RFDOUT@i_483,w
  6098  0D7D  00A2               	movwf	??_RFDOUT+2
  6099  0D7E  0722               	addwf	??_RFDOUT+2,w
  6100  0D7F  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6101  0D80  0084               	movwf	4
  6102  0D81  0820               	movf	??_RFDOUT,w
  6103  0D82  1383               	bcf	3,7	;select IRP bank0
  6104  0D83  0080               	movwf	0
  6105  0D84  0A84               	incf	4,f
  6106  0D85  0821               	movf	??_RFDOUT+1,w
  6107  0D86  0080               	movwf	0
  6108                           
  6109                           ;FMCW.c: 210: Nref = Nref / 2;
  6110  0D87  3002               	movlw	2
  6111  0D88  00F0               	movwf	___awdiv@divisor
  6112  0D89  3000               	movlw	0
  6113  0D8A  00F1               	movwf	___awdiv@divisor+1
  6114  0D8B  087C               	movf	RFDOUT@Nref+1,w
  6115  0D8C  00F3               	movwf	___awdiv@dividend+1
  6116  0D8D  087B               	movf	RFDOUT@Nref,w
  6117  0D8E  00F2               	movwf	___awdiv@dividend
  6118  0D8F  120A  158A  22E3  120A  158A  	fcall	___awdiv
  6119  0D94  0871               	movf	?___awdiv+1,w
  6120  0D95  00FC               	movwf	RFDOUT@Nref+1
  6121  0D96  0870               	movf	?___awdiv,w
  6122  0D97  00FB               	movwf	RFDOUT@Nref
  6123  0D98  3001               	movlw	1
  6124  0D99  1283               	bcf	3,5	;RP0=0, select bank0
  6125  0D9A  1303               	bcf	3,6	;RP1=0, select bank0
  6126  0D9B  07BB               	addwf	RFDOUT@i_483,f
  6127  0D9C  1803               	skipnc
  6128  0D9D  0ABC               	incf	RFDOUT@i_483+1,f
  6129  0D9E  3000               	movlw	0
  6130  0D9F  07BC               	addwf	RFDOUT@i_483+1,f
  6131  0DA0  087C               	movf	RFDOUT@Nref+1,w
  6132  0DA1  3A80               	xorlw	128
  6133  0DA2  00FF               	movwf	127
  6134  0DA3  3080               	movlw	128
  6135  0DA4  027F               	subwf	127,w
  6136  0DA5  1D03               	skipz
  6137  0DA6  2DA9               	goto	u2945
  6138  0DA7  3001               	movlw	1
  6139  0DA8  027B               	subwf	RFDOUT@Nref,w
  6140  0DA9                     u2945:	
  6141  0DA9  1803               	skipnc
  6142  0DAA  2D74               	goto	l3258
  6143  0DAB                     l3266:	
  6144                           
  6145                           ;FMCW.c: 211: }
  6146                           ;FMCW.c: 214: for (int i=0; i<12; i++)
  6147  0DAB  1283               	bcf	3,5	;RP0=0, select bank0
  6148  0DAC  1303               	bcf	3,6	;RP1=0, select bank0
  6149  0DAD  01BF               	clrf	RFDOUT@i_484
  6150  0DAE  01C0               	clrf	RFDOUT@i_484+1
  6151  0DAF  0840               	movf	RFDOUT@i_484+1,w
  6152  0DB0  3A80               	xorlw	128
  6153  0DB1  00FF               	movwf	127
  6154  0DB2  3080               	movlw	128
  6155  0DB3  027F               	subwf	127,w
  6156  0DB4  1D03               	skipz
  6157  0DB5  2DB8               	goto	u2955
  6158  0DB6  300C               	movlw	12
  6159  0DB7  023F               	subwf	RFDOUT@i_484,w
  6160  0DB8                     u2955:	
  6161  0DB8  1803               	btfsc	3,0
  6162  0DB9  2E01               	goto	l3284
  6163  0DBA                     l3272:	
  6164                           
  6165                           ;FMCW.c: 215: {
  6166                           ;FMCW.c: 216: if(Nref_b[i] == 0)
  6167  0DBA  1283               	bcf	3,5	;RP0=0, select bank0
  6168  0DBB  1303               	bcf	3,6	;RP1=0, select bank0
  6169  0DBC  083F               	movf	RFDOUT@i_484,w
  6170  0DBD  00A0               	movwf	??_RFDOUT
  6171  0DBE  0720               	addwf	??_RFDOUT,w
  6172  0DBF  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6173  0DC0  0084               	movwf	4
  6174  0DC1  1383               	bcf	3,7	;select IRP bank0
  6175  0DC2  0800               	movf	0,w
  6176  0DC3  00A1               	movwf	??_RFDOUT+1
  6177  0DC4  0A84               	incf	4,f
  6178  0DC5  0800               	movf	0,w
  6179  0DC6  00A2               	movwf	??_RFDOUT+2
  6180  0DC7  0821               	movf	??_RFDOUT+1,w
  6181  0DC8  0422               	iorwf	??_RFDOUT+2,w
  6182  0DC9  1D03               	btfss	3,2
  6183  0DCA  2DD4               	goto	l3276
  6184                           
  6185                           ;FMCW.c: 217: {
  6186                           ;FMCW.c: 218: L_OUT(fmcwtxrx);
  6187  0DCB  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6188  0DCC  00F3               	movwf	L_OUT@fmcwtxrx+1
  6189  0DCD  0879               	movf	RFDOUT@fmcwtxrx,w
  6190  0DCE  00F2               	movwf	L_OUT@fmcwtxrx
  6191  0DCF  120A  158A  2251  120A  158A  	fcall	_L_OUT
  6192  0DD4                     l3276:	
  6193                           
  6194                           ;FMCW.c: 219: }
  6195                           ;FMCW.c: 220: if(Nref_b[i] == 1)
  6196  0DD4  1283               	bcf	3,5	;RP0=0, select bank0
  6197  0DD5  1303               	bcf	3,6	;RP1=0, select bank0
  6198  0DD6  083F               	movf	RFDOUT@i_484,w
  6199  0DD7  00A0               	movwf	??_RFDOUT
  6200  0DD8  0720               	addwf	??_RFDOUT,w
  6201  0DD9  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6202  0DDA  0084               	movwf	4
  6203  0DDB  1383               	bcf	3,7	;select IRP bank0
  6204  0DDC  0800               	movf	0,w
  6205  0DDD  00A1               	movwf	??_RFDOUT+1
  6206  0DDE  0A84               	incf	4,f
  6207  0DDF  0800               	movf	0,w
  6208  0DE0  00A2               	movwf	??_RFDOUT+2
  6209  0DE1  0321               	decf	??_RFDOUT+1,w
  6210  0DE2  0422               	iorwf	??_RFDOUT+2,w
  6211  0DE3  1D03               	btfss	3,2
  6212  0DE4  2DEE               	goto	l3280
  6213                           
  6214                           ;FMCW.c: 221: {
  6215                           ;FMCW.c: 222: H_OUT(fmcwtxrx);
  6216  0DE5  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6217  0DE6  00F3               	movwf	H_OUT@fmcwtxrx+1
  6218  0DE7  0879               	movf	RFDOUT@fmcwtxrx,w
  6219  0DE8  00F2               	movwf	H_OUT@fmcwtxrx
  6220  0DE9  120A  158A  220B  120A  158A  	fcall	_H_OUT
  6221  0DEE                     l3280:	
  6222  0DEE  3001               	movlw	1
  6223  0DEF  1283               	bcf	3,5	;RP0=0, select bank0
  6224  0DF0  1303               	bcf	3,6	;RP1=0, select bank0
  6225  0DF1  07BF               	addwf	RFDOUT@i_484,f
  6226  0DF2  1803               	skipnc
  6227  0DF3  0AC0               	incf	RFDOUT@i_484+1,f
  6228  0DF4  3000               	movlw	0
  6229  0DF5  07C0               	addwf	RFDOUT@i_484+1,f
  6230  0DF6  0840               	movf	RFDOUT@i_484+1,w
  6231  0DF7  3A80               	xorlw	128
  6232  0DF8  00FF               	movwf	127
  6233  0DF9  3080               	movlw	128
  6234  0DFA  027F               	subwf	127,w
  6235  0DFB  1D03               	skipz
  6236  0DFC  2DFF               	goto	u2985
  6237  0DFD  300C               	movlw	12
  6238  0DFE  023F               	subwf	RFDOUT@i_484,w
  6239  0DFF                     u2985:	
  6240  0DFF  1C03               	skipc
  6241  0E00  2DBA               	goto	l3272
  6242  0E01                     l3284:	
  6243                           
  6244                           ;FMCW.c: 223: }
  6245                           ;FMCW.c: 224: }
  6246                           ;FMCW.c: 227: H_OUT(fmcwtxrx);
  6247  0E01  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6248  0E02  00F3               	movwf	H_OUT@fmcwtxrx+1
  6249  0E03  0879               	movf	RFDOUT@fmcwtxrx,w
  6250  0E04  00F2               	movwf	H_OUT@fmcwtxrx
  6251  0E05  120A  158A  220B  120A  158A  	fcall	_H_OUT
  6252                           
  6253                           ;FMCW.c: 228: H_OUT(fmcwtxrx);
  6254  0E0A  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6255  0E0B  00F3               	movwf	H_OUT@fmcwtxrx+1
  6256  0E0C  0879               	movf	RFDOUT@fmcwtxrx,w
  6257  0E0D  00F2               	movwf	H_OUT@fmcwtxrx
  6258  0E0E  120A  158A  220B  120A  158A  	fcall	_H_OUT
  6259                           
  6260                           ;FMCW.c: 231: STBOUT(fmcwtxrx);
  6261  0E13  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6262  0E14  00F3               	movwf	STBOUT@fmcwtxrx+1
  6263  0E15  0879               	movf	RFDOUT@fmcwtxrx,w
  6264  0E16  00F2               	movwf	STBOUT@fmcwtxrx
  6265  0E17  120A  158A  216F   	fcall	_STBOUT
  6266  0E1A  0008               	return
  6267  0E1B                     __end_of_RFDOUT:	
  6268                           
  6269                           	psect	text23
  6270  00AC                     __ptext23:	
  6271 ;; *************** function _OUTFQ *****************
  6272 ;; Defined at:
  6273 ;;		line 136 in file "FMCW.c"
  6274 ;; Parameters:    Size  Location     Type
  6275 ;;  fmcwtxrx        2    9[COMMON] int 
  6276 ;;  Nprg            2   11[COMMON] PTR int 
  6277 ;;		 -> RAM(512), main@FMRX_Nprg(10), main@CWTX_Nprg(10), main@FMTX_Nprg(10), 
  6278 ;;		 -> FMRX_Nprg(10), CWTX_Nprg(10), FMTX_Nprg(10), 
  6279 ;; Auto vars:     Size  Location     Type
  6280 ;;  j               2   58[BANK0 ] int 
  6281 ;;  i               2   56[BANK0 ] int 
  6282 ;;  i               2   50[BANK0 ] int 
  6283 ;;  i               2   54[BANK0 ] int 
  6284 ;;  Nprg_b         34   16[BANK0 ] int [17]
  6285 ;;  count           2   52[BANK0 ] int 
  6286 ;; Return value:  Size  Location     Type
  6287 ;;                  1    wreg      void 
  6288 ;; Registers used:
  6289 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6290 ;; Tracked objects:
  6291 ;;		On entry : 0/0
  6292 ;;		On exit  : 0/0
  6293 ;;		Unchanged: 0/0
  6294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6295 ;;      Params:         4       0       0       0       0
  6296 ;;      Locals:         0      44       0       0       0
  6297 ;;      Temps:          0      16       0       0       0
  6298 ;;      Totals:         4      60       0       0       0
  6299 ;;Total ram usage:       64 bytes
  6300 ;; Hardware stack levels used:    1
  6301 ;; Hardware stack levels required when called:    2
  6302 ;; This function calls:
  6303 ;;		_H_OUT
  6304 ;;		_L_OUT
  6305 ;;		_STBOUT
  6306 ;;		___awdiv
  6307 ;; This function is called by:
  6308 ;;		_FMTX
  6309 ;;		_CWTX
  6310 ;;		_FMRX
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314                           
  6315                           ;psect for function _OUTFQ
  6316  00AC                     _OUTFQ:	
  6317                           
  6318                           ;FMCW.c: 137: int count = 0;
  6319                           
  6320                           ;incstack = 0
  6321                           ; Regs used in _OUTFQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6322  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  6323  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  6324  00AE  01D4               	clrf	OUTFQ@count
  6325  00AF  01D5               	clrf	OUTFQ@count+1
  6326                           
  6327                           ;FMCW.c: 138: int Nprg_b[17];
  6328                           ;FMCW.c: 140: for(int i=0; i<17; i++){
  6329  00B0  01D6               	clrf	OUTFQ@i
  6330  00B1  01D7               	clrf	OUTFQ@i+1
  6331  00B2  0857               	movf	OUTFQ@i+1,w
  6332  00B3  3A80               	xorlw	128
  6333  00B4  00FF               	movwf	127
  6334  00B5  3080               	movlw	128
  6335  00B6  027F               	subwf	127,w
  6336  00B7  1D03               	skipz
  6337  00B8  28BB               	goto	u2775
  6338  00B9  3011               	movlw	17
  6339  00BA  0256               	subwf	OUTFQ@i,w
  6340  00BB                     u2775:	
  6341  00BB  1803               	btfsc	3,0
  6342  00BC  28D9               	goto	l3174
  6343  00BD                     l3168:	
  6344                           
  6345                           ;FMCW.c: 141: Nprg_b[i] = 0;
  6346  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  6347  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  6348  00BF  0856               	movf	OUTFQ@i,w
  6349  00C0  00A0               	movwf	??_OUTFQ
  6350  00C1  0720               	addwf	??_OUTFQ,w
  6351  00C2  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6352  00C3  0084               	movwf	4
  6353  00C4  1383               	bcf	3,7	;select IRP bank0
  6354  00C5  0180               	clrf	0
  6355  00C6  0A84               	incf	4,f
  6356  00C7  0180               	clrf	0
  6357  00C8  3001               	movlw	1
  6358  00C9  07D6               	addwf	OUTFQ@i,f
  6359  00CA  1803               	skipnc
  6360  00CB  0AD7               	incf	OUTFQ@i+1,f
  6361  00CC  3000               	movlw	0
  6362  00CD  07D7               	addwf	OUTFQ@i+1,f
  6363  00CE  0857               	movf	OUTFQ@i+1,w
  6364  00CF  3A80               	xorlw	128
  6365  00D0  00FF               	movwf	127
  6366  00D1  3080               	movlw	128
  6367  00D2  027F               	subwf	127,w
  6368  00D3  1D03               	skipz
  6369  00D4  28D7               	goto	u2785
  6370  00D5  3011               	movlw	17
  6371  00D6  0256               	subwf	OUTFQ@i,w
  6372  00D7                     u2785:	
  6373  00D7  1C03               	skipc
  6374  00D8  28BD               	goto	l3168
  6375  00D9                     l3174:	
  6376                           
  6377                           ;FMCW.c: 142: }
  6378                           ;FMCW.c: 145: for(int i = 0; i < 17; i++){
  6379  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  6380  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  6381  00DB  01D2               	clrf	OUTFQ@i_472
  6382  00DC  01D3               	clrf	OUTFQ@i_472+1
  6383  00DD  0853               	movf	OUTFQ@i_472+1,w
  6384  00DE  3A80               	xorlw	128
  6385  00DF  00FF               	movwf	127
  6386  00E0  3080               	movlw	128
  6387  00E1  027F               	subwf	127,w
  6388  00E2  1D03               	skipz
  6389  00E3  28E6               	goto	u2795
  6390  00E4  3011               	movlw	17
  6391  00E5  0252               	subwf	OUTFQ@i_472,w
  6392  00E6                     u2795:	
  6393  00E6  1803               	btfsc	3,0
  6394  00E7  2AB7               	goto	l3220
  6395  00E8                     l3180:	
  6396                           
  6397                           ;FMCW.c: 146: for(int j = 0; j<5; j++){
  6398  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  6399  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  6400  00EA  01DA               	clrf	OUTFQ@j
  6401  00EB  01DB               	clrf	OUTFQ@j+1
  6402  00EC  085B               	movf	OUTFQ@j+1,w
  6403  00ED  3A80               	xorlw	128
  6404  00EE  00FF               	movwf	127
  6405  00EF  3080               	movlw	128
  6406  00F0  027F               	subwf	127,w
  6407  00F1  1D03               	skipz
  6408  00F2  28F5               	goto	u2805
  6409  00F3  3005               	movlw	5
  6410  00F4  025A               	subwf	OUTFQ@j,w
  6411  00F5                     u2805:	
  6412  00F5  1803               	btfsc	3,0
  6413  00F6  2AA4               	goto	l3216
  6414  00F7                     l3186:	
  6415                           
  6416                           ;FMCW.c: 147: if(Nprg[j] % 2 == 0) {
  6417  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  6418  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  6419  00F9  085B               	movf	OUTFQ@j+1,w
  6420  00FA  00A1               	movwf	??_OUTFQ+1
  6421  00FB  085A               	movf	OUTFQ@j,w
  6422  00FC  00A0               	movwf	??_OUTFQ
  6423  00FD  1003               	clrc
  6424  00FE  0DA0               	rlf	??_OUTFQ,f
  6425  00FF  0DA1               	rlf	??_OUTFQ+1,f
  6426  0100  0820               	movf	??_OUTFQ,w
  6427  0101  077B               	addwf	OUTFQ@Nprg,w
  6428  0102  00A2               	movwf	??_OUTFQ+2
  6429  0103  0821               	movf	??_OUTFQ+1,w
  6430  0104  1803               	skipnc
  6431  0105  0A21               	incf	??_OUTFQ+1,w
  6432  0106  077C               	addwf	OUTFQ@Nprg+1,w
  6433  0107  00A3               	movwf	??_OUTFQ+3
  6434  0108  0822               	movf	??_OUTFQ+2,w
  6435  0109  0084               	movwf	4
  6436  010A  1783               	bsf	3,7
  6437  010B  1C23               	btfss	??_OUTFQ+3,0
  6438  010C  1383               	bcf	3,7
  6439  010D  0800               	movf	0,w
  6440  010E  00A4               	movwf	??_OUTFQ+4
  6441  010F  0A84               	incf	4,f
  6442  0110  0800               	movf	0,w
  6443  0111  00A5               	movwf	??_OUTFQ+5
  6444  0112  1824               	btfsc	??_OUTFQ+4,0
  6445  0113  299D               	goto	l3198
  6446                           
  6447                           ;FMCW.c: 148: if(j == 4){
  6448  0114  3004               	movlw	4
  6449  0115  065A               	xorwf	OUTFQ@j,w
  6450  0116  045B               	iorwf	OUTFQ@j+1,w
  6451  0117  1D03               	btfss	3,2
  6452  0118  2960               	goto	l3196
  6453                           
  6454                           ;FMCW.c: 149: Nprg[j] = Nprg[j] / 2;
  6455  0119  3002               	movlw	2
  6456  011A  00F0               	movwf	___awdiv@divisor
  6457  011B  3000               	movlw	0
  6458  011C  00F1               	movwf	___awdiv@divisor+1
  6459  011D  085B               	movf	OUTFQ@j+1,w
  6460  011E  00A1               	movwf	??_OUTFQ+1
  6461  011F  085A               	movf	OUTFQ@j,w
  6462  0120  00A0               	movwf	??_OUTFQ
  6463  0121  1003               	clrc
  6464  0122  0DA0               	rlf	??_OUTFQ,f
  6465  0123  0DA1               	rlf	??_OUTFQ+1,f
  6466  0124  0820               	movf	??_OUTFQ,w
  6467  0125  077B               	addwf	OUTFQ@Nprg,w
  6468  0126  00A2               	movwf	??_OUTFQ+2
  6469  0127  0821               	movf	??_OUTFQ+1,w
  6470  0128  1803               	skipnc
  6471  0129  0A21               	incf	??_OUTFQ+1,w
  6472  012A  077C               	addwf	OUTFQ@Nprg+1,w
  6473  012B  00A3               	movwf	??_OUTFQ+3
  6474  012C  0822               	movf	??_OUTFQ+2,w
  6475  012D  0084               	movwf	4
  6476  012E  1783               	bsf	3,7
  6477  012F  1C23               	btfss	??_OUTFQ+3,0
  6478  0130  1383               	bcf	3,7
  6479  0131  0800               	movf	0,w
  6480  0132  00F2               	movwf	___awdiv@dividend
  6481  0133  0A84               	incf	4,f
  6482  0134  0800               	movf	0,w
  6483  0135  00F3               	movwf	___awdiv@dividend+1
  6484  0136  120A  158A  22E3  120A  118A  	fcall	___awdiv
  6485  013B  1283               	bcf	3,5	;RP0=0, select bank0
  6486  013C  1303               	bcf	3,6	;RP1=0, select bank0
  6487  013D  085B               	movf	OUTFQ@j+1,w
  6488  013E  00A5               	movwf	??_OUTFQ+5
  6489  013F  085A               	movf	OUTFQ@j,w
  6490  0140  00A4               	movwf	??_OUTFQ+4
  6491  0141  1003               	clrc
  6492  0142  0DA4               	rlf	??_OUTFQ+4,f
  6493  0143  0DA5               	rlf	??_OUTFQ+5,f
  6494  0144  0824               	movf	??_OUTFQ+4,w
  6495  0145  077B               	addwf	OUTFQ@Nprg,w
  6496  0146  00A6               	movwf	??_OUTFQ+6
  6497  0147  0825               	movf	??_OUTFQ+5,w
  6498  0148  1803               	skipnc
  6499  0149  0A25               	incf	??_OUTFQ+5,w
  6500  014A  077C               	addwf	OUTFQ@Nprg+1,w
  6501  014B  00A7               	movwf	??_OUTFQ+7
  6502  014C  0826               	movf	??_OUTFQ+6,w
  6503  014D  0084               	movwf	4
  6504  014E  1783               	bsf	3,7
  6505  014F  1C27               	btfss	??_OUTFQ+7,0
  6506  0150  1383               	bcf	3,7
  6507  0151  0870               	movf	?___awdiv,w
  6508  0152  0080               	movwf	0
  6509  0153  0A84               	incf	4,f
  6510  0154  0871               	movf	?___awdiv+1,w
  6511  0155  0080               	movwf	0
  6512                           
  6513                           ;FMCW.c: 150: Nprg_b[count] = 0;
  6514  0156  0854               	movf	OUTFQ@count,w
  6515  0157  00A0               	movwf	??_OUTFQ
  6516  0158  0720               	addwf	??_OUTFQ,w
  6517  0159  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6518  015A  0084               	movwf	4
  6519  015B  1383               	bcf	3,7	;select IRP bank0
  6520  015C  0180               	clrf	0
  6521  015D  0A84               	incf	4,f
  6522  015E  0180               	clrf	0
  6523  015F  2A05               	goto	l3206
  6524  0160                     l3196:	
  6525                           ;FMCW.c: 152: }
  6526                           
  6527                           ;FMCW.c: 151: count++;
  6528                           
  6529                           
  6530                           ;FMCW.c: 153: else{
  6531                           ;FMCW.c: 154: Nprg[j] = Nprg[j] / 2;
  6532  0160  3002               	movlw	2
  6533  0161  00F0               	movwf	___awdiv@divisor
  6534  0162  3000               	movlw	0
  6535  0163  00F1               	movwf	___awdiv@divisor+1
  6536  0164  085B               	movf	OUTFQ@j+1,w
  6537  0165  00A1               	movwf	??_OUTFQ+1
  6538  0166  085A               	movf	OUTFQ@j,w
  6539  0167  00A0               	movwf	??_OUTFQ
  6540  0168  1003               	clrc
  6541  0169  0DA0               	rlf	??_OUTFQ,f
  6542  016A  0DA1               	rlf	??_OUTFQ+1,f
  6543  016B  0820               	movf	??_OUTFQ,w
  6544  016C  077B               	addwf	OUTFQ@Nprg,w
  6545  016D  00A2               	movwf	??_OUTFQ+2
  6546  016E  0821               	movf	??_OUTFQ+1,w
  6547  016F  1803               	skipnc
  6548  0170  0A21               	incf	??_OUTFQ+1,w
  6549  0171  077C               	addwf	OUTFQ@Nprg+1,w
  6550  0172  00A3               	movwf	??_OUTFQ+3
  6551  0173  0822               	movf	??_OUTFQ+2,w
  6552  0174  0084               	movwf	4
  6553  0175  1783               	bsf	3,7
  6554  0176  1C23               	btfss	??_OUTFQ+3,0
  6555  0177  1383               	bcf	3,7
  6556  0178  0800               	movf	0,w
  6557  0179  00F2               	movwf	___awdiv@dividend
  6558  017A  0A84               	incf	4,f
  6559  017B  0800               	movf	0,w
  6560  017C  00F3               	movwf	___awdiv@dividend+1
  6561  017D  120A  158A  22E3  120A  118A  	fcall	___awdiv
  6562  0182  1283               	bcf	3,5	;RP0=0, select bank0
  6563  0183  1303               	bcf	3,6	;RP1=0, select bank0
  6564  0184  085B               	movf	OUTFQ@j+1,w
  6565  0185  00A5               	movwf	??_OUTFQ+5
  6566  0186  085A               	movf	OUTFQ@j,w
  6567  0187  00A4               	movwf	??_OUTFQ+4
  6568  0188  1003               	clrc
  6569  0189  0DA4               	rlf	??_OUTFQ+4,f
  6570  018A  0DA5               	rlf	??_OUTFQ+5,f
  6571  018B  0824               	movf	??_OUTFQ+4,w
  6572  018C  077B               	addwf	OUTFQ@Nprg,w
  6573  018D  00A6               	movwf	??_OUTFQ+6
  6574  018E  0825               	movf	??_OUTFQ+5,w
  6575  018F  1803               	skipnc
  6576  0190  0A25               	incf	??_OUTFQ+5,w
  6577  0191  077C               	addwf	OUTFQ@Nprg+1,w
  6578  0192  00A7               	movwf	??_OUTFQ+7
  6579  0193  0826               	movf	??_OUTFQ+6,w
  6580  0194  0084               	movwf	4
  6581  0195  1783               	bsf	3,7
  6582  0196  1C27               	btfss	??_OUTFQ+7,0
  6583  0197  1383               	bcf	3,7
  6584  0198  0870               	movf	?___awdiv,w
  6585  0199  0080               	movwf	0
  6586  019A  0A84               	incf	4,f
  6587  019B  0871               	movf	?___awdiv+1,w
  6588  019C  2A92               	goto	L8
  6589  019D                     l3198:	
  6590                           ;FMCW.c: 155: }
  6591                           ;FMCW.c: 156: }
  6592                           
  6593                           
  6594                           ;FMCW.c: 157: else if(Nprg[j] % 2 == 1) {
  6595  019D  085B               	movf	OUTFQ@j+1,w
  6596  019E  00A1               	movwf	??_OUTFQ+1
  6597  019F  085A               	movf	OUTFQ@j,w
  6598  01A0  00A0               	movwf	??_OUTFQ
  6599  01A1  1003               	clrc
  6600  01A2  0DA0               	rlf	??_OUTFQ,f
  6601  01A3  0DA1               	rlf	??_OUTFQ+1,f
  6602  01A4  0820               	movf	??_OUTFQ,w
  6603  01A5  077B               	addwf	OUTFQ@Nprg,w
  6604  01A6  00A2               	movwf	??_OUTFQ+2
  6605  01A7  0821               	movf	??_OUTFQ+1,w
  6606  01A8  1803               	skipnc
  6607  01A9  0A21               	incf	??_OUTFQ+1,w
  6608  01AA  077C               	addwf	OUTFQ@Nprg+1,w
  6609  01AB  00A3               	movwf	??_OUTFQ+3
  6610  01AC  0822               	movf	??_OUTFQ+2,w
  6611  01AD  0084               	movwf	4
  6612  01AE  1783               	bsf	3,7
  6613  01AF  1C23               	btfss	??_OUTFQ+3,0
  6614  01B0  1383               	bcf	3,7
  6615  01B1  0800               	movf	0,w
  6616  01B2  00A4               	movwf	??_OUTFQ+4
  6617  01B3  0A84               	incf	4,f
  6618  01B4  0800               	movf	0,w
  6619  01B5  00A5               	movwf	??_OUTFQ+5
  6620  01B6  1C24               	btfss	??_OUTFQ+4,0
  6621  01B7  2A93               	goto	l3212
  6622                           
  6623                           ;FMCW.c: 158: if(j == 4){
  6624  01B8  3004               	movlw	4
  6625  01B9  065A               	xorwf	OUTFQ@j,w
  6626  01BA  045B               	iorwf	OUTFQ@j+1,w
  6627  01BB  1D03               	btfss	3,2
  6628  01BC  2A0C               	goto	l3208
  6629                           
  6630                           ;FMCW.c: 159: Nprg[j] = Nprg[j] / 2;
  6631  01BD  3002               	movlw	2
  6632  01BE  00F0               	movwf	___awdiv@divisor
  6633  01BF  3000               	movlw	0
  6634  01C0  00F1               	movwf	___awdiv@divisor+1
  6635  01C1  085B               	movf	OUTFQ@j+1,w
  6636  01C2  00A1               	movwf	??_OUTFQ+1
  6637  01C3  085A               	movf	OUTFQ@j,w
  6638  01C4  00A0               	movwf	??_OUTFQ
  6639  01C5  1003               	clrc
  6640  01C6  0DA0               	rlf	??_OUTFQ,f
  6641  01C7  0DA1               	rlf	??_OUTFQ+1,f
  6642  01C8  0820               	movf	??_OUTFQ,w
  6643  01C9  077B               	addwf	OUTFQ@Nprg,w
  6644  01CA  00A2               	movwf	??_OUTFQ+2
  6645  01CB  0821               	movf	??_OUTFQ+1,w
  6646  01CC  1803               	skipnc
  6647  01CD  0A21               	incf	??_OUTFQ+1,w
  6648  01CE  077C               	addwf	OUTFQ@Nprg+1,w
  6649  01CF  00A3               	movwf	??_OUTFQ+3
  6650  01D0  0822               	movf	??_OUTFQ+2,w
  6651  01D1  0084               	movwf	4
  6652  01D2  1783               	bsf	3,7
  6653  01D3  1C23               	btfss	??_OUTFQ+3,0
  6654  01D4  1383               	bcf	3,7
  6655  01D5  0800               	movf	0,w
  6656  01D6  00F2               	movwf	___awdiv@dividend
  6657  01D7  0A84               	incf	4,f
  6658  01D8  0800               	movf	0,w
  6659  01D9  00F3               	movwf	___awdiv@dividend+1
  6660  01DA  120A  158A  22E3  120A  118A  	fcall	___awdiv
  6661  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  6662  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  6663  01E1  085B               	movf	OUTFQ@j+1,w
  6664  01E2  00A5               	movwf	??_OUTFQ+5
  6665  01E3  085A               	movf	OUTFQ@j,w
  6666  01E4  00A4               	movwf	??_OUTFQ+4
  6667  01E5  1003               	clrc
  6668  01E6  0DA4               	rlf	??_OUTFQ+4,f
  6669  01E7  0DA5               	rlf	??_OUTFQ+5,f
  6670  01E8  0824               	movf	??_OUTFQ+4,w
  6671  01E9  077B               	addwf	OUTFQ@Nprg,w
  6672  01EA  00A6               	movwf	??_OUTFQ+6
  6673  01EB  0825               	movf	??_OUTFQ+5,w
  6674  01EC  1803               	skipnc
  6675  01ED  0A25               	incf	??_OUTFQ+5,w
  6676  01EE  077C               	addwf	OUTFQ@Nprg+1,w
  6677  01EF  00A7               	movwf	??_OUTFQ+7
  6678  01F0  0826               	movf	??_OUTFQ+6,w
  6679  01F1  0084               	movwf	4
  6680  01F2  1783               	bsf	3,7
  6681  01F3  1C27               	btfss	??_OUTFQ+7,0
  6682  01F4  1383               	bcf	3,7
  6683  01F5  0870               	movf	?___awdiv,w
  6684  01F6  0080               	movwf	0
  6685  01F7  0A84               	incf	4,f
  6686  01F8  0871               	movf	?___awdiv+1,w
  6687  01F9  0080               	movwf	0
  6688                           
  6689                           ;FMCW.c: 160: Nprg_b[count] = 1;
  6690  01FA  0854               	movf	OUTFQ@count,w
  6691  01FB  00A0               	movwf	??_OUTFQ
  6692  01FC  0720               	addwf	??_OUTFQ,w
  6693  01FD  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6694  01FE  0084               	movwf	4
  6695  01FF  3001               	movlw	1
  6696  0200  1383               	bcf	3,7	;select IRP bank0
  6697  0201  0080               	movwf	0
  6698  0202  0A84               	incf	4,f
  6699  0203  3000               	movlw	0
  6700  0204  0080               	movwf	0
  6701  0205                     l3206:	
  6702                           
  6703                           ;FMCW.c: 161: count++;
  6704  0205  3001               	movlw	1
  6705  0206  07D4               	addwf	OUTFQ@count,f
  6706  0207  1803               	skipnc
  6707  0208  0AD5               	incf	OUTFQ@count+1,f
  6708  0209  3000               	movlw	0
  6709  020A  07D5               	addwf	OUTFQ@count+1,f
  6710                           
  6711                           ;FMCW.c: 162: }
  6712  020B  2A93               	goto	l3212
  6713  020C                     l3208:	
  6714                           
  6715                           ;FMCW.c: 163: else{
  6716                           ;FMCW.c: 164: Nprg[j] = Nprg[j] / 2;
  6717  020C  3002               	movlw	2
  6718  020D  00F0               	movwf	___awdiv@divisor
  6719  020E  3000               	movlw	0
  6720  020F  00F1               	movwf	___awdiv@divisor+1
  6721  0210  085B               	movf	OUTFQ@j+1,w
  6722  0211  00A1               	movwf	??_OUTFQ+1
  6723  0212  085A               	movf	OUTFQ@j,w
  6724  0213  00A0               	movwf	??_OUTFQ
  6725  0214  1003               	clrc
  6726  0215  0DA0               	rlf	??_OUTFQ,f
  6727  0216  0DA1               	rlf	??_OUTFQ+1,f
  6728  0217  0820               	movf	??_OUTFQ,w
  6729  0218  077B               	addwf	OUTFQ@Nprg,w
  6730  0219  00A2               	movwf	??_OUTFQ+2
  6731  021A  0821               	movf	??_OUTFQ+1,w
  6732  021B  1803               	skipnc
  6733  021C  0A21               	incf	??_OUTFQ+1,w
  6734  021D  077C               	addwf	OUTFQ@Nprg+1,w
  6735  021E  00A3               	movwf	??_OUTFQ+3
  6736  021F  0822               	movf	??_OUTFQ+2,w
  6737  0220  0084               	movwf	4
  6738  0221  1783               	bsf	3,7
  6739  0222  1C23               	btfss	??_OUTFQ+3,0
  6740  0223  1383               	bcf	3,7
  6741  0224  0800               	movf	0,w
  6742  0225  00F2               	movwf	___awdiv@dividend
  6743  0226  0A84               	incf	4,f
  6744  0227  0800               	movf	0,w
  6745  0228  00F3               	movwf	___awdiv@dividend+1
  6746  0229  120A  158A  22E3  120A  118A  	fcall	___awdiv
  6747  022E  1283               	bcf	3,5	;RP0=0, select bank0
  6748  022F  1303               	bcf	3,6	;RP1=0, select bank0
  6749  0230  085B               	movf	OUTFQ@j+1,w
  6750  0231  00A5               	movwf	??_OUTFQ+5
  6751  0232  085A               	movf	OUTFQ@j,w
  6752  0233  00A4               	movwf	??_OUTFQ+4
  6753  0234  1003               	clrc
  6754  0235  0DA4               	rlf	??_OUTFQ+4,f
  6755  0236  0DA5               	rlf	??_OUTFQ+5,f
  6756  0237  0824               	movf	??_OUTFQ+4,w
  6757  0238  077B               	addwf	OUTFQ@Nprg,w
  6758  0239  00A6               	movwf	??_OUTFQ+6
  6759  023A  0825               	movf	??_OUTFQ+5,w
  6760  023B  1803               	skipnc
  6761  023C  0A25               	incf	??_OUTFQ+5,w
  6762  023D  077C               	addwf	OUTFQ@Nprg+1,w
  6763  023E  00A7               	movwf	??_OUTFQ+7
  6764  023F  0826               	movf	??_OUTFQ+6,w
  6765  0240  0084               	movwf	4
  6766  0241  1783               	bsf	3,7
  6767  0242  1C27               	btfss	??_OUTFQ+7,0
  6768  0243  1383               	bcf	3,7
  6769  0244  0870               	movf	?___awdiv,w
  6770  0245  0080               	movwf	0
  6771  0246  0A84               	incf	4,f
  6772  0247  0871               	movf	?___awdiv+1,w
  6773  0248  0080               	movwf	0
  6774                           
  6775                           ;FMCW.c: 165: Nprg[j+1] = Nprg[j+1] + 10;
  6776  0249  085B               	movf	OUTFQ@j+1,w
  6777  024A  00A1               	movwf	??_OUTFQ+1
  6778  024B  085A               	movf	OUTFQ@j,w
  6779  024C  00A0               	movwf	??_OUTFQ
  6780  024D  1003               	clrc
  6781  024E  0DA0               	rlf	??_OUTFQ,f
  6782  024F  0DA1               	rlf	??_OUTFQ+1,f
  6783  0250  0820               	movf	??_OUTFQ,w
  6784  0251  3E02               	addlw	2
  6785  0252  00A2               	movwf	??_OUTFQ+2
  6786  0253  0821               	movf	??_OUTFQ+1,w
  6787  0254  1803               	skipnc
  6788  0255  3E01               	addlw	1
  6789  0256  3E00               	addlw	0
  6790  0257  00A3               	movwf	??_OUTFQ+3
  6791  0258  0822               	movf	??_OUTFQ+2,w
  6792  0259  077B               	addwf	OUTFQ@Nprg,w
  6793  025A  00A4               	movwf	??_OUTFQ+4
  6794  025B  0823               	movf	??_OUTFQ+3,w
  6795  025C  1803               	skipnc
  6796  025D  0A23               	incf	??_OUTFQ+3,w
  6797  025E  077C               	addwf	OUTFQ@Nprg+1,w
  6798  025F  00A5               	movwf	??_OUTFQ+5
  6799  0260  0824               	movf	??_OUTFQ+4,w
  6800  0261  0084               	movwf	4
  6801  0262  1783               	bsf	3,7
  6802  0263  1C25               	btfss	??_OUTFQ+5,0
  6803  0264  1383               	bcf	3,7
  6804  0265  0800               	movf	0,w
  6805  0266  00A6               	movwf	??_OUTFQ+6
  6806  0267  0A84               	incf	4,f
  6807  0268  0800               	movf	0,w
  6808  0269  00A7               	movwf	??_OUTFQ+7
  6809  026A  0826               	movf	??_OUTFQ+6,w
  6810  026B  3E0A               	addlw	10
  6811  026C  00A8               	movwf	??_OUTFQ+8
  6812  026D  0827               	movf	??_OUTFQ+7,w
  6813  026E  1803               	skipnc
  6814  026F  3E01               	addlw	1
  6815  0270  3E00               	addlw	0
  6816  0271  00A9               	movwf	??_OUTFQ+9
  6817  0272  085B               	movf	OUTFQ@j+1,w
  6818  0273  00AB               	movwf	??_OUTFQ+11
  6819  0274  085A               	movf	OUTFQ@j,w
  6820  0275  00AA               	movwf	??_OUTFQ+10
  6821  0276  1003               	clrc
  6822  0277  0DAA               	rlf	??_OUTFQ+10,f
  6823  0278  0DAB               	rlf	??_OUTFQ+11,f
  6824  0279  082A               	movf	??_OUTFQ+10,w
  6825  027A  3E02               	addlw	2
  6826  027B  00AC               	movwf	??_OUTFQ+12
  6827  027C  082B               	movf	??_OUTFQ+11,w
  6828  027D  1803               	skipnc
  6829  027E  3E01               	addlw	1
  6830  027F  3E00               	addlw	0
  6831  0280  00AD               	movwf	??_OUTFQ+13
  6832  0281  082C               	movf	??_OUTFQ+12,w
  6833  0282  077B               	addwf	OUTFQ@Nprg,w
  6834  0283  00AE               	movwf	??_OUTFQ+14
  6835  0284  082D               	movf	??_OUTFQ+13,w
  6836  0285  1803               	skipnc
  6837  0286  0A2D               	incf	??_OUTFQ+13,w
  6838  0287  077C               	addwf	OUTFQ@Nprg+1,w
  6839  0288  00AF               	movwf	??_OUTFQ+15
  6840  0289  082E               	movf	??_OUTFQ+14,w
  6841  028A  0084               	movwf	4
  6842  028B  1783               	bsf	3,7
  6843  028C  1C2F               	btfss	??_OUTFQ+15,0
  6844  028D  1383               	bcf	3,7
  6845  028E  0828               	movf	??_OUTFQ+8,w
  6846  028F  0080               	movwf	0
  6847  0290  0A84               	incf	4,f
  6848  0291  0829               	movf	??_OUTFQ+9,w
  6849  0292                     L8:	
  6850  0292  0080               	movwf	0
  6851  0293                     l3212:	
  6852  0293  3001               	movlw	1
  6853  0294  07DA               	addwf	OUTFQ@j,f
  6854  0295  1803               	skipnc
  6855  0296  0ADB               	incf	OUTFQ@j+1,f
  6856  0297  3000               	movlw	0
  6857  0298  07DB               	addwf	OUTFQ@j+1,f
  6858  0299  085B               	movf	OUTFQ@j+1,w
  6859  029A  3A80               	xorlw	128
  6860  029B  00FF               	movwf	127
  6861  029C  3080               	movlw	128
  6862  029D  027F               	subwf	127,w
  6863  029E  1D03               	skipz
  6864  029F  2AA2               	goto	u2855
  6865  02A0  3005               	movlw	5
  6866  02A1  025A               	subwf	OUTFQ@j,w
  6867  02A2                     u2855:	
  6868  02A2  1C03               	skipc
  6869  02A3  28F7               	goto	l3186
  6870  02A4                     l3216:	
  6871  02A4  3001               	movlw	1
  6872  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  6873  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  6874  02A7  07D2               	addwf	OUTFQ@i_472,f
  6875  02A8  1803               	skipnc
  6876  02A9  0AD3               	incf	OUTFQ@i_472+1,f
  6877  02AA  3000               	movlw	0
  6878  02AB  07D3               	addwf	OUTFQ@i_472+1,f
  6879  02AC  0853               	movf	OUTFQ@i_472+1,w
  6880  02AD  3A80               	xorlw	128
  6881  02AE  00FF               	movwf	127
  6882  02AF  3080               	movlw	128
  6883  02B0  027F               	subwf	127,w
  6884  02B1  1D03               	skipz
  6885  02B2  2AB5               	goto	u2865
  6886  02B3  3011               	movlw	17
  6887  02B4  0252               	subwf	OUTFQ@i_472,w
  6888  02B5                     u2865:	
  6889  02B5  1C03               	skipc
  6890  02B6  28E8               	goto	l3180
  6891  02B7                     l3220:	
  6892                           
  6893                           ;FMCW.c: 166: }
  6894                           ;FMCW.c: 167: }
  6895                           ;FMCW.c: 168: }
  6896                           ;FMCW.c: 169: }
  6897                           ;FMCW.c: 172: for (int i=0; i<17; i++)
  6898  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  6899  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  6900  02B9  01D8               	clrf	OUTFQ@i_474
  6901  02BA  01D9               	clrf	OUTFQ@i_474+1
  6902  02BB  0859               	movf	OUTFQ@i_474+1,w
  6903  02BC  3A80               	xorlw	128
  6904  02BD  00FF               	movwf	127
  6905  02BE  3080               	movlw	128
  6906  02BF  027F               	subwf	127,w
  6907  02C0  1D03               	skipz
  6908  02C1  2AC4               	goto	u2875
  6909  02C2  3011               	movlw	17
  6910  02C3  0258               	subwf	OUTFQ@i_474,w
  6911  02C4                     u2875:	
  6912  02C4  1803               	btfsc	3,0
  6913  02C5  2B0D               	goto	l3238
  6914  02C6                     l3226:	
  6915                           
  6916                           ;FMCW.c: 173: {
  6917                           ;FMCW.c: 174: if(Nprg_b[i] == 0)
  6918  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  6919  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  6920  02C8  0858               	movf	OUTFQ@i_474,w
  6921  02C9  00A0               	movwf	??_OUTFQ
  6922  02CA  0720               	addwf	??_OUTFQ,w
  6923  02CB  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6924  02CC  0084               	movwf	4
  6925  02CD  1383               	bcf	3,7	;select IRP bank0
  6926  02CE  0800               	movf	0,w
  6927  02CF  00A1               	movwf	??_OUTFQ+1
  6928  02D0  0A84               	incf	4,f
  6929  02D1  0800               	movf	0,w
  6930  02D2  00A2               	movwf	??_OUTFQ+2
  6931  02D3  0821               	movf	??_OUTFQ+1,w
  6932  02D4  0422               	iorwf	??_OUTFQ+2,w
  6933  02D5  1D03               	btfss	3,2
  6934  02D6  2AE0               	goto	l3230
  6935                           
  6936                           ;FMCW.c: 175: {
  6937                           ;FMCW.c: 176: L_OUT(fmcwtxrx);
  6938  02D7  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6939  02D8  00F3               	movwf	L_OUT@fmcwtxrx+1
  6940  02D9  0879               	movf	OUTFQ@fmcwtxrx,w
  6941  02DA  00F2               	movwf	L_OUT@fmcwtxrx
  6942  02DB  120A  158A  2251  120A  118A  	fcall	_L_OUT
  6943  02E0                     l3230:	
  6944                           
  6945                           ;FMCW.c: 177: }
  6946                           ;FMCW.c: 178: if(Nprg_b[i] == 1)
  6947  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  6948  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  6949  02E2  0858               	movf	OUTFQ@i_474,w
  6950  02E3  00A0               	movwf	??_OUTFQ
  6951  02E4  0720               	addwf	??_OUTFQ,w
  6952  02E5  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6953  02E6  0084               	movwf	4
  6954  02E7  1383               	bcf	3,7	;select IRP bank0
  6955  02E8  0800               	movf	0,w
  6956  02E9  00A1               	movwf	??_OUTFQ+1
  6957  02EA  0A84               	incf	4,f
  6958  02EB  0800               	movf	0,w
  6959  02EC  00A2               	movwf	??_OUTFQ+2
  6960  02ED  0321               	decf	??_OUTFQ+1,w
  6961  02EE  0422               	iorwf	??_OUTFQ+2,w
  6962  02EF  1D03               	btfss	3,2
  6963  02F0  2AFA               	goto	l3234
  6964                           
  6965                           ;FMCW.c: 179: {
  6966                           ;FMCW.c: 180: H_OUT(fmcwtxrx);
  6967  02F1  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6968  02F2  00F3               	movwf	H_OUT@fmcwtxrx+1
  6969  02F3  0879               	movf	OUTFQ@fmcwtxrx,w
  6970  02F4  00F2               	movwf	H_OUT@fmcwtxrx
  6971  02F5  120A  158A  220B  120A  118A  	fcall	_H_OUT
  6972  02FA                     l3234:	
  6973  02FA  3001               	movlw	1
  6974  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  6975  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  6976  02FD  07D8               	addwf	OUTFQ@i_474,f
  6977  02FE  1803               	skipnc
  6978  02FF  0AD9               	incf	OUTFQ@i_474+1,f
  6979  0300  3000               	movlw	0
  6980  0301  07D9               	addwf	OUTFQ@i_474+1,f
  6981  0302  0859               	movf	OUTFQ@i_474+1,w
  6982  0303  3A80               	xorlw	128
  6983  0304  00FF               	movwf	127
  6984  0305  3080               	movlw	128
  6985  0306  027F               	subwf	127,w
  6986  0307  1D03               	skipz
  6987  0308  2B0B               	goto	u2905
  6988  0309  3011               	movlw	17
  6989  030A  0258               	subwf	OUTFQ@i_474,w
  6990  030B                     u2905:	
  6991  030B  1C03               	skipc
  6992  030C  2AC6               	goto	l3226
  6993  030D                     l3238:	
  6994                           
  6995                           ;FMCW.c: 181: }
  6996                           ;FMCW.c: 182: }
  6997                           ;FMCW.c: 185: H_OUT(fmcwtxrx);
  6998  030D  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6999  030E  00F3               	movwf	H_OUT@fmcwtxrx+1
  7000  030F  0879               	movf	OUTFQ@fmcwtxrx,w
  7001  0310  00F2               	movwf	H_OUT@fmcwtxrx
  7002  0311  120A  158A  220B  120A  118A  	fcall	_H_OUT
  7003                           
  7004                           ;FMCW.c: 186: L_OUT(fmcwtxrx);
  7005  0316  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7006  0317  00F3               	movwf	L_OUT@fmcwtxrx+1
  7007  0318  0879               	movf	OUTFQ@fmcwtxrx,w
  7008  0319  00F2               	movwf	L_OUT@fmcwtxrx
  7009  031A  120A  158A  2251  120A  118A  	fcall	_L_OUT
  7010                           
  7011                           ;FMCW.c: 189: STBOUT(fmcwtxrx);
  7012  031F  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7013  0320  00F3               	movwf	STBOUT@fmcwtxrx+1
  7014  0321  0879               	movf	OUTFQ@fmcwtxrx,w
  7015  0322  00F2               	movwf	STBOUT@fmcwtxrx
  7016  0323  120A  158A  216F   	fcall	_STBOUT
  7017  0326  0008               	return
  7018  0327                     __end_of_OUTFQ:	
  7019                           
  7020                           	psect	text24
  7021  0AE3                     __ptext24:	
  7022 ;; *************** function ___awdiv *****************
  7023 ;; Defined at:
  7024 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  7025 ;; Parameters:    Size  Location     Type
  7026 ;;  divisor         2    0[COMMON] int 
  7027 ;;  dividend        2    2[COMMON] int 
  7028 ;; Auto vars:     Size  Location     Type
  7029 ;;  quotient        2    7[COMMON] int 
  7030 ;;  sign            1    6[COMMON] unsigned char 
  7031 ;;  counter         1    5[COMMON] unsigned char 
  7032 ;; Return value:  Size  Location     Type
  7033 ;;                  2    0[COMMON] int 
  7034 ;; Registers used:
  7035 ;;		wreg, status,2, status,0
  7036 ;; Tracked objects:
  7037 ;;		On entry : 0/0
  7038 ;;		On exit  : 0/0
  7039 ;;		Unchanged: 0/0
  7040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7041 ;;      Params:         4       0       0       0       0
  7042 ;;      Locals:         4       0       0       0       0
  7043 ;;      Temps:          1       0       0       0       0
  7044 ;;      Totals:         9       0       0       0       0
  7045 ;;Total ram usage:        9 bytes
  7046 ;; Hardware stack levels used:    1
  7047 ;; This function calls:
  7048 ;;		Nothing
  7049 ;; This function is called by:
  7050 ;;		_OUTFQ
  7051 ;;		_RFDOUT
  7052 ;; This function uses a non-reentrant model
  7053 ;;
  7054                           
  7055                           
  7056                           ;psect for function ___awdiv
  7057  0AE3                     ___awdiv:	
  7058                           
  7059                           ;incstack = 0
  7060                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7061  0AE3  01F6               	clrf	___awdiv@sign
  7062  0AE4  1FF1               	btfss	___awdiv@divisor+1,7
  7063  0AE5  2AED               	goto	l2650
  7064  0AE6  09F0               	comf	___awdiv@divisor,f
  7065  0AE7  09F1               	comf	___awdiv@divisor+1,f
  7066  0AE8  0AF0               	incf	___awdiv@divisor,f
  7067  0AE9  1903               	skipnz
  7068  0AEA  0AF1               	incf	___awdiv@divisor+1,f
  7069  0AEB  01F6               	clrf	___awdiv@sign
  7070  0AEC  0AF6               	incf	___awdiv@sign,f
  7071  0AED                     l2650:	
  7072  0AED  1FF3               	btfss	___awdiv@dividend+1,7
  7073  0AEE  2AF8               	goto	l2656
  7074  0AEF  09F2               	comf	___awdiv@dividend,f
  7075  0AF0  09F3               	comf	___awdiv@dividend+1,f
  7076  0AF1  0AF2               	incf	___awdiv@dividend,f
  7077  0AF2  1903               	skipnz
  7078  0AF3  0AF3               	incf	___awdiv@dividend+1,f
  7079  0AF4  3001               	movlw	1
  7080  0AF5  00F4               	movwf	??___awdiv
  7081  0AF6  0874               	movf	??___awdiv,w
  7082  0AF7  06F6               	xorwf	___awdiv@sign,f
  7083  0AF8                     l2656:	
  7084  0AF8  01F7               	clrf	___awdiv@quotient
  7085  0AF9  01F8               	clrf	___awdiv@quotient+1
  7086  0AFA  0870               	movf	___awdiv@divisor,w
  7087  0AFB  0471               	iorwf	___awdiv@divisor+1,w
  7088  0AFC  1903               	btfsc	3,2
  7089  0AFD  2B2F               	goto	l2678
  7090  0AFE  01F5               	clrf	___awdiv@counter
  7091  0AFF  0AF5               	incf	___awdiv@counter,f
  7092  0B00                     l2666:	
  7093  0B00  1BF1               	btfsc	___awdiv@divisor+1,7
  7094  0B01  2B0E               	goto	l2668
  7095  0B02  3001               	movlw	1
  7096  0B03                     u2025:	
  7097  0B03  1003               	clrc
  7098  0B04  0DF0               	rlf	___awdiv@divisor,f
  7099  0B05  0DF1               	rlf	___awdiv@divisor+1,f
  7100  0B06  3EFF               	addlw	-1
  7101  0B07  1D03               	skipz
  7102  0B08  2B03               	goto	u2025
  7103  0B09  3001               	movlw	1
  7104  0B0A  00F4               	movwf	??___awdiv
  7105  0B0B  0874               	movf	??___awdiv,w
  7106  0B0C  07F5               	addwf	___awdiv@counter,f
  7107  0B0D  2B00               	goto	l2666
  7108  0B0E                     l2668:	
  7109  0B0E  3001               	movlw	1
  7110  0B0F                     u2045:	
  7111  0B0F  1003               	clrc
  7112  0B10  0DF7               	rlf	___awdiv@quotient,f
  7113  0B11  0DF8               	rlf	___awdiv@quotient+1,f
  7114  0B12  3EFF               	addlw	-1
  7115  0B13  1D03               	skipz
  7116  0B14  2B0F               	goto	u2045
  7117  0B15  0871               	movf	___awdiv@divisor+1,w
  7118  0B16  0273               	subwf	___awdiv@dividend+1,w
  7119  0B17  1D03               	skipz
  7120  0B18  2B1B               	goto	u2055
  7121  0B19  0870               	movf	___awdiv@divisor,w
  7122  0B1A  0272               	subwf	___awdiv@dividend,w
  7123  0B1B                     u2055:	
  7124  0B1B  1C03               	skipc
  7125  0B1C  2B24               	goto	l2674
  7126  0B1D  0870               	movf	___awdiv@divisor,w
  7127  0B1E  02F2               	subwf	___awdiv@dividend,f
  7128  0B1F  0871               	movf	___awdiv@divisor+1,w
  7129  0B20  1C03               	skipc
  7130  0B21  03F3               	decf	___awdiv@dividend+1,f
  7131  0B22  02F3               	subwf	___awdiv@dividend+1,f
  7132  0B23  1477               	bsf	___awdiv@quotient,0
  7133  0B24                     l2674:	
  7134  0B24  3001               	movlw	1
  7135  0B25                     u2065:	
  7136  0B25  1003               	clrc
  7137  0B26  0CF1               	rrf	___awdiv@divisor+1,f
  7138  0B27  0CF0               	rrf	___awdiv@divisor,f
  7139  0B28  3EFF               	addlw	-1
  7140  0B29  1D03               	skipz
  7141  0B2A  2B25               	goto	u2065
  7142  0B2B  3001               	movlw	1
  7143  0B2C  02F5               	subwf	___awdiv@counter,f
  7144  0B2D  1D03               	btfss	3,2
  7145  0B2E  2B0E               	goto	l2668
  7146  0B2F                     l2678:	
  7147  0B2F  0876               	movf	___awdiv@sign,w
  7148  0B30  1903               	btfsc	3,2
  7149  0B31  2B37               	goto	l2682
  7150  0B32  09F7               	comf	___awdiv@quotient,f
  7151  0B33  09F8               	comf	___awdiv@quotient+1,f
  7152  0B34  0AF7               	incf	___awdiv@quotient,f
  7153  0B35  1903               	skipnz
  7154  0B36  0AF8               	incf	___awdiv@quotient+1,f
  7155  0B37                     l2682:	
  7156  0B37  0878               	movf	___awdiv@quotient+1,w
  7157  0B38  00F1               	movwf	?___awdiv+1
  7158  0B39  0877               	movf	___awdiv@quotient,w
  7159  0B3A  00F0               	movwf	?___awdiv
  7160  0B3B  0008               	return
  7161  0B3C                     __end_of___awdiv:	
  7162                           
  7163                           	psect	text25
  7164  0CBD                     __ptext25:	
  7165 ;; *************** function _OPINIT *****************
  7166 ;; Defined at:
  7167 ;;		line 241 in file "FMCW.c"
  7168 ;; Parameters:    Size  Location     Type
  7169 ;;  fmcwtxrx        2    4[COMMON] int 
  7170 ;; Auto vars:     Size  Location     Type
  7171 ;;		None
  7172 ;; Return value:  Size  Location     Type
  7173 ;;                  1    wreg      void 
  7174 ;; Registers used:
  7175 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7176 ;; Tracked objects:
  7177 ;;		On entry : 0/0
  7178 ;;		On exit  : 0/0
  7179 ;;		Unchanged: 0/0
  7180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7181 ;;      Params:         2       0       0       0       0
  7182 ;;      Locals:         0       0       0       0       0
  7183 ;;      Temps:          0       0       0       0       0
  7184 ;;      Totals:         2       0       0       0       0
  7185 ;;Total ram usage:        2 bytes
  7186 ;; Hardware stack levels used:    1
  7187 ;; Hardware stack levels required when called:    2
  7188 ;; This function calls:
  7189 ;;		_H_OUT
  7190 ;;		_L_OUT
  7191 ;;		_STBOUT
  7192 ;; This function is called by:
  7193 ;;		_FMTX
  7194 ;;		_CWTX
  7195 ;;		_FMRX
  7196 ;; This function uses a non-reentrant model
  7197 ;;
  7198                           
  7199                           
  7200                           ;psect for function _OPINIT
  7201  0CBD                     _OPINIT:	
  7202                           
  7203                           ;FMCW.c: 243: L_OUT(fmcwtxrx);
  7204                           
  7205                           ;incstack = 0
  7206                           ; Regs used in _OPINIT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7207  0CBD  0875               	movf	OPINIT@fmcwtxrx+1,w
  7208  0CBE  00F3               	movwf	L_OUT@fmcwtxrx+1
  7209  0CBF  0874               	movf	OPINIT@fmcwtxrx,w
  7210  0CC0  00F2               	movwf	L_OUT@fmcwtxrx
  7211  0CC1  120A  158A  2251  120A  158A  	fcall	_L_OUT
  7212                           
  7213                           ;FMCW.c: 244: L_OUT(fmcwtxrx);
  7214  0CC6  0875               	movf	OPINIT@fmcwtxrx+1,w
  7215  0CC7  00F3               	movwf	L_OUT@fmcwtxrx+1
  7216  0CC8  0874               	movf	OPINIT@fmcwtxrx,w
  7217  0CC9  00F2               	movwf	L_OUT@fmcwtxrx
  7218  0CCA  120A  158A  2251  120A  158A  	fcall	_L_OUT
  7219                           
  7220                           ;FMCW.c: 245: L_OUT(fmcwtxrx);
  7221  0CCF  0875               	movf	OPINIT@fmcwtxrx+1,w
  7222  0CD0  00F3               	movwf	L_OUT@fmcwtxrx+1
  7223  0CD1  0874               	movf	OPINIT@fmcwtxrx,w
  7224  0CD2  00F2               	movwf	L_OUT@fmcwtxrx
  7225  0CD3  120A  158A  2251  120A  158A  	fcall	_L_OUT
  7226                           
  7227                           ;FMCW.c: 246: H_OUT(fmcwtxrx);
  7228  0CD8  0875               	movf	OPINIT@fmcwtxrx+1,w
  7229  0CD9  00F3               	movwf	H_OUT@fmcwtxrx+1
  7230  0CDA  0874               	movf	OPINIT@fmcwtxrx,w
  7231  0CDB  00F2               	movwf	H_OUT@fmcwtxrx
  7232  0CDC  120A  158A  220B  120A  158A  	fcall	_H_OUT
  7233                           
  7234                           ;FMCW.c: 247: H_OUT(fmcwtxrx);
  7235  0CE1  0875               	movf	OPINIT@fmcwtxrx+1,w
  7236  0CE2  00F3               	movwf	H_OUT@fmcwtxrx+1
  7237  0CE3  0874               	movf	OPINIT@fmcwtxrx,w
  7238  0CE4  00F2               	movwf	H_OUT@fmcwtxrx
  7239  0CE5  120A  158A  220B  120A  158A  	fcall	_H_OUT
  7240                           
  7241                           ;FMCW.c: 248: L_OUT(fmcwtxrx);
  7242  0CEA  0875               	movf	OPINIT@fmcwtxrx+1,w
  7243  0CEB  00F3               	movwf	L_OUT@fmcwtxrx+1
  7244  0CEC  0874               	movf	OPINIT@fmcwtxrx,w
  7245  0CED  00F2               	movwf	L_OUT@fmcwtxrx
  7246  0CEE  120A  158A  2251  120A  158A  	fcall	_L_OUT
  7247                           
  7248                           ;FMCW.c: 249: L_OUT(fmcwtxrx);
  7249  0CF3  0875               	movf	OPINIT@fmcwtxrx+1,w
  7250  0CF4  00F3               	movwf	L_OUT@fmcwtxrx+1
  7251  0CF5  0874               	movf	OPINIT@fmcwtxrx,w
  7252  0CF6  00F2               	movwf	L_OUT@fmcwtxrx
  7253  0CF7  120A  158A  2251  120A  158A  	fcall	_L_OUT
  7254                           
  7255                           ;FMCW.c: 250: L_OUT(fmcwtxrx);
  7256  0CFC  0875               	movf	OPINIT@fmcwtxrx+1,w
  7257  0CFD  00F3               	movwf	L_OUT@fmcwtxrx+1
  7258  0CFE  0874               	movf	OPINIT@fmcwtxrx,w
  7259  0CFF  00F2               	movwf	L_OUT@fmcwtxrx
  7260  0D00  120A  158A  2251  120A  158A  	fcall	_L_OUT
  7261                           
  7262                           ;FMCW.c: 251: L_OUT(fmcwtxrx);
  7263  0D05  0875               	movf	OPINIT@fmcwtxrx+1,w
  7264  0D06  00F3               	movwf	L_OUT@fmcwtxrx+1
  7265  0D07  0874               	movf	OPINIT@fmcwtxrx,w
  7266  0D08  00F2               	movwf	L_OUT@fmcwtxrx
  7267  0D09  120A  158A  2251  120A  158A  	fcall	_L_OUT
  7268                           
  7269                           ;FMCW.c: 252: L_OUT(fmcwtxrx);
  7270  0D0E  0875               	movf	OPINIT@fmcwtxrx+1,w
  7271  0D0F  00F3               	movwf	L_OUT@fmcwtxrx+1
  7272  0D10  0874               	movf	OPINIT@fmcwtxrx,w
  7273  0D11  00F2               	movwf	L_OUT@fmcwtxrx
  7274  0D12  120A  158A  2251  120A  158A  	fcall	_L_OUT
  7275                           
  7276                           ;FMCW.c: 253: H_OUT(fmcwtxrx);
  7277  0D17  0875               	movf	OPINIT@fmcwtxrx+1,w
  7278  0D18  00F3               	movwf	H_OUT@fmcwtxrx+1
  7279  0D19  0874               	movf	OPINIT@fmcwtxrx,w
  7280  0D1A  00F2               	movwf	H_OUT@fmcwtxrx
  7281  0D1B  120A  158A  220B  120A  158A  	fcall	_H_OUT
  7282                           
  7283                           ;FMCW.c: 256: L_OUT(fmcwtxrx);
  7284  0D20  0875               	movf	OPINIT@fmcwtxrx+1,w
  7285  0D21  00F3               	movwf	L_OUT@fmcwtxrx+1
  7286  0D22  0874               	movf	OPINIT@fmcwtxrx,w
  7287  0D23  00F2               	movwf	L_OUT@fmcwtxrx
  7288  0D24  120A  158A  2251  120A  158A  	fcall	_L_OUT
  7289                           
  7290                           ;FMCW.c: 257: L_OUT(fmcwtxrx);
  7291  0D29  0875               	movf	OPINIT@fmcwtxrx+1,w
  7292  0D2A  00F3               	movwf	L_OUT@fmcwtxrx+1
  7293  0D2B  0874               	movf	OPINIT@fmcwtxrx,w
  7294  0D2C  00F2               	movwf	L_OUT@fmcwtxrx
  7295  0D2D  120A  158A  2251  120A  158A  	fcall	_L_OUT
  7296                           
  7297                           ;FMCW.c: 260: STBOUT(fmcwtxrx);
  7298  0D32  0875               	movf	OPINIT@fmcwtxrx+1,w
  7299  0D33  00F3               	movwf	STBOUT@fmcwtxrx+1
  7300  0D34  0874               	movf	OPINIT@fmcwtxrx,w
  7301  0D35  00F2               	movwf	STBOUT@fmcwtxrx
  7302  0D36  120A  158A  216F   	fcall	_STBOUT
  7303  0D39  0008               	return
  7304  0D3A                     __end_of_OPINIT:	
  7305                           
  7306                           	psect	text26
  7307  096F                     __ptext26:	
  7308 ;; *************** function _STBOUT *****************
  7309 ;; Defined at:
  7310 ;;		line 107 in file "FMCW.c"
  7311 ;; Parameters:    Size  Location     Type
  7312 ;;  fmcwtxrx        2    2[COMMON] int 
  7313 ;; Auto vars:     Size  Location     Type
  7314 ;;		None
  7315 ;; Return value:  Size  Location     Type
  7316 ;;                  1    wreg      void 
  7317 ;; Registers used:
  7318 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7319 ;; Tracked objects:
  7320 ;;		On entry : 0/0
  7321 ;;		On exit  : 0/0
  7322 ;;		Unchanged: 0/0
  7323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7324 ;;      Params:         2       0       0       0       0
  7325 ;;      Locals:         0       0       0       0       0
  7326 ;;      Temps:          0       0       0       0       0
  7327 ;;      Totals:         2       0       0       0       0
  7328 ;;Total ram usage:        2 bytes
  7329 ;; Hardware stack levels used:    1
  7330 ;; Hardware stack levels required when called:    1
  7331 ;; This function calls:
  7332 ;;		__NOP
  7333 ;; This function is called by:
  7334 ;;		_OUTFQ
  7335 ;;		_RFDOUT
  7336 ;;		_OPINIT
  7337 ;; This function uses a non-reentrant model
  7338 ;;
  7339                           
  7340                           
  7341                           ;psect for function _STBOUT
  7342  096F                     _STBOUT:	
  7343                           
  7344                           ;FMCW.c: 108: if(fmcwtxrx == 1)
  7345                           
  7346                           ;incstack = 0
  7347                           ; Regs used in _STBOUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7348  096F  0372               	decf	STBOUT@fmcwtxrx,w
  7349  0970  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7350  0971  1D03               	btfss	3,2
  7351  0972  297E               	goto	l2626
  7352                           
  7353                           ;FMCW.c: 109: {
  7354                           ;FMCW.c: 110: PORTAbits.RA5 = 1;
  7355  0973  1283               	bcf	3,5	;RP0=0, select bank0
  7356  0974  1303               	bcf	3,6	;RP1=0, select bank0
  7357  0975  1685               	bsf	5,5	;volatile
  7358                           
  7359                           ;FMCW.c: 111: _NOP();
  7360  0976  120A  158A  2045  120A  158A  	fcall	__NOP
  7361                           
  7362                           ;FMCW.c: 112: PORTAbits.RA5 = 0;
  7363  097B  1283               	bcf	3,5	;RP0=0, select bank0
  7364  097C  1303               	bcf	3,6	;RP1=0, select bank0
  7365  097D  1285               	bcf	5,5	;volatile
  7366  097E                     l2626:	
  7367                           
  7368                           ;FMCW.c: 113: }
  7369                           ;FMCW.c: 114: if(fmcwtxrx == 2)
  7370  097E  3002               	movlw	2
  7371  097F  0672               	xorwf	STBOUT@fmcwtxrx,w
  7372  0980  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7373  0981  1D03               	btfss	3,2
  7374  0982  298E               	goto	l2634
  7375                           
  7376                           ;FMCW.c: 115: {
  7377                           ;FMCW.c: 116: PORTDbits.RD0 = 1;
  7378  0983  1283               	bcf	3,5	;RP0=0, select bank0
  7379  0984  1303               	bcf	3,6	;RP1=0, select bank0
  7380  0985  1408               	bsf	8,0	;volatile
  7381                           
  7382                           ;FMCW.c: 117: _NOP();
  7383  0986  120A  158A  2045  120A  158A  	fcall	__NOP
  7384                           
  7385                           ;FMCW.c: 118: PORTDbits.RD0 = 0;
  7386  098B  1283               	bcf	3,5	;RP0=0, select bank0
  7387  098C  1303               	bcf	3,6	;RP1=0, select bank0
  7388  098D  1008               	bcf	8,0	;volatile
  7389  098E                     l2634:	
  7390                           
  7391                           ;FMCW.c: 119: }
  7392                           ;FMCW.c: 120: if(fmcwtxrx == 3)
  7393  098E  3003               	movlw	3
  7394  098F  0672               	xorwf	STBOUT@fmcwtxrx,w
  7395  0990  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7396  0991  1D03               	btfss	3,2
  7397  0992  0008               	return
  7398                           
  7399                           ;FMCW.c: 121: {
  7400                           ;FMCW.c: 122: PORTAbits.RA4 = 1;
  7401  0993  1283               	bcf	3,5	;RP0=0, select bank0
  7402  0994  1303               	bcf	3,6	;RP1=0, select bank0
  7403  0995  1605               	bsf	5,4	;volatile
  7404                           
  7405                           ;FMCW.c: 123: _NOP();
  7406  0996  120A  158A  2045   	fcall	__NOP
  7407                           
  7408                           ;FMCW.c: 124: PORTAbits.RA4 = 0;
  7409  0999  1283               	bcf	3,5	;RP0=0, select bank0
  7410  099A  1303               	bcf	3,6	;RP1=0, select bank0
  7411  099B  1205               	bcf	5,4	;volatile
  7412  099C  0008               	return
  7413  099D                     __end_of_STBOUT:	
  7414                           
  7415                           	psect	text27
  7416  0A51                     __ptext27:	
  7417 ;; *************** function _L_OUT *****************
  7418 ;; Defined at:
  7419 ;;		line 40 in file "FMCW.c"
  7420 ;; Parameters:    Size  Location     Type
  7421 ;;  fmcwtxrx        2    2[COMMON] int 
  7422 ;; Auto vars:     Size  Location     Type
  7423 ;;		None
  7424 ;; Return value:  Size  Location     Type
  7425 ;;                  1    wreg      void 
  7426 ;; Registers used:
  7427 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7428 ;; Tracked objects:
  7429 ;;		On entry : 0/0
  7430 ;;		On exit  : 0/0
  7431 ;;		Unchanged: 0/0
  7432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7433 ;;      Params:         2       0       0       0       0
  7434 ;;      Locals:         0       0       0       0       0
  7435 ;;      Temps:          0       0       0       0       0
  7436 ;;      Totals:         2       0       0       0       0
  7437 ;;Total ram usage:        2 bytes
  7438 ;; Hardware stack levels used:    1
  7439 ;; Hardware stack levels required when called:    1
  7440 ;; This function calls:
  7441 ;;		__NOP
  7442 ;; This function is called by:
  7443 ;;		_OUTFQ
  7444 ;;		_RFDOUT
  7445 ;;		_OPINIT
  7446 ;; This function uses a non-reentrant model
  7447 ;;
  7448                           
  7449                           
  7450                           ;psect for function _L_OUT
  7451  0A51                     _L_OUT:	
  7452                           
  7453                           ;FMCW.c: 41: if(fmcwtxrx == 1)
  7454                           
  7455                           ;incstack = 0
  7456                           ; Regs used in _L_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7457  0A51  0372               	decf	L_OUT@fmcwtxrx,w
  7458  0A52  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7459  0A53  1D03               	btfss	3,2
  7460  0A54  2A68               	goto	l2568
  7461                           
  7462                           ;FMCW.c: 42: {
  7463                           ;FMCW.c: 43: PORTEbits.RE0 = 0;
  7464  0A55  1283               	bcf	3,5	;RP0=0, select bank0
  7465  0A56  1303               	bcf	3,6	;RP1=0, select bank0
  7466  0A57  1009               	bcf	9,0	;volatile
  7467                           
  7468                           ;FMCW.c: 44: _NOP();
  7469  0A58  120A  158A  2045  120A  158A  	fcall	__NOP
  7470                           
  7471                           ;FMCW.c: 45: PORTEbits.RE1 = 1;
  7472  0A5D  1283               	bcf	3,5	;RP0=0, select bank0
  7473  0A5E  1303               	bcf	3,6	;RP1=0, select bank0
  7474  0A5F  1489               	bsf	9,1	;volatile
  7475                           
  7476                           ;FMCW.c: 46: _NOP();
  7477  0A60  120A  158A  2045  120A  158A  	fcall	__NOP
  7478                           
  7479                           ;FMCW.c: 47: PORTEbits.RE1 = 0;
  7480  0A65  1283               	bcf	3,5	;RP0=0, select bank0
  7481  0A66  1303               	bcf	3,6	;RP1=0, select bank0
  7482  0A67  1089               	bcf	9,1	;volatile
  7483  0A68                     l2568:	
  7484                           
  7485                           ;FMCW.c: 48: }
  7486                           ;FMCW.c: 49: if(fmcwtxrx == 2)
  7487  0A68  3002               	movlw	2
  7488  0A69  0672               	xorwf	L_OUT@fmcwtxrx,w
  7489  0A6A  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7490  0A6B  1D03               	btfss	3,2
  7491  0A6C  2A80               	goto	l2578
  7492                           
  7493                           ;FMCW.c: 50: {
  7494                           ;FMCW.c: 51: PORTDbits.RD1 = 0;
  7495  0A6D  1283               	bcf	3,5	;RP0=0, select bank0
  7496  0A6E  1303               	bcf	3,6	;RP1=0, select bank0
  7497  0A6F  1088               	bcf	8,1	;volatile
  7498                           
  7499                           ;FMCW.c: 52: _NOP();
  7500  0A70  120A  158A  2045  120A  158A  	fcall	__NOP
  7501                           
  7502                           ;FMCW.c: 53: PORTDbits.RD2 = 1;
  7503  0A75  1283               	bcf	3,5	;RP0=0, select bank0
  7504  0A76  1303               	bcf	3,6	;RP1=0, select bank0
  7505  0A77  1508               	bsf	8,2	;volatile
  7506                           
  7507                           ;FMCW.c: 54: _NOP();
  7508  0A78  120A  158A  2045  120A  158A  	fcall	__NOP
  7509                           
  7510                           ;FMCW.c: 55: PORTDbits.RD2 = 0;
  7511  0A7D  1283               	bcf	3,5	;RP0=0, select bank0
  7512  0A7E  1303               	bcf	3,6	;RP1=0, select bank0
  7513  0A7F  1108               	bcf	8,2	;volatile
  7514  0A80                     l2578:	
  7515                           
  7516                           ;FMCW.c: 56: }
  7517                           ;FMCW.c: 57: if(fmcwtxrx == 3)
  7518  0A80  3003               	movlw	3
  7519  0A81  0672               	xorwf	L_OUT@fmcwtxrx,w
  7520  0A82  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7521  0A83  1D03               	btfss	3,2
  7522  0A84  0008               	return
  7523                           
  7524                           ;FMCW.c: 58: {
  7525                           ;FMCW.c: 59: PORTAbits.RA3 = 0;
  7526  0A85  1283               	bcf	3,5	;RP0=0, select bank0
  7527  0A86  1303               	bcf	3,6	;RP1=0, select bank0
  7528  0A87  1185               	bcf	5,3	;volatile
  7529                           
  7530                           ;FMCW.c: 60: _NOP();
  7531  0A88  120A  158A  2045  120A  158A  	fcall	__NOP
  7532                           
  7533                           ;FMCW.c: 61: PORTAbits.RA2 = 1;
  7534  0A8D  1283               	bcf	3,5	;RP0=0, select bank0
  7535  0A8E  1303               	bcf	3,6	;RP1=0, select bank0
  7536  0A8F  1505               	bsf	5,2	;volatile
  7537                           
  7538                           ;FMCW.c: 62: _NOP();
  7539  0A90  120A  158A  2045   	fcall	__NOP
  7540                           
  7541                           ;FMCW.c: 63: PORTAbits.RA2 = 0;
  7542  0A93  1283               	bcf	3,5	;RP0=0, select bank0
  7543  0A94  1303               	bcf	3,6	;RP1=0, select bank0
  7544  0A95  1105               	bcf	5,2	;volatile
  7545  0A96  0008               	return
  7546  0A97                     __end_of_L_OUT:	
  7547                           
  7548                           	psect	text28
  7549  0A0B                     __ptext28:	
  7550 ;; *************** function _H_OUT *****************
  7551 ;; Defined at:
  7552 ;;		line 74 in file "FMCW.c"
  7553 ;; Parameters:    Size  Location     Type
  7554 ;;  fmcwtxrx        2    2[COMMON] int 
  7555 ;; Auto vars:     Size  Location     Type
  7556 ;;		None
  7557 ;; Return value:  Size  Location     Type
  7558 ;;                  1    wreg      void 
  7559 ;; Registers used:
  7560 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7561 ;; Tracked objects:
  7562 ;;		On entry : 0/0
  7563 ;;		On exit  : 0/0
  7564 ;;		Unchanged: 0/0
  7565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7566 ;;      Params:         2       0       0       0       0
  7567 ;;      Locals:         0       0       0       0       0
  7568 ;;      Temps:          0       0       0       0       0
  7569 ;;      Totals:         2       0       0       0       0
  7570 ;;Total ram usage:        2 bytes
  7571 ;; Hardware stack levels used:    1
  7572 ;; Hardware stack levels required when called:    1
  7573 ;; This function calls:
  7574 ;;		__NOP
  7575 ;; This function is called by:
  7576 ;;		_OUTFQ
  7577 ;;		_RFDOUT
  7578 ;;		_OPINIT
  7579 ;; This function uses a non-reentrant model
  7580 ;;
  7581                           
  7582                           
  7583                           ;psect for function _H_OUT
  7584  0A0B                     _H_OUT:	
  7585                           
  7586                           ;FMCW.c: 75: if(fmcwtxrx == 1)
  7587                           
  7588                           ;incstack = 0
  7589                           ; Regs used in _H_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7590  0A0B  0372               	decf	H_OUT@fmcwtxrx,w
  7591  0A0C  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7592  0A0D  1D03               	btfss	3,2
  7593  0A0E  2A22               	goto	l2598
  7594                           
  7595                           ;FMCW.c: 76: {
  7596                           ;FMCW.c: 77: PORTEbits.RE0 = 1;
  7597  0A0F  1283               	bcf	3,5	;RP0=0, select bank0
  7598  0A10  1303               	bcf	3,6	;RP1=0, select bank0
  7599  0A11  1409               	bsf	9,0	;volatile
  7600                           
  7601                           ;FMCW.c: 78: _NOP();
  7602  0A12  120A  158A  2045  120A  158A  	fcall	__NOP
  7603                           
  7604                           ;FMCW.c: 79: PORTEbits.RE1 = 1;
  7605  0A17  1283               	bcf	3,5	;RP0=0, select bank0
  7606  0A18  1303               	bcf	3,6	;RP1=0, select bank0
  7607  0A19  1489               	bsf	9,1	;volatile
  7608                           
  7609                           ;FMCW.c: 80: _NOP();
  7610  0A1A  120A  158A  2045  120A  158A  	fcall	__NOP
  7611                           
  7612                           ;FMCW.c: 81: PORTEbits.RE1 = 0;
  7613  0A1F  1283               	bcf	3,5	;RP0=0, select bank0
  7614  0A20  1303               	bcf	3,6	;RP1=0, select bank0
  7615  0A21  1089               	bcf	9,1	;volatile
  7616  0A22                     l2598:	
  7617                           
  7618                           ;FMCW.c: 82: }
  7619                           ;FMCW.c: 83: if(fmcwtxrx == 2)
  7620  0A22  3002               	movlw	2
  7621  0A23  0672               	xorwf	H_OUT@fmcwtxrx,w
  7622  0A24  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7623  0A25  1D03               	btfss	3,2
  7624  0A26  2A3A               	goto	l2608
  7625                           
  7626                           ;FMCW.c: 84: {
  7627                           ;FMCW.c: 85: PORTDbits.RD1 = 1;
  7628  0A27  1283               	bcf	3,5	;RP0=0, select bank0
  7629  0A28  1303               	bcf	3,6	;RP1=0, select bank0
  7630  0A29  1488               	bsf	8,1	;volatile
  7631                           
  7632                           ;FMCW.c: 86: _NOP();
  7633  0A2A  120A  158A  2045  120A  158A  	fcall	__NOP
  7634                           
  7635                           ;FMCW.c: 87: PORTDbits.RD2 = 1;
  7636  0A2F  1283               	bcf	3,5	;RP0=0, select bank0
  7637  0A30  1303               	bcf	3,6	;RP1=0, select bank0
  7638  0A31  1508               	bsf	8,2	;volatile
  7639                           
  7640                           ;FMCW.c: 88: _NOP();
  7641  0A32  120A  158A  2045  120A  158A  	fcall	__NOP
  7642                           
  7643                           ;FMCW.c: 89: PORTDbits.RD2 = 0;
  7644  0A37  1283               	bcf	3,5	;RP0=0, select bank0
  7645  0A38  1303               	bcf	3,6	;RP1=0, select bank0
  7646  0A39  1108               	bcf	8,2	;volatile
  7647  0A3A                     l2608:	
  7648                           
  7649                           ;FMCW.c: 90: }
  7650                           ;FMCW.c: 91: if(fmcwtxrx == 3)
  7651  0A3A  3003               	movlw	3
  7652  0A3B  0672               	xorwf	H_OUT@fmcwtxrx,w
  7653  0A3C  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7654  0A3D  1D03               	btfss	3,2
  7655  0A3E  0008               	return
  7656                           
  7657                           ;FMCW.c: 92: {
  7658                           ;FMCW.c: 93: PORTAbits.RA3 = 1;
  7659  0A3F  1283               	bcf	3,5	;RP0=0, select bank0
  7660  0A40  1303               	bcf	3,6	;RP1=0, select bank0
  7661  0A41  1585               	bsf	5,3	;volatile
  7662                           
  7663                           ;FMCW.c: 94: _NOP();
  7664  0A42  120A  158A  2045  120A  158A  	fcall	__NOP
  7665                           
  7666                           ;FMCW.c: 95: PORTAbits.RA2 = 1;
  7667  0A47  1283               	bcf	3,5	;RP0=0, select bank0
  7668  0A48  1303               	bcf	3,6	;RP1=0, select bank0
  7669  0A49  1505               	bsf	5,2	;volatile
  7670                           
  7671                           ;FMCW.c: 96: _NOP();
  7672  0A4A  120A  158A  2045   	fcall	__NOP
  7673                           
  7674                           ;FMCW.c: 97: PORTAbits.RA2 = 0;
  7675  0A4D  1283               	bcf	3,5	;RP0=0, select bank0
  7676  0A4E  1303               	bcf	3,6	;RP1=0, select bank0
  7677  0A4F  1105               	bcf	5,2	;volatile
  7678  0A50  0008               	return
  7679  0A51                     __end_of_H_OUT:	
  7680                           
  7681                           	psect	text29
  7682  0845                     __ptext29:	
  7683 ;; *************** function __NOP *****************
  7684 ;; Defined at:
  7685 ;;		line 349 in file "FMCW.c"
  7686 ;; Parameters:    Size  Location     Type
  7687 ;;		None
  7688 ;; Auto vars:     Size  Location     Type
  7689 ;;  i               2    0[COMMON] int 
  7690 ;; Return value:  Size  Location     Type
  7691 ;;                  1    wreg      void 
  7692 ;; Registers used:
  7693 ;;		wreg, status,2, btemp+1
  7694 ;; Tracked objects:
  7695 ;;		On entry : 0/0
  7696 ;;		On exit  : 0/0
  7697 ;;		Unchanged: 0/0
  7698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7699 ;;      Params:         0       0       0       0       0
  7700 ;;      Locals:         2       0       0       0       0
  7701 ;;      Temps:          0       0       0       0       0
  7702 ;;      Totals:         2       0       0       0       0
  7703 ;;Total ram usage:        2 bytes
  7704 ;; Hardware stack levels used:    1
  7705 ;; This function calls:
  7706 ;;		Nothing
  7707 ;; This function is called by:
  7708 ;;		_L_OUT
  7709 ;;		_H_OUT
  7710 ;;		_STBOUT
  7711 ;; This function uses a non-reentrant model
  7712 ;;
  7713                           
  7714                           
  7715                           ;psect for function __NOP
  7716  0845                     __NOP:	
  7717                           
  7718                           ;FMCW.c: 350: for(int i=0; i<5; i++){
  7719                           
  7720                           ;incstack = 0
  7721                           ; Regs used in __NOP: [wreg+status,2+btemp+1]
  7722  0845  01F0               	clrf	__NOP@i
  7723  0846  01F1               	clrf	__NOP@i+1
  7724  0847                     L9:	
  7725  0847  0871               	movf	__NOP@i+1,w
  7726  0848  3A80               	xorlw	128
  7727  0849  00FF               	movwf	127
  7728  084A  3080               	movlw	128
  7729  084B  027F               	subwf	127,w
  7730  084C  1D03               	skipz
  7731  084D  2850               	goto	u1835
  7732  084E  3005               	movlw	5
  7733  084F  0270               	subwf	__NOP@i,w
  7734  0850                     u1835:	
  7735  0850  1803               	btfsc	3,0
  7736  0851  0008               	return
  7737                           
  7738                           ;FMCW.c: 351: __nop();
  7739  0852  0000               	nop
  7740  0853  3001               	movlw	1
  7741  0854  07F0               	addwf	__NOP@i,f
  7742  0855  1803               	skipnc
  7743  0856  0AF1               	incf	__NOP@i+1,f
  7744  0857  3000               	movlw	0
  7745  0858  07F1               	addwf	__NOP@i+1,f
  7746  0859  2847               	goto	L9
  7747  085A                     __end_of__NOP:	
  7748  007E                     btemp	set	126	;btemp
  7749  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    2
    Data        91
    BSS         121
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      80
    BANK1            80     33      72
    BANK3            96      0      90
    BANK2            96      0      73

Pointer List with Targets:

    FMRX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), FMRX_Nprg(BANK3[10]), 

    CWTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@CWTX_Nprg(BANK1[10]), CWTX_Nprg(BANK1[10]), 

    FMTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    OUTFQ@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), main@CWTX_Nprg(BANK1[10]), main@FMTX_Nprg(BANK1[10]), 
		 -> FMRX_Nprg(BANK3[10]), CWTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    sp__EEPROM_Read	PTR unsigned char  size(1) Largest target is 32
		 -> EEPROMData(BANK2[32]), 

    EEPROM_Write@data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK2[16]), 

    main@dData	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK2[16]), 

    sp__ReceivePacket_data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK2[16]), 


Critical Paths under _main in COMMON

    _TXOBC_waddress->_putch
    _ReceivePacket_data->_fcscheck
    _ReceivePacket_data->_waitFlag
    _waitFlag->_getbit
    _getdata->_getbit
    _NM_waddress->_putch
    _Init_I2C_M->___lldiv
    _FMTX->_OUTFQ
    _FMTX->_RFDOUT
    _FMRX->_OUTFQ
    _FMRX->_RFDOUT
    _EEPROM_Write->_I2C_Master_Write
    _CWTX->_OUTFQ
    _CWTX->_RFDOUT
    _RFDOUT->___awdiv
    _OUTFQ->___awdiv
    _OPINIT->_H_OUT
    _OPINIT->_L_OUT
    _OPINIT->_STBOUT
    _STBOUT->__NOP
    _L_OUT->__NOP
    _H_OUT->__NOP

Critical Paths under _main in BANK0

    _main->_CWTX
    _main->_FMRX
    _main->_FMTX
    _ReceivePacket_data->_waitFlag
    _FMTX->_OUTFQ
    _FMRX->_OUTFQ
    _CWTX->_OUTFQ

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0   33224
                                             66 BANK0      4     4      0
                                              0 BANK1     33    33      0
                               _CWTX
                       _EEPROM_Write
                               _FMRX
                               _FMTX
                         _Init_I2C_M
                           _Init_MPU
                        _Init_SERIAL
                        _NM_waddress
                 _ReceivePacket_data
                          _Reset_EPS
                     _TXOBC_waddress
 ---------------------------------------------------------------------------------
 (1) _TXOBC_waddress                                       5     3      2     194
                                              1 COMMON     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _Reset_EPS                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ReceivePacket_data                                   6     6      0    2691
                                             10 COMMON     2     2      0
                                             29 BANK0      4     4      0
                           _fcscheck
                            _getdata
                           _waitFlag
 ---------------------------------------------------------------------------------
 (2) _waitFlag                                            33    33      0    2205
                                              6 COMMON     4     4      0
                                              0 BANK0     29    29      0
                             _getbit
 ---------------------------------------------------------------------------------
 (2) _getdata                                             10    10      0     212
                                              6 COMMON     2     2      0
                                              0 BANK0      7     7      0
                             _getbit
 ---------------------------------------------------------------------------------
 (3) _getbit                                               6     4      2      46
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _fcscheck                                            10     8      2     161
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (1) _NM_waddress                                          3     1      2     194
                                              1 COMMON     3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_SERIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_MPU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_I2C_M                                           8     4      4     343
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _FMTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _FMRX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         8     5      3     739
                                              2 COMMON     8     5      3
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     446
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CWTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (2) _RFDOUT                                              37    33      4    3231
                                              9 COMMON     4     0      4
                                              0 BANK0     33    33      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _OUTFQ                                               64    60      4    3853
                                              9 COMMON     4     0      4
                                              0 BANK0     60    60      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _OPINIT                                               2     0      2    2075
                                              4 COMMON     2     0      2
                              _H_OUT
                              _L_OUT
                             _STBOUT
 ---------------------------------------------------------------------------------
 (3) _STBOUT                                               2     0      2     271
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _L_OUT                                                2     0      2     801
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _H_OUT                                                2     0      2     536
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (4) __NOP                                                 2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CWTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _EEPROM_Write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _FMRX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _FMTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _Init_I2C_M
     ___lldiv
   _Init_MPU
   _Init_SERIAL
   _NM_waddress
     _putch
   _ReceivePacket_data
     _fcscheck
     _getdata
       _getbit
     _waitFlag
       _getbit
   _Reset_EPS
   _TXOBC_waddress
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      5A       9       93.8%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      49      11       76.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     21      48       7       90.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     46      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     149      12        0.0%
ABS                  0      0     149       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Feb 24 21:52:17 2018

                             pc 0002                     __CFG_CP$OFF 0000                              l69 17F1  
                  ___awdiv@sign 0076                              fsr 0004                             l214 0566  
                           l442 0FF1                             l443 0FDC                             l279 0091  
                           l498 0819                             _RA1 0029                             _RB2 0032  
                           _RC2 003A                             _RB4 0034                             _RB5 0035  
                           _RC5 003D                             _PEN 048A                    __CFG_CPD$OFF 0000  
                           _SEN 0488                             _RX9 00C6                             _TX9 04C6  
                           fsr0 0004                             indf 0000                    __CFG_FOSC$HS 0000  
                  __CFG_LVP$OFF 0000                            l3010 0706                            l3020 0721  
                          l3104 0C00                            l3024 072E                            l3130 008A  
                          l3050 0784                            l3212 0293                            l3220 02B7  
                          l3124 0076                            l3132 0038                            l3036 075C  
                          l3230 02E0                            l3206 0205                            l3118 0059  
                          l3046 0777                            l3070 032F                            l3208 020C  
                          l3216 02A4                            l3304 0BE1                            l3144 00A9  
                          l3400 0CB7                            l3234 02FA                            l3226 02C6  
                          l3090 0C31                            l3180 00E8                            l3252 0D65  
                          l3500 0B6C                            l3308 0BEE                            l3084 0C20  
                          l3068 07B0                            l3238 030D                            l3174 00D9  
                          l3246 0D49                            l3502 0B86                            l2550 0ADE  
                          l3094 0C3C                            l3086 0C23                            l2608 0A3A  
                          l3168 00BD                            l3280 0DEE                            l3272 0DBA  
                          l2712 035E                            l2704 0336                            l2634 098E  
                          l2626 097E                            l2650 0AED                            l3186 00F7  
                          l3266 0DAB                            l3258 0D74                            l2802 047F  
                          l2722 0379                            l2706 0355                            l3196 0160  
                          l3276 0DD4                            l3284 0E01                            l2548 0AD1  
                          l2740 03B8                            l3198 019D                            l3294 0BA9  
                          l2806 048C                            l2750 03D3                            l2726 0386  
                          l2568 0A68                            l2656 0AF8                            l3296 0BB9  
                          l2920 05D6                            l2832 04E2                            l3392 0CB1  
                          l2578 0A80                            l2682 0B37                            l2674 0B24  
                          l2666 0B00                            l2906 05AE                            l2818 04BA  
                          l2754 03E0                            l3386 0C89                            l2668 0B0E  
                          l2932 0604                            l2916 05C9                            l2844 0510  
                          l2828 04D5                            l2780 0436                            l2598 0A22  
                          l2678 0B2F                            l2942 061F                            l2854 052B  
                          l2766 040E                            l2792 0464                            l2776 0429  
                          l3816 0FC4                            l2946 062C                            l2882 056F  
                          l2858 0538                            l2972 0682                            l2892 058A  
                          l2876 0564                            l2958 065A                            l3790 0F0D  
                          l3766 0E96                            l2984 06B0                            l2968 0675  
                          l2896 0597                            l2994 06CB                            l3796 0F1E  
                          l2998 06D8                            STR_1 080F                            STR_2 080F  
                          STR_3 080F                            STR_4 080F                            STR_5 080F  
                          STR_6 080F                            STR_7 0808                            STR_8 0808  
                          STR_9 0808                            _BRGH 04C2                            _CREN 00C4  
                          _FERR 00C2                            u2025 0B03                            u2045 0B0F  
                          u3005 0BAD                            u2205 03F5                            u2055 0B1B  
                          u2065 0B25                            u3025 0BBB                            u3035 0BD0  
                          u3045 0BE2                            u2325 04F7                            u2245 044B  
                          u2165 039F                            u3155 09AF                            u2515 0697  
                          u2435 05EB                            u3075 0C87                            u3500 0F52  
                          u2365 054D                            u2285 04A1                            u3085 0CAF  
                          u3510 0F68                            _FMRX 0917                            u1835 0850  
                          u2635 0799                            u2555 06ED                            u2475 0641  
                          _FMTX 0943                            u2805 00F5                            u2735 0046  
                          u3607 0FBD                            u2905 030B                            u1865 0AC1  
                          u3617 0FE7                            u3490 0F3C                            u2915 0D47  
                          u3707 0B91                            u2595 0743                            u3627 0FF9  
                          u3547 0E23                            u2925 0D63                            u3637 09D9  
                          u3557 0E4D                            u2855 02A2                            u2775 00BB  
                          u2935 0D72                            u3647 09E7                            u3567 0EAD  
                          u2865 02B5                            u2785 00D7                            u2945 0DA9  
                          u3657 09F5                            u3577 0ECE                            u2875 02C4  
                          u2795 00E6                            u2955 0DB8                            u3667 0A03  
                          u3587 0EEC                            _RCIE 0465                            _RCEN 048B  
                          _RCIF 0065                            _CWTX 08EB                            u3677 0011  
                          u3597 0F2B                            u3687 0022                            u2985 0DFF  
                          u3697 0AC5                            _OERR 00C1                            _TMR1 000E  
                          _SPEN 00C7                            _RSEN 0489                            _SREN 00C5  
                          _TXIE 0464                            _TXEN 04C5                            _TXIF 0064  
                          _SYNC 04C4                            __NOP 0845  TXOBC_waddress@TXOBC_wad_header 0075  
                  __CFG_WRT$OFF 0000                            _main 0E1B                     _NM_waddress 0833  
                 ??_Init_SERIAL 0070                            btemp 007E                   __CFG_BOREN$ON 0000  
                  getbit@oldbit 00E6                     Init_I2C_M@c 0020                            start 0000  
  ReceivePacket_data@fcschecker 003D                   __CFG_IESO$OFF 0000                   __CFG_MCLRE$ON 0000  
          __end_of_EEPROM_Write 0B99                           ?_FMRX 005C                           ?_FMTX 005C  
                         ?_CWTX 005C                ?_I2C_Master_Wait 0070                ?_I2C_Master_Stop 0070  
                         ?__NOP 0070                           ?_main 0070                           _ACKEN 048C  
                         _ACKDT 048D                 __end_of___awdiv 0B3C                           STR_10 0808  
                         STR_11 0808                           STR_12 0808                   __CFG_WDTE$OFF 0000  
                         _ANSEL 0188                 __end_of___lldiv 0BF7                 ___awdiv@divisor 0070  
       __size_of_TXOBC_waddress 003A                 ___awdiv@counter 0075                           _RCREG 001A  
                         _SPBRG 0099                           _PORTA 0005                           _PORTB 0006  
                         _PORTC 0007                           _PORTD 0008                           _PORTE 0009  
                         _H_OUT 0A0B                           _OUTFQ 00AC                           _TRISA 0085  
                         _TRISB 0086                           _TRISC 0087                           _TRISD 0088  
                         _TRISE 0089                           _L_OUT 0A51                           _TXREG 0019  
                 __CFG_PWRTE$ON 0000                  __CFG_FCMEN$OFF 0000                           _dData 0130  
               __end_of_getdata 0C58                           _eflag 0066                   getdata@dstuff 0022  
                         _putch 17F0                           pclath 000A                           status 0003  
                         wtemp0 007E                      _Init_I2C_M 099D                EEPROM_Write@data 0074  
    __end_of_ReceivePacket_data 0CBD                    __end_of_FMRX 0943                    __end_of_FMTX 096F  
                  __end_of_CWTX 0917                    __end_of__NOP 085A                 __initialization 07B3  
                  __end_of_main 1000             __end_of_Init_SERIAL 0873                __end_of_Init_MPU 08C3  
                        ??_FMRX 007D                          ??_FMTX 007D                          ??_CWTX 007D  
                        ??__NOP 0070                          ??_main 0062                          ?_H_OUT 0072  
      EEPROM_Write@high_address 0072                          ?_OUTFQ 0079                          ?_L_OUT 0072  
             ?_I2C_Master_Start 0070               ?_I2C_Master_Write 0070                          OUTFQ@i 0056  
            ??_I2C_Master_Start 0070                          OUTFQ@j 005A              ??_I2C_Master_Write 0072  
              ___awdiv@dividend 0072                      _eDataField 0140                          ?_putch 0070  
                        _ANSELH 0189                          _RFDOUT 0D3A                          _OPINIT 0CBD  
                        _SSPADD 0093                          _STBOUT 096F                          _STATUS 0003  
                        _SSPCON 0014                          _SSPBUF 0013                          __NOP@i 0070  
              __end_of_fcscheck 00AC                       ??___awdiv 0074                          _dfcshi 006F  
                     ??___lldiv 0078                          _dfcslo 006E                          _efcshi 006C  
                        _efcslo 006D                          _getbit 0A97              __size_of_Reset_EPS 0023  
                        _estuff 00E2                ___awdiv@quotient 0077                      _dPacketnum 0068  
                     ??_getdata 0076                     RFDOUT@i_483 003B                     RFDOUT@i_484 003F  
              __end_of_waitFlag 07B3      EEPROM_Write@EEPROM_address 0078         __end_of__initialization 07FC  
       EEPROM_Write@low_address 0073                     ?_Init_I2C_M 0020                     _Init_SERIAL 085A  
         __size_of_EEPROM_Write 005D                   __end_of_H_OUT 0A51                   __end_of_OUTFQ 0327  
                 __end_of_L_OUT 0A97                   L_OUT@fmcwtxrx 0072                  __pcstackCOMMON 0070  
                  __pidataBANK1 088C                    __pidataBANK2 0873                    __pidataBANK3 08C3  
                 __end_of_putch 17F8                  _TXOBC_waddress 09D1                         ??_H_OUT 0074  
                       ??_OUTFQ 0020                         ??_L_OUT 0074                         ??_putch 0070  
                  _EEPROM_Write 0B3C                      __pbssBANK0 0066                      __pbssBANK1 00DB  
                    __pbssBANK2 0110                      __pbssBANK3 0190               __end_of_Reset_EPS 002A  
                     ?_Init_MPU 0070                         ?_RFDOUT 0079                         ?_OPINIT 0074  
                  ?_NM_waddress 0071                         ?_STBOUT 0072                         RFDOUT@i 003D  
                    __pmaintext 0E1B                      _ebitstatus 00E0                         ?_getbit 0070  
        __end_of_TXOBC_waddress 0A0B     TXOBC_waddress@whigh_address 0071             __size_of_Init_I2C_M 0034  
                     OUTFQ@Nprg 007B                       ?_fcscheck 0070                         _SSPCON2 0091  
                       _SSPSTAT 0094                      __stringtab 0800                      ??_Init_MPU 0070  
               __size_of_RFDOUT 00E1                 __size_of_OPINIT 007D                 __size_of_STBOUT 002E  
                     ?_waitFlag 0070                         _dPacket 0190                         _ePacket 00DB  
                       ___awdiv 0AE3                         ___lldiv 0B99                 __size_of_getbit 004C  
                   waitFlag@buf 003C                 ?_TXOBC_waddress 0071                         __ptext1 09D1  
                       __ptext2 0007                         __ptext3 0C58                         __ptext4 0327  
                       __ptext5 0BF7                         __ptext6 0A97                         __ptext7 002A  
                       __ptext8 0833                         __ptext9 17F0                         _getdata 0BF7  
            _ReceivePacket_data 0C58                       _T1CONbits 0010        __size_of_I2C_Master_Wait 0009  
      __size_of_I2C_Master_Stop 0007                      ??_fcscheck 0072             ?_ReceivePacket_data 0070  
                       getbit@i 0074                         clrloop0 17F9            end_of_initialization 07FC  
                  RFDOUT@Nref_b 0023                       _FMRX_Nref 00C1                       _FMRX_Nprg 01E0  
                     _FMTX_Nref 00C5                       _FMTX_Nprg 00D1                       _CWTX_Nref 00C3  
                     _CWTX_Nprg 00C7                     OUTFQ@Nprg_b 0030       __size_of_I2C_Master_Start 0007  
     __size_of_I2C_Master_Write 0008                 ___lldiv@divisor 0070                 ___lldiv@counter 007D  
                    ??_waitFlag 0076            ??_ReceivePacket_data 007A                      fcscheck@bt 0074  
                OPINIT@fmcwtxrx 0074                       _PORTAbits 0005                       _PORTCbits 0007  
                     _PORTDbits 0008                       _PORTEbits 0009                      getdata@buf 0026  
                  ??_Init_I2C_M 0024                    ?_Init_SERIAL 0070                  __end_of_RFDOUT 0E1B  
                __end_of_OPINIT 0D3A                  __end_of_STBOUT 099D            __size_of_NM_waddress 0012  
                __end_of_getbit 0AE3      TXOBC_waddress@wlow_address 0072             start_initialization 07B3  
            __end_of_Init_I2C_M 09D1                        ??_RFDOUT 0020                        ??_OPINIT 0076  
             ??_I2C_Master_Wait 0070               ??_I2C_Master_Stop 0070                        ??_STBOUT 0074  
             __size_of_Init_MPU 001D                       _Reset_EPS 0007               getdata@dbitstatus 0024  
                    init_fetch0 0822                        ??_getbit 0072                     __pdataBANK1 00C1  
                   __pdataBANK2 0140                     __pdataBANK3 01C2                      RFDOUT@Nref 007B  
           __end_of_commandSize 0808        NM_waddress@whigh_address 0071                       ___latbits 0002  
                 __pcstackBANK0 0020                   __pcstackBANK1 00A0                        FMRX@Nref 005C  
                      FMRX@Nprg 005E                        FMTX@Nref 005C                        FMTX@Nprg 005E  
                      FMRX@fmrx 0060                        FMTX@fmtx 0060                        CWTX@Nref 005C  
                      CWTX@Nprg 005E               __size_of_fcscheck 0082                   waitFlag@j_120 0026  
                 waitFlag@j_122 0028                   waitFlag@j_131 0032                   waitFlag@j_124 002A  
                 waitFlag@j_133 0034                   waitFlag@j_126 002C                   waitFlag@j_118 0024  
                 waitFlag@j_135 0036                   waitFlag@j_127 002E                   waitFlag@j_137 0038  
                 waitFlag@j_129 0030                        CWTX@cwtx 0060                _I2C_Master_Start 17DA  
                    ?_Reset_EPS 0070                _I2C_Master_Write 17E8                ??_TXOBC_waddress 0073  
       getdata@bufstore_counter 0020                        ?___awdiv 0070                        ?___lldiv 0070  
             __size_of_waitFlag 048C                       __pstrings 0800                        ?_getdata 0070  
                __size_of_H_OUT 0046                  __size_of_OUTFQ 027B                  __size_of_L_OUT 0046  
                __size_of_putch 0008                   H_OUT@fmcwtxrx 0072                       clear_ram0 17F8  
                      _PIE1bits 008C                      OUTFQ@i_472 0052                      OUTFQ@i_474 0058  
                     _rcv_state 006A            __size_of_Init_SERIAL 0019                        _PIR1bits 000C  
                    OUTFQ@count 0054                     _commandSize 0806                       fcscheck@i 0075  
                     main@F2013 01D6                       main@F2015 01CC                       main@F2017 01C2  
                   __stringbase 0805                       main@dData 00C0                        _Init_MPU 08A6  
                   ??_Reset_EPS 0070                   fcscheck@i_149 0077     __size_of_ReceivePacket_data 0065  
              __size_of___awdiv 0059                __size_of___lldiv 005E              __end_of__stringtab 0806  
                    _EEPROMData 0110                __size_of_getdata 0061                 _I2C_Master_Wait 0819  
               _I2C_Master_Stop 17E1                  RFDOUT@fmcwtxrx 0079                        _efcsflag 00E4  
                      _fcscheck 002A                        __ptext10 085A                        __ptext11 08A6  
                      __ptext20 0819                        __ptext12 099D                        __ptext21 08EB  
                      __ptext13 0B99                        __ptext22 0D3A                        __ptext14 0943  
                      __ptext23 00AC                        __ptext15 0917                        __ptext24 0AE3  
                      __ptext16 0B3C                        __ptext25 0CBD                        __ptext17 17E8  
                      __ptext26 096F                        __ptext18 17E1                        __ptext27 0A51  
                      __ptext19 17DA                        __ptext28 0A0B                        __ptext29 0845  
             __CFG_BOR4V$BOR21V 0000                   ?_EEPROM_Write 0072                   __size_of_FMRX 002C  
                 __size_of_FMTX 002C                   __size_of_CWTX 002C                   __size_of__NOP 0015  
                 ??_NM_waddress 0073                       waitFlag@i 0020                       waitFlag@j 0022  
                 __size_of_main 01E5                  STBOUT@fmcwtxrx 0072                        _waitFlag 0327  
      NM_waddress@NM_wad_header 0073                   OUTFQ@fmcwtxrx 0079        __end_of_I2C_Master_Start 17E1  
                     putch@byte 0070        __end_of_I2C_Master_Write 17F0                      _INTCONbits 000B  
                      init_ram0 0826                    fcscheck@byte 0079                  ??_EEPROM_Write 0075  
            waitFlag@flag_judge 003A                ___lldiv@dividend 0074                       stringcode 0800  
                 main@FMRX_Nprg 00B4               main@NM_wad_header 00BF                   main@FMTX_Nprg 00A0  
           __end_of_NM_waddress 0845                   main@CWTX_Nprg 00AA         __end_of_I2C_Master_Wait 0822  
       __end_of_I2C_Master_Stop 17E8                ___lldiv@quotient 0079               I2C_Master_Write@d 0070  
           EEPROM_Write@Address 0079                        stringdir 0800                        stringtab 0800  
           ReceivePacket_data@i 003F         NM_waddress@wlow_address 0072            main@TXOBC_wad_header 00BE  
