

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Jun 28 18:36:05 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	dabs	1,0x7E,2
    52  0000                     
    53                           ; Version 1.45
    54                           ; Generated 16/11/2017 GMT
    55                           ; 
    56                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC16LF877A Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     	;# 
    88  0001                     	;# 
    89  0002                     	;# 
    90  0003                     	;# 
    91  0004                     	;# 
    92  0005                     	;# 
    93  0006                     	;# 
    94  0007                     	;# 
    95  0008                     	;# 
    96  0009                     	;# 
    97  000A                     	;# 
    98  000B                     	;# 
    99  000C                     	;# 
   100  000D                     	;# 
   101  000E                     	;# 
   102  000E                     	;# 
   103  000F                     	;# 
   104  0010                     	;# 
   105  0011                     	;# 
   106  0012                     	;# 
   107  0013                     	;# 
   108  0014                     	;# 
   109  0015                     	;# 
   110  0015                     	;# 
   111  0016                     	;# 
   112  0017                     	;# 
   113  0018                     	;# 
   114  0019                     	;# 
   115  001A                     	;# 
   116  001B                     	;# 
   117  001B                     	;# 
   118  001C                     	;# 
   119  001D                     	;# 
   120  001E                     	;# 
   121  001F                     	;# 
   122  0081                     	;# 
   123  0085                     	;# 
   124  0086                     	;# 
   125  0087                     	;# 
   126  0088                     	;# 
   127  0089                     	;# 
   128  008C                     	;# 
   129  008D                     	;# 
   130  008E                     	;# 
   131  0091                     	;# 
   132  0092                     	;# 
   133  0093                     	;# 
   134  0094                     	;# 
   135  0098                     	;# 
   136  0099                     	;# 
   137  009C                     	;# 
   138  009D                     	;# 
   139  009E                     	;# 
   140  009F                     	;# 
   141  010C                     	;# 
   142  010D                     	;# 
   143  010E                     	;# 
   144  010F                     	;# 
   145  018C                     	;# 
   146  018D                     	;# 
   147  0000                     	;# 
   148  0001                     	;# 
   149  0002                     	;# 
   150  0003                     	;# 
   151  0004                     	;# 
   152  0005                     	;# 
   153  0006                     	;# 
   154  0007                     	;# 
   155  0008                     	;# 
   156  0009                     	;# 
   157  000A                     	;# 
   158  000B                     	;# 
   159  000C                     	;# 
   160  000D                     	;# 
   161  000E                     	;# 
   162  000E                     	;# 
   163  000F                     	;# 
   164  0010                     	;# 
   165  0011                     	;# 
   166  0012                     	;# 
   167  0013                     	;# 
   168  0014                     	;# 
   169  0015                     	;# 
   170  0015                     	;# 
   171  0016                     	;# 
   172  0017                     	;# 
   173  0018                     	;# 
   174  0019                     	;# 
   175  001A                     	;# 
   176  001B                     	;# 
   177  001B                     	;# 
   178  001C                     	;# 
   179  001D                     	;# 
   180  001E                     	;# 
   181  001F                     	;# 
   182  0081                     	;# 
   183  0085                     	;# 
   184  0086                     	;# 
   185  0087                     	;# 
   186  0088                     	;# 
   187  0089                     	;# 
   188  008C                     	;# 
   189  008D                     	;# 
   190  008E                     	;# 
   191  0091                     	;# 
   192  0092                     	;# 
   193  0093                     	;# 
   194  0094                     	;# 
   195  0098                     	;# 
   196  0099                     	;# 
   197  009C                     	;# 
   198  009D                     	;# 
   199  009E                     	;# 
   200  009F                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  010F                     	;# 
   205  018C                     	;# 
   206  018D                     	;# 
   207  0000                     	;# 
   208  0001                     	;# 
   209  0002                     	;# 
   210  0003                     	;# 
   211  0004                     	;# 
   212  0005                     	;# 
   213  0006                     	;# 
   214  0007                     	;# 
   215  0008                     	;# 
   216  0009                     	;# 
   217  000A                     	;# 
   218  000B                     	;# 
   219  000C                     	;# 
   220  000D                     	;# 
   221  000E                     	;# 
   222  000E                     	;# 
   223  000F                     	;# 
   224  0010                     	;# 
   225  0011                     	;# 
   226  0012                     	;# 
   227  0013                     	;# 
   228  0014                     	;# 
   229  0015                     	;# 
   230  0015                     	;# 
   231  0016                     	;# 
   232  0017                     	;# 
   233  0018                     	;# 
   234  0019                     	;# 
   235  001A                     	;# 
   236  001B                     	;# 
   237  001B                     	;# 
   238  001C                     	;# 
   239  001D                     	;# 
   240  001E                     	;# 
   241  001F                     	;# 
   242  0081                     	;# 
   243  0085                     	;# 
   244  0086                     	;# 
   245  0087                     	;# 
   246  0088                     	;# 
   247  0089                     	;# 
   248  008C                     	;# 
   249  008D                     	;# 
   250  008E                     	;# 
   251  0091                     	;# 
   252  0092                     	;# 
   253  0093                     	;# 
   254  0094                     	;# 
   255  0098                     	;# 
   256  0099                     	;# 
   257  009C                     	;# 
   258  009D                     	;# 
   259  009E                     	;# 
   260  009F                     	;# 
   261  010C                     	;# 
   262  010D                     	;# 
   263  010E                     	;# 
   264  010F                     	;# 
   265  018C                     	;# 
   266  018D                     	;# 
   267  0000                     	;# 
   268  0001                     	;# 
   269  0002                     	;# 
   270  0003                     	;# 
   271  0004                     	;# 
   272  0005                     	;# 
   273  0006                     	;# 
   274  0007                     	;# 
   275  0008                     	;# 
   276  0009                     	;# 
   277  000A                     	;# 
   278  000B                     	;# 
   279  000C                     	;# 
   280  000D                     	;# 
   281  000E                     	;# 
   282  000E                     	;# 
   283  000F                     	;# 
   284  0010                     	;# 
   285  0011                     	;# 
   286  0012                     	;# 
   287  0013                     	;# 
   288  0014                     	;# 
   289  0015                     	;# 
   290  0015                     	;# 
   291  0016                     	;# 
   292  0017                     	;# 
   293  0018                     	;# 
   294  0019                     	;# 
   295  001A                     	;# 
   296  001B                     	;# 
   297  001B                     	;# 
   298  001C                     	;# 
   299  001D                     	;# 
   300  001E                     	;# 
   301  001F                     	;# 
   302  0081                     	;# 
   303  0085                     	;# 
   304  0086                     	;# 
   305  0087                     	;# 
   306  0088                     	;# 
   307  0089                     	;# 
   308  008C                     	;# 
   309  008D                     	;# 
   310  008E                     	;# 
   311  0091                     	;# 
   312  0092                     	;# 
   313  0093                     	;# 
   314  0094                     	;# 
   315  0098                     	;# 
   316  0099                     	;# 
   317  009C                     	;# 
   318  009D                     	;# 
   319  009E                     	;# 
   320  009F                     	;# 
   321  010C                     	;# 
   322  010D                     	;# 
   323  010E                     	;# 
   324  010F                     	;# 
   325  018C                     	;# 
   326  018D                     	;# 
   327  0000                     	;# 
   328  0001                     	;# 
   329  0002                     	;# 
   330  0003                     	;# 
   331  0004                     	;# 
   332  0005                     	;# 
   333  0006                     	;# 
   334  0007                     	;# 
   335  0008                     	;# 
   336  0009                     	;# 
   337  000A                     	;# 
   338  000B                     	;# 
   339  000C                     	;# 
   340  000D                     	;# 
   341  000E                     	;# 
   342  000E                     	;# 
   343  000F                     	;# 
   344  0010                     	;# 
   345  0011                     	;# 
   346  0012                     	;# 
   347  0013                     	;# 
   348  0014                     	;# 
   349  0015                     	;# 
   350  0015                     	;# 
   351  0016                     	;# 
   352  0017                     	;# 
   353  0018                     	;# 
   354  0019                     	;# 
   355  001A                     	;# 
   356  001B                     	;# 
   357  001B                     	;# 
   358  001C                     	;# 
   359  001D                     	;# 
   360  001E                     	;# 
   361  001F                     	;# 
   362  0081                     	;# 
   363  0085                     	;# 
   364  0086                     	;# 
   365  0087                     	;# 
   366  0088                     	;# 
   367  0089                     	;# 
   368  008C                     	;# 
   369  008D                     	;# 
   370  008E                     	;# 
   371  0091                     	;# 
   372  0092                     	;# 
   373  0093                     	;# 
   374  0094                     	;# 
   375  0098                     	;# 
   376  0099                     	;# 
   377  009C                     	;# 
   378  009D                     	;# 
   379  009E                     	;# 
   380  009F                     	;# 
   381  010C                     	;# 
   382  010D                     	;# 
   383  010E                     	;# 
   384  010F                     	;# 
   385  018C                     	;# 
   386  018D                     	;# 
   387  0000                     	;# 
   388  0001                     	;# 
   389  0002                     	;# 
   390  0003                     	;# 
   391  0004                     	;# 
   392  0005                     	;# 
   393  0006                     	;# 
   394  0007                     	;# 
   395  0008                     	;# 
   396  0009                     	;# 
   397  000A                     	;# 
   398  000B                     	;# 
   399  000C                     	;# 
   400  000D                     	;# 
   401  000E                     	;# 
   402  000E                     	;# 
   403  000F                     	;# 
   404  0010                     	;# 
   405  0011                     	;# 
   406  0012                     	;# 
   407  0013                     	;# 
   408  0014                     	;# 
   409  0015                     	;# 
   410  0015                     	;# 
   411  0016                     	;# 
   412  0017                     	;# 
   413  0018                     	;# 
   414  0019                     	;# 
   415  001A                     	;# 
   416  001B                     	;# 
   417  001B                     	;# 
   418  001C                     	;# 
   419  001D                     	;# 
   420  001E                     	;# 
   421  001F                     	;# 
   422  0081                     	;# 
   423  0085                     	;# 
   424  0086                     	;# 
   425  0087                     	;# 
   426  0088                     	;# 
   427  0089                     	;# 
   428  008C                     	;# 
   429  008D                     	;# 
   430  008E                     	;# 
   431  0091                     	;# 
   432  0092                     	;# 
   433  0093                     	;# 
   434  0094                     	;# 
   435  0098                     	;# 
   436  0099                     	;# 
   437  009C                     	;# 
   438  009D                     	;# 
   439  009E                     	;# 
   440  009F                     	;# 
   441  010C                     	;# 
   442  010D                     	;# 
   443  010E                     	;# 
   444  010F                     	;# 
   445  018C                     	;# 
   446  018D                     	;# 
   447  0000                     	;# 
   448  0001                     	;# 
   449  0002                     	;# 
   450  0003                     	;# 
   451  0004                     	;# 
   452  0005                     	;# 
   453  0006                     	;# 
   454  0007                     	;# 
   455  0008                     	;# 
   456  0009                     	;# 
   457  000A                     	;# 
   458  000B                     	;# 
   459  000C                     	;# 
   460  000D                     	;# 
   461  000E                     	;# 
   462  000E                     	;# 
   463  000F                     	;# 
   464  0010                     	;# 
   465  0011                     	;# 
   466  0012                     	;# 
   467  0013                     	;# 
   468  0014                     	;# 
   469  0015                     	;# 
   470  0015                     	;# 
   471  0016                     	;# 
   472  0017                     	;# 
   473  0018                     	;# 
   474  0019                     	;# 
   475  001A                     	;# 
   476  001B                     	;# 
   477  001B                     	;# 
   478  001C                     	;# 
   479  001D                     	;# 
   480  001E                     	;# 
   481  001F                     	;# 
   482  0081                     	;# 
   483  0085                     	;# 
   484  0086                     	;# 
   485  0087                     	;# 
   486  0088                     	;# 
   487  0089                     	;# 
   488  008C                     	;# 
   489  008D                     	;# 
   490  008E                     	;# 
   491  0091                     	;# 
   492  0092                     	;# 
   493  0093                     	;# 
   494  0094                     	;# 
   495  0098                     	;# 
   496  0099                     	;# 
   497  009C                     	;# 
   498  009D                     	;# 
   499  009E                     	;# 
   500  009F                     	;# 
   501  010C                     	;# 
   502  010D                     	;# 
   503  010E                     	;# 
   504  010F                     	;# 
   505  018C                     	;# 
   506  018D                     	;# 
   507  0000                     	;# 
   508  0001                     	;# 
   509  0002                     	;# 
   510  0003                     	;# 
   511  0004                     	;# 
   512  0005                     	;# 
   513  0006                     	;# 
   514  0007                     	;# 
   515  0008                     	;# 
   516  0009                     	;# 
   517  000A                     	;# 
   518  000B                     	;# 
   519  000C                     	;# 
   520  000D                     	;# 
   521  000E                     	;# 
   522  000E                     	;# 
   523  000F                     	;# 
   524  0010                     	;# 
   525  0011                     	;# 
   526  0012                     	;# 
   527  0013                     	;# 
   528  0014                     	;# 
   529  0015                     	;# 
   530  0015                     	;# 
   531  0016                     	;# 
   532  0017                     	;# 
   533  0018                     	;# 
   534  0019                     	;# 
   535  001A                     	;# 
   536  001B                     	;# 
   537  001B                     	;# 
   538  001C                     	;# 
   539  001D                     	;# 
   540  001E                     	;# 
   541  001F                     	;# 
   542  0081                     	;# 
   543  0085                     	;# 
   544  0086                     	;# 
   545  0087                     	;# 
   546  0088                     	;# 
   547  0089                     	;# 
   548  008C                     	;# 
   549  008D                     	;# 
   550  008E                     	;# 
   551  0091                     	;# 
   552  0092                     	;# 
   553  0093                     	;# 
   554  0094                     	;# 
   555  0098                     	;# 
   556  0099                     	;# 
   557  009C                     	;# 
   558  009D                     	;# 
   559  009E                     	;# 
   560  009F                     	;# 
   561  010C                     	;# 
   562  010D                     	;# 
   563  010E                     	;# 
   564  010F                     	;# 
   565  018C                     	;# 
   566  018D                     	;# 
   567  0000                     	;# 
   568  0001                     	;# 
   569  0002                     	;# 
   570  0003                     	;# 
   571  0004                     	;# 
   572  0005                     	;# 
   573  0006                     	;# 
   574  0007                     	;# 
   575  0008                     	;# 
   576  0009                     	;# 
   577  000A                     	;# 
   578  000B                     	;# 
   579  000C                     	;# 
   580  000D                     	;# 
   581  000E                     	;# 
   582  000E                     	;# 
   583  000F                     	;# 
   584  0010                     	;# 
   585  0011                     	;# 
   586  0012                     	;# 
   587  0013                     	;# 
   588  0014                     	;# 
   589  0015                     	;# 
   590  0015                     	;# 
   591  0016                     	;# 
   592  0017                     	;# 
   593  0018                     	;# 
   594  0019                     	;# 
   595  001A                     	;# 
   596  001B                     	;# 
   597  001B                     	;# 
   598  001C                     	;# 
   599  001D                     	;# 
   600  001E                     	;# 
   601  001F                     	;# 
   602  0081                     	;# 
   603  0085                     	;# 
   604  0086                     	;# 
   605  0087                     	;# 
   606  0088                     	;# 
   607  0089                     	;# 
   608  008C                     	;# 
   609  008D                     	;# 
   610  008E                     	;# 
   611  0091                     	;# 
   612  0092                     	;# 
   613  0093                     	;# 
   614  0094                     	;# 
   615  0098                     	;# 
   616  0099                     	;# 
   617  009C                     	;# 
   618  009D                     	;# 
   619  009E                     	;# 
   620  009F                     	;# 
   621  010C                     	;# 
   622  010D                     	;# 
   623  010E                     	;# 
   624  010F                     	;# 
   625  018C                     	;# 
   626  018D                     	;# 
   627  0000                     	;# 
   628  0001                     	;# 
   629  0002                     	;# 
   630  0003                     	;# 
   631  0004                     	;# 
   632  0005                     	;# 
   633  0006                     	;# 
   634  0007                     	;# 
   635  0008                     	;# 
   636  0009                     	;# 
   637  000A                     	;# 
   638  000B                     	;# 
   639  000C                     	;# 
   640  000D                     	;# 
   641  000E                     	;# 
   642  000E                     	;# 
   643  000F                     	;# 
   644  0010                     	;# 
   645  0011                     	;# 
   646  0012                     	;# 
   647  0013                     	;# 
   648  0014                     	;# 
   649  0015                     	;# 
   650  0015                     	;# 
   651  0016                     	;# 
   652  0017                     	;# 
   653  0018                     	;# 
   654  0019                     	;# 
   655  001A                     	;# 
   656  001B                     	;# 
   657  001B                     	;# 
   658  001C                     	;# 
   659  001D                     	;# 
   660  001E                     	;# 
   661  001F                     	;# 
   662  0081                     	;# 
   663  0085                     	;# 
   664  0086                     	;# 
   665  0087                     	;# 
   666  0088                     	;# 
   667  0089                     	;# 
   668  008C                     	;# 
   669  008D                     	;# 
   670  008E                     	;# 
   671  0091                     	;# 
   672  0092                     	;# 
   673  0093                     	;# 
   674  0094                     	;# 
   675  0098                     	;# 
   676  0099                     	;# 
   677  009C                     	;# 
   678  009D                     	;# 
   679  009E                     	;# 
   680  009F                     	;# 
   681  010C                     	;# 
   682  010D                     	;# 
   683  010E                     	;# 
   684  010F                     	;# 
   685  018C                     	;# 
   686  018D                     	;# 
   687                           
   688                           	psect	idataBANK1
   689  0898                     __pidataBANK1:	
   690                           
   691                           ;initializer for _FMRX_Nref
   692  0898  3400               	retlw	0
   693  0899  340A               	retlw	10
   694                           
   695                           ;initializer for _CWTX_Nref
   696  089A  34A0               	retlw	160
   697  089B  3400               	retlw	0
   698                           
   699                           ;initializer for _FMTX_Nref
   700  089C  3400               	retlw	0
   701  089D  340A               	retlw	10
   702                           
   703                           ;initializer for _CWTX_Nprg
   704  089E  3400               	retlw	0
   705  089F  3400               	retlw	0
   706  08A0  3401               	retlw	1
   707  08A1  3400               	retlw	0
   708  08A2  3407               	retlw	7
   709  08A3  3400               	retlw	0
   710  08A4  3404               	retlw	4
   711  08A5  3400               	retlw	0
   712  08A6  3407               	retlw	7
   713  08A7  3400               	retlw	0
   714                           
   715                           ;initializer for _FMTX_Nprg
   716  08A8  3408               	retlw	8
   717  08A9  3400               	retlw	0
   718  08AA  3407               	retlw	7
   719  08AB  3400               	retlw	0
   720  08AC  3403               	retlw	3
   721  08AD  3400               	retlw	0
   722  08AE  3400               	retlw	0
   723  08AF  3400               	retlw	0
   724  08B0  3400               	retlw	0
   725  08B1  3400               	retlw	0
   726                           
   727                           	psect	idataBANK2
   728  087F                     __pidataBANK2:	
   729                           
   730                           ;initializer for _eDataField
   731  087F  3448               	retlw	72
   732  0880  3465               	retlw	101
   733  0881  346C               	retlw	108
   734  0882  346C               	retlw	108
   735  0883  346F               	retlw	111
   736  0884  3421               	retlw	33
   737  0885  3420               	retlw	32
   738  0886  3449               	retlw	73
   739  0887  3427               	retlw	39
   740  0888  346D               	retlw	109
   741  0889  3420               	retlw	32
   742  088A  344F               	retlw	79
   743  088B  3472               	retlw	114
   744  088C  3469               	retlw	105
   745  088D  3467               	retlw	103
   746  088E  3461               	retlw	97
   747  088F  346D               	retlw	109
   748  0890  3469               	retlw	105
   749  0891  3453               	retlw	83
   750  0892  3461               	retlw	97
   751  0893  3474               	retlw	116
   752  0894  3431               	retlw	49
   753  0895  3421               	retlw	33
   754  0896  3421               	retlw	33
   755  0897  3400               	retlw	0
   756                           
   757                           	psect	idataBANK3
   758  08B2                     __pidataBANK3:	
   759                           
   760                           ;initializer for main@F1465
   761  08B2  3402               	retlw	2
   762  08B3  3400               	retlw	0
   763  08B4  3404               	retlw	4
   764  08B5  3400               	retlw	0
   765  08B6  3408               	retlw	8
   766  08B7  3400               	retlw	0
   767  08B8  3408               	retlw	8
   768  08B9  3400               	retlw	0
   769  08BA  3407               	retlw	7
   770  08BB  3400               	retlw	0
   771                           
   772                           ;initializer for main@F1463
   773  08BC  3400               	retlw	0
   774  08BD  3400               	retlw	0
   775  08BE  3401               	retlw	1
   776  08BF  3400               	retlw	0
   777  08C0  3407               	retlw	7
   778  08C1  3400               	retlw	0
   779  08C2  3404               	retlw	4
   780  08C3  3400               	retlw	0
   781  08C4  3407               	retlw	7
   782  08C5  3400               	retlw	0
   783                           
   784                           ;initializer for main@F1461
   785  08C6  3408               	retlw	8
   786  08C7  3400               	retlw	0
   787  08C8  3407               	retlw	7
   788  08C9  3400               	retlw	0
   789  08CA  3403               	retlw	3
   790  08CB  3400               	retlw	0
   791  08CC  3400               	retlw	0
   792  08CD  3400               	retlw	0
   793  08CE  3400               	retlw	0
   794  08CF  3400               	retlw	0
   795                           
   796                           ;initializer for _FMRX_Nprg
   797  08D0  3402               	retlw	2
   798  08D1  3400               	retlw	0
   799  08D2  3404               	retlw	4
   800  08D3  3400               	retlw	0
   801  08D4  3408               	retlw	8
   802  08D5  3400               	retlw	0
   803  08D6  3408               	retlw	8
   804  08D7  3400               	retlw	0
   805  08D8  3407               	retlw	7
   806  08D9  3400               	retlw	0
   807                           
   808                           	psect	strings
   809  0800                     __pstrings:	
   810  0800                     stringtab:	
   811  0800                     __stringtab:	
   812  0800                     stringcode:	
   813                           ;	String table - string pointers are 1 byte each
   814                           
   815  0800                     stringdir:	
   816  0800  3008               	movlw	high stringdir
   817  0801  008A               	movwf	10
   818  0802  0804               	movf	4,w
   819  0803  0A84               	incf	4,f
   820  0804  0782               	addwf	2,f
   821  0805                     __stringbase:	
   822  0805  3400               	retlw	0
   823  0806                     __end_of__stringtab:	
   824  0806                     _commandSize:	
   825  0806  3420               	retlw	32
   826  0807  3400               	retlw	0
   827  0808                     __end_of_commandSize:	
   828  000E                     _TMR1	set	14
   829  0010                     _T1CONbits	set	16
   830  000C                     _PIR1bits	set	12
   831  000B                     _INTCONbits	set	11
   832  0008                     _PORTDbits	set	8
   833  0007                     _PORTCbits	set	7
   834  0009                     _PORTEbits	set	9
   835  0006                     _PORTBbits	set	6
   836  0005                     _PORTAbits	set	5
   837  0013                     _SSPBUF	set	19
   838  0014                     _SSPCON	set	20
   839  0003                     _STATUS	set	3
   840  0009                     _PORTE	set	9
   841  0008                     _PORTD	set	8
   842  0007                     _PORTC	set	7
   843  0006                     _PORTB	set	6
   844  0005                     _PORTA	set	5
   845  0019                     _TXREG	set	25
   846  001A                     _RCREG	set	26
   847  0029                     _RA1	set	41
   848  0034                     _RB4	set	52
   849  0033                     _RB3	set	51
   850  0031                     _RB1	set	49
   851  0032                     _RB2	set	50
   852  0035                     _RB5	set	53
   853  003A                     _RC2	set	58
   854  003D                     _RC5	set	61
   855  0064                     _TXIF	set	100
   856  00C1                     _OERR	set	193
   857  00C2                     _FERR	set	194
   858  00C6                     _RX9	set	198
   859  0065                     _RCIF	set	101
   860  00C5                     _SREN	set	197
   861  00C4                     _CREN	set	196
   862  00C7                     _SPEN	set	199
   863  008C                     _PIE1bits	set	140
   864  0094                     _SSPSTAT	set	148
   865  0093                     _SSPADD	set	147
   866  0091                     _SSPCON2	set	145
   867  0089                     _TRISE	set	137
   868  0088                     _TRISD	set	136
   869  0087                     _TRISC	set	135
   870  0086                     _TRISB	set	134
   871  0085                     _TRISA	set	133
   872  0099                     _SPBRG	set	153
   873  048C                     _ACKEN	set	1164
   874  048D                     _ACKDT	set	1165
   875  048B                     _RCEN	set	1163
   876  048A                     _PEN	set	1162
   877  0489                     _RSEN	set	1161
   878  0488                     _SEN	set	1160
   879  04C5                     _TXEN	set	1221
   880  04C6                     _TX9	set	1222
   881  0465                     _RCIE	set	1125
   882  0464                     _TXIE	set	1124
   883  04C4                     _SYNC	set	1220
   884  04C2                     _BRGH	set	1218
   885  0808                     STR_7:	
   886  0808  344A               	retlw	74	;'J'
   887  0809  3451               	retlw	81	;'Q'
   888  080A  3431               	retlw	49	;'1'
   889  080B  345A               	retlw	90	;'Z'
   890  080C  3448               	retlw	72	;'H'
   891  080D  3458               	retlw	88	;'X'
   892  080E  3400               	retlw	0
   893  080F                     STR_1:	
   894  080F  344A               	retlw	74	;'J'
   895  0810  3451               	retlw	81	;'Q'
   896  0811  3431               	retlw	49	;'1'
   897  0812  3459               	retlw	89	;'Y'
   898  0813  3443               	retlw	67	;'C'
   899  0814  345A               	retlw	90	;'Z'
   900  0815  3400               	retlw	0
   901  0808                     
   902                           ; #config settings
   903  0000                     
   904                           	psect	cinit
   905  07B3                     start_initialization:	
   906  07B3                     __initialization:	
   907                           
   908                           ; Initialize objects allocated to BANK3
   909  07B3  1783               	bsf	3,7	;select IRP bank2
   910  07B4  30EC               	movlw	low (__pdataBANK3+40)
   911  07B5  00FD               	movwf	btemp+-1
   912  07B6  3008               	movlw	high __pidataBANK3
   913  07B7  00FE               	movwf	btemp
   914  07B8  30B2               	movlw	low __pidataBANK3
   915  07B9  00FF               	movwf	btemp+1
   916  07BA  30C4               	movlw	low __pdataBANK3
   917  07BB  0084               	movwf	4
   918  07BC  160A  118A  27F3  120A  118A  	fcall	init_ram0
   919                           
   920                           ; Initialize objects allocated to BANK2
   921  07C1  3049               	movlw	low (__pdataBANK2+25)
   922  07C2  00FD               	movwf	btemp+-1
   923  07C3  3008               	movlw	high __pidataBANK2
   924  07C4  00FE               	movwf	btemp
   925  07C5  307F               	movlw	low __pidataBANK2
   926  07C6  00FF               	movwf	btemp+1
   927  07C7  3030               	movlw	low __pdataBANK2
   928  07C8  0084               	movwf	4
   929  07C9  160A  118A  27F3  120A  118A  	fcall	init_ram0
   930                           
   931                           ; Initialize objects allocated to BANK1
   932  07CE  1383               	bcf	3,7	;select IRP bank0
   933  07CF  30DB               	movlw	low (__pdataBANK1+26)
   934  07D0  00FD               	movwf	btemp+-1
   935  07D1  3008               	movlw	high __pidataBANK1
   936  07D2  00FE               	movwf	btemp
   937  07D3  3098               	movlw	low __pidataBANK1
   938  07D4  00FF               	movwf	btemp+1
   939  07D5  30C1               	movlw	low __pdataBANK1
   940  07D6  0084               	movwf	4
   941  07D7  160A  118A  27F3  120A  118A  	fcall	init_ram0
   942                           
   943                           ; Clear objects allocated to BANK3
   944  07DC  1783               	bsf	3,7	;select IRP bank2
   945  07DD  3090               	movlw	low __pbssBANK3
   946  07DE  0084               	movwf	4
   947  07DF  30C4               	movlw	low (__pbssBANK3+52)
   948  07E0  160A  118A  27E7  120A  118A  	fcall	clear_ram0
   949                           
   950                           ; Clear objects allocated to BANK2
   951  07E5  3010               	movlw	low __pbssBANK2
   952  07E6  0084               	movwf	4
   953  07E7  3030               	movlw	low (__pbssBANK2+32)
   954  07E8  160A  118A  27E7  120A  118A  	fcall	clear_ram0
   955                           
   956                           ; Clear objects allocated to BANK1
   957  07ED  1383               	bcf	3,7	;select IRP bank0
   958  07EE  30DB               	movlw	low __pbssBANK1
   959  07EF  0084               	movwf	4
   960  07F0  30E8               	movlw	low (__pbssBANK1+13)
   961  07F1  160A  118A  27E7  120A  118A  	fcall	clear_ram0
   962                           
   963                           ; Clear objects allocated to BANK0
   964  07F6  3066               	movlw	low __pbssBANK0
   965  07F7  0084               	movwf	4
   966  07F8  3070               	movlw	low (__pbssBANK0+10)
   967  07F9  160A  118A  27E7   	fcall	clear_ram0
   968  07FC                     end_of_initialization:	
   969                           ;End of C runtime variable initialization code
   970                           
   971  07FC                     __end_of__initialization:	
   972  07FC  0183               	clrf	3
   973  07FD  120A  158A  2E0A   	ljmp	_main	;jump to C main() function
   974                           
   975                           	psect	bssBANK0
   976  0066                     __pbssBANK0:	
   977  0066                     _eflag:	
   978  0066                     	ds	2
   979  0068                     _dPacketnum:	
   980  0068                     	ds	2
   981  006A                     _rcv_state:	
   982  006A                     	ds	2
   983  006C                     _efcshi:	
   984  006C                     	ds	1
   985  006D                     _efcslo:	
   986  006D                     	ds	1
   987  006E                     _dfcslo:	
   988  006E                     	ds	1
   989  006F                     _dfcshi:	
   990  006F                     	ds	1
   991                           
   992                           	psect	bssBANK1
   993  00DB                     __pbssBANK1:	
   994  00DB                     _ePacket:	
   995  00DB                     	ds	5
   996  00E0                     _ebitstatus:	
   997  00E0                     	ds	2
   998  00E2                     _estuff:	
   999  00E2                     	ds	2
  1000  00E4                     _efcsflag:	
  1001  00E4                     	ds	2
  1002  00E6                     getbit@oldbit:	
  1003  00E6                     	ds	2
  1004                           
  1005                           	psect	dataBANK1
  1006  00C1                     __pdataBANK1:	
  1007  00C1                     _FMRX_Nref:	
  1008  00C1                     	ds	2
  1009  00C3                     _CWTX_Nref:	
  1010  00C3                     	ds	2
  1011  00C5                     _FMTX_Nref:	
  1012  00C5                     	ds	2
  1013  00C7                     _CWTX_Nprg:	
  1014  00C7                     	ds	10
  1015  00D1                     _FMTX_Nprg:	
  1016  00D1                     	ds	10
  1017                           
  1018                           	psect	bssBANK3
  1019  0190                     __pbssBANK3:	
  1020  0190                     _dPacket:	
  1021  0190                     	ds	52
  1022                           
  1023                           	psect	dataBANK3
  1024  01C4                     __pdataBANK3:	
  1025  01C4                     main@F1465:	
  1026  01C4                     	ds	10
  1027  01CE                     main@F1463:	
  1028  01CE                     	ds	10
  1029  01D8                     main@F1461:	
  1030  01D8                     	ds	10
  1031  01E2                     _FMRX_Nprg:	
  1032  01E2                     	ds	10
  1033                           
  1034                           	psect	bssBANK2
  1035  0110                     __pbssBANK2:	
  1036  0110                     _dData:	
  1037  0110                     	ds	32
  1038                           
  1039                           	psect	dataBANK2
  1040  0130                     __pdataBANK2:	
  1041  0130                     _eDataField:	
  1042  0130                     	ds	25
  1043                           
  1044                           	psect	inittext
  1045  17EF                     init_fetch0:	
  1046                           ;	Called with low address in FSR and high address in W
  1047                           
  1048  17EF  087E               	movf	126,w
  1049  17F0  008A               	movwf	10
  1050  17F1  087F               	movf	127,w
  1051  17F2  0082               	movwf	2
  1052  17F3                     init_ram0:	
  1053                           ;Called with:
  1054                           ;	high address of idata address in btemp 
  1055                           ;	low address of idata address in btemp+1 
  1056                           ;	low address of data in FSR
  1057                           ;	high address + 1 of data in btemp-1
  1058                           
  1059  17F3  27EF  160A  118A   	fcall	init_fetch0
  1060  17F6  0080               	movwf	0
  1061  17F7  0A84               	incf	4,f
  1062  17F8  0804               	movf	4,w
  1063  17F9  067D               	xorwf	125,w
  1064  17FA  1903               	btfsc	3,2
  1065  17FB  3400               	retlw	0
  1066  17FC  0AFF               	incf	127,f
  1067  17FD  1903               	btfsc	3,2
  1068  17FE  0AFE               	incf	126,f
  1069  17FF  2FF3               	goto	init_ram0
  1070                           
  1071                           	psect	clrtext
  1072  17E7                     clear_ram0:	
  1073                           ;	Called with FSR containing the base address, and
  1074                           ;	W with the last address+1
  1075                           
  1076  17E7  0064               	clrwdt	;clear the watchdog before getting into this loop
  1077  17E8                     clrloop0:	
  1078  17E8  0180               	clrf	0	;clear RAM location pointed to by FSR
  1079  17E9  0A84               	incf	4,f	;increment pointer
  1080  17EA  0604               	xorwf	4,w	;XOR with final address
  1081  17EB  1903               	btfsc	3,2	;have we reached the end yet?
  1082  17EC  3400               	retlw	0	;all done for this memory range, return
  1083  17ED  0604               	xorwf	4,w	;XOR again to restore value
  1084  17EE  2FE8               	goto	clrloop0	;do the next byte
  1085                           
  1086                           	psect	cstackBANK1
  1087  00A0                     __pcstackBANK1:	
  1088  00A0                     main@FMTX_Nprg:	
  1089                           
  1090                           ; 10 bytes @ 0x0
  1091  00A0                     	ds	10
  1092  00AA                     main@CWTX_Nprg:	
  1093                           
  1094                           ; 10 bytes @ 0xA
  1095  00AA                     	ds	10
  1096  00B4                     main@FMRX_Nprg:	
  1097                           
  1098                           ; 10 bytes @ 0x14
  1099  00B4                     	ds	10
  1100  00BE                     main@TXOBC_wad_header:	
  1101                           
  1102                           ; 1 bytes @ 0x1E
  1103  00BE                     	ds	1
  1104  00BF                     main@NM_wad_header:	
  1105                           
  1106                           ; 1 bytes @ 0x1F
  1107  00BF                     	ds	1
  1108  00C0                     main@dData:	
  1109                           
  1110                           ; 1 bytes @ 0x20
  1111  00C0                     	ds	1
  1112                           
  1113                           	psect	cstackCOMMON
  1114  0070                     __pcstackCOMMON:	
  1115  0070                     ?_ReceivePacket_data:	
  1116  0070                     ?_Reset_EPS:	
  1117                           ; 1 bytes @ 0x0
  1118                           
  1119  0070                     ??_Reset_EPS:	
  1120                           ; 1 bytes @ 0x0
  1121                           
  1122  0070                     ?__NOP:	
  1123                           ; 1 bytes @ 0x0
  1124                           
  1125  0070                     ??__NOP:	
  1126                           ; 1 bytes @ 0x0
  1127                           
  1128  0070                     ?_Init_SERIAL:	
  1129                           ; 1 bytes @ 0x0
  1130                           
  1131  0070                     ??_Init_SERIAL:	
  1132                           ; 1 bytes @ 0x0
  1133                           
  1134  0070                     ?_putch:	
  1135                           ; 1 bytes @ 0x0
  1136                           
  1137  0070                     ??_putch:	
  1138                           ; 1 bytes @ 0x0
  1139                           
  1140  0070                     ?_Init_MPU:	
  1141                           ; 1 bytes @ 0x0
  1142                           
  1143  0070                     ??_Init_MPU:	
  1144                           ; 1 bytes @ 0x0
  1145                           
  1146  0070                     ?_waitFlag:	
  1147                           ; 1 bytes @ 0x0
  1148                           
  1149  0070                     ?_getdata:	
  1150                           ; 1 bytes @ 0x0
  1151                           
  1152  0070                     ?_main:	
  1153                           ; 1 bytes @ 0x0
  1154                           
  1155  0070                     ?_I2C_Master_Wait:	
  1156                           ; 1 bytes @ 0x0
  1157                           
  1158  0070                     ??_I2C_Master_Wait:	
  1159                           ; 1 bytes @ 0x0
  1160                           
  1161  0070                     ?_I2C_Master_Start:	
  1162                           ; 1 bytes @ 0x0
  1163                           
  1164  0070                     ??_I2C_Master_Start:	
  1165                           ; 1 bytes @ 0x0
  1166                           
  1167  0070                     ?_I2C_Master_Stop:	
  1168                           ; 1 bytes @ 0x0
  1169                           
  1170  0070                     ??_I2C_Master_Stop:	
  1171                           ; 1 bytes @ 0x0
  1172                           
  1173  0070                     ?_I2C_Master_Write:	
  1174                           ; 1 bytes @ 0x0
  1175                           
  1176  0070                     ?_getbit:	
  1177                           ; 1 bytes @ 0x0
  1178                           
  1179  0070                     ?_fcscheck:	
  1180                           ; 2 bytes @ 0x0
  1181                           
  1182  0070                     ?___awdiv:	
  1183                           ; 2 bytes @ 0x0
  1184                           
  1185  0070                     ?___lldiv:	
  1186                           ; 2 bytes @ 0x0
  1187                           
  1188  0070                     putch@byte:	
  1189                           ; 4 bytes @ 0x0
  1190                           
  1191  0070                     I2C_Master_Write@d:	
  1192                           ; 1 bytes @ 0x0
  1193                           
  1194  0070                     __NOP@i:	
  1195                           ; 2 bytes @ 0x0
  1196                           
  1197  0070                     ___awdiv@divisor:	
  1198                           ; 2 bytes @ 0x0
  1199                           
  1200  0070                     ___lldiv@divisor:	
  1201                           ; 2 bytes @ 0x0
  1202                           
  1203                           
  1204                           ; 4 bytes @ 0x0
  1205  0070                     	ds	1
  1206  0071                     ?_NM_waddress:	
  1207  0071                     ?_TXOBC_waddress:	
  1208                           ; 1 bytes @ 0x1
  1209                           
  1210  0071                     NM_waddress@whigh_address:	
  1211                           ; 1 bytes @ 0x1
  1212                           
  1213  0071                     TXOBC_waddress@whigh_address:	
  1214                           ; 1 bytes @ 0x1
  1215                           
  1216                           
  1217                           ; 1 bytes @ 0x1
  1218  0071                     	ds	1
  1219  0072                     ?_EEPROM_Write:	
  1220  0072                     ??_getbit:	
  1221                           ; 1 bytes @ 0x2
  1222                           
  1223  0072                     ??_fcscheck:	
  1224                           ; 1 bytes @ 0x2
  1225                           
  1226  0072                     ??_I2C_Master_Write:	
  1227                           ; 1 bytes @ 0x2
  1228                           
  1229  0072                     ?_L_OUT:	
  1230                           ; 1 bytes @ 0x2
  1231                           
  1232  0072                     ?_H_OUT:	
  1233                           ; 1 bytes @ 0x2
  1234                           
  1235  0072                     ?_STBOUT:	
  1236                           ; 1 bytes @ 0x2
  1237                           
  1238  0072                     NM_waddress@wlow_address:	
  1239                           ; 1 bytes @ 0x2
  1240                           
  1241  0072                     TXOBC_waddress@wlow_address:	
  1242                           ; 1 bytes @ 0x2
  1243                           
  1244  0072                     EEPROM_Write@high_address:	
  1245                           ; 1 bytes @ 0x2
  1246                           
  1247  0072                     L_OUT@fmcwtxrx:	
  1248                           ; 1 bytes @ 0x2
  1249                           
  1250  0072                     H_OUT@fmcwtxrx:	
  1251                           ; 2 bytes @ 0x2
  1252                           
  1253  0072                     STBOUT@fmcwtxrx:	
  1254                           ; 2 bytes @ 0x2
  1255                           
  1256  0072                     ___awdiv@dividend:	
  1257                           ; 2 bytes @ 0x2
  1258                           
  1259                           
  1260                           ; 2 bytes @ 0x2
  1261  0072                     	ds	1
  1262  0073                     ??_NM_waddress:	
  1263  0073                     ??_TXOBC_waddress:	
  1264                           ; 1 bytes @ 0x3
  1265                           
  1266  0073                     NM_waddress@NM_wad_header:	
  1267                           ; 1 bytes @ 0x3
  1268                           
  1269  0073                     EEPROM_Write@low_address:	
  1270                           ; 1 bytes @ 0x3
  1271                           
  1272                           
  1273                           ; 1 bytes @ 0x3
  1274  0073                     	ds	1
  1275  0074                     ??_L_OUT:	
  1276  0074                     ??_H_OUT:	
  1277                           ; 1 bytes @ 0x4
  1278                           
  1279  0074                     ??_STBOUT:	
  1280                           ; 1 bytes @ 0x4
  1281                           
  1282  0074                     ?_OPINIT:	
  1283                           ; 1 bytes @ 0x4
  1284                           
  1285  0074                     ??___awdiv:	
  1286                           ; 1 bytes @ 0x4
  1287                           
  1288  0074                     fcscheck@bt:	
  1289                           ; 1 bytes @ 0x4
  1290                           
  1291  0074                     EEPROM_Write@data:	
  1292                           ; 1 bytes @ 0x4
  1293                           
  1294  0074                     getbit@i:	
  1295                           ; 1 bytes @ 0x4
  1296                           
  1297  0074                     OPINIT@fmcwtxrx:	
  1298                           ; 2 bytes @ 0x4
  1299                           
  1300  0074                     ___lldiv@dividend:	
  1301                           ; 2 bytes @ 0x4
  1302                           
  1303                           
  1304                           ; 4 bytes @ 0x4
  1305  0074                     	ds	1
  1306  0075                     ??_EEPROM_Write:	
  1307  0075                     TXOBC_waddress@TXOBC_wad_header:	
  1308                           ; 1 bytes @ 0x5
  1309                           
  1310  0075                     ___awdiv@counter:	
  1311                           ; 1 bytes @ 0x5
  1312                           
  1313  0075                     fcscheck@i:	
  1314                           ; 1 bytes @ 0x5
  1315                           
  1316                           
  1317                           ; 2 bytes @ 0x5
  1318  0075                     	ds	1
  1319  0076                     ??_waitFlag:	
  1320  0076                     ??_getdata:	
  1321                           ; 1 bytes @ 0x6
  1322                           
  1323  0076                     ??_OPINIT:	
  1324                           ; 1 bytes @ 0x6
  1325                           
  1326  0076                     ___awdiv@sign:	
  1327                           ; 1 bytes @ 0x6
  1328                           
  1329                           
  1330                           ; 1 bytes @ 0x6
  1331  0076                     	ds	1
  1332  0077                     fcscheck@i_147:	
  1333  0077                     ___awdiv@quotient:	
  1334                           ; 2 bytes @ 0x7
  1335                           
  1336                           
  1337                           ; 2 bytes @ 0x7
  1338  0077                     	ds	1
  1339  0078                     ??___lldiv:	
  1340  0078                     EEPROM_Write@EEPROM_address:	
  1341                           ; 1 bytes @ 0x8
  1342                           
  1343                           
  1344                           ; 1 bytes @ 0x8
  1345  0078                     	ds	1
  1346  0079                     ?_OUTFQ:	
  1347  0079                     ?_RFDOUT:	
  1348                           ; 1 bytes @ 0x9
  1349                           
  1350  0079                     fcscheck@byte:	
  1351                           ; 1 bytes @ 0x9
  1352                           
  1353  0079                     EEPROM_Write@Address:	
  1354                           ; 1 bytes @ 0x9
  1355                           
  1356  0079                     OUTFQ@fmcwtxrx:	
  1357                           ; 1 bytes @ 0x9
  1358                           
  1359  0079                     RFDOUT@fmcwtxrx:	
  1360                           ; 2 bytes @ 0x9
  1361                           
  1362  0079                     ___lldiv@quotient:	
  1363                           ; 2 bytes @ 0x9
  1364                           
  1365                           
  1366                           ; 4 bytes @ 0x9
  1367  0079                     	ds	1
  1368  007A                     ??_ReceivePacket_data:	
  1369                           
  1370                           ; 1 bytes @ 0xA
  1371  007A                     	ds	1
  1372  007B                     OUTFQ@Nprg:	
  1373  007B                     RFDOUT@Nref:	
  1374                           ; 2 bytes @ 0xB
  1375                           
  1376                           
  1377                           ; 2 bytes @ 0xB
  1378  007B                     	ds	2
  1379  007D                     ??_FMTX:	
  1380  007D                     ??_CWTX:	
  1381                           ; 1 bytes @ 0xD
  1382                           
  1383  007D                     ??_FMRX:	
  1384                           ; 1 bytes @ 0xD
  1385                           
  1386  007D                     ___lldiv@counter:	
  1387                           ; 1 bytes @ 0xD
  1388                           
  1389                           
  1390                           ; 1 bytes @ 0xD
  1391  007D                     	ds	1
  1392                           
  1393                           	psect	cstackBANK0
  1394  0020                     __pcstackBANK0:	
  1395  0020                     ?_Init_I2C_M:	
  1396  0020                     ??_OUTFQ:	
  1397                           ; 1 bytes @ 0x0
  1398                           
  1399  0020                     ??_RFDOUT:	
  1400                           ; 1 bytes @ 0x0
  1401                           
  1402  0020                     waitFlag@i:	
  1403                           ; 1 bytes @ 0x0
  1404                           
  1405  0020                     getdata@bufstore_counter:	
  1406                           ; 2 bytes @ 0x0
  1407                           
  1408  0020                     Init_I2C_M@c:	
  1409                           ; 2 bytes @ 0x0
  1410                           
  1411                           
  1412                           ; 4 bytes @ 0x0
  1413  0020                     	ds	2
  1414  0022                     waitFlag@j:	
  1415  0022                     getdata@dstuff:	
  1416                           ; 2 bytes @ 0x2
  1417                           
  1418                           
  1419                           ; 2 bytes @ 0x2
  1420  0022                     	ds	1
  1421  0023                     RFDOUT@Nref_b:	
  1422                           
  1423                           ; 24 bytes @ 0x3
  1424  0023                     	ds	1
  1425  0024                     ??_Init_I2C_M:	
  1426  0024                     waitFlag@j_116:	
  1427                           ; 1 bytes @ 0x4
  1428                           
  1429  0024                     getdata@dbitstatus:	
  1430                           ; 2 bytes @ 0x4
  1431                           
  1432                           
  1433                           ; 2 bytes @ 0x4
  1434  0024                     	ds	2
  1435  0026                     getdata@buf:	
  1436  0026                     waitFlag@j_118:	
  1437                           ; 1 bytes @ 0x6
  1438                           
  1439                           
  1440                           ; 2 bytes @ 0x6
  1441  0026                     	ds	2
  1442  0028                     waitFlag@j_120:	
  1443                           
  1444                           ; 2 bytes @ 0x8
  1445  0028                     	ds	2
  1446  002A                     waitFlag@j_122:	
  1447                           
  1448                           ; 2 bytes @ 0xA
  1449  002A                     	ds	2
  1450  002C                     waitFlag@j_124:	
  1451                           
  1452                           ; 2 bytes @ 0xC
  1453  002C                     	ds	2
  1454  002E                     waitFlag@j_125:	
  1455                           
  1456                           ; 2 bytes @ 0xE
  1457  002E                     	ds	2
  1458  0030                     waitFlag@j_127:	
  1459  0030                     OUTFQ@Nprg_b:	
  1460                           ; 2 bytes @ 0x10
  1461                           
  1462                           
  1463                           ; 34 bytes @ 0x10
  1464  0030                     	ds	2
  1465  0032                     waitFlag@j_129:	
  1466                           
  1467                           ; 2 bytes @ 0x12
  1468  0032                     	ds	2
  1469  0034                     waitFlag@j_131:	
  1470                           
  1471                           ; 2 bytes @ 0x14
  1472  0034                     	ds	2
  1473  0036                     waitFlag@j_133:	
  1474                           
  1475                           ; 2 bytes @ 0x16
  1476  0036                     	ds	2
  1477  0038                     waitFlag@j_135:	
  1478                           
  1479                           ; 2 bytes @ 0x18
  1480  0038                     	ds	2
  1481  003A                     waitFlag@flag_judge:	
  1482                           
  1483                           ; 2 bytes @ 0x1A
  1484  003A                     	ds	1
  1485  003B                     RFDOUT@i_487:	
  1486                           
  1487                           ; 2 bytes @ 0x1B
  1488  003B                     	ds	1
  1489  003C                     waitFlag@buf:	
  1490                           
  1491                           ; 1 bytes @ 0x1C
  1492  003C                     	ds	1
  1493  003D                     ReceivePacket_data@fcschecker:	
  1494  003D                     RFDOUT@i:	
  1495                           ; 2 bytes @ 0x1D
  1496                           
  1497                           
  1498                           ; 2 bytes @ 0x1D
  1499  003D                     	ds	2
  1500  003F                     ReceivePacket_data@i:	
  1501  003F                     RFDOUT@i_488:	
  1502                           ; 2 bytes @ 0x1F
  1503                           
  1504                           
  1505                           ; 2 bytes @ 0x1F
  1506  003F                     	ds	19
  1507  0052                     OUTFQ@i_476:	
  1508                           
  1509                           ; 2 bytes @ 0x32
  1510  0052                     	ds	2
  1511  0054                     OUTFQ@count:	
  1512                           
  1513                           ; 2 bytes @ 0x34
  1514  0054                     	ds	2
  1515  0056                     OUTFQ@i:	
  1516                           
  1517                           ; 2 bytes @ 0x36
  1518  0056                     	ds	2
  1519  0058                     OUTFQ@i_478:	
  1520                           
  1521                           ; 2 bytes @ 0x38
  1522  0058                     	ds	2
  1523  005A                     OUTFQ@j:	
  1524                           
  1525                           ; 2 bytes @ 0x3A
  1526  005A                     	ds	2
  1527  005C                     ?_FMTX:	
  1528  005C                     ?_CWTX:	
  1529                           ; 1 bytes @ 0x3C
  1530                           
  1531  005C                     ?_FMRX:	
  1532                           ; 1 bytes @ 0x3C
  1533                           
  1534  005C                     FMTX@Nref:	
  1535                           ; 1 bytes @ 0x3C
  1536                           
  1537  005C                     CWTX@Nref:	
  1538                           ; 2 bytes @ 0x3C
  1539                           
  1540  005C                     FMRX@Nref:	
  1541                           ; 2 bytes @ 0x3C
  1542                           
  1543                           
  1544                           ; 2 bytes @ 0x3C
  1545  005C                     	ds	2
  1546  005E                     FMTX@Nprg:	
  1547  005E                     CWTX@Nprg:	
  1548                           ; 2 bytes @ 0x3E
  1549                           
  1550  005E                     FMRX@Nprg:	
  1551                           ; 2 bytes @ 0x3E
  1552                           
  1553                           
  1554                           ; 2 bytes @ 0x3E
  1555  005E                     	ds	2
  1556  0060                     FMTX@fmtx:	
  1557  0060                     CWTX@cwtx:	
  1558                           ; 2 bytes @ 0x40
  1559                           
  1560  0060                     FMRX@fmrx:	
  1561                           ; 2 bytes @ 0x40
  1562                           
  1563                           
  1564                           ; 2 bytes @ 0x40
  1565  0060                     	ds	2
  1566  0062                     ??_main:	
  1567                           
  1568                           ; 1 bytes @ 0x42
  1569  0062                     	ds	4
  1570                           
  1571                           	psect	maintext
  1572  0E0A                     __pmaintext:	
  1573 ;;
  1574 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1575 ;;
  1576 ;; *************** function _main *****************
  1577 ;; Defined at:
  1578 ;;		line 53 in file "main.c"
  1579 ;; Parameters:    Size  Location     Type
  1580 ;;		None
  1581 ;; Auto vars:     Size  Location     Type
  1582 ;;  FMRX_Nprg      10   20[BANK1 ] int [5]
  1583 ;;  CWTX_Nprg      10   10[BANK1 ] int [5]
  1584 ;;  FMTX_Nprg      10    0[BANK1 ] int [5]
  1585 ;;  NM_wad_heade    1   31[BANK1 ] unsigned char 
  1586 ;;  dData           1   32[BANK1 ] PTR unsigned char 
  1587 ;;		 -> NULL(0), dData(32), 
  1588 ;;  TXOBC_wad_he    1   30[BANK1 ] unsigned char 
  1589 ;; Return value:  Size  Location     Type
  1590 ;;                  1    wreg      void 
  1591 ;; Registers used:
  1592 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1593 ;; Tracked objects:
  1594 ;;		On entry : B00/0
  1595 ;;		On exit  : 0/0
  1596 ;;		Unchanged: 0/0
  1597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1598 ;;      Params:         0       0       0       0       0
  1599 ;;      Locals:         0       0      33       0       0
  1600 ;;      Temps:          0       4       0       0       0
  1601 ;;      Totals:         0       4      33       0       0
  1602 ;;Total ram usage:       37 bytes
  1603 ;; Hardware stack levels required when called:    4
  1604 ;; This function calls:
  1605 ;;		_CWTX
  1606 ;;		_EEPROM_Write
  1607 ;;		_FMRX
  1608 ;;		_FMTX
  1609 ;;		_Init_I2C_M
  1610 ;;		_Init_MPU
  1611 ;;		_Init_SERIAL
  1612 ;;		_NM_waddress
  1613 ;;		_ReceivePacket_data
  1614 ;;		_Reset_EPS
  1615 ;;		_TXOBC_waddress
  1616 ;; This function is called by:
  1617 ;;		Startup code after reset
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           
  1622                           ;psect for function _main
  1623  0E0A                     _main:	
  1624                           
  1625                           ;main.c: 58: _delay((unsigned long)((200)*(10000000/4000.0)));
  1626                           
  1627                           ;incstack = 0
  1628                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1629  0E0A  3003               	movlw	3
  1630  0E0B  1283               	bcf	3,5	;RP0=0, select bank0
  1631  0E0C  1303               	bcf	3,6	;RP1=0, select bank0
  1632  0E0D  00E4               	movwf	??_main+2
  1633  0E0E  308A               	movlw	138
  1634  0E0F  00E3               	movwf	??_main+1
  1635  0E10  3055               	movlw	85
  1636  0E11  00E2               	movwf	??_main
  1637  0E12                     u3507:	
  1638  0E12  0BE2               	decfsz	??_main,f
  1639  0E13  2E12               	goto	u3507
  1640  0E14  0BE3               	decfsz	??_main+1,f
  1641  0E15  2E12               	goto	u3507
  1642  0E16  0BE4               	decfsz	??_main+2,f
  1643  0E17  2E12               	goto	u3507
  1644                           
  1645                           ;main.c: 60: Init_SERIAL();
  1646  0E18  120A  158A  2066  120A  158A  	fcall	_Init_SERIAL
  1647                           
  1648                           ;main.c: 61: Init_MPU();
  1649  0E1D  120A  158A  204D  120A  158A  	fcall	_Init_MPU
  1650                           
  1651                           ;main.c: 62: Init_I2C_M(400000);
  1652  0E22  3000               	movlw	0
  1653  0E23  1283               	bcf	3,5	;RP0=0, select bank0
  1654  0E24  1303               	bcf	3,6	;RP1=0, select bank0
  1655  0E25  00A3               	movwf	Init_I2C_M@c+3
  1656  0E26  3006               	movlw	6
  1657  0E27  00A2               	movwf	Init_I2C_M@c+2
  1658  0E28  301A               	movlw	26
  1659  0E29  00A1               	movwf	Init_I2C_M@c+1
  1660  0E2A  3080               	movlw	128
  1661  0E2B  00A0               	movwf	Init_I2C_M@c
  1662  0E2C  120A  158A  218C  120A  158A  	fcall	_Init_I2C_M
  1663                           
  1664                           ;main.c: 69: RB1 = 1;
  1665  0E31  1283               	bcf	3,5	;RP0=0, select bank0
  1666  0E32  1303               	bcf	3,6	;RP1=0, select bank0
  1667  0E33  1486               	bsf	6,1	;volatile
  1668                           
  1669                           ;main.c: 70: RB2 = 1;
  1670  0E34  1506               	bsf	6,2	;volatile
  1671                           
  1672                           ;main.c: 71: _delay((unsigned long)((1000)*(10000000/4000.0)));
  1673  0E35  300D               	movlw	13
  1674  0E36  1283               	bcf	3,5	;RP0=0, select bank0
  1675  0E37  1303               	bcf	3,6	;RP1=0, select bank0
  1676  0E38  00E4               	movwf	??_main+2
  1677  0E39  30AF               	movlw	175
  1678  0E3A  00E3               	movwf	??_main+1
  1679  0E3B  30B5               	movlw	181
  1680  0E3C  00E2               	movwf	??_main
  1681  0E3D                     u3517:	
  1682  0E3D  0BE2               	decfsz	??_main,f
  1683  0E3E  2E3D               	goto	u3517
  1684  0E3F  0BE3               	decfsz	??_main+1,f
  1685  0E40  2E3D               	goto	u3517
  1686  0E41  0BE4               	decfsz	??_main+2,f
  1687  0E42  2E3D               	goto	u3517
  1688  0E43  2E44               	nop2
  1689                           
  1690                           ;main.c: 73: FMTX(FMTX_Nref, FMTX_Nprg);
  1691  0E44  1683               	bsf	3,5	;RP0=1, select bank1
  1692  0E45  1303               	bcf	3,6	;RP1=0, select bank1
  1693  0E46  0846               	movf	(_FMTX_Nref+1)^(0+128),w
  1694  0E47  1283               	bcf	3,5	;RP0=0, select bank0
  1695  0E48  1303               	bcf	3,6	;RP1=0, select bank0
  1696  0E49  00DD               	movwf	FMTX@Nref+1
  1697  0E4A  1683               	bsf	3,5	;RP0=1, select bank1
  1698  0E4B  1303               	bcf	3,6	;RP1=0, select bank1
  1699  0E4C  0845               	movf	_FMTX_Nref^(0+128),w
  1700  0E4D  1283               	bcf	3,5	;RP0=0, select bank0
  1701  0E4E  1303               	bcf	3,6	;RP1=0, select bank0
  1702  0E4F  00DC               	movwf	FMTX@Nref
  1703  0E50  30D1               	movlw	(low (_FMTX_Nprg| 0))& (0+255)
  1704  0E51  00DE               	movwf	FMTX@Nprg
  1705  0E52  3000               	movlw	0
  1706  0E53  00DF               	movwf	FMTX@Nprg+1
  1707  0E54  120A  158A  2132  120A  158A  	fcall	_FMTX
  1708                           
  1709                           ;main.c: 74: CWTX(CWTX_Nref, CWTX_Nprg);
  1710  0E59  1683               	bsf	3,5	;RP0=1, select bank1
  1711  0E5A  1303               	bcf	3,6	;RP1=0, select bank1
  1712  0E5B  0844               	movf	(_CWTX_Nref+1)^(0+128),w
  1713  0E5C  1283               	bcf	3,5	;RP0=0, select bank0
  1714  0E5D  1303               	bcf	3,6	;RP1=0, select bank0
  1715  0E5E  00DD               	movwf	CWTX@Nref+1
  1716  0E5F  1683               	bsf	3,5	;RP0=1, select bank1
  1717  0E60  1303               	bcf	3,6	;RP1=0, select bank1
  1718  0E61  0843               	movf	_CWTX_Nref^(0+128),w
  1719  0E62  1283               	bcf	3,5	;RP0=0, select bank0
  1720  0E63  1303               	bcf	3,6	;RP1=0, select bank0
  1721  0E64  00DC               	movwf	CWTX@Nref
  1722  0E65  30C7               	movlw	(low (_CWTX_Nprg| 0))& (0+255)
  1723  0E66  00DE               	movwf	CWTX@Nprg
  1724  0E67  3000               	movlw	0
  1725  0E68  00DF               	movwf	CWTX@Nprg+1
  1726  0E69  120A  158A  20DA  120A  158A  	fcall	_CWTX
  1727                           
  1728                           ;main.c: 75: FMRX(FMRX_Nref, FMRX_Nprg);
  1729  0E6E  1683               	bsf	3,5	;RP0=1, select bank1
  1730  0E6F  1303               	bcf	3,6	;RP1=0, select bank1
  1731  0E70  0842               	movf	(_FMRX_Nref+1)^(0+128),w
  1732  0E71  1283               	bcf	3,5	;RP0=0, select bank0
  1733  0E72  1303               	bcf	3,6	;RP1=0, select bank0
  1734  0E73  00DD               	movwf	FMRX@Nref+1
  1735  0E74  1683               	bsf	3,5	;RP0=1, select bank1
  1736  0E75  1303               	bcf	3,6	;RP1=0, select bank1
  1737  0E76  0841               	movf	_FMRX_Nref^(0+128),w
  1738  0E77  1283               	bcf	3,5	;RP0=0, select bank0
  1739  0E78  1303               	bcf	3,6	;RP1=0, select bank0
  1740  0E79  00DC               	movwf	FMRX@Nref
  1741  0E7A  30E2               	movlw	(low (_FMRX_Nprg| (0+256)))& (0+255)
  1742  0E7B  00DE               	movwf	FMRX@Nprg
  1743  0E7C  3001               	movlw	1
  1744  0E7D  00DF               	movwf	FMRX@Nprg+1
  1745  0E7E  120A  158A  2106  120A  158A  	fcall	_FMRX
  1746                           
  1747                           ;main.c: 76: RB2 = 0;
  1748  0E83  1283               	bcf	3,5	;RP0=0, select bank0
  1749  0E84  1303               	bcf	3,6	;RP1=0, select bank0
  1750  0E85  1106               	bcf	6,2	;volatile
  1751                           
  1752                           ;main.c: 78: _delay((unsigned long)((500)*(10000000/4000.0)));
  1753  0E86  3007               	movlw	7
  1754  0E87  1283               	bcf	3,5	;RP0=0, select bank0
  1755  0E88  1303               	bcf	3,6	;RP1=0, select bank0
  1756  0E89  00E4               	movwf	??_main+2
  1757  0E8A  3058               	movlw	88
  1758  0E8B  00E3               	movwf	??_main+1
  1759  0E8C  3059               	movlw	89
  1760  0E8D  00E2               	movwf	??_main
  1761  0E8E                     u3527:	
  1762  0E8E  0BE2               	decfsz	??_main,f
  1763  0E8F  2E8E               	goto	u3527
  1764  0E90  0BE3               	decfsz	??_main+1,f
  1765  0E91  2E8E               	goto	u3527
  1766  0E92  0BE4               	decfsz	??_main+2,f
  1767  0E93  2E8E               	goto	u3527
  1768                           
  1769                           ;main.c: 79: RB3 = 1;
  1770  0E94  1283               	bcf	3,5	;RP0=0, select bank0
  1771  0E95  1303               	bcf	3,6	;RP1=0, select bank0
  1772  0E96  1586               	bsf	6,3	;volatile
  1773  0E97                     l3707:	
  1774                           ;main.c: 83: while(1){
  1775                           
  1776                           
  1777                           ;main.c: 98: UBYTE *dData;
  1778                           ;main.c: 99: dData = ReceivePacket_data();
  1779  0E97  120A  158A  2447  120A  158A  	fcall	_ReceivePacket_data
  1780  0E9C  1283               	bcf	3,5	;RP0=0, select bank0
  1781  0E9D  1303               	bcf	3,6	;RP1=0, select bank0
  1782  0E9E  00E2               	movwf	??_main
  1783  0E9F  0862               	movf	??_main,w
  1784  0EA0  1683               	bsf	3,5	;RP0=1, select bank1
  1785  0EA1  1303               	bcf	3,6	;RP1=0, select bank1
  1786  0EA2  00C0               	movwf	main@dData^(0+128)
  1787                           
  1788                           ;main.c: 100: RB2 = 1;
  1789  0EA3  1283               	bcf	3,5	;RP0=0, select bank0
  1790  0EA4  1303               	bcf	3,6	;RP1=0, select bank0
  1791  0EA5  1506               	bsf	6,2	;volatile
  1792                           
  1793                           ;main.c: 101: _delay((unsigned long)((500)*(10000000/4000.0)));
  1794  0EA6  3007               	movlw	7
  1795  0EA7  1283               	bcf	3,5	;RP0=0, select bank0
  1796  0EA8  1303               	bcf	3,6	;RP1=0, select bank0
  1797  0EA9  00E4               	movwf	??_main+2
  1798  0EAA  3058               	movlw	88
  1799  0EAB  00E3               	movwf	??_main+1
  1800  0EAC  3059               	movlw	89
  1801  0EAD  00E2               	movwf	??_main
  1802  0EAE                     u3537:	
  1803  0EAE  0BE2               	decfsz	??_main,f
  1804  0EAF  2EAE               	goto	u3537
  1805  0EB0  0BE3               	decfsz	??_main+1,f
  1806  0EB1  2EAE               	goto	u3537
  1807  0EB2  0BE4               	decfsz	??_main+2,f
  1808  0EB3  2EAE               	goto	u3537
  1809                           
  1810                           ;main.c: 102: RB2 = 0;
  1811  0EB4  1283               	bcf	3,5	;RP0=0, select bank0
  1812  0EB5  1303               	bcf	3,6	;RP1=0, select bank0
  1813  0EB6  1106               	bcf	6,2	;volatile
  1814                           
  1815                           ;main.c: 104: EEPROM_Write(0x50,0x00,0x00,dData);
  1816  0EB7  01F2               	clrf	EEPROM_Write@high_address
  1817  0EB8  01F3               	clrf	EEPROM_Write@low_address
  1818  0EB9  1683               	bsf	3,5	;RP0=1, select bank1
  1819  0EBA  1303               	bcf	3,6	;RP1=0, select bank1
  1820  0EBB  0840               	movf	main@dData^(0+128),w
  1821  0EBC  1283               	bcf	3,5	;RP0=0, select bank0
  1822  0EBD  1303               	bcf	3,6	;RP1=0, select bank0
  1823  0EBE  00E2               	movwf	??_main
  1824  0EBF  0862               	movf	??_main,w
  1825  0EC0  00F4               	movwf	EEPROM_Write@data
  1826  0EC1  3050               	movlw	80
  1827  0EC2  120A  158A  232B  120A  158A  	fcall	_EEPROM_Write
  1828                           
  1829                           ;main.c: 105: _delay((unsigned long)((100)*(10000000/4000.0)));
  1830  0EC7  3002               	movlw	2
  1831  0EC8  1283               	bcf	3,5	;RP0=0, select bank0
  1832  0EC9  1303               	bcf	3,6	;RP1=0, select bank0
  1833  0ECA  00E4               	movwf	??_main+2
  1834  0ECB  3045               	movlw	69
  1835  0ECC  00E3               	movwf	??_main+1
  1836  0ECD  30A9               	movlw	169
  1837  0ECE  00E2               	movwf	??_main
  1838  0ECF                     u3547:	
  1839  0ECF  0BE2               	decfsz	??_main,f
  1840  0ED0  2ECF               	goto	u3547
  1841  0ED1  0BE3               	decfsz	??_main+1,f
  1842  0ED2  2ECF               	goto	u3547
  1843  0ED3  0BE4               	decfsz	??_main+2,f
  1844  0ED4  2ECF               	goto	u3547
  1845                           
  1846                           ;main.c: 109: UBYTE TXOBC_wad_header = 0x74;
  1847  0ED5  3074               	movlw	116
  1848  0ED6  1283               	bcf	3,5	;RP0=0, select bank0
  1849  0ED7  1303               	bcf	3,6	;RP1=0, select bank0
  1850  0ED8  00E2               	movwf	??_main
  1851  0ED9  0862               	movf	??_main,w
  1852  0EDA  1683               	bsf	3,5	;RP0=1, select bank1
  1853  0EDB  1303               	bcf	3,6	;RP1=0, select bank1
  1854  0EDC  00BE               	movwf	main@TXOBC_wad_header^(0+128)
  1855                           
  1856                           ;main.c: 110: TXOBC_waddress(TXOBC_wad_header, 0x00, 0x00);
  1857  0EDD  01F1               	clrf	TXOBC_waddress@whigh_address
  1858  0EDE  01F2               	clrf	TXOBC_waddress@wlow_address
  1859  0EDF  083E               	movf	main@TXOBC_wad_header^(0+128),w
  1860  0EE0  120A  158A  21C0  120A  158A  	fcall	_TXOBC_waddress
  1861                           
  1862                           ;main.c: 118: _delay((unsigned long)((7000)*(10000000/4000.0)));
  1863  0EE5  3059               	movlw	89
  1864  0EE6  1283               	bcf	3,5	;RP0=0, select bank0
  1865  0EE7  1303               	bcf	3,6	;RP1=0, select bank0
  1866  0EE8  00E4               	movwf	??_main+2
  1867  0EE9  30C8               	movlw	200
  1868  0EEA  00E3               	movwf	??_main+1
  1869  0EEB  3007               	movlw	7
  1870  0EEC  00E2               	movwf	??_main
  1871  0EED                     u3557:	
  1872  0EED  0BE2               	decfsz	??_main,f
  1873  0EEE  2EED               	goto	u3557
  1874  0EEF  0BE3               	decfsz	??_main+1,f
  1875  0EF0  2EED               	goto	u3557
  1876  0EF1  0BE4               	decfsz	??_main+2,f
  1877  0EF2  2EED               	goto	u3557
  1878  0EF3  2EF4               	nop2
  1879                           
  1880                           ;main.c: 123: if(dData[0]=='n'){
  1881  0EF4  1683               	bsf	3,5	;RP0=1, select bank1
  1882  0EF5  1303               	bcf	3,6	;RP1=0, select bank1
  1883  0EF6  0840               	movf	main@dData^(0+128),w
  1884  0EF7  0084               	movwf	4
  1885  0EF8  306E               	movlw	110
  1886  0EF9  1783               	bsf	3,7	;select IRP bank2
  1887  0EFA  0600               	xorwf	0,w
  1888  0EFB  1D03               	btfss	3,2
  1889  0EFC  2F0E               	goto	l3731
  1890                           
  1891                           ;main.c: 125: UBYTE NM_wad_header = 0x72;
  1892  0EFD  3072               	movlw	114
  1893  0EFE  1283               	bcf	3,5	;RP0=0, select bank0
  1894  0EFF  1303               	bcf	3,6	;RP1=0, select bank0
  1895  0F00  00E2               	movwf	??_main
  1896  0F01  0862               	movf	??_main,w
  1897  0F02  1683               	bsf	3,5	;RP0=1, select bank1
  1898  0F03  1303               	bcf	3,6	;RP1=0, select bank1
  1899  0F04  00BF               	movwf	main@NM_wad_header^(0+128)
  1900                           
  1901                           ;main.c: 126: NM_waddress(NM_wad_header, 0x00, 0x00);
  1902  0F05  01F1               	clrf	NM_waddress@whigh_address
  1903  0F06  01F2               	clrf	NM_waddress@wlow_address
  1904  0F07  083F               	movf	main@NM_wad_header^(0+128),w
  1905  0F08  120A  158A  2026  120A  158A  	fcall	_NM_waddress
  1906                           
  1907                           ;main.c: 128: }else if(dData[0]=='p'){
  1908  0F0D  2FF1               	goto	l442
  1909  0F0E                     l3731:	
  1910  0F0E  1683               	bsf	3,5	;RP0=1, select bank1
  1911  0F0F  1303               	bcf	3,6	;RP1=0, select bank1
  1912  0F10  0840               	movf	main@dData^(0+128),w
  1913  0F11  0084               	movwf	4
  1914  0F12  3070               	movlw	112
  1915  0F13  1783               	bsf	3,7	;select IRP bank2
  1916  0F14  0600               	xorwf	0,w
  1917  0F15  1D03               	btfss	3,2
  1918  0F16  2FDC               	goto	l443
  1919                           
  1920                           ;main.c: 133: if(dData[2] == 'r'){
  1921  0F17  0840               	movf	main@dData^(0+128),w
  1922  0F18  3E02               	addlw	2
  1923  0F19  0084               	movwf	4
  1924  0F1A  3072               	movlw	114
  1925  0F1B  0600               	xorwf	0,w
  1926  0F1C  1903               	btfsc	3,2
  1927  0F1D  2FC4               	goto	l3757
  1928  0F1E  2FF1               	goto	l442
  1929  0F1F                     l3737:	
  1930                           ;main.c: 139: case 'E':
  1931                           
  1932                           ;main.c: 138: switch(dData[3]){
  1933                           
  1934                           
  1935                           ;main.c: 146: Reset_EPS();
  1936  0F1F  120A  118A  2007  120A  158A  	fcall	_Reset_EPS
  1937                           
  1938                           ;main.c: 147: _delay((unsigned long)((5000)*(10000000/4000.0)));
  1939  0F24  3040               	movlw	64
  1940  0F25  1283               	bcf	3,5	;RP0=0, select bank0
  1941  0F26  1303               	bcf	3,6	;RP1=0, select bank0
  1942  0F27  00E4               	movwf	??_main+2
  1943  0F28  306A               	movlw	106
  1944  0F29  00E3               	movwf	??_main+1
  1945  0F2A  3097               	movlw	151
  1946  0F2B  00E2               	movwf	??_main
  1947  0F2C                     u3567:	
  1948  0F2C  0BE2               	decfsz	??_main,f
  1949  0F2D  2F2C               	goto	u3567
  1950  0F2E  0BE3               	decfsz	??_main+1,f
  1951  0F2F  2F2C               	goto	u3567
  1952  0F30  0BE4               	decfsz	??_main+2,f
  1953  0F31  2F2C               	goto	u3567
  1954                           
  1955                           ;main.c: 150: int FMTX_Nprg[5] = {8,7,3,0,0};
  1956  0F32  30A0               	movlw	main@FMTX_Nprg& (0+255)
  1957  0F33  0084               	movwf	4
  1958  0F34  30D8               	movlw	low main@F1461
  1959  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  1960  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  1961  0F37  00E2               	movwf	??_main
  1962  0F38  0804               	movf	4,w
  1963  0F39  00E3               	movwf	??_main+1
  1964  0F3A  300A               	movlw	10
  1965  0F3B  00E4               	movwf	??_main+2
  1966  0F3C                     u3450:	
  1967  0F3C  0862               	movf	??_main,w
  1968  0F3D  0084               	movwf	4
  1969  0F3E  1783               	bsf	3,7	;select IRP bank3
  1970  0F3F  0800               	movf	0,w
  1971  0F40  00E5               	movwf	??_main+3
  1972  0F41  0AE2               	incf	??_main,f
  1973  0F42  0863               	movf	??_main+1,w
  1974  0F43  0084               	movwf	4
  1975  0F44  1383               	bcf	3,7	;select IRP bank1
  1976  0F45  0865               	movf	??_main+3,w
  1977  0F46  0080               	movwf	0
  1978  0F47  0AE3               	incf	??_main+1,f
  1979  0F48  0BE4               	decfsz	??_main+2,f
  1980  0F49  2F3C               	goto	u3450
  1981                           
  1982                           ;main.c: 151: int CWTX_Nprg[5] = {0,1,7,4,7};
  1983  0F4A  30AA               	movlw	main@CWTX_Nprg& (0+255)
  1984  0F4B  0084               	movwf	4
  1985  0F4C  30CE               	movlw	low main@F1463
  1986  0F4D  00E2               	movwf	??_main
  1987  0F4E  0804               	movf	4,w
  1988  0F4F  00E3               	movwf	??_main+1
  1989  0F50  300A               	movlw	10
  1990  0F51  00E4               	movwf	??_main+2
  1991  0F52                     u3460:	
  1992  0F52  0862               	movf	??_main,w
  1993  0F53  0084               	movwf	4
  1994  0F54  1783               	bsf	3,7	;select IRP bank3
  1995  0F55  0800               	movf	0,w
  1996  0F56  00E5               	movwf	??_main+3
  1997  0F57  0AE2               	incf	??_main,f
  1998  0F58  0863               	movf	??_main+1,w
  1999  0F59  0084               	movwf	4
  2000  0F5A  1383               	bcf	3,7	;select IRP bank1
  2001  0F5B  0865               	movf	??_main+3,w
  2002  0F5C  0080               	movwf	0
  2003  0F5D  0AE3               	incf	??_main+1,f
  2004  0F5E  0BE4               	decfsz	??_main+2,f
  2005  0F5F  2F52               	goto	u3460
  2006                           
  2007                           ;main.c: 152: int FMRX_Nprg[5] = {2,4,8,8,7};
  2008  0F60  30B4               	movlw	main@FMRX_Nprg& (0+255)
  2009  0F61  0084               	movwf	4
  2010  0F62  30C4               	movlw	low main@F1465
  2011  0F63  00E2               	movwf	??_main
  2012  0F64  0804               	movf	4,w
  2013  0F65  00E3               	movwf	??_main+1
  2014  0F66  300A               	movlw	10
  2015  0F67  00E4               	movwf	??_main+2
  2016  0F68                     u3470:	
  2017  0F68  0862               	movf	??_main,w
  2018  0F69  0084               	movwf	4
  2019  0F6A  1783               	bsf	3,7	;select IRP bank3
  2020  0F6B  0800               	movf	0,w
  2021  0F6C  00E5               	movwf	??_main+3
  2022  0F6D  0AE2               	incf	??_main,f
  2023  0F6E  0863               	movf	??_main+1,w
  2024  0F6F  0084               	movwf	4
  2025  0F70  1383               	bcf	3,7	;select IRP bank1
  2026  0F71  0865               	movf	??_main+3,w
  2027  0F72  0080               	movwf	0
  2028  0F73  0AE3               	incf	??_main+1,f
  2029  0F74  0BE4               	decfsz	??_main+2,f
  2030  0F75  2F68               	goto	u3470
  2031                           
  2032                           ;main.c: 154: FMTX(FMTX_Nref, FMTX_Nprg);
  2033  0F76  1683               	bsf	3,5	;RP0=1, select bank1
  2034  0F77  1303               	bcf	3,6	;RP1=0, select bank1
  2035  0F78  0846               	movf	(_FMTX_Nref+1)^(0+128),w
  2036  0F79  1283               	bcf	3,5	;RP0=0, select bank0
  2037  0F7A  1303               	bcf	3,6	;RP1=0, select bank0
  2038  0F7B  00DD               	movwf	FMTX@Nref+1
  2039  0F7C  1683               	bsf	3,5	;RP0=1, select bank1
  2040  0F7D  1303               	bcf	3,6	;RP1=0, select bank1
  2041  0F7E  0845               	movf	_FMTX_Nref^(0+128),w
  2042  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  2043  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  2044  0F81  00DC               	movwf	FMTX@Nref
  2045  0F82  30A0               	movlw	(low (main@FMTX_Nprg| 0))& (0+255)
  2046  0F83  00DE               	movwf	FMTX@Nprg
  2047  0F84  3000               	movlw	0
  2048  0F85  00DF               	movwf	FMTX@Nprg+1
  2049  0F86  120A  158A  2132  120A  158A  	fcall	_FMTX
  2050                           
  2051                           ;main.c: 155: CWTX(CWTX_Nref, CWTX_Nprg);
  2052  0F8B  1683               	bsf	3,5	;RP0=1, select bank1
  2053  0F8C  1303               	bcf	3,6	;RP1=0, select bank1
  2054  0F8D  0844               	movf	(_CWTX_Nref+1)^(0+128),w
  2055  0F8E  1283               	bcf	3,5	;RP0=0, select bank0
  2056  0F8F  1303               	bcf	3,6	;RP1=0, select bank0
  2057  0F90  00DD               	movwf	CWTX@Nref+1
  2058  0F91  1683               	bsf	3,5	;RP0=1, select bank1
  2059  0F92  1303               	bcf	3,6	;RP1=0, select bank1
  2060  0F93  0843               	movf	_CWTX_Nref^(0+128),w
  2061  0F94  1283               	bcf	3,5	;RP0=0, select bank0
  2062  0F95  1303               	bcf	3,6	;RP1=0, select bank0
  2063  0F96  00DC               	movwf	CWTX@Nref
  2064  0F97  30AA               	movlw	(low (main@CWTX_Nprg| 0))& (0+255)
  2065  0F98  00DE               	movwf	CWTX@Nprg
  2066  0F99  3000               	movlw	0
  2067  0F9A  00DF               	movwf	CWTX@Nprg+1
  2068  0F9B  120A  158A  20DA  120A  158A  	fcall	_CWTX
  2069                           
  2070                           ;main.c: 156: FMRX(FMRX_Nref, FMRX_Nprg);
  2071  0FA0  1683               	bsf	3,5	;RP0=1, select bank1
  2072  0FA1  1303               	bcf	3,6	;RP1=0, select bank1
  2073  0FA2  0842               	movf	(_FMRX_Nref+1)^(0+128),w
  2074  0FA3  1283               	bcf	3,5	;RP0=0, select bank0
  2075  0FA4  1303               	bcf	3,6	;RP1=0, select bank0
  2076  0FA5  00DD               	movwf	FMRX@Nref+1
  2077  0FA6  1683               	bsf	3,5	;RP0=1, select bank1
  2078  0FA7  1303               	bcf	3,6	;RP1=0, select bank1
  2079  0FA8  0841               	movf	_FMRX_Nref^(0+128),w
  2080  0FA9  1283               	bcf	3,5	;RP0=0, select bank0
  2081  0FAA  1303               	bcf	3,6	;RP1=0, select bank0
  2082  0FAB  00DC               	movwf	FMRX@Nref
  2083  0FAC  30B4               	movlw	(low (main@FMRX_Nprg| 0))& (0+255)
  2084  0FAD  00DE               	movwf	FMRX@Nprg
  2085  0FAE  3000               	movlw	0
  2086  0FAF  00DF               	movwf	FMRX@Nprg+1
  2087  0FB0  120A  158A  2106  120A  158A  	fcall	_FMRX
  2088                           
  2089                           ;main.c: 157: _delay((unsigned long)((500)*(10000000/4000.0)));
  2090  0FB5  3007               	movlw	7
  2091  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  2092  0FB7  1303               	bcf	3,6	;RP1=0, select bank0
  2093  0FB8  00E4               	movwf	??_main+2
  2094  0FB9  3058               	movlw	88
  2095  0FBA  00E3               	movwf	??_main+1
  2096  0FBB  3059               	movlw	89
  2097  0FBC  00E2               	movwf	??_main
  2098  0FBD                     u3577:	
  2099  0FBD  0BE2               	decfsz	??_main,f
  2100  0FBE  2FBD               	goto	u3577
  2101  0FBF  0BE3               	decfsz	??_main+1,f
  2102  0FC0  2FBD               	goto	u3577
  2103  0FC1  0BE4               	decfsz	??_main+2,f
  2104  0FC2  2FBD               	goto	u3577
  2105                           
  2106                           ;main.c: 174: }
  2107                           
  2108                           ;main.c: 173: break;
  2109                           
  2110                           ;main.c: 171: default:
  2111                           
  2112                           ;main.c: 170: break;
  2113                           
  2114                           ;main.c: 168: case 'T':
  2115                           
  2116                           ;main.c: 167: break;
  2117                           
  2118                           ;main.c: 165: case 'N':
  2119                           
  2120                           ;main.c: 164: break;
  2121                           
  2122                           ;main.c: 162: case '3':
  2123                           
  2124                           ;main.c: 161: break;
  2125                           
  2126                           ;main.c: 159: case 'I':
  2127                           
  2128                           ;main.c: 158: break;
  2129  0FC3  2FF1               	goto	l442
  2130  0FC4                     l3757:	
  2131  0FC4  1683               	bsf	3,5	;RP0=1, select bank1
  2132  0FC5  1303               	bcf	3,6	;RP1=0, select bank1
  2133  0FC6  0840               	movf	main@dData^(0+128),w
  2134  0FC7  3E03               	addlw	3
  2135  0FC8  0084               	movwf	4
  2136  0FC9  1783               	bsf	3,7	;select IRP bank2
  2137  0FCA  0800               	movf	0,w
  2138                           
  2139                           ; Switch size 1, requested type "space"
  2140                           ; Number of cases is 5, Range of values is 51 to 84
  2141                           ; switch strategies available:
  2142                           ; Name         Instructions Cycles
  2143                           ; simple_byte           16     9 (average)
  2144                           ; direct_byte          113    11 (fixed)
  2145                           ; jumptable            263     9 (fixed)
  2146                           ;	Chosen strategy is simple_byte
  2147  0FCB  3A33               	xorlw	51	; case 51
  2148  0FCC  1903               	skipnz
  2149  0FCD  2FF1               	goto	l442
  2150  0FCE  3A76               	xorlw	118	; case 69
  2151  0FCF  1903               	skipnz
  2152  0FD0  2F1F               	goto	l3737
  2153  0FD1  3A0C               	xorlw	12	; case 73
  2154  0FD2  1903               	skipnz
  2155  0FD3  2FF1               	goto	l442
  2156  0FD4  3A07               	xorlw	7	; case 78
  2157  0FD5  1903               	skipnz
  2158  0FD6  2FF1               	goto	l442
  2159  0FD7  3A1A               	xorlw	26	; case 84
  2160  0FD8  1903               	skipnz
  2161  0FD9  2FF1               	goto	l442
  2162  0FDA  2FF1               	goto	l442
  2163                           
  2164                           ;main.c: 178: }
  2165                           ;main.c: 179: }else{
  2166                           
  2167                           ;main.c: 176: }else if(dData[2] == 't'){
  2168  0FDB  2FF1               	goto	l442
  2169  0FDC                     l443:	
  2170                           
  2171                           ;main.c: 180: RB2 = 1;
  2172  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  2173  0FDD  1303               	bcf	3,6	;RP1=0, select bank0
  2174  0FDE  1506               	bsf	6,2	;volatile
  2175                           
  2176                           ;main.c: 181: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2177  0FDF  300D               	movlw	13
  2178  0FE0  1283               	bcf	3,5	;RP0=0, select bank0
  2179  0FE1  1303               	bcf	3,6	;RP1=0, select bank0
  2180  0FE2  00E4               	movwf	??_main+2
  2181  0FE3  30AF               	movlw	175
  2182  0FE4  00E3               	movwf	??_main+1
  2183  0FE5  30B5               	movlw	181
  2184  0FE6  00E2               	movwf	??_main
  2185  0FE7                     u3587:	
  2186  0FE7  0BE2               	decfsz	??_main,f
  2187  0FE8  2FE7               	goto	u3587
  2188  0FE9  0BE3               	decfsz	??_main+1,f
  2189  0FEA  2FE7               	goto	u3587
  2190  0FEB  0BE4               	decfsz	??_main+2,f
  2191  0FEC  2FE7               	goto	u3587
  2192  0FED  2FEE               	nop2
  2193                           
  2194                           ;main.c: 182: RB2 = 0;
  2195  0FEE  1283               	bcf	3,5	;RP0=0, select bank0
  2196  0FEF  1303               	bcf	3,6	;RP1=0, select bank0
  2197  0FF0  1106               	bcf	6,2	;volatile
  2198  0FF1                     l442:	
  2199                           
  2200                           ;main.c: 183: }
  2201                           ;main.c: 227: _delay((unsigned long)((500)*(10000000/4000.0)));
  2202  0FF1  3007               	movlw	7
  2203  0FF2  1283               	bcf	3,5	;RP0=0, select bank0
  2204  0FF3  1303               	bcf	3,6	;RP1=0, select bank0
  2205  0FF4  00E4               	movwf	??_main+2
  2206  0FF5  3058               	movlw	88
  2207  0FF6  00E3               	movwf	??_main+1
  2208  0FF7  3059               	movlw	89
  2209  0FF8  00E2               	movwf	??_main
  2210  0FF9                     u3597:	
  2211  0FF9  0BE2               	decfsz	??_main,f
  2212  0FFA  2FF9               	goto	u3597
  2213  0FFB  0BE3               	decfsz	??_main+1,f
  2214  0FFC  2FF9               	goto	u3597
  2215  0FFD  0BE4               	decfsz	??_main+2,f
  2216  0FFE  2FF9               	goto	u3597
  2217  0FFF  2E97               	goto	l3707
  2218  1000                     __end_of_main:	
  2219                           ;main.c: 228: }
  2220                           ;main.c: 229: return;
  2221                           
  2222                           
  2223                           	psect	text1
  2224  09C0                     __ptext1:	
  2225 ;; *************** function _TXOBC_waddress *****************
  2226 ;; Defined at:
  2227 ;;		line 78 in file "UART.c"
  2228 ;; Parameters:    Size  Location     Type
  2229 ;;  TXOBC_wad_he    1    wreg     unsigned char 
  2230 ;;  whigh_addres    1    1[COMMON] unsigned char 
  2231 ;;  wlow_address    1    2[COMMON] unsigned char 
  2232 ;; Auto vars:     Size  Location     Type
  2233 ;;  TXOBC_wad_he    1    5[COMMON] unsigned char 
  2234 ;; Return value:  Size  Location     Type
  2235 ;;                  1    wreg      void 
  2236 ;; Registers used:
  2237 ;;		wreg, status,2, status,0, pclath, cstack
  2238 ;; Tracked objects:
  2239 ;;		On entry : 0/0
  2240 ;;		On exit  : 0/0
  2241 ;;		Unchanged: 0/0
  2242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2243 ;;      Params:         2       0       0       0       0
  2244 ;;      Locals:         1       0       0       0       0
  2245 ;;      Temps:          2       0       0       0       0
  2246 ;;      Totals:         5       0       0       0       0
  2247 ;;Total ram usage:        5 bytes
  2248 ;; Hardware stack levels used:    1
  2249 ;; Hardware stack levels required when called:    1
  2250 ;; This function calls:
  2251 ;;		_putch
  2252 ;; This function is called by:
  2253 ;;		_main
  2254 ;; This function uses a non-reentrant model
  2255 ;;
  2256                           
  2257                           
  2258                           ;psect for function _TXOBC_waddress
  2259  09C0                     _TXOBC_waddress:	
  2260                           
  2261                           ;incstack = 0
  2262                           ; Regs used in _TXOBC_waddress: [wreg+status,2+status,0+pclath+cstack]
  2263                           ;TXOBC_waddress@TXOBC_wad_header stored from wreg
  2264  09C0  00F5               	movwf	TXOBC_waddress@TXOBC_wad_header
  2265                           
  2266                           ;UART.c: 79: RC5 = 1;
  2267  09C1  1283               	bcf	3,5	;RP0=0, select bank0
  2268  09C2  1303               	bcf	3,6	;RP1=0, select bank0
  2269  09C3  1687               	bsf	7,5	;volatile
  2270                           
  2271                           ;UART.c: 80: _delay((unsigned long)((50)*(10000000/4000.0)));
  2272  09C4  30A3               	movlw	163
  2273  09C5  00F4               	movwf	??_TXOBC_waddress+1
  2274  09C6  3055               	movlw	85
  2275  09C7  00F3               	movwf	??_TXOBC_waddress
  2276  09C8                     u3607:	
  2277  09C8  0BF3               	decfsz	??_TXOBC_waddress,f
  2278  09C9  29C8               	goto	u3607
  2279  09CA  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2280  09CB  29C8               	goto	u3607
  2281                           
  2282                           ;UART.c: 81: putch(TXOBC_wad_header);
  2283  09CC  0875               	movf	TXOBC_waddress@TXOBC_wad_header,w
  2284  09CD  160A  118A  27DF  120A  158A  	fcall	_putch
  2285                           
  2286                           ;UART.c: 82: _delay((unsigned long)((50)*(10000000/4000.0)));
  2287  09D2  30A3               	movlw	163
  2288  09D3  00F4               	movwf	??_TXOBC_waddress+1
  2289  09D4  3055               	movlw	85
  2290  09D5  00F3               	movwf	??_TXOBC_waddress
  2291  09D6                     u3617:	
  2292  09D6  0BF3               	decfsz	??_TXOBC_waddress,f
  2293  09D7  29D6               	goto	u3617
  2294  09D8  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2295  09D9  29D6               	goto	u3617
  2296                           
  2297                           ;UART.c: 83: putch(whigh_address);
  2298  09DA  0871               	movf	TXOBC_waddress@whigh_address,w
  2299  09DB  160A  118A  27DF  120A  158A  	fcall	_putch
  2300                           
  2301                           ;UART.c: 84: _delay((unsigned long)((50)*(10000000/4000.0)));
  2302  09E0  30A3               	movlw	163
  2303  09E1  00F4               	movwf	??_TXOBC_waddress+1
  2304  09E2  3055               	movlw	85
  2305  09E3  00F3               	movwf	??_TXOBC_waddress
  2306  09E4                     u3627:	
  2307  09E4  0BF3               	decfsz	??_TXOBC_waddress,f
  2308  09E5  29E4               	goto	u3627
  2309  09E6  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2310  09E7  29E4               	goto	u3627
  2311                           
  2312                           ;UART.c: 85: putch(wlow_address);
  2313  09E8  0872               	movf	TXOBC_waddress@wlow_address,w
  2314  09E9  160A  118A  27DF  120A  158A  	fcall	_putch
  2315                           
  2316                           ;UART.c: 86: _delay((unsigned long)((50)*(10000000/4000.0)));
  2317  09EE  30A3               	movlw	163
  2318  09EF  00F4               	movwf	??_TXOBC_waddress+1
  2319  09F0  3055               	movlw	85
  2320  09F1  00F3               	movwf	??_TXOBC_waddress
  2321  09F2                     u3637:	
  2322  09F2  0BF3               	decfsz	??_TXOBC_waddress,f
  2323  09F3  29F2               	goto	u3637
  2324  09F4  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2325  09F5  29F2               	goto	u3637
  2326                           
  2327                           ;UART.c: 87: RC5 = 0;
  2328  09F6  1283               	bcf	3,5	;RP0=0, select bank0
  2329  09F7  1303               	bcf	3,6	;RP1=0, select bank0
  2330  09F8  1287               	bcf	7,5	;volatile
  2331  09F9  0008               	return
  2332  09FA                     __end_of_TXOBC_waddress:	
  2333                           
  2334                           	psect	text2
  2335  0007                     __ptext2:	
  2336 ;; *************** function _Reset_EPS *****************
  2337 ;; Defined at:
  2338 ;;		line 19 in file "EPS.c"
  2339 ;; Parameters:    Size  Location     Type
  2340 ;;		None
  2341 ;; Auto vars:     Size  Location     Type
  2342 ;;		None
  2343 ;; Return value:  Size  Location     Type
  2344 ;;                  1    wreg      void 
  2345 ;; Registers used:
  2346 ;;		wreg
  2347 ;; Tracked objects:
  2348 ;;		On entry : 0/0
  2349 ;;		On exit  : 0/0
  2350 ;;		Unchanged: 0/0
  2351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2352 ;;      Params:         0       0       0       0       0
  2353 ;;      Locals:         0       0       0       0       0
  2354 ;;      Temps:          3       0       0       0       0
  2355 ;;      Totals:         3       0       0       0       0
  2356 ;;Total ram usage:        3 bytes
  2357 ;; Hardware stack levels used:    1
  2358 ;; This function calls:
  2359 ;;		Nothing
  2360 ;; This function is called by:
  2361 ;;		_main
  2362 ;; This function uses a non-reentrant model
  2363 ;;
  2364                           
  2365                           
  2366                           ;psect for function _Reset_EPS
  2367  0007                     _Reset_EPS:	
  2368                           
  2369                           ;EPS.c: 20: RB4 = 1;
  2370                           
  2371                           ;incstack = 0
  2372                           ; Regs used in _Reset_EPS: [wreg]
  2373  0007  1283               	bcf	3,5	;RP0=0, select bank0
  2374  0008  1303               	bcf	3,6	;RP1=0, select bank0
  2375  0009  1606               	bsf	6,4	;volatile
  2376                           
  2377                           ;EPS.c: 21: RA1 = 1;
  2378  000A  1485               	bsf	5,1	;volatile
  2379                           
  2380                           ;EPS.c: 22: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2381  000B  3040               	movlw	64
  2382  000C  00F2               	movwf	??_Reset_EPS+2
  2383  000D  306A               	movlw	106
  2384  000E  00F1               	movwf	??_Reset_EPS+1
  2385  000F  3097               	movlw	151
  2386  0010  00F0               	movwf	??_Reset_EPS
  2387  0011                     u3647:	
  2388  0011  0BF0               	decfsz	??_Reset_EPS,f
  2389  0012  2811               	goto	u3647
  2390  0013  0BF1               	decfsz	??_Reset_EPS+1,f
  2391  0014  2811               	goto	u3647
  2392  0015  0BF2               	decfsz	??_Reset_EPS+2,f
  2393  0016  2811               	goto	u3647
  2394  0017  2818               	nop2
  2395                           
  2396                           ;EPS.c: 23: RB4 = 0;
  2397  0018  1283               	bcf	3,5	;RP0=0, select bank0
  2398  0019  1303               	bcf	3,6	;RP1=0, select bank0
  2399  001A  1206               	bcf	6,4	;volatile
  2400                           
  2401                           ;EPS.c: 24: RA1 = 0;
  2402  001B  1085               	bcf	5,1	;volatile
  2403                           
  2404                           ;EPS.c: 25: _delay((unsigned long)((500)*(10000000/4000.0)));
  2405  001C  3007               	movlw	7
  2406  001D  00F2               	movwf	??_Reset_EPS+2
  2407  001E  3058               	movlw	88
  2408  001F  00F1               	movwf	??_Reset_EPS+1
  2409  0020  3059               	movlw	89
  2410  0021  00F0               	movwf	??_Reset_EPS
  2411  0022                     u3657:	
  2412  0022  0BF0               	decfsz	??_Reset_EPS,f
  2413  0023  2822               	goto	u3657
  2414  0024  0BF1               	decfsz	??_Reset_EPS+1,f
  2415  0025  2822               	goto	u3657
  2416  0026  0BF2               	decfsz	??_Reset_EPS+2,f
  2417  0027  2822               	goto	u3657
  2418  0028  2829               	nop2
  2419  0029  0008               	return
  2420  002A                     __end_of_Reset_EPS:	
  2421                           
  2422                           	psect	text3
  2423  0C47                     __ptext3:	
  2424 ;; *************** function _ReceivePacket_data *****************
  2425 ;; Defined at:
  2426 ;;		line 359 in file "decode_AX25.c"
  2427 ;; Parameters:    Size  Location     Type
  2428 ;;		None
  2429 ;; Auto vars:     Size  Location     Type
  2430 ;;  i               2   31[BANK0 ] unsigned int 
  2431 ;;  fcschecker      2   29[BANK0 ] unsigned int 
  2432 ;; Return value:  Size  Location     Type
  2433 ;;                  1    wreg      PTR unsigned char 
  2434 ;; Registers used:
  2435 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2436 ;; Tracked objects:
  2437 ;;		On entry : 0/0
  2438 ;;		On exit  : 0/0
  2439 ;;		Unchanged: 0/0
  2440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2441 ;;      Params:         0       0       0       0       0
  2442 ;;      Locals:         0       4       0       0       0
  2443 ;;      Temps:          2       0       0       0       0
  2444 ;;      Totals:         2       4       0       0       0
  2445 ;;Total ram usage:        6 bytes
  2446 ;; Hardware stack levels used:    1
  2447 ;; Hardware stack levels required when called:    2
  2448 ;; This function calls:
  2449 ;;		_fcscheck
  2450 ;;		_getdata
  2451 ;;		_waitFlag
  2452 ;; This function is called by:
  2453 ;;		_main
  2454 ;; This function uses a non-reentrant model
  2455 ;;
  2456                           
  2457                           
  2458                           ;psect for function _ReceivePacket_data
  2459  0C47                     _ReceivePacket_data:	
  2460                           
  2461                           ;decode_AX25.c: 360: UINT fcschecker;
  2462                           ;decode_AX25.c: 363: waitFlag();
  2463                           
  2464                           ;incstack = 0
  2465                           ; Regs used in _ReceivePacket_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2466  0C47  120A  118A  2327  120A  158A  	fcall	_waitFlag
  2467                           
  2468                           ;decode_AX25.c: 365: getdata();
  2469  0C4C  120A  158A  23E6  120A  158A  	fcall	_getdata
  2470                           
  2471                           ;decode_AX25.c: 367: fcschecker = fcscheck();
  2472  0C51  120A  118A  202A  120A  158A  	fcall	_fcscheck
  2473  0C56  0871               	movf	?_fcscheck+1,w
  2474  0C57  1283               	bcf	3,5	;RP0=0, select bank0
  2475  0C58  1303               	bcf	3,6	;RP1=0, select bank0
  2476  0C59  00BE               	movwf	ReceivePacket_data@fcschecker+1
  2477  0C5A  0870               	movf	?_fcscheck,w
  2478  0C5B  00BD               	movwf	ReceivePacket_data@fcschecker
  2479                           
  2480                           ;decode_AX25.c: 369: if(fcschecker == 1){
  2481  0C5C  033D               	decf	ReceivePacket_data@fcschecker,w
  2482  0C5D  043E               	iorwf	ReceivePacket_data@fcschecker+1,w
  2483  0C5E  1D03               	btfss	3,2
  2484  0C5F  2CA6               	goto	l3355
  2485                           
  2486                           ;decode_AX25.c: 370: for(UINT i=0; i<commandSize; i++){
  2487  0C60  01BF               	clrf	ReceivePacket_data@i
  2488  0C61  01C0               	clrf	ReceivePacket_data@i+1
  2489  0C62  3001               	movlw	low (_commandSize-__stringbase)
  2490  0C63  0084               	movwf	4
  2491  0C64  120A  158A  2000  120A  158A  	fcall	stringdir
  2492  0C69  00FA               	movwf	??_ReceivePacket_data
  2493  0C6A  120A  158A  2000  120A  158A  	fcall	stringdir
  2494  0C6F  00FB               	movwf	??_ReceivePacket_data+1
  2495  0C70  087B               	movf	??_ReceivePacket_data+1,w
  2496  0C71  0240               	subwf	ReceivePacket_data@i+1,w
  2497  0C72  1D03               	skipz
  2498  0C73  2C76               	goto	u3055
  2499  0C74  087A               	movf	??_ReceivePacket_data,w
  2500  0C75  023F               	subwf	ReceivePacket_data@i,w
  2501  0C76                     u3055:	
  2502  0C76  1803               	btfsc	3,0
  2503  0C77  2CA0               	goto	l3347
  2504  0C78                     l3341:	
  2505                           
  2506                           ;decode_AX25.c: 371: dData[i] = dPacket[i+20];
  2507  0C78  083F               	movf	ReceivePacket_data@i,w
  2508  0C79  3E14               	addlw	20
  2509  0C7A  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2510  0C7B  0084               	movwf	4
  2511  0C7C  1783               	bsf	3,7	;select IRP bank3
  2512  0C7D  0800               	movf	0,w
  2513  0C7E  00FA               	movwf	??_ReceivePacket_data
  2514  0C7F  083F               	movf	ReceivePacket_data@i,w
  2515  0C80  3E10               	addlw	(low (_dData| (0+256)))& (0+255)
  2516  0C81  0084               	movwf	4
  2517  0C82  087A               	movf	??_ReceivePacket_data,w
  2518  0C83  0080               	movwf	0
  2519  0C84  3001               	movlw	1
  2520  0C85  07BF               	addwf	ReceivePacket_data@i,f
  2521  0C86  1803               	skipnc
  2522  0C87  0AC0               	incf	ReceivePacket_data@i+1,f
  2523  0C88  3000               	movlw	0
  2524  0C89  07C0               	addwf	ReceivePacket_data@i+1,f
  2525  0C8A  3001               	movlw	low (_commandSize-__stringbase)
  2526  0C8B  0084               	movwf	4
  2527  0C8C  120A  158A  2000  120A  158A  	fcall	stringdir
  2528  0C91  00FA               	movwf	??_ReceivePacket_data
  2529  0C92  120A  158A  2000  120A  158A  	fcall	stringdir
  2530  0C97  00FB               	movwf	??_ReceivePacket_data+1
  2531  0C98  087B               	movf	??_ReceivePacket_data+1,w
  2532  0C99  0240               	subwf	ReceivePacket_data@i+1,w
  2533  0C9A  1D03               	skipz
  2534  0C9B  2C9E               	goto	u3065
  2535  0C9C  087A               	movf	??_ReceivePacket_data,w
  2536  0C9D  023F               	subwf	ReceivePacket_data@i,w
  2537  0C9E                     u3065:	
  2538  0C9E  1C03               	skipc
  2539  0C9F  2C78               	goto	l3341
  2540  0CA0                     l3347:	
  2541                           
  2542                           ;decode_AX25.c: 372: }
  2543                           ;decode_AX25.c: 373: dPacketnum = 0;
  2544  0CA0  01E8               	clrf	_dPacketnum
  2545  0CA1  01E9               	clrf	_dPacketnum+1
  2546                           
  2547                           ;decode_AX25.c: 374: rcv_state = 0;
  2548  0CA2  01EA               	clrf	_rcv_state
  2549  0CA3  01EB               	clrf	_rcv_state+1
  2550                           
  2551                           ;decode_AX25.c: 375: return dData;
  2552  0CA4  3010               	movlw	(low (_dData| (0+256)))& (0+255)
  2553                           
  2554                           ;decode_AX25.c: 376: }else{
  2555  0CA5  0008               	return
  2556  0CA6                     l3355:	
  2557                           
  2558                           ;decode_AX25.c: 377: dPacketnum = 0;
  2559  0CA6  01E8               	clrf	_dPacketnum
  2560  0CA7  01E9               	clrf	_dPacketnum+1
  2561                           
  2562                           ;decode_AX25.c: 378: rcv_state = 0;
  2563  0CA8  01EA               	clrf	_rcv_state
  2564  0CA9  01EB               	clrf	_rcv_state+1
  2565                           
  2566                           ;decode_AX25.c: 379: return 0x00;
  2567  0CAA  3000               	movlw	0
  2568  0CAB  0008               	return
  2569  0CAC                     __end_of_ReceivePacket_data:	
  2570                           
  2571                           	psect	text4
  2572  0327                     __ptext4:	
  2573 ;; *************** function _waitFlag *****************
  2574 ;; Defined at:
  2575 ;;		line 54 in file "decode_AX25.c"
  2576 ;; Parameters:    Size  Location     Type
  2577 ;;		None
  2578 ;; Auto vars:     Size  Location     Type
  2579 ;;  j               2   24[BANK0 ] unsigned int 
  2580 ;;  j               2   10[BANK0 ] unsigned int 
  2581 ;;  j               2   22[BANK0 ] unsigned int 
  2582 ;;  j               2    8[BANK0 ] unsigned int 
  2583 ;;  j               2   20[BANK0 ] unsigned int 
  2584 ;;  j               2    6[BANK0 ] unsigned int 
  2585 ;;  j               2   18[BANK0 ] unsigned int 
  2586 ;;  j               2    4[BANK0 ] unsigned int 
  2587 ;;  j               2   16[BANK0 ] unsigned int 
  2588 ;;  j               2    2[BANK0 ] unsigned int 
  2589 ;;  i               2    0[BANK0 ] unsigned int 
  2590 ;;  j               2   14[BANK0 ] unsigned int 
  2591 ;;  j               2   12[BANK0 ] unsigned int 
  2592 ;;  flag_judge      2   26[BANK0 ] unsigned int 
  2593 ;;  buf             1   28[BANK0 ] unsigned char 
  2594 ;; Return value:  Size  Location     Type
  2595 ;;                  1    wreg      void 
  2596 ;; Registers used:
  2597 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2598 ;; Tracked objects:
  2599 ;;		On entry : 0/0
  2600 ;;		On exit  : 0/0
  2601 ;;		Unchanged: 0/0
  2602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2603 ;;      Params:         0       0       0       0       0
  2604 ;;      Locals:         0      29       0       0       0
  2605 ;;      Temps:          4       0       0       0       0
  2606 ;;      Totals:         4      29       0       0       0
  2607 ;;Total ram usage:       33 bytes
  2608 ;; Hardware stack levels used:    1
  2609 ;; Hardware stack levels required when called:    1
  2610 ;; This function calls:
  2611 ;;		_getbit
  2612 ;; This function is called by:
  2613 ;;		_ReceivePacket_data
  2614 ;;		_ReceivePacket
  2615 ;; This function uses a non-reentrant model
  2616 ;;
  2617                           
  2618                           
  2619                           ;psect for function _waitFlag
  2620  0327                     _waitFlag:	
  2621                           
  2622                           ;decode_AX25.c: 55: UINT flag_judge;
  2623                           ;decode_AX25.c: 56: UBYTE buf = 0xff;
  2624                           
  2625                           ;incstack = 0
  2626                           ; Regs used in _waitFlag: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2627  0327  30FF               	movlw	255
  2628  0328  00F6               	movwf	??_waitFlag
  2629  0329  0876               	movf	??_waitFlag,w
  2630  032A  1283               	bcf	3,5	;RP0=0, select bank0
  2631  032B  1303               	bcf	3,6	;RP1=0, select bank0
  2632  032C  00BC               	movwf	waitFlag@buf
  2633  032D                     L6:	
  2634                           
  2635                           ;decode_AX25.c: 271: rcv_state = 0;
  2636  032D  01EA               	clrf	_rcv_state
  2637  032E  01EB               	clrf	_rcv_state+1
  2638  032F                     l3025:	
  2639  032F  3000               	movlw	0
  2640  0330  026B               	subwf	_rcv_state+1,w
  2641  0331  3002               	movlw	2
  2642  0332  1903               	skipnz
  2643  0333  026A               	subwf	_rcv_state,w
  2644  0334  1803               	btfsc	3,0
  2645  0335  0008               	return
  2646  0336                     l2659:	
  2647                           ;decode_AX25.c: 59: while(buf != 0x7e){
  2648                           
  2649                           ;decode_AX25.c: 58: while(rcv_state < 2){
  2650                           
  2651                           ;decode_AX25.c: 57: rcv_state = 0;
  2652                           
  2653  0336  307E               	movlw	126
  2654  0337  063C               	xorwf	waitFlag@buf,w
  2655  0338  1903               	btfsc	3,2
  2656  0339  2B86               	goto	l2681
  2657                           
  2658                           ;decode_AX25.c: 60: flag_judge = getbit();
  2659  033A  120A  158A  2286  120A  118A  	fcall	_getbit
  2660  033F  0871               	movf	?_getbit+1,w
  2661  0340  1283               	bcf	3,5	;RP0=0, select bank0
  2662  0341  1303               	bcf	3,6	;RP1=0, select bank0
  2663  0342  00BB               	movwf	waitFlag@flag_judge+1
  2664  0343  0870               	movf	?_getbit,w
  2665  0344  00BA               	movwf	waitFlag@flag_judge
  2666                           
  2667                           ;decode_AX25.c: 61: buf = buf << 1;
  2668  0345  083C               	movf	waitFlag@buf,w
  2669  0346  00F6               	movwf	??_waitFlag
  2670  0347  0776               	addwf	??_waitFlag,w
  2671  0348  00F7               	movwf	??_waitFlag+1
  2672  0349  0877               	movf	??_waitFlag+1,w
  2673  034A  00BC               	movwf	waitFlag@buf
  2674                           
  2675                           ;decode_AX25.c: 63: buf = buf | 0x00;
  2676  034B  083A               	movf	waitFlag@flag_judge,w
  2677  034C  043B               	iorwf	waitFlag@flag_judge+1,w
  2678  034D  1903               	btfsc	3,2
  2679  034E  2B36               	goto	l2659
  2680                           
  2681                           ;decode_AX25.c: 65: buf = buf | 0x01;
  2682                           
  2683                           ;decode_AX25.c: 64: }else{
  2684  034F  083C               	movf	waitFlag@buf,w
  2685  0350  3801               	iorlw	1
  2686  0351  00F6               	movwf	??_waitFlag
  2687  0352  0876               	movf	??_waitFlag,w
  2688  0353  00BC               	movwf	waitFlag@buf
  2689  0354  2B36               	goto	l2659
  2690  0355                     l2661:	
  2691                           ;decode_AX25.c: 66: }
  2692                           ;decode_AX25.c: 67: }
  2693                           ;decode_AX25.c: 71: while(buf == 0x7e){
  2694                           
  2695                           
  2696                           ;decode_AX25.c: 72: for(UINT i=0;i<8;i++){
  2697  0355  01A0               	clrf	waitFlag@i
  2698  0356  01A1               	clrf	waitFlag@i+1
  2699  0357  3000               	movlw	0
  2700  0358  0221               	subwf	waitFlag@i+1,w
  2701  0359  3008               	movlw	8
  2702  035A  1903               	skipnz
  2703  035B  0220               	subwf	waitFlag@i,w
  2704  035C  1803               	btfsc	3,0
  2705  035D  2B86               	goto	l2681
  2706  035E                     l2667:	
  2707                           
  2708                           ;decode_AX25.c: 73: flag_judge = getbit();
  2709  035E  120A  158A  2286  120A  118A  	fcall	_getbit
  2710  0363  0871               	movf	?_getbit+1,w
  2711  0364  1283               	bcf	3,5	;RP0=0, select bank0
  2712  0365  1303               	bcf	3,6	;RP1=0, select bank0
  2713  0366  00BB               	movwf	waitFlag@flag_judge+1
  2714  0367  0870               	movf	?_getbit,w
  2715  0368  00BA               	movwf	waitFlag@flag_judge
  2716                           
  2717                           ;decode_AX25.c: 74: buf = buf >> 1;
  2718  0369  083C               	movf	waitFlag@buf,w
  2719  036A  00F6               	movwf	??_waitFlag
  2720  036B  1003               	clrc
  2721  036C  0C76               	rrf	??_waitFlag,w
  2722  036D  00F7               	movwf	??_waitFlag+1
  2723  036E  0877               	movf	??_waitFlag+1,w
  2724  036F  00BC               	movwf	waitFlag@buf
  2725                           
  2726                           ;decode_AX25.c: 76: buf = buf | 0x00;
  2727  0370  083A               	movf	waitFlag@flag_judge,w
  2728  0371  043B               	iorwf	waitFlag@flag_judge+1,w
  2729  0372  1903               	btfsc	3,2
  2730  0373  2B79               	goto	l2677
  2731                           
  2732                           ;decode_AX25.c: 78: buf = buf | 0x80;
  2733                           
  2734                           ;decode_AX25.c: 77: }else{
  2735  0374  083C               	movf	waitFlag@buf,w
  2736  0375  3880               	iorlw	128
  2737  0376  00F6               	movwf	??_waitFlag
  2738  0377  0876               	movf	??_waitFlag,w
  2739  0378  00BC               	movwf	waitFlag@buf
  2740  0379                     l2677:	
  2741  0379  3001               	movlw	1
  2742  037A  07A0               	addwf	waitFlag@i,f
  2743  037B  1803               	skipnc
  2744  037C  0AA1               	incf	waitFlag@i+1,f
  2745  037D  3000               	movlw	0
  2746  037E  07A1               	addwf	waitFlag@i+1,f
  2747  037F  3000               	movlw	0
  2748  0380  0221               	subwf	waitFlag@i+1,w
  2749  0381  3008               	movlw	8
  2750  0382  1903               	skipnz
  2751  0383  0220               	subwf	waitFlag@i,w
  2752  0384  1C03               	skipc
  2753  0385  2B5E               	goto	l2667
  2754  0386                     l2681:	
  2755  0386  307E               	movlw	126
  2756  0387  063C               	xorwf	waitFlag@buf,w
  2757  0388  1903               	btfsc	3,2
  2758  0389  2B55               	goto	l2661
  2759                           
  2760                           ;decode_AX25.c: 79: }
  2761                           ;decode_AX25.c: 80: }
  2762                           ;decode_AX25.c: 81: }
  2763                           ;decode_AX25.c: 82: if(buf == ("JQ1YCZ"[0] << 1)){
  2764  038A  300A               	movlw	low (STR_1-__stringbase)
  2765  038B  0084               	movwf	4
  2766  038C  120A  158A  2000  120A  118A  	fcall	stringdir
  2767  0391  00F6               	movwf	??_waitFlag
  2768  0392  01F7               	clrf	??_waitFlag+1
  2769  0393  1003               	clrc
  2770  0394  0DF6               	rlf	??_waitFlag,f
  2771  0395  0DF7               	rlf	??_waitFlag+1,f
  2772  0396  083C               	movf	waitFlag@buf,w
  2773  0397  00F8               	movwf	??_waitFlag+2
  2774  0398  01F9               	clrf	??_waitFlag+3
  2775  0399  0877               	movf	??_waitFlag+1,w
  2776  039A  0679               	xorwf	??_waitFlag+3,w
  2777  039B  1D03               	skipz
  2778  039C  2B9F               	goto	u2145
  2779  039D  0876               	movf	??_waitFlag,w
  2780  039E  0678               	xorwf	??_waitFlag+2,w
  2781  039F                     u2145:	
  2782  039F  1D03               	skipz
  2783  03A0  2D64               	goto	l2831
  2784                           
  2785                           ;decode_AX25.c: 83: dPacket[dPacketnum] = buf;
  2786  03A1  083C               	movf	waitFlag@buf,w
  2787  03A2  00F6               	movwf	??_waitFlag
  2788  03A3  0868               	movf	_dPacketnum,w
  2789  03A4  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2790  03A5  0084               	movwf	4
  2791  03A6  0876               	movf	??_waitFlag,w
  2792  03A7  1783               	bsf	3,7	;select IRP bank3
  2793  03A8  0080               	movwf	0
  2794                           
  2795                           ;decode_AX25.c: 84: dPacketnum ++;
  2796  03A9  3001               	movlw	1
  2797  03AA  07E8               	addwf	_dPacketnum,f
  2798  03AB  1803               	skipnc
  2799  03AC  0AE9               	incf	_dPacketnum+1,f
  2800  03AD  3000               	movlw	0
  2801  03AE  07E9               	addwf	_dPacketnum+1,f
  2802                           
  2803                           ;decode_AX25.c: 85: for(UINT j=0;j<8;j++){
  2804  03AF  01A2               	clrf	waitFlag@j
  2805  03B0  01A3               	clrf	waitFlag@j+1
  2806  03B1  3000               	movlw	0
  2807  03B2  0223               	subwf	waitFlag@j+1,w
  2808  03B3  3008               	movlw	8
  2809  03B4  1903               	skipnz
  2810  03B5  0222               	subwf	waitFlag@j,w
  2811  03B6  1803               	btfsc	3,0
  2812  03B7  2BE0               	goto	l2709
  2813  03B8                     l2695:	
  2814                           
  2815                           ;decode_AX25.c: 86: flag_judge = getbit();
  2816  03B8  120A  158A  2286  120A  118A  	fcall	_getbit
  2817  03BD  0871               	movf	?_getbit+1,w
  2818  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  2819  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  2820  03C0  00BB               	movwf	waitFlag@flag_judge+1
  2821  03C1  0870               	movf	?_getbit,w
  2822  03C2  00BA               	movwf	waitFlag@flag_judge
  2823                           
  2824                           ;decode_AX25.c: 87: buf = buf >> 1;
  2825  03C3  083C               	movf	waitFlag@buf,w
  2826  03C4  00F6               	movwf	??_waitFlag
  2827  03C5  1003               	clrc
  2828  03C6  0C76               	rrf	??_waitFlag,w
  2829  03C7  00F7               	movwf	??_waitFlag+1
  2830  03C8  0877               	movf	??_waitFlag+1,w
  2831  03C9  00BC               	movwf	waitFlag@buf
  2832                           
  2833                           ;decode_AX25.c: 89: buf = buf | 0x00;
  2834  03CA  083A               	movf	waitFlag@flag_judge,w
  2835  03CB  043B               	iorwf	waitFlag@flag_judge+1,w
  2836  03CC  1903               	btfsc	3,2
  2837  03CD  2BD3               	goto	l2705
  2838                           
  2839                           ;decode_AX25.c: 91: buf = buf | 0x80;
  2840                           
  2841                           ;decode_AX25.c: 90: }else{
  2842  03CE  083C               	movf	waitFlag@buf,w
  2843  03CF  3880               	iorlw	128
  2844  03D0  00F6               	movwf	??_waitFlag
  2845  03D1  0876               	movf	??_waitFlag,w
  2846  03D2  00BC               	movwf	waitFlag@buf
  2847  03D3                     l2705:	
  2848  03D3  3001               	movlw	1
  2849  03D4  07A2               	addwf	waitFlag@j,f
  2850  03D5  1803               	skipnc
  2851  03D6  0AA3               	incf	waitFlag@j+1,f
  2852  03D7  3000               	movlw	0
  2853  03D8  07A3               	addwf	waitFlag@j+1,f
  2854  03D9  3000               	movlw	0
  2855  03DA  0223               	subwf	waitFlag@j+1,w
  2856  03DB  3008               	movlw	8
  2857  03DC  1903               	skipnz
  2858  03DD  0222               	subwf	waitFlag@j,w
  2859  03DE  1C03               	skipc
  2860  03DF  2BB8               	goto	l2695
  2861  03E0                     l2709:	
  2862                           
  2863                           ;decode_AX25.c: 92: }
  2864                           ;decode_AX25.c: 93: }
  2865                           ;decode_AX25.c: 94: if(buf == ("JQ1YCZ"[1] << 1)){
  2866  03E0  300B               	movlw	low (((STR_1+1)-__stringbase)| (0+32768))
  2867  03E1  0084               	movwf	4
  2868  03E2  120A  158A  2000  120A  118A  	fcall	stringdir
  2869  03E7  00F6               	movwf	??_waitFlag
  2870  03E8  01F7               	clrf	??_waitFlag+1
  2871  03E9  1003               	clrc
  2872  03EA  0DF6               	rlf	??_waitFlag,f
  2873  03EB  0DF7               	rlf	??_waitFlag+1,f
  2874  03EC  083C               	movf	waitFlag@buf,w
  2875  03ED  00F8               	movwf	??_waitFlag+2
  2876  03EE  01F9               	clrf	??_waitFlag+3
  2877  03EF  0877               	movf	??_waitFlag+1,w
  2878  03F0  0679               	xorwf	??_waitFlag+3,w
  2879  03F1  1D03               	skipz
  2880  03F2  2BF5               	goto	u2185
  2881  03F3  0876               	movf	??_waitFlag,w
  2882  03F4  0678               	xorwf	??_waitFlag+2,w
  2883  03F5                     u2185:	
  2884  03F5  1D03               	skipz
  2885  03F6  2D64               	goto	l2831
  2886                           
  2887                           ;decode_AX25.c: 95: dPacket[dPacketnum] = buf;
  2888  03F7  083C               	movf	waitFlag@buf,w
  2889  03F8  00F6               	movwf	??_waitFlag
  2890  03F9  0868               	movf	_dPacketnum,w
  2891  03FA  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2892  03FB  0084               	movwf	4
  2893  03FC  0876               	movf	??_waitFlag,w
  2894  03FD  1783               	bsf	3,7	;select IRP bank3
  2895  03FE  0080               	movwf	0
  2896                           
  2897                           ;decode_AX25.c: 96: dPacketnum ++;
  2898  03FF  3001               	movlw	1
  2899  0400  07E8               	addwf	_dPacketnum,f
  2900  0401  1803               	skipnc
  2901  0402  0AE9               	incf	_dPacketnum+1,f
  2902  0403  3000               	movlw	0
  2903  0404  07E9               	addwf	_dPacketnum+1,f
  2904                           
  2905                           ;decode_AX25.c: 97: for(UINT j=0;j<8;j++){
  2906  0405  01A4               	clrf	waitFlag@j_116
  2907  0406  01A5               	clrf	waitFlag@j_116+1
  2908  0407  3000               	movlw	0
  2909  0408  0225               	subwf	waitFlag@j_116+1,w
  2910  0409  3008               	movlw	8
  2911  040A  1903               	skipnz
  2912  040B  0224               	subwf	waitFlag@j_116,w
  2913  040C  1803               	btfsc	3,0
  2914  040D  2C36               	goto	l2735
  2915  040E                     l2721:	
  2916                           
  2917                           ;decode_AX25.c: 98: flag_judge = getbit();
  2918  040E  120A  158A  2286  120A  118A  	fcall	_getbit
  2919  0413  0871               	movf	?_getbit+1,w
  2920  0414  1283               	bcf	3,5	;RP0=0, select bank0
  2921  0415  1303               	bcf	3,6	;RP1=0, select bank0
  2922  0416  00BB               	movwf	waitFlag@flag_judge+1
  2923  0417  0870               	movf	?_getbit,w
  2924  0418  00BA               	movwf	waitFlag@flag_judge
  2925                           
  2926                           ;decode_AX25.c: 99: buf = buf >> 1;
  2927  0419  083C               	movf	waitFlag@buf,w
  2928  041A  00F6               	movwf	??_waitFlag
  2929  041B  1003               	clrc
  2930  041C  0C76               	rrf	??_waitFlag,w
  2931  041D  00F7               	movwf	??_waitFlag+1
  2932  041E  0877               	movf	??_waitFlag+1,w
  2933  041F  00BC               	movwf	waitFlag@buf
  2934                           
  2935                           ;decode_AX25.c: 101: buf = buf | 0x00;
  2936  0420  083A               	movf	waitFlag@flag_judge,w
  2937  0421  043B               	iorwf	waitFlag@flag_judge+1,w
  2938  0422  1903               	btfsc	3,2
  2939  0423  2C29               	goto	l2731
  2940                           
  2941                           ;decode_AX25.c: 103: buf = buf | 0x80;
  2942                           
  2943                           ;decode_AX25.c: 102: }else{
  2944  0424  083C               	movf	waitFlag@buf,w
  2945  0425  3880               	iorlw	128
  2946  0426  00F6               	movwf	??_waitFlag
  2947  0427  0876               	movf	??_waitFlag,w
  2948  0428  00BC               	movwf	waitFlag@buf
  2949  0429                     l2731:	
  2950  0429  3001               	movlw	1
  2951  042A  07A4               	addwf	waitFlag@j_116,f
  2952  042B  1803               	skipnc
  2953  042C  0AA5               	incf	waitFlag@j_116+1,f
  2954  042D  3000               	movlw	0
  2955  042E  07A5               	addwf	waitFlag@j_116+1,f
  2956  042F  3000               	movlw	0
  2957  0430  0225               	subwf	waitFlag@j_116+1,w
  2958  0431  3008               	movlw	8
  2959  0432  1903               	skipnz
  2960  0433  0224               	subwf	waitFlag@j_116,w
  2961  0434  1C03               	skipc
  2962  0435  2C0E               	goto	l2721
  2963  0436                     l2735:	
  2964                           
  2965                           ;decode_AX25.c: 104: }
  2966                           ;decode_AX25.c: 105: }
  2967                           ;decode_AX25.c: 106: if(buf == ("JQ1YCZ"[2] << 1)){
  2968  0436  300C               	movlw	low (((STR_1+2)-__stringbase)| (0+32768))
  2969  0437  0084               	movwf	4
  2970  0438  120A  158A  2000  120A  118A  	fcall	stringdir
  2971  043D  00F6               	movwf	??_waitFlag
  2972  043E  01F7               	clrf	??_waitFlag+1
  2973  043F  1003               	clrc
  2974  0440  0DF6               	rlf	??_waitFlag,f
  2975  0441  0DF7               	rlf	??_waitFlag+1,f
  2976  0442  083C               	movf	waitFlag@buf,w
  2977  0443  00F8               	movwf	??_waitFlag+2
  2978  0444  01F9               	clrf	??_waitFlag+3
  2979  0445  0877               	movf	??_waitFlag+1,w
  2980  0446  0679               	xorwf	??_waitFlag+3,w
  2981  0447  1D03               	skipz
  2982  0448  2C4B               	goto	u2225
  2983  0449  0876               	movf	??_waitFlag,w
  2984  044A  0678               	xorwf	??_waitFlag+2,w
  2985  044B                     u2225:	
  2986  044B  1D03               	skipz
  2987  044C  2D64               	goto	l2831
  2988                           
  2989                           ;decode_AX25.c: 107: dPacket[dPacketnum] = buf;
  2990  044D  083C               	movf	waitFlag@buf,w
  2991  044E  00F6               	movwf	??_waitFlag
  2992  044F  0868               	movf	_dPacketnum,w
  2993  0450  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2994  0451  0084               	movwf	4
  2995  0452  0876               	movf	??_waitFlag,w
  2996  0453  1783               	bsf	3,7	;select IRP bank3
  2997  0454  0080               	movwf	0
  2998                           
  2999                           ;decode_AX25.c: 108: dPacketnum ++;
  3000  0455  3001               	movlw	1
  3001  0456  07E8               	addwf	_dPacketnum,f
  3002  0457  1803               	skipnc
  3003  0458  0AE9               	incf	_dPacketnum+1,f
  3004  0459  3000               	movlw	0
  3005  045A  07E9               	addwf	_dPacketnum+1,f
  3006                           
  3007                           ;decode_AX25.c: 109: for(UINT j=0;j<8;j++){
  3008  045B  01A6               	clrf	waitFlag@j_118
  3009  045C  01A7               	clrf	waitFlag@j_118+1
  3010  045D  3000               	movlw	0
  3011  045E  0227               	subwf	waitFlag@j_118+1,w
  3012  045F  3008               	movlw	8
  3013  0460  1903               	skipnz
  3014  0461  0226               	subwf	waitFlag@j_118,w
  3015  0462  1803               	btfsc	3,0
  3016  0463  2C8C               	goto	l2761
  3017  0464                     l2747:	
  3018                           
  3019                           ;decode_AX25.c: 110: flag_judge = getbit();
  3020  0464  120A  158A  2286  120A  118A  	fcall	_getbit
  3021  0469  0871               	movf	?_getbit+1,w
  3022  046A  1283               	bcf	3,5	;RP0=0, select bank0
  3023  046B  1303               	bcf	3,6	;RP1=0, select bank0
  3024  046C  00BB               	movwf	waitFlag@flag_judge+1
  3025  046D  0870               	movf	?_getbit,w
  3026  046E  00BA               	movwf	waitFlag@flag_judge
  3027                           
  3028                           ;decode_AX25.c: 111: buf = buf >> 1;
  3029  046F  083C               	movf	waitFlag@buf,w
  3030  0470  00F6               	movwf	??_waitFlag
  3031  0471  1003               	clrc
  3032  0472  0C76               	rrf	??_waitFlag,w
  3033  0473  00F7               	movwf	??_waitFlag+1
  3034  0474  0877               	movf	??_waitFlag+1,w
  3035  0475  00BC               	movwf	waitFlag@buf
  3036                           
  3037                           ;decode_AX25.c: 113: buf = buf | 0x00;
  3038  0476  083A               	movf	waitFlag@flag_judge,w
  3039  0477  043B               	iorwf	waitFlag@flag_judge+1,w
  3040  0478  1903               	btfsc	3,2
  3041  0479  2C7F               	goto	l2757
  3042                           
  3043                           ;decode_AX25.c: 115: buf = buf | 0x80;
  3044                           
  3045                           ;decode_AX25.c: 114: }else{
  3046  047A  083C               	movf	waitFlag@buf,w
  3047  047B  3880               	iorlw	128
  3048  047C  00F6               	movwf	??_waitFlag
  3049  047D  0876               	movf	??_waitFlag,w
  3050  047E  00BC               	movwf	waitFlag@buf
  3051  047F                     l2757:	
  3052  047F  3001               	movlw	1
  3053  0480  07A6               	addwf	waitFlag@j_118,f
  3054  0481  1803               	skipnc
  3055  0482  0AA7               	incf	waitFlag@j_118+1,f
  3056  0483  3000               	movlw	0
  3057  0484  07A7               	addwf	waitFlag@j_118+1,f
  3058  0485  3000               	movlw	0
  3059  0486  0227               	subwf	waitFlag@j_118+1,w
  3060  0487  3008               	movlw	8
  3061  0488  1903               	skipnz
  3062  0489  0226               	subwf	waitFlag@j_118,w
  3063  048A  1C03               	skipc
  3064  048B  2C64               	goto	l2747
  3065  048C                     l2761:	
  3066                           
  3067                           ;decode_AX25.c: 116: }
  3068                           ;decode_AX25.c: 117: }
  3069                           ;decode_AX25.c: 118: if(buf == ("JQ1YCZ"[3] << 1)){
  3070  048C  300D               	movlw	low (((STR_1+3)-__stringbase)| (0+32768))
  3071  048D  0084               	movwf	4
  3072  048E  120A  158A  2000  120A  118A  	fcall	stringdir
  3073  0493  00F6               	movwf	??_waitFlag
  3074  0494  01F7               	clrf	??_waitFlag+1
  3075  0495  1003               	clrc
  3076  0496  0DF6               	rlf	??_waitFlag,f
  3077  0497  0DF7               	rlf	??_waitFlag+1,f
  3078  0498  083C               	movf	waitFlag@buf,w
  3079  0499  00F8               	movwf	??_waitFlag+2
  3080  049A  01F9               	clrf	??_waitFlag+3
  3081  049B  0877               	movf	??_waitFlag+1,w
  3082  049C  0679               	xorwf	??_waitFlag+3,w
  3083  049D  1D03               	skipz
  3084  049E  2CA1               	goto	u2265
  3085  049F  0876               	movf	??_waitFlag,w
  3086  04A0  0678               	xorwf	??_waitFlag+2,w
  3087  04A1                     u2265:	
  3088  04A1  1D03               	skipz
  3089  04A2  2D64               	goto	l2831
  3090                           
  3091                           ;decode_AX25.c: 119: dPacket[dPacketnum] = buf;
  3092  04A3  083C               	movf	waitFlag@buf,w
  3093  04A4  00F6               	movwf	??_waitFlag
  3094  04A5  0868               	movf	_dPacketnum,w
  3095  04A6  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3096  04A7  0084               	movwf	4
  3097  04A8  0876               	movf	??_waitFlag,w
  3098  04A9  1783               	bsf	3,7	;select IRP bank3
  3099  04AA  0080               	movwf	0
  3100                           
  3101                           ;decode_AX25.c: 120: dPacketnum ++;
  3102  04AB  3001               	movlw	1
  3103  04AC  07E8               	addwf	_dPacketnum,f
  3104  04AD  1803               	skipnc
  3105  04AE  0AE9               	incf	_dPacketnum+1,f
  3106  04AF  3000               	movlw	0
  3107  04B0  07E9               	addwf	_dPacketnum+1,f
  3108                           
  3109                           ;decode_AX25.c: 121: for(UINT j=0;j<8;j++){
  3110  04B1  01A8               	clrf	waitFlag@j_120
  3111  04B2  01A9               	clrf	waitFlag@j_120+1
  3112  04B3  3000               	movlw	0
  3113  04B4  0229               	subwf	waitFlag@j_120+1,w
  3114  04B5  3008               	movlw	8
  3115  04B6  1903               	skipnz
  3116  04B7  0228               	subwf	waitFlag@j_120,w
  3117  04B8  1803               	btfsc	3,0
  3118  04B9  2CE2               	goto	l2787
  3119  04BA                     l2773:	
  3120                           
  3121                           ;decode_AX25.c: 122: flag_judge = getbit();
  3122  04BA  120A  158A  2286  120A  118A  	fcall	_getbit
  3123  04BF  0871               	movf	?_getbit+1,w
  3124  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  3125  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  3126  04C2  00BB               	movwf	waitFlag@flag_judge+1
  3127  04C3  0870               	movf	?_getbit,w
  3128  04C4  00BA               	movwf	waitFlag@flag_judge
  3129                           
  3130                           ;decode_AX25.c: 123: buf = buf >> 1;
  3131  04C5  083C               	movf	waitFlag@buf,w
  3132  04C6  00F6               	movwf	??_waitFlag
  3133  04C7  1003               	clrc
  3134  04C8  0C76               	rrf	??_waitFlag,w
  3135  04C9  00F7               	movwf	??_waitFlag+1
  3136  04CA  0877               	movf	??_waitFlag+1,w
  3137  04CB  00BC               	movwf	waitFlag@buf
  3138                           
  3139                           ;decode_AX25.c: 125: buf = buf | 0x00;
  3140  04CC  083A               	movf	waitFlag@flag_judge,w
  3141  04CD  043B               	iorwf	waitFlag@flag_judge+1,w
  3142  04CE  1903               	btfsc	3,2
  3143  04CF  2CD5               	goto	l2783
  3144                           
  3145                           ;decode_AX25.c: 127: buf = buf | 0x80;
  3146                           
  3147                           ;decode_AX25.c: 126: }else{
  3148  04D0  083C               	movf	waitFlag@buf,w
  3149  04D1  3880               	iorlw	128
  3150  04D2  00F6               	movwf	??_waitFlag
  3151  04D3  0876               	movf	??_waitFlag,w
  3152  04D4  00BC               	movwf	waitFlag@buf
  3153  04D5                     l2783:	
  3154  04D5  3001               	movlw	1
  3155  04D6  07A8               	addwf	waitFlag@j_120,f
  3156  04D7  1803               	skipnc
  3157  04D8  0AA9               	incf	waitFlag@j_120+1,f
  3158  04D9  3000               	movlw	0
  3159  04DA  07A9               	addwf	waitFlag@j_120+1,f
  3160  04DB  3000               	movlw	0
  3161  04DC  0229               	subwf	waitFlag@j_120+1,w
  3162  04DD  3008               	movlw	8
  3163  04DE  1903               	skipnz
  3164  04DF  0228               	subwf	waitFlag@j_120,w
  3165  04E0  1C03               	skipc
  3166  04E1  2CBA               	goto	l2773
  3167  04E2                     l2787:	
  3168                           
  3169                           ;decode_AX25.c: 128: }
  3170                           ;decode_AX25.c: 129: }
  3171                           ;decode_AX25.c: 130: if(buf == ("JQ1YCZ"[4] << 1)){
  3172  04E2  300E               	movlw	low (((STR_1+4)-__stringbase)| (0+32768))
  3173  04E3  0084               	movwf	4
  3174  04E4  120A  158A  2000  120A  118A  	fcall	stringdir
  3175  04E9  00F6               	movwf	??_waitFlag
  3176  04EA  01F7               	clrf	??_waitFlag+1
  3177  04EB  1003               	clrc
  3178  04EC  0DF6               	rlf	??_waitFlag,f
  3179  04ED  0DF7               	rlf	??_waitFlag+1,f
  3180  04EE  083C               	movf	waitFlag@buf,w
  3181  04EF  00F8               	movwf	??_waitFlag+2
  3182  04F0  01F9               	clrf	??_waitFlag+3
  3183  04F1  0877               	movf	??_waitFlag+1,w
  3184  04F2  0679               	xorwf	??_waitFlag+3,w
  3185  04F3  1D03               	skipz
  3186  04F4  2CF7               	goto	u2305
  3187  04F5  0876               	movf	??_waitFlag,w
  3188  04F6  0678               	xorwf	??_waitFlag+2,w
  3189  04F7                     u2305:	
  3190  04F7  1D03               	skipz
  3191  04F8  2D64               	goto	l2831
  3192                           
  3193                           ;decode_AX25.c: 131: dPacket[dPacketnum] = buf;
  3194  04F9  083C               	movf	waitFlag@buf,w
  3195  04FA  00F6               	movwf	??_waitFlag
  3196  04FB  0868               	movf	_dPacketnum,w
  3197  04FC  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3198  04FD  0084               	movwf	4
  3199  04FE  0876               	movf	??_waitFlag,w
  3200  04FF  1783               	bsf	3,7	;select IRP bank3
  3201  0500  0080               	movwf	0
  3202                           
  3203                           ;decode_AX25.c: 132: dPacketnum ++;
  3204  0501  3001               	movlw	1
  3205  0502  07E8               	addwf	_dPacketnum,f
  3206  0503  1803               	skipnc
  3207  0504  0AE9               	incf	_dPacketnum+1,f
  3208  0505  3000               	movlw	0
  3209  0506  07E9               	addwf	_dPacketnum+1,f
  3210                           
  3211                           ;decode_AX25.c: 133: for(UINT j=0;j<8;j++){
  3212  0507  01AA               	clrf	waitFlag@j_122
  3213  0508  01AB               	clrf	waitFlag@j_122+1
  3214  0509  3000               	movlw	0
  3215  050A  022B               	subwf	waitFlag@j_122+1,w
  3216  050B  3008               	movlw	8
  3217  050C  1903               	skipnz
  3218  050D  022A               	subwf	waitFlag@j_122,w
  3219  050E  1803               	btfsc	3,0
  3220  050F  2D38               	goto	l2813
  3221  0510                     l2799:	
  3222                           
  3223                           ;decode_AX25.c: 134: flag_judge = getbit();
  3224  0510  120A  158A  2286  120A  118A  	fcall	_getbit
  3225  0515  0871               	movf	?_getbit+1,w
  3226  0516  1283               	bcf	3,5	;RP0=0, select bank0
  3227  0517  1303               	bcf	3,6	;RP1=0, select bank0
  3228  0518  00BB               	movwf	waitFlag@flag_judge+1
  3229  0519  0870               	movf	?_getbit,w
  3230  051A  00BA               	movwf	waitFlag@flag_judge
  3231                           
  3232                           ;decode_AX25.c: 135: buf = buf >> 1;
  3233  051B  083C               	movf	waitFlag@buf,w
  3234  051C  00F6               	movwf	??_waitFlag
  3235  051D  1003               	clrc
  3236  051E  0C76               	rrf	??_waitFlag,w
  3237  051F  00F7               	movwf	??_waitFlag+1
  3238  0520  0877               	movf	??_waitFlag+1,w
  3239  0521  00BC               	movwf	waitFlag@buf
  3240                           
  3241                           ;decode_AX25.c: 137: buf = buf | 0x00;
  3242  0522  083A               	movf	waitFlag@flag_judge,w
  3243  0523  043B               	iorwf	waitFlag@flag_judge+1,w
  3244  0524  1903               	btfsc	3,2
  3245  0525  2D2B               	goto	l2809
  3246                           
  3247                           ;decode_AX25.c: 139: buf = buf | 0x80;
  3248                           
  3249                           ;decode_AX25.c: 138: }else{
  3250  0526  083C               	movf	waitFlag@buf,w
  3251  0527  3880               	iorlw	128
  3252  0528  00F6               	movwf	??_waitFlag
  3253  0529  0876               	movf	??_waitFlag,w
  3254  052A  00BC               	movwf	waitFlag@buf
  3255  052B                     l2809:	
  3256  052B  3001               	movlw	1
  3257  052C  07AA               	addwf	waitFlag@j_122,f
  3258  052D  1803               	skipnc
  3259  052E  0AAB               	incf	waitFlag@j_122+1,f
  3260  052F  3000               	movlw	0
  3261  0530  07AB               	addwf	waitFlag@j_122+1,f
  3262  0531  3000               	movlw	0
  3263  0532  022B               	subwf	waitFlag@j_122+1,w
  3264  0533  3008               	movlw	8
  3265  0534  1903               	skipnz
  3266  0535  022A               	subwf	waitFlag@j_122,w
  3267  0536  1C03               	skipc
  3268  0537  2D10               	goto	l2799
  3269  0538                     l2813:	
  3270                           
  3271                           ;decode_AX25.c: 140: }
  3272                           ;decode_AX25.c: 141: }
  3273                           ;decode_AX25.c: 142: if(buf == ("JQ1YCZ"[5] << 1)){
  3274  0538  300F               	movlw	low (((STR_1+5)-__stringbase)| (0+32768))
  3275  0539  0084               	movwf	4
  3276  053A  120A  158A  2000  120A  118A  	fcall	stringdir
  3277  053F  00F6               	movwf	??_waitFlag
  3278  0540  01F7               	clrf	??_waitFlag+1
  3279  0541  1003               	clrc
  3280  0542  0DF6               	rlf	??_waitFlag,f
  3281  0543  0DF7               	rlf	??_waitFlag+1,f
  3282  0544  083C               	movf	waitFlag@buf,w
  3283  0545  00F8               	movwf	??_waitFlag+2
  3284  0546  01F9               	clrf	??_waitFlag+3
  3285  0547  0877               	movf	??_waitFlag+1,w
  3286  0548  0679               	xorwf	??_waitFlag+3,w
  3287  0549  1D03               	skipz
  3288  054A  2D4D               	goto	u2345
  3289  054B  0876               	movf	??_waitFlag,w
  3290  054C  0678               	xorwf	??_waitFlag+2,w
  3291  054D                     u2345:	
  3292  054D  1D03               	skipz
  3293  054E  2D64               	goto	l2831
  3294                           
  3295                           ;decode_AX25.c: 143: dPacket[dPacketnum] = buf;
  3296  054F  083C               	movf	waitFlag@buf,w
  3297  0550  00F6               	movwf	??_waitFlag
  3298  0551  0868               	movf	_dPacketnum,w
  3299  0552  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3300  0553  0084               	movwf	4
  3301  0554  0876               	movf	??_waitFlag,w
  3302  0555  1783               	bsf	3,7	;select IRP bank3
  3303  0556  0080               	movwf	0
  3304                           
  3305                           ;decode_AX25.c: 144: dPacketnum ++;
  3306  0557  3001               	movlw	1
  3307  0558  07E8               	addwf	_dPacketnum,f
  3308  0559  1803               	skipnc
  3309  055A  0AE9               	incf	_dPacketnum+1,f
  3310  055B  3000               	movlw	0
  3311  055C  07E9               	addwf	_dPacketnum+1,f
  3312                           
  3313                           ;decode_AX25.c: 145: rcv_state ++;
  3314  055D  3001               	movlw	1
  3315  055E  07EA               	addwf	_rcv_state,f
  3316  055F  1803               	skipnc
  3317  0560  0AEB               	incf	_rcv_state+1,f
  3318  0561  3000               	movlw	0
  3319  0562  07EB               	addwf	_rcv_state+1,f
  3320                           
  3321                           ;decode_AX25.c: 146: }else{
  3322  0563  2D66               	goto	l210
  3323  0564                     l2831:	
  3324                           ;decode_AX25.c: 160: }
  3325                           ;decode_AX25.c: 161: }else{
  3326                           
  3327                           ;decode_AX25.c: 159: dPacketnum = 0;
  3328                           
  3329                           ;decode_AX25.c: 157: }
  3330                           ;decode_AX25.c: 158: }else{
  3331                           
  3332                           ;decode_AX25.c: 156: dPacketnum = 0;
  3333                           
  3334                           ;decode_AX25.c: 154: }
  3335                           ;decode_AX25.c: 155: }else{
  3336                           
  3337                           ;decode_AX25.c: 153: dPacketnum = 0;
  3338                           
  3339                           ;decode_AX25.c: 151: }
  3340                           ;decode_AX25.c: 152: }else{
  3341                           
  3342                           ;decode_AX25.c: 150: dPacketnum = 0;
  3343                           
  3344                           ;decode_AX25.c: 148: }
  3345                           ;decode_AX25.c: 149: }else{
  3346                           
  3347                           ;decode_AX25.c: 147: dPacketnum = 0;
  3348                           
  3349                           
  3350                           ;decode_AX25.c: 162: dPacketnum = 0;
  3351  0564  01E8               	clrf	_dPacketnum
  3352  0565  01E9               	clrf	_dPacketnum+1
  3353  0566                     l210:	
  3354                           
  3355                           ;decode_AX25.c: 163: }
  3356                           ;decode_AX25.c: 165: for(UINT j=0;j<8;j++){
  3357  0566  01AC               	clrf	waitFlag@j_124
  3358  0567  01AD               	clrf	waitFlag@j_124+1
  3359  0568  3000               	movlw	0
  3360  0569  022D               	subwf	waitFlag@j_124+1,w
  3361  056A  3008               	movlw	8
  3362  056B  1903               	skipnz
  3363  056C  022C               	subwf	waitFlag@j_124,w
  3364  056D  1803               	btfsc	3,0
  3365  056E  2D97               	goto	l2851
  3366  056F                     l2837:	
  3367                           
  3368                           ;decode_AX25.c: 166: flag_judge = getbit();
  3369  056F  120A  158A  2286  120A  118A  	fcall	_getbit
  3370  0574  0871               	movf	?_getbit+1,w
  3371  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3372  0576  1303               	bcf	3,6	;RP1=0, select bank0
  3373  0577  00BB               	movwf	waitFlag@flag_judge+1
  3374  0578  0870               	movf	?_getbit,w
  3375  0579  00BA               	movwf	waitFlag@flag_judge
  3376                           
  3377                           ;decode_AX25.c: 167: buf = buf >> 1;
  3378  057A  083C               	movf	waitFlag@buf,w
  3379  057B  00F6               	movwf	??_waitFlag
  3380  057C  1003               	clrc
  3381  057D  0C76               	rrf	??_waitFlag,w
  3382  057E  00F7               	movwf	??_waitFlag+1
  3383  057F  0877               	movf	??_waitFlag+1,w
  3384  0580  00BC               	movwf	waitFlag@buf
  3385                           
  3386                           ;decode_AX25.c: 169: buf = buf | 0x00;
  3387  0581  083A               	movf	waitFlag@flag_judge,w
  3388  0582  043B               	iorwf	waitFlag@flag_judge+1,w
  3389  0583  1903               	btfsc	3,2
  3390  0584  2D8A               	goto	l2847
  3391                           
  3392                           ;decode_AX25.c: 171: buf = buf | 0x80;
  3393                           
  3394                           ;decode_AX25.c: 170: }else{
  3395  0585  083C               	movf	waitFlag@buf,w
  3396  0586  3880               	iorlw	128
  3397  0587  00F6               	movwf	??_waitFlag
  3398  0588  0876               	movf	??_waitFlag,w
  3399  0589  00BC               	movwf	waitFlag@buf
  3400  058A                     l2847:	
  3401  058A  3001               	movlw	1
  3402  058B  07AC               	addwf	waitFlag@j_124,f
  3403  058C  1803               	skipnc
  3404  058D  0AAD               	incf	waitFlag@j_124+1,f
  3405  058E  3000               	movlw	0
  3406  058F  07AD               	addwf	waitFlag@j_124+1,f
  3407  0590  3000               	movlw	0
  3408  0591  022D               	subwf	waitFlag@j_124+1,w
  3409  0592  3008               	movlw	8
  3410  0593  1903               	skipnz
  3411  0594  022C               	subwf	waitFlag@j_124,w
  3412  0595  1C03               	skipc
  3413  0596  2D6F               	goto	l2837
  3414  0597                     l2851:	
  3415                           
  3416                           ;decode_AX25.c: 172: }
  3417                           ;decode_AX25.c: 173: }
  3418                           ;decode_AX25.c: 174: dPacket[dPacketnum] = buf;
  3419  0597  083C               	movf	waitFlag@buf,w
  3420  0598  00F6               	movwf	??_waitFlag
  3421  0599  0868               	movf	_dPacketnum,w
  3422  059A  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3423  059B  0084               	movwf	4
  3424  059C  0876               	movf	??_waitFlag,w
  3425  059D  1783               	bsf	3,7	;select IRP bank3
  3426  059E  0080               	movwf	0
  3427                           
  3428                           ;decode_AX25.c: 175: dPacketnum ++;
  3429  059F  3001               	movlw	1
  3430  05A0  07E8               	addwf	_dPacketnum,f
  3431  05A1  1803               	skipnc
  3432  05A2  0AE9               	incf	_dPacketnum+1,f
  3433  05A3  3000               	movlw	0
  3434  05A4  07E9               	addwf	_dPacketnum+1,f
  3435                           
  3436                           ;decode_AX25.c: 176: for(UINT j=0;j<8;j++){
  3437  05A5  01AE               	clrf	waitFlag@j_125
  3438  05A6  01AF               	clrf	waitFlag@j_125+1
  3439  05A7  3000               	movlw	0
  3440  05A8  022F               	subwf	waitFlag@j_125+1,w
  3441  05A9  3008               	movlw	8
  3442  05AA  1903               	skipnz
  3443  05AB  022E               	subwf	waitFlag@j_125,w
  3444  05AC  1803               	btfsc	3,0
  3445  05AD  2DD6               	goto	l2875
  3446  05AE                     l2861:	
  3447                           
  3448                           ;decode_AX25.c: 177: flag_judge = getbit();
  3449  05AE  120A  158A  2286  120A  118A  	fcall	_getbit
  3450  05B3  0871               	movf	?_getbit+1,w
  3451  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  3452  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  3453  05B6  00BB               	movwf	waitFlag@flag_judge+1
  3454  05B7  0870               	movf	?_getbit,w
  3455  05B8  00BA               	movwf	waitFlag@flag_judge
  3456                           
  3457                           ;decode_AX25.c: 178: buf = buf >> 1;
  3458  05B9  083C               	movf	waitFlag@buf,w
  3459  05BA  00F6               	movwf	??_waitFlag
  3460  05BB  1003               	clrc
  3461  05BC  0C76               	rrf	??_waitFlag,w
  3462  05BD  00F7               	movwf	??_waitFlag+1
  3463  05BE  0877               	movf	??_waitFlag+1,w
  3464  05BF  00BC               	movwf	waitFlag@buf
  3465                           
  3466                           ;decode_AX25.c: 180: buf = buf | 0x00;
  3467  05C0  083A               	movf	waitFlag@flag_judge,w
  3468  05C1  043B               	iorwf	waitFlag@flag_judge+1,w
  3469  05C2  1903               	btfsc	3,2
  3470  05C3  2DC9               	goto	l2871
  3471                           
  3472                           ;decode_AX25.c: 182: buf = buf | 0x80;
  3473                           
  3474                           ;decode_AX25.c: 181: }else{
  3475  05C4  083C               	movf	waitFlag@buf,w
  3476  05C5  3880               	iorlw	128
  3477  05C6  00F6               	movwf	??_waitFlag
  3478  05C7  0876               	movf	??_waitFlag,w
  3479  05C8  00BC               	movwf	waitFlag@buf
  3480  05C9                     l2871:	
  3481  05C9  3001               	movlw	1
  3482  05CA  07AE               	addwf	waitFlag@j_125,f
  3483  05CB  1803               	skipnc
  3484  05CC  0AAF               	incf	waitFlag@j_125+1,f
  3485  05CD  3000               	movlw	0
  3486  05CE  07AF               	addwf	waitFlag@j_125+1,f
  3487  05CF  3000               	movlw	0
  3488  05D0  022F               	subwf	waitFlag@j_125+1,w
  3489  05D1  3008               	movlw	8
  3490  05D2  1903               	skipnz
  3491  05D3  022E               	subwf	waitFlag@j_125,w
  3492  05D4  1C03               	skipc
  3493  05D5  2DAE               	goto	l2861
  3494  05D6                     l2875:	
  3495                           
  3496                           ;decode_AX25.c: 183: }
  3497                           ;decode_AX25.c: 184: }
  3498                           ;decode_AX25.c: 185: if(buf == ("JQ1ZHX"[0] << 1)){
  3499  05D6  3003               	movlw	low (STR_7-__stringbase)
  3500  05D7  0084               	movwf	4
  3501  05D8  120A  158A  2000  120A  118A  	fcall	stringdir
  3502  05DD  00F6               	movwf	??_waitFlag
  3503  05DE  01F7               	clrf	??_waitFlag+1
  3504  05DF  1003               	clrc
  3505  05E0  0DF6               	rlf	??_waitFlag,f
  3506  05E1  0DF7               	rlf	??_waitFlag+1,f
  3507  05E2  083C               	movf	waitFlag@buf,w
  3508  05E3  00F8               	movwf	??_waitFlag+2
  3509  05E4  01F9               	clrf	??_waitFlag+3
  3510  05E5  0877               	movf	??_waitFlag+1,w
  3511  05E6  0679               	xorwf	??_waitFlag+3,w
  3512  05E7  1D03               	skipz
  3513  05E8  2DEB               	goto	u2415
  3514  05E9  0876               	movf	??_waitFlag,w
  3515  05EA  0678               	xorwf	??_waitFlag+2,w
  3516  05EB                     u2415:	
  3517  05EB  1D03               	skipz
  3518  05EC  2FB0               	goto	l3023
  3519                           
  3520                           ;decode_AX25.c: 186: dPacket[dPacketnum] = buf;
  3521  05ED  083C               	movf	waitFlag@buf,w
  3522  05EE  00F6               	movwf	??_waitFlag
  3523  05EF  0868               	movf	_dPacketnum,w
  3524  05F0  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3525  05F1  0084               	movwf	4
  3526  05F2  0876               	movf	??_waitFlag,w
  3527  05F3  1783               	bsf	3,7	;select IRP bank3
  3528  05F4  0080               	movwf	0
  3529                           
  3530                           ;decode_AX25.c: 187: dPacketnum ++;
  3531  05F5  3001               	movlw	1
  3532  05F6  07E8               	addwf	_dPacketnum,f
  3533  05F7  1803               	skipnc
  3534  05F8  0AE9               	incf	_dPacketnum+1,f
  3535  05F9  3000               	movlw	0
  3536  05FA  07E9               	addwf	_dPacketnum+1,f
  3537                           
  3538                           ;decode_AX25.c: 188: for(UINT j=0;j<8;j++){
  3539  05FB  01B0               	clrf	waitFlag@j_127
  3540  05FC  01B1               	clrf	waitFlag@j_127+1
  3541  05FD  3000               	movlw	0
  3542  05FE  0231               	subwf	waitFlag@j_127+1,w
  3543  05FF  3008               	movlw	8
  3544  0600  1903               	skipnz
  3545  0601  0230               	subwf	waitFlag@j_127,w
  3546  0602  1803               	btfsc	3,0
  3547  0603  2E2C               	goto	l2901
  3548  0604                     l2887:	
  3549                           
  3550                           ;decode_AX25.c: 189: flag_judge = getbit();
  3551  0604  120A  158A  2286  120A  118A  	fcall	_getbit
  3552  0609  0871               	movf	?_getbit+1,w
  3553  060A  1283               	bcf	3,5	;RP0=0, select bank0
  3554  060B  1303               	bcf	3,6	;RP1=0, select bank0
  3555  060C  00BB               	movwf	waitFlag@flag_judge+1
  3556  060D  0870               	movf	?_getbit,w
  3557  060E  00BA               	movwf	waitFlag@flag_judge
  3558                           
  3559                           ;decode_AX25.c: 190: buf = buf >> 1;
  3560  060F  083C               	movf	waitFlag@buf,w
  3561  0610  00F6               	movwf	??_waitFlag
  3562  0611  1003               	clrc
  3563  0612  0C76               	rrf	??_waitFlag,w
  3564  0613  00F7               	movwf	??_waitFlag+1
  3565  0614  0877               	movf	??_waitFlag+1,w
  3566  0615  00BC               	movwf	waitFlag@buf
  3567                           
  3568                           ;decode_AX25.c: 192: buf = buf | 0x00;
  3569  0616  083A               	movf	waitFlag@flag_judge,w
  3570  0617  043B               	iorwf	waitFlag@flag_judge+1,w
  3571  0618  1903               	btfsc	3,2
  3572  0619  2E1F               	goto	l2897
  3573                           
  3574                           ;decode_AX25.c: 194: buf = buf | 0x80;
  3575                           
  3576                           ;decode_AX25.c: 193: }else{
  3577  061A  083C               	movf	waitFlag@buf,w
  3578  061B  3880               	iorlw	128
  3579  061C  00F6               	movwf	??_waitFlag
  3580  061D  0876               	movf	??_waitFlag,w
  3581  061E  00BC               	movwf	waitFlag@buf
  3582  061F                     l2897:	
  3583  061F  3001               	movlw	1
  3584  0620  07B0               	addwf	waitFlag@j_127,f
  3585  0621  1803               	skipnc
  3586  0622  0AB1               	incf	waitFlag@j_127+1,f
  3587  0623  3000               	movlw	0
  3588  0624  07B1               	addwf	waitFlag@j_127+1,f
  3589  0625  3000               	movlw	0
  3590  0626  0231               	subwf	waitFlag@j_127+1,w
  3591  0627  3008               	movlw	8
  3592  0628  1903               	skipnz
  3593  0629  0230               	subwf	waitFlag@j_127,w
  3594  062A  1C03               	skipc
  3595  062B  2E04               	goto	l2887
  3596  062C                     l2901:	
  3597                           
  3598                           ;decode_AX25.c: 195: }
  3599                           ;decode_AX25.c: 196: }
  3600                           ;decode_AX25.c: 197: if(buf == ("JQ1ZHX"[1] << 1)){
  3601  062C  3004               	movlw	low (((STR_7+1)-__stringbase)| (0+32768))
  3602  062D  0084               	movwf	4
  3603  062E  120A  158A  2000  120A  118A  	fcall	stringdir
  3604  0633  00F6               	movwf	??_waitFlag
  3605  0634  01F7               	clrf	??_waitFlag+1
  3606  0635  1003               	clrc
  3607  0636  0DF6               	rlf	??_waitFlag,f
  3608  0637  0DF7               	rlf	??_waitFlag+1,f
  3609  0638  083C               	movf	waitFlag@buf,w
  3610  0639  00F8               	movwf	??_waitFlag+2
  3611  063A  01F9               	clrf	??_waitFlag+3
  3612  063B  0877               	movf	??_waitFlag+1,w
  3613  063C  0679               	xorwf	??_waitFlag+3,w
  3614  063D  1D03               	skipz
  3615  063E  2E41               	goto	u2455
  3616  063F  0876               	movf	??_waitFlag,w
  3617  0640  0678               	xorwf	??_waitFlag+2,w
  3618  0641                     u2455:	
  3619  0641  1D03               	skipz
  3620  0642  2FB0               	goto	l3023
  3621                           
  3622                           ;decode_AX25.c: 198: dPacket[dPacketnum] = buf;
  3623  0643  083C               	movf	waitFlag@buf,w
  3624  0644  00F6               	movwf	??_waitFlag
  3625  0645  0868               	movf	_dPacketnum,w
  3626  0646  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3627  0647  0084               	movwf	4
  3628  0648  0876               	movf	??_waitFlag,w
  3629  0649  1783               	bsf	3,7	;select IRP bank3
  3630  064A  0080               	movwf	0
  3631                           
  3632                           ;decode_AX25.c: 199: dPacketnum ++;
  3633  064B  3001               	movlw	1
  3634  064C  07E8               	addwf	_dPacketnum,f
  3635  064D  1803               	skipnc
  3636  064E  0AE9               	incf	_dPacketnum+1,f
  3637  064F  3000               	movlw	0
  3638  0650  07E9               	addwf	_dPacketnum+1,f
  3639                           
  3640                           ;decode_AX25.c: 200: for(UINT j=0;j<8;j++){
  3641  0651  01B2               	clrf	waitFlag@j_129
  3642  0652  01B3               	clrf	waitFlag@j_129+1
  3643  0653  3000               	movlw	0
  3644  0654  0233               	subwf	waitFlag@j_129+1,w
  3645  0655  3008               	movlw	8
  3646  0656  1903               	skipnz
  3647  0657  0232               	subwf	waitFlag@j_129,w
  3648  0658  1803               	btfsc	3,0
  3649  0659  2E82               	goto	l2927
  3650  065A                     l2913:	
  3651                           
  3652                           ;decode_AX25.c: 201: flag_judge = getbit();
  3653  065A  120A  158A  2286  120A  118A  	fcall	_getbit
  3654  065F  0871               	movf	?_getbit+1,w
  3655  0660  1283               	bcf	3,5	;RP0=0, select bank0
  3656  0661  1303               	bcf	3,6	;RP1=0, select bank0
  3657  0662  00BB               	movwf	waitFlag@flag_judge+1
  3658  0663  0870               	movf	?_getbit,w
  3659  0664  00BA               	movwf	waitFlag@flag_judge
  3660                           
  3661                           ;decode_AX25.c: 202: buf = buf >> 1;
  3662  0665  083C               	movf	waitFlag@buf,w
  3663  0666  00F6               	movwf	??_waitFlag
  3664  0667  1003               	clrc
  3665  0668  0C76               	rrf	??_waitFlag,w
  3666  0669  00F7               	movwf	??_waitFlag+1
  3667  066A  0877               	movf	??_waitFlag+1,w
  3668  066B  00BC               	movwf	waitFlag@buf
  3669                           
  3670                           ;decode_AX25.c: 204: buf = buf | 0x00;
  3671  066C  083A               	movf	waitFlag@flag_judge,w
  3672  066D  043B               	iorwf	waitFlag@flag_judge+1,w
  3673  066E  1903               	btfsc	3,2
  3674  066F  2E75               	goto	l2923
  3675                           
  3676                           ;decode_AX25.c: 206: buf = buf | 0x80;
  3677                           
  3678                           ;decode_AX25.c: 205: }else{
  3679  0670  083C               	movf	waitFlag@buf,w
  3680  0671  3880               	iorlw	128
  3681  0672  00F6               	movwf	??_waitFlag
  3682  0673  0876               	movf	??_waitFlag,w
  3683  0674  00BC               	movwf	waitFlag@buf
  3684  0675                     l2923:	
  3685  0675  3001               	movlw	1
  3686  0676  07B2               	addwf	waitFlag@j_129,f
  3687  0677  1803               	skipnc
  3688  0678  0AB3               	incf	waitFlag@j_129+1,f
  3689  0679  3000               	movlw	0
  3690  067A  07B3               	addwf	waitFlag@j_129+1,f
  3691  067B  3000               	movlw	0
  3692  067C  0233               	subwf	waitFlag@j_129+1,w
  3693  067D  3008               	movlw	8
  3694  067E  1903               	skipnz
  3695  067F  0232               	subwf	waitFlag@j_129,w
  3696  0680  1C03               	skipc
  3697  0681  2E5A               	goto	l2913
  3698  0682                     l2927:	
  3699                           
  3700                           ;decode_AX25.c: 207: }
  3701                           ;decode_AX25.c: 208: }
  3702                           ;decode_AX25.c: 209: if(buf == ("JQ1ZHX"[2] << 1)){
  3703  0682  3005               	movlw	low (((STR_7+2)-__stringbase)| (0+32768))
  3704  0683  0084               	movwf	4
  3705  0684  120A  158A  2000  120A  118A  	fcall	stringdir
  3706  0689  00F6               	movwf	??_waitFlag
  3707  068A  01F7               	clrf	??_waitFlag+1
  3708  068B  1003               	clrc
  3709  068C  0DF6               	rlf	??_waitFlag,f
  3710  068D  0DF7               	rlf	??_waitFlag+1,f
  3711  068E  083C               	movf	waitFlag@buf,w
  3712  068F  00F8               	movwf	??_waitFlag+2
  3713  0690  01F9               	clrf	??_waitFlag+3
  3714  0691  0877               	movf	??_waitFlag+1,w
  3715  0692  0679               	xorwf	??_waitFlag+3,w
  3716  0693  1D03               	skipz
  3717  0694  2E97               	goto	u2495
  3718  0695  0876               	movf	??_waitFlag,w
  3719  0696  0678               	xorwf	??_waitFlag+2,w
  3720  0697                     u2495:	
  3721  0697  1D03               	skipz
  3722  0698  2FB0               	goto	l3023
  3723                           
  3724                           ;decode_AX25.c: 210: dPacket[dPacketnum] = buf;
  3725  0699  083C               	movf	waitFlag@buf,w
  3726  069A  00F6               	movwf	??_waitFlag
  3727  069B  0868               	movf	_dPacketnum,w
  3728  069C  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3729  069D  0084               	movwf	4
  3730  069E  0876               	movf	??_waitFlag,w
  3731  069F  1783               	bsf	3,7	;select IRP bank3
  3732  06A0  0080               	movwf	0
  3733                           
  3734                           ;decode_AX25.c: 211: dPacketnum ++;
  3735  06A1  3001               	movlw	1
  3736  06A2  07E8               	addwf	_dPacketnum,f
  3737  06A3  1803               	skipnc
  3738  06A4  0AE9               	incf	_dPacketnum+1,f
  3739  06A5  3000               	movlw	0
  3740  06A6  07E9               	addwf	_dPacketnum+1,f
  3741                           
  3742                           ;decode_AX25.c: 212: for(UINT j=0;j<8;j++){
  3743  06A7  01B4               	clrf	waitFlag@j_131
  3744  06A8  01B5               	clrf	waitFlag@j_131+1
  3745  06A9  3000               	movlw	0
  3746  06AA  0235               	subwf	waitFlag@j_131+1,w
  3747  06AB  3008               	movlw	8
  3748  06AC  1903               	skipnz
  3749  06AD  0234               	subwf	waitFlag@j_131,w
  3750  06AE  1803               	btfsc	3,0
  3751  06AF  2ED8               	goto	l2953
  3752  06B0                     l2939:	
  3753                           
  3754                           ;decode_AX25.c: 213: flag_judge = getbit();
  3755  06B0  120A  158A  2286  120A  118A  	fcall	_getbit
  3756  06B5  0871               	movf	?_getbit+1,w
  3757  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  3758  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  3759  06B8  00BB               	movwf	waitFlag@flag_judge+1
  3760  06B9  0870               	movf	?_getbit,w
  3761  06BA  00BA               	movwf	waitFlag@flag_judge
  3762                           
  3763                           ;decode_AX25.c: 214: buf = buf >> 1;
  3764  06BB  083C               	movf	waitFlag@buf,w
  3765  06BC  00F6               	movwf	??_waitFlag
  3766  06BD  1003               	clrc
  3767  06BE  0C76               	rrf	??_waitFlag,w
  3768  06BF  00F7               	movwf	??_waitFlag+1
  3769  06C0  0877               	movf	??_waitFlag+1,w
  3770  06C1  00BC               	movwf	waitFlag@buf
  3771                           
  3772                           ;decode_AX25.c: 216: buf = buf | 0x00;
  3773  06C2  083A               	movf	waitFlag@flag_judge,w
  3774  06C3  043B               	iorwf	waitFlag@flag_judge+1,w
  3775  06C4  1903               	btfsc	3,2
  3776  06C5  2ECB               	goto	l2949
  3777                           
  3778                           ;decode_AX25.c: 218: buf = buf | 0x80;
  3779                           
  3780                           ;decode_AX25.c: 217: }else{
  3781  06C6  083C               	movf	waitFlag@buf,w
  3782  06C7  3880               	iorlw	128
  3783  06C8  00F6               	movwf	??_waitFlag
  3784  06C9  0876               	movf	??_waitFlag,w
  3785  06CA  00BC               	movwf	waitFlag@buf
  3786  06CB                     l2949:	
  3787  06CB  3001               	movlw	1
  3788  06CC  07B4               	addwf	waitFlag@j_131,f
  3789  06CD  1803               	skipnc
  3790  06CE  0AB5               	incf	waitFlag@j_131+1,f
  3791  06CF  3000               	movlw	0
  3792  06D0  07B5               	addwf	waitFlag@j_131+1,f
  3793  06D1  3000               	movlw	0
  3794  06D2  0235               	subwf	waitFlag@j_131+1,w
  3795  06D3  3008               	movlw	8
  3796  06D4  1903               	skipnz
  3797  06D5  0234               	subwf	waitFlag@j_131,w
  3798  06D6  1C03               	skipc
  3799  06D7  2EB0               	goto	l2939
  3800  06D8                     l2953:	
  3801                           
  3802                           ;decode_AX25.c: 219: }
  3803                           ;decode_AX25.c: 220: }
  3804                           ;decode_AX25.c: 221: if(buf == ("JQ1ZHX"[3] << 1)){
  3805  06D8  3006               	movlw	low (((STR_7+3)-__stringbase)| (0+32768))
  3806  06D9  0084               	movwf	4
  3807  06DA  120A  158A  2000  120A  118A  	fcall	stringdir
  3808  06DF  00F6               	movwf	??_waitFlag
  3809  06E0  01F7               	clrf	??_waitFlag+1
  3810  06E1  1003               	clrc
  3811  06E2  0DF6               	rlf	??_waitFlag,f
  3812  06E3  0DF7               	rlf	??_waitFlag+1,f
  3813  06E4  083C               	movf	waitFlag@buf,w
  3814  06E5  00F8               	movwf	??_waitFlag+2
  3815  06E6  01F9               	clrf	??_waitFlag+3
  3816  06E7  0877               	movf	??_waitFlag+1,w
  3817  06E8  0679               	xorwf	??_waitFlag+3,w
  3818  06E9  1D03               	skipz
  3819  06EA  2EED               	goto	u2535
  3820  06EB  0876               	movf	??_waitFlag,w
  3821  06EC  0678               	xorwf	??_waitFlag+2,w
  3822  06ED                     u2535:	
  3823  06ED  1D03               	skipz
  3824  06EE  2FB0               	goto	l3023
  3825                           
  3826                           ;decode_AX25.c: 222: dPacket[dPacketnum] = buf;
  3827  06EF  083C               	movf	waitFlag@buf,w
  3828  06F0  00F6               	movwf	??_waitFlag
  3829  06F1  0868               	movf	_dPacketnum,w
  3830  06F2  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3831  06F3  0084               	movwf	4
  3832  06F4  0876               	movf	??_waitFlag,w
  3833  06F5  1783               	bsf	3,7	;select IRP bank3
  3834  06F6  0080               	movwf	0
  3835                           
  3836                           ;decode_AX25.c: 223: dPacketnum ++;
  3837  06F7  3001               	movlw	1
  3838  06F8  07E8               	addwf	_dPacketnum,f
  3839  06F9  1803               	skipnc
  3840  06FA  0AE9               	incf	_dPacketnum+1,f
  3841  06FB  3000               	movlw	0
  3842  06FC  07E9               	addwf	_dPacketnum+1,f
  3843                           
  3844                           ;decode_AX25.c: 224: for(UINT j=0;j<8;j++){
  3845  06FD  01B6               	clrf	waitFlag@j_133
  3846  06FE  01B7               	clrf	waitFlag@j_133+1
  3847  06FF  3000               	movlw	0
  3848  0700  0237               	subwf	waitFlag@j_133+1,w
  3849  0701  3008               	movlw	8
  3850  0702  1903               	skipnz
  3851  0703  0236               	subwf	waitFlag@j_133,w
  3852  0704  1803               	btfsc	3,0
  3853  0705  2F2E               	goto	l2979
  3854  0706                     l2965:	
  3855                           
  3856                           ;decode_AX25.c: 225: flag_judge = getbit();
  3857  0706  120A  158A  2286  120A  118A  	fcall	_getbit
  3858  070B  0871               	movf	?_getbit+1,w
  3859  070C  1283               	bcf	3,5	;RP0=0, select bank0
  3860  070D  1303               	bcf	3,6	;RP1=0, select bank0
  3861  070E  00BB               	movwf	waitFlag@flag_judge+1
  3862  070F  0870               	movf	?_getbit,w
  3863  0710  00BA               	movwf	waitFlag@flag_judge
  3864                           
  3865                           ;decode_AX25.c: 226: buf = buf >> 1;
  3866  0711  083C               	movf	waitFlag@buf,w
  3867  0712  00F6               	movwf	??_waitFlag
  3868  0713  1003               	clrc
  3869  0714  0C76               	rrf	??_waitFlag,w
  3870  0715  00F7               	movwf	??_waitFlag+1
  3871  0716  0877               	movf	??_waitFlag+1,w
  3872  0717  00BC               	movwf	waitFlag@buf
  3873                           
  3874                           ;decode_AX25.c: 228: buf = buf | 0x00;
  3875  0718  083A               	movf	waitFlag@flag_judge,w
  3876  0719  043B               	iorwf	waitFlag@flag_judge+1,w
  3877  071A  1903               	btfsc	3,2
  3878  071B  2F21               	goto	l2975
  3879                           
  3880                           ;decode_AX25.c: 230: buf = buf | 0x80;
  3881                           
  3882                           ;decode_AX25.c: 229: }else{
  3883  071C  083C               	movf	waitFlag@buf,w
  3884  071D  3880               	iorlw	128
  3885  071E  00F6               	movwf	??_waitFlag
  3886  071F  0876               	movf	??_waitFlag,w
  3887  0720  00BC               	movwf	waitFlag@buf
  3888  0721                     l2975:	
  3889  0721  3001               	movlw	1
  3890  0722  07B6               	addwf	waitFlag@j_133,f
  3891  0723  1803               	skipnc
  3892  0724  0AB7               	incf	waitFlag@j_133+1,f
  3893  0725  3000               	movlw	0
  3894  0726  07B7               	addwf	waitFlag@j_133+1,f
  3895  0727  3000               	movlw	0
  3896  0728  0237               	subwf	waitFlag@j_133+1,w
  3897  0729  3008               	movlw	8
  3898  072A  1903               	skipnz
  3899  072B  0236               	subwf	waitFlag@j_133,w
  3900  072C  1C03               	skipc
  3901  072D  2F06               	goto	l2965
  3902  072E                     l2979:	
  3903                           
  3904                           ;decode_AX25.c: 231: }
  3905                           ;decode_AX25.c: 232: }
  3906                           ;decode_AX25.c: 233: if(buf == ("JQ1ZHX"[4] << 1)){
  3907  072E  3007               	movlw	low (((STR_7+4)-__stringbase)| (0+32768))
  3908  072F  0084               	movwf	4
  3909  0730  120A  158A  2000  120A  118A  	fcall	stringdir
  3910  0735  00F6               	movwf	??_waitFlag
  3911  0736  01F7               	clrf	??_waitFlag+1
  3912  0737  1003               	clrc
  3913  0738  0DF6               	rlf	??_waitFlag,f
  3914  0739  0DF7               	rlf	??_waitFlag+1,f
  3915  073A  083C               	movf	waitFlag@buf,w
  3916  073B  00F8               	movwf	??_waitFlag+2
  3917  073C  01F9               	clrf	??_waitFlag+3
  3918  073D  0877               	movf	??_waitFlag+1,w
  3919  073E  0679               	xorwf	??_waitFlag+3,w
  3920  073F  1D03               	skipz
  3921  0740  2F43               	goto	u2575
  3922  0741  0876               	movf	??_waitFlag,w
  3923  0742  0678               	xorwf	??_waitFlag+2,w
  3924  0743                     u2575:	
  3925  0743  1D03               	skipz
  3926  0744  2FB0               	goto	l3023
  3927                           
  3928                           ;decode_AX25.c: 234: dPacket[dPacketnum] = buf;
  3929  0745  083C               	movf	waitFlag@buf,w
  3930  0746  00F6               	movwf	??_waitFlag
  3931  0747  0868               	movf	_dPacketnum,w
  3932  0748  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3933  0749  0084               	movwf	4
  3934  074A  0876               	movf	??_waitFlag,w
  3935  074B  1783               	bsf	3,7	;select IRP bank3
  3936  074C  0080               	movwf	0
  3937                           
  3938                           ;decode_AX25.c: 235: dPacketnum ++;
  3939  074D  3001               	movlw	1
  3940  074E  07E8               	addwf	_dPacketnum,f
  3941  074F  1803               	skipnc
  3942  0750  0AE9               	incf	_dPacketnum+1,f
  3943  0751  3000               	movlw	0
  3944  0752  07E9               	addwf	_dPacketnum+1,f
  3945                           
  3946                           ;decode_AX25.c: 236: for(UINT j=0;j<8;j++){
  3947  0753  01B8               	clrf	waitFlag@j_135
  3948  0754  01B9               	clrf	waitFlag@j_135+1
  3949  0755  3000               	movlw	0
  3950  0756  0239               	subwf	waitFlag@j_135+1,w
  3951  0757  3008               	movlw	8
  3952  0758  1903               	skipnz
  3953  0759  0238               	subwf	waitFlag@j_135,w
  3954  075A  1803               	btfsc	3,0
  3955  075B  2F84               	goto	l3005
  3956  075C                     l2991:	
  3957                           
  3958                           ;decode_AX25.c: 237: flag_judge = getbit();
  3959  075C  120A  158A  2286  120A  118A  	fcall	_getbit
  3960  0761  0871               	movf	?_getbit+1,w
  3961  0762  1283               	bcf	3,5	;RP0=0, select bank0
  3962  0763  1303               	bcf	3,6	;RP1=0, select bank0
  3963  0764  00BB               	movwf	waitFlag@flag_judge+1
  3964  0765  0870               	movf	?_getbit,w
  3965  0766  00BA               	movwf	waitFlag@flag_judge
  3966                           
  3967                           ;decode_AX25.c: 238: buf = buf >> 1;
  3968  0767  083C               	movf	waitFlag@buf,w
  3969  0768  00F6               	movwf	??_waitFlag
  3970  0769  1003               	clrc
  3971  076A  0C76               	rrf	??_waitFlag,w
  3972  076B  00F7               	movwf	??_waitFlag+1
  3973  076C  0877               	movf	??_waitFlag+1,w
  3974  076D  00BC               	movwf	waitFlag@buf
  3975                           
  3976                           ;decode_AX25.c: 240: buf = buf | 0x00;
  3977  076E  083A               	movf	waitFlag@flag_judge,w
  3978  076F  043B               	iorwf	waitFlag@flag_judge+1,w
  3979  0770  1903               	btfsc	3,2
  3980  0771  2F77               	goto	l3001
  3981                           
  3982                           ;decode_AX25.c: 242: buf = buf | 0x80;
  3983                           
  3984                           ;decode_AX25.c: 241: }else{
  3985  0772  083C               	movf	waitFlag@buf,w
  3986  0773  3880               	iorlw	128
  3987  0774  00F6               	movwf	??_waitFlag
  3988  0775  0876               	movf	??_waitFlag,w
  3989  0776  00BC               	movwf	waitFlag@buf
  3990  0777                     l3001:	
  3991  0777  3001               	movlw	1
  3992  0778  07B8               	addwf	waitFlag@j_135,f
  3993  0779  1803               	skipnc
  3994  077A  0AB9               	incf	waitFlag@j_135+1,f
  3995  077B  3000               	movlw	0
  3996  077C  07B9               	addwf	waitFlag@j_135+1,f
  3997  077D  3000               	movlw	0
  3998  077E  0239               	subwf	waitFlag@j_135+1,w
  3999  077F  3008               	movlw	8
  4000  0780  1903               	skipnz
  4001  0781  0238               	subwf	waitFlag@j_135,w
  4002  0782  1C03               	skipc
  4003  0783  2F5C               	goto	l2991
  4004  0784                     l3005:	
  4005                           
  4006                           ;decode_AX25.c: 243: }
  4007                           ;decode_AX25.c: 244: }
  4008                           ;decode_AX25.c: 245: if(buf == ("JQ1ZHX"[5] << 1)){
  4009  0784  3008               	movlw	low (((STR_7+5)-__stringbase)| (0+32768))
  4010  0785  0084               	movwf	4
  4011  0786  120A  158A  2000  120A  118A  	fcall	stringdir
  4012  078B  00F6               	movwf	??_waitFlag
  4013  078C  01F7               	clrf	??_waitFlag+1
  4014  078D  1003               	clrc
  4015  078E  0DF6               	rlf	??_waitFlag,f
  4016  078F  0DF7               	rlf	??_waitFlag+1,f
  4017  0790  083C               	movf	waitFlag@buf,w
  4018  0791  00F8               	movwf	??_waitFlag+2
  4019  0792  01F9               	clrf	??_waitFlag+3
  4020  0793  0877               	movf	??_waitFlag+1,w
  4021  0794  0679               	xorwf	??_waitFlag+3,w
  4022  0795  1D03               	skipz
  4023  0796  2F99               	goto	u2615
  4024  0797  0876               	movf	??_waitFlag,w
  4025  0798  0678               	xorwf	??_waitFlag+2,w
  4026  0799                     u2615:	
  4027  0799  1D03               	skipz
  4028  079A  2FB0               	goto	l3023
  4029                           
  4030                           ;decode_AX25.c: 246: dPacket[dPacketnum] = buf;
  4031  079B  083C               	movf	waitFlag@buf,w
  4032  079C  00F6               	movwf	??_waitFlag
  4033  079D  0868               	movf	_dPacketnum,w
  4034  079E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4035  079F  0084               	movwf	4
  4036  07A0  0876               	movf	??_waitFlag,w
  4037  07A1  1783               	bsf	3,7	;select IRP bank3
  4038  07A2  0080               	movwf	0
  4039                           
  4040                           ;decode_AX25.c: 247: dPacketnum ++;
  4041  07A3  3001               	movlw	1
  4042  07A4  07E8               	addwf	_dPacketnum,f
  4043  07A5  1803               	skipnc
  4044  07A6  0AE9               	incf	_dPacketnum+1,f
  4045  07A7  3000               	movlw	0
  4046  07A8  07E9               	addwf	_dPacketnum+1,f
  4047                           
  4048                           ;decode_AX25.c: 248: rcv_state ++;
  4049  07A9  3001               	movlw	1
  4050  07AA  07EA               	addwf	_rcv_state,f
  4051  07AB  1803               	skipnc
  4052  07AC  0AEB               	incf	_rcv_state+1,f
  4053  07AD  3000               	movlw	0
  4054  07AE  07EB               	addwf	_rcv_state+1,f
  4055                           
  4056                           ;decode_AX25.c: 249: }else{
  4057  07AF  2B2F               	goto	l3025
  4058  07B0                     l3023:	
  4059                           ;decode_AX25.c: 268: }
  4060                           ;decode_AX25.c: 269: }else{
  4061                           
  4062                           ;decode_AX25.c: 267: rcv_state = 0;
  4063                           
  4064                           ;decode_AX25.c: 266: dPacketnum = 0;
  4065                           
  4066                           ;decode_AX25.c: 264: }
  4067                           ;decode_AX25.c: 265: }else{
  4068                           
  4069                           ;decode_AX25.c: 263: rcv_state = 0;
  4070                           
  4071                           ;decode_AX25.c: 262: dPacketnum = 0;
  4072                           
  4073                           ;decode_AX25.c: 260: }
  4074                           ;decode_AX25.c: 261: }else{
  4075                           
  4076                           ;decode_AX25.c: 259: rcv_state = 0;
  4077                           
  4078                           ;decode_AX25.c: 258: dPacketnum = 0;
  4079                           
  4080                           ;decode_AX25.c: 256: }
  4081                           ;decode_AX25.c: 257: }else{
  4082                           
  4083                           ;decode_AX25.c: 255: rcv_state = 0;
  4084                           
  4085                           ;decode_AX25.c: 254: dPacketnum = 0;
  4086                           
  4087                           ;decode_AX25.c: 252: }
  4088                           ;decode_AX25.c: 253: }else{
  4089                           
  4090                           ;decode_AX25.c: 251: rcv_state = 0;
  4091                           
  4092                           ;decode_AX25.c: 250: dPacketnum = 0;
  4093                           
  4094                           
  4095                           ;decode_AX25.c: 270: dPacketnum = 0;
  4096  07B0  01E8               	clrf	_dPacketnum
  4097  07B1  01E9               	clrf	_dPacketnum+1
  4098  07B2  2B2D               	goto	L6
  4099  07B3                     __end_of_waitFlag:	
  4100                           
  4101                           	psect	text5
  4102  0BE6                     __ptext5:	
  4103 ;; *************** function _getdata *****************
  4104 ;; Defined at:
  4105 ;;		line 278 in file "decode_AX25.c"
  4106 ;; Parameters:    Size  Location     Type
  4107 ;;		None
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;  dbitstatus      2    4[BANK0 ] unsigned int 
  4110 ;;  dstuff          2    2[BANK0 ] unsigned int 
  4111 ;;  bufstore_cou    2    0[BANK0 ] unsigned int 
  4112 ;;  buf             1    6[BANK0 ] unsigned char 
  4113 ;;  dammy_data      1    0        unsigned char 
  4114 ;; Return value:  Size  Location     Type
  4115 ;;                  1    wreg      void 
  4116 ;; Registers used:
  4117 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4118 ;; Tracked objects:
  4119 ;;		On entry : 0/0
  4120 ;;		On exit  : 0/0
  4121 ;;		Unchanged: 0/0
  4122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4123 ;;      Params:         0       0       0       0       0
  4124 ;;      Locals:         0       7       0       0       0
  4125 ;;      Temps:          2       0       0       0       0
  4126 ;;      Totals:         2       7       0       0       0
  4127 ;;Total ram usage:        9 bytes
  4128 ;; Hardware stack levels used:    1
  4129 ;; Hardware stack levels required when called:    1
  4130 ;; This function calls:
  4131 ;;		_getbit
  4132 ;; This function is called by:
  4133 ;;		_ReceivePacket_data
  4134 ;;		_ReceivePacket
  4135 ;; This function uses a non-reentrant model
  4136 ;;
  4137                           
  4138                           
  4139                           ;psect for function _getdata
  4140  0BE6                     _getdata:	
  4141                           
  4142                           ;decode_AX25.c: 279: UBYTE buf = 0x00;
  4143                           
  4144                           ;incstack = 0
  4145                           ; Regs used in _getdata: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4146  0BE6  1283               	bcf	3,5	;RP0=0, select bank0
  4147  0BE7  1303               	bcf	3,6	;RP1=0, select bank0
  4148  0BE8  01A6               	clrf	getdata@buf
  4149                           
  4150                           ;decode_AX25.c: 280: UINT dstuff = 0;
  4151  0BE9  01A2               	clrf	getdata@dstuff
  4152  0BEA  01A3               	clrf	getdata@dstuff+1
  4153                           
  4154                           ;decode_AX25.c: 281: UBYTE dammy_data;
  4155                           ;decode_AX25.c: 282: UINT bufstore_counter = 0;
  4156  0BEB  01A0               	clrf	getdata@bufstore_counter
  4157  0BEC  01A1               	clrf	getdata@bufstore_counter+1
  4158                           
  4159                           ;decode_AX25.c: 283: UINT dbitstatus = 0;
  4160  0BED  01A4               	clrf	getdata@dbitstatus
  4161  0BEE  01A5               	clrf	getdata@dbitstatus+1
  4162  0BEF                     l3059:	
  4163                           ;decode_AX25.c: 285: while(rcv_state == 2){
  4164                           
  4165  0BEF  3002               	movlw	2
  4166  0BF0  066A               	xorwf	_rcv_state,w
  4167  0BF1  046B               	iorwf	_rcv_state+1,w
  4168  0BF2  1D03               	btfss	3,2
  4169  0BF3  0008               	return
  4170                           
  4171                           ;decode_AX25.c: 286: dbitstatus = getbit();
  4172  0BF4  120A  158A  2286  120A  158A  	fcall	_getbit
  4173  0BF9  0871               	movf	?_getbit+1,w
  4174  0BFA  1283               	bcf	3,5	;RP0=0, select bank0
  4175  0BFB  1303               	bcf	3,6	;RP1=0, select bank0
  4176  0BFC  00A5               	movwf	getdata@dbitstatus+1
  4177  0BFD  0870               	movf	?_getbit,w
  4178  0BFE  00A4               	movwf	getdata@dbitstatus
  4179                           
  4180                           ;decode_AX25.c: 287: if(dstuff == 5){
  4181  0BFF  3005               	movlw	5
  4182  0C00  0622               	xorwf	getdata@dstuff,w
  4183  0C01  0423               	iorwf	getdata@dstuff+1,w
  4184  0C02  1D03               	btfss	3,2
  4185  0C03  2C12               	goto	l3041
  4186                           
  4187                           ;decode_AX25.c: 288: if(dbitstatus == 1){
  4188  0C04  0324               	decf	getdata@dbitstatus,w
  4189  0C05  0425               	iorwf	getdata@dbitstatus+1,w
  4190  0C06  1D03               	btfss	3,2
  4191  0C07  2C0F               	goto	l3039
  4192                           
  4193                           ;decode_AX25.c: 289: rcv_state ++;
  4194  0C08  3001               	movlw	1
  4195  0C09  07EA               	addwf	_rcv_state,f
  4196  0C0A  1803               	skipnc
  4197  0C0B  0AEB               	incf	_rcv_state+1,f
  4198  0C0C  3000               	movlw	0
  4199  0C0D  07EB               	addwf	_rcv_state+1,f
  4200                           
  4201                           ;decode_AX25.c: 290: break;
  4202  0C0E  0008               	return
  4203  0C0F                     l3039:	
  4204                           ;decode_AX25.c: 291: }else{
  4205                           
  4206                           
  4207                           ;decode_AX25.c: 292: dstuff = 0;
  4208  0C0F  01A2               	clrf	getdata@dstuff
  4209  0C10  01A3               	clrf	getdata@dstuff+1
  4210                           
  4211                           ;decode_AX25.c: 293: }
  4212                           ;decode_AX25.c: 294: }else{
  4213  0C11  2BEF               	goto	l3059
  4214  0C12                     l3041:	
  4215                           
  4216                           ;decode_AX25.c: 295: buf = buf >> 1;
  4217  0C12  0826               	movf	getdata@buf,w
  4218  0C13  00F6               	movwf	??_getdata
  4219  0C14  1003               	clrc
  4220  0C15  0C76               	rrf	??_getdata,w
  4221  0C16  00F7               	movwf	??_getdata+1
  4222  0C17  0877               	movf	??_getdata+1,w
  4223  0C18  00A6               	movwf	getdata@buf
  4224                           
  4225                           ;decode_AX25.c: 297: buf = buf | 0x00;
  4226  0C19  0824               	movf	getdata@dbitstatus,w
  4227  0C1A  0425               	iorwf	getdata@dbitstatus+1,w
  4228  0C1B  1D03               	btfss	3,2
  4229  0C1C  2C20               	goto	l3045
  4230                           
  4231                           ;decode_AX25.c: 298: dstuff = 0;
  4232  0C1D  01A2               	clrf	getdata@dstuff
  4233  0C1E  01A3               	clrf	getdata@dstuff+1
  4234                           
  4235                           ;decode_AX25.c: 299: }else{
  4236  0C1F  2C2B               	goto	l3049
  4237  0C20                     l3045:	
  4238                           
  4239                           ;decode_AX25.c: 300: buf = buf | 0x80;
  4240  0C20  0826               	movf	getdata@buf,w
  4241  0C21  3880               	iorlw	128
  4242  0C22  00F6               	movwf	??_getdata
  4243  0C23  0876               	movf	??_getdata,w
  4244  0C24  00A6               	movwf	getdata@buf
  4245                           
  4246                           ;decode_AX25.c: 301: dstuff ++;
  4247  0C25  3001               	movlw	1
  4248  0C26  07A2               	addwf	getdata@dstuff,f
  4249  0C27  1803               	skipnc
  4250  0C28  0AA3               	incf	getdata@dstuff+1,f
  4251  0C29  3000               	movlw	0
  4252  0C2A  07A3               	addwf	getdata@dstuff+1,f
  4253  0C2B                     l3049:	
  4254                           
  4255                           ;decode_AX25.c: 302: }
  4256                           ;decode_AX25.c: 303: bufstore_counter ++;
  4257  0C2B  3001               	movlw	1
  4258  0C2C  07A0               	addwf	getdata@bufstore_counter,f
  4259  0C2D  1803               	skipnc
  4260  0C2E  0AA1               	incf	getdata@bufstore_counter+1,f
  4261  0C2F  3000               	movlw	0
  4262  0C30  07A1               	addwf	getdata@bufstore_counter+1,f
  4263                           
  4264                           ;decode_AX25.c: 304: if(bufstore_counter == 8){
  4265  0C31  3008               	movlw	8
  4266  0C32  0620               	xorwf	getdata@bufstore_counter,w
  4267  0C33  0421               	iorwf	getdata@bufstore_counter+1,w
  4268  0C34  1D03               	btfss	3,2
  4269  0C35  2BEF               	goto	l3059
  4270                           
  4271                           ;decode_AX25.c: 305: bufstore_counter = 0;
  4272  0C36  01A0               	clrf	getdata@bufstore_counter
  4273  0C37  01A1               	clrf	getdata@bufstore_counter+1
  4274                           
  4275                           ;decode_AX25.c: 306: dPacket[dPacketnum] = buf;
  4276  0C38  0826               	movf	getdata@buf,w
  4277  0C39  00F6               	movwf	??_getdata
  4278  0C3A  0868               	movf	_dPacketnum,w
  4279  0C3B  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4280  0C3C  0084               	movwf	4
  4281  0C3D  0876               	movf	??_getdata,w
  4282  0C3E  1783               	bsf	3,7	;select IRP bank3
  4283  0C3F  0080               	movwf	0
  4284                           
  4285                           ;decode_AX25.c: 307: dPacketnum ++;
  4286  0C40  3001               	movlw	1
  4287  0C41  07E8               	addwf	_dPacketnum,f
  4288  0C42  1803               	skipnc
  4289  0C43  0AE9               	incf	_dPacketnum+1,f
  4290  0C44  3000               	movlw	0
  4291  0C45  07E9               	addwf	_dPacketnum+1,f
  4292  0C46  2BEF               	goto	l3059
  4293  0C47                     __end_of_getdata:	
  4294                           
  4295                           	psect	text6
  4296  0A86                     __ptext6:	
  4297 ;; *************** function _getbit *****************
  4298 ;; Defined at:
  4299 ;;		line 40 in file "decode_AX25.c"
  4300 ;; Parameters:    Size  Location     Type
  4301 ;;		None
  4302 ;; Auto vars:     Size  Location     Type
  4303 ;;  i               2    4[COMMON] unsigned int 
  4304 ;; Return value:  Size  Location     Type
  4305 ;;                  2    0[COMMON] unsigned int 
  4306 ;; Registers used:
  4307 ;;		wreg, status,2, status,0
  4308 ;; Tracked objects:
  4309 ;;		On entry : 0/0
  4310 ;;		On exit  : 0/0
  4311 ;;		Unchanged: 0/0
  4312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4313 ;;      Params:         2       0       0       0       0
  4314 ;;      Locals:         2       0       0       0       0
  4315 ;;      Temps:          2       0       0       0       0
  4316 ;;      Totals:         6       0       0       0       0
  4317 ;;Total ram usage:        6 bytes
  4318 ;; Hardware stack levels used:    1
  4319 ;; This function calls:
  4320 ;;		Nothing
  4321 ;; This function is called by:
  4322 ;;		_waitFlag
  4323 ;;		_getdata
  4324 ;;		_conv_DI_UARTRX
  4325 ;; This function uses a non-reentrant model
  4326 ;;
  4327                           
  4328                           
  4329                           ;psect for function _getbit
  4330  0A86                     _getbit:	
  4331                           
  4332                           ;decode_AX25.c: 41: static UINT oldbit;
  4333                           ;decode_AX25.c: 42: oldbit = RB5;
  4334                           
  4335                           ;incstack = 0
  4336                           ; Regs used in _getbit: [wreg+status,2+status,0]
  4337  0A86  1003               	clrc
  4338  0A87  1283               	bcf	3,5	;RP0=0, select bank0
  4339  0A88  1303               	bcf	3,6	;RP1=0, select bank0
  4340  0A89  1A86               	btfsc	6,5	;volatile
  4341  0A8A  1403               	setc
  4342  0A8B  3000               	movlw	0
  4343  0A8C  1803               	skipnc
  4344  0A8D  3001               	movlw	1
  4345  0A8E  00F2               	movwf	??_getbit
  4346  0A8F  01F3               	clrf	??_getbit+1
  4347  0A90  0872               	movf	??_getbit,w
  4348  0A91  1683               	bsf	3,5	;RP0=1, select bank1
  4349  0A92  1303               	bcf	3,6	;RP1=0, select bank1
  4350  0A93  00E6               	movwf	getbit@oldbit^(0+128)
  4351  0A94  0873               	movf	??_getbit+1,w
  4352  0A95  00E7               	movwf	(getbit@oldbit+1)^(0+128)
  4353                           
  4354                           ;decode_AX25.c: 43: for(UINT i=0;i<62;i++){
  4355  0A96  01F4               	clrf	getbit@i
  4356  0A97  01F5               	clrf	getbit@i+1
  4357  0A98  3000               	movlw	0
  4358  0A99  0275               	subwf	getbit@i+1,w
  4359  0A9A  303E               	movlw	62
  4360  0A9B  1903               	skipnz
  4361  0A9C  0274               	subwf	getbit@i,w
  4362  0A9D  1803               	btfsc	3,0
  4363  0A9E  2ACD               	goto	l2505
  4364                           
  4365                           ;decode_AX25.c: 44: if(RB5 != oldbit){
  4366  0A9F  1003               	clrc
  4367  0AA0                     L7:	
  4368  0AA0  1283               	bcf	3,5	;RP0=0, select bank0
  4369  0AA1  1A86               	btfsc	6,5	;volatile
  4370  0AA2  1403               	setc
  4371  0AA3  3000               	movlw	0
  4372  0AA4  1803               	skipnc
  4373  0AA5  3001               	movlw	1
  4374  0AA6  00F2               	movwf	??_getbit
  4375  0AA7  01F3               	clrf	??_getbit+1
  4376  0AA8  1683               	bsf	3,5	;RP0=1, select bank1
  4377  0AA9  1303               	bcf	3,6	;RP1=0, select bank1
  4378  0AAA  0867               	movf	(getbit@oldbit+1)^(0+128),w
  4379  0AAB  0673               	xorwf	??_getbit+1,w
  4380  0AAC  1D03               	skipz
  4381  0AAD  2AB0               	goto	u1845
  4382  0AAE  0866               	movf	getbit@oldbit^(0+128),w
  4383  0AAF  0672               	xorwf	??_getbit,w
  4384  0AB0                     u1845:	
  4385  0AB0  1903               	skipnz
  4386  0AB1  2AC0               	goto	l2503
  4387                           
  4388                           ;decode_AX25.c: 45: _delay((unsigned long)((400)*(10000000/4000000.0)));
  4389  0AB2  30C7               	movlw	199
  4390  0AB3  00F2               	movwf	??_getbit
  4391  0AB4                     u3667:	
  4392  0AB4  2AB5               	nop2
  4393  0AB5  0BF2               	decfsz	??_getbit,f
  4394  0AB6  2AB4               	goto	u3667
  4395  0AB7  2AB8               	nop2
  4396  0AB8  2AB9               	nop2
  4397                           
  4398                           ;decode_AX25.c: 46: RC2= 1- RC2;
  4399  0AB9  3004               	movlw	4
  4400  0ABA  1283               	bcf	3,5	;RP0=0, select bank0
  4401  0ABB  1303               	bcf	3,6	;RP1=0, select bank0
  4402  0ABC  0687               	xorwf	7,f
  4403                           
  4404                           ;decode_AX25.c: 47: return 0;
  4405  0ABD  01F0               	clrf	?_getbit
  4406  0ABE  01F1               	clrf	?_getbit+1
  4407  0ABF  0008               	return
  4408  0AC0                     l2503:	
  4409  0AC0  3001               	movlw	1
  4410  0AC1  07F4               	addwf	getbit@i,f
  4411  0AC2  1803               	skipnc
  4412  0AC3  0AF5               	incf	getbit@i+1,f
  4413  0AC4  3000               	movlw	0
  4414  0AC5  07F5               	addwf	getbit@i+1,f
  4415  0AC6  3000               	movlw	0
  4416  0AC7  0275               	subwf	getbit@i+1,w
  4417  0AC8  303E               	movlw	62
  4418  0AC9  1903               	skipnz
  4419  0ACA  0274               	subwf	getbit@i,w
  4420  0ACB  1C03               	skipc
  4421  0ACC  2AA0               	goto	L7
  4422  0ACD                     l2505:	
  4423                           
  4424                           ;decode_AX25.c: 48: }
  4425                           ;decode_AX25.c: 49: }
  4426                           ;decode_AX25.c: 50: return 1;
  4427  0ACD  3001               	movlw	1
  4428  0ACE  00F0               	movwf	?_getbit
  4429  0ACF  3000               	movlw	0
  4430  0AD0  00F1               	movwf	?_getbit+1
  4431  0AD1  0008               	return
  4432  0AD2                     __end_of_getbit:	
  4433                           
  4434                           	psect	text7
  4435  002A                     __ptext7:	
  4436 ;; *************** function _fcscheck *****************
  4437 ;; Defined at:
  4438 ;;		line 313 in file "decode_AX25.c"
  4439 ;; Parameters:    Size  Location     Type
  4440 ;;		None
  4441 ;; Auto vars:     Size  Location     Type
  4442 ;;  i               2    7[COMMON] unsigned int 
  4443 ;;  i               2    5[COMMON] unsigned int 
  4444 ;;  byte            1    9[COMMON] unsigned char 
  4445 ;;  bt              1    4[COMMON] unsigned char 
  4446 ;; Return value:  Size  Location     Type
  4447 ;;                  2    0[COMMON] unsigned int 
  4448 ;; Registers used:
  4449 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4450 ;; Tracked objects:
  4451 ;;		On entry : 0/0
  4452 ;;		On exit  : 0/0
  4453 ;;		Unchanged: 0/0
  4454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4455 ;;      Params:         2       0       0       0       0
  4456 ;;      Locals:         6       0       0       0       0
  4457 ;;      Temps:          2       0       0       0       0
  4458 ;;      Totals:        10       0       0       0       0
  4459 ;;Total ram usage:       10 bytes
  4460 ;; Hardware stack levels used:    1
  4461 ;; This function calls:
  4462 ;;		Nothing
  4463 ;; This function is called by:
  4464 ;;		_ReceivePacket_data
  4465 ;;		_ReceivePacket
  4466 ;; This function uses a non-reentrant model
  4467 ;;
  4468                           
  4469                           
  4470                           ;psect for function _fcscheck
  4471  002A                     _fcscheck:	
  4472                           
  4473                           ;decode_AX25.c: 314: UBYTE bt,byte;
  4474                           ;decode_AX25.c: 315: dfcslo = dfcshi = 0xff;
  4475                           
  4476                           ;incstack = 0
  4477                           ; Regs used in _fcscheck: [wreg-fsr0h+status,2+status,0]
  4478  002A  30FF               	movlw	255
  4479  002B  1283               	bcf	3,5	;RP0=0, select bank0
  4480  002C  1303               	bcf	3,6	;RP1=0, select bank0
  4481  002D  00EF               	movwf	_dfcshi
  4482  002E  00F2               	movwf	??_fcscheck
  4483  002F  0872               	movf	??_fcscheck,w
  4484  0030  00EE               	movwf	_dfcslo
  4485                           
  4486                           ;decode_AX25.c: 316: while(rcv_state == 3){
  4487  0031  3003               	movlw	3
  4488  0032  066A               	xorwf	_rcv_state,w
  4489  0033  046B               	iorwf	_rcv_state+1,w
  4490  0034  1D03               	btfss	3,2
  4491  0035  0008               	return
  4492                           
  4493                           ;decode_AX25.c: 317: for(UINT i=0;i<dPacketnum-2;i++){
  4494  0036  01F5               	clrf	fcscheck@i
  4495  0037  01F6               	clrf	fcscheck@i+1
  4496  0038                     l3087:	
  4497  0038  0868               	movf	_dPacketnum,w
  4498  0039  3EFE               	addlw	254
  4499  003A  00F2               	movwf	??_fcscheck
  4500  003B  0869               	movf	_dPacketnum+1,w
  4501  003C  1803               	skipnc
  4502  003D  3E01               	addlw	1
  4503  003E  3EFF               	addlw	255
  4504  003F  00F3               	movwf	??_fcscheck+1
  4505  0040  0873               	movf	??_fcscheck+1,w
  4506  0041  0276               	subwf	fcscheck@i+1,w
  4507  0042  1D03               	skipz
  4508  0043  2846               	goto	u2715
  4509  0044  0872               	movf	??_fcscheck,w
  4510  0045  0275               	subwf	fcscheck@i,w
  4511  0046                     u2715:	
  4512  0046  1803               	btfsc	3,0
  4513  0047  2891               	goto	l275
  4514                           
  4515                           ;decode_AX25.c: 318: byte = dPacket[i];
  4516  0048  0875               	movf	fcscheck@i,w
  4517  0049  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4518  004A  0084               	movwf	4
  4519  004B  1783               	bsf	3,7	;select IRP bank3
  4520  004C  0800               	movf	0,w
  4521  004D  00F2               	movwf	??_fcscheck
  4522  004E  0872               	movf	??_fcscheck,w
  4523  004F  00F9               	movwf	fcscheck@byte
  4524                           
  4525                           ;decode_AX25.c: 319: for(UINT i=0;i<8;i++){
  4526  0050  01F7               	clrf	fcscheck@i_147
  4527  0051  01F8               	clrf	fcscheck@i_147+1
  4528  0052  3000               	movlw	0
  4529  0053  0278               	subwf	fcscheck@i_147+1,w
  4530  0054  3008               	movlw	8
  4531  0055  1903               	skipnz
  4532  0056  0277               	subwf	fcscheck@i_147,w
  4533  0057  1803               	btfsc	3,0
  4534  0058  288A               	goto	l3085
  4535  0059                     l3073:	
  4536                           
  4537                           ;decode_AX25.c: 320: bt = byte & 0x01;
  4538  0059  0879               	movf	fcscheck@byte,w
  4539  005A  3901               	andlw	1
  4540  005B  00F2               	movwf	??_fcscheck
  4541  005C  0872               	movf	??_fcscheck,w
  4542  005D  00F4               	movwf	fcscheck@bt
  4543  005E  1003               	bcf	3,0	;# 
  4544  005F  0CEF               	rrf	_dfcshi,f	;# 
  4545  0060  0CEE               	rrf	_dfcslo,f	;# 
  4546                           
  4547                           ;decode_AX25.c: 326: if(((STATUS & 0x01)^bt) == 0x01){
  4548  0061  3001               	movlw	1
  4549  0062  1283               	bcf	3,5	;RP0=0, select bank0
  4550  0063  1303               	bcf	3,6	;RP1=0, select bank0
  4551  0064  0503               	andwf	3,w	;volatile
  4552  0065  00F2               	movwf	??_fcscheck
  4553  0066  0874               	movf	fcscheck@bt,w
  4554  0067  0672               	xorwf	??_fcscheck,w
  4555  0068  00F3               	movwf	??_fcscheck+1
  4556  0069  0373               	decf	??_fcscheck+1,w
  4557  006A  1D03               	btfss	3,2
  4558  006B  2876               	goto	l3079
  4559                           
  4560                           ;decode_AX25.c: 327: dfcshi = dfcshi ^ 0x84;
  4561  006C  086F               	movf	_dfcshi,w
  4562  006D  3A84               	xorlw	132
  4563  006E  00F2               	movwf	??_fcscheck
  4564  006F  0872               	movf	??_fcscheck,w
  4565  0070  00EF               	movwf	_dfcshi
  4566                           
  4567                           ;decode_AX25.c: 328: dfcslo = dfcslo ^ 0x08;
  4568  0071  086E               	movf	_dfcslo,w
  4569  0072  3A08               	xorlw	8
  4570  0073  00F2               	movwf	??_fcscheck
  4571  0074  0872               	movf	??_fcscheck,w
  4572  0075  00EE               	movwf	_dfcslo
  4573  0076                     l3079:	
  4574                           
  4575                           ;decode_AX25.c: 329: }
  4576                           ;decode_AX25.c: 330: byte = byte >> 1;
  4577  0076  0879               	movf	fcscheck@byte,w
  4578  0077  00F2               	movwf	??_fcscheck
  4579  0078  1003               	clrc
  4580  0079  0C72               	rrf	??_fcscheck,w
  4581  007A  00F3               	movwf	??_fcscheck+1
  4582  007B  0873               	movf	??_fcscheck+1,w
  4583  007C  00F9               	movwf	fcscheck@byte
  4584  007D  3001               	movlw	1
  4585  007E  07F7               	addwf	fcscheck@i_147,f
  4586  007F  1803               	skipnc
  4587  0080  0AF8               	incf	fcscheck@i_147+1,f
  4588  0081  3000               	movlw	0
  4589  0082  07F8               	addwf	fcscheck@i_147+1,f
  4590  0083  3000               	movlw	0
  4591  0084  0278               	subwf	fcscheck@i_147+1,w
  4592  0085  3008               	movlw	8
  4593  0086  1903               	skipnz
  4594  0087  0277               	subwf	fcscheck@i_147,w
  4595  0088  1C03               	skipc
  4596  0089  2859               	goto	l3073
  4597  008A                     l3085:	
  4598  008A  3001               	movlw	1
  4599  008B  07F5               	addwf	fcscheck@i,f
  4600  008C  1803               	skipnc
  4601  008D  0AF6               	incf	fcscheck@i+1,f
  4602  008E  3000               	movlw	0
  4603  008F  07F6               	addwf	fcscheck@i+1,f
  4604  0090  2838               	goto	l3087
  4605  0091                     l275:	
  4606                           
  4607                           ;decode_AX25.c: 331: }
  4608                           ;decode_AX25.c: 332: }
  4609                           ;decode_AX25.c: 333: dfcslo = dfcslo ^ 0xff;
  4610  0091  09EE               	comf	_dfcslo,f
  4611                           
  4612                           ;decode_AX25.c: 334: dfcshi = dfcshi ^ 0xff;
  4613  0092  09EF               	comf	_dfcshi,f
  4614                           
  4615                           ;decode_AX25.c: 337: if((dPacket[dPacketnum-2] == dfcslo) && (dPacket[dPacketnum-1] == d
      +                          fcshi)){
  4616  0093  0868               	movf	_dPacketnum,w
  4617  0094  3EFE               	addlw	254
  4618  0095  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4619  0096  0084               	movwf	4
  4620  0097  1783               	bsf	3,7	;select IRP bank3
  4621  0098  0800               	movf	0,w
  4622  0099  066E               	xorwf	_dfcslo,w
  4623  009A  1D03               	skipz
  4624  009B  28A9               	goto	l3099
  4625  009C  0868               	movf	_dPacketnum,w
  4626  009D  3EFF               	addlw	255
  4627  009E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4628  009F  0084               	movwf	4
  4629  00A0  0800               	movf	0,w
  4630  00A1  066F               	xorwf	_dfcshi,w
  4631  00A2  1D03               	skipz
  4632  00A3  28A9               	goto	l3099
  4633                           
  4634                           ;decode_AX25.c: 342: return 1;
  4635  00A4  3001               	movlw	1
  4636  00A5  00F0               	movwf	?_fcscheck
  4637  00A6  3000               	movlw	0
  4638  00A7  00F1               	movwf	?_fcscheck+1
  4639  00A8  0008               	return
  4640  00A9                     l3099:	
  4641                           ;decode_AX25.c: 343: }else{
  4642                           
  4643                           
  4644                           ;decode_AX25.c: 348: return 0;
  4645  00A9  01F0               	clrf	?_fcscheck
  4646  00AA  01F1               	clrf	?_fcscheck+1
  4647  00AB  0008               	return
  4648  00AC                     __end_of_fcscheck:	
  4649                           
  4650                           	psect	text8
  4651  0826                     __ptext8:	
  4652 ;; *************** function _NM_waddress *****************
  4653 ;; Defined at:
  4654 ;;		line 72 in file "UART.c"
  4655 ;; Parameters:    Size  Location     Type
  4656 ;;  NM_wad_heade    1    wreg     unsigned char 
  4657 ;;  whigh_addres    1    1[COMMON] unsigned char 
  4658 ;;  wlow_address    1    2[COMMON] unsigned char 
  4659 ;; Auto vars:     Size  Location     Type
  4660 ;;  NM_wad_heade    1    3[COMMON] unsigned char 
  4661 ;; Return value:  Size  Location     Type
  4662 ;;                  1    wreg      void 
  4663 ;; Registers used:
  4664 ;;		wreg, status,2, status,0, pclath, cstack
  4665 ;; Tracked objects:
  4666 ;;		On entry : 0/0
  4667 ;;		On exit  : 0/0
  4668 ;;		Unchanged: 0/0
  4669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4670 ;;      Params:         2       0       0       0       0
  4671 ;;      Locals:         1       0       0       0       0
  4672 ;;      Temps:          0       0       0       0       0
  4673 ;;      Totals:         3       0       0       0       0
  4674 ;;Total ram usage:        3 bytes
  4675 ;; Hardware stack levels used:    1
  4676 ;; Hardware stack levels required when called:    1
  4677 ;; This function calls:
  4678 ;;		_putch
  4679 ;; This function is called by:
  4680 ;;		_main
  4681 ;; This function uses a non-reentrant model
  4682 ;;
  4683                           
  4684                           
  4685                           ;psect for function _NM_waddress
  4686  0826                     _NM_waddress:	
  4687                           
  4688                           ;incstack = 0
  4689                           ; Regs used in _NM_waddress: [wreg+status,2+status,0+pclath+cstack]
  4690                           ;NM_waddress@NM_wad_header stored from wreg
  4691  0826  00F3               	movwf	NM_waddress@NM_wad_header
  4692                           
  4693                           ;UART.c: 73: putch(NM_wad_header);
  4694  0827  0873               	movf	NM_waddress@NM_wad_header,w
  4695  0828  160A  118A  27DF  120A  158A  	fcall	_putch
  4696                           
  4697                           ;UART.c: 74: putch(whigh_address);
  4698  082D  0871               	movf	NM_waddress@whigh_address,w
  4699  082E  160A  118A  27DF  120A  158A  	fcall	_putch
  4700                           
  4701                           ;UART.c: 75: putch(wlow_address);
  4702  0833  0872               	movf	NM_waddress@wlow_address,w
  4703  0834  160A  118A  27DF   	fcall	_putch
  4704  0837  0008               	return
  4705  0838                     __end_of_NM_waddress:	
  4706                           
  4707                           	psect	text9
  4708  17DF                     __ptext9:	
  4709 ;; *************** function _putch *****************
  4710 ;; Defined at:
  4711 ;;		line 39 in file "UART.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;  byte            1    wreg     unsigned char 
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;  byte            1    0[COMMON] unsigned char 
  4716 ;; Return value:  Size  Location     Type
  4717 ;;                  1    wreg      void 
  4718 ;; Registers used:
  4719 ;;		wreg
  4720 ;; Tracked objects:
  4721 ;;		On entry : 0/0
  4722 ;;		On exit  : 0/0
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4725 ;;      Params:         0       0       0       0       0
  4726 ;;      Locals:         1       0       0       0       0
  4727 ;;      Temps:          0       0       0       0       0
  4728 ;;      Totals:         1       0       0       0       0
  4729 ;;Total ram usage:        1 bytes
  4730 ;; Hardware stack levels used:    1
  4731 ;; This function calls:
  4732 ;;		Nothing
  4733 ;; This function is called by:
  4734 ;;		_NM_waddress
  4735 ;;		_TXOBC_waddress
  4736 ;;		_putstr
  4737 ;;		_putcrlf
  4738 ;;		_put_error
  4739 ;;		_put_ok
  4740 ;;		_putAX25
  4741 ;;		_conv_DI_UARTRX
  4742 ;;		_test_Packetmaker
  4743 ;; This function uses a non-reentrant model
  4744 ;;
  4745                           
  4746                           
  4747                           ;psect for function _putch
  4748  17DF                     _putch:	
  4749                           
  4750                           ;incstack = 0
  4751                           ; Regs used in _putch: [wreg]
  4752                           ;putch@byte stored from wreg
  4753  17DF  00F0               	movwf	putch@byte
  4754  17E0                     l69:	
  4755                           ;UART.c: 40: while(!TXIF);
  4756                           
  4757  17E0  1283               	bcf	3,5	;RP0=0, select bank0
  4758  17E1  1303               	bcf	3,6	;RP1=0, select bank0
  4759  17E2  1E0C               	btfss	12,4	;volatile
  4760  17E3  2FE0               	goto	l69
  4761                           
  4762                           ;UART.c: 41: TXREG = byte;
  4763  17E4  0870               	movf	putch@byte,w
  4764  17E5  0099               	movwf	25	;volatile
  4765  17E6  0008               	return
  4766  17E7                     __end_of_putch:	
  4767                           
  4768                           	psect	text10
  4769  0866                     __ptext10:	
  4770 ;; *************** function _Init_SERIAL *****************
  4771 ;; Defined at:
  4772 ;;		line 6 in file "UART.c"
  4773 ;; Parameters:    Size  Location     Type
  4774 ;;		None
  4775 ;; Auto vars:     Size  Location     Type
  4776 ;;		None
  4777 ;; Return value:  Size  Location     Type
  4778 ;;                  1    wreg      void 
  4779 ;; Registers used:
  4780 ;;		wreg
  4781 ;; Tracked objects:
  4782 ;;		On entry : 0/0
  4783 ;;		On exit  : 0/0
  4784 ;;		Unchanged: 0/0
  4785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4786 ;;      Params:         0       0       0       0       0
  4787 ;;      Locals:         0       0       0       0       0
  4788 ;;      Temps:          0       0       0       0       0
  4789 ;;      Totals:         0       0       0       0       0
  4790 ;;Total ram usage:        0 bytes
  4791 ;; Hardware stack levels used:    1
  4792 ;; This function calls:
  4793 ;;		Nothing
  4794 ;; This function is called by:
  4795 ;;		_main
  4796 ;; This function uses a non-reentrant model
  4797 ;;
  4798                           
  4799                           
  4800                           ;psect for function _Init_SERIAL
  4801  0866                     _Init_SERIAL:	
  4802                           
  4803                           ;UART.c: 7: SPBRG = 10;
  4804                           
  4805                           ;incstack = 0
  4806                           ; Regs used in _Init_SERIAL: [wreg]
  4807  0866  300A               	movlw	10
  4808  0867  1683               	bsf	3,5	;RP0=1, select bank1
  4809  0868  1303               	bcf	3,6	;RP1=0, select bank1
  4810  0869  0099               	movwf	25	;volatile
  4811                           
  4812                           ;UART.c: 8: BRGH = 0;
  4813  086A  1118               	bcf	24,2	;volatile
  4814                           
  4815                           ;UART.c: 9: SYNC = 0;
  4816  086B  1218               	bcf	24,4	;volatile
  4817                           
  4818                           ;UART.c: 10: SPEN = 1;
  4819  086C  1283               	bcf	3,5	;RP0=0, select bank0
  4820  086D  1303               	bcf	3,6	;RP1=0, select bank0
  4821  086E  1798               	bsf	24,7	;volatile
  4822                           
  4823                           ;UART.c: 11: CREN = 1;
  4824  086F  1618               	bsf	24,4	;volatile
  4825                           
  4826                           ;UART.c: 12: SREN = 0;
  4827  0870  1298               	bcf	24,5	;volatile
  4828                           
  4829                           ;UART.c: 13: RCIF = 0;
  4830  0871  128C               	bcf	12,5	;volatile
  4831                           
  4832                           ;UART.c: 14: TXIE = 0;
  4833  0872  1683               	bsf	3,5	;RP0=1, select bank1
  4834  0873  1303               	bcf	3,6	;RP1=0, select bank1
  4835  0874  120C               	bcf	12,4	;volatile
  4836                           
  4837                           ;UART.c: 15: RCIE = 1;
  4838  0875  168C               	bsf	12,5	;volatile
  4839                           
  4840                           ;UART.c: 16: TX9 = 0;
  4841  0876  1318               	bcf	24,6	;volatile
  4842                           
  4843                           ;UART.c: 17: RX9 = 0;
  4844  0877  1283               	bcf	3,5	;RP0=0, select bank0
  4845  0878  1303               	bcf	3,6	;RP1=0, select bank0
  4846  0879  1318               	bcf	24,6	;volatile
  4847                           
  4848                           ;UART.c: 18: TXEN = 0;
  4849  087A  1683               	bsf	3,5	;RP0=1, select bank1
  4850  087B  1303               	bcf	3,6	;RP1=0, select bank1
  4851  087C  1298               	bcf	24,5	;volatile
  4852                           
  4853                           ;UART.c: 19: TXEN = 1;
  4854  087D  1698               	bsf	24,5	;volatile
  4855  087E  0008               	return
  4856  087F                     __end_of_Init_SERIAL:	
  4857                           
  4858                           	psect	text11
  4859  084D                     __ptext11:	
  4860 ;; *************** function _Init_MPU *****************
  4861 ;; Defined at:
  4862 ;;		line 8 in file "Init_MPU.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;		None
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;		None
  4867 ;; Return value:  Size  Location     Type
  4868 ;;                  1    wreg      void 
  4869 ;; Registers used:
  4870 ;;		wreg, status,2
  4871 ;; Tracked objects:
  4872 ;;		On entry : 0/0
  4873 ;;		On exit  : 0/0
  4874 ;;		Unchanged: 0/0
  4875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4876 ;;      Params:         0       0       0       0       0
  4877 ;;      Locals:         0       0       0       0       0
  4878 ;;      Temps:          0       0       0       0       0
  4879 ;;      Totals:         0       0       0       0       0
  4880 ;;Total ram usage:        0 bytes
  4881 ;; Hardware stack levels used:    1
  4882 ;; This function calls:
  4883 ;;		Nothing
  4884 ;; This function is called by:
  4885 ;;		_main
  4886 ;; This function uses a non-reentrant model
  4887 ;;
  4888                           
  4889                           
  4890                           ;psect for function _Init_MPU
  4891  084D                     _Init_MPU:	
  4892                           
  4893                           ;Init_MPU.c: 11: PORTA = 0x00;
  4894                           
  4895                           ;incstack = 0
  4896                           ; Regs used in _Init_MPU: [wreg+status,2]
  4897  084D  1283               	bcf	3,5	;RP0=0, select bank0
  4898  084E  1303               	bcf	3,6	;RP1=0, select bank0
  4899  084F  0185               	clrf	5	;volatile
  4900                           
  4901                           ;Init_MPU.c: 12: PORTB = 0x00;
  4902  0850  0186               	clrf	6	;volatile
  4903                           
  4904                           ;Init_MPU.c: 13: PORTC = 0x00;
  4905  0851  0187               	clrf	7	;volatile
  4906                           
  4907                           ;Init_MPU.c: 14: PORTD = 0x00;
  4908  0852  0188               	clrf	8	;volatile
  4909                           
  4910                           ;Init_MPU.c: 15: PORTE = 0x00;
  4911  0853  0189               	clrf	9	;volatile
  4912                           
  4913                           ;Init_MPU.c: 23: TRISA = 0b10000000;
  4914  0854  3080               	movlw	128
  4915  0855  1683               	bsf	3,5	;RP0=1, select bank1
  4916  0856  1303               	bcf	3,6	;RP1=0, select bank1
  4917  0857  0085               	movwf	5	;volatile
  4918                           
  4919                           ;Init_MPU.c: 24: TRISB = 0b00100000;
  4920  0858  3020               	movlw	32
  4921  0859  0086               	movwf	6	;volatile
  4922                           
  4923                           ;Init_MPU.c: 25: TRISC = 0b10011000;
  4924  085A  3098               	movlw	152
  4925  085B  0087               	movwf	7	;volatile
  4926                           
  4927                           ;Init_MPU.c: 26: TRISD = 0b00000000;
  4928  085C  0188               	clrf	8	;volatile
  4929                           
  4930                           ;Init_MPU.c: 27: TRISE = 0b00000000;
  4931  085D  0189               	clrf	9	;volatile
  4932                           
  4933                           ;Init_MPU.c: 30: PORTA = 0x00;
  4934  085E  1283               	bcf	3,5	;RP0=0, select bank0
  4935  085F  1303               	bcf	3,6	;RP1=0, select bank0
  4936  0860  0185               	clrf	5	;volatile
  4937                           
  4938                           ;Init_MPU.c: 31: PORTB = 0x00;
  4939  0861  0186               	clrf	6	;volatile
  4940                           
  4941                           ;Init_MPU.c: 32: PORTC = 0x00;
  4942  0862  0187               	clrf	7	;volatile
  4943                           
  4944                           ;Init_MPU.c: 33: PORTD = 0x00;
  4945  0863  0188               	clrf	8	;volatile
  4946                           
  4947                           ;Init_MPU.c: 34: PORTE = 0x00;
  4948  0864  0189               	clrf	9	;volatile
  4949  0865  0008               	return
  4950  0866                     __end_of_Init_MPU:	
  4951                           
  4952                           	psect	text12
  4953  098C                     __ptext12:	
  4954 ;; *************** function _Init_I2C_M *****************
  4955 ;; Defined at:
  4956 ;;		line 8 in file "I2C.c"
  4957 ;; Parameters:    Size  Location     Type
  4958 ;;  c               4    0[BANK0 ] const unsigned long 
  4959 ;; Auto vars:     Size  Location     Type
  4960 ;;		None
  4961 ;; Return value:  Size  Location     Type
  4962 ;;                  1    wreg      void 
  4963 ;; Registers used:
  4964 ;;		wreg, status,2, status,0, pclath, cstack
  4965 ;; Tracked objects:
  4966 ;;		On entry : 0/0
  4967 ;;		On exit  : 0/0
  4968 ;;		Unchanged: 0/0
  4969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4970 ;;      Params:         0       4       0       0       0
  4971 ;;      Locals:         0       0       0       0       0
  4972 ;;      Temps:          0       4       0       0       0
  4973 ;;      Totals:         0       8       0       0       0
  4974 ;;Total ram usage:        8 bytes
  4975 ;; Hardware stack levels used:    1
  4976 ;; Hardware stack levels required when called:    1
  4977 ;; This function calls:
  4978 ;;		___lldiv
  4979 ;; This function is called by:
  4980 ;;		_main
  4981 ;; This function uses a non-reentrant model
  4982 ;;
  4983                           
  4984                           
  4985                           ;psect for function _Init_I2C_M
  4986  098C                     _Init_I2C_M:	
  4987                           
  4988                           ;I2C.c: 9: SSPCON = 0b00101000;
  4989                           
  4990                           ;incstack = 0
  4991                           ; Regs used in _Init_I2C_M: [wreg+status,2+status,0+pclath+cstack]
  4992  098C  3028               	movlw	40
  4993  098D  1283               	bcf	3,5	;RP0=0, select bank0
  4994  098E  1303               	bcf	3,6	;RP1=0, select bank0
  4995  098F  0094               	movwf	20	;volatile
  4996                           
  4997                           ;I2C.c: 10: SSPCON2 = 0;
  4998  0990  1683               	bsf	3,5	;RP0=1, select bank1
  4999  0991  1303               	bcf	3,6	;RP1=0, select bank1
  5000  0992  0191               	clrf	17	;volatile
  5001                           
  5002                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  5003  0993  1283               	bcf	3,5	;RP0=0, select bank0
  5004  0994  1303               	bcf	3,6	;RP1=0, select bank0
  5005  0995  0820               	movf	Init_I2C_M@c,w
  5006  0996  00A4               	movwf	??_Init_I2C_M
  5007  0997  0821               	movf	Init_I2C_M@c+1,w
  5008  0998  00A5               	movwf	??_Init_I2C_M+1
  5009  0999  0822               	movf	Init_I2C_M@c+2,w
  5010  099A  00A6               	movwf	??_Init_I2C_M+2
  5011  099B  0823               	movf	Init_I2C_M@c+3,w
  5012  099C  00A7               	movwf	??_Init_I2C_M+3
  5013  099D  3002               	movlw	2
  5014  099E                     u3135:	
  5015  099E  1003               	clrc
  5016  099F  0DA4               	rlf	??_Init_I2C_M,f
  5017  09A0  0DA5               	rlf	??_Init_I2C_M+1,f
  5018  09A1  0DA6               	rlf	??_Init_I2C_M+2,f
  5019  09A2  0DA7               	rlf	??_Init_I2C_M+3,f
  5020  09A3  3EFF               	addlw	-1
  5021  09A4  1D03               	skipz
  5022  09A5  299E               	goto	u3135
  5023  09A6  0827               	movf	??_Init_I2C_M+3,w
  5024  09A7  00F3               	movwf	___lldiv@divisor+3
  5025  09A8  0826               	movf	??_Init_I2C_M+2,w
  5026  09A9  00F2               	movwf	___lldiv@divisor+2
  5027  09AA  0825               	movf	??_Init_I2C_M+1,w
  5028  09AB  00F1               	movwf	___lldiv@divisor+1
  5029  09AC  0824               	movf	??_Init_I2C_M,w
  5030  09AD  00F0               	movwf	___lldiv@divisor
  5031  09AE  3000               	movlw	0
  5032  09AF  00F7               	movwf	___lldiv@dividend+3
  5033  09B0  3098               	movlw	152
  5034  09B1  00F6               	movwf	___lldiv@dividend+2
  5035  09B2  3096               	movlw	150
  5036  09B3  00F5               	movwf	___lldiv@dividend+1
  5037  09B4  3080               	movlw	128
  5038  09B5  00F4               	movwf	___lldiv@dividend
  5039  09B6  120A  158A  2388   	fcall	___lldiv
  5040  09B9  0870               	movf	?___lldiv,w
  5041  09BA  3EFF               	addlw	255
  5042  09BB  1683               	bsf	3,5	;RP0=1, select bank1
  5043  09BC  1303               	bcf	3,6	;RP1=0, select bank1
  5044  09BD  0093               	movwf	19	;volatile
  5045                           
  5046                           ;I2C.c: 12: SSPSTAT = 0;
  5047  09BE  0194               	clrf	20	;volatile
  5048  09BF  0008               	return
  5049  09C0                     __end_of_Init_I2C_M:	
  5050                           
  5051                           	psect	text13
  5052  0B88                     __ptext13:	
  5053 ;; *************** function ___lldiv *****************
  5054 ;; Defined at:
  5055 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;  divisor         4    0[COMMON] unsigned long 
  5058 ;;  dividend        4    4[COMMON] unsigned long 
  5059 ;; Auto vars:     Size  Location     Type
  5060 ;;  quotient        4    9[COMMON] unsigned long 
  5061 ;;  counter         1   13[COMMON] unsigned char 
  5062 ;; Return value:  Size  Location     Type
  5063 ;;                  4    0[COMMON] unsigned long 
  5064 ;; Registers used:
  5065 ;;		wreg, status,2, status,0
  5066 ;; Tracked objects:
  5067 ;;		On entry : 0/0
  5068 ;;		On exit  : 0/0
  5069 ;;		Unchanged: 0/0
  5070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5071 ;;      Params:         8       0       0       0       0
  5072 ;;      Locals:         5       0       0       0       0
  5073 ;;      Temps:          1       0       0       0       0
  5074 ;;      Totals:        14       0       0       0       0
  5075 ;;Total ram usage:       14 bytes
  5076 ;; Hardware stack levels used:    1
  5077 ;; This function calls:
  5078 ;;		Nothing
  5079 ;; This function is called by:
  5080 ;;		_Init_I2C_M
  5081 ;; This function uses a non-reentrant model
  5082 ;;
  5083                           
  5084                           
  5085                           ;psect for function ___lldiv
  5086  0B88                     ___lldiv:	
  5087                           
  5088                           ;incstack = 0
  5089                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5090  0B88  3000               	movlw	0
  5091  0B89  00FC               	movwf	___lldiv@quotient+3
  5092  0B8A  3000               	movlw	0
  5093  0B8B  00FB               	movwf	___lldiv@quotient+2
  5094  0B8C  3000               	movlw	0
  5095  0B8D  00FA               	movwf	___lldiv@quotient+1
  5096  0B8E  3000               	movlw	0
  5097  0B8F  00F9               	movwf	___lldiv@quotient
  5098  0B90  0873               	movf	___lldiv@divisor+3,w
  5099  0B91  0472               	iorwf	___lldiv@divisor+2,w
  5100  0B92  0471               	iorwf	___lldiv@divisor+1,w
  5101  0B93  0470               	iorwf	___lldiv@divisor,w
  5102  0B94  1903               	skipnz
  5103  0B95  2BDD               	goto	l3263
  5104  0B96  01FD               	clrf	___lldiv@counter
  5105  0B97  0AFD               	incf	___lldiv@counter,f
  5106  0B98                     l3249:	
  5107  0B98  1BF3               	btfsc	___lldiv@divisor+3,7
  5108  0B99  2BA8               	goto	l3251
  5109  0B9A  3001               	movlw	1
  5110  0B9B  00F8               	movwf	??___lldiv
  5111  0B9C                     u2985:	
  5112  0B9C  1003               	clrc
  5113  0B9D  0DF0               	rlf	___lldiv@divisor,f
  5114  0B9E  0DF1               	rlf	___lldiv@divisor+1,f
  5115  0B9F  0DF2               	rlf	___lldiv@divisor+2,f
  5116  0BA0  0DF3               	rlf	___lldiv@divisor+3,f
  5117  0BA1  0BF8               	decfsz	??___lldiv,f
  5118  0BA2  2B9C               	goto	u2985
  5119  0BA3  3001               	movlw	1
  5120  0BA4  00F8               	movwf	??___lldiv
  5121  0BA5  0878               	movf	??___lldiv,w
  5122  0BA6  07FD               	addwf	___lldiv@counter,f
  5123  0BA7  2B98               	goto	l3249
  5124  0BA8                     l3251:	
  5125  0BA8  3001               	movlw	1
  5126  0BA9  00F8               	movwf	??___lldiv
  5127  0BAA                     u3005:	
  5128  0BAA  1003               	clrc
  5129  0BAB  0DF9               	rlf	___lldiv@quotient,f
  5130  0BAC  0DFA               	rlf	___lldiv@quotient+1,f
  5131  0BAD  0DFB               	rlf	___lldiv@quotient+2,f
  5132  0BAE  0DFC               	rlf	___lldiv@quotient+3,f
  5133  0BAF  0BF8               	decfsz	??___lldiv,f
  5134  0BB0  2BAA               	goto	u3005
  5135  0BB1  0873               	movf	___lldiv@divisor+3,w
  5136  0BB2  0277               	subwf	___lldiv@dividend+3,w
  5137  0BB3  1D03               	skipz
  5138  0BB4  2BBF               	goto	u3015
  5139  0BB5  0872               	movf	___lldiv@divisor+2,w
  5140  0BB6  0276               	subwf	___lldiv@dividend+2,w
  5141  0BB7  1D03               	skipz
  5142  0BB8  2BBF               	goto	u3015
  5143  0BB9  0871               	movf	___lldiv@divisor+1,w
  5144  0BBA  0275               	subwf	___lldiv@dividend+1,w
  5145  0BBB  1D03               	skipz
  5146  0BBC  2BBF               	goto	u3015
  5147  0BBD  0870               	movf	___lldiv@divisor,w
  5148  0BBE  0274               	subwf	___lldiv@dividend,w
  5149  0BBF                     u3015:	
  5150  0BBF  1C03               	skipc
  5151  0BC0  2BD0               	goto	l3259
  5152  0BC1  0870               	movf	___lldiv@divisor,w
  5153  0BC2  02F4               	subwf	___lldiv@dividend,f
  5154  0BC3  0871               	movf	___lldiv@divisor+1,w
  5155  0BC4  1C03               	skipc
  5156  0BC5  0F71               	incfsz	___lldiv@divisor+1,w
  5157  0BC6  02F5               	subwf	___lldiv@dividend+1,f
  5158  0BC7  0872               	movf	___lldiv@divisor+2,w
  5159  0BC8  1C03               	skipc
  5160  0BC9  0F72               	incfsz	___lldiv@divisor+2,w
  5161  0BCA  02F6               	subwf	___lldiv@dividend+2,f
  5162  0BCB  0873               	movf	___lldiv@divisor+3,w
  5163  0BCC  1C03               	skipc
  5164  0BCD  0F73               	incfsz	___lldiv@divisor+3,w
  5165  0BCE  02F7               	subwf	___lldiv@dividend+3,f
  5166  0BCF  1479               	bsf	___lldiv@quotient,0
  5167  0BD0                     l3259:	
  5168  0BD0  3001               	movlw	1
  5169  0BD1                     u3025:	
  5170  0BD1  1003               	clrc
  5171  0BD2  0CF3               	rrf	___lldiv@divisor+3,f
  5172  0BD3  0CF2               	rrf	___lldiv@divisor+2,f
  5173  0BD4  0CF1               	rrf	___lldiv@divisor+1,f
  5174  0BD5  0CF0               	rrf	___lldiv@divisor,f
  5175  0BD6  3EFF               	addlw	-1
  5176  0BD7  1D03               	skipz
  5177  0BD8  2BD1               	goto	u3025
  5178  0BD9  3001               	movlw	1
  5179  0BDA  02FD               	subwf	___lldiv@counter,f
  5180  0BDB  1D03               	btfss	3,2
  5181  0BDC  2BA8               	goto	l3251
  5182  0BDD                     l3263:	
  5183  0BDD  087C               	movf	___lldiv@quotient+3,w
  5184  0BDE  00F3               	movwf	?___lldiv+3
  5185  0BDF  087B               	movf	___lldiv@quotient+2,w
  5186  0BE0  00F2               	movwf	?___lldiv+2
  5187  0BE1  087A               	movf	___lldiv@quotient+1,w
  5188  0BE2  00F1               	movwf	?___lldiv+1
  5189  0BE3  0879               	movf	___lldiv@quotient,w
  5190  0BE4  00F0               	movwf	?___lldiv
  5191  0BE5  0008               	return
  5192  0BE6                     __end_of___lldiv:	
  5193                           
  5194                           	psect	text14
  5195  0932                     __ptext14:	
  5196 ;; *************** function _FMTX *****************
  5197 ;; Defined at:
  5198 ;;		line 270 in file "FMCW.c"
  5199 ;; Parameters:    Size  Location     Type
  5200 ;;  Nref            2   60[BANK0 ] int 
  5201 ;;  Nprg            2   62[BANK0 ] PTR int 
  5202 ;;		 -> RAM(512), main@FMTX_Nprg(10), FMTX_Nprg(10), 
  5203 ;; Auto vars:     Size  Location     Type
  5204 ;;  fmtx            2   64[BANK0 ] int 
  5205 ;; Return value:  Size  Location     Type
  5206 ;;                  1    wreg      void 
  5207 ;; Registers used:
  5208 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5209 ;; Tracked objects:
  5210 ;;		On entry : 0/0
  5211 ;;		On exit  : 0/0
  5212 ;;		Unchanged: 0/0
  5213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5214 ;;      Params:         0       4       0       0       0
  5215 ;;      Locals:         0       2       0       0       0
  5216 ;;      Temps:          0       0       0       0       0
  5217 ;;      Totals:         0       6       0       0       0
  5218 ;;Total ram usage:        6 bytes
  5219 ;; Hardware stack levels used:    1
  5220 ;; Hardware stack levels required when called:    3
  5221 ;; This function calls:
  5222 ;;		_OPINIT
  5223 ;;		_OUTFQ
  5224 ;;		_RFDOUT
  5225 ;; This function is called by:
  5226 ;;		_main
  5227 ;;		_SetPLL
  5228 ;; This function uses a non-reentrant model
  5229 ;;
  5230                           
  5231                           
  5232                           ;psect for function _FMTX
  5233  0932                     _FMTX:	
  5234                           
  5235                           ;FMCW.c: 271: int fmtx = 1;
  5236                           
  5237                           ;incstack = 0
  5238                           ; Regs used in _FMTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5239  0932  3001               	movlw	1
  5240  0933  1283               	bcf	3,5	;RP0=0, select bank0
  5241  0934  1303               	bcf	3,6	;RP1=0, select bank0
  5242  0935  00E0               	movwf	FMTX@fmtx
  5243  0936  3000               	movlw	0
  5244  0937  00E1               	movwf	FMTX@fmtx+1
  5245                           
  5246                           ;FMCW.c: 272: OPINIT(fmtx);
  5247  0938  0861               	movf	FMTX@fmtx+1,w
  5248  0939  00F5               	movwf	OPINIT@fmcwtxrx+1
  5249  093A  0860               	movf	FMTX@fmtx,w
  5250  093B  00F4               	movwf	OPINIT@fmcwtxrx
  5251  093C  120A  158A  24AC  120A  158A  	fcall	_OPINIT
  5252                           
  5253                           ;FMCW.c: 273: RFDOUT(fmtx, Nref);
  5254  0941  1283               	bcf	3,5	;RP0=0, select bank0
  5255  0942  1303               	bcf	3,6	;RP1=0, select bank0
  5256  0943  0861               	movf	FMTX@fmtx+1,w
  5257  0944  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5258  0945  0860               	movf	FMTX@fmtx,w
  5259  0946  00F9               	movwf	RFDOUT@fmcwtxrx
  5260  0947  085D               	movf	FMTX@Nref+1,w
  5261  0948  00FC               	movwf	RFDOUT@Nref+1
  5262  0949  085C               	movf	FMTX@Nref,w
  5263  094A  00FB               	movwf	RFDOUT@Nref
  5264  094B  120A  158A  2529  120A  158A  	fcall	_RFDOUT
  5265                           
  5266                           ;FMCW.c: 274: OUTFQ(fmtx, Nprg);
  5267  0950  1283               	bcf	3,5	;RP0=0, select bank0
  5268  0951  1303               	bcf	3,6	;RP1=0, select bank0
  5269  0952  0861               	movf	FMTX@fmtx+1,w
  5270  0953  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5271  0954  0860               	movf	FMTX@fmtx,w
  5272  0955  00F9               	movwf	OUTFQ@fmcwtxrx
  5273  0956  085E               	movf	FMTX@Nprg,w
  5274  0957  00FB               	movwf	OUTFQ@Nprg
  5275  0958  085F               	movf	FMTX@Nprg+1,w
  5276  0959  00FC               	movwf	OUTFQ@Nprg+1
  5277  095A  120A  118A  20AC   	fcall	_OUTFQ
  5278  095D  0008               	return
  5279  095E                     __end_of_FMTX:	
  5280                           
  5281                           	psect	text15
  5282  0906                     __ptext15:	
  5283 ;; *************** function _FMRX *****************
  5284 ;; Defined at:
  5285 ;;		line 298 in file "FMCW.c"
  5286 ;; Parameters:    Size  Location     Type
  5287 ;;  Nref            2   60[BANK0 ] int 
  5288 ;;  Nprg            2   62[BANK0 ] PTR int 
  5289 ;;		 -> RAM(512), main@FMRX_Nprg(10), FMRX_Nprg(10), 
  5290 ;; Auto vars:     Size  Location     Type
  5291 ;;  fmrx            2   64[BANK0 ] int 
  5292 ;; Return value:  Size  Location     Type
  5293 ;;                  1    wreg      void 
  5294 ;; Registers used:
  5295 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5296 ;; Tracked objects:
  5297 ;;		On entry : 0/0
  5298 ;;		On exit  : 0/0
  5299 ;;		Unchanged: 0/0
  5300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5301 ;;      Params:         0       4       0       0       0
  5302 ;;      Locals:         0       2       0       0       0
  5303 ;;      Temps:          0       0       0       0       0
  5304 ;;      Totals:         0       6       0       0       0
  5305 ;;Total ram usage:        6 bytes
  5306 ;; Hardware stack levels used:    1
  5307 ;; Hardware stack levels required when called:    3
  5308 ;; This function calls:
  5309 ;;		_OPINIT
  5310 ;;		_OUTFQ
  5311 ;;		_RFDOUT
  5312 ;; This function is called by:
  5313 ;;		_main
  5314 ;;		_SetPLL
  5315 ;; This function uses a non-reentrant model
  5316 ;;
  5317                           
  5318                           
  5319                           ;psect for function _FMRX
  5320  0906                     _FMRX:	
  5321                           
  5322                           ;FMCW.c: 299: int fmrx = 3;
  5323                           
  5324                           ;incstack = 0
  5325                           ; Regs used in _FMRX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5326  0906  3003               	movlw	3
  5327  0907  1283               	bcf	3,5	;RP0=0, select bank0
  5328  0908  1303               	bcf	3,6	;RP1=0, select bank0
  5329  0909  00E0               	movwf	FMRX@fmrx
  5330  090A  3000               	movlw	0
  5331  090B  00E1               	movwf	FMRX@fmrx+1
  5332                           
  5333                           ;FMCW.c: 300: OPINIT(fmrx);
  5334  090C  0861               	movf	FMRX@fmrx+1,w
  5335  090D  00F5               	movwf	OPINIT@fmcwtxrx+1
  5336  090E  0860               	movf	FMRX@fmrx,w
  5337  090F  00F4               	movwf	OPINIT@fmcwtxrx
  5338  0910  120A  158A  24AC  120A  158A  	fcall	_OPINIT
  5339                           
  5340                           ;FMCW.c: 301: RFDOUT(fmrx, Nref);
  5341  0915  1283               	bcf	3,5	;RP0=0, select bank0
  5342  0916  1303               	bcf	3,6	;RP1=0, select bank0
  5343  0917  0861               	movf	FMRX@fmrx+1,w
  5344  0918  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5345  0919  0860               	movf	FMRX@fmrx,w
  5346  091A  00F9               	movwf	RFDOUT@fmcwtxrx
  5347  091B  085D               	movf	FMRX@Nref+1,w
  5348  091C  00FC               	movwf	RFDOUT@Nref+1
  5349  091D  085C               	movf	FMRX@Nref,w
  5350  091E  00FB               	movwf	RFDOUT@Nref
  5351  091F  120A  158A  2529  120A  158A  	fcall	_RFDOUT
  5352                           
  5353                           ;FMCW.c: 302: OUTFQ(fmrx, Nprg);
  5354  0924  1283               	bcf	3,5	;RP0=0, select bank0
  5355  0925  1303               	bcf	3,6	;RP1=0, select bank0
  5356  0926  0861               	movf	FMRX@fmrx+1,w
  5357  0927  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5358  0928  0860               	movf	FMRX@fmrx,w
  5359  0929  00F9               	movwf	OUTFQ@fmcwtxrx
  5360  092A  085E               	movf	FMRX@Nprg,w
  5361  092B  00FB               	movwf	OUTFQ@Nprg
  5362  092C  085F               	movf	FMRX@Nprg+1,w
  5363  092D  00FC               	movwf	OUTFQ@Nprg+1
  5364  092E  120A  118A  20AC   	fcall	_OUTFQ
  5365  0931  0008               	return
  5366  0932                     __end_of_FMRX:	
  5367                           
  5368                           	psect	text16
  5369  0B2B                     __ptext16:	
  5370 ;; *************** function _EEPROM_Write *****************
  5371 ;; Defined at:
  5372 ;;		line 51 in file "I2C.c"
  5373 ;; Parameters:    Size  Location     Type
  5374 ;;  EEPROM_addre    1    wreg     unsigned char 
  5375 ;;  high_address    1    2[COMMON] unsigned char 
  5376 ;;  low_address     1    3[COMMON] unsigned char 
  5377 ;;  data            1    4[COMMON] PTR unsigned char 
  5378 ;;		 -> NULL(0), dData(32), 
  5379 ;; Auto vars:     Size  Location     Type
  5380 ;;  EEPROM_addre    1    8[COMMON] unsigned char 
  5381 ;;  Address         1    9[COMMON] unsigned char 
  5382 ;; Return value:  Size  Location     Type
  5383 ;;                  1    wreg      void 
  5384 ;; Registers used:
  5385 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5386 ;; Tracked objects:
  5387 ;;		On entry : 0/0
  5388 ;;		On exit  : 0/0
  5389 ;;		Unchanged: 0/0
  5390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5391 ;;      Params:         3       0       0       0       0
  5392 ;;      Locals:         2       0       0       0       0
  5393 ;;      Temps:          3       0       0       0       0
  5394 ;;      Totals:         8       0       0       0       0
  5395 ;;Total ram usage:        8 bytes
  5396 ;; Hardware stack levels used:    1
  5397 ;; Hardware stack levels required when called:    2
  5398 ;; This function calls:
  5399 ;;		_I2C_Master_Start
  5400 ;;		_I2C_Master_Stop
  5401 ;;		_I2C_Master_Write
  5402 ;; This function is called by:
  5403 ;;		_main
  5404 ;; This function uses a non-reentrant model
  5405 ;;
  5406                           
  5407                           
  5408                           ;psect for function _EEPROM_Write
  5409  0B2B                     _EEPROM_Write:	
  5410                           
  5411                           ;incstack = 0
  5412                           ; Regs used in _EEPROM_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5413                           ;EEPROM_Write@EEPROM_address stored from wreg
  5414  0B2B  00F8               	movwf	EEPROM_Write@EEPROM_address
  5415                           
  5416                           ;I2C.c: 52: UBYTE Address = EEPROM_address << 1;
  5417  0B2C  0878               	movf	EEPROM_Write@EEPROM_address,w
  5418  0B2D  00F5               	movwf	??_EEPROM_Write
  5419  0B2E  0775               	addwf	??_EEPROM_Write,w
  5420  0B2F  00F6               	movwf	??_EEPROM_Write+1
  5421  0B30  0876               	movf	??_EEPROM_Write+1,w
  5422  0B31  00F9               	movwf	EEPROM_Write@Address
  5423                           
  5424                           ;I2C.c: 55: I2C_Master_Start();
  5425  0B32  160A  118A  27D0  120A  158A  	fcall	_I2C_Master_Start
  5426                           
  5427                           ;I2C.c: 56: I2C_Master_Write(Address);
  5428  0B37  0879               	movf	EEPROM_Write@Address,w
  5429  0B38  00F5               	movwf	??_EEPROM_Write
  5430  0B39  01F6               	clrf	??_EEPROM_Write+1
  5431  0B3A  0875               	movf	??_EEPROM_Write,w
  5432  0B3B  00F0               	movwf	I2C_Master_Write@d
  5433  0B3C  0876               	movf	??_EEPROM_Write+1,w
  5434  0B3D  00F1               	movwf	I2C_Master_Write@d+1
  5435  0B3E  160A  118A  27D7  120A  158A  	fcall	_I2C_Master_Write
  5436                           
  5437                           ;I2C.c: 57: I2C_Master_Write(high_address);
  5438  0B43  0872               	movf	EEPROM_Write@high_address,w
  5439  0B44  00F5               	movwf	??_EEPROM_Write
  5440  0B45  01F6               	clrf	??_EEPROM_Write+1
  5441  0B46  0875               	movf	??_EEPROM_Write,w
  5442  0B47  00F0               	movwf	I2C_Master_Write@d
  5443  0B48  0876               	movf	??_EEPROM_Write+1,w
  5444  0B49  00F1               	movwf	I2C_Master_Write@d+1
  5445  0B4A  160A  118A  27D7  120A  158A  	fcall	_I2C_Master_Write
  5446                           
  5447                           ;I2C.c: 58: I2C_Master_Write(low_address);
  5448  0B4F  0873               	movf	EEPROM_Write@low_address,w
  5449  0B50  00F5               	movwf	??_EEPROM_Write
  5450  0B51  01F6               	clrf	??_EEPROM_Write+1
  5451  0B52  0875               	movf	??_EEPROM_Write,w
  5452  0B53  00F0               	movwf	I2C_Master_Write@d
  5453  0B54  0876               	movf	??_EEPROM_Write+1,w
  5454  0B55  00F1               	movwf	I2C_Master_Write@d+1
  5455  0B56  160A  118A  27D7  120A  158A  	fcall	_I2C_Master_Write
  5456  0B5B                     l3455:	
  5457                           ;I2C.c: 59: while(*data){
  5458                           
  5459  0B5B  0874               	movf	EEPROM_Write@data,w
  5460  0B5C  0084               	movwf	4
  5461  0B5D  1783               	bsf	3,7	;select IRP bank2
  5462  0B5E  0800               	movf	0,w
  5463  0B5F  1903               	btfsc	3,2
  5464  0B60  2B75               	goto	l3457
  5465                           
  5466                           ;I2C.c: 60: I2C_Master_Write(*data);
  5467  0B61  0874               	movf	EEPROM_Write@data,w
  5468  0B62  0084               	movwf	4
  5469  0B63  1783               	bsf	3,7	;select IRP bank2
  5470  0B64  0800               	movf	0,w
  5471  0B65  00F5               	movwf	??_EEPROM_Write
  5472  0B66  01F6               	clrf	??_EEPROM_Write+1
  5473  0B67  0875               	movf	??_EEPROM_Write,w
  5474  0B68  00F0               	movwf	I2C_Master_Write@d
  5475  0B69  0876               	movf	??_EEPROM_Write+1,w
  5476  0B6A  00F1               	movwf	I2C_Master_Write@d+1
  5477  0B6B  160A  118A  27D7  120A  158A  	fcall	_I2C_Master_Write
  5478                           
  5479                           ;I2C.c: 61: ++data;
  5480  0B70  3001               	movlw	1
  5481  0B71  00F5               	movwf	??_EEPROM_Write
  5482  0B72  0875               	movf	??_EEPROM_Write,w
  5483  0B73  07F4               	addwf	EEPROM_Write@data,f
  5484  0B74  2B5B               	goto	l3455
  5485  0B75                     l3457:	
  5486                           
  5487                           ;I2C.c: 62: }
  5488                           ;I2C.c: 63: I2C_Master_Stop();
  5489  0B75  120A  158A  2016  120A  158A  	fcall	_I2C_Master_Stop
  5490                           
  5491                           ;I2C.c: 64: _delay((unsigned long)((200)*(10000000/4000.0)));
  5492  0B7A  3003               	movlw	3
  5493  0B7B  00F7               	movwf	??_EEPROM_Write+2
  5494  0B7C  308A               	movlw	138
  5495  0B7D  00F6               	movwf	??_EEPROM_Write+1
  5496  0B7E  3055               	movlw	85
  5497  0B7F  00F5               	movwf	??_EEPROM_Write
  5498  0B80                     u3677:	
  5499  0B80  0BF5               	decfsz	??_EEPROM_Write,f
  5500  0B81  2B80               	goto	u3677
  5501  0B82  0BF6               	decfsz	??_EEPROM_Write+1,f
  5502  0B83  2B80               	goto	u3677
  5503  0B84  0BF7               	decfsz	??_EEPROM_Write+2,f
  5504  0B85  2B80               	goto	u3677
  5505  0B86  2B87               	nop2
  5506  0B87  0008               	return
  5507  0B88                     __end_of_EEPROM_Write:	
  5508                           
  5509                           	psect	text17
  5510  17D7                     __ptext17:	
  5511 ;; *************** function _I2C_Master_Write *****************
  5512 ;; Defined at:
  5513 ;;		line 34 in file "I2C.c"
  5514 ;; Parameters:    Size  Location     Type
  5515 ;;  d               2    0[COMMON] unsigned int 
  5516 ;; Auto vars:     Size  Location     Type
  5517 ;;		None
  5518 ;; Return value:  Size  Location     Type
  5519 ;;                  1    wreg      void 
  5520 ;; Registers used:
  5521 ;;		wreg, status,2, status,0, pclath, cstack
  5522 ;; Tracked objects:
  5523 ;;		On entry : 0/0
  5524 ;;		On exit  : 0/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5527 ;;      Params:         2       0       0       0       0
  5528 ;;      Locals:         0       0       0       0       0
  5529 ;;      Temps:          0       0       0       0       0
  5530 ;;      Totals:         2       0       0       0       0
  5531 ;;Total ram usage:        2 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:    1
  5534 ;; This function calls:
  5535 ;;		_I2C_Master_Wait
  5536 ;; This function is called by:
  5537 ;;		_EEPROM_Write
  5538 ;; This function uses a non-reentrant model
  5539 ;;
  5540                           
  5541                           
  5542                           ;psect for function _I2C_Master_Write
  5543  17D7                     _I2C_Master_Write:	
  5544                           
  5545                           ;I2C.c: 35: I2C_Master_Wait();
  5546                           
  5547                           ;incstack = 0
  5548                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5549  17D7  120A  158A  201D   	fcall	_I2C_Master_Wait
  5550                           
  5551                           ;I2C.c: 36: SSPBUF = d;
  5552  17DA  0870               	movf	I2C_Master_Write@d,w
  5553  17DB  1283               	bcf	3,5	;RP0=0, select bank0
  5554  17DC  1303               	bcf	3,6	;RP1=0, select bank0
  5555  17DD  0093               	movwf	19	;volatile
  5556  17DE  0008               	return
  5557  17DF                     __end_of_I2C_Master_Write:	
  5558                           
  5559                           	psect	text18
  5560  0816                     __ptext18:	
  5561 ;; *************** function _I2C_Master_Stop *****************
  5562 ;; Defined at:
  5563 ;;		line 29 in file "I2C.c"
  5564 ;; Parameters:    Size  Location     Type
  5565 ;;		None
  5566 ;; Auto vars:     Size  Location     Type
  5567 ;;		None
  5568 ;; Return value:  Size  Location     Type
  5569 ;;                  1    wreg      void 
  5570 ;; Registers used:
  5571 ;;		wreg, status,2, status,0, pclath, cstack
  5572 ;; Tracked objects:
  5573 ;;		On entry : 0/0
  5574 ;;		On exit  : 0/0
  5575 ;;		Unchanged: 0/0
  5576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5577 ;;      Params:         0       0       0       0       0
  5578 ;;      Locals:         0       0       0       0       0
  5579 ;;      Temps:          0       0       0       0       0
  5580 ;;      Totals:         0       0       0       0       0
  5581 ;;Total ram usage:        0 bytes
  5582 ;; Hardware stack levels used:    1
  5583 ;; Hardware stack levels required when called:    1
  5584 ;; This function calls:
  5585 ;;		_I2C_Master_Wait
  5586 ;; This function is called by:
  5587 ;;		_EEPROM_Write
  5588 ;; This function uses a non-reentrant model
  5589 ;;
  5590                           
  5591                           
  5592                           ;psect for function _I2C_Master_Stop
  5593  0816                     _I2C_Master_Stop:	
  5594                           
  5595                           ;I2C.c: 30: I2C_Master_Wait();
  5596                           
  5597                           ;incstack = 0
  5598                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5599  0816  120A  158A  201D   	fcall	_I2C_Master_Wait
  5600                           
  5601                           ;I2C.c: 31: PEN = 1;
  5602  0819  1683               	bsf	3,5	;RP0=1, select bank1
  5603  081A  1303               	bcf	3,6	;RP1=0, select bank1
  5604  081B  1511               	bsf	17,2	;volatile
  5605  081C  0008               	return
  5606  081D                     __end_of_I2C_Master_Stop:	
  5607                           
  5608                           	psect	text19
  5609  17D0                     __ptext19:	
  5610 ;; *************** function _I2C_Master_Start *****************
  5611 ;; Defined at:
  5612 ;;		line 19 in file "I2C.c"
  5613 ;; Parameters:    Size  Location     Type
  5614 ;;		None
  5615 ;; Auto vars:     Size  Location     Type
  5616 ;;		None
  5617 ;; Return value:  Size  Location     Type
  5618 ;;                  1    wreg      void 
  5619 ;; Registers used:
  5620 ;;		wreg, status,2, status,0, pclath, cstack
  5621 ;; Tracked objects:
  5622 ;;		On entry : 0/0
  5623 ;;		On exit  : 0/0
  5624 ;;		Unchanged: 0/0
  5625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5626 ;;      Params:         0       0       0       0       0
  5627 ;;      Locals:         0       0       0       0       0
  5628 ;;      Temps:          0       0       0       0       0
  5629 ;;      Totals:         0       0       0       0       0
  5630 ;;Total ram usage:        0 bytes
  5631 ;; Hardware stack levels used:    1
  5632 ;; Hardware stack levels required when called:    1
  5633 ;; This function calls:
  5634 ;;		_I2C_Master_Wait
  5635 ;; This function is called by:
  5636 ;;		_EEPROM_Write
  5637 ;; This function uses a non-reentrant model
  5638 ;;
  5639                           
  5640                           
  5641                           ;psect for function _I2C_Master_Start
  5642  17D0                     _I2C_Master_Start:	
  5643                           
  5644                           ;I2C.c: 20: I2C_Master_Wait();
  5645                           
  5646                           ;incstack = 0
  5647                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5648  17D0  120A  158A  201D   	fcall	_I2C_Master_Wait
  5649                           
  5650                           ;I2C.c: 21: SEN = 1;
  5651  17D3  1683               	bsf	3,5	;RP0=1, select bank1
  5652  17D4  1303               	bcf	3,6	;RP1=0, select bank1
  5653  17D5  1411               	bsf	17,0	;volatile
  5654  17D6  0008               	return
  5655  17D7                     __end_of_I2C_Master_Start:	
  5656                           
  5657                           	psect	text20
  5658  081D                     __ptext20:	
  5659 ;; *************** function _I2C_Master_Wait *****************
  5660 ;; Defined at:
  5661 ;;		line 15 in file "I2C.c"
  5662 ;; Parameters:    Size  Location     Type
  5663 ;;		None
  5664 ;; Auto vars:     Size  Location     Type
  5665 ;;		None
  5666 ;; Return value:  Size  Location     Type
  5667 ;;                  1    wreg      void 
  5668 ;; Registers used:
  5669 ;;		wreg, status,2
  5670 ;; Tracked objects:
  5671 ;;		On entry : 0/0
  5672 ;;		On exit  : 0/0
  5673 ;;		Unchanged: 0/0
  5674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5675 ;;      Params:         0       0       0       0       0
  5676 ;;      Locals:         0       0       0       0       0
  5677 ;;      Temps:          0       0       0       0       0
  5678 ;;      Totals:         0       0       0       0       0
  5679 ;;Total ram usage:        0 bytes
  5680 ;; Hardware stack levels used:    1
  5681 ;; This function calls:
  5682 ;;		Nothing
  5683 ;; This function is called by:
  5684 ;;		_I2C_Master_Start
  5685 ;;		_I2C_Master_Stop
  5686 ;;		_I2C_Master_Write
  5687 ;;		_I2C_Master_RepeatedStart
  5688 ;;		_I2C_Master_Read
  5689 ;; This function uses a non-reentrant model
  5690 ;;
  5691                           
  5692                           
  5693                           ;psect for function _I2C_Master_Wait
  5694  081D                     _I2C_Master_Wait:	
  5695  081D                     l494:	
  5696                           ;I2C.c: 16: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5697                           
  5698                           ;incstack = 0
  5699                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5700                           
  5701  081D  1683               	bsf	3,5	;RP0=1, select bank1
  5702  081E  1303               	bcf	3,6	;RP1=0, select bank1
  5703  081F  1914               	btfsc	20,2	;volatile
  5704  0820  281D               	goto	l494
  5705  0821  0811               	movf	17,w	;volatile
  5706  0822  391F               	andlw	31
  5707  0823  1903               	btfsc	3,2
  5708  0824  0008               	return
  5709  0825  281D               	goto	l494
  5710  0826                     __end_of_I2C_Master_Wait:	
  5711                           
  5712                           	psect	text21
  5713  08DA                     __ptext21:	
  5714 ;; *************** function _CWTX *****************
  5715 ;; Defined at:
  5716 ;;		line 284 in file "FMCW.c"
  5717 ;; Parameters:    Size  Location     Type
  5718 ;;  Nref            2   60[BANK0 ] int 
  5719 ;;  Nprg            2   62[BANK0 ] PTR int 
  5720 ;;		 -> RAM(512), main@CWTX_Nprg(10), CWTX_Nprg(10), 
  5721 ;; Auto vars:     Size  Location     Type
  5722 ;;  cwtx            2   64[BANK0 ] int 
  5723 ;; Return value:  Size  Location     Type
  5724 ;;                  1    wreg      void 
  5725 ;; Registers used:
  5726 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5727 ;; Tracked objects:
  5728 ;;		On entry : 0/0
  5729 ;;		On exit  : 0/0
  5730 ;;		Unchanged: 0/0
  5731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5732 ;;      Params:         0       4       0       0       0
  5733 ;;      Locals:         0       2       0       0       0
  5734 ;;      Temps:          0       0       0       0       0
  5735 ;;      Totals:         0       6       0       0       0
  5736 ;;Total ram usage:        6 bytes
  5737 ;; Hardware stack levels used:    1
  5738 ;; Hardware stack levels required when called:    3
  5739 ;; This function calls:
  5740 ;;		_OPINIT
  5741 ;;		_OUTFQ
  5742 ;;		_RFDOUT
  5743 ;; This function is called by:
  5744 ;;		_main
  5745 ;;		_SetPLL
  5746 ;; This function uses a non-reentrant model
  5747 ;;
  5748                           
  5749                           
  5750                           ;psect for function _CWTX
  5751  08DA                     _CWTX:	
  5752                           
  5753                           ;FMCW.c: 285: int cwtx = 2;
  5754                           
  5755                           ;incstack = 0
  5756                           ; Regs used in _CWTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5757  08DA  3002               	movlw	2
  5758  08DB  1283               	bcf	3,5	;RP0=0, select bank0
  5759  08DC  1303               	bcf	3,6	;RP1=0, select bank0
  5760  08DD  00E0               	movwf	CWTX@cwtx
  5761  08DE  3000               	movlw	0
  5762  08DF  00E1               	movwf	CWTX@cwtx+1
  5763                           
  5764                           ;FMCW.c: 286: OPINIT(cwtx);
  5765  08E0  0861               	movf	CWTX@cwtx+1,w
  5766  08E1  00F5               	movwf	OPINIT@fmcwtxrx+1
  5767  08E2  0860               	movf	CWTX@cwtx,w
  5768  08E3  00F4               	movwf	OPINIT@fmcwtxrx
  5769  08E4  120A  158A  24AC  120A  158A  	fcall	_OPINIT
  5770                           
  5771                           ;FMCW.c: 287: RFDOUT(cwtx, Nref);
  5772  08E9  1283               	bcf	3,5	;RP0=0, select bank0
  5773  08EA  1303               	bcf	3,6	;RP1=0, select bank0
  5774  08EB  0861               	movf	CWTX@cwtx+1,w
  5775  08EC  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5776  08ED  0860               	movf	CWTX@cwtx,w
  5777  08EE  00F9               	movwf	RFDOUT@fmcwtxrx
  5778  08EF  085D               	movf	CWTX@Nref+1,w
  5779  08F0  00FC               	movwf	RFDOUT@Nref+1
  5780  08F1  085C               	movf	CWTX@Nref,w
  5781  08F2  00FB               	movwf	RFDOUT@Nref
  5782  08F3  120A  158A  2529  120A  158A  	fcall	_RFDOUT
  5783                           
  5784                           ;FMCW.c: 288: OUTFQ(cwtx, Nprg);
  5785  08F8  1283               	bcf	3,5	;RP0=0, select bank0
  5786  08F9  1303               	bcf	3,6	;RP1=0, select bank0
  5787  08FA  0861               	movf	CWTX@cwtx+1,w
  5788  08FB  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5789  08FC  0860               	movf	CWTX@cwtx,w
  5790  08FD  00F9               	movwf	OUTFQ@fmcwtxrx
  5791  08FE  085E               	movf	CWTX@Nprg,w
  5792  08FF  00FB               	movwf	OUTFQ@Nprg
  5793  0900  085F               	movf	CWTX@Nprg+1,w
  5794  0901  00FC               	movwf	OUTFQ@Nprg+1
  5795  0902  120A  118A  20AC   	fcall	_OUTFQ
  5796  0905  0008               	return
  5797  0906                     __end_of_CWTX:	
  5798                           
  5799                           	psect	text22
  5800  0D29                     __ptext22:	
  5801 ;; *************** function _RFDOUT *****************
  5802 ;; Defined at:
  5803 ;;		line 200 in file "FMCW.c"
  5804 ;; Parameters:    Size  Location     Type
  5805 ;;  fmcwtxrx        2    9[COMMON] int 
  5806 ;;  Nref            2   11[COMMON] int 
  5807 ;; Auto vars:     Size  Location     Type
  5808 ;;  i               2   31[BANK0 ] int 
  5809 ;;  i               2   27[BANK0 ] int 
  5810 ;;  i               2   29[BANK0 ] int 
  5811 ;;  Nref_b         24    3[BANK0 ] int [12]
  5812 ;; Return value:  Size  Location     Type
  5813 ;;                  1    wreg      void 
  5814 ;; Registers used:
  5815 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5816 ;; Tracked objects:
  5817 ;;		On entry : 0/0
  5818 ;;		On exit  : 0/0
  5819 ;;		Unchanged: 0/0
  5820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5821 ;;      Params:         4       0       0       0       0
  5822 ;;      Locals:         0      30       0       0       0
  5823 ;;      Temps:          0       3       0       0       0
  5824 ;;      Totals:         4      33       0       0       0
  5825 ;;Total ram usage:       37 bytes
  5826 ;; Hardware stack levels used:    1
  5827 ;; Hardware stack levels required when called:    2
  5828 ;; This function calls:
  5829 ;;		_H_OUT
  5830 ;;		_L_OUT
  5831 ;;		_STBOUT
  5832 ;;		___awdiv
  5833 ;; This function is called by:
  5834 ;;		_FMTX
  5835 ;;		_CWTX
  5836 ;;		_FMRX
  5837 ;; This function uses a non-reentrant model
  5838 ;;
  5839                           
  5840                           
  5841                           ;psect for function _RFDOUT
  5842  0D29                     _RFDOUT:	
  5843                           
  5844                           ;FMCW.c: 201: int Nref_b[12];
  5845                           ;FMCW.c: 203: for(int i=0; i<12; i++){
  5846                           
  5847                           ;incstack = 0
  5848                           ; Regs used in _RFDOUT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5849  0D29  1283               	bcf	3,5	;RP0=0, select bank0
  5850  0D2A  1303               	bcf	3,6	;RP1=0, select bank0
  5851  0D2B  01BD               	clrf	RFDOUT@i
  5852  0D2C  01BE               	clrf	RFDOUT@i+1
  5853  0D2D  083E               	movf	RFDOUT@i+1,w
  5854  0D2E  3A80               	xorlw	128
  5855  0D2F  00FF               	movwf	127
  5856  0D30  3080               	movlw	128
  5857  0D31  027F               	subwf	127,w
  5858  0D32  1D03               	skipz
  5859  0D33  2D36               	goto	u2895
  5860  0D34  300C               	movlw	12
  5861  0D35  023D               	subwf	RFDOUT@i,w
  5862  0D36                     u2895:	
  5863  0D36  1803               	btfsc	3,0
  5864  0D37  2D54               	goto	l3207
  5865  0D38                     l3201:	
  5866                           
  5867                           ;FMCW.c: 204: Nref_b[i] = 0;
  5868  0D38  1283               	bcf	3,5	;RP0=0, select bank0
  5869  0D39  1303               	bcf	3,6	;RP1=0, select bank0
  5870  0D3A  083D               	movf	RFDOUT@i,w
  5871  0D3B  00A0               	movwf	??_RFDOUT
  5872  0D3C  0720               	addwf	??_RFDOUT,w
  5873  0D3D  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  5874  0D3E  0084               	movwf	4
  5875  0D3F  1383               	bcf	3,7	;select IRP bank0
  5876  0D40  0180               	clrf	0
  5877  0D41  0A84               	incf	4,f
  5878  0D42  0180               	clrf	0
  5879  0D43  3001               	movlw	1
  5880  0D44  07BD               	addwf	RFDOUT@i,f
  5881  0D45  1803               	skipnc
  5882  0D46  0ABE               	incf	RFDOUT@i+1,f
  5883  0D47  3000               	movlw	0
  5884  0D48  07BE               	addwf	RFDOUT@i+1,f
  5885  0D49  083E               	movf	RFDOUT@i+1,w
  5886  0D4A  3A80               	xorlw	128
  5887  0D4B  00FF               	movwf	127
  5888  0D4C  3080               	movlw	128
  5889  0D4D  027F               	subwf	127,w
  5890  0D4E  1D03               	skipz
  5891  0D4F  2D52               	goto	u2905
  5892  0D50  300C               	movlw	12
  5893  0D51  023D               	subwf	RFDOUT@i,w
  5894  0D52                     u2905:	
  5895  0D52  1C03               	skipc
  5896  0D53  2D38               	goto	l3201
  5897  0D54                     l3207:	
  5898                           
  5899                           ;FMCW.c: 205: }
  5900                           ;FMCW.c: 208: for(int i=0; Nref>0; i++){
  5901  0D54  1283               	bcf	3,5	;RP0=0, select bank0
  5902  0D55  1303               	bcf	3,6	;RP1=0, select bank0
  5903  0D56  01BB               	clrf	RFDOUT@i_487
  5904  0D57  01BC               	clrf	RFDOUT@i_487+1
  5905  0D58  087C               	movf	RFDOUT@Nref+1,w
  5906  0D59  3A80               	xorlw	128
  5907  0D5A  00FF               	movwf	127
  5908  0D5B  3080               	movlw	128
  5909  0D5C  027F               	subwf	127,w
  5910  0D5D  1D03               	skipz
  5911  0D5E  2D61               	goto	u2915
  5912  0D5F  3001               	movlw	1
  5913  0D60  027B               	subwf	RFDOUT@Nref,w
  5914  0D61                     u2915:	
  5915  0D61  1C03               	btfss	3,0
  5916  0D62  2D9A               	goto	l3221
  5917  0D63                     l3213:	
  5918                           
  5919                           ;FMCW.c: 209: Nref_b[i] = Nref % 2;
  5920  0D63  3001               	movlw	1
  5921  0D64  057B               	andwf	RFDOUT@Nref,w
  5922  0D65  1283               	bcf	3,5	;RP0=0, select bank0
  5923  0D66  1303               	bcf	3,6	;RP1=0, select bank0
  5924  0D67  00A0               	movwf	??_RFDOUT
  5925  0D68  3000               	movlw	0
  5926  0D69  057C               	andwf	RFDOUT@Nref+1,w
  5927  0D6A  00A1               	movwf	??_RFDOUT+1
  5928  0D6B  083B               	movf	RFDOUT@i_487,w
  5929  0D6C  00A2               	movwf	??_RFDOUT+2
  5930  0D6D  0722               	addwf	??_RFDOUT+2,w
  5931  0D6E  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  5932  0D6F  0084               	movwf	4
  5933  0D70  0820               	movf	??_RFDOUT,w
  5934  0D71  1383               	bcf	3,7	;select IRP bank0
  5935  0D72  0080               	movwf	0
  5936  0D73  0A84               	incf	4,f
  5937  0D74  0821               	movf	??_RFDOUT+1,w
  5938  0D75  0080               	movwf	0
  5939                           
  5940                           ;FMCW.c: 210: Nref = Nref / 2;
  5941  0D76  3002               	movlw	2
  5942  0D77  00F0               	movwf	___awdiv@divisor
  5943  0D78  3000               	movlw	0
  5944  0D79  00F1               	movwf	___awdiv@divisor+1
  5945  0D7A  087C               	movf	RFDOUT@Nref+1,w
  5946  0D7B  00F3               	movwf	___awdiv@dividend+1
  5947  0D7C  087B               	movf	RFDOUT@Nref,w
  5948  0D7D  00F2               	movwf	___awdiv@dividend
  5949  0D7E  120A  158A  22D2  120A  158A  	fcall	___awdiv
  5950  0D83  0871               	movf	?___awdiv+1,w
  5951  0D84  00FC               	movwf	RFDOUT@Nref+1
  5952  0D85  0870               	movf	?___awdiv,w
  5953  0D86  00FB               	movwf	RFDOUT@Nref
  5954  0D87  3001               	movlw	1
  5955  0D88  1283               	bcf	3,5	;RP0=0, select bank0
  5956  0D89  1303               	bcf	3,6	;RP1=0, select bank0
  5957  0D8A  07BB               	addwf	RFDOUT@i_487,f
  5958  0D8B  1803               	skipnc
  5959  0D8C  0ABC               	incf	RFDOUT@i_487+1,f
  5960  0D8D  3000               	movlw	0
  5961  0D8E  07BC               	addwf	RFDOUT@i_487+1,f
  5962  0D8F  087C               	movf	RFDOUT@Nref+1,w
  5963  0D90  3A80               	xorlw	128
  5964  0D91  00FF               	movwf	127
  5965  0D92  3080               	movlw	128
  5966  0D93  027F               	subwf	127,w
  5967  0D94  1D03               	skipz
  5968  0D95  2D98               	goto	u2925
  5969  0D96  3001               	movlw	1
  5970  0D97  027B               	subwf	RFDOUT@Nref,w
  5971  0D98                     u2925:	
  5972  0D98  1803               	skipnc
  5973  0D99  2D63               	goto	l3213
  5974  0D9A                     l3221:	
  5975                           
  5976                           ;FMCW.c: 211: }
  5977                           ;FMCW.c: 214: for (int i=0; i<12; i++)
  5978  0D9A  1283               	bcf	3,5	;RP0=0, select bank0
  5979  0D9B  1303               	bcf	3,6	;RP1=0, select bank0
  5980  0D9C  01BF               	clrf	RFDOUT@i_488
  5981  0D9D  01C0               	clrf	RFDOUT@i_488+1
  5982  0D9E  0840               	movf	RFDOUT@i_488+1,w
  5983  0D9F  3A80               	xorlw	128
  5984  0DA0  00FF               	movwf	127
  5985  0DA1  3080               	movlw	128
  5986  0DA2  027F               	subwf	127,w
  5987  0DA3  1D03               	skipz
  5988  0DA4  2DA7               	goto	u2935
  5989  0DA5  300C               	movlw	12
  5990  0DA6  023F               	subwf	RFDOUT@i_488,w
  5991  0DA7                     u2935:	
  5992  0DA7  1803               	btfsc	3,0
  5993  0DA8  2DF0               	goto	l3239
  5994  0DA9                     l3227:	
  5995                           
  5996                           ;FMCW.c: 215: {
  5997                           ;FMCW.c: 216: if(Nref_b[i] == 0)
  5998  0DA9  1283               	bcf	3,5	;RP0=0, select bank0
  5999  0DAA  1303               	bcf	3,6	;RP1=0, select bank0
  6000  0DAB  083F               	movf	RFDOUT@i_488,w
  6001  0DAC  00A0               	movwf	??_RFDOUT
  6002  0DAD  0720               	addwf	??_RFDOUT,w
  6003  0DAE  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6004  0DAF  0084               	movwf	4
  6005  0DB0  1383               	bcf	3,7	;select IRP bank0
  6006  0DB1  0800               	movf	0,w
  6007  0DB2  00A1               	movwf	??_RFDOUT+1
  6008  0DB3  0A84               	incf	4,f
  6009  0DB4  0800               	movf	0,w
  6010  0DB5  00A2               	movwf	??_RFDOUT+2
  6011  0DB6  0821               	movf	??_RFDOUT+1,w
  6012  0DB7  0422               	iorwf	??_RFDOUT+2,w
  6013  0DB8  1D03               	btfss	3,2
  6014  0DB9  2DC3               	goto	l3231
  6015                           
  6016                           ;FMCW.c: 217: {
  6017                           ;FMCW.c: 218: L_OUT(fmcwtxrx);
  6018  0DBA  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6019  0DBB  00F3               	movwf	L_OUT@fmcwtxrx+1
  6020  0DBC  0879               	movf	RFDOUT@fmcwtxrx,w
  6021  0DBD  00F2               	movwf	L_OUT@fmcwtxrx
  6022  0DBE  120A  158A  2240  120A  158A  	fcall	_L_OUT
  6023  0DC3                     l3231:	
  6024                           
  6025                           ;FMCW.c: 219: }
  6026                           ;FMCW.c: 220: if(Nref_b[i] == 1)
  6027  0DC3  1283               	bcf	3,5	;RP0=0, select bank0
  6028  0DC4  1303               	bcf	3,6	;RP1=0, select bank0
  6029  0DC5  083F               	movf	RFDOUT@i_488,w
  6030  0DC6  00A0               	movwf	??_RFDOUT
  6031  0DC7  0720               	addwf	??_RFDOUT,w
  6032  0DC8  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6033  0DC9  0084               	movwf	4
  6034  0DCA  1383               	bcf	3,7	;select IRP bank0
  6035  0DCB  0800               	movf	0,w
  6036  0DCC  00A1               	movwf	??_RFDOUT+1
  6037  0DCD  0A84               	incf	4,f
  6038  0DCE  0800               	movf	0,w
  6039  0DCF  00A2               	movwf	??_RFDOUT+2
  6040  0DD0  0321               	decf	??_RFDOUT+1,w
  6041  0DD1  0422               	iorwf	??_RFDOUT+2,w
  6042  0DD2  1D03               	btfss	3,2
  6043  0DD3  2DDD               	goto	l3235
  6044                           
  6045                           ;FMCW.c: 221: {
  6046                           ;FMCW.c: 222: H_OUT(fmcwtxrx);
  6047  0DD4  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6048  0DD5  00F3               	movwf	H_OUT@fmcwtxrx+1
  6049  0DD6  0879               	movf	RFDOUT@fmcwtxrx,w
  6050  0DD7  00F2               	movwf	H_OUT@fmcwtxrx
  6051  0DD8  120A  158A  21FA  120A  158A  	fcall	_H_OUT
  6052  0DDD                     l3235:	
  6053  0DDD  3001               	movlw	1
  6054  0DDE  1283               	bcf	3,5	;RP0=0, select bank0
  6055  0DDF  1303               	bcf	3,6	;RP1=0, select bank0
  6056  0DE0  07BF               	addwf	RFDOUT@i_488,f
  6057  0DE1  1803               	skipnc
  6058  0DE2  0AC0               	incf	RFDOUT@i_488+1,f
  6059  0DE3  3000               	movlw	0
  6060  0DE4  07C0               	addwf	RFDOUT@i_488+1,f
  6061  0DE5  0840               	movf	RFDOUT@i_488+1,w
  6062  0DE6  3A80               	xorlw	128
  6063  0DE7  00FF               	movwf	127
  6064  0DE8  3080               	movlw	128
  6065  0DE9  027F               	subwf	127,w
  6066  0DEA  1D03               	skipz
  6067  0DEB  2DEE               	goto	u2965
  6068  0DEC  300C               	movlw	12
  6069  0DED  023F               	subwf	RFDOUT@i_488,w
  6070  0DEE                     u2965:	
  6071  0DEE  1C03               	skipc
  6072  0DEF  2DA9               	goto	l3227
  6073  0DF0                     l3239:	
  6074                           
  6075                           ;FMCW.c: 223: }
  6076                           ;FMCW.c: 224: }
  6077                           ;FMCW.c: 227: H_OUT(fmcwtxrx);
  6078  0DF0  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6079  0DF1  00F3               	movwf	H_OUT@fmcwtxrx+1
  6080  0DF2  0879               	movf	RFDOUT@fmcwtxrx,w
  6081  0DF3  00F2               	movwf	H_OUT@fmcwtxrx
  6082  0DF4  120A  158A  21FA  120A  158A  	fcall	_H_OUT
  6083                           
  6084                           ;FMCW.c: 228: H_OUT(fmcwtxrx);
  6085  0DF9  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6086  0DFA  00F3               	movwf	H_OUT@fmcwtxrx+1
  6087  0DFB  0879               	movf	RFDOUT@fmcwtxrx,w
  6088  0DFC  00F2               	movwf	H_OUT@fmcwtxrx
  6089  0DFD  120A  158A  21FA  120A  158A  	fcall	_H_OUT
  6090                           
  6091                           ;FMCW.c: 231: STBOUT(fmcwtxrx);
  6092  0E02  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6093  0E03  00F3               	movwf	STBOUT@fmcwtxrx+1
  6094  0E04  0879               	movf	RFDOUT@fmcwtxrx,w
  6095  0E05  00F2               	movwf	STBOUT@fmcwtxrx
  6096  0E06  120A  158A  215E   	fcall	_STBOUT
  6097  0E09  0008               	return
  6098  0E0A                     __end_of_RFDOUT:	
  6099                           
  6100                           	psect	text23
  6101  00AC                     __ptext23:	
  6102 ;; *************** function _OUTFQ *****************
  6103 ;; Defined at:
  6104 ;;		line 136 in file "FMCW.c"
  6105 ;; Parameters:    Size  Location     Type
  6106 ;;  fmcwtxrx        2    9[COMMON] int 
  6107 ;;  Nprg            2   11[COMMON] PTR int 
  6108 ;;		 -> RAM(512), main@FMRX_Nprg(10), main@CWTX_Nprg(10), main@FMTX_Nprg(10), 
  6109 ;;		 -> FMRX_Nprg(10), CWTX_Nprg(10), FMTX_Nprg(10), 
  6110 ;; Auto vars:     Size  Location     Type
  6111 ;;  j               2   58[BANK0 ] int 
  6112 ;;  i               2   56[BANK0 ] int 
  6113 ;;  i               2   50[BANK0 ] int 
  6114 ;;  i               2   54[BANK0 ] int 
  6115 ;;  Nprg_b         34   16[BANK0 ] int [17]
  6116 ;;  count           2   52[BANK0 ] int 
  6117 ;; Return value:  Size  Location     Type
  6118 ;;                  1    wreg      void 
  6119 ;; Registers used:
  6120 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6121 ;; Tracked objects:
  6122 ;;		On entry : 0/0
  6123 ;;		On exit  : 0/0
  6124 ;;		Unchanged: 0/0
  6125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6126 ;;      Params:         4       0       0       0       0
  6127 ;;      Locals:         0      44       0       0       0
  6128 ;;      Temps:          0      16       0       0       0
  6129 ;;      Totals:         4      60       0       0       0
  6130 ;;Total ram usage:       64 bytes
  6131 ;; Hardware stack levels used:    1
  6132 ;; Hardware stack levels required when called:    2
  6133 ;; This function calls:
  6134 ;;		_H_OUT
  6135 ;;		_L_OUT
  6136 ;;		_STBOUT
  6137 ;;		___awdiv
  6138 ;; This function is called by:
  6139 ;;		_FMTX
  6140 ;;		_CWTX
  6141 ;;		_FMRX
  6142 ;; This function uses a non-reentrant model
  6143 ;;
  6144                           
  6145                           
  6146                           ;psect for function _OUTFQ
  6147  00AC                     _OUTFQ:	
  6148                           
  6149                           ;FMCW.c: 137: int count = 0;
  6150                           
  6151                           ;incstack = 0
  6152                           ; Regs used in _OUTFQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6153  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  6154  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  6155  00AE  01D4               	clrf	OUTFQ@count
  6156  00AF  01D5               	clrf	OUTFQ@count+1
  6157                           
  6158                           ;FMCW.c: 138: int Nprg_b[17];
  6159                           ;FMCW.c: 140: for(int i=0; i<17; i++){
  6160  00B0  01D6               	clrf	OUTFQ@i
  6161  00B1  01D7               	clrf	OUTFQ@i+1
  6162  00B2  0857               	movf	OUTFQ@i+1,w
  6163  00B3  3A80               	xorlw	128
  6164  00B4  00FF               	movwf	127
  6165  00B5  3080               	movlw	128
  6166  00B6  027F               	subwf	127,w
  6167  00B7  1D03               	skipz
  6168  00B8  28BB               	goto	u2755
  6169  00B9  3011               	movlw	17
  6170  00BA  0256               	subwf	OUTFQ@i,w
  6171  00BB                     u2755:	
  6172  00BB  1803               	btfsc	3,0
  6173  00BC  28D9               	goto	l3129
  6174  00BD                     l3123:	
  6175                           
  6176                           ;FMCW.c: 141: Nprg_b[i] = 0;
  6177  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  6178  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  6179  00BF  0856               	movf	OUTFQ@i,w
  6180  00C0  00A0               	movwf	??_OUTFQ
  6181  00C1  0720               	addwf	??_OUTFQ,w
  6182  00C2  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6183  00C3  0084               	movwf	4
  6184  00C4  1383               	bcf	3,7	;select IRP bank0
  6185  00C5  0180               	clrf	0
  6186  00C6  0A84               	incf	4,f
  6187  00C7  0180               	clrf	0
  6188  00C8  3001               	movlw	1
  6189  00C9  07D6               	addwf	OUTFQ@i,f
  6190  00CA  1803               	skipnc
  6191  00CB  0AD7               	incf	OUTFQ@i+1,f
  6192  00CC  3000               	movlw	0
  6193  00CD  07D7               	addwf	OUTFQ@i+1,f
  6194  00CE  0857               	movf	OUTFQ@i+1,w
  6195  00CF  3A80               	xorlw	128
  6196  00D0  00FF               	movwf	127
  6197  00D1  3080               	movlw	128
  6198  00D2  027F               	subwf	127,w
  6199  00D3  1D03               	skipz
  6200  00D4  28D7               	goto	u2765
  6201  00D5  3011               	movlw	17
  6202  00D6  0256               	subwf	OUTFQ@i,w
  6203  00D7                     u2765:	
  6204  00D7  1C03               	skipc
  6205  00D8  28BD               	goto	l3123
  6206  00D9                     l3129:	
  6207                           
  6208                           ;FMCW.c: 142: }
  6209                           ;FMCW.c: 145: for(int i = 0; i < 17; i++){
  6210  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  6211  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  6212  00DB  01D2               	clrf	OUTFQ@i_476
  6213  00DC  01D3               	clrf	OUTFQ@i_476+1
  6214  00DD  0853               	movf	OUTFQ@i_476+1,w
  6215  00DE  3A80               	xorlw	128
  6216  00DF  00FF               	movwf	127
  6217  00E0  3080               	movlw	128
  6218  00E1  027F               	subwf	127,w
  6219  00E2  1D03               	skipz
  6220  00E3  28E6               	goto	u2775
  6221  00E4  3011               	movlw	17
  6222  00E5  0252               	subwf	OUTFQ@i_476,w
  6223  00E6                     u2775:	
  6224  00E6  1803               	btfsc	3,0
  6225  00E7  2AB7               	goto	l3175
  6226  00E8                     l3135:	
  6227                           
  6228                           ;FMCW.c: 146: for(int j = 0; j<5; j++){
  6229  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  6230  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  6231  00EA  01DA               	clrf	OUTFQ@j
  6232  00EB  01DB               	clrf	OUTFQ@j+1
  6233  00EC  085B               	movf	OUTFQ@j+1,w
  6234  00ED  3A80               	xorlw	128
  6235  00EE  00FF               	movwf	127
  6236  00EF  3080               	movlw	128
  6237  00F0  027F               	subwf	127,w
  6238  00F1  1D03               	skipz
  6239  00F2  28F5               	goto	u2785
  6240  00F3  3005               	movlw	5
  6241  00F4  025A               	subwf	OUTFQ@j,w
  6242  00F5                     u2785:	
  6243  00F5  1803               	btfsc	3,0
  6244  00F6  2AA4               	goto	l3171
  6245  00F7                     l3141:	
  6246                           
  6247                           ;FMCW.c: 147: if(Nprg[j] % 2 == 0) {
  6248  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  6249  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  6250  00F9  085B               	movf	OUTFQ@j+1,w
  6251  00FA  00A1               	movwf	??_OUTFQ+1
  6252  00FB  085A               	movf	OUTFQ@j,w
  6253  00FC  00A0               	movwf	??_OUTFQ
  6254  00FD  1003               	clrc
  6255  00FE  0DA0               	rlf	??_OUTFQ,f
  6256  00FF  0DA1               	rlf	??_OUTFQ+1,f
  6257  0100  0820               	movf	??_OUTFQ,w
  6258  0101  077B               	addwf	OUTFQ@Nprg,w
  6259  0102  00A2               	movwf	??_OUTFQ+2
  6260  0103  0821               	movf	??_OUTFQ+1,w
  6261  0104  1803               	skipnc
  6262  0105  0A21               	incf	??_OUTFQ+1,w
  6263  0106  077C               	addwf	OUTFQ@Nprg+1,w
  6264  0107  00A3               	movwf	??_OUTFQ+3
  6265  0108  0822               	movf	??_OUTFQ+2,w
  6266  0109  0084               	movwf	4
  6267  010A  1783               	bsf	3,7
  6268  010B  1C23               	btfss	??_OUTFQ+3,0
  6269  010C  1383               	bcf	3,7
  6270  010D  0800               	movf	0,w
  6271  010E  00A4               	movwf	??_OUTFQ+4
  6272  010F  0A84               	incf	4,f
  6273  0110  0800               	movf	0,w
  6274  0111  00A5               	movwf	??_OUTFQ+5
  6275  0112  1824               	btfsc	??_OUTFQ+4,0
  6276  0113  299D               	goto	l3153
  6277                           
  6278                           ;FMCW.c: 148: if(j == 4){
  6279  0114  3004               	movlw	4
  6280  0115  065A               	xorwf	OUTFQ@j,w
  6281  0116  045B               	iorwf	OUTFQ@j+1,w
  6282  0117  1D03               	btfss	3,2
  6283  0118  2960               	goto	l3151
  6284                           
  6285                           ;FMCW.c: 149: Nprg[j] = Nprg[j] / 2;
  6286  0119  3002               	movlw	2
  6287  011A  00F0               	movwf	___awdiv@divisor
  6288  011B  3000               	movlw	0
  6289  011C  00F1               	movwf	___awdiv@divisor+1
  6290  011D  085B               	movf	OUTFQ@j+1,w
  6291  011E  00A1               	movwf	??_OUTFQ+1
  6292  011F  085A               	movf	OUTFQ@j,w
  6293  0120  00A0               	movwf	??_OUTFQ
  6294  0121  1003               	clrc
  6295  0122  0DA0               	rlf	??_OUTFQ,f
  6296  0123  0DA1               	rlf	??_OUTFQ+1,f
  6297  0124  0820               	movf	??_OUTFQ,w
  6298  0125  077B               	addwf	OUTFQ@Nprg,w
  6299  0126  00A2               	movwf	??_OUTFQ+2
  6300  0127  0821               	movf	??_OUTFQ+1,w
  6301  0128  1803               	skipnc
  6302  0129  0A21               	incf	??_OUTFQ+1,w
  6303  012A  077C               	addwf	OUTFQ@Nprg+1,w
  6304  012B  00A3               	movwf	??_OUTFQ+3
  6305  012C  0822               	movf	??_OUTFQ+2,w
  6306  012D  0084               	movwf	4
  6307  012E  1783               	bsf	3,7
  6308  012F  1C23               	btfss	??_OUTFQ+3,0
  6309  0130  1383               	bcf	3,7
  6310  0131  0800               	movf	0,w
  6311  0132  00F2               	movwf	___awdiv@dividend
  6312  0133  0A84               	incf	4,f
  6313  0134  0800               	movf	0,w
  6314  0135  00F3               	movwf	___awdiv@dividend+1
  6315  0136  120A  158A  22D2  120A  118A  	fcall	___awdiv
  6316  013B  1283               	bcf	3,5	;RP0=0, select bank0
  6317  013C  1303               	bcf	3,6	;RP1=0, select bank0
  6318  013D  085B               	movf	OUTFQ@j+1,w
  6319  013E  00A5               	movwf	??_OUTFQ+5
  6320  013F  085A               	movf	OUTFQ@j,w
  6321  0140  00A4               	movwf	??_OUTFQ+4
  6322  0141  1003               	clrc
  6323  0142  0DA4               	rlf	??_OUTFQ+4,f
  6324  0143  0DA5               	rlf	??_OUTFQ+5,f
  6325  0144  0824               	movf	??_OUTFQ+4,w
  6326  0145  077B               	addwf	OUTFQ@Nprg,w
  6327  0146  00A6               	movwf	??_OUTFQ+6
  6328  0147  0825               	movf	??_OUTFQ+5,w
  6329  0148  1803               	skipnc
  6330  0149  0A25               	incf	??_OUTFQ+5,w
  6331  014A  077C               	addwf	OUTFQ@Nprg+1,w
  6332  014B  00A7               	movwf	??_OUTFQ+7
  6333  014C  0826               	movf	??_OUTFQ+6,w
  6334  014D  0084               	movwf	4
  6335  014E  1783               	bsf	3,7
  6336  014F  1C27               	btfss	??_OUTFQ+7,0
  6337  0150  1383               	bcf	3,7
  6338  0151  0870               	movf	?___awdiv,w
  6339  0152  0080               	movwf	0
  6340  0153  0A84               	incf	4,f
  6341  0154  0871               	movf	?___awdiv+1,w
  6342  0155  0080               	movwf	0
  6343                           
  6344                           ;FMCW.c: 150: Nprg_b[count] = 0;
  6345  0156  0854               	movf	OUTFQ@count,w
  6346  0157  00A0               	movwf	??_OUTFQ
  6347  0158  0720               	addwf	??_OUTFQ,w
  6348  0159  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6349  015A  0084               	movwf	4
  6350  015B  1383               	bcf	3,7	;select IRP bank0
  6351  015C  0180               	clrf	0
  6352  015D  0A84               	incf	4,f
  6353  015E  0180               	clrf	0
  6354  015F  2A05               	goto	l3161
  6355  0160                     l3151:	
  6356                           ;FMCW.c: 152: }
  6357                           
  6358                           ;FMCW.c: 151: count++;
  6359                           
  6360                           
  6361                           ;FMCW.c: 153: else{
  6362                           ;FMCW.c: 154: Nprg[j] = Nprg[j] / 2;
  6363  0160  3002               	movlw	2
  6364  0161  00F0               	movwf	___awdiv@divisor
  6365  0162  3000               	movlw	0
  6366  0163  00F1               	movwf	___awdiv@divisor+1
  6367  0164  085B               	movf	OUTFQ@j+1,w
  6368  0165  00A1               	movwf	??_OUTFQ+1
  6369  0166  085A               	movf	OUTFQ@j,w
  6370  0167  00A0               	movwf	??_OUTFQ
  6371  0168  1003               	clrc
  6372  0169  0DA0               	rlf	??_OUTFQ,f
  6373  016A  0DA1               	rlf	??_OUTFQ+1,f
  6374  016B  0820               	movf	??_OUTFQ,w
  6375  016C  077B               	addwf	OUTFQ@Nprg,w
  6376  016D  00A2               	movwf	??_OUTFQ+2
  6377  016E  0821               	movf	??_OUTFQ+1,w
  6378  016F  1803               	skipnc
  6379  0170  0A21               	incf	??_OUTFQ+1,w
  6380  0171  077C               	addwf	OUTFQ@Nprg+1,w
  6381  0172  00A3               	movwf	??_OUTFQ+3
  6382  0173  0822               	movf	??_OUTFQ+2,w
  6383  0174  0084               	movwf	4
  6384  0175  1783               	bsf	3,7
  6385  0176  1C23               	btfss	??_OUTFQ+3,0
  6386  0177  1383               	bcf	3,7
  6387  0178  0800               	movf	0,w
  6388  0179  00F2               	movwf	___awdiv@dividend
  6389  017A  0A84               	incf	4,f
  6390  017B  0800               	movf	0,w
  6391  017C  00F3               	movwf	___awdiv@dividend+1
  6392  017D  120A  158A  22D2  120A  118A  	fcall	___awdiv
  6393  0182  1283               	bcf	3,5	;RP0=0, select bank0
  6394  0183  1303               	bcf	3,6	;RP1=0, select bank0
  6395  0184  085B               	movf	OUTFQ@j+1,w
  6396  0185  00A5               	movwf	??_OUTFQ+5
  6397  0186  085A               	movf	OUTFQ@j,w
  6398  0187  00A4               	movwf	??_OUTFQ+4
  6399  0188  1003               	clrc
  6400  0189  0DA4               	rlf	??_OUTFQ+4,f
  6401  018A  0DA5               	rlf	??_OUTFQ+5,f
  6402  018B  0824               	movf	??_OUTFQ+4,w
  6403  018C  077B               	addwf	OUTFQ@Nprg,w
  6404  018D  00A6               	movwf	??_OUTFQ+6
  6405  018E  0825               	movf	??_OUTFQ+5,w
  6406  018F  1803               	skipnc
  6407  0190  0A25               	incf	??_OUTFQ+5,w
  6408  0191  077C               	addwf	OUTFQ@Nprg+1,w
  6409  0192  00A7               	movwf	??_OUTFQ+7
  6410  0193  0826               	movf	??_OUTFQ+6,w
  6411  0194  0084               	movwf	4
  6412  0195  1783               	bsf	3,7
  6413  0196  1C27               	btfss	??_OUTFQ+7,0
  6414  0197  1383               	bcf	3,7
  6415  0198  0870               	movf	?___awdiv,w
  6416  0199  0080               	movwf	0
  6417  019A  0A84               	incf	4,f
  6418  019B  0871               	movf	?___awdiv+1,w
  6419  019C  2A92               	goto	L8
  6420  019D                     l3153:	
  6421                           ;FMCW.c: 155: }
  6422                           ;FMCW.c: 156: }
  6423                           
  6424                           
  6425                           ;FMCW.c: 157: else if(Nprg[j] % 2 == 1) {
  6426  019D  085B               	movf	OUTFQ@j+1,w
  6427  019E  00A1               	movwf	??_OUTFQ+1
  6428  019F  085A               	movf	OUTFQ@j,w
  6429  01A0  00A0               	movwf	??_OUTFQ
  6430  01A1  1003               	clrc
  6431  01A2  0DA0               	rlf	??_OUTFQ,f
  6432  01A3  0DA1               	rlf	??_OUTFQ+1,f
  6433  01A4  0820               	movf	??_OUTFQ,w
  6434  01A5  077B               	addwf	OUTFQ@Nprg,w
  6435  01A6  00A2               	movwf	??_OUTFQ+2
  6436  01A7  0821               	movf	??_OUTFQ+1,w
  6437  01A8  1803               	skipnc
  6438  01A9  0A21               	incf	??_OUTFQ+1,w
  6439  01AA  077C               	addwf	OUTFQ@Nprg+1,w
  6440  01AB  00A3               	movwf	??_OUTFQ+3
  6441  01AC  0822               	movf	??_OUTFQ+2,w
  6442  01AD  0084               	movwf	4
  6443  01AE  1783               	bsf	3,7
  6444  01AF  1C23               	btfss	??_OUTFQ+3,0
  6445  01B0  1383               	bcf	3,7
  6446  01B1  0800               	movf	0,w
  6447  01B2  00A4               	movwf	??_OUTFQ+4
  6448  01B3  0A84               	incf	4,f
  6449  01B4  0800               	movf	0,w
  6450  01B5  00A5               	movwf	??_OUTFQ+5
  6451  01B6  1C24               	btfss	??_OUTFQ+4,0
  6452  01B7  2A93               	goto	l3167
  6453                           
  6454                           ;FMCW.c: 158: if(j == 4){
  6455  01B8  3004               	movlw	4
  6456  01B9  065A               	xorwf	OUTFQ@j,w
  6457  01BA  045B               	iorwf	OUTFQ@j+1,w
  6458  01BB  1D03               	btfss	3,2
  6459  01BC  2A0C               	goto	l3163
  6460                           
  6461                           ;FMCW.c: 159: Nprg[j] = Nprg[j] / 2;
  6462  01BD  3002               	movlw	2
  6463  01BE  00F0               	movwf	___awdiv@divisor
  6464  01BF  3000               	movlw	0
  6465  01C0  00F1               	movwf	___awdiv@divisor+1
  6466  01C1  085B               	movf	OUTFQ@j+1,w
  6467  01C2  00A1               	movwf	??_OUTFQ+1
  6468  01C3  085A               	movf	OUTFQ@j,w
  6469  01C4  00A0               	movwf	??_OUTFQ
  6470  01C5  1003               	clrc
  6471  01C6  0DA0               	rlf	??_OUTFQ,f
  6472  01C7  0DA1               	rlf	??_OUTFQ+1,f
  6473  01C8  0820               	movf	??_OUTFQ,w
  6474  01C9  077B               	addwf	OUTFQ@Nprg,w
  6475  01CA  00A2               	movwf	??_OUTFQ+2
  6476  01CB  0821               	movf	??_OUTFQ+1,w
  6477  01CC  1803               	skipnc
  6478  01CD  0A21               	incf	??_OUTFQ+1,w
  6479  01CE  077C               	addwf	OUTFQ@Nprg+1,w
  6480  01CF  00A3               	movwf	??_OUTFQ+3
  6481  01D0  0822               	movf	??_OUTFQ+2,w
  6482  01D1  0084               	movwf	4
  6483  01D2  1783               	bsf	3,7
  6484  01D3  1C23               	btfss	??_OUTFQ+3,0
  6485  01D4  1383               	bcf	3,7
  6486  01D5  0800               	movf	0,w
  6487  01D6  00F2               	movwf	___awdiv@dividend
  6488  01D7  0A84               	incf	4,f
  6489  01D8  0800               	movf	0,w
  6490  01D9  00F3               	movwf	___awdiv@dividend+1
  6491  01DA  120A  158A  22D2  120A  118A  	fcall	___awdiv
  6492  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  6493  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  6494  01E1  085B               	movf	OUTFQ@j+1,w
  6495  01E2  00A5               	movwf	??_OUTFQ+5
  6496  01E3  085A               	movf	OUTFQ@j,w
  6497  01E4  00A4               	movwf	??_OUTFQ+4
  6498  01E5  1003               	clrc
  6499  01E6  0DA4               	rlf	??_OUTFQ+4,f
  6500  01E7  0DA5               	rlf	??_OUTFQ+5,f
  6501  01E8  0824               	movf	??_OUTFQ+4,w
  6502  01E9  077B               	addwf	OUTFQ@Nprg,w
  6503  01EA  00A6               	movwf	??_OUTFQ+6
  6504  01EB  0825               	movf	??_OUTFQ+5,w
  6505  01EC  1803               	skipnc
  6506  01ED  0A25               	incf	??_OUTFQ+5,w
  6507  01EE  077C               	addwf	OUTFQ@Nprg+1,w
  6508  01EF  00A7               	movwf	??_OUTFQ+7
  6509  01F0  0826               	movf	??_OUTFQ+6,w
  6510  01F1  0084               	movwf	4
  6511  01F2  1783               	bsf	3,7
  6512  01F3  1C27               	btfss	??_OUTFQ+7,0
  6513  01F4  1383               	bcf	3,7
  6514  01F5  0870               	movf	?___awdiv,w
  6515  01F6  0080               	movwf	0
  6516  01F7  0A84               	incf	4,f
  6517  01F8  0871               	movf	?___awdiv+1,w
  6518  01F9  0080               	movwf	0
  6519                           
  6520                           ;FMCW.c: 160: Nprg_b[count] = 1;
  6521  01FA  0854               	movf	OUTFQ@count,w
  6522  01FB  00A0               	movwf	??_OUTFQ
  6523  01FC  0720               	addwf	??_OUTFQ,w
  6524  01FD  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6525  01FE  0084               	movwf	4
  6526  01FF  3001               	movlw	1
  6527  0200  1383               	bcf	3,7	;select IRP bank0
  6528  0201  0080               	movwf	0
  6529  0202  0A84               	incf	4,f
  6530  0203  3000               	movlw	0
  6531  0204  0080               	movwf	0
  6532  0205                     l3161:	
  6533                           
  6534                           ;FMCW.c: 161: count++;
  6535  0205  3001               	movlw	1
  6536  0206  07D4               	addwf	OUTFQ@count,f
  6537  0207  1803               	skipnc
  6538  0208  0AD5               	incf	OUTFQ@count+1,f
  6539  0209  3000               	movlw	0
  6540  020A  07D5               	addwf	OUTFQ@count+1,f
  6541                           
  6542                           ;FMCW.c: 162: }
  6543  020B  2A93               	goto	l3167
  6544  020C                     l3163:	
  6545                           
  6546                           ;FMCW.c: 163: else{
  6547                           ;FMCW.c: 164: Nprg[j] = Nprg[j] / 2;
  6548  020C  3002               	movlw	2
  6549  020D  00F0               	movwf	___awdiv@divisor
  6550  020E  3000               	movlw	0
  6551  020F  00F1               	movwf	___awdiv@divisor+1
  6552  0210  085B               	movf	OUTFQ@j+1,w
  6553  0211  00A1               	movwf	??_OUTFQ+1
  6554  0212  085A               	movf	OUTFQ@j,w
  6555  0213  00A0               	movwf	??_OUTFQ
  6556  0214  1003               	clrc
  6557  0215  0DA0               	rlf	??_OUTFQ,f
  6558  0216  0DA1               	rlf	??_OUTFQ+1,f
  6559  0217  0820               	movf	??_OUTFQ,w
  6560  0218  077B               	addwf	OUTFQ@Nprg,w
  6561  0219  00A2               	movwf	??_OUTFQ+2
  6562  021A  0821               	movf	??_OUTFQ+1,w
  6563  021B  1803               	skipnc
  6564  021C  0A21               	incf	??_OUTFQ+1,w
  6565  021D  077C               	addwf	OUTFQ@Nprg+1,w
  6566  021E  00A3               	movwf	??_OUTFQ+3
  6567  021F  0822               	movf	??_OUTFQ+2,w
  6568  0220  0084               	movwf	4
  6569  0221  1783               	bsf	3,7
  6570  0222  1C23               	btfss	??_OUTFQ+3,0
  6571  0223  1383               	bcf	3,7
  6572  0224  0800               	movf	0,w
  6573  0225  00F2               	movwf	___awdiv@dividend
  6574  0226  0A84               	incf	4,f
  6575  0227  0800               	movf	0,w
  6576  0228  00F3               	movwf	___awdiv@dividend+1
  6577  0229  120A  158A  22D2  120A  118A  	fcall	___awdiv
  6578  022E  1283               	bcf	3,5	;RP0=0, select bank0
  6579  022F  1303               	bcf	3,6	;RP1=0, select bank0
  6580  0230  085B               	movf	OUTFQ@j+1,w
  6581  0231  00A5               	movwf	??_OUTFQ+5
  6582  0232  085A               	movf	OUTFQ@j,w
  6583  0233  00A4               	movwf	??_OUTFQ+4
  6584  0234  1003               	clrc
  6585  0235  0DA4               	rlf	??_OUTFQ+4,f
  6586  0236  0DA5               	rlf	??_OUTFQ+5,f
  6587  0237  0824               	movf	??_OUTFQ+4,w
  6588  0238  077B               	addwf	OUTFQ@Nprg,w
  6589  0239  00A6               	movwf	??_OUTFQ+6
  6590  023A  0825               	movf	??_OUTFQ+5,w
  6591  023B  1803               	skipnc
  6592  023C  0A25               	incf	??_OUTFQ+5,w
  6593  023D  077C               	addwf	OUTFQ@Nprg+1,w
  6594  023E  00A7               	movwf	??_OUTFQ+7
  6595  023F  0826               	movf	??_OUTFQ+6,w
  6596  0240  0084               	movwf	4
  6597  0241  1783               	bsf	3,7
  6598  0242  1C27               	btfss	??_OUTFQ+7,0
  6599  0243  1383               	bcf	3,7
  6600  0244  0870               	movf	?___awdiv,w
  6601  0245  0080               	movwf	0
  6602  0246  0A84               	incf	4,f
  6603  0247  0871               	movf	?___awdiv+1,w
  6604  0248  0080               	movwf	0
  6605                           
  6606                           ;FMCW.c: 165: Nprg[j+1] = Nprg[j+1] + 10;
  6607  0249  085B               	movf	OUTFQ@j+1,w
  6608  024A  00A1               	movwf	??_OUTFQ+1
  6609  024B  085A               	movf	OUTFQ@j,w
  6610  024C  00A0               	movwf	??_OUTFQ
  6611  024D  1003               	clrc
  6612  024E  0DA0               	rlf	??_OUTFQ,f
  6613  024F  0DA1               	rlf	??_OUTFQ+1,f
  6614  0250  0820               	movf	??_OUTFQ,w
  6615  0251  3E02               	addlw	2
  6616  0252  00A2               	movwf	??_OUTFQ+2
  6617  0253  0821               	movf	??_OUTFQ+1,w
  6618  0254  1803               	skipnc
  6619  0255  3E01               	addlw	1
  6620  0256  3E00               	addlw	0
  6621  0257  00A3               	movwf	??_OUTFQ+3
  6622  0258  0822               	movf	??_OUTFQ+2,w
  6623  0259  077B               	addwf	OUTFQ@Nprg,w
  6624  025A  00A4               	movwf	??_OUTFQ+4
  6625  025B  0823               	movf	??_OUTFQ+3,w
  6626  025C  1803               	skipnc
  6627  025D  0A23               	incf	??_OUTFQ+3,w
  6628  025E  077C               	addwf	OUTFQ@Nprg+1,w
  6629  025F  00A5               	movwf	??_OUTFQ+5
  6630  0260  0824               	movf	??_OUTFQ+4,w
  6631  0261  0084               	movwf	4
  6632  0262  1783               	bsf	3,7
  6633  0263  1C25               	btfss	??_OUTFQ+5,0
  6634  0264  1383               	bcf	3,7
  6635  0265  0800               	movf	0,w
  6636  0266  00A6               	movwf	??_OUTFQ+6
  6637  0267  0A84               	incf	4,f
  6638  0268  0800               	movf	0,w
  6639  0269  00A7               	movwf	??_OUTFQ+7
  6640  026A  0826               	movf	??_OUTFQ+6,w
  6641  026B  3E0A               	addlw	10
  6642  026C  00A8               	movwf	??_OUTFQ+8
  6643  026D  0827               	movf	??_OUTFQ+7,w
  6644  026E  1803               	skipnc
  6645  026F  3E01               	addlw	1
  6646  0270  3E00               	addlw	0
  6647  0271  00A9               	movwf	??_OUTFQ+9
  6648  0272  085B               	movf	OUTFQ@j+1,w
  6649  0273  00AB               	movwf	??_OUTFQ+11
  6650  0274  085A               	movf	OUTFQ@j,w
  6651  0275  00AA               	movwf	??_OUTFQ+10
  6652  0276  1003               	clrc
  6653  0277  0DAA               	rlf	??_OUTFQ+10,f
  6654  0278  0DAB               	rlf	??_OUTFQ+11,f
  6655  0279  082A               	movf	??_OUTFQ+10,w
  6656  027A  3E02               	addlw	2
  6657  027B  00AC               	movwf	??_OUTFQ+12
  6658  027C  082B               	movf	??_OUTFQ+11,w
  6659  027D  1803               	skipnc
  6660  027E  3E01               	addlw	1
  6661  027F  3E00               	addlw	0
  6662  0280  00AD               	movwf	??_OUTFQ+13
  6663  0281  082C               	movf	??_OUTFQ+12,w
  6664  0282  077B               	addwf	OUTFQ@Nprg,w
  6665  0283  00AE               	movwf	??_OUTFQ+14
  6666  0284  082D               	movf	??_OUTFQ+13,w
  6667  0285  1803               	skipnc
  6668  0286  0A2D               	incf	??_OUTFQ+13,w
  6669  0287  077C               	addwf	OUTFQ@Nprg+1,w
  6670  0288  00AF               	movwf	??_OUTFQ+15
  6671  0289  082E               	movf	??_OUTFQ+14,w
  6672  028A  0084               	movwf	4
  6673  028B  1783               	bsf	3,7
  6674  028C  1C2F               	btfss	??_OUTFQ+15,0
  6675  028D  1383               	bcf	3,7
  6676  028E  0828               	movf	??_OUTFQ+8,w
  6677  028F  0080               	movwf	0
  6678  0290  0A84               	incf	4,f
  6679  0291  0829               	movf	??_OUTFQ+9,w
  6680  0292                     L8:	
  6681  0292  0080               	movwf	0
  6682  0293                     l3167:	
  6683  0293  3001               	movlw	1
  6684  0294  07DA               	addwf	OUTFQ@j,f
  6685  0295  1803               	skipnc
  6686  0296  0ADB               	incf	OUTFQ@j+1,f
  6687  0297  3000               	movlw	0
  6688  0298  07DB               	addwf	OUTFQ@j+1,f
  6689  0299  085B               	movf	OUTFQ@j+1,w
  6690  029A  3A80               	xorlw	128
  6691  029B  00FF               	movwf	127
  6692  029C  3080               	movlw	128
  6693  029D  027F               	subwf	127,w
  6694  029E  1D03               	skipz
  6695  029F  2AA2               	goto	u2835
  6696  02A0  3005               	movlw	5
  6697  02A1  025A               	subwf	OUTFQ@j,w
  6698  02A2                     u2835:	
  6699  02A2  1C03               	skipc
  6700  02A3  28F7               	goto	l3141
  6701  02A4                     l3171:	
  6702  02A4  3001               	movlw	1
  6703  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  6704  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  6705  02A7  07D2               	addwf	OUTFQ@i_476,f
  6706  02A8  1803               	skipnc
  6707  02A9  0AD3               	incf	OUTFQ@i_476+1,f
  6708  02AA  3000               	movlw	0
  6709  02AB  07D3               	addwf	OUTFQ@i_476+1,f
  6710  02AC  0853               	movf	OUTFQ@i_476+1,w
  6711  02AD  3A80               	xorlw	128
  6712  02AE  00FF               	movwf	127
  6713  02AF  3080               	movlw	128
  6714  02B0  027F               	subwf	127,w
  6715  02B1  1D03               	skipz
  6716  02B2  2AB5               	goto	u2845
  6717  02B3  3011               	movlw	17
  6718  02B4  0252               	subwf	OUTFQ@i_476,w
  6719  02B5                     u2845:	
  6720  02B5  1C03               	skipc
  6721  02B6  28E8               	goto	l3135
  6722  02B7                     l3175:	
  6723                           
  6724                           ;FMCW.c: 166: }
  6725                           ;FMCW.c: 167: }
  6726                           ;FMCW.c: 168: }
  6727                           ;FMCW.c: 169: }
  6728                           ;FMCW.c: 172: for (int i=0; i<17; i++)
  6729  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  6730  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  6731  02B9  01D8               	clrf	OUTFQ@i_478
  6732  02BA  01D9               	clrf	OUTFQ@i_478+1
  6733  02BB  0859               	movf	OUTFQ@i_478+1,w
  6734  02BC  3A80               	xorlw	128
  6735  02BD  00FF               	movwf	127
  6736  02BE  3080               	movlw	128
  6737  02BF  027F               	subwf	127,w
  6738  02C0  1D03               	skipz
  6739  02C1  2AC4               	goto	u2855
  6740  02C2  3011               	movlw	17
  6741  02C3  0258               	subwf	OUTFQ@i_478,w
  6742  02C4                     u2855:	
  6743  02C4  1803               	btfsc	3,0
  6744  02C5  2B0D               	goto	l3193
  6745  02C6                     l3181:	
  6746                           
  6747                           ;FMCW.c: 173: {
  6748                           ;FMCW.c: 174: if(Nprg_b[i] == 0)
  6749  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  6750  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  6751  02C8  0858               	movf	OUTFQ@i_478,w
  6752  02C9  00A0               	movwf	??_OUTFQ
  6753  02CA  0720               	addwf	??_OUTFQ,w
  6754  02CB  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6755  02CC  0084               	movwf	4
  6756  02CD  1383               	bcf	3,7	;select IRP bank0
  6757  02CE  0800               	movf	0,w
  6758  02CF  00A1               	movwf	??_OUTFQ+1
  6759  02D0  0A84               	incf	4,f
  6760  02D1  0800               	movf	0,w
  6761  02D2  00A2               	movwf	??_OUTFQ+2
  6762  02D3  0821               	movf	??_OUTFQ+1,w
  6763  02D4  0422               	iorwf	??_OUTFQ+2,w
  6764  02D5  1D03               	btfss	3,2
  6765  02D6  2AE0               	goto	l3185
  6766                           
  6767                           ;FMCW.c: 175: {
  6768                           ;FMCW.c: 176: L_OUT(fmcwtxrx);
  6769  02D7  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6770  02D8  00F3               	movwf	L_OUT@fmcwtxrx+1
  6771  02D9  0879               	movf	OUTFQ@fmcwtxrx,w
  6772  02DA  00F2               	movwf	L_OUT@fmcwtxrx
  6773  02DB  120A  158A  2240  120A  118A  	fcall	_L_OUT
  6774  02E0                     l3185:	
  6775                           
  6776                           ;FMCW.c: 177: }
  6777                           ;FMCW.c: 178: if(Nprg_b[i] == 1)
  6778  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  6779  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  6780  02E2  0858               	movf	OUTFQ@i_478,w
  6781  02E3  00A0               	movwf	??_OUTFQ
  6782  02E4  0720               	addwf	??_OUTFQ,w
  6783  02E5  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6784  02E6  0084               	movwf	4
  6785  02E7  1383               	bcf	3,7	;select IRP bank0
  6786  02E8  0800               	movf	0,w
  6787  02E9  00A1               	movwf	??_OUTFQ+1
  6788  02EA  0A84               	incf	4,f
  6789  02EB  0800               	movf	0,w
  6790  02EC  00A2               	movwf	??_OUTFQ+2
  6791  02ED  0321               	decf	??_OUTFQ+1,w
  6792  02EE  0422               	iorwf	??_OUTFQ+2,w
  6793  02EF  1D03               	btfss	3,2
  6794  02F0  2AFA               	goto	l3189
  6795                           
  6796                           ;FMCW.c: 179: {
  6797                           ;FMCW.c: 180: H_OUT(fmcwtxrx);
  6798  02F1  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6799  02F2  00F3               	movwf	H_OUT@fmcwtxrx+1
  6800  02F3  0879               	movf	OUTFQ@fmcwtxrx,w
  6801  02F4  00F2               	movwf	H_OUT@fmcwtxrx
  6802  02F5  120A  158A  21FA  120A  118A  	fcall	_H_OUT
  6803  02FA                     l3189:	
  6804  02FA  3001               	movlw	1
  6805  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  6806  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  6807  02FD  07D8               	addwf	OUTFQ@i_478,f
  6808  02FE  1803               	skipnc
  6809  02FF  0AD9               	incf	OUTFQ@i_478+1,f
  6810  0300  3000               	movlw	0
  6811  0301  07D9               	addwf	OUTFQ@i_478+1,f
  6812  0302  0859               	movf	OUTFQ@i_478+1,w
  6813  0303  3A80               	xorlw	128
  6814  0304  00FF               	movwf	127
  6815  0305  3080               	movlw	128
  6816  0306  027F               	subwf	127,w
  6817  0307  1D03               	skipz
  6818  0308  2B0B               	goto	u2885
  6819  0309  3011               	movlw	17
  6820  030A  0258               	subwf	OUTFQ@i_478,w
  6821  030B                     u2885:	
  6822  030B  1C03               	skipc
  6823  030C  2AC6               	goto	l3181
  6824  030D                     l3193:	
  6825                           
  6826                           ;FMCW.c: 181: }
  6827                           ;FMCW.c: 182: }
  6828                           ;FMCW.c: 185: H_OUT(fmcwtxrx);
  6829  030D  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6830  030E  00F3               	movwf	H_OUT@fmcwtxrx+1
  6831  030F  0879               	movf	OUTFQ@fmcwtxrx,w
  6832  0310  00F2               	movwf	H_OUT@fmcwtxrx
  6833  0311  120A  158A  21FA  120A  118A  	fcall	_H_OUT
  6834                           
  6835                           ;FMCW.c: 186: L_OUT(fmcwtxrx);
  6836  0316  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6837  0317  00F3               	movwf	L_OUT@fmcwtxrx+1
  6838  0318  0879               	movf	OUTFQ@fmcwtxrx,w
  6839  0319  00F2               	movwf	L_OUT@fmcwtxrx
  6840  031A  120A  158A  2240  120A  118A  	fcall	_L_OUT
  6841                           
  6842                           ;FMCW.c: 189: STBOUT(fmcwtxrx);
  6843  031F  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6844  0320  00F3               	movwf	STBOUT@fmcwtxrx+1
  6845  0321  0879               	movf	OUTFQ@fmcwtxrx,w
  6846  0322  00F2               	movwf	STBOUT@fmcwtxrx
  6847  0323  120A  158A  215E   	fcall	_STBOUT
  6848  0326  0008               	return
  6849  0327                     __end_of_OUTFQ:	
  6850                           
  6851                           	psect	text24
  6852  0AD2                     __ptext24:	
  6853 ;; *************** function ___awdiv *****************
  6854 ;; Defined at:
  6855 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  6856 ;; Parameters:    Size  Location     Type
  6857 ;;  divisor         2    0[COMMON] int 
  6858 ;;  dividend        2    2[COMMON] int 
  6859 ;; Auto vars:     Size  Location     Type
  6860 ;;  quotient        2    7[COMMON] int 
  6861 ;;  sign            1    6[COMMON] unsigned char 
  6862 ;;  counter         1    5[COMMON] unsigned char 
  6863 ;; Return value:  Size  Location     Type
  6864 ;;                  2    0[COMMON] int 
  6865 ;; Registers used:
  6866 ;;		wreg, status,2, status,0
  6867 ;; Tracked objects:
  6868 ;;		On entry : 0/0
  6869 ;;		On exit  : 0/0
  6870 ;;		Unchanged: 0/0
  6871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6872 ;;      Params:         4       0       0       0       0
  6873 ;;      Locals:         4       0       0       0       0
  6874 ;;      Temps:          1       0       0       0       0
  6875 ;;      Totals:         9       0       0       0       0
  6876 ;;Total ram usage:        9 bytes
  6877 ;; Hardware stack levels used:    1
  6878 ;; This function calls:
  6879 ;;		Nothing
  6880 ;; This function is called by:
  6881 ;;		_OUTFQ
  6882 ;;		_RFDOUT
  6883 ;; This function uses a non-reentrant model
  6884 ;;
  6885                           
  6886                           
  6887                           ;psect for function ___awdiv
  6888  0AD2                     ___awdiv:	
  6889                           
  6890                           ;incstack = 0
  6891                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6892  0AD2  01F6               	clrf	___awdiv@sign
  6893  0AD3  1FF1               	btfss	___awdiv@divisor+1,7
  6894  0AD4  2ADC               	goto	l2605
  6895  0AD5  09F0               	comf	___awdiv@divisor,f
  6896  0AD6  09F1               	comf	___awdiv@divisor+1,f
  6897  0AD7  0AF0               	incf	___awdiv@divisor,f
  6898  0AD8  1903               	skipnz
  6899  0AD9  0AF1               	incf	___awdiv@divisor+1,f
  6900  0ADA  01F6               	clrf	___awdiv@sign
  6901  0ADB  0AF6               	incf	___awdiv@sign,f
  6902  0ADC                     l2605:	
  6903  0ADC  1FF3               	btfss	___awdiv@dividend+1,7
  6904  0ADD  2AE7               	goto	l2611
  6905  0ADE  09F2               	comf	___awdiv@dividend,f
  6906  0ADF  09F3               	comf	___awdiv@dividend+1,f
  6907  0AE0  0AF2               	incf	___awdiv@dividend,f
  6908  0AE1  1903               	skipnz
  6909  0AE2  0AF3               	incf	___awdiv@dividend+1,f
  6910  0AE3  3001               	movlw	1
  6911  0AE4  00F4               	movwf	??___awdiv
  6912  0AE5  0874               	movf	??___awdiv,w
  6913  0AE6  06F6               	xorwf	___awdiv@sign,f
  6914  0AE7                     l2611:	
  6915  0AE7  01F7               	clrf	___awdiv@quotient
  6916  0AE8  01F8               	clrf	___awdiv@quotient+1
  6917  0AE9  0870               	movf	___awdiv@divisor,w
  6918  0AEA  0471               	iorwf	___awdiv@divisor+1,w
  6919  0AEB  1903               	btfsc	3,2
  6920  0AEC  2B1E               	goto	l2633
  6921  0AED  01F5               	clrf	___awdiv@counter
  6922  0AEE  0AF5               	incf	___awdiv@counter,f
  6923  0AEF                     l2621:	
  6924  0AEF  1BF1               	btfsc	___awdiv@divisor+1,7
  6925  0AF0  2AFD               	goto	l2623
  6926  0AF1  3001               	movlw	1
  6927  0AF2                     u2005:	
  6928  0AF2  1003               	clrc
  6929  0AF3  0DF0               	rlf	___awdiv@divisor,f
  6930  0AF4  0DF1               	rlf	___awdiv@divisor+1,f
  6931  0AF5  3EFF               	addlw	-1
  6932  0AF6  1D03               	skipz
  6933  0AF7  2AF2               	goto	u2005
  6934  0AF8  3001               	movlw	1
  6935  0AF9  00F4               	movwf	??___awdiv
  6936  0AFA  0874               	movf	??___awdiv,w
  6937  0AFB  07F5               	addwf	___awdiv@counter,f
  6938  0AFC  2AEF               	goto	l2621
  6939  0AFD                     l2623:	
  6940  0AFD  3001               	movlw	1
  6941  0AFE                     u2025:	
  6942  0AFE  1003               	clrc
  6943  0AFF  0DF7               	rlf	___awdiv@quotient,f
  6944  0B00  0DF8               	rlf	___awdiv@quotient+1,f
  6945  0B01  3EFF               	addlw	-1
  6946  0B02  1D03               	skipz
  6947  0B03  2AFE               	goto	u2025
  6948  0B04  0871               	movf	___awdiv@divisor+1,w
  6949  0B05  0273               	subwf	___awdiv@dividend+1,w
  6950  0B06  1D03               	skipz
  6951  0B07  2B0A               	goto	u2035
  6952  0B08  0870               	movf	___awdiv@divisor,w
  6953  0B09  0272               	subwf	___awdiv@dividend,w
  6954  0B0A                     u2035:	
  6955  0B0A  1C03               	skipc
  6956  0B0B  2B13               	goto	l2629
  6957  0B0C  0870               	movf	___awdiv@divisor,w
  6958  0B0D  02F2               	subwf	___awdiv@dividend,f
  6959  0B0E  0871               	movf	___awdiv@divisor+1,w
  6960  0B0F  1C03               	skipc
  6961  0B10  03F3               	decf	___awdiv@dividend+1,f
  6962  0B11  02F3               	subwf	___awdiv@dividend+1,f
  6963  0B12  1477               	bsf	___awdiv@quotient,0
  6964  0B13                     l2629:	
  6965  0B13  3001               	movlw	1
  6966  0B14                     u2045:	
  6967  0B14  1003               	clrc
  6968  0B15  0CF1               	rrf	___awdiv@divisor+1,f
  6969  0B16  0CF0               	rrf	___awdiv@divisor,f
  6970  0B17  3EFF               	addlw	-1
  6971  0B18  1D03               	skipz
  6972  0B19  2B14               	goto	u2045
  6973  0B1A  3001               	movlw	1
  6974  0B1B  02F5               	subwf	___awdiv@counter,f
  6975  0B1C  1D03               	btfss	3,2
  6976  0B1D  2AFD               	goto	l2623
  6977  0B1E                     l2633:	
  6978  0B1E  0876               	movf	___awdiv@sign,w
  6979  0B1F  1903               	btfsc	3,2
  6980  0B20  2B26               	goto	l2637
  6981  0B21  09F7               	comf	___awdiv@quotient,f
  6982  0B22  09F8               	comf	___awdiv@quotient+1,f
  6983  0B23  0AF7               	incf	___awdiv@quotient,f
  6984  0B24  1903               	skipnz
  6985  0B25  0AF8               	incf	___awdiv@quotient+1,f
  6986  0B26                     l2637:	
  6987  0B26  0878               	movf	___awdiv@quotient+1,w
  6988  0B27  00F1               	movwf	?___awdiv+1
  6989  0B28  0877               	movf	___awdiv@quotient,w
  6990  0B29  00F0               	movwf	?___awdiv
  6991  0B2A  0008               	return
  6992  0B2B                     __end_of___awdiv:	
  6993                           
  6994                           	psect	text25
  6995  0CAC                     __ptext25:	
  6996 ;; *************** function _OPINIT *****************
  6997 ;; Defined at:
  6998 ;;		line 241 in file "FMCW.c"
  6999 ;; Parameters:    Size  Location     Type
  7000 ;;  fmcwtxrx        2    4[COMMON] int 
  7001 ;; Auto vars:     Size  Location     Type
  7002 ;;		None
  7003 ;; Return value:  Size  Location     Type
  7004 ;;                  1    wreg      void 
  7005 ;; Registers used:
  7006 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7007 ;; Tracked objects:
  7008 ;;		On entry : 0/0
  7009 ;;		On exit  : 0/0
  7010 ;;		Unchanged: 0/0
  7011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7012 ;;      Params:         2       0       0       0       0
  7013 ;;      Locals:         0       0       0       0       0
  7014 ;;      Temps:          0       0       0       0       0
  7015 ;;      Totals:         2       0       0       0       0
  7016 ;;Total ram usage:        2 bytes
  7017 ;; Hardware stack levels used:    1
  7018 ;; Hardware stack levels required when called:    2
  7019 ;; This function calls:
  7020 ;;		_H_OUT
  7021 ;;		_L_OUT
  7022 ;;		_STBOUT
  7023 ;; This function is called by:
  7024 ;;		_FMTX
  7025 ;;		_CWTX
  7026 ;;		_FMRX
  7027 ;; This function uses a non-reentrant model
  7028 ;;
  7029                           
  7030                           
  7031                           ;psect for function _OPINIT
  7032  0CAC                     _OPINIT:	
  7033                           
  7034                           ;FMCW.c: 243: L_OUT(fmcwtxrx);
  7035                           
  7036                           ;incstack = 0
  7037                           ; Regs used in _OPINIT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7038  0CAC  0875               	movf	OPINIT@fmcwtxrx+1,w
  7039  0CAD  00F3               	movwf	L_OUT@fmcwtxrx+1
  7040  0CAE  0874               	movf	OPINIT@fmcwtxrx,w
  7041  0CAF  00F2               	movwf	L_OUT@fmcwtxrx
  7042  0CB0  120A  158A  2240  120A  158A  	fcall	_L_OUT
  7043                           
  7044                           ;FMCW.c: 244: L_OUT(fmcwtxrx);
  7045  0CB5  0875               	movf	OPINIT@fmcwtxrx+1,w
  7046  0CB6  00F3               	movwf	L_OUT@fmcwtxrx+1
  7047  0CB7  0874               	movf	OPINIT@fmcwtxrx,w
  7048  0CB8  00F2               	movwf	L_OUT@fmcwtxrx
  7049  0CB9  120A  158A  2240  120A  158A  	fcall	_L_OUT
  7050                           
  7051                           ;FMCW.c: 245: L_OUT(fmcwtxrx);
  7052  0CBE  0875               	movf	OPINIT@fmcwtxrx+1,w
  7053  0CBF  00F3               	movwf	L_OUT@fmcwtxrx+1
  7054  0CC0  0874               	movf	OPINIT@fmcwtxrx,w
  7055  0CC1  00F2               	movwf	L_OUT@fmcwtxrx
  7056  0CC2  120A  158A  2240  120A  158A  	fcall	_L_OUT
  7057                           
  7058                           ;FMCW.c: 246: H_OUT(fmcwtxrx);
  7059  0CC7  0875               	movf	OPINIT@fmcwtxrx+1,w
  7060  0CC8  00F3               	movwf	H_OUT@fmcwtxrx+1
  7061  0CC9  0874               	movf	OPINIT@fmcwtxrx,w
  7062  0CCA  00F2               	movwf	H_OUT@fmcwtxrx
  7063  0CCB  120A  158A  21FA  120A  158A  	fcall	_H_OUT
  7064                           
  7065                           ;FMCW.c: 247: H_OUT(fmcwtxrx);
  7066  0CD0  0875               	movf	OPINIT@fmcwtxrx+1,w
  7067  0CD1  00F3               	movwf	H_OUT@fmcwtxrx+1
  7068  0CD2  0874               	movf	OPINIT@fmcwtxrx,w
  7069  0CD3  00F2               	movwf	H_OUT@fmcwtxrx
  7070  0CD4  120A  158A  21FA  120A  158A  	fcall	_H_OUT
  7071                           
  7072                           ;FMCW.c: 248: L_OUT(fmcwtxrx);
  7073  0CD9  0875               	movf	OPINIT@fmcwtxrx+1,w
  7074  0CDA  00F3               	movwf	L_OUT@fmcwtxrx+1
  7075  0CDB  0874               	movf	OPINIT@fmcwtxrx,w
  7076  0CDC  00F2               	movwf	L_OUT@fmcwtxrx
  7077  0CDD  120A  158A  2240  120A  158A  	fcall	_L_OUT
  7078                           
  7079                           ;FMCW.c: 249: L_OUT(fmcwtxrx);
  7080  0CE2  0875               	movf	OPINIT@fmcwtxrx+1,w
  7081  0CE3  00F3               	movwf	L_OUT@fmcwtxrx+1
  7082  0CE4  0874               	movf	OPINIT@fmcwtxrx,w
  7083  0CE5  00F2               	movwf	L_OUT@fmcwtxrx
  7084  0CE6  120A  158A  2240  120A  158A  	fcall	_L_OUT
  7085                           
  7086                           ;FMCW.c: 250: L_OUT(fmcwtxrx);
  7087  0CEB  0875               	movf	OPINIT@fmcwtxrx+1,w
  7088  0CEC  00F3               	movwf	L_OUT@fmcwtxrx+1
  7089  0CED  0874               	movf	OPINIT@fmcwtxrx,w
  7090  0CEE  00F2               	movwf	L_OUT@fmcwtxrx
  7091  0CEF  120A  158A  2240  120A  158A  	fcall	_L_OUT
  7092                           
  7093                           ;FMCW.c: 251: L_OUT(fmcwtxrx);
  7094  0CF4  0875               	movf	OPINIT@fmcwtxrx+1,w
  7095  0CF5  00F3               	movwf	L_OUT@fmcwtxrx+1
  7096  0CF6  0874               	movf	OPINIT@fmcwtxrx,w
  7097  0CF7  00F2               	movwf	L_OUT@fmcwtxrx
  7098  0CF8  120A  158A  2240  120A  158A  	fcall	_L_OUT
  7099                           
  7100                           ;FMCW.c: 252: L_OUT(fmcwtxrx);
  7101  0CFD  0875               	movf	OPINIT@fmcwtxrx+1,w
  7102  0CFE  00F3               	movwf	L_OUT@fmcwtxrx+1
  7103  0CFF  0874               	movf	OPINIT@fmcwtxrx,w
  7104  0D00  00F2               	movwf	L_OUT@fmcwtxrx
  7105  0D01  120A  158A  2240  120A  158A  	fcall	_L_OUT
  7106                           
  7107                           ;FMCW.c: 253: H_OUT(fmcwtxrx);
  7108  0D06  0875               	movf	OPINIT@fmcwtxrx+1,w
  7109  0D07  00F3               	movwf	H_OUT@fmcwtxrx+1
  7110  0D08  0874               	movf	OPINIT@fmcwtxrx,w
  7111  0D09  00F2               	movwf	H_OUT@fmcwtxrx
  7112  0D0A  120A  158A  21FA  120A  158A  	fcall	_H_OUT
  7113                           
  7114                           ;FMCW.c: 256: L_OUT(fmcwtxrx);
  7115  0D0F  0875               	movf	OPINIT@fmcwtxrx+1,w
  7116  0D10  00F3               	movwf	L_OUT@fmcwtxrx+1
  7117  0D11  0874               	movf	OPINIT@fmcwtxrx,w
  7118  0D12  00F2               	movwf	L_OUT@fmcwtxrx
  7119  0D13  120A  158A  2240  120A  158A  	fcall	_L_OUT
  7120                           
  7121                           ;FMCW.c: 257: L_OUT(fmcwtxrx);
  7122  0D18  0875               	movf	OPINIT@fmcwtxrx+1,w
  7123  0D19  00F3               	movwf	L_OUT@fmcwtxrx+1
  7124  0D1A  0874               	movf	OPINIT@fmcwtxrx,w
  7125  0D1B  00F2               	movwf	L_OUT@fmcwtxrx
  7126  0D1C  120A  158A  2240  120A  158A  	fcall	_L_OUT
  7127                           
  7128                           ;FMCW.c: 260: STBOUT(fmcwtxrx);
  7129  0D21  0875               	movf	OPINIT@fmcwtxrx+1,w
  7130  0D22  00F3               	movwf	STBOUT@fmcwtxrx+1
  7131  0D23  0874               	movf	OPINIT@fmcwtxrx,w
  7132  0D24  00F2               	movwf	STBOUT@fmcwtxrx
  7133  0D25  120A  158A  215E   	fcall	_STBOUT
  7134  0D28  0008               	return
  7135  0D29                     __end_of_OPINIT:	
  7136                           
  7137                           	psect	text26
  7138  095E                     __ptext26:	
  7139 ;; *************** function _STBOUT *****************
  7140 ;; Defined at:
  7141 ;;		line 107 in file "FMCW.c"
  7142 ;; Parameters:    Size  Location     Type
  7143 ;;  fmcwtxrx        2    2[COMMON] int 
  7144 ;; Auto vars:     Size  Location     Type
  7145 ;;		None
  7146 ;; Return value:  Size  Location     Type
  7147 ;;                  1    wreg      void 
  7148 ;; Registers used:
  7149 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7150 ;; Tracked objects:
  7151 ;;		On entry : 0/0
  7152 ;;		On exit  : 0/0
  7153 ;;		Unchanged: 0/0
  7154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7155 ;;      Params:         2       0       0       0       0
  7156 ;;      Locals:         0       0       0       0       0
  7157 ;;      Temps:          0       0       0       0       0
  7158 ;;      Totals:         2       0       0       0       0
  7159 ;;Total ram usage:        2 bytes
  7160 ;; Hardware stack levels used:    1
  7161 ;; Hardware stack levels required when called:    1
  7162 ;; This function calls:
  7163 ;;		__NOP
  7164 ;; This function is called by:
  7165 ;;		_OUTFQ
  7166 ;;		_RFDOUT
  7167 ;;		_OPINIT
  7168 ;; This function uses a non-reentrant model
  7169 ;;
  7170                           
  7171                           
  7172                           ;psect for function _STBOUT
  7173  095E                     _STBOUT:	
  7174                           
  7175                           ;FMCW.c: 108: if(fmcwtxrx == 1)
  7176                           
  7177                           ;incstack = 0
  7178                           ; Regs used in _STBOUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7179  095E  0372               	decf	STBOUT@fmcwtxrx,w
  7180  095F  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7181  0960  1D03               	btfss	3,2
  7182  0961  296D               	goto	l2581
  7183                           
  7184                           ;FMCW.c: 109: {
  7185                           ;FMCW.c: 110: PORTEbits.RE0 = 1;
  7186  0962  1283               	bcf	3,5	;RP0=0, select bank0
  7187  0963  1303               	bcf	3,6	;RP1=0, select bank0
  7188  0964  1409               	bsf	9,0	;volatile
  7189                           
  7190                           ;FMCW.c: 111: _NOP();
  7191  0965  120A  158A  2038  120A  158A  	fcall	__NOP
  7192                           
  7193                           ;FMCW.c: 112: PORTEbits.RE0 = 0;
  7194  096A  1283               	bcf	3,5	;RP0=0, select bank0
  7195  096B  1303               	bcf	3,6	;RP1=0, select bank0
  7196  096C  1009               	bcf	9,0	;volatile
  7197  096D                     l2581:	
  7198                           
  7199                           ;FMCW.c: 113: }
  7200                           ;FMCW.c: 114: if(fmcwtxrx == 2)
  7201  096D  3002               	movlw	2
  7202  096E  0672               	xorwf	STBOUT@fmcwtxrx,w
  7203  096F  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7204  0970  1D03               	btfss	3,2
  7205  0971  297D               	goto	l2589
  7206                           
  7207                           ;FMCW.c: 115: {
  7208                           ;FMCW.c: 116: PORTDbits.RD0 = 1;
  7209  0972  1283               	bcf	3,5	;RP0=0, select bank0
  7210  0973  1303               	bcf	3,6	;RP1=0, select bank0
  7211  0974  1408               	bsf	8,0	;volatile
  7212                           
  7213                           ;FMCW.c: 117: _NOP();
  7214  0975  120A  158A  2038  120A  158A  	fcall	__NOP
  7215                           
  7216                           ;FMCW.c: 118: PORTDbits.RD0 = 0;
  7217  097A  1283               	bcf	3,5	;RP0=0, select bank0
  7218  097B  1303               	bcf	3,6	;RP1=0, select bank0
  7219  097C  1008               	bcf	8,0	;volatile
  7220  097D                     l2589:	
  7221                           
  7222                           ;FMCW.c: 119: }
  7223                           ;FMCW.c: 120: if(fmcwtxrx == 3)
  7224  097D  3003               	movlw	3
  7225  097E  0672               	xorwf	STBOUT@fmcwtxrx,w
  7226  097F  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7227  0980  1D03               	btfss	3,2
  7228  0981  0008               	return
  7229                           
  7230                           ;FMCW.c: 121: {
  7231                           ;FMCW.c: 122: PORTBbits.RB0 = 1;
  7232  0982  1283               	bcf	3,5	;RP0=0, select bank0
  7233  0983  1303               	bcf	3,6	;RP1=0, select bank0
  7234  0984  1406               	bsf	6,0	;volatile
  7235                           
  7236                           ;FMCW.c: 123: _NOP();
  7237  0985  120A  158A  2038   	fcall	__NOP
  7238                           
  7239                           ;FMCW.c: 124: PORTBbits.RB0 = 0;
  7240  0988  1283               	bcf	3,5	;RP0=0, select bank0
  7241  0989  1303               	bcf	3,6	;RP1=0, select bank0
  7242  098A  1006               	bcf	6,0	;volatile
  7243  098B  0008               	return
  7244  098C                     __end_of_STBOUT:	
  7245                           
  7246                           	psect	text27
  7247  0A40                     __ptext27:	
  7248 ;; *************** function _L_OUT *****************
  7249 ;; Defined at:
  7250 ;;		line 40 in file "FMCW.c"
  7251 ;; Parameters:    Size  Location     Type
  7252 ;;  fmcwtxrx        2    2[COMMON] int 
  7253 ;; Auto vars:     Size  Location     Type
  7254 ;;		None
  7255 ;; Return value:  Size  Location     Type
  7256 ;;                  1    wreg      void 
  7257 ;; Registers used:
  7258 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7259 ;; Tracked objects:
  7260 ;;		On entry : 0/0
  7261 ;;		On exit  : 0/0
  7262 ;;		Unchanged: 0/0
  7263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7264 ;;      Params:         2       0       0       0       0
  7265 ;;      Locals:         0       0       0       0       0
  7266 ;;      Temps:          0       0       0       0       0
  7267 ;;      Totals:         2       0       0       0       0
  7268 ;;Total ram usage:        2 bytes
  7269 ;; Hardware stack levels used:    1
  7270 ;; Hardware stack levels required when called:    1
  7271 ;; This function calls:
  7272 ;;		__NOP
  7273 ;; This function is called by:
  7274 ;;		_OUTFQ
  7275 ;;		_RFDOUT
  7276 ;;		_OPINIT
  7277 ;; This function uses a non-reentrant model
  7278 ;;
  7279                           
  7280                           
  7281                           ;psect for function _L_OUT
  7282  0A40                     _L_OUT:	
  7283                           
  7284                           ;FMCW.c: 41: if(fmcwtxrx == 1)
  7285                           
  7286                           ;incstack = 0
  7287                           ; Regs used in _L_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7288  0A40  0372               	decf	L_OUT@fmcwtxrx,w
  7289  0A41  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7290  0A42  1D03               	btfss	3,2
  7291  0A43  2A57               	goto	l2523
  7292                           
  7293                           ;FMCW.c: 42: {
  7294                           ;FMCW.c: 43: PORTEbits.RE1 = 0;
  7295  0A44  1283               	bcf	3,5	;RP0=0, select bank0
  7296  0A45  1303               	bcf	3,6	;RP1=0, select bank0
  7297  0A46  1089               	bcf	9,1	;volatile
  7298                           
  7299                           ;FMCW.c: 44: _NOP();
  7300  0A47  120A  158A  2038  120A  158A  	fcall	__NOP
  7301                           
  7302                           ;FMCW.c: 45: PORTEbits.RE2 = 1;
  7303  0A4C  1283               	bcf	3,5	;RP0=0, select bank0
  7304  0A4D  1303               	bcf	3,6	;RP1=0, select bank0
  7305  0A4E  1509               	bsf	9,2	;volatile
  7306                           
  7307                           ;FMCW.c: 46: _NOP();
  7308  0A4F  120A  158A  2038  120A  158A  	fcall	__NOP
  7309                           
  7310                           ;FMCW.c: 47: PORTEbits.RE2 = 0;
  7311  0A54  1283               	bcf	3,5	;RP0=0, select bank0
  7312  0A55  1303               	bcf	3,6	;RP1=0, select bank0
  7313  0A56  1109               	bcf	9,2	;volatile
  7314  0A57                     l2523:	
  7315                           
  7316                           ;FMCW.c: 48: }
  7317                           ;FMCW.c: 49: if(fmcwtxrx == 2)
  7318  0A57  3002               	movlw	2
  7319  0A58  0672               	xorwf	L_OUT@fmcwtxrx,w
  7320  0A59  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7321  0A5A  1D03               	btfss	3,2
  7322  0A5B  2A6F               	goto	l2533
  7323                           
  7324                           ;FMCW.c: 50: {
  7325                           ;FMCW.c: 51: PORTDbits.RD1 = 0;
  7326  0A5C  1283               	bcf	3,5	;RP0=0, select bank0
  7327  0A5D  1303               	bcf	3,6	;RP1=0, select bank0
  7328  0A5E  1088               	bcf	8,1	;volatile
  7329                           
  7330                           ;FMCW.c: 52: _NOP();
  7331  0A5F  120A  158A  2038  120A  158A  	fcall	__NOP
  7332                           
  7333                           ;FMCW.c: 53: PORTDbits.RD2 = 1;
  7334  0A64  1283               	bcf	3,5	;RP0=0, select bank0
  7335  0A65  1303               	bcf	3,6	;RP1=0, select bank0
  7336  0A66  1508               	bsf	8,2	;volatile
  7337                           
  7338                           ;FMCW.c: 54: _NOP();
  7339  0A67  120A  158A  2038  120A  158A  	fcall	__NOP
  7340                           
  7341                           ;FMCW.c: 55: PORTDbits.RD2 = 0;
  7342  0A6C  1283               	bcf	3,5	;RP0=0, select bank0
  7343  0A6D  1303               	bcf	3,6	;RP1=0, select bank0
  7344  0A6E  1108               	bcf	8,2	;volatile
  7345  0A6F                     l2533:	
  7346                           
  7347                           ;FMCW.c: 56: }
  7348                           ;FMCW.c: 57: if(fmcwtxrx == 3)
  7349  0A6F  3003               	movlw	3
  7350  0A70  0672               	xorwf	L_OUT@fmcwtxrx,w
  7351  0A71  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7352  0A72  1D03               	btfss	3,2
  7353  0A73  0008               	return
  7354                           
  7355                           ;FMCW.c: 58: {
  7356                           ;FMCW.c: 59: PORTAbits.RA3 = 0;
  7357  0A74  1283               	bcf	3,5	;RP0=0, select bank0
  7358  0A75  1303               	bcf	3,6	;RP1=0, select bank0
  7359  0A76  1185               	bcf	5,3	;volatile
  7360                           
  7361                           ;FMCW.c: 60: _NOP();
  7362  0A77  120A  158A  2038  120A  158A  	fcall	__NOP
  7363                           
  7364                           ;FMCW.c: 61: PORTAbits.RA2 = 1;
  7365  0A7C  1283               	bcf	3,5	;RP0=0, select bank0
  7366  0A7D  1303               	bcf	3,6	;RP1=0, select bank0
  7367  0A7E  1505               	bsf	5,2	;volatile
  7368                           
  7369                           ;FMCW.c: 62: _NOP();
  7370  0A7F  120A  158A  2038   	fcall	__NOP
  7371                           
  7372                           ;FMCW.c: 63: PORTAbits.RA2 = 0;
  7373  0A82  1283               	bcf	3,5	;RP0=0, select bank0
  7374  0A83  1303               	bcf	3,6	;RP1=0, select bank0
  7375  0A84  1105               	bcf	5,2	;volatile
  7376  0A85  0008               	return
  7377  0A86                     __end_of_L_OUT:	
  7378                           
  7379                           	psect	text28
  7380  09FA                     __ptext28:	
  7381 ;; *************** function _H_OUT *****************
  7382 ;; Defined at:
  7383 ;;		line 74 in file "FMCW.c"
  7384 ;; Parameters:    Size  Location     Type
  7385 ;;  fmcwtxrx        2    2[COMMON] int 
  7386 ;; Auto vars:     Size  Location     Type
  7387 ;;		None
  7388 ;; Return value:  Size  Location     Type
  7389 ;;                  1    wreg      void 
  7390 ;; Registers used:
  7391 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7392 ;; Tracked objects:
  7393 ;;		On entry : 0/0
  7394 ;;		On exit  : 0/0
  7395 ;;		Unchanged: 0/0
  7396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7397 ;;      Params:         2       0       0       0       0
  7398 ;;      Locals:         0       0       0       0       0
  7399 ;;      Temps:          0       0       0       0       0
  7400 ;;      Totals:         2       0       0       0       0
  7401 ;;Total ram usage:        2 bytes
  7402 ;; Hardware stack levels used:    1
  7403 ;; Hardware stack levels required when called:    1
  7404 ;; This function calls:
  7405 ;;		__NOP
  7406 ;; This function is called by:
  7407 ;;		_OUTFQ
  7408 ;;		_RFDOUT
  7409 ;;		_OPINIT
  7410 ;; This function uses a non-reentrant model
  7411 ;;
  7412                           
  7413                           
  7414                           ;psect for function _H_OUT
  7415  09FA                     _H_OUT:	
  7416                           
  7417                           ;FMCW.c: 75: if(fmcwtxrx == 1)
  7418                           
  7419                           ;incstack = 0
  7420                           ; Regs used in _H_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7421  09FA  0372               	decf	H_OUT@fmcwtxrx,w
  7422  09FB  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7423  09FC  1D03               	btfss	3,2
  7424  09FD  2A11               	goto	l2553
  7425                           
  7426                           ;FMCW.c: 76: {
  7427                           ;FMCW.c: 77: PORTEbits.RE1 = 1;
  7428  09FE  1283               	bcf	3,5	;RP0=0, select bank0
  7429  09FF  1303               	bcf	3,6	;RP1=0, select bank0
  7430  0A00  1489               	bsf	9,1	;volatile
  7431                           
  7432                           ;FMCW.c: 78: _NOP();
  7433  0A01  120A  158A  2038  120A  158A  	fcall	__NOP
  7434                           
  7435                           ;FMCW.c: 79: PORTEbits.RE2 = 1;
  7436  0A06  1283               	bcf	3,5	;RP0=0, select bank0
  7437  0A07  1303               	bcf	3,6	;RP1=0, select bank0
  7438  0A08  1509               	bsf	9,2	;volatile
  7439                           
  7440                           ;FMCW.c: 80: _NOP();
  7441  0A09  120A  158A  2038  120A  158A  	fcall	__NOP
  7442                           
  7443                           ;FMCW.c: 81: PORTEbits.RE2 = 0;
  7444  0A0E  1283               	bcf	3,5	;RP0=0, select bank0
  7445  0A0F  1303               	bcf	3,6	;RP1=0, select bank0
  7446  0A10  1109               	bcf	9,2	;volatile
  7447  0A11                     l2553:	
  7448                           
  7449                           ;FMCW.c: 82: }
  7450                           ;FMCW.c: 83: if(fmcwtxrx == 2)
  7451  0A11  3002               	movlw	2
  7452  0A12  0672               	xorwf	H_OUT@fmcwtxrx,w
  7453  0A13  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7454  0A14  1D03               	btfss	3,2
  7455  0A15  2A29               	goto	l2563
  7456                           
  7457                           ;FMCW.c: 84: {
  7458                           ;FMCW.c: 85: PORTDbits.RD1 = 1;
  7459  0A16  1283               	bcf	3,5	;RP0=0, select bank0
  7460  0A17  1303               	bcf	3,6	;RP1=0, select bank0
  7461  0A18  1488               	bsf	8,1	;volatile
  7462                           
  7463                           ;FMCW.c: 86: _NOP();
  7464  0A19  120A  158A  2038  120A  158A  	fcall	__NOP
  7465                           
  7466                           ;FMCW.c: 87: PORTDbits.RD2 = 1;
  7467  0A1E  1283               	bcf	3,5	;RP0=0, select bank0
  7468  0A1F  1303               	bcf	3,6	;RP1=0, select bank0
  7469  0A20  1508               	bsf	8,2	;volatile
  7470                           
  7471                           ;FMCW.c: 88: _NOP();
  7472  0A21  120A  158A  2038  120A  158A  	fcall	__NOP
  7473                           
  7474                           ;FMCW.c: 89: PORTDbits.RD2 = 0;
  7475  0A26  1283               	bcf	3,5	;RP0=0, select bank0
  7476  0A27  1303               	bcf	3,6	;RP1=0, select bank0
  7477  0A28  1108               	bcf	8,2	;volatile
  7478  0A29                     l2563:	
  7479                           
  7480                           ;FMCW.c: 90: }
  7481                           ;FMCW.c: 91: if(fmcwtxrx == 3)
  7482  0A29  3003               	movlw	3
  7483  0A2A  0672               	xorwf	H_OUT@fmcwtxrx,w
  7484  0A2B  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7485  0A2C  1D03               	btfss	3,2
  7486  0A2D  0008               	return
  7487                           
  7488                           ;FMCW.c: 92: {
  7489                           ;FMCW.c: 93: PORTAbits.RA3 = 1;
  7490  0A2E  1283               	bcf	3,5	;RP0=0, select bank0
  7491  0A2F  1303               	bcf	3,6	;RP1=0, select bank0
  7492  0A30  1585               	bsf	5,3	;volatile
  7493                           
  7494                           ;FMCW.c: 94: _NOP();
  7495  0A31  120A  158A  2038  120A  158A  	fcall	__NOP
  7496                           
  7497                           ;FMCW.c: 95: PORTAbits.RA2 = 1;
  7498  0A36  1283               	bcf	3,5	;RP0=0, select bank0
  7499  0A37  1303               	bcf	3,6	;RP1=0, select bank0
  7500  0A38  1505               	bsf	5,2	;volatile
  7501                           
  7502                           ;FMCW.c: 96: _NOP();
  7503  0A39  120A  158A  2038   	fcall	__NOP
  7504                           
  7505                           ;FMCW.c: 97: PORTAbits.RA2 = 0;
  7506  0A3C  1283               	bcf	3,5	;RP0=0, select bank0
  7507  0A3D  1303               	bcf	3,6	;RP1=0, select bank0
  7508  0A3E  1105               	bcf	5,2	;volatile
  7509  0A3F  0008               	return
  7510  0A40                     __end_of_H_OUT:	
  7511                           
  7512                           	psect	text29
  7513  0838                     __ptext29:	
  7514 ;; *************** function __NOP *****************
  7515 ;; Defined at:
  7516 ;;		line 349 in file "FMCW.c"
  7517 ;; Parameters:    Size  Location     Type
  7518 ;;		None
  7519 ;; Auto vars:     Size  Location     Type
  7520 ;;  i               2    0[COMMON] int 
  7521 ;; Return value:  Size  Location     Type
  7522 ;;                  1    wreg      void 
  7523 ;; Registers used:
  7524 ;;		wreg, status,2, btemp+1
  7525 ;; Tracked objects:
  7526 ;;		On entry : 0/0
  7527 ;;		On exit  : 0/0
  7528 ;;		Unchanged: 0/0
  7529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7530 ;;      Params:         0       0       0       0       0
  7531 ;;      Locals:         2       0       0       0       0
  7532 ;;      Temps:          0       0       0       0       0
  7533 ;;      Totals:         2       0       0       0       0
  7534 ;;Total ram usage:        2 bytes
  7535 ;; Hardware stack levels used:    1
  7536 ;; This function calls:
  7537 ;;		Nothing
  7538 ;; This function is called by:
  7539 ;;		_L_OUT
  7540 ;;		_H_OUT
  7541 ;;		_STBOUT
  7542 ;; This function uses a non-reentrant model
  7543 ;;
  7544                           
  7545                           
  7546                           ;psect for function __NOP
  7547  0838                     __NOP:	
  7548                           
  7549                           ;FMCW.c: 350: for(int i=0; i<5; i++){
  7550                           
  7551                           ;incstack = 0
  7552                           ; Regs used in __NOP: [wreg+status,2+btemp+1]
  7553  0838  01F0               	clrf	__NOP@i
  7554  0839  01F1               	clrf	__NOP@i+1
  7555  083A                     L9:	
  7556  083A  0871               	movf	__NOP@i+1,w
  7557  083B  3A80               	xorlw	128
  7558  083C  00FF               	movwf	127
  7559  083D  3080               	movlw	128
  7560  083E  027F               	subwf	127,w
  7561  083F  1D03               	skipz
  7562  0840  2843               	goto	u1815
  7563  0841  3005               	movlw	5
  7564  0842  0270               	subwf	__NOP@i,w
  7565  0843                     u1815:	
  7566  0843  1803               	btfsc	3,0
  7567  0844  0008               	return
  7568                           
  7569                           ;FMCW.c: 351: __nop();
  7570  0845  0000               	nop
  7571  0846  3001               	movlw	1
  7572  0847  07F0               	addwf	__NOP@i,f
  7573  0848  1803               	skipnc
  7574  0849  0AF1               	incf	__NOP@i+1,f
  7575  084A  3000               	movlw	0
  7576  084B  07F1               	addwf	__NOP@i+1,f
  7577  084C  283A               	goto	L9
  7578  084D                     __end_of__NOP:	
  7579  007E                     btemp	set	126	;btemp
  7580  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    2
    Data        91
    BSS         107
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      80
    BANK1            80     33      72
    BANK3            96      0      92
    BANK2            96      0      57

Pointer List with Targets:

    FMRX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), FMRX_Nprg(BANK3[10]), 

    CWTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@CWTX_Nprg(BANK1[10]), CWTX_Nprg(BANK1[10]), 

    FMTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    OUTFQ@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), main@CWTX_Nprg(BANK1[10]), main@FMTX_Nprg(BANK1[10]), 
		 -> FMRX_Nprg(BANK3[10]), CWTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    EEPROM_Write@data	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 

    main@dData	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 

    sp__ReceivePacket_data	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 


Critical Paths under _main in COMMON

    _TXOBC_waddress->_putch
    _ReceivePacket_data->_fcscheck
    _ReceivePacket_data->_waitFlag
    _waitFlag->_getbit
    _getdata->_getbit
    _NM_waddress->_putch
    _Init_I2C_M->___lldiv
    _FMTX->_OUTFQ
    _FMTX->_RFDOUT
    _FMRX->_OUTFQ
    _FMRX->_RFDOUT
    _EEPROM_Write->_I2C_Master_Write
    _CWTX->_OUTFQ
    _CWTX->_RFDOUT
    _RFDOUT->___awdiv
    _OUTFQ->___awdiv
    _OPINIT->_H_OUT
    _OPINIT->_L_OUT
    _OPINIT->_STBOUT
    _STBOUT->__NOP
    _L_OUT->__NOP
    _H_OUT->__NOP

Critical Paths under _main in BANK0

    _main->_CWTX
    _main->_FMRX
    _main->_FMTX
    _ReceivePacket_data->_waitFlag
    _FMTX->_OUTFQ
    _FMRX->_OUTFQ
    _CWTX->_OUTFQ

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0   33012
                                             66 BANK0      4     4      0
                                              0 BANK1     33    33      0
                               _CWTX
                       _EEPROM_Write
                               _FMRX
                               _FMTX
                         _Init_I2C_M
                           _Init_MPU
                        _Init_SERIAL
                        _NM_waddress
                 _ReceivePacket_data
                          _Reset_EPS
                     _TXOBC_waddress
 ---------------------------------------------------------------------------------
 (1) _TXOBC_waddress                                       5     3      2     194
                                              1 COMMON     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _Reset_EPS                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ReceivePacket_data                                   6     6      0    2691
                                             10 COMMON     2     2      0
                                             29 BANK0      4     4      0
                           _fcscheck
                            _getdata
                           _waitFlag
 ---------------------------------------------------------------------------------
 (2) _waitFlag                                            33    33      0    2205
                                              6 COMMON     4     4      0
                                              0 BANK0     29    29      0
                             _getbit
 ---------------------------------------------------------------------------------
 (2) _getdata                                             10    10      0     212
                                              6 COMMON     2     2      0
                                              0 BANK0      7     7      0
                             _getbit
 ---------------------------------------------------------------------------------
 (3) _getbit                                               6     4      2      46
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _fcscheck                                            10     8      2     161
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (1) _NM_waddress                                          3     1      2     194
                                              1 COMMON     3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_SERIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_MPU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_I2C_M                                           8     4      4     343
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _FMTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _FMRX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         8     5      3     527
                                              2 COMMON     8     5      3
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     234
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CWTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (2) _RFDOUT                                              37    33      4    3231
                                              9 COMMON     4     0      4
                                              0 BANK0     33    33      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _OUTFQ                                               64    60      4    3853
                                              9 COMMON     4     0      4
                                              0 BANK0     60    60      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _OPINIT                                               2     0      2    2075
                                              4 COMMON     2     0      2
                              _H_OUT
                              _L_OUT
                             _STBOUT
 ---------------------------------------------------------------------------------
 (3) _STBOUT                                               2     0      2     271
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _L_OUT                                                2     0      2     801
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _H_OUT                                                2     0      2     536
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (4) __NOP                                                 2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CWTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _EEPROM_Write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _FMRX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _FMTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _Init_I2C_M
     ___lldiv
   _Init_MPU
   _Init_SERIAL
   _NM_waddress
     _putch
   _ReceivePacket_data
     _fcscheck
     _getdata
       _getbit
     _waitFlag
       _getbit
   _Reset_EPS
   _TXOBC_waddress
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      5C       9       95.8%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      39      11       59.4%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     21      48       7       90.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     46      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     13B      12        0.0%
ABS                  0      0     13B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Jun 28 18:36:05 2018

                             pc 0002                     __CFG_CP$OFF 0000                              l69 17E0  
                  ___awdiv@sign 0076                              fsr 0004                             l210 0566  
                           l442 0FF1                             l275 0091                             l443 0FDC  
                           l494 081D                             _RA1 0029                             _RB1 0031  
                           _RB2 0032                             _RB3 0033                             _RC2 003A  
                           _RB4 0034                             _RB5 0035                             _RC5 003D  
                           _PEN 048A                    __CFG_CPD$OFF 0000                             _SEN 0488  
                           _RX9 00C6                             _TX9 04C6                             fsr0 0004  
                           indf 0000                    __CFG_FOSC$HS 0000                    __CFG_LVP$OFF 0000  
                          l3001 0777                            l3005 0784                            l3023 07B0  
                          l3201 0D38                            l3041 0C12                            l3025 032F  
                          l3123 00BD                            l3141 00F7                            l3221 0D9A  
                          l3213 0D63                            l3045 0C20                            l3151 0160  
                          l3135 00E8                            l3231 0DC3                            l3207 0D54  
                          l2503 0AC0                            l3039 0C0F                            l3161 0205  
                          l3153 019D                            l3129 00D9                            l3073 0059  
                          l2505 0ACD                            l3049 0C2B                            l2523 0A57  
                          l2611 0AE7                            l3163 020C                            l3171 02A4  
                          l3235 0DDD                            l3227 0DA9                            l3251 0BA8  
                          l3059 0BEF                            l2533 0A6F                            l2621 0AEF  
                          l2605 0ADC                            l3181 02C6                            l3085 008A  
                          l3341 0C78                            l2623 0AFD                            l3167 0293  
                          l3175 02B7                            l3239 0DF0                            l3263 0BDD  
                          l3079 0076                            l3087 0038                            l2553 0A11  
                          l2633 0B1E                            l3185 02E0                            l3193 030D  
                          l3249 0B98                            l2721 040E                            l2705 03D3  
                          l2563 0A29                            l3259 0BD0                            l3099 00A9  
                          l2731 0429                            l3347 0CA0                            l3355 0CA6  
                          l2581 096D                            l2637 0B26                            l2629 0B13  
                          l3189 02FA                            l2901 062C                            l2813 0538  
                          l2709 03E0                            l2661 0355                            l3455 0B5B  
                          l2735 0436                            l2831 0564                            l3457 0B75  
                          l2913 065A                            l2809 052B                            l2761 048C  
                          l2681 0386                            l2923 0675                            l2851 0597  
                          l2747 0464                            l2667 035E                            l2659 0336  
                          l3731 0F0E                            l3707 0E97                            l2589 097D  
                          l2861 05AE                            l2837 056F                            l2773 04BA  
                          l2757 047F                            l2677 0379                            l2927 0682  
                          l2871 05C9                            l2847 058A                            l2783 04D5  
                          l2695 03B8                            l2953 06D8                            l3737 0F1F  
                          l2939 06B0                            l2875 05D6                            l2787 04E2  
                          l2965 0706                            l2949 06CB                            l3757 0FC4  
                          l2991 075C                            l2975 0721                            l2887 0604  
                          l2799 0510                            l2897 061F                            l2979 072E  
                          STR_1 080F                            STR_2 080F                            STR_3 080F  
                          STR_4 080F                            STR_5 080F                            STR_6 080F  
                          STR_7 0808                            STR_8 0808                            STR_9 0808  
                          _BRGH 04C2                            _CREN 00C4                            _FERR 00C2  
                          u2005 0AF2                            u2025 0AFE                            u2035 0B0A  
                          u2045 0B14                            u3005 0BAA                            u3015 0BBF  
                          u3025 0BD1                            u2305 04F7                            u2225 044B  
                          u2145 039F                            u3135 099E                            u2415 05EB  
                          u3055 0C76                            u2345 054D                            u2265 04A1  
                          u2185 03F5                            u3065 0C9E                            u1815 0843  
                          u2615 0799                            u2535 06ED                            u2455 0641  
                          _FMRX 0906                            u3450 0F3C                            u2715 0046  
                          u3507 0E12                            u3460 0F52                            _FMTX 0932  
                          u1845 0AB0                            u3517 0E3D                            u3470 0F68  
                          u2575 0743                            u2495 0697                            u3607 09C8  
                          u3527 0E8E                            u2905 0D52                            u3617 09D6  
                          u3537 0EAE                            u2835 02A2                            u2755 00BB  
                          u2915 0D61                            u3627 09E4                            u3547 0ECF  
                          u2845 02B5                            u2765 00D7                            u2925 0D98  
                          u3637 09F2                            u3557 0EED                            u2855 02C4  
                          u2775 00E6                            u2935 0DA7                            u3647 0011  
                          u3567 0F2C                            u2785 00F5                            u3657 0022  
                          u3577 0FBD                            u3667 0AB4                            u3587 0FE7  
                          _RCIE 0465                            _RCEN 048B                            _RCIF 0065  
                          _CWTX 08DA                            u2885 030B                            u2965 0DEE  
                          u3677 0B80                            u3597 0FF9                            u2895 0D36  
                          u2985 0B9C                            _OERR 00C1                            _TMR1 000E  
                          _SPEN 00C7                            _RSEN 0489                            _SREN 00C5  
                          _TXIE 0464                            _TXEN 04C5                            _TXIF 0064  
                          _SYNC 04C4                            __NOP 0838  TXOBC_waddress@TXOBC_wad_header 0075  
                  __CFG_WRT$OFF 0000                            _main 0E0A                     _NM_waddress 0826  
                 ??_Init_SERIAL 0070                            btemp 007E                    getbit@oldbit 00E6  
                   Init_I2C_M@c 0020                            start 0000    ReceivePacket_data@fcschecker 003D  
          __end_of_EEPROM_Write 0B88                           ?_FMRX 005C                           ?_FMTX 005C  
                         ?_CWTX 005C                ?_I2C_Master_Wait 0070                ?_I2C_Master_Stop 0070  
                         ?__NOP 0070                           ?_main 0070                           _ACKEN 048C  
                         _ACKDT 048D                 __end_of___awdiv 0B2B                           STR_10 0808  
                         STR_11 0808                           STR_12 0808                   __CFG_WDTE$OFF 0000  
               __end_of___lldiv 0BE6                 ___awdiv@divisor 0070         __size_of_TXOBC_waddress 003A  
               ___awdiv@counter 0075                           _RCREG 001A                           _SPBRG 0099  
                         _PORTA 0005                           _PORTB 0006                           _PORTC 0007  
                         _PORTD 0008                           _PORTE 0009                           _H_OUT 09FA  
                         _OUTFQ 00AC                           _TRISA 0085                           _TRISB 0086  
                         _TRISC 0087                           _TRISD 0088                           _TRISE 0089  
                         _L_OUT 0A40                           _TXREG 0019                   __CFG_PWRTE$ON 0000  
                         _dData 0110                 __end_of_getdata 0C47                           _eflag 0066  
                 getdata@dstuff 0022                           _putch 17DF                  __CFG_BOREN$OFF 0000  
                         pclath 000A                           status 0003                           wtemp0 007E  
                    _Init_I2C_M 098C                EEPROM_Write@data 0074      __end_of_ReceivePacket_data 0CAC  
                  __end_of_FMRX 0932                    __end_of_FMTX 095E                    __end_of_CWTX 0906  
                  __end_of__NOP 084D                 __initialization 07B3                    __end_of_main 1000  
           __end_of_Init_SERIAL 087F                __end_of_Init_MPU 0866                          ??_FMRX 007D  
                        ??_FMTX 007D                          ??_CWTX 007D                          ??__NOP 0070  
                        ??_main 0062                          ?_H_OUT 0072        EEPROM_Write@high_address 0072  
                        ?_OUTFQ 0079                          ?_L_OUT 0072               ?_I2C_Master_Start 0070  
             ?_I2C_Master_Write 0070                          OUTFQ@i 0056              ??_I2C_Master_Start 0070  
                        OUTFQ@j 005A              ??_I2C_Master_Write 0072                ___awdiv@dividend 0072  
                    _eDataField 0130                          ?_putch 0070                          _RFDOUT 0D29  
                        _OPINIT 0CAC                          _SSPADD 0093                          _STBOUT 095E  
                        _STATUS 0003                          _SSPCON 0014                          _SSPBUF 0013  
                        __NOP@i 0070                __end_of_fcscheck 00AC                       ??___awdiv 0074  
                        _dfcshi 006F                       ??___lldiv 0078                          _dfcslo 006E  
                        _efcshi 006C                          _efcslo 006D                          _getbit 0A86  
            __size_of_Reset_EPS 0023                          _estuff 00E2                ___awdiv@quotient 0077  
                    _dPacketnum 0068                       ??_getdata 0076                     RFDOUT@i_487 003B  
                   RFDOUT@i_488 003F                __end_of_waitFlag 07B3      EEPROM_Write@EEPROM_address 0078  
       __end_of__initialization 07FC         EEPROM_Write@low_address 0073                     ?_Init_I2C_M 0020  
                   _Init_SERIAL 0866           __size_of_EEPROM_Write 005D                   __end_of_H_OUT 0A40  
                 __end_of_OUTFQ 0327                   __end_of_L_OUT 0A86                   L_OUT@fmcwtxrx 0072  
                __pcstackCOMMON 0070                    __pidataBANK1 0898                    __pidataBANK2 087F  
                  __pidataBANK3 08B2                   __end_of_putch 17E7                  _TXOBC_waddress 09C0  
                       ??_H_OUT 0074                         ??_OUTFQ 0020                         ??_L_OUT 0074  
                       ??_putch 0070                    _EEPROM_Write 0B2B                      __pbssBANK0 0066  
                    __pbssBANK1 00DB                      __pbssBANK2 0110                      __pbssBANK3 0190  
             __end_of_Reset_EPS 002A                       ?_Init_MPU 0070                         ?_RFDOUT 0079  
                       ?_OPINIT 0074                    ?_NM_waddress 0071                         ?_STBOUT 0072  
                       RFDOUT@i 003D                      __pmaintext 0E0A                      _ebitstatus 00E0  
                       ?_getbit 0070          __end_of_TXOBC_waddress 09FA     TXOBC_waddress@whigh_address 0071  
           __size_of_Init_I2C_M 0034                       OUTFQ@Nprg 007B                       ?_fcscheck 0070  
                       _SSPCON2 0091                         _SSPSTAT 0094                      __stringtab 0800  
                    ??_Init_MPU 0070                 __size_of_RFDOUT 00E1                 __size_of_OPINIT 007D  
               __size_of_STBOUT 002E                       ?_waitFlag 0070                         _dPacket 0190  
                       _ePacket 00DB                         ___awdiv 0AD2                         ___lldiv 0B88  
               __size_of_getbit 004C                     waitFlag@buf 003C                 ?_TXOBC_waddress 0071  
                       __ptext1 09C0                         __ptext2 0007                         __ptext3 0C47  
                       __ptext4 0327                         __ptext5 0BE6                         __ptext6 0A86  
                       __ptext7 002A                         __ptext8 0826                         __ptext9 17DF  
                       _getdata 0BE6              _ReceivePacket_data 0C47                       _T1CONbits 0010  
      __size_of_I2C_Master_Wait 0009        __size_of_I2C_Master_Stop 0007                      ??_fcscheck 0072  
           ?_ReceivePacket_data 0070                         getbit@i 0074                         clrloop0 17E8  
          end_of_initialization 07FC                    RFDOUT@Nref_b 0023                       _FMRX_Nref 00C1  
                     _FMRX_Nprg 01E2                       _FMTX_Nref 00C5                       _FMTX_Nprg 00D1  
                     _CWTX_Nref 00C3                       _CWTX_Nprg 00C7                     OUTFQ@Nprg_b 0030  
     __size_of_I2C_Master_Start 0007       __size_of_I2C_Master_Write 0008                 ___lldiv@divisor 0070  
               ___lldiv@counter 007D                      ??_waitFlag 0076            ??_ReceivePacket_data 007A  
                    fcscheck@bt 0074                  OPINIT@fmcwtxrx 0074                       _PORTAbits 0005  
                     _PORTBbits 0006                       _PORTCbits 0007                       _PORTDbits 0008  
                     _PORTEbits 0009                      getdata@buf 0026                    ??_Init_I2C_M 0024  
                  ?_Init_SERIAL 0070                  __end_of_RFDOUT 0E0A                  __end_of_OPINIT 0D29  
                __end_of_STBOUT 098C            __size_of_NM_waddress 0012                  __end_of_getbit 0AD2  
    TXOBC_waddress@wlow_address 0072             start_initialization 07B3              __end_of_Init_I2C_M 09C0  
                      ??_RFDOUT 0020                        ??_OPINIT 0076               ??_I2C_Master_Wait 0070  
             ??_I2C_Master_Stop 0070                        ??_STBOUT 0074               __size_of_Init_MPU 0019  
                     _Reset_EPS 0007               getdata@dbitstatus 0024                      init_fetch0 17EF  
                      ??_getbit 0072                     __pdataBANK1 00C1                     __pdataBANK2 0130  
                   __pdataBANK3 01C4                      RFDOUT@Nref 007B             __end_of_commandSize 0808  
      NM_waddress@whigh_address 0071                       ___latbits 0002                   __pcstackBANK0 0020  
                 __pcstackBANK1 00A0                        FMRX@Nref 005C                        FMRX@Nprg 005E  
                      FMTX@Nref 005C                        FMTX@Nprg 005E                        FMRX@fmrx 0060  
                      FMTX@fmtx 0060                        CWTX@Nref 005C                        CWTX@Nprg 005E  
             __size_of_fcscheck 0082                   waitFlag@j_120 0028                   waitFlag@j_122 002A  
                 waitFlag@j_131 0034                   waitFlag@j_124 002C                   waitFlag@j_116 0024  
                 waitFlag@j_133 0036                   waitFlag@j_125 002E                   waitFlag@j_118 0026  
                 waitFlag@j_135 0038                   waitFlag@j_127 0030                   waitFlag@j_129 0032  
                      CWTX@cwtx 0060                _I2C_Master_Start 17D0                      ?_Reset_EPS 0070  
              _I2C_Master_Write 17D7                ??_TXOBC_waddress 0073         getdata@bufstore_counter 0020  
                      ?___awdiv 0070                        ?___lldiv 0070               __size_of_waitFlag 048C  
                     __pstrings 0800                        ?_getdata 0070                  __size_of_H_OUT 0046  
                __size_of_OUTFQ 027B                  __size_of_L_OUT 0046                  __size_of_putch 0008  
                 H_OUT@fmcwtxrx 0072                       clear_ram0 17E7                        _PIE1bits 008C  
                    OUTFQ@i_476 0052                      OUTFQ@i_478 0058                       _rcv_state 006A  
          __size_of_Init_SERIAL 0019                        _PIR1bits 000C                      OUTFQ@count 0054  
                   _commandSize 0806                       fcscheck@i 0075                       main@F1461 01D8  
                     main@F1463 01CE                       main@F1465 01C4                     __stringbase 0805  
                     main@dData 00C0                        _Init_MPU 084D                     ??_Reset_EPS 0070  
                 fcscheck@i_147 0077     __size_of_ReceivePacket_data 0065                __size_of___awdiv 0059  
              __size_of___lldiv 005E              __end_of__stringtab 0806                __size_of_getdata 0061  
               _I2C_Master_Wait 081D                 _I2C_Master_Stop 0816                  RFDOUT@fmcwtxrx 0079  
                      _efcsflag 00E4                        _fcscheck 002A                        __ptext10 0866  
                      __ptext11 084D                        __ptext20 081D                        __ptext12 098C  
                      __ptext21 08DA                        __ptext13 0B88                        __ptext22 0D29  
                      __ptext14 0932                        __ptext23 00AC                        __ptext15 0906  
                      __ptext24 0AD2                        __ptext16 0B2B                        __ptext25 0CAC  
                      __ptext17 17D7                        __ptext26 095E                        __ptext18 0816  
                      __ptext27 0A40                        __ptext19 17D0                        __ptext28 09FA  
                      __ptext29 0838                   ?_EEPROM_Write 0072                   __size_of_FMRX 002C  
                 __size_of_FMTX 002C                   __size_of_CWTX 002C                   __size_of__NOP 0015  
                 ??_NM_waddress 0073                       waitFlag@i 0020                       waitFlag@j 0022  
                 __size_of_main 01F6                  STBOUT@fmcwtxrx 0072                        _waitFlag 0327  
      NM_waddress@NM_wad_header 0073                   OUTFQ@fmcwtxrx 0079        __end_of_I2C_Master_Start 17D7  
                     putch@byte 0070        __end_of_I2C_Master_Write 17DF                      _INTCONbits 000B  
                      init_ram0 17F3                    fcscheck@byte 0079                  ??_EEPROM_Write 0075  
            waitFlag@flag_judge 003A                ___lldiv@dividend 0074                       stringcode 0800  
                 main@FMRX_Nprg 00B4               main@NM_wad_header 00BF                   main@FMTX_Nprg 00A0  
           __end_of_NM_waddress 0838                   main@CWTX_Nprg 00AA         __end_of_I2C_Master_Wait 0826  
       __end_of_I2C_Master_Stop 081D                ___lldiv@quotient 0079               I2C_Master_Write@d 0070  
           EEPROM_Write@Address 0079                        stringdir 0800                        stringtab 0800  
           ReceivePacket_data@i 003F         NM_waddress@wlow_address 0072            main@TXOBC_wad_header 00BE  
