

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Jan 18 10:35:28 2018

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	dabs	1,0x7E,2
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  008F                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  0105                     	;# 
   116  0107                     	;# 
   117  0108                     	;# 
   118  0109                     	;# 
   119  010C                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  0185                     	;# 
   125  0187                     	;# 
   126  0188                     	;# 
   127  0189                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  000E                     	;# 
   146  000F                     	;# 
   147  0010                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0013                     	;# 
   151  0014                     	;# 
   152  0015                     	;# 
   153  0015                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001B                     	;# 
   160  001B                     	;# 
   161  001C                     	;# 
   162  001D                     	;# 
   163  001E                     	;# 
   164  001F                     	;# 
   165  0081                     	;# 
   166  0085                     	;# 
   167  0086                     	;# 
   168  0087                     	;# 
   169  0088                     	;# 
   170  0089                     	;# 
   171  008C                     	;# 
   172  008D                     	;# 
   173  008E                     	;# 
   174  008F                     	;# 
   175  0090                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0094                     	;# 
   182  0095                     	;# 
   183  0096                     	;# 
   184  0097                     	;# 
   185  0098                     	;# 
   186  0099                     	;# 
   187  009A                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  0105                     	;# 
   194  0107                     	;# 
   195  0108                     	;# 
   196  0109                     	;# 
   197  010C                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  010F                     	;# 
   202  0185                     	;# 
   203  0187                     	;# 
   204  0188                     	;# 
   205  0189                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  0000                     	;# 
   209  0001                     	;# 
   210  0002                     	;# 
   211  0003                     	;# 
   212  0004                     	;# 
   213  0005                     	;# 
   214  0006                     	;# 
   215  0007                     	;# 
   216  0008                     	;# 
   217  0009                     	;# 
   218  000A                     	;# 
   219  000B                     	;# 
   220  000C                     	;# 
   221  000D                     	;# 
   222  000E                     	;# 
   223  000E                     	;# 
   224  000F                     	;# 
   225  0010                     	;# 
   226  0011                     	;# 
   227  0012                     	;# 
   228  0013                     	;# 
   229  0014                     	;# 
   230  0015                     	;# 
   231  0015                     	;# 
   232  0016                     	;# 
   233  0017                     	;# 
   234  0018                     	;# 
   235  0019                     	;# 
   236  001A                     	;# 
   237  001B                     	;# 
   238  001B                     	;# 
   239  001C                     	;# 
   240  001D                     	;# 
   241  001E                     	;# 
   242  001F                     	;# 
   243  0081                     	;# 
   244  0085                     	;# 
   245  0086                     	;# 
   246  0087                     	;# 
   247  0088                     	;# 
   248  0089                     	;# 
   249  008C                     	;# 
   250  008D                     	;# 
   251  008E                     	;# 
   252  008F                     	;# 
   253  0090                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0094                     	;# 
   260  0095                     	;# 
   261  0096                     	;# 
   262  0097                     	;# 
   263  0098                     	;# 
   264  0099                     	;# 
   265  009A                     	;# 
   266  009B                     	;# 
   267  009C                     	;# 
   268  009D                     	;# 
   269  009E                     	;# 
   270  009F                     	;# 
   271  0105                     	;# 
   272  0107                     	;# 
   273  0108                     	;# 
   274  0109                     	;# 
   275  010C                     	;# 
   276  010C                     	;# 
   277  010D                     	;# 
   278  010E                     	;# 
   279  010F                     	;# 
   280  0185                     	;# 
   281  0187                     	;# 
   282  0188                     	;# 
   283  0189                     	;# 
   284  018C                     	;# 
   285  018D                     	;# 
   286  0000                     	;# 
   287  0001                     	;# 
   288  0002                     	;# 
   289  0003                     	;# 
   290  0004                     	;# 
   291  0005                     	;# 
   292  0006                     	;# 
   293  0007                     	;# 
   294  0008                     	;# 
   295  0009                     	;# 
   296  000A                     	;# 
   297  000B                     	;# 
   298  000C                     	;# 
   299  000D                     	;# 
   300  000E                     	;# 
   301  000E                     	;# 
   302  000F                     	;# 
   303  0010                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0013                     	;# 
   307  0014                     	;# 
   308  0015                     	;# 
   309  0015                     	;# 
   310  0016                     	;# 
   311  0017                     	;# 
   312  0018                     	;# 
   313  0019                     	;# 
   314  001A                     	;# 
   315  001B                     	;# 
   316  001B                     	;# 
   317  001C                     	;# 
   318  001D                     	;# 
   319  001E                     	;# 
   320  001F                     	;# 
   321  0081                     	;# 
   322  0085                     	;# 
   323  0086                     	;# 
   324  0087                     	;# 
   325  0088                     	;# 
   326  0089                     	;# 
   327  008C                     	;# 
   328  008D                     	;# 
   329  008E                     	;# 
   330  008F                     	;# 
   331  0090                     	;# 
   332  0091                     	;# 
   333  0092                     	;# 
   334  0093                     	;# 
   335  0093                     	;# 
   336  0093                     	;# 
   337  0094                     	;# 
   338  0095                     	;# 
   339  0096                     	;# 
   340  0097                     	;# 
   341  0098                     	;# 
   342  0099                     	;# 
   343  009A                     	;# 
   344  009B                     	;# 
   345  009C                     	;# 
   346  009D                     	;# 
   347  009E                     	;# 
   348  009F                     	;# 
   349  0105                     	;# 
   350  0107                     	;# 
   351  0108                     	;# 
   352  0109                     	;# 
   353  010C                     	;# 
   354  010C                     	;# 
   355  010D                     	;# 
   356  010E                     	;# 
   357  010F                     	;# 
   358  0185                     	;# 
   359  0187                     	;# 
   360  0188                     	;# 
   361  0189                     	;# 
   362  018C                     	;# 
   363  018D                     	;# 
   364  0000                     	;# 
   365  0001                     	;# 
   366  0002                     	;# 
   367  0003                     	;# 
   368  0004                     	;# 
   369  0005                     	;# 
   370  0006                     	;# 
   371  0007                     	;# 
   372  0008                     	;# 
   373  0009                     	;# 
   374  000A                     	;# 
   375  000B                     	;# 
   376  000C                     	;# 
   377  000D                     	;# 
   378  000E                     	;# 
   379  000E                     	;# 
   380  000F                     	;# 
   381  0010                     	;# 
   382  0011                     	;# 
   383  0012                     	;# 
   384  0013                     	;# 
   385  0014                     	;# 
   386  0015                     	;# 
   387  0015                     	;# 
   388  0016                     	;# 
   389  0017                     	;# 
   390  0018                     	;# 
   391  0019                     	;# 
   392  001A                     	;# 
   393  001B                     	;# 
   394  001B                     	;# 
   395  001C                     	;# 
   396  001D                     	;# 
   397  001E                     	;# 
   398  001F                     	;# 
   399  0081                     	;# 
   400  0085                     	;# 
   401  0086                     	;# 
   402  0087                     	;# 
   403  0088                     	;# 
   404  0089                     	;# 
   405  008C                     	;# 
   406  008D                     	;# 
   407  008E                     	;# 
   408  008F                     	;# 
   409  0090                     	;# 
   410  0091                     	;# 
   411  0092                     	;# 
   412  0093                     	;# 
   413  0093                     	;# 
   414  0093                     	;# 
   415  0094                     	;# 
   416  0095                     	;# 
   417  0096                     	;# 
   418  0097                     	;# 
   419  0098                     	;# 
   420  0099                     	;# 
   421  009A                     	;# 
   422  009B                     	;# 
   423  009C                     	;# 
   424  009D                     	;# 
   425  009E                     	;# 
   426  009F                     	;# 
   427  0105                     	;# 
   428  0107                     	;# 
   429  0108                     	;# 
   430  0109                     	;# 
   431  010C                     	;# 
   432  010C                     	;# 
   433  010D                     	;# 
   434  010E                     	;# 
   435  010F                     	;# 
   436  0185                     	;# 
   437  0187                     	;# 
   438  0188                     	;# 
   439  0189                     	;# 
   440  018C                     	;# 
   441  018D                     	;# 
   442  0000                     	;# 
   443  0001                     	;# 
   444  0002                     	;# 
   445  0003                     	;# 
   446  0004                     	;# 
   447  0005                     	;# 
   448  0006                     	;# 
   449  0007                     	;# 
   450  0008                     	;# 
   451  0009                     	;# 
   452  000A                     	;# 
   453  000B                     	;# 
   454  000C                     	;# 
   455  000D                     	;# 
   456  000E                     	;# 
   457  000E                     	;# 
   458  000F                     	;# 
   459  0010                     	;# 
   460  0011                     	;# 
   461  0012                     	;# 
   462  0013                     	;# 
   463  0014                     	;# 
   464  0015                     	;# 
   465  0015                     	;# 
   466  0016                     	;# 
   467  0017                     	;# 
   468  0018                     	;# 
   469  0019                     	;# 
   470  001A                     	;# 
   471  001B                     	;# 
   472  001B                     	;# 
   473  001C                     	;# 
   474  001D                     	;# 
   475  001E                     	;# 
   476  001F                     	;# 
   477  0081                     	;# 
   478  0085                     	;# 
   479  0086                     	;# 
   480  0087                     	;# 
   481  0088                     	;# 
   482  0089                     	;# 
   483  008C                     	;# 
   484  008D                     	;# 
   485  008E                     	;# 
   486  008F                     	;# 
   487  0090                     	;# 
   488  0091                     	;# 
   489  0092                     	;# 
   490  0093                     	;# 
   491  0093                     	;# 
   492  0093                     	;# 
   493  0094                     	;# 
   494  0095                     	;# 
   495  0096                     	;# 
   496  0097                     	;# 
   497  0098                     	;# 
   498  0099                     	;# 
   499  009A                     	;# 
   500  009B                     	;# 
   501  009C                     	;# 
   502  009D                     	;# 
   503  009E                     	;# 
   504  009F                     	;# 
   505  0105                     	;# 
   506  0107                     	;# 
   507  0108                     	;# 
   508  0109                     	;# 
   509  010C                     	;# 
   510  010C                     	;# 
   511  010D                     	;# 
   512  010E                     	;# 
   513  010F                     	;# 
   514  0185                     	;# 
   515  0187                     	;# 
   516  0188                     	;# 
   517  0189                     	;# 
   518  018C                     	;# 
   519  018D                     	;# 
   520  0000                     	;# 
   521  0001                     	;# 
   522  0002                     	;# 
   523  0003                     	;# 
   524  0004                     	;# 
   525  0005                     	;# 
   526  0006                     	;# 
   527  0007                     	;# 
   528  0008                     	;# 
   529  0009                     	;# 
   530  000A                     	;# 
   531  000B                     	;# 
   532  000C                     	;# 
   533  000D                     	;# 
   534  000E                     	;# 
   535  000E                     	;# 
   536  000F                     	;# 
   537  0010                     	;# 
   538  0011                     	;# 
   539  0012                     	;# 
   540  0013                     	;# 
   541  0014                     	;# 
   542  0015                     	;# 
   543  0015                     	;# 
   544  0016                     	;# 
   545  0017                     	;# 
   546  0018                     	;# 
   547  0019                     	;# 
   548  001A                     	;# 
   549  001B                     	;# 
   550  001B                     	;# 
   551  001C                     	;# 
   552  001D                     	;# 
   553  001E                     	;# 
   554  001F                     	;# 
   555  0081                     	;# 
   556  0085                     	;# 
   557  0086                     	;# 
   558  0087                     	;# 
   559  0088                     	;# 
   560  0089                     	;# 
   561  008C                     	;# 
   562  008D                     	;# 
   563  008E                     	;# 
   564  008F                     	;# 
   565  0090                     	;# 
   566  0091                     	;# 
   567  0092                     	;# 
   568  0093                     	;# 
   569  0093                     	;# 
   570  0093                     	;# 
   571  0094                     	;# 
   572  0095                     	;# 
   573  0096                     	;# 
   574  0097                     	;# 
   575  0098                     	;# 
   576  0099                     	;# 
   577  009A                     	;# 
   578  009B                     	;# 
   579  009C                     	;# 
   580  009D                     	;# 
   581  009E                     	;# 
   582  009F                     	;# 
   583  0105                     	;# 
   584  0107                     	;# 
   585  0108                     	;# 
   586  0109                     	;# 
   587  010C                     	;# 
   588  010C                     	;# 
   589  010D                     	;# 
   590  010E                     	;# 
   591  010F                     	;# 
   592  0185                     	;# 
   593  0187                     	;# 
   594  0188                     	;# 
   595  0189                     	;# 
   596  018C                     	;# 
   597  018D                     	;# 
   598  0000                     	;# 
   599  0001                     	;# 
   600  0002                     	;# 
   601  0003                     	;# 
   602  0004                     	;# 
   603  0005                     	;# 
   604  0006                     	;# 
   605  0007                     	;# 
   606  0008                     	;# 
   607  0009                     	;# 
   608  000A                     	;# 
   609  000B                     	;# 
   610  000C                     	;# 
   611  000D                     	;# 
   612  000E                     	;# 
   613  000E                     	;# 
   614  000F                     	;# 
   615  0010                     	;# 
   616  0011                     	;# 
   617  0012                     	;# 
   618  0013                     	;# 
   619  0014                     	;# 
   620  0015                     	;# 
   621  0015                     	;# 
   622  0016                     	;# 
   623  0017                     	;# 
   624  0018                     	;# 
   625  0019                     	;# 
   626  001A                     	;# 
   627  001B                     	;# 
   628  001B                     	;# 
   629  001C                     	;# 
   630  001D                     	;# 
   631  001E                     	;# 
   632  001F                     	;# 
   633  0081                     	;# 
   634  0085                     	;# 
   635  0086                     	;# 
   636  0087                     	;# 
   637  0088                     	;# 
   638  0089                     	;# 
   639  008C                     	;# 
   640  008D                     	;# 
   641  008E                     	;# 
   642  008F                     	;# 
   643  0090                     	;# 
   644  0091                     	;# 
   645  0092                     	;# 
   646  0093                     	;# 
   647  0093                     	;# 
   648  0093                     	;# 
   649  0094                     	;# 
   650  0095                     	;# 
   651  0096                     	;# 
   652  0097                     	;# 
   653  0098                     	;# 
   654  0099                     	;# 
   655  009A                     	;# 
   656  009B                     	;# 
   657  009C                     	;# 
   658  009D                     	;# 
   659  009E                     	;# 
   660  009F                     	;# 
   661  0105                     	;# 
   662  0107                     	;# 
   663  0108                     	;# 
   664  0109                     	;# 
   665  010C                     	;# 
   666  010C                     	;# 
   667  010D                     	;# 
   668  010E                     	;# 
   669  010F                     	;# 
   670  0185                     	;# 
   671  0187                     	;# 
   672  0188                     	;# 
   673  0189                     	;# 
   674  018C                     	;# 
   675  018D                     	;# 
   676  0000                     	;# 
   677  0001                     	;# 
   678  0002                     	;# 
   679  0003                     	;# 
   680  0004                     	;# 
   681  0005                     	;# 
   682  0006                     	;# 
   683  0007                     	;# 
   684  0008                     	;# 
   685  0009                     	;# 
   686  000A                     	;# 
   687  000B                     	;# 
   688  000C                     	;# 
   689  000D                     	;# 
   690  000E                     	;# 
   691  000E                     	;# 
   692  000F                     	;# 
   693  0010                     	;# 
   694  0011                     	;# 
   695  0012                     	;# 
   696  0013                     	;# 
   697  0014                     	;# 
   698  0015                     	;# 
   699  0015                     	;# 
   700  0016                     	;# 
   701  0017                     	;# 
   702  0018                     	;# 
   703  0019                     	;# 
   704  001A                     	;# 
   705  001B                     	;# 
   706  001B                     	;# 
   707  001C                     	;# 
   708  001D                     	;# 
   709  001E                     	;# 
   710  001F                     	;# 
   711  0081                     	;# 
   712  0085                     	;# 
   713  0086                     	;# 
   714  0087                     	;# 
   715  0088                     	;# 
   716  0089                     	;# 
   717  008C                     	;# 
   718  008D                     	;# 
   719  008E                     	;# 
   720  008F                     	;# 
   721  0090                     	;# 
   722  0091                     	;# 
   723  0092                     	;# 
   724  0093                     	;# 
   725  0093                     	;# 
   726  0093                     	;# 
   727  0094                     	;# 
   728  0095                     	;# 
   729  0096                     	;# 
   730  0097                     	;# 
   731  0098                     	;# 
   732  0099                     	;# 
   733  009A                     	;# 
   734  009B                     	;# 
   735  009C                     	;# 
   736  009D                     	;# 
   737  009E                     	;# 
   738  009F                     	;# 
   739  0105                     	;# 
   740  0107                     	;# 
   741  0108                     	;# 
   742  0109                     	;# 
   743  010C                     	;# 
   744  010C                     	;# 
   745  010D                     	;# 
   746  010E                     	;# 
   747  010F                     	;# 
   748  0185                     	;# 
   749  0187                     	;# 
   750  0188                     	;# 
   751  0189                     	;# 
   752  018C                     	;# 
   753  018D                     	;# 
   754                           
   755                           	psect	idataBANK1
   756  0883                     __pidataBANK1:	
   757                           
   758                           ;initializer for _CWTX_Nref
   759  0883  34A0               	retlw	160
   760  0884  3400               	retlw	0
   761                           
   762                           ;initializer for _FMRX_Nref
   763  0885  3400               	retlw	0
   764  0886  340A               	retlw	10
   765                           
   766                           ;initializer for _FMTX_Nref
   767  0887  3400               	retlw	0
   768  0888  340A               	retlw	10
   769                           
   770                           ;initializer for _CWTX_Nprg
   771  0889  3400               	retlw	0
   772  088A  3400               	retlw	0
   773  088B  3401               	retlw	1
   774  088C  3400               	retlw	0
   775  088D  3407               	retlw	7
   776  088E  3400               	retlw	0
   777  088F  3404               	retlw	4
   778  0890  3400               	retlw	0
   779  0891  3407               	retlw	7
   780  0892  3400               	retlw	0
   781                           
   782                           ;initializer for _FMTX_Nprg
   783  0893  3408               	retlw	8
   784  0894  3400               	retlw	0
   785  0895  3407               	retlw	7
   786  0896  3400               	retlw	0
   787  0897  3403               	retlw	3
   788  0898  3400               	retlw	0
   789  0899  3400               	retlw	0
   790  089A  3400               	retlw	0
   791  089B  3400               	retlw	0
   792  089C  3400               	retlw	0
   793                           
   794                           	psect	idataBANK2
   795  086A                     __pidataBANK2:	
   796                           
   797                           ;initializer for _eDataField
   798  086A  3448               	retlw	72
   799  086B  3465               	retlw	101
   800  086C  346C               	retlw	108
   801  086D  346C               	retlw	108
   802  086E  346F               	retlw	111
   803  086F  3421               	retlw	33
   804  0870  3420               	retlw	32
   805  0871  3449               	retlw	73
   806  0872  3427               	retlw	39
   807  0873  346D               	retlw	109
   808  0874  3420               	retlw	32
   809  0875  344F               	retlw	79
   810  0876  3472               	retlw	114
   811  0877  3469               	retlw	105
   812  0878  3467               	retlw	103
   813  0879  3461               	retlw	97
   814  087A  346D               	retlw	109
   815  087B  3469               	retlw	105
   816  087C  3453               	retlw	83
   817  087D  3461               	retlw	97
   818  087E  3474               	retlw	116
   819  087F  3431               	retlw	49
   820  0880  3421               	retlw	33
   821  0881  3421               	retlw	33
   822  0882  3400               	retlw	0
   823                           
   824                           	psect	idataBANK3
   825  08BA                     __pidataBANK3:	
   826                           
   827                           ;initializer for main@F2006
   828  08BA  3408               	retlw	8
   829  08BB  3400               	retlw	0
   830  08BC  3407               	retlw	7
   831  08BD  3400               	retlw	0
   832  08BE  3403               	retlw	3
   833  08BF  3400               	retlw	0
   834  08C0  3400               	retlw	0
   835  08C1  3400               	retlw	0
   836  08C2  3400               	retlw	0
   837  08C3  3400               	retlw	0
   838                           
   839                           ;initializer for main@F2008
   840  08C4  3400               	retlw	0
   841  08C5  3400               	retlw	0
   842  08C6  3401               	retlw	1
   843  08C7  3400               	retlw	0
   844  08C8  3407               	retlw	7
   845  08C9  3400               	retlw	0
   846  08CA  3404               	retlw	4
   847  08CB  3400               	retlw	0
   848  08CC  3407               	retlw	7
   849  08CD  3400               	retlw	0
   850                           
   851                           ;initializer for main@F2010
   852  08CE  3402               	retlw	2
   853  08CF  3400               	retlw	0
   854  08D0  3404               	retlw	4
   855  08D1  3400               	retlw	0
   856  08D2  3408               	retlw	8
   857  08D3  3400               	retlw	0
   858  08D4  3408               	retlw	8
   859  08D5  3400               	retlw	0
   860  08D6  3407               	retlw	7
   861  08D7  3400               	retlw	0
   862                           
   863                           ;initializer for _FMRX_Nprg
   864  08D8  3402               	retlw	2
   865  08D9  3400               	retlw	0
   866  08DA  3404               	retlw	4
   867  08DB  3400               	retlw	0
   868  08DC  3408               	retlw	8
   869  08DD  3400               	retlw	0
   870  08DE  3408               	retlw	8
   871  08DF  3400               	retlw	0
   872  08E0  3407               	retlw	7
   873  08E1  3400               	retlw	0
   874                           
   875                           	psect	strings
   876  0800                     __pstrings:	
   877  0800                     stringtab:	
   878  0800                     __stringtab:	
   879  0800                     stringcode:	
   880                           ;	String table - string pointers are 1 byte each
   881                           
   882  0800                     stringdir:	
   883  0800  3008               	movlw	high stringdir
   884  0801  008A               	movwf	10
   885  0802  0804               	movf	4,w
   886  0803  0A84               	incf	4,f
   887  0804  0782               	addwf	2,f
   888  0805                     __stringbase:	
   889  0805  3400               	retlw	0
   890  0806                     __end_of__stringtab:	
   891  0806                     _commandSize:	
   892  0806  3420               	retlw	32
   893  0807  3400               	retlw	0
   894  0808                     __end_of_commandSize:	
   895  0005                     _PORTA	set	5
   896  0005                     _PORTAbits	set	5
   897  0006                     _PORTB	set	6
   898  0007                     _PORTC	set	7
   899  0007                     _PORTCbits	set	7
   900  0008                     _PORTD	set	8
   901  0008                     _PORTDbits	set	8
   902  0009                     _PORTE	set	9
   903  0009                     _PORTEbits	set	9
   904  001A                     _RCREG	set	26
   905  0013                     _SSPBUF	set	19
   906  0014                     _SSPCON	set	20
   907  0003                     _STATUS	set	3
   908  0019                     _TXREG	set	25
   909  00C4                     _CREN	set	196
   910  00C2                     _FERR	set	194
   911  00C1                     _OERR	set	193
   912  0029                     _RA1	set	41
   913  0032                     _RB2	set	50
   914  0034                     _RB4	set	52
   915  0035                     _RB5	set	53
   916  003A                     _RC2	set	58
   917  0065                     _RCIF	set	101
   918  00C6                     _RX9	set	198
   919  00C7                     _SPEN	set	199
   920  00C5                     _SREN	set	197
   921  0064                     _TXIF	set	100
   922  0099                     _SPBRG	set	153
   923  0093                     _SSPADD	set	147
   924  0091                     _SSPCON2	set	145
   925  0094                     _SSPSTAT	set	148
   926  0085                     _TRISA	set	133
   927  0086                     _TRISB	set	134
   928  0087                     _TRISC	set	135
   929  0088                     _TRISD	set	136
   930  0089                     _TRISE	set	137
   931  048D                     _ACKDT	set	1165
   932  048C                     _ACKEN	set	1164
   933  04C2                     _BRGH	set	1218
   934  048A                     _PEN	set	1162
   935  048B                     _RCEN	set	1163
   936  0465                     _RCIE	set	1125
   937  0489                     _RSEN	set	1161
   938  0488                     _SEN	set	1160
   939  04C4                     _SYNC	set	1220
   940  04C6                     _TX9	set	1222
   941  04C5                     _TXEN	set	1221
   942  0464                     _TXIE	set	1124
   943  0188                     _ANSEL	set	392
   944  0189                     _ANSELH	set	393
   945  0808                     STR_15:	
   946  0808  3473               	retlw	115	;'s'
   947  0809  3474               	retlw	116	;'t'
   948  080A  3461               	retlw	97	;'a'
   949  080B  3472               	retlw	114	;'r'
   950  080C  3474               	retlw	116	;'t'
   951  080D  340D               	retlw	13
   952  080E  340A               	retlw	10
   953  080F  3400               	retlw	0
   954  0810                     STR_7:	
   955  0810  344A               	retlw	74	;'J'
   956  0811  3451               	retlw	81	;'Q'
   957  0812  3431               	retlw	49	;'1'
   958  0813  345A               	retlw	90	;'Z'
   959  0814  3448               	retlw	72	;'H'
   960  0815  3458               	retlw	88	;'X'
   961  0816  3400               	retlw	0
   962  0817                     STR_1:	
   963  0817  344A               	retlw	74	;'J'
   964  0818  3451               	retlw	81	;'Q'
   965  0819  3431               	retlw	49	;'1'
   966  081A  3459               	retlw	89	;'Y'
   967  081B  3443               	retlw	67	;'C'
   968  081C  345A               	retlw	90	;'Z'
   969  081D  3400               	retlw	0
   970  081E                     STR_16:	
   971  081E  3425               	retlw	37	;'%'
   972  081F  3463               	retlw	99	;'c'
   973  0820  3400               	retlw	0
   974  0810                     
   975                           ; #config settings
   976  0000                     
   977                           	psect	cinit
   978  07B3                     start_initialization:	
   979  07B3                     __initialization:	
   980                           
   981                           ; Initialize objects allocated to BANK3
   982  07B3  1783               	bsf	3,7	;select IRP bank2
   983  07B4  30EA               	movlw	low (__pdataBANK3+40)
   984  07B5  00FD               	movwf	btemp+-1
   985  07B6  3008               	movlw	high __pidataBANK3
   986  07B7  00FE               	movwf	btemp
   987  07B8  30BA               	movlw	low __pidataBANK3
   988  07B9  00FF               	movwf	btemp+1
   989  07BA  30C2               	movlw	low __pdataBANK3
   990  07BB  0084               	movwf	4
   991  07BC  160A  118A  27F3  120A  118A  	fcall	init_ram0
   992                           
   993                           ; Initialize objects allocated to BANK2
   994  07C1  3069               	movlw	low (__pdataBANK2+25)
   995  07C2  00FD               	movwf	btemp+-1
   996  07C3  3008               	movlw	high __pidataBANK2
   997  07C4  00FE               	movwf	btemp
   998  07C5  306A               	movlw	low __pidataBANK2
   999  07C6  00FF               	movwf	btemp+1
  1000  07C7  3050               	movlw	low __pdataBANK2
  1001  07C8  0084               	movwf	4
  1002  07C9  160A  118A  27F3  120A  118A  	fcall	init_ram0
  1003                           
  1004                           ; Initialize objects allocated to BANK1
  1005  07CE  1383               	bcf	3,7	;select IRP bank0
  1006  07CF  30DC               	movlw	low (__pdataBANK1+26)
  1007  07D0  00FD               	movwf	btemp+-1
  1008  07D1  3008               	movlw	high __pidataBANK1
  1009  07D2  00FE               	movwf	btemp
  1010  07D3  3083               	movlw	low __pidataBANK1
  1011  07D4  00FF               	movwf	btemp+1
  1012  07D5  30C2               	movlw	low __pdataBANK1
  1013  07D6  0084               	movwf	4
  1014  07D7  160A  118A  27F3  120A  118A  	fcall	init_ram0
  1015                           
  1016                           ; Clear objects allocated to BANK3
  1017  07DC  1783               	bsf	3,7	;select IRP bank2
  1018  07DD  3090               	movlw	low __pbssBANK3
  1019  07DE  0084               	movwf	4
  1020  07DF  30C2               	movlw	low (__pbssBANK3+50)
  1021  07E0  160A  118A  27E7  120A  118A  	fcall	clear_ram0
  1022                           
  1023                           ; Clear objects allocated to BANK2
  1024  07E5  3010               	movlw	low __pbssBANK2
  1025  07E6  0084               	movwf	4
  1026  07E7  3050               	movlw	low (__pbssBANK2+64)
  1027  07E8  160A  118A  27E7  120A  118A  	fcall	clear_ram0
  1028                           
  1029                           ; Clear objects allocated to BANK1
  1030  07ED  1383               	bcf	3,7	;select IRP bank0
  1031  07EE  30DC               	movlw	low __pbssBANK1
  1032  07EF  0084               	movwf	4
  1033  07F0  30E9               	movlw	low (__pbssBANK1+13)
  1034  07F1  160A  118A  27E7  120A  118A  	fcall	clear_ram0
  1035                           
  1036                           ; Clear objects allocated to BANK0
  1037  07F6  3066               	movlw	low __pbssBANK0
  1038  07F7  0084               	movwf	4
  1039  07F8  3070               	movlw	low (__pbssBANK0+10)
  1040  07F9  160A  118A  27E7   	fcall	clear_ram0
  1041  07FC                     end_of_initialization:	
  1042                           ;End of C runtime variable initialization code
  1043                           
  1044  07FC                     __end_of__initialization:	
  1045  07FC  0183               	clrf	3
  1046  07FD  120A  158A  2E1F   	ljmp	_main	;jump to C main() function
  1047                           
  1048                           	psect	bssBANK0
  1049  0066                     __pbssBANK0:	
  1050  0066                     _dPacketnum:	
  1051  0066                     	ds	2
  1052  0068                     _eflag:	
  1053  0068                     	ds	2
  1054  006A                     _rcv_state:	
  1055  006A                     	ds	2
  1056  006C                     _dfcshi:	
  1057  006C                     	ds	1
  1058  006D                     _dfcslo:	
  1059  006D                     	ds	1
  1060  006E                     _efcshi:	
  1061  006E                     	ds	1
  1062  006F                     _efcslo:	
  1063  006F                     	ds	1
  1064                           
  1065                           	psect	bssBANK1
  1066  00DC                     __pbssBANK1:	
  1067  00DC                     _ePacket:	
  1068  00DC                     	ds	5
  1069  00E1                     _ebitstatus:	
  1070  00E1                     	ds	2
  1071  00E3                     _efcsflag:	
  1072  00E3                     	ds	2
  1073  00E5                     _estuff:	
  1074  00E5                     	ds	2
  1075  00E7                     getbit@oldbit:	
  1076  00E7                     	ds	2
  1077                           
  1078                           	psect	dataBANK1
  1079  00C2                     __pdataBANK1:	
  1080  00C2                     _CWTX_Nref:	
  1081  00C2                     	ds	2
  1082  00C4                     _FMRX_Nref:	
  1083  00C4                     	ds	2
  1084  00C6                     _FMTX_Nref:	
  1085  00C6                     	ds	2
  1086  00C8                     _CWTX_Nprg:	
  1087  00C8                     	ds	10
  1088  00D2                     _FMTX_Nprg:	
  1089  00D2                     	ds	10
  1090                           
  1091                           	psect	bssBANK3
  1092  0190                     __pbssBANK3:	
  1093  0190                     _dPacket:	
  1094  0190                     	ds	50
  1095                           
  1096                           	psect	dataBANK3
  1097  01C2                     __pdataBANK3:	
  1098  01C2                     main@F2006:	
  1099  01C2                     	ds	10
  1100  01CC                     main@F2008:	
  1101  01CC                     	ds	10
  1102  01D6                     main@F2010:	
  1103  01D6                     	ds	10
  1104  01E0                     _FMRX_Nprg:	
  1105  01E0                     	ds	10
  1106                           
  1107                           	psect	bssBANK2
  1108  0110                     __pbssBANK2:	
  1109  0110                     _EEPROMData:	
  1110  0110                     	ds	32
  1111  0130                     _dData:	
  1112  0130                     	ds	32
  1113                           
  1114                           	psect	dataBANK2
  1115  0150                     __pdataBANK2:	
  1116  0150                     _eDataField:	
  1117  0150                     	ds	25
  1118                           
  1119                           	psect	inittext
  1120  17EF                     init_fetch0:	
  1121                           ;	Called with low address in FSR and high address in W
  1122                           
  1123  17EF  087E               	movf	126,w
  1124  17F0  008A               	movwf	10
  1125  17F1  087F               	movf	127,w
  1126  17F2  0082               	movwf	2
  1127  17F3                     init_ram0:	
  1128                           ;Called with:
  1129                           ;	high address of idata address in btemp 
  1130                           ;	low address of idata address in btemp+1 
  1131                           ;	low address of data in FSR
  1132                           ;	high address + 1 of data in btemp-1
  1133                           
  1134  17F3  27EF  160A  118A   	fcall	init_fetch0
  1135  17F6  0080               	movwf	0
  1136  17F7  0A84               	incf	4,f
  1137  17F8  0804               	movf	4,w
  1138  17F9  067D               	xorwf	125,w
  1139  17FA  1903               	btfsc	3,2
  1140  17FB  3400               	retlw	0
  1141  17FC  0AFF               	incf	127,f
  1142  17FD  1903               	btfsc	3,2
  1143  17FE  0AFE               	incf	126,f
  1144  17FF  2FF3               	goto	init_ram0
  1145                           
  1146                           	psect	clrtext
  1147  17E7                     clear_ram0:	
  1148                           ;	Called with FSR containing the base address, and
  1149                           ;	W with the last address+1
  1150                           
  1151  17E7  0064               	clrwdt	;clear the watchdog before getting into this loop
  1152  17E8                     clrloop0:	
  1153  17E8  0180               	clrf	0	;clear RAM location pointed to by FSR
  1154  17E9  0A84               	incf	4,f	;increment pointer
  1155  17EA  0604               	xorwf	4,w	;XOR with final address
  1156  17EB  1903               	btfsc	3,2	;have we reached the end yet?
  1157  17EC  3400               	retlw	0	;all done for this memory range, return
  1158  17ED  0604               	xorwf	4,w	;XOR again to restore value
  1159  17EE  2FE8               	goto	clrloop0	;do the next byte
  1160                           
  1161                           	psect	cstackBANK1
  1162  00A0                     __pcstackBANK1:	
  1163  00A0                     main@FMTX_Nprg:	
  1164                           
  1165                           ; 10 bytes @ 0x0
  1166  00A0                     	ds	10
  1167  00AA                     main@CWTX_Nprg:	
  1168                           
  1169                           ; 10 bytes @ 0xA
  1170  00AA                     	ds	10
  1171  00B4                     main@FMRX_Nprg:	
  1172                           
  1173                           ; 10 bytes @ 0x14
  1174  00B4                     	ds	10
  1175  00BE                     main@NM_wad_header:	
  1176                           
  1177                           ; 1 bytes @ 0x1E
  1178  00BE                     	ds	1
  1179  00BF                     main@i:	
  1180                           
  1181                           ; 2 bytes @ 0x1F
  1182  00BF                     	ds	2
  1183  00C1                     main@dData:	
  1184                           
  1185                           ; 1 bytes @ 0x21
  1186  00C1                     	ds	1
  1187                           
  1188                           	psect	cstackCOMMON
  1189  0070                     __pcstackCOMMON:	
  1190  0070                     ?_Reset_EPS:	
  1191  0070                     ??_Reset_EPS:	
  1192                           ; 1 bytes @ 0x0
  1193                           
  1194  0070                     ?__NOP:	
  1195                           ; 1 bytes @ 0x0
  1196                           
  1197  0070                     ??__NOP:	
  1198                           ; 1 bytes @ 0x0
  1199                           
  1200  0070                     ?_Init_SERIAL:	
  1201                           ; 1 bytes @ 0x0
  1202                           
  1203  0070                     ??_Init_SERIAL:	
  1204                           ; 1 bytes @ 0x0
  1205                           
  1206  0070                     ?_putch:	
  1207                           ; 1 bytes @ 0x0
  1208                           
  1209  0070                     ??_putch:	
  1210                           ; 1 bytes @ 0x0
  1211                           
  1212  0070                     ?_Init_MPU:	
  1213                           ; 1 bytes @ 0x0
  1214                           
  1215  0070                     ??_Init_MPU:	
  1216                           ; 1 bytes @ 0x0
  1217                           
  1218  0070                     ?_waitFlag:	
  1219                           ; 1 bytes @ 0x0
  1220                           
  1221  0070                     ?_getdata:	
  1222                           ; 1 bytes @ 0x0
  1223                           
  1224  0070                     ?_ReceivePacket_data:	
  1225                           ; 1 bytes @ 0x0
  1226                           
  1227  0070                     ?_main:	
  1228                           ; 1 bytes @ 0x0
  1229                           
  1230  0070                     ?_I2C_Master_Wait:	
  1231                           ; 1 bytes @ 0x0
  1232                           
  1233  0070                     ??_I2C_Master_Wait:	
  1234                           ; 1 bytes @ 0x0
  1235                           
  1236  0070                     ?_I2C_Master_Start:	
  1237                           ; 1 bytes @ 0x0
  1238                           
  1239  0070                     ??_I2C_Master_Start:	
  1240                           ; 1 bytes @ 0x0
  1241                           
  1242  0070                     ?_I2C_Master_Stop:	
  1243                           ; 1 bytes @ 0x0
  1244                           
  1245  0070                     ??_I2C_Master_Stop:	
  1246                           ; 1 bytes @ 0x0
  1247                           
  1248  0070                     ?_I2C_Master_Write:	
  1249                           ; 1 bytes @ 0x0
  1250                           
  1251  0070                     ?_getbit:	
  1252                           ; 1 bytes @ 0x0
  1253                           
  1254  0070                     ?_fcscheck:	
  1255                           ; 2 bytes @ 0x0
  1256                           
  1257  0070                     ?___awdiv:	
  1258                           ; 2 bytes @ 0x0
  1259                           
  1260  0070                     ?___lldiv:	
  1261                           ; 2 bytes @ 0x0
  1262                           
  1263  0070                     putch@byte:	
  1264                           ; 4 bytes @ 0x0
  1265                           
  1266  0070                     I2C_Master_Write@d:	
  1267                           ; 1 bytes @ 0x0
  1268                           
  1269  0070                     __NOP@i:	
  1270                           ; 2 bytes @ 0x0
  1271                           
  1272  0070                     ___awdiv@divisor:	
  1273                           ; 2 bytes @ 0x0
  1274                           
  1275  0070                     ___lldiv@divisor:	
  1276                           ; 2 bytes @ 0x0
  1277                           
  1278                           
  1279                           ; 4 bytes @ 0x0
  1280  0070                     	ds	1
  1281  0071                     ?_NM_waddress:	
  1282  0071                     ?_printf:	
  1283                           ; 1 bytes @ 0x1
  1284                           
  1285  0071                     NM_waddress@whigh_address:	
  1286                           ; 2 bytes @ 0x1
  1287                           
  1288                           
  1289                           ; 1 bytes @ 0x1
  1290  0071                     	ds	1
  1291  0072                     ?_EEPROM_Write:	
  1292  0072                     ??_getbit:	
  1293                           ; 1 bytes @ 0x2
  1294                           
  1295  0072                     ??_fcscheck:	
  1296                           ; 1 bytes @ 0x2
  1297                           
  1298  0072                     ??_I2C_Master_Write:	
  1299                           ; 1 bytes @ 0x2
  1300                           
  1301  0072                     ?_L_OUT:	
  1302                           ; 1 bytes @ 0x2
  1303                           
  1304  0072                     ?_H_OUT:	
  1305                           ; 1 bytes @ 0x2
  1306                           
  1307  0072                     ?_STBOUT:	
  1308                           ; 1 bytes @ 0x2
  1309                           
  1310  0072                     NM_waddress@wlow_address:	
  1311                           ; 1 bytes @ 0x2
  1312                           
  1313  0072                     EEPROM_Write@high_address:	
  1314                           ; 1 bytes @ 0x2
  1315                           
  1316  0072                     L_OUT@fmcwtxrx:	
  1317                           ; 1 bytes @ 0x2
  1318                           
  1319  0072                     H_OUT@fmcwtxrx:	
  1320                           ; 2 bytes @ 0x2
  1321                           
  1322  0072                     STBOUT@fmcwtxrx:	
  1323                           ; 2 bytes @ 0x2
  1324                           
  1325  0072                     ___awdiv@dividend:	
  1326                           ; 2 bytes @ 0x2
  1327                           
  1328                           
  1329                           ; 2 bytes @ 0x2
  1330  0072                     	ds	1
  1331  0073                     ??_printf:	
  1332  0073                     ??_NM_waddress:	
  1333                           ; 1 bytes @ 0x3
  1334                           
  1335  0073                     NM_waddress@NM_wad_header:	
  1336                           ; 1 bytes @ 0x3
  1337                           
  1338  0073                     EEPROM_Write@low_address:	
  1339                           ; 1 bytes @ 0x3
  1340                           
  1341                           
  1342                           ; 1 bytes @ 0x3
  1343  0073                     	ds	1
  1344  0074                     ??_L_OUT:	
  1345  0074                     ??_H_OUT:	
  1346                           ; 1 bytes @ 0x4
  1347                           
  1348  0074                     ??_STBOUT:	
  1349                           ; 1 bytes @ 0x4
  1350                           
  1351  0074                     ?_OPINIT:	
  1352                           ; 1 bytes @ 0x4
  1353                           
  1354  0074                     ??___awdiv:	
  1355                           ; 1 bytes @ 0x4
  1356                           
  1357  0074                     fcscheck@bt:	
  1358                           ; 1 bytes @ 0x4
  1359                           
  1360  0074                     EEPROM_Write@data:	
  1361                           ; 1 bytes @ 0x4
  1362                           
  1363  0074                     printf@flag:	
  1364                           ; 1 bytes @ 0x4
  1365                           
  1366  0074                     getbit@i:	
  1367                           ; 1 bytes @ 0x4
  1368                           
  1369  0074                     OPINIT@fmcwtxrx:	
  1370                           ; 2 bytes @ 0x4
  1371                           
  1372  0074                     ___lldiv@dividend:	
  1373                           ; 2 bytes @ 0x4
  1374                           
  1375                           
  1376                           ; 4 bytes @ 0x4
  1377  0074                     	ds	1
  1378  0075                     ??_EEPROM_Write:	
  1379  0075                     printf@ap:	
  1380                           ; 1 bytes @ 0x5
  1381                           
  1382  0075                     ___awdiv@counter:	
  1383                           ; 1 bytes @ 0x5
  1384                           
  1385  0075                     fcscheck@i:	
  1386                           ; 1 bytes @ 0x5
  1387                           
  1388                           
  1389                           ; 2 bytes @ 0x5
  1390  0075                     	ds	1
  1391  0076                     ??_waitFlag:	
  1392  0076                     ??_getdata:	
  1393                           ; 1 bytes @ 0x6
  1394                           
  1395  0076                     ??_OPINIT:	
  1396                           ; 1 bytes @ 0x6
  1397                           
  1398  0076                     printf@f:	
  1399                           ; 1 bytes @ 0x6
  1400                           
  1401  0076                     ___awdiv@sign:	
  1402                           ; 1 bytes @ 0x6
  1403                           
  1404                           
  1405                           ; 1 bytes @ 0x6
  1406  0076                     	ds	1
  1407  0077                     printf@c:	
  1408  0077                     fcscheck@i_142:	
  1409                           ; 1 bytes @ 0x7
  1410                           
  1411  0077                     ___awdiv@quotient:	
  1412                           ; 2 bytes @ 0x7
  1413                           
  1414                           
  1415                           ; 2 bytes @ 0x7
  1416  0077                     	ds	1
  1417  0078                     ??___lldiv:	
  1418  0078                     EEPROM_Write@EEPROM_address:	
  1419                           ; 1 bytes @ 0x8
  1420                           
  1421                           
  1422                           ; 1 bytes @ 0x8
  1423  0078                     	ds	1
  1424  0079                     ?_OUTFQ:	
  1425  0079                     ?_RFDOUT:	
  1426                           ; 1 bytes @ 0x9
  1427                           
  1428  0079                     fcscheck@byte:	
  1429                           ; 1 bytes @ 0x9
  1430                           
  1431  0079                     EEPROM_Write@Address:	
  1432                           ; 1 bytes @ 0x9
  1433                           
  1434  0079                     OUTFQ@fmcwtxrx:	
  1435                           ; 1 bytes @ 0x9
  1436                           
  1437  0079                     RFDOUT@fmcwtxrx:	
  1438                           ; 2 bytes @ 0x9
  1439                           
  1440  0079                     ___lldiv@quotient:	
  1441                           ; 2 bytes @ 0x9
  1442                           
  1443                           
  1444                           ; 4 bytes @ 0x9
  1445  0079                     	ds	1
  1446  007A                     ??_ReceivePacket_data:	
  1447                           
  1448                           ; 1 bytes @ 0xA
  1449  007A                     	ds	1
  1450  007B                     OUTFQ@Nprg:	
  1451  007B                     RFDOUT@Nref:	
  1452                           ; 2 bytes @ 0xB
  1453                           
  1454                           
  1455                           ; 2 bytes @ 0xB
  1456  007B                     	ds	2
  1457  007D                     ??_FMTX:	
  1458  007D                     ??_CWTX:	
  1459                           ; 1 bytes @ 0xD
  1460                           
  1461  007D                     ??_FMRX:	
  1462                           ; 1 bytes @ 0xD
  1463                           
  1464  007D                     ___lldiv@counter:	
  1465                           ; 1 bytes @ 0xD
  1466                           
  1467                           
  1468                           ; 1 bytes @ 0xD
  1469  007D                     	ds	1
  1470                           
  1471                           	psect	cstackBANK0
  1472  0020                     __pcstackBANK0:	
  1473  0020                     ?_Init_I2C_M:	
  1474  0020                     ??_OUTFQ:	
  1475                           ; 1 bytes @ 0x0
  1476                           
  1477  0020                     ??_RFDOUT:	
  1478                           ; 1 bytes @ 0x0
  1479                           
  1480  0020                     waitFlag@i:	
  1481                           ; 1 bytes @ 0x0
  1482                           
  1483  0020                     getdata@bufstore_counter:	
  1484                           ; 2 bytes @ 0x0
  1485                           
  1486  0020                     Init_I2C_M@c:	
  1487                           ; 2 bytes @ 0x0
  1488                           
  1489                           
  1490                           ; 4 bytes @ 0x0
  1491  0020                     	ds	2
  1492  0022                     waitFlag@j:	
  1493  0022                     getdata@dstuff:	
  1494                           ; 2 bytes @ 0x2
  1495                           
  1496                           
  1497                           ; 2 bytes @ 0x2
  1498  0022                     	ds	1
  1499  0023                     RFDOUT@Nref_b:	
  1500                           
  1501                           ; 24 bytes @ 0x3
  1502  0023                     	ds	1
  1503  0024                     ??_Init_I2C_M:	
  1504  0024                     waitFlag@j_111:	
  1505                           ; 1 bytes @ 0x4
  1506                           
  1507  0024                     getdata@dbitstatus:	
  1508                           ; 2 bytes @ 0x4
  1509                           
  1510                           
  1511                           ; 2 bytes @ 0x4
  1512  0024                     	ds	2
  1513  0026                     getdata@buf:	
  1514  0026                     waitFlag@j_113:	
  1515                           ; 1 bytes @ 0x6
  1516                           
  1517                           
  1518                           ; 2 bytes @ 0x6
  1519  0026                     	ds	2
  1520  0028                     waitFlag@j_115:	
  1521                           
  1522                           ; 2 bytes @ 0x8
  1523  0028                     	ds	2
  1524  002A                     waitFlag@j_117:	
  1525                           
  1526                           ; 2 bytes @ 0xA
  1527  002A                     	ds	2
  1528  002C                     waitFlag@j_119:	
  1529                           
  1530                           ; 2 bytes @ 0xC
  1531  002C                     	ds	2
  1532  002E                     waitFlag@j_120:	
  1533                           
  1534                           ; 2 bytes @ 0xE
  1535  002E                     	ds	2
  1536  0030                     waitFlag@j_122:	
  1537  0030                     OUTFQ@Nprg_b:	
  1538                           ; 2 bytes @ 0x10
  1539                           
  1540                           
  1541                           ; 34 bytes @ 0x10
  1542  0030                     	ds	2
  1543  0032                     waitFlag@j_124:	
  1544                           
  1545                           ; 2 bytes @ 0x12
  1546  0032                     	ds	2
  1547  0034                     waitFlag@j_126:	
  1548                           
  1549                           ; 2 bytes @ 0x14
  1550  0034                     	ds	2
  1551  0036                     waitFlag@j_128:	
  1552                           
  1553                           ; 2 bytes @ 0x16
  1554  0036                     	ds	2
  1555  0038                     waitFlag@j_130:	
  1556                           
  1557                           ; 2 bytes @ 0x18
  1558  0038                     	ds	2
  1559  003A                     waitFlag@flag_judge:	
  1560                           
  1561                           ; 2 bytes @ 0x1A
  1562  003A                     	ds	1
  1563  003B                     RFDOUT@i_473:	
  1564                           
  1565                           ; 2 bytes @ 0x1B
  1566  003B                     	ds	1
  1567  003C                     waitFlag@buf:	
  1568                           
  1569                           ; 1 bytes @ 0x1C
  1570  003C                     	ds	1
  1571  003D                     ReceivePacket_data@fcschecker:	
  1572  003D                     RFDOUT@i:	
  1573                           ; 2 bytes @ 0x1D
  1574                           
  1575                           
  1576                           ; 2 bytes @ 0x1D
  1577  003D                     	ds	2
  1578  003F                     ReceivePacket_data@i:	
  1579  003F                     RFDOUT@i_474:	
  1580                           ; 2 bytes @ 0x1F
  1581                           
  1582                           
  1583                           ; 2 bytes @ 0x1F
  1584  003F                     	ds	19
  1585  0052                     OUTFQ@i_462:	
  1586                           
  1587                           ; 2 bytes @ 0x32
  1588  0052                     	ds	2
  1589  0054                     OUTFQ@count:	
  1590                           
  1591                           ; 2 bytes @ 0x34
  1592  0054                     	ds	2
  1593  0056                     OUTFQ@i:	
  1594                           
  1595                           ; 2 bytes @ 0x36
  1596  0056                     	ds	2
  1597  0058                     OUTFQ@i_464:	
  1598                           
  1599                           ; 2 bytes @ 0x38
  1600  0058                     	ds	2
  1601  005A                     OUTFQ@j:	
  1602                           
  1603                           ; 2 bytes @ 0x3A
  1604  005A                     	ds	2
  1605  005C                     ?_FMTX:	
  1606  005C                     ?_CWTX:	
  1607                           ; 1 bytes @ 0x3C
  1608                           
  1609  005C                     ?_FMRX:	
  1610                           ; 1 bytes @ 0x3C
  1611                           
  1612  005C                     FMTX@Nref:	
  1613                           ; 1 bytes @ 0x3C
  1614                           
  1615  005C                     CWTX@Nref:	
  1616                           ; 2 bytes @ 0x3C
  1617                           
  1618  005C                     FMRX@Nref:	
  1619                           ; 2 bytes @ 0x3C
  1620                           
  1621                           
  1622                           ; 2 bytes @ 0x3C
  1623  005C                     	ds	2
  1624  005E                     FMTX@Nprg:	
  1625  005E                     CWTX@Nprg:	
  1626                           ; 2 bytes @ 0x3E
  1627                           
  1628  005E                     FMRX@Nprg:	
  1629                           ; 2 bytes @ 0x3E
  1630                           
  1631                           
  1632                           ; 2 bytes @ 0x3E
  1633  005E                     	ds	2
  1634  0060                     FMTX@fmtx:	
  1635  0060                     CWTX@cwtx:	
  1636                           ; 2 bytes @ 0x40
  1637                           
  1638  0060                     FMRX@fmrx:	
  1639                           ; 2 bytes @ 0x40
  1640                           
  1641                           
  1642                           ; 2 bytes @ 0x40
  1643  0060                     	ds	2
  1644  0062                     ??_main:	
  1645                           
  1646                           ; 1 bytes @ 0x42
  1647  0062                     	ds	4
  1648                           
  1649                           	psect	maintext
  1650  0E1F                     __pmaintext:	
  1651 ;;
  1652 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1653 ;;
  1654 ;; *************** function _main *****************
  1655 ;; Defined at:
  1656 ;;		line 38 in file "main.c"
  1657 ;; Parameters:    Size  Location     Type
  1658 ;;		None
  1659 ;; Auto vars:     Size  Location     Type
  1660 ;;  FMRX_Nprg      10   20[BANK1 ] int [5]
  1661 ;;  CWTX_Nprg      10   10[BANK1 ] int [5]
  1662 ;;  FMTX_Nprg      10    0[BANK1 ] int [5]
  1663 ;;  NM_wad_heade    1   30[BANK1 ] unsigned char 
  1664 ;;  i               2   31[BANK1 ] unsigned int 
  1665 ;;  dData           1   33[BANK1 ] PTR unsigned char 
  1666 ;;		 -> NULL(0), dData(32), 
  1667 ;; Return value:  Size  Location     Type
  1668 ;;                  1    wreg      void 
  1669 ;; Registers used:
  1670 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1671 ;; Tracked objects:
  1672 ;;		On entry : B00/0
  1673 ;;		On exit  : 0/0
  1674 ;;		Unchanged: 0/0
  1675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1676 ;;      Params:         0       0       0       0       0
  1677 ;;      Locals:         0       0      34       0       0
  1678 ;;      Temps:          0       4       0       0       0
  1679 ;;      Totals:         0       4      34       0       0
  1680 ;;Total ram usage:       38 bytes
  1681 ;; Hardware stack levels required when called:    4
  1682 ;; This function calls:
  1683 ;;		_CWTX
  1684 ;;		_EEPROM_Write
  1685 ;;		_FMRX
  1686 ;;		_FMTX
  1687 ;;		_Init_I2C_M
  1688 ;;		_Init_MPU
  1689 ;;		_Init_SERIAL
  1690 ;;		_NM_waddress
  1691 ;;		_ReceivePacket_data
  1692 ;;		_Reset_EPS
  1693 ;;		_printf
  1694 ;; This function is called by:
  1695 ;;		Startup code after reset
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699                           
  1700                           ;psect for function _main
  1701  0E1F                     _main:	
  1702                           
  1703                           ;main.c: 43: _delay((unsigned long)((500)*(10000000/4000.0)));
  1704                           
  1705                           ;incstack = 0
  1706                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1707  0E1F  3007               	movlw	7
  1708  0E20  1283               	bcf	3,5	;RP0=0, select bank0
  1709  0E21  1303               	bcf	3,6	;RP1=0, select bank0
  1710  0E22  00E4               	movwf	??_main+2
  1711  0E23  3058               	movlw	88
  1712  0E24  00E3               	movwf	??_main+1
  1713  0E25  305E               	movlw	94
  1714  0E26  00E2               	movwf	??_main
  1715  0E27                     u3627:	
  1716  0E27  0BE2               	decfsz	??_main,f
  1717  0E28  2E27               	goto	u3627
  1718  0E29  0BE3               	decfsz	??_main+1,f
  1719  0E2A  2E27               	goto	u3627
  1720  0E2B  0BE4               	decfsz	??_main+2,f
  1721  0E2C  2E27               	goto	u3627
  1722  0E2D  2E2E               	nop2
  1723                           
  1724                           ;main.c: 45: Init_SERIAL();
  1725  0E2E  120A  158A  2051  120A  158A  	fcall	_Init_SERIAL
  1726                           
  1727                           ;main.c: 46: Init_MPU();
  1728  0E33  120A  158A  209D  120A  158A  	fcall	_Init_MPU
  1729                           
  1730                           ;main.c: 47: Init_I2C_M(400000);
  1731  0E38  3000               	movlw	0
  1732  0E39  1283               	bcf	3,5	;RP0=0, select bank0
  1733  0E3A  1303               	bcf	3,6	;RP1=0, select bank0
  1734  0E3B  00A3               	movwf	Init_I2C_M@c+3
  1735  0E3C  3006               	movlw	6
  1736  0E3D  00A2               	movwf	Init_I2C_M@c+2
  1737  0E3E  301A               	movlw	26
  1738  0E3F  00A1               	movwf	Init_I2C_M@c+1
  1739  0E40  3080               	movlw	128
  1740  0E41  00A0               	movwf	Init_I2C_M@c
  1741  0E42  120A  158A  2194  120A  158A  	fcall	_Init_I2C_M
  1742                           
  1743                           ;main.c: 52: RB2 = 1;
  1744  0E47  1283               	bcf	3,5	;RP0=0, select bank0
  1745  0E48  1303               	bcf	3,6	;RP1=0, select bank0
  1746  0E49  1506               	bsf	6,2	;volatile
  1747                           
  1748                           ;main.c: 53: _delay((unsigned long)((500)*(10000000/4000.0)));
  1749  0E4A  3007               	movlw	7
  1750  0E4B  00E4               	movwf	??_main+2
  1751  0E4C  3058               	movlw	88
  1752  0E4D  00E3               	movwf	??_main+1
  1753  0E4E  305E               	movlw	94
  1754  0E4F  00E2               	movwf	??_main
  1755  0E50                     u3637:	
  1756  0E50  0BE2               	decfsz	??_main,f
  1757  0E51  2E50               	goto	u3637
  1758  0E52  0BE3               	decfsz	??_main+1,f
  1759  0E53  2E50               	goto	u3637
  1760  0E54  0BE4               	decfsz	??_main+2,f
  1761  0E55  2E50               	goto	u3637
  1762  0E56  2E57               	nop2
  1763                           
  1764                           ;main.c: 55: FMTX(FMTX_Nref, FMTX_Nprg);
  1765  0E57  1683               	bsf	3,5	;RP0=1, select bank1
  1766  0E58  1303               	bcf	3,6	;RP1=0, select bank1
  1767  0E59  0847               	movf	(_FMTX_Nref+1)^(0+128),w
  1768  0E5A  1283               	bcf	3,5	;RP0=0, select bank0
  1769  0E5B  1303               	bcf	3,6	;RP1=0, select bank0
  1770  0E5C  00DD               	movwf	FMTX@Nref+1
  1771  0E5D  1683               	bsf	3,5	;RP0=1, select bank1
  1772  0E5E  1303               	bcf	3,6	;RP1=0, select bank1
  1773  0E5F  0846               	movf	_FMTX_Nref^(0+128),w
  1774  0E60  1283               	bcf	3,5	;RP0=0, select bank0
  1775  0E61  1303               	bcf	3,6	;RP1=0, select bank0
  1776  0E62  00DC               	movwf	FMTX@Nref
  1777  0E63  30D2               	movlw	(low (_FMTX_Nprg| 0))& (0+255)
  1778  0E64  00DE               	movwf	FMTX@Nprg
  1779  0E65  3000               	movlw	0
  1780  0E66  00DF               	movwf	FMTX@Nprg+1
  1781  0E67  120A  158A  213A  120A  158A  	fcall	_FMTX
  1782                           
  1783                           ;main.c: 56: CWTX(CWTX_Nref, CWTX_Nprg);
  1784  0E6C  1683               	bsf	3,5	;RP0=1, select bank1
  1785  0E6D  1303               	bcf	3,6	;RP1=0, select bank1
  1786  0E6E  0843               	movf	(_CWTX_Nref+1)^(0+128),w
  1787  0E6F  1283               	bcf	3,5	;RP0=0, select bank0
  1788  0E70  1303               	bcf	3,6	;RP1=0, select bank0
  1789  0E71  00DD               	movwf	CWTX@Nref+1
  1790  0E72  1683               	bsf	3,5	;RP0=1, select bank1
  1791  0E73  1303               	bcf	3,6	;RP1=0, select bank1
  1792  0E74  0842               	movf	_CWTX_Nref^(0+128),w
  1793  0E75  1283               	bcf	3,5	;RP0=0, select bank0
  1794  0E76  1303               	bcf	3,6	;RP1=0, select bank0
  1795  0E77  00DC               	movwf	CWTX@Nref
  1796  0E78  30C8               	movlw	(low (_CWTX_Nprg| 0))& (0+255)
  1797  0E79  00DE               	movwf	CWTX@Nprg
  1798  0E7A  3000               	movlw	0
  1799  0E7B  00DF               	movwf	CWTX@Nprg+1
  1800  0E7C  120A  158A  20E2  120A  158A  	fcall	_CWTX
  1801                           
  1802                           ;main.c: 57: FMRX(FMRX_Nref, FMRX_Nprg);
  1803  0E81  1683               	bsf	3,5	;RP0=1, select bank1
  1804  0E82  1303               	bcf	3,6	;RP1=0, select bank1
  1805  0E83  0845               	movf	(_FMRX_Nref+1)^(0+128),w
  1806  0E84  1283               	bcf	3,5	;RP0=0, select bank0
  1807  0E85  1303               	bcf	3,6	;RP1=0, select bank0
  1808  0E86  00DD               	movwf	FMRX@Nref+1
  1809  0E87  1683               	bsf	3,5	;RP0=1, select bank1
  1810  0E88  1303               	bcf	3,6	;RP1=0, select bank1
  1811  0E89  0844               	movf	_FMRX_Nref^(0+128),w
  1812  0E8A  1283               	bcf	3,5	;RP0=0, select bank0
  1813  0E8B  1303               	bcf	3,6	;RP1=0, select bank0
  1814  0E8C  00DC               	movwf	FMRX@Nref
  1815  0E8D  30E0               	movlw	(low (_FMRX_Nprg| (0+256)))& (0+255)
  1816  0E8E  00DE               	movwf	FMRX@Nprg
  1817  0E8F  3001               	movlw	1
  1818  0E90  00DF               	movwf	FMRX@Nprg+1
  1819  0E91  120A  158A  210E  120A  158A  	fcall	_FMRX
  1820                           
  1821                           ;main.c: 58: RB2 = 0;
  1822  0E96  1283               	bcf	3,5	;RP0=0, select bank0
  1823  0E97  1303               	bcf	3,6	;RP1=0, select bank0
  1824  0E98  1106               	bcf	6,2	;volatile
  1825                           
  1826                           ;main.c: 59: printf("start\r\n");
  1827  0E99  3003               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1828  0E9A  120A  158A  2254  120A  158A  	fcall	_printf
  1829  0E9F                     l3776:	
  1830                           ;main.c: 60: while(1){
  1831                           
  1832                           
  1833                           ;main.c: 74: UBYTE *dData;
  1834                           ;main.c: 75: dData = ReceivePacket_data();
  1835  0E9F  120A  158A  245C  120A  158A  	fcall	_ReceivePacket_data
  1836  0EA4  1283               	bcf	3,5	;RP0=0, select bank0
  1837  0EA5  1303               	bcf	3,6	;RP1=0, select bank0
  1838  0EA6  00E2               	movwf	??_main
  1839  0EA7  0862               	movf	??_main,w
  1840  0EA8  1683               	bsf	3,5	;RP0=1, select bank1
  1841  0EA9  1303               	bcf	3,6	;RP1=0, select bank1
  1842  0EAA  00C1               	movwf	main@dData^(0+128)
  1843                           
  1844                           ;main.c: 81: EEPROM_Write(0x50,0x00,0x00,dData);
  1845  0EAB  01F2               	clrf	EEPROM_Write@high_address
  1846  0EAC  01F3               	clrf	EEPROM_Write@low_address
  1847  0EAD  0841               	movf	main@dData^(0+128),w
  1848  0EAE  1283               	bcf	3,5	;RP0=0, select bank0
  1849  0EAF  1303               	bcf	3,6	;RP1=0, select bank0
  1850  0EB0  00E2               	movwf	??_main
  1851  0EB1  0862               	movf	??_main,w
  1852  0EB2  00F4               	movwf	EEPROM_Write@data
  1853  0EB3  3050               	movlw	80
  1854  0EB4  120A  158A  2340  120A  158A  	fcall	_EEPROM_Write
  1855                           
  1856                           ;main.c: 83: for (UINT i = 0;i < 32;i++){
  1857  0EB9  1683               	bsf	3,5	;RP0=1, select bank1
  1858  0EBA  1303               	bcf	3,6	;RP1=0, select bank1
  1859  0EBB  01BF               	clrf	main@i^(0+128)
  1860  0EBC  01C0               	clrf	(main@i+1)^(0+128)
  1861  0EBD  3000               	movlw	0
  1862  0EBE  0240               	subwf	(main@i+1)^(0+128),w
  1863  0EBF  3020               	movlw	32
  1864  0EC0  1903               	skipnz
  1865  0EC1  023F               	subwf	main@i^(0+128),w
  1866  0EC2  1803               	btfsc	3,0
  1867  0EC3  2EF3               	goto	l3794
  1868  0EC4                     l3786:	
  1869                           
  1870                           ;main.c: 84: printf("%c", dData[i]);
  1871  0EC4  083F               	movf	main@i^(0+128),w
  1872  0EC5  0741               	addwf	main@dData^(0+128),w
  1873  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  1874  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  1875  0EC8  00E2               	movwf	??_main
  1876  0EC9  0862               	movf	??_main,w
  1877  0ECA  0084               	movwf	4
  1878  0ECB  1783               	bsf	3,7	;select IRP bank2
  1879  0ECC  0800               	movf	0,w
  1880  0ECD  00E3               	movwf	??_main+1
  1881  0ECE  01E4               	clrf	??_main+2
  1882  0ECF  0863               	movf	??_main+1,w
  1883  0ED0  00F1               	movwf	?_printf
  1884  0ED1  0864               	movf	??_main+2,w
  1885  0ED2  00F2               	movwf	?_printf+1
  1886  0ED3  3019               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  1887  0ED4  120A  158A  2254  120A  158A  	fcall	_printf
  1888                           
  1889                           ;main.c: 85: dData[i] = 0x00;
  1890  0ED9  1683               	bsf	3,5	;RP0=1, select bank1
  1891  0EDA  1303               	bcf	3,6	;RP1=0, select bank1
  1892  0EDB  083F               	movf	main@i^(0+128),w
  1893  0EDC  0741               	addwf	main@dData^(0+128),w
  1894  0EDD  1283               	bcf	3,5	;RP0=0, select bank0
  1895  0EDE  1303               	bcf	3,6	;RP1=0, select bank0
  1896  0EDF  00E2               	movwf	??_main
  1897  0EE0  0862               	movf	??_main,w
  1898  0EE1  0084               	movwf	4
  1899  0EE2  1783               	bsf	3,7	;select IRP bank2
  1900  0EE3  0180               	clrf	0
  1901  0EE4  3001               	movlw	1
  1902  0EE5  1683               	bsf	3,5	;RP0=1, select bank1
  1903  0EE6  1303               	bcf	3,6	;RP1=0, select bank1
  1904  0EE7  07BF               	addwf	main@i^(0+128),f
  1905  0EE8  1803               	skipnc
  1906  0EE9  0AC0               	incf	(main@i+1)^(0+128),f
  1907  0EEA  3000               	movlw	0
  1908  0EEB  07C0               	addwf	(main@i+1)^(0+128),f
  1909  0EEC  3000               	movlw	0
  1910  0EED  0240               	subwf	(main@i+1)^(0+128),w
  1911  0EEE  3020               	movlw	32
  1912  0EEF  1903               	skipnz
  1913  0EF0  023F               	subwf	main@i^(0+128),w
  1914  0EF1  1C03               	skipc
  1915  0EF2  2EC4               	goto	l3786
  1916  0EF3                     l3794:	
  1917                           
  1918                           ;main.c: 86: }
  1919                           ;main.c: 92: if(dData[0]=='n'){
  1920  0EF3  0841               	movf	main@dData^(0+128),w
  1921  0EF4  0084               	movwf	4
  1922  0EF5  306E               	movlw	110
  1923  0EF6  1783               	bsf	3,7	;select IRP bank2
  1924  0EF7  0600               	xorwf	0,w
  1925  0EF8  1D03               	btfss	3,2
  1926  0EF9  2F0B               	goto	l3800
  1927                           
  1928                           ;main.c: 94: UBYTE NM_wad_header = 0x72;
  1929  0EFA  3072               	movlw	114
  1930  0EFB  1283               	bcf	3,5	;RP0=0, select bank0
  1931  0EFC  1303               	bcf	3,6	;RP1=0, select bank0
  1932  0EFD  00E2               	movwf	??_main
  1933  0EFE  0862               	movf	??_main,w
  1934  0EFF  1683               	bsf	3,5	;RP0=1, select bank1
  1935  0F00  1303               	bcf	3,6	;RP1=0, select bank1
  1936  0F01  00BE               	movwf	main@NM_wad_header^(0+128)
  1937                           
  1938                           ;main.c: 95: NM_waddress(NM_wad_header, 0x00, 0x00);
  1939  0F02  01F1               	clrf	NM_waddress@whigh_address
  1940  0F03  01F2               	clrf	NM_waddress@wlow_address
  1941  0F04  083E               	movf	main@NM_wad_header^(0+128),w
  1942  0F05  120A  158A  202A  120A  158A  	fcall	_NM_waddress
  1943                           
  1944                           ;main.c: 97: }else if(dData[0]=='p'){
  1945  0F0A  2FF0               	goto	l3836
  1946  0F0B                     l3800:	
  1947  0F0B  1683               	bsf	3,5	;RP0=1, select bank1
  1948  0F0C  1303               	bcf	3,6	;RP1=0, select bank1
  1949  0F0D  0841               	movf	main@dData^(0+128),w
  1950  0F0E  0084               	movwf	4
  1951  0F0F  3070               	movlw	112
  1952  0F10  1783               	bsf	3,7	;select IRP bank2
  1953  0F11  0600               	xorwf	0,w
  1954  0F12  1D03               	btfss	3,2
  1955  0F13  2FF0               	goto	l3836
  1956                           
  1957                           ;main.c: 99: RB2 = 1;
  1958  0F14  1283               	bcf	3,5	;RP0=0, select bank0
  1959  0F15  1303               	bcf	3,6	;RP1=0, select bank0
  1960  0F16  1506               	bsf	6,2	;volatile
  1961                           
  1962                           ;main.c: 100: _delay((unsigned long)((500)*(10000000/4000.0)));
  1963  0F17  3007               	movlw	7
  1964  0F18  00E4               	movwf	??_main+2
  1965  0F19  3058               	movlw	88
  1966  0F1A  00E3               	movwf	??_main+1
  1967  0F1B  305E               	movlw	94
  1968  0F1C  00E2               	movwf	??_main
  1969  0F1D                     u3647:	
  1970  0F1D  0BE2               	decfsz	??_main,f
  1971  0F1E  2F1D               	goto	u3647
  1972  0F1F  0BE3               	decfsz	??_main+1,f
  1973  0F20  2F1D               	goto	u3647
  1974  0F21  0BE4               	decfsz	??_main+2,f
  1975  0F22  2F1D               	goto	u3647
  1976  0F23  2F24               	nop2
  1977                           
  1978                           ;main.c: 101: RB2 = 0;
  1979  0F24  1283               	bcf	3,5	;RP0=0, select bank0
  1980  0F25  1303               	bcf	3,6	;RP1=0, select bank0
  1981  0F26  1106               	bcf	6,2	;volatile
  1982                           
  1983                           ;main.c: 102: if(dData[2] == 'r'){
  1984  0F27  1683               	bsf	3,5	;RP0=1, select bank1
  1985  0F28  1303               	bcf	3,6	;RP1=0, select bank1
  1986  0F29  0841               	movf	main@dData^(0+128),w
  1987  0F2A  3E02               	addlw	2
  1988  0F2B  0084               	movwf	4
  1989  0F2C  3072               	movlw	114
  1990  0F2D  1783               	bsf	3,7	;select IRP bank2
  1991  0F2E  0600               	xorwf	0,w
  1992  0F2F  1903               	btfsc	3,2
  1993  0F30  2FD9               	goto	l3832
  1994  0F31  2FF0               	goto	l3836
  1995  0F32                     l3812:	
  1996                           ;main.c: 108: case 'E':
  1997                           
  1998                           ;main.c: 107: switch(dData[3]){
  1999                           
  2000                           
  2001                           ;main.c: 113: Reset_EPS();
  2002  0F32  120A  118A  2007  120A  158A  	fcall	_Reset_EPS
  2003                           
  2004                           ;main.c: 114: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2005  0F37  3040               	movlw	64
  2006  0F38  1283               	bcf	3,5	;RP0=0, select bank0
  2007  0F39  1303               	bcf	3,6	;RP1=0, select bank0
  2008  0F3A  00E4               	movwf	??_main+2
  2009  0F3B  306A               	movlw	106
  2010  0F3C  00E3               	movwf	??_main+1
  2011  0F3D  30D5               	movlw	213
  2012  0F3E  00E2               	movwf	??_main
  2013  0F3F                     u3657:	
  2014  0F3F  0BE2               	decfsz	??_main,f
  2015  0F40  2F3F               	goto	u3657
  2016  0F41  0BE3               	decfsz	??_main+1,f
  2017  0F42  2F3F               	goto	u3657
  2018  0F43  0BE4               	decfsz	??_main+2,f
  2019  0F44  2F3F               	goto	u3657
  2020  0F45  2F46               	nop2
  2021                           
  2022                           ;main.c: 117: int FMTX_Nprg[5] = {8,7,3,0,0};
  2023  0F46  30A0               	movlw	main@FMTX_Nprg& (0+255)
  2024  0F47  0084               	movwf	4
  2025  0F48  30C2               	movlw	low main@F2006
  2026  0F49  1283               	bcf	3,5	;RP0=0, select bank0
  2027  0F4A  1303               	bcf	3,6	;RP1=0, select bank0
  2028  0F4B  00E2               	movwf	??_main
  2029  0F4C  0804               	movf	4,w
  2030  0F4D  00E3               	movwf	??_main+1
  2031  0F4E  300A               	movlw	10
  2032  0F4F  00E4               	movwf	??_main+2
  2033  0F50                     u3570:	
  2034  0F50  0862               	movf	??_main,w
  2035  0F51  0084               	movwf	4
  2036  0F52  1783               	bsf	3,7	;select IRP bank3
  2037  0F53  0800               	movf	0,w
  2038  0F54  00E5               	movwf	??_main+3
  2039  0F55  0AE2               	incf	??_main,f
  2040  0F56  0863               	movf	??_main+1,w
  2041  0F57  0084               	movwf	4
  2042  0F58  1383               	bcf	3,7	;select IRP bank1
  2043  0F59  0865               	movf	??_main+3,w
  2044  0F5A  0080               	movwf	0
  2045  0F5B  0AE3               	incf	??_main+1,f
  2046  0F5C  0BE4               	decfsz	??_main+2,f
  2047  0F5D  2F50               	goto	u3570
  2048                           
  2049                           ;main.c: 118: int CWTX_Nprg[5] = {0,1,7,4,7};
  2050  0F5E  30AA               	movlw	main@CWTX_Nprg& (0+255)
  2051  0F5F  0084               	movwf	4
  2052  0F60  30CC               	movlw	low main@F2008
  2053  0F61  00E2               	movwf	??_main
  2054  0F62  0804               	movf	4,w
  2055  0F63  00E3               	movwf	??_main+1
  2056  0F64  300A               	movlw	10
  2057  0F65  00E4               	movwf	??_main+2
  2058  0F66                     u3580:	
  2059  0F66  0862               	movf	??_main,w
  2060  0F67  0084               	movwf	4
  2061  0F68  1783               	bsf	3,7	;select IRP bank3
  2062  0F69  0800               	movf	0,w
  2063  0F6A  00E5               	movwf	??_main+3
  2064  0F6B  0AE2               	incf	??_main,f
  2065  0F6C  0863               	movf	??_main+1,w
  2066  0F6D  0084               	movwf	4
  2067  0F6E  1383               	bcf	3,7	;select IRP bank1
  2068  0F6F  0865               	movf	??_main+3,w
  2069  0F70  0080               	movwf	0
  2070  0F71  0AE3               	incf	??_main+1,f
  2071  0F72  0BE4               	decfsz	??_main+2,f
  2072  0F73  2F66               	goto	u3580
  2073                           
  2074                           ;main.c: 119: int FMRX_Nprg[5] = {2,4,8,8,7};
  2075  0F74  30B4               	movlw	main@FMRX_Nprg& (0+255)
  2076  0F75  0084               	movwf	4
  2077  0F76  30D6               	movlw	low main@F2010
  2078  0F77  00E2               	movwf	??_main
  2079  0F78  0804               	movf	4,w
  2080  0F79  00E3               	movwf	??_main+1
  2081  0F7A  300A               	movlw	10
  2082  0F7B  00E4               	movwf	??_main+2
  2083  0F7C                     u3590:	
  2084  0F7C  0862               	movf	??_main,w
  2085  0F7D  0084               	movwf	4
  2086  0F7E  1783               	bsf	3,7	;select IRP bank3
  2087  0F7F  0800               	movf	0,w
  2088  0F80  00E5               	movwf	??_main+3
  2089  0F81  0AE2               	incf	??_main,f
  2090  0F82  0863               	movf	??_main+1,w
  2091  0F83  0084               	movwf	4
  2092  0F84  1383               	bcf	3,7	;select IRP bank1
  2093  0F85  0865               	movf	??_main+3,w
  2094  0F86  0080               	movwf	0
  2095  0F87  0AE3               	incf	??_main+1,f
  2096  0F88  0BE4               	decfsz	??_main+2,f
  2097  0F89  2F7C               	goto	u3590
  2098                           
  2099                           ;main.c: 121: FMTX(FMTX_Nref, FMTX_Nprg);
  2100  0F8A  1683               	bsf	3,5	;RP0=1, select bank1
  2101  0F8B  1303               	bcf	3,6	;RP1=0, select bank1
  2102  0F8C  0847               	movf	(_FMTX_Nref+1)^(0+128),w
  2103  0F8D  1283               	bcf	3,5	;RP0=0, select bank0
  2104  0F8E  1303               	bcf	3,6	;RP1=0, select bank0
  2105  0F8F  00DD               	movwf	FMTX@Nref+1
  2106  0F90  1683               	bsf	3,5	;RP0=1, select bank1
  2107  0F91  1303               	bcf	3,6	;RP1=0, select bank1
  2108  0F92  0846               	movf	_FMTX_Nref^(0+128),w
  2109  0F93  1283               	bcf	3,5	;RP0=0, select bank0
  2110  0F94  1303               	bcf	3,6	;RP1=0, select bank0
  2111  0F95  00DC               	movwf	FMTX@Nref
  2112  0F96  30A0               	movlw	(low (main@FMTX_Nprg| 0))& (0+255)
  2113  0F97  00DE               	movwf	FMTX@Nprg
  2114  0F98  3000               	movlw	0
  2115  0F99  00DF               	movwf	FMTX@Nprg+1
  2116  0F9A  120A  158A  213A  120A  158A  	fcall	_FMTX
  2117                           
  2118                           ;main.c: 122: CWTX(CWTX_Nref, CWTX_Nprg);
  2119  0F9F  1683               	bsf	3,5	;RP0=1, select bank1
  2120  0FA0  1303               	bcf	3,6	;RP1=0, select bank1
  2121  0FA1  0843               	movf	(_CWTX_Nref+1)^(0+128),w
  2122  0FA2  1283               	bcf	3,5	;RP0=0, select bank0
  2123  0FA3  1303               	bcf	3,6	;RP1=0, select bank0
  2124  0FA4  00DD               	movwf	CWTX@Nref+1
  2125  0FA5  1683               	bsf	3,5	;RP0=1, select bank1
  2126  0FA6  1303               	bcf	3,6	;RP1=0, select bank1
  2127  0FA7  0842               	movf	_CWTX_Nref^(0+128),w
  2128  0FA8  1283               	bcf	3,5	;RP0=0, select bank0
  2129  0FA9  1303               	bcf	3,6	;RP1=0, select bank0
  2130  0FAA  00DC               	movwf	CWTX@Nref
  2131  0FAB  30AA               	movlw	(low (main@CWTX_Nprg| 0))& (0+255)
  2132  0FAC  00DE               	movwf	CWTX@Nprg
  2133  0FAD  3000               	movlw	0
  2134  0FAE  00DF               	movwf	CWTX@Nprg+1
  2135  0FAF  120A  158A  20E2  120A  158A  	fcall	_CWTX
  2136                           
  2137                           ;main.c: 123: FMRX(FMRX_Nref, FMRX_Nprg);
  2138  0FB4  1683               	bsf	3,5	;RP0=1, select bank1
  2139  0FB5  1303               	bcf	3,6	;RP1=0, select bank1
  2140  0FB6  0845               	movf	(_FMRX_Nref+1)^(0+128),w
  2141  0FB7  1283               	bcf	3,5	;RP0=0, select bank0
  2142  0FB8  1303               	bcf	3,6	;RP1=0, select bank0
  2143  0FB9  00DD               	movwf	FMRX@Nref+1
  2144  0FBA  1683               	bsf	3,5	;RP0=1, select bank1
  2145  0FBB  1303               	bcf	3,6	;RP1=0, select bank1
  2146  0FBC  0844               	movf	_FMRX_Nref^(0+128),w
  2147  0FBD  1283               	bcf	3,5	;RP0=0, select bank0
  2148  0FBE  1303               	bcf	3,6	;RP1=0, select bank0
  2149  0FBF  00DC               	movwf	FMRX@Nref
  2150  0FC0  30B4               	movlw	(low (main@FMRX_Nprg| 0))& (0+255)
  2151  0FC1  00DE               	movwf	FMRX@Nprg
  2152  0FC2  3000               	movlw	0
  2153  0FC3  00DF               	movwf	FMRX@Nprg+1
  2154  0FC4  120A  158A  210E  120A  158A  	fcall	_FMRX
  2155                           
  2156                           ;main.c: 124: _delay((unsigned long)((500)*(10000000/4000.0)));
  2157  0FC9  3007               	movlw	7
  2158  0FCA  1283               	bcf	3,5	;RP0=0, select bank0
  2159  0FCB  1303               	bcf	3,6	;RP1=0, select bank0
  2160  0FCC  00E4               	movwf	??_main+2
  2161  0FCD  3058               	movlw	88
  2162  0FCE  00E3               	movwf	??_main+1
  2163  0FCF  305E               	movlw	94
  2164  0FD0  00E2               	movwf	??_main
  2165  0FD1                     u3667:	
  2166  0FD1  0BE2               	decfsz	??_main,f
  2167  0FD2  2FD1               	goto	u3667
  2168  0FD3  0BE3               	decfsz	??_main+1,f
  2169  0FD4  2FD1               	goto	u3667
  2170  0FD5  0BE4               	decfsz	??_main+2,f
  2171  0FD6  2FD1               	goto	u3667
  2172  0FD7  2FD8               	nop2
  2173                           
  2174                           ;main.c: 141: }
  2175                           
  2176                           ;main.c: 140: break;
  2177                           
  2178                           ;main.c: 138: default:
  2179                           
  2180                           ;main.c: 137: break;
  2181                           
  2182                           ;main.c: 135: case 'T':
  2183                           
  2184                           ;main.c: 134: break;
  2185                           
  2186                           ;main.c: 132: case 'N':
  2187                           
  2188                           ;main.c: 131: break;
  2189                           
  2190                           ;main.c: 129: case '3':
  2191                           
  2192                           ;main.c: 128: break;
  2193                           
  2194                           ;main.c: 126: case 'I':
  2195                           
  2196                           ;main.c: 125: break;
  2197  0FD8  2FF0               	goto	l3836
  2198  0FD9                     l3832:	
  2199  0FD9  1683               	bsf	3,5	;RP0=1, select bank1
  2200  0FDA  1303               	bcf	3,6	;RP1=0, select bank1
  2201  0FDB  0841               	movf	main@dData^(0+128),w
  2202  0FDC  3E03               	addlw	3
  2203  0FDD  0084               	movwf	4
  2204  0FDE  1783               	bsf	3,7	;select IRP bank2
  2205  0FDF  0800               	movf	0,w
  2206                           
  2207                           ; Switch size 1, requested type "space"
  2208                           ; Number of cases is 5, Range of values is 51 to 84
  2209                           ; switch strategies available:
  2210                           ; Name         Instructions Cycles
  2211                           ; simple_byte           16     9 (average)
  2212                           ; direct_byte          113    11 (fixed)
  2213                           ; jumptable            263     9 (fixed)
  2214                           ;	Chosen strategy is simple_byte
  2215  0FE0  3A33               	xorlw	51	; case 51
  2216  0FE1  1903               	skipnz
  2217  0FE2  2FF0               	goto	l3836
  2218  0FE3  3A76               	xorlw	118	; case 69
  2219  0FE4  1903               	skipnz
  2220  0FE5  2F32               	goto	l3812
  2221  0FE6  3A0C               	xorlw	12	; case 73
  2222  0FE7  1903               	skipnz
  2223  0FE8  2FF0               	goto	l3836
  2224  0FE9  3A07               	xorlw	7	; case 78
  2225  0FEA  1903               	skipnz
  2226  0FEB  2FF0               	goto	l3836
  2227  0FEC  3A1A               	xorlw	26	; case 84
  2228  0FED  1903               	skipnz
  2229  0FEE  2FF0               	goto	l3836
  2230  0FEF  2FF0               	goto	l3836
  2231  0FF0                     l3836:	
  2232                           ;main.c: 143: }else if(dData[2] == 't'){
  2233                           
  2234                           
  2235                           ;main.c: 145: }
  2236                           ;main.c: 146: }
  2237                           ;main.c: 190: _delay((unsigned long)((500)*(10000000/4000.0)));
  2238  0FF0  3007               	movlw	7
  2239  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  2240  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
  2241  0FF3  00E4               	movwf	??_main+2
  2242  0FF4  3058               	movlw	88
  2243  0FF5  00E3               	movwf	??_main+1
  2244  0FF6  305E               	movlw	94
  2245  0FF7  00E2               	movwf	??_main
  2246  0FF8                     u3677:	
  2247  0FF8  0BE2               	decfsz	??_main,f
  2248  0FF9  2FF8               	goto	u3677
  2249  0FFA  0BE3               	decfsz	??_main+1,f
  2250  0FFB  2FF8               	goto	u3677
  2251  0FFC  0BE4               	decfsz	??_main+2,f
  2252  0FFD  2FF8               	goto	u3677
  2253  0FFE  2FFF               	nop2
  2254  0FFF  2E9F               	goto	l3776
  2255  1000                     __end_of_main:	
  2256                           ;main.c: 191: }
  2257                           ;main.c: 192: return;
  2258                           
  2259                           
  2260                           	psect	text1
  2261  0A54                     __ptext1:	
  2262 ;; *************** function _printf *****************
  2263 ;; Defined at:
  2264 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;  f               1    wreg     PTR const unsigned char 
  2267 ;;		 -> STR_16(3), STR_15(8), 
  2268 ;; Auto vars:     Size  Location     Type
  2269 ;;  f               1    6[COMMON] PTR const unsigned char 
  2270 ;;		 -> STR_16(3), STR_15(8), 
  2271 ;;  tmpval          4    0        struct .
  2272 ;;  cp              2    0        PTR const unsigned char 
  2273 ;;  len             2    0        unsigned int 
  2274 ;;  val             2    0        unsigned int 
  2275 ;;  c               1    7[COMMON] char 
  2276 ;;  ap              1    5[COMMON] PTR void [1]
  2277 ;;		 -> ?_printf(2), 
  2278 ;;  flag            1    4[COMMON] unsigned char 
  2279 ;;  prec            1    0        char 
  2280 ;; Return value:  Size  Location     Type
  2281 ;;                  2    1[COMMON] int 
  2282 ;; Registers used:
  2283 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2284 ;; Tracked objects:
  2285 ;;		On entry : 0/0
  2286 ;;		On exit  : 0/0
  2287 ;;		Unchanged: 0/0
  2288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2289 ;;      Params:         2       0       0       0       0
  2290 ;;      Locals:         4       0       0       0       0
  2291 ;;      Temps:          1       0       0       0       0
  2292 ;;      Totals:         7       0       0       0       0
  2293 ;;Total ram usage:        7 bytes
  2294 ;; Hardware stack levels used:    1
  2295 ;; Hardware stack levels required when called:    1
  2296 ;; This function calls:
  2297 ;;		_putch
  2298 ;; This function is called by:
  2299 ;;		_main
  2300 ;; This function uses a non-reentrant model
  2301 ;;
  2302                           
  2303                           
  2304                           ;psect for function _printf
  2305  0A54                     _printf:	
  2306                           
  2307                           ;incstack = 0
  2308                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2309                           ;printf@f stored from wreg
  2310  0A54  00F6               	movwf	printf@f
  2311                           
  2312                           ;doprnt.c: 466: va_list ap;
  2313                           ;doprnt.c: 499: signed char c;
  2314                           ;doprnt.c: 506: signed char prec;
  2315                           ;doprnt.c: 508: unsigned char flag;
  2316                           ;doprnt.c: 523: union {
  2317                           ;doprnt.c: 524: unsigned long vd;
  2318                           ;doprnt.c: 525: double integ;
  2319                           ;doprnt.c: 526: } tmpval;
  2320                           ;doprnt.c: 528: unsigned int val;
  2321                           ;doprnt.c: 529: unsigned len;
  2322                           ;doprnt.c: 530: const char * cp;
  2323                           ;doprnt.c: 533: *ap = __va_start();
  2324  0A55  3071               	movlw	(low (?_printf| 0))& (0+255)
  2325  0A56  00F3               	movwf	??_printf
  2326  0A57  0873               	movf	??_printf,w
  2327  0A58  00F5               	movwf	printf@ap
  2328  0A59                     l3492:	
  2329                           ;doprnt.c: 1422: {
  2330                           
  2331                           ;doprnt.c: 536: while(c = *f++) {
  2332                           
  2333  0A59  3001               	movlw	1
  2334  0A5A  07F6               	addwf	printf@f,f
  2335  0A5B  30FF               	movlw	-1
  2336  0A5C  0776               	addwf	printf@f,w
  2337  0A5D  0084               	movwf	4
  2338  0A5E  120A  158A  2000  120A  158A  	fcall	stringdir
  2339  0A63  00F3               	movwf	??_printf
  2340  0A64  0873               	movf	??_printf,w
  2341  0A65  00F7               	movwf	printf@c
  2342  0A66  0877               	movf	printf@c,w
  2343  0A67  1903               	btfsc	3,2
  2344  0A68  0008               	return
  2345                           
  2346                           ;doprnt.c: 538: if(c != '%')
  2347  0A69  3025               	movlw	37
  2348  0A6A  0677               	xorwf	printf@c,w
  2349  0A6B  1903               	btfsc	3,2
  2350  0A6C  2A74               	goto	l3480
  2351                           
  2352                           ;doprnt.c: 540: {
  2353                           ;doprnt.c: 541: (putch(c) );
  2354  0A6D  0877               	movf	printf@c,w
  2355  0A6E  160A  118A  27DF  120A  158A  	fcall	_putch
  2356                           
  2357                           ;doprnt.c: 542: continue;
  2358  0A73  2A59               	goto	l3492
  2359  0A74                     l3480:	
  2360                           
  2361                           ;doprnt.c: 543: }
  2362                           ;doprnt.c: 548: flag = 0;
  2363  0A74  01F4               	clrf	printf@flag
  2364                           
  2365                           ;doprnt.c: 635: switch(c = *f++) {
  2366  0A75  2A87               	goto	l3490
  2367  0A76                     l3482:	
  2368                           ;doprnt.c: 784: case 'c':
  2369                           
  2370                           ;doprnt.c: 638: goto alldone;
  2371                           
  2372                           ;doprnt.c: 637: case 0:
  2373                           
  2374                           
  2375                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2376  0A76  0875               	movf	printf@ap,w
  2377  0A77  0084               	movwf	4
  2378  0A78  0800               	movf	0,w
  2379  0A79  00F3               	movwf	??_printf
  2380  0A7A  0873               	movf	??_printf,w
  2381  0A7B  00F7               	movwf	printf@c
  2382  0A7C  3002               	movlw	2
  2383  0A7D  00F3               	movwf	??_printf
  2384  0A7E  0873               	movf	??_printf,w
  2385  0A7F  07F5               	addwf	printf@ap,f
  2386  0A80                     l3486:	
  2387                           ;doprnt.c: 802: default:
  2388                           
  2389                           
  2390                           ;doprnt.c: 809: (putch(c) );
  2391  0A80  0877               	movf	printf@c,w
  2392  0A81  160A  118A  27DF  120A  158A  	fcall	_putch
  2393                           
  2394                           ;doprnt.c: 822: }
  2395                           
  2396                           ;doprnt.c: 810: continue;
  2397  0A86  2A59               	goto	l3492
  2398  0A87                     l3490:	
  2399  0A87  3001               	movlw	1
  2400  0A88  07F6               	addwf	printf@f,f
  2401  0A89  30FF               	movlw	-1
  2402  0A8A  0776               	addwf	printf@f,w
  2403  0A8B  0084               	movwf	4
  2404  0A8C  120A  158A  2000  120A  158A  	fcall	stringdir
  2405  0A91  00F7               	movwf	printf@c
  2406                           
  2407                           ; Switch size 1, requested type "space"
  2408                           ; Number of cases is 2, Range of values is 0 to 99
  2409                           ; switch strategies available:
  2410                           ; Name         Instructions Cycles
  2411                           ; simple_byte            7     4 (average)
  2412                           ; jumptable            260     6 (fixed)
  2413                           ;	Chosen strategy is simple_byte
  2414  0A92  3A00               	xorlw	0	; case 0
  2415  0A93  1903               	skipnz
  2416  0A94  2A9A               	goto	l652
  2417  0A95  3A63               	xorlw	99	; case 99
  2418  0A96  1903               	skipnz
  2419  0A97  2A76               	goto	l3482
  2420  0A98  2A80               	goto	l3486
  2421  0A99  2A59               	goto	l3492
  2422  0A9A                     l652:	
  2423                           ;doprnt.c: 1540: return 0;
  2424                           ;	Return value of _printf is never used
  2425                           
  2426                           ;doprnt.c: 1469: }
  2427                           ;doprnt.c: 1533: }
  2428                           ;doprnt.c: 1535: alldone:
  2429                           
  2430  0A9A  0008               	return
  2431  0A9B                     __end_of_printf:	
  2432                           
  2433                           	psect	text2
  2434  0007                     __ptext2:	
  2435 ;; *************** function _Reset_EPS *****************
  2436 ;; Defined at:
  2437 ;;		line 19 in file "EPS.c"
  2438 ;; Parameters:    Size  Location     Type
  2439 ;;		None
  2440 ;; Auto vars:     Size  Location     Type
  2441 ;;		None
  2442 ;; Return value:  Size  Location     Type
  2443 ;;                  1    wreg      void 
  2444 ;; Registers used:
  2445 ;;		wreg
  2446 ;; Tracked objects:
  2447 ;;		On entry : 0/0
  2448 ;;		On exit  : 0/0
  2449 ;;		Unchanged: 0/0
  2450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2451 ;;      Params:         0       0       0       0       0
  2452 ;;      Locals:         0       0       0       0       0
  2453 ;;      Temps:          3       0       0       0       0
  2454 ;;      Totals:         3       0       0       0       0
  2455 ;;Total ram usage:        3 bytes
  2456 ;; Hardware stack levels used:    1
  2457 ;; This function calls:
  2458 ;;		Nothing
  2459 ;; This function is called by:
  2460 ;;		_main
  2461 ;; This function uses a non-reentrant model
  2462 ;;
  2463                           
  2464                           
  2465                           ;psect for function _Reset_EPS
  2466  0007                     _Reset_EPS:	
  2467                           
  2468                           ;EPS.c: 20: RB4 = 1;
  2469                           
  2470                           ;incstack = 0
  2471                           ; Regs used in _Reset_EPS: [wreg]
  2472  0007  1283               	bcf	3,5	;RP0=0, select bank0
  2473  0008  1303               	bcf	3,6	;RP1=0, select bank0
  2474  0009  1606               	bsf	6,4	;volatile
  2475                           
  2476                           ;EPS.c: 21: RA1 = 1;
  2477  000A  1485               	bsf	5,1	;volatile
  2478                           
  2479                           ;EPS.c: 22: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2480  000B  3040               	movlw	64
  2481  000C  00F2               	movwf	??_Reset_EPS+2
  2482  000D  306A               	movlw	106
  2483  000E  00F1               	movwf	??_Reset_EPS+1
  2484  000F  30D5               	movlw	213
  2485  0010  00F0               	movwf	??_Reset_EPS
  2486  0011                     u3687:	
  2487  0011  0BF0               	decfsz	??_Reset_EPS,f
  2488  0012  2811               	goto	u3687
  2489  0013  0BF1               	decfsz	??_Reset_EPS+1,f
  2490  0014  2811               	goto	u3687
  2491  0015  0BF2               	decfsz	??_Reset_EPS+2,f
  2492  0016  2811               	goto	u3687
  2493  0017  2818               	nop2
  2494                           
  2495                           ;EPS.c: 23: RB4 = 0;
  2496  0018  1283               	bcf	3,5	;RP0=0, select bank0
  2497  0019  1303               	bcf	3,6	;RP1=0, select bank0
  2498  001A  1206               	bcf	6,4	;volatile
  2499                           
  2500                           ;EPS.c: 24: RA1 = 0;
  2501  001B  1085               	bcf	5,1	;volatile
  2502                           
  2503                           ;EPS.c: 25: _delay((unsigned long)((500)*(10000000/4000.0)));
  2504  001C  3007               	movlw	7
  2505  001D  00F2               	movwf	??_Reset_EPS+2
  2506  001E  3058               	movlw	88
  2507  001F  00F1               	movwf	??_Reset_EPS+1
  2508  0020  305E               	movlw	94
  2509  0021  00F0               	movwf	??_Reset_EPS
  2510  0022                     u3697:	
  2511  0022  0BF0               	decfsz	??_Reset_EPS,f
  2512  0023  2822               	goto	u3697
  2513  0024  0BF1               	decfsz	??_Reset_EPS+1,f
  2514  0025  2822               	goto	u3697
  2515  0026  0BF2               	decfsz	??_Reset_EPS+2,f
  2516  0027  2822               	goto	u3697
  2517  0028  2829               	nop2
  2518  0029  0008               	return
  2519  002A                     __end_of_Reset_EPS:	
  2520                           
  2521                           	psect	text3
  2522  0C5C                     __ptext3:	
  2523 ;; *************** function _ReceivePacket_data *****************
  2524 ;; Defined at:
  2525 ;;		line 359 in file "decode_AX25.c"
  2526 ;; Parameters:    Size  Location     Type
  2527 ;;		None
  2528 ;; Auto vars:     Size  Location     Type
  2529 ;;  i               2   31[BANK0 ] unsigned int 
  2530 ;;  fcschecker      2   29[BANK0 ] unsigned int 
  2531 ;; Return value:  Size  Location     Type
  2532 ;;                  1    wreg      PTR unsigned char 
  2533 ;; Registers used:
  2534 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2535 ;; Tracked objects:
  2536 ;;		On entry : 0/0
  2537 ;;		On exit  : 0/0
  2538 ;;		Unchanged: 0/0
  2539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2540 ;;      Params:         0       0       0       0       0
  2541 ;;      Locals:         0       4       0       0       0
  2542 ;;      Temps:          2       0       0       0       0
  2543 ;;      Totals:         2       4       0       0       0
  2544 ;;Total ram usage:        6 bytes
  2545 ;; Hardware stack levels used:    1
  2546 ;; Hardware stack levels required when called:    2
  2547 ;; This function calls:
  2548 ;;		_fcscheck
  2549 ;;		_getdata
  2550 ;;		_waitFlag
  2551 ;; This function is called by:
  2552 ;;		_main
  2553 ;; This function uses a non-reentrant model
  2554 ;;
  2555                           
  2556                           
  2557                           ;psect for function _ReceivePacket_data
  2558  0C5C                     _ReceivePacket_data:	
  2559                           
  2560                           ;decode_AX25.c: 360: UINT fcschecker;
  2561                           ;decode_AX25.c: 363: waitFlag();
  2562                           
  2563                           ;incstack = 0
  2564                           ; Regs used in _ReceivePacket_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2565  0C5C  120A  118A  2327  120A  158A  	fcall	_waitFlag
  2566                           
  2567                           ;decode_AX25.c: 365: getdata();
  2568  0C61  120A  158A  23FB  120A  158A  	fcall	_getdata
  2569                           
  2570                           ;decode_AX25.c: 367: fcschecker = fcscheck();
  2571  0C66  120A  118A  202A  120A  158A  	fcall	_fcscheck
  2572  0C6B  0871               	movf	?_fcscheck+1,w
  2573  0C6C  1283               	bcf	3,5	;RP0=0, select bank0
  2574  0C6D  1303               	bcf	3,6	;RP1=0, select bank0
  2575  0C6E  00BE               	movwf	ReceivePacket_data@fcschecker+1
  2576  0C6F  0870               	movf	?_fcscheck,w
  2577  0C70  00BD               	movwf	ReceivePacket_data@fcschecker
  2578                           
  2579                           ;decode_AX25.c: 369: if(fcschecker == 1){
  2580  0C71  033D               	decf	ReceivePacket_data@fcschecker,w
  2581  0C72  043E               	iorwf	ReceivePacket_data@fcschecker+1,w
  2582  0C73  1D03               	btfss	3,2
  2583  0C74  2CBB               	goto	l3388
  2584                           
  2585                           ;decode_AX25.c: 370: for(UINT i=0; i<commandSize; i++){
  2586  0C75  01BF               	clrf	ReceivePacket_data@i
  2587  0C76  01C0               	clrf	ReceivePacket_data@i+1
  2588  0C77  3001               	movlw	low (_commandSize-__stringbase)
  2589  0C78  0084               	movwf	4
  2590  0C79  120A  158A  2000  120A  158A  	fcall	stringdir
  2591  0C7E  00FA               	movwf	??_ReceivePacket_data
  2592  0C7F  120A  158A  2000  120A  158A  	fcall	stringdir
  2593  0C84  00FB               	movwf	??_ReceivePacket_data+1
  2594  0C85  087B               	movf	??_ReceivePacket_data+1,w
  2595  0C86  0240               	subwf	ReceivePacket_data@i+1,w
  2596  0C87  1D03               	skipz
  2597  0C88  2C8B               	goto	u3115
  2598  0C89  087A               	movf	??_ReceivePacket_data,w
  2599  0C8A  023F               	subwf	ReceivePacket_data@i,w
  2600  0C8B                     u3115:	
  2601  0C8B  1803               	btfsc	3,0
  2602  0C8C  2CB5               	goto	l3380
  2603  0C8D                     l3374:	
  2604                           
  2605                           ;decode_AX25.c: 371: dData[i] = dPacket[i+20];
  2606  0C8D  083F               	movf	ReceivePacket_data@i,w
  2607  0C8E  3E14               	addlw	20
  2608  0C8F  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2609  0C90  0084               	movwf	4
  2610  0C91  1783               	bsf	3,7	;select IRP bank3
  2611  0C92  0800               	movf	0,w
  2612  0C93  00FA               	movwf	??_ReceivePacket_data
  2613  0C94  083F               	movf	ReceivePacket_data@i,w
  2614  0C95  3E30               	addlw	(low (_dData| (0+256)))& (0+255)
  2615  0C96  0084               	movwf	4
  2616  0C97  087A               	movf	??_ReceivePacket_data,w
  2617  0C98  0080               	movwf	0
  2618  0C99  3001               	movlw	1
  2619  0C9A  07BF               	addwf	ReceivePacket_data@i,f
  2620  0C9B  1803               	skipnc
  2621  0C9C  0AC0               	incf	ReceivePacket_data@i+1,f
  2622  0C9D  3000               	movlw	0
  2623  0C9E  07C0               	addwf	ReceivePacket_data@i+1,f
  2624  0C9F  3001               	movlw	low (_commandSize-__stringbase)
  2625  0CA0  0084               	movwf	4
  2626  0CA1  120A  158A  2000  120A  158A  	fcall	stringdir
  2627  0CA6  00FA               	movwf	??_ReceivePacket_data
  2628  0CA7  120A  158A  2000  120A  158A  	fcall	stringdir
  2629  0CAC  00FB               	movwf	??_ReceivePacket_data+1
  2630  0CAD  087B               	movf	??_ReceivePacket_data+1,w
  2631  0CAE  0240               	subwf	ReceivePacket_data@i+1,w
  2632  0CAF  1D03               	skipz
  2633  0CB0  2CB3               	goto	u3125
  2634  0CB1  087A               	movf	??_ReceivePacket_data,w
  2635  0CB2  023F               	subwf	ReceivePacket_data@i,w
  2636  0CB3                     u3125:	
  2637  0CB3  1C03               	skipc
  2638  0CB4  2C8D               	goto	l3374
  2639  0CB5                     l3380:	
  2640                           
  2641                           ;decode_AX25.c: 372: }
  2642                           ;decode_AX25.c: 373: dPacketnum = 0;
  2643  0CB5  01E6               	clrf	_dPacketnum
  2644  0CB6  01E7               	clrf	_dPacketnum+1
  2645                           
  2646                           ;decode_AX25.c: 374: rcv_state = 0;
  2647  0CB7  01EA               	clrf	_rcv_state
  2648  0CB8  01EB               	clrf	_rcv_state+1
  2649                           
  2650                           ;decode_AX25.c: 375: return dData;
  2651  0CB9  3030               	movlw	(low (_dData| (0+256)))& (0+255)
  2652                           
  2653                           ;decode_AX25.c: 376: }else{
  2654  0CBA  0008               	return
  2655  0CBB                     l3388:	
  2656                           
  2657                           ;decode_AX25.c: 377: dPacketnum = 0;
  2658  0CBB  01E6               	clrf	_dPacketnum
  2659  0CBC  01E7               	clrf	_dPacketnum+1
  2660                           
  2661                           ;decode_AX25.c: 378: rcv_state = 0;
  2662  0CBD  01EA               	clrf	_rcv_state
  2663  0CBE  01EB               	clrf	_rcv_state+1
  2664                           
  2665                           ;decode_AX25.c: 379: return 0x00;
  2666  0CBF  3000               	movlw	0
  2667  0CC0  0008               	return
  2668  0CC1                     __end_of_ReceivePacket_data:	
  2669                           
  2670                           	psect	text4
  2671  0327                     __ptext4:	
  2672 ;; *************** function _waitFlag *****************
  2673 ;; Defined at:
  2674 ;;		line 54 in file "decode_AX25.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;		None
  2677 ;; Auto vars:     Size  Location     Type
  2678 ;;  j               2   24[BANK0 ] unsigned int 
  2679 ;;  j               2   10[BANK0 ] unsigned int 
  2680 ;;  j               2   22[BANK0 ] unsigned int 
  2681 ;;  j               2    8[BANK0 ] unsigned int 
  2682 ;;  j               2   20[BANK0 ] unsigned int 
  2683 ;;  j               2    6[BANK0 ] unsigned int 
  2684 ;;  j               2   18[BANK0 ] unsigned int 
  2685 ;;  j               2    4[BANK0 ] unsigned int 
  2686 ;;  j               2   16[BANK0 ] unsigned int 
  2687 ;;  j               2    2[BANK0 ] unsigned int 
  2688 ;;  i               2    0[BANK0 ] unsigned int 
  2689 ;;  j               2   14[BANK0 ] unsigned int 
  2690 ;;  j               2   12[BANK0 ] unsigned int 
  2691 ;;  flag_judge      2   26[BANK0 ] unsigned int 
  2692 ;;  buf             1   28[BANK0 ] unsigned char 
  2693 ;; Return value:  Size  Location     Type
  2694 ;;                  1    wreg      void 
  2695 ;; Registers used:
  2696 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2697 ;; Tracked objects:
  2698 ;;		On entry : 0/0
  2699 ;;		On exit  : 0/0
  2700 ;;		Unchanged: 0/0
  2701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2702 ;;      Params:         0       0       0       0       0
  2703 ;;      Locals:         0      29       0       0       0
  2704 ;;      Temps:          4       0       0       0       0
  2705 ;;      Totals:         4      29       0       0       0
  2706 ;;Total ram usage:       33 bytes
  2707 ;; Hardware stack levels used:    1
  2708 ;; Hardware stack levels required when called:    1
  2709 ;; This function calls:
  2710 ;;		_getbit
  2711 ;; This function is called by:
  2712 ;;		_ReceivePacket_data
  2713 ;;		_ReceivePacket
  2714 ;; This function uses a non-reentrant model
  2715 ;;
  2716                           
  2717                           
  2718                           ;psect for function _waitFlag
  2719  0327                     _waitFlag:	
  2720                           
  2721                           ;decode_AX25.c: 55: UINT flag_judge;
  2722                           ;decode_AX25.c: 56: UBYTE buf = 0xff;
  2723                           
  2724                           ;incstack = 0
  2725                           ; Regs used in _waitFlag: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2726  0327  30FF               	movlw	255
  2727  0328  00F6               	movwf	??_waitFlag
  2728  0329  0876               	movf	??_waitFlag,w
  2729  032A  1283               	bcf	3,5	;RP0=0, select bank0
  2730  032B  1303               	bcf	3,6	;RP1=0, select bank0
  2731  032C  00BC               	movwf	waitFlag@buf
  2732  032D                     L6:	
  2733                           
  2734                           ;decode_AX25.c: 271: rcv_state = 0;
  2735  032D  01EA               	clrf	_rcv_state
  2736  032E  01EB               	clrf	_rcv_state+1
  2737  032F                     l3072:	
  2738  032F  3000               	movlw	0
  2739  0330  026B               	subwf	_rcv_state+1,w
  2740  0331  3002               	movlw	2
  2741  0332  1903               	skipnz
  2742  0333  026A               	subwf	_rcv_state,w
  2743  0334  1803               	btfsc	3,0
  2744  0335  0008               	return
  2745  0336                     l2706:	
  2746                           ;decode_AX25.c: 59: while(buf != 0x7e){
  2747                           
  2748                           ;decode_AX25.c: 58: while(rcv_state < 2){
  2749                           
  2750                           ;decode_AX25.c: 57: rcv_state = 0;
  2751                           
  2752  0336  307E               	movlw	126
  2753  0337  063C               	xorwf	waitFlag@buf,w
  2754  0338  1903               	btfsc	3,2
  2755  0339  2B86               	goto	l2728
  2756                           
  2757                           ;decode_AX25.c: 60: flag_judge = getbit();
  2758  033A  120A  158A  229B  120A  118A  	fcall	_getbit
  2759  033F  0871               	movf	?_getbit+1,w
  2760  0340  1283               	bcf	3,5	;RP0=0, select bank0
  2761  0341  1303               	bcf	3,6	;RP1=0, select bank0
  2762  0342  00BB               	movwf	waitFlag@flag_judge+1
  2763  0343  0870               	movf	?_getbit,w
  2764  0344  00BA               	movwf	waitFlag@flag_judge
  2765                           
  2766                           ;decode_AX25.c: 61: buf = buf << 1;
  2767  0345  083C               	movf	waitFlag@buf,w
  2768  0346  00F6               	movwf	??_waitFlag
  2769  0347  0776               	addwf	??_waitFlag,w
  2770  0348  00F7               	movwf	??_waitFlag+1
  2771  0349  0877               	movf	??_waitFlag+1,w
  2772  034A  00BC               	movwf	waitFlag@buf
  2773                           
  2774                           ;decode_AX25.c: 63: buf = buf | 0x00;
  2775  034B  083A               	movf	waitFlag@flag_judge,w
  2776  034C  043B               	iorwf	waitFlag@flag_judge+1,w
  2777  034D  1903               	btfsc	3,2
  2778  034E  2B36               	goto	l2706
  2779                           
  2780                           ;decode_AX25.c: 65: buf = buf | 0x01;
  2781                           
  2782                           ;decode_AX25.c: 64: }else{
  2783  034F  083C               	movf	waitFlag@buf,w
  2784  0350  3801               	iorlw	1
  2785  0351  00F6               	movwf	??_waitFlag
  2786  0352  0876               	movf	??_waitFlag,w
  2787  0353  00BC               	movwf	waitFlag@buf
  2788  0354  2B36               	goto	l2706
  2789  0355                     l2708:	
  2790                           ;decode_AX25.c: 66: }
  2791                           ;decode_AX25.c: 67: }
  2792                           ;decode_AX25.c: 71: while(buf == 0x7e){
  2793                           
  2794                           
  2795                           ;decode_AX25.c: 72: for(UINT i=0;i<8;i++){
  2796  0355  01A0               	clrf	waitFlag@i
  2797  0356  01A1               	clrf	waitFlag@i+1
  2798  0357  3000               	movlw	0
  2799  0358  0221               	subwf	waitFlag@i+1,w
  2800  0359  3008               	movlw	8
  2801  035A  1903               	skipnz
  2802  035B  0220               	subwf	waitFlag@i,w
  2803  035C  1803               	btfsc	3,0
  2804  035D  2B86               	goto	l2728
  2805  035E                     l2714:	
  2806                           
  2807                           ;decode_AX25.c: 73: flag_judge = getbit();
  2808  035E  120A  158A  229B  120A  118A  	fcall	_getbit
  2809  0363  0871               	movf	?_getbit+1,w
  2810  0364  1283               	bcf	3,5	;RP0=0, select bank0
  2811  0365  1303               	bcf	3,6	;RP1=0, select bank0
  2812  0366  00BB               	movwf	waitFlag@flag_judge+1
  2813  0367  0870               	movf	?_getbit,w
  2814  0368  00BA               	movwf	waitFlag@flag_judge
  2815                           
  2816                           ;decode_AX25.c: 74: buf = buf >> 1;
  2817  0369  083C               	movf	waitFlag@buf,w
  2818  036A  00F6               	movwf	??_waitFlag
  2819  036B  1003               	clrc
  2820  036C  0C76               	rrf	??_waitFlag,w
  2821  036D  00F7               	movwf	??_waitFlag+1
  2822  036E  0877               	movf	??_waitFlag+1,w
  2823  036F  00BC               	movwf	waitFlag@buf
  2824                           
  2825                           ;decode_AX25.c: 76: buf = buf | 0x00;
  2826  0370  083A               	movf	waitFlag@flag_judge,w
  2827  0371  043B               	iorwf	waitFlag@flag_judge+1,w
  2828  0372  1903               	btfsc	3,2
  2829  0373  2B79               	goto	l2724
  2830                           
  2831                           ;decode_AX25.c: 78: buf = buf | 0x80;
  2832                           
  2833                           ;decode_AX25.c: 77: }else{
  2834  0374  083C               	movf	waitFlag@buf,w
  2835  0375  3880               	iorlw	128
  2836  0376  00F6               	movwf	??_waitFlag
  2837  0377  0876               	movf	??_waitFlag,w
  2838  0378  00BC               	movwf	waitFlag@buf
  2839  0379                     l2724:	
  2840  0379  3001               	movlw	1
  2841  037A  07A0               	addwf	waitFlag@i,f
  2842  037B  1803               	skipnc
  2843  037C  0AA1               	incf	waitFlag@i+1,f
  2844  037D  3000               	movlw	0
  2845  037E  07A1               	addwf	waitFlag@i+1,f
  2846  037F  3000               	movlw	0
  2847  0380  0221               	subwf	waitFlag@i+1,w
  2848  0381  3008               	movlw	8
  2849  0382  1903               	skipnz
  2850  0383  0220               	subwf	waitFlag@i,w
  2851  0384  1C03               	skipc
  2852  0385  2B5E               	goto	l2714
  2853  0386                     l2728:	
  2854  0386  307E               	movlw	126
  2855  0387  063C               	xorwf	waitFlag@buf,w
  2856  0388  1903               	btfsc	3,2
  2857  0389  2B55               	goto	l2708
  2858                           
  2859                           ;decode_AX25.c: 79: }
  2860                           ;decode_AX25.c: 80: }
  2861                           ;decode_AX25.c: 81: }
  2862                           ;decode_AX25.c: 82: if(buf == ("JQ1YCZ"[0] << 1)){
  2863  038A  3012               	movlw	low (STR_1-__stringbase)
  2864  038B  0084               	movwf	4
  2865  038C  120A  158A  2000  120A  118A  	fcall	stringdir
  2866  0391  00F6               	movwf	??_waitFlag
  2867  0392  01F7               	clrf	??_waitFlag+1
  2868  0393  1003               	clrc
  2869  0394  0DF6               	rlf	??_waitFlag,f
  2870  0395  0DF7               	rlf	??_waitFlag+1,f
  2871  0396  083C               	movf	waitFlag@buf,w
  2872  0397  00F8               	movwf	??_waitFlag+2
  2873  0398  01F9               	clrf	??_waitFlag+3
  2874  0399  0877               	movf	??_waitFlag+1,w
  2875  039A  0679               	xorwf	??_waitFlag+3,w
  2876  039B  1D03               	skipz
  2877  039C  2B9F               	goto	u2205
  2878  039D  0876               	movf	??_waitFlag,w
  2879  039E  0678               	xorwf	??_waitFlag+2,w
  2880  039F                     u2205:	
  2881  039F  1D03               	skipz
  2882  03A0  2D64               	goto	l2878
  2883                           
  2884                           ;decode_AX25.c: 83: dPacket[dPacketnum] = buf;
  2885  03A1  083C               	movf	waitFlag@buf,w
  2886  03A2  00F6               	movwf	??_waitFlag
  2887  03A3  0866               	movf	_dPacketnum,w
  2888  03A4  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2889  03A5  0084               	movwf	4
  2890  03A6  0876               	movf	??_waitFlag,w
  2891  03A7  1783               	bsf	3,7	;select IRP bank3
  2892  03A8  0080               	movwf	0
  2893                           
  2894                           ;decode_AX25.c: 84: dPacketnum ++;
  2895  03A9  3001               	movlw	1
  2896  03AA  07E6               	addwf	_dPacketnum,f
  2897  03AB  1803               	skipnc
  2898  03AC  0AE7               	incf	_dPacketnum+1,f
  2899  03AD  3000               	movlw	0
  2900  03AE  07E7               	addwf	_dPacketnum+1,f
  2901                           
  2902                           ;decode_AX25.c: 85: for(UINT j=0;j<8;j++){
  2903  03AF  01A2               	clrf	waitFlag@j
  2904  03B0  01A3               	clrf	waitFlag@j+1
  2905  03B1  3000               	movlw	0
  2906  03B2  0223               	subwf	waitFlag@j+1,w
  2907  03B3  3008               	movlw	8
  2908  03B4  1903               	skipnz
  2909  03B5  0222               	subwf	waitFlag@j,w
  2910  03B6  1803               	btfsc	3,0
  2911  03B7  2BE0               	goto	l2756
  2912  03B8                     l2742:	
  2913                           
  2914                           ;decode_AX25.c: 86: flag_judge = getbit();
  2915  03B8  120A  158A  229B  120A  118A  	fcall	_getbit
  2916  03BD  0871               	movf	?_getbit+1,w
  2917  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  2918  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  2919  03C0  00BB               	movwf	waitFlag@flag_judge+1
  2920  03C1  0870               	movf	?_getbit,w
  2921  03C2  00BA               	movwf	waitFlag@flag_judge
  2922                           
  2923                           ;decode_AX25.c: 87: buf = buf >> 1;
  2924  03C3  083C               	movf	waitFlag@buf,w
  2925  03C4  00F6               	movwf	??_waitFlag
  2926  03C5  1003               	clrc
  2927  03C6  0C76               	rrf	??_waitFlag,w
  2928  03C7  00F7               	movwf	??_waitFlag+1
  2929  03C8  0877               	movf	??_waitFlag+1,w
  2930  03C9  00BC               	movwf	waitFlag@buf
  2931                           
  2932                           ;decode_AX25.c: 89: buf = buf | 0x00;
  2933  03CA  083A               	movf	waitFlag@flag_judge,w
  2934  03CB  043B               	iorwf	waitFlag@flag_judge+1,w
  2935  03CC  1903               	btfsc	3,2
  2936  03CD  2BD3               	goto	l2752
  2937                           
  2938                           ;decode_AX25.c: 91: buf = buf | 0x80;
  2939                           
  2940                           ;decode_AX25.c: 90: }else{
  2941  03CE  083C               	movf	waitFlag@buf,w
  2942  03CF  3880               	iorlw	128
  2943  03D0  00F6               	movwf	??_waitFlag
  2944  03D1  0876               	movf	??_waitFlag,w
  2945  03D2  00BC               	movwf	waitFlag@buf
  2946  03D3                     l2752:	
  2947  03D3  3001               	movlw	1
  2948  03D4  07A2               	addwf	waitFlag@j,f
  2949  03D5  1803               	skipnc
  2950  03D6  0AA3               	incf	waitFlag@j+1,f
  2951  03D7  3000               	movlw	0
  2952  03D8  07A3               	addwf	waitFlag@j+1,f
  2953  03D9  3000               	movlw	0
  2954  03DA  0223               	subwf	waitFlag@j+1,w
  2955  03DB  3008               	movlw	8
  2956  03DC  1903               	skipnz
  2957  03DD  0222               	subwf	waitFlag@j,w
  2958  03DE  1C03               	skipc
  2959  03DF  2BB8               	goto	l2742
  2960  03E0                     l2756:	
  2961                           
  2962                           ;decode_AX25.c: 92: }
  2963                           ;decode_AX25.c: 93: }
  2964                           ;decode_AX25.c: 94: if(buf == ("JQ1YCZ"[1] << 1)){
  2965  03E0  3013               	movlw	low (((STR_1+1)-__stringbase)| (0+32768))
  2966  03E1  0084               	movwf	4
  2967  03E2  120A  158A  2000  120A  118A  	fcall	stringdir
  2968  03E7  00F6               	movwf	??_waitFlag
  2969  03E8  01F7               	clrf	??_waitFlag+1
  2970  03E9  1003               	clrc
  2971  03EA  0DF6               	rlf	??_waitFlag,f
  2972  03EB  0DF7               	rlf	??_waitFlag+1,f
  2973  03EC  083C               	movf	waitFlag@buf,w
  2974  03ED  00F8               	movwf	??_waitFlag+2
  2975  03EE  01F9               	clrf	??_waitFlag+3
  2976  03EF  0877               	movf	??_waitFlag+1,w
  2977  03F0  0679               	xorwf	??_waitFlag+3,w
  2978  03F1  1D03               	skipz
  2979  03F2  2BF5               	goto	u2245
  2980  03F3  0876               	movf	??_waitFlag,w
  2981  03F4  0678               	xorwf	??_waitFlag+2,w
  2982  03F5                     u2245:	
  2983  03F5  1D03               	skipz
  2984  03F6  2D64               	goto	l2878
  2985                           
  2986                           ;decode_AX25.c: 95: dPacket[dPacketnum] = buf;
  2987  03F7  083C               	movf	waitFlag@buf,w
  2988  03F8  00F6               	movwf	??_waitFlag
  2989  03F9  0866               	movf	_dPacketnum,w
  2990  03FA  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2991  03FB  0084               	movwf	4
  2992  03FC  0876               	movf	??_waitFlag,w
  2993  03FD  1783               	bsf	3,7	;select IRP bank3
  2994  03FE  0080               	movwf	0
  2995                           
  2996                           ;decode_AX25.c: 96: dPacketnum ++;
  2997  03FF  3001               	movlw	1
  2998  0400  07E6               	addwf	_dPacketnum,f
  2999  0401  1803               	skipnc
  3000  0402  0AE7               	incf	_dPacketnum+1,f
  3001  0403  3000               	movlw	0
  3002  0404  07E7               	addwf	_dPacketnum+1,f
  3003                           
  3004                           ;decode_AX25.c: 97: for(UINT j=0;j<8;j++){
  3005  0405  01A4               	clrf	waitFlag@j_111
  3006  0406  01A5               	clrf	waitFlag@j_111+1
  3007  0407  3000               	movlw	0
  3008  0408  0225               	subwf	waitFlag@j_111+1,w
  3009  0409  3008               	movlw	8
  3010  040A  1903               	skipnz
  3011  040B  0224               	subwf	waitFlag@j_111,w
  3012  040C  1803               	btfsc	3,0
  3013  040D  2C36               	goto	l2782
  3014  040E                     l2768:	
  3015                           
  3016                           ;decode_AX25.c: 98: flag_judge = getbit();
  3017  040E  120A  158A  229B  120A  118A  	fcall	_getbit
  3018  0413  0871               	movf	?_getbit+1,w
  3019  0414  1283               	bcf	3,5	;RP0=0, select bank0
  3020  0415  1303               	bcf	3,6	;RP1=0, select bank0
  3021  0416  00BB               	movwf	waitFlag@flag_judge+1
  3022  0417  0870               	movf	?_getbit,w
  3023  0418  00BA               	movwf	waitFlag@flag_judge
  3024                           
  3025                           ;decode_AX25.c: 99: buf = buf >> 1;
  3026  0419  083C               	movf	waitFlag@buf,w
  3027  041A  00F6               	movwf	??_waitFlag
  3028  041B  1003               	clrc
  3029  041C  0C76               	rrf	??_waitFlag,w
  3030  041D  00F7               	movwf	??_waitFlag+1
  3031  041E  0877               	movf	??_waitFlag+1,w
  3032  041F  00BC               	movwf	waitFlag@buf
  3033                           
  3034                           ;decode_AX25.c: 101: buf = buf | 0x00;
  3035  0420  083A               	movf	waitFlag@flag_judge,w
  3036  0421  043B               	iorwf	waitFlag@flag_judge+1,w
  3037  0422  1903               	btfsc	3,2
  3038  0423  2C29               	goto	l2778
  3039                           
  3040                           ;decode_AX25.c: 103: buf = buf | 0x80;
  3041                           
  3042                           ;decode_AX25.c: 102: }else{
  3043  0424  083C               	movf	waitFlag@buf,w
  3044  0425  3880               	iorlw	128
  3045  0426  00F6               	movwf	??_waitFlag
  3046  0427  0876               	movf	??_waitFlag,w
  3047  0428  00BC               	movwf	waitFlag@buf
  3048  0429                     l2778:	
  3049  0429  3001               	movlw	1
  3050  042A  07A4               	addwf	waitFlag@j_111,f
  3051  042B  1803               	skipnc
  3052  042C  0AA5               	incf	waitFlag@j_111+1,f
  3053  042D  3000               	movlw	0
  3054  042E  07A5               	addwf	waitFlag@j_111+1,f
  3055  042F  3000               	movlw	0
  3056  0430  0225               	subwf	waitFlag@j_111+1,w
  3057  0431  3008               	movlw	8
  3058  0432  1903               	skipnz
  3059  0433  0224               	subwf	waitFlag@j_111,w
  3060  0434  1C03               	skipc
  3061  0435  2C0E               	goto	l2768
  3062  0436                     l2782:	
  3063                           
  3064                           ;decode_AX25.c: 104: }
  3065                           ;decode_AX25.c: 105: }
  3066                           ;decode_AX25.c: 106: if(buf == ("JQ1YCZ"[2] << 1)){
  3067  0436  3014               	movlw	low (((STR_1+2)-__stringbase)| (0+32768))
  3068  0437  0084               	movwf	4
  3069  0438  120A  158A  2000  120A  118A  	fcall	stringdir
  3070  043D  00F6               	movwf	??_waitFlag
  3071  043E  01F7               	clrf	??_waitFlag+1
  3072  043F  1003               	clrc
  3073  0440  0DF6               	rlf	??_waitFlag,f
  3074  0441  0DF7               	rlf	??_waitFlag+1,f
  3075  0442  083C               	movf	waitFlag@buf,w
  3076  0443  00F8               	movwf	??_waitFlag+2
  3077  0444  01F9               	clrf	??_waitFlag+3
  3078  0445  0877               	movf	??_waitFlag+1,w
  3079  0446  0679               	xorwf	??_waitFlag+3,w
  3080  0447  1D03               	skipz
  3081  0448  2C4B               	goto	u2285
  3082  0449  0876               	movf	??_waitFlag,w
  3083  044A  0678               	xorwf	??_waitFlag+2,w
  3084  044B                     u2285:	
  3085  044B  1D03               	skipz
  3086  044C  2D64               	goto	l2878
  3087                           
  3088                           ;decode_AX25.c: 107: dPacket[dPacketnum] = buf;
  3089  044D  083C               	movf	waitFlag@buf,w
  3090  044E  00F6               	movwf	??_waitFlag
  3091  044F  0866               	movf	_dPacketnum,w
  3092  0450  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3093  0451  0084               	movwf	4
  3094  0452  0876               	movf	??_waitFlag,w
  3095  0453  1783               	bsf	3,7	;select IRP bank3
  3096  0454  0080               	movwf	0
  3097                           
  3098                           ;decode_AX25.c: 108: dPacketnum ++;
  3099  0455  3001               	movlw	1
  3100  0456  07E6               	addwf	_dPacketnum,f
  3101  0457  1803               	skipnc
  3102  0458  0AE7               	incf	_dPacketnum+1,f
  3103  0459  3000               	movlw	0
  3104  045A  07E7               	addwf	_dPacketnum+1,f
  3105                           
  3106                           ;decode_AX25.c: 109: for(UINT j=0;j<8;j++){
  3107  045B  01A6               	clrf	waitFlag@j_113
  3108  045C  01A7               	clrf	waitFlag@j_113+1
  3109  045D  3000               	movlw	0
  3110  045E  0227               	subwf	waitFlag@j_113+1,w
  3111  045F  3008               	movlw	8
  3112  0460  1903               	skipnz
  3113  0461  0226               	subwf	waitFlag@j_113,w
  3114  0462  1803               	btfsc	3,0
  3115  0463  2C8C               	goto	l2808
  3116  0464                     l2794:	
  3117                           
  3118                           ;decode_AX25.c: 110: flag_judge = getbit();
  3119  0464  120A  158A  229B  120A  118A  	fcall	_getbit
  3120  0469  0871               	movf	?_getbit+1,w
  3121  046A  1283               	bcf	3,5	;RP0=0, select bank0
  3122  046B  1303               	bcf	3,6	;RP1=0, select bank0
  3123  046C  00BB               	movwf	waitFlag@flag_judge+1
  3124  046D  0870               	movf	?_getbit,w
  3125  046E  00BA               	movwf	waitFlag@flag_judge
  3126                           
  3127                           ;decode_AX25.c: 111: buf = buf >> 1;
  3128  046F  083C               	movf	waitFlag@buf,w
  3129  0470  00F6               	movwf	??_waitFlag
  3130  0471  1003               	clrc
  3131  0472  0C76               	rrf	??_waitFlag,w
  3132  0473  00F7               	movwf	??_waitFlag+1
  3133  0474  0877               	movf	??_waitFlag+1,w
  3134  0475  00BC               	movwf	waitFlag@buf
  3135                           
  3136                           ;decode_AX25.c: 113: buf = buf | 0x00;
  3137  0476  083A               	movf	waitFlag@flag_judge,w
  3138  0477  043B               	iorwf	waitFlag@flag_judge+1,w
  3139  0478  1903               	btfsc	3,2
  3140  0479  2C7F               	goto	l2804
  3141                           
  3142                           ;decode_AX25.c: 115: buf = buf | 0x80;
  3143                           
  3144                           ;decode_AX25.c: 114: }else{
  3145  047A  083C               	movf	waitFlag@buf,w
  3146  047B  3880               	iorlw	128
  3147  047C  00F6               	movwf	??_waitFlag
  3148  047D  0876               	movf	??_waitFlag,w
  3149  047E  00BC               	movwf	waitFlag@buf
  3150  047F                     l2804:	
  3151  047F  3001               	movlw	1
  3152  0480  07A6               	addwf	waitFlag@j_113,f
  3153  0481  1803               	skipnc
  3154  0482  0AA7               	incf	waitFlag@j_113+1,f
  3155  0483  3000               	movlw	0
  3156  0484  07A7               	addwf	waitFlag@j_113+1,f
  3157  0485  3000               	movlw	0
  3158  0486  0227               	subwf	waitFlag@j_113+1,w
  3159  0487  3008               	movlw	8
  3160  0488  1903               	skipnz
  3161  0489  0226               	subwf	waitFlag@j_113,w
  3162  048A  1C03               	skipc
  3163  048B  2C64               	goto	l2794
  3164  048C                     l2808:	
  3165                           
  3166                           ;decode_AX25.c: 116: }
  3167                           ;decode_AX25.c: 117: }
  3168                           ;decode_AX25.c: 118: if(buf == ("JQ1YCZ"[3] << 1)){
  3169  048C  3015               	movlw	low (((STR_1+3)-__stringbase)| (0+32768))
  3170  048D  0084               	movwf	4
  3171  048E  120A  158A  2000  120A  118A  	fcall	stringdir
  3172  0493  00F6               	movwf	??_waitFlag
  3173  0494  01F7               	clrf	??_waitFlag+1
  3174  0495  1003               	clrc
  3175  0496  0DF6               	rlf	??_waitFlag,f
  3176  0497  0DF7               	rlf	??_waitFlag+1,f
  3177  0498  083C               	movf	waitFlag@buf,w
  3178  0499  00F8               	movwf	??_waitFlag+2
  3179  049A  01F9               	clrf	??_waitFlag+3
  3180  049B  0877               	movf	??_waitFlag+1,w
  3181  049C  0679               	xorwf	??_waitFlag+3,w
  3182  049D  1D03               	skipz
  3183  049E  2CA1               	goto	u2325
  3184  049F  0876               	movf	??_waitFlag,w
  3185  04A0  0678               	xorwf	??_waitFlag+2,w
  3186  04A1                     u2325:	
  3187  04A1  1D03               	skipz
  3188  04A2  2D64               	goto	l2878
  3189                           
  3190                           ;decode_AX25.c: 119: dPacket[dPacketnum] = buf;
  3191  04A3  083C               	movf	waitFlag@buf,w
  3192  04A4  00F6               	movwf	??_waitFlag
  3193  04A5  0866               	movf	_dPacketnum,w
  3194  04A6  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3195  04A7  0084               	movwf	4
  3196  04A8  0876               	movf	??_waitFlag,w
  3197  04A9  1783               	bsf	3,7	;select IRP bank3
  3198  04AA  0080               	movwf	0
  3199                           
  3200                           ;decode_AX25.c: 120: dPacketnum ++;
  3201  04AB  3001               	movlw	1
  3202  04AC  07E6               	addwf	_dPacketnum,f
  3203  04AD  1803               	skipnc
  3204  04AE  0AE7               	incf	_dPacketnum+1,f
  3205  04AF  3000               	movlw	0
  3206  04B0  07E7               	addwf	_dPacketnum+1,f
  3207                           
  3208                           ;decode_AX25.c: 121: for(UINT j=0;j<8;j++){
  3209  04B1  01A8               	clrf	waitFlag@j_115
  3210  04B2  01A9               	clrf	waitFlag@j_115+1
  3211  04B3  3000               	movlw	0
  3212  04B4  0229               	subwf	waitFlag@j_115+1,w
  3213  04B5  3008               	movlw	8
  3214  04B6  1903               	skipnz
  3215  04B7  0228               	subwf	waitFlag@j_115,w
  3216  04B8  1803               	btfsc	3,0
  3217  04B9  2CE2               	goto	l2834
  3218  04BA                     l2820:	
  3219                           
  3220                           ;decode_AX25.c: 122: flag_judge = getbit();
  3221  04BA  120A  158A  229B  120A  118A  	fcall	_getbit
  3222  04BF  0871               	movf	?_getbit+1,w
  3223  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  3224  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  3225  04C2  00BB               	movwf	waitFlag@flag_judge+1
  3226  04C3  0870               	movf	?_getbit,w
  3227  04C4  00BA               	movwf	waitFlag@flag_judge
  3228                           
  3229                           ;decode_AX25.c: 123: buf = buf >> 1;
  3230  04C5  083C               	movf	waitFlag@buf,w
  3231  04C6  00F6               	movwf	??_waitFlag
  3232  04C7  1003               	clrc
  3233  04C8  0C76               	rrf	??_waitFlag,w
  3234  04C9  00F7               	movwf	??_waitFlag+1
  3235  04CA  0877               	movf	??_waitFlag+1,w
  3236  04CB  00BC               	movwf	waitFlag@buf
  3237                           
  3238                           ;decode_AX25.c: 125: buf = buf | 0x00;
  3239  04CC  083A               	movf	waitFlag@flag_judge,w
  3240  04CD  043B               	iorwf	waitFlag@flag_judge+1,w
  3241  04CE  1903               	btfsc	3,2
  3242  04CF  2CD5               	goto	l2830
  3243                           
  3244                           ;decode_AX25.c: 127: buf = buf | 0x80;
  3245                           
  3246                           ;decode_AX25.c: 126: }else{
  3247  04D0  083C               	movf	waitFlag@buf,w
  3248  04D1  3880               	iorlw	128
  3249  04D2  00F6               	movwf	??_waitFlag
  3250  04D3  0876               	movf	??_waitFlag,w
  3251  04D4  00BC               	movwf	waitFlag@buf
  3252  04D5                     l2830:	
  3253  04D5  3001               	movlw	1
  3254  04D6  07A8               	addwf	waitFlag@j_115,f
  3255  04D7  1803               	skipnc
  3256  04D8  0AA9               	incf	waitFlag@j_115+1,f
  3257  04D9  3000               	movlw	0
  3258  04DA  07A9               	addwf	waitFlag@j_115+1,f
  3259  04DB  3000               	movlw	0
  3260  04DC  0229               	subwf	waitFlag@j_115+1,w
  3261  04DD  3008               	movlw	8
  3262  04DE  1903               	skipnz
  3263  04DF  0228               	subwf	waitFlag@j_115,w
  3264  04E0  1C03               	skipc
  3265  04E1  2CBA               	goto	l2820
  3266  04E2                     l2834:	
  3267                           
  3268                           ;decode_AX25.c: 128: }
  3269                           ;decode_AX25.c: 129: }
  3270                           ;decode_AX25.c: 130: if(buf == ("JQ1YCZ"[4] << 1)){
  3271  04E2  3016               	movlw	low (((STR_1+4)-__stringbase)| (0+32768))
  3272  04E3  0084               	movwf	4
  3273  04E4  120A  158A  2000  120A  118A  	fcall	stringdir
  3274  04E9  00F6               	movwf	??_waitFlag
  3275  04EA  01F7               	clrf	??_waitFlag+1
  3276  04EB  1003               	clrc
  3277  04EC  0DF6               	rlf	??_waitFlag,f
  3278  04ED  0DF7               	rlf	??_waitFlag+1,f
  3279  04EE  083C               	movf	waitFlag@buf,w
  3280  04EF  00F8               	movwf	??_waitFlag+2
  3281  04F0  01F9               	clrf	??_waitFlag+3
  3282  04F1  0877               	movf	??_waitFlag+1,w
  3283  04F2  0679               	xorwf	??_waitFlag+3,w
  3284  04F3  1D03               	skipz
  3285  04F4  2CF7               	goto	u2365
  3286  04F5  0876               	movf	??_waitFlag,w
  3287  04F6  0678               	xorwf	??_waitFlag+2,w
  3288  04F7                     u2365:	
  3289  04F7  1D03               	skipz
  3290  04F8  2D64               	goto	l2878
  3291                           
  3292                           ;decode_AX25.c: 131: dPacket[dPacketnum] = buf;
  3293  04F9  083C               	movf	waitFlag@buf,w
  3294  04FA  00F6               	movwf	??_waitFlag
  3295  04FB  0866               	movf	_dPacketnum,w
  3296  04FC  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3297  04FD  0084               	movwf	4
  3298  04FE  0876               	movf	??_waitFlag,w
  3299  04FF  1783               	bsf	3,7	;select IRP bank3
  3300  0500  0080               	movwf	0
  3301                           
  3302                           ;decode_AX25.c: 132: dPacketnum ++;
  3303  0501  3001               	movlw	1
  3304  0502  07E6               	addwf	_dPacketnum,f
  3305  0503  1803               	skipnc
  3306  0504  0AE7               	incf	_dPacketnum+1,f
  3307  0505  3000               	movlw	0
  3308  0506  07E7               	addwf	_dPacketnum+1,f
  3309                           
  3310                           ;decode_AX25.c: 133: for(UINT j=0;j<8;j++){
  3311  0507  01AA               	clrf	waitFlag@j_117
  3312  0508  01AB               	clrf	waitFlag@j_117+1
  3313  0509  3000               	movlw	0
  3314  050A  022B               	subwf	waitFlag@j_117+1,w
  3315  050B  3008               	movlw	8
  3316  050C  1903               	skipnz
  3317  050D  022A               	subwf	waitFlag@j_117,w
  3318  050E  1803               	btfsc	3,0
  3319  050F  2D38               	goto	l2860
  3320  0510                     l2846:	
  3321                           
  3322                           ;decode_AX25.c: 134: flag_judge = getbit();
  3323  0510  120A  158A  229B  120A  118A  	fcall	_getbit
  3324  0515  0871               	movf	?_getbit+1,w
  3325  0516  1283               	bcf	3,5	;RP0=0, select bank0
  3326  0517  1303               	bcf	3,6	;RP1=0, select bank0
  3327  0518  00BB               	movwf	waitFlag@flag_judge+1
  3328  0519  0870               	movf	?_getbit,w
  3329  051A  00BA               	movwf	waitFlag@flag_judge
  3330                           
  3331                           ;decode_AX25.c: 135: buf = buf >> 1;
  3332  051B  083C               	movf	waitFlag@buf,w
  3333  051C  00F6               	movwf	??_waitFlag
  3334  051D  1003               	clrc
  3335  051E  0C76               	rrf	??_waitFlag,w
  3336  051F  00F7               	movwf	??_waitFlag+1
  3337  0520  0877               	movf	??_waitFlag+1,w
  3338  0521  00BC               	movwf	waitFlag@buf
  3339                           
  3340                           ;decode_AX25.c: 137: buf = buf | 0x00;
  3341  0522  083A               	movf	waitFlag@flag_judge,w
  3342  0523  043B               	iorwf	waitFlag@flag_judge+1,w
  3343  0524  1903               	btfsc	3,2
  3344  0525  2D2B               	goto	l2856
  3345                           
  3346                           ;decode_AX25.c: 139: buf = buf | 0x80;
  3347                           
  3348                           ;decode_AX25.c: 138: }else{
  3349  0526  083C               	movf	waitFlag@buf,w
  3350  0527  3880               	iorlw	128
  3351  0528  00F6               	movwf	??_waitFlag
  3352  0529  0876               	movf	??_waitFlag,w
  3353  052A  00BC               	movwf	waitFlag@buf
  3354  052B                     l2856:	
  3355  052B  3001               	movlw	1
  3356  052C  07AA               	addwf	waitFlag@j_117,f
  3357  052D  1803               	skipnc
  3358  052E  0AAB               	incf	waitFlag@j_117+1,f
  3359  052F  3000               	movlw	0
  3360  0530  07AB               	addwf	waitFlag@j_117+1,f
  3361  0531  3000               	movlw	0
  3362  0532  022B               	subwf	waitFlag@j_117+1,w
  3363  0533  3008               	movlw	8
  3364  0534  1903               	skipnz
  3365  0535  022A               	subwf	waitFlag@j_117,w
  3366  0536  1C03               	skipc
  3367  0537  2D10               	goto	l2846
  3368  0538                     l2860:	
  3369                           
  3370                           ;decode_AX25.c: 140: }
  3371                           ;decode_AX25.c: 141: }
  3372                           ;decode_AX25.c: 142: if(buf == ("JQ1YCZ"[5] << 1)){
  3373  0538  3017               	movlw	low (((STR_1+5)-__stringbase)| (0+32768))
  3374  0539  0084               	movwf	4
  3375  053A  120A  158A  2000  120A  118A  	fcall	stringdir
  3376  053F  00F6               	movwf	??_waitFlag
  3377  0540  01F7               	clrf	??_waitFlag+1
  3378  0541  1003               	clrc
  3379  0542  0DF6               	rlf	??_waitFlag,f
  3380  0543  0DF7               	rlf	??_waitFlag+1,f
  3381  0544  083C               	movf	waitFlag@buf,w
  3382  0545  00F8               	movwf	??_waitFlag+2
  3383  0546  01F9               	clrf	??_waitFlag+3
  3384  0547  0877               	movf	??_waitFlag+1,w
  3385  0548  0679               	xorwf	??_waitFlag+3,w
  3386  0549  1D03               	skipz
  3387  054A  2D4D               	goto	u2405
  3388  054B  0876               	movf	??_waitFlag,w
  3389  054C  0678               	xorwf	??_waitFlag+2,w
  3390  054D                     u2405:	
  3391  054D  1D03               	skipz
  3392  054E  2D64               	goto	l2878
  3393                           
  3394                           ;decode_AX25.c: 143: dPacket[dPacketnum] = buf;
  3395  054F  083C               	movf	waitFlag@buf,w
  3396  0550  00F6               	movwf	??_waitFlag
  3397  0551  0866               	movf	_dPacketnum,w
  3398  0552  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3399  0553  0084               	movwf	4
  3400  0554  0876               	movf	??_waitFlag,w
  3401  0555  1783               	bsf	3,7	;select IRP bank3
  3402  0556  0080               	movwf	0
  3403                           
  3404                           ;decode_AX25.c: 144: dPacketnum ++;
  3405  0557  3001               	movlw	1
  3406  0558  07E6               	addwf	_dPacketnum,f
  3407  0559  1803               	skipnc
  3408  055A  0AE7               	incf	_dPacketnum+1,f
  3409  055B  3000               	movlw	0
  3410  055C  07E7               	addwf	_dPacketnum+1,f
  3411                           
  3412                           ;decode_AX25.c: 145: rcv_state ++;
  3413  055D  3001               	movlw	1
  3414  055E  07EA               	addwf	_rcv_state,f
  3415  055F  1803               	skipnc
  3416  0560  0AEB               	incf	_rcv_state+1,f
  3417  0561  3000               	movlw	0
  3418  0562  07EB               	addwf	_rcv_state+1,f
  3419                           
  3420                           ;decode_AX25.c: 146: }else{
  3421  0563  2D66               	goto	l207
  3422  0564                     l2878:	
  3423                           ;decode_AX25.c: 160: }
  3424                           ;decode_AX25.c: 161: }else{
  3425                           
  3426                           ;decode_AX25.c: 159: dPacketnum = 0;
  3427                           
  3428                           ;decode_AX25.c: 157: }
  3429                           ;decode_AX25.c: 158: }else{
  3430                           
  3431                           ;decode_AX25.c: 156: dPacketnum = 0;
  3432                           
  3433                           ;decode_AX25.c: 154: }
  3434                           ;decode_AX25.c: 155: }else{
  3435                           
  3436                           ;decode_AX25.c: 153: dPacketnum = 0;
  3437                           
  3438                           ;decode_AX25.c: 151: }
  3439                           ;decode_AX25.c: 152: }else{
  3440                           
  3441                           ;decode_AX25.c: 150: dPacketnum = 0;
  3442                           
  3443                           ;decode_AX25.c: 148: }
  3444                           ;decode_AX25.c: 149: }else{
  3445                           
  3446                           ;decode_AX25.c: 147: dPacketnum = 0;
  3447                           
  3448                           
  3449                           ;decode_AX25.c: 162: dPacketnum = 0;
  3450  0564  01E6               	clrf	_dPacketnum
  3451  0565  01E7               	clrf	_dPacketnum+1
  3452  0566                     l207:	
  3453                           
  3454                           ;decode_AX25.c: 163: }
  3455                           ;decode_AX25.c: 165: for(UINT j=0;j<8;j++){
  3456  0566  01AC               	clrf	waitFlag@j_119
  3457  0567  01AD               	clrf	waitFlag@j_119+1
  3458  0568  3000               	movlw	0
  3459  0569  022D               	subwf	waitFlag@j_119+1,w
  3460  056A  3008               	movlw	8
  3461  056B  1903               	skipnz
  3462  056C  022C               	subwf	waitFlag@j_119,w
  3463  056D  1803               	btfsc	3,0
  3464  056E  2D97               	goto	l2898
  3465  056F                     l2884:	
  3466                           
  3467                           ;decode_AX25.c: 166: flag_judge = getbit();
  3468  056F  120A  158A  229B  120A  118A  	fcall	_getbit
  3469  0574  0871               	movf	?_getbit+1,w
  3470  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3471  0576  1303               	bcf	3,6	;RP1=0, select bank0
  3472  0577  00BB               	movwf	waitFlag@flag_judge+1
  3473  0578  0870               	movf	?_getbit,w
  3474  0579  00BA               	movwf	waitFlag@flag_judge
  3475                           
  3476                           ;decode_AX25.c: 167: buf = buf >> 1;
  3477  057A  083C               	movf	waitFlag@buf,w
  3478  057B  00F6               	movwf	??_waitFlag
  3479  057C  1003               	clrc
  3480  057D  0C76               	rrf	??_waitFlag,w
  3481  057E  00F7               	movwf	??_waitFlag+1
  3482  057F  0877               	movf	??_waitFlag+1,w
  3483  0580  00BC               	movwf	waitFlag@buf
  3484                           
  3485                           ;decode_AX25.c: 169: buf = buf | 0x00;
  3486  0581  083A               	movf	waitFlag@flag_judge,w
  3487  0582  043B               	iorwf	waitFlag@flag_judge+1,w
  3488  0583  1903               	btfsc	3,2
  3489  0584  2D8A               	goto	l2894
  3490                           
  3491                           ;decode_AX25.c: 171: buf = buf | 0x80;
  3492                           
  3493                           ;decode_AX25.c: 170: }else{
  3494  0585  083C               	movf	waitFlag@buf,w
  3495  0586  3880               	iorlw	128
  3496  0587  00F6               	movwf	??_waitFlag
  3497  0588  0876               	movf	??_waitFlag,w
  3498  0589  00BC               	movwf	waitFlag@buf
  3499  058A                     l2894:	
  3500  058A  3001               	movlw	1
  3501  058B  07AC               	addwf	waitFlag@j_119,f
  3502  058C  1803               	skipnc
  3503  058D  0AAD               	incf	waitFlag@j_119+1,f
  3504  058E  3000               	movlw	0
  3505  058F  07AD               	addwf	waitFlag@j_119+1,f
  3506  0590  3000               	movlw	0
  3507  0591  022D               	subwf	waitFlag@j_119+1,w
  3508  0592  3008               	movlw	8
  3509  0593  1903               	skipnz
  3510  0594  022C               	subwf	waitFlag@j_119,w
  3511  0595  1C03               	skipc
  3512  0596  2D6F               	goto	l2884
  3513  0597                     l2898:	
  3514                           
  3515                           ;decode_AX25.c: 172: }
  3516                           ;decode_AX25.c: 173: }
  3517                           ;decode_AX25.c: 174: dPacket[dPacketnum] = buf;
  3518  0597  083C               	movf	waitFlag@buf,w
  3519  0598  00F6               	movwf	??_waitFlag
  3520  0599  0866               	movf	_dPacketnum,w
  3521  059A  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3522  059B  0084               	movwf	4
  3523  059C  0876               	movf	??_waitFlag,w
  3524  059D  1783               	bsf	3,7	;select IRP bank3
  3525  059E  0080               	movwf	0
  3526                           
  3527                           ;decode_AX25.c: 175: dPacketnum ++;
  3528  059F  3001               	movlw	1
  3529  05A0  07E6               	addwf	_dPacketnum,f
  3530  05A1  1803               	skipnc
  3531  05A2  0AE7               	incf	_dPacketnum+1,f
  3532  05A3  3000               	movlw	0
  3533  05A4  07E7               	addwf	_dPacketnum+1,f
  3534                           
  3535                           ;decode_AX25.c: 176: for(UINT j=0;j<8;j++){
  3536  05A5  01AE               	clrf	waitFlag@j_120
  3537  05A6  01AF               	clrf	waitFlag@j_120+1
  3538  05A7  3000               	movlw	0
  3539  05A8  022F               	subwf	waitFlag@j_120+1,w
  3540  05A9  3008               	movlw	8
  3541  05AA  1903               	skipnz
  3542  05AB  022E               	subwf	waitFlag@j_120,w
  3543  05AC  1803               	btfsc	3,0
  3544  05AD  2DD6               	goto	l2922
  3545  05AE                     l2908:	
  3546                           
  3547                           ;decode_AX25.c: 177: flag_judge = getbit();
  3548  05AE  120A  158A  229B  120A  118A  	fcall	_getbit
  3549  05B3  0871               	movf	?_getbit+1,w
  3550  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  3551  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  3552  05B6  00BB               	movwf	waitFlag@flag_judge+1
  3553  05B7  0870               	movf	?_getbit,w
  3554  05B8  00BA               	movwf	waitFlag@flag_judge
  3555                           
  3556                           ;decode_AX25.c: 178: buf = buf >> 1;
  3557  05B9  083C               	movf	waitFlag@buf,w
  3558  05BA  00F6               	movwf	??_waitFlag
  3559  05BB  1003               	clrc
  3560  05BC  0C76               	rrf	??_waitFlag,w
  3561  05BD  00F7               	movwf	??_waitFlag+1
  3562  05BE  0877               	movf	??_waitFlag+1,w
  3563  05BF  00BC               	movwf	waitFlag@buf
  3564                           
  3565                           ;decode_AX25.c: 180: buf = buf | 0x00;
  3566  05C0  083A               	movf	waitFlag@flag_judge,w
  3567  05C1  043B               	iorwf	waitFlag@flag_judge+1,w
  3568  05C2  1903               	btfsc	3,2
  3569  05C3  2DC9               	goto	l2918
  3570                           
  3571                           ;decode_AX25.c: 182: buf = buf | 0x80;
  3572                           
  3573                           ;decode_AX25.c: 181: }else{
  3574  05C4  083C               	movf	waitFlag@buf,w
  3575  05C5  3880               	iorlw	128
  3576  05C6  00F6               	movwf	??_waitFlag
  3577  05C7  0876               	movf	??_waitFlag,w
  3578  05C8  00BC               	movwf	waitFlag@buf
  3579  05C9                     l2918:	
  3580  05C9  3001               	movlw	1
  3581  05CA  07AE               	addwf	waitFlag@j_120,f
  3582  05CB  1803               	skipnc
  3583  05CC  0AAF               	incf	waitFlag@j_120+1,f
  3584  05CD  3000               	movlw	0
  3585  05CE  07AF               	addwf	waitFlag@j_120+1,f
  3586  05CF  3000               	movlw	0
  3587  05D0  022F               	subwf	waitFlag@j_120+1,w
  3588  05D1  3008               	movlw	8
  3589  05D2  1903               	skipnz
  3590  05D3  022E               	subwf	waitFlag@j_120,w
  3591  05D4  1C03               	skipc
  3592  05D5  2DAE               	goto	l2908
  3593  05D6                     l2922:	
  3594                           
  3595                           ;decode_AX25.c: 183: }
  3596                           ;decode_AX25.c: 184: }
  3597                           ;decode_AX25.c: 185: if(buf == ("JQ1ZHX"[0] << 1)){
  3598  05D6  300B               	movlw	low (STR_7-__stringbase)
  3599  05D7  0084               	movwf	4
  3600  05D8  120A  158A  2000  120A  118A  	fcall	stringdir
  3601  05DD  00F6               	movwf	??_waitFlag
  3602  05DE  01F7               	clrf	??_waitFlag+1
  3603  05DF  1003               	clrc
  3604  05E0  0DF6               	rlf	??_waitFlag,f
  3605  05E1  0DF7               	rlf	??_waitFlag+1,f
  3606  05E2  083C               	movf	waitFlag@buf,w
  3607  05E3  00F8               	movwf	??_waitFlag+2
  3608  05E4  01F9               	clrf	??_waitFlag+3
  3609  05E5  0877               	movf	??_waitFlag+1,w
  3610  05E6  0679               	xorwf	??_waitFlag+3,w
  3611  05E7  1D03               	skipz
  3612  05E8  2DEB               	goto	u2475
  3613  05E9  0876               	movf	??_waitFlag,w
  3614  05EA  0678               	xorwf	??_waitFlag+2,w
  3615  05EB                     u2475:	
  3616  05EB  1D03               	skipz
  3617  05EC  2FB0               	goto	l3070
  3618                           
  3619                           ;decode_AX25.c: 186: dPacket[dPacketnum] = buf;
  3620  05ED  083C               	movf	waitFlag@buf,w
  3621  05EE  00F6               	movwf	??_waitFlag
  3622  05EF  0866               	movf	_dPacketnum,w
  3623  05F0  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3624  05F1  0084               	movwf	4
  3625  05F2  0876               	movf	??_waitFlag,w
  3626  05F3  1783               	bsf	3,7	;select IRP bank3
  3627  05F4  0080               	movwf	0
  3628                           
  3629                           ;decode_AX25.c: 187: dPacketnum ++;
  3630  05F5  3001               	movlw	1
  3631  05F6  07E6               	addwf	_dPacketnum,f
  3632  05F7  1803               	skipnc
  3633  05F8  0AE7               	incf	_dPacketnum+1,f
  3634  05F9  3000               	movlw	0
  3635  05FA  07E7               	addwf	_dPacketnum+1,f
  3636                           
  3637                           ;decode_AX25.c: 188: for(UINT j=0;j<8;j++){
  3638  05FB  01B0               	clrf	waitFlag@j_122
  3639  05FC  01B1               	clrf	waitFlag@j_122+1
  3640  05FD  3000               	movlw	0
  3641  05FE  0231               	subwf	waitFlag@j_122+1,w
  3642  05FF  3008               	movlw	8
  3643  0600  1903               	skipnz
  3644  0601  0230               	subwf	waitFlag@j_122,w
  3645  0602  1803               	btfsc	3,0
  3646  0603  2E2C               	goto	l2948
  3647  0604                     l2934:	
  3648                           
  3649                           ;decode_AX25.c: 189: flag_judge = getbit();
  3650  0604  120A  158A  229B  120A  118A  	fcall	_getbit
  3651  0609  0871               	movf	?_getbit+1,w
  3652  060A  1283               	bcf	3,5	;RP0=0, select bank0
  3653  060B  1303               	bcf	3,6	;RP1=0, select bank0
  3654  060C  00BB               	movwf	waitFlag@flag_judge+1
  3655  060D  0870               	movf	?_getbit,w
  3656  060E  00BA               	movwf	waitFlag@flag_judge
  3657                           
  3658                           ;decode_AX25.c: 190: buf = buf >> 1;
  3659  060F  083C               	movf	waitFlag@buf,w
  3660  0610  00F6               	movwf	??_waitFlag
  3661  0611  1003               	clrc
  3662  0612  0C76               	rrf	??_waitFlag,w
  3663  0613  00F7               	movwf	??_waitFlag+1
  3664  0614  0877               	movf	??_waitFlag+1,w
  3665  0615  00BC               	movwf	waitFlag@buf
  3666                           
  3667                           ;decode_AX25.c: 192: buf = buf | 0x00;
  3668  0616  083A               	movf	waitFlag@flag_judge,w
  3669  0617  043B               	iorwf	waitFlag@flag_judge+1,w
  3670  0618  1903               	btfsc	3,2
  3671  0619  2E1F               	goto	l2944
  3672                           
  3673                           ;decode_AX25.c: 194: buf = buf | 0x80;
  3674                           
  3675                           ;decode_AX25.c: 193: }else{
  3676  061A  083C               	movf	waitFlag@buf,w
  3677  061B  3880               	iorlw	128
  3678  061C  00F6               	movwf	??_waitFlag
  3679  061D  0876               	movf	??_waitFlag,w
  3680  061E  00BC               	movwf	waitFlag@buf
  3681  061F                     l2944:	
  3682  061F  3001               	movlw	1
  3683  0620  07B0               	addwf	waitFlag@j_122,f
  3684  0621  1803               	skipnc
  3685  0622  0AB1               	incf	waitFlag@j_122+1,f
  3686  0623  3000               	movlw	0
  3687  0624  07B1               	addwf	waitFlag@j_122+1,f
  3688  0625  3000               	movlw	0
  3689  0626  0231               	subwf	waitFlag@j_122+1,w
  3690  0627  3008               	movlw	8
  3691  0628  1903               	skipnz
  3692  0629  0230               	subwf	waitFlag@j_122,w
  3693  062A  1C03               	skipc
  3694  062B  2E04               	goto	l2934
  3695  062C                     l2948:	
  3696                           
  3697                           ;decode_AX25.c: 195: }
  3698                           ;decode_AX25.c: 196: }
  3699                           ;decode_AX25.c: 197: if(buf == ("JQ1ZHX"[1] << 1)){
  3700  062C  300C               	movlw	low (((STR_7+1)-__stringbase)| (0+32768))
  3701  062D  0084               	movwf	4
  3702  062E  120A  158A  2000  120A  118A  	fcall	stringdir
  3703  0633  00F6               	movwf	??_waitFlag
  3704  0634  01F7               	clrf	??_waitFlag+1
  3705  0635  1003               	clrc
  3706  0636  0DF6               	rlf	??_waitFlag,f
  3707  0637  0DF7               	rlf	??_waitFlag+1,f
  3708  0638  083C               	movf	waitFlag@buf,w
  3709  0639  00F8               	movwf	??_waitFlag+2
  3710  063A  01F9               	clrf	??_waitFlag+3
  3711  063B  0877               	movf	??_waitFlag+1,w
  3712  063C  0679               	xorwf	??_waitFlag+3,w
  3713  063D  1D03               	skipz
  3714  063E  2E41               	goto	u2515
  3715  063F  0876               	movf	??_waitFlag,w
  3716  0640  0678               	xorwf	??_waitFlag+2,w
  3717  0641                     u2515:	
  3718  0641  1D03               	skipz
  3719  0642  2FB0               	goto	l3070
  3720                           
  3721                           ;decode_AX25.c: 198: dPacket[dPacketnum] = buf;
  3722  0643  083C               	movf	waitFlag@buf,w
  3723  0644  00F6               	movwf	??_waitFlag
  3724  0645  0866               	movf	_dPacketnum,w
  3725  0646  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3726  0647  0084               	movwf	4
  3727  0648  0876               	movf	??_waitFlag,w
  3728  0649  1783               	bsf	3,7	;select IRP bank3
  3729  064A  0080               	movwf	0
  3730                           
  3731                           ;decode_AX25.c: 199: dPacketnum ++;
  3732  064B  3001               	movlw	1
  3733  064C  07E6               	addwf	_dPacketnum,f
  3734  064D  1803               	skipnc
  3735  064E  0AE7               	incf	_dPacketnum+1,f
  3736  064F  3000               	movlw	0
  3737  0650  07E7               	addwf	_dPacketnum+1,f
  3738                           
  3739                           ;decode_AX25.c: 200: for(UINT j=0;j<8;j++){
  3740  0651  01B2               	clrf	waitFlag@j_124
  3741  0652  01B3               	clrf	waitFlag@j_124+1
  3742  0653  3000               	movlw	0
  3743  0654  0233               	subwf	waitFlag@j_124+1,w
  3744  0655  3008               	movlw	8
  3745  0656  1903               	skipnz
  3746  0657  0232               	subwf	waitFlag@j_124,w
  3747  0658  1803               	btfsc	3,0
  3748  0659  2E82               	goto	l2974
  3749  065A                     l2960:	
  3750                           
  3751                           ;decode_AX25.c: 201: flag_judge = getbit();
  3752  065A  120A  158A  229B  120A  118A  	fcall	_getbit
  3753  065F  0871               	movf	?_getbit+1,w
  3754  0660  1283               	bcf	3,5	;RP0=0, select bank0
  3755  0661  1303               	bcf	3,6	;RP1=0, select bank0
  3756  0662  00BB               	movwf	waitFlag@flag_judge+1
  3757  0663  0870               	movf	?_getbit,w
  3758  0664  00BA               	movwf	waitFlag@flag_judge
  3759                           
  3760                           ;decode_AX25.c: 202: buf = buf >> 1;
  3761  0665  083C               	movf	waitFlag@buf,w
  3762  0666  00F6               	movwf	??_waitFlag
  3763  0667  1003               	clrc
  3764  0668  0C76               	rrf	??_waitFlag,w
  3765  0669  00F7               	movwf	??_waitFlag+1
  3766  066A  0877               	movf	??_waitFlag+1,w
  3767  066B  00BC               	movwf	waitFlag@buf
  3768                           
  3769                           ;decode_AX25.c: 204: buf = buf | 0x00;
  3770  066C  083A               	movf	waitFlag@flag_judge,w
  3771  066D  043B               	iorwf	waitFlag@flag_judge+1,w
  3772  066E  1903               	btfsc	3,2
  3773  066F  2E75               	goto	l2970
  3774                           
  3775                           ;decode_AX25.c: 206: buf = buf | 0x80;
  3776                           
  3777                           ;decode_AX25.c: 205: }else{
  3778  0670  083C               	movf	waitFlag@buf,w
  3779  0671  3880               	iorlw	128
  3780  0672  00F6               	movwf	??_waitFlag
  3781  0673  0876               	movf	??_waitFlag,w
  3782  0674  00BC               	movwf	waitFlag@buf
  3783  0675                     l2970:	
  3784  0675  3001               	movlw	1
  3785  0676  07B2               	addwf	waitFlag@j_124,f
  3786  0677  1803               	skipnc
  3787  0678  0AB3               	incf	waitFlag@j_124+1,f
  3788  0679  3000               	movlw	0
  3789  067A  07B3               	addwf	waitFlag@j_124+1,f
  3790  067B  3000               	movlw	0
  3791  067C  0233               	subwf	waitFlag@j_124+1,w
  3792  067D  3008               	movlw	8
  3793  067E  1903               	skipnz
  3794  067F  0232               	subwf	waitFlag@j_124,w
  3795  0680  1C03               	skipc
  3796  0681  2E5A               	goto	l2960
  3797  0682                     l2974:	
  3798                           
  3799                           ;decode_AX25.c: 207: }
  3800                           ;decode_AX25.c: 208: }
  3801                           ;decode_AX25.c: 209: if(buf == ("JQ1ZHX"[2] << 1)){
  3802  0682  300D               	movlw	low (((STR_7+2)-__stringbase)| (0+32768))
  3803  0683  0084               	movwf	4
  3804  0684  120A  158A  2000  120A  118A  	fcall	stringdir
  3805  0689  00F6               	movwf	??_waitFlag
  3806  068A  01F7               	clrf	??_waitFlag+1
  3807  068B  1003               	clrc
  3808  068C  0DF6               	rlf	??_waitFlag,f
  3809  068D  0DF7               	rlf	??_waitFlag+1,f
  3810  068E  083C               	movf	waitFlag@buf,w
  3811  068F  00F8               	movwf	??_waitFlag+2
  3812  0690  01F9               	clrf	??_waitFlag+3
  3813  0691  0877               	movf	??_waitFlag+1,w
  3814  0692  0679               	xorwf	??_waitFlag+3,w
  3815  0693  1D03               	skipz
  3816  0694  2E97               	goto	u2555
  3817  0695  0876               	movf	??_waitFlag,w
  3818  0696  0678               	xorwf	??_waitFlag+2,w
  3819  0697                     u2555:	
  3820  0697  1D03               	skipz
  3821  0698  2FB0               	goto	l3070
  3822                           
  3823                           ;decode_AX25.c: 210: dPacket[dPacketnum] = buf;
  3824  0699  083C               	movf	waitFlag@buf,w
  3825  069A  00F6               	movwf	??_waitFlag
  3826  069B  0866               	movf	_dPacketnum,w
  3827  069C  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3828  069D  0084               	movwf	4
  3829  069E  0876               	movf	??_waitFlag,w
  3830  069F  1783               	bsf	3,7	;select IRP bank3
  3831  06A0  0080               	movwf	0
  3832                           
  3833                           ;decode_AX25.c: 211: dPacketnum ++;
  3834  06A1  3001               	movlw	1
  3835  06A2  07E6               	addwf	_dPacketnum,f
  3836  06A3  1803               	skipnc
  3837  06A4  0AE7               	incf	_dPacketnum+1,f
  3838  06A5  3000               	movlw	0
  3839  06A6  07E7               	addwf	_dPacketnum+1,f
  3840                           
  3841                           ;decode_AX25.c: 212: for(UINT j=0;j<8;j++){
  3842  06A7  01B4               	clrf	waitFlag@j_126
  3843  06A8  01B5               	clrf	waitFlag@j_126+1
  3844  06A9  3000               	movlw	0
  3845  06AA  0235               	subwf	waitFlag@j_126+1,w
  3846  06AB  3008               	movlw	8
  3847  06AC  1903               	skipnz
  3848  06AD  0234               	subwf	waitFlag@j_126,w
  3849  06AE  1803               	btfsc	3,0
  3850  06AF  2ED8               	goto	l3000
  3851  06B0                     l2986:	
  3852                           
  3853                           ;decode_AX25.c: 213: flag_judge = getbit();
  3854  06B0  120A  158A  229B  120A  118A  	fcall	_getbit
  3855  06B5  0871               	movf	?_getbit+1,w
  3856  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  3857  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  3858  06B8  00BB               	movwf	waitFlag@flag_judge+1
  3859  06B9  0870               	movf	?_getbit,w
  3860  06BA  00BA               	movwf	waitFlag@flag_judge
  3861                           
  3862                           ;decode_AX25.c: 214: buf = buf >> 1;
  3863  06BB  083C               	movf	waitFlag@buf,w
  3864  06BC  00F6               	movwf	??_waitFlag
  3865  06BD  1003               	clrc
  3866  06BE  0C76               	rrf	??_waitFlag,w
  3867  06BF  00F7               	movwf	??_waitFlag+1
  3868  06C0  0877               	movf	??_waitFlag+1,w
  3869  06C1  00BC               	movwf	waitFlag@buf
  3870                           
  3871                           ;decode_AX25.c: 216: buf = buf | 0x00;
  3872  06C2  083A               	movf	waitFlag@flag_judge,w
  3873  06C3  043B               	iorwf	waitFlag@flag_judge+1,w
  3874  06C4  1903               	btfsc	3,2
  3875  06C5  2ECB               	goto	l2996
  3876                           
  3877                           ;decode_AX25.c: 218: buf = buf | 0x80;
  3878                           
  3879                           ;decode_AX25.c: 217: }else{
  3880  06C6  083C               	movf	waitFlag@buf,w
  3881  06C7  3880               	iorlw	128
  3882  06C8  00F6               	movwf	??_waitFlag
  3883  06C9  0876               	movf	??_waitFlag,w
  3884  06CA  00BC               	movwf	waitFlag@buf
  3885  06CB                     l2996:	
  3886  06CB  3001               	movlw	1
  3887  06CC  07B4               	addwf	waitFlag@j_126,f
  3888  06CD  1803               	skipnc
  3889  06CE  0AB5               	incf	waitFlag@j_126+1,f
  3890  06CF  3000               	movlw	0
  3891  06D0  07B5               	addwf	waitFlag@j_126+1,f
  3892  06D1  3000               	movlw	0
  3893  06D2  0235               	subwf	waitFlag@j_126+1,w
  3894  06D3  3008               	movlw	8
  3895  06D4  1903               	skipnz
  3896  06D5  0234               	subwf	waitFlag@j_126,w
  3897  06D6  1C03               	skipc
  3898  06D7  2EB0               	goto	l2986
  3899  06D8                     l3000:	
  3900                           
  3901                           ;decode_AX25.c: 219: }
  3902                           ;decode_AX25.c: 220: }
  3903                           ;decode_AX25.c: 221: if(buf == ("JQ1ZHX"[3] << 1)){
  3904  06D8  300E               	movlw	low (((STR_7+3)-__stringbase)| (0+32768))
  3905  06D9  0084               	movwf	4
  3906  06DA  120A  158A  2000  120A  118A  	fcall	stringdir
  3907  06DF  00F6               	movwf	??_waitFlag
  3908  06E0  01F7               	clrf	??_waitFlag+1
  3909  06E1  1003               	clrc
  3910  06E2  0DF6               	rlf	??_waitFlag,f
  3911  06E3  0DF7               	rlf	??_waitFlag+1,f
  3912  06E4  083C               	movf	waitFlag@buf,w
  3913  06E5  00F8               	movwf	??_waitFlag+2
  3914  06E6  01F9               	clrf	??_waitFlag+3
  3915  06E7  0877               	movf	??_waitFlag+1,w
  3916  06E8  0679               	xorwf	??_waitFlag+3,w
  3917  06E9  1D03               	skipz
  3918  06EA  2EED               	goto	u2595
  3919  06EB  0876               	movf	??_waitFlag,w
  3920  06EC  0678               	xorwf	??_waitFlag+2,w
  3921  06ED                     u2595:	
  3922  06ED  1D03               	skipz
  3923  06EE  2FB0               	goto	l3070
  3924                           
  3925                           ;decode_AX25.c: 222: dPacket[dPacketnum] = buf;
  3926  06EF  083C               	movf	waitFlag@buf,w
  3927  06F0  00F6               	movwf	??_waitFlag
  3928  06F1  0866               	movf	_dPacketnum,w
  3929  06F2  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3930  06F3  0084               	movwf	4
  3931  06F4  0876               	movf	??_waitFlag,w
  3932  06F5  1783               	bsf	3,7	;select IRP bank3
  3933  06F6  0080               	movwf	0
  3934                           
  3935                           ;decode_AX25.c: 223: dPacketnum ++;
  3936  06F7  3001               	movlw	1
  3937  06F8  07E6               	addwf	_dPacketnum,f
  3938  06F9  1803               	skipnc
  3939  06FA  0AE7               	incf	_dPacketnum+1,f
  3940  06FB  3000               	movlw	0
  3941  06FC  07E7               	addwf	_dPacketnum+1,f
  3942                           
  3943                           ;decode_AX25.c: 224: for(UINT j=0;j<8;j++){
  3944  06FD  01B6               	clrf	waitFlag@j_128
  3945  06FE  01B7               	clrf	waitFlag@j_128+1
  3946  06FF  3000               	movlw	0
  3947  0700  0237               	subwf	waitFlag@j_128+1,w
  3948  0701  3008               	movlw	8
  3949  0702  1903               	skipnz
  3950  0703  0236               	subwf	waitFlag@j_128,w
  3951  0704  1803               	btfsc	3,0
  3952  0705  2F2E               	goto	l3026
  3953  0706                     l3012:	
  3954                           
  3955                           ;decode_AX25.c: 225: flag_judge = getbit();
  3956  0706  120A  158A  229B  120A  118A  	fcall	_getbit
  3957  070B  0871               	movf	?_getbit+1,w
  3958  070C  1283               	bcf	3,5	;RP0=0, select bank0
  3959  070D  1303               	bcf	3,6	;RP1=0, select bank0
  3960  070E  00BB               	movwf	waitFlag@flag_judge+1
  3961  070F  0870               	movf	?_getbit,w
  3962  0710  00BA               	movwf	waitFlag@flag_judge
  3963                           
  3964                           ;decode_AX25.c: 226: buf = buf >> 1;
  3965  0711  083C               	movf	waitFlag@buf,w
  3966  0712  00F6               	movwf	??_waitFlag
  3967  0713  1003               	clrc
  3968  0714  0C76               	rrf	??_waitFlag,w
  3969  0715  00F7               	movwf	??_waitFlag+1
  3970  0716  0877               	movf	??_waitFlag+1,w
  3971  0717  00BC               	movwf	waitFlag@buf
  3972                           
  3973                           ;decode_AX25.c: 228: buf = buf | 0x00;
  3974  0718  083A               	movf	waitFlag@flag_judge,w
  3975  0719  043B               	iorwf	waitFlag@flag_judge+1,w
  3976  071A  1903               	btfsc	3,2
  3977  071B  2F21               	goto	l3022
  3978                           
  3979                           ;decode_AX25.c: 230: buf = buf | 0x80;
  3980                           
  3981                           ;decode_AX25.c: 229: }else{
  3982  071C  083C               	movf	waitFlag@buf,w
  3983  071D  3880               	iorlw	128
  3984  071E  00F6               	movwf	??_waitFlag
  3985  071F  0876               	movf	??_waitFlag,w
  3986  0720  00BC               	movwf	waitFlag@buf
  3987  0721                     l3022:	
  3988  0721  3001               	movlw	1
  3989  0722  07B6               	addwf	waitFlag@j_128,f
  3990  0723  1803               	skipnc
  3991  0724  0AB7               	incf	waitFlag@j_128+1,f
  3992  0725  3000               	movlw	0
  3993  0726  07B7               	addwf	waitFlag@j_128+1,f
  3994  0727  3000               	movlw	0
  3995  0728  0237               	subwf	waitFlag@j_128+1,w
  3996  0729  3008               	movlw	8
  3997  072A  1903               	skipnz
  3998  072B  0236               	subwf	waitFlag@j_128,w
  3999  072C  1C03               	skipc
  4000  072D  2F06               	goto	l3012
  4001  072E                     l3026:	
  4002                           
  4003                           ;decode_AX25.c: 231: }
  4004                           ;decode_AX25.c: 232: }
  4005                           ;decode_AX25.c: 233: if(buf == ("JQ1ZHX"[4] << 1)){
  4006  072E  300F               	movlw	low (((STR_7+4)-__stringbase)| (0+32768))
  4007  072F  0084               	movwf	4
  4008  0730  120A  158A  2000  120A  118A  	fcall	stringdir
  4009  0735  00F6               	movwf	??_waitFlag
  4010  0736  01F7               	clrf	??_waitFlag+1
  4011  0737  1003               	clrc
  4012  0738  0DF6               	rlf	??_waitFlag,f
  4013  0739  0DF7               	rlf	??_waitFlag+1,f
  4014  073A  083C               	movf	waitFlag@buf,w
  4015  073B  00F8               	movwf	??_waitFlag+2
  4016  073C  01F9               	clrf	??_waitFlag+3
  4017  073D  0877               	movf	??_waitFlag+1,w
  4018  073E  0679               	xorwf	??_waitFlag+3,w
  4019  073F  1D03               	skipz
  4020  0740  2F43               	goto	u2635
  4021  0741  0876               	movf	??_waitFlag,w
  4022  0742  0678               	xorwf	??_waitFlag+2,w
  4023  0743                     u2635:	
  4024  0743  1D03               	skipz
  4025  0744  2FB0               	goto	l3070
  4026                           
  4027                           ;decode_AX25.c: 234: dPacket[dPacketnum] = buf;
  4028  0745  083C               	movf	waitFlag@buf,w
  4029  0746  00F6               	movwf	??_waitFlag
  4030  0747  0866               	movf	_dPacketnum,w
  4031  0748  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4032  0749  0084               	movwf	4
  4033  074A  0876               	movf	??_waitFlag,w
  4034  074B  1783               	bsf	3,7	;select IRP bank3
  4035  074C  0080               	movwf	0
  4036                           
  4037                           ;decode_AX25.c: 235: dPacketnum ++;
  4038  074D  3001               	movlw	1
  4039  074E  07E6               	addwf	_dPacketnum,f
  4040  074F  1803               	skipnc
  4041  0750  0AE7               	incf	_dPacketnum+1,f
  4042  0751  3000               	movlw	0
  4043  0752  07E7               	addwf	_dPacketnum+1,f
  4044                           
  4045                           ;decode_AX25.c: 236: for(UINT j=0;j<8;j++){
  4046  0753  01B8               	clrf	waitFlag@j_130
  4047  0754  01B9               	clrf	waitFlag@j_130+1
  4048  0755  3000               	movlw	0
  4049  0756  0239               	subwf	waitFlag@j_130+1,w
  4050  0757  3008               	movlw	8
  4051  0758  1903               	skipnz
  4052  0759  0238               	subwf	waitFlag@j_130,w
  4053  075A  1803               	btfsc	3,0
  4054  075B  2F84               	goto	l3052
  4055  075C                     l3038:	
  4056                           
  4057                           ;decode_AX25.c: 237: flag_judge = getbit();
  4058  075C  120A  158A  229B  120A  118A  	fcall	_getbit
  4059  0761  0871               	movf	?_getbit+1,w
  4060  0762  1283               	bcf	3,5	;RP0=0, select bank0
  4061  0763  1303               	bcf	3,6	;RP1=0, select bank0
  4062  0764  00BB               	movwf	waitFlag@flag_judge+1
  4063  0765  0870               	movf	?_getbit,w
  4064  0766  00BA               	movwf	waitFlag@flag_judge
  4065                           
  4066                           ;decode_AX25.c: 238: buf = buf >> 1;
  4067  0767  083C               	movf	waitFlag@buf,w
  4068  0768  00F6               	movwf	??_waitFlag
  4069  0769  1003               	clrc
  4070  076A  0C76               	rrf	??_waitFlag,w
  4071  076B  00F7               	movwf	??_waitFlag+1
  4072  076C  0877               	movf	??_waitFlag+1,w
  4073  076D  00BC               	movwf	waitFlag@buf
  4074                           
  4075                           ;decode_AX25.c: 240: buf = buf | 0x00;
  4076  076E  083A               	movf	waitFlag@flag_judge,w
  4077  076F  043B               	iorwf	waitFlag@flag_judge+1,w
  4078  0770  1903               	btfsc	3,2
  4079  0771  2F77               	goto	l3048
  4080                           
  4081                           ;decode_AX25.c: 242: buf = buf | 0x80;
  4082                           
  4083                           ;decode_AX25.c: 241: }else{
  4084  0772  083C               	movf	waitFlag@buf,w
  4085  0773  3880               	iorlw	128
  4086  0774  00F6               	movwf	??_waitFlag
  4087  0775  0876               	movf	??_waitFlag,w
  4088  0776  00BC               	movwf	waitFlag@buf
  4089  0777                     l3048:	
  4090  0777  3001               	movlw	1
  4091  0778  07B8               	addwf	waitFlag@j_130,f
  4092  0779  1803               	skipnc
  4093  077A  0AB9               	incf	waitFlag@j_130+1,f
  4094  077B  3000               	movlw	0
  4095  077C  07B9               	addwf	waitFlag@j_130+1,f
  4096  077D  3000               	movlw	0
  4097  077E  0239               	subwf	waitFlag@j_130+1,w
  4098  077F  3008               	movlw	8
  4099  0780  1903               	skipnz
  4100  0781  0238               	subwf	waitFlag@j_130,w
  4101  0782  1C03               	skipc
  4102  0783  2F5C               	goto	l3038
  4103  0784                     l3052:	
  4104                           
  4105                           ;decode_AX25.c: 243: }
  4106                           ;decode_AX25.c: 244: }
  4107                           ;decode_AX25.c: 245: if(buf == ("JQ1ZHX"[5] << 1)){
  4108  0784  3010               	movlw	low (((STR_7+5)-__stringbase)| (0+32768))
  4109  0785  0084               	movwf	4
  4110  0786  120A  158A  2000  120A  118A  	fcall	stringdir
  4111  078B  00F6               	movwf	??_waitFlag
  4112  078C  01F7               	clrf	??_waitFlag+1
  4113  078D  1003               	clrc
  4114  078E  0DF6               	rlf	??_waitFlag,f
  4115  078F  0DF7               	rlf	??_waitFlag+1,f
  4116  0790  083C               	movf	waitFlag@buf,w
  4117  0791  00F8               	movwf	??_waitFlag+2
  4118  0792  01F9               	clrf	??_waitFlag+3
  4119  0793  0877               	movf	??_waitFlag+1,w
  4120  0794  0679               	xorwf	??_waitFlag+3,w
  4121  0795  1D03               	skipz
  4122  0796  2F99               	goto	u2675
  4123  0797  0876               	movf	??_waitFlag,w
  4124  0798  0678               	xorwf	??_waitFlag+2,w
  4125  0799                     u2675:	
  4126  0799  1D03               	skipz
  4127  079A  2FB0               	goto	l3070
  4128                           
  4129                           ;decode_AX25.c: 246: dPacket[dPacketnum] = buf;
  4130  079B  083C               	movf	waitFlag@buf,w
  4131  079C  00F6               	movwf	??_waitFlag
  4132  079D  0866               	movf	_dPacketnum,w
  4133  079E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4134  079F  0084               	movwf	4
  4135  07A0  0876               	movf	??_waitFlag,w
  4136  07A1  1783               	bsf	3,7	;select IRP bank3
  4137  07A2  0080               	movwf	0
  4138                           
  4139                           ;decode_AX25.c: 247: dPacketnum ++;
  4140  07A3  3001               	movlw	1
  4141  07A4  07E6               	addwf	_dPacketnum,f
  4142  07A5  1803               	skipnc
  4143  07A6  0AE7               	incf	_dPacketnum+1,f
  4144  07A7  3000               	movlw	0
  4145  07A8  07E7               	addwf	_dPacketnum+1,f
  4146                           
  4147                           ;decode_AX25.c: 248: rcv_state ++;
  4148  07A9  3001               	movlw	1
  4149  07AA  07EA               	addwf	_rcv_state,f
  4150  07AB  1803               	skipnc
  4151  07AC  0AEB               	incf	_rcv_state+1,f
  4152  07AD  3000               	movlw	0
  4153  07AE  07EB               	addwf	_rcv_state+1,f
  4154                           
  4155                           ;decode_AX25.c: 249: }else{
  4156  07AF  2B2F               	goto	l3072
  4157  07B0                     l3070:	
  4158                           ;decode_AX25.c: 268: }
  4159                           ;decode_AX25.c: 269: }else{
  4160                           
  4161                           ;decode_AX25.c: 267: rcv_state = 0;
  4162                           
  4163                           ;decode_AX25.c: 266: dPacketnum = 0;
  4164                           
  4165                           ;decode_AX25.c: 264: }
  4166                           ;decode_AX25.c: 265: }else{
  4167                           
  4168                           ;decode_AX25.c: 263: rcv_state = 0;
  4169                           
  4170                           ;decode_AX25.c: 262: dPacketnum = 0;
  4171                           
  4172                           ;decode_AX25.c: 260: }
  4173                           ;decode_AX25.c: 261: }else{
  4174                           
  4175                           ;decode_AX25.c: 259: rcv_state = 0;
  4176                           
  4177                           ;decode_AX25.c: 258: dPacketnum = 0;
  4178                           
  4179                           ;decode_AX25.c: 256: }
  4180                           ;decode_AX25.c: 257: }else{
  4181                           
  4182                           ;decode_AX25.c: 255: rcv_state = 0;
  4183                           
  4184                           ;decode_AX25.c: 254: dPacketnum = 0;
  4185                           
  4186                           ;decode_AX25.c: 252: }
  4187                           ;decode_AX25.c: 253: }else{
  4188                           
  4189                           ;decode_AX25.c: 251: rcv_state = 0;
  4190                           
  4191                           ;decode_AX25.c: 250: dPacketnum = 0;
  4192                           
  4193                           
  4194                           ;decode_AX25.c: 270: dPacketnum = 0;
  4195  07B0  01E6               	clrf	_dPacketnum
  4196  07B1  01E7               	clrf	_dPacketnum+1
  4197  07B2  2B2D               	goto	L6
  4198  07B3                     __end_of_waitFlag:	
  4199                           
  4200                           	psect	text5
  4201  0BFB                     __ptext5:	
  4202 ;; *************** function _getdata *****************
  4203 ;; Defined at:
  4204 ;;		line 278 in file "decode_AX25.c"
  4205 ;; Parameters:    Size  Location     Type
  4206 ;;		None
  4207 ;; Auto vars:     Size  Location     Type
  4208 ;;  dbitstatus      2    4[BANK0 ] unsigned int 
  4209 ;;  dstuff          2    2[BANK0 ] unsigned int 
  4210 ;;  bufstore_cou    2    0[BANK0 ] unsigned int 
  4211 ;;  buf             1    6[BANK0 ] unsigned char 
  4212 ;;  dammy_data      1    0        unsigned char 
  4213 ;; Return value:  Size  Location     Type
  4214 ;;                  1    wreg      void 
  4215 ;; Registers used:
  4216 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4217 ;; Tracked objects:
  4218 ;;		On entry : 0/0
  4219 ;;		On exit  : 0/0
  4220 ;;		Unchanged: 0/0
  4221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4222 ;;      Params:         0       0       0       0       0
  4223 ;;      Locals:         0       7       0       0       0
  4224 ;;      Temps:          2       0       0       0       0
  4225 ;;      Totals:         2       7       0       0       0
  4226 ;;Total ram usage:        9 bytes
  4227 ;; Hardware stack levels used:    1
  4228 ;; Hardware stack levels required when called:    1
  4229 ;; This function calls:
  4230 ;;		_getbit
  4231 ;; This function is called by:
  4232 ;;		_ReceivePacket_data
  4233 ;;		_ReceivePacket
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           
  4238                           ;psect for function _getdata
  4239  0BFB                     _getdata:	
  4240                           
  4241                           ;decode_AX25.c: 279: UBYTE buf = 0x00;
  4242                           
  4243                           ;incstack = 0
  4244                           ; Regs used in _getdata: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4245  0BFB  1283               	bcf	3,5	;RP0=0, select bank0
  4246  0BFC  1303               	bcf	3,6	;RP1=0, select bank0
  4247  0BFD  01A6               	clrf	getdata@buf
  4248                           
  4249                           ;decode_AX25.c: 280: UINT dstuff = 0;
  4250  0BFE  01A2               	clrf	getdata@dstuff
  4251  0BFF  01A3               	clrf	getdata@dstuff+1
  4252                           
  4253                           ;decode_AX25.c: 281: UBYTE dammy_data;
  4254                           ;decode_AX25.c: 282: UINT bufstore_counter = 0;
  4255  0C00  01A0               	clrf	getdata@bufstore_counter
  4256  0C01  01A1               	clrf	getdata@bufstore_counter+1
  4257                           
  4258                           ;decode_AX25.c: 283: UINT dbitstatus = 0;
  4259  0C02  01A4               	clrf	getdata@dbitstatus
  4260  0C03  01A5               	clrf	getdata@dbitstatus+1
  4261  0C04                     l3106:	
  4262                           ;decode_AX25.c: 285: while(rcv_state == 2){
  4263                           
  4264  0C04  3002               	movlw	2
  4265  0C05  066A               	xorwf	_rcv_state,w
  4266  0C06  046B               	iorwf	_rcv_state+1,w
  4267  0C07  1D03               	btfss	3,2
  4268  0C08  0008               	return
  4269                           
  4270                           ;decode_AX25.c: 286: dbitstatus = getbit();
  4271  0C09  120A  158A  229B  120A  158A  	fcall	_getbit
  4272  0C0E  0871               	movf	?_getbit+1,w
  4273  0C0F  1283               	bcf	3,5	;RP0=0, select bank0
  4274  0C10  1303               	bcf	3,6	;RP1=0, select bank0
  4275  0C11  00A5               	movwf	getdata@dbitstatus+1
  4276  0C12  0870               	movf	?_getbit,w
  4277  0C13  00A4               	movwf	getdata@dbitstatus
  4278                           
  4279                           ;decode_AX25.c: 287: if(dstuff == 5){
  4280  0C14  3005               	movlw	5
  4281  0C15  0622               	xorwf	getdata@dstuff,w
  4282  0C16  0423               	iorwf	getdata@dstuff+1,w
  4283  0C17  1D03               	btfss	3,2
  4284  0C18  2C27               	goto	l3088
  4285                           
  4286                           ;decode_AX25.c: 288: if(dbitstatus == 1){
  4287  0C19  0324               	decf	getdata@dbitstatus,w
  4288  0C1A  0425               	iorwf	getdata@dbitstatus+1,w
  4289  0C1B  1D03               	btfss	3,2
  4290  0C1C  2C24               	goto	l3086
  4291                           
  4292                           ;decode_AX25.c: 289: rcv_state ++;
  4293  0C1D  3001               	movlw	1
  4294  0C1E  07EA               	addwf	_rcv_state,f
  4295  0C1F  1803               	skipnc
  4296  0C20  0AEB               	incf	_rcv_state+1,f
  4297  0C21  3000               	movlw	0
  4298  0C22  07EB               	addwf	_rcv_state+1,f
  4299                           
  4300                           ;decode_AX25.c: 290: break;
  4301  0C23  0008               	return
  4302  0C24                     l3086:	
  4303                           ;decode_AX25.c: 291: }else{
  4304                           
  4305                           
  4306                           ;decode_AX25.c: 292: dstuff = 0;
  4307  0C24  01A2               	clrf	getdata@dstuff
  4308  0C25  01A3               	clrf	getdata@dstuff+1
  4309                           
  4310                           ;decode_AX25.c: 293: }
  4311                           ;decode_AX25.c: 294: }else{
  4312  0C26  2C04               	goto	l3106
  4313  0C27                     l3088:	
  4314                           
  4315                           ;decode_AX25.c: 295: buf = buf >> 1;
  4316  0C27  0826               	movf	getdata@buf,w
  4317  0C28  00F6               	movwf	??_getdata
  4318  0C29  1003               	clrc
  4319  0C2A  0C76               	rrf	??_getdata,w
  4320  0C2B  00F7               	movwf	??_getdata+1
  4321  0C2C  0877               	movf	??_getdata+1,w
  4322  0C2D  00A6               	movwf	getdata@buf
  4323                           
  4324                           ;decode_AX25.c: 297: buf = buf | 0x00;
  4325  0C2E  0824               	movf	getdata@dbitstatus,w
  4326  0C2F  0425               	iorwf	getdata@dbitstatus+1,w
  4327  0C30  1D03               	btfss	3,2
  4328  0C31  2C35               	goto	l3092
  4329                           
  4330                           ;decode_AX25.c: 298: dstuff = 0;
  4331  0C32  01A2               	clrf	getdata@dstuff
  4332  0C33  01A3               	clrf	getdata@dstuff+1
  4333                           
  4334                           ;decode_AX25.c: 299: }else{
  4335  0C34  2C40               	goto	l3096
  4336  0C35                     l3092:	
  4337                           
  4338                           ;decode_AX25.c: 300: buf = buf | 0x80;
  4339  0C35  0826               	movf	getdata@buf,w
  4340  0C36  3880               	iorlw	128
  4341  0C37  00F6               	movwf	??_getdata
  4342  0C38  0876               	movf	??_getdata,w
  4343  0C39  00A6               	movwf	getdata@buf
  4344                           
  4345                           ;decode_AX25.c: 301: dstuff ++;
  4346  0C3A  3001               	movlw	1
  4347  0C3B  07A2               	addwf	getdata@dstuff,f
  4348  0C3C  1803               	skipnc
  4349  0C3D  0AA3               	incf	getdata@dstuff+1,f
  4350  0C3E  3000               	movlw	0
  4351  0C3F  07A3               	addwf	getdata@dstuff+1,f
  4352  0C40                     l3096:	
  4353                           
  4354                           ;decode_AX25.c: 302: }
  4355                           ;decode_AX25.c: 303: bufstore_counter ++;
  4356  0C40  3001               	movlw	1
  4357  0C41  07A0               	addwf	getdata@bufstore_counter,f
  4358  0C42  1803               	skipnc
  4359  0C43  0AA1               	incf	getdata@bufstore_counter+1,f
  4360  0C44  3000               	movlw	0
  4361  0C45  07A1               	addwf	getdata@bufstore_counter+1,f
  4362                           
  4363                           ;decode_AX25.c: 304: if(bufstore_counter == 8){
  4364  0C46  3008               	movlw	8
  4365  0C47  0620               	xorwf	getdata@bufstore_counter,w
  4366  0C48  0421               	iorwf	getdata@bufstore_counter+1,w
  4367  0C49  1D03               	btfss	3,2
  4368  0C4A  2C04               	goto	l3106
  4369                           
  4370                           ;decode_AX25.c: 305: bufstore_counter = 0;
  4371  0C4B  01A0               	clrf	getdata@bufstore_counter
  4372  0C4C  01A1               	clrf	getdata@bufstore_counter+1
  4373                           
  4374                           ;decode_AX25.c: 306: dPacket[dPacketnum] = buf;
  4375  0C4D  0826               	movf	getdata@buf,w
  4376  0C4E  00F6               	movwf	??_getdata
  4377  0C4F  0866               	movf	_dPacketnum,w
  4378  0C50  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4379  0C51  0084               	movwf	4
  4380  0C52  0876               	movf	??_getdata,w
  4381  0C53  1783               	bsf	3,7	;select IRP bank3
  4382  0C54  0080               	movwf	0
  4383                           
  4384                           ;decode_AX25.c: 307: dPacketnum ++;
  4385  0C55  3001               	movlw	1
  4386  0C56  07E6               	addwf	_dPacketnum,f
  4387  0C57  1803               	skipnc
  4388  0C58  0AE7               	incf	_dPacketnum+1,f
  4389  0C59  3000               	movlw	0
  4390  0C5A  07E7               	addwf	_dPacketnum+1,f
  4391  0C5B  2C04               	goto	l3106
  4392  0C5C                     __end_of_getdata:	
  4393                           
  4394                           	psect	text6
  4395  0A9B                     __ptext6:	
  4396 ;; *************** function _getbit *****************
  4397 ;; Defined at:
  4398 ;;		line 40 in file "decode_AX25.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;		None
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;  i               2    4[COMMON] unsigned int 
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  2    0[COMMON] unsigned int 
  4405 ;; Registers used:
  4406 ;;		wreg, status,2, status,0
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4412 ;;      Params:         2       0       0       0       0
  4413 ;;      Locals:         2       0       0       0       0
  4414 ;;      Temps:          2       0       0       0       0
  4415 ;;      Totals:         6       0       0       0       0
  4416 ;;Total ram usage:        6 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; This function calls:
  4419 ;;		Nothing
  4420 ;; This function is called by:
  4421 ;;		_waitFlag
  4422 ;;		_getdata
  4423 ;;		_conv_DI_UARTRX
  4424 ;; This function uses a non-reentrant model
  4425 ;;
  4426                           
  4427                           
  4428                           ;psect for function _getbit
  4429  0A9B                     _getbit:	
  4430                           
  4431                           ;decode_AX25.c: 41: static UINT oldbit;
  4432                           ;decode_AX25.c: 42: oldbit = RB5;
  4433                           
  4434                           ;incstack = 0
  4435                           ; Regs used in _getbit: [wreg+status,2+status,0]
  4436  0A9B  1003               	clrc
  4437  0A9C  1283               	bcf	3,5	;RP0=0, select bank0
  4438  0A9D  1303               	bcf	3,6	;RP1=0, select bank0
  4439  0A9E  1A86               	btfsc	6,5	;volatile
  4440  0A9F  1403               	setc
  4441  0AA0  3000               	movlw	0
  4442  0AA1  1803               	skipnc
  4443  0AA2  3001               	movlw	1
  4444  0AA3  00F2               	movwf	??_getbit
  4445  0AA4  01F3               	clrf	??_getbit+1
  4446  0AA5  0872               	movf	??_getbit,w
  4447  0AA6  1683               	bsf	3,5	;RP0=1, select bank1
  4448  0AA7  1303               	bcf	3,6	;RP1=0, select bank1
  4449  0AA8  00E7               	movwf	getbit@oldbit^(0+128)
  4450  0AA9  0873               	movf	??_getbit+1,w
  4451  0AAA  00E8               	movwf	(getbit@oldbit+1)^(0+128)
  4452                           
  4453                           ;decode_AX25.c: 43: for(UINT i=0;i<62;i++){
  4454  0AAB  01F4               	clrf	getbit@i
  4455  0AAC  01F5               	clrf	getbit@i+1
  4456  0AAD  3000               	movlw	0
  4457  0AAE  0275               	subwf	getbit@i+1,w
  4458  0AAF  303E               	movlw	62
  4459  0AB0  1903               	skipnz
  4460  0AB1  0274               	subwf	getbit@i,w
  4461  0AB2  1803               	btfsc	3,0
  4462  0AB3  2AE2               	goto	l2552
  4463                           
  4464                           ;decode_AX25.c: 44: if(RB5 != oldbit){
  4465  0AB4  1003               	clrc
  4466  0AB5                     L7:	
  4467  0AB5  1283               	bcf	3,5	;RP0=0, select bank0
  4468  0AB6  1A86               	btfsc	6,5	;volatile
  4469  0AB7  1403               	setc
  4470  0AB8  3000               	movlw	0
  4471  0AB9  1803               	skipnc
  4472  0ABA  3001               	movlw	1
  4473  0ABB  00F2               	movwf	??_getbit
  4474  0ABC  01F3               	clrf	??_getbit+1
  4475  0ABD  1683               	bsf	3,5	;RP0=1, select bank1
  4476  0ABE  1303               	bcf	3,6	;RP1=0, select bank1
  4477  0ABF  0868               	movf	(getbit@oldbit+1)^(0+128),w
  4478  0AC0  0673               	xorwf	??_getbit+1,w
  4479  0AC1  1D03               	skipz
  4480  0AC2  2AC5               	goto	u1905
  4481  0AC3  0867               	movf	getbit@oldbit^(0+128),w
  4482  0AC4  0672               	xorwf	??_getbit,w
  4483  0AC5                     u1905:	
  4484  0AC5  1903               	skipnz
  4485  0AC6  2AD5               	goto	l2550
  4486                           
  4487                           ;decode_AX25.c: 45: _delay((unsigned long)((400)*(10000000/4000000.0)));
  4488  0AC7  30F9               	movlw	249
  4489  0AC8  00F2               	movwf	??_getbit
  4490  0AC9                     u3707:	
  4491  0AC9  0000               	nop
  4492  0ACA  0BF2               	decfsz	??_getbit,f
  4493  0ACB  2AC9               	goto	u3707
  4494  0ACC  2ACD               	nop2	;nop
  4495  0ACD  0000               	nop
  4496                           
  4497                           ;decode_AX25.c: 46: RC2= 1- RC2;
  4498  0ACE  3004               	movlw	4
  4499  0ACF  1283               	bcf	3,5	;RP0=0, select bank0
  4500  0AD0  1303               	bcf	3,6	;RP1=0, select bank0
  4501  0AD1  0687               	xorwf	7,f
  4502                           
  4503                           ;decode_AX25.c: 47: return 0;
  4504  0AD2  01F0               	clrf	?_getbit
  4505  0AD3  01F1               	clrf	?_getbit+1
  4506  0AD4  0008               	return
  4507  0AD5                     l2550:	
  4508  0AD5  3001               	movlw	1
  4509  0AD6  07F4               	addwf	getbit@i,f
  4510  0AD7  1803               	skipnc
  4511  0AD8  0AF5               	incf	getbit@i+1,f
  4512  0AD9  3000               	movlw	0
  4513  0ADA  07F5               	addwf	getbit@i+1,f
  4514  0ADB  3000               	movlw	0
  4515  0ADC  0275               	subwf	getbit@i+1,w
  4516  0ADD  303E               	movlw	62
  4517  0ADE  1903               	skipnz
  4518  0ADF  0274               	subwf	getbit@i,w
  4519  0AE0  1C03               	skipc
  4520  0AE1  2AB5               	goto	L7
  4521  0AE2                     l2552:	
  4522                           
  4523                           ;decode_AX25.c: 48: }
  4524                           ;decode_AX25.c: 49: }
  4525                           ;decode_AX25.c: 50: return 1;
  4526  0AE2  3001               	movlw	1
  4527  0AE3  00F0               	movwf	?_getbit
  4528  0AE4  3000               	movlw	0
  4529  0AE5  00F1               	movwf	?_getbit+1
  4530  0AE6  0008               	return
  4531  0AE7                     __end_of_getbit:	
  4532                           
  4533                           	psect	text7
  4534  002A                     __ptext7:	
  4535 ;; *************** function _fcscheck *****************
  4536 ;; Defined at:
  4537 ;;		line 313 in file "decode_AX25.c"
  4538 ;; Parameters:    Size  Location     Type
  4539 ;;		None
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;  i               2    7[COMMON] unsigned int 
  4542 ;;  i               2    5[COMMON] unsigned int 
  4543 ;;  byte            1    9[COMMON] unsigned char 
  4544 ;;  bt              1    4[COMMON] unsigned char 
  4545 ;; Return value:  Size  Location     Type
  4546 ;;                  2    0[COMMON] unsigned int 
  4547 ;; Registers used:
  4548 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4549 ;; Tracked objects:
  4550 ;;		On entry : 0/0
  4551 ;;		On exit  : 0/0
  4552 ;;		Unchanged: 0/0
  4553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4554 ;;      Params:         2       0       0       0       0
  4555 ;;      Locals:         6       0       0       0       0
  4556 ;;      Temps:          2       0       0       0       0
  4557 ;;      Totals:        10       0       0       0       0
  4558 ;;Total ram usage:       10 bytes
  4559 ;; Hardware stack levels used:    1
  4560 ;; This function calls:
  4561 ;;		Nothing
  4562 ;; This function is called by:
  4563 ;;		_ReceivePacket_data
  4564 ;;		_ReceivePacket
  4565 ;; This function uses a non-reentrant model
  4566 ;;
  4567                           
  4568                           
  4569                           ;psect for function _fcscheck
  4570  002A                     _fcscheck:	
  4571                           
  4572                           ;decode_AX25.c: 314: UBYTE bt,byte;
  4573                           ;decode_AX25.c: 315: dfcslo = dfcshi = 0xff;
  4574                           
  4575                           ;incstack = 0
  4576                           ; Regs used in _fcscheck: [wreg-fsr0h+status,2+status,0]
  4577  002A  30FF               	movlw	255
  4578  002B  1283               	bcf	3,5	;RP0=0, select bank0
  4579  002C  1303               	bcf	3,6	;RP1=0, select bank0
  4580  002D  00EC               	movwf	_dfcshi
  4581  002E  00F2               	movwf	??_fcscheck
  4582  002F  0872               	movf	??_fcscheck,w
  4583  0030  00ED               	movwf	_dfcslo
  4584                           
  4585                           ;decode_AX25.c: 316: while(rcv_state == 3){
  4586  0031  3003               	movlw	3
  4587  0032  066A               	xorwf	_rcv_state,w
  4588  0033  046B               	iorwf	_rcv_state+1,w
  4589  0034  1D03               	btfss	3,2
  4590  0035  0008               	return
  4591                           
  4592                           ;decode_AX25.c: 317: for(UINT i=0;i<dPacketnum-2;i++){
  4593  0036  01F5               	clrf	fcscheck@i
  4594  0037  01F6               	clrf	fcscheck@i+1
  4595  0038                     l3134:	
  4596  0038  0866               	movf	_dPacketnum,w
  4597  0039  3EFE               	addlw	254
  4598  003A  00F2               	movwf	??_fcscheck
  4599  003B  0867               	movf	_dPacketnum+1,w
  4600  003C  1803               	skipnc
  4601  003D  3E01               	addlw	1
  4602  003E  3EFF               	addlw	255
  4603  003F  00F3               	movwf	??_fcscheck+1
  4604  0040  0873               	movf	??_fcscheck+1,w
  4605  0041  0276               	subwf	fcscheck@i+1,w
  4606  0042  1D03               	skipz
  4607  0043  2846               	goto	u2775
  4608  0044  0872               	movf	??_fcscheck,w
  4609  0045  0275               	subwf	fcscheck@i,w
  4610  0046                     u2775:	
  4611  0046  1803               	btfsc	3,0
  4612  0047  2891               	goto	l272
  4613                           
  4614                           ;decode_AX25.c: 318: byte = dPacket[i];
  4615  0048  0875               	movf	fcscheck@i,w
  4616  0049  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4617  004A  0084               	movwf	4
  4618  004B  1783               	bsf	3,7	;select IRP bank3
  4619  004C  0800               	movf	0,w
  4620  004D  00F2               	movwf	??_fcscheck
  4621  004E  0872               	movf	??_fcscheck,w
  4622  004F  00F9               	movwf	fcscheck@byte
  4623                           
  4624                           ;decode_AX25.c: 319: for(UINT i=0;i<8;i++){
  4625  0050  01F7               	clrf	fcscheck@i_142
  4626  0051  01F8               	clrf	fcscheck@i_142+1
  4627  0052  3000               	movlw	0
  4628  0053  0278               	subwf	fcscheck@i_142+1,w
  4629  0054  3008               	movlw	8
  4630  0055  1903               	skipnz
  4631  0056  0277               	subwf	fcscheck@i_142,w
  4632  0057  1803               	btfsc	3,0
  4633  0058  288A               	goto	l3132
  4634  0059                     l3120:	
  4635                           
  4636                           ;decode_AX25.c: 320: bt = byte & 0x01;
  4637  0059  0879               	movf	fcscheck@byte,w
  4638  005A  3901               	andlw	1
  4639  005B  00F2               	movwf	??_fcscheck
  4640  005C  0872               	movf	??_fcscheck,w
  4641  005D  00F4               	movwf	fcscheck@bt
  4642  005E  1003               	bcf	3,0	;# 
  4643  005F  0CEC               	rrf	_dfcshi,f	;# 
  4644  0060  0CED               	rrf	_dfcslo,f	;# 
  4645                           
  4646                           ;decode_AX25.c: 326: if(((STATUS & 0x01)^bt) == 0x01){
  4647  0061  3001               	movlw	1
  4648  0062  1283               	bcf	3,5	;RP0=0, select bank0
  4649  0063  1303               	bcf	3,6	;RP1=0, select bank0
  4650  0064  0503               	andwf	3,w	;volatile
  4651  0065  00F2               	movwf	??_fcscheck
  4652  0066  0874               	movf	fcscheck@bt,w
  4653  0067  0672               	xorwf	??_fcscheck,w
  4654  0068  00F3               	movwf	??_fcscheck+1
  4655  0069  0373               	decf	??_fcscheck+1,w
  4656  006A  1D03               	btfss	3,2
  4657  006B  2876               	goto	l3126
  4658                           
  4659                           ;decode_AX25.c: 327: dfcshi = dfcshi ^ 0x84;
  4660  006C  086C               	movf	_dfcshi,w
  4661  006D  3A84               	xorlw	132
  4662  006E  00F2               	movwf	??_fcscheck
  4663  006F  0872               	movf	??_fcscheck,w
  4664  0070  00EC               	movwf	_dfcshi
  4665                           
  4666                           ;decode_AX25.c: 328: dfcslo = dfcslo ^ 0x08;
  4667  0071  086D               	movf	_dfcslo,w
  4668  0072  3A08               	xorlw	8
  4669  0073  00F2               	movwf	??_fcscheck
  4670  0074  0872               	movf	??_fcscheck,w
  4671  0075  00ED               	movwf	_dfcslo
  4672  0076                     l3126:	
  4673                           
  4674                           ;decode_AX25.c: 329: }
  4675                           ;decode_AX25.c: 330: byte = byte >> 1;
  4676  0076  0879               	movf	fcscheck@byte,w
  4677  0077  00F2               	movwf	??_fcscheck
  4678  0078  1003               	clrc
  4679  0079  0C72               	rrf	??_fcscheck,w
  4680  007A  00F3               	movwf	??_fcscheck+1
  4681  007B  0873               	movf	??_fcscheck+1,w
  4682  007C  00F9               	movwf	fcscheck@byte
  4683  007D  3001               	movlw	1
  4684  007E  07F7               	addwf	fcscheck@i_142,f
  4685  007F  1803               	skipnc
  4686  0080  0AF8               	incf	fcscheck@i_142+1,f
  4687  0081  3000               	movlw	0
  4688  0082  07F8               	addwf	fcscheck@i_142+1,f
  4689  0083  3000               	movlw	0
  4690  0084  0278               	subwf	fcscheck@i_142+1,w
  4691  0085  3008               	movlw	8
  4692  0086  1903               	skipnz
  4693  0087  0277               	subwf	fcscheck@i_142,w
  4694  0088  1C03               	skipc
  4695  0089  2859               	goto	l3120
  4696  008A                     l3132:	
  4697  008A  3001               	movlw	1
  4698  008B  07F5               	addwf	fcscheck@i,f
  4699  008C  1803               	skipnc
  4700  008D  0AF6               	incf	fcscheck@i+1,f
  4701  008E  3000               	movlw	0
  4702  008F  07F6               	addwf	fcscheck@i+1,f
  4703  0090  2838               	goto	l3134
  4704  0091                     l272:	
  4705                           
  4706                           ;decode_AX25.c: 331: }
  4707                           ;decode_AX25.c: 332: }
  4708                           ;decode_AX25.c: 333: dfcslo = dfcslo ^ 0xff;
  4709  0091  09ED               	comf	_dfcslo,f
  4710                           
  4711                           ;decode_AX25.c: 334: dfcshi = dfcshi ^ 0xff;
  4712  0092  09EC               	comf	_dfcshi,f
  4713                           
  4714                           ;decode_AX25.c: 337: if((dPacket[dPacketnum-2] == dfcslo) && (dPacket[dPacketnum-1] == d
      +                          fcshi)){
  4715  0093  0866               	movf	_dPacketnum,w
  4716  0094  3EFE               	addlw	254
  4717  0095  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4718  0096  0084               	movwf	4
  4719  0097  1783               	bsf	3,7	;select IRP bank3
  4720  0098  0800               	movf	0,w
  4721  0099  066D               	xorwf	_dfcslo,w
  4722  009A  1D03               	skipz
  4723  009B  28A9               	goto	l3146
  4724  009C  0866               	movf	_dPacketnum,w
  4725  009D  3EFF               	addlw	255
  4726  009E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4727  009F  0084               	movwf	4
  4728  00A0  0800               	movf	0,w
  4729  00A1  066C               	xorwf	_dfcshi,w
  4730  00A2  1D03               	skipz
  4731  00A3  28A9               	goto	l3146
  4732                           
  4733                           ;decode_AX25.c: 342: return 1;
  4734  00A4  3001               	movlw	1
  4735  00A5  00F0               	movwf	?_fcscheck
  4736  00A6  3000               	movlw	0
  4737  00A7  00F1               	movwf	?_fcscheck+1
  4738  00A8  0008               	return
  4739  00A9                     l3146:	
  4740                           ;decode_AX25.c: 343: }else{
  4741                           
  4742                           
  4743                           ;decode_AX25.c: 348: return 0;
  4744  00A9  01F0               	clrf	?_fcscheck
  4745  00AA  01F1               	clrf	?_fcscheck+1
  4746  00AB  0008               	return
  4747  00AC                     __end_of_fcscheck:	
  4748                           
  4749                           	psect	text8
  4750  082A                     __ptext8:	
  4751 ;; *************** function _NM_waddress *****************
  4752 ;; Defined at:
  4753 ;;		line 71 in file "UART.c"
  4754 ;; Parameters:    Size  Location     Type
  4755 ;;  NM_wad_heade    1    wreg     unsigned char 
  4756 ;;  whigh_addres    1    1[COMMON] unsigned char 
  4757 ;;  wlow_address    1    2[COMMON] unsigned char 
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;  NM_wad_heade    1    3[COMMON] unsigned char 
  4760 ;; Return value:  Size  Location     Type
  4761 ;;                  1    wreg      void 
  4762 ;; Registers used:
  4763 ;;		wreg, status,2, status,0, pclath, cstack
  4764 ;; Tracked objects:
  4765 ;;		On entry : 0/0
  4766 ;;		On exit  : 0/0
  4767 ;;		Unchanged: 0/0
  4768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4769 ;;      Params:         2       0       0       0       0
  4770 ;;      Locals:         1       0       0       0       0
  4771 ;;      Temps:          0       0       0       0       0
  4772 ;;      Totals:         3       0       0       0       0
  4773 ;;Total ram usage:        3 bytes
  4774 ;; Hardware stack levels used:    1
  4775 ;; Hardware stack levels required when called:    1
  4776 ;; This function calls:
  4777 ;;		_putch
  4778 ;; This function is called by:
  4779 ;;		_main
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783                           
  4784                           ;psect for function _NM_waddress
  4785  082A                     _NM_waddress:	
  4786                           
  4787                           ;incstack = 0
  4788                           ; Regs used in _NM_waddress: [wreg+status,2+status,0+pclath+cstack]
  4789                           ;NM_waddress@NM_wad_header stored from wreg
  4790  082A  00F3               	movwf	NM_waddress@NM_wad_header
  4791                           
  4792                           ;UART.c: 72: putch(NM_wad_header);
  4793  082B  0873               	movf	NM_waddress@NM_wad_header,w
  4794  082C  160A  118A  27DF  120A  158A  	fcall	_putch
  4795                           
  4796                           ;UART.c: 73: putch(whigh_address);
  4797  0831  0871               	movf	NM_waddress@whigh_address,w
  4798  0832  160A  118A  27DF  120A  158A  	fcall	_putch
  4799                           
  4800                           ;UART.c: 74: putch(wlow_address);
  4801  0837  0872               	movf	NM_waddress@wlow_address,w
  4802  0838  160A  118A  27DF   	fcall	_putch
  4803  083B  0008               	return
  4804  083C                     __end_of_NM_waddress:	
  4805                           
  4806                           	psect	text9
  4807  17DF                     __ptext9:	
  4808 ;; *************** function _putch *****************
  4809 ;; Defined at:
  4810 ;;		line 38 in file "UART.c"
  4811 ;; Parameters:    Size  Location     Type
  4812 ;;  byte            1    wreg     unsigned char 
  4813 ;; Auto vars:     Size  Location     Type
  4814 ;;  byte            1    0[COMMON] unsigned char 
  4815 ;; Return value:  Size  Location     Type
  4816 ;;                  1    wreg      void 
  4817 ;; Registers used:
  4818 ;;		wreg
  4819 ;; Tracked objects:
  4820 ;;		On entry : 0/0
  4821 ;;		On exit  : 0/0
  4822 ;;		Unchanged: 0/0
  4823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4824 ;;      Params:         0       0       0       0       0
  4825 ;;      Locals:         1       0       0       0       0
  4826 ;;      Temps:          0       0       0       0       0
  4827 ;;      Totals:         1       0       0       0       0
  4828 ;;Total ram usage:        1 bytes
  4829 ;; Hardware stack levels used:    1
  4830 ;; This function calls:
  4831 ;;		Nothing
  4832 ;; This function is called by:
  4833 ;;		_NM_waddress
  4834 ;;		_printf
  4835 ;;		_putstr
  4836 ;;		_putcrlf
  4837 ;;		_put_error
  4838 ;;		_put_ok
  4839 ;;		_putAX25
  4840 ;;		_conv_DI_UARTRX
  4841 ;;		_test_Packetmaker
  4842 ;;		_EEPROM_Read
  4843 ;; This function uses a non-reentrant model
  4844 ;;
  4845                           
  4846                           
  4847                           ;psect for function _putch
  4848  17DF                     _putch:	
  4849                           
  4850                           ;incstack = 0
  4851                           ; Regs used in _putch: [wreg]
  4852                           ;putch@byte stored from wreg
  4853  17DF  00F0               	movwf	putch@byte
  4854  17E0                     l65:	
  4855                           ;UART.c: 39: while(!TXIF);
  4856                           
  4857  17E0  1283               	bcf	3,5	;RP0=0, select bank0
  4858  17E1  1303               	bcf	3,6	;RP1=0, select bank0
  4859  17E2  1E0C               	btfss	12,4	;volatile
  4860  17E3  2FE0               	goto	l65
  4861                           
  4862                           ;UART.c: 40: TXREG = byte;
  4863  17E4  0870               	movf	putch@byte,w
  4864  17E5  0099               	movwf	25	;volatile
  4865  17E6  0008               	return
  4866  17E7                     __end_of_putch:	
  4867                           
  4868                           	psect	text10
  4869  0851                     __ptext10:	
  4870 ;; *************** function _Init_SERIAL *****************
  4871 ;; Defined at:
  4872 ;;		line 5 in file "UART.c"
  4873 ;; Parameters:    Size  Location     Type
  4874 ;;		None
  4875 ;; Auto vars:     Size  Location     Type
  4876 ;;		None
  4877 ;; Return value:  Size  Location     Type
  4878 ;;                  1    wreg      void 
  4879 ;; Registers used:
  4880 ;;		wreg
  4881 ;; Tracked objects:
  4882 ;;		On entry : 0/0
  4883 ;;		On exit  : 0/0
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4886 ;;      Params:         0       0       0       0       0
  4887 ;;      Locals:         0       0       0       0       0
  4888 ;;      Temps:          0       0       0       0       0
  4889 ;;      Totals:         0       0       0       0       0
  4890 ;;Total ram usage:        0 bytes
  4891 ;; Hardware stack levels used:    1
  4892 ;; This function calls:
  4893 ;;		Nothing
  4894 ;; This function is called by:
  4895 ;;		_main
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898                           
  4899                           
  4900                           ;psect for function _Init_SERIAL
  4901  0851                     _Init_SERIAL:	
  4902                           
  4903                           ;UART.c: 6: SPBRG = 10;
  4904                           
  4905                           ;incstack = 0
  4906                           ; Regs used in _Init_SERIAL: [wreg]
  4907  0851  300A               	movlw	10
  4908  0852  1683               	bsf	3,5	;RP0=1, select bank1
  4909  0853  1303               	bcf	3,6	;RP1=0, select bank1
  4910  0854  0099               	movwf	25	;volatile
  4911                           
  4912                           ;UART.c: 7: BRGH = 0;
  4913  0855  1118               	bcf	24,2	;volatile
  4914                           
  4915                           ;UART.c: 8: SYNC = 0;
  4916  0856  1218               	bcf	24,4	;volatile
  4917                           
  4918                           ;UART.c: 9: SPEN = 1;
  4919  0857  1283               	bcf	3,5	;RP0=0, select bank0
  4920  0858  1303               	bcf	3,6	;RP1=0, select bank0
  4921  0859  1798               	bsf	24,7	;volatile
  4922                           
  4923                           ;UART.c: 10: CREN = 1;
  4924  085A  1618               	bsf	24,4	;volatile
  4925                           
  4926                           ;UART.c: 11: SREN = 0;
  4927  085B  1298               	bcf	24,5	;volatile
  4928                           
  4929                           ;UART.c: 12: RCIF = 0;
  4930  085C  128C               	bcf	12,5	;volatile
  4931                           
  4932                           ;UART.c: 13: TXIE = 0;
  4933  085D  1683               	bsf	3,5	;RP0=1, select bank1
  4934  085E  1303               	bcf	3,6	;RP1=0, select bank1
  4935  085F  120C               	bcf	12,4	;volatile
  4936                           
  4937                           ;UART.c: 14: RCIE = 1;
  4938  0860  168C               	bsf	12,5	;volatile
  4939                           
  4940                           ;UART.c: 15: TX9 = 0;
  4941  0861  1318               	bcf	24,6	;volatile
  4942                           
  4943                           ;UART.c: 16: RX9 = 0;
  4944  0862  1283               	bcf	3,5	;RP0=0, select bank0
  4945  0863  1303               	bcf	3,6	;RP1=0, select bank0
  4946  0864  1318               	bcf	24,6	;volatile
  4947                           
  4948                           ;UART.c: 17: TXEN = 0;
  4949  0865  1683               	bsf	3,5	;RP0=1, select bank1
  4950  0866  1303               	bcf	3,6	;RP1=0, select bank1
  4951  0867  1298               	bcf	24,5	;volatile
  4952                           
  4953                           ;UART.c: 18: TXEN = 1;
  4954  0868  1698               	bsf	24,5	;volatile
  4955  0869  0008               	return
  4956  086A                     __end_of_Init_SERIAL:	
  4957                           
  4958                           	psect	text11
  4959  089D                     __ptext11:	
  4960 ;; *************** function _Init_MPU *****************
  4961 ;; Defined at:
  4962 ;;		line 8 in file "Init_MPU.c"
  4963 ;; Parameters:    Size  Location     Type
  4964 ;;		None
  4965 ;; Auto vars:     Size  Location     Type
  4966 ;;		None
  4967 ;; Return value:  Size  Location     Type
  4968 ;;                  1    wreg      void 
  4969 ;; Registers used:
  4970 ;;		wreg, status,2
  4971 ;; Tracked objects:
  4972 ;;		On entry : 0/0
  4973 ;;		On exit  : 0/0
  4974 ;;		Unchanged: 0/0
  4975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4976 ;;      Params:         0       0       0       0       0
  4977 ;;      Locals:         0       0       0       0       0
  4978 ;;      Temps:          0       0       0       0       0
  4979 ;;      Totals:         0       0       0       0       0
  4980 ;;Total ram usage:        0 bytes
  4981 ;; Hardware stack levels used:    1
  4982 ;; This function calls:
  4983 ;;		Nothing
  4984 ;; This function is called by:
  4985 ;;		_main
  4986 ;; This function uses a non-reentrant model
  4987 ;;
  4988                           
  4989                           
  4990                           ;psect for function _Init_MPU
  4991  089D                     _Init_MPU:	
  4992                           
  4993                           ;Init_MPU.c: 11: PORTA = 0x00;
  4994                           
  4995                           ;incstack = 0
  4996                           ; Regs used in _Init_MPU: [wreg+status,2]
  4997  089D  1283               	bcf	3,5	;RP0=0, select bank0
  4998  089E  1303               	bcf	3,6	;RP1=0, select bank0
  4999  089F  0185               	clrf	5	;volatile
  5000                           
  5001                           ;Init_MPU.c: 12: PORTB = 0x00;
  5002  08A0  0186               	clrf	6	;volatile
  5003                           
  5004                           ;Init_MPU.c: 13: PORTC = 0x00;
  5005  08A1  0187               	clrf	7	;volatile
  5006                           
  5007                           ;Init_MPU.c: 14: PORTD = 0x00;
  5008  08A2  0188               	clrf	8	;volatile
  5009                           
  5010                           ;Init_MPU.c: 15: PORTE = 0x00;
  5011  08A3  0189               	clrf	9	;volatile
  5012                           
  5013                           ;Init_MPU.c: 18: ANSEL = 0x00;
  5014  08A4  1683               	bsf	3,5	;RP0=1, select bank3
  5015  08A5  1703               	bsf	3,6	;RP1=1, select bank3
  5016  08A6  0188               	clrf	8	;volatile
  5017                           
  5018                           ;Init_MPU.c: 19: ANSELH = 0x00;
  5019  08A7  0189               	clrf	9	;volatile
  5020                           
  5021                           ;Init_MPU.c: 23: TRISA = 0b10000000;
  5022  08A8  3080               	movlw	128
  5023  08A9  1683               	bsf	3,5	;RP0=1, select bank1
  5024  08AA  1303               	bcf	3,6	;RP1=0, select bank1
  5025  08AB  0085               	movwf	5	;volatile
  5026                           
  5027                           ;Init_MPU.c: 24: TRISB = 0b00100000;
  5028  08AC  3020               	movlw	32
  5029  08AD  0086               	movwf	6	;volatile
  5030                           
  5031                           ;Init_MPU.c: 25: TRISC = 0b10011000;
  5032  08AE  3098               	movlw	152
  5033  08AF  0087               	movwf	7	;volatile
  5034                           
  5035                           ;Init_MPU.c: 26: TRISD = 0b00000000;
  5036  08B0  0188               	clrf	8	;volatile
  5037                           
  5038                           ;Init_MPU.c: 27: TRISE = 0b00000000;
  5039  08B1  0189               	clrf	9	;volatile
  5040                           
  5041                           ;Init_MPU.c: 30: PORTA = 0x00;
  5042  08B2  1283               	bcf	3,5	;RP0=0, select bank0
  5043  08B3  1303               	bcf	3,6	;RP1=0, select bank0
  5044  08B4  0185               	clrf	5	;volatile
  5045                           
  5046                           ;Init_MPU.c: 31: PORTB = 0x00;
  5047  08B5  0186               	clrf	6	;volatile
  5048                           
  5049                           ;Init_MPU.c: 32: PORTC = 0x00;
  5050  08B6  0187               	clrf	7	;volatile
  5051                           
  5052                           ;Init_MPU.c: 33: PORTD = 0x00;
  5053  08B7  0188               	clrf	8	;volatile
  5054                           
  5055                           ;Init_MPU.c: 34: PORTE = 0x00;
  5056  08B8  0189               	clrf	9	;volatile
  5057  08B9  0008               	return
  5058  08BA                     __end_of_Init_MPU:	
  5059                           
  5060                           	psect	text12
  5061  0994                     __ptext12:	
  5062 ;; *************** function _Init_I2C_M *****************
  5063 ;; Defined at:
  5064 ;;		line 8 in file "I2C.c"
  5065 ;; Parameters:    Size  Location     Type
  5066 ;;  c               4    0[BANK0 ] const unsigned long 
  5067 ;; Auto vars:     Size  Location     Type
  5068 ;;		None
  5069 ;; Return value:  Size  Location     Type
  5070 ;;                  1    wreg      void 
  5071 ;; Registers used:
  5072 ;;		wreg, status,2, status,0, pclath, cstack
  5073 ;; Tracked objects:
  5074 ;;		On entry : 0/0
  5075 ;;		On exit  : 0/0
  5076 ;;		Unchanged: 0/0
  5077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5078 ;;      Params:         0       4       0       0       0
  5079 ;;      Locals:         0       0       0       0       0
  5080 ;;      Temps:          0       4       0       0       0
  5081 ;;      Totals:         0       8       0       0       0
  5082 ;;Total ram usage:        8 bytes
  5083 ;; Hardware stack levels used:    1
  5084 ;; Hardware stack levels required when called:    1
  5085 ;; This function calls:
  5086 ;;		___lldiv
  5087 ;; This function is called by:
  5088 ;;		_main
  5089 ;; This function uses a non-reentrant model
  5090 ;;
  5091                           
  5092                           
  5093                           ;psect for function _Init_I2C_M
  5094  0994                     _Init_I2C_M:	
  5095                           
  5096                           ;I2C.c: 9: SSPCON = 0b00101000;
  5097                           
  5098                           ;incstack = 0
  5099                           ; Regs used in _Init_I2C_M: [wreg+status,2+status,0+pclath+cstack]
  5100  0994  3028               	movlw	40
  5101  0995  1283               	bcf	3,5	;RP0=0, select bank0
  5102  0996  1303               	bcf	3,6	;RP1=0, select bank0
  5103  0997  0094               	movwf	20	;volatile
  5104                           
  5105                           ;I2C.c: 10: SSPCON2 = 0;
  5106  0998  1683               	bsf	3,5	;RP0=1, select bank1
  5107  0999  1303               	bcf	3,6	;RP1=0, select bank1
  5108  099A  0191               	clrf	17	;volatile
  5109                           
  5110                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  5111  099B  1283               	bcf	3,5	;RP0=0, select bank0
  5112  099C  1303               	bcf	3,6	;RP1=0, select bank0
  5113  099D  0820               	movf	Init_I2C_M@c,w
  5114  099E  00A4               	movwf	??_Init_I2C_M
  5115  099F  0821               	movf	Init_I2C_M@c+1,w
  5116  09A0  00A5               	movwf	??_Init_I2C_M+1
  5117  09A1  0822               	movf	Init_I2C_M@c+2,w
  5118  09A2  00A6               	movwf	??_Init_I2C_M+2
  5119  09A3  0823               	movf	Init_I2C_M@c+3,w
  5120  09A4  00A7               	movwf	??_Init_I2C_M+3
  5121  09A5  3002               	movlw	2
  5122  09A6                     u3195:	
  5123  09A6  1003               	clrc
  5124  09A7  0DA4               	rlf	??_Init_I2C_M,f
  5125  09A8  0DA5               	rlf	??_Init_I2C_M+1,f
  5126  09A9  0DA6               	rlf	??_Init_I2C_M+2,f
  5127  09AA  0DA7               	rlf	??_Init_I2C_M+3,f
  5128  09AB  3EFF               	addlw	-1
  5129  09AC  1D03               	skipz
  5130  09AD  29A6               	goto	u3195
  5131  09AE  0827               	movf	??_Init_I2C_M+3,w
  5132  09AF  00F3               	movwf	___lldiv@divisor+3
  5133  09B0  0826               	movf	??_Init_I2C_M+2,w
  5134  09B1  00F2               	movwf	___lldiv@divisor+2
  5135  09B2  0825               	movf	??_Init_I2C_M+1,w
  5136  09B3  00F1               	movwf	___lldiv@divisor+1
  5137  09B4  0824               	movf	??_Init_I2C_M,w
  5138  09B5  00F0               	movwf	___lldiv@divisor
  5139  09B6  3000               	movlw	0
  5140  09B7  00F7               	movwf	___lldiv@dividend+3
  5141  09B8  3098               	movlw	152
  5142  09B9  00F6               	movwf	___lldiv@dividend+2
  5143  09BA  3096               	movlw	150
  5144  09BB  00F5               	movwf	___lldiv@dividend+1
  5145  09BC  3080               	movlw	128
  5146  09BD  00F4               	movwf	___lldiv@dividend
  5147  09BE  120A  158A  239D   	fcall	___lldiv
  5148  09C1  0870               	movf	?___lldiv,w
  5149  09C2  3EFF               	addlw	255
  5150  09C3  1683               	bsf	3,5	;RP0=1, select bank1
  5151  09C4  1303               	bcf	3,6	;RP1=0, select bank1
  5152  09C5  0093               	movwf	19	;volatile
  5153                           
  5154                           ;I2C.c: 12: SSPSTAT = 0;
  5155  09C6  0194               	clrf	20	;volatile
  5156  09C7  0008               	return
  5157  09C8                     __end_of_Init_I2C_M:	
  5158                           
  5159                           	psect	text13
  5160  0B9D                     __ptext13:	
  5161 ;; *************** function ___lldiv *****************
  5162 ;; Defined at:
  5163 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  5164 ;; Parameters:    Size  Location     Type
  5165 ;;  divisor         4    0[COMMON] unsigned long 
  5166 ;;  dividend        4    4[COMMON] unsigned long 
  5167 ;; Auto vars:     Size  Location     Type
  5168 ;;  quotient        4    9[COMMON] unsigned long 
  5169 ;;  counter         1   13[COMMON] unsigned char 
  5170 ;; Return value:  Size  Location     Type
  5171 ;;                  4    0[COMMON] unsigned long 
  5172 ;; Registers used:
  5173 ;;		wreg, status,2, status,0
  5174 ;; Tracked objects:
  5175 ;;		On entry : 0/0
  5176 ;;		On exit  : 0/0
  5177 ;;		Unchanged: 0/0
  5178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5179 ;;      Params:         8       0       0       0       0
  5180 ;;      Locals:         5       0       0       0       0
  5181 ;;      Temps:          1       0       0       0       0
  5182 ;;      Totals:        14       0       0       0       0
  5183 ;;Total ram usage:       14 bytes
  5184 ;; Hardware stack levels used:    1
  5185 ;; This function calls:
  5186 ;;		Nothing
  5187 ;; This function is called by:
  5188 ;;		_Init_I2C_M
  5189 ;; This function uses a non-reentrant model
  5190 ;;
  5191                           
  5192                           
  5193                           ;psect for function ___lldiv
  5194  0B9D                     ___lldiv:	
  5195                           
  5196                           ;incstack = 0
  5197                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5198  0B9D  3000               	movlw	0
  5199  0B9E  00FC               	movwf	___lldiv@quotient+3
  5200  0B9F  3000               	movlw	0
  5201  0BA0  00FB               	movwf	___lldiv@quotient+2
  5202  0BA1  3000               	movlw	0
  5203  0BA2  00FA               	movwf	___lldiv@quotient+1
  5204  0BA3  3000               	movlw	0
  5205  0BA4  00F9               	movwf	___lldiv@quotient
  5206  0BA5  0873               	movf	___lldiv@divisor+3,w
  5207  0BA6  0472               	iorwf	___lldiv@divisor+2,w
  5208  0BA7  0471               	iorwf	___lldiv@divisor+1,w
  5209  0BA8  0470               	iorwf	___lldiv@divisor,w
  5210  0BA9  1903               	skipnz
  5211  0BAA  2BF2               	goto	l3310
  5212  0BAB  01FD               	clrf	___lldiv@counter
  5213  0BAC  0AFD               	incf	___lldiv@counter,f
  5214  0BAD                     l3296:	
  5215  0BAD  1BF3               	btfsc	___lldiv@divisor+3,7
  5216  0BAE  2BBD               	goto	l3298
  5217  0BAF  3001               	movlw	1
  5218  0BB0  00F8               	movwf	??___lldiv
  5219  0BB1                     u3045:	
  5220  0BB1  1003               	clrc
  5221  0BB2  0DF0               	rlf	___lldiv@divisor,f
  5222  0BB3  0DF1               	rlf	___lldiv@divisor+1,f
  5223  0BB4  0DF2               	rlf	___lldiv@divisor+2,f
  5224  0BB5  0DF3               	rlf	___lldiv@divisor+3,f
  5225  0BB6  0BF8               	decfsz	??___lldiv,f
  5226  0BB7  2BB1               	goto	u3045
  5227  0BB8  3001               	movlw	1
  5228  0BB9  00F8               	movwf	??___lldiv
  5229  0BBA  0878               	movf	??___lldiv,w
  5230  0BBB  07FD               	addwf	___lldiv@counter,f
  5231  0BBC  2BAD               	goto	l3296
  5232  0BBD                     l3298:	
  5233  0BBD  3001               	movlw	1
  5234  0BBE  00F8               	movwf	??___lldiv
  5235  0BBF                     u3065:	
  5236  0BBF  1003               	clrc
  5237  0BC0  0DF9               	rlf	___lldiv@quotient,f
  5238  0BC1  0DFA               	rlf	___lldiv@quotient+1,f
  5239  0BC2  0DFB               	rlf	___lldiv@quotient+2,f
  5240  0BC3  0DFC               	rlf	___lldiv@quotient+3,f
  5241  0BC4  0BF8               	decfsz	??___lldiv,f
  5242  0BC5  2BBF               	goto	u3065
  5243  0BC6  0873               	movf	___lldiv@divisor+3,w
  5244  0BC7  0277               	subwf	___lldiv@dividend+3,w
  5245  0BC8  1D03               	skipz
  5246  0BC9  2BD4               	goto	u3075
  5247  0BCA  0872               	movf	___lldiv@divisor+2,w
  5248  0BCB  0276               	subwf	___lldiv@dividend+2,w
  5249  0BCC  1D03               	skipz
  5250  0BCD  2BD4               	goto	u3075
  5251  0BCE  0871               	movf	___lldiv@divisor+1,w
  5252  0BCF  0275               	subwf	___lldiv@dividend+1,w
  5253  0BD0  1D03               	skipz
  5254  0BD1  2BD4               	goto	u3075
  5255  0BD2  0870               	movf	___lldiv@divisor,w
  5256  0BD3  0274               	subwf	___lldiv@dividend,w
  5257  0BD4                     u3075:	
  5258  0BD4  1C03               	skipc
  5259  0BD5  2BE5               	goto	l3306
  5260  0BD6  0870               	movf	___lldiv@divisor,w
  5261  0BD7  02F4               	subwf	___lldiv@dividend,f
  5262  0BD8  0871               	movf	___lldiv@divisor+1,w
  5263  0BD9  1C03               	skipc
  5264  0BDA  0F71               	incfsz	___lldiv@divisor+1,w
  5265  0BDB  02F5               	subwf	___lldiv@dividend+1,f
  5266  0BDC  0872               	movf	___lldiv@divisor+2,w
  5267  0BDD  1C03               	skipc
  5268  0BDE  0F72               	incfsz	___lldiv@divisor+2,w
  5269  0BDF  02F6               	subwf	___lldiv@dividend+2,f
  5270  0BE0  0873               	movf	___lldiv@divisor+3,w
  5271  0BE1  1C03               	skipc
  5272  0BE2  0F73               	incfsz	___lldiv@divisor+3,w
  5273  0BE3  02F7               	subwf	___lldiv@dividend+3,f
  5274  0BE4  1479               	bsf	___lldiv@quotient,0
  5275  0BE5                     l3306:	
  5276  0BE5  3001               	movlw	1
  5277  0BE6                     u3085:	
  5278  0BE6  1003               	clrc
  5279  0BE7  0CF3               	rrf	___lldiv@divisor+3,f
  5280  0BE8  0CF2               	rrf	___lldiv@divisor+2,f
  5281  0BE9  0CF1               	rrf	___lldiv@divisor+1,f
  5282  0BEA  0CF0               	rrf	___lldiv@divisor,f
  5283  0BEB  3EFF               	addlw	-1
  5284  0BEC  1D03               	skipz
  5285  0BED  2BE6               	goto	u3085
  5286  0BEE  3001               	movlw	1
  5287  0BEF  02FD               	subwf	___lldiv@counter,f
  5288  0BF0  1D03               	btfss	3,2
  5289  0BF1  2BBD               	goto	l3298
  5290  0BF2                     l3310:	
  5291  0BF2  087C               	movf	___lldiv@quotient+3,w
  5292  0BF3  00F3               	movwf	?___lldiv+3
  5293  0BF4  087B               	movf	___lldiv@quotient+2,w
  5294  0BF5  00F2               	movwf	?___lldiv+2
  5295  0BF6  087A               	movf	___lldiv@quotient+1,w
  5296  0BF7  00F1               	movwf	?___lldiv+1
  5297  0BF8  0879               	movf	___lldiv@quotient,w
  5298  0BF9  00F0               	movwf	?___lldiv
  5299  0BFA  0008               	return
  5300  0BFB                     __end_of___lldiv:	
  5301                           
  5302                           	psect	text14
  5303  093A                     __ptext14:	
  5304 ;; *************** function _FMTX *****************
  5305 ;; Defined at:
  5306 ;;		line 270 in file "FMCW.c"
  5307 ;; Parameters:    Size  Location     Type
  5308 ;;  Nref            2   60[BANK0 ] int 
  5309 ;;  Nprg            2   62[BANK0 ] PTR int 
  5310 ;;		 -> RAM(512), main@FMTX_Nprg(10), FMTX_Nprg(10), 
  5311 ;; Auto vars:     Size  Location     Type
  5312 ;;  fmtx            2   64[BANK0 ] int 
  5313 ;; Return value:  Size  Location     Type
  5314 ;;                  1    wreg      void 
  5315 ;; Registers used:
  5316 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5317 ;; Tracked objects:
  5318 ;;		On entry : 0/0
  5319 ;;		On exit  : 0/0
  5320 ;;		Unchanged: 0/0
  5321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5322 ;;      Params:         0       4       0       0       0
  5323 ;;      Locals:         0       2       0       0       0
  5324 ;;      Temps:          0       0       0       0       0
  5325 ;;      Totals:         0       6       0       0       0
  5326 ;;Total ram usage:        6 bytes
  5327 ;; Hardware stack levels used:    1
  5328 ;; Hardware stack levels required when called:    3
  5329 ;; This function calls:
  5330 ;;		_OPINIT
  5331 ;;		_OUTFQ
  5332 ;;		_RFDOUT
  5333 ;; This function is called by:
  5334 ;;		_main
  5335 ;;		_SetPLL
  5336 ;; This function uses a non-reentrant model
  5337 ;;
  5338                           
  5339                           
  5340                           ;psect for function _FMTX
  5341  093A                     _FMTX:	
  5342                           
  5343                           ;FMCW.c: 271: int fmtx = 1;
  5344                           
  5345                           ;incstack = 0
  5346                           ; Regs used in _FMTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5347  093A  3001               	movlw	1
  5348  093B  1283               	bcf	3,5	;RP0=0, select bank0
  5349  093C  1303               	bcf	3,6	;RP1=0, select bank0
  5350  093D  00E0               	movwf	FMTX@fmtx
  5351  093E  3000               	movlw	0
  5352  093F  00E1               	movwf	FMTX@fmtx+1
  5353                           
  5354                           ;FMCW.c: 272: OPINIT(fmtx);
  5355  0940  0861               	movf	FMTX@fmtx+1,w
  5356  0941  00F5               	movwf	OPINIT@fmcwtxrx+1
  5357  0942  0860               	movf	FMTX@fmtx,w
  5358  0943  00F4               	movwf	OPINIT@fmcwtxrx
  5359  0944  120A  158A  24C1  120A  158A  	fcall	_OPINIT
  5360                           
  5361                           ;FMCW.c: 273: RFDOUT(fmtx, Nref);
  5362  0949  1283               	bcf	3,5	;RP0=0, select bank0
  5363  094A  1303               	bcf	3,6	;RP1=0, select bank0
  5364  094B  0861               	movf	FMTX@fmtx+1,w
  5365  094C  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5366  094D  0860               	movf	FMTX@fmtx,w
  5367  094E  00F9               	movwf	RFDOUT@fmcwtxrx
  5368  094F  085D               	movf	FMTX@Nref+1,w
  5369  0950  00FC               	movwf	RFDOUT@Nref+1
  5370  0951  085C               	movf	FMTX@Nref,w
  5371  0952  00FB               	movwf	RFDOUT@Nref
  5372  0953  120A  158A  253E  120A  158A  	fcall	_RFDOUT
  5373                           
  5374                           ;FMCW.c: 274: OUTFQ(fmtx, Nprg);
  5375  0958  1283               	bcf	3,5	;RP0=0, select bank0
  5376  0959  1303               	bcf	3,6	;RP1=0, select bank0
  5377  095A  0861               	movf	FMTX@fmtx+1,w
  5378  095B  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5379  095C  0860               	movf	FMTX@fmtx,w
  5380  095D  00F9               	movwf	OUTFQ@fmcwtxrx
  5381  095E  085E               	movf	FMTX@Nprg,w
  5382  095F  00FB               	movwf	OUTFQ@Nprg
  5383  0960  085F               	movf	FMTX@Nprg+1,w
  5384  0961  00FC               	movwf	OUTFQ@Nprg+1
  5385  0962  120A  118A  20AC   	fcall	_OUTFQ
  5386  0965  0008               	return
  5387  0966                     __end_of_FMTX:	
  5388                           
  5389                           	psect	text15
  5390  090E                     __ptext15:	
  5391 ;; *************** function _FMRX *****************
  5392 ;; Defined at:
  5393 ;;		line 298 in file "FMCW.c"
  5394 ;; Parameters:    Size  Location     Type
  5395 ;;  Nref            2   60[BANK0 ] int 
  5396 ;;  Nprg            2   62[BANK0 ] PTR int 
  5397 ;;		 -> RAM(512), main@FMRX_Nprg(10), FMRX_Nprg(10), 
  5398 ;; Auto vars:     Size  Location     Type
  5399 ;;  fmrx            2   64[BANK0 ] int 
  5400 ;; Return value:  Size  Location     Type
  5401 ;;                  1    wreg      void 
  5402 ;; Registers used:
  5403 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5404 ;; Tracked objects:
  5405 ;;		On entry : 0/0
  5406 ;;		On exit  : 0/0
  5407 ;;		Unchanged: 0/0
  5408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5409 ;;      Params:         0       4       0       0       0
  5410 ;;      Locals:         0       2       0       0       0
  5411 ;;      Temps:          0       0       0       0       0
  5412 ;;      Totals:         0       6       0       0       0
  5413 ;;Total ram usage:        6 bytes
  5414 ;; Hardware stack levels used:    1
  5415 ;; Hardware stack levels required when called:    3
  5416 ;; This function calls:
  5417 ;;		_OPINIT
  5418 ;;		_OUTFQ
  5419 ;;		_RFDOUT
  5420 ;; This function is called by:
  5421 ;;		_main
  5422 ;;		_SetPLL
  5423 ;; This function uses a non-reentrant model
  5424 ;;
  5425                           
  5426                           
  5427                           ;psect for function _FMRX
  5428  090E                     _FMRX:	
  5429                           
  5430                           ;FMCW.c: 299: int fmrx = 3;
  5431                           
  5432                           ;incstack = 0
  5433                           ; Regs used in _FMRX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5434  090E  3003               	movlw	3
  5435  090F  1283               	bcf	3,5	;RP0=0, select bank0
  5436  0910  1303               	bcf	3,6	;RP1=0, select bank0
  5437  0911  00E0               	movwf	FMRX@fmrx
  5438  0912  3000               	movlw	0
  5439  0913  00E1               	movwf	FMRX@fmrx+1
  5440                           
  5441                           ;FMCW.c: 300: OPINIT(fmrx);
  5442  0914  0861               	movf	FMRX@fmrx+1,w
  5443  0915  00F5               	movwf	OPINIT@fmcwtxrx+1
  5444  0916  0860               	movf	FMRX@fmrx,w
  5445  0917  00F4               	movwf	OPINIT@fmcwtxrx
  5446  0918  120A  158A  24C1  120A  158A  	fcall	_OPINIT
  5447                           
  5448                           ;FMCW.c: 301: RFDOUT(fmrx, Nref);
  5449  091D  1283               	bcf	3,5	;RP0=0, select bank0
  5450  091E  1303               	bcf	3,6	;RP1=0, select bank0
  5451  091F  0861               	movf	FMRX@fmrx+1,w
  5452  0920  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5453  0921  0860               	movf	FMRX@fmrx,w
  5454  0922  00F9               	movwf	RFDOUT@fmcwtxrx
  5455  0923  085D               	movf	FMRX@Nref+1,w
  5456  0924  00FC               	movwf	RFDOUT@Nref+1
  5457  0925  085C               	movf	FMRX@Nref,w
  5458  0926  00FB               	movwf	RFDOUT@Nref
  5459  0927  120A  158A  253E  120A  158A  	fcall	_RFDOUT
  5460                           
  5461                           ;FMCW.c: 302: OUTFQ(fmrx, Nprg);
  5462  092C  1283               	bcf	3,5	;RP0=0, select bank0
  5463  092D  1303               	bcf	3,6	;RP1=0, select bank0
  5464  092E  0861               	movf	FMRX@fmrx+1,w
  5465  092F  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5466  0930  0860               	movf	FMRX@fmrx,w
  5467  0931  00F9               	movwf	OUTFQ@fmcwtxrx
  5468  0932  085E               	movf	FMRX@Nprg,w
  5469  0933  00FB               	movwf	OUTFQ@Nprg
  5470  0934  085F               	movf	FMRX@Nprg+1,w
  5471  0935  00FC               	movwf	OUTFQ@Nprg+1
  5472  0936  120A  118A  20AC   	fcall	_OUTFQ
  5473  0939  0008               	return
  5474  093A                     __end_of_FMRX:	
  5475                           
  5476                           	psect	text16
  5477  0B40                     __ptext16:	
  5478 ;; *************** function _EEPROM_Write *****************
  5479 ;; Defined at:
  5480 ;;		line 51 in file "I2C.c"
  5481 ;; Parameters:    Size  Location     Type
  5482 ;;  EEPROM_addre    1    wreg     unsigned char 
  5483 ;;  high_address    1    2[COMMON] unsigned char 
  5484 ;;  low_address     1    3[COMMON] unsigned char 
  5485 ;;  data            1    4[COMMON] PTR unsigned char 
  5486 ;;		 -> NULL(0), dData(32), 
  5487 ;; Auto vars:     Size  Location     Type
  5488 ;;  EEPROM_addre    1    8[COMMON] unsigned char 
  5489 ;;  Address         1    9[COMMON] unsigned char 
  5490 ;; Return value:  Size  Location     Type
  5491 ;;                  1    wreg      void 
  5492 ;; Registers used:
  5493 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5494 ;; Tracked objects:
  5495 ;;		On entry : 0/0
  5496 ;;		On exit  : 0/0
  5497 ;;		Unchanged: 0/0
  5498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5499 ;;      Params:         3       0       0       0       0
  5500 ;;      Locals:         2       0       0       0       0
  5501 ;;      Temps:          3       0       0       0       0
  5502 ;;      Totals:         8       0       0       0       0
  5503 ;;Total ram usage:        8 bytes
  5504 ;; Hardware stack levels used:    1
  5505 ;; Hardware stack levels required when called:    2
  5506 ;; This function calls:
  5507 ;;		_I2C_Master_Start
  5508 ;;		_I2C_Master_Stop
  5509 ;;		_I2C_Master_Write
  5510 ;; This function is called by:
  5511 ;;		_main
  5512 ;; This function uses a non-reentrant model
  5513 ;;
  5514                           
  5515                           
  5516                           ;psect for function _EEPROM_Write
  5517  0B40                     _EEPROM_Write:	
  5518                           
  5519                           ;incstack = 0
  5520                           ; Regs used in _EEPROM_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5521                           ;EEPROM_Write@EEPROM_address stored from wreg
  5522  0B40  00F8               	movwf	EEPROM_Write@EEPROM_address
  5523                           
  5524                           ;I2C.c: 52: UBYTE Address = EEPROM_address << 1;
  5525  0B41  0878               	movf	EEPROM_Write@EEPROM_address,w
  5526  0B42  00F5               	movwf	??_EEPROM_Write
  5527  0B43  0775               	addwf	??_EEPROM_Write,w
  5528  0B44  00F6               	movwf	??_EEPROM_Write+1
  5529  0B45  0876               	movf	??_EEPROM_Write+1,w
  5530  0B46  00F9               	movwf	EEPROM_Write@Address
  5531                           
  5532                           ;I2C.c: 55: I2C_Master_Start();
  5533  0B47  160A  118A  27C9  120A  158A  	fcall	_I2C_Master_Start
  5534                           
  5535                           ;I2C.c: 56: I2C_Master_Write(Address);
  5536  0B4C  0879               	movf	EEPROM_Write@Address,w
  5537  0B4D  00F5               	movwf	??_EEPROM_Write
  5538  0B4E  01F6               	clrf	??_EEPROM_Write+1
  5539  0B4F  0875               	movf	??_EEPROM_Write,w
  5540  0B50  00F0               	movwf	I2C_Master_Write@d
  5541  0B51  0876               	movf	??_EEPROM_Write+1,w
  5542  0B52  00F1               	movwf	I2C_Master_Write@d+1
  5543  0B53  160A  118A  27D7  120A  158A  	fcall	_I2C_Master_Write
  5544                           
  5545                           ;I2C.c: 57: I2C_Master_Write(high_address);
  5546  0B58  0872               	movf	EEPROM_Write@high_address,w
  5547  0B59  00F5               	movwf	??_EEPROM_Write
  5548  0B5A  01F6               	clrf	??_EEPROM_Write+1
  5549  0B5B  0875               	movf	??_EEPROM_Write,w
  5550  0B5C  00F0               	movwf	I2C_Master_Write@d
  5551  0B5D  0876               	movf	??_EEPROM_Write+1,w
  5552  0B5E  00F1               	movwf	I2C_Master_Write@d+1
  5553  0B5F  160A  118A  27D7  120A  158A  	fcall	_I2C_Master_Write
  5554                           
  5555                           ;I2C.c: 58: I2C_Master_Write(low_address);
  5556  0B64  0873               	movf	EEPROM_Write@low_address,w
  5557  0B65  00F5               	movwf	??_EEPROM_Write
  5558  0B66  01F6               	clrf	??_EEPROM_Write+1
  5559  0B67  0875               	movf	??_EEPROM_Write,w
  5560  0B68  00F0               	movwf	I2C_Master_Write@d
  5561  0B69  0876               	movf	??_EEPROM_Write+1,w
  5562  0B6A  00F1               	movwf	I2C_Master_Write@d+1
  5563  0B6B  160A  118A  27D7  120A  158A  	fcall	_I2C_Master_Write
  5564  0B70                     l3508:	
  5565                           ;I2C.c: 59: while(*data){
  5566                           
  5567  0B70  0874               	movf	EEPROM_Write@data,w
  5568  0B71  0084               	movwf	4
  5569  0B72  1783               	bsf	3,7	;select IRP bank2
  5570  0B73  0800               	movf	0,w
  5571  0B74  1903               	btfsc	3,2
  5572  0B75  2B8A               	goto	l3510
  5573                           
  5574                           ;I2C.c: 60: I2C_Master_Write(*data);
  5575  0B76  0874               	movf	EEPROM_Write@data,w
  5576  0B77  0084               	movwf	4
  5577  0B78  1783               	bsf	3,7	;select IRP bank2
  5578  0B79  0800               	movf	0,w
  5579  0B7A  00F5               	movwf	??_EEPROM_Write
  5580  0B7B  01F6               	clrf	??_EEPROM_Write+1
  5581  0B7C  0875               	movf	??_EEPROM_Write,w
  5582  0B7D  00F0               	movwf	I2C_Master_Write@d
  5583  0B7E  0876               	movf	??_EEPROM_Write+1,w
  5584  0B7F  00F1               	movwf	I2C_Master_Write@d+1
  5585  0B80  160A  118A  27D7  120A  158A  	fcall	_I2C_Master_Write
  5586                           
  5587                           ;I2C.c: 61: ++data;
  5588  0B85  3001               	movlw	1
  5589  0B86  00F5               	movwf	??_EEPROM_Write
  5590  0B87  0875               	movf	??_EEPROM_Write,w
  5591  0B88  07F4               	addwf	EEPROM_Write@data,f
  5592  0B89  2B70               	goto	l3508
  5593  0B8A                     l3510:	
  5594                           
  5595                           ;I2C.c: 62: }
  5596                           ;I2C.c: 63: I2C_Master_Stop();
  5597  0B8A  160A  118A  27D0  120A  158A  	fcall	_I2C_Master_Stop
  5598                           
  5599                           ;I2C.c: 64: _delay((unsigned long)((200)*(10000000/4000.0)));
  5600  0B8F  3003               	movlw	3
  5601  0B90  00F7               	movwf	??_EEPROM_Write+2
  5602  0B91  308A               	movlw	138
  5603  0B92  00F6               	movwf	??_EEPROM_Write+1
  5604  0B93  3056               	movlw	86
  5605  0B94  00F5               	movwf	??_EEPROM_Write
  5606  0B95                     u3717:	
  5607  0B95  0BF5               	decfsz	??_EEPROM_Write,f
  5608  0B96  2B95               	goto	u3717
  5609  0B97  0BF6               	decfsz	??_EEPROM_Write+1,f
  5610  0B98  2B95               	goto	u3717
  5611  0B99  0BF7               	decfsz	??_EEPROM_Write+2,f
  5612  0B9A  2B95               	goto	u3717
  5613  0B9B  2B9C               	nop2
  5614  0B9C  0008               	return
  5615  0B9D                     __end_of_EEPROM_Write:	
  5616                           
  5617                           	psect	text17
  5618  17D7                     __ptext17:	
  5619 ;; *************** function _I2C_Master_Write *****************
  5620 ;; Defined at:
  5621 ;;		line 34 in file "I2C.c"
  5622 ;; Parameters:    Size  Location     Type
  5623 ;;  d               2    0[COMMON] unsigned int 
  5624 ;; Auto vars:     Size  Location     Type
  5625 ;;		None
  5626 ;; Return value:  Size  Location     Type
  5627 ;;                  1    wreg      void 
  5628 ;; Registers used:
  5629 ;;		wreg, status,2, status,0, pclath, cstack
  5630 ;; Tracked objects:
  5631 ;;		On entry : 0/0
  5632 ;;		On exit  : 0/0
  5633 ;;		Unchanged: 0/0
  5634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5635 ;;      Params:         2       0       0       0       0
  5636 ;;      Locals:         0       0       0       0       0
  5637 ;;      Temps:          0       0       0       0       0
  5638 ;;      Totals:         2       0       0       0       0
  5639 ;;Total ram usage:        2 bytes
  5640 ;; Hardware stack levels used:    1
  5641 ;; Hardware stack levels required when called:    1
  5642 ;; This function calls:
  5643 ;;		_I2C_Master_Wait
  5644 ;; This function is called by:
  5645 ;;		_EEPROM_Write
  5646 ;;		_EEPROM_Read
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650                           
  5651                           ;psect for function _I2C_Master_Write
  5652  17D7                     _I2C_Master_Write:	
  5653                           
  5654                           ;I2C.c: 35: I2C_Master_Wait();
  5655                           
  5656                           ;incstack = 0
  5657                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5658  17D7  120A  158A  2021   	fcall	_I2C_Master_Wait
  5659                           
  5660                           ;I2C.c: 36: SSPBUF = d;
  5661  17DA  0870               	movf	I2C_Master_Write@d,w
  5662  17DB  1283               	bcf	3,5	;RP0=0, select bank0
  5663  17DC  1303               	bcf	3,6	;RP1=0, select bank0
  5664  17DD  0093               	movwf	19	;volatile
  5665  17DE  0008               	return
  5666  17DF                     __end_of_I2C_Master_Write:	
  5667                           
  5668                           	psect	text18
  5669  17D0                     __ptext18:	
  5670 ;; *************** function _I2C_Master_Stop *****************
  5671 ;; Defined at:
  5672 ;;		line 29 in file "I2C.c"
  5673 ;; Parameters:    Size  Location     Type
  5674 ;;		None
  5675 ;; Auto vars:     Size  Location     Type
  5676 ;;		None
  5677 ;; Return value:  Size  Location     Type
  5678 ;;                  1    wreg      void 
  5679 ;; Registers used:
  5680 ;;		wreg, status,2, status,0, pclath, cstack
  5681 ;; Tracked objects:
  5682 ;;		On entry : 0/0
  5683 ;;		On exit  : 0/0
  5684 ;;		Unchanged: 0/0
  5685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5686 ;;      Params:         0       0       0       0       0
  5687 ;;      Locals:         0       0       0       0       0
  5688 ;;      Temps:          0       0       0       0       0
  5689 ;;      Totals:         0       0       0       0       0
  5690 ;;Total ram usage:        0 bytes
  5691 ;; Hardware stack levels used:    1
  5692 ;; Hardware stack levels required when called:    1
  5693 ;; This function calls:
  5694 ;;		_I2C_Master_Wait
  5695 ;; This function is called by:
  5696 ;;		_EEPROM_Write
  5697 ;;		_EEPROM_Read
  5698 ;; This function uses a non-reentrant model
  5699 ;;
  5700                           
  5701                           
  5702                           ;psect for function _I2C_Master_Stop
  5703  17D0                     _I2C_Master_Stop:	
  5704                           
  5705                           ;I2C.c: 30: I2C_Master_Wait();
  5706                           
  5707                           ;incstack = 0
  5708                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5709  17D0  120A  158A  2021   	fcall	_I2C_Master_Wait
  5710                           
  5711                           ;I2C.c: 31: PEN = 1;
  5712  17D3  1683               	bsf	3,5	;RP0=1, select bank1
  5713  17D4  1303               	bcf	3,6	;RP1=0, select bank1
  5714  17D5  1511               	bsf	17,2	;volatile
  5715  17D6  0008               	return
  5716  17D7                     __end_of_I2C_Master_Stop:	
  5717                           
  5718                           	psect	text19
  5719  17C9                     __ptext19:	
  5720 ;; *************** function _I2C_Master_Start *****************
  5721 ;; Defined at:
  5722 ;;		line 19 in file "I2C.c"
  5723 ;; Parameters:    Size  Location     Type
  5724 ;;		None
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;		None
  5727 ;; Return value:  Size  Location     Type
  5728 ;;                  1    wreg      void 
  5729 ;; Registers used:
  5730 ;;		wreg, status,2, status,0, pclath, cstack
  5731 ;; Tracked objects:
  5732 ;;		On entry : 0/0
  5733 ;;		On exit  : 0/0
  5734 ;;		Unchanged: 0/0
  5735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5736 ;;      Params:         0       0       0       0       0
  5737 ;;      Locals:         0       0       0       0       0
  5738 ;;      Temps:          0       0       0       0       0
  5739 ;;      Totals:         0       0       0       0       0
  5740 ;;Total ram usage:        0 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; Hardware stack levels required when called:    1
  5743 ;; This function calls:
  5744 ;;		_I2C_Master_Wait
  5745 ;; This function is called by:
  5746 ;;		_EEPROM_Write
  5747 ;;		_EEPROM_Read
  5748 ;; This function uses a non-reentrant model
  5749 ;;
  5750                           
  5751                           
  5752                           ;psect for function _I2C_Master_Start
  5753  17C9                     _I2C_Master_Start:	
  5754                           
  5755                           ;I2C.c: 20: I2C_Master_Wait();
  5756                           
  5757                           ;incstack = 0
  5758                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5759  17C9  120A  158A  2021   	fcall	_I2C_Master_Wait
  5760                           
  5761                           ;I2C.c: 21: SEN = 1;
  5762  17CC  1683               	bsf	3,5	;RP0=1, select bank1
  5763  17CD  1303               	bcf	3,6	;RP1=0, select bank1
  5764  17CE  1411               	bsf	17,0	;volatile
  5765  17CF  0008               	return
  5766  17D0                     __end_of_I2C_Master_Start:	
  5767                           
  5768                           	psect	text20
  5769  0821                     __ptext20:	
  5770 ;; *************** function _I2C_Master_Wait *****************
  5771 ;; Defined at:
  5772 ;;		line 15 in file "I2C.c"
  5773 ;; Parameters:    Size  Location     Type
  5774 ;;		None
  5775 ;; Auto vars:     Size  Location     Type
  5776 ;;		None
  5777 ;; Return value:  Size  Location     Type
  5778 ;;                  1    wreg      void 
  5779 ;; Registers used:
  5780 ;;		wreg, status,2
  5781 ;; Tracked objects:
  5782 ;;		On entry : 0/0
  5783 ;;		On exit  : 0/0
  5784 ;;		Unchanged: 0/0
  5785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5786 ;;      Params:         0       0       0       0       0
  5787 ;;      Locals:         0       0       0       0       0
  5788 ;;      Temps:          0       0       0       0       0
  5789 ;;      Totals:         0       0       0       0       0
  5790 ;;Total ram usage:        0 bytes
  5791 ;; Hardware stack levels used:    1
  5792 ;; This function calls:
  5793 ;;		Nothing
  5794 ;; This function is called by:
  5795 ;;		_I2C_Master_Start
  5796 ;;		_I2C_Master_Stop
  5797 ;;		_I2C_Master_Write
  5798 ;;		_I2C_Master_RepeatedStart
  5799 ;;		_I2C_Master_Read
  5800 ;; This function uses a non-reentrant model
  5801 ;;
  5802                           
  5803                           
  5804                           ;psect for function _I2C_Master_Wait
  5805  0821                     _I2C_Master_Wait:	
  5806  0821                     l490:	
  5807                           ;I2C.c: 16: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5808                           
  5809                           ;incstack = 0
  5810                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5811                           
  5812  0821  1683               	bsf	3,5	;RP0=1, select bank1
  5813  0822  1303               	bcf	3,6	;RP1=0, select bank1
  5814  0823  1914               	btfsc	20,2	;volatile
  5815  0824  2821               	goto	l490
  5816  0825  0811               	movf	17,w	;volatile
  5817  0826  391F               	andlw	31
  5818  0827  1903               	btfsc	3,2
  5819  0828  0008               	return
  5820  0829  2821               	goto	l490
  5821  082A                     __end_of_I2C_Master_Wait:	
  5822                           
  5823                           	psect	text21
  5824  08E2                     __ptext21:	
  5825 ;; *************** function _CWTX *****************
  5826 ;; Defined at:
  5827 ;;		line 284 in file "FMCW.c"
  5828 ;; Parameters:    Size  Location     Type
  5829 ;;  Nref            2   60[BANK0 ] int 
  5830 ;;  Nprg            2   62[BANK0 ] PTR int 
  5831 ;;		 -> RAM(512), main@CWTX_Nprg(10), CWTX_Nprg(10), 
  5832 ;; Auto vars:     Size  Location     Type
  5833 ;;  cwtx            2   64[BANK0 ] int 
  5834 ;; Return value:  Size  Location     Type
  5835 ;;                  1    wreg      void 
  5836 ;; Registers used:
  5837 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5838 ;; Tracked objects:
  5839 ;;		On entry : 0/0
  5840 ;;		On exit  : 0/0
  5841 ;;		Unchanged: 0/0
  5842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5843 ;;      Params:         0       4       0       0       0
  5844 ;;      Locals:         0       2       0       0       0
  5845 ;;      Temps:          0       0       0       0       0
  5846 ;;      Totals:         0       6       0       0       0
  5847 ;;Total ram usage:        6 bytes
  5848 ;; Hardware stack levels used:    1
  5849 ;; Hardware stack levels required when called:    3
  5850 ;; This function calls:
  5851 ;;		_OPINIT
  5852 ;;		_OUTFQ
  5853 ;;		_RFDOUT
  5854 ;; This function is called by:
  5855 ;;		_main
  5856 ;;		_SetPLL
  5857 ;; This function uses a non-reentrant model
  5858 ;;
  5859                           
  5860                           
  5861                           ;psect for function _CWTX
  5862  08E2                     _CWTX:	
  5863                           
  5864                           ;FMCW.c: 285: int cwtx = 2;
  5865                           
  5866                           ;incstack = 0
  5867                           ; Regs used in _CWTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5868  08E2  3002               	movlw	2
  5869  08E3  1283               	bcf	3,5	;RP0=0, select bank0
  5870  08E4  1303               	bcf	3,6	;RP1=0, select bank0
  5871  08E5  00E0               	movwf	CWTX@cwtx
  5872  08E6  3000               	movlw	0
  5873  08E7  00E1               	movwf	CWTX@cwtx+1
  5874                           
  5875                           ;FMCW.c: 286: OPINIT(cwtx);
  5876  08E8  0861               	movf	CWTX@cwtx+1,w
  5877  08E9  00F5               	movwf	OPINIT@fmcwtxrx+1
  5878  08EA  0860               	movf	CWTX@cwtx,w
  5879  08EB  00F4               	movwf	OPINIT@fmcwtxrx
  5880  08EC  120A  158A  24C1  120A  158A  	fcall	_OPINIT
  5881                           
  5882                           ;FMCW.c: 287: RFDOUT(cwtx, Nref);
  5883  08F1  1283               	bcf	3,5	;RP0=0, select bank0
  5884  08F2  1303               	bcf	3,6	;RP1=0, select bank0
  5885  08F3  0861               	movf	CWTX@cwtx+1,w
  5886  08F4  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5887  08F5  0860               	movf	CWTX@cwtx,w
  5888  08F6  00F9               	movwf	RFDOUT@fmcwtxrx
  5889  08F7  085D               	movf	CWTX@Nref+1,w
  5890  08F8  00FC               	movwf	RFDOUT@Nref+1
  5891  08F9  085C               	movf	CWTX@Nref,w
  5892  08FA  00FB               	movwf	RFDOUT@Nref
  5893  08FB  120A  158A  253E  120A  158A  	fcall	_RFDOUT
  5894                           
  5895                           ;FMCW.c: 288: OUTFQ(cwtx, Nprg);
  5896  0900  1283               	bcf	3,5	;RP0=0, select bank0
  5897  0901  1303               	bcf	3,6	;RP1=0, select bank0
  5898  0902  0861               	movf	CWTX@cwtx+1,w
  5899  0903  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5900  0904  0860               	movf	CWTX@cwtx,w
  5901  0905  00F9               	movwf	OUTFQ@fmcwtxrx
  5902  0906  085E               	movf	CWTX@Nprg,w
  5903  0907  00FB               	movwf	OUTFQ@Nprg
  5904  0908  085F               	movf	CWTX@Nprg+1,w
  5905  0909  00FC               	movwf	OUTFQ@Nprg+1
  5906  090A  120A  118A  20AC   	fcall	_OUTFQ
  5907  090D  0008               	return
  5908  090E                     __end_of_CWTX:	
  5909                           
  5910                           	psect	text22
  5911  0D3E                     __ptext22:	
  5912 ;; *************** function _RFDOUT *****************
  5913 ;; Defined at:
  5914 ;;		line 200 in file "FMCW.c"
  5915 ;; Parameters:    Size  Location     Type
  5916 ;;  fmcwtxrx        2    9[COMMON] int 
  5917 ;;  Nref            2   11[COMMON] int 
  5918 ;; Auto vars:     Size  Location     Type
  5919 ;;  i               2   31[BANK0 ] int 
  5920 ;;  i               2   27[BANK0 ] int 
  5921 ;;  i               2   29[BANK0 ] int 
  5922 ;;  Nref_b         24    3[BANK0 ] int [12]
  5923 ;; Return value:  Size  Location     Type
  5924 ;;                  1    wreg      void 
  5925 ;; Registers used:
  5926 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5927 ;; Tracked objects:
  5928 ;;		On entry : 0/0
  5929 ;;		On exit  : 0/0
  5930 ;;		Unchanged: 0/0
  5931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5932 ;;      Params:         4       0       0       0       0
  5933 ;;      Locals:         0      30       0       0       0
  5934 ;;      Temps:          0       3       0       0       0
  5935 ;;      Totals:         4      33       0       0       0
  5936 ;;Total ram usage:       37 bytes
  5937 ;; Hardware stack levels used:    1
  5938 ;; Hardware stack levels required when called:    2
  5939 ;; This function calls:
  5940 ;;		_H_OUT
  5941 ;;		_L_OUT
  5942 ;;		_STBOUT
  5943 ;;		___awdiv
  5944 ;; This function is called by:
  5945 ;;		_FMTX
  5946 ;;		_CWTX
  5947 ;;		_FMRX
  5948 ;; This function uses a non-reentrant model
  5949 ;;
  5950                           
  5951                           
  5952                           ;psect for function _RFDOUT
  5953  0D3E                     _RFDOUT:	
  5954                           
  5955                           ;FMCW.c: 201: int Nref_b[12];
  5956                           ;FMCW.c: 203: for(int i=0; i<12; i++){
  5957                           
  5958                           ;incstack = 0
  5959                           ; Regs used in _RFDOUT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5960  0D3E  1283               	bcf	3,5	;RP0=0, select bank0
  5961  0D3F  1303               	bcf	3,6	;RP1=0, select bank0
  5962  0D40  01BD               	clrf	RFDOUT@i
  5963  0D41  01BE               	clrf	RFDOUT@i+1
  5964  0D42  083E               	movf	RFDOUT@i+1,w
  5965  0D43  3A80               	xorlw	128
  5966  0D44  00FF               	movwf	127
  5967  0D45  3080               	movlw	128
  5968  0D46  027F               	subwf	127,w
  5969  0D47  1D03               	skipz
  5970  0D48  2D4B               	goto	u2955
  5971  0D49  300C               	movlw	12
  5972  0D4A  023D               	subwf	RFDOUT@i,w
  5973  0D4B                     u2955:	
  5974  0D4B  1803               	btfsc	3,0
  5975  0D4C  2D69               	goto	l3254
  5976  0D4D                     l3248:	
  5977                           
  5978                           ;FMCW.c: 204: Nref_b[i] = 0;
  5979  0D4D  1283               	bcf	3,5	;RP0=0, select bank0
  5980  0D4E  1303               	bcf	3,6	;RP1=0, select bank0
  5981  0D4F  083D               	movf	RFDOUT@i,w
  5982  0D50  00A0               	movwf	??_RFDOUT
  5983  0D51  0720               	addwf	??_RFDOUT,w
  5984  0D52  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  5985  0D53  0084               	movwf	4
  5986  0D54  1383               	bcf	3,7	;select IRP bank0
  5987  0D55  0180               	clrf	0
  5988  0D56  0A84               	incf	4,f
  5989  0D57  0180               	clrf	0
  5990  0D58  3001               	movlw	1
  5991  0D59  07BD               	addwf	RFDOUT@i,f
  5992  0D5A  1803               	skipnc
  5993  0D5B  0ABE               	incf	RFDOUT@i+1,f
  5994  0D5C  3000               	movlw	0
  5995  0D5D  07BE               	addwf	RFDOUT@i+1,f
  5996  0D5E  083E               	movf	RFDOUT@i+1,w
  5997  0D5F  3A80               	xorlw	128
  5998  0D60  00FF               	movwf	127
  5999  0D61  3080               	movlw	128
  6000  0D62  027F               	subwf	127,w
  6001  0D63  1D03               	skipz
  6002  0D64  2D67               	goto	u2965
  6003  0D65  300C               	movlw	12
  6004  0D66  023D               	subwf	RFDOUT@i,w
  6005  0D67                     u2965:	
  6006  0D67  1C03               	skipc
  6007  0D68  2D4D               	goto	l3248
  6008  0D69                     l3254:	
  6009                           
  6010                           ;FMCW.c: 205: }
  6011                           ;FMCW.c: 208: for(int i=0; Nref>0; i++){
  6012  0D69  1283               	bcf	3,5	;RP0=0, select bank0
  6013  0D6A  1303               	bcf	3,6	;RP1=0, select bank0
  6014  0D6B  01BB               	clrf	RFDOUT@i_473
  6015  0D6C  01BC               	clrf	RFDOUT@i_473+1
  6016  0D6D  087C               	movf	RFDOUT@Nref+1,w
  6017  0D6E  3A80               	xorlw	128
  6018  0D6F  00FF               	movwf	127
  6019  0D70  3080               	movlw	128
  6020  0D71  027F               	subwf	127,w
  6021  0D72  1D03               	skipz
  6022  0D73  2D76               	goto	u2975
  6023  0D74  3001               	movlw	1
  6024  0D75  027B               	subwf	RFDOUT@Nref,w
  6025  0D76                     u2975:	
  6026  0D76  1C03               	btfss	3,0
  6027  0D77  2DAF               	goto	l3268
  6028  0D78                     l3260:	
  6029                           
  6030                           ;FMCW.c: 209: Nref_b[i] = Nref % 2;
  6031  0D78  3001               	movlw	1
  6032  0D79  057B               	andwf	RFDOUT@Nref,w
  6033  0D7A  1283               	bcf	3,5	;RP0=0, select bank0
  6034  0D7B  1303               	bcf	3,6	;RP1=0, select bank0
  6035  0D7C  00A0               	movwf	??_RFDOUT
  6036  0D7D  3000               	movlw	0
  6037  0D7E  057C               	andwf	RFDOUT@Nref+1,w
  6038  0D7F  00A1               	movwf	??_RFDOUT+1
  6039  0D80  083B               	movf	RFDOUT@i_473,w
  6040  0D81  00A2               	movwf	??_RFDOUT+2
  6041  0D82  0722               	addwf	??_RFDOUT+2,w
  6042  0D83  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6043  0D84  0084               	movwf	4
  6044  0D85  0820               	movf	??_RFDOUT,w
  6045  0D86  1383               	bcf	3,7	;select IRP bank0
  6046  0D87  0080               	movwf	0
  6047  0D88  0A84               	incf	4,f
  6048  0D89  0821               	movf	??_RFDOUT+1,w
  6049  0D8A  0080               	movwf	0
  6050                           
  6051                           ;FMCW.c: 210: Nref = Nref / 2;
  6052  0D8B  3002               	movlw	2
  6053  0D8C  00F0               	movwf	___awdiv@divisor
  6054  0D8D  3000               	movlw	0
  6055  0D8E  00F1               	movwf	___awdiv@divisor+1
  6056  0D8F  087C               	movf	RFDOUT@Nref+1,w
  6057  0D90  00F3               	movwf	___awdiv@dividend+1
  6058  0D91  087B               	movf	RFDOUT@Nref,w
  6059  0D92  00F2               	movwf	___awdiv@dividend
  6060  0D93  120A  158A  22E7  120A  158A  	fcall	___awdiv
  6061  0D98  0871               	movf	?___awdiv+1,w
  6062  0D99  00FC               	movwf	RFDOUT@Nref+1
  6063  0D9A  0870               	movf	?___awdiv,w
  6064  0D9B  00FB               	movwf	RFDOUT@Nref
  6065  0D9C  3001               	movlw	1
  6066  0D9D  1283               	bcf	3,5	;RP0=0, select bank0
  6067  0D9E  1303               	bcf	3,6	;RP1=0, select bank0
  6068  0D9F  07BB               	addwf	RFDOUT@i_473,f
  6069  0DA0  1803               	skipnc
  6070  0DA1  0ABC               	incf	RFDOUT@i_473+1,f
  6071  0DA2  3000               	movlw	0
  6072  0DA3  07BC               	addwf	RFDOUT@i_473+1,f
  6073  0DA4  087C               	movf	RFDOUT@Nref+1,w
  6074  0DA5  3A80               	xorlw	128
  6075  0DA6  00FF               	movwf	127
  6076  0DA7  3080               	movlw	128
  6077  0DA8  027F               	subwf	127,w
  6078  0DA9  1D03               	skipz
  6079  0DAA  2DAD               	goto	u2985
  6080  0DAB  3001               	movlw	1
  6081  0DAC  027B               	subwf	RFDOUT@Nref,w
  6082  0DAD                     u2985:	
  6083  0DAD  1803               	skipnc
  6084  0DAE  2D78               	goto	l3260
  6085  0DAF                     l3268:	
  6086                           
  6087                           ;FMCW.c: 211: }
  6088                           ;FMCW.c: 214: for (int i=0; i<12; i++)
  6089  0DAF  1283               	bcf	3,5	;RP0=0, select bank0
  6090  0DB0  1303               	bcf	3,6	;RP1=0, select bank0
  6091  0DB1  01BF               	clrf	RFDOUT@i_474
  6092  0DB2  01C0               	clrf	RFDOUT@i_474+1
  6093  0DB3  0840               	movf	RFDOUT@i_474+1,w
  6094  0DB4  3A80               	xorlw	128
  6095  0DB5  00FF               	movwf	127
  6096  0DB6  3080               	movlw	128
  6097  0DB7  027F               	subwf	127,w
  6098  0DB8  1D03               	skipz
  6099  0DB9  2DBC               	goto	u2995
  6100  0DBA  300C               	movlw	12
  6101  0DBB  023F               	subwf	RFDOUT@i_474,w
  6102  0DBC                     u2995:	
  6103  0DBC  1803               	btfsc	3,0
  6104  0DBD  2E05               	goto	l3286
  6105  0DBE                     l3274:	
  6106                           
  6107                           ;FMCW.c: 215: {
  6108                           ;FMCW.c: 216: if(Nref_b[i] == 0)
  6109  0DBE  1283               	bcf	3,5	;RP0=0, select bank0
  6110  0DBF  1303               	bcf	3,6	;RP1=0, select bank0
  6111  0DC0  083F               	movf	RFDOUT@i_474,w
  6112  0DC1  00A0               	movwf	??_RFDOUT
  6113  0DC2  0720               	addwf	??_RFDOUT,w
  6114  0DC3  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6115  0DC4  0084               	movwf	4
  6116  0DC5  1383               	bcf	3,7	;select IRP bank0
  6117  0DC6  0800               	movf	0,w
  6118  0DC7  00A1               	movwf	??_RFDOUT+1
  6119  0DC8  0A84               	incf	4,f
  6120  0DC9  0800               	movf	0,w
  6121  0DCA  00A2               	movwf	??_RFDOUT+2
  6122  0DCB  0821               	movf	??_RFDOUT+1,w
  6123  0DCC  0422               	iorwf	??_RFDOUT+2,w
  6124  0DCD  1D03               	btfss	3,2
  6125  0DCE  2DD8               	goto	l3278
  6126                           
  6127                           ;FMCW.c: 217: {
  6128                           ;FMCW.c: 218: L_OUT(fmcwtxrx);
  6129  0DCF  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6130  0DD0  00F3               	movwf	L_OUT@fmcwtxrx+1
  6131  0DD1  0879               	movf	RFDOUT@fmcwtxrx,w
  6132  0DD2  00F2               	movwf	L_OUT@fmcwtxrx
  6133  0DD3  120A  158A  220E  120A  158A  	fcall	_L_OUT
  6134  0DD8                     l3278:	
  6135                           
  6136                           ;FMCW.c: 219: }
  6137                           ;FMCW.c: 220: if(Nref_b[i] == 1)
  6138  0DD8  1283               	bcf	3,5	;RP0=0, select bank0
  6139  0DD9  1303               	bcf	3,6	;RP1=0, select bank0
  6140  0DDA  083F               	movf	RFDOUT@i_474,w
  6141  0DDB  00A0               	movwf	??_RFDOUT
  6142  0DDC  0720               	addwf	??_RFDOUT,w
  6143  0DDD  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6144  0DDE  0084               	movwf	4
  6145  0DDF  1383               	bcf	3,7	;select IRP bank0
  6146  0DE0  0800               	movf	0,w
  6147  0DE1  00A1               	movwf	??_RFDOUT+1
  6148  0DE2  0A84               	incf	4,f
  6149  0DE3  0800               	movf	0,w
  6150  0DE4  00A2               	movwf	??_RFDOUT+2
  6151  0DE5  0321               	decf	??_RFDOUT+1,w
  6152  0DE6  0422               	iorwf	??_RFDOUT+2,w
  6153  0DE7  1D03               	btfss	3,2
  6154  0DE8  2DF2               	goto	l3282
  6155                           
  6156                           ;FMCW.c: 221: {
  6157                           ;FMCW.c: 222: H_OUT(fmcwtxrx);
  6158  0DE9  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6159  0DEA  00F3               	movwf	H_OUT@fmcwtxrx+1
  6160  0DEB  0879               	movf	RFDOUT@fmcwtxrx,w
  6161  0DEC  00F2               	movwf	H_OUT@fmcwtxrx
  6162  0DED  120A  158A  21C8  120A  158A  	fcall	_H_OUT
  6163  0DF2                     l3282:	
  6164  0DF2  3001               	movlw	1
  6165  0DF3  1283               	bcf	3,5	;RP0=0, select bank0
  6166  0DF4  1303               	bcf	3,6	;RP1=0, select bank0
  6167  0DF5  07BF               	addwf	RFDOUT@i_474,f
  6168  0DF6  1803               	skipnc
  6169  0DF7  0AC0               	incf	RFDOUT@i_474+1,f
  6170  0DF8  3000               	movlw	0
  6171  0DF9  07C0               	addwf	RFDOUT@i_474+1,f
  6172  0DFA  0840               	movf	RFDOUT@i_474+1,w
  6173  0DFB  3A80               	xorlw	128
  6174  0DFC  00FF               	movwf	127
  6175  0DFD  3080               	movlw	128
  6176  0DFE  027F               	subwf	127,w
  6177  0DFF  1D03               	skipz
  6178  0E00  2E03               	goto	u3025
  6179  0E01  300C               	movlw	12
  6180  0E02  023F               	subwf	RFDOUT@i_474,w
  6181  0E03                     u3025:	
  6182  0E03  1C03               	skipc
  6183  0E04  2DBE               	goto	l3274
  6184  0E05                     l3286:	
  6185                           
  6186                           ;FMCW.c: 223: }
  6187                           ;FMCW.c: 224: }
  6188                           ;FMCW.c: 227: H_OUT(fmcwtxrx);
  6189  0E05  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6190  0E06  00F3               	movwf	H_OUT@fmcwtxrx+1
  6191  0E07  0879               	movf	RFDOUT@fmcwtxrx,w
  6192  0E08  00F2               	movwf	H_OUT@fmcwtxrx
  6193  0E09  120A  158A  21C8  120A  158A  	fcall	_H_OUT
  6194                           
  6195                           ;FMCW.c: 228: H_OUT(fmcwtxrx);
  6196  0E0E  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6197  0E0F  00F3               	movwf	H_OUT@fmcwtxrx+1
  6198  0E10  0879               	movf	RFDOUT@fmcwtxrx,w
  6199  0E11  00F2               	movwf	H_OUT@fmcwtxrx
  6200  0E12  120A  158A  21C8  120A  158A  	fcall	_H_OUT
  6201                           
  6202                           ;FMCW.c: 231: STBOUT(fmcwtxrx);
  6203  0E17  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6204  0E18  00F3               	movwf	STBOUT@fmcwtxrx+1
  6205  0E19  0879               	movf	RFDOUT@fmcwtxrx,w
  6206  0E1A  00F2               	movwf	STBOUT@fmcwtxrx
  6207  0E1B  120A  158A  2166   	fcall	_STBOUT
  6208  0E1E  0008               	return
  6209  0E1F                     __end_of_RFDOUT:	
  6210                           
  6211                           	psect	text23
  6212  00AC                     __ptext23:	
  6213 ;; *************** function _OUTFQ *****************
  6214 ;; Defined at:
  6215 ;;		line 136 in file "FMCW.c"
  6216 ;; Parameters:    Size  Location     Type
  6217 ;;  fmcwtxrx        2    9[COMMON] int 
  6218 ;;  Nprg            2   11[COMMON] PTR int 
  6219 ;;		 -> RAM(512), main@FMRX_Nprg(10), main@CWTX_Nprg(10), main@FMTX_Nprg(10), 
  6220 ;;		 -> FMRX_Nprg(10), CWTX_Nprg(10), FMTX_Nprg(10), 
  6221 ;; Auto vars:     Size  Location     Type
  6222 ;;  j               2   58[BANK0 ] int 
  6223 ;;  i               2   56[BANK0 ] int 
  6224 ;;  i               2   50[BANK0 ] int 
  6225 ;;  i               2   54[BANK0 ] int 
  6226 ;;  Nprg_b         34   16[BANK0 ] int [17]
  6227 ;;  count           2   52[BANK0 ] int 
  6228 ;; Return value:  Size  Location     Type
  6229 ;;                  1    wreg      void 
  6230 ;; Registers used:
  6231 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6232 ;; Tracked objects:
  6233 ;;		On entry : 0/0
  6234 ;;		On exit  : 0/0
  6235 ;;		Unchanged: 0/0
  6236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6237 ;;      Params:         4       0       0       0       0
  6238 ;;      Locals:         0      44       0       0       0
  6239 ;;      Temps:          0      16       0       0       0
  6240 ;;      Totals:         4      60       0       0       0
  6241 ;;Total ram usage:       64 bytes
  6242 ;; Hardware stack levels used:    1
  6243 ;; Hardware stack levels required when called:    2
  6244 ;; This function calls:
  6245 ;;		_H_OUT
  6246 ;;		_L_OUT
  6247 ;;		_STBOUT
  6248 ;;		___awdiv
  6249 ;; This function is called by:
  6250 ;;		_FMTX
  6251 ;;		_CWTX
  6252 ;;		_FMRX
  6253 ;; This function uses a non-reentrant model
  6254 ;;
  6255                           
  6256                           
  6257                           ;psect for function _OUTFQ
  6258  00AC                     _OUTFQ:	
  6259                           
  6260                           ;FMCW.c: 137: int count = 0;
  6261                           
  6262                           ;incstack = 0
  6263                           ; Regs used in _OUTFQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6264  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  6265  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  6266  00AE  01D4               	clrf	OUTFQ@count
  6267  00AF  01D5               	clrf	OUTFQ@count+1
  6268                           
  6269                           ;FMCW.c: 138: int Nprg_b[17];
  6270                           ;FMCW.c: 140: for(int i=0; i<17; i++){
  6271  00B0  01D6               	clrf	OUTFQ@i
  6272  00B1  01D7               	clrf	OUTFQ@i+1
  6273  00B2  0857               	movf	OUTFQ@i+1,w
  6274  00B3  3A80               	xorlw	128
  6275  00B4  00FF               	movwf	127
  6276  00B5  3080               	movlw	128
  6277  00B6  027F               	subwf	127,w
  6278  00B7  1D03               	skipz
  6279  00B8  28BB               	goto	u2815
  6280  00B9  3011               	movlw	17
  6281  00BA  0256               	subwf	OUTFQ@i,w
  6282  00BB                     u2815:	
  6283  00BB  1803               	btfsc	3,0
  6284  00BC  28D9               	goto	l3176
  6285  00BD                     l3170:	
  6286                           
  6287                           ;FMCW.c: 141: Nprg_b[i] = 0;
  6288  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  6289  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  6290  00BF  0856               	movf	OUTFQ@i,w
  6291  00C0  00A0               	movwf	??_OUTFQ
  6292  00C1  0720               	addwf	??_OUTFQ,w
  6293  00C2  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6294  00C3  0084               	movwf	4
  6295  00C4  1383               	bcf	3,7	;select IRP bank0
  6296  00C5  0180               	clrf	0
  6297  00C6  0A84               	incf	4,f
  6298  00C7  0180               	clrf	0
  6299  00C8  3001               	movlw	1
  6300  00C9  07D6               	addwf	OUTFQ@i,f
  6301  00CA  1803               	skipnc
  6302  00CB  0AD7               	incf	OUTFQ@i+1,f
  6303  00CC  3000               	movlw	0
  6304  00CD  07D7               	addwf	OUTFQ@i+1,f
  6305  00CE  0857               	movf	OUTFQ@i+1,w
  6306  00CF  3A80               	xorlw	128
  6307  00D0  00FF               	movwf	127
  6308  00D1  3080               	movlw	128
  6309  00D2  027F               	subwf	127,w
  6310  00D3  1D03               	skipz
  6311  00D4  28D7               	goto	u2825
  6312  00D5  3011               	movlw	17
  6313  00D6  0256               	subwf	OUTFQ@i,w
  6314  00D7                     u2825:	
  6315  00D7  1C03               	skipc
  6316  00D8  28BD               	goto	l3170
  6317  00D9                     l3176:	
  6318                           
  6319                           ;FMCW.c: 142: }
  6320                           ;FMCW.c: 145: for(int i = 0; i < 17; i++){
  6321  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  6322  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  6323  00DB  01D2               	clrf	OUTFQ@i_462
  6324  00DC  01D3               	clrf	OUTFQ@i_462+1
  6325  00DD  0853               	movf	OUTFQ@i_462+1,w
  6326  00DE  3A80               	xorlw	128
  6327  00DF  00FF               	movwf	127
  6328  00E0  3080               	movlw	128
  6329  00E1  027F               	subwf	127,w
  6330  00E2  1D03               	skipz
  6331  00E3  28E6               	goto	u2835
  6332  00E4  3011               	movlw	17
  6333  00E5  0252               	subwf	OUTFQ@i_462,w
  6334  00E6                     u2835:	
  6335  00E6  1803               	btfsc	3,0
  6336  00E7  2AB7               	goto	l3222
  6337  00E8                     l3182:	
  6338                           
  6339                           ;FMCW.c: 146: for(int j = 0; j<5; j++){
  6340  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  6341  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  6342  00EA  01DA               	clrf	OUTFQ@j
  6343  00EB  01DB               	clrf	OUTFQ@j+1
  6344  00EC  085B               	movf	OUTFQ@j+1,w
  6345  00ED  3A80               	xorlw	128
  6346  00EE  00FF               	movwf	127
  6347  00EF  3080               	movlw	128
  6348  00F0  027F               	subwf	127,w
  6349  00F1  1D03               	skipz
  6350  00F2  28F5               	goto	u2845
  6351  00F3  3005               	movlw	5
  6352  00F4  025A               	subwf	OUTFQ@j,w
  6353  00F5                     u2845:	
  6354  00F5  1803               	btfsc	3,0
  6355  00F6  2AA4               	goto	l3218
  6356  00F7                     l3188:	
  6357                           
  6358                           ;FMCW.c: 147: if(Nprg[j] % 2 == 0) {
  6359  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  6360  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  6361  00F9  085B               	movf	OUTFQ@j+1,w
  6362  00FA  00A1               	movwf	??_OUTFQ+1
  6363  00FB  085A               	movf	OUTFQ@j,w
  6364  00FC  00A0               	movwf	??_OUTFQ
  6365  00FD  1003               	clrc
  6366  00FE  0DA0               	rlf	??_OUTFQ,f
  6367  00FF  0DA1               	rlf	??_OUTFQ+1,f
  6368  0100  0820               	movf	??_OUTFQ,w
  6369  0101  077B               	addwf	OUTFQ@Nprg,w
  6370  0102  00A2               	movwf	??_OUTFQ+2
  6371  0103  0821               	movf	??_OUTFQ+1,w
  6372  0104  1803               	skipnc
  6373  0105  0A21               	incf	??_OUTFQ+1,w
  6374  0106  077C               	addwf	OUTFQ@Nprg+1,w
  6375  0107  00A3               	movwf	??_OUTFQ+3
  6376  0108  0822               	movf	??_OUTFQ+2,w
  6377  0109  0084               	movwf	4
  6378  010A  1783               	bsf	3,7
  6379  010B  1C23               	btfss	??_OUTFQ+3,0
  6380  010C  1383               	bcf	3,7
  6381  010D  0800               	movf	0,w
  6382  010E  00A4               	movwf	??_OUTFQ+4
  6383  010F  0A84               	incf	4,f
  6384  0110  0800               	movf	0,w
  6385  0111  00A5               	movwf	??_OUTFQ+5
  6386  0112  1824               	btfsc	??_OUTFQ+4,0
  6387  0113  299D               	goto	l3200
  6388                           
  6389                           ;FMCW.c: 148: if(j == 4){
  6390  0114  3004               	movlw	4
  6391  0115  065A               	xorwf	OUTFQ@j,w
  6392  0116  045B               	iorwf	OUTFQ@j+1,w
  6393  0117  1D03               	btfss	3,2
  6394  0118  2960               	goto	l3198
  6395                           
  6396                           ;FMCW.c: 149: Nprg[j] = Nprg[j] / 2;
  6397  0119  3002               	movlw	2
  6398  011A  00F0               	movwf	___awdiv@divisor
  6399  011B  3000               	movlw	0
  6400  011C  00F1               	movwf	___awdiv@divisor+1
  6401  011D  085B               	movf	OUTFQ@j+1,w
  6402  011E  00A1               	movwf	??_OUTFQ+1
  6403  011F  085A               	movf	OUTFQ@j,w
  6404  0120  00A0               	movwf	??_OUTFQ
  6405  0121  1003               	clrc
  6406  0122  0DA0               	rlf	??_OUTFQ,f
  6407  0123  0DA1               	rlf	??_OUTFQ+1,f
  6408  0124  0820               	movf	??_OUTFQ,w
  6409  0125  077B               	addwf	OUTFQ@Nprg,w
  6410  0126  00A2               	movwf	??_OUTFQ+2
  6411  0127  0821               	movf	??_OUTFQ+1,w
  6412  0128  1803               	skipnc
  6413  0129  0A21               	incf	??_OUTFQ+1,w
  6414  012A  077C               	addwf	OUTFQ@Nprg+1,w
  6415  012B  00A3               	movwf	??_OUTFQ+3
  6416  012C  0822               	movf	??_OUTFQ+2,w
  6417  012D  0084               	movwf	4
  6418  012E  1783               	bsf	3,7
  6419  012F  1C23               	btfss	??_OUTFQ+3,0
  6420  0130  1383               	bcf	3,7
  6421  0131  0800               	movf	0,w
  6422  0132  00F2               	movwf	___awdiv@dividend
  6423  0133  0A84               	incf	4,f
  6424  0134  0800               	movf	0,w
  6425  0135  00F3               	movwf	___awdiv@dividend+1
  6426  0136  120A  158A  22E7  120A  118A  	fcall	___awdiv
  6427  013B  1283               	bcf	3,5	;RP0=0, select bank0
  6428  013C  1303               	bcf	3,6	;RP1=0, select bank0
  6429  013D  085B               	movf	OUTFQ@j+1,w
  6430  013E  00A5               	movwf	??_OUTFQ+5
  6431  013F  085A               	movf	OUTFQ@j,w
  6432  0140  00A4               	movwf	??_OUTFQ+4
  6433  0141  1003               	clrc
  6434  0142  0DA4               	rlf	??_OUTFQ+4,f
  6435  0143  0DA5               	rlf	??_OUTFQ+5,f
  6436  0144  0824               	movf	??_OUTFQ+4,w
  6437  0145  077B               	addwf	OUTFQ@Nprg,w
  6438  0146  00A6               	movwf	??_OUTFQ+6
  6439  0147  0825               	movf	??_OUTFQ+5,w
  6440  0148  1803               	skipnc
  6441  0149  0A25               	incf	??_OUTFQ+5,w
  6442  014A  077C               	addwf	OUTFQ@Nprg+1,w
  6443  014B  00A7               	movwf	??_OUTFQ+7
  6444  014C  0826               	movf	??_OUTFQ+6,w
  6445  014D  0084               	movwf	4
  6446  014E  1783               	bsf	3,7
  6447  014F  1C27               	btfss	??_OUTFQ+7,0
  6448  0150  1383               	bcf	3,7
  6449  0151  0870               	movf	?___awdiv,w
  6450  0152  0080               	movwf	0
  6451  0153  0A84               	incf	4,f
  6452  0154  0871               	movf	?___awdiv+1,w
  6453  0155  0080               	movwf	0
  6454                           
  6455                           ;FMCW.c: 150: Nprg_b[count] = 0;
  6456  0156  0854               	movf	OUTFQ@count,w
  6457  0157  00A0               	movwf	??_OUTFQ
  6458  0158  0720               	addwf	??_OUTFQ,w
  6459  0159  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6460  015A  0084               	movwf	4
  6461  015B  1383               	bcf	3,7	;select IRP bank0
  6462  015C  0180               	clrf	0
  6463  015D  0A84               	incf	4,f
  6464  015E  0180               	clrf	0
  6465  015F  2A05               	goto	l3208
  6466  0160                     l3198:	
  6467                           ;FMCW.c: 152: }
  6468                           
  6469                           ;FMCW.c: 151: count++;
  6470                           
  6471                           
  6472                           ;FMCW.c: 153: else{
  6473                           ;FMCW.c: 154: Nprg[j] = Nprg[j] / 2;
  6474  0160  3002               	movlw	2
  6475  0161  00F0               	movwf	___awdiv@divisor
  6476  0162  3000               	movlw	0
  6477  0163  00F1               	movwf	___awdiv@divisor+1
  6478  0164  085B               	movf	OUTFQ@j+1,w
  6479  0165  00A1               	movwf	??_OUTFQ+1
  6480  0166  085A               	movf	OUTFQ@j,w
  6481  0167  00A0               	movwf	??_OUTFQ
  6482  0168  1003               	clrc
  6483  0169  0DA0               	rlf	??_OUTFQ,f
  6484  016A  0DA1               	rlf	??_OUTFQ+1,f
  6485  016B  0820               	movf	??_OUTFQ,w
  6486  016C  077B               	addwf	OUTFQ@Nprg,w
  6487  016D  00A2               	movwf	??_OUTFQ+2
  6488  016E  0821               	movf	??_OUTFQ+1,w
  6489  016F  1803               	skipnc
  6490  0170  0A21               	incf	??_OUTFQ+1,w
  6491  0171  077C               	addwf	OUTFQ@Nprg+1,w
  6492  0172  00A3               	movwf	??_OUTFQ+3
  6493  0173  0822               	movf	??_OUTFQ+2,w
  6494  0174  0084               	movwf	4
  6495  0175  1783               	bsf	3,7
  6496  0176  1C23               	btfss	??_OUTFQ+3,0
  6497  0177  1383               	bcf	3,7
  6498  0178  0800               	movf	0,w
  6499  0179  00F2               	movwf	___awdiv@dividend
  6500  017A  0A84               	incf	4,f
  6501  017B  0800               	movf	0,w
  6502  017C  00F3               	movwf	___awdiv@dividend+1
  6503  017D  120A  158A  22E7  120A  118A  	fcall	___awdiv
  6504  0182  1283               	bcf	3,5	;RP0=0, select bank0
  6505  0183  1303               	bcf	3,6	;RP1=0, select bank0
  6506  0184  085B               	movf	OUTFQ@j+1,w
  6507  0185  00A5               	movwf	??_OUTFQ+5
  6508  0186  085A               	movf	OUTFQ@j,w
  6509  0187  00A4               	movwf	??_OUTFQ+4
  6510  0188  1003               	clrc
  6511  0189  0DA4               	rlf	??_OUTFQ+4,f
  6512  018A  0DA5               	rlf	??_OUTFQ+5,f
  6513  018B  0824               	movf	??_OUTFQ+4,w
  6514  018C  077B               	addwf	OUTFQ@Nprg,w
  6515  018D  00A6               	movwf	??_OUTFQ+6
  6516  018E  0825               	movf	??_OUTFQ+5,w
  6517  018F  1803               	skipnc
  6518  0190  0A25               	incf	??_OUTFQ+5,w
  6519  0191  077C               	addwf	OUTFQ@Nprg+1,w
  6520  0192  00A7               	movwf	??_OUTFQ+7
  6521  0193  0826               	movf	??_OUTFQ+6,w
  6522  0194  0084               	movwf	4
  6523  0195  1783               	bsf	3,7
  6524  0196  1C27               	btfss	??_OUTFQ+7,0
  6525  0197  1383               	bcf	3,7
  6526  0198  0870               	movf	?___awdiv,w
  6527  0199  0080               	movwf	0
  6528  019A  0A84               	incf	4,f
  6529  019B  0871               	movf	?___awdiv+1,w
  6530  019C  2A92               	goto	L8
  6531  019D                     l3200:	
  6532                           ;FMCW.c: 155: }
  6533                           ;FMCW.c: 156: }
  6534                           
  6535                           
  6536                           ;FMCW.c: 157: else if(Nprg[j] % 2 == 1) {
  6537  019D  085B               	movf	OUTFQ@j+1,w
  6538  019E  00A1               	movwf	??_OUTFQ+1
  6539  019F  085A               	movf	OUTFQ@j,w
  6540  01A0  00A0               	movwf	??_OUTFQ
  6541  01A1  1003               	clrc
  6542  01A2  0DA0               	rlf	??_OUTFQ,f
  6543  01A3  0DA1               	rlf	??_OUTFQ+1,f
  6544  01A4  0820               	movf	??_OUTFQ,w
  6545  01A5  077B               	addwf	OUTFQ@Nprg,w
  6546  01A6  00A2               	movwf	??_OUTFQ+2
  6547  01A7  0821               	movf	??_OUTFQ+1,w
  6548  01A8  1803               	skipnc
  6549  01A9  0A21               	incf	??_OUTFQ+1,w
  6550  01AA  077C               	addwf	OUTFQ@Nprg+1,w
  6551  01AB  00A3               	movwf	??_OUTFQ+3
  6552  01AC  0822               	movf	??_OUTFQ+2,w
  6553  01AD  0084               	movwf	4
  6554  01AE  1783               	bsf	3,7
  6555  01AF  1C23               	btfss	??_OUTFQ+3,0
  6556  01B0  1383               	bcf	3,7
  6557  01B1  0800               	movf	0,w
  6558  01B2  00A4               	movwf	??_OUTFQ+4
  6559  01B3  0A84               	incf	4,f
  6560  01B4  0800               	movf	0,w
  6561  01B5  00A5               	movwf	??_OUTFQ+5
  6562  01B6  1C24               	btfss	??_OUTFQ+4,0
  6563  01B7  2A93               	goto	l3214
  6564                           
  6565                           ;FMCW.c: 158: if(j == 4){
  6566  01B8  3004               	movlw	4
  6567  01B9  065A               	xorwf	OUTFQ@j,w
  6568  01BA  045B               	iorwf	OUTFQ@j+1,w
  6569  01BB  1D03               	btfss	3,2
  6570  01BC  2A0C               	goto	l3210
  6571                           
  6572                           ;FMCW.c: 159: Nprg[j] = Nprg[j] / 2;
  6573  01BD  3002               	movlw	2
  6574  01BE  00F0               	movwf	___awdiv@divisor
  6575  01BF  3000               	movlw	0
  6576  01C0  00F1               	movwf	___awdiv@divisor+1
  6577  01C1  085B               	movf	OUTFQ@j+1,w
  6578  01C2  00A1               	movwf	??_OUTFQ+1
  6579  01C3  085A               	movf	OUTFQ@j,w
  6580  01C4  00A0               	movwf	??_OUTFQ
  6581  01C5  1003               	clrc
  6582  01C6  0DA0               	rlf	??_OUTFQ,f
  6583  01C7  0DA1               	rlf	??_OUTFQ+1,f
  6584  01C8  0820               	movf	??_OUTFQ,w
  6585  01C9  077B               	addwf	OUTFQ@Nprg,w
  6586  01CA  00A2               	movwf	??_OUTFQ+2
  6587  01CB  0821               	movf	??_OUTFQ+1,w
  6588  01CC  1803               	skipnc
  6589  01CD  0A21               	incf	??_OUTFQ+1,w
  6590  01CE  077C               	addwf	OUTFQ@Nprg+1,w
  6591  01CF  00A3               	movwf	??_OUTFQ+3
  6592  01D0  0822               	movf	??_OUTFQ+2,w
  6593  01D1  0084               	movwf	4
  6594  01D2  1783               	bsf	3,7
  6595  01D3  1C23               	btfss	??_OUTFQ+3,0
  6596  01D4  1383               	bcf	3,7
  6597  01D5  0800               	movf	0,w
  6598  01D6  00F2               	movwf	___awdiv@dividend
  6599  01D7  0A84               	incf	4,f
  6600  01D8  0800               	movf	0,w
  6601  01D9  00F3               	movwf	___awdiv@dividend+1
  6602  01DA  120A  158A  22E7  120A  118A  	fcall	___awdiv
  6603  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  6604  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  6605  01E1  085B               	movf	OUTFQ@j+1,w
  6606  01E2  00A5               	movwf	??_OUTFQ+5
  6607  01E3  085A               	movf	OUTFQ@j,w
  6608  01E4  00A4               	movwf	??_OUTFQ+4
  6609  01E5  1003               	clrc
  6610  01E6  0DA4               	rlf	??_OUTFQ+4,f
  6611  01E7  0DA5               	rlf	??_OUTFQ+5,f
  6612  01E8  0824               	movf	??_OUTFQ+4,w
  6613  01E9  077B               	addwf	OUTFQ@Nprg,w
  6614  01EA  00A6               	movwf	??_OUTFQ+6
  6615  01EB  0825               	movf	??_OUTFQ+5,w
  6616  01EC  1803               	skipnc
  6617  01ED  0A25               	incf	??_OUTFQ+5,w
  6618  01EE  077C               	addwf	OUTFQ@Nprg+1,w
  6619  01EF  00A7               	movwf	??_OUTFQ+7
  6620  01F0  0826               	movf	??_OUTFQ+6,w
  6621  01F1  0084               	movwf	4
  6622  01F2  1783               	bsf	3,7
  6623  01F3  1C27               	btfss	??_OUTFQ+7,0
  6624  01F4  1383               	bcf	3,7
  6625  01F5  0870               	movf	?___awdiv,w
  6626  01F6  0080               	movwf	0
  6627  01F7  0A84               	incf	4,f
  6628  01F8  0871               	movf	?___awdiv+1,w
  6629  01F9  0080               	movwf	0
  6630                           
  6631                           ;FMCW.c: 160: Nprg_b[count] = 1;
  6632  01FA  0854               	movf	OUTFQ@count,w
  6633  01FB  00A0               	movwf	??_OUTFQ
  6634  01FC  0720               	addwf	??_OUTFQ,w
  6635  01FD  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6636  01FE  0084               	movwf	4
  6637  01FF  3001               	movlw	1
  6638  0200  1383               	bcf	3,7	;select IRP bank0
  6639  0201  0080               	movwf	0
  6640  0202  0A84               	incf	4,f
  6641  0203  3000               	movlw	0
  6642  0204  0080               	movwf	0
  6643  0205                     l3208:	
  6644                           
  6645                           ;FMCW.c: 161: count++;
  6646  0205  3001               	movlw	1
  6647  0206  07D4               	addwf	OUTFQ@count,f
  6648  0207  1803               	skipnc
  6649  0208  0AD5               	incf	OUTFQ@count+1,f
  6650  0209  3000               	movlw	0
  6651  020A  07D5               	addwf	OUTFQ@count+1,f
  6652                           
  6653                           ;FMCW.c: 162: }
  6654  020B  2A93               	goto	l3214
  6655  020C                     l3210:	
  6656                           
  6657                           ;FMCW.c: 163: else{
  6658                           ;FMCW.c: 164: Nprg[j] = Nprg[j] / 2;
  6659  020C  3002               	movlw	2
  6660  020D  00F0               	movwf	___awdiv@divisor
  6661  020E  3000               	movlw	0
  6662  020F  00F1               	movwf	___awdiv@divisor+1
  6663  0210  085B               	movf	OUTFQ@j+1,w
  6664  0211  00A1               	movwf	??_OUTFQ+1
  6665  0212  085A               	movf	OUTFQ@j,w
  6666  0213  00A0               	movwf	??_OUTFQ
  6667  0214  1003               	clrc
  6668  0215  0DA0               	rlf	??_OUTFQ,f
  6669  0216  0DA1               	rlf	??_OUTFQ+1,f
  6670  0217  0820               	movf	??_OUTFQ,w
  6671  0218  077B               	addwf	OUTFQ@Nprg,w
  6672  0219  00A2               	movwf	??_OUTFQ+2
  6673  021A  0821               	movf	??_OUTFQ+1,w
  6674  021B  1803               	skipnc
  6675  021C  0A21               	incf	??_OUTFQ+1,w
  6676  021D  077C               	addwf	OUTFQ@Nprg+1,w
  6677  021E  00A3               	movwf	??_OUTFQ+3
  6678  021F  0822               	movf	??_OUTFQ+2,w
  6679  0220  0084               	movwf	4
  6680  0221  1783               	bsf	3,7
  6681  0222  1C23               	btfss	??_OUTFQ+3,0
  6682  0223  1383               	bcf	3,7
  6683  0224  0800               	movf	0,w
  6684  0225  00F2               	movwf	___awdiv@dividend
  6685  0226  0A84               	incf	4,f
  6686  0227  0800               	movf	0,w
  6687  0228  00F3               	movwf	___awdiv@dividend+1
  6688  0229  120A  158A  22E7  120A  118A  	fcall	___awdiv
  6689  022E  1283               	bcf	3,5	;RP0=0, select bank0
  6690  022F  1303               	bcf	3,6	;RP1=0, select bank0
  6691  0230  085B               	movf	OUTFQ@j+1,w
  6692  0231  00A5               	movwf	??_OUTFQ+5
  6693  0232  085A               	movf	OUTFQ@j,w
  6694  0233  00A4               	movwf	??_OUTFQ+4
  6695  0234  1003               	clrc
  6696  0235  0DA4               	rlf	??_OUTFQ+4,f
  6697  0236  0DA5               	rlf	??_OUTFQ+5,f
  6698  0237  0824               	movf	??_OUTFQ+4,w
  6699  0238  077B               	addwf	OUTFQ@Nprg,w
  6700  0239  00A6               	movwf	??_OUTFQ+6
  6701  023A  0825               	movf	??_OUTFQ+5,w
  6702  023B  1803               	skipnc
  6703  023C  0A25               	incf	??_OUTFQ+5,w
  6704  023D  077C               	addwf	OUTFQ@Nprg+1,w
  6705  023E  00A7               	movwf	??_OUTFQ+7
  6706  023F  0826               	movf	??_OUTFQ+6,w
  6707  0240  0084               	movwf	4
  6708  0241  1783               	bsf	3,7
  6709  0242  1C27               	btfss	??_OUTFQ+7,0
  6710  0243  1383               	bcf	3,7
  6711  0244  0870               	movf	?___awdiv,w
  6712  0245  0080               	movwf	0
  6713  0246  0A84               	incf	4,f
  6714  0247  0871               	movf	?___awdiv+1,w
  6715  0248  0080               	movwf	0
  6716                           
  6717                           ;FMCW.c: 165: Nprg[j+1] = Nprg[j+1] + 10;
  6718  0249  085B               	movf	OUTFQ@j+1,w
  6719  024A  00A1               	movwf	??_OUTFQ+1
  6720  024B  085A               	movf	OUTFQ@j,w
  6721  024C  00A0               	movwf	??_OUTFQ
  6722  024D  1003               	clrc
  6723  024E  0DA0               	rlf	??_OUTFQ,f
  6724  024F  0DA1               	rlf	??_OUTFQ+1,f
  6725  0250  0820               	movf	??_OUTFQ,w
  6726  0251  3E02               	addlw	2
  6727  0252  00A2               	movwf	??_OUTFQ+2
  6728  0253  0821               	movf	??_OUTFQ+1,w
  6729  0254  1803               	skipnc
  6730  0255  3E01               	addlw	1
  6731  0256  3E00               	addlw	0
  6732  0257  00A3               	movwf	??_OUTFQ+3
  6733  0258  0822               	movf	??_OUTFQ+2,w
  6734  0259  077B               	addwf	OUTFQ@Nprg,w
  6735  025A  00A4               	movwf	??_OUTFQ+4
  6736  025B  0823               	movf	??_OUTFQ+3,w
  6737  025C  1803               	skipnc
  6738  025D  0A23               	incf	??_OUTFQ+3,w
  6739  025E  077C               	addwf	OUTFQ@Nprg+1,w
  6740  025F  00A5               	movwf	??_OUTFQ+5
  6741  0260  0824               	movf	??_OUTFQ+4,w
  6742  0261  0084               	movwf	4
  6743  0262  1783               	bsf	3,7
  6744  0263  1C25               	btfss	??_OUTFQ+5,0
  6745  0264  1383               	bcf	3,7
  6746  0265  0800               	movf	0,w
  6747  0266  00A6               	movwf	??_OUTFQ+6
  6748  0267  0A84               	incf	4,f
  6749  0268  0800               	movf	0,w
  6750  0269  00A7               	movwf	??_OUTFQ+7
  6751  026A  0826               	movf	??_OUTFQ+6,w
  6752  026B  3E0A               	addlw	10
  6753  026C  00A8               	movwf	??_OUTFQ+8
  6754  026D  0827               	movf	??_OUTFQ+7,w
  6755  026E  1803               	skipnc
  6756  026F  3E01               	addlw	1
  6757  0270  3E00               	addlw	0
  6758  0271  00A9               	movwf	??_OUTFQ+9
  6759  0272  085B               	movf	OUTFQ@j+1,w
  6760  0273  00AB               	movwf	??_OUTFQ+11
  6761  0274  085A               	movf	OUTFQ@j,w
  6762  0275  00AA               	movwf	??_OUTFQ+10
  6763  0276  1003               	clrc
  6764  0277  0DAA               	rlf	??_OUTFQ+10,f
  6765  0278  0DAB               	rlf	??_OUTFQ+11,f
  6766  0279  082A               	movf	??_OUTFQ+10,w
  6767  027A  3E02               	addlw	2
  6768  027B  00AC               	movwf	??_OUTFQ+12
  6769  027C  082B               	movf	??_OUTFQ+11,w
  6770  027D  1803               	skipnc
  6771  027E  3E01               	addlw	1
  6772  027F  3E00               	addlw	0
  6773  0280  00AD               	movwf	??_OUTFQ+13
  6774  0281  082C               	movf	??_OUTFQ+12,w
  6775  0282  077B               	addwf	OUTFQ@Nprg,w
  6776  0283  00AE               	movwf	??_OUTFQ+14
  6777  0284  082D               	movf	??_OUTFQ+13,w
  6778  0285  1803               	skipnc
  6779  0286  0A2D               	incf	??_OUTFQ+13,w
  6780  0287  077C               	addwf	OUTFQ@Nprg+1,w
  6781  0288  00AF               	movwf	??_OUTFQ+15
  6782  0289  082E               	movf	??_OUTFQ+14,w
  6783  028A  0084               	movwf	4
  6784  028B  1783               	bsf	3,7
  6785  028C  1C2F               	btfss	??_OUTFQ+15,0
  6786  028D  1383               	bcf	3,7
  6787  028E  0828               	movf	??_OUTFQ+8,w
  6788  028F  0080               	movwf	0
  6789  0290  0A84               	incf	4,f
  6790  0291  0829               	movf	??_OUTFQ+9,w
  6791  0292                     L8:	
  6792  0292  0080               	movwf	0
  6793  0293                     l3214:	
  6794  0293  3001               	movlw	1
  6795  0294  07DA               	addwf	OUTFQ@j,f
  6796  0295  1803               	skipnc
  6797  0296  0ADB               	incf	OUTFQ@j+1,f
  6798  0297  3000               	movlw	0
  6799  0298  07DB               	addwf	OUTFQ@j+1,f
  6800  0299  085B               	movf	OUTFQ@j+1,w
  6801  029A  3A80               	xorlw	128
  6802  029B  00FF               	movwf	127
  6803  029C  3080               	movlw	128
  6804  029D  027F               	subwf	127,w
  6805  029E  1D03               	skipz
  6806  029F  2AA2               	goto	u2895
  6807  02A0  3005               	movlw	5
  6808  02A1  025A               	subwf	OUTFQ@j,w
  6809  02A2                     u2895:	
  6810  02A2  1C03               	skipc
  6811  02A3  28F7               	goto	l3188
  6812  02A4                     l3218:	
  6813  02A4  3001               	movlw	1
  6814  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  6815  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  6816  02A7  07D2               	addwf	OUTFQ@i_462,f
  6817  02A8  1803               	skipnc
  6818  02A9  0AD3               	incf	OUTFQ@i_462+1,f
  6819  02AA  3000               	movlw	0
  6820  02AB  07D3               	addwf	OUTFQ@i_462+1,f
  6821  02AC  0853               	movf	OUTFQ@i_462+1,w
  6822  02AD  3A80               	xorlw	128
  6823  02AE  00FF               	movwf	127
  6824  02AF  3080               	movlw	128
  6825  02B0  027F               	subwf	127,w
  6826  02B1  1D03               	skipz
  6827  02B2  2AB5               	goto	u2905
  6828  02B3  3011               	movlw	17
  6829  02B4  0252               	subwf	OUTFQ@i_462,w
  6830  02B5                     u2905:	
  6831  02B5  1C03               	skipc
  6832  02B6  28E8               	goto	l3182
  6833  02B7                     l3222:	
  6834                           
  6835                           ;FMCW.c: 166: }
  6836                           ;FMCW.c: 167: }
  6837                           ;FMCW.c: 168: }
  6838                           ;FMCW.c: 169: }
  6839                           ;FMCW.c: 172: for (int i=0; i<17; i++)
  6840  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  6841  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  6842  02B9  01D8               	clrf	OUTFQ@i_464
  6843  02BA  01D9               	clrf	OUTFQ@i_464+1
  6844  02BB  0859               	movf	OUTFQ@i_464+1,w
  6845  02BC  3A80               	xorlw	128
  6846  02BD  00FF               	movwf	127
  6847  02BE  3080               	movlw	128
  6848  02BF  027F               	subwf	127,w
  6849  02C0  1D03               	skipz
  6850  02C1  2AC4               	goto	u2915
  6851  02C2  3011               	movlw	17
  6852  02C3  0258               	subwf	OUTFQ@i_464,w
  6853  02C4                     u2915:	
  6854  02C4  1803               	btfsc	3,0
  6855  02C5  2B0D               	goto	l3240
  6856  02C6                     l3228:	
  6857                           
  6858                           ;FMCW.c: 173: {
  6859                           ;FMCW.c: 174: if(Nprg_b[i] == 0)
  6860  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  6861  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  6862  02C8  0858               	movf	OUTFQ@i_464,w
  6863  02C9  00A0               	movwf	??_OUTFQ
  6864  02CA  0720               	addwf	??_OUTFQ,w
  6865  02CB  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6866  02CC  0084               	movwf	4
  6867  02CD  1383               	bcf	3,7	;select IRP bank0
  6868  02CE  0800               	movf	0,w
  6869  02CF  00A1               	movwf	??_OUTFQ+1
  6870  02D0  0A84               	incf	4,f
  6871  02D1  0800               	movf	0,w
  6872  02D2  00A2               	movwf	??_OUTFQ+2
  6873  02D3  0821               	movf	??_OUTFQ+1,w
  6874  02D4  0422               	iorwf	??_OUTFQ+2,w
  6875  02D5  1D03               	btfss	3,2
  6876  02D6  2AE0               	goto	l3232
  6877                           
  6878                           ;FMCW.c: 175: {
  6879                           ;FMCW.c: 176: L_OUT(fmcwtxrx);
  6880  02D7  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6881  02D8  00F3               	movwf	L_OUT@fmcwtxrx+1
  6882  02D9  0879               	movf	OUTFQ@fmcwtxrx,w
  6883  02DA  00F2               	movwf	L_OUT@fmcwtxrx
  6884  02DB  120A  158A  220E  120A  118A  	fcall	_L_OUT
  6885  02E0                     l3232:	
  6886                           
  6887                           ;FMCW.c: 177: }
  6888                           ;FMCW.c: 178: if(Nprg_b[i] == 1)
  6889  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  6890  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  6891  02E2  0858               	movf	OUTFQ@i_464,w
  6892  02E3  00A0               	movwf	??_OUTFQ
  6893  02E4  0720               	addwf	??_OUTFQ,w
  6894  02E5  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6895  02E6  0084               	movwf	4
  6896  02E7  1383               	bcf	3,7	;select IRP bank0
  6897  02E8  0800               	movf	0,w
  6898  02E9  00A1               	movwf	??_OUTFQ+1
  6899  02EA  0A84               	incf	4,f
  6900  02EB  0800               	movf	0,w
  6901  02EC  00A2               	movwf	??_OUTFQ+2
  6902  02ED  0321               	decf	??_OUTFQ+1,w
  6903  02EE  0422               	iorwf	??_OUTFQ+2,w
  6904  02EF  1D03               	btfss	3,2
  6905  02F0  2AFA               	goto	l3236
  6906                           
  6907                           ;FMCW.c: 179: {
  6908                           ;FMCW.c: 180: H_OUT(fmcwtxrx);
  6909  02F1  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6910  02F2  00F3               	movwf	H_OUT@fmcwtxrx+1
  6911  02F3  0879               	movf	OUTFQ@fmcwtxrx,w
  6912  02F4  00F2               	movwf	H_OUT@fmcwtxrx
  6913  02F5  120A  158A  21C8  120A  118A  	fcall	_H_OUT
  6914  02FA                     l3236:	
  6915  02FA  3001               	movlw	1
  6916  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  6917  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  6918  02FD  07D8               	addwf	OUTFQ@i_464,f
  6919  02FE  1803               	skipnc
  6920  02FF  0AD9               	incf	OUTFQ@i_464+1,f
  6921  0300  3000               	movlw	0
  6922  0301  07D9               	addwf	OUTFQ@i_464+1,f
  6923  0302  0859               	movf	OUTFQ@i_464+1,w
  6924  0303  3A80               	xorlw	128
  6925  0304  00FF               	movwf	127
  6926  0305  3080               	movlw	128
  6927  0306  027F               	subwf	127,w
  6928  0307  1D03               	skipz
  6929  0308  2B0B               	goto	u2945
  6930  0309  3011               	movlw	17
  6931  030A  0258               	subwf	OUTFQ@i_464,w
  6932  030B                     u2945:	
  6933  030B  1C03               	skipc
  6934  030C  2AC6               	goto	l3228
  6935  030D                     l3240:	
  6936                           
  6937                           ;FMCW.c: 181: }
  6938                           ;FMCW.c: 182: }
  6939                           ;FMCW.c: 185: H_OUT(fmcwtxrx);
  6940  030D  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6941  030E  00F3               	movwf	H_OUT@fmcwtxrx+1
  6942  030F  0879               	movf	OUTFQ@fmcwtxrx,w
  6943  0310  00F2               	movwf	H_OUT@fmcwtxrx
  6944  0311  120A  158A  21C8  120A  118A  	fcall	_H_OUT
  6945                           
  6946                           ;FMCW.c: 186: L_OUT(fmcwtxrx);
  6947  0316  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6948  0317  00F3               	movwf	L_OUT@fmcwtxrx+1
  6949  0318  0879               	movf	OUTFQ@fmcwtxrx,w
  6950  0319  00F2               	movwf	L_OUT@fmcwtxrx
  6951  031A  120A  158A  220E  120A  118A  	fcall	_L_OUT
  6952                           
  6953                           ;FMCW.c: 189: STBOUT(fmcwtxrx);
  6954  031F  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6955  0320  00F3               	movwf	STBOUT@fmcwtxrx+1
  6956  0321  0879               	movf	OUTFQ@fmcwtxrx,w
  6957  0322  00F2               	movwf	STBOUT@fmcwtxrx
  6958  0323  120A  158A  2166   	fcall	_STBOUT
  6959  0326  0008               	return
  6960  0327                     __end_of_OUTFQ:	
  6961                           
  6962                           	psect	text24
  6963  0AE7                     __ptext24:	
  6964 ;; *************** function ___awdiv *****************
  6965 ;; Defined at:
  6966 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  6967 ;; Parameters:    Size  Location     Type
  6968 ;;  divisor         2    0[COMMON] int 
  6969 ;;  dividend        2    2[COMMON] int 
  6970 ;; Auto vars:     Size  Location     Type
  6971 ;;  quotient        2    7[COMMON] int 
  6972 ;;  sign            1    6[COMMON] unsigned char 
  6973 ;;  counter         1    5[COMMON] unsigned char 
  6974 ;; Return value:  Size  Location     Type
  6975 ;;                  2    0[COMMON] int 
  6976 ;; Registers used:
  6977 ;;		wreg, status,2, status,0
  6978 ;; Tracked objects:
  6979 ;;		On entry : 0/0
  6980 ;;		On exit  : 0/0
  6981 ;;		Unchanged: 0/0
  6982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6983 ;;      Params:         4       0       0       0       0
  6984 ;;      Locals:         4       0       0       0       0
  6985 ;;      Temps:          1       0       0       0       0
  6986 ;;      Totals:         9       0       0       0       0
  6987 ;;Total ram usage:        9 bytes
  6988 ;; Hardware stack levels used:    1
  6989 ;; This function calls:
  6990 ;;		Nothing
  6991 ;; This function is called by:
  6992 ;;		_OUTFQ
  6993 ;;		_RFDOUT
  6994 ;; This function uses a non-reentrant model
  6995 ;;
  6996                           
  6997                           
  6998                           ;psect for function ___awdiv
  6999  0AE7                     ___awdiv:	
  7000                           
  7001                           ;incstack = 0
  7002                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7003  0AE7  01F6               	clrf	___awdiv@sign
  7004  0AE8  1FF1               	btfss	___awdiv@divisor+1,7
  7005  0AE9  2AF1               	goto	l2652
  7006  0AEA  09F0               	comf	___awdiv@divisor,f
  7007  0AEB  09F1               	comf	___awdiv@divisor+1,f
  7008  0AEC  0AF0               	incf	___awdiv@divisor,f
  7009  0AED  1903               	skipnz
  7010  0AEE  0AF1               	incf	___awdiv@divisor+1,f
  7011  0AEF  01F6               	clrf	___awdiv@sign
  7012  0AF0  0AF6               	incf	___awdiv@sign,f
  7013  0AF1                     l2652:	
  7014  0AF1  1FF3               	btfss	___awdiv@dividend+1,7
  7015  0AF2  2AFC               	goto	l2658
  7016  0AF3  09F2               	comf	___awdiv@dividend,f
  7017  0AF4  09F3               	comf	___awdiv@dividend+1,f
  7018  0AF5  0AF2               	incf	___awdiv@dividend,f
  7019  0AF6  1903               	skipnz
  7020  0AF7  0AF3               	incf	___awdiv@dividend+1,f
  7021  0AF8  3001               	movlw	1
  7022  0AF9  00F4               	movwf	??___awdiv
  7023  0AFA  0874               	movf	??___awdiv,w
  7024  0AFB  06F6               	xorwf	___awdiv@sign,f
  7025  0AFC                     l2658:	
  7026  0AFC  01F7               	clrf	___awdiv@quotient
  7027  0AFD  01F8               	clrf	___awdiv@quotient+1
  7028  0AFE  0870               	movf	___awdiv@divisor,w
  7029  0AFF  0471               	iorwf	___awdiv@divisor+1,w
  7030  0B00  1903               	btfsc	3,2
  7031  0B01  2B33               	goto	l2680
  7032  0B02  01F5               	clrf	___awdiv@counter
  7033  0B03  0AF5               	incf	___awdiv@counter,f
  7034  0B04                     l2668:	
  7035  0B04  1BF1               	btfsc	___awdiv@divisor+1,7
  7036  0B05  2B12               	goto	l2670
  7037  0B06  3001               	movlw	1
  7038  0B07                     u2065:	
  7039  0B07  1003               	clrc
  7040  0B08  0DF0               	rlf	___awdiv@divisor,f
  7041  0B09  0DF1               	rlf	___awdiv@divisor+1,f
  7042  0B0A  3EFF               	addlw	-1
  7043  0B0B  1D03               	skipz
  7044  0B0C  2B07               	goto	u2065
  7045  0B0D  3001               	movlw	1
  7046  0B0E  00F4               	movwf	??___awdiv
  7047  0B0F  0874               	movf	??___awdiv,w
  7048  0B10  07F5               	addwf	___awdiv@counter,f
  7049  0B11  2B04               	goto	l2668
  7050  0B12                     l2670:	
  7051  0B12  3001               	movlw	1
  7052  0B13                     u2085:	
  7053  0B13  1003               	clrc
  7054  0B14  0DF7               	rlf	___awdiv@quotient,f
  7055  0B15  0DF8               	rlf	___awdiv@quotient+1,f
  7056  0B16  3EFF               	addlw	-1
  7057  0B17  1D03               	skipz
  7058  0B18  2B13               	goto	u2085
  7059  0B19  0871               	movf	___awdiv@divisor+1,w
  7060  0B1A  0273               	subwf	___awdiv@dividend+1,w
  7061  0B1B  1D03               	skipz
  7062  0B1C  2B1F               	goto	u2095
  7063  0B1D  0870               	movf	___awdiv@divisor,w
  7064  0B1E  0272               	subwf	___awdiv@dividend,w
  7065  0B1F                     u2095:	
  7066  0B1F  1C03               	skipc
  7067  0B20  2B28               	goto	l2676
  7068  0B21  0870               	movf	___awdiv@divisor,w
  7069  0B22  02F2               	subwf	___awdiv@dividend,f
  7070  0B23  0871               	movf	___awdiv@divisor+1,w
  7071  0B24  1C03               	skipc
  7072  0B25  03F3               	decf	___awdiv@dividend+1,f
  7073  0B26  02F3               	subwf	___awdiv@dividend+1,f
  7074  0B27  1477               	bsf	___awdiv@quotient,0
  7075  0B28                     l2676:	
  7076  0B28  3001               	movlw	1
  7077  0B29                     u2105:	
  7078  0B29  1003               	clrc
  7079  0B2A  0CF1               	rrf	___awdiv@divisor+1,f
  7080  0B2B  0CF0               	rrf	___awdiv@divisor,f
  7081  0B2C  3EFF               	addlw	-1
  7082  0B2D  1D03               	skipz
  7083  0B2E  2B29               	goto	u2105
  7084  0B2F  3001               	movlw	1
  7085  0B30  02F5               	subwf	___awdiv@counter,f
  7086  0B31  1D03               	btfss	3,2
  7087  0B32  2B12               	goto	l2670
  7088  0B33                     l2680:	
  7089  0B33  0876               	movf	___awdiv@sign,w
  7090  0B34  1903               	btfsc	3,2
  7091  0B35  2B3B               	goto	l2684
  7092  0B36  09F7               	comf	___awdiv@quotient,f
  7093  0B37  09F8               	comf	___awdiv@quotient+1,f
  7094  0B38  0AF7               	incf	___awdiv@quotient,f
  7095  0B39  1903               	skipnz
  7096  0B3A  0AF8               	incf	___awdiv@quotient+1,f
  7097  0B3B                     l2684:	
  7098  0B3B  0878               	movf	___awdiv@quotient+1,w
  7099  0B3C  00F1               	movwf	?___awdiv+1
  7100  0B3D  0877               	movf	___awdiv@quotient,w
  7101  0B3E  00F0               	movwf	?___awdiv
  7102  0B3F  0008               	return
  7103  0B40                     __end_of___awdiv:	
  7104                           
  7105                           	psect	text25
  7106  0CC1                     __ptext25:	
  7107 ;; *************** function _OPINIT *****************
  7108 ;; Defined at:
  7109 ;;		line 241 in file "FMCW.c"
  7110 ;; Parameters:    Size  Location     Type
  7111 ;;  fmcwtxrx        2    4[COMMON] int 
  7112 ;; Auto vars:     Size  Location     Type
  7113 ;;		None
  7114 ;; Return value:  Size  Location     Type
  7115 ;;                  1    wreg      void 
  7116 ;; Registers used:
  7117 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7118 ;; Tracked objects:
  7119 ;;		On entry : 0/0
  7120 ;;		On exit  : 0/0
  7121 ;;		Unchanged: 0/0
  7122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7123 ;;      Params:         2       0       0       0       0
  7124 ;;      Locals:         0       0       0       0       0
  7125 ;;      Temps:          0       0       0       0       0
  7126 ;;      Totals:         2       0       0       0       0
  7127 ;;Total ram usage:        2 bytes
  7128 ;; Hardware stack levels used:    1
  7129 ;; Hardware stack levels required when called:    2
  7130 ;; This function calls:
  7131 ;;		_H_OUT
  7132 ;;		_L_OUT
  7133 ;;		_STBOUT
  7134 ;; This function is called by:
  7135 ;;		_FMTX
  7136 ;;		_CWTX
  7137 ;;		_FMRX
  7138 ;; This function uses a non-reentrant model
  7139 ;;
  7140                           
  7141                           
  7142                           ;psect for function _OPINIT
  7143  0CC1                     _OPINIT:	
  7144                           
  7145                           ;FMCW.c: 243: L_OUT(fmcwtxrx);
  7146                           
  7147                           ;incstack = 0
  7148                           ; Regs used in _OPINIT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7149  0CC1  0875               	movf	OPINIT@fmcwtxrx+1,w
  7150  0CC2  00F3               	movwf	L_OUT@fmcwtxrx+1
  7151  0CC3  0874               	movf	OPINIT@fmcwtxrx,w
  7152  0CC4  00F2               	movwf	L_OUT@fmcwtxrx
  7153  0CC5  120A  158A  220E  120A  158A  	fcall	_L_OUT
  7154                           
  7155                           ;FMCW.c: 244: L_OUT(fmcwtxrx);
  7156  0CCA  0875               	movf	OPINIT@fmcwtxrx+1,w
  7157  0CCB  00F3               	movwf	L_OUT@fmcwtxrx+1
  7158  0CCC  0874               	movf	OPINIT@fmcwtxrx,w
  7159  0CCD  00F2               	movwf	L_OUT@fmcwtxrx
  7160  0CCE  120A  158A  220E  120A  158A  	fcall	_L_OUT
  7161                           
  7162                           ;FMCW.c: 245: L_OUT(fmcwtxrx);
  7163  0CD3  0875               	movf	OPINIT@fmcwtxrx+1,w
  7164  0CD4  00F3               	movwf	L_OUT@fmcwtxrx+1
  7165  0CD5  0874               	movf	OPINIT@fmcwtxrx,w
  7166  0CD6  00F2               	movwf	L_OUT@fmcwtxrx
  7167  0CD7  120A  158A  220E  120A  158A  	fcall	_L_OUT
  7168                           
  7169                           ;FMCW.c: 246: H_OUT(fmcwtxrx);
  7170  0CDC  0875               	movf	OPINIT@fmcwtxrx+1,w
  7171  0CDD  00F3               	movwf	H_OUT@fmcwtxrx+1
  7172  0CDE  0874               	movf	OPINIT@fmcwtxrx,w
  7173  0CDF  00F2               	movwf	H_OUT@fmcwtxrx
  7174  0CE0  120A  158A  21C8  120A  158A  	fcall	_H_OUT
  7175                           
  7176                           ;FMCW.c: 247: H_OUT(fmcwtxrx);
  7177  0CE5  0875               	movf	OPINIT@fmcwtxrx+1,w
  7178  0CE6  00F3               	movwf	H_OUT@fmcwtxrx+1
  7179  0CE7  0874               	movf	OPINIT@fmcwtxrx,w
  7180  0CE8  00F2               	movwf	H_OUT@fmcwtxrx
  7181  0CE9  120A  158A  21C8  120A  158A  	fcall	_H_OUT
  7182                           
  7183                           ;FMCW.c: 248: L_OUT(fmcwtxrx);
  7184  0CEE  0875               	movf	OPINIT@fmcwtxrx+1,w
  7185  0CEF  00F3               	movwf	L_OUT@fmcwtxrx+1
  7186  0CF0  0874               	movf	OPINIT@fmcwtxrx,w
  7187  0CF1  00F2               	movwf	L_OUT@fmcwtxrx
  7188  0CF2  120A  158A  220E  120A  158A  	fcall	_L_OUT
  7189                           
  7190                           ;FMCW.c: 249: L_OUT(fmcwtxrx);
  7191  0CF7  0875               	movf	OPINIT@fmcwtxrx+1,w
  7192  0CF8  00F3               	movwf	L_OUT@fmcwtxrx+1
  7193  0CF9  0874               	movf	OPINIT@fmcwtxrx,w
  7194  0CFA  00F2               	movwf	L_OUT@fmcwtxrx
  7195  0CFB  120A  158A  220E  120A  158A  	fcall	_L_OUT
  7196                           
  7197                           ;FMCW.c: 250: L_OUT(fmcwtxrx);
  7198  0D00  0875               	movf	OPINIT@fmcwtxrx+1,w
  7199  0D01  00F3               	movwf	L_OUT@fmcwtxrx+1
  7200  0D02  0874               	movf	OPINIT@fmcwtxrx,w
  7201  0D03  00F2               	movwf	L_OUT@fmcwtxrx
  7202  0D04  120A  158A  220E  120A  158A  	fcall	_L_OUT
  7203                           
  7204                           ;FMCW.c: 251: L_OUT(fmcwtxrx);
  7205  0D09  0875               	movf	OPINIT@fmcwtxrx+1,w
  7206  0D0A  00F3               	movwf	L_OUT@fmcwtxrx+1
  7207  0D0B  0874               	movf	OPINIT@fmcwtxrx,w
  7208  0D0C  00F2               	movwf	L_OUT@fmcwtxrx
  7209  0D0D  120A  158A  220E  120A  158A  	fcall	_L_OUT
  7210                           
  7211                           ;FMCW.c: 252: L_OUT(fmcwtxrx);
  7212  0D12  0875               	movf	OPINIT@fmcwtxrx+1,w
  7213  0D13  00F3               	movwf	L_OUT@fmcwtxrx+1
  7214  0D14  0874               	movf	OPINIT@fmcwtxrx,w
  7215  0D15  00F2               	movwf	L_OUT@fmcwtxrx
  7216  0D16  120A  158A  220E  120A  158A  	fcall	_L_OUT
  7217                           
  7218                           ;FMCW.c: 253: H_OUT(fmcwtxrx);
  7219  0D1B  0875               	movf	OPINIT@fmcwtxrx+1,w
  7220  0D1C  00F3               	movwf	H_OUT@fmcwtxrx+1
  7221  0D1D  0874               	movf	OPINIT@fmcwtxrx,w
  7222  0D1E  00F2               	movwf	H_OUT@fmcwtxrx
  7223  0D1F  120A  158A  21C8  120A  158A  	fcall	_H_OUT
  7224                           
  7225                           ;FMCW.c: 256: L_OUT(fmcwtxrx);
  7226  0D24  0875               	movf	OPINIT@fmcwtxrx+1,w
  7227  0D25  00F3               	movwf	L_OUT@fmcwtxrx+1
  7228  0D26  0874               	movf	OPINIT@fmcwtxrx,w
  7229  0D27  00F2               	movwf	L_OUT@fmcwtxrx
  7230  0D28  120A  158A  220E  120A  158A  	fcall	_L_OUT
  7231                           
  7232                           ;FMCW.c: 257: L_OUT(fmcwtxrx);
  7233  0D2D  0875               	movf	OPINIT@fmcwtxrx+1,w
  7234  0D2E  00F3               	movwf	L_OUT@fmcwtxrx+1
  7235  0D2F  0874               	movf	OPINIT@fmcwtxrx,w
  7236  0D30  00F2               	movwf	L_OUT@fmcwtxrx
  7237  0D31  120A  158A  220E  120A  158A  	fcall	_L_OUT
  7238                           
  7239                           ;FMCW.c: 260: STBOUT(fmcwtxrx);
  7240  0D36  0875               	movf	OPINIT@fmcwtxrx+1,w
  7241  0D37  00F3               	movwf	STBOUT@fmcwtxrx+1
  7242  0D38  0874               	movf	OPINIT@fmcwtxrx,w
  7243  0D39  00F2               	movwf	STBOUT@fmcwtxrx
  7244  0D3A  120A  158A  2166   	fcall	_STBOUT
  7245  0D3D  0008               	return
  7246  0D3E                     __end_of_OPINIT:	
  7247                           
  7248                           	psect	text26
  7249  0966                     __ptext26:	
  7250 ;; *************** function _STBOUT *****************
  7251 ;; Defined at:
  7252 ;;		line 107 in file "FMCW.c"
  7253 ;; Parameters:    Size  Location     Type
  7254 ;;  fmcwtxrx        2    2[COMMON] int 
  7255 ;; Auto vars:     Size  Location     Type
  7256 ;;		None
  7257 ;; Return value:  Size  Location     Type
  7258 ;;                  1    wreg      void 
  7259 ;; Registers used:
  7260 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7261 ;; Tracked objects:
  7262 ;;		On entry : 0/0
  7263 ;;		On exit  : 0/0
  7264 ;;		Unchanged: 0/0
  7265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7266 ;;      Params:         2       0       0       0       0
  7267 ;;      Locals:         0       0       0       0       0
  7268 ;;      Temps:          0       0       0       0       0
  7269 ;;      Totals:         2       0       0       0       0
  7270 ;;Total ram usage:        2 bytes
  7271 ;; Hardware stack levels used:    1
  7272 ;; Hardware stack levels required when called:    1
  7273 ;; This function calls:
  7274 ;;		__NOP
  7275 ;; This function is called by:
  7276 ;;		_OUTFQ
  7277 ;;		_RFDOUT
  7278 ;;		_OPINIT
  7279 ;; This function uses a non-reentrant model
  7280 ;;
  7281                           
  7282                           
  7283                           ;psect for function _STBOUT
  7284  0966                     _STBOUT:	
  7285                           
  7286                           ;FMCW.c: 108: if(fmcwtxrx == 1)
  7287                           
  7288                           ;incstack = 0
  7289                           ; Regs used in _STBOUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7290  0966  0372               	decf	STBOUT@fmcwtxrx,w
  7291  0967  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7292  0968  1D03               	btfss	3,2
  7293  0969  2975               	goto	l2628
  7294                           
  7295                           ;FMCW.c: 109: {
  7296                           ;FMCW.c: 110: PORTAbits.RA5 = 1;
  7297  096A  1283               	bcf	3,5	;RP0=0, select bank0
  7298  096B  1303               	bcf	3,6	;RP1=0, select bank0
  7299  096C  1685               	bsf	5,5	;volatile
  7300                           
  7301                           ;FMCW.c: 111: _NOP();
  7302  096D  120A  158A  203C  120A  158A  	fcall	__NOP
  7303                           
  7304                           ;FMCW.c: 112: PORTAbits.RA5 = 0;
  7305  0972  1283               	bcf	3,5	;RP0=0, select bank0
  7306  0973  1303               	bcf	3,6	;RP1=0, select bank0
  7307  0974  1285               	bcf	5,5	;volatile
  7308  0975                     l2628:	
  7309                           
  7310                           ;FMCW.c: 113: }
  7311                           ;FMCW.c: 114: if(fmcwtxrx == 2)
  7312  0975  3002               	movlw	2
  7313  0976  0672               	xorwf	STBOUT@fmcwtxrx,w
  7314  0977  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7315  0978  1D03               	btfss	3,2
  7316  0979  2985               	goto	l2636
  7317                           
  7318                           ;FMCW.c: 115: {
  7319                           ;FMCW.c: 116: PORTDbits.RD0 = 1;
  7320  097A  1283               	bcf	3,5	;RP0=0, select bank0
  7321  097B  1303               	bcf	3,6	;RP1=0, select bank0
  7322  097C  1408               	bsf	8,0	;volatile
  7323                           
  7324                           ;FMCW.c: 117: _NOP();
  7325  097D  120A  158A  203C  120A  158A  	fcall	__NOP
  7326                           
  7327                           ;FMCW.c: 118: PORTDbits.RD0 = 0;
  7328  0982  1283               	bcf	3,5	;RP0=0, select bank0
  7329  0983  1303               	bcf	3,6	;RP1=0, select bank0
  7330  0984  1008               	bcf	8,0	;volatile
  7331  0985                     l2636:	
  7332                           
  7333                           ;FMCW.c: 119: }
  7334                           ;FMCW.c: 120: if(fmcwtxrx == 3)
  7335  0985  3003               	movlw	3
  7336  0986  0672               	xorwf	STBOUT@fmcwtxrx,w
  7337  0987  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7338  0988  1D03               	btfss	3,2
  7339  0989  0008               	return
  7340                           
  7341                           ;FMCW.c: 121: {
  7342                           ;FMCW.c: 122: PORTAbits.RA4 = 1;
  7343  098A  1283               	bcf	3,5	;RP0=0, select bank0
  7344  098B  1303               	bcf	3,6	;RP1=0, select bank0
  7345  098C  1605               	bsf	5,4	;volatile
  7346                           
  7347                           ;FMCW.c: 123: _NOP();
  7348  098D  120A  158A  203C   	fcall	__NOP
  7349                           
  7350                           ;FMCW.c: 124: PORTAbits.RA4 = 0;
  7351  0990  1283               	bcf	3,5	;RP0=0, select bank0
  7352  0991  1303               	bcf	3,6	;RP1=0, select bank0
  7353  0992  1205               	bcf	5,4	;volatile
  7354  0993  0008               	return
  7355  0994                     __end_of_STBOUT:	
  7356                           
  7357                           	psect	text27
  7358  0A0E                     __ptext27:	
  7359 ;; *************** function _L_OUT *****************
  7360 ;; Defined at:
  7361 ;;		line 40 in file "FMCW.c"
  7362 ;; Parameters:    Size  Location     Type
  7363 ;;  fmcwtxrx        2    2[COMMON] int 
  7364 ;; Auto vars:     Size  Location     Type
  7365 ;;		None
  7366 ;; Return value:  Size  Location     Type
  7367 ;;                  1    wreg      void 
  7368 ;; Registers used:
  7369 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7370 ;; Tracked objects:
  7371 ;;		On entry : 0/0
  7372 ;;		On exit  : 0/0
  7373 ;;		Unchanged: 0/0
  7374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7375 ;;      Params:         2       0       0       0       0
  7376 ;;      Locals:         0       0       0       0       0
  7377 ;;      Temps:          0       0       0       0       0
  7378 ;;      Totals:         2       0       0       0       0
  7379 ;;Total ram usage:        2 bytes
  7380 ;; Hardware stack levels used:    1
  7381 ;; Hardware stack levels required when called:    1
  7382 ;; This function calls:
  7383 ;;		__NOP
  7384 ;; This function is called by:
  7385 ;;		_OUTFQ
  7386 ;;		_RFDOUT
  7387 ;;		_OPINIT
  7388 ;; This function uses a non-reentrant model
  7389 ;;
  7390                           
  7391                           
  7392                           ;psect for function _L_OUT
  7393  0A0E                     _L_OUT:	
  7394                           
  7395                           ;FMCW.c: 41: if(fmcwtxrx == 1)
  7396                           
  7397                           ;incstack = 0
  7398                           ; Regs used in _L_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7399  0A0E  0372               	decf	L_OUT@fmcwtxrx,w
  7400  0A0F  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7401  0A10  1D03               	btfss	3,2
  7402  0A11  2A25               	goto	l2570
  7403                           
  7404                           ;FMCW.c: 42: {
  7405                           ;FMCW.c: 43: PORTEbits.RE0 = 0;
  7406  0A12  1283               	bcf	3,5	;RP0=0, select bank0
  7407  0A13  1303               	bcf	3,6	;RP1=0, select bank0
  7408  0A14  1009               	bcf	9,0	;volatile
  7409                           
  7410                           ;FMCW.c: 44: _NOP();
  7411  0A15  120A  158A  203C  120A  158A  	fcall	__NOP
  7412                           
  7413                           ;FMCW.c: 45: PORTEbits.RE1 = 1;
  7414  0A1A  1283               	bcf	3,5	;RP0=0, select bank0
  7415  0A1B  1303               	bcf	3,6	;RP1=0, select bank0
  7416  0A1C  1489               	bsf	9,1	;volatile
  7417                           
  7418                           ;FMCW.c: 46: _NOP();
  7419  0A1D  120A  158A  203C  120A  158A  	fcall	__NOP
  7420                           
  7421                           ;FMCW.c: 47: PORTEbits.RE1 = 0;
  7422  0A22  1283               	bcf	3,5	;RP0=0, select bank0
  7423  0A23  1303               	bcf	3,6	;RP1=0, select bank0
  7424  0A24  1089               	bcf	9,1	;volatile
  7425  0A25                     l2570:	
  7426                           
  7427                           ;FMCW.c: 48: }
  7428                           ;FMCW.c: 49: if(fmcwtxrx == 2)
  7429  0A25  3002               	movlw	2
  7430  0A26  0672               	xorwf	L_OUT@fmcwtxrx,w
  7431  0A27  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7432  0A28  1D03               	btfss	3,2
  7433  0A29  2A3D               	goto	l2580
  7434                           
  7435                           ;FMCW.c: 50: {
  7436                           ;FMCW.c: 51: PORTDbits.RD1 = 0;
  7437  0A2A  1283               	bcf	3,5	;RP0=0, select bank0
  7438  0A2B  1303               	bcf	3,6	;RP1=0, select bank0
  7439  0A2C  1088               	bcf	8,1	;volatile
  7440                           
  7441                           ;FMCW.c: 52: _NOP();
  7442  0A2D  120A  158A  203C  120A  158A  	fcall	__NOP
  7443                           
  7444                           ;FMCW.c: 53: PORTDbits.RD2 = 1;
  7445  0A32  1283               	bcf	3,5	;RP0=0, select bank0
  7446  0A33  1303               	bcf	3,6	;RP1=0, select bank0
  7447  0A34  1508               	bsf	8,2	;volatile
  7448                           
  7449                           ;FMCW.c: 54: _NOP();
  7450  0A35  120A  158A  203C  120A  158A  	fcall	__NOP
  7451                           
  7452                           ;FMCW.c: 55: PORTDbits.RD2 = 0;
  7453  0A3A  1283               	bcf	3,5	;RP0=0, select bank0
  7454  0A3B  1303               	bcf	3,6	;RP1=0, select bank0
  7455  0A3C  1108               	bcf	8,2	;volatile
  7456  0A3D                     l2580:	
  7457                           
  7458                           ;FMCW.c: 56: }
  7459                           ;FMCW.c: 57: if(fmcwtxrx == 3)
  7460  0A3D  3003               	movlw	3
  7461  0A3E  0672               	xorwf	L_OUT@fmcwtxrx,w
  7462  0A3F  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7463  0A40  1D03               	btfss	3,2
  7464  0A41  0008               	return
  7465                           
  7466                           ;FMCW.c: 58: {
  7467                           ;FMCW.c: 59: PORTAbits.RA3 = 0;
  7468  0A42  1283               	bcf	3,5	;RP0=0, select bank0
  7469  0A43  1303               	bcf	3,6	;RP1=0, select bank0
  7470  0A44  1185               	bcf	5,3	;volatile
  7471                           
  7472                           ;FMCW.c: 60: _NOP();
  7473  0A45  120A  158A  203C  120A  158A  	fcall	__NOP
  7474                           
  7475                           ;FMCW.c: 61: PORTAbits.RA2 = 1;
  7476  0A4A  1283               	bcf	3,5	;RP0=0, select bank0
  7477  0A4B  1303               	bcf	3,6	;RP1=0, select bank0
  7478  0A4C  1505               	bsf	5,2	;volatile
  7479                           
  7480                           ;FMCW.c: 62: _NOP();
  7481  0A4D  120A  158A  203C   	fcall	__NOP
  7482                           
  7483                           ;FMCW.c: 63: PORTAbits.RA2 = 0;
  7484  0A50  1283               	bcf	3,5	;RP0=0, select bank0
  7485  0A51  1303               	bcf	3,6	;RP1=0, select bank0
  7486  0A52  1105               	bcf	5,2	;volatile
  7487  0A53  0008               	return
  7488  0A54                     __end_of_L_OUT:	
  7489                           
  7490                           	psect	text28
  7491  09C8                     __ptext28:	
  7492 ;; *************** function _H_OUT *****************
  7493 ;; Defined at:
  7494 ;;		line 74 in file "FMCW.c"
  7495 ;; Parameters:    Size  Location     Type
  7496 ;;  fmcwtxrx        2    2[COMMON] int 
  7497 ;; Auto vars:     Size  Location     Type
  7498 ;;		None
  7499 ;; Return value:  Size  Location     Type
  7500 ;;                  1    wreg      void 
  7501 ;; Registers used:
  7502 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7503 ;; Tracked objects:
  7504 ;;		On entry : 0/0
  7505 ;;		On exit  : 0/0
  7506 ;;		Unchanged: 0/0
  7507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7508 ;;      Params:         2       0       0       0       0
  7509 ;;      Locals:         0       0       0       0       0
  7510 ;;      Temps:          0       0       0       0       0
  7511 ;;      Totals:         2       0       0       0       0
  7512 ;;Total ram usage:        2 bytes
  7513 ;; Hardware stack levels used:    1
  7514 ;; Hardware stack levels required when called:    1
  7515 ;; This function calls:
  7516 ;;		__NOP
  7517 ;; This function is called by:
  7518 ;;		_OUTFQ
  7519 ;;		_RFDOUT
  7520 ;;		_OPINIT
  7521 ;; This function uses a non-reentrant model
  7522 ;;
  7523                           
  7524                           
  7525                           ;psect for function _H_OUT
  7526  09C8                     _H_OUT:	
  7527                           
  7528                           ;FMCW.c: 75: if(fmcwtxrx == 1)
  7529                           
  7530                           ;incstack = 0
  7531                           ; Regs used in _H_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7532  09C8  0372               	decf	H_OUT@fmcwtxrx,w
  7533  09C9  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7534  09CA  1D03               	btfss	3,2
  7535  09CB  29DF               	goto	l2600
  7536                           
  7537                           ;FMCW.c: 76: {
  7538                           ;FMCW.c: 77: PORTEbits.RE0 = 1;
  7539  09CC  1283               	bcf	3,5	;RP0=0, select bank0
  7540  09CD  1303               	bcf	3,6	;RP1=0, select bank0
  7541  09CE  1409               	bsf	9,0	;volatile
  7542                           
  7543                           ;FMCW.c: 78: _NOP();
  7544  09CF  120A  158A  203C  120A  158A  	fcall	__NOP
  7545                           
  7546                           ;FMCW.c: 79: PORTEbits.RE1 = 1;
  7547  09D4  1283               	bcf	3,5	;RP0=0, select bank0
  7548  09D5  1303               	bcf	3,6	;RP1=0, select bank0
  7549  09D6  1489               	bsf	9,1	;volatile
  7550                           
  7551                           ;FMCW.c: 80: _NOP();
  7552  09D7  120A  158A  203C  120A  158A  	fcall	__NOP
  7553                           
  7554                           ;FMCW.c: 81: PORTEbits.RE1 = 0;
  7555  09DC  1283               	bcf	3,5	;RP0=0, select bank0
  7556  09DD  1303               	bcf	3,6	;RP1=0, select bank0
  7557  09DE  1089               	bcf	9,1	;volatile
  7558  09DF                     l2600:	
  7559                           
  7560                           ;FMCW.c: 82: }
  7561                           ;FMCW.c: 83: if(fmcwtxrx == 2)
  7562  09DF  3002               	movlw	2
  7563  09E0  0672               	xorwf	H_OUT@fmcwtxrx,w
  7564  09E1  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7565  09E2  1D03               	btfss	3,2
  7566  09E3  29F7               	goto	l2610
  7567                           
  7568                           ;FMCW.c: 84: {
  7569                           ;FMCW.c: 85: PORTDbits.RD1 = 1;
  7570  09E4  1283               	bcf	3,5	;RP0=0, select bank0
  7571  09E5  1303               	bcf	3,6	;RP1=0, select bank0
  7572  09E6  1488               	bsf	8,1	;volatile
  7573                           
  7574                           ;FMCW.c: 86: _NOP();
  7575  09E7  120A  158A  203C  120A  158A  	fcall	__NOP
  7576                           
  7577                           ;FMCW.c: 87: PORTDbits.RD2 = 1;
  7578  09EC  1283               	bcf	3,5	;RP0=0, select bank0
  7579  09ED  1303               	bcf	3,6	;RP1=0, select bank0
  7580  09EE  1508               	bsf	8,2	;volatile
  7581                           
  7582                           ;FMCW.c: 88: _NOP();
  7583  09EF  120A  158A  203C  120A  158A  	fcall	__NOP
  7584                           
  7585                           ;FMCW.c: 89: PORTDbits.RD2 = 0;
  7586  09F4  1283               	bcf	3,5	;RP0=0, select bank0
  7587  09F5  1303               	bcf	3,6	;RP1=0, select bank0
  7588  09F6  1108               	bcf	8,2	;volatile
  7589  09F7                     l2610:	
  7590                           
  7591                           ;FMCW.c: 90: }
  7592                           ;FMCW.c: 91: if(fmcwtxrx == 3)
  7593  09F7  3003               	movlw	3
  7594  09F8  0672               	xorwf	H_OUT@fmcwtxrx,w
  7595  09F9  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7596  09FA  1D03               	btfss	3,2
  7597  09FB  0008               	return
  7598                           
  7599                           ;FMCW.c: 92: {
  7600                           ;FMCW.c: 93: PORTAbits.RA3 = 1;
  7601  09FC  1283               	bcf	3,5	;RP0=0, select bank0
  7602  09FD  1303               	bcf	3,6	;RP1=0, select bank0
  7603  09FE  1585               	bsf	5,3	;volatile
  7604                           
  7605                           ;FMCW.c: 94: _NOP();
  7606  09FF  120A  158A  203C  120A  158A  	fcall	__NOP
  7607                           
  7608                           ;FMCW.c: 95: PORTAbits.RA2 = 1;
  7609  0A04  1283               	bcf	3,5	;RP0=0, select bank0
  7610  0A05  1303               	bcf	3,6	;RP1=0, select bank0
  7611  0A06  1505               	bsf	5,2	;volatile
  7612                           
  7613                           ;FMCW.c: 96: _NOP();
  7614  0A07  120A  158A  203C   	fcall	__NOP
  7615                           
  7616                           ;FMCW.c: 97: PORTAbits.RA2 = 0;
  7617  0A0A  1283               	bcf	3,5	;RP0=0, select bank0
  7618  0A0B  1303               	bcf	3,6	;RP1=0, select bank0
  7619  0A0C  1105               	bcf	5,2	;volatile
  7620  0A0D  0008               	return
  7621  0A0E                     __end_of_H_OUT:	
  7622                           
  7623                           	psect	text29
  7624  083C                     __ptext29:	
  7625 ;; *************** function __NOP *****************
  7626 ;; Defined at:
  7627 ;;		line 349 in file "FMCW.c"
  7628 ;; Parameters:    Size  Location     Type
  7629 ;;		None
  7630 ;; Auto vars:     Size  Location     Type
  7631 ;;  i               2    0[COMMON] int 
  7632 ;; Return value:  Size  Location     Type
  7633 ;;                  1    wreg      void 
  7634 ;; Registers used:
  7635 ;;		wreg, status,2, btemp+1
  7636 ;; Tracked objects:
  7637 ;;		On entry : 0/0
  7638 ;;		On exit  : 0/0
  7639 ;;		Unchanged: 0/0
  7640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7641 ;;      Params:         0       0       0       0       0
  7642 ;;      Locals:         2       0       0       0       0
  7643 ;;      Temps:          0       0       0       0       0
  7644 ;;      Totals:         2       0       0       0       0
  7645 ;;Total ram usage:        2 bytes
  7646 ;; Hardware stack levels used:    1
  7647 ;; This function calls:
  7648 ;;		Nothing
  7649 ;; This function is called by:
  7650 ;;		_L_OUT
  7651 ;;		_H_OUT
  7652 ;;		_STBOUT
  7653 ;; This function uses a non-reentrant model
  7654 ;;
  7655                           
  7656                           
  7657                           ;psect for function __NOP
  7658  083C                     __NOP:	
  7659                           
  7660                           ;FMCW.c: 350: for(int i=0; i<5; i++){
  7661                           
  7662                           ;incstack = 0
  7663                           ; Regs used in __NOP: [wreg+status,2+btemp+1]
  7664  083C  01F0               	clrf	__NOP@i
  7665  083D  01F1               	clrf	__NOP@i+1
  7666  083E                     L9:	
  7667  083E  0871               	movf	__NOP@i+1,w
  7668  083F  3A80               	xorlw	128
  7669  0840  00FF               	movwf	127
  7670  0841  3080               	movlw	128
  7671  0842  027F               	subwf	127,w
  7672  0843  1D03               	skipz
  7673  0844  2847               	goto	u1875
  7674  0845  3005               	movlw	5
  7675  0846  0270               	subwf	__NOP@i,w
  7676  0847                     u1875:	
  7677  0847  1803               	btfsc	3,0
  7678  0848  0008               	return
  7679                           
  7680                           ;FMCW.c: 351: __nop();
  7681  0849  0000               	nop
  7682  084A  3001               	movlw	1
  7683  084B  07F0               	addwf	__NOP@i,f
  7684  084C  1803               	skipnc
  7685  084D  0AF1               	incf	__NOP@i+1,f
  7686  084E  3000               	movlw	0
  7687  084F  07F1               	addwf	__NOP@i+1,f
  7688  0850  283E               	goto	L9
  7689  0851                     __end_of__NOP:	
  7690  007E                     btemp	set	126	;btemp
  7691  007E                     wtemp	set	126
  7692  007E                     wtemp0	set	126
  7693  0080                     wtemp1	set	128
  7694  0082                     wtemp2	set	130
  7695  0084                     wtemp3	set	132
  7696  0086                     wtemp4	set	134
  7697  0088                     wtemp5	set	136
  7698  007F                     wtemp6	set	127
  7699  007E                     ttemp	set	126
  7700  007E                     ttemp0	set	126
  7701  0081                     ttemp1	set	129
  7702  0084                     ttemp2	set	132
  7703  0087                     ttemp3	set	135
  7704  007F                     ttemp4	set	127
  7705  007E                     ltemp	set	126
  7706  007E                     ltemp0	set	126
  7707  0082                     ltemp1	set	130
  7708  0086                     ltemp2	set	134
  7709  0080                     ltemp3	set	128


Data Sizes:
    Strings     25
    Constant    2
    Data        91
    BSS         137
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      80
    BANK1            80     34      73
    BANK3            96      0      90
    BANK2            96      0      89

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_16(CODE[3]), STR_15(CODE[8]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 

    FMRX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), FMRX_Nprg(BANK3[10]), 

    CWTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@CWTX_Nprg(BANK1[10]), CWTX_Nprg(BANK1[10]), 

    FMTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    OUTFQ@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), main@CWTX_Nprg(BANK1[10]), main@FMTX_Nprg(BANK1[10]), 
		 -> FMRX_Nprg(BANK3[10]), CWTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    sp__EEPROM_Read	PTR unsigned char  size(1) Largest target is 32
		 -> EEPROMData(BANK2[32]), 

    EEPROM_Write@data	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 

    main@dData	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 

    sp__ReceivePacket_data	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 


Critical Paths under _main in COMMON

    _printf->_putch
    _ReceivePacket_data->_fcscheck
    _ReceivePacket_data->_waitFlag
    _waitFlag->_getbit
    _getdata->_getbit
    _NM_waddress->_putch
    _Init_I2C_M->___lldiv
    _FMTX->_OUTFQ
    _FMTX->_RFDOUT
    _FMRX->_OUTFQ
    _FMRX->_RFDOUT
    _EEPROM_Write->_I2C_Master_Write
    _CWTX->_OUTFQ
    _CWTX->_RFDOUT
    _RFDOUT->___awdiv
    _OUTFQ->___awdiv
    _OPINIT->_H_OUT
    _OPINIT->_L_OUT
    _OPINIT->_STBOUT
    _STBOUT->__NOP
    _L_OUT->__NOP
    _H_OUT->__NOP

Critical Paths under _main in BANK0

    _main->_CWTX
    _main->_FMRX
    _main->_FMTX
    _ReceivePacket_data->_waitFlag
    _FMTX->_OUTFQ
    _FMRX->_OUTFQ
    _CWTX->_OUTFQ

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                38    38      0   33355
                                             66 BANK0      4     4      0
                                              0 BANK1     34    34      0
                               _CWTX
                       _EEPROM_Write
                               _FMRX
                               _FMTX
                         _Init_I2C_M
                           _Init_MPU
                        _Init_SERIAL
                        _NM_waddress
                 _ReceivePacket_data
                          _Reset_EPS
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     214
                                              1 COMMON     7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _Reset_EPS                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ReceivePacket_data                                   6     6      0    2691
                                             10 COMMON     2     2      0
                                             29 BANK0      4     4      0
                           _fcscheck
                            _getdata
                           _waitFlag
 ---------------------------------------------------------------------------------
 (2) _waitFlag                                            33    33      0    2205
                                              6 COMMON     4     4      0
                                              0 BANK0     29    29      0
                             _getbit
 ---------------------------------------------------------------------------------
 (2) _getdata                                             10    10      0     212
                                              6 COMMON     2     2      0
                                              0 BANK0      7     7      0
                             _getbit
 ---------------------------------------------------------------------------------
 (3) _getbit                                               6     4      2      46
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _fcscheck                                            10     8      2     161
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (1) _NM_waddress                                          3     1      2     194
                                              1 COMMON     3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_SERIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_MPU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_I2C_M                                           8     4      4     343
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _FMTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _FMRX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         8     5      3     739
                                              2 COMMON     8     5      3
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     446
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CWTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (2) _RFDOUT                                              37    33      4    3231
                                              9 COMMON     4     0      4
                                              0 BANK0     33    33      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _OUTFQ                                               64    60      4    3853
                                              9 COMMON     4     0      4
                                              0 BANK0     60    60      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _OPINIT                                               2     0      2    2075
                                              4 COMMON     2     0      2
                              _H_OUT
                              _L_OUT
                             _STBOUT
 ---------------------------------------------------------------------------------
 (3) _STBOUT                                               2     0      2     271
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _L_OUT                                                2     0      2     801
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _H_OUT                                                2     0      2     536
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (4) __NOP                                                 2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CWTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _EEPROM_Write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _FMRX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _FMTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _Init_I2C_M
     ___lldiv
   _Init_MPU
   _Init_SERIAL
   _NM_waddress
     _putch
   _ReceivePacket_data
     _fcscheck
     _getdata
       _getbit
     _waitFlag
       _getbit
   _Reset_EPS
   _printf
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      5A       9       93.8%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      59      11       92.7%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     22      49       7       91.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     46      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     15A      12        0.0%
ABS                  0      0     15A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Jan 18 10:35:28 2018

                           pc 0002                   __CFG_CP$OFF 0000                            l65 17E0  
                ___awdiv@sign 0076                            fsr 0004                           l207 0566  
                         l272 0091                           l490 0821                           l652 0A9A  
                         _RA1 0029                           _RB2 0032                           _RC2 003A  
                         _RB4 0034                           _RB5 0035                           _PEN 048A  
                __CFG_CPD$OFF 0000                           _SEN 0488                           _RX9 00C6  
                         _TX9 04C6                           fsr0 0004                           indf 0000  
                __CFG_FOSC$HS 0000                  __CFG_LVP$OFF 0000                          l3000 06D8  
                        l3012 0706                          l3022 0721                          l3200 019D  
                        l3120 0059                          l3210 020C                          l3106 0C04  
                        l3026 072E                          l3132 008A                          l3052 0784  
                        l3214 0293                          l3222 02B7                          l3310 0BF2  
                        l3126 0076                          l3134 0038                          l3038 075C  
                        l3070 07B0                          l2600 09DF                          l3232 02E0  
                        l3240 030D                          l3208 0205                          l3048 0777  
                        l3072 032F                          l2610 09F7                          l3218 02A4  
                        l3170 00BD                          l3306 0BE5                          l3146 00A9  
                        l3236 02FA                          l3228 02C6                          l3260 0D78  
                        l3092 0C35                          l3182 00E8                          l3254 0D69  
                        l3510 0B8A                          l2550 0AD5                          l3086 0C24  
                        l3176 00D9                          l3248 0D4D                          l2552 0AE2  
                        l3096 0C40                          l3088 0C27                          l2570 0A25  
                        l3282 0DF2                          l3274 0DBE                          l2714 035E  
                        l2706 0336                          l2580 0A3D                          l2636 0985  
                        l2628 0975                          l2652 0AF1                          l3188 00F7  
                        l3268 0DAF                          l3508 0B70                          l2820 04BA  
                        l2804 047F                          l2724 0379                          l2708 0355  
                        l3380 0CB5                          l2670 0B12                          l3198 0160  
                        l3278 0DD8                          l3286 0E05                          l2830 04D5  
                        l2742 03B8                          l3374 0C8D                          l2680 0B33  
                        l3296 0BAD                          l2808 048C                          l2752 03D3  
                        l2728 0386                          l3480 0A74                          l3800 0F0B  
                        l2658 0AFC                          l3298 0BBD                          l2922 05D6  
                        l2834 04E2                          l3482 0A76                          l3490 0A87  
                        l2684 0B3B                          l2676 0B28                          l2668 0B04  
                        l2908 05AE                          l2860 0538                          l2756 03E0  
                        l3388 0CBB                          l3492 0A59                          l3812 0F32  
                        l2934 0604                          l2918 05C9                          l2846 0510  
                        l2782 0436                          l3486 0A80                          l2960 065A  
                        l2944 061F                          l2856 052B                          l2768 040E  
                        l3832 0FD9                          l2970 0675                          l2794 0464  
                        l2778 0429                          l2948 062C                          l2884 056F  
                        l3836 0FF0                          l2974 0682                          l2894 058A  
                        l2878 0564                          l3776 0E9F                          l2986 06B0  
                        l2898 0597                          l3794 0EF3                          l3786 0EC4  
                        l2996 06CB                          STR_1 0817                          STR_2 0817  
                        STR_3 0817                          STR_4 0817                          STR_5 0817  
                        STR_6 0817                          STR_7 0810                          STR_8 0810  
                        STR_9 0810                          _BRGH 04C2                          _CREN 00C4  
                        _FERR 00C2                          u2105 0B29                          u2205 039F  
                        u2065 0B07                          u3025 0E03                          u3115 0C8B  
                        u2085 0B13                          u3045 0BB1                          u2405 054D  
                        u2325 04A1                          u2245 03F5                          u3125 0CB3  
                        u2095 0B1F                          u3065 0BBF                          u3075 0BD4  
                        u2515 0641                          u3085 0BE6                          u2365 04F7  
                        u2285 044B                          _FMRX 090E                          u1905 0AC5  
                        u3195 09A6                          u2635 0743                          u2555 0697  
                        u2475 05EB                          _FMTX 093A                          u2815 00BB  
                        u2905 02B5                          u2825 00D7                          u3570 0F50  
                        u1875 0847                          u2915 02C4                          u2835 00E6  
                        u3707 0AC9                          u2675 0799                          u2595 06ED  
                        u3627 0E27                          u3580 0F66                          u2845 00F5  
                        u3717 0B95                          u3637 0E50                          u3590 0F7C  
                        u2775 0046                          u3647 0F1D                          u2945 030B  
                        u3657 0F3F                          u2955 0D4B                          u3667 0FD1  
                        _RCIE 0465                          _RCEN 048B                          _RCIF 0065  
                        _CWTX 08E2                          u2965 0D67                          u3677 0FF8  
                        u2895 02A2                          u2975 0D76                          u3687 0011  
                        u2985 0DAD                          u3697 0022                          u2995 0DBC  
                        _OERR 00C1                          _SPEN 00C7                          _RSEN 0489  
                        _SREN 00C5                          _TXIE 0464                          _TXEN 04C5  
                        _TXIF 0064                          _SYNC 04C4                          __NOP 083C  
                __CFG_WRT$OFF 0000                          _main 0E1F                   _NM_waddress 082A  
               ??_Init_SERIAL 0070                          btemp 007E                 __CFG_BOREN$ON 0000  
                        ltemp 007E                  getbit@oldbit 00E7                   Init_I2C_M@c 0020  
                        start 0000  ReceivePacket_data@fcschecker 003D                          ttemp 007E  
                        wtemp 007E                 __CFG_IESO$OFF 0000                 __CFG_MCLRE$ON 0000  
        __end_of_EEPROM_Write 0B9D                         ?_FMRX 005C                         ?_FMTX 005C  
                       ?_CWTX 005C              ?_I2C_Master_Wait 0070              ?_I2C_Master_Stop 0070  
                       ?__NOP 0070                         ?_main 0070                         _ACKEN 048C  
                       _ACKDT 048D               __end_of___awdiv 0B40                         STR_10 0810  
                       STR_11 0810                         STR_12 0810                         STR_15 0808  
                       STR_16 081E                 __CFG_WDTE$OFF 0000                         _ANSEL 0188  
             __end_of___lldiv 0BFB               ___awdiv@divisor 0070               ___awdiv@counter 0075  
                       _RCREG 001A                         _SPBRG 0099                         _PORTA 0005  
                       _PORTB 0006                         _PORTC 0007                         _PORTD 0008  
                       _PORTE 0009                         _H_OUT 09C8                         _OUTFQ 00AC  
                       _TRISA 0085                         _TRISB 0086                         _TRISC 0087  
                       _TRISD 0088                         _TRISE 0089                         _L_OUT 0A0E  
                       _TXREG 0019                 __CFG_PWRTE$ON 0000                __CFG_FCMEN$OFF 0000  
                       _dData 0130               __end_of_getdata 0C5C                         _eflag 0068  
               getdata@dstuff 0022                         _putch 17DF                         main@i 00BF  
                       pclath 000A                         ltemp0 007E                         ltemp1 0082  
                       ltemp2 0086                         ltemp3 0080                         ttemp0 007E  
                       ttemp1 0081                         ttemp2 0084                         ttemp3 0087  
                       ttemp4 007F                         status 0003                         wtemp0 007E  
                       wtemp1 0080                         wtemp2 0082                         wtemp3 0084  
                       wtemp4 0086                         wtemp5 0088                         wtemp6 007F  
                  _Init_I2C_M 0994              EEPROM_Write@data 0074    __end_of_ReceivePacket_data 0CC1  
                __end_of_FMRX 093A                  __end_of_FMTX 0966                  __end_of_CWTX 090E  
                __end_of__NOP 0851               __initialization 07B3                  __end_of_main 1000  
         __end_of_Init_SERIAL 086A              __end_of_Init_MPU 08BA                        ??_FMRX 007D  
                      ??_FMTX 007D                        ??_CWTX 007D                        ??__NOP 0070  
                      ??_main 0062                        ?_H_OUT 0072      EEPROM_Write@high_address 0072  
                      ?_OUTFQ 0079                        ?_L_OUT 0072             ?_I2C_Master_Start 0070  
           ?_I2C_Master_Write 0070                        OUTFQ@i 0056            ??_I2C_Master_Start 0070  
                      OUTFQ@j 005A            ??_I2C_Master_Write 0072              ___awdiv@dividend 0072  
                  _eDataField 0150                        ?_putch 0070                        _ANSELH 0189  
                      _RFDOUT 0D3E                        _OPINIT 0CC1                        _SSPADD 0093  
                      _STBOUT 0966                        _STATUS 0003                        _SSPCON 0014  
                      _SSPBUF 0013                        __NOP@i 0070              __end_of_fcscheck 00AC  
                   ??___awdiv 0074                        _dfcshi 006C                     ??___lldiv 0078  
                      _dfcslo 006D                        _efcshi 006E                        _efcslo 006F  
                      _getbit 0A9B            __size_of_Reset_EPS 0023                        _estuff 00E5  
            ___awdiv@quotient 0077                    _dPacketnum 0066                        _printf 0A54  
                   ??_getdata 0076                   RFDOUT@i_473 003B                   RFDOUT@i_474 003F  
            __end_of_waitFlag 07B3    EEPROM_Write@EEPROM_address 0078       __end_of__initialization 07FC  
     EEPROM_Write@low_address 0073                   ?_Init_I2C_M 0020                   _Init_SERIAL 0851  
       __size_of_EEPROM_Write 005D                 __end_of_H_OUT 0A0E                 __end_of_OUTFQ 0327  
               __end_of_L_OUT 0A54                 L_OUT@fmcwtxrx 0072                __pcstackCOMMON 0070  
                __pidataBANK1 0883                  __pidataBANK2 086A                  __pidataBANK3 08BA  
               __end_of_putch 17E7                       ??_H_OUT 0074                       ??_OUTFQ 0020  
                     ??_L_OUT 0074                       ??_putch 0070                  _EEPROM_Write 0B40  
                  __pbssBANK0 0066                    __pbssBANK1 00DC                    __pbssBANK2 0110  
                  __pbssBANK3 0190             __end_of_Reset_EPS 002A                     ?_Init_MPU 0070  
                     ?_RFDOUT 0079                       ?_OPINIT 0074                  ?_NM_waddress 0071  
                     ?_STBOUT 0072                       RFDOUT@i 003D                    __pmaintext 0E1F  
                  _ebitstatus 00E1                       ?_getbit 0070                       ?_printf 0071  
         __size_of_Init_I2C_M 0034                     OUTFQ@Nprg 007B                     ?_fcscheck 0070  
                     _SSPCON2 0091                       _SSPSTAT 0094                    __stringtab 0800  
                  ??_Init_MPU 0070               __size_of_RFDOUT 00E1               __size_of_OPINIT 007D  
             __size_of_STBOUT 002E                     ?_waitFlag 0070                       _dPacket 0190  
                     _ePacket 00DC                       ___awdiv 0AE7                       ___lldiv 0B9D  
             __size_of_getbit 004C                   waitFlag@buf 003C                       __ptext1 0A54  
                     __ptext2 0007                       __ptext3 0C5C                       __ptext4 0327  
                     __ptext5 0BFB                       __ptext6 0A9B                       __ptext7 002A  
                     __ptext8 082A                       __ptext9 17DF               __size_of_printf 0047  
                     _getdata 0BFB            _ReceivePacket_data 0C5C      __size_of_I2C_Master_Wait 0009  
    __size_of_I2C_Master_Stop 0007                    ??_fcscheck 0072           ?_ReceivePacket_data 0070  
                     getbit@i 0074                       clrloop0 17E8          end_of_initialization 07FC  
                RFDOUT@Nref_b 0023                     _FMRX_Nref 00C4                     _FMRX_Nprg 01E0  
                   _FMTX_Nref 00C6                     _FMTX_Nprg 00D2                     _CWTX_Nref 00C2  
                   _CWTX_Nprg 00C8                   OUTFQ@Nprg_b 0030     __size_of_I2C_Master_Start 0007  
   __size_of_I2C_Master_Write 0008               ___lldiv@divisor 0070               ___lldiv@counter 007D  
                  ??_waitFlag 0076          ??_ReceivePacket_data 007A                       printf@c 0077  
                     printf@f 0076                    fcscheck@bt 0074                OPINIT@fmcwtxrx 0074  
                   _PORTAbits 0005                     _PORTCbits 0007                     _PORTDbits 0008  
                   _PORTEbits 0009                    getdata@buf 0026                  ??_Init_I2C_M 0024  
                ?_Init_SERIAL 0070                __end_of_RFDOUT 0E1F                __end_of_OPINIT 0D3E  
              __end_of_STBOUT 0994          __size_of_NM_waddress 0012                __end_of_getbit 0AE7  
              __end_of_printf 0A9B           start_initialization 07B3            __end_of_Init_I2C_M 09C8  
                    ??_RFDOUT 0020                      ??_OPINIT 0076             ??_I2C_Master_Wait 0070  
           ??_I2C_Master_Stop 0070                      ??_STBOUT 0074             __size_of_Init_MPU 001D  
                   _Reset_EPS 0007             getdata@dbitstatus 0024                    init_fetch0 17EF  
                    ??_getbit 0072                   __pdataBANK1 00C2                   __pdataBANK2 0150  
                 __pdataBANK3 01C2                    RFDOUT@Nref 007B                      ??_printf 0073  
         __end_of_commandSize 0808      NM_waddress@whigh_address 0071                     ___latbits 0002  
               __pcstackBANK0 0020                 __pcstackBANK1 00A0                      FMRX@Nref 005C  
                    FMRX@Nprg 005E                      FMTX@Nref 005C                      FMTX@Nprg 005E  
                    FMRX@fmrx 0060                      FMTX@fmtx 0060                      CWTX@Nref 005C  
                    CWTX@Nprg 005E             __size_of_fcscheck 0082                 waitFlag@j_111 0024  
               waitFlag@j_120 002E                 waitFlag@j_113 0026                 waitFlag@j_130 0038  
               waitFlag@j_122 0030                 waitFlag@j_115 0028                 waitFlag@j_124 0032  
               waitFlag@j_117 002A                 waitFlag@j_126 0034                 waitFlag@j_119 002C  
               waitFlag@j_128 0036                      CWTX@cwtx 0060              _I2C_Master_Start 17C9  
                  ?_Reset_EPS 0070              _I2C_Master_Write 17D7       getdata@bufstore_counter 0020  
                    ?___awdiv 0070                      ?___lldiv 0070             __size_of_waitFlag 048C  
                   __pstrings 0800                      ?_getdata 0070                __size_of_H_OUT 0046  
              __size_of_OUTFQ 027B                __size_of_L_OUT 0046                __size_of_putch 0008  
               H_OUT@fmcwtxrx 0072                     clear_ram0 17E7                    OUTFQ@i_462 0052  
                  OUTFQ@i_464 0058                     _rcv_state 006A          __size_of_Init_SERIAL 0019  
                  OUTFQ@count 0054                   _commandSize 0806                     fcscheck@i 0075  
                   main@F2010 01D6                     main@F2006 01C2                     main@F2008 01CC  
                 __stringbase 0805                     main@dData 00C1                    printf@flag 0074  
                    _Init_MPU 089D                   ??_Reset_EPS 0070                 fcscheck@i_142 0077  
 __size_of_ReceivePacket_data 0065              __size_of___awdiv 0059              __size_of___lldiv 005E  
          __end_of__stringtab 0806                    _EEPROMData 0110              __size_of_getdata 0061  
             _I2C_Master_Wait 0821               _I2C_Master_Stop 17D0                RFDOUT@fmcwtxrx 0079  
                    _efcsflag 00E3                      _fcscheck 002A                      __ptext10 0851  
                    __ptext11 089D                      __ptext20 0821                      __ptext12 0994  
                    __ptext21 08E2                      __ptext13 0B9D                      __ptext22 0D3E  
                    __ptext14 093A                      __ptext23 00AC                      __ptext15 090E  
                    __ptext24 0AE7                      __ptext16 0B40                      __ptext25 0CC1  
                    __ptext17 17D7                      __ptext26 0966                      __ptext18 17D0  
                    __ptext27 0A0E                      __ptext19 17C9                      __ptext28 09C8  
                    __ptext29 083C             __CFG_BOR4V$BOR21V 0000                 ?_EEPROM_Write 0072  
               __size_of_FMRX 002C                 __size_of_FMTX 002C                 __size_of_CWTX 002C  
               __size_of__NOP 0015                 ??_NM_waddress 0073                     waitFlag@i 0020  
                   waitFlag@j 0022                 __size_of_main 01E1                STBOUT@fmcwtxrx 0072  
                    _waitFlag 0327      NM_waddress@NM_wad_header 0073                 OUTFQ@fmcwtxrx 0079  
    __end_of_I2C_Master_Start 17D0                     putch@byte 0070      __end_of_I2C_Master_Write 17DF  
                    init_ram0 17F3                  fcscheck@byte 0079                ??_EEPROM_Write 0075  
          waitFlag@flag_judge 003A              ___lldiv@dividend 0074                     stringcode 0800  
               main@FMRX_Nprg 00B4             main@NM_wad_header 00BE                 main@FMTX_Nprg 00A0  
         __end_of_NM_waddress 083C                      printf@ap 0075                 main@CWTX_Nprg 00AA  
     __end_of_I2C_Master_Wait 082A       __end_of_I2C_Master_Stop 17D7              ___lldiv@quotient 0079  
           I2C_Master_Write@d 0070           EEPROM_Write@Address 0079                      stringdir 0800  
                    stringtab 0800           ReceivePacket_data@i 003F       NM_waddress@wlow_address 0072  
