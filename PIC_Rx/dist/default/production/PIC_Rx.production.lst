

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Feb 24 15:47:27 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	dabs	1,0x7E,2
    52  0000                     
    53                           ; Version 1.45
    54                           ; Generated 16/11/2017 GMT
    55                           ; 
    56                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC16F887 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     	;# 
    88  0001                     	;# 
    89  0002                     	;# 
    90  0003                     	;# 
    91  0004                     	;# 
    92  0005                     	;# 
    93  0006                     	;# 
    94  0007                     	;# 
    95  0008                     	;# 
    96  0009                     	;# 
    97  000A                     	;# 
    98  000B                     	;# 
    99  000C                     	;# 
   100  000D                     	;# 
   101  000E                     	;# 
   102  000E                     	;# 
   103  000F                     	;# 
   104  0010                     	;# 
   105  0011                     	;# 
   106  0012                     	;# 
   107  0013                     	;# 
   108  0014                     	;# 
   109  0015                     	;# 
   110  0015                     	;# 
   111  0016                     	;# 
   112  0017                     	;# 
   113  0018                     	;# 
   114  0019                     	;# 
   115  001A                     	;# 
   116  001B                     	;# 
   117  001B                     	;# 
   118  001C                     	;# 
   119  001D                     	;# 
   120  001E                     	;# 
   121  001F                     	;# 
   122  0081                     	;# 
   123  0085                     	;# 
   124  0086                     	;# 
   125  0087                     	;# 
   126  0088                     	;# 
   127  0089                     	;# 
   128  008C                     	;# 
   129  008D                     	;# 
   130  008E                     	;# 
   131  008F                     	;# 
   132  0090                     	;# 
   133  0091                     	;# 
   134  0092                     	;# 
   135  0093                     	;# 
   136  0093                     	;# 
   137  0093                     	;# 
   138  0094                     	;# 
   139  0095                     	;# 
   140  0096                     	;# 
   141  0097                     	;# 
   142  0098                     	;# 
   143  0099                     	;# 
   144  009A                     	;# 
   145  009B                     	;# 
   146  009C                     	;# 
   147  009D                     	;# 
   148  009E                     	;# 
   149  009F                     	;# 
   150  0105                     	;# 
   151  0107                     	;# 
   152  0108                     	;# 
   153  0109                     	;# 
   154  010C                     	;# 
   155  010C                     	;# 
   156  010D                     	;# 
   157  010E                     	;# 
   158  010F                     	;# 
   159  0185                     	;# 
   160  0187                     	;# 
   161  0188                     	;# 
   162  0189                     	;# 
   163  018C                     	;# 
   164  018D                     	;# 
   165  0000                     	;# 
   166  0001                     	;# 
   167  0002                     	;# 
   168  0003                     	;# 
   169  0004                     	;# 
   170  0005                     	;# 
   171  0006                     	;# 
   172  0007                     	;# 
   173  0008                     	;# 
   174  0009                     	;# 
   175  000A                     	;# 
   176  000B                     	;# 
   177  000C                     	;# 
   178  000D                     	;# 
   179  000E                     	;# 
   180  000E                     	;# 
   181  000F                     	;# 
   182  0010                     	;# 
   183  0011                     	;# 
   184  0012                     	;# 
   185  0013                     	;# 
   186  0014                     	;# 
   187  0015                     	;# 
   188  0015                     	;# 
   189  0016                     	;# 
   190  0017                     	;# 
   191  0018                     	;# 
   192  0019                     	;# 
   193  001A                     	;# 
   194  001B                     	;# 
   195  001B                     	;# 
   196  001C                     	;# 
   197  001D                     	;# 
   198  001E                     	;# 
   199  001F                     	;# 
   200  0081                     	;# 
   201  0085                     	;# 
   202  0086                     	;# 
   203  0087                     	;# 
   204  0088                     	;# 
   205  0089                     	;# 
   206  008C                     	;# 
   207  008D                     	;# 
   208  008E                     	;# 
   209  008F                     	;# 
   210  0090                     	;# 
   211  0091                     	;# 
   212  0092                     	;# 
   213  0093                     	;# 
   214  0093                     	;# 
   215  0093                     	;# 
   216  0094                     	;# 
   217  0095                     	;# 
   218  0096                     	;# 
   219  0097                     	;# 
   220  0098                     	;# 
   221  0099                     	;# 
   222  009A                     	;# 
   223  009B                     	;# 
   224  009C                     	;# 
   225  009D                     	;# 
   226  009E                     	;# 
   227  009F                     	;# 
   228  0105                     	;# 
   229  0107                     	;# 
   230  0108                     	;# 
   231  0109                     	;# 
   232  010C                     	;# 
   233  010C                     	;# 
   234  010D                     	;# 
   235  010E                     	;# 
   236  010F                     	;# 
   237  0185                     	;# 
   238  0187                     	;# 
   239  0188                     	;# 
   240  0189                     	;# 
   241  018C                     	;# 
   242  018D                     	;# 
   243  0000                     	;# 
   244  0001                     	;# 
   245  0002                     	;# 
   246  0003                     	;# 
   247  0004                     	;# 
   248  0005                     	;# 
   249  0006                     	;# 
   250  0007                     	;# 
   251  0008                     	;# 
   252  0009                     	;# 
   253  000A                     	;# 
   254  000B                     	;# 
   255  000C                     	;# 
   256  000D                     	;# 
   257  000E                     	;# 
   258  000E                     	;# 
   259  000F                     	;# 
   260  0010                     	;# 
   261  0011                     	;# 
   262  0012                     	;# 
   263  0013                     	;# 
   264  0014                     	;# 
   265  0015                     	;# 
   266  0015                     	;# 
   267  0016                     	;# 
   268  0017                     	;# 
   269  0018                     	;# 
   270  0019                     	;# 
   271  001A                     	;# 
   272  001B                     	;# 
   273  001B                     	;# 
   274  001C                     	;# 
   275  001D                     	;# 
   276  001E                     	;# 
   277  001F                     	;# 
   278  0081                     	;# 
   279  0085                     	;# 
   280  0086                     	;# 
   281  0087                     	;# 
   282  0088                     	;# 
   283  0089                     	;# 
   284  008C                     	;# 
   285  008D                     	;# 
   286  008E                     	;# 
   287  008F                     	;# 
   288  0090                     	;# 
   289  0091                     	;# 
   290  0092                     	;# 
   291  0093                     	;# 
   292  0093                     	;# 
   293  0093                     	;# 
   294  0094                     	;# 
   295  0095                     	;# 
   296  0096                     	;# 
   297  0097                     	;# 
   298  0098                     	;# 
   299  0099                     	;# 
   300  009A                     	;# 
   301  009B                     	;# 
   302  009C                     	;# 
   303  009D                     	;# 
   304  009E                     	;# 
   305  009F                     	;# 
   306  0105                     	;# 
   307  0107                     	;# 
   308  0108                     	;# 
   309  0109                     	;# 
   310  010C                     	;# 
   311  010C                     	;# 
   312  010D                     	;# 
   313  010E                     	;# 
   314  010F                     	;# 
   315  0185                     	;# 
   316  0187                     	;# 
   317  0188                     	;# 
   318  0189                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  0000                     	;# 
   322  0001                     	;# 
   323  0002                     	;# 
   324  0003                     	;# 
   325  0004                     	;# 
   326  0005                     	;# 
   327  0006                     	;# 
   328  0007                     	;# 
   329  0008                     	;# 
   330  0009                     	;# 
   331  000A                     	;# 
   332  000B                     	;# 
   333  000C                     	;# 
   334  000D                     	;# 
   335  000E                     	;# 
   336  000E                     	;# 
   337  000F                     	;# 
   338  0010                     	;# 
   339  0011                     	;# 
   340  0012                     	;# 
   341  0013                     	;# 
   342  0014                     	;# 
   343  0015                     	;# 
   344  0015                     	;# 
   345  0016                     	;# 
   346  0017                     	;# 
   347  0018                     	;# 
   348  0019                     	;# 
   349  001A                     	;# 
   350  001B                     	;# 
   351  001B                     	;# 
   352  001C                     	;# 
   353  001D                     	;# 
   354  001E                     	;# 
   355  001F                     	;# 
   356  0081                     	;# 
   357  0085                     	;# 
   358  0086                     	;# 
   359  0087                     	;# 
   360  0088                     	;# 
   361  0089                     	;# 
   362  008C                     	;# 
   363  008D                     	;# 
   364  008E                     	;# 
   365  008F                     	;# 
   366  0090                     	;# 
   367  0091                     	;# 
   368  0092                     	;# 
   369  0093                     	;# 
   370  0093                     	;# 
   371  0093                     	;# 
   372  0094                     	;# 
   373  0095                     	;# 
   374  0096                     	;# 
   375  0097                     	;# 
   376  0098                     	;# 
   377  0099                     	;# 
   378  009A                     	;# 
   379  009B                     	;# 
   380  009C                     	;# 
   381  009D                     	;# 
   382  009E                     	;# 
   383  009F                     	;# 
   384  0105                     	;# 
   385  0107                     	;# 
   386  0108                     	;# 
   387  0109                     	;# 
   388  010C                     	;# 
   389  010C                     	;# 
   390  010D                     	;# 
   391  010E                     	;# 
   392  010F                     	;# 
   393  0185                     	;# 
   394  0187                     	;# 
   395  0188                     	;# 
   396  0189                     	;# 
   397  018C                     	;# 
   398  018D                     	;# 
   399  0000                     	;# 
   400  0001                     	;# 
   401  0002                     	;# 
   402  0003                     	;# 
   403  0004                     	;# 
   404  0005                     	;# 
   405  0006                     	;# 
   406  0007                     	;# 
   407  0008                     	;# 
   408  0009                     	;# 
   409  000A                     	;# 
   410  000B                     	;# 
   411  000C                     	;# 
   412  000D                     	;# 
   413  000E                     	;# 
   414  000E                     	;# 
   415  000F                     	;# 
   416  0010                     	;# 
   417  0011                     	;# 
   418  0012                     	;# 
   419  0013                     	;# 
   420  0014                     	;# 
   421  0015                     	;# 
   422  0015                     	;# 
   423  0016                     	;# 
   424  0017                     	;# 
   425  0018                     	;# 
   426  0019                     	;# 
   427  001A                     	;# 
   428  001B                     	;# 
   429  001B                     	;# 
   430  001C                     	;# 
   431  001D                     	;# 
   432  001E                     	;# 
   433  001F                     	;# 
   434  0081                     	;# 
   435  0085                     	;# 
   436  0086                     	;# 
   437  0087                     	;# 
   438  0088                     	;# 
   439  0089                     	;# 
   440  008C                     	;# 
   441  008D                     	;# 
   442  008E                     	;# 
   443  008F                     	;# 
   444  0090                     	;# 
   445  0091                     	;# 
   446  0092                     	;# 
   447  0093                     	;# 
   448  0093                     	;# 
   449  0093                     	;# 
   450  0094                     	;# 
   451  0095                     	;# 
   452  0096                     	;# 
   453  0097                     	;# 
   454  0098                     	;# 
   455  0099                     	;# 
   456  009A                     	;# 
   457  009B                     	;# 
   458  009C                     	;# 
   459  009D                     	;# 
   460  009E                     	;# 
   461  009F                     	;# 
   462  0105                     	;# 
   463  0107                     	;# 
   464  0108                     	;# 
   465  0109                     	;# 
   466  010C                     	;# 
   467  010C                     	;# 
   468  010D                     	;# 
   469  010E                     	;# 
   470  010F                     	;# 
   471  0185                     	;# 
   472  0187                     	;# 
   473  0188                     	;# 
   474  0189                     	;# 
   475  018C                     	;# 
   476  018D                     	;# 
   477  0000                     	;# 
   478  0001                     	;# 
   479  0002                     	;# 
   480  0003                     	;# 
   481  0004                     	;# 
   482  0005                     	;# 
   483  0006                     	;# 
   484  0007                     	;# 
   485  0008                     	;# 
   486  0009                     	;# 
   487  000A                     	;# 
   488  000B                     	;# 
   489  000C                     	;# 
   490  000D                     	;# 
   491  000E                     	;# 
   492  000E                     	;# 
   493  000F                     	;# 
   494  0010                     	;# 
   495  0011                     	;# 
   496  0012                     	;# 
   497  0013                     	;# 
   498  0014                     	;# 
   499  0015                     	;# 
   500  0015                     	;# 
   501  0016                     	;# 
   502  0017                     	;# 
   503  0018                     	;# 
   504  0019                     	;# 
   505  001A                     	;# 
   506  001B                     	;# 
   507  001B                     	;# 
   508  001C                     	;# 
   509  001D                     	;# 
   510  001E                     	;# 
   511  001F                     	;# 
   512  0081                     	;# 
   513  0085                     	;# 
   514  0086                     	;# 
   515  0087                     	;# 
   516  0088                     	;# 
   517  0089                     	;# 
   518  008C                     	;# 
   519  008D                     	;# 
   520  008E                     	;# 
   521  008F                     	;# 
   522  0090                     	;# 
   523  0091                     	;# 
   524  0092                     	;# 
   525  0093                     	;# 
   526  0093                     	;# 
   527  0093                     	;# 
   528  0094                     	;# 
   529  0095                     	;# 
   530  0096                     	;# 
   531  0097                     	;# 
   532  0098                     	;# 
   533  0099                     	;# 
   534  009A                     	;# 
   535  009B                     	;# 
   536  009C                     	;# 
   537  009D                     	;# 
   538  009E                     	;# 
   539  009F                     	;# 
   540  0105                     	;# 
   541  0107                     	;# 
   542  0108                     	;# 
   543  0109                     	;# 
   544  010C                     	;# 
   545  010C                     	;# 
   546  010D                     	;# 
   547  010E                     	;# 
   548  010F                     	;# 
   549  0185                     	;# 
   550  0187                     	;# 
   551  0188                     	;# 
   552  0189                     	;# 
   553  018C                     	;# 
   554  018D                     	;# 
   555  0000                     	;# 
   556  0001                     	;# 
   557  0002                     	;# 
   558  0003                     	;# 
   559  0004                     	;# 
   560  0005                     	;# 
   561  0006                     	;# 
   562  0007                     	;# 
   563  0008                     	;# 
   564  0009                     	;# 
   565  000A                     	;# 
   566  000B                     	;# 
   567  000C                     	;# 
   568  000D                     	;# 
   569  000E                     	;# 
   570  000E                     	;# 
   571  000F                     	;# 
   572  0010                     	;# 
   573  0011                     	;# 
   574  0012                     	;# 
   575  0013                     	;# 
   576  0014                     	;# 
   577  0015                     	;# 
   578  0015                     	;# 
   579  0016                     	;# 
   580  0017                     	;# 
   581  0018                     	;# 
   582  0019                     	;# 
   583  001A                     	;# 
   584  001B                     	;# 
   585  001B                     	;# 
   586  001C                     	;# 
   587  001D                     	;# 
   588  001E                     	;# 
   589  001F                     	;# 
   590  0081                     	;# 
   591  0085                     	;# 
   592  0086                     	;# 
   593  0087                     	;# 
   594  0088                     	;# 
   595  0089                     	;# 
   596  008C                     	;# 
   597  008D                     	;# 
   598  008E                     	;# 
   599  008F                     	;# 
   600  0090                     	;# 
   601  0091                     	;# 
   602  0092                     	;# 
   603  0093                     	;# 
   604  0093                     	;# 
   605  0093                     	;# 
   606  0094                     	;# 
   607  0095                     	;# 
   608  0096                     	;# 
   609  0097                     	;# 
   610  0098                     	;# 
   611  0099                     	;# 
   612  009A                     	;# 
   613  009B                     	;# 
   614  009C                     	;# 
   615  009D                     	;# 
   616  009E                     	;# 
   617  009F                     	;# 
   618  0105                     	;# 
   619  0107                     	;# 
   620  0108                     	;# 
   621  0109                     	;# 
   622  010C                     	;# 
   623  010C                     	;# 
   624  010D                     	;# 
   625  010E                     	;# 
   626  010F                     	;# 
   627  0185                     	;# 
   628  0187                     	;# 
   629  0188                     	;# 
   630  0189                     	;# 
   631  018C                     	;# 
   632  018D                     	;# 
   633  0000                     	;# 
   634  0001                     	;# 
   635  0002                     	;# 
   636  0003                     	;# 
   637  0004                     	;# 
   638  0005                     	;# 
   639  0006                     	;# 
   640  0007                     	;# 
   641  0008                     	;# 
   642  0009                     	;# 
   643  000A                     	;# 
   644  000B                     	;# 
   645  000C                     	;# 
   646  000D                     	;# 
   647  000E                     	;# 
   648  000E                     	;# 
   649  000F                     	;# 
   650  0010                     	;# 
   651  0011                     	;# 
   652  0012                     	;# 
   653  0013                     	;# 
   654  0014                     	;# 
   655  0015                     	;# 
   656  0015                     	;# 
   657  0016                     	;# 
   658  0017                     	;# 
   659  0018                     	;# 
   660  0019                     	;# 
   661  001A                     	;# 
   662  001B                     	;# 
   663  001B                     	;# 
   664  001C                     	;# 
   665  001D                     	;# 
   666  001E                     	;# 
   667  001F                     	;# 
   668  0081                     	;# 
   669  0085                     	;# 
   670  0086                     	;# 
   671  0087                     	;# 
   672  0088                     	;# 
   673  0089                     	;# 
   674  008C                     	;# 
   675  008D                     	;# 
   676  008E                     	;# 
   677  008F                     	;# 
   678  0090                     	;# 
   679  0091                     	;# 
   680  0092                     	;# 
   681  0093                     	;# 
   682  0093                     	;# 
   683  0093                     	;# 
   684  0094                     	;# 
   685  0095                     	;# 
   686  0096                     	;# 
   687  0097                     	;# 
   688  0098                     	;# 
   689  0099                     	;# 
   690  009A                     	;# 
   691  009B                     	;# 
   692  009C                     	;# 
   693  009D                     	;# 
   694  009E                     	;# 
   695  009F                     	;# 
   696  0105                     	;# 
   697  0107                     	;# 
   698  0108                     	;# 
   699  0109                     	;# 
   700  010C                     	;# 
   701  010C                     	;# 
   702  010D                     	;# 
   703  010E                     	;# 
   704  010F                     	;# 
   705  0185                     	;# 
   706  0187                     	;# 
   707  0188                     	;# 
   708  0189                     	;# 
   709  018C                     	;# 
   710  018D                     	;# 
   711  0000                     	;# 
   712  0001                     	;# 
   713  0002                     	;# 
   714  0003                     	;# 
   715  0004                     	;# 
   716  0005                     	;# 
   717  0006                     	;# 
   718  0007                     	;# 
   719  0008                     	;# 
   720  0009                     	;# 
   721  000A                     	;# 
   722  000B                     	;# 
   723  000C                     	;# 
   724  000D                     	;# 
   725  000E                     	;# 
   726  000E                     	;# 
   727  000F                     	;# 
   728  0010                     	;# 
   729  0011                     	;# 
   730  0012                     	;# 
   731  0013                     	;# 
   732  0014                     	;# 
   733  0015                     	;# 
   734  0015                     	;# 
   735  0016                     	;# 
   736  0017                     	;# 
   737  0018                     	;# 
   738  0019                     	;# 
   739  001A                     	;# 
   740  001B                     	;# 
   741  001B                     	;# 
   742  001C                     	;# 
   743  001D                     	;# 
   744  001E                     	;# 
   745  001F                     	;# 
   746  0081                     	;# 
   747  0085                     	;# 
   748  0086                     	;# 
   749  0087                     	;# 
   750  0088                     	;# 
   751  0089                     	;# 
   752  008C                     	;# 
   753  008D                     	;# 
   754  008E                     	;# 
   755  008F                     	;# 
   756  0090                     	;# 
   757  0091                     	;# 
   758  0092                     	;# 
   759  0093                     	;# 
   760  0093                     	;# 
   761  0093                     	;# 
   762  0094                     	;# 
   763  0095                     	;# 
   764  0096                     	;# 
   765  0097                     	;# 
   766  0098                     	;# 
   767  0099                     	;# 
   768  009A                     	;# 
   769  009B                     	;# 
   770  009C                     	;# 
   771  009D                     	;# 
   772  009E                     	;# 
   773  009F                     	;# 
   774  0105                     	;# 
   775  0107                     	;# 
   776  0108                     	;# 
   777  0109                     	;# 
   778  010C                     	;# 
   779  010C                     	;# 
   780  010D                     	;# 
   781  010E                     	;# 
   782  010F                     	;# 
   783  0185                     	;# 
   784  0187                     	;# 
   785  0188                     	;# 
   786  0189                     	;# 
   787  018C                     	;# 
   788  018D                     	;# 
   789  0000                     	;# 
   790  0001                     	;# 
   791  0002                     	;# 
   792  0003                     	;# 
   793  0004                     	;# 
   794  0005                     	;# 
   795  0006                     	;# 
   796  0007                     	;# 
   797  0008                     	;# 
   798  0009                     	;# 
   799  000A                     	;# 
   800  000B                     	;# 
   801  000C                     	;# 
   802  000D                     	;# 
   803  000E                     	;# 
   804  000E                     	;# 
   805  000F                     	;# 
   806  0010                     	;# 
   807  0011                     	;# 
   808  0012                     	;# 
   809  0013                     	;# 
   810  0014                     	;# 
   811  0015                     	;# 
   812  0015                     	;# 
   813  0016                     	;# 
   814  0017                     	;# 
   815  0018                     	;# 
   816  0019                     	;# 
   817  001A                     	;# 
   818  001B                     	;# 
   819  001B                     	;# 
   820  001C                     	;# 
   821  001D                     	;# 
   822  001E                     	;# 
   823  001F                     	;# 
   824  0081                     	;# 
   825  0085                     	;# 
   826  0086                     	;# 
   827  0087                     	;# 
   828  0088                     	;# 
   829  0089                     	;# 
   830  008C                     	;# 
   831  008D                     	;# 
   832  008E                     	;# 
   833  008F                     	;# 
   834  0090                     	;# 
   835  0091                     	;# 
   836  0092                     	;# 
   837  0093                     	;# 
   838  0093                     	;# 
   839  0093                     	;# 
   840  0094                     	;# 
   841  0095                     	;# 
   842  0096                     	;# 
   843  0097                     	;# 
   844  0098                     	;# 
   845  0099                     	;# 
   846  009A                     	;# 
   847  009B                     	;# 
   848  009C                     	;# 
   849  009D                     	;# 
   850  009E                     	;# 
   851  009F                     	;# 
   852  0105                     	;# 
   853  0107                     	;# 
   854  0108                     	;# 
   855  0109                     	;# 
   856  010C                     	;# 
   857  010C                     	;# 
   858  010D                     	;# 
   859  010E                     	;# 
   860  010F                     	;# 
   861  0185                     	;# 
   862  0187                     	;# 
   863  0188                     	;# 
   864  0189                     	;# 
   865  018C                     	;# 
   866  018D                     	;# 
   867                           
   868                           	psect	idataBANK1
   869  088D                     __pidataBANK1:	
   870                           
   871                           ;initializer for _FMRX_Nref
   872  088D  3400               	retlw	0
   873  088E  340A               	retlw	10
   874                           
   875                           ;initializer for _CWTX_Nref
   876  088F  34A0               	retlw	160
   877  0890  3400               	retlw	0
   878                           
   879                           ;initializer for _FMTX_Nref
   880  0891  3400               	retlw	0
   881  0892  340A               	retlw	10
   882                           
   883                           ;initializer for _CWTX_Nprg
   884  0893  3400               	retlw	0
   885  0894  3400               	retlw	0
   886  0895  3401               	retlw	1
   887  0896  3400               	retlw	0
   888  0897  3407               	retlw	7
   889  0898  3400               	retlw	0
   890  0899  3404               	retlw	4
   891  089A  3400               	retlw	0
   892  089B  3407               	retlw	7
   893  089C  3400               	retlw	0
   894                           
   895                           ;initializer for _FMTX_Nprg
   896  089D  3408               	retlw	8
   897  089E  3400               	retlw	0
   898  089F  3407               	retlw	7
   899  08A0  3400               	retlw	0
   900  08A1  3403               	retlw	3
   901  08A2  3400               	retlw	0
   902  08A3  3400               	retlw	0
   903  08A4  3400               	retlw	0
   904  08A5  3400               	retlw	0
   905  08A6  3400               	retlw	0
   906                           
   907                           	psect	idataBANK2
   908  0874                     __pidataBANK2:	
   909                           
   910                           ;initializer for _eDataField
   911  0874  3448               	retlw	72
   912  0875  3465               	retlw	101
   913  0876  346C               	retlw	108
   914  0877  346C               	retlw	108
   915  0878  346F               	retlw	111
   916  0879  3421               	retlw	33
   917  087A  3420               	retlw	32
   918  087B  3449               	retlw	73
   919  087C  3427               	retlw	39
   920  087D  346D               	retlw	109
   921  087E  3420               	retlw	32
   922  087F  344F               	retlw	79
   923  0880  3472               	retlw	114
   924  0881  3469               	retlw	105
   925  0882  3467               	retlw	103
   926  0883  3461               	retlw	97
   927  0884  346D               	retlw	109
   928  0885  3469               	retlw	105
   929  0886  3453               	retlw	83
   930  0887  3461               	retlw	97
   931  0888  3474               	retlw	116
   932  0889  3431               	retlw	49
   933  088A  3421               	retlw	33
   934  088B  3421               	retlw	33
   935  088C  3400               	retlw	0
   936                           
   937                           	psect	idataBANK3
   938  08C4                     __pidataBANK3:	
   939                           
   940                           ;initializer for main@F2017
   941  08C4  3402               	retlw	2
   942  08C5  3400               	retlw	0
   943  08C6  3404               	retlw	4
   944  08C7  3400               	retlw	0
   945  08C8  3408               	retlw	8
   946  08C9  3400               	retlw	0
   947  08CA  3408               	retlw	8
   948  08CB  3400               	retlw	0
   949  08CC  3407               	retlw	7
   950  08CD  3400               	retlw	0
   951                           
   952                           ;initializer for main@F2015
   953  08CE  3400               	retlw	0
   954  08CF  3400               	retlw	0
   955  08D0  3401               	retlw	1
   956  08D1  3400               	retlw	0
   957  08D2  3407               	retlw	7
   958  08D3  3400               	retlw	0
   959  08D4  3404               	retlw	4
   960  08D5  3400               	retlw	0
   961  08D6  3407               	retlw	7
   962  08D7  3400               	retlw	0
   963                           
   964                           ;initializer for main@F2013
   965  08D8  3408               	retlw	8
   966  08D9  3400               	retlw	0
   967  08DA  3407               	retlw	7
   968  08DB  3400               	retlw	0
   969  08DC  3403               	retlw	3
   970  08DD  3400               	retlw	0
   971  08DE  3400               	retlw	0
   972  08DF  3400               	retlw	0
   973  08E0  3400               	retlw	0
   974  08E1  3400               	retlw	0
   975                           
   976                           ;initializer for _FMRX_Nprg
   977  08E2  3402               	retlw	2
   978  08E3  3400               	retlw	0
   979  08E4  3404               	retlw	4
   980  08E5  3400               	retlw	0
   981  08E6  3408               	retlw	8
   982  08E7  3400               	retlw	0
   983  08E8  3408               	retlw	8
   984  08E9  3400               	retlw	0
   985  08EA  3407               	retlw	7
   986  08EB  3400               	retlw	0
   987                           
   988                           	psect	strings
   989  0800                     __pstrings:	
   990  0800                     stringtab:	
   991  0800                     __stringtab:	
   992  0800                     stringcode:	
   993                           ;	String table - string pointers are 1 byte each
   994                           
   995  0800                     stringdir:	
   996  0800  3008               	movlw	high stringdir
   997  0801  008A               	movwf	10
   998  0802  0804               	movf	4,w
   999  0803  0A84               	incf	4,f
  1000  0804  0782               	addwf	2,f
  1001  0805                     __stringbase:	
  1002  0805  3400               	retlw	0
  1003  0806                     __end_of__stringtab:	
  1004  0806                     _commandSize:	
  1005  0806  3420               	retlw	32
  1006  0807  3400               	retlw	0
  1007  0808                     __end_of_commandSize:	
  1008  000E                     _TMR1	set	14
  1009  0010                     _T1CONbits	set	16
  1010  000C                     _PIR1bits	set	12
  1011  000B                     _INTCONbits	set	11
  1012  0008                     _PORTDbits	set	8
  1013  0007                     _PORTCbits	set	7
  1014  0009                     _PORTEbits	set	9
  1015  0005                     _PORTAbits	set	5
  1016  0013                     _SSPBUF	set	19
  1017  0014                     _SSPCON	set	20
  1018  0003                     _STATUS	set	3
  1019  0009                     _PORTE	set	9
  1020  0008                     _PORTD	set	8
  1021  0007                     _PORTC	set	7
  1022  0006                     _PORTB	set	6
  1023  0005                     _PORTA	set	5
  1024  0019                     _TXREG	set	25
  1025  001A                     _RCREG	set	26
  1026  0029                     _RA1	set	41
  1027  0034                     _RB4	set	52
  1028  0032                     _RB2	set	50
  1029  0035                     _RB5	set	53
  1030  003A                     _RC2	set	58
  1031  003D                     _RC5	set	61
  1032  0064                     _TXIF	set	100
  1033  00C1                     _OERR	set	193
  1034  00C2                     _FERR	set	194
  1035  00C6                     _RX9	set	198
  1036  0065                     _RCIF	set	101
  1037  00C5                     _SREN	set	197
  1038  00C4                     _CREN	set	196
  1039  00C7                     _SPEN	set	199
  1040  008C                     _PIE1bits	set	140
  1041  0094                     _SSPSTAT	set	148
  1042  0093                     _SSPADD	set	147
  1043  0091                     _SSPCON2	set	145
  1044  0089                     _TRISE	set	137
  1045  0088                     _TRISD	set	136
  1046  0087                     _TRISC	set	135
  1047  0086                     _TRISB	set	134
  1048  0085                     _TRISA	set	133
  1049  0099                     _SPBRG	set	153
  1050  048C                     _ACKEN	set	1164
  1051  048D                     _ACKDT	set	1165
  1052  048B                     _RCEN	set	1163
  1053  048A                     _PEN	set	1162
  1054  0489                     _RSEN	set	1161
  1055  0488                     _SEN	set	1160
  1056  04C5                     _TXEN	set	1221
  1057  04C6                     _TX9	set	1222
  1058  0465                     _RCIE	set	1125
  1059  0464                     _TXIE	set	1124
  1060  04C4                     _SYNC	set	1220
  1061  04C2                     _BRGH	set	1218
  1062  0189                     _ANSELH	set	393
  1063  0188                     _ANSEL	set	392
  1064  0808                     STR_7:	
  1065  0808  344A               	retlw	74	;'J'
  1066  0809  3451               	retlw	81	;'Q'
  1067  080A  3431               	retlw	49	;'1'
  1068  080B  345A               	retlw	90	;'Z'
  1069  080C  3448               	retlw	72	;'H'
  1070  080D  3458               	retlw	88	;'X'
  1071  080E  3400               	retlw	0
  1072  080F                     STR_1:	
  1073  080F  344A               	retlw	74	;'J'
  1074  0810  3451               	retlw	81	;'Q'
  1075  0811  3431               	retlw	49	;'1'
  1076  0812  3459               	retlw	89	;'Y'
  1077  0813  3443               	retlw	67	;'C'
  1078  0814  345A               	retlw	90	;'Z'
  1079  0815  3400               	retlw	0
  1080  0808                     
  1081                           ; #config settings
  1082  0000                     
  1083                           	psect	cinit
  1084  07B3                     start_initialization:	
  1085  07B3                     __initialization:	
  1086                           
  1087                           ; Initialize objects allocated to BANK3
  1088  07B3  1783               	bsf	3,7	;select IRP bank2
  1089  07B4  30EA               	movlw	low (__pdataBANK3+40)
  1090  07B5  00FD               	movwf	btemp+-1
  1091  07B6  3008               	movlw	high __pidataBANK3
  1092  07B7  00FE               	movwf	btemp
  1093  07B8  30C4               	movlw	low __pidataBANK3
  1094  07B9  00FF               	movwf	btemp+1
  1095  07BA  30C2               	movlw	low __pdataBANK3
  1096  07BB  0084               	movwf	4
  1097  07BC  120A  158A  2027  120A  118A  	fcall	init_ram0
  1098                           
  1099                           ; Initialize objects allocated to BANK2
  1100  07C1  3059               	movlw	low (__pdataBANK2+25)
  1101  07C2  00FD               	movwf	btemp+-1
  1102  07C3  3008               	movlw	high __pidataBANK2
  1103  07C4  00FE               	movwf	btemp
  1104  07C5  3074               	movlw	low __pidataBANK2
  1105  07C6  00FF               	movwf	btemp+1
  1106  07C7  3040               	movlw	low __pdataBANK2
  1107  07C8  0084               	movwf	4
  1108  07C9  120A  158A  2027  120A  118A  	fcall	init_ram0
  1109                           
  1110                           ; Initialize objects allocated to BANK1
  1111  07CE  1383               	bcf	3,7	;select IRP bank0
  1112  07CF  30DB               	movlw	low (__pdataBANK1+26)
  1113  07D0  00FD               	movwf	btemp+-1
  1114  07D1  3008               	movlw	high __pidataBANK1
  1115  07D2  00FE               	movwf	btemp
  1116  07D3  308D               	movlw	low __pidataBANK1
  1117  07D4  00FF               	movwf	btemp+1
  1118  07D5  30C1               	movlw	low __pdataBANK1
  1119  07D6  0084               	movwf	4
  1120  07D7  120A  158A  2027  120A  118A  	fcall	init_ram0
  1121                           
  1122                           ; Clear objects allocated to BANK3
  1123  07DC  1783               	bsf	3,7	;select IRP bank2
  1124  07DD  3090               	movlw	low __pbssBANK3
  1125  07DE  0084               	movwf	4
  1126  07DF  30C2               	movlw	low (__pbssBANK3+50)
  1127  07E0  160A  118A  27F8  120A  118A  	fcall	clear_ram0
  1128                           
  1129                           ; Clear objects allocated to BANK2
  1130  07E5  3010               	movlw	low __pbssBANK2
  1131  07E6  0084               	movwf	4
  1132  07E7  3040               	movlw	low (__pbssBANK2+48)
  1133  07E8  160A  118A  27F8  120A  118A  	fcall	clear_ram0
  1134                           
  1135                           ; Clear objects allocated to BANK1
  1136  07ED  1383               	bcf	3,7	;select IRP bank0
  1137  07EE  30DB               	movlw	low __pbssBANK1
  1138  07EF  0084               	movwf	4
  1139  07F0  30E8               	movlw	low (__pbssBANK1+13)
  1140  07F1  160A  118A  27F8  120A  118A  	fcall	clear_ram0
  1141                           
  1142                           ; Clear objects allocated to BANK0
  1143  07F6  3066               	movlw	low __pbssBANK0
  1144  07F7  0084               	movwf	4
  1145  07F8  3070               	movlw	low (__pbssBANK0+10)
  1146  07F9  160A  118A  27F8   	fcall	clear_ram0
  1147  07FC                     end_of_initialization:	
  1148                           ;End of C runtime variable initialization code
  1149                           
  1150  07FC                     __end_of__initialization:	
  1151  07FC  0183               	clrf	3
  1152  07FD  120A  158A  2E1C   	ljmp	_main	;jump to C main() function
  1153                           
  1154                           	psect	bssBANK0
  1155  0066                     __pbssBANK0:	
  1156  0066                     _eflag:	
  1157  0066                     	ds	2
  1158  0068                     _dPacketnum:	
  1159  0068                     	ds	2
  1160  006A                     _rcv_state:	
  1161  006A                     	ds	2
  1162  006C                     _efcshi:	
  1163  006C                     	ds	1
  1164  006D                     _efcslo:	
  1165  006D                     	ds	1
  1166  006E                     _dfcslo:	
  1167  006E                     	ds	1
  1168  006F                     _dfcshi:	
  1169  006F                     	ds	1
  1170                           
  1171                           	psect	bssBANK1
  1172  00DB                     __pbssBANK1:	
  1173  00DB                     _ePacket:	
  1174  00DB                     	ds	5
  1175  00E0                     _ebitstatus:	
  1176  00E0                     	ds	2
  1177  00E2                     _estuff:	
  1178  00E2                     	ds	2
  1179  00E4                     _efcsflag:	
  1180  00E4                     	ds	2
  1181  00E6                     getbit@oldbit:	
  1182  00E6                     	ds	2
  1183                           
  1184                           	psect	dataBANK1
  1185  00C1                     __pdataBANK1:	
  1186  00C1                     _FMRX_Nref:	
  1187  00C1                     	ds	2
  1188  00C3                     _CWTX_Nref:	
  1189  00C3                     	ds	2
  1190  00C5                     _FMTX_Nref:	
  1191  00C5                     	ds	2
  1192  00C7                     _CWTX_Nprg:	
  1193  00C7                     	ds	10
  1194  00D1                     _FMTX_Nprg:	
  1195  00D1                     	ds	10
  1196                           
  1197                           	psect	bssBANK3
  1198  0190                     __pbssBANK3:	
  1199  0190                     _dPacket:	
  1200  0190                     	ds	50
  1201                           
  1202                           	psect	dataBANK3
  1203  01C2                     __pdataBANK3:	
  1204  01C2                     main@F2017:	
  1205  01C2                     	ds	10
  1206  01CC                     main@F2015:	
  1207  01CC                     	ds	10
  1208  01D6                     main@F2013:	
  1209  01D6                     	ds	10
  1210  01E0                     _FMRX_Nprg:	
  1211  01E0                     	ds	10
  1212                           
  1213                           	psect	bssBANK2
  1214  0110                     __pbssBANK2:	
  1215  0110                     _EEPROMData:	
  1216  0110                     	ds	32
  1217  0130                     _dData:	
  1218  0130                     	ds	16
  1219                           
  1220                           	psect	dataBANK2
  1221  0140                     __pdataBANK2:	
  1222  0140                     _eDataField:	
  1223  0140                     	ds	25
  1224                           
  1225                           	psect	inittext
  1226  0823                     init_fetch0:	
  1227                           ;	Called with low address in FSR and high address in W
  1228                           
  1229  0823  087E               	movf	126,w
  1230  0824  008A               	movwf	10
  1231  0825  087F               	movf	127,w
  1232  0826  0082               	movwf	2
  1233  0827                     init_ram0:	
  1234                           ;Called with:
  1235                           ;	high address of idata address in btemp 
  1236                           ;	low address of idata address in btemp+1 
  1237                           ;	low address of data in FSR
  1238                           ;	high address + 1 of data in btemp-1
  1239                           
  1240  0827  2023  120A  158A   	fcall	init_fetch0
  1241  082A  0080               	movwf	0
  1242  082B  0A84               	incf	4,f
  1243  082C  0804               	movf	4,w
  1244  082D  067D               	xorwf	125,w
  1245  082E  1903               	btfsc	3,2
  1246  082F  3400               	retlw	0
  1247  0830  0AFF               	incf	127,f
  1248  0831  1903               	btfsc	3,2
  1249  0832  0AFE               	incf	126,f
  1250  0833  2827               	goto	init_ram0
  1251                           
  1252                           	psect	clrtext
  1253  17F8                     clear_ram0:	
  1254                           ;	Called with FSR containing the base address, and
  1255                           ;	W with the last address+1
  1256                           
  1257  17F8  0064               	clrwdt	;clear the watchdog before getting into this loop
  1258  17F9                     clrloop0:	
  1259  17F9  0180               	clrf	0	;clear RAM location pointed to by FSR
  1260  17FA  0A84               	incf	4,f	;increment pointer
  1261  17FB  0604               	xorwf	4,w	;XOR with final address
  1262  17FC  1903               	btfsc	3,2	;have we reached the end yet?
  1263  17FD  3400               	retlw	0	;all done for this memory range, return
  1264  17FE  0604               	xorwf	4,w	;XOR again to restore value
  1265  17FF  2FF9               	goto	clrloop0	;do the next byte
  1266                           
  1267                           	psect	cstackBANK1
  1268  00A0                     __pcstackBANK1:	
  1269  00A0                     main@FMTX_Nprg:	
  1270                           
  1271                           ; 10 bytes @ 0x0
  1272  00A0                     	ds	10
  1273  00AA                     main@CWTX_Nprg:	
  1274                           
  1275                           ; 10 bytes @ 0xA
  1276  00AA                     	ds	10
  1277  00B4                     main@FMRX_Nprg:	
  1278                           
  1279                           ; 10 bytes @ 0x14
  1280  00B4                     	ds	10
  1281  00BE                     main@TXOBC_wad_header:	
  1282                           
  1283                           ; 1 bytes @ 0x1E
  1284  00BE                     	ds	1
  1285  00BF                     main@NM_wad_header:	
  1286                           
  1287                           ; 1 bytes @ 0x1F
  1288  00BF                     	ds	1
  1289  00C0                     main@dData:	
  1290                           
  1291                           ; 1 bytes @ 0x20
  1292  00C0                     	ds	1
  1293                           
  1294                           	psect	cstackCOMMON
  1295  0070                     __pcstackCOMMON:	
  1296  0070                     ?_ReceivePacket_data:	
  1297  0070                     ?_Reset_EPS:	
  1298                           ; 1 bytes @ 0x0
  1299                           
  1300  0070                     ??_Reset_EPS:	
  1301                           ; 1 bytes @ 0x0
  1302                           
  1303  0070                     ?__NOP:	
  1304                           ; 1 bytes @ 0x0
  1305                           
  1306  0070                     ??__NOP:	
  1307                           ; 1 bytes @ 0x0
  1308                           
  1309  0070                     ?_Init_SERIAL:	
  1310                           ; 1 bytes @ 0x0
  1311                           
  1312  0070                     ??_Init_SERIAL:	
  1313                           ; 1 bytes @ 0x0
  1314                           
  1315  0070                     ?_putch:	
  1316                           ; 1 bytes @ 0x0
  1317                           
  1318  0070                     ??_putch:	
  1319                           ; 1 bytes @ 0x0
  1320                           
  1321  0070                     ?_Init_MPU:	
  1322                           ; 1 bytes @ 0x0
  1323                           
  1324  0070                     ??_Init_MPU:	
  1325                           ; 1 bytes @ 0x0
  1326                           
  1327  0070                     ?_waitFlag:	
  1328                           ; 1 bytes @ 0x0
  1329                           
  1330  0070                     ?_getdata:	
  1331                           ; 1 bytes @ 0x0
  1332                           
  1333  0070                     ?_main:	
  1334                           ; 1 bytes @ 0x0
  1335                           
  1336  0070                     ?_I2C_Master_Wait:	
  1337                           ; 1 bytes @ 0x0
  1338                           
  1339  0070                     ??_I2C_Master_Wait:	
  1340                           ; 1 bytes @ 0x0
  1341                           
  1342  0070                     ?_I2C_Master_Start:	
  1343                           ; 1 bytes @ 0x0
  1344                           
  1345  0070                     ??_I2C_Master_Start:	
  1346                           ; 1 bytes @ 0x0
  1347                           
  1348  0070                     ?_I2C_Master_Stop:	
  1349                           ; 1 bytes @ 0x0
  1350                           
  1351  0070                     ??_I2C_Master_Stop:	
  1352                           ; 1 bytes @ 0x0
  1353                           
  1354  0070                     ?_I2C_Master_Write:	
  1355                           ; 1 bytes @ 0x0
  1356                           
  1357  0070                     ?_getbit:	
  1358                           ; 1 bytes @ 0x0
  1359                           
  1360  0070                     ?_fcscheck:	
  1361                           ; 2 bytes @ 0x0
  1362                           
  1363  0070                     ?___awdiv:	
  1364                           ; 2 bytes @ 0x0
  1365                           
  1366  0070                     ?___lldiv:	
  1367                           ; 2 bytes @ 0x0
  1368                           
  1369  0070                     putch@byte:	
  1370                           ; 4 bytes @ 0x0
  1371                           
  1372  0070                     I2C_Master_Write@d:	
  1373                           ; 1 bytes @ 0x0
  1374                           
  1375  0070                     __NOP@i:	
  1376                           ; 2 bytes @ 0x0
  1377                           
  1378  0070                     ___awdiv@divisor:	
  1379                           ; 2 bytes @ 0x0
  1380                           
  1381  0070                     ___lldiv@divisor:	
  1382                           ; 2 bytes @ 0x0
  1383                           
  1384                           
  1385                           ; 4 bytes @ 0x0
  1386  0070                     	ds	1
  1387  0071                     ?_NM_waddress:	
  1388  0071                     ?_TXOBC_waddress:	
  1389                           ; 1 bytes @ 0x1
  1390                           
  1391  0071                     NM_waddress@whigh_address:	
  1392                           ; 1 bytes @ 0x1
  1393                           
  1394  0071                     TXOBC_waddress@whigh_address:	
  1395                           ; 1 bytes @ 0x1
  1396                           
  1397                           
  1398                           ; 1 bytes @ 0x1
  1399  0071                     	ds	1
  1400  0072                     ?_EEPROM_Write:	
  1401  0072                     ??_getbit:	
  1402                           ; 1 bytes @ 0x2
  1403                           
  1404  0072                     ??_fcscheck:	
  1405                           ; 1 bytes @ 0x2
  1406                           
  1407  0072                     ??_I2C_Master_Write:	
  1408                           ; 1 bytes @ 0x2
  1409                           
  1410  0072                     ?_L_OUT:	
  1411                           ; 1 bytes @ 0x2
  1412                           
  1413  0072                     ?_H_OUT:	
  1414                           ; 1 bytes @ 0x2
  1415                           
  1416  0072                     ?_STBOUT:	
  1417                           ; 1 bytes @ 0x2
  1418                           
  1419  0072                     NM_waddress@wlow_address:	
  1420                           ; 1 bytes @ 0x2
  1421                           
  1422  0072                     TXOBC_waddress@wlow_address:	
  1423                           ; 1 bytes @ 0x2
  1424                           
  1425  0072                     EEPROM_Write@high_address:	
  1426                           ; 1 bytes @ 0x2
  1427                           
  1428  0072                     L_OUT@fmcwtxrx:	
  1429                           ; 1 bytes @ 0x2
  1430                           
  1431  0072                     H_OUT@fmcwtxrx:	
  1432                           ; 2 bytes @ 0x2
  1433                           
  1434  0072                     STBOUT@fmcwtxrx:	
  1435                           ; 2 bytes @ 0x2
  1436                           
  1437  0072                     ___awdiv@dividend:	
  1438                           ; 2 bytes @ 0x2
  1439                           
  1440                           
  1441                           ; 2 bytes @ 0x2
  1442  0072                     	ds	1
  1443  0073                     ??_NM_waddress:	
  1444  0073                     ??_TXOBC_waddress:	
  1445                           ; 1 bytes @ 0x3
  1446                           
  1447  0073                     NM_waddress@NM_wad_header:	
  1448                           ; 1 bytes @ 0x3
  1449                           
  1450  0073                     EEPROM_Write@low_address:	
  1451                           ; 1 bytes @ 0x3
  1452                           
  1453                           
  1454                           ; 1 bytes @ 0x3
  1455  0073                     	ds	1
  1456  0074                     ??_L_OUT:	
  1457  0074                     ??_H_OUT:	
  1458                           ; 1 bytes @ 0x4
  1459                           
  1460  0074                     ??_STBOUT:	
  1461                           ; 1 bytes @ 0x4
  1462                           
  1463  0074                     ?_OPINIT:	
  1464                           ; 1 bytes @ 0x4
  1465                           
  1466  0074                     ??___awdiv:	
  1467                           ; 1 bytes @ 0x4
  1468                           
  1469  0074                     fcscheck@bt:	
  1470                           ; 1 bytes @ 0x4
  1471                           
  1472  0074                     EEPROM_Write@data:	
  1473                           ; 1 bytes @ 0x4
  1474                           
  1475  0074                     getbit@i:	
  1476                           ; 1 bytes @ 0x4
  1477                           
  1478  0074                     OPINIT@fmcwtxrx:	
  1479                           ; 2 bytes @ 0x4
  1480                           
  1481  0074                     ___lldiv@dividend:	
  1482                           ; 2 bytes @ 0x4
  1483                           
  1484                           
  1485                           ; 4 bytes @ 0x4
  1486  0074                     	ds	1
  1487  0075                     ??_EEPROM_Write:	
  1488  0075                     TXOBC_waddress@TXOBC_wad_header:	
  1489                           ; 1 bytes @ 0x5
  1490                           
  1491  0075                     ___awdiv@counter:	
  1492                           ; 1 bytes @ 0x5
  1493                           
  1494  0075                     fcscheck@i:	
  1495                           ; 1 bytes @ 0x5
  1496                           
  1497                           
  1498                           ; 2 bytes @ 0x5
  1499  0075                     	ds	1
  1500  0076                     ??_waitFlag:	
  1501  0076                     ??_getdata:	
  1502                           ; 1 bytes @ 0x6
  1503                           
  1504  0076                     ??_OPINIT:	
  1505                           ; 1 bytes @ 0x6
  1506                           
  1507  0076                     ___awdiv@sign:	
  1508                           ; 1 bytes @ 0x6
  1509                           
  1510                           
  1511                           ; 1 bytes @ 0x6
  1512  0076                     	ds	1
  1513  0077                     fcscheck@i_149:	
  1514  0077                     ___awdiv@quotient:	
  1515                           ; 2 bytes @ 0x7
  1516                           
  1517                           
  1518                           ; 2 bytes @ 0x7
  1519  0077                     	ds	1
  1520  0078                     ??___lldiv:	
  1521  0078                     EEPROM_Write@EEPROM_address:	
  1522                           ; 1 bytes @ 0x8
  1523                           
  1524                           
  1525                           ; 1 bytes @ 0x8
  1526  0078                     	ds	1
  1527  0079                     ?_OUTFQ:	
  1528  0079                     ?_RFDOUT:	
  1529                           ; 1 bytes @ 0x9
  1530                           
  1531  0079                     fcscheck@byte:	
  1532                           ; 1 bytes @ 0x9
  1533                           
  1534  0079                     EEPROM_Write@Address:	
  1535                           ; 1 bytes @ 0x9
  1536                           
  1537  0079                     OUTFQ@fmcwtxrx:	
  1538                           ; 1 bytes @ 0x9
  1539                           
  1540  0079                     RFDOUT@fmcwtxrx:	
  1541                           ; 2 bytes @ 0x9
  1542                           
  1543  0079                     ___lldiv@quotient:	
  1544                           ; 2 bytes @ 0x9
  1545                           
  1546                           
  1547                           ; 4 bytes @ 0x9
  1548  0079                     	ds	1
  1549  007A                     ??_ReceivePacket_data:	
  1550                           
  1551                           ; 1 bytes @ 0xA
  1552  007A                     	ds	1
  1553  007B                     OUTFQ@Nprg:	
  1554  007B                     RFDOUT@Nref:	
  1555                           ; 2 bytes @ 0xB
  1556                           
  1557                           
  1558                           ; 2 bytes @ 0xB
  1559  007B                     	ds	2
  1560  007D                     ??_FMTX:	
  1561  007D                     ??_CWTX:	
  1562                           ; 1 bytes @ 0xD
  1563                           
  1564  007D                     ??_FMRX:	
  1565                           ; 1 bytes @ 0xD
  1566                           
  1567  007D                     ___lldiv@counter:	
  1568                           ; 1 bytes @ 0xD
  1569                           
  1570                           
  1571                           ; 1 bytes @ 0xD
  1572  007D                     	ds	1
  1573                           
  1574                           	psect	cstackBANK0
  1575  0020                     __pcstackBANK0:	
  1576  0020                     ?_Init_I2C_M:	
  1577  0020                     ??_OUTFQ:	
  1578                           ; 1 bytes @ 0x0
  1579                           
  1580  0020                     ??_RFDOUT:	
  1581                           ; 1 bytes @ 0x0
  1582                           
  1583  0020                     waitFlag@i:	
  1584                           ; 1 bytes @ 0x0
  1585                           
  1586  0020                     getdata@bufstore_counter:	
  1587                           ; 2 bytes @ 0x0
  1588                           
  1589  0020                     Init_I2C_M@c:	
  1590                           ; 2 bytes @ 0x0
  1591                           
  1592                           
  1593                           ; 4 bytes @ 0x0
  1594  0020                     	ds	2
  1595  0022                     waitFlag@j:	
  1596  0022                     getdata@dstuff:	
  1597                           ; 2 bytes @ 0x2
  1598                           
  1599                           
  1600                           ; 2 bytes @ 0x2
  1601  0022                     	ds	1
  1602  0023                     RFDOUT@Nref_b:	
  1603                           
  1604                           ; 24 bytes @ 0x3
  1605  0023                     	ds	1
  1606  0024                     ??_Init_I2C_M:	
  1607  0024                     waitFlag@j_118:	
  1608                           ; 1 bytes @ 0x4
  1609                           
  1610  0024                     getdata@dbitstatus:	
  1611                           ; 2 bytes @ 0x4
  1612                           
  1613                           
  1614                           ; 2 bytes @ 0x4
  1615  0024                     	ds	2
  1616  0026                     getdata@buf:	
  1617  0026                     waitFlag@j_120:	
  1618                           ; 1 bytes @ 0x6
  1619                           
  1620                           
  1621                           ; 2 bytes @ 0x6
  1622  0026                     	ds	2
  1623  0028                     waitFlag@j_122:	
  1624                           
  1625                           ; 2 bytes @ 0x8
  1626  0028                     	ds	2
  1627  002A                     waitFlag@j_124:	
  1628                           
  1629                           ; 2 bytes @ 0xA
  1630  002A                     	ds	2
  1631  002C                     waitFlag@j_126:	
  1632                           
  1633                           ; 2 bytes @ 0xC
  1634  002C                     	ds	2
  1635  002E                     waitFlag@j_127:	
  1636                           
  1637                           ; 2 bytes @ 0xE
  1638  002E                     	ds	2
  1639  0030                     waitFlag@j_129:	
  1640  0030                     OUTFQ@Nprg_b:	
  1641                           ; 2 bytes @ 0x10
  1642                           
  1643                           
  1644                           ; 34 bytes @ 0x10
  1645  0030                     	ds	2
  1646  0032                     waitFlag@j_131:	
  1647                           
  1648                           ; 2 bytes @ 0x12
  1649  0032                     	ds	2
  1650  0034                     waitFlag@j_133:	
  1651                           
  1652                           ; 2 bytes @ 0x14
  1653  0034                     	ds	2
  1654  0036                     waitFlag@j_135:	
  1655                           
  1656                           ; 2 bytes @ 0x16
  1657  0036                     	ds	2
  1658  0038                     waitFlag@j_137:	
  1659                           
  1660                           ; 2 bytes @ 0x18
  1661  0038                     	ds	2
  1662  003A                     waitFlag@flag_judge:	
  1663                           
  1664                           ; 2 bytes @ 0x1A
  1665  003A                     	ds	1
  1666  003B                     RFDOUT@i_483:	
  1667                           
  1668                           ; 2 bytes @ 0x1B
  1669  003B                     	ds	1
  1670  003C                     waitFlag@buf:	
  1671                           
  1672                           ; 1 bytes @ 0x1C
  1673  003C                     	ds	1
  1674  003D                     ReceivePacket_data@fcschecker:	
  1675  003D                     RFDOUT@i:	
  1676                           ; 2 bytes @ 0x1D
  1677                           
  1678                           
  1679                           ; 2 bytes @ 0x1D
  1680  003D                     	ds	2
  1681  003F                     ReceivePacket_data@i:	
  1682  003F                     RFDOUT@i_484:	
  1683                           ; 2 bytes @ 0x1F
  1684                           
  1685                           
  1686                           ; 2 bytes @ 0x1F
  1687  003F                     	ds	19
  1688  0052                     OUTFQ@i_472:	
  1689                           
  1690                           ; 2 bytes @ 0x32
  1691  0052                     	ds	2
  1692  0054                     OUTFQ@count:	
  1693                           
  1694                           ; 2 bytes @ 0x34
  1695  0054                     	ds	2
  1696  0056                     OUTFQ@i:	
  1697                           
  1698                           ; 2 bytes @ 0x36
  1699  0056                     	ds	2
  1700  0058                     OUTFQ@i_474:	
  1701                           
  1702                           ; 2 bytes @ 0x38
  1703  0058                     	ds	2
  1704  005A                     OUTFQ@j:	
  1705                           
  1706                           ; 2 bytes @ 0x3A
  1707  005A                     	ds	2
  1708  005C                     ?_FMTX:	
  1709  005C                     ?_CWTX:	
  1710                           ; 1 bytes @ 0x3C
  1711                           
  1712  005C                     ?_FMRX:	
  1713                           ; 1 bytes @ 0x3C
  1714                           
  1715  005C                     FMTX@Nref:	
  1716                           ; 1 bytes @ 0x3C
  1717                           
  1718  005C                     CWTX@Nref:	
  1719                           ; 2 bytes @ 0x3C
  1720                           
  1721  005C                     FMRX@Nref:	
  1722                           ; 2 bytes @ 0x3C
  1723                           
  1724                           
  1725                           ; 2 bytes @ 0x3C
  1726  005C                     	ds	2
  1727  005E                     FMTX@Nprg:	
  1728  005E                     CWTX@Nprg:	
  1729                           ; 2 bytes @ 0x3E
  1730                           
  1731  005E                     FMRX@Nprg:	
  1732                           ; 2 bytes @ 0x3E
  1733                           
  1734                           
  1735                           ; 2 bytes @ 0x3E
  1736  005E                     	ds	2
  1737  0060                     FMTX@fmtx:	
  1738  0060                     CWTX@cwtx:	
  1739                           ; 2 bytes @ 0x40
  1740                           
  1741  0060                     FMRX@fmrx:	
  1742                           ; 2 bytes @ 0x40
  1743                           
  1744                           
  1745                           ; 2 bytes @ 0x40
  1746  0060                     	ds	2
  1747  0062                     ??_main:	
  1748                           
  1749                           ; 1 bytes @ 0x42
  1750  0062                     	ds	4
  1751                           
  1752                           	psect	maintext
  1753  0E1C                     __pmaintext:	
  1754 ;;
  1755 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1756 ;;
  1757 ;; *************** function _main *****************
  1758 ;; Defined at:
  1759 ;;		line 38 in file "main.c"
  1760 ;; Parameters:    Size  Location     Type
  1761 ;;		None
  1762 ;; Auto vars:     Size  Location     Type
  1763 ;;  FMRX_Nprg      10   20[BANK1 ] int [5]
  1764 ;;  CWTX_Nprg      10   10[BANK1 ] int [5]
  1765 ;;  FMTX_Nprg      10    0[BANK1 ] int [5]
  1766 ;;  NM_wad_heade    1   31[BANK1 ] unsigned char 
  1767 ;;  dData           1   32[BANK1 ] PTR unsigned char 
  1768 ;;		 -> NULL(0), dData(16), 
  1769 ;;  TXOBC_wad_he    1   30[BANK1 ] unsigned char 
  1770 ;; Return value:  Size  Location     Type
  1771 ;;                  1    wreg      void 
  1772 ;; Registers used:
  1773 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1774 ;; Tracked objects:
  1775 ;;		On entry : B00/0
  1776 ;;		On exit  : 0/0
  1777 ;;		Unchanged: 0/0
  1778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1779 ;;      Params:         0       0       0       0       0
  1780 ;;      Locals:         0       0      33       0       0
  1781 ;;      Temps:          0       4       0       0       0
  1782 ;;      Totals:         0       4      33       0       0
  1783 ;;Total ram usage:       37 bytes
  1784 ;; Hardware stack levels required when called:    4
  1785 ;; This function calls:
  1786 ;;		_CWTX
  1787 ;;		_EEPROM_Write
  1788 ;;		_FMRX
  1789 ;;		_FMTX
  1790 ;;		_Init_I2C_M
  1791 ;;		_Init_MPU
  1792 ;;		_Init_SERIAL
  1793 ;;		_NM_waddress
  1794 ;;		_ReceivePacket_data
  1795 ;;		_Reset_EPS
  1796 ;;		_TXOBC_waddress
  1797 ;; This function is called by:
  1798 ;;		Startup code after reset
  1799 ;; This function uses a non-reentrant model
  1800 ;;
  1801                           
  1802                           
  1803                           ;psect for function _main
  1804  0E1C                     _main:	
  1805                           
  1806                           ;main.c: 43: _delay((unsigned long)((200)*(10000000/4000.0)));
  1807                           
  1808                           ;incstack = 0
  1809                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1810  0E1C  3003               	movlw	3
  1811  0E1D  1283               	bcf	3,5	;RP0=0, select bank0
  1812  0E1E  1303               	bcf	3,6	;RP1=0, select bank0
  1813  0E1F  00E4               	movwf	??_main+2
  1814  0E20  308A               	movlw	138
  1815  0E21  00E3               	movwf	??_main+1
  1816  0E22  3055               	movlw	85
  1817  0E23  00E2               	movwf	??_main
  1818  0E24                     u3547:	
  1819  0E24  0BE2               	decfsz	??_main,f
  1820  0E25  2E24               	goto	u3547
  1821  0E26  0BE3               	decfsz	??_main+1,f
  1822  0E27  2E24               	goto	u3547
  1823  0E28  0BE4               	decfsz	??_main+2,f
  1824  0E29  2E24               	goto	u3547
  1825                           
  1826                           ;main.c: 45: Init_SERIAL();
  1827  0E2A  120A  158A  205B  120A  158A  	fcall	_Init_SERIAL
  1828                           
  1829                           ;main.c: 46: Init_MPU();
  1830  0E2F  120A  158A  20A7  120A  158A  	fcall	_Init_MPU
  1831                           
  1832                           ;main.c: 47: Init_I2C_M(400000);
  1833  0E34  3000               	movlw	0
  1834  0E35  1283               	bcf	3,5	;RP0=0, select bank0
  1835  0E36  1303               	bcf	3,6	;RP1=0, select bank0
  1836  0E37  00A3               	movwf	Init_I2C_M@c+3
  1837  0E38  3006               	movlw	6
  1838  0E39  00A2               	movwf	Init_I2C_M@c+2
  1839  0E3A  301A               	movlw	26
  1840  0E3B  00A1               	movwf	Init_I2C_M@c+1
  1841  0E3C  3080               	movlw	128
  1842  0E3D  00A0               	movwf	Init_I2C_M@c
  1843  0E3E  120A  158A  219E  120A  158A  	fcall	_Init_I2C_M
  1844                           
  1845                           ;main.c: 54: RB2 = 1;
  1846  0E43  1283               	bcf	3,5	;RP0=0, select bank0
  1847  0E44  1303               	bcf	3,6	;RP1=0, select bank0
  1848  0E45  1506               	bsf	6,2	;volatile
  1849                           
  1850                           ;main.c: 55: _delay((unsigned long)((1000)*(10000000/4000.0)));
  1851  0E46  300D               	movlw	13
  1852  0E47  1283               	bcf	3,5	;RP0=0, select bank0
  1853  0E48  1303               	bcf	3,6	;RP1=0, select bank0
  1854  0E49  00E4               	movwf	??_main+2
  1855  0E4A  30AF               	movlw	175
  1856  0E4B  00E3               	movwf	??_main+1
  1857  0E4C  30B5               	movlw	181
  1858  0E4D  00E2               	movwf	??_main
  1859  0E4E                     u3557:	
  1860  0E4E  0BE2               	decfsz	??_main,f
  1861  0E4F  2E4E               	goto	u3557
  1862  0E50  0BE3               	decfsz	??_main+1,f
  1863  0E51  2E4E               	goto	u3557
  1864  0E52  0BE4               	decfsz	??_main+2,f
  1865  0E53  2E4E               	goto	u3557
  1866  0E54  2E55               	nop2
  1867                           
  1868                           ;main.c: 57: FMTX(FMTX_Nref, FMTX_Nprg);
  1869  0E55  1683               	bsf	3,5	;RP0=1, select bank1
  1870  0E56  1303               	bcf	3,6	;RP1=0, select bank1
  1871  0E57  0846               	movf	(_FMTX_Nref+1)^(0+128),w
  1872  0E58  1283               	bcf	3,5	;RP0=0, select bank0
  1873  0E59  1303               	bcf	3,6	;RP1=0, select bank0
  1874  0E5A  00DD               	movwf	FMTX@Nref+1
  1875  0E5B  1683               	bsf	3,5	;RP0=1, select bank1
  1876  0E5C  1303               	bcf	3,6	;RP1=0, select bank1
  1877  0E5D  0845               	movf	_FMTX_Nref^(0+128),w
  1878  0E5E  1283               	bcf	3,5	;RP0=0, select bank0
  1879  0E5F  1303               	bcf	3,6	;RP1=0, select bank0
  1880  0E60  00DC               	movwf	FMTX@Nref
  1881  0E61  30D1               	movlw	(low (_FMTX_Nprg| 0))& (0+255)
  1882  0E62  00DE               	movwf	FMTX@Nprg
  1883  0E63  3000               	movlw	0
  1884  0E64  00DF               	movwf	FMTX@Nprg+1
  1885  0E65  120A  158A  2144  120A  158A  	fcall	_FMTX
  1886                           
  1887                           ;main.c: 58: CWTX(CWTX_Nref, CWTX_Nprg);
  1888  0E6A  1683               	bsf	3,5	;RP0=1, select bank1
  1889  0E6B  1303               	bcf	3,6	;RP1=0, select bank1
  1890  0E6C  0844               	movf	(_CWTX_Nref+1)^(0+128),w
  1891  0E6D  1283               	bcf	3,5	;RP0=0, select bank0
  1892  0E6E  1303               	bcf	3,6	;RP1=0, select bank0
  1893  0E6F  00DD               	movwf	CWTX@Nref+1
  1894  0E70  1683               	bsf	3,5	;RP0=1, select bank1
  1895  0E71  1303               	bcf	3,6	;RP1=0, select bank1
  1896  0E72  0843               	movf	_CWTX_Nref^(0+128),w
  1897  0E73  1283               	bcf	3,5	;RP0=0, select bank0
  1898  0E74  1303               	bcf	3,6	;RP1=0, select bank0
  1899  0E75  00DC               	movwf	CWTX@Nref
  1900  0E76  30C7               	movlw	(low (_CWTX_Nprg| 0))& (0+255)
  1901  0E77  00DE               	movwf	CWTX@Nprg
  1902  0E78  3000               	movlw	0
  1903  0E79  00DF               	movwf	CWTX@Nprg+1
  1904  0E7A  120A  158A  20EC  120A  158A  	fcall	_CWTX
  1905                           
  1906                           ;main.c: 59: FMRX(FMRX_Nref, FMRX_Nprg);
  1907  0E7F  1683               	bsf	3,5	;RP0=1, select bank1
  1908  0E80  1303               	bcf	3,6	;RP1=0, select bank1
  1909  0E81  0842               	movf	(_FMRX_Nref+1)^(0+128),w
  1910  0E82  1283               	bcf	3,5	;RP0=0, select bank0
  1911  0E83  1303               	bcf	3,6	;RP1=0, select bank0
  1912  0E84  00DD               	movwf	FMRX@Nref+1
  1913  0E85  1683               	bsf	3,5	;RP0=1, select bank1
  1914  0E86  1303               	bcf	3,6	;RP1=0, select bank1
  1915  0E87  0841               	movf	_FMRX_Nref^(0+128),w
  1916  0E88  1283               	bcf	3,5	;RP0=0, select bank0
  1917  0E89  1303               	bcf	3,6	;RP1=0, select bank0
  1918  0E8A  00DC               	movwf	FMRX@Nref
  1919  0E8B  30E0               	movlw	(low (_FMRX_Nprg| (0+256)))& (0+255)
  1920  0E8C  00DE               	movwf	FMRX@Nprg
  1921  0E8D  3001               	movlw	1
  1922  0E8E  00DF               	movwf	FMRX@Nprg+1
  1923  0E8F  120A  158A  2118  120A  158A  	fcall	_FMRX
  1924                           
  1925                           ;main.c: 60: RB2 = 0;
  1926  0E94  1283               	bcf	3,5	;RP0=0, select bank0
  1927  0E95  1303               	bcf	3,6	;RP1=0, select bank0
  1928  0E96  1106               	bcf	6,2	;volatile
  1929  0E97                     l3766:	
  1930                           ;main.c: 63: while(1){
  1931                           
  1932                           
  1933                           ;main.c: 78: UBYTE *dData;
  1934                           ;main.c: 79: dData = ReceivePacket_data();
  1935  0E97  120A  158A  2459  120A  158A  	fcall	_ReceivePacket_data
  1936  0E9C  1283               	bcf	3,5	;RP0=0, select bank0
  1937  0E9D  1303               	bcf	3,6	;RP1=0, select bank0
  1938  0E9E  00E2               	movwf	??_main
  1939  0E9F  0862               	movf	??_main,w
  1940  0EA0  1683               	bsf	3,5	;RP0=1, select bank1
  1941  0EA1  1303               	bcf	3,6	;RP1=0, select bank1
  1942  0EA2  00C0               	movwf	main@dData^(0+128)
  1943                           
  1944                           ;main.c: 80: RB2 = 1;
  1945  0EA3  1283               	bcf	3,5	;RP0=0, select bank0
  1946  0EA4  1303               	bcf	3,6	;RP1=0, select bank0
  1947  0EA5  1506               	bsf	6,2	;volatile
  1948                           
  1949                           ;main.c: 81: _delay((unsigned long)((500)*(10000000/4000.0)));
  1950  0EA6  3007               	movlw	7
  1951  0EA7  1283               	bcf	3,5	;RP0=0, select bank0
  1952  0EA8  1303               	bcf	3,6	;RP1=0, select bank0
  1953  0EA9  00E4               	movwf	??_main+2
  1954  0EAA  3058               	movlw	88
  1955  0EAB  00E3               	movwf	??_main+1
  1956  0EAC  3059               	movlw	89
  1957  0EAD  00E2               	movwf	??_main
  1958  0EAE                     u3567:	
  1959  0EAE  0BE2               	decfsz	??_main,f
  1960  0EAF  2EAE               	goto	u3567
  1961  0EB0  0BE3               	decfsz	??_main+1,f
  1962  0EB1  2EAE               	goto	u3567
  1963  0EB2  0BE4               	decfsz	??_main+2,f
  1964  0EB3  2EAE               	goto	u3567
  1965                           
  1966                           ;main.c: 82: RB2 = 0;
  1967  0EB4  1283               	bcf	3,5	;RP0=0, select bank0
  1968  0EB5  1303               	bcf	3,6	;RP1=0, select bank0
  1969  0EB6  1106               	bcf	6,2	;volatile
  1970                           
  1971                           ;main.c: 84: EEPROM_Write(0x50,0x00,0x00,dData);
  1972  0EB7  01F2               	clrf	EEPROM_Write@high_address
  1973  0EB8  01F3               	clrf	EEPROM_Write@low_address
  1974  0EB9  1683               	bsf	3,5	;RP0=1, select bank1
  1975  0EBA  1303               	bcf	3,6	;RP1=0, select bank1
  1976  0EBB  0840               	movf	main@dData^(0+128),w
  1977  0EBC  1283               	bcf	3,5	;RP0=0, select bank0
  1978  0EBD  1303               	bcf	3,6	;RP1=0, select bank0
  1979  0EBE  00E2               	movwf	??_main
  1980  0EBF  0862               	movf	??_main,w
  1981  0EC0  00F4               	movwf	EEPROM_Write@data
  1982  0EC1  3050               	movlw	80
  1983  0EC2  120A  158A  233D  120A  158A  	fcall	_EEPROM_Write
  1984                           
  1985                           ;main.c: 85: _delay((unsigned long)((100)*(10000000/4000.0)));
  1986  0EC7  3002               	movlw	2
  1987  0EC8  1283               	bcf	3,5	;RP0=0, select bank0
  1988  0EC9  1303               	bcf	3,6	;RP1=0, select bank0
  1989  0ECA  00E4               	movwf	??_main+2
  1990  0ECB  3045               	movlw	69
  1991  0ECC  00E3               	movwf	??_main+1
  1992  0ECD  30A9               	movlw	169
  1993  0ECE  00E2               	movwf	??_main
  1994  0ECF                     u3577:	
  1995  0ECF  0BE2               	decfsz	??_main,f
  1996  0ED0  2ECF               	goto	u3577
  1997  0ED1  0BE3               	decfsz	??_main+1,f
  1998  0ED2  2ECF               	goto	u3577
  1999  0ED3  0BE4               	decfsz	??_main+2,f
  2000  0ED4  2ECF               	goto	u3577
  2001                           
  2002                           ;main.c: 89: UBYTE TXOBC_wad_header = 0x74;
  2003  0ED5  3074               	movlw	116
  2004  0ED6  1283               	bcf	3,5	;RP0=0, select bank0
  2005  0ED7  1303               	bcf	3,6	;RP1=0, select bank0
  2006  0ED8  00E2               	movwf	??_main
  2007  0ED9  0862               	movf	??_main,w
  2008  0EDA  1683               	bsf	3,5	;RP0=1, select bank1
  2009  0EDB  1303               	bcf	3,6	;RP1=0, select bank1
  2010  0EDC  00BE               	movwf	main@TXOBC_wad_header^(0+128)
  2011                           
  2012                           ;main.c: 90: TXOBC_waddress(TXOBC_wad_header, 0x00, 0x00);
  2013  0EDD  01F1               	clrf	TXOBC_waddress@whigh_address
  2014  0EDE  01F2               	clrf	TXOBC_waddress@wlow_address
  2015  0EDF  083E               	movf	main@TXOBC_wad_header^(0+128),w
  2016  0EE0  120A  158A  21D2  120A  158A  	fcall	_TXOBC_waddress
  2017                           
  2018                           ;main.c: 103: if(dData[0]=='n'){
  2019  0EE5  1683               	bsf	3,5	;RP0=1, select bank1
  2020  0EE6  1303               	bcf	3,6	;RP1=0, select bank1
  2021  0EE7  0840               	movf	main@dData^(0+128),w
  2022  0EE8  0084               	movwf	4
  2023  0EE9  306E               	movlw	110
  2024  0EEA  1783               	bsf	3,7	;select IRP bank2
  2025  0EEB  0600               	xorwf	0,w
  2026  0EEC  1D03               	btfss	3,2
  2027  0EED  2EFF               	goto	l3788
  2028                           
  2029                           ;main.c: 105: UBYTE NM_wad_header = 0x72;
  2030  0EEE  3072               	movlw	114
  2031  0EEF  1283               	bcf	3,5	;RP0=0, select bank0
  2032  0EF0  1303               	bcf	3,6	;RP1=0, select bank0
  2033  0EF1  00E2               	movwf	??_main
  2034  0EF2  0862               	movf	??_main,w
  2035  0EF3  1683               	bsf	3,5	;RP0=1, select bank1
  2036  0EF4  1303               	bcf	3,6	;RP1=0, select bank1
  2037  0EF5  00BF               	movwf	main@NM_wad_header^(0+128)
  2038                           
  2039                           ;main.c: 106: NM_waddress(NM_wad_header, 0x00, 0x00);
  2040  0EF6  01F1               	clrf	NM_waddress@whigh_address
  2041  0EF7  01F2               	clrf	NM_waddress@wlow_address
  2042  0EF8  083F               	movf	main@NM_wad_header^(0+128),w
  2043  0EF9  120A  158A  2034  120A  158A  	fcall	_NM_waddress
  2044                           
  2045                           ;main.c: 108: }else if(dData[0]=='p'){
  2046  0EFE  2FF1               	goto	l442
  2047  0EFF                     l3788:	
  2048  0EFF  1683               	bsf	3,5	;RP0=1, select bank1
  2049  0F00  1303               	bcf	3,6	;RP1=0, select bank1
  2050  0F01  0840               	movf	main@dData^(0+128),w
  2051  0F02  0084               	movwf	4
  2052  0F03  3070               	movlw	112
  2053  0F04  1783               	bsf	3,7	;select IRP bank2
  2054  0F05  0600               	xorwf	0,w
  2055  0F06  1D03               	btfss	3,2
  2056  0F07  2FDC               	goto	l443
  2057                           
  2058                           ;main.c: 113: if(dData[2] == 'r'){
  2059  0F08  0840               	movf	main@dData^(0+128),w
  2060  0F09  3E02               	addlw	2
  2061  0F0A  0084               	movwf	4
  2062  0F0B  3072               	movlw	114
  2063  0F0C  0600               	xorwf	0,w
  2064  0F0D  1903               	btfsc	3,2
  2065  0F0E  2FC4               	goto	l3816
  2066  0F0F  2FF1               	goto	l442
  2067  0F10                     l3794:	
  2068                           ;main.c: 119: case 'E':
  2069                           
  2070                           ;main.c: 118: switch(dData[3]){
  2071                           
  2072                           
  2073                           ;main.c: 125: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2074  0F10  3040               	movlw	64
  2075  0F11  1283               	bcf	3,5	;RP0=0, select bank0
  2076  0F12  1303               	bcf	3,6	;RP1=0, select bank0
  2077  0F13  00E4               	movwf	??_main+2
  2078  0F14  306A               	movlw	106
  2079  0F15  00E3               	movwf	??_main+1
  2080  0F16  3097               	movlw	151
  2081  0F17  00E2               	movwf	??_main
  2082  0F18                     u3587:	
  2083  0F18  0BE2               	decfsz	??_main,f
  2084  0F19  2F18               	goto	u3587
  2085  0F1A  0BE3               	decfsz	??_main+1,f
  2086  0F1B  2F18               	goto	u3587
  2087  0F1C  0BE4               	decfsz	??_main+2,f
  2088  0F1D  2F18               	goto	u3587
  2089                           
  2090                           ;main.c: 126: Reset_EPS();
  2091  0F1E  120A  118A  2007  120A  158A  	fcall	_Reset_EPS
  2092                           
  2093                           ;main.c: 127: _delay((unsigned long)((3000)*(10000000/4000.0)));
  2094  0F23  3027               	movlw	39
  2095  0F24  1283               	bcf	3,5	;RP0=0, select bank0
  2096  0F25  1303               	bcf	3,6	;RP1=0, select bank0
  2097  0F26  00E4               	movwf	??_main+2
  2098  0F27  300D               	movlw	13
  2099  0F28  00E3               	movwf	??_main+1
  2100  0F29  3025               	movlw	37
  2101  0F2A  00E2               	movwf	??_main
  2102  0F2B                     u3597:	
  2103  0F2B  0BE2               	decfsz	??_main,f
  2104  0F2C  2F2B               	goto	u3597
  2105  0F2D  0BE3               	decfsz	??_main+1,f
  2106  0F2E  2F2B               	goto	u3597
  2107  0F2F  0BE4               	decfsz	??_main+2,f
  2108  0F30  2F2B               	goto	u3597
  2109  0F31  2F32               	nop2
  2110                           
  2111                           ;main.c: 130: int FMTX_Nprg[5] = {8,7,3,0,0};
  2112  0F32  30A0               	movlw	main@FMTX_Nprg& (0+255)
  2113  0F33  0084               	movwf	4
  2114  0F34  30D6               	movlw	low main@F2013
  2115  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  2116  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  2117  0F37  00E2               	movwf	??_main
  2118  0F38  0804               	movf	4,w
  2119  0F39  00E3               	movwf	??_main+1
  2120  0F3A  300A               	movlw	10
  2121  0F3B  00E4               	movwf	??_main+2
  2122  0F3C                     u3490:	
  2123  0F3C  0862               	movf	??_main,w
  2124  0F3D  0084               	movwf	4
  2125  0F3E  1783               	bsf	3,7	;select IRP bank3
  2126  0F3F  0800               	movf	0,w
  2127  0F40  00E5               	movwf	??_main+3
  2128  0F41  0AE2               	incf	??_main,f
  2129  0F42  0863               	movf	??_main+1,w
  2130  0F43  0084               	movwf	4
  2131  0F44  1383               	bcf	3,7	;select IRP bank1
  2132  0F45  0865               	movf	??_main+3,w
  2133  0F46  0080               	movwf	0
  2134  0F47  0AE3               	incf	??_main+1,f
  2135  0F48  0BE4               	decfsz	??_main+2,f
  2136  0F49  2F3C               	goto	u3490
  2137                           
  2138                           ;main.c: 131: int CWTX_Nprg[5] = {0,1,7,4,7};
  2139  0F4A  30AA               	movlw	main@CWTX_Nprg& (0+255)
  2140  0F4B  0084               	movwf	4
  2141  0F4C  30CC               	movlw	low main@F2015
  2142  0F4D  00E2               	movwf	??_main
  2143  0F4E  0804               	movf	4,w
  2144  0F4F  00E3               	movwf	??_main+1
  2145  0F50  300A               	movlw	10
  2146  0F51  00E4               	movwf	??_main+2
  2147  0F52                     u3500:	
  2148  0F52  0862               	movf	??_main,w
  2149  0F53  0084               	movwf	4
  2150  0F54  1783               	bsf	3,7	;select IRP bank3
  2151  0F55  0800               	movf	0,w
  2152  0F56  00E5               	movwf	??_main+3
  2153  0F57  0AE2               	incf	??_main,f
  2154  0F58  0863               	movf	??_main+1,w
  2155  0F59  0084               	movwf	4
  2156  0F5A  1383               	bcf	3,7	;select IRP bank1
  2157  0F5B  0865               	movf	??_main+3,w
  2158  0F5C  0080               	movwf	0
  2159  0F5D  0AE3               	incf	??_main+1,f
  2160  0F5E  0BE4               	decfsz	??_main+2,f
  2161  0F5F  2F52               	goto	u3500
  2162                           
  2163                           ;main.c: 132: int FMRX_Nprg[5] = {2,4,8,8,7};
  2164  0F60  30B4               	movlw	main@FMRX_Nprg& (0+255)
  2165  0F61  0084               	movwf	4
  2166  0F62  30C2               	movlw	low main@F2017
  2167  0F63  00E2               	movwf	??_main
  2168  0F64  0804               	movf	4,w
  2169  0F65  00E3               	movwf	??_main+1
  2170  0F66  300A               	movlw	10
  2171  0F67  00E4               	movwf	??_main+2
  2172  0F68                     u3510:	
  2173  0F68  0862               	movf	??_main,w
  2174  0F69  0084               	movwf	4
  2175  0F6A  1783               	bsf	3,7	;select IRP bank3
  2176  0F6B  0800               	movf	0,w
  2177  0F6C  00E5               	movwf	??_main+3
  2178  0F6D  0AE2               	incf	??_main,f
  2179  0F6E  0863               	movf	??_main+1,w
  2180  0F6F  0084               	movwf	4
  2181  0F70  1383               	bcf	3,7	;select IRP bank1
  2182  0F71  0865               	movf	??_main+3,w
  2183  0F72  0080               	movwf	0
  2184  0F73  0AE3               	incf	??_main+1,f
  2185  0F74  0BE4               	decfsz	??_main+2,f
  2186  0F75  2F68               	goto	u3510
  2187                           
  2188                           ;main.c: 134: FMTX(FMTX_Nref, FMTX_Nprg);
  2189  0F76  1683               	bsf	3,5	;RP0=1, select bank1
  2190  0F77  1303               	bcf	3,6	;RP1=0, select bank1
  2191  0F78  0846               	movf	(_FMTX_Nref+1)^(0+128),w
  2192  0F79  1283               	bcf	3,5	;RP0=0, select bank0
  2193  0F7A  1303               	bcf	3,6	;RP1=0, select bank0
  2194  0F7B  00DD               	movwf	FMTX@Nref+1
  2195  0F7C  1683               	bsf	3,5	;RP0=1, select bank1
  2196  0F7D  1303               	bcf	3,6	;RP1=0, select bank1
  2197  0F7E  0845               	movf	_FMTX_Nref^(0+128),w
  2198  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  2199  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  2200  0F81  00DC               	movwf	FMTX@Nref
  2201  0F82  30A0               	movlw	(low (main@FMTX_Nprg| 0))& (0+255)
  2202  0F83  00DE               	movwf	FMTX@Nprg
  2203  0F84  3000               	movlw	0
  2204  0F85  00DF               	movwf	FMTX@Nprg+1
  2205  0F86  120A  158A  2144  120A  158A  	fcall	_FMTX
  2206                           
  2207                           ;main.c: 135: CWTX(CWTX_Nref, CWTX_Nprg);
  2208  0F8B  1683               	bsf	3,5	;RP0=1, select bank1
  2209  0F8C  1303               	bcf	3,6	;RP1=0, select bank1
  2210  0F8D  0844               	movf	(_CWTX_Nref+1)^(0+128),w
  2211  0F8E  1283               	bcf	3,5	;RP0=0, select bank0
  2212  0F8F  1303               	bcf	3,6	;RP1=0, select bank0
  2213  0F90  00DD               	movwf	CWTX@Nref+1
  2214  0F91  1683               	bsf	3,5	;RP0=1, select bank1
  2215  0F92  1303               	bcf	3,6	;RP1=0, select bank1
  2216  0F93  0843               	movf	_CWTX_Nref^(0+128),w
  2217  0F94  1283               	bcf	3,5	;RP0=0, select bank0
  2218  0F95  1303               	bcf	3,6	;RP1=0, select bank0
  2219  0F96  00DC               	movwf	CWTX@Nref
  2220  0F97  30AA               	movlw	(low (main@CWTX_Nprg| 0))& (0+255)
  2221  0F98  00DE               	movwf	CWTX@Nprg
  2222  0F99  3000               	movlw	0
  2223  0F9A  00DF               	movwf	CWTX@Nprg+1
  2224  0F9B  120A  158A  20EC  120A  158A  	fcall	_CWTX
  2225                           
  2226                           ;main.c: 136: FMRX(FMRX_Nref, FMRX_Nprg);
  2227  0FA0  1683               	bsf	3,5	;RP0=1, select bank1
  2228  0FA1  1303               	bcf	3,6	;RP1=0, select bank1
  2229  0FA2  0842               	movf	(_FMRX_Nref+1)^(0+128),w
  2230  0FA3  1283               	bcf	3,5	;RP0=0, select bank0
  2231  0FA4  1303               	bcf	3,6	;RP1=0, select bank0
  2232  0FA5  00DD               	movwf	FMRX@Nref+1
  2233  0FA6  1683               	bsf	3,5	;RP0=1, select bank1
  2234  0FA7  1303               	bcf	3,6	;RP1=0, select bank1
  2235  0FA8  0841               	movf	_FMRX_Nref^(0+128),w
  2236  0FA9  1283               	bcf	3,5	;RP0=0, select bank0
  2237  0FAA  1303               	bcf	3,6	;RP1=0, select bank0
  2238  0FAB  00DC               	movwf	FMRX@Nref
  2239  0FAC  30B4               	movlw	(low (main@FMRX_Nprg| 0))& (0+255)
  2240  0FAD  00DE               	movwf	FMRX@Nprg
  2241  0FAE  3000               	movlw	0
  2242  0FAF  00DF               	movwf	FMRX@Nprg+1
  2243  0FB0  120A  158A  2118  120A  158A  	fcall	_FMRX
  2244                           
  2245                           ;main.c: 137: _delay((unsigned long)((500)*(10000000/4000.0)));
  2246  0FB5  3007               	movlw	7
  2247  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  2248  0FB7  1303               	bcf	3,6	;RP1=0, select bank0
  2249  0FB8  00E4               	movwf	??_main+2
  2250  0FB9  3058               	movlw	88
  2251  0FBA  00E3               	movwf	??_main+1
  2252  0FBB  3059               	movlw	89
  2253  0FBC  00E2               	movwf	??_main
  2254  0FBD                     u3607:	
  2255  0FBD  0BE2               	decfsz	??_main,f
  2256  0FBE  2FBD               	goto	u3607
  2257  0FBF  0BE3               	decfsz	??_main+1,f
  2258  0FC0  2FBD               	goto	u3607
  2259  0FC1  0BE4               	decfsz	??_main+2,f
  2260  0FC2  2FBD               	goto	u3607
  2261                           
  2262                           ;main.c: 154: }
  2263                           
  2264                           ;main.c: 153: break;
  2265                           
  2266                           ;main.c: 151: default:
  2267                           
  2268                           ;main.c: 150: break;
  2269                           
  2270                           ;main.c: 148: case 'T':
  2271                           
  2272                           ;main.c: 147: break;
  2273                           
  2274                           ;main.c: 145: case 'N':
  2275                           
  2276                           ;main.c: 144: break;
  2277                           
  2278                           ;main.c: 142: case '3':
  2279                           
  2280                           ;main.c: 141: break;
  2281                           
  2282                           ;main.c: 139: case 'I':
  2283                           
  2284                           ;main.c: 138: break;
  2285  0FC3  2FF1               	goto	l442
  2286  0FC4                     l3816:	
  2287  0FC4  1683               	bsf	3,5	;RP0=1, select bank1
  2288  0FC5  1303               	bcf	3,6	;RP1=0, select bank1
  2289  0FC6  0840               	movf	main@dData^(0+128),w
  2290  0FC7  3E03               	addlw	3
  2291  0FC8  0084               	movwf	4
  2292  0FC9  1783               	bsf	3,7	;select IRP bank2
  2293  0FCA  0800               	movf	0,w
  2294                           
  2295                           ; Switch size 1, requested type "space"
  2296                           ; Number of cases is 5, Range of values is 51 to 84
  2297                           ; switch strategies available:
  2298                           ; Name         Instructions Cycles
  2299                           ; simple_byte           16     9 (average)
  2300                           ; direct_byte          113    11 (fixed)
  2301                           ; jumptable            263     9 (fixed)
  2302                           ;	Chosen strategy is simple_byte
  2303  0FCB  3A33               	xorlw	51	; case 51
  2304  0FCC  1903               	skipnz
  2305  0FCD  2FF1               	goto	l442
  2306  0FCE  3A76               	xorlw	118	; case 69
  2307  0FCF  1903               	skipnz
  2308  0FD0  2F10               	goto	l3794
  2309  0FD1  3A0C               	xorlw	12	; case 73
  2310  0FD2  1903               	skipnz
  2311  0FD3  2FF1               	goto	l442
  2312  0FD4  3A07               	xorlw	7	; case 78
  2313  0FD5  1903               	skipnz
  2314  0FD6  2FF1               	goto	l442
  2315  0FD7  3A1A               	xorlw	26	; case 84
  2316  0FD8  1903               	skipnz
  2317  0FD9  2FF1               	goto	l442
  2318  0FDA  2FF1               	goto	l442
  2319                           
  2320                           ;main.c: 158: }
  2321                           ;main.c: 159: }else{
  2322                           
  2323                           ;main.c: 156: }else if(dData[2] == 't'){
  2324  0FDB  2FF1               	goto	l442
  2325  0FDC                     l443:	
  2326                           
  2327                           ;main.c: 160: RB2 = 1;
  2328  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  2329  0FDD  1303               	bcf	3,6	;RP1=0, select bank0
  2330  0FDE  1506               	bsf	6,2	;volatile
  2331                           
  2332                           ;main.c: 161: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2333  0FDF  300D               	movlw	13
  2334  0FE0  1283               	bcf	3,5	;RP0=0, select bank0
  2335  0FE1  1303               	bcf	3,6	;RP1=0, select bank0
  2336  0FE2  00E4               	movwf	??_main+2
  2337  0FE3  30AF               	movlw	175
  2338  0FE4  00E3               	movwf	??_main+1
  2339  0FE5  30B5               	movlw	181
  2340  0FE6  00E2               	movwf	??_main
  2341  0FE7                     u3617:	
  2342  0FE7  0BE2               	decfsz	??_main,f
  2343  0FE8  2FE7               	goto	u3617
  2344  0FE9  0BE3               	decfsz	??_main+1,f
  2345  0FEA  2FE7               	goto	u3617
  2346  0FEB  0BE4               	decfsz	??_main+2,f
  2347  0FEC  2FE7               	goto	u3617
  2348  0FED  2FEE               	nop2
  2349                           
  2350                           ;main.c: 162: RB2 = 0;
  2351  0FEE  1283               	bcf	3,5	;RP0=0, select bank0
  2352  0FEF  1303               	bcf	3,6	;RP1=0, select bank0
  2353  0FF0  1106               	bcf	6,2	;volatile
  2354  0FF1                     l442:	
  2355                           
  2356                           ;main.c: 163: }
  2357                           ;main.c: 207: _delay((unsigned long)((500)*(10000000/4000.0)));
  2358  0FF1  3007               	movlw	7
  2359  0FF2  1283               	bcf	3,5	;RP0=0, select bank0
  2360  0FF3  1303               	bcf	3,6	;RP1=0, select bank0
  2361  0FF4  00E4               	movwf	??_main+2
  2362  0FF5  3058               	movlw	88
  2363  0FF6  00E3               	movwf	??_main+1
  2364  0FF7  3059               	movlw	89
  2365  0FF8  00E2               	movwf	??_main
  2366  0FF9                     u3627:	
  2367  0FF9  0BE2               	decfsz	??_main,f
  2368  0FFA  2FF9               	goto	u3627
  2369  0FFB  0BE3               	decfsz	??_main+1,f
  2370  0FFC  2FF9               	goto	u3627
  2371  0FFD  0BE4               	decfsz	??_main+2,f
  2372  0FFE  2FF9               	goto	u3627
  2373  0FFF  2E97               	goto	l3766
  2374  1000                     __end_of_main:	
  2375                           ;main.c: 208: }
  2376                           ;main.c: 209: return;
  2377                           
  2378                           
  2379                           	psect	text1
  2380  09D2                     __ptext1:	
  2381 ;; *************** function _TXOBC_waddress *****************
  2382 ;; Defined at:
  2383 ;;		line 78 in file "UART.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;  TXOBC_wad_he    1    wreg     unsigned char 
  2386 ;;  whigh_addres    1    1[COMMON] unsigned char 
  2387 ;;  wlow_address    1    2[COMMON] unsigned char 
  2388 ;; Auto vars:     Size  Location     Type
  2389 ;;  TXOBC_wad_he    1    5[COMMON] unsigned char 
  2390 ;; Return value:  Size  Location     Type
  2391 ;;                  1    wreg      void 
  2392 ;; Registers used:
  2393 ;;		wreg, status,2, status,0, pclath, cstack
  2394 ;; Tracked objects:
  2395 ;;		On entry : 0/0
  2396 ;;		On exit  : 0/0
  2397 ;;		Unchanged: 0/0
  2398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2399 ;;      Params:         2       0       0       0       0
  2400 ;;      Locals:         1       0       0       0       0
  2401 ;;      Temps:          2       0       0       0       0
  2402 ;;      Totals:         5       0       0       0       0
  2403 ;;Total ram usage:        5 bytes
  2404 ;; Hardware stack levels used:    1
  2405 ;; Hardware stack levels required when called:    1
  2406 ;; This function calls:
  2407 ;;		_putch
  2408 ;; This function is called by:
  2409 ;;		_main
  2410 ;; This function uses a non-reentrant model
  2411 ;;
  2412                           
  2413                           
  2414                           ;psect for function _TXOBC_waddress
  2415  09D2                     _TXOBC_waddress:	
  2416                           
  2417                           ;incstack = 0
  2418                           ; Regs used in _TXOBC_waddress: [wreg+status,2+status,0+pclath+cstack]
  2419                           ;TXOBC_waddress@TXOBC_wad_header stored from wreg
  2420  09D2  00F5               	movwf	TXOBC_waddress@TXOBC_wad_header
  2421                           
  2422                           ;UART.c: 79: RC5 = 1;
  2423  09D3  1283               	bcf	3,5	;RP0=0, select bank0
  2424  09D4  1303               	bcf	3,6	;RP1=0, select bank0
  2425  09D5  1687               	bsf	7,5	;volatile
  2426                           
  2427                           ;UART.c: 80: _delay((unsigned long)((50)*(10000000/4000.0)));
  2428  09D6  30A3               	movlw	163
  2429  09D7  00F4               	movwf	??_TXOBC_waddress+1
  2430  09D8  3055               	movlw	85
  2431  09D9  00F3               	movwf	??_TXOBC_waddress
  2432  09DA                     u3637:	
  2433  09DA  0BF3               	decfsz	??_TXOBC_waddress,f
  2434  09DB  29DA               	goto	u3637
  2435  09DC  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2436  09DD  29DA               	goto	u3637
  2437                           
  2438                           ;UART.c: 81: putch(TXOBC_wad_header);
  2439  09DE  0875               	movf	TXOBC_waddress@TXOBC_wad_header,w
  2440  09DF  160A  118A  27F0  120A  158A  	fcall	_putch
  2441                           
  2442                           ;UART.c: 82: _delay((unsigned long)((50)*(10000000/4000.0)));
  2443  09E4  30A3               	movlw	163
  2444  09E5  00F4               	movwf	??_TXOBC_waddress+1
  2445  09E6  3055               	movlw	85
  2446  09E7  00F3               	movwf	??_TXOBC_waddress
  2447  09E8                     u3647:	
  2448  09E8  0BF3               	decfsz	??_TXOBC_waddress,f
  2449  09E9  29E8               	goto	u3647
  2450  09EA  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2451  09EB  29E8               	goto	u3647
  2452                           
  2453                           ;UART.c: 83: putch(whigh_address);
  2454  09EC  0871               	movf	TXOBC_waddress@whigh_address,w
  2455  09ED  160A  118A  27F0  120A  158A  	fcall	_putch
  2456                           
  2457                           ;UART.c: 84: _delay((unsigned long)((50)*(10000000/4000.0)));
  2458  09F2  30A3               	movlw	163
  2459  09F3  00F4               	movwf	??_TXOBC_waddress+1
  2460  09F4  3055               	movlw	85
  2461  09F5  00F3               	movwf	??_TXOBC_waddress
  2462  09F6                     u3657:	
  2463  09F6  0BF3               	decfsz	??_TXOBC_waddress,f
  2464  09F7  29F6               	goto	u3657
  2465  09F8  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2466  09F9  29F6               	goto	u3657
  2467                           
  2468                           ;UART.c: 85: putch(wlow_address);
  2469  09FA  0872               	movf	TXOBC_waddress@wlow_address,w
  2470  09FB  160A  118A  27F0  120A  158A  	fcall	_putch
  2471                           
  2472                           ;UART.c: 86: _delay((unsigned long)((50)*(10000000/4000.0)));
  2473  0A00  30A3               	movlw	163
  2474  0A01  00F4               	movwf	??_TXOBC_waddress+1
  2475  0A02  3055               	movlw	85
  2476  0A03  00F3               	movwf	??_TXOBC_waddress
  2477  0A04                     u3667:	
  2478  0A04  0BF3               	decfsz	??_TXOBC_waddress,f
  2479  0A05  2A04               	goto	u3667
  2480  0A06  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2481  0A07  2A04               	goto	u3667
  2482                           
  2483                           ;UART.c: 87: RC5 = 0;
  2484  0A08  1283               	bcf	3,5	;RP0=0, select bank0
  2485  0A09  1303               	bcf	3,6	;RP1=0, select bank0
  2486  0A0A  1287               	bcf	7,5	;volatile
  2487  0A0B  0008               	return
  2488  0A0C                     __end_of_TXOBC_waddress:	
  2489                           
  2490                           	psect	text2
  2491  0007                     __ptext2:	
  2492 ;; *************** function _Reset_EPS *****************
  2493 ;; Defined at:
  2494 ;;		line 19 in file "EPS.c"
  2495 ;; Parameters:    Size  Location     Type
  2496 ;;		None
  2497 ;; Auto vars:     Size  Location     Type
  2498 ;;		None
  2499 ;; Return value:  Size  Location     Type
  2500 ;;                  1    wreg      void 
  2501 ;; Registers used:
  2502 ;;		wreg
  2503 ;; Tracked objects:
  2504 ;;		On entry : 0/0
  2505 ;;		On exit  : 0/0
  2506 ;;		Unchanged: 0/0
  2507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2508 ;;      Params:         0       0       0       0       0
  2509 ;;      Locals:         0       0       0       0       0
  2510 ;;      Temps:          3       0       0       0       0
  2511 ;;      Totals:         3       0       0       0       0
  2512 ;;Total ram usage:        3 bytes
  2513 ;; Hardware stack levels used:    1
  2514 ;; This function calls:
  2515 ;;		Nothing
  2516 ;; This function is called by:
  2517 ;;		_main
  2518 ;; This function uses a non-reentrant model
  2519 ;;
  2520                           
  2521                           
  2522                           ;psect for function _Reset_EPS
  2523  0007                     _Reset_EPS:	
  2524                           
  2525                           ;EPS.c: 20: RB4 = 1;
  2526                           
  2527                           ;incstack = 0
  2528                           ; Regs used in _Reset_EPS: [wreg]
  2529  0007  1283               	bcf	3,5	;RP0=0, select bank0
  2530  0008  1303               	bcf	3,6	;RP1=0, select bank0
  2531  0009  1606               	bsf	6,4	;volatile
  2532                           
  2533                           ;EPS.c: 21: RA1 = 1;
  2534  000A  1485               	bsf	5,1	;volatile
  2535                           
  2536                           ;EPS.c: 22: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2537  000B  3040               	movlw	64
  2538  000C  00F2               	movwf	??_Reset_EPS+2
  2539  000D  306A               	movlw	106
  2540  000E  00F1               	movwf	??_Reset_EPS+1
  2541  000F  3097               	movlw	151
  2542  0010  00F0               	movwf	??_Reset_EPS
  2543  0011                     u3677:	
  2544  0011  0BF0               	decfsz	??_Reset_EPS,f
  2545  0012  2811               	goto	u3677
  2546  0013  0BF1               	decfsz	??_Reset_EPS+1,f
  2547  0014  2811               	goto	u3677
  2548  0015  0BF2               	decfsz	??_Reset_EPS+2,f
  2549  0016  2811               	goto	u3677
  2550  0017  2818               	nop2
  2551                           
  2552                           ;EPS.c: 23: RB4 = 0;
  2553  0018  1283               	bcf	3,5	;RP0=0, select bank0
  2554  0019  1303               	bcf	3,6	;RP1=0, select bank0
  2555  001A  1206               	bcf	6,4	;volatile
  2556                           
  2557                           ;EPS.c: 24: RA1 = 0;
  2558  001B  1085               	bcf	5,1	;volatile
  2559                           
  2560                           ;EPS.c: 25: _delay((unsigned long)((500)*(10000000/4000.0)));
  2561  001C  3007               	movlw	7
  2562  001D  00F2               	movwf	??_Reset_EPS+2
  2563  001E  3058               	movlw	88
  2564  001F  00F1               	movwf	??_Reset_EPS+1
  2565  0020  3059               	movlw	89
  2566  0021  00F0               	movwf	??_Reset_EPS
  2567  0022                     u3687:	
  2568  0022  0BF0               	decfsz	??_Reset_EPS,f
  2569  0023  2822               	goto	u3687
  2570  0024  0BF1               	decfsz	??_Reset_EPS+1,f
  2571  0025  2822               	goto	u3687
  2572  0026  0BF2               	decfsz	??_Reset_EPS+2,f
  2573  0027  2822               	goto	u3687
  2574  0028  2829               	nop2
  2575  0029  0008               	return
  2576  002A                     __end_of_Reset_EPS:	
  2577                           
  2578                           	psect	text3
  2579  0C59                     __ptext3:	
  2580 ;; *************** function _ReceivePacket_data *****************
  2581 ;; Defined at:
  2582 ;;		line 359 in file "decode_AX25.c"
  2583 ;; Parameters:    Size  Location     Type
  2584 ;;		None
  2585 ;; Auto vars:     Size  Location     Type
  2586 ;;  i               2   31[BANK0 ] unsigned int 
  2587 ;;  fcschecker      2   29[BANK0 ] unsigned int 
  2588 ;; Return value:  Size  Location     Type
  2589 ;;                  1    wreg      PTR unsigned char 
  2590 ;; Registers used:
  2591 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2592 ;; Tracked objects:
  2593 ;;		On entry : 0/0
  2594 ;;		On exit  : 0/0
  2595 ;;		Unchanged: 0/0
  2596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2597 ;;      Params:         0       0       0       0       0
  2598 ;;      Locals:         0       4       0       0       0
  2599 ;;      Temps:          2       0       0       0       0
  2600 ;;      Totals:         2       4       0       0       0
  2601 ;;Total ram usage:        6 bytes
  2602 ;; Hardware stack levels used:    1
  2603 ;; Hardware stack levels required when called:    2
  2604 ;; This function calls:
  2605 ;;		_fcscheck
  2606 ;;		_getdata
  2607 ;;		_waitFlag
  2608 ;; This function is called by:
  2609 ;;		_main
  2610 ;; This function uses a non-reentrant model
  2611 ;;
  2612                           
  2613                           
  2614                           ;psect for function _ReceivePacket_data
  2615  0C59                     _ReceivePacket_data:	
  2616                           
  2617                           ;decode_AX25.c: 360: UINT fcschecker;
  2618                           ;decode_AX25.c: 363: waitFlag();
  2619                           
  2620                           ;incstack = 0
  2621                           ; Regs used in _ReceivePacket_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2622  0C59  120A  118A  2327  120A  158A  	fcall	_waitFlag
  2623                           
  2624                           ;decode_AX25.c: 365: getdata();
  2625  0C5E  120A  158A  23F8  120A  158A  	fcall	_getdata
  2626                           
  2627                           ;decode_AX25.c: 367: fcschecker = fcscheck();
  2628  0C63  120A  118A  202A  120A  158A  	fcall	_fcscheck
  2629  0C68  0871               	movf	?_fcscheck+1,w
  2630  0C69  1283               	bcf	3,5	;RP0=0, select bank0
  2631  0C6A  1303               	bcf	3,6	;RP1=0, select bank0
  2632  0C6B  00BE               	movwf	ReceivePacket_data@fcschecker+1
  2633  0C6C  0870               	movf	?_fcscheck,w
  2634  0C6D  00BD               	movwf	ReceivePacket_data@fcschecker
  2635                           
  2636                           ;decode_AX25.c: 369: if(fcschecker == 1){
  2637  0C6E  033D               	decf	ReceivePacket_data@fcschecker,w
  2638  0C6F  043E               	iorwf	ReceivePacket_data@fcschecker+1,w
  2639  0C70  1D03               	btfss	3,2
  2640  0C71  2CB8               	goto	l3400
  2641                           
  2642                           ;decode_AX25.c: 370: for(UINT i=0; i<commandSize; i++){
  2643  0C72  01BF               	clrf	ReceivePacket_data@i
  2644  0C73  01C0               	clrf	ReceivePacket_data@i+1
  2645  0C74  3001               	movlw	low (_commandSize-__stringbase)
  2646  0C75  0084               	movwf	4
  2647  0C76  120A  158A  2000  120A  158A  	fcall	stringdir
  2648  0C7B  00FA               	movwf	??_ReceivePacket_data
  2649  0C7C  120A  158A  2000  120A  158A  	fcall	stringdir
  2650  0C81  00FB               	movwf	??_ReceivePacket_data+1
  2651  0C82  087B               	movf	??_ReceivePacket_data+1,w
  2652  0C83  0240               	subwf	ReceivePacket_data@i+1,w
  2653  0C84  1D03               	skipz
  2654  0C85  2C88               	goto	u3075
  2655  0C86  087A               	movf	??_ReceivePacket_data,w
  2656  0C87  023F               	subwf	ReceivePacket_data@i,w
  2657  0C88                     u3075:	
  2658  0C88  1803               	btfsc	3,0
  2659  0C89  2CB2               	goto	l3392
  2660  0C8A                     l3386:	
  2661                           
  2662                           ;decode_AX25.c: 371: dData[i] = dPacket[i+20];
  2663  0C8A  083F               	movf	ReceivePacket_data@i,w
  2664  0C8B  3E14               	addlw	20
  2665  0C8C  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2666  0C8D  0084               	movwf	4
  2667  0C8E  1783               	bsf	3,7	;select IRP bank3
  2668  0C8F  0800               	movf	0,w
  2669  0C90  00FA               	movwf	??_ReceivePacket_data
  2670  0C91  083F               	movf	ReceivePacket_data@i,w
  2671  0C92  3E30               	addlw	(low (_dData| (0+256)))& (0+255)
  2672  0C93  0084               	movwf	4
  2673  0C94  087A               	movf	??_ReceivePacket_data,w
  2674  0C95  0080               	movwf	0
  2675  0C96  3001               	movlw	1
  2676  0C97  07BF               	addwf	ReceivePacket_data@i,f
  2677  0C98  1803               	skipnc
  2678  0C99  0AC0               	incf	ReceivePacket_data@i+1,f
  2679  0C9A  3000               	movlw	0
  2680  0C9B  07C0               	addwf	ReceivePacket_data@i+1,f
  2681  0C9C  3001               	movlw	low (_commandSize-__stringbase)
  2682  0C9D  0084               	movwf	4
  2683  0C9E  120A  158A  2000  120A  158A  	fcall	stringdir
  2684  0CA3  00FA               	movwf	??_ReceivePacket_data
  2685  0CA4  120A  158A  2000  120A  158A  	fcall	stringdir
  2686  0CA9  00FB               	movwf	??_ReceivePacket_data+1
  2687  0CAA  087B               	movf	??_ReceivePacket_data+1,w
  2688  0CAB  0240               	subwf	ReceivePacket_data@i+1,w
  2689  0CAC  1D03               	skipz
  2690  0CAD  2CB0               	goto	u3085
  2691  0CAE  087A               	movf	??_ReceivePacket_data,w
  2692  0CAF  023F               	subwf	ReceivePacket_data@i,w
  2693  0CB0                     u3085:	
  2694  0CB0  1C03               	skipc
  2695  0CB1  2C8A               	goto	l3386
  2696  0CB2                     l3392:	
  2697                           
  2698                           ;decode_AX25.c: 372: }
  2699                           ;decode_AX25.c: 373: dPacketnum = 0;
  2700  0CB2  01E8               	clrf	_dPacketnum
  2701  0CB3  01E9               	clrf	_dPacketnum+1
  2702                           
  2703                           ;decode_AX25.c: 374: rcv_state = 0;
  2704  0CB4  01EA               	clrf	_rcv_state
  2705  0CB5  01EB               	clrf	_rcv_state+1
  2706                           
  2707                           ;decode_AX25.c: 375: return dData;
  2708  0CB6  3030               	movlw	(low (_dData| (0+256)))& (0+255)
  2709                           
  2710                           ;decode_AX25.c: 376: }else{
  2711  0CB7  0008               	return
  2712  0CB8                     l3400:	
  2713                           
  2714                           ;decode_AX25.c: 377: dPacketnum = 0;
  2715  0CB8  01E8               	clrf	_dPacketnum
  2716  0CB9  01E9               	clrf	_dPacketnum+1
  2717                           
  2718                           ;decode_AX25.c: 378: rcv_state = 0;
  2719  0CBA  01EA               	clrf	_rcv_state
  2720  0CBB  01EB               	clrf	_rcv_state+1
  2721                           
  2722                           ;decode_AX25.c: 379: return 0x00;
  2723  0CBC  3000               	movlw	0
  2724  0CBD  0008               	return
  2725  0CBE                     __end_of_ReceivePacket_data:	
  2726                           
  2727                           	psect	text4
  2728  0327                     __ptext4:	
  2729 ;; *************** function _waitFlag *****************
  2730 ;; Defined at:
  2731 ;;		line 54 in file "decode_AX25.c"
  2732 ;; Parameters:    Size  Location     Type
  2733 ;;		None
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;  j               2   24[BANK0 ] unsigned int 
  2736 ;;  j               2   10[BANK0 ] unsigned int 
  2737 ;;  j               2   22[BANK0 ] unsigned int 
  2738 ;;  j               2    8[BANK0 ] unsigned int 
  2739 ;;  j               2   20[BANK0 ] unsigned int 
  2740 ;;  j               2    6[BANK0 ] unsigned int 
  2741 ;;  j               2   18[BANK0 ] unsigned int 
  2742 ;;  j               2    4[BANK0 ] unsigned int 
  2743 ;;  j               2   16[BANK0 ] unsigned int 
  2744 ;;  j               2    2[BANK0 ] unsigned int 
  2745 ;;  i               2    0[BANK0 ] unsigned int 
  2746 ;;  j               2   14[BANK0 ] unsigned int 
  2747 ;;  j               2   12[BANK0 ] unsigned int 
  2748 ;;  flag_judge      2   26[BANK0 ] unsigned int 
  2749 ;;  buf             1   28[BANK0 ] unsigned char 
  2750 ;; Return value:  Size  Location     Type
  2751 ;;                  1    wreg      void 
  2752 ;; Registers used:
  2753 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2754 ;; Tracked objects:
  2755 ;;		On entry : 0/0
  2756 ;;		On exit  : 0/0
  2757 ;;		Unchanged: 0/0
  2758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2759 ;;      Params:         0       0       0       0       0
  2760 ;;      Locals:         0      29       0       0       0
  2761 ;;      Temps:          4       0       0       0       0
  2762 ;;      Totals:         4      29       0       0       0
  2763 ;;Total ram usage:       33 bytes
  2764 ;; Hardware stack levels used:    1
  2765 ;; Hardware stack levels required when called:    1
  2766 ;; This function calls:
  2767 ;;		_getbit
  2768 ;; This function is called by:
  2769 ;;		_ReceivePacket_data
  2770 ;;		_ReceivePacket
  2771 ;; This function uses a non-reentrant model
  2772 ;;
  2773                           
  2774                           
  2775                           ;psect for function _waitFlag
  2776  0327                     _waitFlag:	
  2777                           
  2778                           ;decode_AX25.c: 55: UINT flag_judge;
  2779                           ;decode_AX25.c: 56: UBYTE buf = 0xff;
  2780                           
  2781                           ;incstack = 0
  2782                           ; Regs used in _waitFlag: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2783  0327  30FF               	movlw	255
  2784  0328  00F6               	movwf	??_waitFlag
  2785  0329  0876               	movf	??_waitFlag,w
  2786  032A  1283               	bcf	3,5	;RP0=0, select bank0
  2787  032B  1303               	bcf	3,6	;RP1=0, select bank0
  2788  032C  00BC               	movwf	waitFlag@buf
  2789  032D                     L6:	
  2790                           
  2791                           ;decode_AX25.c: 271: rcv_state = 0;
  2792  032D  01EA               	clrf	_rcv_state
  2793  032E  01EB               	clrf	_rcv_state+1
  2794  032F                     l3070:	
  2795  032F  3000               	movlw	0
  2796  0330  026B               	subwf	_rcv_state+1,w
  2797  0331  3002               	movlw	2
  2798  0332  1903               	skipnz
  2799  0333  026A               	subwf	_rcv_state,w
  2800  0334  1803               	btfsc	3,0
  2801  0335  0008               	return
  2802  0336                     l2704:	
  2803                           ;decode_AX25.c: 59: while(buf != 0x7e){
  2804                           
  2805                           ;decode_AX25.c: 58: while(rcv_state < 2){
  2806                           
  2807                           ;decode_AX25.c: 57: rcv_state = 0;
  2808                           
  2809  0336  307E               	movlw	126
  2810  0337  063C               	xorwf	waitFlag@buf,w
  2811  0338  1903               	btfsc	3,2
  2812  0339  2B86               	goto	l2726
  2813                           
  2814                           ;decode_AX25.c: 60: flag_judge = getbit();
  2815  033A  120A  158A  2298  120A  118A  	fcall	_getbit
  2816  033F  0871               	movf	?_getbit+1,w
  2817  0340  1283               	bcf	3,5	;RP0=0, select bank0
  2818  0341  1303               	bcf	3,6	;RP1=0, select bank0
  2819  0342  00BB               	movwf	waitFlag@flag_judge+1
  2820  0343  0870               	movf	?_getbit,w
  2821  0344  00BA               	movwf	waitFlag@flag_judge
  2822                           
  2823                           ;decode_AX25.c: 61: buf = buf << 1;
  2824  0345  083C               	movf	waitFlag@buf,w
  2825  0346  00F6               	movwf	??_waitFlag
  2826  0347  0776               	addwf	??_waitFlag,w
  2827  0348  00F7               	movwf	??_waitFlag+1
  2828  0349  0877               	movf	??_waitFlag+1,w
  2829  034A  00BC               	movwf	waitFlag@buf
  2830                           
  2831                           ;decode_AX25.c: 63: buf = buf | 0x00;
  2832  034B  083A               	movf	waitFlag@flag_judge,w
  2833  034C  043B               	iorwf	waitFlag@flag_judge+1,w
  2834  034D  1903               	btfsc	3,2
  2835  034E  2B36               	goto	l2704
  2836                           
  2837                           ;decode_AX25.c: 65: buf = buf | 0x01;
  2838                           
  2839                           ;decode_AX25.c: 64: }else{
  2840  034F  083C               	movf	waitFlag@buf,w
  2841  0350  3801               	iorlw	1
  2842  0351  00F6               	movwf	??_waitFlag
  2843  0352  0876               	movf	??_waitFlag,w
  2844  0353  00BC               	movwf	waitFlag@buf
  2845  0354  2B36               	goto	l2704
  2846  0355                     l2706:	
  2847                           ;decode_AX25.c: 66: }
  2848                           ;decode_AX25.c: 67: }
  2849                           ;decode_AX25.c: 71: while(buf == 0x7e){
  2850                           
  2851                           
  2852                           ;decode_AX25.c: 72: for(UINT i=0;i<8;i++){
  2853  0355  01A0               	clrf	waitFlag@i
  2854  0356  01A1               	clrf	waitFlag@i+1
  2855  0357  3000               	movlw	0
  2856  0358  0221               	subwf	waitFlag@i+1,w
  2857  0359  3008               	movlw	8
  2858  035A  1903               	skipnz
  2859  035B  0220               	subwf	waitFlag@i,w
  2860  035C  1803               	btfsc	3,0
  2861  035D  2B86               	goto	l2726
  2862  035E                     l2712:	
  2863                           
  2864                           ;decode_AX25.c: 73: flag_judge = getbit();
  2865  035E  120A  158A  2298  120A  118A  	fcall	_getbit
  2866  0363  0871               	movf	?_getbit+1,w
  2867  0364  1283               	bcf	3,5	;RP0=0, select bank0
  2868  0365  1303               	bcf	3,6	;RP1=0, select bank0
  2869  0366  00BB               	movwf	waitFlag@flag_judge+1
  2870  0367  0870               	movf	?_getbit,w
  2871  0368  00BA               	movwf	waitFlag@flag_judge
  2872                           
  2873                           ;decode_AX25.c: 74: buf = buf >> 1;
  2874  0369  083C               	movf	waitFlag@buf,w
  2875  036A  00F6               	movwf	??_waitFlag
  2876  036B  1003               	clrc
  2877  036C  0C76               	rrf	??_waitFlag,w
  2878  036D  00F7               	movwf	??_waitFlag+1
  2879  036E  0877               	movf	??_waitFlag+1,w
  2880  036F  00BC               	movwf	waitFlag@buf
  2881                           
  2882                           ;decode_AX25.c: 76: buf = buf | 0x00;
  2883  0370  083A               	movf	waitFlag@flag_judge,w
  2884  0371  043B               	iorwf	waitFlag@flag_judge+1,w
  2885  0372  1903               	btfsc	3,2
  2886  0373  2B79               	goto	l2722
  2887                           
  2888                           ;decode_AX25.c: 78: buf = buf | 0x80;
  2889                           
  2890                           ;decode_AX25.c: 77: }else{
  2891  0374  083C               	movf	waitFlag@buf,w
  2892  0375  3880               	iorlw	128
  2893  0376  00F6               	movwf	??_waitFlag
  2894  0377  0876               	movf	??_waitFlag,w
  2895  0378  00BC               	movwf	waitFlag@buf
  2896  0379                     l2722:	
  2897  0379  3001               	movlw	1
  2898  037A  07A0               	addwf	waitFlag@i,f
  2899  037B  1803               	skipnc
  2900  037C  0AA1               	incf	waitFlag@i+1,f
  2901  037D  3000               	movlw	0
  2902  037E  07A1               	addwf	waitFlag@i+1,f
  2903  037F  3000               	movlw	0
  2904  0380  0221               	subwf	waitFlag@i+1,w
  2905  0381  3008               	movlw	8
  2906  0382  1903               	skipnz
  2907  0383  0220               	subwf	waitFlag@i,w
  2908  0384  1C03               	skipc
  2909  0385  2B5E               	goto	l2712
  2910  0386                     l2726:	
  2911  0386  307E               	movlw	126
  2912  0387  063C               	xorwf	waitFlag@buf,w
  2913  0388  1903               	btfsc	3,2
  2914  0389  2B55               	goto	l2706
  2915                           
  2916                           ;decode_AX25.c: 79: }
  2917                           ;decode_AX25.c: 80: }
  2918                           ;decode_AX25.c: 81: }
  2919                           ;decode_AX25.c: 82: if(buf == ("JQ1YCZ"[0] << 1)){
  2920  038A  300A               	movlw	low (STR_1-__stringbase)
  2921  038B  0084               	movwf	4
  2922  038C  120A  158A  2000  120A  118A  	fcall	stringdir
  2923  0391  00F6               	movwf	??_waitFlag
  2924  0392  01F7               	clrf	??_waitFlag+1
  2925  0393  1003               	clrc
  2926  0394  0DF6               	rlf	??_waitFlag,f
  2927  0395  0DF7               	rlf	??_waitFlag+1,f
  2928  0396  083C               	movf	waitFlag@buf,w
  2929  0397  00F8               	movwf	??_waitFlag+2
  2930  0398  01F9               	clrf	??_waitFlag+3
  2931  0399  0877               	movf	??_waitFlag+1,w
  2932  039A  0679               	xorwf	??_waitFlag+3,w
  2933  039B  1D03               	skipz
  2934  039C  2B9F               	goto	u2165
  2935  039D  0876               	movf	??_waitFlag,w
  2936  039E  0678               	xorwf	??_waitFlag+2,w
  2937  039F                     u2165:	
  2938  039F  1D03               	skipz
  2939  03A0  2D64               	goto	l2876
  2940                           
  2941                           ;decode_AX25.c: 83: dPacket[dPacketnum] = buf;
  2942  03A1  083C               	movf	waitFlag@buf,w
  2943  03A2  00F6               	movwf	??_waitFlag
  2944  03A3  0868               	movf	_dPacketnum,w
  2945  03A4  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2946  03A5  0084               	movwf	4
  2947  03A6  0876               	movf	??_waitFlag,w
  2948  03A7  1783               	bsf	3,7	;select IRP bank3
  2949  03A8  0080               	movwf	0
  2950                           
  2951                           ;decode_AX25.c: 84: dPacketnum ++;
  2952  03A9  3001               	movlw	1
  2953  03AA  07E8               	addwf	_dPacketnum,f
  2954  03AB  1803               	skipnc
  2955  03AC  0AE9               	incf	_dPacketnum+1,f
  2956  03AD  3000               	movlw	0
  2957  03AE  07E9               	addwf	_dPacketnum+1,f
  2958                           
  2959                           ;decode_AX25.c: 85: for(UINT j=0;j<8;j++){
  2960  03AF  01A2               	clrf	waitFlag@j
  2961  03B0  01A3               	clrf	waitFlag@j+1
  2962  03B1  3000               	movlw	0
  2963  03B2  0223               	subwf	waitFlag@j+1,w
  2964  03B3  3008               	movlw	8
  2965  03B4  1903               	skipnz
  2966  03B5  0222               	subwf	waitFlag@j,w
  2967  03B6  1803               	btfsc	3,0
  2968  03B7  2BE0               	goto	l2754
  2969  03B8                     l2740:	
  2970                           
  2971                           ;decode_AX25.c: 86: flag_judge = getbit();
  2972  03B8  120A  158A  2298  120A  118A  	fcall	_getbit
  2973  03BD  0871               	movf	?_getbit+1,w
  2974  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  2975  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  2976  03C0  00BB               	movwf	waitFlag@flag_judge+1
  2977  03C1  0870               	movf	?_getbit,w
  2978  03C2  00BA               	movwf	waitFlag@flag_judge
  2979                           
  2980                           ;decode_AX25.c: 87: buf = buf >> 1;
  2981  03C3  083C               	movf	waitFlag@buf,w
  2982  03C4  00F6               	movwf	??_waitFlag
  2983  03C5  1003               	clrc
  2984  03C6  0C76               	rrf	??_waitFlag,w
  2985  03C7  00F7               	movwf	??_waitFlag+1
  2986  03C8  0877               	movf	??_waitFlag+1,w
  2987  03C9  00BC               	movwf	waitFlag@buf
  2988                           
  2989                           ;decode_AX25.c: 89: buf = buf | 0x00;
  2990  03CA  083A               	movf	waitFlag@flag_judge,w
  2991  03CB  043B               	iorwf	waitFlag@flag_judge+1,w
  2992  03CC  1903               	btfsc	3,2
  2993  03CD  2BD3               	goto	l2750
  2994                           
  2995                           ;decode_AX25.c: 91: buf = buf | 0x80;
  2996                           
  2997                           ;decode_AX25.c: 90: }else{
  2998  03CE  083C               	movf	waitFlag@buf,w
  2999  03CF  3880               	iorlw	128
  3000  03D0  00F6               	movwf	??_waitFlag
  3001  03D1  0876               	movf	??_waitFlag,w
  3002  03D2  00BC               	movwf	waitFlag@buf
  3003  03D3                     l2750:	
  3004  03D3  3001               	movlw	1
  3005  03D4  07A2               	addwf	waitFlag@j,f
  3006  03D5  1803               	skipnc
  3007  03D6  0AA3               	incf	waitFlag@j+1,f
  3008  03D7  3000               	movlw	0
  3009  03D8  07A3               	addwf	waitFlag@j+1,f
  3010  03D9  3000               	movlw	0
  3011  03DA  0223               	subwf	waitFlag@j+1,w
  3012  03DB  3008               	movlw	8
  3013  03DC  1903               	skipnz
  3014  03DD  0222               	subwf	waitFlag@j,w
  3015  03DE  1C03               	skipc
  3016  03DF  2BB8               	goto	l2740
  3017  03E0                     l2754:	
  3018                           
  3019                           ;decode_AX25.c: 92: }
  3020                           ;decode_AX25.c: 93: }
  3021                           ;decode_AX25.c: 94: if(buf == ("JQ1YCZ"[1] << 1)){
  3022  03E0  300B               	movlw	low (((STR_1+1)-__stringbase)| (0+32768))
  3023  03E1  0084               	movwf	4
  3024  03E2  120A  158A  2000  120A  118A  	fcall	stringdir
  3025  03E7  00F6               	movwf	??_waitFlag
  3026  03E8  01F7               	clrf	??_waitFlag+1
  3027  03E9  1003               	clrc
  3028  03EA  0DF6               	rlf	??_waitFlag,f
  3029  03EB  0DF7               	rlf	??_waitFlag+1,f
  3030  03EC  083C               	movf	waitFlag@buf,w
  3031  03ED  00F8               	movwf	??_waitFlag+2
  3032  03EE  01F9               	clrf	??_waitFlag+3
  3033  03EF  0877               	movf	??_waitFlag+1,w
  3034  03F0  0679               	xorwf	??_waitFlag+3,w
  3035  03F1  1D03               	skipz
  3036  03F2  2BF5               	goto	u2205
  3037  03F3  0876               	movf	??_waitFlag,w
  3038  03F4  0678               	xorwf	??_waitFlag+2,w
  3039  03F5                     u2205:	
  3040  03F5  1D03               	skipz
  3041  03F6  2D64               	goto	l2876
  3042                           
  3043                           ;decode_AX25.c: 95: dPacket[dPacketnum] = buf;
  3044  03F7  083C               	movf	waitFlag@buf,w
  3045  03F8  00F6               	movwf	??_waitFlag
  3046  03F9  0868               	movf	_dPacketnum,w
  3047  03FA  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3048  03FB  0084               	movwf	4
  3049  03FC  0876               	movf	??_waitFlag,w
  3050  03FD  1783               	bsf	3,7	;select IRP bank3
  3051  03FE  0080               	movwf	0
  3052                           
  3053                           ;decode_AX25.c: 96: dPacketnum ++;
  3054  03FF  3001               	movlw	1
  3055  0400  07E8               	addwf	_dPacketnum,f
  3056  0401  1803               	skipnc
  3057  0402  0AE9               	incf	_dPacketnum+1,f
  3058  0403  3000               	movlw	0
  3059  0404  07E9               	addwf	_dPacketnum+1,f
  3060                           
  3061                           ;decode_AX25.c: 97: for(UINT j=0;j<8;j++){
  3062  0405  01A4               	clrf	waitFlag@j_118
  3063  0406  01A5               	clrf	waitFlag@j_118+1
  3064  0407  3000               	movlw	0
  3065  0408  0225               	subwf	waitFlag@j_118+1,w
  3066  0409  3008               	movlw	8
  3067  040A  1903               	skipnz
  3068  040B  0224               	subwf	waitFlag@j_118,w
  3069  040C  1803               	btfsc	3,0
  3070  040D  2C36               	goto	l2780
  3071  040E                     l2766:	
  3072                           
  3073                           ;decode_AX25.c: 98: flag_judge = getbit();
  3074  040E  120A  158A  2298  120A  118A  	fcall	_getbit
  3075  0413  0871               	movf	?_getbit+1,w
  3076  0414  1283               	bcf	3,5	;RP0=0, select bank0
  3077  0415  1303               	bcf	3,6	;RP1=0, select bank0
  3078  0416  00BB               	movwf	waitFlag@flag_judge+1
  3079  0417  0870               	movf	?_getbit,w
  3080  0418  00BA               	movwf	waitFlag@flag_judge
  3081                           
  3082                           ;decode_AX25.c: 99: buf = buf >> 1;
  3083  0419  083C               	movf	waitFlag@buf,w
  3084  041A  00F6               	movwf	??_waitFlag
  3085  041B  1003               	clrc
  3086  041C  0C76               	rrf	??_waitFlag,w
  3087  041D  00F7               	movwf	??_waitFlag+1
  3088  041E  0877               	movf	??_waitFlag+1,w
  3089  041F  00BC               	movwf	waitFlag@buf
  3090                           
  3091                           ;decode_AX25.c: 101: buf = buf | 0x00;
  3092  0420  083A               	movf	waitFlag@flag_judge,w
  3093  0421  043B               	iorwf	waitFlag@flag_judge+1,w
  3094  0422  1903               	btfsc	3,2
  3095  0423  2C29               	goto	l2776
  3096                           
  3097                           ;decode_AX25.c: 103: buf = buf | 0x80;
  3098                           
  3099                           ;decode_AX25.c: 102: }else{
  3100  0424  083C               	movf	waitFlag@buf,w
  3101  0425  3880               	iorlw	128
  3102  0426  00F6               	movwf	??_waitFlag
  3103  0427  0876               	movf	??_waitFlag,w
  3104  0428  00BC               	movwf	waitFlag@buf
  3105  0429                     l2776:	
  3106  0429  3001               	movlw	1
  3107  042A  07A4               	addwf	waitFlag@j_118,f
  3108  042B  1803               	skipnc
  3109  042C  0AA5               	incf	waitFlag@j_118+1,f
  3110  042D  3000               	movlw	0
  3111  042E  07A5               	addwf	waitFlag@j_118+1,f
  3112  042F  3000               	movlw	0
  3113  0430  0225               	subwf	waitFlag@j_118+1,w
  3114  0431  3008               	movlw	8
  3115  0432  1903               	skipnz
  3116  0433  0224               	subwf	waitFlag@j_118,w
  3117  0434  1C03               	skipc
  3118  0435  2C0E               	goto	l2766
  3119  0436                     l2780:	
  3120                           
  3121                           ;decode_AX25.c: 104: }
  3122                           ;decode_AX25.c: 105: }
  3123                           ;decode_AX25.c: 106: if(buf == ("JQ1YCZ"[2] << 1)){
  3124  0436  300C               	movlw	low (((STR_1+2)-__stringbase)| (0+32768))
  3125  0437  0084               	movwf	4
  3126  0438  120A  158A  2000  120A  118A  	fcall	stringdir
  3127  043D  00F6               	movwf	??_waitFlag
  3128  043E  01F7               	clrf	??_waitFlag+1
  3129  043F  1003               	clrc
  3130  0440  0DF6               	rlf	??_waitFlag,f
  3131  0441  0DF7               	rlf	??_waitFlag+1,f
  3132  0442  083C               	movf	waitFlag@buf,w
  3133  0443  00F8               	movwf	??_waitFlag+2
  3134  0444  01F9               	clrf	??_waitFlag+3
  3135  0445  0877               	movf	??_waitFlag+1,w
  3136  0446  0679               	xorwf	??_waitFlag+3,w
  3137  0447  1D03               	skipz
  3138  0448  2C4B               	goto	u2245
  3139  0449  0876               	movf	??_waitFlag,w
  3140  044A  0678               	xorwf	??_waitFlag+2,w
  3141  044B                     u2245:	
  3142  044B  1D03               	skipz
  3143  044C  2D64               	goto	l2876
  3144                           
  3145                           ;decode_AX25.c: 107: dPacket[dPacketnum] = buf;
  3146  044D  083C               	movf	waitFlag@buf,w
  3147  044E  00F6               	movwf	??_waitFlag
  3148  044F  0868               	movf	_dPacketnum,w
  3149  0450  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3150  0451  0084               	movwf	4
  3151  0452  0876               	movf	??_waitFlag,w
  3152  0453  1783               	bsf	3,7	;select IRP bank3
  3153  0454  0080               	movwf	0
  3154                           
  3155                           ;decode_AX25.c: 108: dPacketnum ++;
  3156  0455  3001               	movlw	1
  3157  0456  07E8               	addwf	_dPacketnum,f
  3158  0457  1803               	skipnc
  3159  0458  0AE9               	incf	_dPacketnum+1,f
  3160  0459  3000               	movlw	0
  3161  045A  07E9               	addwf	_dPacketnum+1,f
  3162                           
  3163                           ;decode_AX25.c: 109: for(UINT j=0;j<8;j++){
  3164  045B  01A6               	clrf	waitFlag@j_120
  3165  045C  01A7               	clrf	waitFlag@j_120+1
  3166  045D  3000               	movlw	0
  3167  045E  0227               	subwf	waitFlag@j_120+1,w
  3168  045F  3008               	movlw	8
  3169  0460  1903               	skipnz
  3170  0461  0226               	subwf	waitFlag@j_120,w
  3171  0462  1803               	btfsc	3,0
  3172  0463  2C8C               	goto	l2806
  3173  0464                     l2792:	
  3174                           
  3175                           ;decode_AX25.c: 110: flag_judge = getbit();
  3176  0464  120A  158A  2298  120A  118A  	fcall	_getbit
  3177  0469  0871               	movf	?_getbit+1,w
  3178  046A  1283               	bcf	3,5	;RP0=0, select bank0
  3179  046B  1303               	bcf	3,6	;RP1=0, select bank0
  3180  046C  00BB               	movwf	waitFlag@flag_judge+1
  3181  046D  0870               	movf	?_getbit,w
  3182  046E  00BA               	movwf	waitFlag@flag_judge
  3183                           
  3184                           ;decode_AX25.c: 111: buf = buf >> 1;
  3185  046F  083C               	movf	waitFlag@buf,w
  3186  0470  00F6               	movwf	??_waitFlag
  3187  0471  1003               	clrc
  3188  0472  0C76               	rrf	??_waitFlag,w
  3189  0473  00F7               	movwf	??_waitFlag+1
  3190  0474  0877               	movf	??_waitFlag+1,w
  3191  0475  00BC               	movwf	waitFlag@buf
  3192                           
  3193                           ;decode_AX25.c: 113: buf = buf | 0x00;
  3194  0476  083A               	movf	waitFlag@flag_judge,w
  3195  0477  043B               	iorwf	waitFlag@flag_judge+1,w
  3196  0478  1903               	btfsc	3,2
  3197  0479  2C7F               	goto	l2802
  3198                           
  3199                           ;decode_AX25.c: 115: buf = buf | 0x80;
  3200                           
  3201                           ;decode_AX25.c: 114: }else{
  3202  047A  083C               	movf	waitFlag@buf,w
  3203  047B  3880               	iorlw	128
  3204  047C  00F6               	movwf	??_waitFlag
  3205  047D  0876               	movf	??_waitFlag,w
  3206  047E  00BC               	movwf	waitFlag@buf
  3207  047F                     l2802:	
  3208  047F  3001               	movlw	1
  3209  0480  07A6               	addwf	waitFlag@j_120,f
  3210  0481  1803               	skipnc
  3211  0482  0AA7               	incf	waitFlag@j_120+1,f
  3212  0483  3000               	movlw	0
  3213  0484  07A7               	addwf	waitFlag@j_120+1,f
  3214  0485  3000               	movlw	0
  3215  0486  0227               	subwf	waitFlag@j_120+1,w
  3216  0487  3008               	movlw	8
  3217  0488  1903               	skipnz
  3218  0489  0226               	subwf	waitFlag@j_120,w
  3219  048A  1C03               	skipc
  3220  048B  2C64               	goto	l2792
  3221  048C                     l2806:	
  3222                           
  3223                           ;decode_AX25.c: 116: }
  3224                           ;decode_AX25.c: 117: }
  3225                           ;decode_AX25.c: 118: if(buf == ("JQ1YCZ"[3] << 1)){
  3226  048C  300D               	movlw	low (((STR_1+3)-__stringbase)| (0+32768))
  3227  048D  0084               	movwf	4
  3228  048E  120A  158A  2000  120A  118A  	fcall	stringdir
  3229  0493  00F6               	movwf	??_waitFlag
  3230  0494  01F7               	clrf	??_waitFlag+1
  3231  0495  1003               	clrc
  3232  0496  0DF6               	rlf	??_waitFlag,f
  3233  0497  0DF7               	rlf	??_waitFlag+1,f
  3234  0498  083C               	movf	waitFlag@buf,w
  3235  0499  00F8               	movwf	??_waitFlag+2
  3236  049A  01F9               	clrf	??_waitFlag+3
  3237  049B  0877               	movf	??_waitFlag+1,w
  3238  049C  0679               	xorwf	??_waitFlag+3,w
  3239  049D  1D03               	skipz
  3240  049E  2CA1               	goto	u2285
  3241  049F  0876               	movf	??_waitFlag,w
  3242  04A0  0678               	xorwf	??_waitFlag+2,w
  3243  04A1                     u2285:	
  3244  04A1  1D03               	skipz
  3245  04A2  2D64               	goto	l2876
  3246                           
  3247                           ;decode_AX25.c: 119: dPacket[dPacketnum] = buf;
  3248  04A3  083C               	movf	waitFlag@buf,w
  3249  04A4  00F6               	movwf	??_waitFlag
  3250  04A5  0868               	movf	_dPacketnum,w
  3251  04A6  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3252  04A7  0084               	movwf	4
  3253  04A8  0876               	movf	??_waitFlag,w
  3254  04A9  1783               	bsf	3,7	;select IRP bank3
  3255  04AA  0080               	movwf	0
  3256                           
  3257                           ;decode_AX25.c: 120: dPacketnum ++;
  3258  04AB  3001               	movlw	1
  3259  04AC  07E8               	addwf	_dPacketnum,f
  3260  04AD  1803               	skipnc
  3261  04AE  0AE9               	incf	_dPacketnum+1,f
  3262  04AF  3000               	movlw	0
  3263  04B0  07E9               	addwf	_dPacketnum+1,f
  3264                           
  3265                           ;decode_AX25.c: 121: for(UINT j=0;j<8;j++){
  3266  04B1  01A8               	clrf	waitFlag@j_122
  3267  04B2  01A9               	clrf	waitFlag@j_122+1
  3268  04B3  3000               	movlw	0
  3269  04B4  0229               	subwf	waitFlag@j_122+1,w
  3270  04B5  3008               	movlw	8
  3271  04B6  1903               	skipnz
  3272  04B7  0228               	subwf	waitFlag@j_122,w
  3273  04B8  1803               	btfsc	3,0
  3274  04B9  2CE2               	goto	l2832
  3275  04BA                     l2818:	
  3276                           
  3277                           ;decode_AX25.c: 122: flag_judge = getbit();
  3278  04BA  120A  158A  2298  120A  118A  	fcall	_getbit
  3279  04BF  0871               	movf	?_getbit+1,w
  3280  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  3281  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  3282  04C2  00BB               	movwf	waitFlag@flag_judge+1
  3283  04C3  0870               	movf	?_getbit,w
  3284  04C4  00BA               	movwf	waitFlag@flag_judge
  3285                           
  3286                           ;decode_AX25.c: 123: buf = buf >> 1;
  3287  04C5  083C               	movf	waitFlag@buf,w
  3288  04C6  00F6               	movwf	??_waitFlag
  3289  04C7  1003               	clrc
  3290  04C8  0C76               	rrf	??_waitFlag,w
  3291  04C9  00F7               	movwf	??_waitFlag+1
  3292  04CA  0877               	movf	??_waitFlag+1,w
  3293  04CB  00BC               	movwf	waitFlag@buf
  3294                           
  3295                           ;decode_AX25.c: 125: buf = buf | 0x00;
  3296  04CC  083A               	movf	waitFlag@flag_judge,w
  3297  04CD  043B               	iorwf	waitFlag@flag_judge+1,w
  3298  04CE  1903               	btfsc	3,2
  3299  04CF  2CD5               	goto	l2828
  3300                           
  3301                           ;decode_AX25.c: 127: buf = buf | 0x80;
  3302                           
  3303                           ;decode_AX25.c: 126: }else{
  3304  04D0  083C               	movf	waitFlag@buf,w
  3305  04D1  3880               	iorlw	128
  3306  04D2  00F6               	movwf	??_waitFlag
  3307  04D3  0876               	movf	??_waitFlag,w
  3308  04D4  00BC               	movwf	waitFlag@buf
  3309  04D5                     l2828:	
  3310  04D5  3001               	movlw	1
  3311  04D6  07A8               	addwf	waitFlag@j_122,f
  3312  04D7  1803               	skipnc
  3313  04D8  0AA9               	incf	waitFlag@j_122+1,f
  3314  04D9  3000               	movlw	0
  3315  04DA  07A9               	addwf	waitFlag@j_122+1,f
  3316  04DB  3000               	movlw	0
  3317  04DC  0229               	subwf	waitFlag@j_122+1,w
  3318  04DD  3008               	movlw	8
  3319  04DE  1903               	skipnz
  3320  04DF  0228               	subwf	waitFlag@j_122,w
  3321  04E0  1C03               	skipc
  3322  04E1  2CBA               	goto	l2818
  3323  04E2                     l2832:	
  3324                           
  3325                           ;decode_AX25.c: 128: }
  3326                           ;decode_AX25.c: 129: }
  3327                           ;decode_AX25.c: 130: if(buf == ("JQ1YCZ"[4] << 1)){
  3328  04E2  300E               	movlw	low (((STR_1+4)-__stringbase)| (0+32768))
  3329  04E3  0084               	movwf	4
  3330  04E4  120A  158A  2000  120A  118A  	fcall	stringdir
  3331  04E9  00F6               	movwf	??_waitFlag
  3332  04EA  01F7               	clrf	??_waitFlag+1
  3333  04EB  1003               	clrc
  3334  04EC  0DF6               	rlf	??_waitFlag,f
  3335  04ED  0DF7               	rlf	??_waitFlag+1,f
  3336  04EE  083C               	movf	waitFlag@buf,w
  3337  04EF  00F8               	movwf	??_waitFlag+2
  3338  04F0  01F9               	clrf	??_waitFlag+3
  3339  04F1  0877               	movf	??_waitFlag+1,w
  3340  04F2  0679               	xorwf	??_waitFlag+3,w
  3341  04F3  1D03               	skipz
  3342  04F4  2CF7               	goto	u2325
  3343  04F5  0876               	movf	??_waitFlag,w
  3344  04F6  0678               	xorwf	??_waitFlag+2,w
  3345  04F7                     u2325:	
  3346  04F7  1D03               	skipz
  3347  04F8  2D64               	goto	l2876
  3348                           
  3349                           ;decode_AX25.c: 131: dPacket[dPacketnum] = buf;
  3350  04F9  083C               	movf	waitFlag@buf,w
  3351  04FA  00F6               	movwf	??_waitFlag
  3352  04FB  0868               	movf	_dPacketnum,w
  3353  04FC  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3354  04FD  0084               	movwf	4
  3355  04FE  0876               	movf	??_waitFlag,w
  3356  04FF  1783               	bsf	3,7	;select IRP bank3
  3357  0500  0080               	movwf	0
  3358                           
  3359                           ;decode_AX25.c: 132: dPacketnum ++;
  3360  0501  3001               	movlw	1
  3361  0502  07E8               	addwf	_dPacketnum,f
  3362  0503  1803               	skipnc
  3363  0504  0AE9               	incf	_dPacketnum+1,f
  3364  0505  3000               	movlw	0
  3365  0506  07E9               	addwf	_dPacketnum+1,f
  3366                           
  3367                           ;decode_AX25.c: 133: for(UINT j=0;j<8;j++){
  3368  0507  01AA               	clrf	waitFlag@j_124
  3369  0508  01AB               	clrf	waitFlag@j_124+1
  3370  0509  3000               	movlw	0
  3371  050A  022B               	subwf	waitFlag@j_124+1,w
  3372  050B  3008               	movlw	8
  3373  050C  1903               	skipnz
  3374  050D  022A               	subwf	waitFlag@j_124,w
  3375  050E  1803               	btfsc	3,0
  3376  050F  2D38               	goto	l2858
  3377  0510                     l2844:	
  3378                           
  3379                           ;decode_AX25.c: 134: flag_judge = getbit();
  3380  0510  120A  158A  2298  120A  118A  	fcall	_getbit
  3381  0515  0871               	movf	?_getbit+1,w
  3382  0516  1283               	bcf	3,5	;RP0=0, select bank0
  3383  0517  1303               	bcf	3,6	;RP1=0, select bank0
  3384  0518  00BB               	movwf	waitFlag@flag_judge+1
  3385  0519  0870               	movf	?_getbit,w
  3386  051A  00BA               	movwf	waitFlag@flag_judge
  3387                           
  3388                           ;decode_AX25.c: 135: buf = buf >> 1;
  3389  051B  083C               	movf	waitFlag@buf,w
  3390  051C  00F6               	movwf	??_waitFlag
  3391  051D  1003               	clrc
  3392  051E  0C76               	rrf	??_waitFlag,w
  3393  051F  00F7               	movwf	??_waitFlag+1
  3394  0520  0877               	movf	??_waitFlag+1,w
  3395  0521  00BC               	movwf	waitFlag@buf
  3396                           
  3397                           ;decode_AX25.c: 137: buf = buf | 0x00;
  3398  0522  083A               	movf	waitFlag@flag_judge,w
  3399  0523  043B               	iorwf	waitFlag@flag_judge+1,w
  3400  0524  1903               	btfsc	3,2
  3401  0525  2D2B               	goto	l2854
  3402                           
  3403                           ;decode_AX25.c: 139: buf = buf | 0x80;
  3404                           
  3405                           ;decode_AX25.c: 138: }else{
  3406  0526  083C               	movf	waitFlag@buf,w
  3407  0527  3880               	iorlw	128
  3408  0528  00F6               	movwf	??_waitFlag
  3409  0529  0876               	movf	??_waitFlag,w
  3410  052A  00BC               	movwf	waitFlag@buf
  3411  052B                     l2854:	
  3412  052B  3001               	movlw	1
  3413  052C  07AA               	addwf	waitFlag@j_124,f
  3414  052D  1803               	skipnc
  3415  052E  0AAB               	incf	waitFlag@j_124+1,f
  3416  052F  3000               	movlw	0
  3417  0530  07AB               	addwf	waitFlag@j_124+1,f
  3418  0531  3000               	movlw	0
  3419  0532  022B               	subwf	waitFlag@j_124+1,w
  3420  0533  3008               	movlw	8
  3421  0534  1903               	skipnz
  3422  0535  022A               	subwf	waitFlag@j_124,w
  3423  0536  1C03               	skipc
  3424  0537  2D10               	goto	l2844
  3425  0538                     l2858:	
  3426                           
  3427                           ;decode_AX25.c: 140: }
  3428                           ;decode_AX25.c: 141: }
  3429                           ;decode_AX25.c: 142: if(buf == ("JQ1YCZ"[5] << 1)){
  3430  0538  300F               	movlw	low (((STR_1+5)-__stringbase)| (0+32768))
  3431  0539  0084               	movwf	4
  3432  053A  120A  158A  2000  120A  118A  	fcall	stringdir
  3433  053F  00F6               	movwf	??_waitFlag
  3434  0540  01F7               	clrf	??_waitFlag+1
  3435  0541  1003               	clrc
  3436  0542  0DF6               	rlf	??_waitFlag,f
  3437  0543  0DF7               	rlf	??_waitFlag+1,f
  3438  0544  083C               	movf	waitFlag@buf,w
  3439  0545  00F8               	movwf	??_waitFlag+2
  3440  0546  01F9               	clrf	??_waitFlag+3
  3441  0547  0877               	movf	??_waitFlag+1,w
  3442  0548  0679               	xorwf	??_waitFlag+3,w
  3443  0549  1D03               	skipz
  3444  054A  2D4D               	goto	u2365
  3445  054B  0876               	movf	??_waitFlag,w
  3446  054C  0678               	xorwf	??_waitFlag+2,w
  3447  054D                     u2365:	
  3448  054D  1D03               	skipz
  3449  054E  2D64               	goto	l2876
  3450                           
  3451                           ;decode_AX25.c: 143: dPacket[dPacketnum] = buf;
  3452  054F  083C               	movf	waitFlag@buf,w
  3453  0550  00F6               	movwf	??_waitFlag
  3454  0551  0868               	movf	_dPacketnum,w
  3455  0552  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3456  0553  0084               	movwf	4
  3457  0554  0876               	movf	??_waitFlag,w
  3458  0555  1783               	bsf	3,7	;select IRP bank3
  3459  0556  0080               	movwf	0
  3460                           
  3461                           ;decode_AX25.c: 144: dPacketnum ++;
  3462  0557  3001               	movlw	1
  3463  0558  07E8               	addwf	_dPacketnum,f
  3464  0559  1803               	skipnc
  3465  055A  0AE9               	incf	_dPacketnum+1,f
  3466  055B  3000               	movlw	0
  3467  055C  07E9               	addwf	_dPacketnum+1,f
  3468                           
  3469                           ;decode_AX25.c: 145: rcv_state ++;
  3470  055D  3001               	movlw	1
  3471  055E  07EA               	addwf	_rcv_state,f
  3472  055F  1803               	skipnc
  3473  0560  0AEB               	incf	_rcv_state+1,f
  3474  0561  3000               	movlw	0
  3475  0562  07EB               	addwf	_rcv_state+1,f
  3476                           
  3477                           ;decode_AX25.c: 146: }else{
  3478  0563  2D66               	goto	l214
  3479  0564                     l2876:	
  3480                           ;decode_AX25.c: 160: }
  3481                           ;decode_AX25.c: 161: }else{
  3482                           
  3483                           ;decode_AX25.c: 159: dPacketnum = 0;
  3484                           
  3485                           ;decode_AX25.c: 157: }
  3486                           ;decode_AX25.c: 158: }else{
  3487                           
  3488                           ;decode_AX25.c: 156: dPacketnum = 0;
  3489                           
  3490                           ;decode_AX25.c: 154: }
  3491                           ;decode_AX25.c: 155: }else{
  3492                           
  3493                           ;decode_AX25.c: 153: dPacketnum = 0;
  3494                           
  3495                           ;decode_AX25.c: 151: }
  3496                           ;decode_AX25.c: 152: }else{
  3497                           
  3498                           ;decode_AX25.c: 150: dPacketnum = 0;
  3499                           
  3500                           ;decode_AX25.c: 148: }
  3501                           ;decode_AX25.c: 149: }else{
  3502                           
  3503                           ;decode_AX25.c: 147: dPacketnum = 0;
  3504                           
  3505                           
  3506                           ;decode_AX25.c: 162: dPacketnum = 0;
  3507  0564  01E8               	clrf	_dPacketnum
  3508  0565  01E9               	clrf	_dPacketnum+1
  3509  0566                     l214:	
  3510                           
  3511                           ;decode_AX25.c: 163: }
  3512                           ;decode_AX25.c: 165: for(UINT j=0;j<8;j++){
  3513  0566  01AC               	clrf	waitFlag@j_126
  3514  0567  01AD               	clrf	waitFlag@j_126+1
  3515  0568  3000               	movlw	0
  3516  0569  022D               	subwf	waitFlag@j_126+1,w
  3517  056A  3008               	movlw	8
  3518  056B  1903               	skipnz
  3519  056C  022C               	subwf	waitFlag@j_126,w
  3520  056D  1803               	btfsc	3,0
  3521  056E  2D97               	goto	l2896
  3522  056F                     l2882:	
  3523                           
  3524                           ;decode_AX25.c: 166: flag_judge = getbit();
  3525  056F  120A  158A  2298  120A  118A  	fcall	_getbit
  3526  0574  0871               	movf	?_getbit+1,w
  3527  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3528  0576  1303               	bcf	3,6	;RP1=0, select bank0
  3529  0577  00BB               	movwf	waitFlag@flag_judge+1
  3530  0578  0870               	movf	?_getbit,w
  3531  0579  00BA               	movwf	waitFlag@flag_judge
  3532                           
  3533                           ;decode_AX25.c: 167: buf = buf >> 1;
  3534  057A  083C               	movf	waitFlag@buf,w
  3535  057B  00F6               	movwf	??_waitFlag
  3536  057C  1003               	clrc
  3537  057D  0C76               	rrf	??_waitFlag,w
  3538  057E  00F7               	movwf	??_waitFlag+1
  3539  057F  0877               	movf	??_waitFlag+1,w
  3540  0580  00BC               	movwf	waitFlag@buf
  3541                           
  3542                           ;decode_AX25.c: 169: buf = buf | 0x00;
  3543  0581  083A               	movf	waitFlag@flag_judge,w
  3544  0582  043B               	iorwf	waitFlag@flag_judge+1,w
  3545  0583  1903               	btfsc	3,2
  3546  0584  2D8A               	goto	l2892
  3547                           
  3548                           ;decode_AX25.c: 171: buf = buf | 0x80;
  3549                           
  3550                           ;decode_AX25.c: 170: }else{
  3551  0585  083C               	movf	waitFlag@buf,w
  3552  0586  3880               	iorlw	128
  3553  0587  00F6               	movwf	??_waitFlag
  3554  0588  0876               	movf	??_waitFlag,w
  3555  0589  00BC               	movwf	waitFlag@buf
  3556  058A                     l2892:	
  3557  058A  3001               	movlw	1
  3558  058B  07AC               	addwf	waitFlag@j_126,f
  3559  058C  1803               	skipnc
  3560  058D  0AAD               	incf	waitFlag@j_126+1,f
  3561  058E  3000               	movlw	0
  3562  058F  07AD               	addwf	waitFlag@j_126+1,f
  3563  0590  3000               	movlw	0
  3564  0591  022D               	subwf	waitFlag@j_126+1,w
  3565  0592  3008               	movlw	8
  3566  0593  1903               	skipnz
  3567  0594  022C               	subwf	waitFlag@j_126,w
  3568  0595  1C03               	skipc
  3569  0596  2D6F               	goto	l2882
  3570  0597                     l2896:	
  3571                           
  3572                           ;decode_AX25.c: 172: }
  3573                           ;decode_AX25.c: 173: }
  3574                           ;decode_AX25.c: 174: dPacket[dPacketnum] = buf;
  3575  0597  083C               	movf	waitFlag@buf,w
  3576  0598  00F6               	movwf	??_waitFlag
  3577  0599  0868               	movf	_dPacketnum,w
  3578  059A  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3579  059B  0084               	movwf	4
  3580  059C  0876               	movf	??_waitFlag,w
  3581  059D  1783               	bsf	3,7	;select IRP bank3
  3582  059E  0080               	movwf	0
  3583                           
  3584                           ;decode_AX25.c: 175: dPacketnum ++;
  3585  059F  3001               	movlw	1
  3586  05A0  07E8               	addwf	_dPacketnum,f
  3587  05A1  1803               	skipnc
  3588  05A2  0AE9               	incf	_dPacketnum+1,f
  3589  05A3  3000               	movlw	0
  3590  05A4  07E9               	addwf	_dPacketnum+1,f
  3591                           
  3592                           ;decode_AX25.c: 176: for(UINT j=0;j<8;j++){
  3593  05A5  01AE               	clrf	waitFlag@j_127
  3594  05A6  01AF               	clrf	waitFlag@j_127+1
  3595  05A7  3000               	movlw	0
  3596  05A8  022F               	subwf	waitFlag@j_127+1,w
  3597  05A9  3008               	movlw	8
  3598  05AA  1903               	skipnz
  3599  05AB  022E               	subwf	waitFlag@j_127,w
  3600  05AC  1803               	btfsc	3,0
  3601  05AD  2DD6               	goto	l2920
  3602  05AE                     l2906:	
  3603                           
  3604                           ;decode_AX25.c: 177: flag_judge = getbit();
  3605  05AE  120A  158A  2298  120A  118A  	fcall	_getbit
  3606  05B3  0871               	movf	?_getbit+1,w
  3607  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  3608  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  3609  05B6  00BB               	movwf	waitFlag@flag_judge+1
  3610  05B7  0870               	movf	?_getbit,w
  3611  05B8  00BA               	movwf	waitFlag@flag_judge
  3612                           
  3613                           ;decode_AX25.c: 178: buf = buf >> 1;
  3614  05B9  083C               	movf	waitFlag@buf,w
  3615  05BA  00F6               	movwf	??_waitFlag
  3616  05BB  1003               	clrc
  3617  05BC  0C76               	rrf	??_waitFlag,w
  3618  05BD  00F7               	movwf	??_waitFlag+1
  3619  05BE  0877               	movf	??_waitFlag+1,w
  3620  05BF  00BC               	movwf	waitFlag@buf
  3621                           
  3622                           ;decode_AX25.c: 180: buf = buf | 0x00;
  3623  05C0  083A               	movf	waitFlag@flag_judge,w
  3624  05C1  043B               	iorwf	waitFlag@flag_judge+1,w
  3625  05C2  1903               	btfsc	3,2
  3626  05C3  2DC9               	goto	l2916
  3627                           
  3628                           ;decode_AX25.c: 182: buf = buf | 0x80;
  3629                           
  3630                           ;decode_AX25.c: 181: }else{
  3631  05C4  083C               	movf	waitFlag@buf,w
  3632  05C5  3880               	iorlw	128
  3633  05C6  00F6               	movwf	??_waitFlag
  3634  05C7  0876               	movf	??_waitFlag,w
  3635  05C8  00BC               	movwf	waitFlag@buf
  3636  05C9                     l2916:	
  3637  05C9  3001               	movlw	1
  3638  05CA  07AE               	addwf	waitFlag@j_127,f
  3639  05CB  1803               	skipnc
  3640  05CC  0AAF               	incf	waitFlag@j_127+1,f
  3641  05CD  3000               	movlw	0
  3642  05CE  07AF               	addwf	waitFlag@j_127+1,f
  3643  05CF  3000               	movlw	0
  3644  05D0  022F               	subwf	waitFlag@j_127+1,w
  3645  05D1  3008               	movlw	8
  3646  05D2  1903               	skipnz
  3647  05D3  022E               	subwf	waitFlag@j_127,w
  3648  05D4  1C03               	skipc
  3649  05D5  2DAE               	goto	l2906
  3650  05D6                     l2920:	
  3651                           
  3652                           ;decode_AX25.c: 183: }
  3653                           ;decode_AX25.c: 184: }
  3654                           ;decode_AX25.c: 185: if(buf == ("JQ1ZHX"[0] << 1)){
  3655  05D6  3003               	movlw	low (STR_7-__stringbase)
  3656  05D7  0084               	movwf	4
  3657  05D8  120A  158A  2000  120A  118A  	fcall	stringdir
  3658  05DD  00F6               	movwf	??_waitFlag
  3659  05DE  01F7               	clrf	??_waitFlag+1
  3660  05DF  1003               	clrc
  3661  05E0  0DF6               	rlf	??_waitFlag,f
  3662  05E1  0DF7               	rlf	??_waitFlag+1,f
  3663  05E2  083C               	movf	waitFlag@buf,w
  3664  05E3  00F8               	movwf	??_waitFlag+2
  3665  05E4  01F9               	clrf	??_waitFlag+3
  3666  05E5  0877               	movf	??_waitFlag+1,w
  3667  05E6  0679               	xorwf	??_waitFlag+3,w
  3668  05E7  1D03               	skipz
  3669  05E8  2DEB               	goto	u2435
  3670  05E9  0876               	movf	??_waitFlag,w
  3671  05EA  0678               	xorwf	??_waitFlag+2,w
  3672  05EB                     u2435:	
  3673  05EB  1D03               	skipz
  3674  05EC  2FB0               	goto	l3068
  3675                           
  3676                           ;decode_AX25.c: 186: dPacket[dPacketnum] = buf;
  3677  05ED  083C               	movf	waitFlag@buf,w
  3678  05EE  00F6               	movwf	??_waitFlag
  3679  05EF  0868               	movf	_dPacketnum,w
  3680  05F0  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3681  05F1  0084               	movwf	4
  3682  05F2  0876               	movf	??_waitFlag,w
  3683  05F3  1783               	bsf	3,7	;select IRP bank3
  3684  05F4  0080               	movwf	0
  3685                           
  3686                           ;decode_AX25.c: 187: dPacketnum ++;
  3687  05F5  3001               	movlw	1
  3688  05F6  07E8               	addwf	_dPacketnum,f
  3689  05F7  1803               	skipnc
  3690  05F8  0AE9               	incf	_dPacketnum+1,f
  3691  05F9  3000               	movlw	0
  3692  05FA  07E9               	addwf	_dPacketnum+1,f
  3693                           
  3694                           ;decode_AX25.c: 188: for(UINT j=0;j<8;j++){
  3695  05FB  01B0               	clrf	waitFlag@j_129
  3696  05FC  01B1               	clrf	waitFlag@j_129+1
  3697  05FD  3000               	movlw	0
  3698  05FE  0231               	subwf	waitFlag@j_129+1,w
  3699  05FF  3008               	movlw	8
  3700  0600  1903               	skipnz
  3701  0601  0230               	subwf	waitFlag@j_129,w
  3702  0602  1803               	btfsc	3,0
  3703  0603  2E2C               	goto	l2946
  3704  0604                     l2932:	
  3705                           
  3706                           ;decode_AX25.c: 189: flag_judge = getbit();
  3707  0604  120A  158A  2298  120A  118A  	fcall	_getbit
  3708  0609  0871               	movf	?_getbit+1,w
  3709  060A  1283               	bcf	3,5	;RP0=0, select bank0
  3710  060B  1303               	bcf	3,6	;RP1=0, select bank0
  3711  060C  00BB               	movwf	waitFlag@flag_judge+1
  3712  060D  0870               	movf	?_getbit,w
  3713  060E  00BA               	movwf	waitFlag@flag_judge
  3714                           
  3715                           ;decode_AX25.c: 190: buf = buf >> 1;
  3716  060F  083C               	movf	waitFlag@buf,w
  3717  0610  00F6               	movwf	??_waitFlag
  3718  0611  1003               	clrc
  3719  0612  0C76               	rrf	??_waitFlag,w
  3720  0613  00F7               	movwf	??_waitFlag+1
  3721  0614  0877               	movf	??_waitFlag+1,w
  3722  0615  00BC               	movwf	waitFlag@buf
  3723                           
  3724                           ;decode_AX25.c: 192: buf = buf | 0x00;
  3725  0616  083A               	movf	waitFlag@flag_judge,w
  3726  0617  043B               	iorwf	waitFlag@flag_judge+1,w
  3727  0618  1903               	btfsc	3,2
  3728  0619  2E1F               	goto	l2942
  3729                           
  3730                           ;decode_AX25.c: 194: buf = buf | 0x80;
  3731                           
  3732                           ;decode_AX25.c: 193: }else{
  3733  061A  083C               	movf	waitFlag@buf,w
  3734  061B  3880               	iorlw	128
  3735  061C  00F6               	movwf	??_waitFlag
  3736  061D  0876               	movf	??_waitFlag,w
  3737  061E  00BC               	movwf	waitFlag@buf
  3738  061F                     l2942:	
  3739  061F  3001               	movlw	1
  3740  0620  07B0               	addwf	waitFlag@j_129,f
  3741  0621  1803               	skipnc
  3742  0622  0AB1               	incf	waitFlag@j_129+1,f
  3743  0623  3000               	movlw	0
  3744  0624  07B1               	addwf	waitFlag@j_129+1,f
  3745  0625  3000               	movlw	0
  3746  0626  0231               	subwf	waitFlag@j_129+1,w
  3747  0627  3008               	movlw	8
  3748  0628  1903               	skipnz
  3749  0629  0230               	subwf	waitFlag@j_129,w
  3750  062A  1C03               	skipc
  3751  062B  2E04               	goto	l2932
  3752  062C                     l2946:	
  3753                           
  3754                           ;decode_AX25.c: 195: }
  3755                           ;decode_AX25.c: 196: }
  3756                           ;decode_AX25.c: 197: if(buf == ("JQ1ZHX"[1] << 1)){
  3757  062C  3004               	movlw	low (((STR_7+1)-__stringbase)| (0+32768))
  3758  062D  0084               	movwf	4
  3759  062E  120A  158A  2000  120A  118A  	fcall	stringdir
  3760  0633  00F6               	movwf	??_waitFlag
  3761  0634  01F7               	clrf	??_waitFlag+1
  3762  0635  1003               	clrc
  3763  0636  0DF6               	rlf	??_waitFlag,f
  3764  0637  0DF7               	rlf	??_waitFlag+1,f
  3765  0638  083C               	movf	waitFlag@buf,w
  3766  0639  00F8               	movwf	??_waitFlag+2
  3767  063A  01F9               	clrf	??_waitFlag+3
  3768  063B  0877               	movf	??_waitFlag+1,w
  3769  063C  0679               	xorwf	??_waitFlag+3,w
  3770  063D  1D03               	skipz
  3771  063E  2E41               	goto	u2475
  3772  063F  0876               	movf	??_waitFlag,w
  3773  0640  0678               	xorwf	??_waitFlag+2,w
  3774  0641                     u2475:	
  3775  0641  1D03               	skipz
  3776  0642  2FB0               	goto	l3068
  3777                           
  3778                           ;decode_AX25.c: 198: dPacket[dPacketnum] = buf;
  3779  0643  083C               	movf	waitFlag@buf,w
  3780  0644  00F6               	movwf	??_waitFlag
  3781  0645  0868               	movf	_dPacketnum,w
  3782  0646  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3783  0647  0084               	movwf	4
  3784  0648  0876               	movf	??_waitFlag,w
  3785  0649  1783               	bsf	3,7	;select IRP bank3
  3786  064A  0080               	movwf	0
  3787                           
  3788                           ;decode_AX25.c: 199: dPacketnum ++;
  3789  064B  3001               	movlw	1
  3790  064C  07E8               	addwf	_dPacketnum,f
  3791  064D  1803               	skipnc
  3792  064E  0AE9               	incf	_dPacketnum+1,f
  3793  064F  3000               	movlw	0
  3794  0650  07E9               	addwf	_dPacketnum+1,f
  3795                           
  3796                           ;decode_AX25.c: 200: for(UINT j=0;j<8;j++){
  3797  0651  01B2               	clrf	waitFlag@j_131
  3798  0652  01B3               	clrf	waitFlag@j_131+1
  3799  0653  3000               	movlw	0
  3800  0654  0233               	subwf	waitFlag@j_131+1,w
  3801  0655  3008               	movlw	8
  3802  0656  1903               	skipnz
  3803  0657  0232               	subwf	waitFlag@j_131,w
  3804  0658  1803               	btfsc	3,0
  3805  0659  2E82               	goto	l2972
  3806  065A                     l2958:	
  3807                           
  3808                           ;decode_AX25.c: 201: flag_judge = getbit();
  3809  065A  120A  158A  2298  120A  118A  	fcall	_getbit
  3810  065F  0871               	movf	?_getbit+1,w
  3811  0660  1283               	bcf	3,5	;RP0=0, select bank0
  3812  0661  1303               	bcf	3,6	;RP1=0, select bank0
  3813  0662  00BB               	movwf	waitFlag@flag_judge+1
  3814  0663  0870               	movf	?_getbit,w
  3815  0664  00BA               	movwf	waitFlag@flag_judge
  3816                           
  3817                           ;decode_AX25.c: 202: buf = buf >> 1;
  3818  0665  083C               	movf	waitFlag@buf,w
  3819  0666  00F6               	movwf	??_waitFlag
  3820  0667  1003               	clrc
  3821  0668  0C76               	rrf	??_waitFlag,w
  3822  0669  00F7               	movwf	??_waitFlag+1
  3823  066A  0877               	movf	??_waitFlag+1,w
  3824  066B  00BC               	movwf	waitFlag@buf
  3825                           
  3826                           ;decode_AX25.c: 204: buf = buf | 0x00;
  3827  066C  083A               	movf	waitFlag@flag_judge,w
  3828  066D  043B               	iorwf	waitFlag@flag_judge+1,w
  3829  066E  1903               	btfsc	3,2
  3830  066F  2E75               	goto	l2968
  3831                           
  3832                           ;decode_AX25.c: 206: buf = buf | 0x80;
  3833                           
  3834                           ;decode_AX25.c: 205: }else{
  3835  0670  083C               	movf	waitFlag@buf,w
  3836  0671  3880               	iorlw	128
  3837  0672  00F6               	movwf	??_waitFlag
  3838  0673  0876               	movf	??_waitFlag,w
  3839  0674  00BC               	movwf	waitFlag@buf
  3840  0675                     l2968:	
  3841  0675  3001               	movlw	1
  3842  0676  07B2               	addwf	waitFlag@j_131,f
  3843  0677  1803               	skipnc
  3844  0678  0AB3               	incf	waitFlag@j_131+1,f
  3845  0679  3000               	movlw	0
  3846  067A  07B3               	addwf	waitFlag@j_131+1,f
  3847  067B  3000               	movlw	0
  3848  067C  0233               	subwf	waitFlag@j_131+1,w
  3849  067D  3008               	movlw	8
  3850  067E  1903               	skipnz
  3851  067F  0232               	subwf	waitFlag@j_131,w
  3852  0680  1C03               	skipc
  3853  0681  2E5A               	goto	l2958
  3854  0682                     l2972:	
  3855                           
  3856                           ;decode_AX25.c: 207: }
  3857                           ;decode_AX25.c: 208: }
  3858                           ;decode_AX25.c: 209: if(buf == ("JQ1ZHX"[2] << 1)){
  3859  0682  3005               	movlw	low (((STR_7+2)-__stringbase)| (0+32768))
  3860  0683  0084               	movwf	4
  3861  0684  120A  158A  2000  120A  118A  	fcall	stringdir
  3862  0689  00F6               	movwf	??_waitFlag
  3863  068A  01F7               	clrf	??_waitFlag+1
  3864  068B  1003               	clrc
  3865  068C  0DF6               	rlf	??_waitFlag,f
  3866  068D  0DF7               	rlf	??_waitFlag+1,f
  3867  068E  083C               	movf	waitFlag@buf,w
  3868  068F  00F8               	movwf	??_waitFlag+2
  3869  0690  01F9               	clrf	??_waitFlag+3
  3870  0691  0877               	movf	??_waitFlag+1,w
  3871  0692  0679               	xorwf	??_waitFlag+3,w
  3872  0693  1D03               	skipz
  3873  0694  2E97               	goto	u2515
  3874  0695  0876               	movf	??_waitFlag,w
  3875  0696  0678               	xorwf	??_waitFlag+2,w
  3876  0697                     u2515:	
  3877  0697  1D03               	skipz
  3878  0698  2FB0               	goto	l3068
  3879                           
  3880                           ;decode_AX25.c: 210: dPacket[dPacketnum] = buf;
  3881  0699  083C               	movf	waitFlag@buf,w
  3882  069A  00F6               	movwf	??_waitFlag
  3883  069B  0868               	movf	_dPacketnum,w
  3884  069C  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3885  069D  0084               	movwf	4
  3886  069E  0876               	movf	??_waitFlag,w
  3887  069F  1783               	bsf	3,7	;select IRP bank3
  3888  06A0  0080               	movwf	0
  3889                           
  3890                           ;decode_AX25.c: 211: dPacketnum ++;
  3891  06A1  3001               	movlw	1
  3892  06A2  07E8               	addwf	_dPacketnum,f
  3893  06A3  1803               	skipnc
  3894  06A4  0AE9               	incf	_dPacketnum+1,f
  3895  06A5  3000               	movlw	0
  3896  06A6  07E9               	addwf	_dPacketnum+1,f
  3897                           
  3898                           ;decode_AX25.c: 212: for(UINT j=0;j<8;j++){
  3899  06A7  01B4               	clrf	waitFlag@j_133
  3900  06A8  01B5               	clrf	waitFlag@j_133+1
  3901  06A9  3000               	movlw	0
  3902  06AA  0235               	subwf	waitFlag@j_133+1,w
  3903  06AB  3008               	movlw	8
  3904  06AC  1903               	skipnz
  3905  06AD  0234               	subwf	waitFlag@j_133,w
  3906  06AE  1803               	btfsc	3,0
  3907  06AF  2ED8               	goto	l2998
  3908  06B0                     l2984:	
  3909                           
  3910                           ;decode_AX25.c: 213: flag_judge = getbit();
  3911  06B0  120A  158A  2298  120A  118A  	fcall	_getbit
  3912  06B5  0871               	movf	?_getbit+1,w
  3913  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  3914  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  3915  06B8  00BB               	movwf	waitFlag@flag_judge+1
  3916  06B9  0870               	movf	?_getbit,w
  3917  06BA  00BA               	movwf	waitFlag@flag_judge
  3918                           
  3919                           ;decode_AX25.c: 214: buf = buf >> 1;
  3920  06BB  083C               	movf	waitFlag@buf,w
  3921  06BC  00F6               	movwf	??_waitFlag
  3922  06BD  1003               	clrc
  3923  06BE  0C76               	rrf	??_waitFlag,w
  3924  06BF  00F7               	movwf	??_waitFlag+1
  3925  06C0  0877               	movf	??_waitFlag+1,w
  3926  06C1  00BC               	movwf	waitFlag@buf
  3927                           
  3928                           ;decode_AX25.c: 216: buf = buf | 0x00;
  3929  06C2  083A               	movf	waitFlag@flag_judge,w
  3930  06C3  043B               	iorwf	waitFlag@flag_judge+1,w
  3931  06C4  1903               	btfsc	3,2
  3932  06C5  2ECB               	goto	l2994
  3933                           
  3934                           ;decode_AX25.c: 218: buf = buf | 0x80;
  3935                           
  3936                           ;decode_AX25.c: 217: }else{
  3937  06C6  083C               	movf	waitFlag@buf,w
  3938  06C7  3880               	iorlw	128
  3939  06C8  00F6               	movwf	??_waitFlag
  3940  06C9  0876               	movf	??_waitFlag,w
  3941  06CA  00BC               	movwf	waitFlag@buf
  3942  06CB                     l2994:	
  3943  06CB  3001               	movlw	1
  3944  06CC  07B4               	addwf	waitFlag@j_133,f
  3945  06CD  1803               	skipnc
  3946  06CE  0AB5               	incf	waitFlag@j_133+1,f
  3947  06CF  3000               	movlw	0
  3948  06D0  07B5               	addwf	waitFlag@j_133+1,f
  3949  06D1  3000               	movlw	0
  3950  06D2  0235               	subwf	waitFlag@j_133+1,w
  3951  06D3  3008               	movlw	8
  3952  06D4  1903               	skipnz
  3953  06D5  0234               	subwf	waitFlag@j_133,w
  3954  06D6  1C03               	skipc
  3955  06D7  2EB0               	goto	l2984
  3956  06D8                     l2998:	
  3957                           
  3958                           ;decode_AX25.c: 219: }
  3959                           ;decode_AX25.c: 220: }
  3960                           ;decode_AX25.c: 221: if(buf == ("JQ1ZHX"[3] << 1)){
  3961  06D8  3006               	movlw	low (((STR_7+3)-__stringbase)| (0+32768))
  3962  06D9  0084               	movwf	4
  3963  06DA  120A  158A  2000  120A  118A  	fcall	stringdir
  3964  06DF  00F6               	movwf	??_waitFlag
  3965  06E0  01F7               	clrf	??_waitFlag+1
  3966  06E1  1003               	clrc
  3967  06E2  0DF6               	rlf	??_waitFlag,f
  3968  06E3  0DF7               	rlf	??_waitFlag+1,f
  3969  06E4  083C               	movf	waitFlag@buf,w
  3970  06E5  00F8               	movwf	??_waitFlag+2
  3971  06E6  01F9               	clrf	??_waitFlag+3
  3972  06E7  0877               	movf	??_waitFlag+1,w
  3973  06E8  0679               	xorwf	??_waitFlag+3,w
  3974  06E9  1D03               	skipz
  3975  06EA  2EED               	goto	u2555
  3976  06EB  0876               	movf	??_waitFlag,w
  3977  06EC  0678               	xorwf	??_waitFlag+2,w
  3978  06ED                     u2555:	
  3979  06ED  1D03               	skipz
  3980  06EE  2FB0               	goto	l3068
  3981                           
  3982                           ;decode_AX25.c: 222: dPacket[dPacketnum] = buf;
  3983  06EF  083C               	movf	waitFlag@buf,w
  3984  06F0  00F6               	movwf	??_waitFlag
  3985  06F1  0868               	movf	_dPacketnum,w
  3986  06F2  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3987  06F3  0084               	movwf	4
  3988  06F4  0876               	movf	??_waitFlag,w
  3989  06F5  1783               	bsf	3,7	;select IRP bank3
  3990  06F6  0080               	movwf	0
  3991                           
  3992                           ;decode_AX25.c: 223: dPacketnum ++;
  3993  06F7  3001               	movlw	1
  3994  06F8  07E8               	addwf	_dPacketnum,f
  3995  06F9  1803               	skipnc
  3996  06FA  0AE9               	incf	_dPacketnum+1,f
  3997  06FB  3000               	movlw	0
  3998  06FC  07E9               	addwf	_dPacketnum+1,f
  3999                           
  4000                           ;decode_AX25.c: 224: for(UINT j=0;j<8;j++){
  4001  06FD  01B6               	clrf	waitFlag@j_135
  4002  06FE  01B7               	clrf	waitFlag@j_135+1
  4003  06FF  3000               	movlw	0
  4004  0700  0237               	subwf	waitFlag@j_135+1,w
  4005  0701  3008               	movlw	8
  4006  0702  1903               	skipnz
  4007  0703  0236               	subwf	waitFlag@j_135,w
  4008  0704  1803               	btfsc	3,0
  4009  0705  2F2E               	goto	l3024
  4010  0706                     l3010:	
  4011                           
  4012                           ;decode_AX25.c: 225: flag_judge = getbit();
  4013  0706  120A  158A  2298  120A  118A  	fcall	_getbit
  4014  070B  0871               	movf	?_getbit+1,w
  4015  070C  1283               	bcf	3,5	;RP0=0, select bank0
  4016  070D  1303               	bcf	3,6	;RP1=0, select bank0
  4017  070E  00BB               	movwf	waitFlag@flag_judge+1
  4018  070F  0870               	movf	?_getbit,w
  4019  0710  00BA               	movwf	waitFlag@flag_judge
  4020                           
  4021                           ;decode_AX25.c: 226: buf = buf >> 1;
  4022  0711  083C               	movf	waitFlag@buf,w
  4023  0712  00F6               	movwf	??_waitFlag
  4024  0713  1003               	clrc
  4025  0714  0C76               	rrf	??_waitFlag,w
  4026  0715  00F7               	movwf	??_waitFlag+1
  4027  0716  0877               	movf	??_waitFlag+1,w
  4028  0717  00BC               	movwf	waitFlag@buf
  4029                           
  4030                           ;decode_AX25.c: 228: buf = buf | 0x00;
  4031  0718  083A               	movf	waitFlag@flag_judge,w
  4032  0719  043B               	iorwf	waitFlag@flag_judge+1,w
  4033  071A  1903               	btfsc	3,2
  4034  071B  2F21               	goto	l3020
  4035                           
  4036                           ;decode_AX25.c: 230: buf = buf | 0x80;
  4037                           
  4038                           ;decode_AX25.c: 229: }else{
  4039  071C  083C               	movf	waitFlag@buf,w
  4040  071D  3880               	iorlw	128
  4041  071E  00F6               	movwf	??_waitFlag
  4042  071F  0876               	movf	??_waitFlag,w
  4043  0720  00BC               	movwf	waitFlag@buf
  4044  0721                     l3020:	
  4045  0721  3001               	movlw	1
  4046  0722  07B6               	addwf	waitFlag@j_135,f
  4047  0723  1803               	skipnc
  4048  0724  0AB7               	incf	waitFlag@j_135+1,f
  4049  0725  3000               	movlw	0
  4050  0726  07B7               	addwf	waitFlag@j_135+1,f
  4051  0727  3000               	movlw	0
  4052  0728  0237               	subwf	waitFlag@j_135+1,w
  4053  0729  3008               	movlw	8
  4054  072A  1903               	skipnz
  4055  072B  0236               	subwf	waitFlag@j_135,w
  4056  072C  1C03               	skipc
  4057  072D  2F06               	goto	l3010
  4058  072E                     l3024:	
  4059                           
  4060                           ;decode_AX25.c: 231: }
  4061                           ;decode_AX25.c: 232: }
  4062                           ;decode_AX25.c: 233: if(buf == ("JQ1ZHX"[4] << 1)){
  4063  072E  3007               	movlw	low (((STR_7+4)-__stringbase)| (0+32768))
  4064  072F  0084               	movwf	4
  4065  0730  120A  158A  2000  120A  118A  	fcall	stringdir
  4066  0735  00F6               	movwf	??_waitFlag
  4067  0736  01F7               	clrf	??_waitFlag+1
  4068  0737  1003               	clrc
  4069  0738  0DF6               	rlf	??_waitFlag,f
  4070  0739  0DF7               	rlf	??_waitFlag+1,f
  4071  073A  083C               	movf	waitFlag@buf,w
  4072  073B  00F8               	movwf	??_waitFlag+2
  4073  073C  01F9               	clrf	??_waitFlag+3
  4074  073D  0877               	movf	??_waitFlag+1,w
  4075  073E  0679               	xorwf	??_waitFlag+3,w
  4076  073F  1D03               	skipz
  4077  0740  2F43               	goto	u2595
  4078  0741  0876               	movf	??_waitFlag,w
  4079  0742  0678               	xorwf	??_waitFlag+2,w
  4080  0743                     u2595:	
  4081  0743  1D03               	skipz
  4082  0744  2FB0               	goto	l3068
  4083                           
  4084                           ;decode_AX25.c: 234: dPacket[dPacketnum] = buf;
  4085  0745  083C               	movf	waitFlag@buf,w
  4086  0746  00F6               	movwf	??_waitFlag
  4087  0747  0868               	movf	_dPacketnum,w
  4088  0748  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4089  0749  0084               	movwf	4
  4090  074A  0876               	movf	??_waitFlag,w
  4091  074B  1783               	bsf	3,7	;select IRP bank3
  4092  074C  0080               	movwf	0
  4093                           
  4094                           ;decode_AX25.c: 235: dPacketnum ++;
  4095  074D  3001               	movlw	1
  4096  074E  07E8               	addwf	_dPacketnum,f
  4097  074F  1803               	skipnc
  4098  0750  0AE9               	incf	_dPacketnum+1,f
  4099  0751  3000               	movlw	0
  4100  0752  07E9               	addwf	_dPacketnum+1,f
  4101                           
  4102                           ;decode_AX25.c: 236: for(UINT j=0;j<8;j++){
  4103  0753  01B8               	clrf	waitFlag@j_137
  4104  0754  01B9               	clrf	waitFlag@j_137+1
  4105  0755  3000               	movlw	0
  4106  0756  0239               	subwf	waitFlag@j_137+1,w
  4107  0757  3008               	movlw	8
  4108  0758  1903               	skipnz
  4109  0759  0238               	subwf	waitFlag@j_137,w
  4110  075A  1803               	btfsc	3,0
  4111  075B  2F84               	goto	l3050
  4112  075C                     l3036:	
  4113                           
  4114                           ;decode_AX25.c: 237: flag_judge = getbit();
  4115  075C  120A  158A  2298  120A  118A  	fcall	_getbit
  4116  0761  0871               	movf	?_getbit+1,w
  4117  0762  1283               	bcf	3,5	;RP0=0, select bank0
  4118  0763  1303               	bcf	3,6	;RP1=0, select bank0
  4119  0764  00BB               	movwf	waitFlag@flag_judge+1
  4120  0765  0870               	movf	?_getbit,w
  4121  0766  00BA               	movwf	waitFlag@flag_judge
  4122                           
  4123                           ;decode_AX25.c: 238: buf = buf >> 1;
  4124  0767  083C               	movf	waitFlag@buf,w
  4125  0768  00F6               	movwf	??_waitFlag
  4126  0769  1003               	clrc
  4127  076A  0C76               	rrf	??_waitFlag,w
  4128  076B  00F7               	movwf	??_waitFlag+1
  4129  076C  0877               	movf	??_waitFlag+1,w
  4130  076D  00BC               	movwf	waitFlag@buf
  4131                           
  4132                           ;decode_AX25.c: 240: buf = buf | 0x00;
  4133  076E  083A               	movf	waitFlag@flag_judge,w
  4134  076F  043B               	iorwf	waitFlag@flag_judge+1,w
  4135  0770  1903               	btfsc	3,2
  4136  0771  2F77               	goto	l3046
  4137                           
  4138                           ;decode_AX25.c: 242: buf = buf | 0x80;
  4139                           
  4140                           ;decode_AX25.c: 241: }else{
  4141  0772  083C               	movf	waitFlag@buf,w
  4142  0773  3880               	iorlw	128
  4143  0774  00F6               	movwf	??_waitFlag
  4144  0775  0876               	movf	??_waitFlag,w
  4145  0776  00BC               	movwf	waitFlag@buf
  4146  0777                     l3046:	
  4147  0777  3001               	movlw	1
  4148  0778  07B8               	addwf	waitFlag@j_137,f
  4149  0779  1803               	skipnc
  4150  077A  0AB9               	incf	waitFlag@j_137+1,f
  4151  077B  3000               	movlw	0
  4152  077C  07B9               	addwf	waitFlag@j_137+1,f
  4153  077D  3000               	movlw	0
  4154  077E  0239               	subwf	waitFlag@j_137+1,w
  4155  077F  3008               	movlw	8
  4156  0780  1903               	skipnz
  4157  0781  0238               	subwf	waitFlag@j_137,w
  4158  0782  1C03               	skipc
  4159  0783  2F5C               	goto	l3036
  4160  0784                     l3050:	
  4161                           
  4162                           ;decode_AX25.c: 243: }
  4163                           ;decode_AX25.c: 244: }
  4164                           ;decode_AX25.c: 245: if(buf == ("JQ1ZHX"[5] << 1)){
  4165  0784  3008               	movlw	low (((STR_7+5)-__stringbase)| (0+32768))
  4166  0785  0084               	movwf	4
  4167  0786  120A  158A  2000  120A  118A  	fcall	stringdir
  4168  078B  00F6               	movwf	??_waitFlag
  4169  078C  01F7               	clrf	??_waitFlag+1
  4170  078D  1003               	clrc
  4171  078E  0DF6               	rlf	??_waitFlag,f
  4172  078F  0DF7               	rlf	??_waitFlag+1,f
  4173  0790  083C               	movf	waitFlag@buf,w
  4174  0791  00F8               	movwf	??_waitFlag+2
  4175  0792  01F9               	clrf	??_waitFlag+3
  4176  0793  0877               	movf	??_waitFlag+1,w
  4177  0794  0679               	xorwf	??_waitFlag+3,w
  4178  0795  1D03               	skipz
  4179  0796  2F99               	goto	u2635
  4180  0797  0876               	movf	??_waitFlag,w
  4181  0798  0678               	xorwf	??_waitFlag+2,w
  4182  0799                     u2635:	
  4183  0799  1D03               	skipz
  4184  079A  2FB0               	goto	l3068
  4185                           
  4186                           ;decode_AX25.c: 246: dPacket[dPacketnum] = buf;
  4187  079B  083C               	movf	waitFlag@buf,w
  4188  079C  00F6               	movwf	??_waitFlag
  4189  079D  0868               	movf	_dPacketnum,w
  4190  079E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4191  079F  0084               	movwf	4
  4192  07A0  0876               	movf	??_waitFlag,w
  4193  07A1  1783               	bsf	3,7	;select IRP bank3
  4194  07A2  0080               	movwf	0
  4195                           
  4196                           ;decode_AX25.c: 247: dPacketnum ++;
  4197  07A3  3001               	movlw	1
  4198  07A4  07E8               	addwf	_dPacketnum,f
  4199  07A5  1803               	skipnc
  4200  07A6  0AE9               	incf	_dPacketnum+1,f
  4201  07A7  3000               	movlw	0
  4202  07A8  07E9               	addwf	_dPacketnum+1,f
  4203                           
  4204                           ;decode_AX25.c: 248: rcv_state ++;
  4205  07A9  3001               	movlw	1
  4206  07AA  07EA               	addwf	_rcv_state,f
  4207  07AB  1803               	skipnc
  4208  07AC  0AEB               	incf	_rcv_state+1,f
  4209  07AD  3000               	movlw	0
  4210  07AE  07EB               	addwf	_rcv_state+1,f
  4211                           
  4212                           ;decode_AX25.c: 249: }else{
  4213  07AF  2B2F               	goto	l3070
  4214  07B0                     l3068:	
  4215                           ;decode_AX25.c: 268: }
  4216                           ;decode_AX25.c: 269: }else{
  4217                           
  4218                           ;decode_AX25.c: 267: rcv_state = 0;
  4219                           
  4220                           ;decode_AX25.c: 266: dPacketnum = 0;
  4221                           
  4222                           ;decode_AX25.c: 264: }
  4223                           ;decode_AX25.c: 265: }else{
  4224                           
  4225                           ;decode_AX25.c: 263: rcv_state = 0;
  4226                           
  4227                           ;decode_AX25.c: 262: dPacketnum = 0;
  4228                           
  4229                           ;decode_AX25.c: 260: }
  4230                           ;decode_AX25.c: 261: }else{
  4231                           
  4232                           ;decode_AX25.c: 259: rcv_state = 0;
  4233                           
  4234                           ;decode_AX25.c: 258: dPacketnum = 0;
  4235                           
  4236                           ;decode_AX25.c: 256: }
  4237                           ;decode_AX25.c: 257: }else{
  4238                           
  4239                           ;decode_AX25.c: 255: rcv_state = 0;
  4240                           
  4241                           ;decode_AX25.c: 254: dPacketnum = 0;
  4242                           
  4243                           ;decode_AX25.c: 252: }
  4244                           ;decode_AX25.c: 253: }else{
  4245                           
  4246                           ;decode_AX25.c: 251: rcv_state = 0;
  4247                           
  4248                           ;decode_AX25.c: 250: dPacketnum = 0;
  4249                           
  4250                           
  4251                           ;decode_AX25.c: 270: dPacketnum = 0;
  4252  07B0  01E8               	clrf	_dPacketnum
  4253  07B1  01E9               	clrf	_dPacketnum+1
  4254  07B2  2B2D               	goto	L6
  4255  07B3                     __end_of_waitFlag:	
  4256                           
  4257                           	psect	text5
  4258  0BF8                     __ptext5:	
  4259 ;; *************** function _getdata *****************
  4260 ;; Defined at:
  4261 ;;		line 278 in file "decode_AX25.c"
  4262 ;; Parameters:    Size  Location     Type
  4263 ;;		None
  4264 ;; Auto vars:     Size  Location     Type
  4265 ;;  dbitstatus      2    4[BANK0 ] unsigned int 
  4266 ;;  dstuff          2    2[BANK0 ] unsigned int 
  4267 ;;  bufstore_cou    2    0[BANK0 ] unsigned int 
  4268 ;;  buf             1    6[BANK0 ] unsigned char 
  4269 ;;  dammy_data      1    0        unsigned char 
  4270 ;; Return value:  Size  Location     Type
  4271 ;;                  1    wreg      void 
  4272 ;; Registers used:
  4273 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4274 ;; Tracked objects:
  4275 ;;		On entry : 0/0
  4276 ;;		On exit  : 0/0
  4277 ;;		Unchanged: 0/0
  4278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4279 ;;      Params:         0       0       0       0       0
  4280 ;;      Locals:         0       7       0       0       0
  4281 ;;      Temps:          2       0       0       0       0
  4282 ;;      Totals:         2       7       0       0       0
  4283 ;;Total ram usage:        9 bytes
  4284 ;; Hardware stack levels used:    1
  4285 ;; Hardware stack levels required when called:    1
  4286 ;; This function calls:
  4287 ;;		_getbit
  4288 ;; This function is called by:
  4289 ;;		_ReceivePacket_data
  4290 ;;		_ReceivePacket
  4291 ;; This function uses a non-reentrant model
  4292 ;;
  4293                           
  4294                           
  4295                           ;psect for function _getdata
  4296  0BF8                     _getdata:	
  4297                           
  4298                           ;decode_AX25.c: 279: UBYTE buf = 0x00;
  4299                           
  4300                           ;incstack = 0
  4301                           ; Regs used in _getdata: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4302  0BF8  1283               	bcf	3,5	;RP0=0, select bank0
  4303  0BF9  1303               	bcf	3,6	;RP1=0, select bank0
  4304  0BFA  01A6               	clrf	getdata@buf
  4305                           
  4306                           ;decode_AX25.c: 280: UINT dstuff = 0;
  4307  0BFB  01A2               	clrf	getdata@dstuff
  4308  0BFC  01A3               	clrf	getdata@dstuff+1
  4309                           
  4310                           ;decode_AX25.c: 281: UBYTE dammy_data;
  4311                           ;decode_AX25.c: 282: UINT bufstore_counter = 0;
  4312  0BFD  01A0               	clrf	getdata@bufstore_counter
  4313  0BFE  01A1               	clrf	getdata@bufstore_counter+1
  4314                           
  4315                           ;decode_AX25.c: 283: UINT dbitstatus = 0;
  4316  0BFF  01A4               	clrf	getdata@dbitstatus
  4317  0C00  01A5               	clrf	getdata@dbitstatus+1
  4318  0C01                     l3104:	
  4319                           ;decode_AX25.c: 285: while(rcv_state == 2){
  4320                           
  4321  0C01  3002               	movlw	2
  4322  0C02  066A               	xorwf	_rcv_state,w
  4323  0C03  046B               	iorwf	_rcv_state+1,w
  4324  0C04  1D03               	btfss	3,2
  4325  0C05  0008               	return
  4326                           
  4327                           ;decode_AX25.c: 286: dbitstatus = getbit();
  4328  0C06  120A  158A  2298  120A  158A  	fcall	_getbit
  4329  0C0B  0871               	movf	?_getbit+1,w
  4330  0C0C  1283               	bcf	3,5	;RP0=0, select bank0
  4331  0C0D  1303               	bcf	3,6	;RP1=0, select bank0
  4332  0C0E  00A5               	movwf	getdata@dbitstatus+1
  4333  0C0F  0870               	movf	?_getbit,w
  4334  0C10  00A4               	movwf	getdata@dbitstatus
  4335                           
  4336                           ;decode_AX25.c: 287: if(dstuff == 5){
  4337  0C11  3005               	movlw	5
  4338  0C12  0622               	xorwf	getdata@dstuff,w
  4339  0C13  0423               	iorwf	getdata@dstuff+1,w
  4340  0C14  1D03               	btfss	3,2
  4341  0C15  2C24               	goto	l3086
  4342                           
  4343                           ;decode_AX25.c: 288: if(dbitstatus == 1){
  4344  0C16  0324               	decf	getdata@dbitstatus,w
  4345  0C17  0425               	iorwf	getdata@dbitstatus+1,w
  4346  0C18  1D03               	btfss	3,2
  4347  0C19  2C21               	goto	l3084
  4348                           
  4349                           ;decode_AX25.c: 289: rcv_state ++;
  4350  0C1A  3001               	movlw	1
  4351  0C1B  07EA               	addwf	_rcv_state,f
  4352  0C1C  1803               	skipnc
  4353  0C1D  0AEB               	incf	_rcv_state+1,f
  4354  0C1E  3000               	movlw	0
  4355  0C1F  07EB               	addwf	_rcv_state+1,f
  4356                           
  4357                           ;decode_AX25.c: 290: break;
  4358  0C20  0008               	return
  4359  0C21                     l3084:	
  4360                           ;decode_AX25.c: 291: }else{
  4361                           
  4362                           
  4363                           ;decode_AX25.c: 292: dstuff = 0;
  4364  0C21  01A2               	clrf	getdata@dstuff
  4365  0C22  01A3               	clrf	getdata@dstuff+1
  4366                           
  4367                           ;decode_AX25.c: 293: }
  4368                           ;decode_AX25.c: 294: }else{
  4369  0C23  2C01               	goto	l3104
  4370  0C24                     l3086:	
  4371                           
  4372                           ;decode_AX25.c: 295: buf = buf >> 1;
  4373  0C24  0826               	movf	getdata@buf,w
  4374  0C25  00F6               	movwf	??_getdata
  4375  0C26  1003               	clrc
  4376  0C27  0C76               	rrf	??_getdata,w
  4377  0C28  00F7               	movwf	??_getdata+1
  4378  0C29  0877               	movf	??_getdata+1,w
  4379  0C2A  00A6               	movwf	getdata@buf
  4380                           
  4381                           ;decode_AX25.c: 297: buf = buf | 0x00;
  4382  0C2B  0824               	movf	getdata@dbitstatus,w
  4383  0C2C  0425               	iorwf	getdata@dbitstatus+1,w
  4384  0C2D  1D03               	btfss	3,2
  4385  0C2E  2C32               	goto	l3090
  4386                           
  4387                           ;decode_AX25.c: 298: dstuff = 0;
  4388  0C2F  01A2               	clrf	getdata@dstuff
  4389  0C30  01A3               	clrf	getdata@dstuff+1
  4390                           
  4391                           ;decode_AX25.c: 299: }else{
  4392  0C31  2C3D               	goto	l3094
  4393  0C32                     l3090:	
  4394                           
  4395                           ;decode_AX25.c: 300: buf = buf | 0x80;
  4396  0C32  0826               	movf	getdata@buf,w
  4397  0C33  3880               	iorlw	128
  4398  0C34  00F6               	movwf	??_getdata
  4399  0C35  0876               	movf	??_getdata,w
  4400  0C36  00A6               	movwf	getdata@buf
  4401                           
  4402                           ;decode_AX25.c: 301: dstuff ++;
  4403  0C37  3001               	movlw	1
  4404  0C38  07A2               	addwf	getdata@dstuff,f
  4405  0C39  1803               	skipnc
  4406  0C3A  0AA3               	incf	getdata@dstuff+1,f
  4407  0C3B  3000               	movlw	0
  4408  0C3C  07A3               	addwf	getdata@dstuff+1,f
  4409  0C3D                     l3094:	
  4410                           
  4411                           ;decode_AX25.c: 302: }
  4412                           ;decode_AX25.c: 303: bufstore_counter ++;
  4413  0C3D  3001               	movlw	1
  4414  0C3E  07A0               	addwf	getdata@bufstore_counter,f
  4415  0C3F  1803               	skipnc
  4416  0C40  0AA1               	incf	getdata@bufstore_counter+1,f
  4417  0C41  3000               	movlw	0
  4418  0C42  07A1               	addwf	getdata@bufstore_counter+1,f
  4419                           
  4420                           ;decode_AX25.c: 304: if(bufstore_counter == 8){
  4421  0C43  3008               	movlw	8
  4422  0C44  0620               	xorwf	getdata@bufstore_counter,w
  4423  0C45  0421               	iorwf	getdata@bufstore_counter+1,w
  4424  0C46  1D03               	btfss	3,2
  4425  0C47  2C01               	goto	l3104
  4426                           
  4427                           ;decode_AX25.c: 305: bufstore_counter = 0;
  4428  0C48  01A0               	clrf	getdata@bufstore_counter
  4429  0C49  01A1               	clrf	getdata@bufstore_counter+1
  4430                           
  4431                           ;decode_AX25.c: 306: dPacket[dPacketnum] = buf;
  4432  0C4A  0826               	movf	getdata@buf,w
  4433  0C4B  00F6               	movwf	??_getdata
  4434  0C4C  0868               	movf	_dPacketnum,w
  4435  0C4D  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4436  0C4E  0084               	movwf	4
  4437  0C4F  0876               	movf	??_getdata,w
  4438  0C50  1783               	bsf	3,7	;select IRP bank3
  4439  0C51  0080               	movwf	0
  4440                           
  4441                           ;decode_AX25.c: 307: dPacketnum ++;
  4442  0C52  3001               	movlw	1
  4443  0C53  07E8               	addwf	_dPacketnum,f
  4444  0C54  1803               	skipnc
  4445  0C55  0AE9               	incf	_dPacketnum+1,f
  4446  0C56  3000               	movlw	0
  4447  0C57  07E9               	addwf	_dPacketnum+1,f
  4448  0C58  2C01               	goto	l3104
  4449  0C59                     __end_of_getdata:	
  4450                           
  4451                           	psect	text6
  4452  0A98                     __ptext6:	
  4453 ;; *************** function _getbit *****************
  4454 ;; Defined at:
  4455 ;;		line 40 in file "decode_AX25.c"
  4456 ;; Parameters:    Size  Location     Type
  4457 ;;		None
  4458 ;; Auto vars:     Size  Location     Type
  4459 ;;  i               2    4[COMMON] unsigned int 
  4460 ;; Return value:  Size  Location     Type
  4461 ;;                  2    0[COMMON] unsigned int 
  4462 ;; Registers used:
  4463 ;;		wreg, status,2, status,0
  4464 ;; Tracked objects:
  4465 ;;		On entry : 0/0
  4466 ;;		On exit  : 0/0
  4467 ;;		Unchanged: 0/0
  4468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4469 ;;      Params:         2       0       0       0       0
  4470 ;;      Locals:         2       0       0       0       0
  4471 ;;      Temps:          2       0       0       0       0
  4472 ;;      Totals:         6       0       0       0       0
  4473 ;;Total ram usage:        6 bytes
  4474 ;; Hardware stack levels used:    1
  4475 ;; This function calls:
  4476 ;;		Nothing
  4477 ;; This function is called by:
  4478 ;;		_waitFlag
  4479 ;;		_getdata
  4480 ;;		_conv_DI_UARTRX
  4481 ;; This function uses a non-reentrant model
  4482 ;;
  4483                           
  4484                           
  4485                           ;psect for function _getbit
  4486  0A98                     _getbit:	
  4487                           
  4488                           ;decode_AX25.c: 41: static UINT oldbit;
  4489                           ;decode_AX25.c: 42: oldbit = RB5;
  4490                           
  4491                           ;incstack = 0
  4492                           ; Regs used in _getbit: [wreg+status,2+status,0]
  4493  0A98  1003               	clrc
  4494  0A99  1283               	bcf	3,5	;RP0=0, select bank0
  4495  0A9A  1303               	bcf	3,6	;RP1=0, select bank0
  4496  0A9B  1A86               	btfsc	6,5	;volatile
  4497  0A9C  1403               	setc
  4498  0A9D  3000               	movlw	0
  4499  0A9E  1803               	skipnc
  4500  0A9F  3001               	movlw	1
  4501  0AA0  00F2               	movwf	??_getbit
  4502  0AA1  01F3               	clrf	??_getbit+1
  4503  0AA2  0872               	movf	??_getbit,w
  4504  0AA3  1683               	bsf	3,5	;RP0=1, select bank1
  4505  0AA4  1303               	bcf	3,6	;RP1=0, select bank1
  4506  0AA5  00E6               	movwf	getbit@oldbit^(0+128)
  4507  0AA6  0873               	movf	??_getbit+1,w
  4508  0AA7  00E7               	movwf	(getbit@oldbit+1)^(0+128)
  4509                           
  4510                           ;decode_AX25.c: 43: for(UINT i=0;i<62;i++){
  4511  0AA8  01F4               	clrf	getbit@i
  4512  0AA9  01F5               	clrf	getbit@i+1
  4513  0AAA  3000               	movlw	0
  4514  0AAB  0275               	subwf	getbit@i+1,w
  4515  0AAC  303E               	movlw	62
  4516  0AAD  1903               	skipnz
  4517  0AAE  0274               	subwf	getbit@i,w
  4518  0AAF  1803               	btfsc	3,0
  4519  0AB0  2ADF               	goto	l2550
  4520                           
  4521                           ;decode_AX25.c: 44: if(RB5 != oldbit){
  4522  0AB1  1003               	clrc
  4523  0AB2                     L7:	
  4524  0AB2  1283               	bcf	3,5	;RP0=0, select bank0
  4525  0AB3  1A86               	btfsc	6,5	;volatile
  4526  0AB4  1403               	setc
  4527  0AB5  3000               	movlw	0
  4528  0AB6  1803               	skipnc
  4529  0AB7  3001               	movlw	1
  4530  0AB8  00F2               	movwf	??_getbit
  4531  0AB9  01F3               	clrf	??_getbit+1
  4532  0ABA  1683               	bsf	3,5	;RP0=1, select bank1
  4533  0ABB  1303               	bcf	3,6	;RP1=0, select bank1
  4534  0ABC  0867               	movf	(getbit@oldbit+1)^(0+128),w
  4535  0ABD  0673               	xorwf	??_getbit+1,w
  4536  0ABE  1D03               	skipz
  4537  0ABF  2AC2               	goto	u1865
  4538  0AC0  0866               	movf	getbit@oldbit^(0+128),w
  4539  0AC1  0672               	xorwf	??_getbit,w
  4540  0AC2                     u1865:	
  4541  0AC2  1903               	skipnz
  4542  0AC3  2AD2               	goto	l2548
  4543                           
  4544                           ;decode_AX25.c: 45: _delay((unsigned long)((400)*(10000000/4000000.0)));
  4545  0AC4  30C7               	movlw	199
  4546  0AC5  00F2               	movwf	??_getbit
  4547  0AC6                     u3697:	
  4548  0AC6  2AC7               	nop2
  4549  0AC7  0BF2               	decfsz	??_getbit,f
  4550  0AC8  2AC6               	goto	u3697
  4551  0AC9  2ACA               	nop2
  4552  0ACA  2ACB               	nop2
  4553                           
  4554                           ;decode_AX25.c: 46: RC2= 1- RC2;
  4555  0ACB  3004               	movlw	4
  4556  0ACC  1283               	bcf	3,5	;RP0=0, select bank0
  4557  0ACD  1303               	bcf	3,6	;RP1=0, select bank0
  4558  0ACE  0687               	xorwf	7,f
  4559                           
  4560                           ;decode_AX25.c: 47: return 0;
  4561  0ACF  01F0               	clrf	?_getbit
  4562  0AD0  01F1               	clrf	?_getbit+1
  4563  0AD1  0008               	return
  4564  0AD2                     l2548:	
  4565  0AD2  3001               	movlw	1
  4566  0AD3  07F4               	addwf	getbit@i,f
  4567  0AD4  1803               	skipnc
  4568  0AD5  0AF5               	incf	getbit@i+1,f
  4569  0AD6  3000               	movlw	0
  4570  0AD7  07F5               	addwf	getbit@i+1,f
  4571  0AD8  3000               	movlw	0
  4572  0AD9  0275               	subwf	getbit@i+1,w
  4573  0ADA  303E               	movlw	62
  4574  0ADB  1903               	skipnz
  4575  0ADC  0274               	subwf	getbit@i,w
  4576  0ADD  1C03               	skipc
  4577  0ADE  2AB2               	goto	L7
  4578  0ADF                     l2550:	
  4579                           
  4580                           ;decode_AX25.c: 48: }
  4581                           ;decode_AX25.c: 49: }
  4582                           ;decode_AX25.c: 50: return 1;
  4583  0ADF  3001               	movlw	1
  4584  0AE0  00F0               	movwf	?_getbit
  4585  0AE1  3000               	movlw	0
  4586  0AE2  00F1               	movwf	?_getbit+1
  4587  0AE3  0008               	return
  4588  0AE4                     __end_of_getbit:	
  4589                           
  4590                           	psect	text7
  4591  002A                     __ptext7:	
  4592 ;; *************** function _fcscheck *****************
  4593 ;; Defined at:
  4594 ;;		line 313 in file "decode_AX25.c"
  4595 ;; Parameters:    Size  Location     Type
  4596 ;;		None
  4597 ;; Auto vars:     Size  Location     Type
  4598 ;;  i               2    7[COMMON] unsigned int 
  4599 ;;  i               2    5[COMMON] unsigned int 
  4600 ;;  byte            1    9[COMMON] unsigned char 
  4601 ;;  bt              1    4[COMMON] unsigned char 
  4602 ;; Return value:  Size  Location     Type
  4603 ;;                  2    0[COMMON] unsigned int 
  4604 ;; Registers used:
  4605 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4606 ;; Tracked objects:
  4607 ;;		On entry : 0/0
  4608 ;;		On exit  : 0/0
  4609 ;;		Unchanged: 0/0
  4610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4611 ;;      Params:         2       0       0       0       0
  4612 ;;      Locals:         6       0       0       0       0
  4613 ;;      Temps:          2       0       0       0       0
  4614 ;;      Totals:        10       0       0       0       0
  4615 ;;Total ram usage:       10 bytes
  4616 ;; Hardware stack levels used:    1
  4617 ;; This function calls:
  4618 ;;		Nothing
  4619 ;; This function is called by:
  4620 ;;		_ReceivePacket_data
  4621 ;;		_ReceivePacket
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           
  4626                           ;psect for function _fcscheck
  4627  002A                     _fcscheck:	
  4628                           
  4629                           ;decode_AX25.c: 314: UBYTE bt,byte;
  4630                           ;decode_AX25.c: 315: dfcslo = dfcshi = 0xff;
  4631                           
  4632                           ;incstack = 0
  4633                           ; Regs used in _fcscheck: [wreg-fsr0h+status,2+status,0]
  4634  002A  30FF               	movlw	255
  4635  002B  1283               	bcf	3,5	;RP0=0, select bank0
  4636  002C  1303               	bcf	3,6	;RP1=0, select bank0
  4637  002D  00EF               	movwf	_dfcshi
  4638  002E  00F2               	movwf	??_fcscheck
  4639  002F  0872               	movf	??_fcscheck,w
  4640  0030  00EE               	movwf	_dfcslo
  4641                           
  4642                           ;decode_AX25.c: 316: while(rcv_state == 3){
  4643  0031  3003               	movlw	3
  4644  0032  066A               	xorwf	_rcv_state,w
  4645  0033  046B               	iorwf	_rcv_state+1,w
  4646  0034  1D03               	btfss	3,2
  4647  0035  0008               	return
  4648                           
  4649                           ;decode_AX25.c: 317: for(UINT i=0;i<dPacketnum-2;i++){
  4650  0036  01F5               	clrf	fcscheck@i
  4651  0037  01F6               	clrf	fcscheck@i+1
  4652  0038                     l3132:	
  4653  0038  0868               	movf	_dPacketnum,w
  4654  0039  3EFE               	addlw	254
  4655  003A  00F2               	movwf	??_fcscheck
  4656  003B  0869               	movf	_dPacketnum+1,w
  4657  003C  1803               	skipnc
  4658  003D  3E01               	addlw	1
  4659  003E  3EFF               	addlw	255
  4660  003F  00F3               	movwf	??_fcscheck+1
  4661  0040  0873               	movf	??_fcscheck+1,w
  4662  0041  0276               	subwf	fcscheck@i+1,w
  4663  0042  1D03               	skipz
  4664  0043  2846               	goto	u2735
  4665  0044  0872               	movf	??_fcscheck,w
  4666  0045  0275               	subwf	fcscheck@i,w
  4667  0046                     u2735:	
  4668  0046  1803               	btfsc	3,0
  4669  0047  2891               	goto	l279
  4670                           
  4671                           ;decode_AX25.c: 318: byte = dPacket[i];
  4672  0048  0875               	movf	fcscheck@i,w
  4673  0049  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4674  004A  0084               	movwf	4
  4675  004B  1783               	bsf	3,7	;select IRP bank3
  4676  004C  0800               	movf	0,w
  4677  004D  00F2               	movwf	??_fcscheck
  4678  004E  0872               	movf	??_fcscheck,w
  4679  004F  00F9               	movwf	fcscheck@byte
  4680                           
  4681                           ;decode_AX25.c: 319: for(UINT i=0;i<8;i++){
  4682  0050  01F7               	clrf	fcscheck@i_149
  4683  0051  01F8               	clrf	fcscheck@i_149+1
  4684  0052  3000               	movlw	0
  4685  0053  0278               	subwf	fcscheck@i_149+1,w
  4686  0054  3008               	movlw	8
  4687  0055  1903               	skipnz
  4688  0056  0277               	subwf	fcscheck@i_149,w
  4689  0057  1803               	btfsc	3,0
  4690  0058  288A               	goto	l3130
  4691  0059                     l3118:	
  4692                           
  4693                           ;decode_AX25.c: 320: bt = byte & 0x01;
  4694  0059  0879               	movf	fcscheck@byte,w
  4695  005A  3901               	andlw	1
  4696  005B  00F2               	movwf	??_fcscheck
  4697  005C  0872               	movf	??_fcscheck,w
  4698  005D  00F4               	movwf	fcscheck@bt
  4699  005E  1003               	bcf	3,0	;# 
  4700  005F  0CEF               	rrf	_dfcshi,f	;# 
  4701  0060  0CEE               	rrf	_dfcslo,f	;# 
  4702                           
  4703                           ;decode_AX25.c: 326: if(((STATUS & 0x01)^bt) == 0x01){
  4704  0061  3001               	movlw	1
  4705  0062  1283               	bcf	3,5	;RP0=0, select bank0
  4706  0063  1303               	bcf	3,6	;RP1=0, select bank0
  4707  0064  0503               	andwf	3,w	;volatile
  4708  0065  00F2               	movwf	??_fcscheck
  4709  0066  0874               	movf	fcscheck@bt,w
  4710  0067  0672               	xorwf	??_fcscheck,w
  4711  0068  00F3               	movwf	??_fcscheck+1
  4712  0069  0373               	decf	??_fcscheck+1,w
  4713  006A  1D03               	btfss	3,2
  4714  006B  2876               	goto	l3124
  4715                           
  4716                           ;decode_AX25.c: 327: dfcshi = dfcshi ^ 0x84;
  4717  006C  086F               	movf	_dfcshi,w
  4718  006D  3A84               	xorlw	132
  4719  006E  00F2               	movwf	??_fcscheck
  4720  006F  0872               	movf	??_fcscheck,w
  4721  0070  00EF               	movwf	_dfcshi
  4722                           
  4723                           ;decode_AX25.c: 328: dfcslo = dfcslo ^ 0x08;
  4724  0071  086E               	movf	_dfcslo,w
  4725  0072  3A08               	xorlw	8
  4726  0073  00F2               	movwf	??_fcscheck
  4727  0074  0872               	movf	??_fcscheck,w
  4728  0075  00EE               	movwf	_dfcslo
  4729  0076                     l3124:	
  4730                           
  4731                           ;decode_AX25.c: 329: }
  4732                           ;decode_AX25.c: 330: byte = byte >> 1;
  4733  0076  0879               	movf	fcscheck@byte,w
  4734  0077  00F2               	movwf	??_fcscheck
  4735  0078  1003               	clrc
  4736  0079  0C72               	rrf	??_fcscheck,w
  4737  007A  00F3               	movwf	??_fcscheck+1
  4738  007B  0873               	movf	??_fcscheck+1,w
  4739  007C  00F9               	movwf	fcscheck@byte
  4740  007D  3001               	movlw	1
  4741  007E  07F7               	addwf	fcscheck@i_149,f
  4742  007F  1803               	skipnc
  4743  0080  0AF8               	incf	fcscheck@i_149+1,f
  4744  0081  3000               	movlw	0
  4745  0082  07F8               	addwf	fcscheck@i_149+1,f
  4746  0083  3000               	movlw	0
  4747  0084  0278               	subwf	fcscheck@i_149+1,w
  4748  0085  3008               	movlw	8
  4749  0086  1903               	skipnz
  4750  0087  0277               	subwf	fcscheck@i_149,w
  4751  0088  1C03               	skipc
  4752  0089  2859               	goto	l3118
  4753  008A                     l3130:	
  4754  008A  3001               	movlw	1
  4755  008B  07F5               	addwf	fcscheck@i,f
  4756  008C  1803               	skipnc
  4757  008D  0AF6               	incf	fcscheck@i+1,f
  4758  008E  3000               	movlw	0
  4759  008F  07F6               	addwf	fcscheck@i+1,f
  4760  0090  2838               	goto	l3132
  4761  0091                     l279:	
  4762                           
  4763                           ;decode_AX25.c: 331: }
  4764                           ;decode_AX25.c: 332: }
  4765                           ;decode_AX25.c: 333: dfcslo = dfcslo ^ 0xff;
  4766  0091  09EE               	comf	_dfcslo,f
  4767                           
  4768                           ;decode_AX25.c: 334: dfcshi = dfcshi ^ 0xff;
  4769  0092  09EF               	comf	_dfcshi,f
  4770                           
  4771                           ;decode_AX25.c: 337: if((dPacket[dPacketnum-2] == dfcslo) && (dPacket[dPacketnum-1] == d
      +                          fcshi)){
  4772  0093  0868               	movf	_dPacketnum,w
  4773  0094  3EFE               	addlw	254
  4774  0095  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4775  0096  0084               	movwf	4
  4776  0097  1783               	bsf	3,7	;select IRP bank3
  4777  0098  0800               	movf	0,w
  4778  0099  066E               	xorwf	_dfcslo,w
  4779  009A  1D03               	skipz
  4780  009B  28A9               	goto	l3144
  4781  009C  0868               	movf	_dPacketnum,w
  4782  009D  3EFF               	addlw	255
  4783  009E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4784  009F  0084               	movwf	4
  4785  00A0  0800               	movf	0,w
  4786  00A1  066F               	xorwf	_dfcshi,w
  4787  00A2  1D03               	skipz
  4788  00A3  28A9               	goto	l3144
  4789                           
  4790                           ;decode_AX25.c: 342: return 1;
  4791  00A4  3001               	movlw	1
  4792  00A5  00F0               	movwf	?_fcscheck
  4793  00A6  3000               	movlw	0
  4794  00A7  00F1               	movwf	?_fcscheck+1
  4795  00A8  0008               	return
  4796  00A9                     l3144:	
  4797                           ;decode_AX25.c: 343: }else{
  4798                           
  4799                           
  4800                           ;decode_AX25.c: 348: return 0;
  4801  00A9  01F0               	clrf	?_fcscheck
  4802  00AA  01F1               	clrf	?_fcscheck+1
  4803  00AB  0008               	return
  4804  00AC                     __end_of_fcscheck:	
  4805                           
  4806                           	psect	text8
  4807  0834                     __ptext8:	
  4808 ;; *************** function _NM_waddress *****************
  4809 ;; Defined at:
  4810 ;;		line 72 in file "UART.c"
  4811 ;; Parameters:    Size  Location     Type
  4812 ;;  NM_wad_heade    1    wreg     unsigned char 
  4813 ;;  whigh_addres    1    1[COMMON] unsigned char 
  4814 ;;  wlow_address    1    2[COMMON] unsigned char 
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;  NM_wad_heade    1    3[COMMON] unsigned char 
  4817 ;; Return value:  Size  Location     Type
  4818 ;;                  1    wreg      void 
  4819 ;; Registers used:
  4820 ;;		wreg, status,2, status,0, pclath, cstack
  4821 ;; Tracked objects:
  4822 ;;		On entry : 0/0
  4823 ;;		On exit  : 0/0
  4824 ;;		Unchanged: 0/0
  4825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4826 ;;      Params:         2       0       0       0       0
  4827 ;;      Locals:         1       0       0       0       0
  4828 ;;      Temps:          0       0       0       0       0
  4829 ;;      Totals:         3       0       0       0       0
  4830 ;;Total ram usage:        3 bytes
  4831 ;; Hardware stack levels used:    1
  4832 ;; Hardware stack levels required when called:    1
  4833 ;; This function calls:
  4834 ;;		_putch
  4835 ;; This function is called by:
  4836 ;;		_main
  4837 ;; This function uses a non-reentrant model
  4838 ;;
  4839                           
  4840                           
  4841                           ;psect for function _NM_waddress
  4842  0834                     _NM_waddress:	
  4843                           
  4844                           ;incstack = 0
  4845                           ; Regs used in _NM_waddress: [wreg+status,2+status,0+pclath+cstack]
  4846                           ;NM_waddress@NM_wad_header stored from wreg
  4847  0834  00F3               	movwf	NM_waddress@NM_wad_header
  4848                           
  4849                           ;UART.c: 73: putch(NM_wad_header);
  4850  0835  0873               	movf	NM_waddress@NM_wad_header,w
  4851  0836  160A  118A  27F0  120A  158A  	fcall	_putch
  4852                           
  4853                           ;UART.c: 74: putch(whigh_address);
  4854  083B  0871               	movf	NM_waddress@whigh_address,w
  4855  083C  160A  118A  27F0  120A  158A  	fcall	_putch
  4856                           
  4857                           ;UART.c: 75: putch(wlow_address);
  4858  0841  0872               	movf	NM_waddress@wlow_address,w
  4859  0842  160A  118A  27F0   	fcall	_putch
  4860  0845  0008               	return
  4861  0846                     __end_of_NM_waddress:	
  4862                           
  4863                           	psect	text9
  4864  17F0                     __ptext9:	
  4865 ;; *************** function _putch *****************
  4866 ;; Defined at:
  4867 ;;		line 39 in file "UART.c"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;  byte            1    wreg     unsigned char 
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;  byte            1    0[COMMON] unsigned char 
  4872 ;; Return value:  Size  Location     Type
  4873 ;;                  1    wreg      void 
  4874 ;; Registers used:
  4875 ;;		wreg
  4876 ;; Tracked objects:
  4877 ;;		On entry : 0/0
  4878 ;;		On exit  : 0/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4881 ;;      Params:         0       0       0       0       0
  4882 ;;      Locals:         1       0       0       0       0
  4883 ;;      Temps:          0       0       0       0       0
  4884 ;;      Totals:         1       0       0       0       0
  4885 ;;Total ram usage:        1 bytes
  4886 ;; Hardware stack levels used:    1
  4887 ;; This function calls:
  4888 ;;		Nothing
  4889 ;; This function is called by:
  4890 ;;		_NM_waddress
  4891 ;;		_TXOBC_waddress
  4892 ;;		_putstr
  4893 ;;		_putcrlf
  4894 ;;		_put_error
  4895 ;;		_put_ok
  4896 ;;		_putAX25
  4897 ;;		_conv_DI_UARTRX
  4898 ;;		_test_Packetmaker
  4899 ;;		_EEPROM_Read
  4900 ;; This function uses a non-reentrant model
  4901 ;;
  4902                           
  4903                           
  4904                           ;psect for function _putch
  4905  17F0                     _putch:	
  4906                           
  4907                           ;incstack = 0
  4908                           ; Regs used in _putch: [wreg]
  4909                           ;putch@byte stored from wreg
  4910  17F0  00F0               	movwf	putch@byte
  4911  17F1                     l69:	
  4912                           ;UART.c: 40: while(!TXIF);
  4913                           
  4914  17F1  1283               	bcf	3,5	;RP0=0, select bank0
  4915  17F2  1303               	bcf	3,6	;RP1=0, select bank0
  4916  17F3  1E0C               	btfss	12,4	;volatile
  4917  17F4  2FF1               	goto	l69
  4918                           
  4919                           ;UART.c: 41: TXREG = byte;
  4920  17F5  0870               	movf	putch@byte,w
  4921  17F6  0099               	movwf	25	;volatile
  4922  17F7  0008               	return
  4923  17F8                     __end_of_putch:	
  4924                           
  4925                           	psect	text10
  4926  085B                     __ptext10:	
  4927 ;; *************** function _Init_SERIAL *****************
  4928 ;; Defined at:
  4929 ;;		line 6 in file "UART.c"
  4930 ;; Parameters:    Size  Location     Type
  4931 ;;		None
  4932 ;; Auto vars:     Size  Location     Type
  4933 ;;		None
  4934 ;; Return value:  Size  Location     Type
  4935 ;;                  1    wreg      void 
  4936 ;; Registers used:
  4937 ;;		wreg
  4938 ;; Tracked objects:
  4939 ;;		On entry : 0/0
  4940 ;;		On exit  : 0/0
  4941 ;;		Unchanged: 0/0
  4942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4943 ;;      Params:         0       0       0       0       0
  4944 ;;      Locals:         0       0       0       0       0
  4945 ;;      Temps:          0       0       0       0       0
  4946 ;;      Totals:         0       0       0       0       0
  4947 ;;Total ram usage:        0 bytes
  4948 ;; Hardware stack levels used:    1
  4949 ;; This function calls:
  4950 ;;		Nothing
  4951 ;; This function is called by:
  4952 ;;		_main
  4953 ;; This function uses a non-reentrant model
  4954 ;;
  4955                           
  4956                           
  4957                           ;psect for function _Init_SERIAL
  4958  085B                     _Init_SERIAL:	
  4959                           
  4960                           ;UART.c: 7: SPBRG = 10;
  4961                           
  4962                           ;incstack = 0
  4963                           ; Regs used in _Init_SERIAL: [wreg]
  4964  085B  300A               	movlw	10
  4965  085C  1683               	bsf	3,5	;RP0=1, select bank1
  4966  085D  1303               	bcf	3,6	;RP1=0, select bank1
  4967  085E  0099               	movwf	25	;volatile
  4968                           
  4969                           ;UART.c: 8: BRGH = 0;
  4970  085F  1118               	bcf	24,2	;volatile
  4971                           
  4972                           ;UART.c: 9: SYNC = 0;
  4973  0860  1218               	bcf	24,4	;volatile
  4974                           
  4975                           ;UART.c: 10: SPEN = 1;
  4976  0861  1283               	bcf	3,5	;RP0=0, select bank0
  4977  0862  1303               	bcf	3,6	;RP1=0, select bank0
  4978  0863  1798               	bsf	24,7	;volatile
  4979                           
  4980                           ;UART.c: 11: CREN = 1;
  4981  0864  1618               	bsf	24,4	;volatile
  4982                           
  4983                           ;UART.c: 12: SREN = 0;
  4984  0865  1298               	bcf	24,5	;volatile
  4985                           
  4986                           ;UART.c: 13: RCIF = 0;
  4987  0866  128C               	bcf	12,5	;volatile
  4988                           
  4989                           ;UART.c: 14: TXIE = 0;
  4990  0867  1683               	bsf	3,5	;RP0=1, select bank1
  4991  0868  1303               	bcf	3,6	;RP1=0, select bank1
  4992  0869  120C               	bcf	12,4	;volatile
  4993                           
  4994                           ;UART.c: 15: RCIE = 1;
  4995  086A  168C               	bsf	12,5	;volatile
  4996                           
  4997                           ;UART.c: 16: TX9 = 0;
  4998  086B  1318               	bcf	24,6	;volatile
  4999                           
  5000                           ;UART.c: 17: RX9 = 0;
  5001  086C  1283               	bcf	3,5	;RP0=0, select bank0
  5002  086D  1303               	bcf	3,6	;RP1=0, select bank0
  5003  086E  1318               	bcf	24,6	;volatile
  5004                           
  5005                           ;UART.c: 18: TXEN = 0;
  5006  086F  1683               	bsf	3,5	;RP0=1, select bank1
  5007  0870  1303               	bcf	3,6	;RP1=0, select bank1
  5008  0871  1298               	bcf	24,5	;volatile
  5009                           
  5010                           ;UART.c: 19: TXEN = 1;
  5011  0872  1698               	bsf	24,5	;volatile
  5012  0873  0008               	return
  5013  0874                     __end_of_Init_SERIAL:	
  5014                           
  5015                           	psect	text11
  5016  08A7                     __ptext11:	
  5017 ;; *************** function _Init_MPU *****************
  5018 ;; Defined at:
  5019 ;;		line 8 in file "Init_MPU.c"
  5020 ;; Parameters:    Size  Location     Type
  5021 ;;		None
  5022 ;; Auto vars:     Size  Location     Type
  5023 ;;		None
  5024 ;; Return value:  Size  Location     Type
  5025 ;;                  1    wreg      void 
  5026 ;; Registers used:
  5027 ;;		wreg, status,2
  5028 ;; Tracked objects:
  5029 ;;		On entry : 0/0
  5030 ;;		On exit  : 0/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5033 ;;      Params:         0       0       0       0       0
  5034 ;;      Locals:         0       0       0       0       0
  5035 ;;      Temps:          0       0       0       0       0
  5036 ;;      Totals:         0       0       0       0       0
  5037 ;;Total ram usage:        0 bytes
  5038 ;; Hardware stack levels used:    1
  5039 ;; This function calls:
  5040 ;;		Nothing
  5041 ;; This function is called by:
  5042 ;;		_main
  5043 ;; This function uses a non-reentrant model
  5044 ;;
  5045                           
  5046                           
  5047                           ;psect for function _Init_MPU
  5048  08A7                     _Init_MPU:	
  5049                           
  5050                           ;Init_MPU.c: 11: PORTA = 0x00;
  5051                           
  5052                           ;incstack = 0
  5053                           ; Regs used in _Init_MPU: [wreg+status,2]
  5054  08A7  1283               	bcf	3,5	;RP0=0, select bank0
  5055  08A8  1303               	bcf	3,6	;RP1=0, select bank0
  5056  08A9  0185               	clrf	5	;volatile
  5057                           
  5058                           ;Init_MPU.c: 12: PORTB = 0x00;
  5059  08AA  0186               	clrf	6	;volatile
  5060                           
  5061                           ;Init_MPU.c: 13: PORTC = 0x00;
  5062  08AB  0187               	clrf	7	;volatile
  5063                           
  5064                           ;Init_MPU.c: 14: PORTD = 0x00;
  5065  08AC  0188               	clrf	8	;volatile
  5066                           
  5067                           ;Init_MPU.c: 15: PORTE = 0x00;
  5068  08AD  0189               	clrf	9	;volatile
  5069                           
  5070                           ;Init_MPU.c: 18: ANSEL = 0x00;
  5071  08AE  1683               	bsf	3,5	;RP0=1, select bank3
  5072  08AF  1703               	bsf	3,6	;RP1=1, select bank3
  5073  08B0  0188               	clrf	8	;volatile
  5074                           
  5075                           ;Init_MPU.c: 19: ANSELH = 0x00;
  5076  08B1  0189               	clrf	9	;volatile
  5077                           
  5078                           ;Init_MPU.c: 23: TRISA = 0b10000000;
  5079  08B2  3080               	movlw	128
  5080  08B3  1683               	bsf	3,5	;RP0=1, select bank1
  5081  08B4  1303               	bcf	3,6	;RP1=0, select bank1
  5082  08B5  0085               	movwf	5	;volatile
  5083                           
  5084                           ;Init_MPU.c: 24: TRISB = 0b00100000;
  5085  08B6  3020               	movlw	32
  5086  08B7  0086               	movwf	6	;volatile
  5087                           
  5088                           ;Init_MPU.c: 25: TRISC = 0b10011000;
  5089  08B8  3098               	movlw	152
  5090  08B9  0087               	movwf	7	;volatile
  5091                           
  5092                           ;Init_MPU.c: 26: TRISD = 0b00000000;
  5093  08BA  0188               	clrf	8	;volatile
  5094                           
  5095                           ;Init_MPU.c: 27: TRISE = 0b00000000;
  5096  08BB  0189               	clrf	9	;volatile
  5097                           
  5098                           ;Init_MPU.c: 30: PORTA = 0x00;
  5099  08BC  1283               	bcf	3,5	;RP0=0, select bank0
  5100  08BD  1303               	bcf	3,6	;RP1=0, select bank0
  5101  08BE  0185               	clrf	5	;volatile
  5102                           
  5103                           ;Init_MPU.c: 31: PORTB = 0x00;
  5104  08BF  0186               	clrf	6	;volatile
  5105                           
  5106                           ;Init_MPU.c: 32: PORTC = 0x00;
  5107  08C0  0187               	clrf	7	;volatile
  5108                           
  5109                           ;Init_MPU.c: 33: PORTD = 0x00;
  5110  08C1  0188               	clrf	8	;volatile
  5111                           
  5112                           ;Init_MPU.c: 34: PORTE = 0x00;
  5113  08C2  0189               	clrf	9	;volatile
  5114  08C3  0008               	return
  5115  08C4                     __end_of_Init_MPU:	
  5116                           
  5117                           	psect	text12
  5118  099E                     __ptext12:	
  5119 ;; *************** function _Init_I2C_M *****************
  5120 ;; Defined at:
  5121 ;;		line 8 in file "I2C.c"
  5122 ;; Parameters:    Size  Location     Type
  5123 ;;  c               4    0[BANK0 ] const unsigned long 
  5124 ;; Auto vars:     Size  Location     Type
  5125 ;;		None
  5126 ;; Return value:  Size  Location     Type
  5127 ;;                  1    wreg      void 
  5128 ;; Registers used:
  5129 ;;		wreg, status,2, status,0, pclath, cstack
  5130 ;; Tracked objects:
  5131 ;;		On entry : 0/0
  5132 ;;		On exit  : 0/0
  5133 ;;		Unchanged: 0/0
  5134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5135 ;;      Params:         0       4       0       0       0
  5136 ;;      Locals:         0       0       0       0       0
  5137 ;;      Temps:          0       4       0       0       0
  5138 ;;      Totals:         0       8       0       0       0
  5139 ;;Total ram usage:        8 bytes
  5140 ;; Hardware stack levels used:    1
  5141 ;; Hardware stack levels required when called:    1
  5142 ;; This function calls:
  5143 ;;		___lldiv
  5144 ;; This function is called by:
  5145 ;;		_main
  5146 ;; This function uses a non-reentrant model
  5147 ;;
  5148                           
  5149                           
  5150                           ;psect for function _Init_I2C_M
  5151  099E                     _Init_I2C_M:	
  5152                           
  5153                           ;I2C.c: 9: SSPCON = 0b00101000;
  5154                           
  5155                           ;incstack = 0
  5156                           ; Regs used in _Init_I2C_M: [wreg+status,2+status,0+pclath+cstack]
  5157  099E  3028               	movlw	40
  5158  099F  1283               	bcf	3,5	;RP0=0, select bank0
  5159  09A0  1303               	bcf	3,6	;RP1=0, select bank0
  5160  09A1  0094               	movwf	20	;volatile
  5161                           
  5162                           ;I2C.c: 10: SSPCON2 = 0;
  5163  09A2  1683               	bsf	3,5	;RP0=1, select bank1
  5164  09A3  1303               	bcf	3,6	;RP1=0, select bank1
  5165  09A4  0191               	clrf	17	;volatile
  5166                           
  5167                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  5168  09A5  1283               	bcf	3,5	;RP0=0, select bank0
  5169  09A6  1303               	bcf	3,6	;RP1=0, select bank0
  5170  09A7  0820               	movf	Init_I2C_M@c,w
  5171  09A8  00A4               	movwf	??_Init_I2C_M
  5172  09A9  0821               	movf	Init_I2C_M@c+1,w
  5173  09AA  00A5               	movwf	??_Init_I2C_M+1
  5174  09AB  0822               	movf	Init_I2C_M@c+2,w
  5175  09AC  00A6               	movwf	??_Init_I2C_M+2
  5176  09AD  0823               	movf	Init_I2C_M@c+3,w
  5177  09AE  00A7               	movwf	??_Init_I2C_M+3
  5178  09AF  3002               	movlw	2
  5179  09B0                     u3155:	
  5180  09B0  1003               	clrc
  5181  09B1  0DA4               	rlf	??_Init_I2C_M,f
  5182  09B2  0DA5               	rlf	??_Init_I2C_M+1,f
  5183  09B3  0DA6               	rlf	??_Init_I2C_M+2,f
  5184  09B4  0DA7               	rlf	??_Init_I2C_M+3,f
  5185  09B5  3EFF               	addlw	-1
  5186  09B6  1D03               	skipz
  5187  09B7  29B0               	goto	u3155
  5188  09B8  0827               	movf	??_Init_I2C_M+3,w
  5189  09B9  00F3               	movwf	___lldiv@divisor+3
  5190  09BA  0826               	movf	??_Init_I2C_M+2,w
  5191  09BB  00F2               	movwf	___lldiv@divisor+2
  5192  09BC  0825               	movf	??_Init_I2C_M+1,w
  5193  09BD  00F1               	movwf	___lldiv@divisor+1
  5194  09BE  0824               	movf	??_Init_I2C_M,w
  5195  09BF  00F0               	movwf	___lldiv@divisor
  5196  09C0  3000               	movlw	0
  5197  09C1  00F7               	movwf	___lldiv@dividend+3
  5198  09C2  3098               	movlw	152
  5199  09C3  00F6               	movwf	___lldiv@dividend+2
  5200  09C4  3096               	movlw	150
  5201  09C5  00F5               	movwf	___lldiv@dividend+1
  5202  09C6  3080               	movlw	128
  5203  09C7  00F4               	movwf	___lldiv@dividend
  5204  09C8  120A  158A  239A   	fcall	___lldiv
  5205  09CB  0870               	movf	?___lldiv,w
  5206  09CC  3EFF               	addlw	255
  5207  09CD  1683               	bsf	3,5	;RP0=1, select bank1
  5208  09CE  1303               	bcf	3,6	;RP1=0, select bank1
  5209  09CF  0093               	movwf	19	;volatile
  5210                           
  5211                           ;I2C.c: 12: SSPSTAT = 0;
  5212  09D0  0194               	clrf	20	;volatile
  5213  09D1  0008               	return
  5214  09D2                     __end_of_Init_I2C_M:	
  5215                           
  5216                           	psect	text13
  5217  0B9A                     __ptext13:	
  5218 ;; *************** function ___lldiv *****************
  5219 ;; Defined at:
  5220 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;  divisor         4    0[COMMON] unsigned long 
  5223 ;;  dividend        4    4[COMMON] unsigned long 
  5224 ;; Auto vars:     Size  Location     Type
  5225 ;;  quotient        4    9[COMMON] unsigned long 
  5226 ;;  counter         1   13[COMMON] unsigned char 
  5227 ;; Return value:  Size  Location     Type
  5228 ;;                  4    0[COMMON] unsigned long 
  5229 ;; Registers used:
  5230 ;;		wreg, status,2, status,0
  5231 ;; Tracked objects:
  5232 ;;		On entry : 0/0
  5233 ;;		On exit  : 0/0
  5234 ;;		Unchanged: 0/0
  5235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5236 ;;      Params:         8       0       0       0       0
  5237 ;;      Locals:         5       0       0       0       0
  5238 ;;      Temps:          1       0       0       0       0
  5239 ;;      Totals:        14       0       0       0       0
  5240 ;;Total ram usage:       14 bytes
  5241 ;; Hardware stack levels used:    1
  5242 ;; This function calls:
  5243 ;;		Nothing
  5244 ;; This function is called by:
  5245 ;;		_Init_I2C_M
  5246 ;; This function uses a non-reentrant model
  5247 ;;
  5248                           
  5249                           
  5250                           ;psect for function ___lldiv
  5251  0B9A                     ___lldiv:	
  5252                           
  5253                           ;incstack = 0
  5254                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5255  0B9A  3000               	movlw	0
  5256  0B9B  00FC               	movwf	___lldiv@quotient+3
  5257  0B9C  3000               	movlw	0
  5258  0B9D  00FB               	movwf	___lldiv@quotient+2
  5259  0B9E  3000               	movlw	0
  5260  0B9F  00FA               	movwf	___lldiv@quotient+1
  5261  0BA0  3000               	movlw	0
  5262  0BA1  00F9               	movwf	___lldiv@quotient
  5263  0BA2  0873               	movf	___lldiv@divisor+3,w
  5264  0BA3  0472               	iorwf	___lldiv@divisor+2,w
  5265  0BA4  0471               	iorwf	___lldiv@divisor+1,w
  5266  0BA5  0470               	iorwf	___lldiv@divisor,w
  5267  0BA6  1903               	skipnz
  5268  0BA7  2BEF               	goto	l3308
  5269  0BA8  01FD               	clrf	___lldiv@counter
  5270  0BA9  0AFD               	incf	___lldiv@counter,f
  5271  0BAA                     l3294:	
  5272  0BAA  1BF3               	btfsc	___lldiv@divisor+3,7
  5273  0BAB  2BBA               	goto	l3296
  5274  0BAC  3001               	movlw	1
  5275  0BAD  00F8               	movwf	??___lldiv
  5276  0BAE                     u3005:	
  5277  0BAE  1003               	clrc
  5278  0BAF  0DF0               	rlf	___lldiv@divisor,f
  5279  0BB0  0DF1               	rlf	___lldiv@divisor+1,f
  5280  0BB1  0DF2               	rlf	___lldiv@divisor+2,f
  5281  0BB2  0DF3               	rlf	___lldiv@divisor+3,f
  5282  0BB3  0BF8               	decfsz	??___lldiv,f
  5283  0BB4  2BAE               	goto	u3005
  5284  0BB5  3001               	movlw	1
  5285  0BB6  00F8               	movwf	??___lldiv
  5286  0BB7  0878               	movf	??___lldiv,w
  5287  0BB8  07FD               	addwf	___lldiv@counter,f
  5288  0BB9  2BAA               	goto	l3294
  5289  0BBA                     l3296:	
  5290  0BBA  3001               	movlw	1
  5291  0BBB  00F8               	movwf	??___lldiv
  5292  0BBC                     u3025:	
  5293  0BBC  1003               	clrc
  5294  0BBD  0DF9               	rlf	___lldiv@quotient,f
  5295  0BBE  0DFA               	rlf	___lldiv@quotient+1,f
  5296  0BBF  0DFB               	rlf	___lldiv@quotient+2,f
  5297  0BC0  0DFC               	rlf	___lldiv@quotient+3,f
  5298  0BC1  0BF8               	decfsz	??___lldiv,f
  5299  0BC2  2BBC               	goto	u3025
  5300  0BC3  0873               	movf	___lldiv@divisor+3,w
  5301  0BC4  0277               	subwf	___lldiv@dividend+3,w
  5302  0BC5  1D03               	skipz
  5303  0BC6  2BD1               	goto	u3035
  5304  0BC7  0872               	movf	___lldiv@divisor+2,w
  5305  0BC8  0276               	subwf	___lldiv@dividend+2,w
  5306  0BC9  1D03               	skipz
  5307  0BCA  2BD1               	goto	u3035
  5308  0BCB  0871               	movf	___lldiv@divisor+1,w
  5309  0BCC  0275               	subwf	___lldiv@dividend+1,w
  5310  0BCD  1D03               	skipz
  5311  0BCE  2BD1               	goto	u3035
  5312  0BCF  0870               	movf	___lldiv@divisor,w
  5313  0BD0  0274               	subwf	___lldiv@dividend,w
  5314  0BD1                     u3035:	
  5315  0BD1  1C03               	skipc
  5316  0BD2  2BE2               	goto	l3304
  5317  0BD3  0870               	movf	___lldiv@divisor,w
  5318  0BD4  02F4               	subwf	___lldiv@dividend,f
  5319  0BD5  0871               	movf	___lldiv@divisor+1,w
  5320  0BD6  1C03               	skipc
  5321  0BD7  0F71               	incfsz	___lldiv@divisor+1,w
  5322  0BD8  02F5               	subwf	___lldiv@dividend+1,f
  5323  0BD9  0872               	movf	___lldiv@divisor+2,w
  5324  0BDA  1C03               	skipc
  5325  0BDB  0F72               	incfsz	___lldiv@divisor+2,w
  5326  0BDC  02F6               	subwf	___lldiv@dividend+2,f
  5327  0BDD  0873               	movf	___lldiv@divisor+3,w
  5328  0BDE  1C03               	skipc
  5329  0BDF  0F73               	incfsz	___lldiv@divisor+3,w
  5330  0BE0  02F7               	subwf	___lldiv@dividend+3,f
  5331  0BE1  1479               	bsf	___lldiv@quotient,0
  5332  0BE2                     l3304:	
  5333  0BE2  3001               	movlw	1
  5334  0BE3                     u3045:	
  5335  0BE3  1003               	clrc
  5336  0BE4  0CF3               	rrf	___lldiv@divisor+3,f
  5337  0BE5  0CF2               	rrf	___lldiv@divisor+2,f
  5338  0BE6  0CF1               	rrf	___lldiv@divisor+1,f
  5339  0BE7  0CF0               	rrf	___lldiv@divisor,f
  5340  0BE8  3EFF               	addlw	-1
  5341  0BE9  1D03               	skipz
  5342  0BEA  2BE3               	goto	u3045
  5343  0BEB  3001               	movlw	1
  5344  0BEC  02FD               	subwf	___lldiv@counter,f
  5345  0BED  1D03               	btfss	3,2
  5346  0BEE  2BBA               	goto	l3296
  5347  0BEF                     l3308:	
  5348  0BEF  087C               	movf	___lldiv@quotient+3,w
  5349  0BF0  00F3               	movwf	?___lldiv+3
  5350  0BF1  087B               	movf	___lldiv@quotient+2,w
  5351  0BF2  00F2               	movwf	?___lldiv+2
  5352  0BF3  087A               	movf	___lldiv@quotient+1,w
  5353  0BF4  00F1               	movwf	?___lldiv+1
  5354  0BF5  0879               	movf	___lldiv@quotient,w
  5355  0BF6  00F0               	movwf	?___lldiv
  5356  0BF7  0008               	return
  5357  0BF8                     __end_of___lldiv:	
  5358                           
  5359                           	psect	text14
  5360  0944                     __ptext14:	
  5361 ;; *************** function _FMTX *****************
  5362 ;; Defined at:
  5363 ;;		line 270 in file "FMCW.c"
  5364 ;; Parameters:    Size  Location     Type
  5365 ;;  Nref            2   60[BANK0 ] int 
  5366 ;;  Nprg            2   62[BANK0 ] PTR int 
  5367 ;;		 -> RAM(512), main@FMTX_Nprg(10), FMTX_Nprg(10), 
  5368 ;; Auto vars:     Size  Location     Type
  5369 ;;  fmtx            2   64[BANK0 ] int 
  5370 ;; Return value:  Size  Location     Type
  5371 ;;                  1    wreg      void 
  5372 ;; Registers used:
  5373 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5374 ;; Tracked objects:
  5375 ;;		On entry : 0/0
  5376 ;;		On exit  : 0/0
  5377 ;;		Unchanged: 0/0
  5378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5379 ;;      Params:         0       4       0       0       0
  5380 ;;      Locals:         0       2       0       0       0
  5381 ;;      Temps:          0       0       0       0       0
  5382 ;;      Totals:         0       6       0       0       0
  5383 ;;Total ram usage:        6 bytes
  5384 ;; Hardware stack levels used:    1
  5385 ;; Hardware stack levels required when called:    3
  5386 ;; This function calls:
  5387 ;;		_OPINIT
  5388 ;;		_OUTFQ
  5389 ;;		_RFDOUT
  5390 ;; This function is called by:
  5391 ;;		_main
  5392 ;;		_SetPLL
  5393 ;; This function uses a non-reentrant model
  5394 ;;
  5395                           
  5396                           
  5397                           ;psect for function _FMTX
  5398  0944                     _FMTX:	
  5399                           
  5400                           ;FMCW.c: 271: int fmtx = 1;
  5401                           
  5402                           ;incstack = 0
  5403                           ; Regs used in _FMTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5404  0944  3001               	movlw	1
  5405  0945  1283               	bcf	3,5	;RP0=0, select bank0
  5406  0946  1303               	bcf	3,6	;RP1=0, select bank0
  5407  0947  00E0               	movwf	FMTX@fmtx
  5408  0948  3000               	movlw	0
  5409  0949  00E1               	movwf	FMTX@fmtx+1
  5410                           
  5411                           ;FMCW.c: 272: OPINIT(fmtx);
  5412  094A  0861               	movf	FMTX@fmtx+1,w
  5413  094B  00F5               	movwf	OPINIT@fmcwtxrx+1
  5414  094C  0860               	movf	FMTX@fmtx,w
  5415  094D  00F4               	movwf	OPINIT@fmcwtxrx
  5416  094E  120A  158A  24BE  120A  158A  	fcall	_OPINIT
  5417                           
  5418                           ;FMCW.c: 273: RFDOUT(fmtx, Nref);
  5419  0953  1283               	bcf	3,5	;RP0=0, select bank0
  5420  0954  1303               	bcf	3,6	;RP1=0, select bank0
  5421  0955  0861               	movf	FMTX@fmtx+1,w
  5422  0956  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5423  0957  0860               	movf	FMTX@fmtx,w
  5424  0958  00F9               	movwf	RFDOUT@fmcwtxrx
  5425  0959  085D               	movf	FMTX@Nref+1,w
  5426  095A  00FC               	movwf	RFDOUT@Nref+1
  5427  095B  085C               	movf	FMTX@Nref,w
  5428  095C  00FB               	movwf	RFDOUT@Nref
  5429  095D  120A  158A  253B  120A  158A  	fcall	_RFDOUT
  5430                           
  5431                           ;FMCW.c: 274: OUTFQ(fmtx, Nprg);
  5432  0962  1283               	bcf	3,5	;RP0=0, select bank0
  5433  0963  1303               	bcf	3,6	;RP1=0, select bank0
  5434  0964  0861               	movf	FMTX@fmtx+1,w
  5435  0965  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5436  0966  0860               	movf	FMTX@fmtx,w
  5437  0967  00F9               	movwf	OUTFQ@fmcwtxrx
  5438  0968  085E               	movf	FMTX@Nprg,w
  5439  0969  00FB               	movwf	OUTFQ@Nprg
  5440  096A  085F               	movf	FMTX@Nprg+1,w
  5441  096B  00FC               	movwf	OUTFQ@Nprg+1
  5442  096C  120A  118A  20AC   	fcall	_OUTFQ
  5443  096F  0008               	return
  5444  0970                     __end_of_FMTX:	
  5445                           
  5446                           	psect	text15
  5447  0918                     __ptext15:	
  5448 ;; *************** function _FMRX *****************
  5449 ;; Defined at:
  5450 ;;		line 298 in file "FMCW.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;  Nref            2   60[BANK0 ] int 
  5453 ;;  Nprg            2   62[BANK0 ] PTR int 
  5454 ;;		 -> RAM(512), main@FMRX_Nprg(10), FMRX_Nprg(10), 
  5455 ;; Auto vars:     Size  Location     Type
  5456 ;;  fmrx            2   64[BANK0 ] int 
  5457 ;; Return value:  Size  Location     Type
  5458 ;;                  1    wreg      void 
  5459 ;; Registers used:
  5460 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/0
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5466 ;;      Params:         0       4       0       0       0
  5467 ;;      Locals:         0       2       0       0       0
  5468 ;;      Temps:          0       0       0       0       0
  5469 ;;      Totals:         0       6       0       0       0
  5470 ;;Total ram usage:        6 bytes
  5471 ;; Hardware stack levels used:    1
  5472 ;; Hardware stack levels required when called:    3
  5473 ;; This function calls:
  5474 ;;		_OPINIT
  5475 ;;		_OUTFQ
  5476 ;;		_RFDOUT
  5477 ;; This function is called by:
  5478 ;;		_main
  5479 ;;		_SetPLL
  5480 ;; This function uses a non-reentrant model
  5481 ;;
  5482                           
  5483                           
  5484                           ;psect for function _FMRX
  5485  0918                     _FMRX:	
  5486                           
  5487                           ;FMCW.c: 299: int fmrx = 3;
  5488                           
  5489                           ;incstack = 0
  5490                           ; Regs used in _FMRX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5491  0918  3003               	movlw	3
  5492  0919  1283               	bcf	3,5	;RP0=0, select bank0
  5493  091A  1303               	bcf	3,6	;RP1=0, select bank0
  5494  091B  00E0               	movwf	FMRX@fmrx
  5495  091C  3000               	movlw	0
  5496  091D  00E1               	movwf	FMRX@fmrx+1
  5497                           
  5498                           ;FMCW.c: 300: OPINIT(fmrx);
  5499  091E  0861               	movf	FMRX@fmrx+1,w
  5500  091F  00F5               	movwf	OPINIT@fmcwtxrx+1
  5501  0920  0860               	movf	FMRX@fmrx,w
  5502  0921  00F4               	movwf	OPINIT@fmcwtxrx
  5503  0922  120A  158A  24BE  120A  158A  	fcall	_OPINIT
  5504                           
  5505                           ;FMCW.c: 301: RFDOUT(fmrx, Nref);
  5506  0927  1283               	bcf	3,5	;RP0=0, select bank0
  5507  0928  1303               	bcf	3,6	;RP1=0, select bank0
  5508  0929  0861               	movf	FMRX@fmrx+1,w
  5509  092A  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5510  092B  0860               	movf	FMRX@fmrx,w
  5511  092C  00F9               	movwf	RFDOUT@fmcwtxrx
  5512  092D  085D               	movf	FMRX@Nref+1,w
  5513  092E  00FC               	movwf	RFDOUT@Nref+1
  5514  092F  085C               	movf	FMRX@Nref,w
  5515  0930  00FB               	movwf	RFDOUT@Nref
  5516  0931  120A  158A  253B  120A  158A  	fcall	_RFDOUT
  5517                           
  5518                           ;FMCW.c: 302: OUTFQ(fmrx, Nprg);
  5519  0936  1283               	bcf	3,5	;RP0=0, select bank0
  5520  0937  1303               	bcf	3,6	;RP1=0, select bank0
  5521  0938  0861               	movf	FMRX@fmrx+1,w
  5522  0939  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5523  093A  0860               	movf	FMRX@fmrx,w
  5524  093B  00F9               	movwf	OUTFQ@fmcwtxrx
  5525  093C  085E               	movf	FMRX@Nprg,w
  5526  093D  00FB               	movwf	OUTFQ@Nprg
  5527  093E  085F               	movf	FMRX@Nprg+1,w
  5528  093F  00FC               	movwf	OUTFQ@Nprg+1
  5529  0940  120A  118A  20AC   	fcall	_OUTFQ
  5530  0943  0008               	return
  5531  0944                     __end_of_FMRX:	
  5532                           
  5533                           	psect	text16
  5534  0B3D                     __ptext16:	
  5535 ;; *************** function _EEPROM_Write *****************
  5536 ;; Defined at:
  5537 ;;		line 51 in file "I2C.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;  EEPROM_addre    1    wreg     unsigned char 
  5540 ;;  high_address    1    2[COMMON] unsigned char 
  5541 ;;  low_address     1    3[COMMON] unsigned char 
  5542 ;;  data            1    4[COMMON] PTR unsigned char 
  5543 ;;		 -> NULL(0), dData(16), 
  5544 ;; Auto vars:     Size  Location     Type
  5545 ;;  EEPROM_addre    1    8[COMMON] unsigned char 
  5546 ;;  Address         1    9[COMMON] unsigned char 
  5547 ;; Return value:  Size  Location     Type
  5548 ;;                  1    wreg      void 
  5549 ;; Registers used:
  5550 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5551 ;; Tracked objects:
  5552 ;;		On entry : 0/0
  5553 ;;		On exit  : 0/0
  5554 ;;		Unchanged: 0/0
  5555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5556 ;;      Params:         3       0       0       0       0
  5557 ;;      Locals:         2       0       0       0       0
  5558 ;;      Temps:          3       0       0       0       0
  5559 ;;      Totals:         8       0       0       0       0
  5560 ;;Total ram usage:        8 bytes
  5561 ;; Hardware stack levels used:    1
  5562 ;; Hardware stack levels required when called:    2
  5563 ;; This function calls:
  5564 ;;		_I2C_Master_Start
  5565 ;;		_I2C_Master_Stop
  5566 ;;		_I2C_Master_Write
  5567 ;; This function is called by:
  5568 ;;		_main
  5569 ;; This function uses a non-reentrant model
  5570 ;;
  5571                           
  5572                           
  5573                           ;psect for function _EEPROM_Write
  5574  0B3D                     _EEPROM_Write:	
  5575                           
  5576                           ;incstack = 0
  5577                           ; Regs used in _EEPROM_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5578                           ;EEPROM_Write@EEPROM_address stored from wreg
  5579  0B3D  00F8               	movwf	EEPROM_Write@EEPROM_address
  5580                           
  5581                           ;I2C.c: 52: UBYTE Address = EEPROM_address << 1;
  5582  0B3E  0878               	movf	EEPROM_Write@EEPROM_address,w
  5583  0B3F  00F5               	movwf	??_EEPROM_Write
  5584  0B40  0775               	addwf	??_EEPROM_Write,w
  5585  0B41  00F6               	movwf	??_EEPROM_Write+1
  5586  0B42  0876               	movf	??_EEPROM_Write+1,w
  5587  0B43  00F9               	movwf	EEPROM_Write@Address
  5588                           
  5589                           ;I2C.c: 55: I2C_Master_Start();
  5590  0B44  160A  118A  27DA  120A  158A  	fcall	_I2C_Master_Start
  5591                           
  5592                           ;I2C.c: 56: I2C_Master_Write(Address);
  5593  0B49  0879               	movf	EEPROM_Write@Address,w
  5594  0B4A  00F5               	movwf	??_EEPROM_Write
  5595  0B4B  01F6               	clrf	??_EEPROM_Write+1
  5596  0B4C  0875               	movf	??_EEPROM_Write,w
  5597  0B4D  00F0               	movwf	I2C_Master_Write@d
  5598  0B4E  0876               	movf	??_EEPROM_Write+1,w
  5599  0B4F  00F1               	movwf	I2C_Master_Write@d+1
  5600  0B50  160A  118A  27E8  120A  158A  	fcall	_I2C_Master_Write
  5601                           
  5602                           ;I2C.c: 57: I2C_Master_Write(high_address);
  5603  0B55  0872               	movf	EEPROM_Write@high_address,w
  5604  0B56  00F5               	movwf	??_EEPROM_Write
  5605  0B57  01F6               	clrf	??_EEPROM_Write+1
  5606  0B58  0875               	movf	??_EEPROM_Write,w
  5607  0B59  00F0               	movwf	I2C_Master_Write@d
  5608  0B5A  0876               	movf	??_EEPROM_Write+1,w
  5609  0B5B  00F1               	movwf	I2C_Master_Write@d+1
  5610  0B5C  160A  118A  27E8  120A  158A  	fcall	_I2C_Master_Write
  5611                           
  5612                           ;I2C.c: 58: I2C_Master_Write(low_address);
  5613  0B61  0873               	movf	EEPROM_Write@low_address,w
  5614  0B62  00F5               	movwf	??_EEPROM_Write
  5615  0B63  01F6               	clrf	??_EEPROM_Write+1
  5616  0B64  0875               	movf	??_EEPROM_Write,w
  5617  0B65  00F0               	movwf	I2C_Master_Write@d
  5618  0B66  0876               	movf	??_EEPROM_Write+1,w
  5619  0B67  00F1               	movwf	I2C_Master_Write@d+1
  5620  0B68  160A  118A  27E8  120A  158A  	fcall	_I2C_Master_Write
  5621  0B6D                     l3500:	
  5622                           ;I2C.c: 59: while(*data){
  5623                           
  5624  0B6D  0874               	movf	EEPROM_Write@data,w
  5625  0B6E  0084               	movwf	4
  5626  0B6F  1783               	bsf	3,7	;select IRP bank2
  5627  0B70  0800               	movf	0,w
  5628  0B71  1903               	btfsc	3,2
  5629  0B72  2B87               	goto	l3502
  5630                           
  5631                           ;I2C.c: 60: I2C_Master_Write(*data);
  5632  0B73  0874               	movf	EEPROM_Write@data,w
  5633  0B74  0084               	movwf	4
  5634  0B75  1783               	bsf	3,7	;select IRP bank2
  5635  0B76  0800               	movf	0,w
  5636  0B77  00F5               	movwf	??_EEPROM_Write
  5637  0B78  01F6               	clrf	??_EEPROM_Write+1
  5638  0B79  0875               	movf	??_EEPROM_Write,w
  5639  0B7A  00F0               	movwf	I2C_Master_Write@d
  5640  0B7B  0876               	movf	??_EEPROM_Write+1,w
  5641  0B7C  00F1               	movwf	I2C_Master_Write@d+1
  5642  0B7D  160A  118A  27E8  120A  158A  	fcall	_I2C_Master_Write
  5643                           
  5644                           ;I2C.c: 61: ++data;
  5645  0B82  3001               	movlw	1
  5646  0B83  00F5               	movwf	??_EEPROM_Write
  5647  0B84  0875               	movf	??_EEPROM_Write,w
  5648  0B85  07F4               	addwf	EEPROM_Write@data,f
  5649  0B86  2B6D               	goto	l3500
  5650  0B87                     l3502:	
  5651                           
  5652                           ;I2C.c: 62: }
  5653                           ;I2C.c: 63: I2C_Master_Stop();
  5654  0B87  160A  118A  27E1  120A  158A  	fcall	_I2C_Master_Stop
  5655                           
  5656                           ;I2C.c: 64: _delay((unsigned long)((200)*(10000000/4000.0)));
  5657  0B8C  3003               	movlw	3
  5658  0B8D  00F7               	movwf	??_EEPROM_Write+2
  5659  0B8E  308A               	movlw	138
  5660  0B8F  00F6               	movwf	??_EEPROM_Write+1
  5661  0B90  3055               	movlw	85
  5662  0B91  00F5               	movwf	??_EEPROM_Write
  5663  0B92                     u3707:	
  5664  0B92  0BF5               	decfsz	??_EEPROM_Write,f
  5665  0B93  2B92               	goto	u3707
  5666  0B94  0BF6               	decfsz	??_EEPROM_Write+1,f
  5667  0B95  2B92               	goto	u3707
  5668  0B96  0BF7               	decfsz	??_EEPROM_Write+2,f
  5669  0B97  2B92               	goto	u3707
  5670  0B98  2B99               	nop2
  5671  0B99  0008               	return
  5672  0B9A                     __end_of_EEPROM_Write:	
  5673                           
  5674                           	psect	text17
  5675  17E8                     __ptext17:	
  5676 ;; *************** function _I2C_Master_Write *****************
  5677 ;; Defined at:
  5678 ;;		line 34 in file "I2C.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;  d               2    0[COMMON] unsigned int 
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;		None
  5683 ;; Return value:  Size  Location     Type
  5684 ;;                  1    wreg      void 
  5685 ;; Registers used:
  5686 ;;		wreg, status,2, status,0, pclath, cstack
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5692 ;;      Params:         2       0       0       0       0
  5693 ;;      Locals:         0       0       0       0       0
  5694 ;;      Temps:          0       0       0       0       0
  5695 ;;      Totals:         2       0       0       0       0
  5696 ;;Total ram usage:        2 bytes
  5697 ;; Hardware stack levels used:    1
  5698 ;; Hardware stack levels required when called:    1
  5699 ;; This function calls:
  5700 ;;		_I2C_Master_Wait
  5701 ;; This function is called by:
  5702 ;;		_EEPROM_Write
  5703 ;;		_EEPROM_Read
  5704 ;; This function uses a non-reentrant model
  5705 ;;
  5706                           
  5707                           
  5708                           ;psect for function _I2C_Master_Write
  5709  17E8                     _I2C_Master_Write:	
  5710                           
  5711                           ;I2C.c: 35: I2C_Master_Wait();
  5712                           
  5713                           ;incstack = 0
  5714                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5715  17E8  120A  158A  201A   	fcall	_I2C_Master_Wait
  5716                           
  5717                           ;I2C.c: 36: SSPBUF = d;
  5718  17EB  0870               	movf	I2C_Master_Write@d,w
  5719  17EC  1283               	bcf	3,5	;RP0=0, select bank0
  5720  17ED  1303               	bcf	3,6	;RP1=0, select bank0
  5721  17EE  0093               	movwf	19	;volatile
  5722  17EF  0008               	return
  5723  17F0                     __end_of_I2C_Master_Write:	
  5724                           
  5725                           	psect	text18
  5726  17E1                     __ptext18:	
  5727 ;; *************** function _I2C_Master_Stop *****************
  5728 ;; Defined at:
  5729 ;;		line 29 in file "I2C.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;		None
  5732 ;; Auto vars:     Size  Location     Type
  5733 ;;		None
  5734 ;; Return value:  Size  Location     Type
  5735 ;;                  1    wreg      void 
  5736 ;; Registers used:
  5737 ;;		wreg, status,2, status,0, pclath, cstack
  5738 ;; Tracked objects:
  5739 ;;		On entry : 0/0
  5740 ;;		On exit  : 0/0
  5741 ;;		Unchanged: 0/0
  5742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5743 ;;      Params:         0       0       0       0       0
  5744 ;;      Locals:         0       0       0       0       0
  5745 ;;      Temps:          0       0       0       0       0
  5746 ;;      Totals:         0       0       0       0       0
  5747 ;;Total ram usage:        0 bytes
  5748 ;; Hardware stack levels used:    1
  5749 ;; Hardware stack levels required when called:    1
  5750 ;; This function calls:
  5751 ;;		_I2C_Master_Wait
  5752 ;; This function is called by:
  5753 ;;		_EEPROM_Write
  5754 ;;		_EEPROM_Read
  5755 ;; This function uses a non-reentrant model
  5756 ;;
  5757                           
  5758                           
  5759                           ;psect for function _I2C_Master_Stop
  5760  17E1                     _I2C_Master_Stop:	
  5761                           
  5762                           ;I2C.c: 30: I2C_Master_Wait();
  5763                           
  5764                           ;incstack = 0
  5765                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5766  17E1  120A  158A  201A   	fcall	_I2C_Master_Wait
  5767                           
  5768                           ;I2C.c: 31: PEN = 1;
  5769  17E4  1683               	bsf	3,5	;RP0=1, select bank1
  5770  17E5  1303               	bcf	3,6	;RP1=0, select bank1
  5771  17E6  1511               	bsf	17,2	;volatile
  5772  17E7  0008               	return
  5773  17E8                     __end_of_I2C_Master_Stop:	
  5774                           
  5775                           	psect	text19
  5776  17DA                     __ptext19:	
  5777 ;; *************** function _I2C_Master_Start *****************
  5778 ;; Defined at:
  5779 ;;		line 19 in file "I2C.c"
  5780 ;; Parameters:    Size  Location     Type
  5781 ;;		None
  5782 ;; Auto vars:     Size  Location     Type
  5783 ;;		None
  5784 ;; Return value:  Size  Location     Type
  5785 ;;                  1    wreg      void 
  5786 ;; Registers used:
  5787 ;;		wreg, status,2, status,0, pclath, cstack
  5788 ;; Tracked objects:
  5789 ;;		On entry : 0/0
  5790 ;;		On exit  : 0/0
  5791 ;;		Unchanged: 0/0
  5792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5793 ;;      Params:         0       0       0       0       0
  5794 ;;      Locals:         0       0       0       0       0
  5795 ;;      Temps:          0       0       0       0       0
  5796 ;;      Totals:         0       0       0       0       0
  5797 ;;Total ram usage:        0 bytes
  5798 ;; Hardware stack levels used:    1
  5799 ;; Hardware stack levels required when called:    1
  5800 ;; This function calls:
  5801 ;;		_I2C_Master_Wait
  5802 ;; This function is called by:
  5803 ;;		_EEPROM_Write
  5804 ;;		_EEPROM_Read
  5805 ;; This function uses a non-reentrant model
  5806 ;;
  5807                           
  5808                           
  5809                           ;psect for function _I2C_Master_Start
  5810  17DA                     _I2C_Master_Start:	
  5811                           
  5812                           ;I2C.c: 20: I2C_Master_Wait();
  5813                           
  5814                           ;incstack = 0
  5815                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5816  17DA  120A  158A  201A   	fcall	_I2C_Master_Wait
  5817                           
  5818                           ;I2C.c: 21: SEN = 1;
  5819  17DD  1683               	bsf	3,5	;RP0=1, select bank1
  5820  17DE  1303               	bcf	3,6	;RP1=0, select bank1
  5821  17DF  1411               	bsf	17,0	;volatile
  5822  17E0  0008               	return
  5823  17E1                     __end_of_I2C_Master_Start:	
  5824                           
  5825                           	psect	text20
  5826  081A                     __ptext20:	
  5827 ;; *************** function _I2C_Master_Wait *****************
  5828 ;; Defined at:
  5829 ;;		line 15 in file "I2C.c"
  5830 ;; Parameters:    Size  Location     Type
  5831 ;;		None
  5832 ;; Auto vars:     Size  Location     Type
  5833 ;;		None
  5834 ;; Return value:  Size  Location     Type
  5835 ;;                  1    wreg      void 
  5836 ;; Registers used:
  5837 ;;		wreg, status,2
  5838 ;; Tracked objects:
  5839 ;;		On entry : 0/0
  5840 ;;		On exit  : 0/0
  5841 ;;		Unchanged: 0/0
  5842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5843 ;;      Params:         0       0       0       0       0
  5844 ;;      Locals:         0       0       0       0       0
  5845 ;;      Temps:          0       0       0       0       0
  5846 ;;      Totals:         0       0       0       0       0
  5847 ;;Total ram usage:        0 bytes
  5848 ;; Hardware stack levels used:    1
  5849 ;; This function calls:
  5850 ;;		Nothing
  5851 ;; This function is called by:
  5852 ;;		_I2C_Master_Start
  5853 ;;		_I2C_Master_Stop
  5854 ;;		_I2C_Master_Write
  5855 ;;		_I2C_Master_RepeatedStart
  5856 ;;		_I2C_Master_Read
  5857 ;; This function uses a non-reentrant model
  5858 ;;
  5859                           
  5860                           
  5861                           ;psect for function _I2C_Master_Wait
  5862  081A                     _I2C_Master_Wait:	
  5863  081A                     l498:	
  5864                           ;I2C.c: 16: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5865                           
  5866                           ;incstack = 0
  5867                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5868                           
  5869  081A  1683               	bsf	3,5	;RP0=1, select bank1
  5870  081B  1303               	bcf	3,6	;RP1=0, select bank1
  5871  081C  1914               	btfsc	20,2	;volatile
  5872  081D  281A               	goto	l498
  5873  081E  0811               	movf	17,w	;volatile
  5874  081F  391F               	andlw	31
  5875  0820  1903               	btfsc	3,2
  5876  0821  0008               	return
  5877  0822  281A               	goto	l498
  5878  0823                     __end_of_I2C_Master_Wait:	
  5879                           
  5880                           	psect	text21
  5881  08EC                     __ptext21:	
  5882 ;; *************** function _CWTX *****************
  5883 ;; Defined at:
  5884 ;;		line 284 in file "FMCW.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;  Nref            2   60[BANK0 ] int 
  5887 ;;  Nprg            2   62[BANK0 ] PTR int 
  5888 ;;		 -> RAM(512), main@CWTX_Nprg(10), CWTX_Nprg(10), 
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;  cwtx            2   64[BANK0 ] int 
  5891 ;; Return value:  Size  Location     Type
  5892 ;;                  1    wreg      void 
  5893 ;; Registers used:
  5894 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5895 ;; Tracked objects:
  5896 ;;		On entry : 0/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5900 ;;      Params:         0       4       0       0       0
  5901 ;;      Locals:         0       2       0       0       0
  5902 ;;      Temps:          0       0       0       0       0
  5903 ;;      Totals:         0       6       0       0       0
  5904 ;;Total ram usage:        6 bytes
  5905 ;; Hardware stack levels used:    1
  5906 ;; Hardware stack levels required when called:    3
  5907 ;; This function calls:
  5908 ;;		_OPINIT
  5909 ;;		_OUTFQ
  5910 ;;		_RFDOUT
  5911 ;; This function is called by:
  5912 ;;		_main
  5913 ;;		_SetPLL
  5914 ;; This function uses a non-reentrant model
  5915 ;;
  5916                           
  5917                           
  5918                           ;psect for function _CWTX
  5919  08EC                     _CWTX:	
  5920                           
  5921                           ;FMCW.c: 285: int cwtx = 2;
  5922                           
  5923                           ;incstack = 0
  5924                           ; Regs used in _CWTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5925  08EC  3002               	movlw	2
  5926  08ED  1283               	bcf	3,5	;RP0=0, select bank0
  5927  08EE  1303               	bcf	3,6	;RP1=0, select bank0
  5928  08EF  00E0               	movwf	CWTX@cwtx
  5929  08F0  3000               	movlw	0
  5930  08F1  00E1               	movwf	CWTX@cwtx+1
  5931                           
  5932                           ;FMCW.c: 286: OPINIT(cwtx);
  5933  08F2  0861               	movf	CWTX@cwtx+1,w
  5934  08F3  00F5               	movwf	OPINIT@fmcwtxrx+1
  5935  08F4  0860               	movf	CWTX@cwtx,w
  5936  08F5  00F4               	movwf	OPINIT@fmcwtxrx
  5937  08F6  120A  158A  24BE  120A  158A  	fcall	_OPINIT
  5938                           
  5939                           ;FMCW.c: 287: RFDOUT(cwtx, Nref);
  5940  08FB  1283               	bcf	3,5	;RP0=0, select bank0
  5941  08FC  1303               	bcf	3,6	;RP1=0, select bank0
  5942  08FD  0861               	movf	CWTX@cwtx+1,w
  5943  08FE  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5944  08FF  0860               	movf	CWTX@cwtx,w
  5945  0900  00F9               	movwf	RFDOUT@fmcwtxrx
  5946  0901  085D               	movf	CWTX@Nref+1,w
  5947  0902  00FC               	movwf	RFDOUT@Nref+1
  5948  0903  085C               	movf	CWTX@Nref,w
  5949  0904  00FB               	movwf	RFDOUT@Nref
  5950  0905  120A  158A  253B  120A  158A  	fcall	_RFDOUT
  5951                           
  5952                           ;FMCW.c: 288: OUTFQ(cwtx, Nprg);
  5953  090A  1283               	bcf	3,5	;RP0=0, select bank0
  5954  090B  1303               	bcf	3,6	;RP1=0, select bank0
  5955  090C  0861               	movf	CWTX@cwtx+1,w
  5956  090D  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5957  090E  0860               	movf	CWTX@cwtx,w
  5958  090F  00F9               	movwf	OUTFQ@fmcwtxrx
  5959  0910  085E               	movf	CWTX@Nprg,w
  5960  0911  00FB               	movwf	OUTFQ@Nprg
  5961  0912  085F               	movf	CWTX@Nprg+1,w
  5962  0913  00FC               	movwf	OUTFQ@Nprg+1
  5963  0914  120A  118A  20AC   	fcall	_OUTFQ
  5964  0917  0008               	return
  5965  0918                     __end_of_CWTX:	
  5966                           
  5967                           	psect	text22
  5968  0D3B                     __ptext22:	
  5969 ;; *************** function _RFDOUT *****************
  5970 ;; Defined at:
  5971 ;;		line 200 in file "FMCW.c"
  5972 ;; Parameters:    Size  Location     Type
  5973 ;;  fmcwtxrx        2    9[COMMON] int 
  5974 ;;  Nref            2   11[COMMON] int 
  5975 ;; Auto vars:     Size  Location     Type
  5976 ;;  i               2   31[BANK0 ] int 
  5977 ;;  i               2   27[BANK0 ] int 
  5978 ;;  i               2   29[BANK0 ] int 
  5979 ;;  Nref_b         24    3[BANK0 ] int [12]
  5980 ;; Return value:  Size  Location     Type
  5981 ;;                  1    wreg      void 
  5982 ;; Registers used:
  5983 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5984 ;; Tracked objects:
  5985 ;;		On entry : 0/0
  5986 ;;		On exit  : 0/0
  5987 ;;		Unchanged: 0/0
  5988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5989 ;;      Params:         4       0       0       0       0
  5990 ;;      Locals:         0      30       0       0       0
  5991 ;;      Temps:          0       3       0       0       0
  5992 ;;      Totals:         4      33       0       0       0
  5993 ;;Total ram usage:       37 bytes
  5994 ;; Hardware stack levels used:    1
  5995 ;; Hardware stack levels required when called:    2
  5996 ;; This function calls:
  5997 ;;		_H_OUT
  5998 ;;		_L_OUT
  5999 ;;		_STBOUT
  6000 ;;		___awdiv
  6001 ;; This function is called by:
  6002 ;;		_FMTX
  6003 ;;		_CWTX
  6004 ;;		_FMRX
  6005 ;; This function uses a non-reentrant model
  6006 ;;
  6007                           
  6008                           
  6009                           ;psect for function _RFDOUT
  6010  0D3B                     _RFDOUT:	
  6011                           
  6012                           ;FMCW.c: 201: int Nref_b[12];
  6013                           ;FMCW.c: 203: for(int i=0; i<12; i++){
  6014                           
  6015                           ;incstack = 0
  6016                           ; Regs used in _RFDOUT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6017  0D3B  1283               	bcf	3,5	;RP0=0, select bank0
  6018  0D3C  1303               	bcf	3,6	;RP1=0, select bank0
  6019  0D3D  01BD               	clrf	RFDOUT@i
  6020  0D3E  01BE               	clrf	RFDOUT@i+1
  6021  0D3F  083E               	movf	RFDOUT@i+1,w
  6022  0D40  3A80               	xorlw	128
  6023  0D41  00FF               	movwf	127
  6024  0D42  3080               	movlw	128
  6025  0D43  027F               	subwf	127,w
  6026  0D44  1D03               	skipz
  6027  0D45  2D48               	goto	u2915
  6028  0D46  300C               	movlw	12
  6029  0D47  023D               	subwf	RFDOUT@i,w
  6030  0D48                     u2915:	
  6031  0D48  1803               	btfsc	3,0
  6032  0D49  2D66               	goto	l3252
  6033  0D4A                     l3246:	
  6034                           
  6035                           ;FMCW.c: 204: Nref_b[i] = 0;
  6036  0D4A  1283               	bcf	3,5	;RP0=0, select bank0
  6037  0D4B  1303               	bcf	3,6	;RP1=0, select bank0
  6038  0D4C  083D               	movf	RFDOUT@i,w
  6039  0D4D  00A0               	movwf	??_RFDOUT
  6040  0D4E  0720               	addwf	??_RFDOUT,w
  6041  0D4F  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6042  0D50  0084               	movwf	4
  6043  0D51  1383               	bcf	3,7	;select IRP bank0
  6044  0D52  0180               	clrf	0
  6045  0D53  0A84               	incf	4,f
  6046  0D54  0180               	clrf	0
  6047  0D55  3001               	movlw	1
  6048  0D56  07BD               	addwf	RFDOUT@i,f
  6049  0D57  1803               	skipnc
  6050  0D58  0ABE               	incf	RFDOUT@i+1,f
  6051  0D59  3000               	movlw	0
  6052  0D5A  07BE               	addwf	RFDOUT@i+1,f
  6053  0D5B  083E               	movf	RFDOUT@i+1,w
  6054  0D5C  3A80               	xorlw	128
  6055  0D5D  00FF               	movwf	127
  6056  0D5E  3080               	movlw	128
  6057  0D5F  027F               	subwf	127,w
  6058  0D60  1D03               	skipz
  6059  0D61  2D64               	goto	u2925
  6060  0D62  300C               	movlw	12
  6061  0D63  023D               	subwf	RFDOUT@i,w
  6062  0D64                     u2925:	
  6063  0D64  1C03               	skipc
  6064  0D65  2D4A               	goto	l3246
  6065  0D66                     l3252:	
  6066                           
  6067                           ;FMCW.c: 205: }
  6068                           ;FMCW.c: 208: for(int i=0; Nref>0; i++){
  6069  0D66  1283               	bcf	3,5	;RP0=0, select bank0
  6070  0D67  1303               	bcf	3,6	;RP1=0, select bank0
  6071  0D68  01BB               	clrf	RFDOUT@i_483
  6072  0D69  01BC               	clrf	RFDOUT@i_483+1
  6073  0D6A  087C               	movf	RFDOUT@Nref+1,w
  6074  0D6B  3A80               	xorlw	128
  6075  0D6C  00FF               	movwf	127
  6076  0D6D  3080               	movlw	128
  6077  0D6E  027F               	subwf	127,w
  6078  0D6F  1D03               	skipz
  6079  0D70  2D73               	goto	u2935
  6080  0D71  3001               	movlw	1
  6081  0D72  027B               	subwf	RFDOUT@Nref,w
  6082  0D73                     u2935:	
  6083  0D73  1C03               	btfss	3,0
  6084  0D74  2DAC               	goto	l3266
  6085  0D75                     l3258:	
  6086                           
  6087                           ;FMCW.c: 209: Nref_b[i] = Nref % 2;
  6088  0D75  3001               	movlw	1
  6089  0D76  057B               	andwf	RFDOUT@Nref,w
  6090  0D77  1283               	bcf	3,5	;RP0=0, select bank0
  6091  0D78  1303               	bcf	3,6	;RP1=0, select bank0
  6092  0D79  00A0               	movwf	??_RFDOUT
  6093  0D7A  3000               	movlw	0
  6094  0D7B  057C               	andwf	RFDOUT@Nref+1,w
  6095  0D7C  00A1               	movwf	??_RFDOUT+1
  6096  0D7D  083B               	movf	RFDOUT@i_483,w
  6097  0D7E  00A2               	movwf	??_RFDOUT+2
  6098  0D7F  0722               	addwf	??_RFDOUT+2,w
  6099  0D80  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6100  0D81  0084               	movwf	4
  6101  0D82  0820               	movf	??_RFDOUT,w
  6102  0D83  1383               	bcf	3,7	;select IRP bank0
  6103  0D84  0080               	movwf	0
  6104  0D85  0A84               	incf	4,f
  6105  0D86  0821               	movf	??_RFDOUT+1,w
  6106  0D87  0080               	movwf	0
  6107                           
  6108                           ;FMCW.c: 210: Nref = Nref / 2;
  6109  0D88  3002               	movlw	2
  6110  0D89  00F0               	movwf	___awdiv@divisor
  6111  0D8A  3000               	movlw	0
  6112  0D8B  00F1               	movwf	___awdiv@divisor+1
  6113  0D8C  087C               	movf	RFDOUT@Nref+1,w
  6114  0D8D  00F3               	movwf	___awdiv@dividend+1
  6115  0D8E  087B               	movf	RFDOUT@Nref,w
  6116  0D8F  00F2               	movwf	___awdiv@dividend
  6117  0D90  120A  158A  22E4  120A  158A  	fcall	___awdiv
  6118  0D95  0871               	movf	?___awdiv+1,w
  6119  0D96  00FC               	movwf	RFDOUT@Nref+1
  6120  0D97  0870               	movf	?___awdiv,w
  6121  0D98  00FB               	movwf	RFDOUT@Nref
  6122  0D99  3001               	movlw	1
  6123  0D9A  1283               	bcf	3,5	;RP0=0, select bank0
  6124  0D9B  1303               	bcf	3,6	;RP1=0, select bank0
  6125  0D9C  07BB               	addwf	RFDOUT@i_483,f
  6126  0D9D  1803               	skipnc
  6127  0D9E  0ABC               	incf	RFDOUT@i_483+1,f
  6128  0D9F  3000               	movlw	0
  6129  0DA0  07BC               	addwf	RFDOUT@i_483+1,f
  6130  0DA1  087C               	movf	RFDOUT@Nref+1,w
  6131  0DA2  3A80               	xorlw	128
  6132  0DA3  00FF               	movwf	127
  6133  0DA4  3080               	movlw	128
  6134  0DA5  027F               	subwf	127,w
  6135  0DA6  1D03               	skipz
  6136  0DA7  2DAA               	goto	u2945
  6137  0DA8  3001               	movlw	1
  6138  0DA9  027B               	subwf	RFDOUT@Nref,w
  6139  0DAA                     u2945:	
  6140  0DAA  1803               	skipnc
  6141  0DAB  2D75               	goto	l3258
  6142  0DAC                     l3266:	
  6143                           
  6144                           ;FMCW.c: 211: }
  6145                           ;FMCW.c: 214: for (int i=0; i<12; i++)
  6146  0DAC  1283               	bcf	3,5	;RP0=0, select bank0
  6147  0DAD  1303               	bcf	3,6	;RP1=0, select bank0
  6148  0DAE  01BF               	clrf	RFDOUT@i_484
  6149  0DAF  01C0               	clrf	RFDOUT@i_484+1
  6150  0DB0  0840               	movf	RFDOUT@i_484+1,w
  6151  0DB1  3A80               	xorlw	128
  6152  0DB2  00FF               	movwf	127
  6153  0DB3  3080               	movlw	128
  6154  0DB4  027F               	subwf	127,w
  6155  0DB5  1D03               	skipz
  6156  0DB6  2DB9               	goto	u2955
  6157  0DB7  300C               	movlw	12
  6158  0DB8  023F               	subwf	RFDOUT@i_484,w
  6159  0DB9                     u2955:	
  6160  0DB9  1803               	btfsc	3,0
  6161  0DBA  2E02               	goto	l3284
  6162  0DBB                     l3272:	
  6163                           
  6164                           ;FMCW.c: 215: {
  6165                           ;FMCW.c: 216: if(Nref_b[i] == 0)
  6166  0DBB  1283               	bcf	3,5	;RP0=0, select bank0
  6167  0DBC  1303               	bcf	3,6	;RP1=0, select bank0
  6168  0DBD  083F               	movf	RFDOUT@i_484,w
  6169  0DBE  00A0               	movwf	??_RFDOUT
  6170  0DBF  0720               	addwf	??_RFDOUT,w
  6171  0DC0  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6172  0DC1  0084               	movwf	4
  6173  0DC2  1383               	bcf	3,7	;select IRP bank0
  6174  0DC3  0800               	movf	0,w
  6175  0DC4  00A1               	movwf	??_RFDOUT+1
  6176  0DC5  0A84               	incf	4,f
  6177  0DC6  0800               	movf	0,w
  6178  0DC7  00A2               	movwf	??_RFDOUT+2
  6179  0DC8  0821               	movf	??_RFDOUT+1,w
  6180  0DC9  0422               	iorwf	??_RFDOUT+2,w
  6181  0DCA  1D03               	btfss	3,2
  6182  0DCB  2DD5               	goto	l3276
  6183                           
  6184                           ;FMCW.c: 217: {
  6185                           ;FMCW.c: 218: L_OUT(fmcwtxrx);
  6186  0DCC  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6187  0DCD  00F3               	movwf	L_OUT@fmcwtxrx+1
  6188  0DCE  0879               	movf	RFDOUT@fmcwtxrx,w
  6189  0DCF  00F2               	movwf	L_OUT@fmcwtxrx
  6190  0DD0  120A  158A  2252  120A  158A  	fcall	_L_OUT
  6191  0DD5                     l3276:	
  6192                           
  6193                           ;FMCW.c: 219: }
  6194                           ;FMCW.c: 220: if(Nref_b[i] == 1)
  6195  0DD5  1283               	bcf	3,5	;RP0=0, select bank0
  6196  0DD6  1303               	bcf	3,6	;RP1=0, select bank0
  6197  0DD7  083F               	movf	RFDOUT@i_484,w
  6198  0DD8  00A0               	movwf	??_RFDOUT
  6199  0DD9  0720               	addwf	??_RFDOUT,w
  6200  0DDA  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6201  0DDB  0084               	movwf	4
  6202  0DDC  1383               	bcf	3,7	;select IRP bank0
  6203  0DDD  0800               	movf	0,w
  6204  0DDE  00A1               	movwf	??_RFDOUT+1
  6205  0DDF  0A84               	incf	4,f
  6206  0DE0  0800               	movf	0,w
  6207  0DE1  00A2               	movwf	??_RFDOUT+2
  6208  0DE2  0321               	decf	??_RFDOUT+1,w
  6209  0DE3  0422               	iorwf	??_RFDOUT+2,w
  6210  0DE4  1D03               	btfss	3,2
  6211  0DE5  2DEF               	goto	l3280
  6212                           
  6213                           ;FMCW.c: 221: {
  6214                           ;FMCW.c: 222: H_OUT(fmcwtxrx);
  6215  0DE6  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6216  0DE7  00F3               	movwf	H_OUT@fmcwtxrx+1
  6217  0DE8  0879               	movf	RFDOUT@fmcwtxrx,w
  6218  0DE9  00F2               	movwf	H_OUT@fmcwtxrx
  6219  0DEA  120A  158A  220C  120A  158A  	fcall	_H_OUT
  6220  0DEF                     l3280:	
  6221  0DEF  3001               	movlw	1
  6222  0DF0  1283               	bcf	3,5	;RP0=0, select bank0
  6223  0DF1  1303               	bcf	3,6	;RP1=0, select bank0
  6224  0DF2  07BF               	addwf	RFDOUT@i_484,f
  6225  0DF3  1803               	skipnc
  6226  0DF4  0AC0               	incf	RFDOUT@i_484+1,f
  6227  0DF5  3000               	movlw	0
  6228  0DF6  07C0               	addwf	RFDOUT@i_484+1,f
  6229  0DF7  0840               	movf	RFDOUT@i_484+1,w
  6230  0DF8  3A80               	xorlw	128
  6231  0DF9  00FF               	movwf	127
  6232  0DFA  3080               	movlw	128
  6233  0DFB  027F               	subwf	127,w
  6234  0DFC  1D03               	skipz
  6235  0DFD  2E00               	goto	u2985
  6236  0DFE  300C               	movlw	12
  6237  0DFF  023F               	subwf	RFDOUT@i_484,w
  6238  0E00                     u2985:	
  6239  0E00  1C03               	skipc
  6240  0E01  2DBB               	goto	l3272
  6241  0E02                     l3284:	
  6242                           
  6243                           ;FMCW.c: 223: }
  6244                           ;FMCW.c: 224: }
  6245                           ;FMCW.c: 227: H_OUT(fmcwtxrx);
  6246  0E02  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6247  0E03  00F3               	movwf	H_OUT@fmcwtxrx+1
  6248  0E04  0879               	movf	RFDOUT@fmcwtxrx,w
  6249  0E05  00F2               	movwf	H_OUT@fmcwtxrx
  6250  0E06  120A  158A  220C  120A  158A  	fcall	_H_OUT
  6251                           
  6252                           ;FMCW.c: 228: H_OUT(fmcwtxrx);
  6253  0E0B  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6254  0E0C  00F3               	movwf	H_OUT@fmcwtxrx+1
  6255  0E0D  0879               	movf	RFDOUT@fmcwtxrx,w
  6256  0E0E  00F2               	movwf	H_OUT@fmcwtxrx
  6257  0E0F  120A  158A  220C  120A  158A  	fcall	_H_OUT
  6258                           
  6259                           ;FMCW.c: 231: STBOUT(fmcwtxrx);
  6260  0E14  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6261  0E15  00F3               	movwf	STBOUT@fmcwtxrx+1
  6262  0E16  0879               	movf	RFDOUT@fmcwtxrx,w
  6263  0E17  00F2               	movwf	STBOUT@fmcwtxrx
  6264  0E18  120A  158A  2170   	fcall	_STBOUT
  6265  0E1B  0008               	return
  6266  0E1C                     __end_of_RFDOUT:	
  6267                           
  6268                           	psect	text23
  6269  00AC                     __ptext23:	
  6270 ;; *************** function _OUTFQ *****************
  6271 ;; Defined at:
  6272 ;;		line 136 in file "FMCW.c"
  6273 ;; Parameters:    Size  Location     Type
  6274 ;;  fmcwtxrx        2    9[COMMON] int 
  6275 ;;  Nprg            2   11[COMMON] PTR int 
  6276 ;;		 -> RAM(512), main@FMRX_Nprg(10), main@CWTX_Nprg(10), main@FMTX_Nprg(10), 
  6277 ;;		 -> FMRX_Nprg(10), CWTX_Nprg(10), FMTX_Nprg(10), 
  6278 ;; Auto vars:     Size  Location     Type
  6279 ;;  j               2   58[BANK0 ] int 
  6280 ;;  i               2   56[BANK0 ] int 
  6281 ;;  i               2   50[BANK0 ] int 
  6282 ;;  i               2   54[BANK0 ] int 
  6283 ;;  Nprg_b         34   16[BANK0 ] int [17]
  6284 ;;  count           2   52[BANK0 ] int 
  6285 ;; Return value:  Size  Location     Type
  6286 ;;                  1    wreg      void 
  6287 ;; Registers used:
  6288 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6289 ;; Tracked objects:
  6290 ;;		On entry : 0/0
  6291 ;;		On exit  : 0/0
  6292 ;;		Unchanged: 0/0
  6293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6294 ;;      Params:         4       0       0       0       0
  6295 ;;      Locals:         0      44       0       0       0
  6296 ;;      Temps:          0      16       0       0       0
  6297 ;;      Totals:         4      60       0       0       0
  6298 ;;Total ram usage:       64 bytes
  6299 ;; Hardware stack levels used:    1
  6300 ;; Hardware stack levels required when called:    2
  6301 ;; This function calls:
  6302 ;;		_H_OUT
  6303 ;;		_L_OUT
  6304 ;;		_STBOUT
  6305 ;;		___awdiv
  6306 ;; This function is called by:
  6307 ;;		_FMTX
  6308 ;;		_CWTX
  6309 ;;		_FMRX
  6310 ;; This function uses a non-reentrant model
  6311 ;;
  6312                           
  6313                           
  6314                           ;psect for function _OUTFQ
  6315  00AC                     _OUTFQ:	
  6316                           
  6317                           ;FMCW.c: 137: int count = 0;
  6318                           
  6319                           ;incstack = 0
  6320                           ; Regs used in _OUTFQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6321  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  6322  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  6323  00AE  01D4               	clrf	OUTFQ@count
  6324  00AF  01D5               	clrf	OUTFQ@count+1
  6325                           
  6326                           ;FMCW.c: 138: int Nprg_b[17];
  6327                           ;FMCW.c: 140: for(int i=0; i<17; i++){
  6328  00B0  01D6               	clrf	OUTFQ@i
  6329  00B1  01D7               	clrf	OUTFQ@i+1
  6330  00B2  0857               	movf	OUTFQ@i+1,w
  6331  00B3  3A80               	xorlw	128
  6332  00B4  00FF               	movwf	127
  6333  00B5  3080               	movlw	128
  6334  00B6  027F               	subwf	127,w
  6335  00B7  1D03               	skipz
  6336  00B8  28BB               	goto	u2775
  6337  00B9  3011               	movlw	17
  6338  00BA  0256               	subwf	OUTFQ@i,w
  6339  00BB                     u2775:	
  6340  00BB  1803               	btfsc	3,0
  6341  00BC  28D9               	goto	l3174
  6342  00BD                     l3168:	
  6343                           
  6344                           ;FMCW.c: 141: Nprg_b[i] = 0;
  6345  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  6346  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  6347  00BF  0856               	movf	OUTFQ@i,w
  6348  00C0  00A0               	movwf	??_OUTFQ
  6349  00C1  0720               	addwf	??_OUTFQ,w
  6350  00C2  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6351  00C3  0084               	movwf	4
  6352  00C4  1383               	bcf	3,7	;select IRP bank0
  6353  00C5  0180               	clrf	0
  6354  00C6  0A84               	incf	4,f
  6355  00C7  0180               	clrf	0
  6356  00C8  3001               	movlw	1
  6357  00C9  07D6               	addwf	OUTFQ@i,f
  6358  00CA  1803               	skipnc
  6359  00CB  0AD7               	incf	OUTFQ@i+1,f
  6360  00CC  3000               	movlw	0
  6361  00CD  07D7               	addwf	OUTFQ@i+1,f
  6362  00CE  0857               	movf	OUTFQ@i+1,w
  6363  00CF  3A80               	xorlw	128
  6364  00D0  00FF               	movwf	127
  6365  00D1  3080               	movlw	128
  6366  00D2  027F               	subwf	127,w
  6367  00D3  1D03               	skipz
  6368  00D4  28D7               	goto	u2785
  6369  00D5  3011               	movlw	17
  6370  00D6  0256               	subwf	OUTFQ@i,w
  6371  00D7                     u2785:	
  6372  00D7  1C03               	skipc
  6373  00D8  28BD               	goto	l3168
  6374  00D9                     l3174:	
  6375                           
  6376                           ;FMCW.c: 142: }
  6377                           ;FMCW.c: 145: for(int i = 0; i < 17; i++){
  6378  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  6379  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  6380  00DB  01D2               	clrf	OUTFQ@i_472
  6381  00DC  01D3               	clrf	OUTFQ@i_472+1
  6382  00DD  0853               	movf	OUTFQ@i_472+1,w
  6383  00DE  3A80               	xorlw	128
  6384  00DF  00FF               	movwf	127
  6385  00E0  3080               	movlw	128
  6386  00E1  027F               	subwf	127,w
  6387  00E2  1D03               	skipz
  6388  00E3  28E6               	goto	u2795
  6389  00E4  3011               	movlw	17
  6390  00E5  0252               	subwf	OUTFQ@i_472,w
  6391  00E6                     u2795:	
  6392  00E6  1803               	btfsc	3,0
  6393  00E7  2AB7               	goto	l3220
  6394  00E8                     l3180:	
  6395                           
  6396                           ;FMCW.c: 146: for(int j = 0; j<5; j++){
  6397  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  6398  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  6399  00EA  01DA               	clrf	OUTFQ@j
  6400  00EB  01DB               	clrf	OUTFQ@j+1
  6401  00EC  085B               	movf	OUTFQ@j+1,w
  6402  00ED  3A80               	xorlw	128
  6403  00EE  00FF               	movwf	127
  6404  00EF  3080               	movlw	128
  6405  00F0  027F               	subwf	127,w
  6406  00F1  1D03               	skipz
  6407  00F2  28F5               	goto	u2805
  6408  00F3  3005               	movlw	5
  6409  00F4  025A               	subwf	OUTFQ@j,w
  6410  00F5                     u2805:	
  6411  00F5  1803               	btfsc	3,0
  6412  00F6  2AA4               	goto	l3216
  6413  00F7                     l3186:	
  6414                           
  6415                           ;FMCW.c: 147: if(Nprg[j] % 2 == 0) {
  6416  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  6417  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  6418  00F9  085B               	movf	OUTFQ@j+1,w
  6419  00FA  00A1               	movwf	??_OUTFQ+1
  6420  00FB  085A               	movf	OUTFQ@j,w
  6421  00FC  00A0               	movwf	??_OUTFQ
  6422  00FD  1003               	clrc
  6423  00FE  0DA0               	rlf	??_OUTFQ,f
  6424  00FF  0DA1               	rlf	??_OUTFQ+1,f
  6425  0100  0820               	movf	??_OUTFQ,w
  6426  0101  077B               	addwf	OUTFQ@Nprg,w
  6427  0102  00A2               	movwf	??_OUTFQ+2
  6428  0103  0821               	movf	??_OUTFQ+1,w
  6429  0104  1803               	skipnc
  6430  0105  0A21               	incf	??_OUTFQ+1,w
  6431  0106  077C               	addwf	OUTFQ@Nprg+1,w
  6432  0107  00A3               	movwf	??_OUTFQ+3
  6433  0108  0822               	movf	??_OUTFQ+2,w
  6434  0109  0084               	movwf	4
  6435  010A  1783               	bsf	3,7
  6436  010B  1C23               	btfss	??_OUTFQ+3,0
  6437  010C  1383               	bcf	3,7
  6438  010D  0800               	movf	0,w
  6439  010E  00A4               	movwf	??_OUTFQ+4
  6440  010F  0A84               	incf	4,f
  6441  0110  0800               	movf	0,w
  6442  0111  00A5               	movwf	??_OUTFQ+5
  6443  0112  1824               	btfsc	??_OUTFQ+4,0
  6444  0113  299D               	goto	l3198
  6445                           
  6446                           ;FMCW.c: 148: if(j == 4){
  6447  0114  3004               	movlw	4
  6448  0115  065A               	xorwf	OUTFQ@j,w
  6449  0116  045B               	iorwf	OUTFQ@j+1,w
  6450  0117  1D03               	btfss	3,2
  6451  0118  2960               	goto	l3196
  6452                           
  6453                           ;FMCW.c: 149: Nprg[j] = Nprg[j] / 2;
  6454  0119  3002               	movlw	2
  6455  011A  00F0               	movwf	___awdiv@divisor
  6456  011B  3000               	movlw	0
  6457  011C  00F1               	movwf	___awdiv@divisor+1
  6458  011D  085B               	movf	OUTFQ@j+1,w
  6459  011E  00A1               	movwf	??_OUTFQ+1
  6460  011F  085A               	movf	OUTFQ@j,w
  6461  0120  00A0               	movwf	??_OUTFQ
  6462  0121  1003               	clrc
  6463  0122  0DA0               	rlf	??_OUTFQ,f
  6464  0123  0DA1               	rlf	??_OUTFQ+1,f
  6465  0124  0820               	movf	??_OUTFQ,w
  6466  0125  077B               	addwf	OUTFQ@Nprg,w
  6467  0126  00A2               	movwf	??_OUTFQ+2
  6468  0127  0821               	movf	??_OUTFQ+1,w
  6469  0128  1803               	skipnc
  6470  0129  0A21               	incf	??_OUTFQ+1,w
  6471  012A  077C               	addwf	OUTFQ@Nprg+1,w
  6472  012B  00A3               	movwf	??_OUTFQ+3
  6473  012C  0822               	movf	??_OUTFQ+2,w
  6474  012D  0084               	movwf	4
  6475  012E  1783               	bsf	3,7
  6476  012F  1C23               	btfss	??_OUTFQ+3,0
  6477  0130  1383               	bcf	3,7
  6478  0131  0800               	movf	0,w
  6479  0132  00F2               	movwf	___awdiv@dividend
  6480  0133  0A84               	incf	4,f
  6481  0134  0800               	movf	0,w
  6482  0135  00F3               	movwf	___awdiv@dividend+1
  6483  0136  120A  158A  22E4  120A  118A  	fcall	___awdiv
  6484  013B  1283               	bcf	3,5	;RP0=0, select bank0
  6485  013C  1303               	bcf	3,6	;RP1=0, select bank0
  6486  013D  085B               	movf	OUTFQ@j+1,w
  6487  013E  00A5               	movwf	??_OUTFQ+5
  6488  013F  085A               	movf	OUTFQ@j,w
  6489  0140  00A4               	movwf	??_OUTFQ+4
  6490  0141  1003               	clrc
  6491  0142  0DA4               	rlf	??_OUTFQ+4,f
  6492  0143  0DA5               	rlf	??_OUTFQ+5,f
  6493  0144  0824               	movf	??_OUTFQ+4,w
  6494  0145  077B               	addwf	OUTFQ@Nprg,w
  6495  0146  00A6               	movwf	??_OUTFQ+6
  6496  0147  0825               	movf	??_OUTFQ+5,w
  6497  0148  1803               	skipnc
  6498  0149  0A25               	incf	??_OUTFQ+5,w
  6499  014A  077C               	addwf	OUTFQ@Nprg+1,w
  6500  014B  00A7               	movwf	??_OUTFQ+7
  6501  014C  0826               	movf	??_OUTFQ+6,w
  6502  014D  0084               	movwf	4
  6503  014E  1783               	bsf	3,7
  6504  014F  1C27               	btfss	??_OUTFQ+7,0
  6505  0150  1383               	bcf	3,7
  6506  0151  0870               	movf	?___awdiv,w
  6507  0152  0080               	movwf	0
  6508  0153  0A84               	incf	4,f
  6509  0154  0871               	movf	?___awdiv+1,w
  6510  0155  0080               	movwf	0
  6511                           
  6512                           ;FMCW.c: 150: Nprg_b[count] = 0;
  6513  0156  0854               	movf	OUTFQ@count,w
  6514  0157  00A0               	movwf	??_OUTFQ
  6515  0158  0720               	addwf	??_OUTFQ,w
  6516  0159  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6517  015A  0084               	movwf	4
  6518  015B  1383               	bcf	3,7	;select IRP bank0
  6519  015C  0180               	clrf	0
  6520  015D  0A84               	incf	4,f
  6521  015E  0180               	clrf	0
  6522  015F  2A05               	goto	l3206
  6523  0160                     l3196:	
  6524                           ;FMCW.c: 152: }
  6525                           
  6526                           ;FMCW.c: 151: count++;
  6527                           
  6528                           
  6529                           ;FMCW.c: 153: else{
  6530                           ;FMCW.c: 154: Nprg[j] = Nprg[j] / 2;
  6531  0160  3002               	movlw	2
  6532  0161  00F0               	movwf	___awdiv@divisor
  6533  0162  3000               	movlw	0
  6534  0163  00F1               	movwf	___awdiv@divisor+1
  6535  0164  085B               	movf	OUTFQ@j+1,w
  6536  0165  00A1               	movwf	??_OUTFQ+1
  6537  0166  085A               	movf	OUTFQ@j,w
  6538  0167  00A0               	movwf	??_OUTFQ
  6539  0168  1003               	clrc
  6540  0169  0DA0               	rlf	??_OUTFQ,f
  6541  016A  0DA1               	rlf	??_OUTFQ+1,f
  6542  016B  0820               	movf	??_OUTFQ,w
  6543  016C  077B               	addwf	OUTFQ@Nprg,w
  6544  016D  00A2               	movwf	??_OUTFQ+2
  6545  016E  0821               	movf	??_OUTFQ+1,w
  6546  016F  1803               	skipnc
  6547  0170  0A21               	incf	??_OUTFQ+1,w
  6548  0171  077C               	addwf	OUTFQ@Nprg+1,w
  6549  0172  00A3               	movwf	??_OUTFQ+3
  6550  0173  0822               	movf	??_OUTFQ+2,w
  6551  0174  0084               	movwf	4
  6552  0175  1783               	bsf	3,7
  6553  0176  1C23               	btfss	??_OUTFQ+3,0
  6554  0177  1383               	bcf	3,7
  6555  0178  0800               	movf	0,w
  6556  0179  00F2               	movwf	___awdiv@dividend
  6557  017A  0A84               	incf	4,f
  6558  017B  0800               	movf	0,w
  6559  017C  00F3               	movwf	___awdiv@dividend+1
  6560  017D  120A  158A  22E4  120A  118A  	fcall	___awdiv
  6561  0182  1283               	bcf	3,5	;RP0=0, select bank0
  6562  0183  1303               	bcf	3,6	;RP1=0, select bank0
  6563  0184  085B               	movf	OUTFQ@j+1,w
  6564  0185  00A5               	movwf	??_OUTFQ+5
  6565  0186  085A               	movf	OUTFQ@j,w
  6566  0187  00A4               	movwf	??_OUTFQ+4
  6567  0188  1003               	clrc
  6568  0189  0DA4               	rlf	??_OUTFQ+4,f
  6569  018A  0DA5               	rlf	??_OUTFQ+5,f
  6570  018B  0824               	movf	??_OUTFQ+4,w
  6571  018C  077B               	addwf	OUTFQ@Nprg,w
  6572  018D  00A6               	movwf	??_OUTFQ+6
  6573  018E  0825               	movf	??_OUTFQ+5,w
  6574  018F  1803               	skipnc
  6575  0190  0A25               	incf	??_OUTFQ+5,w
  6576  0191  077C               	addwf	OUTFQ@Nprg+1,w
  6577  0192  00A7               	movwf	??_OUTFQ+7
  6578  0193  0826               	movf	??_OUTFQ+6,w
  6579  0194  0084               	movwf	4
  6580  0195  1783               	bsf	3,7
  6581  0196  1C27               	btfss	??_OUTFQ+7,0
  6582  0197  1383               	bcf	3,7
  6583  0198  0870               	movf	?___awdiv,w
  6584  0199  0080               	movwf	0
  6585  019A  0A84               	incf	4,f
  6586  019B  0871               	movf	?___awdiv+1,w
  6587  019C  2A92               	goto	L8
  6588  019D                     l3198:	
  6589                           ;FMCW.c: 155: }
  6590                           ;FMCW.c: 156: }
  6591                           
  6592                           
  6593                           ;FMCW.c: 157: else if(Nprg[j] % 2 == 1) {
  6594  019D  085B               	movf	OUTFQ@j+1,w
  6595  019E  00A1               	movwf	??_OUTFQ+1
  6596  019F  085A               	movf	OUTFQ@j,w
  6597  01A0  00A0               	movwf	??_OUTFQ
  6598  01A1  1003               	clrc
  6599  01A2  0DA0               	rlf	??_OUTFQ,f
  6600  01A3  0DA1               	rlf	??_OUTFQ+1,f
  6601  01A4  0820               	movf	??_OUTFQ,w
  6602  01A5  077B               	addwf	OUTFQ@Nprg,w
  6603  01A6  00A2               	movwf	??_OUTFQ+2
  6604  01A7  0821               	movf	??_OUTFQ+1,w
  6605  01A8  1803               	skipnc
  6606  01A9  0A21               	incf	??_OUTFQ+1,w
  6607  01AA  077C               	addwf	OUTFQ@Nprg+1,w
  6608  01AB  00A3               	movwf	??_OUTFQ+3
  6609  01AC  0822               	movf	??_OUTFQ+2,w
  6610  01AD  0084               	movwf	4
  6611  01AE  1783               	bsf	3,7
  6612  01AF  1C23               	btfss	??_OUTFQ+3,0
  6613  01B0  1383               	bcf	3,7
  6614  01B1  0800               	movf	0,w
  6615  01B2  00A4               	movwf	??_OUTFQ+4
  6616  01B3  0A84               	incf	4,f
  6617  01B4  0800               	movf	0,w
  6618  01B5  00A5               	movwf	??_OUTFQ+5
  6619  01B6  1C24               	btfss	??_OUTFQ+4,0
  6620  01B7  2A93               	goto	l3212
  6621                           
  6622                           ;FMCW.c: 158: if(j == 4){
  6623  01B8  3004               	movlw	4
  6624  01B9  065A               	xorwf	OUTFQ@j,w
  6625  01BA  045B               	iorwf	OUTFQ@j+1,w
  6626  01BB  1D03               	btfss	3,2
  6627  01BC  2A0C               	goto	l3208
  6628                           
  6629                           ;FMCW.c: 159: Nprg[j] = Nprg[j] / 2;
  6630  01BD  3002               	movlw	2
  6631  01BE  00F0               	movwf	___awdiv@divisor
  6632  01BF  3000               	movlw	0
  6633  01C0  00F1               	movwf	___awdiv@divisor+1
  6634  01C1  085B               	movf	OUTFQ@j+1,w
  6635  01C2  00A1               	movwf	??_OUTFQ+1
  6636  01C3  085A               	movf	OUTFQ@j,w
  6637  01C4  00A0               	movwf	??_OUTFQ
  6638  01C5  1003               	clrc
  6639  01C6  0DA0               	rlf	??_OUTFQ,f
  6640  01C7  0DA1               	rlf	??_OUTFQ+1,f
  6641  01C8  0820               	movf	??_OUTFQ,w
  6642  01C9  077B               	addwf	OUTFQ@Nprg,w
  6643  01CA  00A2               	movwf	??_OUTFQ+2
  6644  01CB  0821               	movf	??_OUTFQ+1,w
  6645  01CC  1803               	skipnc
  6646  01CD  0A21               	incf	??_OUTFQ+1,w
  6647  01CE  077C               	addwf	OUTFQ@Nprg+1,w
  6648  01CF  00A3               	movwf	??_OUTFQ+3
  6649  01D0  0822               	movf	??_OUTFQ+2,w
  6650  01D1  0084               	movwf	4
  6651  01D2  1783               	bsf	3,7
  6652  01D3  1C23               	btfss	??_OUTFQ+3,0
  6653  01D4  1383               	bcf	3,7
  6654  01D5  0800               	movf	0,w
  6655  01D6  00F2               	movwf	___awdiv@dividend
  6656  01D7  0A84               	incf	4,f
  6657  01D8  0800               	movf	0,w
  6658  01D9  00F3               	movwf	___awdiv@dividend+1
  6659  01DA  120A  158A  22E4  120A  118A  	fcall	___awdiv
  6660  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  6661  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  6662  01E1  085B               	movf	OUTFQ@j+1,w
  6663  01E2  00A5               	movwf	??_OUTFQ+5
  6664  01E3  085A               	movf	OUTFQ@j,w
  6665  01E4  00A4               	movwf	??_OUTFQ+4
  6666  01E5  1003               	clrc
  6667  01E6  0DA4               	rlf	??_OUTFQ+4,f
  6668  01E7  0DA5               	rlf	??_OUTFQ+5,f
  6669  01E8  0824               	movf	??_OUTFQ+4,w
  6670  01E9  077B               	addwf	OUTFQ@Nprg,w
  6671  01EA  00A6               	movwf	??_OUTFQ+6
  6672  01EB  0825               	movf	??_OUTFQ+5,w
  6673  01EC  1803               	skipnc
  6674  01ED  0A25               	incf	??_OUTFQ+5,w
  6675  01EE  077C               	addwf	OUTFQ@Nprg+1,w
  6676  01EF  00A7               	movwf	??_OUTFQ+7
  6677  01F0  0826               	movf	??_OUTFQ+6,w
  6678  01F1  0084               	movwf	4
  6679  01F2  1783               	bsf	3,7
  6680  01F3  1C27               	btfss	??_OUTFQ+7,0
  6681  01F4  1383               	bcf	3,7
  6682  01F5  0870               	movf	?___awdiv,w
  6683  01F6  0080               	movwf	0
  6684  01F7  0A84               	incf	4,f
  6685  01F8  0871               	movf	?___awdiv+1,w
  6686  01F9  0080               	movwf	0
  6687                           
  6688                           ;FMCW.c: 160: Nprg_b[count] = 1;
  6689  01FA  0854               	movf	OUTFQ@count,w
  6690  01FB  00A0               	movwf	??_OUTFQ
  6691  01FC  0720               	addwf	??_OUTFQ,w
  6692  01FD  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6693  01FE  0084               	movwf	4
  6694  01FF  3001               	movlw	1
  6695  0200  1383               	bcf	3,7	;select IRP bank0
  6696  0201  0080               	movwf	0
  6697  0202  0A84               	incf	4,f
  6698  0203  3000               	movlw	0
  6699  0204  0080               	movwf	0
  6700  0205                     l3206:	
  6701                           
  6702                           ;FMCW.c: 161: count++;
  6703  0205  3001               	movlw	1
  6704  0206  07D4               	addwf	OUTFQ@count,f
  6705  0207  1803               	skipnc
  6706  0208  0AD5               	incf	OUTFQ@count+1,f
  6707  0209  3000               	movlw	0
  6708  020A  07D5               	addwf	OUTFQ@count+1,f
  6709                           
  6710                           ;FMCW.c: 162: }
  6711  020B  2A93               	goto	l3212
  6712  020C                     l3208:	
  6713                           
  6714                           ;FMCW.c: 163: else{
  6715                           ;FMCW.c: 164: Nprg[j] = Nprg[j] / 2;
  6716  020C  3002               	movlw	2
  6717  020D  00F0               	movwf	___awdiv@divisor
  6718  020E  3000               	movlw	0
  6719  020F  00F1               	movwf	___awdiv@divisor+1
  6720  0210  085B               	movf	OUTFQ@j+1,w
  6721  0211  00A1               	movwf	??_OUTFQ+1
  6722  0212  085A               	movf	OUTFQ@j,w
  6723  0213  00A0               	movwf	??_OUTFQ
  6724  0214  1003               	clrc
  6725  0215  0DA0               	rlf	??_OUTFQ,f
  6726  0216  0DA1               	rlf	??_OUTFQ+1,f
  6727  0217  0820               	movf	??_OUTFQ,w
  6728  0218  077B               	addwf	OUTFQ@Nprg,w
  6729  0219  00A2               	movwf	??_OUTFQ+2
  6730  021A  0821               	movf	??_OUTFQ+1,w
  6731  021B  1803               	skipnc
  6732  021C  0A21               	incf	??_OUTFQ+1,w
  6733  021D  077C               	addwf	OUTFQ@Nprg+1,w
  6734  021E  00A3               	movwf	??_OUTFQ+3
  6735  021F  0822               	movf	??_OUTFQ+2,w
  6736  0220  0084               	movwf	4
  6737  0221  1783               	bsf	3,7
  6738  0222  1C23               	btfss	??_OUTFQ+3,0
  6739  0223  1383               	bcf	3,7
  6740  0224  0800               	movf	0,w
  6741  0225  00F2               	movwf	___awdiv@dividend
  6742  0226  0A84               	incf	4,f
  6743  0227  0800               	movf	0,w
  6744  0228  00F3               	movwf	___awdiv@dividend+1
  6745  0229  120A  158A  22E4  120A  118A  	fcall	___awdiv
  6746  022E  1283               	bcf	3,5	;RP0=0, select bank0
  6747  022F  1303               	bcf	3,6	;RP1=0, select bank0
  6748  0230  085B               	movf	OUTFQ@j+1,w
  6749  0231  00A5               	movwf	??_OUTFQ+5
  6750  0232  085A               	movf	OUTFQ@j,w
  6751  0233  00A4               	movwf	??_OUTFQ+4
  6752  0234  1003               	clrc
  6753  0235  0DA4               	rlf	??_OUTFQ+4,f
  6754  0236  0DA5               	rlf	??_OUTFQ+5,f
  6755  0237  0824               	movf	??_OUTFQ+4,w
  6756  0238  077B               	addwf	OUTFQ@Nprg,w
  6757  0239  00A6               	movwf	??_OUTFQ+6
  6758  023A  0825               	movf	??_OUTFQ+5,w
  6759  023B  1803               	skipnc
  6760  023C  0A25               	incf	??_OUTFQ+5,w
  6761  023D  077C               	addwf	OUTFQ@Nprg+1,w
  6762  023E  00A7               	movwf	??_OUTFQ+7
  6763  023F  0826               	movf	??_OUTFQ+6,w
  6764  0240  0084               	movwf	4
  6765  0241  1783               	bsf	3,7
  6766  0242  1C27               	btfss	??_OUTFQ+7,0
  6767  0243  1383               	bcf	3,7
  6768  0244  0870               	movf	?___awdiv,w
  6769  0245  0080               	movwf	0
  6770  0246  0A84               	incf	4,f
  6771  0247  0871               	movf	?___awdiv+1,w
  6772  0248  0080               	movwf	0
  6773                           
  6774                           ;FMCW.c: 165: Nprg[j+1] = Nprg[j+1] + 10;
  6775  0249  085B               	movf	OUTFQ@j+1,w
  6776  024A  00A1               	movwf	??_OUTFQ+1
  6777  024B  085A               	movf	OUTFQ@j,w
  6778  024C  00A0               	movwf	??_OUTFQ
  6779  024D  1003               	clrc
  6780  024E  0DA0               	rlf	??_OUTFQ,f
  6781  024F  0DA1               	rlf	??_OUTFQ+1,f
  6782  0250  0820               	movf	??_OUTFQ,w
  6783  0251  3E02               	addlw	2
  6784  0252  00A2               	movwf	??_OUTFQ+2
  6785  0253  0821               	movf	??_OUTFQ+1,w
  6786  0254  1803               	skipnc
  6787  0255  3E01               	addlw	1
  6788  0256  3E00               	addlw	0
  6789  0257  00A3               	movwf	??_OUTFQ+3
  6790  0258  0822               	movf	??_OUTFQ+2,w
  6791  0259  077B               	addwf	OUTFQ@Nprg,w
  6792  025A  00A4               	movwf	??_OUTFQ+4
  6793  025B  0823               	movf	??_OUTFQ+3,w
  6794  025C  1803               	skipnc
  6795  025D  0A23               	incf	??_OUTFQ+3,w
  6796  025E  077C               	addwf	OUTFQ@Nprg+1,w
  6797  025F  00A5               	movwf	??_OUTFQ+5
  6798  0260  0824               	movf	??_OUTFQ+4,w
  6799  0261  0084               	movwf	4
  6800  0262  1783               	bsf	3,7
  6801  0263  1C25               	btfss	??_OUTFQ+5,0
  6802  0264  1383               	bcf	3,7
  6803  0265  0800               	movf	0,w
  6804  0266  00A6               	movwf	??_OUTFQ+6
  6805  0267  0A84               	incf	4,f
  6806  0268  0800               	movf	0,w
  6807  0269  00A7               	movwf	??_OUTFQ+7
  6808  026A  0826               	movf	??_OUTFQ+6,w
  6809  026B  3E0A               	addlw	10
  6810  026C  00A8               	movwf	??_OUTFQ+8
  6811  026D  0827               	movf	??_OUTFQ+7,w
  6812  026E  1803               	skipnc
  6813  026F  3E01               	addlw	1
  6814  0270  3E00               	addlw	0
  6815  0271  00A9               	movwf	??_OUTFQ+9
  6816  0272  085B               	movf	OUTFQ@j+1,w
  6817  0273  00AB               	movwf	??_OUTFQ+11
  6818  0274  085A               	movf	OUTFQ@j,w
  6819  0275  00AA               	movwf	??_OUTFQ+10
  6820  0276  1003               	clrc
  6821  0277  0DAA               	rlf	??_OUTFQ+10,f
  6822  0278  0DAB               	rlf	??_OUTFQ+11,f
  6823  0279  082A               	movf	??_OUTFQ+10,w
  6824  027A  3E02               	addlw	2
  6825  027B  00AC               	movwf	??_OUTFQ+12
  6826  027C  082B               	movf	??_OUTFQ+11,w
  6827  027D  1803               	skipnc
  6828  027E  3E01               	addlw	1
  6829  027F  3E00               	addlw	0
  6830  0280  00AD               	movwf	??_OUTFQ+13
  6831  0281  082C               	movf	??_OUTFQ+12,w
  6832  0282  077B               	addwf	OUTFQ@Nprg,w
  6833  0283  00AE               	movwf	??_OUTFQ+14
  6834  0284  082D               	movf	??_OUTFQ+13,w
  6835  0285  1803               	skipnc
  6836  0286  0A2D               	incf	??_OUTFQ+13,w
  6837  0287  077C               	addwf	OUTFQ@Nprg+1,w
  6838  0288  00AF               	movwf	??_OUTFQ+15
  6839  0289  082E               	movf	??_OUTFQ+14,w
  6840  028A  0084               	movwf	4
  6841  028B  1783               	bsf	3,7
  6842  028C  1C2F               	btfss	??_OUTFQ+15,0
  6843  028D  1383               	bcf	3,7
  6844  028E  0828               	movf	??_OUTFQ+8,w
  6845  028F  0080               	movwf	0
  6846  0290  0A84               	incf	4,f
  6847  0291  0829               	movf	??_OUTFQ+9,w
  6848  0292                     L8:	
  6849  0292  0080               	movwf	0
  6850  0293                     l3212:	
  6851  0293  3001               	movlw	1
  6852  0294  07DA               	addwf	OUTFQ@j,f
  6853  0295  1803               	skipnc
  6854  0296  0ADB               	incf	OUTFQ@j+1,f
  6855  0297  3000               	movlw	0
  6856  0298  07DB               	addwf	OUTFQ@j+1,f
  6857  0299  085B               	movf	OUTFQ@j+1,w
  6858  029A  3A80               	xorlw	128
  6859  029B  00FF               	movwf	127
  6860  029C  3080               	movlw	128
  6861  029D  027F               	subwf	127,w
  6862  029E  1D03               	skipz
  6863  029F  2AA2               	goto	u2855
  6864  02A0  3005               	movlw	5
  6865  02A1  025A               	subwf	OUTFQ@j,w
  6866  02A2                     u2855:	
  6867  02A2  1C03               	skipc
  6868  02A3  28F7               	goto	l3186
  6869  02A4                     l3216:	
  6870  02A4  3001               	movlw	1
  6871  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  6872  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  6873  02A7  07D2               	addwf	OUTFQ@i_472,f
  6874  02A8  1803               	skipnc
  6875  02A9  0AD3               	incf	OUTFQ@i_472+1,f
  6876  02AA  3000               	movlw	0
  6877  02AB  07D3               	addwf	OUTFQ@i_472+1,f
  6878  02AC  0853               	movf	OUTFQ@i_472+1,w
  6879  02AD  3A80               	xorlw	128
  6880  02AE  00FF               	movwf	127
  6881  02AF  3080               	movlw	128
  6882  02B0  027F               	subwf	127,w
  6883  02B1  1D03               	skipz
  6884  02B2  2AB5               	goto	u2865
  6885  02B3  3011               	movlw	17
  6886  02B4  0252               	subwf	OUTFQ@i_472,w
  6887  02B5                     u2865:	
  6888  02B5  1C03               	skipc
  6889  02B6  28E8               	goto	l3180
  6890  02B7                     l3220:	
  6891                           
  6892                           ;FMCW.c: 166: }
  6893                           ;FMCW.c: 167: }
  6894                           ;FMCW.c: 168: }
  6895                           ;FMCW.c: 169: }
  6896                           ;FMCW.c: 172: for (int i=0; i<17; i++)
  6897  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  6898  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  6899  02B9  01D8               	clrf	OUTFQ@i_474
  6900  02BA  01D9               	clrf	OUTFQ@i_474+1
  6901  02BB  0859               	movf	OUTFQ@i_474+1,w
  6902  02BC  3A80               	xorlw	128
  6903  02BD  00FF               	movwf	127
  6904  02BE  3080               	movlw	128
  6905  02BF  027F               	subwf	127,w
  6906  02C0  1D03               	skipz
  6907  02C1  2AC4               	goto	u2875
  6908  02C2  3011               	movlw	17
  6909  02C3  0258               	subwf	OUTFQ@i_474,w
  6910  02C4                     u2875:	
  6911  02C4  1803               	btfsc	3,0
  6912  02C5  2B0D               	goto	l3238
  6913  02C6                     l3226:	
  6914                           
  6915                           ;FMCW.c: 173: {
  6916                           ;FMCW.c: 174: if(Nprg_b[i] == 0)
  6917  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  6918  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  6919  02C8  0858               	movf	OUTFQ@i_474,w
  6920  02C9  00A0               	movwf	??_OUTFQ
  6921  02CA  0720               	addwf	??_OUTFQ,w
  6922  02CB  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6923  02CC  0084               	movwf	4
  6924  02CD  1383               	bcf	3,7	;select IRP bank0
  6925  02CE  0800               	movf	0,w
  6926  02CF  00A1               	movwf	??_OUTFQ+1
  6927  02D0  0A84               	incf	4,f
  6928  02D1  0800               	movf	0,w
  6929  02D2  00A2               	movwf	??_OUTFQ+2
  6930  02D3  0821               	movf	??_OUTFQ+1,w
  6931  02D4  0422               	iorwf	??_OUTFQ+2,w
  6932  02D5  1D03               	btfss	3,2
  6933  02D6  2AE0               	goto	l3230
  6934                           
  6935                           ;FMCW.c: 175: {
  6936                           ;FMCW.c: 176: L_OUT(fmcwtxrx);
  6937  02D7  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6938  02D8  00F3               	movwf	L_OUT@fmcwtxrx+1
  6939  02D9  0879               	movf	OUTFQ@fmcwtxrx,w
  6940  02DA  00F2               	movwf	L_OUT@fmcwtxrx
  6941  02DB  120A  158A  2252  120A  118A  	fcall	_L_OUT
  6942  02E0                     l3230:	
  6943                           
  6944                           ;FMCW.c: 177: }
  6945                           ;FMCW.c: 178: if(Nprg_b[i] == 1)
  6946  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  6947  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  6948  02E2  0858               	movf	OUTFQ@i_474,w
  6949  02E3  00A0               	movwf	??_OUTFQ
  6950  02E4  0720               	addwf	??_OUTFQ,w
  6951  02E5  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6952  02E6  0084               	movwf	4
  6953  02E7  1383               	bcf	3,7	;select IRP bank0
  6954  02E8  0800               	movf	0,w
  6955  02E9  00A1               	movwf	??_OUTFQ+1
  6956  02EA  0A84               	incf	4,f
  6957  02EB  0800               	movf	0,w
  6958  02EC  00A2               	movwf	??_OUTFQ+2
  6959  02ED  0321               	decf	??_OUTFQ+1,w
  6960  02EE  0422               	iorwf	??_OUTFQ+2,w
  6961  02EF  1D03               	btfss	3,2
  6962  02F0  2AFA               	goto	l3234
  6963                           
  6964                           ;FMCW.c: 179: {
  6965                           ;FMCW.c: 180: H_OUT(fmcwtxrx);
  6966  02F1  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6967  02F2  00F3               	movwf	H_OUT@fmcwtxrx+1
  6968  02F3  0879               	movf	OUTFQ@fmcwtxrx,w
  6969  02F4  00F2               	movwf	H_OUT@fmcwtxrx
  6970  02F5  120A  158A  220C  120A  118A  	fcall	_H_OUT
  6971  02FA                     l3234:	
  6972  02FA  3001               	movlw	1
  6973  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  6974  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  6975  02FD  07D8               	addwf	OUTFQ@i_474,f
  6976  02FE  1803               	skipnc
  6977  02FF  0AD9               	incf	OUTFQ@i_474+1,f
  6978  0300  3000               	movlw	0
  6979  0301  07D9               	addwf	OUTFQ@i_474+1,f
  6980  0302  0859               	movf	OUTFQ@i_474+1,w
  6981  0303  3A80               	xorlw	128
  6982  0304  00FF               	movwf	127
  6983  0305  3080               	movlw	128
  6984  0306  027F               	subwf	127,w
  6985  0307  1D03               	skipz
  6986  0308  2B0B               	goto	u2905
  6987  0309  3011               	movlw	17
  6988  030A  0258               	subwf	OUTFQ@i_474,w
  6989  030B                     u2905:	
  6990  030B  1C03               	skipc
  6991  030C  2AC6               	goto	l3226
  6992  030D                     l3238:	
  6993                           
  6994                           ;FMCW.c: 181: }
  6995                           ;FMCW.c: 182: }
  6996                           ;FMCW.c: 185: H_OUT(fmcwtxrx);
  6997  030D  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6998  030E  00F3               	movwf	H_OUT@fmcwtxrx+1
  6999  030F  0879               	movf	OUTFQ@fmcwtxrx,w
  7000  0310  00F2               	movwf	H_OUT@fmcwtxrx
  7001  0311  120A  158A  220C  120A  118A  	fcall	_H_OUT
  7002                           
  7003                           ;FMCW.c: 186: L_OUT(fmcwtxrx);
  7004  0316  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7005  0317  00F3               	movwf	L_OUT@fmcwtxrx+1
  7006  0318  0879               	movf	OUTFQ@fmcwtxrx,w
  7007  0319  00F2               	movwf	L_OUT@fmcwtxrx
  7008  031A  120A  158A  2252  120A  118A  	fcall	_L_OUT
  7009                           
  7010                           ;FMCW.c: 189: STBOUT(fmcwtxrx);
  7011  031F  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7012  0320  00F3               	movwf	STBOUT@fmcwtxrx+1
  7013  0321  0879               	movf	OUTFQ@fmcwtxrx,w
  7014  0322  00F2               	movwf	STBOUT@fmcwtxrx
  7015  0323  120A  158A  2170   	fcall	_STBOUT
  7016  0326  0008               	return
  7017  0327                     __end_of_OUTFQ:	
  7018                           
  7019                           	psect	text24
  7020  0AE4                     __ptext24:	
  7021 ;; *************** function ___awdiv *****************
  7022 ;; Defined at:
  7023 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  7024 ;; Parameters:    Size  Location     Type
  7025 ;;  divisor         2    0[COMMON] int 
  7026 ;;  dividend        2    2[COMMON] int 
  7027 ;; Auto vars:     Size  Location     Type
  7028 ;;  quotient        2    7[COMMON] int 
  7029 ;;  sign            1    6[COMMON] unsigned char 
  7030 ;;  counter         1    5[COMMON] unsigned char 
  7031 ;; Return value:  Size  Location     Type
  7032 ;;                  2    0[COMMON] int 
  7033 ;; Registers used:
  7034 ;;		wreg, status,2, status,0
  7035 ;; Tracked objects:
  7036 ;;		On entry : 0/0
  7037 ;;		On exit  : 0/0
  7038 ;;		Unchanged: 0/0
  7039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7040 ;;      Params:         4       0       0       0       0
  7041 ;;      Locals:         4       0       0       0       0
  7042 ;;      Temps:          1       0       0       0       0
  7043 ;;      Totals:         9       0       0       0       0
  7044 ;;Total ram usage:        9 bytes
  7045 ;; Hardware stack levels used:    1
  7046 ;; This function calls:
  7047 ;;		Nothing
  7048 ;; This function is called by:
  7049 ;;		_OUTFQ
  7050 ;;		_RFDOUT
  7051 ;; This function uses a non-reentrant model
  7052 ;;
  7053                           
  7054                           
  7055                           ;psect for function ___awdiv
  7056  0AE4                     ___awdiv:	
  7057                           
  7058                           ;incstack = 0
  7059                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7060  0AE4  01F6               	clrf	___awdiv@sign
  7061  0AE5  1FF1               	btfss	___awdiv@divisor+1,7
  7062  0AE6  2AEE               	goto	l2650
  7063  0AE7  09F0               	comf	___awdiv@divisor,f
  7064  0AE8  09F1               	comf	___awdiv@divisor+1,f
  7065  0AE9  0AF0               	incf	___awdiv@divisor,f
  7066  0AEA  1903               	skipnz
  7067  0AEB  0AF1               	incf	___awdiv@divisor+1,f
  7068  0AEC  01F6               	clrf	___awdiv@sign
  7069  0AED  0AF6               	incf	___awdiv@sign,f
  7070  0AEE                     l2650:	
  7071  0AEE  1FF3               	btfss	___awdiv@dividend+1,7
  7072  0AEF  2AF9               	goto	l2656
  7073  0AF0  09F2               	comf	___awdiv@dividend,f
  7074  0AF1  09F3               	comf	___awdiv@dividend+1,f
  7075  0AF2  0AF2               	incf	___awdiv@dividend,f
  7076  0AF3  1903               	skipnz
  7077  0AF4  0AF3               	incf	___awdiv@dividend+1,f
  7078  0AF5  3001               	movlw	1
  7079  0AF6  00F4               	movwf	??___awdiv
  7080  0AF7  0874               	movf	??___awdiv,w
  7081  0AF8  06F6               	xorwf	___awdiv@sign,f
  7082  0AF9                     l2656:	
  7083  0AF9  01F7               	clrf	___awdiv@quotient
  7084  0AFA  01F8               	clrf	___awdiv@quotient+1
  7085  0AFB  0870               	movf	___awdiv@divisor,w
  7086  0AFC  0471               	iorwf	___awdiv@divisor+1,w
  7087  0AFD  1903               	btfsc	3,2
  7088  0AFE  2B30               	goto	l2678
  7089  0AFF  01F5               	clrf	___awdiv@counter
  7090  0B00  0AF5               	incf	___awdiv@counter,f
  7091  0B01                     l2666:	
  7092  0B01  1BF1               	btfsc	___awdiv@divisor+1,7
  7093  0B02  2B0F               	goto	l2668
  7094  0B03  3001               	movlw	1
  7095  0B04                     u2025:	
  7096  0B04  1003               	clrc
  7097  0B05  0DF0               	rlf	___awdiv@divisor,f
  7098  0B06  0DF1               	rlf	___awdiv@divisor+1,f
  7099  0B07  3EFF               	addlw	-1
  7100  0B08  1D03               	skipz
  7101  0B09  2B04               	goto	u2025
  7102  0B0A  3001               	movlw	1
  7103  0B0B  00F4               	movwf	??___awdiv
  7104  0B0C  0874               	movf	??___awdiv,w
  7105  0B0D  07F5               	addwf	___awdiv@counter,f
  7106  0B0E  2B01               	goto	l2666
  7107  0B0F                     l2668:	
  7108  0B0F  3001               	movlw	1
  7109  0B10                     u2045:	
  7110  0B10  1003               	clrc
  7111  0B11  0DF7               	rlf	___awdiv@quotient,f
  7112  0B12  0DF8               	rlf	___awdiv@quotient+1,f
  7113  0B13  3EFF               	addlw	-1
  7114  0B14  1D03               	skipz
  7115  0B15  2B10               	goto	u2045
  7116  0B16  0871               	movf	___awdiv@divisor+1,w
  7117  0B17  0273               	subwf	___awdiv@dividend+1,w
  7118  0B18  1D03               	skipz
  7119  0B19  2B1C               	goto	u2055
  7120  0B1A  0870               	movf	___awdiv@divisor,w
  7121  0B1B  0272               	subwf	___awdiv@dividend,w
  7122  0B1C                     u2055:	
  7123  0B1C  1C03               	skipc
  7124  0B1D  2B25               	goto	l2674
  7125  0B1E  0870               	movf	___awdiv@divisor,w
  7126  0B1F  02F2               	subwf	___awdiv@dividend,f
  7127  0B20  0871               	movf	___awdiv@divisor+1,w
  7128  0B21  1C03               	skipc
  7129  0B22  03F3               	decf	___awdiv@dividend+1,f
  7130  0B23  02F3               	subwf	___awdiv@dividend+1,f
  7131  0B24  1477               	bsf	___awdiv@quotient,0
  7132  0B25                     l2674:	
  7133  0B25  3001               	movlw	1
  7134  0B26                     u2065:	
  7135  0B26  1003               	clrc
  7136  0B27  0CF1               	rrf	___awdiv@divisor+1,f
  7137  0B28  0CF0               	rrf	___awdiv@divisor,f
  7138  0B29  3EFF               	addlw	-1
  7139  0B2A  1D03               	skipz
  7140  0B2B  2B26               	goto	u2065
  7141  0B2C  3001               	movlw	1
  7142  0B2D  02F5               	subwf	___awdiv@counter,f
  7143  0B2E  1D03               	btfss	3,2
  7144  0B2F  2B0F               	goto	l2668
  7145  0B30                     l2678:	
  7146  0B30  0876               	movf	___awdiv@sign,w
  7147  0B31  1903               	btfsc	3,2
  7148  0B32  2B38               	goto	l2682
  7149  0B33  09F7               	comf	___awdiv@quotient,f
  7150  0B34  09F8               	comf	___awdiv@quotient+1,f
  7151  0B35  0AF7               	incf	___awdiv@quotient,f
  7152  0B36  1903               	skipnz
  7153  0B37  0AF8               	incf	___awdiv@quotient+1,f
  7154  0B38                     l2682:	
  7155  0B38  0878               	movf	___awdiv@quotient+1,w
  7156  0B39  00F1               	movwf	?___awdiv+1
  7157  0B3A  0877               	movf	___awdiv@quotient,w
  7158  0B3B  00F0               	movwf	?___awdiv
  7159  0B3C  0008               	return
  7160  0B3D                     __end_of___awdiv:	
  7161                           
  7162                           	psect	text25
  7163  0CBE                     __ptext25:	
  7164 ;; *************** function _OPINIT *****************
  7165 ;; Defined at:
  7166 ;;		line 241 in file "FMCW.c"
  7167 ;; Parameters:    Size  Location     Type
  7168 ;;  fmcwtxrx        2    4[COMMON] int 
  7169 ;; Auto vars:     Size  Location     Type
  7170 ;;		None
  7171 ;; Return value:  Size  Location     Type
  7172 ;;                  1    wreg      void 
  7173 ;; Registers used:
  7174 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7175 ;; Tracked objects:
  7176 ;;		On entry : 0/0
  7177 ;;		On exit  : 0/0
  7178 ;;		Unchanged: 0/0
  7179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7180 ;;      Params:         2       0       0       0       0
  7181 ;;      Locals:         0       0       0       0       0
  7182 ;;      Temps:          0       0       0       0       0
  7183 ;;      Totals:         2       0       0       0       0
  7184 ;;Total ram usage:        2 bytes
  7185 ;; Hardware stack levels used:    1
  7186 ;; Hardware stack levels required when called:    2
  7187 ;; This function calls:
  7188 ;;		_H_OUT
  7189 ;;		_L_OUT
  7190 ;;		_STBOUT
  7191 ;; This function is called by:
  7192 ;;		_FMTX
  7193 ;;		_CWTX
  7194 ;;		_FMRX
  7195 ;; This function uses a non-reentrant model
  7196 ;;
  7197                           
  7198                           
  7199                           ;psect for function _OPINIT
  7200  0CBE                     _OPINIT:	
  7201                           
  7202                           ;FMCW.c: 243: L_OUT(fmcwtxrx);
  7203                           
  7204                           ;incstack = 0
  7205                           ; Regs used in _OPINIT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7206  0CBE  0875               	movf	OPINIT@fmcwtxrx+1,w
  7207  0CBF  00F3               	movwf	L_OUT@fmcwtxrx+1
  7208  0CC0  0874               	movf	OPINIT@fmcwtxrx,w
  7209  0CC1  00F2               	movwf	L_OUT@fmcwtxrx
  7210  0CC2  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7211                           
  7212                           ;FMCW.c: 244: L_OUT(fmcwtxrx);
  7213  0CC7  0875               	movf	OPINIT@fmcwtxrx+1,w
  7214  0CC8  00F3               	movwf	L_OUT@fmcwtxrx+1
  7215  0CC9  0874               	movf	OPINIT@fmcwtxrx,w
  7216  0CCA  00F2               	movwf	L_OUT@fmcwtxrx
  7217  0CCB  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7218                           
  7219                           ;FMCW.c: 245: L_OUT(fmcwtxrx);
  7220  0CD0  0875               	movf	OPINIT@fmcwtxrx+1,w
  7221  0CD1  00F3               	movwf	L_OUT@fmcwtxrx+1
  7222  0CD2  0874               	movf	OPINIT@fmcwtxrx,w
  7223  0CD3  00F2               	movwf	L_OUT@fmcwtxrx
  7224  0CD4  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7225                           
  7226                           ;FMCW.c: 246: H_OUT(fmcwtxrx);
  7227  0CD9  0875               	movf	OPINIT@fmcwtxrx+1,w
  7228  0CDA  00F3               	movwf	H_OUT@fmcwtxrx+1
  7229  0CDB  0874               	movf	OPINIT@fmcwtxrx,w
  7230  0CDC  00F2               	movwf	H_OUT@fmcwtxrx
  7231  0CDD  120A  158A  220C  120A  158A  	fcall	_H_OUT
  7232                           
  7233                           ;FMCW.c: 247: H_OUT(fmcwtxrx);
  7234  0CE2  0875               	movf	OPINIT@fmcwtxrx+1,w
  7235  0CE3  00F3               	movwf	H_OUT@fmcwtxrx+1
  7236  0CE4  0874               	movf	OPINIT@fmcwtxrx,w
  7237  0CE5  00F2               	movwf	H_OUT@fmcwtxrx
  7238  0CE6  120A  158A  220C  120A  158A  	fcall	_H_OUT
  7239                           
  7240                           ;FMCW.c: 248: L_OUT(fmcwtxrx);
  7241  0CEB  0875               	movf	OPINIT@fmcwtxrx+1,w
  7242  0CEC  00F3               	movwf	L_OUT@fmcwtxrx+1
  7243  0CED  0874               	movf	OPINIT@fmcwtxrx,w
  7244  0CEE  00F2               	movwf	L_OUT@fmcwtxrx
  7245  0CEF  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7246                           
  7247                           ;FMCW.c: 249: L_OUT(fmcwtxrx);
  7248  0CF4  0875               	movf	OPINIT@fmcwtxrx+1,w
  7249  0CF5  00F3               	movwf	L_OUT@fmcwtxrx+1
  7250  0CF6  0874               	movf	OPINIT@fmcwtxrx,w
  7251  0CF7  00F2               	movwf	L_OUT@fmcwtxrx
  7252  0CF8  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7253                           
  7254                           ;FMCW.c: 250: L_OUT(fmcwtxrx);
  7255  0CFD  0875               	movf	OPINIT@fmcwtxrx+1,w
  7256  0CFE  00F3               	movwf	L_OUT@fmcwtxrx+1
  7257  0CFF  0874               	movf	OPINIT@fmcwtxrx,w
  7258  0D00  00F2               	movwf	L_OUT@fmcwtxrx
  7259  0D01  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7260                           
  7261                           ;FMCW.c: 251: L_OUT(fmcwtxrx);
  7262  0D06  0875               	movf	OPINIT@fmcwtxrx+1,w
  7263  0D07  00F3               	movwf	L_OUT@fmcwtxrx+1
  7264  0D08  0874               	movf	OPINIT@fmcwtxrx,w
  7265  0D09  00F2               	movwf	L_OUT@fmcwtxrx
  7266  0D0A  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7267                           
  7268                           ;FMCW.c: 252: L_OUT(fmcwtxrx);
  7269  0D0F  0875               	movf	OPINIT@fmcwtxrx+1,w
  7270  0D10  00F3               	movwf	L_OUT@fmcwtxrx+1
  7271  0D11  0874               	movf	OPINIT@fmcwtxrx,w
  7272  0D12  00F2               	movwf	L_OUT@fmcwtxrx
  7273  0D13  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7274                           
  7275                           ;FMCW.c: 253: H_OUT(fmcwtxrx);
  7276  0D18  0875               	movf	OPINIT@fmcwtxrx+1,w
  7277  0D19  00F3               	movwf	H_OUT@fmcwtxrx+1
  7278  0D1A  0874               	movf	OPINIT@fmcwtxrx,w
  7279  0D1B  00F2               	movwf	H_OUT@fmcwtxrx
  7280  0D1C  120A  158A  220C  120A  158A  	fcall	_H_OUT
  7281                           
  7282                           ;FMCW.c: 256: L_OUT(fmcwtxrx);
  7283  0D21  0875               	movf	OPINIT@fmcwtxrx+1,w
  7284  0D22  00F3               	movwf	L_OUT@fmcwtxrx+1
  7285  0D23  0874               	movf	OPINIT@fmcwtxrx,w
  7286  0D24  00F2               	movwf	L_OUT@fmcwtxrx
  7287  0D25  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7288                           
  7289                           ;FMCW.c: 257: L_OUT(fmcwtxrx);
  7290  0D2A  0875               	movf	OPINIT@fmcwtxrx+1,w
  7291  0D2B  00F3               	movwf	L_OUT@fmcwtxrx+1
  7292  0D2C  0874               	movf	OPINIT@fmcwtxrx,w
  7293  0D2D  00F2               	movwf	L_OUT@fmcwtxrx
  7294  0D2E  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7295                           
  7296                           ;FMCW.c: 260: STBOUT(fmcwtxrx);
  7297  0D33  0875               	movf	OPINIT@fmcwtxrx+1,w
  7298  0D34  00F3               	movwf	STBOUT@fmcwtxrx+1
  7299  0D35  0874               	movf	OPINIT@fmcwtxrx,w
  7300  0D36  00F2               	movwf	STBOUT@fmcwtxrx
  7301  0D37  120A  158A  2170   	fcall	_STBOUT
  7302  0D3A  0008               	return
  7303  0D3B                     __end_of_OPINIT:	
  7304                           
  7305                           	psect	text26
  7306  0970                     __ptext26:	
  7307 ;; *************** function _STBOUT *****************
  7308 ;; Defined at:
  7309 ;;		line 107 in file "FMCW.c"
  7310 ;; Parameters:    Size  Location     Type
  7311 ;;  fmcwtxrx        2    2[COMMON] int 
  7312 ;; Auto vars:     Size  Location     Type
  7313 ;;		None
  7314 ;; Return value:  Size  Location     Type
  7315 ;;                  1    wreg      void 
  7316 ;; Registers used:
  7317 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7318 ;; Tracked objects:
  7319 ;;		On entry : 0/0
  7320 ;;		On exit  : 0/0
  7321 ;;		Unchanged: 0/0
  7322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7323 ;;      Params:         2       0       0       0       0
  7324 ;;      Locals:         0       0       0       0       0
  7325 ;;      Temps:          0       0       0       0       0
  7326 ;;      Totals:         2       0       0       0       0
  7327 ;;Total ram usage:        2 bytes
  7328 ;; Hardware stack levels used:    1
  7329 ;; Hardware stack levels required when called:    1
  7330 ;; This function calls:
  7331 ;;		__NOP
  7332 ;; This function is called by:
  7333 ;;		_OUTFQ
  7334 ;;		_RFDOUT
  7335 ;;		_OPINIT
  7336 ;; This function uses a non-reentrant model
  7337 ;;
  7338                           
  7339                           
  7340                           ;psect for function _STBOUT
  7341  0970                     _STBOUT:	
  7342                           
  7343                           ;FMCW.c: 108: if(fmcwtxrx == 1)
  7344                           
  7345                           ;incstack = 0
  7346                           ; Regs used in _STBOUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7347  0970  0372               	decf	STBOUT@fmcwtxrx,w
  7348  0971  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7349  0972  1D03               	btfss	3,2
  7350  0973  297F               	goto	l2626
  7351                           
  7352                           ;FMCW.c: 109: {
  7353                           ;FMCW.c: 110: PORTAbits.RA5 = 1;
  7354  0974  1283               	bcf	3,5	;RP0=0, select bank0
  7355  0975  1303               	bcf	3,6	;RP1=0, select bank0
  7356  0976  1685               	bsf	5,5	;volatile
  7357                           
  7358                           ;FMCW.c: 111: _NOP();
  7359  0977  120A  158A  2046  120A  158A  	fcall	__NOP
  7360                           
  7361                           ;FMCW.c: 112: PORTAbits.RA5 = 0;
  7362  097C  1283               	bcf	3,5	;RP0=0, select bank0
  7363  097D  1303               	bcf	3,6	;RP1=0, select bank0
  7364  097E  1285               	bcf	5,5	;volatile
  7365  097F                     l2626:	
  7366                           
  7367                           ;FMCW.c: 113: }
  7368                           ;FMCW.c: 114: if(fmcwtxrx == 2)
  7369  097F  3002               	movlw	2
  7370  0980  0672               	xorwf	STBOUT@fmcwtxrx,w
  7371  0981  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7372  0982  1D03               	btfss	3,2
  7373  0983  298F               	goto	l2634
  7374                           
  7375                           ;FMCW.c: 115: {
  7376                           ;FMCW.c: 116: PORTDbits.RD0 = 1;
  7377  0984  1283               	bcf	3,5	;RP0=0, select bank0
  7378  0985  1303               	bcf	3,6	;RP1=0, select bank0
  7379  0986  1408               	bsf	8,0	;volatile
  7380                           
  7381                           ;FMCW.c: 117: _NOP();
  7382  0987  120A  158A  2046  120A  158A  	fcall	__NOP
  7383                           
  7384                           ;FMCW.c: 118: PORTDbits.RD0 = 0;
  7385  098C  1283               	bcf	3,5	;RP0=0, select bank0
  7386  098D  1303               	bcf	3,6	;RP1=0, select bank0
  7387  098E  1008               	bcf	8,0	;volatile
  7388  098F                     l2634:	
  7389                           
  7390                           ;FMCW.c: 119: }
  7391                           ;FMCW.c: 120: if(fmcwtxrx == 3)
  7392  098F  3003               	movlw	3
  7393  0990  0672               	xorwf	STBOUT@fmcwtxrx,w
  7394  0991  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7395  0992  1D03               	btfss	3,2
  7396  0993  0008               	return
  7397                           
  7398                           ;FMCW.c: 121: {
  7399                           ;FMCW.c: 122: PORTAbits.RA4 = 1;
  7400  0994  1283               	bcf	3,5	;RP0=0, select bank0
  7401  0995  1303               	bcf	3,6	;RP1=0, select bank0
  7402  0996  1605               	bsf	5,4	;volatile
  7403                           
  7404                           ;FMCW.c: 123: _NOP();
  7405  0997  120A  158A  2046   	fcall	__NOP
  7406                           
  7407                           ;FMCW.c: 124: PORTAbits.RA4 = 0;
  7408  099A  1283               	bcf	3,5	;RP0=0, select bank0
  7409  099B  1303               	bcf	3,6	;RP1=0, select bank0
  7410  099C  1205               	bcf	5,4	;volatile
  7411  099D  0008               	return
  7412  099E                     __end_of_STBOUT:	
  7413                           
  7414                           	psect	text27
  7415  0A52                     __ptext27:	
  7416 ;; *************** function _L_OUT *****************
  7417 ;; Defined at:
  7418 ;;		line 40 in file "FMCW.c"
  7419 ;; Parameters:    Size  Location     Type
  7420 ;;  fmcwtxrx        2    2[COMMON] int 
  7421 ;; Auto vars:     Size  Location     Type
  7422 ;;		None
  7423 ;; Return value:  Size  Location     Type
  7424 ;;                  1    wreg      void 
  7425 ;; Registers used:
  7426 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7427 ;; Tracked objects:
  7428 ;;		On entry : 0/0
  7429 ;;		On exit  : 0/0
  7430 ;;		Unchanged: 0/0
  7431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7432 ;;      Params:         2       0       0       0       0
  7433 ;;      Locals:         0       0       0       0       0
  7434 ;;      Temps:          0       0       0       0       0
  7435 ;;      Totals:         2       0       0       0       0
  7436 ;;Total ram usage:        2 bytes
  7437 ;; Hardware stack levels used:    1
  7438 ;; Hardware stack levels required when called:    1
  7439 ;; This function calls:
  7440 ;;		__NOP
  7441 ;; This function is called by:
  7442 ;;		_OUTFQ
  7443 ;;		_RFDOUT
  7444 ;;		_OPINIT
  7445 ;; This function uses a non-reentrant model
  7446 ;;
  7447                           
  7448                           
  7449                           ;psect for function _L_OUT
  7450  0A52                     _L_OUT:	
  7451                           
  7452                           ;FMCW.c: 41: if(fmcwtxrx == 1)
  7453                           
  7454                           ;incstack = 0
  7455                           ; Regs used in _L_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7456  0A52  0372               	decf	L_OUT@fmcwtxrx,w
  7457  0A53  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7458  0A54  1D03               	btfss	3,2
  7459  0A55  2A69               	goto	l2568
  7460                           
  7461                           ;FMCW.c: 42: {
  7462                           ;FMCW.c: 43: PORTEbits.RE0 = 0;
  7463  0A56  1283               	bcf	3,5	;RP0=0, select bank0
  7464  0A57  1303               	bcf	3,6	;RP1=0, select bank0
  7465  0A58  1009               	bcf	9,0	;volatile
  7466                           
  7467                           ;FMCW.c: 44: _NOP();
  7468  0A59  120A  158A  2046  120A  158A  	fcall	__NOP
  7469                           
  7470                           ;FMCW.c: 45: PORTEbits.RE1 = 1;
  7471  0A5E  1283               	bcf	3,5	;RP0=0, select bank0
  7472  0A5F  1303               	bcf	3,6	;RP1=0, select bank0
  7473  0A60  1489               	bsf	9,1	;volatile
  7474                           
  7475                           ;FMCW.c: 46: _NOP();
  7476  0A61  120A  158A  2046  120A  158A  	fcall	__NOP
  7477                           
  7478                           ;FMCW.c: 47: PORTEbits.RE1 = 0;
  7479  0A66  1283               	bcf	3,5	;RP0=0, select bank0
  7480  0A67  1303               	bcf	3,6	;RP1=0, select bank0
  7481  0A68  1089               	bcf	9,1	;volatile
  7482  0A69                     l2568:	
  7483                           
  7484                           ;FMCW.c: 48: }
  7485                           ;FMCW.c: 49: if(fmcwtxrx == 2)
  7486  0A69  3002               	movlw	2
  7487  0A6A  0672               	xorwf	L_OUT@fmcwtxrx,w
  7488  0A6B  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7489  0A6C  1D03               	btfss	3,2
  7490  0A6D  2A81               	goto	l2578
  7491                           
  7492                           ;FMCW.c: 50: {
  7493                           ;FMCW.c: 51: PORTDbits.RD1 = 0;
  7494  0A6E  1283               	bcf	3,5	;RP0=0, select bank0
  7495  0A6F  1303               	bcf	3,6	;RP1=0, select bank0
  7496  0A70  1088               	bcf	8,1	;volatile
  7497                           
  7498                           ;FMCW.c: 52: _NOP();
  7499  0A71  120A  158A  2046  120A  158A  	fcall	__NOP
  7500                           
  7501                           ;FMCW.c: 53: PORTDbits.RD2 = 1;
  7502  0A76  1283               	bcf	3,5	;RP0=0, select bank0
  7503  0A77  1303               	bcf	3,6	;RP1=0, select bank0
  7504  0A78  1508               	bsf	8,2	;volatile
  7505                           
  7506                           ;FMCW.c: 54: _NOP();
  7507  0A79  120A  158A  2046  120A  158A  	fcall	__NOP
  7508                           
  7509                           ;FMCW.c: 55: PORTDbits.RD2 = 0;
  7510  0A7E  1283               	bcf	3,5	;RP0=0, select bank0
  7511  0A7F  1303               	bcf	3,6	;RP1=0, select bank0
  7512  0A80  1108               	bcf	8,2	;volatile
  7513  0A81                     l2578:	
  7514                           
  7515                           ;FMCW.c: 56: }
  7516                           ;FMCW.c: 57: if(fmcwtxrx == 3)
  7517  0A81  3003               	movlw	3
  7518  0A82  0672               	xorwf	L_OUT@fmcwtxrx,w
  7519  0A83  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7520  0A84  1D03               	btfss	3,2
  7521  0A85  0008               	return
  7522                           
  7523                           ;FMCW.c: 58: {
  7524                           ;FMCW.c: 59: PORTAbits.RA3 = 0;
  7525  0A86  1283               	bcf	3,5	;RP0=0, select bank0
  7526  0A87  1303               	bcf	3,6	;RP1=0, select bank0
  7527  0A88  1185               	bcf	5,3	;volatile
  7528                           
  7529                           ;FMCW.c: 60: _NOP();
  7530  0A89  120A  158A  2046  120A  158A  	fcall	__NOP
  7531                           
  7532                           ;FMCW.c: 61: PORTAbits.RA2 = 1;
  7533  0A8E  1283               	bcf	3,5	;RP0=0, select bank0
  7534  0A8F  1303               	bcf	3,6	;RP1=0, select bank0
  7535  0A90  1505               	bsf	5,2	;volatile
  7536                           
  7537                           ;FMCW.c: 62: _NOP();
  7538  0A91  120A  158A  2046   	fcall	__NOP
  7539                           
  7540                           ;FMCW.c: 63: PORTAbits.RA2 = 0;
  7541  0A94  1283               	bcf	3,5	;RP0=0, select bank0
  7542  0A95  1303               	bcf	3,6	;RP1=0, select bank0
  7543  0A96  1105               	bcf	5,2	;volatile
  7544  0A97  0008               	return
  7545  0A98                     __end_of_L_OUT:	
  7546                           
  7547                           	psect	text28
  7548  0A0C                     __ptext28:	
  7549 ;; *************** function _H_OUT *****************
  7550 ;; Defined at:
  7551 ;;		line 74 in file "FMCW.c"
  7552 ;; Parameters:    Size  Location     Type
  7553 ;;  fmcwtxrx        2    2[COMMON] int 
  7554 ;; Auto vars:     Size  Location     Type
  7555 ;;		None
  7556 ;; Return value:  Size  Location     Type
  7557 ;;                  1    wreg      void 
  7558 ;; Registers used:
  7559 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7560 ;; Tracked objects:
  7561 ;;		On entry : 0/0
  7562 ;;		On exit  : 0/0
  7563 ;;		Unchanged: 0/0
  7564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7565 ;;      Params:         2       0       0       0       0
  7566 ;;      Locals:         0       0       0       0       0
  7567 ;;      Temps:          0       0       0       0       0
  7568 ;;      Totals:         2       0       0       0       0
  7569 ;;Total ram usage:        2 bytes
  7570 ;; Hardware stack levels used:    1
  7571 ;; Hardware stack levels required when called:    1
  7572 ;; This function calls:
  7573 ;;		__NOP
  7574 ;; This function is called by:
  7575 ;;		_OUTFQ
  7576 ;;		_RFDOUT
  7577 ;;		_OPINIT
  7578 ;; This function uses a non-reentrant model
  7579 ;;
  7580                           
  7581                           
  7582                           ;psect for function _H_OUT
  7583  0A0C                     _H_OUT:	
  7584                           
  7585                           ;FMCW.c: 75: if(fmcwtxrx == 1)
  7586                           
  7587                           ;incstack = 0
  7588                           ; Regs used in _H_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7589  0A0C  0372               	decf	H_OUT@fmcwtxrx,w
  7590  0A0D  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7591  0A0E  1D03               	btfss	3,2
  7592  0A0F  2A23               	goto	l2598
  7593                           
  7594                           ;FMCW.c: 76: {
  7595                           ;FMCW.c: 77: PORTEbits.RE0 = 1;
  7596  0A10  1283               	bcf	3,5	;RP0=0, select bank0
  7597  0A11  1303               	bcf	3,6	;RP1=0, select bank0
  7598  0A12  1409               	bsf	9,0	;volatile
  7599                           
  7600                           ;FMCW.c: 78: _NOP();
  7601  0A13  120A  158A  2046  120A  158A  	fcall	__NOP
  7602                           
  7603                           ;FMCW.c: 79: PORTEbits.RE1 = 1;
  7604  0A18  1283               	bcf	3,5	;RP0=0, select bank0
  7605  0A19  1303               	bcf	3,6	;RP1=0, select bank0
  7606  0A1A  1489               	bsf	9,1	;volatile
  7607                           
  7608                           ;FMCW.c: 80: _NOP();
  7609  0A1B  120A  158A  2046  120A  158A  	fcall	__NOP
  7610                           
  7611                           ;FMCW.c: 81: PORTEbits.RE1 = 0;
  7612  0A20  1283               	bcf	3,5	;RP0=0, select bank0
  7613  0A21  1303               	bcf	3,6	;RP1=0, select bank0
  7614  0A22  1089               	bcf	9,1	;volatile
  7615  0A23                     l2598:	
  7616                           
  7617                           ;FMCW.c: 82: }
  7618                           ;FMCW.c: 83: if(fmcwtxrx == 2)
  7619  0A23  3002               	movlw	2
  7620  0A24  0672               	xorwf	H_OUT@fmcwtxrx,w
  7621  0A25  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7622  0A26  1D03               	btfss	3,2
  7623  0A27  2A3B               	goto	l2608
  7624                           
  7625                           ;FMCW.c: 84: {
  7626                           ;FMCW.c: 85: PORTDbits.RD1 = 1;
  7627  0A28  1283               	bcf	3,5	;RP0=0, select bank0
  7628  0A29  1303               	bcf	3,6	;RP1=0, select bank0
  7629  0A2A  1488               	bsf	8,1	;volatile
  7630                           
  7631                           ;FMCW.c: 86: _NOP();
  7632  0A2B  120A  158A  2046  120A  158A  	fcall	__NOP
  7633                           
  7634                           ;FMCW.c: 87: PORTDbits.RD2 = 1;
  7635  0A30  1283               	bcf	3,5	;RP0=0, select bank0
  7636  0A31  1303               	bcf	3,6	;RP1=0, select bank0
  7637  0A32  1508               	bsf	8,2	;volatile
  7638                           
  7639                           ;FMCW.c: 88: _NOP();
  7640  0A33  120A  158A  2046  120A  158A  	fcall	__NOP
  7641                           
  7642                           ;FMCW.c: 89: PORTDbits.RD2 = 0;
  7643  0A38  1283               	bcf	3,5	;RP0=0, select bank0
  7644  0A39  1303               	bcf	3,6	;RP1=0, select bank0
  7645  0A3A  1108               	bcf	8,2	;volatile
  7646  0A3B                     l2608:	
  7647                           
  7648                           ;FMCW.c: 90: }
  7649                           ;FMCW.c: 91: if(fmcwtxrx == 3)
  7650  0A3B  3003               	movlw	3
  7651  0A3C  0672               	xorwf	H_OUT@fmcwtxrx,w
  7652  0A3D  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7653  0A3E  1D03               	btfss	3,2
  7654  0A3F  0008               	return
  7655                           
  7656                           ;FMCW.c: 92: {
  7657                           ;FMCW.c: 93: PORTAbits.RA3 = 1;
  7658  0A40  1283               	bcf	3,5	;RP0=0, select bank0
  7659  0A41  1303               	bcf	3,6	;RP1=0, select bank0
  7660  0A42  1585               	bsf	5,3	;volatile
  7661                           
  7662                           ;FMCW.c: 94: _NOP();
  7663  0A43  120A  158A  2046  120A  158A  	fcall	__NOP
  7664                           
  7665                           ;FMCW.c: 95: PORTAbits.RA2 = 1;
  7666  0A48  1283               	bcf	3,5	;RP0=0, select bank0
  7667  0A49  1303               	bcf	3,6	;RP1=0, select bank0
  7668  0A4A  1505               	bsf	5,2	;volatile
  7669                           
  7670                           ;FMCW.c: 96: _NOP();
  7671  0A4B  120A  158A  2046   	fcall	__NOP
  7672                           
  7673                           ;FMCW.c: 97: PORTAbits.RA2 = 0;
  7674  0A4E  1283               	bcf	3,5	;RP0=0, select bank0
  7675  0A4F  1303               	bcf	3,6	;RP1=0, select bank0
  7676  0A50  1105               	bcf	5,2	;volatile
  7677  0A51  0008               	return
  7678  0A52                     __end_of_H_OUT:	
  7679                           
  7680                           	psect	text29
  7681  0846                     __ptext29:	
  7682 ;; *************** function __NOP *****************
  7683 ;; Defined at:
  7684 ;;		line 349 in file "FMCW.c"
  7685 ;; Parameters:    Size  Location     Type
  7686 ;;		None
  7687 ;; Auto vars:     Size  Location     Type
  7688 ;;  i               2    0[COMMON] int 
  7689 ;; Return value:  Size  Location     Type
  7690 ;;                  1    wreg      void 
  7691 ;; Registers used:
  7692 ;;		wreg, status,2, btemp+1
  7693 ;; Tracked objects:
  7694 ;;		On entry : 0/0
  7695 ;;		On exit  : 0/0
  7696 ;;		Unchanged: 0/0
  7697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7698 ;;      Params:         0       0       0       0       0
  7699 ;;      Locals:         2       0       0       0       0
  7700 ;;      Temps:          0       0       0       0       0
  7701 ;;      Totals:         2       0       0       0       0
  7702 ;;Total ram usage:        2 bytes
  7703 ;; Hardware stack levels used:    1
  7704 ;; This function calls:
  7705 ;;		Nothing
  7706 ;; This function is called by:
  7707 ;;		_L_OUT
  7708 ;;		_H_OUT
  7709 ;;		_STBOUT
  7710 ;; This function uses a non-reentrant model
  7711 ;;
  7712                           
  7713                           
  7714                           ;psect for function __NOP
  7715  0846                     __NOP:	
  7716                           
  7717                           ;FMCW.c: 350: for(int i=0; i<5; i++){
  7718                           
  7719                           ;incstack = 0
  7720                           ; Regs used in __NOP: [wreg+status,2+btemp+1]
  7721  0846  01F0               	clrf	__NOP@i
  7722  0847  01F1               	clrf	__NOP@i+1
  7723  0848                     L9:	
  7724  0848  0871               	movf	__NOP@i+1,w
  7725  0849  3A80               	xorlw	128
  7726  084A  00FF               	movwf	127
  7727  084B  3080               	movlw	128
  7728  084C  027F               	subwf	127,w
  7729  084D  1D03               	skipz
  7730  084E  2851               	goto	u1835
  7731  084F  3005               	movlw	5
  7732  0850  0270               	subwf	__NOP@i,w
  7733  0851                     u1835:	
  7734  0851  1803               	btfsc	3,0
  7735  0852  0008               	return
  7736                           
  7737                           ;FMCW.c: 351: __nop();
  7738  0853  0000               	nop
  7739  0854  3001               	movlw	1
  7740  0855  07F0               	addwf	__NOP@i,f
  7741  0856  1803               	skipnc
  7742  0857  0AF1               	incf	__NOP@i+1,f
  7743  0858  3000               	movlw	0
  7744  0859  07F1               	addwf	__NOP@i+1,f
  7745  085A  2848               	goto	L9
  7746  085B                     __end_of__NOP:	
  7747  007E                     btemp	set	126	;btemp
  7748  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    2
    Data        91
    BSS         121
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      80
    BANK1            80     33      72
    BANK3            96      0      90
    BANK2            96      0      73

Pointer List with Targets:

    FMRX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), FMRX_Nprg(BANK3[10]), 

    CWTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@CWTX_Nprg(BANK1[10]), CWTX_Nprg(BANK1[10]), 

    FMTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    OUTFQ@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), main@CWTX_Nprg(BANK1[10]), main@FMTX_Nprg(BANK1[10]), 
		 -> FMRX_Nprg(BANK3[10]), CWTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    sp__EEPROM_Read	PTR unsigned char  size(1) Largest target is 32
		 -> EEPROMData(BANK2[32]), 

    EEPROM_Write@data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK2[16]), 

    main@dData	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK2[16]), 

    sp__ReceivePacket_data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK2[16]), 


Critical Paths under _main in COMMON

    _TXOBC_waddress->_putch
    _ReceivePacket_data->_fcscheck
    _ReceivePacket_data->_waitFlag
    _waitFlag->_getbit
    _getdata->_getbit
    _NM_waddress->_putch
    _Init_I2C_M->___lldiv
    _FMTX->_OUTFQ
    _FMTX->_RFDOUT
    _FMRX->_OUTFQ
    _FMRX->_RFDOUT
    _EEPROM_Write->_I2C_Master_Write
    _CWTX->_OUTFQ
    _CWTX->_RFDOUT
    _RFDOUT->___awdiv
    _OUTFQ->___awdiv
    _OPINIT->_H_OUT
    _OPINIT->_L_OUT
    _OPINIT->_STBOUT
    _STBOUT->__NOP
    _L_OUT->__NOP
    _H_OUT->__NOP

Critical Paths under _main in BANK0

    _main->_CWTX
    _main->_FMRX
    _main->_FMTX
    _ReceivePacket_data->_waitFlag
    _FMTX->_OUTFQ
    _FMRX->_OUTFQ
    _CWTX->_OUTFQ

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0   33224
                                             66 BANK0      4     4      0
                                              0 BANK1     33    33      0
                               _CWTX
                       _EEPROM_Write
                               _FMRX
                               _FMTX
                         _Init_I2C_M
                           _Init_MPU
                        _Init_SERIAL
                        _NM_waddress
                 _ReceivePacket_data
                          _Reset_EPS
                     _TXOBC_waddress
 ---------------------------------------------------------------------------------
 (1) _TXOBC_waddress                                       5     3      2     194
                                              1 COMMON     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _Reset_EPS                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ReceivePacket_data                                   6     6      0    2691
                                             10 COMMON     2     2      0
                                             29 BANK0      4     4      0
                           _fcscheck
                            _getdata
                           _waitFlag
 ---------------------------------------------------------------------------------
 (2) _waitFlag                                            33    33      0    2205
                                              6 COMMON     4     4      0
                                              0 BANK0     29    29      0
                             _getbit
 ---------------------------------------------------------------------------------
 (2) _getdata                                             10    10      0     212
                                              6 COMMON     2     2      0
                                              0 BANK0      7     7      0
                             _getbit
 ---------------------------------------------------------------------------------
 (3) _getbit                                               6     4      2      46
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _fcscheck                                            10     8      2     161
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (1) _NM_waddress                                          3     1      2     194
                                              1 COMMON     3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_SERIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_MPU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_I2C_M                                           8     4      4     343
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _FMTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _FMRX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         8     5      3     739
                                              2 COMMON     8     5      3
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     446
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CWTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (2) _RFDOUT                                              37    33      4    3231
                                              9 COMMON     4     0      4
                                              0 BANK0     33    33      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _OUTFQ                                               64    60      4    3853
                                              9 COMMON     4     0      4
                                              0 BANK0     60    60      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _OPINIT                                               2     0      2    2075
                                              4 COMMON     2     0      2
                              _H_OUT
                              _L_OUT
                             _STBOUT
 ---------------------------------------------------------------------------------
 (3) _STBOUT                                               2     0      2     271
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _L_OUT                                                2     0      2     801
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _H_OUT                                                2     0      2     536
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (4) __NOP                                                 2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CWTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _EEPROM_Write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _FMRX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _FMTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _Init_I2C_M
     ___lldiv
   _Init_MPU
   _Init_SERIAL
   _NM_waddress
     _putch
   _ReceivePacket_data
     _fcscheck
     _getdata
       _getbit
     _waitFlag
       _getbit
   _Reset_EPS
   _TXOBC_waddress
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      5A       9       93.8%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      49      11       76.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     21      48       7       90.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     46      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     149      12        0.0%
ABS                  0      0     149       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Feb 24 15:47:27 2018

                             pc 0002                     __CFG_CP$OFF 0000                              l69 17F1  
                  ___awdiv@sign 0076                              fsr 0004                             l214 0566  
                           l442 0FF1                             l443 0FDC                             l279 0091  
                           l498 081A                             _RA1 0029                             _RB2 0032  
                           _RC2 003A                             _RB4 0034                             _RB5 0035  
                           _RC5 003D                             _PEN 048A                    __CFG_CPD$OFF 0000  
                           _SEN 0488                             _RX9 00C6                             _TX9 04C6  
                           fsr0 0004                             indf 0000                    __CFG_FOSC$HS 0000  
                  __CFG_LVP$OFF 0000                            l3010 0706                            l3020 0721  
                          l3104 0C01                            l3024 072E                            l3130 008A  
                          l3050 0784                            l3212 0293                            l3220 02B7  
                          l3124 0076                            l3132 0038                            l3036 075C  
                          l3230 02E0                            l3206 0205                            l3118 0059  
                          l3046 0777                            l3070 032F                            l3208 020C  
                          l3216 02A4                            l3304 0BE2                            l3144 00A9  
                          l3400 0CB8                            l3234 02FA                            l3226 02C6  
                          l3090 0C32                            l3180 00E8                            l3252 0D66  
                          l3500 0B6D                            l3308 0BEF                            l3084 0C21  
                          l3068 07B0                            l3238 030D                            l3174 00D9  
                          l3246 0D4A                            l3502 0B87                            l2550 0ADF  
                          l3094 0C3D                            l3086 0C24                            l2608 0A3B  
                          l3168 00BD                            l3280 0DEF                            l3272 0DBB  
                          l2712 035E                            l2704 0336                            l2634 098F  
                          l2626 097F                            l2650 0AEE                            l3186 00F7  
                          l3266 0DAC                            l3258 0D75                            l2802 047F  
                          l2722 0379                            l2706 0355                            l3196 0160  
                          l3276 0DD5                            l3284 0E02                            l2548 0AD2  
                          l2740 03B8                            l3198 019D                            l3294 0BAA  
                          l2806 048C                            l2750 03D3                            l2726 0386  
                          l2568 0A69                            l2656 0AF9                            l3296 0BBA  
                          l2920 05D6                            l2832 04E2                            l3392 0CB2  
                          l2578 0A81                            l2682 0B38                            l2674 0B25  
                          l2666 0B01                            l2906 05AE                            l2818 04BA  
                          l2754 03E0                            l3386 0C8A                            l2668 0B0F  
                          l2932 0604                            l2916 05C9                            l2844 0510  
                          l2828 04D5                            l2780 0436                            l2598 0A23  
                          l2678 0B30                            l2942 061F                            l2854 052B  
                          l2766 040E                            l2792 0464                            l2776 0429  
                          l3816 0FC4                            l2946 062C                            l2882 056F  
                          l2858 0538                            l2972 0682                            l2892 058A  
                          l2876 0564                            l2958 065A                            l3766 0E97  
                          l2984 06B0                            l2968 0675                            l2896 0597  
                          l2994 06CB                            l3794 0F10                            l3788 0EFF  
                          l2998 06D8                            STR_1 080F                            STR_2 080F  
                          STR_3 080F                            STR_4 080F                            STR_5 080F  
                          STR_6 080F                            STR_7 0808                            STR_8 0808  
                          STR_9 0808                            _BRGH 04C2                            _CREN 00C4  
                          _FERR 00C2                            u2025 0B04                            u2045 0B10  
                          u3005 0BAE                            u2205 03F5                            u2055 0B1C  
                          u2065 0B26                            u3025 0BBC                            u3035 0BD1  
                          u3045 0BE3                            u2325 04F7                            u2245 044B  
                          u2165 039F                            u3155 09B0                            u2515 0697  
                          u2435 05EB                            u3075 0C88                            u3500 0F52  
                          u2365 054D                            u2285 04A1                            u3085 0CB0  
                          u3510 0F68                            _FMRX 0918                            u1835 0851  
                          u2635 0799                            u2555 06ED                            u2475 0641  
                          _FMTX 0944                            u2805 00F5                            u2735 0046  
                          u3607 0FBD                            u2905 030B                            u1865 0AC2  
                          u3617 0FE7                            u3490 0F3C                            u2915 0D48  
                          u3707 0B92                            u2595 0743                            u3627 0FF9  
                          u3547 0E24                            u2925 0D64                            u3637 09DA  
                          u3557 0E4E                            u2855 02A2                            u2775 00BB  
                          u2935 0D73                            u3647 09E8                            u3567 0EAE  
                          u2865 02B5                            u2785 00D7                            u2945 0DAA  
                          u3657 09F6                            u3577 0ECF                            u2875 02C4  
                          u2795 00E6                            u2955 0DB9                            u3667 0A04  
                          u3587 0F18                            _RCIE 0465                            _RCEN 048B  
                          _RCIF 0065                            _CWTX 08EC                            u3677 0011  
                          u3597 0F2B                            u3687 0022                            u2985 0E00  
                          u3697 0AC6                            _OERR 00C1                            _TMR1 000E  
                          _SPEN 00C7                            _RSEN 0489                            _SREN 00C5  
                          _TXIE 0464                            _TXEN 04C5                            _TXIF 0064  
                          _SYNC 04C4                            __NOP 0846  TXOBC_waddress@TXOBC_wad_header 0075  
                  __CFG_WRT$OFF 0000                            _main 0E1C                     _NM_waddress 0834  
                 ??_Init_SERIAL 0070                            btemp 007E                   __CFG_BOREN$ON 0000  
                  getbit@oldbit 00E6                     Init_I2C_M@c 0020                            start 0000  
  ReceivePacket_data@fcschecker 003D                   __CFG_IESO$OFF 0000                   __CFG_MCLRE$ON 0000  
          __end_of_EEPROM_Write 0B9A                           ?_FMRX 005C                           ?_FMTX 005C  
                         ?_CWTX 005C                ?_I2C_Master_Wait 0070                ?_I2C_Master_Stop 0070  
                         ?__NOP 0070                           ?_main 0070                           _ACKEN 048C  
                         _ACKDT 048D                 __end_of___awdiv 0B3D                           STR_10 0808  
                         STR_11 0808                           STR_12 0808                   __CFG_WDTE$OFF 0000  
                         _ANSEL 0188                 __end_of___lldiv 0BF8                 ___awdiv@divisor 0070  
       __size_of_TXOBC_waddress 003A                 ___awdiv@counter 0075                           _RCREG 001A  
                         _SPBRG 0099                           _PORTA 0005                           _PORTB 0006  
                         _PORTC 0007                           _PORTD 0008                           _PORTE 0009  
                         _H_OUT 0A0C                           _OUTFQ 00AC                           _TRISA 0085  
                         _TRISB 0086                           _TRISC 0087                           _TRISD 0088  
                         _TRISE 0089                           _L_OUT 0A52                           _TXREG 0019  
                 __CFG_PWRTE$ON 0000                  __CFG_FCMEN$OFF 0000                           _dData 0130  
               __end_of_getdata 0C59                           _eflag 0066                   getdata@dstuff 0022  
                         _putch 17F0                           pclath 000A                           status 0003  
                         wtemp0 007E                      _Init_I2C_M 099E                EEPROM_Write@data 0074  
    __end_of_ReceivePacket_data 0CBE                    __end_of_FMRX 0944                    __end_of_FMTX 0970  
                  __end_of_CWTX 0918                    __end_of__NOP 085B                 __initialization 07B3  
                  __end_of_main 1000             __end_of_Init_SERIAL 0874                __end_of_Init_MPU 08C4  
                        ??_FMRX 007D                          ??_FMTX 007D                          ??_CWTX 007D  
                        ??__NOP 0070                          ??_main 0062                          ?_H_OUT 0072  
      EEPROM_Write@high_address 0072                          ?_OUTFQ 0079                          ?_L_OUT 0072  
             ?_I2C_Master_Start 0070               ?_I2C_Master_Write 0070                          OUTFQ@i 0056  
            ??_I2C_Master_Start 0070                          OUTFQ@j 005A              ??_I2C_Master_Write 0072  
              ___awdiv@dividend 0072                      _eDataField 0140                          ?_putch 0070  
                        _ANSELH 0189                          _RFDOUT 0D3B                          _OPINIT 0CBE  
                        _SSPADD 0093                          _STBOUT 0970                          _STATUS 0003  
                        _SSPCON 0014                          _SSPBUF 0013                          __NOP@i 0070  
              __end_of_fcscheck 00AC                       ??___awdiv 0074                          _dfcshi 006F  
                     ??___lldiv 0078                          _dfcslo 006E                          _efcshi 006C  
                        _efcslo 006D                          _getbit 0A98              __size_of_Reset_EPS 0023  
                        _estuff 00E2                ___awdiv@quotient 0077                      _dPacketnum 0068  
                     ??_getdata 0076                     RFDOUT@i_483 003B                     RFDOUT@i_484 003F  
              __end_of_waitFlag 07B3      EEPROM_Write@EEPROM_address 0078         __end_of__initialization 07FC  
       EEPROM_Write@low_address 0073                     ?_Init_I2C_M 0020                     _Init_SERIAL 085B  
         __size_of_EEPROM_Write 005D                   __end_of_H_OUT 0A52                   __end_of_OUTFQ 0327  
                 __end_of_L_OUT 0A98                   L_OUT@fmcwtxrx 0072                  __pcstackCOMMON 0070  
                  __pidataBANK1 088D                    __pidataBANK2 0874                    __pidataBANK3 08C4  
                 __end_of_putch 17F8                  _TXOBC_waddress 09D2                         ??_H_OUT 0074  
                       ??_OUTFQ 0020                         ??_L_OUT 0074                         ??_putch 0070  
                  _EEPROM_Write 0B3D                      __pbssBANK0 0066                      __pbssBANK1 00DB  
                    __pbssBANK2 0110                      __pbssBANK3 0190               __end_of_Reset_EPS 002A  
                     ?_Init_MPU 0070                         ?_RFDOUT 0079                         ?_OPINIT 0074  
                  ?_NM_waddress 0071                         ?_STBOUT 0072                         RFDOUT@i 003D  
                    __pmaintext 0E1C                      _ebitstatus 00E0                         ?_getbit 0070  
        __end_of_TXOBC_waddress 0A0C     TXOBC_waddress@whigh_address 0071             __size_of_Init_I2C_M 0034  
                     OUTFQ@Nprg 007B                       ?_fcscheck 0070                         _SSPCON2 0091  
                       _SSPSTAT 0094                      __stringtab 0800                      ??_Init_MPU 0070  
               __size_of_RFDOUT 00E1                 __size_of_OPINIT 007D                 __size_of_STBOUT 002E  
                     ?_waitFlag 0070                         _dPacket 0190                         _ePacket 00DB  
                       ___awdiv 0AE4                         ___lldiv 0B9A                 __size_of_getbit 004C  
                   waitFlag@buf 003C                 ?_TXOBC_waddress 0071                         __ptext1 09D2  
                       __ptext2 0007                         __ptext3 0C59                         __ptext4 0327  
                       __ptext5 0BF8                         __ptext6 0A98                         __ptext7 002A  
                       __ptext8 0834                         __ptext9 17F0                         _getdata 0BF8  
            _ReceivePacket_data 0C59                       _T1CONbits 0010        __size_of_I2C_Master_Wait 0009  
      __size_of_I2C_Master_Stop 0007                      ??_fcscheck 0072             ?_ReceivePacket_data 0070  
                       getbit@i 0074                         clrloop0 17F9            end_of_initialization 07FC  
                  RFDOUT@Nref_b 0023                       _FMRX_Nref 00C1                       _FMRX_Nprg 01E0  
                     _FMTX_Nref 00C5                       _FMTX_Nprg 00D1                       _CWTX_Nref 00C3  
                     _CWTX_Nprg 00C7                     OUTFQ@Nprg_b 0030       __size_of_I2C_Master_Start 0007  
     __size_of_I2C_Master_Write 0008                 ___lldiv@divisor 0070                 ___lldiv@counter 007D  
                    ??_waitFlag 0076            ??_ReceivePacket_data 007A                      fcscheck@bt 0074  
                OPINIT@fmcwtxrx 0074                       _PORTAbits 0005                       _PORTCbits 0007  
                     _PORTDbits 0008                       _PORTEbits 0009                      getdata@buf 0026  
                  ??_Init_I2C_M 0024                    ?_Init_SERIAL 0070                  __end_of_RFDOUT 0E1C  
                __end_of_OPINIT 0D3B                  __end_of_STBOUT 099E            __size_of_NM_waddress 0012  
                __end_of_getbit 0AE4      TXOBC_waddress@wlow_address 0072             start_initialization 07B3  
            __end_of_Init_I2C_M 09D2                        ??_RFDOUT 0020                        ??_OPINIT 0076  
             ??_I2C_Master_Wait 0070               ??_I2C_Master_Stop 0070                        ??_STBOUT 0074  
             __size_of_Init_MPU 001D                       _Reset_EPS 0007               getdata@dbitstatus 0024  
                    init_fetch0 0823                        ??_getbit 0072                     __pdataBANK1 00C1  
                   __pdataBANK2 0140                     __pdataBANK3 01C2                      RFDOUT@Nref 007B  
           __end_of_commandSize 0808        NM_waddress@whigh_address 0071                       ___latbits 0002  
                 __pcstackBANK0 0020                   __pcstackBANK1 00A0                        FMRX@Nref 005C  
                      FMRX@Nprg 005E                        FMTX@Nref 005C                        FMTX@Nprg 005E  
                      FMRX@fmrx 0060                        FMTX@fmtx 0060                        CWTX@Nref 005C  
                      CWTX@Nprg 005E               __size_of_fcscheck 0082                   waitFlag@j_120 0026  
                 waitFlag@j_122 0028                   waitFlag@j_131 0032                   waitFlag@j_124 002A  
                 waitFlag@j_133 0034                   waitFlag@j_126 002C                   waitFlag@j_118 0024  
                 waitFlag@j_135 0036                   waitFlag@j_127 002E                   waitFlag@j_137 0038  
                 waitFlag@j_129 0030                        CWTX@cwtx 0060                _I2C_Master_Start 17DA  
                    ?_Reset_EPS 0070                _I2C_Master_Write 17E8                ??_TXOBC_waddress 0073  
       getdata@bufstore_counter 0020                        ?___awdiv 0070                        ?___lldiv 0070  
             __size_of_waitFlag 048C                       __pstrings 0800                        ?_getdata 0070  
                __size_of_H_OUT 0046                  __size_of_OUTFQ 027B                  __size_of_L_OUT 0046  
                __size_of_putch 0008                   H_OUT@fmcwtxrx 0072                       clear_ram0 17F8  
                      _PIE1bits 008C                      OUTFQ@i_472 0052                      OUTFQ@i_474 0058  
                     _rcv_state 006A            __size_of_Init_SERIAL 0019                        _PIR1bits 000C  
                    OUTFQ@count 0054                     _commandSize 0806                       fcscheck@i 0075  
                     main@F2013 01D6                       main@F2015 01CC                       main@F2017 01C2  
                   __stringbase 0805                       main@dData 00C0                        _Init_MPU 08A7  
                   ??_Reset_EPS 0070                   fcscheck@i_149 0077     __size_of_ReceivePacket_data 0065  
              __size_of___awdiv 0059                __size_of___lldiv 005E              __end_of__stringtab 0806  
                    _EEPROMData 0110                __size_of_getdata 0061                 _I2C_Master_Wait 081A  
               _I2C_Master_Stop 17E1                  RFDOUT@fmcwtxrx 0079                        _efcsflag 00E4  
                      _fcscheck 002A                        __ptext10 085B                        __ptext11 08A7  
                      __ptext20 081A                        __ptext12 099E                        __ptext21 08EC  
                      __ptext13 0B9A                        __ptext22 0D3B                        __ptext14 0944  
                      __ptext23 00AC                        __ptext15 0918                        __ptext24 0AE4  
                      __ptext16 0B3D                        __ptext25 0CBE                        __ptext17 17E8  
                      __ptext26 0970                        __ptext18 17E1                        __ptext27 0A52  
                      __ptext19 17DA                        __ptext28 0A0C                        __ptext29 0846  
             __CFG_BOR4V$BOR21V 0000                   ?_EEPROM_Write 0072                   __size_of_FMRX 002C  
                 __size_of_FMTX 002C                   __size_of_CWTX 002C                   __size_of__NOP 0015  
                 ??_NM_waddress 0073                       waitFlag@i 0020                       waitFlag@j 0022  
                 __size_of_main 01E4                  STBOUT@fmcwtxrx 0072                        _waitFlag 0327  
      NM_waddress@NM_wad_header 0073                   OUTFQ@fmcwtxrx 0079        __end_of_I2C_Master_Start 17E1  
                     putch@byte 0070        __end_of_I2C_Master_Write 17F0                      _INTCONbits 000B  
                      init_ram0 0827                    fcscheck@byte 0079                  ??_EEPROM_Write 0075  
            waitFlag@flag_judge 003A                ___lldiv@dividend 0074                       stringcode 0800  
                 main@FMRX_Nprg 00B4               main@NM_wad_header 00BF                   main@FMTX_Nprg 00A0  
           __end_of_NM_waddress 0846                   main@CWTX_Nprg 00AA         __end_of_I2C_Master_Wait 0823  
       __end_of_I2C_Master_Stop 17E8                ___lldiv@quotient 0079               I2C_Master_Write@d 0070  
           EEPROM_Write@Address 0079                        stringdir 0800                        stringtab 0800  
           ReceivePacket_data@i 003F         NM_waddress@wlow_address 0072            main@TXOBC_wad_header 00BE  
