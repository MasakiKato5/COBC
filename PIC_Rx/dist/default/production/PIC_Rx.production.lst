

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Tue Feb 20 17:04:11 2018

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	dabs	1,0x7E,2
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  008F                     	;# 
    98  0090                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  0105                     	;# 
   117  0107                     	;# 
   118  0108                     	;# 
   119  0109                     	;# 
   120  010C                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  010F                     	;# 
   125  0185                     	;# 
   126  0187                     	;# 
   127  0188                     	;# 
   128  0189                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  0000                     	;# 
   132  0001                     	;# 
   133  0002                     	;# 
   134  0003                     	;# 
   135  0004                     	;# 
   136  0005                     	;# 
   137  0006                     	;# 
   138  0007                     	;# 
   139  0008                     	;# 
   140  0009                     	;# 
   141  000A                     	;# 
   142  000B                     	;# 
   143  000C                     	;# 
   144  000D                     	;# 
   145  000E                     	;# 
   146  000E                     	;# 
   147  000F                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0013                     	;# 
   152  0014                     	;# 
   153  0015                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0017                     	;# 
   157  0018                     	;# 
   158  0019                     	;# 
   159  001A                     	;# 
   160  001B                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001D                     	;# 
   164  001E                     	;# 
   165  001F                     	;# 
   166  0081                     	;# 
   167  0085                     	;# 
   168  0086                     	;# 
   169  0087                     	;# 
   170  0088                     	;# 
   171  0089                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  008F                     	;# 
   176  0090                     	;# 
   177  0091                     	;# 
   178  0092                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0094                     	;# 
   183  0095                     	;# 
   184  0096                     	;# 
   185  0097                     	;# 
   186  0098                     	;# 
   187  0099                     	;# 
   188  009A                     	;# 
   189  009B                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  009F                     	;# 
   194  0105                     	;# 
   195  0107                     	;# 
   196  0108                     	;# 
   197  0109                     	;# 
   198  010C                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  010F                     	;# 
   203  0185                     	;# 
   204  0187                     	;# 
   205  0188                     	;# 
   206  0189                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  0000                     	;# 
   210  0001                     	;# 
   211  0002                     	;# 
   212  0003                     	;# 
   213  0004                     	;# 
   214  0005                     	;# 
   215  0006                     	;# 
   216  0007                     	;# 
   217  0008                     	;# 
   218  0009                     	;# 
   219  000A                     	;# 
   220  000B                     	;# 
   221  000C                     	;# 
   222  000D                     	;# 
   223  000E                     	;# 
   224  000E                     	;# 
   225  000F                     	;# 
   226  0010                     	;# 
   227  0011                     	;# 
   228  0012                     	;# 
   229  0013                     	;# 
   230  0014                     	;# 
   231  0015                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0017                     	;# 
   235  0018                     	;# 
   236  0019                     	;# 
   237  001A                     	;# 
   238  001B                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  001D                     	;# 
   242  001E                     	;# 
   243  001F                     	;# 
   244  0081                     	;# 
   245  0085                     	;# 
   246  0086                     	;# 
   247  0087                     	;# 
   248  0088                     	;# 
   249  0089                     	;# 
   250  008C                     	;# 
   251  008D                     	;# 
   252  008E                     	;# 
   253  008F                     	;# 
   254  0090                     	;# 
   255  0091                     	;# 
   256  0092                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0093                     	;# 
   260  0094                     	;# 
   261  0095                     	;# 
   262  0096                     	;# 
   263  0097                     	;# 
   264  0098                     	;# 
   265  0099                     	;# 
   266  009A                     	;# 
   267  009B                     	;# 
   268  009C                     	;# 
   269  009D                     	;# 
   270  009E                     	;# 
   271  009F                     	;# 
   272  0105                     	;# 
   273  0107                     	;# 
   274  0108                     	;# 
   275  0109                     	;# 
   276  010C                     	;# 
   277  010C                     	;# 
   278  010D                     	;# 
   279  010E                     	;# 
   280  010F                     	;# 
   281  0185                     	;# 
   282  0187                     	;# 
   283  0188                     	;# 
   284  0189                     	;# 
   285  018C                     	;# 
   286  018D                     	;# 
   287  0000                     	;# 
   288  0001                     	;# 
   289  0002                     	;# 
   290  0003                     	;# 
   291  0004                     	;# 
   292  0005                     	;# 
   293  0006                     	;# 
   294  0007                     	;# 
   295  0008                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000D                     	;# 
   301  000E                     	;# 
   302  000E                     	;# 
   303  000F                     	;# 
   304  0010                     	;# 
   305  0011                     	;# 
   306  0012                     	;# 
   307  0013                     	;# 
   308  0014                     	;# 
   309  0015                     	;# 
   310  0015                     	;# 
   311  0016                     	;# 
   312  0017                     	;# 
   313  0018                     	;# 
   314  0019                     	;# 
   315  001A                     	;# 
   316  001B                     	;# 
   317  001B                     	;# 
   318  001C                     	;# 
   319  001D                     	;# 
   320  001E                     	;# 
   321  001F                     	;# 
   322  0081                     	;# 
   323  0085                     	;# 
   324  0086                     	;# 
   325  0087                     	;# 
   326  0088                     	;# 
   327  0089                     	;# 
   328  008C                     	;# 
   329  008D                     	;# 
   330  008E                     	;# 
   331  008F                     	;# 
   332  0090                     	;# 
   333  0091                     	;# 
   334  0092                     	;# 
   335  0093                     	;# 
   336  0093                     	;# 
   337  0093                     	;# 
   338  0094                     	;# 
   339  0095                     	;# 
   340  0096                     	;# 
   341  0097                     	;# 
   342  0098                     	;# 
   343  0099                     	;# 
   344  009A                     	;# 
   345  009B                     	;# 
   346  009C                     	;# 
   347  009D                     	;# 
   348  009E                     	;# 
   349  009F                     	;# 
   350  0105                     	;# 
   351  0107                     	;# 
   352  0108                     	;# 
   353  0109                     	;# 
   354  010C                     	;# 
   355  010C                     	;# 
   356  010D                     	;# 
   357  010E                     	;# 
   358  010F                     	;# 
   359  0185                     	;# 
   360  0187                     	;# 
   361  0188                     	;# 
   362  0189                     	;# 
   363  018C                     	;# 
   364  018D                     	;# 
   365  0000                     	;# 
   366  0001                     	;# 
   367  0002                     	;# 
   368  0003                     	;# 
   369  0004                     	;# 
   370  0005                     	;# 
   371  0006                     	;# 
   372  0007                     	;# 
   373  0008                     	;# 
   374  0009                     	;# 
   375  000A                     	;# 
   376  000B                     	;# 
   377  000C                     	;# 
   378  000D                     	;# 
   379  000E                     	;# 
   380  000E                     	;# 
   381  000F                     	;# 
   382  0010                     	;# 
   383  0011                     	;# 
   384  0012                     	;# 
   385  0013                     	;# 
   386  0014                     	;# 
   387  0015                     	;# 
   388  0015                     	;# 
   389  0016                     	;# 
   390  0017                     	;# 
   391  0018                     	;# 
   392  0019                     	;# 
   393  001A                     	;# 
   394  001B                     	;# 
   395  001B                     	;# 
   396  001C                     	;# 
   397  001D                     	;# 
   398  001E                     	;# 
   399  001F                     	;# 
   400  0081                     	;# 
   401  0085                     	;# 
   402  0086                     	;# 
   403  0087                     	;# 
   404  0088                     	;# 
   405  0089                     	;# 
   406  008C                     	;# 
   407  008D                     	;# 
   408  008E                     	;# 
   409  008F                     	;# 
   410  0090                     	;# 
   411  0091                     	;# 
   412  0092                     	;# 
   413  0093                     	;# 
   414  0093                     	;# 
   415  0093                     	;# 
   416  0094                     	;# 
   417  0095                     	;# 
   418  0096                     	;# 
   419  0097                     	;# 
   420  0098                     	;# 
   421  0099                     	;# 
   422  009A                     	;# 
   423  009B                     	;# 
   424  009C                     	;# 
   425  009D                     	;# 
   426  009E                     	;# 
   427  009F                     	;# 
   428  0105                     	;# 
   429  0107                     	;# 
   430  0108                     	;# 
   431  0109                     	;# 
   432  010C                     	;# 
   433  010C                     	;# 
   434  010D                     	;# 
   435  010E                     	;# 
   436  010F                     	;# 
   437  0185                     	;# 
   438  0187                     	;# 
   439  0188                     	;# 
   440  0189                     	;# 
   441  018C                     	;# 
   442  018D                     	;# 
   443  0000                     	;# 
   444  0001                     	;# 
   445  0002                     	;# 
   446  0003                     	;# 
   447  0004                     	;# 
   448  0005                     	;# 
   449  0006                     	;# 
   450  0007                     	;# 
   451  0008                     	;# 
   452  0009                     	;# 
   453  000A                     	;# 
   454  000B                     	;# 
   455  000C                     	;# 
   456  000D                     	;# 
   457  000E                     	;# 
   458  000E                     	;# 
   459  000F                     	;# 
   460  0010                     	;# 
   461  0011                     	;# 
   462  0012                     	;# 
   463  0013                     	;# 
   464  0014                     	;# 
   465  0015                     	;# 
   466  0015                     	;# 
   467  0016                     	;# 
   468  0017                     	;# 
   469  0018                     	;# 
   470  0019                     	;# 
   471  001A                     	;# 
   472  001B                     	;# 
   473  001B                     	;# 
   474  001C                     	;# 
   475  001D                     	;# 
   476  001E                     	;# 
   477  001F                     	;# 
   478  0081                     	;# 
   479  0085                     	;# 
   480  0086                     	;# 
   481  0087                     	;# 
   482  0088                     	;# 
   483  0089                     	;# 
   484  008C                     	;# 
   485  008D                     	;# 
   486  008E                     	;# 
   487  008F                     	;# 
   488  0090                     	;# 
   489  0091                     	;# 
   490  0092                     	;# 
   491  0093                     	;# 
   492  0093                     	;# 
   493  0093                     	;# 
   494  0094                     	;# 
   495  0095                     	;# 
   496  0096                     	;# 
   497  0097                     	;# 
   498  0098                     	;# 
   499  0099                     	;# 
   500  009A                     	;# 
   501  009B                     	;# 
   502  009C                     	;# 
   503  009D                     	;# 
   504  009E                     	;# 
   505  009F                     	;# 
   506  0105                     	;# 
   507  0107                     	;# 
   508  0108                     	;# 
   509  0109                     	;# 
   510  010C                     	;# 
   511  010C                     	;# 
   512  010D                     	;# 
   513  010E                     	;# 
   514  010F                     	;# 
   515  0185                     	;# 
   516  0187                     	;# 
   517  0188                     	;# 
   518  0189                     	;# 
   519  018C                     	;# 
   520  018D                     	;# 
   521  0000                     	;# 
   522  0001                     	;# 
   523  0002                     	;# 
   524  0003                     	;# 
   525  0004                     	;# 
   526  0005                     	;# 
   527  0006                     	;# 
   528  0007                     	;# 
   529  0008                     	;# 
   530  0009                     	;# 
   531  000A                     	;# 
   532  000B                     	;# 
   533  000C                     	;# 
   534  000D                     	;# 
   535  000E                     	;# 
   536  000E                     	;# 
   537  000F                     	;# 
   538  0010                     	;# 
   539  0011                     	;# 
   540  0012                     	;# 
   541  0013                     	;# 
   542  0014                     	;# 
   543  0015                     	;# 
   544  0015                     	;# 
   545  0016                     	;# 
   546  0017                     	;# 
   547  0018                     	;# 
   548  0019                     	;# 
   549  001A                     	;# 
   550  001B                     	;# 
   551  001B                     	;# 
   552  001C                     	;# 
   553  001D                     	;# 
   554  001E                     	;# 
   555  001F                     	;# 
   556  0081                     	;# 
   557  0085                     	;# 
   558  0086                     	;# 
   559  0087                     	;# 
   560  0088                     	;# 
   561  0089                     	;# 
   562  008C                     	;# 
   563  008D                     	;# 
   564  008E                     	;# 
   565  008F                     	;# 
   566  0090                     	;# 
   567  0091                     	;# 
   568  0092                     	;# 
   569  0093                     	;# 
   570  0093                     	;# 
   571  0093                     	;# 
   572  0094                     	;# 
   573  0095                     	;# 
   574  0096                     	;# 
   575  0097                     	;# 
   576  0098                     	;# 
   577  0099                     	;# 
   578  009A                     	;# 
   579  009B                     	;# 
   580  009C                     	;# 
   581  009D                     	;# 
   582  009E                     	;# 
   583  009F                     	;# 
   584  0105                     	;# 
   585  0107                     	;# 
   586  0108                     	;# 
   587  0109                     	;# 
   588  010C                     	;# 
   589  010C                     	;# 
   590  010D                     	;# 
   591  010E                     	;# 
   592  010F                     	;# 
   593  0185                     	;# 
   594  0187                     	;# 
   595  0188                     	;# 
   596  0189                     	;# 
   597  018C                     	;# 
   598  018D                     	;# 
   599  0000                     	;# 
   600  0001                     	;# 
   601  0002                     	;# 
   602  0003                     	;# 
   603  0004                     	;# 
   604  0005                     	;# 
   605  0006                     	;# 
   606  0007                     	;# 
   607  0008                     	;# 
   608  0009                     	;# 
   609  000A                     	;# 
   610  000B                     	;# 
   611  000C                     	;# 
   612  000D                     	;# 
   613  000E                     	;# 
   614  000E                     	;# 
   615  000F                     	;# 
   616  0010                     	;# 
   617  0011                     	;# 
   618  0012                     	;# 
   619  0013                     	;# 
   620  0014                     	;# 
   621  0015                     	;# 
   622  0015                     	;# 
   623  0016                     	;# 
   624  0017                     	;# 
   625  0018                     	;# 
   626  0019                     	;# 
   627  001A                     	;# 
   628  001B                     	;# 
   629  001B                     	;# 
   630  001C                     	;# 
   631  001D                     	;# 
   632  001E                     	;# 
   633  001F                     	;# 
   634  0081                     	;# 
   635  0085                     	;# 
   636  0086                     	;# 
   637  0087                     	;# 
   638  0088                     	;# 
   639  0089                     	;# 
   640  008C                     	;# 
   641  008D                     	;# 
   642  008E                     	;# 
   643  008F                     	;# 
   644  0090                     	;# 
   645  0091                     	;# 
   646  0092                     	;# 
   647  0093                     	;# 
   648  0093                     	;# 
   649  0093                     	;# 
   650  0094                     	;# 
   651  0095                     	;# 
   652  0096                     	;# 
   653  0097                     	;# 
   654  0098                     	;# 
   655  0099                     	;# 
   656  009A                     	;# 
   657  009B                     	;# 
   658  009C                     	;# 
   659  009D                     	;# 
   660  009E                     	;# 
   661  009F                     	;# 
   662  0105                     	;# 
   663  0107                     	;# 
   664  0108                     	;# 
   665  0109                     	;# 
   666  010C                     	;# 
   667  010C                     	;# 
   668  010D                     	;# 
   669  010E                     	;# 
   670  010F                     	;# 
   671  0185                     	;# 
   672  0187                     	;# 
   673  0188                     	;# 
   674  0189                     	;# 
   675  018C                     	;# 
   676  018D                     	;# 
   677  0000                     	;# 
   678  0001                     	;# 
   679  0002                     	;# 
   680  0003                     	;# 
   681  0004                     	;# 
   682  0005                     	;# 
   683  0006                     	;# 
   684  0007                     	;# 
   685  0008                     	;# 
   686  0009                     	;# 
   687  000A                     	;# 
   688  000B                     	;# 
   689  000C                     	;# 
   690  000D                     	;# 
   691  000E                     	;# 
   692  000E                     	;# 
   693  000F                     	;# 
   694  0010                     	;# 
   695  0011                     	;# 
   696  0012                     	;# 
   697  0013                     	;# 
   698  0014                     	;# 
   699  0015                     	;# 
   700  0015                     	;# 
   701  0016                     	;# 
   702  0017                     	;# 
   703  0018                     	;# 
   704  0019                     	;# 
   705  001A                     	;# 
   706  001B                     	;# 
   707  001B                     	;# 
   708  001C                     	;# 
   709  001D                     	;# 
   710  001E                     	;# 
   711  001F                     	;# 
   712  0081                     	;# 
   713  0085                     	;# 
   714  0086                     	;# 
   715  0087                     	;# 
   716  0088                     	;# 
   717  0089                     	;# 
   718  008C                     	;# 
   719  008D                     	;# 
   720  008E                     	;# 
   721  008F                     	;# 
   722  0090                     	;# 
   723  0091                     	;# 
   724  0092                     	;# 
   725  0093                     	;# 
   726  0093                     	;# 
   727  0093                     	;# 
   728  0094                     	;# 
   729  0095                     	;# 
   730  0096                     	;# 
   731  0097                     	;# 
   732  0098                     	;# 
   733  0099                     	;# 
   734  009A                     	;# 
   735  009B                     	;# 
   736  009C                     	;# 
   737  009D                     	;# 
   738  009E                     	;# 
   739  009F                     	;# 
   740  0105                     	;# 
   741  0107                     	;# 
   742  0108                     	;# 
   743  0109                     	;# 
   744  010C                     	;# 
   745  010C                     	;# 
   746  010D                     	;# 
   747  010E                     	;# 
   748  010F                     	;# 
   749  0185                     	;# 
   750  0187                     	;# 
   751  0188                     	;# 
   752  0189                     	;# 
   753  018C                     	;# 
   754  018D                     	;# 
   755  0000                     	;# 
   756  0001                     	;# 
   757  0002                     	;# 
   758  0003                     	;# 
   759  0004                     	;# 
   760  0005                     	;# 
   761  0006                     	;# 
   762  0007                     	;# 
   763  0008                     	;# 
   764  0009                     	;# 
   765  000A                     	;# 
   766  000B                     	;# 
   767  000C                     	;# 
   768  000D                     	;# 
   769  000E                     	;# 
   770  000E                     	;# 
   771  000F                     	;# 
   772  0010                     	;# 
   773  0011                     	;# 
   774  0012                     	;# 
   775  0013                     	;# 
   776  0014                     	;# 
   777  0015                     	;# 
   778  0015                     	;# 
   779  0016                     	;# 
   780  0017                     	;# 
   781  0018                     	;# 
   782  0019                     	;# 
   783  001A                     	;# 
   784  001B                     	;# 
   785  001B                     	;# 
   786  001C                     	;# 
   787  001D                     	;# 
   788  001E                     	;# 
   789  001F                     	;# 
   790  0081                     	;# 
   791  0085                     	;# 
   792  0086                     	;# 
   793  0087                     	;# 
   794  0088                     	;# 
   795  0089                     	;# 
   796  008C                     	;# 
   797  008D                     	;# 
   798  008E                     	;# 
   799  008F                     	;# 
   800  0090                     	;# 
   801  0091                     	;# 
   802  0092                     	;# 
   803  0093                     	;# 
   804  0093                     	;# 
   805  0093                     	;# 
   806  0094                     	;# 
   807  0095                     	;# 
   808  0096                     	;# 
   809  0097                     	;# 
   810  0098                     	;# 
   811  0099                     	;# 
   812  009A                     	;# 
   813  009B                     	;# 
   814  009C                     	;# 
   815  009D                     	;# 
   816  009E                     	;# 
   817  009F                     	;# 
   818  0105                     	;# 
   819  0107                     	;# 
   820  0108                     	;# 
   821  0109                     	;# 
   822  010C                     	;# 
   823  010C                     	;# 
   824  010D                     	;# 
   825  010E                     	;# 
   826  010F                     	;# 
   827  0185                     	;# 
   828  0187                     	;# 
   829  0188                     	;# 
   830  0189                     	;# 
   831  018C                     	;# 
   832  018D                     	;# 
   833                           
   834                           	psect	idataBANK1
   835  08A3                     __pidataBANK1:	
   836                           
   837                           ;initializer for _CWTX_Nref
   838  08A3  34A0               	retlw	160
   839  08A4  3400               	retlw	0
   840                           
   841                           ;initializer for _FMRX_Nref
   842  08A5  3400               	retlw	0
   843  08A6  340A               	retlw	10
   844                           
   845                           ;initializer for _FMTX_Nref
   846  08A7  3400               	retlw	0
   847  08A8  340A               	retlw	10
   848                           
   849                           ;initializer for _CWTX_Nprg
   850  08A9  3400               	retlw	0
   851  08AA  3400               	retlw	0
   852  08AB  3401               	retlw	1
   853  08AC  3400               	retlw	0
   854  08AD  3407               	retlw	7
   855  08AE  3400               	retlw	0
   856  08AF  3404               	retlw	4
   857  08B0  3400               	retlw	0
   858  08B1  3407               	retlw	7
   859  08B2  3400               	retlw	0
   860                           
   861                           ;initializer for _FMTX_Nprg
   862  08B3  3408               	retlw	8
   863  08B4  3400               	retlw	0
   864  08B5  3407               	retlw	7
   865  08B6  3400               	retlw	0
   866  08B7  3403               	retlw	3
   867  08B8  3400               	retlw	0
   868  08B9  3400               	retlw	0
   869  08BA  3400               	retlw	0
   870  08BB  3400               	retlw	0
   871  08BC  3400               	retlw	0
   872                           
   873                           	psect	idataBANK2
   874  088A                     __pidataBANK2:	
   875                           
   876                           ;initializer for _eDataField
   877  088A  3448               	retlw	72
   878  088B  3465               	retlw	101
   879  088C  346C               	retlw	108
   880  088D  346C               	retlw	108
   881  088E  346F               	retlw	111
   882  088F  3421               	retlw	33
   883  0890  3420               	retlw	32
   884  0891  3449               	retlw	73
   885  0892  3427               	retlw	39
   886  0893  346D               	retlw	109
   887  0894  3420               	retlw	32
   888  0895  344F               	retlw	79
   889  0896  3472               	retlw	114
   890  0897  3469               	retlw	105
   891  0898  3467               	retlw	103
   892  0899  3461               	retlw	97
   893  089A  346D               	retlw	109
   894  089B  3469               	retlw	105
   895  089C  3453               	retlw	83
   896  089D  3461               	retlw	97
   897  089E  3474               	retlw	116
   898  089F  3431               	retlw	49
   899  08A0  3421               	retlw	33
   900  08A1  3421               	retlw	33
   901  08A2  3400               	retlw	0
   902                           
   903                           	psect	idataBANK3
   904  0916                     __pidataBANK3:	
   905                           
   906                           ;initializer for main@F2010
   907  0916  3408               	retlw	8
   908  0917  3400               	retlw	0
   909  0918  3407               	retlw	7
   910  0919  3400               	retlw	0
   911  091A  3403               	retlw	3
   912  091B  3400               	retlw	0
   913  091C  3400               	retlw	0
   914  091D  3400               	retlw	0
   915  091E  3400               	retlw	0
   916  091F  3400               	retlw	0
   917                           
   918                           ;initializer for main@F2012
   919  0920  3400               	retlw	0
   920  0921  3400               	retlw	0
   921  0922  3401               	retlw	1
   922  0923  3400               	retlw	0
   923  0924  3407               	retlw	7
   924  0925  3400               	retlw	0
   925  0926  3404               	retlw	4
   926  0927  3400               	retlw	0
   927  0928  3407               	retlw	7
   928  0929  3400               	retlw	0
   929                           
   930                           ;initializer for main@F2014
   931  092A  3402               	retlw	2
   932  092B  3400               	retlw	0
   933  092C  3404               	retlw	4
   934  092D  3400               	retlw	0
   935  092E  3408               	retlw	8
   936  092F  3400               	retlw	0
   937  0930  3408               	retlw	8
   938  0931  3400               	retlw	0
   939  0932  3407               	retlw	7
   940  0933  3400               	retlw	0
   941                           
   942                           ;initializer for _FMRX_Nprg
   943  0934  3402               	retlw	2
   944  0935  3400               	retlw	0
   945  0936  3404               	retlw	4
   946  0937  3400               	retlw	0
   947  0938  3408               	retlw	8
   948  0939  3400               	retlw	0
   949  093A  3408               	retlw	8
   950  093B  3400               	retlw	0
   951  093C  3407               	retlw	7
   952  093D  3400               	retlw	0
   953                           
   954                           	psect	strings
   955  0800                     __pstrings:	
   956  0800                     stringtab:	
   957  0800                     __stringtab:	
   958  0800                     stringcode:	
   959                           ;	String table - string pointers are 1 byte each
   960                           
   961  0800                     stringdir:	
   962  0800  3008               	movlw	high stringdir
   963  0801  008A               	movwf	10
   964  0802  0804               	movf	4,w
   965  0803  0A84               	incf	4,f
   966  0804  0782               	addwf	2,f
   967  0805                     __stringbase:	
   968  0805  3400               	retlw	0
   969  0806                     __end_of__stringtab:	
   970  0806                     _commandSize:	
   971  0806  3420               	retlw	32
   972  0807  3400               	retlw	0
   973  0808                     __end_of_commandSize:	
   974  000E                     _TMR1	set	14
   975  000B                     _INTCONbits	set	11
   976  000C                     _PIR1bits	set	12
   977  0005                     _PORTA	set	5
   978  0005                     _PORTAbits	set	5
   979  0006                     _PORTB	set	6
   980  0007                     _PORTC	set	7
   981  0007                     _PORTCbits	set	7
   982  0008                     _PORTD	set	8
   983  0008                     _PORTDbits	set	8
   984  0009                     _PORTE	set	9
   985  0009                     _PORTEbits	set	9
   986  001A                     _RCREG	set	26
   987  0013                     _SSPBUF	set	19
   988  0014                     _SSPCON	set	20
   989  0003                     _STATUS	set	3
   990  0010                     _T1CONbits	set	16
   991  0019                     _TXREG	set	25
   992  00C4                     _CREN	set	196
   993  00C2                     _FERR	set	194
   994  00C1                     _OERR	set	193
   995  0029                     _RA1	set	41
   996  0032                     _RB2	set	50
   997  0034                     _RB4	set	52
   998  0035                     _RB5	set	53
   999  003A                     _RC2	set	58
  1000  003D                     _RC5	set	61
  1001  0065                     _RCIF	set	101
  1002  00C6                     _RX9	set	198
  1003  00C7                     _SPEN	set	199
  1004  00C5                     _SREN	set	197
  1005  0064                     _TXIF	set	100
  1006  008C                     _PIE1bits	set	140
  1007  0099                     _SPBRG	set	153
  1008  0093                     _SSPADD	set	147
  1009  0091                     _SSPCON2	set	145
  1010  0094                     _SSPSTAT	set	148
  1011  0085                     _TRISA	set	133
  1012  0086                     _TRISB	set	134
  1013  0087                     _TRISC	set	135
  1014  0088                     _TRISD	set	136
  1015  0089                     _TRISE	set	137
  1016  048D                     _ACKDT	set	1165
  1017  048C                     _ACKEN	set	1164
  1018  04C2                     _BRGH	set	1218
  1019  048A                     _PEN	set	1162
  1020  048B                     _RCEN	set	1163
  1021  0465                     _RCIE	set	1125
  1022  0489                     _RSEN	set	1161
  1023  0488                     _SEN	set	1160
  1024  04C4                     _SYNC	set	1220
  1025  04C6                     _TX9	set	1222
  1026  04C5                     _TXEN	set	1221
  1027  0464                     _TXIE	set	1124
  1028  0188                     _ANSEL	set	392
  1029  0189                     _ANSELH	set	393
  1030  0808                     STR_15:	
  1031  0808  3473               	retlw	115	;'s'
  1032  0809  3474               	retlw	116	;'t'
  1033  080A  3461               	retlw	97	;'a'
  1034  080B  3472               	retlw	114	;'r'
  1035  080C  3474               	retlw	116	;'t'
  1036  080D  340D               	retlw	13
  1037  080E  340A               	retlw	10
  1038  080F  3400               	retlw	0
  1039  0810                     STR_7:	
  1040  0810  344A               	retlw	74	;'J'
  1041  0811  3451               	retlw	81	;'Q'
  1042  0812  3431               	retlw	49	;'1'
  1043  0813  345A               	retlw	90	;'Z'
  1044  0814  3448               	retlw	72	;'H'
  1045  0815  3458               	retlw	88	;'X'
  1046  0816  3400               	retlw	0
  1047  0817                     STR_1:	
  1048  0817  344A               	retlw	74	;'J'
  1049  0818  3451               	retlw	81	;'Q'
  1050  0819  3431               	retlw	49	;'1'
  1051  081A  3459               	retlw	89	;'Y'
  1052  081B  3443               	retlw	67	;'C'
  1053  081C  345A               	retlw	90	;'Z'
  1054  081D  3400               	retlw	0
  1055  0810                     
  1056                           ; #config settings
  1057  0000                     
  1058                           	psect	cinit
  1059  07B3                     start_initialization:	
  1060  07B3                     __initialization:	
  1061                           
  1062                           ; Initialize objects allocated to BANK3
  1063  07B3  1783               	bsf	3,7	;select IRP bank2
  1064  07B4  30EA               	movlw	low (__pdataBANK3+40)
  1065  07B5  00FD               	movwf	btemp+-1
  1066  07B6  3009               	movlw	high __pidataBANK3
  1067  07B7  00FE               	movwf	btemp
  1068  07B8  3016               	movlw	low __pidataBANK3
  1069  07B9  00FF               	movwf	btemp+1
  1070  07BA  30C2               	movlw	low __pdataBANK3
  1071  07BB  0084               	movwf	4
  1072  07BC  120A  158A  203D  120A  118A  	fcall	init_ram0
  1073                           
  1074                           ; Initialize objects allocated to BANK2
  1075  07C1  3059               	movlw	low (__pdataBANK2+25)
  1076  07C2  00FD               	movwf	btemp+-1
  1077  07C3  3008               	movlw	high __pidataBANK2
  1078  07C4  00FE               	movwf	btemp
  1079  07C5  308A               	movlw	low __pidataBANK2
  1080  07C6  00FF               	movwf	btemp+1
  1081  07C7  3040               	movlw	low __pdataBANK2
  1082  07C8  0084               	movwf	4
  1083  07C9  120A  158A  203D  120A  118A  	fcall	init_ram0
  1084                           
  1085                           ; Initialize objects allocated to BANK1
  1086  07CE  1383               	bcf	3,7	;select IRP bank0
  1087  07CF  30DB               	movlw	low (__pdataBANK1+26)
  1088  07D0  00FD               	movwf	btemp+-1
  1089  07D1  3008               	movlw	high __pidataBANK1
  1090  07D2  00FE               	movwf	btemp
  1091  07D3  30A3               	movlw	low __pidataBANK1
  1092  07D4  00FF               	movwf	btemp+1
  1093  07D5  30C1               	movlw	low __pdataBANK1
  1094  07D6  0084               	movwf	4
  1095  07D7  120A  158A  203D  120A  118A  	fcall	init_ram0
  1096                           
  1097                           ; Clear objects allocated to BANK3
  1098  07DC  1783               	bsf	3,7	;select IRP bank2
  1099  07DD  3090               	movlw	low __pbssBANK3
  1100  07DE  0084               	movwf	4
  1101  07DF  30C2               	movlw	low (__pbssBANK3+50)
  1102  07E0  120A  158A  2028  120A  118A  	fcall	clear_ram0
  1103                           
  1104                           ; Clear objects allocated to BANK2
  1105  07E5  3010               	movlw	low __pbssBANK2
  1106  07E6  0084               	movwf	4
  1107  07E7  3040               	movlw	low (__pbssBANK2+48)
  1108  07E8  120A  158A  2028  120A  118A  	fcall	clear_ram0
  1109                           
  1110                           ; Clear objects allocated to BANK1
  1111  07ED  1383               	bcf	3,7	;select IRP bank0
  1112  07EE  30DB               	movlw	low __pbssBANK1
  1113  07EF  0084               	movwf	4
  1114  07F0  30E8               	movlw	low (__pbssBANK1+13)
  1115  07F1  120A  158A  2028  120A  118A  	fcall	clear_ram0
  1116                           
  1117                           ; Clear objects allocated to BANK0
  1118  07F6  3066               	movlw	low __pbssBANK0
  1119  07F7  0084               	movwf	4
  1120  07F8  3070               	movlw	low (__pbssBANK0+10)
  1121  07F9  120A  158A  2028   	fcall	clear_ram0
  1122  07FC                     end_of_initialization:	
  1123                           ;End of C runtime variable initialization code
  1124                           
  1125  07FC                     __end_of__initialization:	
  1126  07FC  0183               	clrf	3
  1127  07FD  120A  158A  2E34   	ljmp	_main	;jump to C main() function
  1128                           
  1129                           	psect	bssBANK0
  1130  0066                     __pbssBANK0:	
  1131  0066                     _dPacketnum:	
  1132  0066                     	ds	2
  1133  0068                     _eflag:	
  1134  0068                     	ds	2
  1135  006A                     _rcv_state:	
  1136  006A                     	ds	2
  1137  006C                     _dfcshi:	
  1138  006C                     	ds	1
  1139  006D                     _dfcslo:	
  1140  006D                     	ds	1
  1141  006E                     _efcshi:	
  1142  006E                     	ds	1
  1143  006F                     _efcslo:	
  1144  006F                     	ds	1
  1145                           
  1146                           	psect	bssBANK1
  1147  00DB                     __pbssBANK1:	
  1148  00DB                     _ePacket:	
  1149  00DB                     	ds	5
  1150  00E0                     _ebitstatus:	
  1151  00E0                     	ds	2
  1152  00E2                     _efcsflag:	
  1153  00E2                     	ds	2
  1154  00E4                     _estuff:	
  1155  00E4                     	ds	2
  1156  00E6                     getbit@oldbit:	
  1157  00E6                     	ds	2
  1158                           
  1159                           	psect	dataBANK1
  1160  00C1                     __pdataBANK1:	
  1161  00C1                     _CWTX_Nref:	
  1162  00C1                     	ds	2
  1163  00C3                     _FMRX_Nref:	
  1164  00C3                     	ds	2
  1165  00C5                     _FMTX_Nref:	
  1166  00C5                     	ds	2
  1167  00C7                     _CWTX_Nprg:	
  1168  00C7                     	ds	10
  1169  00D1                     _FMTX_Nprg:	
  1170  00D1                     	ds	10
  1171                           
  1172                           	psect	bssBANK3
  1173  0190                     __pbssBANK3:	
  1174  0190                     _dPacket:	
  1175  0190                     	ds	50
  1176                           
  1177                           	psect	dataBANK3
  1178  01C2                     __pdataBANK3:	
  1179  01C2                     main@F2010:	
  1180  01C2                     	ds	10
  1181  01CC                     main@F2012:	
  1182  01CC                     	ds	10
  1183  01D6                     main@F2014:	
  1184  01D6                     	ds	10
  1185  01E0                     _FMRX_Nprg:	
  1186  01E0                     	ds	10
  1187                           
  1188                           	psect	bssBANK2
  1189  0110                     __pbssBANK2:	
  1190  0110                     _EEPROMData:	
  1191  0110                     	ds	32
  1192  0130                     _dData:	
  1193  0130                     	ds	16
  1194                           
  1195                           	psect	dataBANK2
  1196  0140                     __pdataBANK2:	
  1197  0140                     _eDataField:	
  1198  0140                     	ds	25
  1199                           
  1200                           	psect	inittext
  1201  0839                     init_fetch0:	
  1202                           ;	Called with low address in FSR and high address in W
  1203                           
  1204  0839  087E               	movf	126,w
  1205  083A  008A               	movwf	10
  1206  083B  087F               	movf	127,w
  1207  083C  0082               	movwf	2
  1208  083D                     init_ram0:	
  1209                           ;Called with:
  1210                           ;	high address of idata address in btemp 
  1211                           ;	low address of idata address in btemp+1 
  1212                           ;	low address of data in FSR
  1213                           ;	high address + 1 of data in btemp-1
  1214                           
  1215  083D  2039  120A  158A   	fcall	init_fetch0
  1216  0840  0080               	movwf	0
  1217  0841  0A84               	incf	4,f
  1218  0842  0804               	movf	4,w
  1219  0843  067D               	xorwf	125,w
  1220  0844  1903               	btfsc	3,2
  1221  0845  3400               	retlw	0
  1222  0846  0AFF               	incf	127,f
  1223  0847  1903               	btfsc	3,2
  1224  0848  0AFE               	incf	126,f
  1225  0849  283D               	goto	init_ram0
  1226                           
  1227                           	psect	clrtext
  1228  0828                     clear_ram0:	
  1229                           ;	Called with FSR containing the base address, and
  1230                           ;	W with the last address+1
  1231                           
  1232  0828  0064               	clrwdt	;clear the watchdog before getting into this loop
  1233  0829                     clrloop0:	
  1234  0829  0180               	clrf	0	;clear RAM location pointed to by FSR
  1235  082A  0A84               	incf	4,f	;increment pointer
  1236  082B  0604               	xorwf	4,w	;XOR with final address
  1237  082C  1903               	btfsc	3,2	;have we reached the end yet?
  1238  082D  3400               	retlw	0	;all done for this memory range, return
  1239  082E  0604               	xorwf	4,w	;XOR again to restore value
  1240  082F  2829               	goto	clrloop0	;do the next byte
  1241                           
  1242                           	psect	cstackBANK1
  1243  00A0                     __pcstackBANK1:	
  1244  00A0                     main@FMTX_Nprg:	
  1245                           
  1246                           ; 10 bytes @ 0x0
  1247  00A0                     	ds	10
  1248  00AA                     main@CWTX_Nprg:	
  1249                           
  1250                           ; 10 bytes @ 0xA
  1251  00AA                     	ds	10
  1252  00B4                     main@FMRX_Nprg:	
  1253                           
  1254                           ; 10 bytes @ 0x14
  1255  00B4                     	ds	10
  1256  00BE                     main@TXOBC_wad_header:	
  1257                           
  1258                           ; 1 bytes @ 0x1E
  1259  00BE                     	ds	1
  1260  00BF                     main@NM_wad_header:	
  1261                           
  1262                           ; 1 bytes @ 0x1F
  1263  00BF                     	ds	1
  1264  00C0                     main@dData:	
  1265                           
  1266                           ; 1 bytes @ 0x20
  1267  00C0                     	ds	1
  1268                           
  1269                           	psect	cstackCOMMON
  1270  0070                     __pcstackCOMMON:	
  1271  0070                     ?_Reset_EPS:	
  1272  0070                     ??_Reset_EPS:	
  1273                           ; 1 bytes @ 0x0
  1274                           
  1275  0070                     ?__NOP:	
  1276                           ; 1 bytes @ 0x0
  1277                           
  1278  0070                     ??__NOP:	
  1279                           ; 1 bytes @ 0x0
  1280                           
  1281  0070                     ?_Init_SERIAL:	
  1282                           ; 1 bytes @ 0x0
  1283                           
  1284  0070                     ??_Init_SERIAL:	
  1285                           ; 1 bytes @ 0x0
  1286                           
  1287  0070                     ?_putch:	
  1288                           ; 1 bytes @ 0x0
  1289                           
  1290  0070                     ??_putch:	
  1291                           ; 1 bytes @ 0x0
  1292                           
  1293  0070                     ?_Init_MPU:	
  1294                           ; 1 bytes @ 0x0
  1295                           
  1296  0070                     ??_Init_MPU:	
  1297                           ; 1 bytes @ 0x0
  1298                           
  1299  0070                     ?_waitFlag:	
  1300                           ; 1 bytes @ 0x0
  1301                           
  1302  0070                     ?_getdata:	
  1303                           ; 1 bytes @ 0x0
  1304                           
  1305  0070                     ?_ReceivePacket_data:	
  1306                           ; 1 bytes @ 0x0
  1307                           
  1308  0070                     ?_main:	
  1309                           ; 1 bytes @ 0x0
  1310                           
  1311  0070                     ?_I2C_Master_Wait:	
  1312                           ; 1 bytes @ 0x0
  1313                           
  1314  0070                     ??_I2C_Master_Wait:	
  1315                           ; 1 bytes @ 0x0
  1316                           
  1317  0070                     ?_I2C_Master_Start:	
  1318                           ; 1 bytes @ 0x0
  1319                           
  1320  0070                     ??_I2C_Master_Start:	
  1321                           ; 1 bytes @ 0x0
  1322                           
  1323  0070                     ?_I2C_Master_Stop:	
  1324                           ; 1 bytes @ 0x0
  1325                           
  1326  0070                     ??_I2C_Master_Stop:	
  1327                           ; 1 bytes @ 0x0
  1328                           
  1329  0070                     ?_I2C_Master_Write:	
  1330                           ; 1 bytes @ 0x0
  1331                           
  1332  0070                     ?_printf:	
  1333                           ; 1 bytes @ 0x0
  1334                           
  1335  0070                     ?_getbit:	
  1336                           ; 2 bytes @ 0x0
  1337                           
  1338  0070                     ?_fcscheck:	
  1339                           ; 2 bytes @ 0x0
  1340                           
  1341  0070                     ?___awdiv:	
  1342                           ; 2 bytes @ 0x0
  1343                           
  1344  0070                     ?___lldiv:	
  1345                           ; 2 bytes @ 0x0
  1346                           
  1347  0070                     putch@byte:	
  1348                           ; 4 bytes @ 0x0
  1349                           
  1350  0070                     I2C_Master_Write@d:	
  1351                           ; 1 bytes @ 0x0
  1352                           
  1353  0070                     __NOP@i:	
  1354                           ; 2 bytes @ 0x0
  1355                           
  1356  0070                     ___awdiv@divisor:	
  1357                           ; 2 bytes @ 0x0
  1358                           
  1359  0070                     ___lldiv@divisor:	
  1360                           ; 2 bytes @ 0x0
  1361                           
  1362                           
  1363                           ; 4 bytes @ 0x0
  1364  0070                     	ds	1
  1365  0071                     ??_printf:	
  1366  0071                     ?_NM_waddress:	
  1367                           ; 1 bytes @ 0x1
  1368                           
  1369  0071                     ?_TXOBC_waddress:	
  1370                           ; 1 bytes @ 0x1
  1371                           
  1372  0071                     NM_waddress@whigh_address:	
  1373                           ; 1 bytes @ 0x1
  1374                           
  1375  0071                     TXOBC_waddress@whigh_address:	
  1376                           ; 1 bytes @ 0x1
  1377                           
  1378                           
  1379                           ; 1 bytes @ 0x1
  1380  0071                     	ds	1
  1381  0072                     ?_EEPROM_Write:	
  1382  0072                     ??_getbit:	
  1383                           ; 1 bytes @ 0x2
  1384                           
  1385  0072                     ??_fcscheck:	
  1386                           ; 1 bytes @ 0x2
  1387                           
  1388  0072                     ??_I2C_Master_Write:	
  1389                           ; 1 bytes @ 0x2
  1390                           
  1391  0072                     ?_L_OUT:	
  1392                           ; 1 bytes @ 0x2
  1393                           
  1394  0072                     ?_H_OUT:	
  1395                           ; 1 bytes @ 0x2
  1396                           
  1397  0072                     ?_STBOUT:	
  1398                           ; 1 bytes @ 0x2
  1399                           
  1400  0072                     NM_waddress@wlow_address:	
  1401                           ; 1 bytes @ 0x2
  1402                           
  1403  0072                     TXOBC_waddress@wlow_address:	
  1404                           ; 1 bytes @ 0x2
  1405                           
  1406  0072                     EEPROM_Write@high_address:	
  1407                           ; 1 bytes @ 0x2
  1408                           
  1409  0072                     printf@ap:	
  1410                           ; 1 bytes @ 0x2
  1411                           
  1412  0072                     L_OUT@fmcwtxrx:	
  1413                           ; 1 bytes @ 0x2
  1414                           
  1415  0072                     H_OUT@fmcwtxrx:	
  1416                           ; 2 bytes @ 0x2
  1417                           
  1418  0072                     STBOUT@fmcwtxrx:	
  1419                           ; 2 bytes @ 0x2
  1420                           
  1421  0072                     ___awdiv@dividend:	
  1422                           ; 2 bytes @ 0x2
  1423                           
  1424                           
  1425                           ; 2 bytes @ 0x2
  1426  0072                     	ds	1
  1427  0073                     ??_NM_waddress:	
  1428  0073                     ??_TXOBC_waddress:	
  1429                           ; 1 bytes @ 0x3
  1430                           
  1431  0073                     NM_waddress@NM_wad_header:	
  1432                           ; 1 bytes @ 0x3
  1433                           
  1434  0073                     EEPROM_Write@low_address:	
  1435                           ; 1 bytes @ 0x3
  1436                           
  1437  0073                     printf@c:	
  1438                           ; 1 bytes @ 0x3
  1439                           
  1440                           
  1441                           ; 1 bytes @ 0x3
  1442  0073                     	ds	1
  1443  0074                     ??_L_OUT:	
  1444  0074                     ??_H_OUT:	
  1445                           ; 1 bytes @ 0x4
  1446                           
  1447  0074                     ??_STBOUT:	
  1448                           ; 1 bytes @ 0x4
  1449                           
  1450  0074                     ?_OPINIT:	
  1451                           ; 1 bytes @ 0x4
  1452                           
  1453  0074                     ??___awdiv:	
  1454                           ; 1 bytes @ 0x4
  1455                           
  1456  0074                     fcscheck@bt:	
  1457                           ; 1 bytes @ 0x4
  1458                           
  1459  0074                     EEPROM_Write@data:	
  1460                           ; 1 bytes @ 0x4
  1461                           
  1462  0074                     printf@f:	
  1463                           ; 1 bytes @ 0x4
  1464                           
  1465  0074                     getbit@i:	
  1466                           ; 1 bytes @ 0x4
  1467                           
  1468  0074                     OPINIT@fmcwtxrx:	
  1469                           ; 2 bytes @ 0x4
  1470                           
  1471  0074                     ___lldiv@dividend:	
  1472                           ; 2 bytes @ 0x4
  1473                           
  1474                           
  1475                           ; 4 bytes @ 0x4
  1476  0074                     	ds	1
  1477  0075                     ??_EEPROM_Write:	
  1478  0075                     TXOBC_waddress@TXOBC_wad_header:	
  1479                           ; 1 bytes @ 0x5
  1480                           
  1481  0075                     ___awdiv@counter:	
  1482                           ; 1 bytes @ 0x5
  1483                           
  1484  0075                     fcscheck@i:	
  1485                           ; 1 bytes @ 0x5
  1486                           
  1487                           
  1488                           ; 2 bytes @ 0x5
  1489  0075                     	ds	1
  1490  0076                     ??_waitFlag:	
  1491  0076                     ??_getdata:	
  1492                           ; 1 bytes @ 0x6
  1493                           
  1494  0076                     ??_OPINIT:	
  1495                           ; 1 bytes @ 0x6
  1496                           
  1497  0076                     ___awdiv@sign:	
  1498                           ; 1 bytes @ 0x6
  1499                           
  1500                           
  1501                           ; 1 bytes @ 0x6
  1502  0076                     	ds	1
  1503  0077                     fcscheck@i_149:	
  1504  0077                     ___awdiv@quotient:	
  1505                           ; 2 bytes @ 0x7
  1506                           
  1507                           
  1508                           ; 2 bytes @ 0x7
  1509  0077                     	ds	1
  1510  0078                     ??___lldiv:	
  1511  0078                     EEPROM_Write@EEPROM_address:	
  1512                           ; 1 bytes @ 0x8
  1513                           
  1514                           
  1515                           ; 1 bytes @ 0x8
  1516  0078                     	ds	1
  1517  0079                     ?_OUTFQ:	
  1518  0079                     ?_RFDOUT:	
  1519                           ; 1 bytes @ 0x9
  1520                           
  1521  0079                     fcscheck@byte:	
  1522                           ; 1 bytes @ 0x9
  1523                           
  1524  0079                     EEPROM_Write@Address:	
  1525                           ; 1 bytes @ 0x9
  1526                           
  1527  0079                     OUTFQ@fmcwtxrx:	
  1528                           ; 1 bytes @ 0x9
  1529                           
  1530  0079                     RFDOUT@fmcwtxrx:	
  1531                           ; 2 bytes @ 0x9
  1532                           
  1533  0079                     ___lldiv@quotient:	
  1534                           ; 2 bytes @ 0x9
  1535                           
  1536                           
  1537                           ; 4 bytes @ 0x9
  1538  0079                     	ds	1
  1539  007A                     ??_ReceivePacket_data:	
  1540                           
  1541                           ; 1 bytes @ 0xA
  1542  007A                     	ds	1
  1543  007B                     OUTFQ@Nprg:	
  1544  007B                     RFDOUT@Nref:	
  1545                           ; 2 bytes @ 0xB
  1546                           
  1547                           
  1548                           ; 2 bytes @ 0xB
  1549  007B                     	ds	2
  1550  007D                     ??_FMTX:	
  1551  007D                     ??_CWTX:	
  1552                           ; 1 bytes @ 0xD
  1553                           
  1554  007D                     ??_FMRX:	
  1555                           ; 1 bytes @ 0xD
  1556                           
  1557  007D                     ___lldiv@counter:	
  1558                           ; 1 bytes @ 0xD
  1559                           
  1560                           
  1561                           ; 1 bytes @ 0xD
  1562  007D                     	ds	1
  1563                           
  1564                           	psect	cstackBANK0
  1565  0020                     __pcstackBANK0:	
  1566  0020                     ?_Init_I2C_M:	
  1567  0020                     ??_OUTFQ:	
  1568                           ; 1 bytes @ 0x0
  1569                           
  1570  0020                     ??_RFDOUT:	
  1571                           ; 1 bytes @ 0x0
  1572                           
  1573  0020                     waitFlag@i:	
  1574                           ; 1 bytes @ 0x0
  1575                           
  1576  0020                     getdata@bufstore_counter:	
  1577                           ; 2 bytes @ 0x0
  1578                           
  1579  0020                     Init_I2C_M@c:	
  1580                           ; 2 bytes @ 0x0
  1581                           
  1582                           
  1583                           ; 4 bytes @ 0x0
  1584  0020                     	ds	2
  1585  0022                     waitFlag@j:	
  1586  0022                     getdata@dstuff:	
  1587                           ; 2 bytes @ 0x2
  1588                           
  1589                           
  1590                           ; 2 bytes @ 0x2
  1591  0022                     	ds	1
  1592  0023                     RFDOUT@Nref_b:	
  1593                           
  1594                           ; 24 bytes @ 0x3
  1595  0023                     	ds	1
  1596  0024                     ??_Init_I2C_M:	
  1597  0024                     waitFlag@j_118:	
  1598                           ; 1 bytes @ 0x4
  1599                           
  1600  0024                     getdata@dbitstatus:	
  1601                           ; 2 bytes @ 0x4
  1602                           
  1603                           
  1604                           ; 2 bytes @ 0x4
  1605  0024                     	ds	2
  1606  0026                     getdata@buf:	
  1607  0026                     waitFlag@j_120:	
  1608                           ; 1 bytes @ 0x6
  1609                           
  1610                           
  1611                           ; 2 bytes @ 0x6
  1612  0026                     	ds	2
  1613  0028                     waitFlag@j_122:	
  1614                           
  1615                           ; 2 bytes @ 0x8
  1616  0028                     	ds	2
  1617  002A                     waitFlag@j_124:	
  1618                           
  1619                           ; 2 bytes @ 0xA
  1620  002A                     	ds	2
  1621  002C                     waitFlag@j_126:	
  1622                           
  1623                           ; 2 bytes @ 0xC
  1624  002C                     	ds	2
  1625  002E                     waitFlag@j_127:	
  1626                           
  1627                           ; 2 bytes @ 0xE
  1628  002E                     	ds	2
  1629  0030                     waitFlag@j_129:	
  1630  0030                     OUTFQ@Nprg_b:	
  1631                           ; 2 bytes @ 0x10
  1632                           
  1633                           
  1634                           ; 34 bytes @ 0x10
  1635  0030                     	ds	2
  1636  0032                     waitFlag@j_131:	
  1637                           
  1638                           ; 2 bytes @ 0x12
  1639  0032                     	ds	2
  1640  0034                     waitFlag@j_133:	
  1641                           
  1642                           ; 2 bytes @ 0x14
  1643  0034                     	ds	2
  1644  0036                     waitFlag@j_135:	
  1645                           
  1646                           ; 2 bytes @ 0x16
  1647  0036                     	ds	2
  1648  0038                     waitFlag@j_137:	
  1649                           
  1650                           ; 2 bytes @ 0x18
  1651  0038                     	ds	2
  1652  003A                     waitFlag@flag_judge:	
  1653                           
  1654                           ; 2 bytes @ 0x1A
  1655  003A                     	ds	1
  1656  003B                     RFDOUT@i_481:	
  1657                           
  1658                           ; 2 bytes @ 0x1B
  1659  003B                     	ds	1
  1660  003C                     waitFlag@buf:	
  1661                           
  1662                           ; 1 bytes @ 0x1C
  1663  003C                     	ds	1
  1664  003D                     ReceivePacket_data@fcschecker:	
  1665  003D                     RFDOUT@i:	
  1666                           ; 2 bytes @ 0x1D
  1667                           
  1668                           
  1669                           ; 2 bytes @ 0x1D
  1670  003D                     	ds	2
  1671  003F                     ReceivePacket_data@i:	
  1672  003F                     RFDOUT@i_482:	
  1673                           ; 2 bytes @ 0x1F
  1674                           
  1675                           
  1676                           ; 2 bytes @ 0x1F
  1677  003F                     	ds	19
  1678  0052                     OUTFQ@i_470:	
  1679                           
  1680                           ; 2 bytes @ 0x32
  1681  0052                     	ds	2
  1682  0054                     OUTFQ@count:	
  1683                           
  1684                           ; 2 bytes @ 0x34
  1685  0054                     	ds	2
  1686  0056                     OUTFQ@i:	
  1687                           
  1688                           ; 2 bytes @ 0x36
  1689  0056                     	ds	2
  1690  0058                     OUTFQ@i_472:	
  1691                           
  1692                           ; 2 bytes @ 0x38
  1693  0058                     	ds	2
  1694  005A                     OUTFQ@j:	
  1695                           
  1696                           ; 2 bytes @ 0x3A
  1697  005A                     	ds	2
  1698  005C                     ?_FMTX:	
  1699  005C                     ?_CWTX:	
  1700                           ; 1 bytes @ 0x3C
  1701                           
  1702  005C                     ?_FMRX:	
  1703                           ; 1 bytes @ 0x3C
  1704                           
  1705  005C                     FMTX@Nref:	
  1706                           ; 1 bytes @ 0x3C
  1707                           
  1708  005C                     CWTX@Nref:	
  1709                           ; 2 bytes @ 0x3C
  1710                           
  1711  005C                     FMRX@Nref:	
  1712                           ; 2 bytes @ 0x3C
  1713                           
  1714                           
  1715                           ; 2 bytes @ 0x3C
  1716  005C                     	ds	2
  1717  005E                     FMTX@Nprg:	
  1718  005E                     CWTX@Nprg:	
  1719                           ; 2 bytes @ 0x3E
  1720                           
  1721  005E                     FMRX@Nprg:	
  1722                           ; 2 bytes @ 0x3E
  1723                           
  1724                           
  1725                           ; 2 bytes @ 0x3E
  1726  005E                     	ds	2
  1727  0060                     FMTX@fmtx:	
  1728  0060                     CWTX@cwtx:	
  1729                           ; 2 bytes @ 0x40
  1730                           
  1731  0060                     FMRX@fmrx:	
  1732                           ; 2 bytes @ 0x40
  1733                           
  1734                           
  1735                           ; 2 bytes @ 0x40
  1736  0060                     	ds	2
  1737  0062                     ??_main:	
  1738                           
  1739                           ; 1 bytes @ 0x42
  1740  0062                     	ds	4
  1741                           
  1742                           	psect	maintext
  1743  0E34                     __pmaintext:	
  1744 ;;
  1745 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1746 ;;
  1747 ;; *************** function _main *****************
  1748 ;; Defined at:
  1749 ;;		line 38 in file "main.c"
  1750 ;; Parameters:    Size  Location     Type
  1751 ;;		None
  1752 ;; Auto vars:     Size  Location     Type
  1753 ;;  FMRX_Nprg      10   20[BANK1 ] int [5]
  1754 ;;  CWTX_Nprg      10   10[BANK1 ] int [5]
  1755 ;;  FMTX_Nprg      10    0[BANK1 ] int [5]
  1756 ;;  NM_wad_heade    1   31[BANK1 ] unsigned char 
  1757 ;;  dData           1   32[BANK1 ] PTR unsigned char 
  1758 ;;		 -> NULL(0), dData(16), 
  1759 ;;  TXOBC_wad_he    1   30[BANK1 ] unsigned char 
  1760 ;; Return value:  Size  Location     Type
  1761 ;;                  1    wreg      void 
  1762 ;; Registers used:
  1763 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1764 ;; Tracked objects:
  1765 ;;		On entry : B00/0
  1766 ;;		On exit  : 0/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1769 ;;      Params:         0       0       0       0       0
  1770 ;;      Locals:         0       0      33       0       0
  1771 ;;      Temps:          0       4       0       0       0
  1772 ;;      Totals:         0       4      33       0       0
  1773 ;;Total ram usage:       37 bytes
  1774 ;; Hardware stack levels required when called:    4
  1775 ;; This function calls:
  1776 ;;		_CWTX
  1777 ;;		_EEPROM_Write
  1778 ;;		_FMRX
  1779 ;;		_FMTX
  1780 ;;		_Init_I2C_M
  1781 ;;		_Init_MPU
  1782 ;;		_Init_SERIAL
  1783 ;;		_NM_waddress
  1784 ;;		_ReceivePacket_data
  1785 ;;		_Reset_EPS
  1786 ;;		_TXOBC_waddress
  1787 ;;		_printf
  1788 ;; This function is called by:
  1789 ;;		Startup code after reset
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           
  1794                           ;psect for function _main
  1795  0E34                     _main:	
  1796                           
  1797                           ;main.c: 43: _delay((unsigned long)((3000)*(10000000/4000.0)));
  1798                           
  1799                           ;incstack = 0
  1800                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1801  0E34  3027               	movlw	39
  1802  0E35  1283               	bcf	3,5	;RP0=0, select bank0
  1803  0E36  1303               	bcf	3,6	;RP1=0, select bank0
  1804  0E37  00E4               	movwf	??_main+2
  1805  0E38  300D               	movlw	13
  1806  0E39  00E3               	movwf	??_main+1
  1807  0E3A  304B               	movlw	75
  1808  0E3B  00E2               	movwf	??_main
  1809  0E3C                     u3567:	
  1810  0E3C  0BE2               	decfsz	??_main,f
  1811  0E3D  2E3C               	goto	u3567
  1812  0E3E  0BE3               	decfsz	??_main+1,f
  1813  0E3F  2E3C               	goto	u3567
  1814  0E40  0BE4               	decfsz	??_main+2,f
  1815  0E41  2E3C               	goto	u3567
  1816  0E42  0000               	nop
  1817                           
  1818                           ;main.c: 45: Init_SERIAL();
  1819  0E43  120A  158A  2071  120A  158A  	fcall	_Init_SERIAL
  1820                           
  1821                           ;main.c: 46: Init_MPU();
  1822  0E48  120A  158A  20D9  120A  158A  	fcall	_Init_MPU
  1823                           
  1824                           ;main.c: 47: Init_I2C_M(400000);
  1825  0E4D  3000               	movlw	0
  1826  0E4E  1283               	bcf	3,5	;RP0=0, select bank0
  1827  0E4F  1303               	bcf	3,6	;RP1=0, select bank0
  1828  0E50  00A3               	movwf	Init_I2C_M@c+3
  1829  0E51  3006               	movlw	6
  1830  0E52  00A2               	movwf	Init_I2C_M@c+2
  1831  0E53  301A               	movlw	26
  1832  0E54  00A1               	movwf	Init_I2C_M@c+1
  1833  0E55  3080               	movlw	128
  1834  0E56  00A0               	movwf	Init_I2C_M@c
  1835  0E57  120A  158A  21F0  120A  158A  	fcall	_Init_I2C_M
  1836                           
  1837                           ;main.c: 54: RB2 = 1;
  1838  0E5C  1283               	bcf	3,5	;RP0=0, select bank0
  1839  0E5D  1303               	bcf	3,6	;RP1=0, select bank0
  1840  0E5E  1506               	bsf	6,2	;volatile
  1841                           
  1842                           ;main.c: 55: _delay((unsigned long)((500)*(10000000/4000.0)));
  1843  0E5F  3007               	movlw	7
  1844  0E60  00E4               	movwf	??_main+2
  1845  0E61  3058               	movlw	88
  1846  0E62  00E3               	movwf	??_main+1
  1847  0E63  305E               	movlw	94
  1848  0E64  00E2               	movwf	??_main
  1849  0E65                     u3577:	
  1850  0E65  0BE2               	decfsz	??_main,f
  1851  0E66  2E65               	goto	u3577
  1852  0E67  0BE3               	decfsz	??_main+1,f
  1853  0E68  2E65               	goto	u3577
  1854  0E69  0BE4               	decfsz	??_main+2,f
  1855  0E6A  2E65               	goto	u3577
  1856  0E6B  2E6C               	nop2
  1857                           
  1858                           ;main.c: 57: FMTX(FMTX_Nref, FMTX_Nprg);
  1859  0E6C  1683               	bsf	3,5	;RP0=1, select bank1
  1860  0E6D  1303               	bcf	3,6	;RP1=0, select bank1
  1861  0E6E  0846               	movf	(_FMTX_Nref+1)^(0+128),w
  1862  0E6F  1283               	bcf	3,5	;RP0=0, select bank0
  1863  0E70  1303               	bcf	3,6	;RP1=0, select bank0
  1864  0E71  00DD               	movwf	FMTX@Nref+1
  1865  0E72  1683               	bsf	3,5	;RP0=1, select bank1
  1866  0E73  1303               	bcf	3,6	;RP1=0, select bank1
  1867  0E74  0845               	movf	_FMTX_Nref^(0+128),w
  1868  0E75  1283               	bcf	3,5	;RP0=0, select bank0
  1869  0E76  1303               	bcf	3,6	;RP1=0, select bank0
  1870  0E77  00DC               	movwf	FMTX@Nref
  1871  0E78  30D1               	movlw	(low (_FMTX_Nprg| 0))& (0+255)
  1872  0E79  00DE               	movwf	FMTX@Nprg
  1873  0E7A  3000               	movlw	0
  1874  0E7B  00DF               	movwf	FMTX@Nprg+1
  1875  0E7C  120A  158A  2196  120A  158A  	fcall	_FMTX
  1876                           
  1877                           ;main.c: 58: CWTX(CWTX_Nref, CWTX_Nprg);
  1878  0E81  1683               	bsf	3,5	;RP0=1, select bank1
  1879  0E82  1303               	bcf	3,6	;RP1=0, select bank1
  1880  0E83  0842               	movf	(_CWTX_Nref+1)^(0+128),w
  1881  0E84  1283               	bcf	3,5	;RP0=0, select bank0
  1882  0E85  1303               	bcf	3,6	;RP1=0, select bank0
  1883  0E86  00DD               	movwf	CWTX@Nref+1
  1884  0E87  1683               	bsf	3,5	;RP0=1, select bank1
  1885  0E88  1303               	bcf	3,6	;RP1=0, select bank1
  1886  0E89  0841               	movf	_CWTX_Nref^(0+128),w
  1887  0E8A  1283               	bcf	3,5	;RP0=0, select bank0
  1888  0E8B  1303               	bcf	3,6	;RP1=0, select bank0
  1889  0E8C  00DC               	movwf	CWTX@Nref
  1890  0E8D  30C7               	movlw	(low (_CWTX_Nprg| 0))& (0+255)
  1891  0E8E  00DE               	movwf	CWTX@Nprg
  1892  0E8F  3000               	movlw	0
  1893  0E90  00DF               	movwf	CWTX@Nprg+1
  1894  0E91  120A  158A  213E  120A  158A  	fcall	_CWTX
  1895                           
  1896                           ;main.c: 59: FMRX(FMRX_Nref, FMRX_Nprg);
  1897  0E96  1683               	bsf	3,5	;RP0=1, select bank1
  1898  0E97  1303               	bcf	3,6	;RP1=0, select bank1
  1899  0E98  0844               	movf	(_FMRX_Nref+1)^(0+128),w
  1900  0E99  1283               	bcf	3,5	;RP0=0, select bank0
  1901  0E9A  1303               	bcf	3,6	;RP1=0, select bank0
  1902  0E9B  00DD               	movwf	FMRX@Nref+1
  1903  0E9C  1683               	bsf	3,5	;RP0=1, select bank1
  1904  0E9D  1303               	bcf	3,6	;RP1=0, select bank1
  1905  0E9E  0843               	movf	_FMRX_Nref^(0+128),w
  1906  0E9F  1283               	bcf	3,5	;RP0=0, select bank0
  1907  0EA0  1303               	bcf	3,6	;RP1=0, select bank0
  1908  0EA1  00DC               	movwf	FMRX@Nref
  1909  0EA2  30E0               	movlw	(low (_FMRX_Nprg| (0+256)))& (0+255)
  1910  0EA3  00DE               	movwf	FMRX@Nprg
  1911  0EA4  3001               	movlw	1
  1912  0EA5  00DF               	movwf	FMRX@Nprg+1
  1913  0EA6  120A  158A  216A  120A  158A  	fcall	_FMRX
  1914                           
  1915                           ;main.c: 60: RB2 = 0;
  1916  0EAB  1283               	bcf	3,5	;RP0=0, select bank0
  1917  0EAC  1303               	bcf	3,6	;RP1=0, select bank0
  1918  0EAD  1106               	bcf	6,2	;volatile
  1919                           
  1920                           ;main.c: 61: printf("start\r\n");
  1921  0EAE  3003               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1922  0EAF  120A  158A  20BD  120A  158A  	fcall	_printf
  1923  0EB4                     l3782:	
  1924                           ;main.c: 63: while(1){
  1925                           
  1926                           
  1927                           ;main.c: 78: UBYTE *dData;
  1928                           ;main.c: 79: dData = ReceivePacket_data();
  1929  0EB4  120A  158A  2471  120A  158A  	fcall	_ReceivePacket_data
  1930  0EB9  1283               	bcf	3,5	;RP0=0, select bank0
  1931  0EBA  1303               	bcf	3,6	;RP1=0, select bank0
  1932  0EBB  00E2               	movwf	??_main
  1933  0EBC  0862               	movf	??_main,w
  1934  0EBD  1683               	bsf	3,5	;RP0=1, select bank1
  1935  0EBE  1303               	bcf	3,6	;RP1=0, select bank1
  1936  0EBF  00C0               	movwf	main@dData^(0+128)
  1937                           
  1938                           ;main.c: 80: RB2 = 1;
  1939  0EC0  1283               	bcf	3,5	;RP0=0, select bank0
  1940  0EC1  1303               	bcf	3,6	;RP1=0, select bank0
  1941  0EC2  1506               	bsf	6,2	;volatile
  1942                           
  1943                           ;main.c: 81: _delay((unsigned long)((500)*(10000000/4000.0)));
  1944  0EC3  3007               	movlw	7
  1945  0EC4  00E4               	movwf	??_main+2
  1946  0EC5  3058               	movlw	88
  1947  0EC6  00E3               	movwf	??_main+1
  1948  0EC7  305E               	movlw	94
  1949  0EC8  00E2               	movwf	??_main
  1950  0EC9                     u3587:	
  1951  0EC9  0BE2               	decfsz	??_main,f
  1952  0ECA  2EC9               	goto	u3587
  1953  0ECB  0BE3               	decfsz	??_main+1,f
  1954  0ECC  2EC9               	goto	u3587
  1955  0ECD  0BE4               	decfsz	??_main+2,f
  1956  0ECE  2EC9               	goto	u3587
  1957  0ECF  2ED0               	nop2
  1958                           
  1959                           ;main.c: 82: RB2 = 0;
  1960  0ED0  1283               	bcf	3,5	;RP0=0, select bank0
  1961  0ED1  1303               	bcf	3,6	;RP1=0, select bank0
  1962  0ED2  1106               	bcf	6,2	;volatile
  1963                           
  1964                           ;main.c: 84: EEPROM_Write(0x50,0x00,0x00,dData);
  1965  0ED3  01F2               	clrf	EEPROM_Write@high_address
  1966  0ED4  01F3               	clrf	EEPROM_Write@low_address
  1967  0ED5  1683               	bsf	3,5	;RP0=1, select bank1
  1968  0ED6  1303               	bcf	3,6	;RP1=0, select bank1
  1969  0ED7  0840               	movf	main@dData^(0+128),w
  1970  0ED8  1283               	bcf	3,5	;RP0=0, select bank0
  1971  0ED9  1303               	bcf	3,6	;RP1=0, select bank0
  1972  0EDA  00E2               	movwf	??_main
  1973  0EDB  0862               	movf	??_main,w
  1974  0EDC  00F4               	movwf	EEPROM_Write@data
  1975  0EDD  3050               	movlw	80
  1976  0EDE  120A  158A  2355  120A  158A  	fcall	_EEPROM_Write
  1977                           
  1978                           ;main.c: 88: UBYTE TXOBC_wad_header = 0x74;
  1979  0EE3  3074               	movlw	116
  1980  0EE4  1283               	bcf	3,5	;RP0=0, select bank0
  1981  0EE5  1303               	bcf	3,6	;RP1=0, select bank0
  1982  0EE6  00E2               	movwf	??_main
  1983  0EE7  0862               	movf	??_main,w
  1984  0EE8  1683               	bsf	3,5	;RP0=1, select bank1
  1985  0EE9  1303               	bcf	3,6	;RP1=0, select bank1
  1986  0EEA  00BE               	movwf	main@TXOBC_wad_header^(0+128)
  1987                           
  1988                           ;main.c: 89: TXOBC_waddress(TXOBC_wad_header, 0x00, 0x00);
  1989  0EEB  01F1               	clrf	TXOBC_waddress@whigh_address
  1990  0EEC  01F2               	clrf	TXOBC_waddress@wlow_address
  1991  0EED  083E               	movf	main@TXOBC_wad_header^(0+128),w
  1992  0EEE  120A  158A  20F6  120A  158A  	fcall	_TXOBC_waddress
  1993                           
  1994                           ;main.c: 102: if(dData[0]=='n'){
  1995  0EF3  1683               	bsf	3,5	;RP0=1, select bank1
  1996  0EF4  1303               	bcf	3,6	;RP1=0, select bank1
  1997  0EF5  0840               	movf	main@dData^(0+128),w
  1998  0EF6  0084               	movwf	4
  1999  0EF7  306E               	movlw	110
  2000  0EF8  1783               	bsf	3,7	;select IRP bank2
  2001  0EF9  0600               	xorwf	0,w
  2002  0EFA  1D03               	btfss	3,2
  2003  0EFB  2F0D               	goto	l3800
  2004                           
  2005                           ;main.c: 104: UBYTE NM_wad_header = 0x72;
  2006  0EFC  3072               	movlw	114
  2007  0EFD  1283               	bcf	3,5	;RP0=0, select bank0
  2008  0EFE  1303               	bcf	3,6	;RP1=0, select bank0
  2009  0EFF  00E2               	movwf	??_main
  2010  0F00  0862               	movf	??_main,w
  2011  0F01  1683               	bsf	3,5	;RP0=1, select bank1
  2012  0F02  1303               	bcf	3,6	;RP1=0, select bank1
  2013  0F03  00BF               	movwf	main@NM_wad_header^(0+128)
  2014                           
  2015                           ;main.c: 105: NM_waddress(NM_wad_header, 0x00, 0x00);
  2016  0F04  01F1               	clrf	NM_waddress@whigh_address
  2017  0F05  01F2               	clrf	NM_waddress@wlow_address
  2018  0F06  083F               	movf	main@NM_wad_header^(0+128),w
  2019  0F07  120A  158A  204A  120A  158A  	fcall	_NM_waddress
  2020                           
  2021                           ;main.c: 107: }else if(dData[0]=='p'){
  2022  0F0C  2FF0               	goto	l442
  2023  0F0D                     l3800:	
  2024  0F0D  1683               	bsf	3,5	;RP0=1, select bank1
  2025  0F0E  1303               	bcf	3,6	;RP1=0, select bank1
  2026  0F0F  0840               	movf	main@dData^(0+128),w
  2027  0F10  0084               	movwf	4
  2028  0F11  3070               	movlw	112
  2029  0F12  1783               	bsf	3,7	;select IRP bank2
  2030  0F13  0600               	xorwf	0,w
  2031  0F14  1D03               	btfss	3,2
  2032  0F15  2FDD               	goto	l443
  2033                           
  2034                           ;main.c: 112: if(dData[2] == 'r'){
  2035  0F16  0840               	movf	main@dData^(0+128),w
  2036  0F17  3E02               	addlw	2
  2037  0F18  0084               	movwf	4
  2038  0F19  3072               	movlw	114
  2039  0F1A  0600               	xorwf	0,w
  2040  0F1B  1903               	btfsc	3,2
  2041  0F1C  2FC5               	goto	l3826
  2042  0F1D  2FF0               	goto	l442
  2043  0F1E                     l3806:	
  2044                           ;main.c: 118: case 'E':
  2045                           
  2046                           ;main.c: 117: switch(dData[3]){
  2047                           
  2048                           
  2049                           ;main.c: 123: Reset_EPS();
  2050  0F1E  120A  118A  2007  120A  158A  	fcall	_Reset_EPS
  2051                           
  2052                           ;main.c: 124: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2053  0F23  3040               	movlw	64
  2054  0F24  1283               	bcf	3,5	;RP0=0, select bank0
  2055  0F25  1303               	bcf	3,6	;RP1=0, select bank0
  2056  0F26  00E4               	movwf	??_main+2
  2057  0F27  306A               	movlw	106
  2058  0F28  00E3               	movwf	??_main+1
  2059  0F29  30D5               	movlw	213
  2060  0F2A  00E2               	movwf	??_main
  2061  0F2B                     u3597:	
  2062  0F2B  0BE2               	decfsz	??_main,f
  2063  0F2C  2F2B               	goto	u3597
  2064  0F2D  0BE3               	decfsz	??_main+1,f
  2065  0F2E  2F2B               	goto	u3597
  2066  0F2F  0BE4               	decfsz	??_main+2,f
  2067  0F30  2F2B               	goto	u3597
  2068  0F31  2F32               	nop2
  2069                           
  2070                           ;main.c: 127: int FMTX_Nprg[5] = {8,7,3,0,0};
  2071  0F32  30A0               	movlw	main@FMTX_Nprg& (0+255)
  2072  0F33  0084               	movwf	4
  2073  0F34  30C2               	movlw	low main@F2010
  2074  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  2075  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  2076  0F37  00E2               	movwf	??_main
  2077  0F38  0804               	movf	4,w
  2078  0F39  00E3               	movwf	??_main+1
  2079  0F3A  300A               	movlw	10
  2080  0F3B  00E4               	movwf	??_main+2
  2081  0F3C                     u3510:	
  2082  0F3C  0862               	movf	??_main,w
  2083  0F3D  0084               	movwf	4
  2084  0F3E  1783               	bsf	3,7	;select IRP bank3
  2085  0F3F  0800               	movf	0,w
  2086  0F40  00E5               	movwf	??_main+3
  2087  0F41  0AE2               	incf	??_main,f
  2088  0F42  0863               	movf	??_main+1,w
  2089  0F43  0084               	movwf	4
  2090  0F44  1383               	bcf	3,7	;select IRP bank1
  2091  0F45  0865               	movf	??_main+3,w
  2092  0F46  0080               	movwf	0
  2093  0F47  0AE3               	incf	??_main+1,f
  2094  0F48  0BE4               	decfsz	??_main+2,f
  2095  0F49  2F3C               	goto	u3510
  2096                           
  2097                           ;main.c: 128: int CWTX_Nprg[5] = {0,1,7,4,7};
  2098  0F4A  30AA               	movlw	main@CWTX_Nprg& (0+255)
  2099  0F4B  0084               	movwf	4
  2100  0F4C  30CC               	movlw	low main@F2012
  2101  0F4D  00E2               	movwf	??_main
  2102  0F4E  0804               	movf	4,w
  2103  0F4F  00E3               	movwf	??_main+1
  2104  0F50  300A               	movlw	10
  2105  0F51  00E4               	movwf	??_main+2
  2106  0F52                     u3520:	
  2107  0F52  0862               	movf	??_main,w
  2108  0F53  0084               	movwf	4
  2109  0F54  1783               	bsf	3,7	;select IRP bank3
  2110  0F55  0800               	movf	0,w
  2111  0F56  00E5               	movwf	??_main+3
  2112  0F57  0AE2               	incf	??_main,f
  2113  0F58  0863               	movf	??_main+1,w
  2114  0F59  0084               	movwf	4
  2115  0F5A  1383               	bcf	3,7	;select IRP bank1
  2116  0F5B  0865               	movf	??_main+3,w
  2117  0F5C  0080               	movwf	0
  2118  0F5D  0AE3               	incf	??_main+1,f
  2119  0F5E  0BE4               	decfsz	??_main+2,f
  2120  0F5F  2F52               	goto	u3520
  2121                           
  2122                           ;main.c: 129: int FMRX_Nprg[5] = {2,4,8,8,7};
  2123  0F60  30B4               	movlw	main@FMRX_Nprg& (0+255)
  2124  0F61  0084               	movwf	4
  2125  0F62  30D6               	movlw	low main@F2014
  2126  0F63  00E2               	movwf	??_main
  2127  0F64  0804               	movf	4,w
  2128  0F65  00E3               	movwf	??_main+1
  2129  0F66  300A               	movlw	10
  2130  0F67  00E4               	movwf	??_main+2
  2131  0F68                     u3530:	
  2132  0F68  0862               	movf	??_main,w
  2133  0F69  0084               	movwf	4
  2134  0F6A  1783               	bsf	3,7	;select IRP bank3
  2135  0F6B  0800               	movf	0,w
  2136  0F6C  00E5               	movwf	??_main+3
  2137  0F6D  0AE2               	incf	??_main,f
  2138  0F6E  0863               	movf	??_main+1,w
  2139  0F6F  0084               	movwf	4
  2140  0F70  1383               	bcf	3,7	;select IRP bank1
  2141  0F71  0865               	movf	??_main+3,w
  2142  0F72  0080               	movwf	0
  2143  0F73  0AE3               	incf	??_main+1,f
  2144  0F74  0BE4               	decfsz	??_main+2,f
  2145  0F75  2F68               	goto	u3530
  2146                           
  2147                           ;main.c: 131: FMTX(FMTX_Nref, FMTX_Nprg);
  2148  0F76  1683               	bsf	3,5	;RP0=1, select bank1
  2149  0F77  1303               	bcf	3,6	;RP1=0, select bank1
  2150  0F78  0846               	movf	(_FMTX_Nref+1)^(0+128),w
  2151  0F79  1283               	bcf	3,5	;RP0=0, select bank0
  2152  0F7A  1303               	bcf	3,6	;RP1=0, select bank0
  2153  0F7B  00DD               	movwf	FMTX@Nref+1
  2154  0F7C  1683               	bsf	3,5	;RP0=1, select bank1
  2155  0F7D  1303               	bcf	3,6	;RP1=0, select bank1
  2156  0F7E  0845               	movf	_FMTX_Nref^(0+128),w
  2157  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  2158  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  2159  0F81  00DC               	movwf	FMTX@Nref
  2160  0F82  30A0               	movlw	(low (main@FMTX_Nprg| 0))& (0+255)
  2161  0F83  00DE               	movwf	FMTX@Nprg
  2162  0F84  3000               	movlw	0
  2163  0F85  00DF               	movwf	FMTX@Nprg+1
  2164  0F86  120A  158A  2196  120A  158A  	fcall	_FMTX
  2165                           
  2166                           ;main.c: 132: CWTX(CWTX_Nref, CWTX_Nprg);
  2167  0F8B  1683               	bsf	3,5	;RP0=1, select bank1
  2168  0F8C  1303               	bcf	3,6	;RP1=0, select bank1
  2169  0F8D  0842               	movf	(_CWTX_Nref+1)^(0+128),w
  2170  0F8E  1283               	bcf	3,5	;RP0=0, select bank0
  2171  0F8F  1303               	bcf	3,6	;RP1=0, select bank0
  2172  0F90  00DD               	movwf	CWTX@Nref+1
  2173  0F91  1683               	bsf	3,5	;RP0=1, select bank1
  2174  0F92  1303               	bcf	3,6	;RP1=0, select bank1
  2175  0F93  0841               	movf	_CWTX_Nref^(0+128),w
  2176  0F94  1283               	bcf	3,5	;RP0=0, select bank0
  2177  0F95  1303               	bcf	3,6	;RP1=0, select bank0
  2178  0F96  00DC               	movwf	CWTX@Nref
  2179  0F97  30AA               	movlw	(low (main@CWTX_Nprg| 0))& (0+255)
  2180  0F98  00DE               	movwf	CWTX@Nprg
  2181  0F99  3000               	movlw	0
  2182  0F9A  00DF               	movwf	CWTX@Nprg+1
  2183  0F9B  120A  158A  213E  120A  158A  	fcall	_CWTX
  2184                           
  2185                           ;main.c: 133: FMRX(FMRX_Nref, FMRX_Nprg);
  2186  0FA0  1683               	bsf	3,5	;RP0=1, select bank1
  2187  0FA1  1303               	bcf	3,6	;RP1=0, select bank1
  2188  0FA2  0844               	movf	(_FMRX_Nref+1)^(0+128),w
  2189  0FA3  1283               	bcf	3,5	;RP0=0, select bank0
  2190  0FA4  1303               	bcf	3,6	;RP1=0, select bank0
  2191  0FA5  00DD               	movwf	FMRX@Nref+1
  2192  0FA6  1683               	bsf	3,5	;RP0=1, select bank1
  2193  0FA7  1303               	bcf	3,6	;RP1=0, select bank1
  2194  0FA8  0843               	movf	_FMRX_Nref^(0+128),w
  2195  0FA9  1283               	bcf	3,5	;RP0=0, select bank0
  2196  0FAA  1303               	bcf	3,6	;RP1=0, select bank0
  2197  0FAB  00DC               	movwf	FMRX@Nref
  2198  0FAC  30B4               	movlw	(low (main@FMRX_Nprg| 0))& (0+255)
  2199  0FAD  00DE               	movwf	FMRX@Nprg
  2200  0FAE  3000               	movlw	0
  2201  0FAF  00DF               	movwf	FMRX@Nprg+1
  2202  0FB0  120A  158A  216A  120A  158A  	fcall	_FMRX
  2203                           
  2204                           ;main.c: 134: _delay((unsigned long)((500)*(10000000/4000.0)));
  2205  0FB5  3007               	movlw	7
  2206  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  2207  0FB7  1303               	bcf	3,6	;RP1=0, select bank0
  2208  0FB8  00E4               	movwf	??_main+2
  2209  0FB9  3058               	movlw	88
  2210  0FBA  00E3               	movwf	??_main+1
  2211  0FBB  305E               	movlw	94
  2212  0FBC  00E2               	movwf	??_main
  2213  0FBD                     u3607:	
  2214  0FBD  0BE2               	decfsz	??_main,f
  2215  0FBE  2FBD               	goto	u3607
  2216  0FBF  0BE3               	decfsz	??_main+1,f
  2217  0FC0  2FBD               	goto	u3607
  2218  0FC1  0BE4               	decfsz	??_main+2,f
  2219  0FC2  2FBD               	goto	u3607
  2220  0FC3  2FC4               	nop2
  2221                           
  2222                           ;main.c: 151: }
  2223                           
  2224                           ;main.c: 150: break;
  2225                           
  2226                           ;main.c: 148: default:
  2227                           
  2228                           ;main.c: 147: break;
  2229                           
  2230                           ;main.c: 145: case 'T':
  2231                           
  2232                           ;main.c: 144: break;
  2233                           
  2234                           ;main.c: 142: case 'N':
  2235                           
  2236                           ;main.c: 141: break;
  2237                           
  2238                           ;main.c: 139: case '3':
  2239                           
  2240                           ;main.c: 138: break;
  2241                           
  2242                           ;main.c: 136: case 'I':
  2243                           
  2244                           ;main.c: 135: break;
  2245  0FC4  2FF0               	goto	l442
  2246  0FC5                     l3826:	
  2247  0FC5  1683               	bsf	3,5	;RP0=1, select bank1
  2248  0FC6  1303               	bcf	3,6	;RP1=0, select bank1
  2249  0FC7  0840               	movf	main@dData^(0+128),w
  2250  0FC8  3E03               	addlw	3
  2251  0FC9  0084               	movwf	4
  2252  0FCA  1783               	bsf	3,7	;select IRP bank2
  2253  0FCB  0800               	movf	0,w
  2254                           
  2255                           ; Switch size 1, requested type "space"
  2256                           ; Number of cases is 5, Range of values is 51 to 84
  2257                           ; switch strategies available:
  2258                           ; Name         Instructions Cycles
  2259                           ; simple_byte           16     9 (average)
  2260                           ; direct_byte          113    11 (fixed)
  2261                           ; jumptable            263     9 (fixed)
  2262                           ;	Chosen strategy is simple_byte
  2263  0FCC  3A33               	xorlw	51	; case 51
  2264  0FCD  1903               	skipnz
  2265  0FCE  2FF0               	goto	l442
  2266  0FCF  3A76               	xorlw	118	; case 69
  2267  0FD0  1903               	skipnz
  2268  0FD1  2F1E               	goto	l3806
  2269  0FD2  3A0C               	xorlw	12	; case 73
  2270  0FD3  1903               	skipnz
  2271  0FD4  2FF0               	goto	l442
  2272  0FD5  3A07               	xorlw	7	; case 78
  2273  0FD6  1903               	skipnz
  2274  0FD7  2FF0               	goto	l442
  2275  0FD8  3A1A               	xorlw	26	; case 84
  2276  0FD9  1903               	skipnz
  2277  0FDA  2FF0               	goto	l442
  2278  0FDB  2FF0               	goto	l442
  2279                           
  2280                           ;main.c: 155: }
  2281                           ;main.c: 156: }else{
  2282                           
  2283                           ;main.c: 153: }else if(dData[2] == 't'){
  2284  0FDC  2FF0               	goto	l442
  2285  0FDD                     l443:	
  2286                           
  2287                           ;main.c: 157: RB2 = 1;
  2288  0FDD  1283               	bcf	3,5	;RP0=0, select bank0
  2289  0FDE  1303               	bcf	3,6	;RP1=0, select bank0
  2290  0FDF  1506               	bsf	6,2	;volatile
  2291                           
  2292                           ;main.c: 158: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2293  0FE0  300D               	movlw	13
  2294  0FE1  00E4               	movwf	??_main+2
  2295  0FE2  30AF               	movlw	175
  2296  0FE3  00E3               	movwf	??_main+1
  2297  0FE4  30C1               	movlw	193
  2298  0FE5  00E2               	movwf	??_main
  2299  0FE6                     u3617:	
  2300  0FE6  0BE2               	decfsz	??_main,f
  2301  0FE7  2FE6               	goto	u3617
  2302  0FE8  0BE3               	decfsz	??_main+1,f
  2303  0FE9  2FE6               	goto	u3617
  2304  0FEA  0BE4               	decfsz	??_main+2,f
  2305  0FEB  2FE6               	goto	u3617
  2306  0FEC  0000               	nop
  2307                           
  2308                           ;main.c: 159: RB2 = 0;
  2309  0FED  1283               	bcf	3,5	;RP0=0, select bank0
  2310  0FEE  1303               	bcf	3,6	;RP1=0, select bank0
  2311  0FEF  1106               	bcf	6,2	;volatile
  2312  0FF0                     l442:	
  2313                           
  2314                           ;main.c: 160: }
  2315                           ;main.c: 204: _delay((unsigned long)((500)*(10000000/4000.0)));
  2316  0FF0  3007               	movlw	7
  2317  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  2318  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
  2319  0FF3  00E4               	movwf	??_main+2
  2320  0FF4  3058               	movlw	88
  2321  0FF5  00E3               	movwf	??_main+1
  2322  0FF6  305E               	movlw	94
  2323  0FF7  00E2               	movwf	??_main
  2324  0FF8                     u3627:	
  2325  0FF8  0BE2               	decfsz	??_main,f
  2326  0FF9  2FF8               	goto	u3627
  2327  0FFA  0BE3               	decfsz	??_main+1,f
  2328  0FFB  2FF8               	goto	u3627
  2329  0FFC  0BE4               	decfsz	??_main+2,f
  2330  0FFD  2FF8               	goto	u3627
  2331  0FFE  2FFF               	nop2
  2332  0FFF  2EB4               	goto	l3782
  2333  1000                     __end_of_main:	
  2334                           ;main.c: 205: }
  2335                           ;main.c: 206: return;
  2336                           
  2337                           
  2338                           	psect	text1
  2339  08BD                     __ptext1:	
  2340 ;; *************** function _printf *****************
  2341 ;; Defined at:
  2342 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  2343 ;; Parameters:    Size  Location     Type
  2344 ;;  f               1    wreg     PTR const unsigned char 
  2345 ;;		 -> STR_15(8), 
  2346 ;; Auto vars:     Size  Location     Type
  2347 ;;  f               1    4[COMMON] PTR const unsigned char 
  2348 ;;		 -> STR_15(8), 
  2349 ;;  tmpval          4    0        struct .
  2350 ;;  cp              2    0        PTR const unsigned char 
  2351 ;;  len             2    0        unsigned int 
  2352 ;;  val             2    0        unsigned int 
  2353 ;;  c               1    3[COMMON] char 
  2354 ;;  ap              1    2[COMMON] PTR void [1]
  2355 ;;		 -> ?_printf(2), 
  2356 ;;  flag            1    0        unsigned char 
  2357 ;;  prec            1    0        char 
  2358 ;; Return value:  Size  Location     Type
  2359 ;;                  2  415[None  ] int 
  2360 ;; Registers used:
  2361 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2362 ;; Tracked objects:
  2363 ;;		On entry : 0/0
  2364 ;;		On exit  : 0/0
  2365 ;;		Unchanged: 0/0
  2366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2367 ;;      Params:         0       0       0       0       0
  2368 ;;      Locals:         3       0       0       0       0
  2369 ;;      Temps:          1       0       0       0       0
  2370 ;;      Totals:         4       0       0       0       0
  2371 ;;Total ram usage:        4 bytes
  2372 ;; Hardware stack levels used:    1
  2373 ;; Hardware stack levels required when called:    1
  2374 ;; This function calls:
  2375 ;;		_putch
  2376 ;; This function is called by:
  2377 ;;		_main
  2378 ;; This function uses a non-reentrant model
  2379 ;;
  2380                           
  2381                           
  2382                           ;psect for function _printf
  2383  08BD                     _printf:	
  2384                           
  2385                           ;incstack = 0
  2386                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2387                           ;printf@f stored from wreg
  2388  08BD  00F4               	movwf	printf@f
  2389                           
  2390                           ;doprnt.c: 466: va_list ap;
  2391                           ;doprnt.c: 499: signed char c;
  2392                           ;doprnt.c: 506: signed char prec;
  2393                           ;doprnt.c: 508: unsigned char flag;
  2394                           ;doprnt.c: 523: union {
  2395                           ;doprnt.c: 524: unsigned long vd;
  2396                           ;doprnt.c: 525: double integ;
  2397                           ;doprnt.c: 526: } tmpval;
  2398                           ;doprnt.c: 528: unsigned int val;
  2399                           ;doprnt.c: 529: unsigned len;
  2400                           ;doprnt.c: 530: const char * cp;
  2401                           ;doprnt.c: 533: *ap = __va_start();
  2402  08BE  3070               	movlw	(low (?_printf| 0))& (0+255)
  2403  08BF  00F1               	movwf	??_printf
  2404  08C0  0871               	movf	??_printf,w
  2405  08C1  00F2               	movwf	printf@ap
  2406  08C2                     l3498:	
  2407                           ;doprnt.c: 543: }
  2408                           ;doprnt.c: 1422: {
  2409                           
  2410                           ;doprnt.c: 542: continue;
  2411                           
  2412                           ;doprnt.c: 536: while(c = *f++) {
  2413                           
  2414  08C2  3001               	movlw	1
  2415  08C3  07F4               	addwf	printf@f,f
  2416  08C4  30FF               	movlw	-1
  2417  08C5  0774               	addwf	printf@f,w
  2418  08C6  0084               	movwf	4
  2419  08C7  120A  158A  2000  120A  158A  	fcall	stringdir
  2420  08CC  00F1               	movwf	??_printf
  2421  08CD  0871               	movf	??_printf,w
  2422  08CE  00F3               	movwf	printf@c
  2423  08CF  0873               	movf	printf@c,w
  2424  08D0  1903               	btfsc	3,2
  2425  08D1  0008               	return
  2426                           
  2427                           ;doprnt.c: 540: {
  2428                           ;doprnt.c: 541: (putch(c) );
  2429  08D2  0873               	movf	printf@c,w
  2430  08D3  120A  158A  2020  120A  158A  	fcall	_putch
  2431  08D8  28C2               	goto	l3498
  2432  08D9                     __end_of_printf:	
  2433                           ;doprnt.c: 1469: }
  2434                           ;doprnt.c: 1533: }
  2435                           ;doprnt.c: 1540: return 0;
  2436                           ;	Return value of _printf is never used
  2437                           
  2438                           
  2439                           	psect	text2
  2440  08F6                     __ptext2:	
  2441 ;; *************** function _TXOBC_waddress *****************
  2442 ;; Defined at:
  2443 ;;		line 78 in file "UART.c"
  2444 ;; Parameters:    Size  Location     Type
  2445 ;;  TXOBC_wad_he    1    wreg     unsigned char 
  2446 ;;  whigh_addres    1    1[COMMON] unsigned char 
  2447 ;;  wlow_address    1    2[COMMON] unsigned char 
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;  TXOBC_wad_he    1    5[COMMON] unsigned char 
  2450 ;; Return value:  Size  Location     Type
  2451 ;;                  1    wreg      void 
  2452 ;; Registers used:
  2453 ;;		wreg, status,2, status,0, pclath, cstack
  2454 ;; Tracked objects:
  2455 ;;		On entry : 0/0
  2456 ;;		On exit  : 0/0
  2457 ;;		Unchanged: 0/0
  2458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2459 ;;      Params:         2       0       0       0       0
  2460 ;;      Locals:         1       0       0       0       0
  2461 ;;      Temps:          2       0       0       0       0
  2462 ;;      Totals:         5       0       0       0       0
  2463 ;;Total ram usage:        5 bytes
  2464 ;; Hardware stack levels used:    1
  2465 ;; Hardware stack levels required when called:    1
  2466 ;; This function calls:
  2467 ;;		_putch
  2468 ;; This function is called by:
  2469 ;;		_main
  2470 ;; This function uses a non-reentrant model
  2471 ;;
  2472                           
  2473                           
  2474                           ;psect for function _TXOBC_waddress
  2475  08F6                     _TXOBC_waddress:	
  2476                           
  2477                           ;incstack = 0
  2478                           ; Regs used in _TXOBC_waddress: [wreg+status,2+status,0+pclath+cstack]
  2479                           ;TXOBC_waddress@TXOBC_wad_header stored from wreg
  2480  08F6  00F5               	movwf	TXOBC_waddress@TXOBC_wad_header
  2481                           
  2482                           ;UART.c: 79: RC5 = 1;
  2483  08F7  1283               	bcf	3,5	;RP0=0, select bank0
  2484  08F8  1303               	bcf	3,6	;RP1=0, select bank0
  2485  08F9  1687               	bsf	7,5	;volatile
  2486                           
  2487                           ;UART.c: 80: _delay((unsigned long)((50)*(10000000/4000.0)));
  2488  08FA  30A3               	movlw	163
  2489  08FB  00F4               	movwf	??_TXOBC_waddress+1
  2490  08FC  3055               	movlw	85
  2491  08FD  00F3               	movwf	??_TXOBC_waddress
  2492  08FE                     u3637:	
  2493  08FE  0BF3               	decfsz	??_TXOBC_waddress,f
  2494  08FF  28FE               	goto	u3637
  2495  0900  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2496  0901  28FE               	goto	u3637
  2497                           
  2498                           ;UART.c: 81: putch(TXOBC_wad_header);
  2499  0902  0875               	movf	TXOBC_waddress@TXOBC_wad_header,w
  2500  0903  120A  158A  2020  120A  158A  	fcall	_putch
  2501                           
  2502                           ;UART.c: 82: putch(whigh_address);
  2503  0908  0871               	movf	TXOBC_waddress@whigh_address,w
  2504  0909  120A  158A  2020  120A  158A  	fcall	_putch
  2505                           
  2506                           ;UART.c: 83: putch(wlow_address);
  2507  090E  0872               	movf	TXOBC_waddress@wlow_address,w
  2508  090F  120A  158A  2020   	fcall	_putch
  2509                           
  2510                           ;UART.c: 84: RC5 = 0;
  2511  0912  1283               	bcf	3,5	;RP0=0, select bank0
  2512  0913  1303               	bcf	3,6	;RP1=0, select bank0
  2513  0914  1287               	bcf	7,5	;volatile
  2514  0915  0008               	return
  2515  0916                     __end_of_TXOBC_waddress:	
  2516                           
  2517                           	psect	text3
  2518  0007                     __ptext3:	
  2519 ;; *************** function _Reset_EPS *****************
  2520 ;; Defined at:
  2521 ;;		line 19 in file "EPS.c"
  2522 ;; Parameters:    Size  Location     Type
  2523 ;;		None
  2524 ;; Auto vars:     Size  Location     Type
  2525 ;;		None
  2526 ;; Return value:  Size  Location     Type
  2527 ;;                  1    wreg      void 
  2528 ;; Registers used:
  2529 ;;		wreg
  2530 ;; Tracked objects:
  2531 ;;		On entry : 0/0
  2532 ;;		On exit  : 0/0
  2533 ;;		Unchanged: 0/0
  2534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2535 ;;      Params:         0       0       0       0       0
  2536 ;;      Locals:         0       0       0       0       0
  2537 ;;      Temps:          3       0       0       0       0
  2538 ;;      Totals:         3       0       0       0       0
  2539 ;;Total ram usage:        3 bytes
  2540 ;; Hardware stack levels used:    1
  2541 ;; This function calls:
  2542 ;;		Nothing
  2543 ;; This function is called by:
  2544 ;;		_main
  2545 ;; This function uses a non-reentrant model
  2546 ;;
  2547                           
  2548                           
  2549                           ;psect for function _Reset_EPS
  2550  0007                     _Reset_EPS:	
  2551                           
  2552                           ;EPS.c: 20: RB4 = 1;
  2553                           
  2554                           ;incstack = 0
  2555                           ; Regs used in _Reset_EPS: [wreg]
  2556  0007  1283               	bcf	3,5	;RP0=0, select bank0
  2557  0008  1303               	bcf	3,6	;RP1=0, select bank0
  2558  0009  1606               	bsf	6,4	;volatile
  2559                           
  2560                           ;EPS.c: 21: RA1 = 1;
  2561  000A  1485               	bsf	5,1	;volatile
  2562                           
  2563                           ;EPS.c: 22: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2564  000B  3040               	movlw	64
  2565  000C  00F2               	movwf	??_Reset_EPS+2
  2566  000D  306A               	movlw	106
  2567  000E  00F1               	movwf	??_Reset_EPS+1
  2568  000F  30D5               	movlw	213
  2569  0010  00F0               	movwf	??_Reset_EPS
  2570  0011                     u3647:	
  2571  0011  0BF0               	decfsz	??_Reset_EPS,f
  2572  0012  2811               	goto	u3647
  2573  0013  0BF1               	decfsz	??_Reset_EPS+1,f
  2574  0014  2811               	goto	u3647
  2575  0015  0BF2               	decfsz	??_Reset_EPS+2,f
  2576  0016  2811               	goto	u3647
  2577  0017  2818               	nop2
  2578                           
  2579                           ;EPS.c: 23: RB4 = 0;
  2580  0018  1283               	bcf	3,5	;RP0=0, select bank0
  2581  0019  1303               	bcf	3,6	;RP1=0, select bank0
  2582  001A  1206               	bcf	6,4	;volatile
  2583                           
  2584                           ;EPS.c: 24: RA1 = 0;
  2585  001B  1085               	bcf	5,1	;volatile
  2586                           
  2587                           ;EPS.c: 25: _delay((unsigned long)((500)*(10000000/4000.0)));
  2588  001C  3007               	movlw	7
  2589  001D  00F2               	movwf	??_Reset_EPS+2
  2590  001E  3058               	movlw	88
  2591  001F  00F1               	movwf	??_Reset_EPS+1
  2592  0020  305E               	movlw	94
  2593  0021  00F0               	movwf	??_Reset_EPS
  2594  0022                     u3657:	
  2595  0022  0BF0               	decfsz	??_Reset_EPS,f
  2596  0023  2822               	goto	u3657
  2597  0024  0BF1               	decfsz	??_Reset_EPS+1,f
  2598  0025  2822               	goto	u3657
  2599  0026  0BF2               	decfsz	??_Reset_EPS+2,f
  2600  0027  2822               	goto	u3657
  2601  0028  2829               	nop2
  2602  0029  0008               	return
  2603  002A                     __end_of_Reset_EPS:	
  2604                           
  2605                           	psect	text4
  2606  0C71                     __ptext4:	
  2607 ;; *************** function _ReceivePacket_data *****************
  2608 ;; Defined at:
  2609 ;;		line 359 in file "decode_AX25.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;		None
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;  i               2   31[BANK0 ] unsigned int 
  2614 ;;  fcschecker      2   29[BANK0 ] unsigned int 
  2615 ;; Return value:  Size  Location     Type
  2616 ;;                  1    wreg      PTR unsigned char 
  2617 ;; Registers used:
  2618 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2619 ;; Tracked objects:
  2620 ;;		On entry : 0/0
  2621 ;;		On exit  : 0/0
  2622 ;;		Unchanged: 0/0
  2623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2624 ;;      Params:         0       0       0       0       0
  2625 ;;      Locals:         0       4       0       0       0
  2626 ;;      Temps:          2       0       0       0       0
  2627 ;;      Totals:         2       4       0       0       0
  2628 ;;Total ram usage:        6 bytes
  2629 ;; Hardware stack levels used:    1
  2630 ;; Hardware stack levels required when called:    2
  2631 ;; This function calls:
  2632 ;;		_fcscheck
  2633 ;;		_getdata
  2634 ;;		_waitFlag
  2635 ;; This function is called by:
  2636 ;;		_main
  2637 ;; This function uses a non-reentrant model
  2638 ;;
  2639                           
  2640                           
  2641                           ;psect for function _ReceivePacket_data
  2642  0C71                     _ReceivePacket_data:	
  2643                           
  2644                           ;decode_AX25.c: 360: UINT fcschecker;
  2645                           ;decode_AX25.c: 363: waitFlag();
  2646                           
  2647                           ;incstack = 0
  2648                           ; Regs used in _ReceivePacket_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2649  0C71  120A  118A  2327  120A  158A  	fcall	_waitFlag
  2650                           
  2651                           ;decode_AX25.c: 365: getdata();
  2652  0C76  120A  158A  2410  120A  158A  	fcall	_getdata
  2653                           
  2654                           ;decode_AX25.c: 367: fcschecker = fcscheck();
  2655  0C7B  120A  118A  202A  120A  158A  	fcall	_fcscheck
  2656  0C80  0871               	movf	?_fcscheck+1,w
  2657  0C81  1283               	bcf	3,5	;RP0=0, select bank0
  2658  0C82  1303               	bcf	3,6	;RP1=0, select bank0
  2659  0C83  00BE               	movwf	ReceivePacket_data@fcschecker+1
  2660  0C84  0870               	movf	?_fcscheck,w
  2661  0C85  00BD               	movwf	ReceivePacket_data@fcschecker
  2662                           
  2663                           ;decode_AX25.c: 369: if(fcschecker == 1){
  2664  0C86  033D               	decf	ReceivePacket_data@fcschecker,w
  2665  0C87  043E               	iorwf	ReceivePacket_data@fcschecker+1,w
  2666  0C88  1D03               	btfss	3,2
  2667  0C89  2CD0               	goto	l3408
  2668                           
  2669                           ;decode_AX25.c: 370: for(UINT i=0; i<commandSize; i++){
  2670  0C8A  01BF               	clrf	ReceivePacket_data@i
  2671  0C8B  01C0               	clrf	ReceivePacket_data@i+1
  2672  0C8C  3001               	movlw	low (_commandSize-__stringbase)
  2673  0C8D  0084               	movwf	4
  2674  0C8E  120A  158A  2000  120A  158A  	fcall	stringdir
  2675  0C93  00FA               	movwf	??_ReceivePacket_data
  2676  0C94  120A  158A  2000  120A  158A  	fcall	stringdir
  2677  0C99  00FB               	movwf	??_ReceivePacket_data+1
  2678  0C9A  087B               	movf	??_ReceivePacket_data+1,w
  2679  0C9B  0240               	subwf	ReceivePacket_data@i+1,w
  2680  0C9C  1D03               	skipz
  2681  0C9D  2CA0               	goto	u3085
  2682  0C9E  087A               	movf	??_ReceivePacket_data,w
  2683  0C9F  023F               	subwf	ReceivePacket_data@i,w
  2684  0CA0                     u3085:	
  2685  0CA0  1803               	btfsc	3,0
  2686  0CA1  2CCA               	goto	l3400
  2687  0CA2                     l3394:	
  2688                           
  2689                           ;decode_AX25.c: 371: dData[i] = dPacket[i+20];
  2690  0CA2  083F               	movf	ReceivePacket_data@i,w
  2691  0CA3  3E14               	addlw	20
  2692  0CA4  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2693  0CA5  0084               	movwf	4
  2694  0CA6  1783               	bsf	3,7	;select IRP bank3
  2695  0CA7  0800               	movf	0,w
  2696  0CA8  00FA               	movwf	??_ReceivePacket_data
  2697  0CA9  083F               	movf	ReceivePacket_data@i,w
  2698  0CAA  3E30               	addlw	(low (_dData| (0+256)))& (0+255)
  2699  0CAB  0084               	movwf	4
  2700  0CAC  087A               	movf	??_ReceivePacket_data,w
  2701  0CAD  0080               	movwf	0
  2702  0CAE  3001               	movlw	1
  2703  0CAF  07BF               	addwf	ReceivePacket_data@i,f
  2704  0CB0  1803               	skipnc
  2705  0CB1  0AC0               	incf	ReceivePacket_data@i+1,f
  2706  0CB2  3000               	movlw	0
  2707  0CB3  07C0               	addwf	ReceivePacket_data@i+1,f
  2708  0CB4  3001               	movlw	low (_commandSize-__stringbase)
  2709  0CB5  0084               	movwf	4
  2710  0CB6  120A  158A  2000  120A  158A  	fcall	stringdir
  2711  0CBB  00FA               	movwf	??_ReceivePacket_data
  2712  0CBC  120A  158A  2000  120A  158A  	fcall	stringdir
  2713  0CC1  00FB               	movwf	??_ReceivePacket_data+1
  2714  0CC2  087B               	movf	??_ReceivePacket_data+1,w
  2715  0CC3  0240               	subwf	ReceivePacket_data@i+1,w
  2716  0CC4  1D03               	skipz
  2717  0CC5  2CC8               	goto	u3095
  2718  0CC6  087A               	movf	??_ReceivePacket_data,w
  2719  0CC7  023F               	subwf	ReceivePacket_data@i,w
  2720  0CC8                     u3095:	
  2721  0CC8  1C03               	skipc
  2722  0CC9  2CA2               	goto	l3394
  2723  0CCA                     l3400:	
  2724                           
  2725                           ;decode_AX25.c: 372: }
  2726                           ;decode_AX25.c: 373: dPacketnum = 0;
  2727  0CCA  01E6               	clrf	_dPacketnum
  2728  0CCB  01E7               	clrf	_dPacketnum+1
  2729                           
  2730                           ;decode_AX25.c: 374: rcv_state = 0;
  2731  0CCC  01EA               	clrf	_rcv_state
  2732  0CCD  01EB               	clrf	_rcv_state+1
  2733                           
  2734                           ;decode_AX25.c: 375: return dData;
  2735  0CCE  3030               	movlw	(low (_dData| (0+256)))& (0+255)
  2736                           
  2737                           ;decode_AX25.c: 376: }else{
  2738  0CCF  0008               	return
  2739  0CD0                     l3408:	
  2740                           
  2741                           ;decode_AX25.c: 377: dPacketnum = 0;
  2742  0CD0  01E6               	clrf	_dPacketnum
  2743  0CD1  01E7               	clrf	_dPacketnum+1
  2744                           
  2745                           ;decode_AX25.c: 378: rcv_state = 0;
  2746  0CD2  01EA               	clrf	_rcv_state
  2747  0CD3  01EB               	clrf	_rcv_state+1
  2748                           
  2749                           ;decode_AX25.c: 379: return 0x00;
  2750  0CD4  3000               	movlw	0
  2751  0CD5  0008               	return
  2752  0CD6                     __end_of_ReceivePacket_data:	
  2753                           
  2754                           	psect	text5
  2755  0327                     __ptext5:	
  2756 ;; *************** function _waitFlag *****************
  2757 ;; Defined at:
  2758 ;;		line 54 in file "decode_AX25.c"
  2759 ;; Parameters:    Size  Location     Type
  2760 ;;		None
  2761 ;; Auto vars:     Size  Location     Type
  2762 ;;  j               2   24[BANK0 ] unsigned int 
  2763 ;;  j               2   10[BANK0 ] unsigned int 
  2764 ;;  j               2   22[BANK0 ] unsigned int 
  2765 ;;  j               2    8[BANK0 ] unsigned int 
  2766 ;;  j               2   20[BANK0 ] unsigned int 
  2767 ;;  j               2    6[BANK0 ] unsigned int 
  2768 ;;  j               2   18[BANK0 ] unsigned int 
  2769 ;;  j               2    4[BANK0 ] unsigned int 
  2770 ;;  j               2   16[BANK0 ] unsigned int 
  2771 ;;  j               2    2[BANK0 ] unsigned int 
  2772 ;;  i               2    0[BANK0 ] unsigned int 
  2773 ;;  j               2   14[BANK0 ] unsigned int 
  2774 ;;  j               2   12[BANK0 ] unsigned int 
  2775 ;;  flag_judge      2   26[BANK0 ] unsigned int 
  2776 ;;  buf             1   28[BANK0 ] unsigned char 
  2777 ;; Return value:  Size  Location     Type
  2778 ;;                  1    wreg      void 
  2779 ;; Registers used:
  2780 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2781 ;; Tracked objects:
  2782 ;;		On entry : 0/0
  2783 ;;		On exit  : 0/0
  2784 ;;		Unchanged: 0/0
  2785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2786 ;;      Params:         0       0       0       0       0
  2787 ;;      Locals:         0      29       0       0       0
  2788 ;;      Temps:          4       0       0       0       0
  2789 ;;      Totals:         4      29       0       0       0
  2790 ;;Total ram usage:       33 bytes
  2791 ;; Hardware stack levels used:    1
  2792 ;; Hardware stack levels required when called:    1
  2793 ;; This function calls:
  2794 ;;		_getbit
  2795 ;; This function is called by:
  2796 ;;		_ReceivePacket_data
  2797 ;;		_ReceivePacket
  2798 ;; This function uses a non-reentrant model
  2799 ;;
  2800                           
  2801                           
  2802                           ;psect for function _waitFlag
  2803  0327                     _waitFlag:	
  2804                           
  2805                           ;decode_AX25.c: 55: UINT flag_judge;
  2806                           ;decode_AX25.c: 56: UBYTE buf = 0xff;
  2807                           
  2808                           ;incstack = 0
  2809                           ; Regs used in _waitFlag: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2810  0327  30FF               	movlw	255
  2811  0328  00F6               	movwf	??_waitFlag
  2812  0329  0876               	movf	??_waitFlag,w
  2813  032A  1283               	bcf	3,5	;RP0=0, select bank0
  2814  032B  1303               	bcf	3,6	;RP1=0, select bank0
  2815  032C  00BC               	movwf	waitFlag@buf
  2816  032D                     L6:	
  2817                           
  2818                           ;decode_AX25.c: 271: rcv_state = 0;
  2819  032D  01EA               	clrf	_rcv_state
  2820  032E  01EB               	clrf	_rcv_state+1
  2821  032F                     l3080:	
  2822  032F  3000               	movlw	0
  2823  0330  026B               	subwf	_rcv_state+1,w
  2824  0331  3002               	movlw	2
  2825  0332  1903               	skipnz
  2826  0333  026A               	subwf	_rcv_state,w
  2827  0334  1803               	btfsc	3,0
  2828  0335  0008               	return
  2829  0336                     l2714:	
  2830                           ;decode_AX25.c: 59: while(buf != 0x7e){
  2831                           
  2832                           ;decode_AX25.c: 58: while(rcv_state < 2){
  2833                           
  2834                           ;decode_AX25.c: 57: rcv_state = 0;
  2835                           
  2836  0336  307E               	movlw	126
  2837  0337  063C               	xorwf	waitFlag@buf,w
  2838  0338  1903               	btfsc	3,2
  2839  0339  2B86               	goto	l2736
  2840                           
  2841                           ;decode_AX25.c: 60: flag_judge = getbit();
  2842  033A  120A  158A  22B0  120A  118A  	fcall	_getbit
  2843  033F  0871               	movf	?_getbit+1,w
  2844  0340  1283               	bcf	3,5	;RP0=0, select bank0
  2845  0341  1303               	bcf	3,6	;RP1=0, select bank0
  2846  0342  00BB               	movwf	waitFlag@flag_judge+1
  2847  0343  0870               	movf	?_getbit,w
  2848  0344  00BA               	movwf	waitFlag@flag_judge
  2849                           
  2850                           ;decode_AX25.c: 61: buf = buf << 1;
  2851  0345  083C               	movf	waitFlag@buf,w
  2852  0346  00F6               	movwf	??_waitFlag
  2853  0347  0776               	addwf	??_waitFlag,w
  2854  0348  00F7               	movwf	??_waitFlag+1
  2855  0349  0877               	movf	??_waitFlag+1,w
  2856  034A  00BC               	movwf	waitFlag@buf
  2857                           
  2858                           ;decode_AX25.c: 63: buf = buf | 0x00;
  2859  034B  083A               	movf	waitFlag@flag_judge,w
  2860  034C  043B               	iorwf	waitFlag@flag_judge+1,w
  2861  034D  1903               	btfsc	3,2
  2862  034E  2B36               	goto	l2714
  2863                           
  2864                           ;decode_AX25.c: 65: buf = buf | 0x01;
  2865                           
  2866                           ;decode_AX25.c: 64: }else{
  2867  034F  083C               	movf	waitFlag@buf,w
  2868  0350  3801               	iorlw	1
  2869  0351  00F6               	movwf	??_waitFlag
  2870  0352  0876               	movf	??_waitFlag,w
  2871  0353  00BC               	movwf	waitFlag@buf
  2872  0354  2B36               	goto	l2714
  2873  0355                     l2716:	
  2874                           ;decode_AX25.c: 66: }
  2875                           ;decode_AX25.c: 67: }
  2876                           ;decode_AX25.c: 71: while(buf == 0x7e){
  2877                           
  2878                           
  2879                           ;decode_AX25.c: 72: for(UINT i=0;i<8;i++){
  2880  0355  01A0               	clrf	waitFlag@i
  2881  0356  01A1               	clrf	waitFlag@i+1
  2882  0357  3000               	movlw	0
  2883  0358  0221               	subwf	waitFlag@i+1,w
  2884  0359  3008               	movlw	8
  2885  035A  1903               	skipnz
  2886  035B  0220               	subwf	waitFlag@i,w
  2887  035C  1803               	btfsc	3,0
  2888  035D  2B86               	goto	l2736
  2889  035E                     l2722:	
  2890                           
  2891                           ;decode_AX25.c: 73: flag_judge = getbit();
  2892  035E  120A  158A  22B0  120A  118A  	fcall	_getbit
  2893  0363  0871               	movf	?_getbit+1,w
  2894  0364  1283               	bcf	3,5	;RP0=0, select bank0
  2895  0365  1303               	bcf	3,6	;RP1=0, select bank0
  2896  0366  00BB               	movwf	waitFlag@flag_judge+1
  2897  0367  0870               	movf	?_getbit,w
  2898  0368  00BA               	movwf	waitFlag@flag_judge
  2899                           
  2900                           ;decode_AX25.c: 74: buf = buf >> 1;
  2901  0369  083C               	movf	waitFlag@buf,w
  2902  036A  00F6               	movwf	??_waitFlag
  2903  036B  1003               	clrc
  2904  036C  0C76               	rrf	??_waitFlag,w
  2905  036D  00F7               	movwf	??_waitFlag+1
  2906  036E  0877               	movf	??_waitFlag+1,w
  2907  036F  00BC               	movwf	waitFlag@buf
  2908                           
  2909                           ;decode_AX25.c: 76: buf = buf | 0x00;
  2910  0370  083A               	movf	waitFlag@flag_judge,w
  2911  0371  043B               	iorwf	waitFlag@flag_judge+1,w
  2912  0372  1903               	btfsc	3,2
  2913  0373  2B79               	goto	l2732
  2914                           
  2915                           ;decode_AX25.c: 78: buf = buf | 0x80;
  2916                           
  2917                           ;decode_AX25.c: 77: }else{
  2918  0374  083C               	movf	waitFlag@buf,w
  2919  0375  3880               	iorlw	128
  2920  0376  00F6               	movwf	??_waitFlag
  2921  0377  0876               	movf	??_waitFlag,w
  2922  0378  00BC               	movwf	waitFlag@buf
  2923  0379                     l2732:	
  2924  0379  3001               	movlw	1
  2925  037A  07A0               	addwf	waitFlag@i,f
  2926  037B  1803               	skipnc
  2927  037C  0AA1               	incf	waitFlag@i+1,f
  2928  037D  3000               	movlw	0
  2929  037E  07A1               	addwf	waitFlag@i+1,f
  2930  037F  3000               	movlw	0
  2931  0380  0221               	subwf	waitFlag@i+1,w
  2932  0381  3008               	movlw	8
  2933  0382  1903               	skipnz
  2934  0383  0220               	subwf	waitFlag@i,w
  2935  0384  1C03               	skipc
  2936  0385  2B5E               	goto	l2722
  2937  0386                     l2736:	
  2938  0386  307E               	movlw	126
  2939  0387  063C               	xorwf	waitFlag@buf,w
  2940  0388  1903               	btfsc	3,2
  2941  0389  2B55               	goto	l2716
  2942                           
  2943                           ;decode_AX25.c: 79: }
  2944                           ;decode_AX25.c: 80: }
  2945                           ;decode_AX25.c: 81: }
  2946                           ;decode_AX25.c: 82: if(buf == ("JQ1YCZ"[0] << 1)){
  2947  038A  3012               	movlw	low (STR_1-__stringbase)
  2948  038B  0084               	movwf	4
  2949  038C  120A  158A  2000  120A  118A  	fcall	stringdir
  2950  0391  00F6               	movwf	??_waitFlag
  2951  0392  01F7               	clrf	??_waitFlag+1
  2952  0393  1003               	clrc
  2953  0394  0DF6               	rlf	??_waitFlag,f
  2954  0395  0DF7               	rlf	??_waitFlag+1,f
  2955  0396  083C               	movf	waitFlag@buf,w
  2956  0397  00F8               	movwf	??_waitFlag+2
  2957  0398  01F9               	clrf	??_waitFlag+3
  2958  0399  0877               	movf	??_waitFlag+1,w
  2959  039A  0679               	xorwf	??_waitFlag+3,w
  2960  039B  1D03               	skipz
  2961  039C  2B9F               	goto	u2175
  2962  039D  0876               	movf	??_waitFlag,w
  2963  039E  0678               	xorwf	??_waitFlag+2,w
  2964  039F                     u2175:	
  2965  039F  1D03               	skipz
  2966  03A0  2D64               	goto	l2886
  2967                           
  2968                           ;decode_AX25.c: 83: dPacket[dPacketnum] = buf;
  2969  03A1  083C               	movf	waitFlag@buf,w
  2970  03A2  00F6               	movwf	??_waitFlag
  2971  03A3  0866               	movf	_dPacketnum,w
  2972  03A4  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2973  03A5  0084               	movwf	4
  2974  03A6  0876               	movf	??_waitFlag,w
  2975  03A7  1783               	bsf	3,7	;select IRP bank3
  2976  03A8  0080               	movwf	0
  2977                           
  2978                           ;decode_AX25.c: 84: dPacketnum ++;
  2979  03A9  3001               	movlw	1
  2980  03AA  07E6               	addwf	_dPacketnum,f
  2981  03AB  1803               	skipnc
  2982  03AC  0AE7               	incf	_dPacketnum+1,f
  2983  03AD  3000               	movlw	0
  2984  03AE  07E7               	addwf	_dPacketnum+1,f
  2985                           
  2986                           ;decode_AX25.c: 85: for(UINT j=0;j<8;j++){
  2987  03AF  01A2               	clrf	waitFlag@j
  2988  03B0  01A3               	clrf	waitFlag@j+1
  2989  03B1  3000               	movlw	0
  2990  03B2  0223               	subwf	waitFlag@j+1,w
  2991  03B3  3008               	movlw	8
  2992  03B4  1903               	skipnz
  2993  03B5  0222               	subwf	waitFlag@j,w
  2994  03B6  1803               	btfsc	3,0
  2995  03B7  2BE0               	goto	l2764
  2996  03B8                     l2750:	
  2997                           
  2998                           ;decode_AX25.c: 86: flag_judge = getbit();
  2999  03B8  120A  158A  22B0  120A  118A  	fcall	_getbit
  3000  03BD  0871               	movf	?_getbit+1,w
  3001  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  3002  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  3003  03C0  00BB               	movwf	waitFlag@flag_judge+1
  3004  03C1  0870               	movf	?_getbit,w
  3005  03C2  00BA               	movwf	waitFlag@flag_judge
  3006                           
  3007                           ;decode_AX25.c: 87: buf = buf >> 1;
  3008  03C3  083C               	movf	waitFlag@buf,w
  3009  03C4  00F6               	movwf	??_waitFlag
  3010  03C5  1003               	clrc
  3011  03C6  0C76               	rrf	??_waitFlag,w
  3012  03C7  00F7               	movwf	??_waitFlag+1
  3013  03C8  0877               	movf	??_waitFlag+1,w
  3014  03C9  00BC               	movwf	waitFlag@buf
  3015                           
  3016                           ;decode_AX25.c: 89: buf = buf | 0x00;
  3017  03CA  083A               	movf	waitFlag@flag_judge,w
  3018  03CB  043B               	iorwf	waitFlag@flag_judge+1,w
  3019  03CC  1903               	btfsc	3,2
  3020  03CD  2BD3               	goto	l2760
  3021                           
  3022                           ;decode_AX25.c: 91: buf = buf | 0x80;
  3023                           
  3024                           ;decode_AX25.c: 90: }else{
  3025  03CE  083C               	movf	waitFlag@buf,w
  3026  03CF  3880               	iorlw	128
  3027  03D0  00F6               	movwf	??_waitFlag
  3028  03D1  0876               	movf	??_waitFlag,w
  3029  03D2  00BC               	movwf	waitFlag@buf
  3030  03D3                     l2760:	
  3031  03D3  3001               	movlw	1
  3032  03D4  07A2               	addwf	waitFlag@j,f
  3033  03D5  1803               	skipnc
  3034  03D6  0AA3               	incf	waitFlag@j+1,f
  3035  03D7  3000               	movlw	0
  3036  03D8  07A3               	addwf	waitFlag@j+1,f
  3037  03D9  3000               	movlw	0
  3038  03DA  0223               	subwf	waitFlag@j+1,w
  3039  03DB  3008               	movlw	8
  3040  03DC  1903               	skipnz
  3041  03DD  0222               	subwf	waitFlag@j,w
  3042  03DE  1C03               	skipc
  3043  03DF  2BB8               	goto	l2750
  3044  03E0                     l2764:	
  3045                           
  3046                           ;decode_AX25.c: 92: }
  3047                           ;decode_AX25.c: 93: }
  3048                           ;decode_AX25.c: 94: if(buf == ("JQ1YCZ"[1] << 1)){
  3049  03E0  3013               	movlw	low (((STR_1+1)-__stringbase)| (0+32768))
  3050  03E1  0084               	movwf	4
  3051  03E2  120A  158A  2000  120A  118A  	fcall	stringdir
  3052  03E7  00F6               	movwf	??_waitFlag
  3053  03E8  01F7               	clrf	??_waitFlag+1
  3054  03E9  1003               	clrc
  3055  03EA  0DF6               	rlf	??_waitFlag,f
  3056  03EB  0DF7               	rlf	??_waitFlag+1,f
  3057  03EC  083C               	movf	waitFlag@buf,w
  3058  03ED  00F8               	movwf	??_waitFlag+2
  3059  03EE  01F9               	clrf	??_waitFlag+3
  3060  03EF  0877               	movf	??_waitFlag+1,w
  3061  03F0  0679               	xorwf	??_waitFlag+3,w
  3062  03F1  1D03               	skipz
  3063  03F2  2BF5               	goto	u2215
  3064  03F3  0876               	movf	??_waitFlag,w
  3065  03F4  0678               	xorwf	??_waitFlag+2,w
  3066  03F5                     u2215:	
  3067  03F5  1D03               	skipz
  3068  03F6  2D64               	goto	l2886
  3069                           
  3070                           ;decode_AX25.c: 95: dPacket[dPacketnum] = buf;
  3071  03F7  083C               	movf	waitFlag@buf,w
  3072  03F8  00F6               	movwf	??_waitFlag
  3073  03F9  0866               	movf	_dPacketnum,w
  3074  03FA  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3075  03FB  0084               	movwf	4
  3076  03FC  0876               	movf	??_waitFlag,w
  3077  03FD  1783               	bsf	3,7	;select IRP bank3
  3078  03FE  0080               	movwf	0
  3079                           
  3080                           ;decode_AX25.c: 96: dPacketnum ++;
  3081  03FF  3001               	movlw	1
  3082  0400  07E6               	addwf	_dPacketnum,f
  3083  0401  1803               	skipnc
  3084  0402  0AE7               	incf	_dPacketnum+1,f
  3085  0403  3000               	movlw	0
  3086  0404  07E7               	addwf	_dPacketnum+1,f
  3087                           
  3088                           ;decode_AX25.c: 97: for(UINT j=0;j<8;j++){
  3089  0405  01A4               	clrf	waitFlag@j_118
  3090  0406  01A5               	clrf	waitFlag@j_118+1
  3091  0407  3000               	movlw	0
  3092  0408  0225               	subwf	waitFlag@j_118+1,w
  3093  0409  3008               	movlw	8
  3094  040A  1903               	skipnz
  3095  040B  0224               	subwf	waitFlag@j_118,w
  3096  040C  1803               	btfsc	3,0
  3097  040D  2C36               	goto	l2790
  3098  040E                     l2776:	
  3099                           
  3100                           ;decode_AX25.c: 98: flag_judge = getbit();
  3101  040E  120A  158A  22B0  120A  118A  	fcall	_getbit
  3102  0413  0871               	movf	?_getbit+1,w
  3103  0414  1283               	bcf	3,5	;RP0=0, select bank0
  3104  0415  1303               	bcf	3,6	;RP1=0, select bank0
  3105  0416  00BB               	movwf	waitFlag@flag_judge+1
  3106  0417  0870               	movf	?_getbit,w
  3107  0418  00BA               	movwf	waitFlag@flag_judge
  3108                           
  3109                           ;decode_AX25.c: 99: buf = buf >> 1;
  3110  0419  083C               	movf	waitFlag@buf,w
  3111  041A  00F6               	movwf	??_waitFlag
  3112  041B  1003               	clrc
  3113  041C  0C76               	rrf	??_waitFlag,w
  3114  041D  00F7               	movwf	??_waitFlag+1
  3115  041E  0877               	movf	??_waitFlag+1,w
  3116  041F  00BC               	movwf	waitFlag@buf
  3117                           
  3118                           ;decode_AX25.c: 101: buf = buf | 0x00;
  3119  0420  083A               	movf	waitFlag@flag_judge,w
  3120  0421  043B               	iorwf	waitFlag@flag_judge+1,w
  3121  0422  1903               	btfsc	3,2
  3122  0423  2C29               	goto	l2786
  3123                           
  3124                           ;decode_AX25.c: 103: buf = buf | 0x80;
  3125                           
  3126                           ;decode_AX25.c: 102: }else{
  3127  0424  083C               	movf	waitFlag@buf,w
  3128  0425  3880               	iorlw	128
  3129  0426  00F6               	movwf	??_waitFlag
  3130  0427  0876               	movf	??_waitFlag,w
  3131  0428  00BC               	movwf	waitFlag@buf
  3132  0429                     l2786:	
  3133  0429  3001               	movlw	1
  3134  042A  07A4               	addwf	waitFlag@j_118,f
  3135  042B  1803               	skipnc
  3136  042C  0AA5               	incf	waitFlag@j_118+1,f
  3137  042D  3000               	movlw	0
  3138  042E  07A5               	addwf	waitFlag@j_118+1,f
  3139  042F  3000               	movlw	0
  3140  0430  0225               	subwf	waitFlag@j_118+1,w
  3141  0431  3008               	movlw	8
  3142  0432  1903               	skipnz
  3143  0433  0224               	subwf	waitFlag@j_118,w
  3144  0434  1C03               	skipc
  3145  0435  2C0E               	goto	l2776
  3146  0436                     l2790:	
  3147                           
  3148                           ;decode_AX25.c: 104: }
  3149                           ;decode_AX25.c: 105: }
  3150                           ;decode_AX25.c: 106: if(buf == ("JQ1YCZ"[2] << 1)){
  3151  0436  3014               	movlw	low (((STR_1+2)-__stringbase)| (0+32768))
  3152  0437  0084               	movwf	4
  3153  0438  120A  158A  2000  120A  118A  	fcall	stringdir
  3154  043D  00F6               	movwf	??_waitFlag
  3155  043E  01F7               	clrf	??_waitFlag+1
  3156  043F  1003               	clrc
  3157  0440  0DF6               	rlf	??_waitFlag,f
  3158  0441  0DF7               	rlf	??_waitFlag+1,f
  3159  0442  083C               	movf	waitFlag@buf,w
  3160  0443  00F8               	movwf	??_waitFlag+2
  3161  0444  01F9               	clrf	??_waitFlag+3
  3162  0445  0877               	movf	??_waitFlag+1,w
  3163  0446  0679               	xorwf	??_waitFlag+3,w
  3164  0447  1D03               	skipz
  3165  0448  2C4B               	goto	u2255
  3166  0449  0876               	movf	??_waitFlag,w
  3167  044A  0678               	xorwf	??_waitFlag+2,w
  3168  044B                     u2255:	
  3169  044B  1D03               	skipz
  3170  044C  2D64               	goto	l2886
  3171                           
  3172                           ;decode_AX25.c: 107: dPacket[dPacketnum] = buf;
  3173  044D  083C               	movf	waitFlag@buf,w
  3174  044E  00F6               	movwf	??_waitFlag
  3175  044F  0866               	movf	_dPacketnum,w
  3176  0450  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3177  0451  0084               	movwf	4
  3178  0452  0876               	movf	??_waitFlag,w
  3179  0453  1783               	bsf	3,7	;select IRP bank3
  3180  0454  0080               	movwf	0
  3181                           
  3182                           ;decode_AX25.c: 108: dPacketnum ++;
  3183  0455  3001               	movlw	1
  3184  0456  07E6               	addwf	_dPacketnum,f
  3185  0457  1803               	skipnc
  3186  0458  0AE7               	incf	_dPacketnum+1,f
  3187  0459  3000               	movlw	0
  3188  045A  07E7               	addwf	_dPacketnum+1,f
  3189                           
  3190                           ;decode_AX25.c: 109: for(UINT j=0;j<8;j++){
  3191  045B  01A6               	clrf	waitFlag@j_120
  3192  045C  01A7               	clrf	waitFlag@j_120+1
  3193  045D  3000               	movlw	0
  3194  045E  0227               	subwf	waitFlag@j_120+1,w
  3195  045F  3008               	movlw	8
  3196  0460  1903               	skipnz
  3197  0461  0226               	subwf	waitFlag@j_120,w
  3198  0462  1803               	btfsc	3,0
  3199  0463  2C8C               	goto	l2816
  3200  0464                     l2802:	
  3201                           
  3202                           ;decode_AX25.c: 110: flag_judge = getbit();
  3203  0464  120A  158A  22B0  120A  118A  	fcall	_getbit
  3204  0469  0871               	movf	?_getbit+1,w
  3205  046A  1283               	bcf	3,5	;RP0=0, select bank0
  3206  046B  1303               	bcf	3,6	;RP1=0, select bank0
  3207  046C  00BB               	movwf	waitFlag@flag_judge+1
  3208  046D  0870               	movf	?_getbit,w
  3209  046E  00BA               	movwf	waitFlag@flag_judge
  3210                           
  3211                           ;decode_AX25.c: 111: buf = buf >> 1;
  3212  046F  083C               	movf	waitFlag@buf,w
  3213  0470  00F6               	movwf	??_waitFlag
  3214  0471  1003               	clrc
  3215  0472  0C76               	rrf	??_waitFlag,w
  3216  0473  00F7               	movwf	??_waitFlag+1
  3217  0474  0877               	movf	??_waitFlag+1,w
  3218  0475  00BC               	movwf	waitFlag@buf
  3219                           
  3220                           ;decode_AX25.c: 113: buf = buf | 0x00;
  3221  0476  083A               	movf	waitFlag@flag_judge,w
  3222  0477  043B               	iorwf	waitFlag@flag_judge+1,w
  3223  0478  1903               	btfsc	3,2
  3224  0479  2C7F               	goto	l2812
  3225                           
  3226                           ;decode_AX25.c: 115: buf = buf | 0x80;
  3227                           
  3228                           ;decode_AX25.c: 114: }else{
  3229  047A  083C               	movf	waitFlag@buf,w
  3230  047B  3880               	iorlw	128
  3231  047C  00F6               	movwf	??_waitFlag
  3232  047D  0876               	movf	??_waitFlag,w
  3233  047E  00BC               	movwf	waitFlag@buf
  3234  047F                     l2812:	
  3235  047F  3001               	movlw	1
  3236  0480  07A6               	addwf	waitFlag@j_120,f
  3237  0481  1803               	skipnc
  3238  0482  0AA7               	incf	waitFlag@j_120+1,f
  3239  0483  3000               	movlw	0
  3240  0484  07A7               	addwf	waitFlag@j_120+1,f
  3241  0485  3000               	movlw	0
  3242  0486  0227               	subwf	waitFlag@j_120+1,w
  3243  0487  3008               	movlw	8
  3244  0488  1903               	skipnz
  3245  0489  0226               	subwf	waitFlag@j_120,w
  3246  048A  1C03               	skipc
  3247  048B  2C64               	goto	l2802
  3248  048C                     l2816:	
  3249                           
  3250                           ;decode_AX25.c: 116: }
  3251                           ;decode_AX25.c: 117: }
  3252                           ;decode_AX25.c: 118: if(buf == ("JQ1YCZ"[3] << 1)){
  3253  048C  3015               	movlw	low (((STR_1+3)-__stringbase)| (0+32768))
  3254  048D  0084               	movwf	4
  3255  048E  120A  158A  2000  120A  118A  	fcall	stringdir
  3256  0493  00F6               	movwf	??_waitFlag
  3257  0494  01F7               	clrf	??_waitFlag+1
  3258  0495  1003               	clrc
  3259  0496  0DF6               	rlf	??_waitFlag,f
  3260  0497  0DF7               	rlf	??_waitFlag+1,f
  3261  0498  083C               	movf	waitFlag@buf,w
  3262  0499  00F8               	movwf	??_waitFlag+2
  3263  049A  01F9               	clrf	??_waitFlag+3
  3264  049B  0877               	movf	??_waitFlag+1,w
  3265  049C  0679               	xorwf	??_waitFlag+3,w
  3266  049D  1D03               	skipz
  3267  049E  2CA1               	goto	u2295
  3268  049F  0876               	movf	??_waitFlag,w
  3269  04A0  0678               	xorwf	??_waitFlag+2,w
  3270  04A1                     u2295:	
  3271  04A1  1D03               	skipz
  3272  04A2  2D64               	goto	l2886
  3273                           
  3274                           ;decode_AX25.c: 119: dPacket[dPacketnum] = buf;
  3275  04A3  083C               	movf	waitFlag@buf,w
  3276  04A4  00F6               	movwf	??_waitFlag
  3277  04A5  0866               	movf	_dPacketnum,w
  3278  04A6  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3279  04A7  0084               	movwf	4
  3280  04A8  0876               	movf	??_waitFlag,w
  3281  04A9  1783               	bsf	3,7	;select IRP bank3
  3282  04AA  0080               	movwf	0
  3283                           
  3284                           ;decode_AX25.c: 120: dPacketnum ++;
  3285  04AB  3001               	movlw	1
  3286  04AC  07E6               	addwf	_dPacketnum,f
  3287  04AD  1803               	skipnc
  3288  04AE  0AE7               	incf	_dPacketnum+1,f
  3289  04AF  3000               	movlw	0
  3290  04B0  07E7               	addwf	_dPacketnum+1,f
  3291                           
  3292                           ;decode_AX25.c: 121: for(UINT j=0;j<8;j++){
  3293  04B1  01A8               	clrf	waitFlag@j_122
  3294  04B2  01A9               	clrf	waitFlag@j_122+1
  3295  04B3  3000               	movlw	0
  3296  04B4  0229               	subwf	waitFlag@j_122+1,w
  3297  04B5  3008               	movlw	8
  3298  04B6  1903               	skipnz
  3299  04B7  0228               	subwf	waitFlag@j_122,w
  3300  04B8  1803               	btfsc	3,0
  3301  04B9  2CE2               	goto	l2842
  3302  04BA                     l2828:	
  3303                           
  3304                           ;decode_AX25.c: 122: flag_judge = getbit();
  3305  04BA  120A  158A  22B0  120A  118A  	fcall	_getbit
  3306  04BF  0871               	movf	?_getbit+1,w
  3307  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  3308  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  3309  04C2  00BB               	movwf	waitFlag@flag_judge+1
  3310  04C3  0870               	movf	?_getbit,w
  3311  04C4  00BA               	movwf	waitFlag@flag_judge
  3312                           
  3313                           ;decode_AX25.c: 123: buf = buf >> 1;
  3314  04C5  083C               	movf	waitFlag@buf,w
  3315  04C6  00F6               	movwf	??_waitFlag
  3316  04C7  1003               	clrc
  3317  04C8  0C76               	rrf	??_waitFlag,w
  3318  04C9  00F7               	movwf	??_waitFlag+1
  3319  04CA  0877               	movf	??_waitFlag+1,w
  3320  04CB  00BC               	movwf	waitFlag@buf
  3321                           
  3322                           ;decode_AX25.c: 125: buf = buf | 0x00;
  3323  04CC  083A               	movf	waitFlag@flag_judge,w
  3324  04CD  043B               	iorwf	waitFlag@flag_judge+1,w
  3325  04CE  1903               	btfsc	3,2
  3326  04CF  2CD5               	goto	l2838
  3327                           
  3328                           ;decode_AX25.c: 127: buf = buf | 0x80;
  3329                           
  3330                           ;decode_AX25.c: 126: }else{
  3331  04D0  083C               	movf	waitFlag@buf,w
  3332  04D1  3880               	iorlw	128
  3333  04D2  00F6               	movwf	??_waitFlag
  3334  04D3  0876               	movf	??_waitFlag,w
  3335  04D4  00BC               	movwf	waitFlag@buf
  3336  04D5                     l2838:	
  3337  04D5  3001               	movlw	1
  3338  04D6  07A8               	addwf	waitFlag@j_122,f
  3339  04D7  1803               	skipnc
  3340  04D8  0AA9               	incf	waitFlag@j_122+1,f
  3341  04D9  3000               	movlw	0
  3342  04DA  07A9               	addwf	waitFlag@j_122+1,f
  3343  04DB  3000               	movlw	0
  3344  04DC  0229               	subwf	waitFlag@j_122+1,w
  3345  04DD  3008               	movlw	8
  3346  04DE  1903               	skipnz
  3347  04DF  0228               	subwf	waitFlag@j_122,w
  3348  04E0  1C03               	skipc
  3349  04E1  2CBA               	goto	l2828
  3350  04E2                     l2842:	
  3351                           
  3352                           ;decode_AX25.c: 128: }
  3353                           ;decode_AX25.c: 129: }
  3354                           ;decode_AX25.c: 130: if(buf == ("JQ1YCZ"[4] << 1)){
  3355  04E2  3016               	movlw	low (((STR_1+4)-__stringbase)| (0+32768))
  3356  04E3  0084               	movwf	4
  3357  04E4  120A  158A  2000  120A  118A  	fcall	stringdir
  3358  04E9  00F6               	movwf	??_waitFlag
  3359  04EA  01F7               	clrf	??_waitFlag+1
  3360  04EB  1003               	clrc
  3361  04EC  0DF6               	rlf	??_waitFlag,f
  3362  04ED  0DF7               	rlf	??_waitFlag+1,f
  3363  04EE  083C               	movf	waitFlag@buf,w
  3364  04EF  00F8               	movwf	??_waitFlag+2
  3365  04F0  01F9               	clrf	??_waitFlag+3
  3366  04F1  0877               	movf	??_waitFlag+1,w
  3367  04F2  0679               	xorwf	??_waitFlag+3,w
  3368  04F3  1D03               	skipz
  3369  04F4  2CF7               	goto	u2335
  3370  04F5  0876               	movf	??_waitFlag,w
  3371  04F6  0678               	xorwf	??_waitFlag+2,w
  3372  04F7                     u2335:	
  3373  04F7  1D03               	skipz
  3374  04F8  2D64               	goto	l2886
  3375                           
  3376                           ;decode_AX25.c: 131: dPacket[dPacketnum] = buf;
  3377  04F9  083C               	movf	waitFlag@buf,w
  3378  04FA  00F6               	movwf	??_waitFlag
  3379  04FB  0866               	movf	_dPacketnum,w
  3380  04FC  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3381  04FD  0084               	movwf	4
  3382  04FE  0876               	movf	??_waitFlag,w
  3383  04FF  1783               	bsf	3,7	;select IRP bank3
  3384  0500  0080               	movwf	0
  3385                           
  3386                           ;decode_AX25.c: 132: dPacketnum ++;
  3387  0501  3001               	movlw	1
  3388  0502  07E6               	addwf	_dPacketnum,f
  3389  0503  1803               	skipnc
  3390  0504  0AE7               	incf	_dPacketnum+1,f
  3391  0505  3000               	movlw	0
  3392  0506  07E7               	addwf	_dPacketnum+1,f
  3393                           
  3394                           ;decode_AX25.c: 133: for(UINT j=0;j<8;j++){
  3395  0507  01AA               	clrf	waitFlag@j_124
  3396  0508  01AB               	clrf	waitFlag@j_124+1
  3397  0509  3000               	movlw	0
  3398  050A  022B               	subwf	waitFlag@j_124+1,w
  3399  050B  3008               	movlw	8
  3400  050C  1903               	skipnz
  3401  050D  022A               	subwf	waitFlag@j_124,w
  3402  050E  1803               	btfsc	3,0
  3403  050F  2D38               	goto	l2868
  3404  0510                     l2854:	
  3405                           
  3406                           ;decode_AX25.c: 134: flag_judge = getbit();
  3407  0510  120A  158A  22B0  120A  118A  	fcall	_getbit
  3408  0515  0871               	movf	?_getbit+1,w
  3409  0516  1283               	bcf	3,5	;RP0=0, select bank0
  3410  0517  1303               	bcf	3,6	;RP1=0, select bank0
  3411  0518  00BB               	movwf	waitFlag@flag_judge+1
  3412  0519  0870               	movf	?_getbit,w
  3413  051A  00BA               	movwf	waitFlag@flag_judge
  3414                           
  3415                           ;decode_AX25.c: 135: buf = buf >> 1;
  3416  051B  083C               	movf	waitFlag@buf,w
  3417  051C  00F6               	movwf	??_waitFlag
  3418  051D  1003               	clrc
  3419  051E  0C76               	rrf	??_waitFlag,w
  3420  051F  00F7               	movwf	??_waitFlag+1
  3421  0520  0877               	movf	??_waitFlag+1,w
  3422  0521  00BC               	movwf	waitFlag@buf
  3423                           
  3424                           ;decode_AX25.c: 137: buf = buf | 0x00;
  3425  0522  083A               	movf	waitFlag@flag_judge,w
  3426  0523  043B               	iorwf	waitFlag@flag_judge+1,w
  3427  0524  1903               	btfsc	3,2
  3428  0525  2D2B               	goto	l2864
  3429                           
  3430                           ;decode_AX25.c: 139: buf = buf | 0x80;
  3431                           
  3432                           ;decode_AX25.c: 138: }else{
  3433  0526  083C               	movf	waitFlag@buf,w
  3434  0527  3880               	iorlw	128
  3435  0528  00F6               	movwf	??_waitFlag
  3436  0529  0876               	movf	??_waitFlag,w
  3437  052A  00BC               	movwf	waitFlag@buf
  3438  052B                     l2864:	
  3439  052B  3001               	movlw	1
  3440  052C  07AA               	addwf	waitFlag@j_124,f
  3441  052D  1803               	skipnc
  3442  052E  0AAB               	incf	waitFlag@j_124+1,f
  3443  052F  3000               	movlw	0
  3444  0530  07AB               	addwf	waitFlag@j_124+1,f
  3445  0531  3000               	movlw	0
  3446  0532  022B               	subwf	waitFlag@j_124+1,w
  3447  0533  3008               	movlw	8
  3448  0534  1903               	skipnz
  3449  0535  022A               	subwf	waitFlag@j_124,w
  3450  0536  1C03               	skipc
  3451  0537  2D10               	goto	l2854
  3452  0538                     l2868:	
  3453                           
  3454                           ;decode_AX25.c: 140: }
  3455                           ;decode_AX25.c: 141: }
  3456                           ;decode_AX25.c: 142: if(buf == ("JQ1YCZ"[5] << 1)){
  3457  0538  3017               	movlw	low (((STR_1+5)-__stringbase)| (0+32768))
  3458  0539  0084               	movwf	4
  3459  053A  120A  158A  2000  120A  118A  	fcall	stringdir
  3460  053F  00F6               	movwf	??_waitFlag
  3461  0540  01F7               	clrf	??_waitFlag+1
  3462  0541  1003               	clrc
  3463  0542  0DF6               	rlf	??_waitFlag,f
  3464  0543  0DF7               	rlf	??_waitFlag+1,f
  3465  0544  083C               	movf	waitFlag@buf,w
  3466  0545  00F8               	movwf	??_waitFlag+2
  3467  0546  01F9               	clrf	??_waitFlag+3
  3468  0547  0877               	movf	??_waitFlag+1,w
  3469  0548  0679               	xorwf	??_waitFlag+3,w
  3470  0549  1D03               	skipz
  3471  054A  2D4D               	goto	u2375
  3472  054B  0876               	movf	??_waitFlag,w
  3473  054C  0678               	xorwf	??_waitFlag+2,w
  3474  054D                     u2375:	
  3475  054D  1D03               	skipz
  3476  054E  2D64               	goto	l2886
  3477                           
  3478                           ;decode_AX25.c: 143: dPacket[dPacketnum] = buf;
  3479  054F  083C               	movf	waitFlag@buf,w
  3480  0550  00F6               	movwf	??_waitFlag
  3481  0551  0866               	movf	_dPacketnum,w
  3482  0552  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3483  0553  0084               	movwf	4
  3484  0554  0876               	movf	??_waitFlag,w
  3485  0555  1783               	bsf	3,7	;select IRP bank3
  3486  0556  0080               	movwf	0
  3487                           
  3488                           ;decode_AX25.c: 144: dPacketnum ++;
  3489  0557  3001               	movlw	1
  3490  0558  07E6               	addwf	_dPacketnum,f
  3491  0559  1803               	skipnc
  3492  055A  0AE7               	incf	_dPacketnum+1,f
  3493  055B  3000               	movlw	0
  3494  055C  07E7               	addwf	_dPacketnum+1,f
  3495                           
  3496                           ;decode_AX25.c: 145: rcv_state ++;
  3497  055D  3001               	movlw	1
  3498  055E  07EA               	addwf	_rcv_state,f
  3499  055F  1803               	skipnc
  3500  0560  0AEB               	incf	_rcv_state+1,f
  3501  0561  3000               	movlw	0
  3502  0562  07EB               	addwf	_rcv_state+1,f
  3503                           
  3504                           ;decode_AX25.c: 146: }else{
  3505  0563  2D66               	goto	l214
  3506  0564                     l2886:	
  3507                           ;decode_AX25.c: 160: }
  3508                           ;decode_AX25.c: 161: }else{
  3509                           
  3510                           ;decode_AX25.c: 159: dPacketnum = 0;
  3511                           
  3512                           ;decode_AX25.c: 157: }
  3513                           ;decode_AX25.c: 158: }else{
  3514                           
  3515                           ;decode_AX25.c: 156: dPacketnum = 0;
  3516                           
  3517                           ;decode_AX25.c: 154: }
  3518                           ;decode_AX25.c: 155: }else{
  3519                           
  3520                           ;decode_AX25.c: 153: dPacketnum = 0;
  3521                           
  3522                           ;decode_AX25.c: 151: }
  3523                           ;decode_AX25.c: 152: }else{
  3524                           
  3525                           ;decode_AX25.c: 150: dPacketnum = 0;
  3526                           
  3527                           ;decode_AX25.c: 148: }
  3528                           ;decode_AX25.c: 149: }else{
  3529                           
  3530                           ;decode_AX25.c: 147: dPacketnum = 0;
  3531                           
  3532                           
  3533                           ;decode_AX25.c: 162: dPacketnum = 0;
  3534  0564  01E6               	clrf	_dPacketnum
  3535  0565  01E7               	clrf	_dPacketnum+1
  3536  0566                     l214:	
  3537                           
  3538                           ;decode_AX25.c: 163: }
  3539                           ;decode_AX25.c: 165: for(UINT j=0;j<8;j++){
  3540  0566  01AC               	clrf	waitFlag@j_126
  3541  0567  01AD               	clrf	waitFlag@j_126+1
  3542  0568  3000               	movlw	0
  3543  0569  022D               	subwf	waitFlag@j_126+1,w
  3544  056A  3008               	movlw	8
  3545  056B  1903               	skipnz
  3546  056C  022C               	subwf	waitFlag@j_126,w
  3547  056D  1803               	btfsc	3,0
  3548  056E  2D97               	goto	l2906
  3549  056F                     l2892:	
  3550                           
  3551                           ;decode_AX25.c: 166: flag_judge = getbit();
  3552  056F  120A  158A  22B0  120A  118A  	fcall	_getbit
  3553  0574  0871               	movf	?_getbit+1,w
  3554  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3555  0576  1303               	bcf	3,6	;RP1=0, select bank0
  3556  0577  00BB               	movwf	waitFlag@flag_judge+1
  3557  0578  0870               	movf	?_getbit,w
  3558  0579  00BA               	movwf	waitFlag@flag_judge
  3559                           
  3560                           ;decode_AX25.c: 167: buf = buf >> 1;
  3561  057A  083C               	movf	waitFlag@buf,w
  3562  057B  00F6               	movwf	??_waitFlag
  3563  057C  1003               	clrc
  3564  057D  0C76               	rrf	??_waitFlag,w
  3565  057E  00F7               	movwf	??_waitFlag+1
  3566  057F  0877               	movf	??_waitFlag+1,w
  3567  0580  00BC               	movwf	waitFlag@buf
  3568                           
  3569                           ;decode_AX25.c: 169: buf = buf | 0x00;
  3570  0581  083A               	movf	waitFlag@flag_judge,w
  3571  0582  043B               	iorwf	waitFlag@flag_judge+1,w
  3572  0583  1903               	btfsc	3,2
  3573  0584  2D8A               	goto	l2902
  3574                           
  3575                           ;decode_AX25.c: 171: buf = buf | 0x80;
  3576                           
  3577                           ;decode_AX25.c: 170: }else{
  3578  0585  083C               	movf	waitFlag@buf,w
  3579  0586  3880               	iorlw	128
  3580  0587  00F6               	movwf	??_waitFlag
  3581  0588  0876               	movf	??_waitFlag,w
  3582  0589  00BC               	movwf	waitFlag@buf
  3583  058A                     l2902:	
  3584  058A  3001               	movlw	1
  3585  058B  07AC               	addwf	waitFlag@j_126,f
  3586  058C  1803               	skipnc
  3587  058D  0AAD               	incf	waitFlag@j_126+1,f
  3588  058E  3000               	movlw	0
  3589  058F  07AD               	addwf	waitFlag@j_126+1,f
  3590  0590  3000               	movlw	0
  3591  0591  022D               	subwf	waitFlag@j_126+1,w
  3592  0592  3008               	movlw	8
  3593  0593  1903               	skipnz
  3594  0594  022C               	subwf	waitFlag@j_126,w
  3595  0595  1C03               	skipc
  3596  0596  2D6F               	goto	l2892
  3597  0597                     l2906:	
  3598                           
  3599                           ;decode_AX25.c: 172: }
  3600                           ;decode_AX25.c: 173: }
  3601                           ;decode_AX25.c: 174: dPacket[dPacketnum] = buf;
  3602  0597  083C               	movf	waitFlag@buf,w
  3603  0598  00F6               	movwf	??_waitFlag
  3604  0599  0866               	movf	_dPacketnum,w
  3605  059A  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3606  059B  0084               	movwf	4
  3607  059C  0876               	movf	??_waitFlag,w
  3608  059D  1783               	bsf	3,7	;select IRP bank3
  3609  059E  0080               	movwf	0
  3610                           
  3611                           ;decode_AX25.c: 175: dPacketnum ++;
  3612  059F  3001               	movlw	1
  3613  05A0  07E6               	addwf	_dPacketnum,f
  3614  05A1  1803               	skipnc
  3615  05A2  0AE7               	incf	_dPacketnum+1,f
  3616  05A3  3000               	movlw	0
  3617  05A4  07E7               	addwf	_dPacketnum+1,f
  3618                           
  3619                           ;decode_AX25.c: 176: for(UINT j=0;j<8;j++){
  3620  05A5  01AE               	clrf	waitFlag@j_127
  3621  05A6  01AF               	clrf	waitFlag@j_127+1
  3622  05A7  3000               	movlw	0
  3623  05A8  022F               	subwf	waitFlag@j_127+1,w
  3624  05A9  3008               	movlw	8
  3625  05AA  1903               	skipnz
  3626  05AB  022E               	subwf	waitFlag@j_127,w
  3627  05AC  1803               	btfsc	3,0
  3628  05AD  2DD6               	goto	l2930
  3629  05AE                     l2916:	
  3630                           
  3631                           ;decode_AX25.c: 177: flag_judge = getbit();
  3632  05AE  120A  158A  22B0  120A  118A  	fcall	_getbit
  3633  05B3  0871               	movf	?_getbit+1,w
  3634  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  3635  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  3636  05B6  00BB               	movwf	waitFlag@flag_judge+1
  3637  05B7  0870               	movf	?_getbit,w
  3638  05B8  00BA               	movwf	waitFlag@flag_judge
  3639                           
  3640                           ;decode_AX25.c: 178: buf = buf >> 1;
  3641  05B9  083C               	movf	waitFlag@buf,w
  3642  05BA  00F6               	movwf	??_waitFlag
  3643  05BB  1003               	clrc
  3644  05BC  0C76               	rrf	??_waitFlag,w
  3645  05BD  00F7               	movwf	??_waitFlag+1
  3646  05BE  0877               	movf	??_waitFlag+1,w
  3647  05BF  00BC               	movwf	waitFlag@buf
  3648                           
  3649                           ;decode_AX25.c: 180: buf = buf | 0x00;
  3650  05C0  083A               	movf	waitFlag@flag_judge,w
  3651  05C1  043B               	iorwf	waitFlag@flag_judge+1,w
  3652  05C2  1903               	btfsc	3,2
  3653  05C3  2DC9               	goto	l2926
  3654                           
  3655                           ;decode_AX25.c: 182: buf = buf | 0x80;
  3656                           
  3657                           ;decode_AX25.c: 181: }else{
  3658  05C4  083C               	movf	waitFlag@buf,w
  3659  05C5  3880               	iorlw	128
  3660  05C6  00F6               	movwf	??_waitFlag
  3661  05C7  0876               	movf	??_waitFlag,w
  3662  05C8  00BC               	movwf	waitFlag@buf
  3663  05C9                     l2926:	
  3664  05C9  3001               	movlw	1
  3665  05CA  07AE               	addwf	waitFlag@j_127,f
  3666  05CB  1803               	skipnc
  3667  05CC  0AAF               	incf	waitFlag@j_127+1,f
  3668  05CD  3000               	movlw	0
  3669  05CE  07AF               	addwf	waitFlag@j_127+1,f
  3670  05CF  3000               	movlw	0
  3671  05D0  022F               	subwf	waitFlag@j_127+1,w
  3672  05D1  3008               	movlw	8
  3673  05D2  1903               	skipnz
  3674  05D3  022E               	subwf	waitFlag@j_127,w
  3675  05D4  1C03               	skipc
  3676  05D5  2DAE               	goto	l2916
  3677  05D6                     l2930:	
  3678                           
  3679                           ;decode_AX25.c: 183: }
  3680                           ;decode_AX25.c: 184: }
  3681                           ;decode_AX25.c: 185: if(buf == ("JQ1ZHX"[0] << 1)){
  3682  05D6  300B               	movlw	low (STR_7-__stringbase)
  3683  05D7  0084               	movwf	4
  3684  05D8  120A  158A  2000  120A  118A  	fcall	stringdir
  3685  05DD  00F6               	movwf	??_waitFlag
  3686  05DE  01F7               	clrf	??_waitFlag+1
  3687  05DF  1003               	clrc
  3688  05E0  0DF6               	rlf	??_waitFlag,f
  3689  05E1  0DF7               	rlf	??_waitFlag+1,f
  3690  05E2  083C               	movf	waitFlag@buf,w
  3691  05E3  00F8               	movwf	??_waitFlag+2
  3692  05E4  01F9               	clrf	??_waitFlag+3
  3693  05E5  0877               	movf	??_waitFlag+1,w
  3694  05E6  0679               	xorwf	??_waitFlag+3,w
  3695  05E7  1D03               	skipz
  3696  05E8  2DEB               	goto	u2445
  3697  05E9  0876               	movf	??_waitFlag,w
  3698  05EA  0678               	xorwf	??_waitFlag+2,w
  3699  05EB                     u2445:	
  3700  05EB  1D03               	skipz
  3701  05EC  2FB0               	goto	l3078
  3702                           
  3703                           ;decode_AX25.c: 186: dPacket[dPacketnum] = buf;
  3704  05ED  083C               	movf	waitFlag@buf,w
  3705  05EE  00F6               	movwf	??_waitFlag
  3706  05EF  0866               	movf	_dPacketnum,w
  3707  05F0  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3708  05F1  0084               	movwf	4
  3709  05F2  0876               	movf	??_waitFlag,w
  3710  05F3  1783               	bsf	3,7	;select IRP bank3
  3711  05F4  0080               	movwf	0
  3712                           
  3713                           ;decode_AX25.c: 187: dPacketnum ++;
  3714  05F5  3001               	movlw	1
  3715  05F6  07E6               	addwf	_dPacketnum,f
  3716  05F7  1803               	skipnc
  3717  05F8  0AE7               	incf	_dPacketnum+1,f
  3718  05F9  3000               	movlw	0
  3719  05FA  07E7               	addwf	_dPacketnum+1,f
  3720                           
  3721                           ;decode_AX25.c: 188: for(UINT j=0;j<8;j++){
  3722  05FB  01B0               	clrf	waitFlag@j_129
  3723  05FC  01B1               	clrf	waitFlag@j_129+1
  3724  05FD  3000               	movlw	0
  3725  05FE  0231               	subwf	waitFlag@j_129+1,w
  3726  05FF  3008               	movlw	8
  3727  0600  1903               	skipnz
  3728  0601  0230               	subwf	waitFlag@j_129,w
  3729  0602  1803               	btfsc	3,0
  3730  0603  2E2C               	goto	l2956
  3731  0604                     l2942:	
  3732                           
  3733                           ;decode_AX25.c: 189: flag_judge = getbit();
  3734  0604  120A  158A  22B0  120A  118A  	fcall	_getbit
  3735  0609  0871               	movf	?_getbit+1,w
  3736  060A  1283               	bcf	3,5	;RP0=0, select bank0
  3737  060B  1303               	bcf	3,6	;RP1=0, select bank0
  3738  060C  00BB               	movwf	waitFlag@flag_judge+1
  3739  060D  0870               	movf	?_getbit,w
  3740  060E  00BA               	movwf	waitFlag@flag_judge
  3741                           
  3742                           ;decode_AX25.c: 190: buf = buf >> 1;
  3743  060F  083C               	movf	waitFlag@buf,w
  3744  0610  00F6               	movwf	??_waitFlag
  3745  0611  1003               	clrc
  3746  0612  0C76               	rrf	??_waitFlag,w
  3747  0613  00F7               	movwf	??_waitFlag+1
  3748  0614  0877               	movf	??_waitFlag+1,w
  3749  0615  00BC               	movwf	waitFlag@buf
  3750                           
  3751                           ;decode_AX25.c: 192: buf = buf | 0x00;
  3752  0616  083A               	movf	waitFlag@flag_judge,w
  3753  0617  043B               	iorwf	waitFlag@flag_judge+1,w
  3754  0618  1903               	btfsc	3,2
  3755  0619  2E1F               	goto	l2952
  3756                           
  3757                           ;decode_AX25.c: 194: buf = buf | 0x80;
  3758                           
  3759                           ;decode_AX25.c: 193: }else{
  3760  061A  083C               	movf	waitFlag@buf,w
  3761  061B  3880               	iorlw	128
  3762  061C  00F6               	movwf	??_waitFlag
  3763  061D  0876               	movf	??_waitFlag,w
  3764  061E  00BC               	movwf	waitFlag@buf
  3765  061F                     l2952:	
  3766  061F  3001               	movlw	1
  3767  0620  07B0               	addwf	waitFlag@j_129,f
  3768  0621  1803               	skipnc
  3769  0622  0AB1               	incf	waitFlag@j_129+1,f
  3770  0623  3000               	movlw	0
  3771  0624  07B1               	addwf	waitFlag@j_129+1,f
  3772  0625  3000               	movlw	0
  3773  0626  0231               	subwf	waitFlag@j_129+1,w
  3774  0627  3008               	movlw	8
  3775  0628  1903               	skipnz
  3776  0629  0230               	subwf	waitFlag@j_129,w
  3777  062A  1C03               	skipc
  3778  062B  2E04               	goto	l2942
  3779  062C                     l2956:	
  3780                           
  3781                           ;decode_AX25.c: 195: }
  3782                           ;decode_AX25.c: 196: }
  3783                           ;decode_AX25.c: 197: if(buf == ("JQ1ZHX"[1] << 1)){
  3784  062C  300C               	movlw	low (((STR_7+1)-__stringbase)| (0+32768))
  3785  062D  0084               	movwf	4
  3786  062E  120A  158A  2000  120A  118A  	fcall	stringdir
  3787  0633  00F6               	movwf	??_waitFlag
  3788  0634  01F7               	clrf	??_waitFlag+1
  3789  0635  1003               	clrc
  3790  0636  0DF6               	rlf	??_waitFlag,f
  3791  0637  0DF7               	rlf	??_waitFlag+1,f
  3792  0638  083C               	movf	waitFlag@buf,w
  3793  0639  00F8               	movwf	??_waitFlag+2
  3794  063A  01F9               	clrf	??_waitFlag+3
  3795  063B  0877               	movf	??_waitFlag+1,w
  3796  063C  0679               	xorwf	??_waitFlag+3,w
  3797  063D  1D03               	skipz
  3798  063E  2E41               	goto	u2485
  3799  063F  0876               	movf	??_waitFlag,w
  3800  0640  0678               	xorwf	??_waitFlag+2,w
  3801  0641                     u2485:	
  3802  0641  1D03               	skipz
  3803  0642  2FB0               	goto	l3078
  3804                           
  3805                           ;decode_AX25.c: 198: dPacket[dPacketnum] = buf;
  3806  0643  083C               	movf	waitFlag@buf,w
  3807  0644  00F6               	movwf	??_waitFlag
  3808  0645  0866               	movf	_dPacketnum,w
  3809  0646  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3810  0647  0084               	movwf	4
  3811  0648  0876               	movf	??_waitFlag,w
  3812  0649  1783               	bsf	3,7	;select IRP bank3
  3813  064A  0080               	movwf	0
  3814                           
  3815                           ;decode_AX25.c: 199: dPacketnum ++;
  3816  064B  3001               	movlw	1
  3817  064C  07E6               	addwf	_dPacketnum,f
  3818  064D  1803               	skipnc
  3819  064E  0AE7               	incf	_dPacketnum+1,f
  3820  064F  3000               	movlw	0
  3821  0650  07E7               	addwf	_dPacketnum+1,f
  3822                           
  3823                           ;decode_AX25.c: 200: for(UINT j=0;j<8;j++){
  3824  0651  01B2               	clrf	waitFlag@j_131
  3825  0652  01B3               	clrf	waitFlag@j_131+1
  3826  0653  3000               	movlw	0
  3827  0654  0233               	subwf	waitFlag@j_131+1,w
  3828  0655  3008               	movlw	8
  3829  0656  1903               	skipnz
  3830  0657  0232               	subwf	waitFlag@j_131,w
  3831  0658  1803               	btfsc	3,0
  3832  0659  2E82               	goto	l2982
  3833  065A                     l2968:	
  3834                           
  3835                           ;decode_AX25.c: 201: flag_judge = getbit();
  3836  065A  120A  158A  22B0  120A  118A  	fcall	_getbit
  3837  065F  0871               	movf	?_getbit+1,w
  3838  0660  1283               	bcf	3,5	;RP0=0, select bank0
  3839  0661  1303               	bcf	3,6	;RP1=0, select bank0
  3840  0662  00BB               	movwf	waitFlag@flag_judge+1
  3841  0663  0870               	movf	?_getbit,w
  3842  0664  00BA               	movwf	waitFlag@flag_judge
  3843                           
  3844                           ;decode_AX25.c: 202: buf = buf >> 1;
  3845  0665  083C               	movf	waitFlag@buf,w
  3846  0666  00F6               	movwf	??_waitFlag
  3847  0667  1003               	clrc
  3848  0668  0C76               	rrf	??_waitFlag,w
  3849  0669  00F7               	movwf	??_waitFlag+1
  3850  066A  0877               	movf	??_waitFlag+1,w
  3851  066B  00BC               	movwf	waitFlag@buf
  3852                           
  3853                           ;decode_AX25.c: 204: buf = buf | 0x00;
  3854  066C  083A               	movf	waitFlag@flag_judge,w
  3855  066D  043B               	iorwf	waitFlag@flag_judge+1,w
  3856  066E  1903               	btfsc	3,2
  3857  066F  2E75               	goto	l2978
  3858                           
  3859                           ;decode_AX25.c: 206: buf = buf | 0x80;
  3860                           
  3861                           ;decode_AX25.c: 205: }else{
  3862  0670  083C               	movf	waitFlag@buf,w
  3863  0671  3880               	iorlw	128
  3864  0672  00F6               	movwf	??_waitFlag
  3865  0673  0876               	movf	??_waitFlag,w
  3866  0674  00BC               	movwf	waitFlag@buf
  3867  0675                     l2978:	
  3868  0675  3001               	movlw	1
  3869  0676  07B2               	addwf	waitFlag@j_131,f
  3870  0677  1803               	skipnc
  3871  0678  0AB3               	incf	waitFlag@j_131+1,f
  3872  0679  3000               	movlw	0
  3873  067A  07B3               	addwf	waitFlag@j_131+1,f
  3874  067B  3000               	movlw	0
  3875  067C  0233               	subwf	waitFlag@j_131+1,w
  3876  067D  3008               	movlw	8
  3877  067E  1903               	skipnz
  3878  067F  0232               	subwf	waitFlag@j_131,w
  3879  0680  1C03               	skipc
  3880  0681  2E5A               	goto	l2968
  3881  0682                     l2982:	
  3882                           
  3883                           ;decode_AX25.c: 207: }
  3884                           ;decode_AX25.c: 208: }
  3885                           ;decode_AX25.c: 209: if(buf == ("JQ1ZHX"[2] << 1)){
  3886  0682  300D               	movlw	low (((STR_7+2)-__stringbase)| (0+32768))
  3887  0683  0084               	movwf	4
  3888  0684  120A  158A  2000  120A  118A  	fcall	stringdir
  3889  0689  00F6               	movwf	??_waitFlag
  3890  068A  01F7               	clrf	??_waitFlag+1
  3891  068B  1003               	clrc
  3892  068C  0DF6               	rlf	??_waitFlag,f
  3893  068D  0DF7               	rlf	??_waitFlag+1,f
  3894  068E  083C               	movf	waitFlag@buf,w
  3895  068F  00F8               	movwf	??_waitFlag+2
  3896  0690  01F9               	clrf	??_waitFlag+3
  3897  0691  0877               	movf	??_waitFlag+1,w
  3898  0692  0679               	xorwf	??_waitFlag+3,w
  3899  0693  1D03               	skipz
  3900  0694  2E97               	goto	u2525
  3901  0695  0876               	movf	??_waitFlag,w
  3902  0696  0678               	xorwf	??_waitFlag+2,w
  3903  0697                     u2525:	
  3904  0697  1D03               	skipz
  3905  0698  2FB0               	goto	l3078
  3906                           
  3907                           ;decode_AX25.c: 210: dPacket[dPacketnum] = buf;
  3908  0699  083C               	movf	waitFlag@buf,w
  3909  069A  00F6               	movwf	??_waitFlag
  3910  069B  0866               	movf	_dPacketnum,w
  3911  069C  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3912  069D  0084               	movwf	4
  3913  069E  0876               	movf	??_waitFlag,w
  3914  069F  1783               	bsf	3,7	;select IRP bank3
  3915  06A0  0080               	movwf	0
  3916                           
  3917                           ;decode_AX25.c: 211: dPacketnum ++;
  3918  06A1  3001               	movlw	1
  3919  06A2  07E6               	addwf	_dPacketnum,f
  3920  06A3  1803               	skipnc
  3921  06A4  0AE7               	incf	_dPacketnum+1,f
  3922  06A5  3000               	movlw	0
  3923  06A6  07E7               	addwf	_dPacketnum+1,f
  3924                           
  3925                           ;decode_AX25.c: 212: for(UINT j=0;j<8;j++){
  3926  06A7  01B4               	clrf	waitFlag@j_133
  3927  06A8  01B5               	clrf	waitFlag@j_133+1
  3928  06A9  3000               	movlw	0
  3929  06AA  0235               	subwf	waitFlag@j_133+1,w
  3930  06AB  3008               	movlw	8
  3931  06AC  1903               	skipnz
  3932  06AD  0234               	subwf	waitFlag@j_133,w
  3933  06AE  1803               	btfsc	3,0
  3934  06AF  2ED8               	goto	l3008
  3935  06B0                     l2994:	
  3936                           
  3937                           ;decode_AX25.c: 213: flag_judge = getbit();
  3938  06B0  120A  158A  22B0  120A  118A  	fcall	_getbit
  3939  06B5  0871               	movf	?_getbit+1,w
  3940  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  3941  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  3942  06B8  00BB               	movwf	waitFlag@flag_judge+1
  3943  06B9  0870               	movf	?_getbit,w
  3944  06BA  00BA               	movwf	waitFlag@flag_judge
  3945                           
  3946                           ;decode_AX25.c: 214: buf = buf >> 1;
  3947  06BB  083C               	movf	waitFlag@buf,w
  3948  06BC  00F6               	movwf	??_waitFlag
  3949  06BD  1003               	clrc
  3950  06BE  0C76               	rrf	??_waitFlag,w
  3951  06BF  00F7               	movwf	??_waitFlag+1
  3952  06C0  0877               	movf	??_waitFlag+1,w
  3953  06C1  00BC               	movwf	waitFlag@buf
  3954                           
  3955                           ;decode_AX25.c: 216: buf = buf | 0x00;
  3956  06C2  083A               	movf	waitFlag@flag_judge,w
  3957  06C3  043B               	iorwf	waitFlag@flag_judge+1,w
  3958  06C4  1903               	btfsc	3,2
  3959  06C5  2ECB               	goto	l3004
  3960                           
  3961                           ;decode_AX25.c: 218: buf = buf | 0x80;
  3962                           
  3963                           ;decode_AX25.c: 217: }else{
  3964  06C6  083C               	movf	waitFlag@buf,w
  3965  06C7  3880               	iorlw	128
  3966  06C8  00F6               	movwf	??_waitFlag
  3967  06C9  0876               	movf	??_waitFlag,w
  3968  06CA  00BC               	movwf	waitFlag@buf
  3969  06CB                     l3004:	
  3970  06CB  3001               	movlw	1
  3971  06CC  07B4               	addwf	waitFlag@j_133,f
  3972  06CD  1803               	skipnc
  3973  06CE  0AB5               	incf	waitFlag@j_133+1,f
  3974  06CF  3000               	movlw	0
  3975  06D0  07B5               	addwf	waitFlag@j_133+1,f
  3976  06D1  3000               	movlw	0
  3977  06D2  0235               	subwf	waitFlag@j_133+1,w
  3978  06D3  3008               	movlw	8
  3979  06D4  1903               	skipnz
  3980  06D5  0234               	subwf	waitFlag@j_133,w
  3981  06D6  1C03               	skipc
  3982  06D7  2EB0               	goto	l2994
  3983  06D8                     l3008:	
  3984                           
  3985                           ;decode_AX25.c: 219: }
  3986                           ;decode_AX25.c: 220: }
  3987                           ;decode_AX25.c: 221: if(buf == ("JQ1ZHX"[3] << 1)){
  3988  06D8  300E               	movlw	low (((STR_7+3)-__stringbase)| (0+32768))
  3989  06D9  0084               	movwf	4
  3990  06DA  120A  158A  2000  120A  118A  	fcall	stringdir
  3991  06DF  00F6               	movwf	??_waitFlag
  3992  06E0  01F7               	clrf	??_waitFlag+1
  3993  06E1  1003               	clrc
  3994  06E2  0DF6               	rlf	??_waitFlag,f
  3995  06E3  0DF7               	rlf	??_waitFlag+1,f
  3996  06E4  083C               	movf	waitFlag@buf,w
  3997  06E5  00F8               	movwf	??_waitFlag+2
  3998  06E6  01F9               	clrf	??_waitFlag+3
  3999  06E7  0877               	movf	??_waitFlag+1,w
  4000  06E8  0679               	xorwf	??_waitFlag+3,w
  4001  06E9  1D03               	skipz
  4002  06EA  2EED               	goto	u2565
  4003  06EB  0876               	movf	??_waitFlag,w
  4004  06EC  0678               	xorwf	??_waitFlag+2,w
  4005  06ED                     u2565:	
  4006  06ED  1D03               	skipz
  4007  06EE  2FB0               	goto	l3078
  4008                           
  4009                           ;decode_AX25.c: 222: dPacket[dPacketnum] = buf;
  4010  06EF  083C               	movf	waitFlag@buf,w
  4011  06F0  00F6               	movwf	??_waitFlag
  4012  06F1  0866               	movf	_dPacketnum,w
  4013  06F2  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4014  06F3  0084               	movwf	4
  4015  06F4  0876               	movf	??_waitFlag,w
  4016  06F5  1783               	bsf	3,7	;select IRP bank3
  4017  06F6  0080               	movwf	0
  4018                           
  4019                           ;decode_AX25.c: 223: dPacketnum ++;
  4020  06F7  3001               	movlw	1
  4021  06F8  07E6               	addwf	_dPacketnum,f
  4022  06F9  1803               	skipnc
  4023  06FA  0AE7               	incf	_dPacketnum+1,f
  4024  06FB  3000               	movlw	0
  4025  06FC  07E7               	addwf	_dPacketnum+1,f
  4026                           
  4027                           ;decode_AX25.c: 224: for(UINT j=0;j<8;j++){
  4028  06FD  01B6               	clrf	waitFlag@j_135
  4029  06FE  01B7               	clrf	waitFlag@j_135+1
  4030  06FF  3000               	movlw	0
  4031  0700  0237               	subwf	waitFlag@j_135+1,w
  4032  0701  3008               	movlw	8
  4033  0702  1903               	skipnz
  4034  0703  0236               	subwf	waitFlag@j_135,w
  4035  0704  1803               	btfsc	3,0
  4036  0705  2F2E               	goto	l3034
  4037  0706                     l3020:	
  4038                           
  4039                           ;decode_AX25.c: 225: flag_judge = getbit();
  4040  0706  120A  158A  22B0  120A  118A  	fcall	_getbit
  4041  070B  0871               	movf	?_getbit+1,w
  4042  070C  1283               	bcf	3,5	;RP0=0, select bank0
  4043  070D  1303               	bcf	3,6	;RP1=0, select bank0
  4044  070E  00BB               	movwf	waitFlag@flag_judge+1
  4045  070F  0870               	movf	?_getbit,w
  4046  0710  00BA               	movwf	waitFlag@flag_judge
  4047                           
  4048                           ;decode_AX25.c: 226: buf = buf >> 1;
  4049  0711  083C               	movf	waitFlag@buf,w
  4050  0712  00F6               	movwf	??_waitFlag
  4051  0713  1003               	clrc
  4052  0714  0C76               	rrf	??_waitFlag,w
  4053  0715  00F7               	movwf	??_waitFlag+1
  4054  0716  0877               	movf	??_waitFlag+1,w
  4055  0717  00BC               	movwf	waitFlag@buf
  4056                           
  4057                           ;decode_AX25.c: 228: buf = buf | 0x00;
  4058  0718  083A               	movf	waitFlag@flag_judge,w
  4059  0719  043B               	iorwf	waitFlag@flag_judge+1,w
  4060  071A  1903               	btfsc	3,2
  4061  071B  2F21               	goto	l3030
  4062                           
  4063                           ;decode_AX25.c: 230: buf = buf | 0x80;
  4064                           
  4065                           ;decode_AX25.c: 229: }else{
  4066  071C  083C               	movf	waitFlag@buf,w
  4067  071D  3880               	iorlw	128
  4068  071E  00F6               	movwf	??_waitFlag
  4069  071F  0876               	movf	??_waitFlag,w
  4070  0720  00BC               	movwf	waitFlag@buf
  4071  0721                     l3030:	
  4072  0721  3001               	movlw	1
  4073  0722  07B6               	addwf	waitFlag@j_135,f
  4074  0723  1803               	skipnc
  4075  0724  0AB7               	incf	waitFlag@j_135+1,f
  4076  0725  3000               	movlw	0
  4077  0726  07B7               	addwf	waitFlag@j_135+1,f
  4078  0727  3000               	movlw	0
  4079  0728  0237               	subwf	waitFlag@j_135+1,w
  4080  0729  3008               	movlw	8
  4081  072A  1903               	skipnz
  4082  072B  0236               	subwf	waitFlag@j_135,w
  4083  072C  1C03               	skipc
  4084  072D  2F06               	goto	l3020
  4085  072E                     l3034:	
  4086                           
  4087                           ;decode_AX25.c: 231: }
  4088                           ;decode_AX25.c: 232: }
  4089                           ;decode_AX25.c: 233: if(buf == ("JQ1ZHX"[4] << 1)){
  4090  072E  300F               	movlw	low (((STR_7+4)-__stringbase)| (0+32768))
  4091  072F  0084               	movwf	4
  4092  0730  120A  158A  2000  120A  118A  	fcall	stringdir
  4093  0735  00F6               	movwf	??_waitFlag
  4094  0736  01F7               	clrf	??_waitFlag+1
  4095  0737  1003               	clrc
  4096  0738  0DF6               	rlf	??_waitFlag,f
  4097  0739  0DF7               	rlf	??_waitFlag+1,f
  4098  073A  083C               	movf	waitFlag@buf,w
  4099  073B  00F8               	movwf	??_waitFlag+2
  4100  073C  01F9               	clrf	??_waitFlag+3
  4101  073D  0877               	movf	??_waitFlag+1,w
  4102  073E  0679               	xorwf	??_waitFlag+3,w
  4103  073F  1D03               	skipz
  4104  0740  2F43               	goto	u2605
  4105  0741  0876               	movf	??_waitFlag,w
  4106  0742  0678               	xorwf	??_waitFlag+2,w
  4107  0743                     u2605:	
  4108  0743  1D03               	skipz
  4109  0744  2FB0               	goto	l3078
  4110                           
  4111                           ;decode_AX25.c: 234: dPacket[dPacketnum] = buf;
  4112  0745  083C               	movf	waitFlag@buf,w
  4113  0746  00F6               	movwf	??_waitFlag
  4114  0747  0866               	movf	_dPacketnum,w
  4115  0748  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4116  0749  0084               	movwf	4
  4117  074A  0876               	movf	??_waitFlag,w
  4118  074B  1783               	bsf	3,7	;select IRP bank3
  4119  074C  0080               	movwf	0
  4120                           
  4121                           ;decode_AX25.c: 235: dPacketnum ++;
  4122  074D  3001               	movlw	1
  4123  074E  07E6               	addwf	_dPacketnum,f
  4124  074F  1803               	skipnc
  4125  0750  0AE7               	incf	_dPacketnum+1,f
  4126  0751  3000               	movlw	0
  4127  0752  07E7               	addwf	_dPacketnum+1,f
  4128                           
  4129                           ;decode_AX25.c: 236: for(UINT j=0;j<8;j++){
  4130  0753  01B8               	clrf	waitFlag@j_137
  4131  0754  01B9               	clrf	waitFlag@j_137+1
  4132  0755  3000               	movlw	0
  4133  0756  0239               	subwf	waitFlag@j_137+1,w
  4134  0757  3008               	movlw	8
  4135  0758  1903               	skipnz
  4136  0759  0238               	subwf	waitFlag@j_137,w
  4137  075A  1803               	btfsc	3,0
  4138  075B  2F84               	goto	l3060
  4139  075C                     l3046:	
  4140                           
  4141                           ;decode_AX25.c: 237: flag_judge = getbit();
  4142  075C  120A  158A  22B0  120A  118A  	fcall	_getbit
  4143  0761  0871               	movf	?_getbit+1,w
  4144  0762  1283               	bcf	3,5	;RP0=0, select bank0
  4145  0763  1303               	bcf	3,6	;RP1=0, select bank0
  4146  0764  00BB               	movwf	waitFlag@flag_judge+1
  4147  0765  0870               	movf	?_getbit,w
  4148  0766  00BA               	movwf	waitFlag@flag_judge
  4149                           
  4150                           ;decode_AX25.c: 238: buf = buf >> 1;
  4151  0767  083C               	movf	waitFlag@buf,w
  4152  0768  00F6               	movwf	??_waitFlag
  4153  0769  1003               	clrc
  4154  076A  0C76               	rrf	??_waitFlag,w
  4155  076B  00F7               	movwf	??_waitFlag+1
  4156  076C  0877               	movf	??_waitFlag+1,w
  4157  076D  00BC               	movwf	waitFlag@buf
  4158                           
  4159                           ;decode_AX25.c: 240: buf = buf | 0x00;
  4160  076E  083A               	movf	waitFlag@flag_judge,w
  4161  076F  043B               	iorwf	waitFlag@flag_judge+1,w
  4162  0770  1903               	btfsc	3,2
  4163  0771  2F77               	goto	l3056
  4164                           
  4165                           ;decode_AX25.c: 242: buf = buf | 0x80;
  4166                           
  4167                           ;decode_AX25.c: 241: }else{
  4168  0772  083C               	movf	waitFlag@buf,w
  4169  0773  3880               	iorlw	128
  4170  0774  00F6               	movwf	??_waitFlag
  4171  0775  0876               	movf	??_waitFlag,w
  4172  0776  00BC               	movwf	waitFlag@buf
  4173  0777                     l3056:	
  4174  0777  3001               	movlw	1
  4175  0778  07B8               	addwf	waitFlag@j_137,f
  4176  0779  1803               	skipnc
  4177  077A  0AB9               	incf	waitFlag@j_137+1,f
  4178  077B  3000               	movlw	0
  4179  077C  07B9               	addwf	waitFlag@j_137+1,f
  4180  077D  3000               	movlw	0
  4181  077E  0239               	subwf	waitFlag@j_137+1,w
  4182  077F  3008               	movlw	8
  4183  0780  1903               	skipnz
  4184  0781  0238               	subwf	waitFlag@j_137,w
  4185  0782  1C03               	skipc
  4186  0783  2F5C               	goto	l3046
  4187  0784                     l3060:	
  4188                           
  4189                           ;decode_AX25.c: 243: }
  4190                           ;decode_AX25.c: 244: }
  4191                           ;decode_AX25.c: 245: if(buf == ("JQ1ZHX"[5] << 1)){
  4192  0784  3010               	movlw	low (((STR_7+5)-__stringbase)| (0+32768))
  4193  0785  0084               	movwf	4
  4194  0786  120A  158A  2000  120A  118A  	fcall	stringdir
  4195  078B  00F6               	movwf	??_waitFlag
  4196  078C  01F7               	clrf	??_waitFlag+1
  4197  078D  1003               	clrc
  4198  078E  0DF6               	rlf	??_waitFlag,f
  4199  078F  0DF7               	rlf	??_waitFlag+1,f
  4200  0790  083C               	movf	waitFlag@buf,w
  4201  0791  00F8               	movwf	??_waitFlag+2
  4202  0792  01F9               	clrf	??_waitFlag+3
  4203  0793  0877               	movf	??_waitFlag+1,w
  4204  0794  0679               	xorwf	??_waitFlag+3,w
  4205  0795  1D03               	skipz
  4206  0796  2F99               	goto	u2645
  4207  0797  0876               	movf	??_waitFlag,w
  4208  0798  0678               	xorwf	??_waitFlag+2,w
  4209  0799                     u2645:	
  4210  0799  1D03               	skipz
  4211  079A  2FB0               	goto	l3078
  4212                           
  4213                           ;decode_AX25.c: 246: dPacket[dPacketnum] = buf;
  4214  079B  083C               	movf	waitFlag@buf,w
  4215  079C  00F6               	movwf	??_waitFlag
  4216  079D  0866               	movf	_dPacketnum,w
  4217  079E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4218  079F  0084               	movwf	4
  4219  07A0  0876               	movf	??_waitFlag,w
  4220  07A1  1783               	bsf	3,7	;select IRP bank3
  4221  07A2  0080               	movwf	0
  4222                           
  4223                           ;decode_AX25.c: 247: dPacketnum ++;
  4224  07A3  3001               	movlw	1
  4225  07A4  07E6               	addwf	_dPacketnum,f
  4226  07A5  1803               	skipnc
  4227  07A6  0AE7               	incf	_dPacketnum+1,f
  4228  07A7  3000               	movlw	0
  4229  07A8  07E7               	addwf	_dPacketnum+1,f
  4230                           
  4231                           ;decode_AX25.c: 248: rcv_state ++;
  4232  07A9  3001               	movlw	1
  4233  07AA  07EA               	addwf	_rcv_state,f
  4234  07AB  1803               	skipnc
  4235  07AC  0AEB               	incf	_rcv_state+1,f
  4236  07AD  3000               	movlw	0
  4237  07AE  07EB               	addwf	_rcv_state+1,f
  4238                           
  4239                           ;decode_AX25.c: 249: }else{
  4240  07AF  2B2F               	goto	l3080
  4241  07B0                     l3078:	
  4242                           ;decode_AX25.c: 268: }
  4243                           ;decode_AX25.c: 269: }else{
  4244                           
  4245                           ;decode_AX25.c: 267: rcv_state = 0;
  4246                           
  4247                           ;decode_AX25.c: 266: dPacketnum = 0;
  4248                           
  4249                           ;decode_AX25.c: 264: }
  4250                           ;decode_AX25.c: 265: }else{
  4251                           
  4252                           ;decode_AX25.c: 263: rcv_state = 0;
  4253                           
  4254                           ;decode_AX25.c: 262: dPacketnum = 0;
  4255                           
  4256                           ;decode_AX25.c: 260: }
  4257                           ;decode_AX25.c: 261: }else{
  4258                           
  4259                           ;decode_AX25.c: 259: rcv_state = 0;
  4260                           
  4261                           ;decode_AX25.c: 258: dPacketnum = 0;
  4262                           
  4263                           ;decode_AX25.c: 256: }
  4264                           ;decode_AX25.c: 257: }else{
  4265                           
  4266                           ;decode_AX25.c: 255: rcv_state = 0;
  4267                           
  4268                           ;decode_AX25.c: 254: dPacketnum = 0;
  4269                           
  4270                           ;decode_AX25.c: 252: }
  4271                           ;decode_AX25.c: 253: }else{
  4272                           
  4273                           ;decode_AX25.c: 251: rcv_state = 0;
  4274                           
  4275                           ;decode_AX25.c: 250: dPacketnum = 0;
  4276                           
  4277                           
  4278                           ;decode_AX25.c: 270: dPacketnum = 0;
  4279  07B0  01E6               	clrf	_dPacketnum
  4280  07B1  01E7               	clrf	_dPacketnum+1
  4281  07B2  2B2D               	goto	L6
  4282  07B3                     __end_of_waitFlag:	
  4283                           
  4284                           	psect	text6
  4285  0C10                     __ptext6:	
  4286 ;; *************** function _getdata *****************
  4287 ;; Defined at:
  4288 ;;		line 278 in file "decode_AX25.c"
  4289 ;; Parameters:    Size  Location     Type
  4290 ;;		None
  4291 ;; Auto vars:     Size  Location     Type
  4292 ;;  dbitstatus      2    4[BANK0 ] unsigned int 
  4293 ;;  dstuff          2    2[BANK0 ] unsigned int 
  4294 ;;  bufstore_cou    2    0[BANK0 ] unsigned int 
  4295 ;;  buf             1    6[BANK0 ] unsigned char 
  4296 ;;  dammy_data      1    0        unsigned char 
  4297 ;; Return value:  Size  Location     Type
  4298 ;;                  1    wreg      void 
  4299 ;; Registers used:
  4300 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4301 ;; Tracked objects:
  4302 ;;		On entry : 0/0
  4303 ;;		On exit  : 0/0
  4304 ;;		Unchanged: 0/0
  4305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4306 ;;      Params:         0       0       0       0       0
  4307 ;;      Locals:         0       7       0       0       0
  4308 ;;      Temps:          2       0       0       0       0
  4309 ;;      Totals:         2       7       0       0       0
  4310 ;;Total ram usage:        9 bytes
  4311 ;; Hardware stack levels used:    1
  4312 ;; Hardware stack levels required when called:    1
  4313 ;; This function calls:
  4314 ;;		_getbit
  4315 ;; This function is called by:
  4316 ;;		_ReceivePacket_data
  4317 ;;		_ReceivePacket
  4318 ;; This function uses a non-reentrant model
  4319 ;;
  4320                           
  4321                           
  4322                           ;psect for function _getdata
  4323  0C10                     _getdata:	
  4324                           
  4325                           ;decode_AX25.c: 279: UBYTE buf = 0x00;
  4326                           
  4327                           ;incstack = 0
  4328                           ; Regs used in _getdata: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4329  0C10  1283               	bcf	3,5	;RP0=0, select bank0
  4330  0C11  1303               	bcf	3,6	;RP1=0, select bank0
  4331  0C12  01A6               	clrf	getdata@buf
  4332                           
  4333                           ;decode_AX25.c: 280: UINT dstuff = 0;
  4334  0C13  01A2               	clrf	getdata@dstuff
  4335  0C14  01A3               	clrf	getdata@dstuff+1
  4336                           
  4337                           ;decode_AX25.c: 281: UBYTE dammy_data;
  4338                           ;decode_AX25.c: 282: UINT bufstore_counter = 0;
  4339  0C15  01A0               	clrf	getdata@bufstore_counter
  4340  0C16  01A1               	clrf	getdata@bufstore_counter+1
  4341                           
  4342                           ;decode_AX25.c: 283: UINT dbitstatus = 0;
  4343  0C17  01A4               	clrf	getdata@dbitstatus
  4344  0C18  01A5               	clrf	getdata@dbitstatus+1
  4345  0C19                     l3114:	
  4346                           ;decode_AX25.c: 285: while(rcv_state == 2){
  4347                           
  4348  0C19  3002               	movlw	2
  4349  0C1A  066A               	xorwf	_rcv_state,w
  4350  0C1B  046B               	iorwf	_rcv_state+1,w
  4351  0C1C  1D03               	btfss	3,2
  4352  0C1D  0008               	return
  4353                           
  4354                           ;decode_AX25.c: 286: dbitstatus = getbit();
  4355  0C1E  120A  158A  22B0  120A  158A  	fcall	_getbit
  4356  0C23  0871               	movf	?_getbit+1,w
  4357  0C24  1283               	bcf	3,5	;RP0=0, select bank0
  4358  0C25  1303               	bcf	3,6	;RP1=0, select bank0
  4359  0C26  00A5               	movwf	getdata@dbitstatus+1
  4360  0C27  0870               	movf	?_getbit,w
  4361  0C28  00A4               	movwf	getdata@dbitstatus
  4362                           
  4363                           ;decode_AX25.c: 287: if(dstuff == 5){
  4364  0C29  3005               	movlw	5
  4365  0C2A  0622               	xorwf	getdata@dstuff,w
  4366  0C2B  0423               	iorwf	getdata@dstuff+1,w
  4367  0C2C  1D03               	btfss	3,2
  4368  0C2D  2C3C               	goto	l3096
  4369                           
  4370                           ;decode_AX25.c: 288: if(dbitstatus == 1){
  4371  0C2E  0324               	decf	getdata@dbitstatus,w
  4372  0C2F  0425               	iorwf	getdata@dbitstatus+1,w
  4373  0C30  1D03               	btfss	3,2
  4374  0C31  2C39               	goto	l3094
  4375                           
  4376                           ;decode_AX25.c: 289: rcv_state ++;
  4377  0C32  3001               	movlw	1
  4378  0C33  07EA               	addwf	_rcv_state,f
  4379  0C34  1803               	skipnc
  4380  0C35  0AEB               	incf	_rcv_state+1,f
  4381  0C36  3000               	movlw	0
  4382  0C37  07EB               	addwf	_rcv_state+1,f
  4383                           
  4384                           ;decode_AX25.c: 290: break;
  4385  0C38  0008               	return
  4386  0C39                     l3094:	
  4387                           ;decode_AX25.c: 291: }else{
  4388                           
  4389                           
  4390                           ;decode_AX25.c: 292: dstuff = 0;
  4391  0C39  01A2               	clrf	getdata@dstuff
  4392  0C3A  01A3               	clrf	getdata@dstuff+1
  4393                           
  4394                           ;decode_AX25.c: 293: }
  4395                           ;decode_AX25.c: 294: }else{
  4396  0C3B  2C19               	goto	l3114
  4397  0C3C                     l3096:	
  4398                           
  4399                           ;decode_AX25.c: 295: buf = buf >> 1;
  4400  0C3C  0826               	movf	getdata@buf,w
  4401  0C3D  00F6               	movwf	??_getdata
  4402  0C3E  1003               	clrc
  4403  0C3F  0C76               	rrf	??_getdata,w
  4404  0C40  00F7               	movwf	??_getdata+1
  4405  0C41  0877               	movf	??_getdata+1,w
  4406  0C42  00A6               	movwf	getdata@buf
  4407                           
  4408                           ;decode_AX25.c: 297: buf = buf | 0x00;
  4409  0C43  0824               	movf	getdata@dbitstatus,w
  4410  0C44  0425               	iorwf	getdata@dbitstatus+1,w
  4411  0C45  1D03               	btfss	3,2
  4412  0C46  2C4A               	goto	l3100
  4413                           
  4414                           ;decode_AX25.c: 298: dstuff = 0;
  4415  0C47  01A2               	clrf	getdata@dstuff
  4416  0C48  01A3               	clrf	getdata@dstuff+1
  4417                           
  4418                           ;decode_AX25.c: 299: }else{
  4419  0C49  2C55               	goto	l3104
  4420  0C4A                     l3100:	
  4421                           
  4422                           ;decode_AX25.c: 300: buf = buf | 0x80;
  4423  0C4A  0826               	movf	getdata@buf,w
  4424  0C4B  3880               	iorlw	128
  4425  0C4C  00F6               	movwf	??_getdata
  4426  0C4D  0876               	movf	??_getdata,w
  4427  0C4E  00A6               	movwf	getdata@buf
  4428                           
  4429                           ;decode_AX25.c: 301: dstuff ++;
  4430  0C4F  3001               	movlw	1
  4431  0C50  07A2               	addwf	getdata@dstuff,f
  4432  0C51  1803               	skipnc
  4433  0C52  0AA3               	incf	getdata@dstuff+1,f
  4434  0C53  3000               	movlw	0
  4435  0C54  07A3               	addwf	getdata@dstuff+1,f
  4436  0C55                     l3104:	
  4437                           
  4438                           ;decode_AX25.c: 302: }
  4439                           ;decode_AX25.c: 303: bufstore_counter ++;
  4440  0C55  3001               	movlw	1
  4441  0C56  07A0               	addwf	getdata@bufstore_counter,f
  4442  0C57  1803               	skipnc
  4443  0C58  0AA1               	incf	getdata@bufstore_counter+1,f
  4444  0C59  3000               	movlw	0
  4445  0C5A  07A1               	addwf	getdata@bufstore_counter+1,f
  4446                           
  4447                           ;decode_AX25.c: 304: if(bufstore_counter == 8){
  4448  0C5B  3008               	movlw	8
  4449  0C5C  0620               	xorwf	getdata@bufstore_counter,w
  4450  0C5D  0421               	iorwf	getdata@bufstore_counter+1,w
  4451  0C5E  1D03               	btfss	3,2
  4452  0C5F  2C19               	goto	l3114
  4453                           
  4454                           ;decode_AX25.c: 305: bufstore_counter = 0;
  4455  0C60  01A0               	clrf	getdata@bufstore_counter
  4456  0C61  01A1               	clrf	getdata@bufstore_counter+1
  4457                           
  4458                           ;decode_AX25.c: 306: dPacket[dPacketnum] = buf;
  4459  0C62  0826               	movf	getdata@buf,w
  4460  0C63  00F6               	movwf	??_getdata
  4461  0C64  0866               	movf	_dPacketnum,w
  4462  0C65  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4463  0C66  0084               	movwf	4
  4464  0C67  0876               	movf	??_getdata,w
  4465  0C68  1783               	bsf	3,7	;select IRP bank3
  4466  0C69  0080               	movwf	0
  4467                           
  4468                           ;decode_AX25.c: 307: dPacketnum ++;
  4469  0C6A  3001               	movlw	1
  4470  0C6B  07E6               	addwf	_dPacketnum,f
  4471  0C6C  1803               	skipnc
  4472  0C6D  0AE7               	incf	_dPacketnum+1,f
  4473  0C6E  3000               	movlw	0
  4474  0C6F  07E7               	addwf	_dPacketnum+1,f
  4475  0C70  2C19               	goto	l3114
  4476  0C71                     __end_of_getdata:	
  4477                           
  4478                           	psect	text7
  4479  0AB0                     __ptext7:	
  4480 ;; *************** function _getbit *****************
  4481 ;; Defined at:
  4482 ;;		line 40 in file "decode_AX25.c"
  4483 ;; Parameters:    Size  Location     Type
  4484 ;;		None
  4485 ;; Auto vars:     Size  Location     Type
  4486 ;;  i               2    4[COMMON] unsigned int 
  4487 ;; Return value:  Size  Location     Type
  4488 ;;                  2    0[COMMON] unsigned int 
  4489 ;; Registers used:
  4490 ;;		wreg, status,2, status,0
  4491 ;; Tracked objects:
  4492 ;;		On entry : 0/0
  4493 ;;		On exit  : 0/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4496 ;;      Params:         2       0       0       0       0
  4497 ;;      Locals:         2       0       0       0       0
  4498 ;;      Temps:          2       0       0       0       0
  4499 ;;      Totals:         6       0       0       0       0
  4500 ;;Total ram usage:        6 bytes
  4501 ;; Hardware stack levels used:    1
  4502 ;; This function calls:
  4503 ;;		Nothing
  4504 ;; This function is called by:
  4505 ;;		_waitFlag
  4506 ;;		_getdata
  4507 ;;		_conv_DI_UARTRX
  4508 ;; This function uses a non-reentrant model
  4509 ;;
  4510                           
  4511                           
  4512                           ;psect for function _getbit
  4513  0AB0                     _getbit:	
  4514                           
  4515                           ;decode_AX25.c: 41: static UINT oldbit;
  4516                           ;decode_AX25.c: 42: oldbit = RB5;
  4517                           
  4518                           ;incstack = 0
  4519                           ; Regs used in _getbit: [wreg+status,2+status,0]
  4520  0AB0  1003               	clrc
  4521  0AB1  1283               	bcf	3,5	;RP0=0, select bank0
  4522  0AB2  1303               	bcf	3,6	;RP1=0, select bank0
  4523  0AB3  1A86               	btfsc	6,5	;volatile
  4524  0AB4  1403               	setc
  4525  0AB5  3000               	movlw	0
  4526  0AB6  1803               	skipnc
  4527  0AB7  3001               	movlw	1
  4528  0AB8  00F2               	movwf	??_getbit
  4529  0AB9  01F3               	clrf	??_getbit+1
  4530  0ABA  0872               	movf	??_getbit,w
  4531  0ABB  1683               	bsf	3,5	;RP0=1, select bank1
  4532  0ABC  1303               	bcf	3,6	;RP1=0, select bank1
  4533  0ABD  00E6               	movwf	getbit@oldbit^(0+128)
  4534  0ABE  0873               	movf	??_getbit+1,w
  4535  0ABF  00E7               	movwf	(getbit@oldbit+1)^(0+128)
  4536                           
  4537                           ;decode_AX25.c: 43: for(UINT i=0;i<62;i++){
  4538  0AC0  01F4               	clrf	getbit@i
  4539  0AC1  01F5               	clrf	getbit@i+1
  4540  0AC2  3000               	movlw	0
  4541  0AC3  0275               	subwf	getbit@i+1,w
  4542  0AC4  303E               	movlw	62
  4543  0AC5  1903               	skipnz
  4544  0AC6  0274               	subwf	getbit@i,w
  4545  0AC7  1803               	btfsc	3,0
  4546  0AC8  2AF7               	goto	l2560
  4547                           
  4548                           ;decode_AX25.c: 44: if(RB5 != oldbit){
  4549  0AC9  1003               	clrc
  4550  0ACA                     L7:	
  4551  0ACA  1283               	bcf	3,5	;RP0=0, select bank0
  4552  0ACB  1A86               	btfsc	6,5	;volatile
  4553  0ACC  1403               	setc
  4554  0ACD  3000               	movlw	0
  4555  0ACE  1803               	skipnc
  4556  0ACF  3001               	movlw	1
  4557  0AD0  00F2               	movwf	??_getbit
  4558  0AD1  01F3               	clrf	??_getbit+1
  4559  0AD2  1683               	bsf	3,5	;RP0=1, select bank1
  4560  0AD3  1303               	bcf	3,6	;RP1=0, select bank1
  4561  0AD4  0867               	movf	(getbit@oldbit+1)^(0+128),w
  4562  0AD5  0673               	xorwf	??_getbit+1,w
  4563  0AD6  1D03               	skipz
  4564  0AD7  2ADA               	goto	u1875
  4565  0AD8  0866               	movf	getbit@oldbit^(0+128),w
  4566  0AD9  0672               	xorwf	??_getbit,w
  4567  0ADA                     u1875:	
  4568  0ADA  1903               	skipnz
  4569  0ADB  2AEA               	goto	l2558
  4570                           
  4571                           ;decode_AX25.c: 45: _delay((unsigned long)((400)*(10000000/4000000.0)));
  4572  0ADC  30F9               	movlw	249
  4573  0ADD  00F2               	movwf	??_getbit
  4574  0ADE                     u3667:	
  4575  0ADE  0000               	nop
  4576  0ADF  0BF2               	decfsz	??_getbit,f
  4577  0AE0  2ADE               	goto	u3667
  4578  0AE1  2AE2               	nop2	;nop
  4579  0AE2  0000               	nop
  4580                           
  4581                           ;decode_AX25.c: 46: RC2= 1- RC2;
  4582  0AE3  3004               	movlw	4
  4583  0AE4  1283               	bcf	3,5	;RP0=0, select bank0
  4584  0AE5  1303               	bcf	3,6	;RP1=0, select bank0
  4585  0AE6  0687               	xorwf	7,f
  4586                           
  4587                           ;decode_AX25.c: 47: return 0;
  4588  0AE7  01F0               	clrf	?_getbit
  4589  0AE8  01F1               	clrf	?_getbit+1
  4590  0AE9  0008               	return
  4591  0AEA                     l2558:	
  4592  0AEA  3001               	movlw	1
  4593  0AEB  07F4               	addwf	getbit@i,f
  4594  0AEC  1803               	skipnc
  4595  0AED  0AF5               	incf	getbit@i+1,f
  4596  0AEE  3000               	movlw	0
  4597  0AEF  07F5               	addwf	getbit@i+1,f
  4598  0AF0  3000               	movlw	0
  4599  0AF1  0275               	subwf	getbit@i+1,w
  4600  0AF2  303E               	movlw	62
  4601  0AF3  1903               	skipnz
  4602  0AF4  0274               	subwf	getbit@i,w
  4603  0AF5  1C03               	skipc
  4604  0AF6  2ACA               	goto	L7
  4605  0AF7                     l2560:	
  4606                           
  4607                           ;decode_AX25.c: 48: }
  4608                           ;decode_AX25.c: 49: }
  4609                           ;decode_AX25.c: 50: return 1;
  4610  0AF7  3001               	movlw	1
  4611  0AF8  00F0               	movwf	?_getbit
  4612  0AF9  3000               	movlw	0
  4613  0AFA  00F1               	movwf	?_getbit+1
  4614  0AFB  0008               	return
  4615  0AFC                     __end_of_getbit:	
  4616                           
  4617                           	psect	text8
  4618  002A                     __ptext8:	
  4619 ;; *************** function _fcscheck *****************
  4620 ;; Defined at:
  4621 ;;		line 313 in file "decode_AX25.c"
  4622 ;; Parameters:    Size  Location     Type
  4623 ;;		None
  4624 ;; Auto vars:     Size  Location     Type
  4625 ;;  i               2    7[COMMON] unsigned int 
  4626 ;;  i               2    5[COMMON] unsigned int 
  4627 ;;  byte            1    9[COMMON] unsigned char 
  4628 ;;  bt              1    4[COMMON] unsigned char 
  4629 ;; Return value:  Size  Location     Type
  4630 ;;                  2    0[COMMON] unsigned int 
  4631 ;; Registers used:
  4632 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4633 ;; Tracked objects:
  4634 ;;		On entry : 0/0
  4635 ;;		On exit  : 0/0
  4636 ;;		Unchanged: 0/0
  4637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4638 ;;      Params:         2       0       0       0       0
  4639 ;;      Locals:         6       0       0       0       0
  4640 ;;      Temps:          2       0       0       0       0
  4641 ;;      Totals:        10       0       0       0       0
  4642 ;;Total ram usage:       10 bytes
  4643 ;; Hardware stack levels used:    1
  4644 ;; This function calls:
  4645 ;;		Nothing
  4646 ;; This function is called by:
  4647 ;;		_ReceivePacket_data
  4648 ;;		_ReceivePacket
  4649 ;; This function uses a non-reentrant model
  4650 ;;
  4651                           
  4652                           
  4653                           ;psect for function _fcscheck
  4654  002A                     _fcscheck:	
  4655                           
  4656                           ;decode_AX25.c: 314: UBYTE bt,byte;
  4657                           ;decode_AX25.c: 315: dfcslo = dfcshi = 0xff;
  4658                           
  4659                           ;incstack = 0
  4660                           ; Regs used in _fcscheck: [wreg-fsr0h+status,2+status,0]
  4661  002A  30FF               	movlw	255
  4662  002B  1283               	bcf	3,5	;RP0=0, select bank0
  4663  002C  1303               	bcf	3,6	;RP1=0, select bank0
  4664  002D  00EC               	movwf	_dfcshi
  4665  002E  00F2               	movwf	??_fcscheck
  4666  002F  0872               	movf	??_fcscheck,w
  4667  0030  00ED               	movwf	_dfcslo
  4668                           
  4669                           ;decode_AX25.c: 316: while(rcv_state == 3){
  4670  0031  3003               	movlw	3
  4671  0032  066A               	xorwf	_rcv_state,w
  4672  0033  046B               	iorwf	_rcv_state+1,w
  4673  0034  1D03               	btfss	3,2
  4674  0035  0008               	return
  4675                           
  4676                           ;decode_AX25.c: 317: for(UINT i=0;i<dPacketnum-2;i++){
  4677  0036  01F5               	clrf	fcscheck@i
  4678  0037  01F6               	clrf	fcscheck@i+1
  4679  0038                     l3142:	
  4680  0038  0866               	movf	_dPacketnum,w
  4681  0039  3EFE               	addlw	254
  4682  003A  00F2               	movwf	??_fcscheck
  4683  003B  0867               	movf	_dPacketnum+1,w
  4684  003C  1803               	skipnc
  4685  003D  3E01               	addlw	1
  4686  003E  3EFF               	addlw	255
  4687  003F  00F3               	movwf	??_fcscheck+1
  4688  0040  0873               	movf	??_fcscheck+1,w
  4689  0041  0276               	subwf	fcscheck@i+1,w
  4690  0042  1D03               	skipz
  4691  0043  2846               	goto	u2745
  4692  0044  0872               	movf	??_fcscheck,w
  4693  0045  0275               	subwf	fcscheck@i,w
  4694  0046                     u2745:	
  4695  0046  1803               	btfsc	3,0
  4696  0047  2891               	goto	l279
  4697                           
  4698                           ;decode_AX25.c: 318: byte = dPacket[i];
  4699  0048  0875               	movf	fcscheck@i,w
  4700  0049  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4701  004A  0084               	movwf	4
  4702  004B  1783               	bsf	3,7	;select IRP bank3
  4703  004C  0800               	movf	0,w
  4704  004D  00F2               	movwf	??_fcscheck
  4705  004E  0872               	movf	??_fcscheck,w
  4706  004F  00F9               	movwf	fcscheck@byte
  4707                           
  4708                           ;decode_AX25.c: 319: for(UINT i=0;i<8;i++){
  4709  0050  01F7               	clrf	fcscheck@i_149
  4710  0051  01F8               	clrf	fcscheck@i_149+1
  4711  0052  3000               	movlw	0
  4712  0053  0278               	subwf	fcscheck@i_149+1,w
  4713  0054  3008               	movlw	8
  4714  0055  1903               	skipnz
  4715  0056  0277               	subwf	fcscheck@i_149,w
  4716  0057  1803               	btfsc	3,0
  4717  0058  288A               	goto	l3140
  4718  0059                     l3128:	
  4719                           
  4720                           ;decode_AX25.c: 320: bt = byte & 0x01;
  4721  0059  0879               	movf	fcscheck@byte,w
  4722  005A  3901               	andlw	1
  4723  005B  00F2               	movwf	??_fcscheck
  4724  005C  0872               	movf	??_fcscheck,w
  4725  005D  00F4               	movwf	fcscheck@bt
  4726  005E  1003               	bcf	3,0	;# 
  4727  005F  0CEC               	rrf	_dfcshi,f	;# 
  4728  0060  0CED               	rrf	_dfcslo,f	;# 
  4729                           
  4730                           ;decode_AX25.c: 326: if(((STATUS & 0x01)^bt) == 0x01){
  4731  0061  3001               	movlw	1
  4732  0062  1283               	bcf	3,5	;RP0=0, select bank0
  4733  0063  1303               	bcf	3,6	;RP1=0, select bank0
  4734  0064  0503               	andwf	3,w	;volatile
  4735  0065  00F2               	movwf	??_fcscheck
  4736  0066  0874               	movf	fcscheck@bt,w
  4737  0067  0672               	xorwf	??_fcscheck,w
  4738  0068  00F3               	movwf	??_fcscheck+1
  4739  0069  0373               	decf	??_fcscheck+1,w
  4740  006A  1D03               	btfss	3,2
  4741  006B  2876               	goto	l3134
  4742                           
  4743                           ;decode_AX25.c: 327: dfcshi = dfcshi ^ 0x84;
  4744  006C  086C               	movf	_dfcshi,w
  4745  006D  3A84               	xorlw	132
  4746  006E  00F2               	movwf	??_fcscheck
  4747  006F  0872               	movf	??_fcscheck,w
  4748  0070  00EC               	movwf	_dfcshi
  4749                           
  4750                           ;decode_AX25.c: 328: dfcslo = dfcslo ^ 0x08;
  4751  0071  086D               	movf	_dfcslo,w
  4752  0072  3A08               	xorlw	8
  4753  0073  00F2               	movwf	??_fcscheck
  4754  0074  0872               	movf	??_fcscheck,w
  4755  0075  00ED               	movwf	_dfcslo
  4756  0076                     l3134:	
  4757                           
  4758                           ;decode_AX25.c: 329: }
  4759                           ;decode_AX25.c: 330: byte = byte >> 1;
  4760  0076  0879               	movf	fcscheck@byte,w
  4761  0077  00F2               	movwf	??_fcscheck
  4762  0078  1003               	clrc
  4763  0079  0C72               	rrf	??_fcscheck,w
  4764  007A  00F3               	movwf	??_fcscheck+1
  4765  007B  0873               	movf	??_fcscheck+1,w
  4766  007C  00F9               	movwf	fcscheck@byte
  4767  007D  3001               	movlw	1
  4768  007E  07F7               	addwf	fcscheck@i_149,f
  4769  007F  1803               	skipnc
  4770  0080  0AF8               	incf	fcscheck@i_149+1,f
  4771  0081  3000               	movlw	0
  4772  0082  07F8               	addwf	fcscheck@i_149+1,f
  4773  0083  3000               	movlw	0
  4774  0084  0278               	subwf	fcscheck@i_149+1,w
  4775  0085  3008               	movlw	8
  4776  0086  1903               	skipnz
  4777  0087  0277               	subwf	fcscheck@i_149,w
  4778  0088  1C03               	skipc
  4779  0089  2859               	goto	l3128
  4780  008A                     l3140:	
  4781  008A  3001               	movlw	1
  4782  008B  07F5               	addwf	fcscheck@i,f
  4783  008C  1803               	skipnc
  4784  008D  0AF6               	incf	fcscheck@i+1,f
  4785  008E  3000               	movlw	0
  4786  008F  07F6               	addwf	fcscheck@i+1,f
  4787  0090  2838               	goto	l3142
  4788  0091                     l279:	
  4789                           
  4790                           ;decode_AX25.c: 331: }
  4791                           ;decode_AX25.c: 332: }
  4792                           ;decode_AX25.c: 333: dfcslo = dfcslo ^ 0xff;
  4793  0091  09ED               	comf	_dfcslo,f
  4794                           
  4795                           ;decode_AX25.c: 334: dfcshi = dfcshi ^ 0xff;
  4796  0092  09EC               	comf	_dfcshi,f
  4797                           
  4798                           ;decode_AX25.c: 337: if((dPacket[dPacketnum-2] == dfcslo) && (dPacket[dPacketnum-1] == d
      +                          fcshi)){
  4799  0093  0866               	movf	_dPacketnum,w
  4800  0094  3EFE               	addlw	254
  4801  0095  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4802  0096  0084               	movwf	4
  4803  0097  1783               	bsf	3,7	;select IRP bank3
  4804  0098  0800               	movf	0,w
  4805  0099  066D               	xorwf	_dfcslo,w
  4806  009A  1D03               	skipz
  4807  009B  28A9               	goto	l3154
  4808  009C  0866               	movf	_dPacketnum,w
  4809  009D  3EFF               	addlw	255
  4810  009E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4811  009F  0084               	movwf	4
  4812  00A0  0800               	movf	0,w
  4813  00A1  066C               	xorwf	_dfcshi,w
  4814  00A2  1D03               	skipz
  4815  00A3  28A9               	goto	l3154
  4816                           
  4817                           ;decode_AX25.c: 342: return 1;
  4818  00A4  3001               	movlw	1
  4819  00A5  00F0               	movwf	?_fcscheck
  4820  00A6  3000               	movlw	0
  4821  00A7  00F1               	movwf	?_fcscheck+1
  4822  00A8  0008               	return
  4823  00A9                     l3154:	
  4824                           ;decode_AX25.c: 343: }else{
  4825                           
  4826                           
  4827                           ;decode_AX25.c: 348: return 0;
  4828  00A9  01F0               	clrf	?_fcscheck
  4829  00AA  01F1               	clrf	?_fcscheck+1
  4830  00AB  0008               	return
  4831  00AC                     __end_of_fcscheck:	
  4832                           
  4833                           	psect	text9
  4834  084A                     __ptext9:	
  4835 ;; *************** function _NM_waddress *****************
  4836 ;; Defined at:
  4837 ;;		line 72 in file "UART.c"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;  NM_wad_heade    1    wreg     unsigned char 
  4840 ;;  whigh_addres    1    1[COMMON] unsigned char 
  4841 ;;  wlow_address    1    2[COMMON] unsigned char 
  4842 ;; Auto vars:     Size  Location     Type
  4843 ;;  NM_wad_heade    1    3[COMMON] unsigned char 
  4844 ;; Return value:  Size  Location     Type
  4845 ;;                  1    wreg      void 
  4846 ;; Registers used:
  4847 ;;		wreg, status,2, status,0, pclath, cstack
  4848 ;; Tracked objects:
  4849 ;;		On entry : 0/0
  4850 ;;		On exit  : 0/0
  4851 ;;		Unchanged: 0/0
  4852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4853 ;;      Params:         2       0       0       0       0
  4854 ;;      Locals:         1       0       0       0       0
  4855 ;;      Temps:          0       0       0       0       0
  4856 ;;      Totals:         3       0       0       0       0
  4857 ;;Total ram usage:        3 bytes
  4858 ;; Hardware stack levels used:    1
  4859 ;; Hardware stack levels required when called:    1
  4860 ;; This function calls:
  4861 ;;		_putch
  4862 ;; This function is called by:
  4863 ;;		_main
  4864 ;; This function uses a non-reentrant model
  4865 ;;
  4866                           
  4867                           
  4868                           ;psect for function _NM_waddress
  4869  084A                     _NM_waddress:	
  4870                           
  4871                           ;incstack = 0
  4872                           ; Regs used in _NM_waddress: [wreg+status,2+status,0+pclath+cstack]
  4873                           ;NM_waddress@NM_wad_header stored from wreg
  4874  084A  00F3               	movwf	NM_waddress@NM_wad_header
  4875                           
  4876                           ;UART.c: 73: putch(NM_wad_header);
  4877  084B  0873               	movf	NM_waddress@NM_wad_header,w
  4878  084C  120A  158A  2020  120A  158A  	fcall	_putch
  4879                           
  4880                           ;UART.c: 74: putch(whigh_address);
  4881  0851  0871               	movf	NM_waddress@whigh_address,w
  4882  0852  120A  158A  2020  120A  158A  	fcall	_putch
  4883                           
  4884                           ;UART.c: 75: putch(wlow_address);
  4885  0857  0872               	movf	NM_waddress@wlow_address,w
  4886  0858  120A  158A  2020   	fcall	_putch
  4887  085B  0008               	return
  4888  085C                     __end_of_NM_waddress:	
  4889                           
  4890                           	psect	text10
  4891  0820                     __ptext10:	
  4892 ;; *************** function _putch *****************
  4893 ;; Defined at:
  4894 ;;		line 39 in file "UART.c"
  4895 ;; Parameters:    Size  Location     Type
  4896 ;;  byte            1    wreg     unsigned char 
  4897 ;; Auto vars:     Size  Location     Type
  4898 ;;  byte            1    0[COMMON] unsigned char 
  4899 ;; Return value:  Size  Location     Type
  4900 ;;                  1    wreg      void 
  4901 ;; Registers used:
  4902 ;;		wreg
  4903 ;; Tracked objects:
  4904 ;;		On entry : 0/0
  4905 ;;		On exit  : 0/0
  4906 ;;		Unchanged: 0/0
  4907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4908 ;;      Params:         0       0       0       0       0
  4909 ;;      Locals:         1       0       0       0       0
  4910 ;;      Temps:          0       0       0       0       0
  4911 ;;      Totals:         1       0       0       0       0
  4912 ;;Total ram usage:        1 bytes
  4913 ;; Hardware stack levels used:    1
  4914 ;; This function calls:
  4915 ;;		Nothing
  4916 ;; This function is called by:
  4917 ;;		_NM_waddress
  4918 ;;		_TXOBC_waddress
  4919 ;;		_printf
  4920 ;;		_putstr
  4921 ;;		_putcrlf
  4922 ;;		_put_error
  4923 ;;		_put_ok
  4924 ;;		_putAX25
  4925 ;;		_conv_DI_UARTRX
  4926 ;;		_test_Packetmaker
  4927 ;;		_EEPROM_Read
  4928 ;; This function uses a non-reentrant model
  4929 ;;
  4930                           
  4931                           
  4932                           ;psect for function _putch
  4933  0820                     _putch:	
  4934                           
  4935                           ;incstack = 0
  4936                           ; Regs used in _putch: [wreg]
  4937                           ;putch@byte stored from wreg
  4938  0820  00F0               	movwf	putch@byte
  4939  0821                     l69:	
  4940                           ;UART.c: 40: while(!TXIF);
  4941                           
  4942  0821  1283               	bcf	3,5	;RP0=0, select bank0
  4943  0822  1303               	bcf	3,6	;RP1=0, select bank0
  4944  0823  1E0C               	btfss	12,4	;volatile
  4945  0824  2821               	goto	l69
  4946                           
  4947                           ;UART.c: 41: TXREG = byte;
  4948  0825  0870               	movf	putch@byte,w
  4949  0826  0099               	movwf	25	;volatile
  4950  0827  0008               	return
  4951  0828                     __end_of_putch:	
  4952                           
  4953                           	psect	text11
  4954  0871                     __ptext11:	
  4955 ;; *************** function _Init_SERIAL *****************
  4956 ;; Defined at:
  4957 ;;		line 6 in file "UART.c"
  4958 ;; Parameters:    Size  Location     Type
  4959 ;;		None
  4960 ;; Auto vars:     Size  Location     Type
  4961 ;;		None
  4962 ;; Return value:  Size  Location     Type
  4963 ;;                  1    wreg      void 
  4964 ;; Registers used:
  4965 ;;		wreg
  4966 ;; Tracked objects:
  4967 ;;		On entry : 0/0
  4968 ;;		On exit  : 0/0
  4969 ;;		Unchanged: 0/0
  4970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4971 ;;      Params:         0       0       0       0       0
  4972 ;;      Locals:         0       0       0       0       0
  4973 ;;      Temps:          0       0       0       0       0
  4974 ;;      Totals:         0       0       0       0       0
  4975 ;;Total ram usage:        0 bytes
  4976 ;; Hardware stack levels used:    1
  4977 ;; This function calls:
  4978 ;;		Nothing
  4979 ;; This function is called by:
  4980 ;;		_main
  4981 ;; This function uses a non-reentrant model
  4982 ;;
  4983                           
  4984                           
  4985                           ;psect for function _Init_SERIAL
  4986  0871                     _Init_SERIAL:	
  4987                           
  4988                           ;UART.c: 7: SPBRG = 10;
  4989                           
  4990                           ;incstack = 0
  4991                           ; Regs used in _Init_SERIAL: [wreg]
  4992  0871  300A               	movlw	10
  4993  0872  1683               	bsf	3,5	;RP0=1, select bank1
  4994  0873  1303               	bcf	3,6	;RP1=0, select bank1
  4995  0874  0099               	movwf	25	;volatile
  4996                           
  4997                           ;UART.c: 8: BRGH = 0;
  4998  0875  1118               	bcf	24,2	;volatile
  4999                           
  5000                           ;UART.c: 9: SYNC = 0;
  5001  0876  1218               	bcf	24,4	;volatile
  5002                           
  5003                           ;UART.c: 10: SPEN = 1;
  5004  0877  1283               	bcf	3,5	;RP0=0, select bank0
  5005  0878  1303               	bcf	3,6	;RP1=0, select bank0
  5006  0879  1798               	bsf	24,7	;volatile
  5007                           
  5008                           ;UART.c: 11: CREN = 1;
  5009  087A  1618               	bsf	24,4	;volatile
  5010                           
  5011                           ;UART.c: 12: SREN = 0;
  5012  087B  1298               	bcf	24,5	;volatile
  5013                           
  5014                           ;UART.c: 13: RCIF = 0;
  5015  087C  128C               	bcf	12,5	;volatile
  5016                           
  5017                           ;UART.c: 14: TXIE = 0;
  5018  087D  1683               	bsf	3,5	;RP0=1, select bank1
  5019  087E  1303               	bcf	3,6	;RP1=0, select bank1
  5020  087F  120C               	bcf	12,4	;volatile
  5021                           
  5022                           ;UART.c: 15: RCIE = 1;
  5023  0880  168C               	bsf	12,5	;volatile
  5024                           
  5025                           ;UART.c: 16: TX9 = 0;
  5026  0881  1318               	bcf	24,6	;volatile
  5027                           
  5028                           ;UART.c: 17: RX9 = 0;
  5029  0882  1283               	bcf	3,5	;RP0=0, select bank0
  5030  0883  1303               	bcf	3,6	;RP1=0, select bank0
  5031  0884  1318               	bcf	24,6	;volatile
  5032                           
  5033                           ;UART.c: 18: TXEN = 0;
  5034  0885  1683               	bsf	3,5	;RP0=1, select bank1
  5035  0886  1303               	bcf	3,6	;RP1=0, select bank1
  5036  0887  1298               	bcf	24,5	;volatile
  5037                           
  5038                           ;UART.c: 19: TXEN = 1;
  5039  0888  1698               	bsf	24,5	;volatile
  5040  0889  0008               	return
  5041  088A                     __end_of_Init_SERIAL:	
  5042                           
  5043                           	psect	text12
  5044  08D9                     __ptext12:	
  5045 ;; *************** function _Init_MPU *****************
  5046 ;; Defined at:
  5047 ;;		line 8 in file "Init_MPU.c"
  5048 ;; Parameters:    Size  Location     Type
  5049 ;;		None
  5050 ;; Auto vars:     Size  Location     Type
  5051 ;;		None
  5052 ;; Return value:  Size  Location     Type
  5053 ;;                  1    wreg      void 
  5054 ;; Registers used:
  5055 ;;		wreg, status,2
  5056 ;; Tracked objects:
  5057 ;;		On entry : 0/0
  5058 ;;		On exit  : 0/0
  5059 ;;		Unchanged: 0/0
  5060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5061 ;;      Params:         0       0       0       0       0
  5062 ;;      Locals:         0       0       0       0       0
  5063 ;;      Temps:          0       0       0       0       0
  5064 ;;      Totals:         0       0       0       0       0
  5065 ;;Total ram usage:        0 bytes
  5066 ;; Hardware stack levels used:    1
  5067 ;; This function calls:
  5068 ;;		Nothing
  5069 ;; This function is called by:
  5070 ;;		_main
  5071 ;; This function uses a non-reentrant model
  5072 ;;
  5073                           
  5074                           
  5075                           ;psect for function _Init_MPU
  5076  08D9                     _Init_MPU:	
  5077                           
  5078                           ;Init_MPU.c: 11: PORTA = 0x00;
  5079                           
  5080                           ;incstack = 0
  5081                           ; Regs used in _Init_MPU: [wreg+status,2]
  5082  08D9  1283               	bcf	3,5	;RP0=0, select bank0
  5083  08DA  1303               	bcf	3,6	;RP1=0, select bank0
  5084  08DB  0185               	clrf	5	;volatile
  5085                           
  5086                           ;Init_MPU.c: 12: PORTB = 0x00;
  5087  08DC  0186               	clrf	6	;volatile
  5088                           
  5089                           ;Init_MPU.c: 13: PORTC = 0x00;
  5090  08DD  0187               	clrf	7	;volatile
  5091                           
  5092                           ;Init_MPU.c: 14: PORTD = 0x00;
  5093  08DE  0188               	clrf	8	;volatile
  5094                           
  5095                           ;Init_MPU.c: 15: PORTE = 0x00;
  5096  08DF  0189               	clrf	9	;volatile
  5097                           
  5098                           ;Init_MPU.c: 18: ANSEL = 0x00;
  5099  08E0  1683               	bsf	3,5	;RP0=1, select bank3
  5100  08E1  1703               	bsf	3,6	;RP1=1, select bank3
  5101  08E2  0188               	clrf	8	;volatile
  5102                           
  5103                           ;Init_MPU.c: 19: ANSELH = 0x00;
  5104  08E3  0189               	clrf	9	;volatile
  5105                           
  5106                           ;Init_MPU.c: 23: TRISA = 0b10000000;
  5107  08E4  3080               	movlw	128
  5108  08E5  1683               	bsf	3,5	;RP0=1, select bank1
  5109  08E6  1303               	bcf	3,6	;RP1=0, select bank1
  5110  08E7  0085               	movwf	5	;volatile
  5111                           
  5112                           ;Init_MPU.c: 24: TRISB = 0b00100000;
  5113  08E8  3020               	movlw	32
  5114  08E9  0086               	movwf	6	;volatile
  5115                           
  5116                           ;Init_MPU.c: 25: TRISC = 0b10011000;
  5117  08EA  3098               	movlw	152
  5118  08EB  0087               	movwf	7	;volatile
  5119                           
  5120                           ;Init_MPU.c: 26: TRISD = 0b00000000;
  5121  08EC  0188               	clrf	8	;volatile
  5122                           
  5123                           ;Init_MPU.c: 27: TRISE = 0b00000000;
  5124  08ED  0189               	clrf	9	;volatile
  5125                           
  5126                           ;Init_MPU.c: 30: PORTA = 0x00;
  5127  08EE  1283               	bcf	3,5	;RP0=0, select bank0
  5128  08EF  1303               	bcf	3,6	;RP1=0, select bank0
  5129  08F0  0185               	clrf	5	;volatile
  5130                           
  5131                           ;Init_MPU.c: 31: PORTB = 0x00;
  5132  08F1  0186               	clrf	6	;volatile
  5133                           
  5134                           ;Init_MPU.c: 32: PORTC = 0x00;
  5135  08F2  0187               	clrf	7	;volatile
  5136                           
  5137                           ;Init_MPU.c: 33: PORTD = 0x00;
  5138  08F3  0188               	clrf	8	;volatile
  5139                           
  5140                           ;Init_MPU.c: 34: PORTE = 0x00;
  5141  08F4  0189               	clrf	9	;volatile
  5142  08F5  0008               	return
  5143  08F6                     __end_of_Init_MPU:	
  5144                           
  5145                           	psect	text13
  5146  09F0                     __ptext13:	
  5147 ;; *************** function _Init_I2C_M *****************
  5148 ;; Defined at:
  5149 ;;		line 8 in file "I2C.c"
  5150 ;; Parameters:    Size  Location     Type
  5151 ;;  c               4    0[BANK0 ] const unsigned long 
  5152 ;; Auto vars:     Size  Location     Type
  5153 ;;		None
  5154 ;; Return value:  Size  Location     Type
  5155 ;;                  1    wreg      void 
  5156 ;; Registers used:
  5157 ;;		wreg, status,2, status,0, pclath, cstack
  5158 ;; Tracked objects:
  5159 ;;		On entry : 0/0
  5160 ;;		On exit  : 0/0
  5161 ;;		Unchanged: 0/0
  5162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5163 ;;      Params:         0       4       0       0       0
  5164 ;;      Locals:         0       0       0       0       0
  5165 ;;      Temps:          0       4       0       0       0
  5166 ;;      Totals:         0       8       0       0       0
  5167 ;;Total ram usage:        8 bytes
  5168 ;; Hardware stack levels used:    1
  5169 ;; Hardware stack levels required when called:    1
  5170 ;; This function calls:
  5171 ;;		___lldiv
  5172 ;; This function is called by:
  5173 ;;		_main
  5174 ;; This function uses a non-reentrant model
  5175 ;;
  5176                           
  5177                           
  5178                           ;psect for function _Init_I2C_M
  5179  09F0                     _Init_I2C_M:	
  5180                           
  5181                           ;I2C.c: 9: SSPCON = 0b00101000;
  5182                           
  5183                           ;incstack = 0
  5184                           ; Regs used in _Init_I2C_M: [wreg+status,2+status,0+pclath+cstack]
  5185  09F0  3028               	movlw	40
  5186  09F1  1283               	bcf	3,5	;RP0=0, select bank0
  5187  09F2  1303               	bcf	3,6	;RP1=0, select bank0
  5188  09F3  0094               	movwf	20	;volatile
  5189                           
  5190                           ;I2C.c: 10: SSPCON2 = 0;
  5191  09F4  1683               	bsf	3,5	;RP0=1, select bank1
  5192  09F5  1303               	bcf	3,6	;RP1=0, select bank1
  5193  09F6  0191               	clrf	17	;volatile
  5194                           
  5195                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  5196  09F7  1283               	bcf	3,5	;RP0=0, select bank0
  5197  09F8  1303               	bcf	3,6	;RP1=0, select bank0
  5198  09F9  0820               	movf	Init_I2C_M@c,w
  5199  09FA  00A4               	movwf	??_Init_I2C_M
  5200  09FB  0821               	movf	Init_I2C_M@c+1,w
  5201  09FC  00A5               	movwf	??_Init_I2C_M+1
  5202  09FD  0822               	movf	Init_I2C_M@c+2,w
  5203  09FE  00A6               	movwf	??_Init_I2C_M+2
  5204  09FF  0823               	movf	Init_I2C_M@c+3,w
  5205  0A00  00A7               	movwf	??_Init_I2C_M+3
  5206  0A01  3002               	movlw	2
  5207  0A02                     u3165:	
  5208  0A02  1003               	clrc
  5209  0A03  0DA4               	rlf	??_Init_I2C_M,f
  5210  0A04  0DA5               	rlf	??_Init_I2C_M+1,f
  5211  0A05  0DA6               	rlf	??_Init_I2C_M+2,f
  5212  0A06  0DA7               	rlf	??_Init_I2C_M+3,f
  5213  0A07  3EFF               	addlw	-1
  5214  0A08  1D03               	skipz
  5215  0A09  2A02               	goto	u3165
  5216  0A0A  0827               	movf	??_Init_I2C_M+3,w
  5217  0A0B  00F3               	movwf	___lldiv@divisor+3
  5218  0A0C  0826               	movf	??_Init_I2C_M+2,w
  5219  0A0D  00F2               	movwf	___lldiv@divisor+2
  5220  0A0E  0825               	movf	??_Init_I2C_M+1,w
  5221  0A0F  00F1               	movwf	___lldiv@divisor+1
  5222  0A10  0824               	movf	??_Init_I2C_M,w
  5223  0A11  00F0               	movwf	___lldiv@divisor
  5224  0A12  3000               	movlw	0
  5225  0A13  00F7               	movwf	___lldiv@dividend+3
  5226  0A14  3098               	movlw	152
  5227  0A15  00F6               	movwf	___lldiv@dividend+2
  5228  0A16  3096               	movlw	150
  5229  0A17  00F5               	movwf	___lldiv@dividend+1
  5230  0A18  3080               	movlw	128
  5231  0A19  00F4               	movwf	___lldiv@dividend
  5232  0A1A  120A  158A  23B2   	fcall	___lldiv
  5233  0A1D  0870               	movf	?___lldiv,w
  5234  0A1E  3EFF               	addlw	255
  5235  0A1F  1683               	bsf	3,5	;RP0=1, select bank1
  5236  0A20  1303               	bcf	3,6	;RP1=0, select bank1
  5237  0A21  0093               	movwf	19	;volatile
  5238                           
  5239                           ;I2C.c: 12: SSPSTAT = 0;
  5240  0A22  0194               	clrf	20	;volatile
  5241  0A23  0008               	return
  5242  0A24                     __end_of_Init_I2C_M:	
  5243                           
  5244                           	psect	text14
  5245  0BB2                     __ptext14:	
  5246 ;; *************** function ___lldiv *****************
  5247 ;; Defined at:
  5248 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;  divisor         4    0[COMMON] unsigned long 
  5251 ;;  dividend        4    4[COMMON] unsigned long 
  5252 ;; Auto vars:     Size  Location     Type
  5253 ;;  quotient        4    9[COMMON] unsigned long 
  5254 ;;  counter         1   13[COMMON] unsigned char 
  5255 ;; Return value:  Size  Location     Type
  5256 ;;                  4    0[COMMON] unsigned long 
  5257 ;; Registers used:
  5258 ;;		wreg, status,2, status,0
  5259 ;; Tracked objects:
  5260 ;;		On entry : 0/0
  5261 ;;		On exit  : 0/0
  5262 ;;		Unchanged: 0/0
  5263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5264 ;;      Params:         8       0       0       0       0
  5265 ;;      Locals:         5       0       0       0       0
  5266 ;;      Temps:          1       0       0       0       0
  5267 ;;      Totals:        14       0       0       0       0
  5268 ;;Total ram usage:       14 bytes
  5269 ;; Hardware stack levels used:    1
  5270 ;; This function calls:
  5271 ;;		Nothing
  5272 ;; This function is called by:
  5273 ;;		_Init_I2C_M
  5274 ;; This function uses a non-reentrant model
  5275 ;;
  5276                           
  5277                           
  5278                           ;psect for function ___lldiv
  5279  0BB2                     ___lldiv:	
  5280                           
  5281                           ;incstack = 0
  5282                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5283  0BB2  3000               	movlw	0
  5284  0BB3  00FC               	movwf	___lldiv@quotient+3
  5285  0BB4  3000               	movlw	0
  5286  0BB5  00FB               	movwf	___lldiv@quotient+2
  5287  0BB6  3000               	movlw	0
  5288  0BB7  00FA               	movwf	___lldiv@quotient+1
  5289  0BB8  3000               	movlw	0
  5290  0BB9  00F9               	movwf	___lldiv@quotient
  5291  0BBA  0873               	movf	___lldiv@divisor+3,w
  5292  0BBB  0472               	iorwf	___lldiv@divisor+2,w
  5293  0BBC  0471               	iorwf	___lldiv@divisor+1,w
  5294  0BBD  0470               	iorwf	___lldiv@divisor,w
  5295  0BBE  1903               	skipnz
  5296  0BBF  2C07               	goto	l3318
  5297  0BC0  01FD               	clrf	___lldiv@counter
  5298  0BC1  0AFD               	incf	___lldiv@counter,f
  5299  0BC2                     l3304:	
  5300  0BC2  1BF3               	btfsc	___lldiv@divisor+3,7
  5301  0BC3  2BD2               	goto	l3306
  5302  0BC4  3001               	movlw	1
  5303  0BC5  00F8               	movwf	??___lldiv
  5304  0BC6                     u3015:	
  5305  0BC6  1003               	clrc
  5306  0BC7  0DF0               	rlf	___lldiv@divisor,f
  5307  0BC8  0DF1               	rlf	___lldiv@divisor+1,f
  5308  0BC9  0DF2               	rlf	___lldiv@divisor+2,f
  5309  0BCA  0DF3               	rlf	___lldiv@divisor+3,f
  5310  0BCB  0BF8               	decfsz	??___lldiv,f
  5311  0BCC  2BC6               	goto	u3015
  5312  0BCD  3001               	movlw	1
  5313  0BCE  00F8               	movwf	??___lldiv
  5314  0BCF  0878               	movf	??___lldiv,w
  5315  0BD0  07FD               	addwf	___lldiv@counter,f
  5316  0BD1  2BC2               	goto	l3304
  5317  0BD2                     l3306:	
  5318  0BD2  3001               	movlw	1
  5319  0BD3  00F8               	movwf	??___lldiv
  5320  0BD4                     u3035:	
  5321  0BD4  1003               	clrc
  5322  0BD5  0DF9               	rlf	___lldiv@quotient,f
  5323  0BD6  0DFA               	rlf	___lldiv@quotient+1,f
  5324  0BD7  0DFB               	rlf	___lldiv@quotient+2,f
  5325  0BD8  0DFC               	rlf	___lldiv@quotient+3,f
  5326  0BD9  0BF8               	decfsz	??___lldiv,f
  5327  0BDA  2BD4               	goto	u3035
  5328  0BDB  0873               	movf	___lldiv@divisor+3,w
  5329  0BDC  0277               	subwf	___lldiv@dividend+3,w
  5330  0BDD  1D03               	skipz
  5331  0BDE  2BE9               	goto	u3045
  5332  0BDF  0872               	movf	___lldiv@divisor+2,w
  5333  0BE0  0276               	subwf	___lldiv@dividend+2,w
  5334  0BE1  1D03               	skipz
  5335  0BE2  2BE9               	goto	u3045
  5336  0BE3  0871               	movf	___lldiv@divisor+1,w
  5337  0BE4  0275               	subwf	___lldiv@dividend+1,w
  5338  0BE5  1D03               	skipz
  5339  0BE6  2BE9               	goto	u3045
  5340  0BE7  0870               	movf	___lldiv@divisor,w
  5341  0BE8  0274               	subwf	___lldiv@dividend,w
  5342  0BE9                     u3045:	
  5343  0BE9  1C03               	skipc
  5344  0BEA  2BFA               	goto	l3314
  5345  0BEB  0870               	movf	___lldiv@divisor,w
  5346  0BEC  02F4               	subwf	___lldiv@dividend,f
  5347  0BED  0871               	movf	___lldiv@divisor+1,w
  5348  0BEE  1C03               	skipc
  5349  0BEF  0F71               	incfsz	___lldiv@divisor+1,w
  5350  0BF0  02F5               	subwf	___lldiv@dividend+1,f
  5351  0BF1  0872               	movf	___lldiv@divisor+2,w
  5352  0BF2  1C03               	skipc
  5353  0BF3  0F72               	incfsz	___lldiv@divisor+2,w
  5354  0BF4  02F6               	subwf	___lldiv@dividend+2,f
  5355  0BF5  0873               	movf	___lldiv@divisor+3,w
  5356  0BF6  1C03               	skipc
  5357  0BF7  0F73               	incfsz	___lldiv@divisor+3,w
  5358  0BF8  02F7               	subwf	___lldiv@dividend+3,f
  5359  0BF9  1479               	bsf	___lldiv@quotient,0
  5360  0BFA                     l3314:	
  5361  0BFA  3001               	movlw	1
  5362  0BFB                     u3055:	
  5363  0BFB  1003               	clrc
  5364  0BFC  0CF3               	rrf	___lldiv@divisor+3,f
  5365  0BFD  0CF2               	rrf	___lldiv@divisor+2,f
  5366  0BFE  0CF1               	rrf	___lldiv@divisor+1,f
  5367  0BFF  0CF0               	rrf	___lldiv@divisor,f
  5368  0C00  3EFF               	addlw	-1
  5369  0C01  1D03               	skipz
  5370  0C02  2BFB               	goto	u3055
  5371  0C03  3001               	movlw	1
  5372  0C04  02FD               	subwf	___lldiv@counter,f
  5373  0C05  1D03               	btfss	3,2
  5374  0C06  2BD2               	goto	l3306
  5375  0C07                     l3318:	
  5376  0C07  087C               	movf	___lldiv@quotient+3,w
  5377  0C08  00F3               	movwf	?___lldiv+3
  5378  0C09  087B               	movf	___lldiv@quotient+2,w
  5379  0C0A  00F2               	movwf	?___lldiv+2
  5380  0C0B  087A               	movf	___lldiv@quotient+1,w
  5381  0C0C  00F1               	movwf	?___lldiv+1
  5382  0C0D  0879               	movf	___lldiv@quotient,w
  5383  0C0E  00F0               	movwf	?___lldiv
  5384  0C0F  0008               	return
  5385  0C10                     __end_of___lldiv:	
  5386                           
  5387                           	psect	text15
  5388  0996                     __ptext15:	
  5389 ;; *************** function _FMTX *****************
  5390 ;; Defined at:
  5391 ;;		line 270 in file "FMCW.c"
  5392 ;; Parameters:    Size  Location     Type
  5393 ;;  Nref            2   60[BANK0 ] int 
  5394 ;;  Nprg            2   62[BANK0 ] PTR int 
  5395 ;;		 -> RAM(512), main@FMTX_Nprg(10), FMTX_Nprg(10), 
  5396 ;; Auto vars:     Size  Location     Type
  5397 ;;  fmtx            2   64[BANK0 ] int 
  5398 ;; Return value:  Size  Location     Type
  5399 ;;                  1    wreg      void 
  5400 ;; Registers used:
  5401 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5402 ;; Tracked objects:
  5403 ;;		On entry : 0/0
  5404 ;;		On exit  : 0/0
  5405 ;;		Unchanged: 0/0
  5406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5407 ;;      Params:         0       4       0       0       0
  5408 ;;      Locals:         0       2       0       0       0
  5409 ;;      Temps:          0       0       0       0       0
  5410 ;;      Totals:         0       6       0       0       0
  5411 ;;Total ram usage:        6 bytes
  5412 ;; Hardware stack levels used:    1
  5413 ;; Hardware stack levels required when called:    3
  5414 ;; This function calls:
  5415 ;;		_OPINIT
  5416 ;;		_OUTFQ
  5417 ;;		_RFDOUT
  5418 ;; This function is called by:
  5419 ;;		_main
  5420 ;;		_SetPLL
  5421 ;; This function uses a non-reentrant model
  5422 ;;
  5423                           
  5424                           
  5425                           ;psect for function _FMTX
  5426  0996                     _FMTX:	
  5427                           
  5428                           ;FMCW.c: 271: int fmtx = 1;
  5429                           
  5430                           ;incstack = 0
  5431                           ; Regs used in _FMTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5432  0996  3001               	movlw	1
  5433  0997  1283               	bcf	3,5	;RP0=0, select bank0
  5434  0998  1303               	bcf	3,6	;RP1=0, select bank0
  5435  0999  00E0               	movwf	FMTX@fmtx
  5436  099A  3000               	movlw	0
  5437  099B  00E1               	movwf	FMTX@fmtx+1
  5438                           
  5439                           ;FMCW.c: 272: OPINIT(fmtx);
  5440  099C  0861               	movf	FMTX@fmtx+1,w
  5441  099D  00F5               	movwf	OPINIT@fmcwtxrx+1
  5442  099E  0860               	movf	FMTX@fmtx,w
  5443  099F  00F4               	movwf	OPINIT@fmcwtxrx
  5444  09A0  120A  158A  24D6  120A  158A  	fcall	_OPINIT
  5445                           
  5446                           ;FMCW.c: 273: RFDOUT(fmtx, Nref);
  5447  09A5  1283               	bcf	3,5	;RP0=0, select bank0
  5448  09A6  1303               	bcf	3,6	;RP1=0, select bank0
  5449  09A7  0861               	movf	FMTX@fmtx+1,w
  5450  09A8  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5451  09A9  0860               	movf	FMTX@fmtx,w
  5452  09AA  00F9               	movwf	RFDOUT@fmcwtxrx
  5453  09AB  085D               	movf	FMTX@Nref+1,w
  5454  09AC  00FC               	movwf	RFDOUT@Nref+1
  5455  09AD  085C               	movf	FMTX@Nref,w
  5456  09AE  00FB               	movwf	RFDOUT@Nref
  5457  09AF  120A  158A  2553  120A  158A  	fcall	_RFDOUT
  5458                           
  5459                           ;FMCW.c: 274: OUTFQ(fmtx, Nprg);
  5460  09B4  1283               	bcf	3,5	;RP0=0, select bank0
  5461  09B5  1303               	bcf	3,6	;RP1=0, select bank0
  5462  09B6  0861               	movf	FMTX@fmtx+1,w
  5463  09B7  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5464  09B8  0860               	movf	FMTX@fmtx,w
  5465  09B9  00F9               	movwf	OUTFQ@fmcwtxrx
  5466  09BA  085E               	movf	FMTX@Nprg,w
  5467  09BB  00FB               	movwf	OUTFQ@Nprg
  5468  09BC  085F               	movf	FMTX@Nprg+1,w
  5469  09BD  00FC               	movwf	OUTFQ@Nprg+1
  5470  09BE  120A  118A  20AC   	fcall	_OUTFQ
  5471  09C1  0008               	return
  5472  09C2                     __end_of_FMTX:	
  5473                           
  5474                           	psect	text16
  5475  096A                     __ptext16:	
  5476 ;; *************** function _FMRX *****************
  5477 ;; Defined at:
  5478 ;;		line 298 in file "FMCW.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;  Nref            2   60[BANK0 ] int 
  5481 ;;  Nprg            2   62[BANK0 ] PTR int 
  5482 ;;		 -> RAM(512), main@FMRX_Nprg(10), FMRX_Nprg(10), 
  5483 ;; Auto vars:     Size  Location     Type
  5484 ;;  fmrx            2   64[BANK0 ] int 
  5485 ;; Return value:  Size  Location     Type
  5486 ;;                  1    wreg      void 
  5487 ;; Registers used:
  5488 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5489 ;; Tracked objects:
  5490 ;;		On entry : 0/0
  5491 ;;		On exit  : 0/0
  5492 ;;		Unchanged: 0/0
  5493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5494 ;;      Params:         0       4       0       0       0
  5495 ;;      Locals:         0       2       0       0       0
  5496 ;;      Temps:          0       0       0       0       0
  5497 ;;      Totals:         0       6       0       0       0
  5498 ;;Total ram usage:        6 bytes
  5499 ;; Hardware stack levels used:    1
  5500 ;; Hardware stack levels required when called:    3
  5501 ;; This function calls:
  5502 ;;		_OPINIT
  5503 ;;		_OUTFQ
  5504 ;;		_RFDOUT
  5505 ;; This function is called by:
  5506 ;;		_main
  5507 ;;		_SetPLL
  5508 ;; This function uses a non-reentrant model
  5509 ;;
  5510                           
  5511                           
  5512                           ;psect for function _FMRX
  5513  096A                     _FMRX:	
  5514                           
  5515                           ;FMCW.c: 299: int fmrx = 3;
  5516                           
  5517                           ;incstack = 0
  5518                           ; Regs used in _FMRX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5519  096A  3003               	movlw	3
  5520  096B  1283               	bcf	3,5	;RP0=0, select bank0
  5521  096C  1303               	bcf	3,6	;RP1=0, select bank0
  5522  096D  00E0               	movwf	FMRX@fmrx
  5523  096E  3000               	movlw	0
  5524  096F  00E1               	movwf	FMRX@fmrx+1
  5525                           
  5526                           ;FMCW.c: 300: OPINIT(fmrx);
  5527  0970  0861               	movf	FMRX@fmrx+1,w
  5528  0971  00F5               	movwf	OPINIT@fmcwtxrx+1
  5529  0972  0860               	movf	FMRX@fmrx,w
  5530  0973  00F4               	movwf	OPINIT@fmcwtxrx
  5531  0974  120A  158A  24D6  120A  158A  	fcall	_OPINIT
  5532                           
  5533                           ;FMCW.c: 301: RFDOUT(fmrx, Nref);
  5534  0979  1283               	bcf	3,5	;RP0=0, select bank0
  5535  097A  1303               	bcf	3,6	;RP1=0, select bank0
  5536  097B  0861               	movf	FMRX@fmrx+1,w
  5537  097C  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5538  097D  0860               	movf	FMRX@fmrx,w
  5539  097E  00F9               	movwf	RFDOUT@fmcwtxrx
  5540  097F  085D               	movf	FMRX@Nref+1,w
  5541  0980  00FC               	movwf	RFDOUT@Nref+1
  5542  0981  085C               	movf	FMRX@Nref,w
  5543  0982  00FB               	movwf	RFDOUT@Nref
  5544  0983  120A  158A  2553  120A  158A  	fcall	_RFDOUT
  5545                           
  5546                           ;FMCW.c: 302: OUTFQ(fmrx, Nprg);
  5547  0988  1283               	bcf	3,5	;RP0=0, select bank0
  5548  0989  1303               	bcf	3,6	;RP1=0, select bank0
  5549  098A  0861               	movf	FMRX@fmrx+1,w
  5550  098B  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5551  098C  0860               	movf	FMRX@fmrx,w
  5552  098D  00F9               	movwf	OUTFQ@fmcwtxrx
  5553  098E  085E               	movf	FMRX@Nprg,w
  5554  098F  00FB               	movwf	OUTFQ@Nprg
  5555  0990  085F               	movf	FMRX@Nprg+1,w
  5556  0991  00FC               	movwf	OUTFQ@Nprg+1
  5557  0992  120A  118A  20AC   	fcall	_OUTFQ
  5558  0995  0008               	return
  5559  0996                     __end_of_FMRX:	
  5560                           
  5561                           	psect	text17
  5562  0B55                     __ptext17:	
  5563 ;; *************** function _EEPROM_Write *****************
  5564 ;; Defined at:
  5565 ;;		line 51 in file "I2C.c"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;  EEPROM_addre    1    wreg     unsigned char 
  5568 ;;  high_address    1    2[COMMON] unsigned char 
  5569 ;;  low_address     1    3[COMMON] unsigned char 
  5570 ;;  data            1    4[COMMON] PTR unsigned char 
  5571 ;;		 -> NULL(0), dData(16), 
  5572 ;; Auto vars:     Size  Location     Type
  5573 ;;  EEPROM_addre    1    8[COMMON] unsigned char 
  5574 ;;  Address         1    9[COMMON] unsigned char 
  5575 ;; Return value:  Size  Location     Type
  5576 ;;                  1    wreg      void 
  5577 ;; Registers used:
  5578 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5579 ;; Tracked objects:
  5580 ;;		On entry : 0/0
  5581 ;;		On exit  : 0/0
  5582 ;;		Unchanged: 0/0
  5583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5584 ;;      Params:         3       0       0       0       0
  5585 ;;      Locals:         2       0       0       0       0
  5586 ;;      Temps:          3       0       0       0       0
  5587 ;;      Totals:         8       0       0       0       0
  5588 ;;Total ram usage:        8 bytes
  5589 ;; Hardware stack levels used:    1
  5590 ;; Hardware stack levels required when called:    2
  5591 ;; This function calls:
  5592 ;;		_I2C_Master_Start
  5593 ;;		_I2C_Master_Stop
  5594 ;;		_I2C_Master_Write
  5595 ;; This function is called by:
  5596 ;;		_main
  5597 ;; This function uses a non-reentrant model
  5598 ;;
  5599                           
  5600                           
  5601                           ;psect for function _EEPROM_Write
  5602  0B55                     _EEPROM_Write:	
  5603                           
  5604                           ;incstack = 0
  5605                           ; Regs used in _EEPROM_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5606                           ;EEPROM_Write@EEPROM_address stored from wreg
  5607  0B55  00F8               	movwf	EEPROM_Write@EEPROM_address
  5608                           
  5609                           ;I2C.c: 52: UBYTE Address = EEPROM_address << 1;
  5610  0B56  0878               	movf	EEPROM_Write@EEPROM_address,w
  5611  0B57  00F5               	movwf	??_EEPROM_Write
  5612  0B58  0775               	addwf	??_EEPROM_Write,w
  5613  0B59  00F6               	movwf	??_EEPROM_Write+1
  5614  0B5A  0876               	movf	??_EEPROM_Write+1,w
  5615  0B5B  00F9               	movwf	EEPROM_Write@Address
  5616                           
  5617                           ;I2C.c: 55: I2C_Master_Start();
  5618  0B5C  160A  118A  27EA  120A  158A  	fcall	_I2C_Master_Start
  5619                           
  5620                           ;I2C.c: 56: I2C_Master_Write(Address);
  5621  0B61  0879               	movf	EEPROM_Write@Address,w
  5622  0B62  00F5               	movwf	??_EEPROM_Write
  5623  0B63  01F6               	clrf	??_EEPROM_Write+1
  5624  0B64  0875               	movf	??_EEPROM_Write,w
  5625  0B65  00F0               	movwf	I2C_Master_Write@d
  5626  0B66  0876               	movf	??_EEPROM_Write+1,w
  5627  0B67  00F1               	movwf	I2C_Master_Write@d+1
  5628  0B68  160A  118A  27F8  120A  158A  	fcall	_I2C_Master_Write
  5629                           
  5630                           ;I2C.c: 57: I2C_Master_Write(high_address);
  5631  0B6D  0872               	movf	EEPROM_Write@high_address,w
  5632  0B6E  00F5               	movwf	??_EEPROM_Write
  5633  0B6F  01F6               	clrf	??_EEPROM_Write+1
  5634  0B70  0875               	movf	??_EEPROM_Write,w
  5635  0B71  00F0               	movwf	I2C_Master_Write@d
  5636  0B72  0876               	movf	??_EEPROM_Write+1,w
  5637  0B73  00F1               	movwf	I2C_Master_Write@d+1
  5638  0B74  160A  118A  27F8  120A  158A  	fcall	_I2C_Master_Write
  5639                           
  5640                           ;I2C.c: 58: I2C_Master_Write(low_address);
  5641  0B79  0873               	movf	EEPROM_Write@low_address,w
  5642  0B7A  00F5               	movwf	??_EEPROM_Write
  5643  0B7B  01F6               	clrf	??_EEPROM_Write+1
  5644  0B7C  0875               	movf	??_EEPROM_Write,w
  5645  0B7D  00F0               	movwf	I2C_Master_Write@d
  5646  0B7E  0876               	movf	??_EEPROM_Write+1,w
  5647  0B7F  00F1               	movwf	I2C_Master_Write@d+1
  5648  0B80  160A  118A  27F8  120A  158A  	fcall	_I2C_Master_Write
  5649  0B85                     l3514:	
  5650                           ;I2C.c: 59: while(*data){
  5651                           
  5652  0B85  0874               	movf	EEPROM_Write@data,w
  5653  0B86  0084               	movwf	4
  5654  0B87  1783               	bsf	3,7	;select IRP bank2
  5655  0B88  0800               	movf	0,w
  5656  0B89  1903               	btfsc	3,2
  5657  0B8A  2B9F               	goto	l3516
  5658                           
  5659                           ;I2C.c: 60: I2C_Master_Write(*data);
  5660  0B8B  0874               	movf	EEPROM_Write@data,w
  5661  0B8C  0084               	movwf	4
  5662  0B8D  1783               	bsf	3,7	;select IRP bank2
  5663  0B8E  0800               	movf	0,w
  5664  0B8F  00F5               	movwf	??_EEPROM_Write
  5665  0B90  01F6               	clrf	??_EEPROM_Write+1
  5666  0B91  0875               	movf	??_EEPROM_Write,w
  5667  0B92  00F0               	movwf	I2C_Master_Write@d
  5668  0B93  0876               	movf	??_EEPROM_Write+1,w
  5669  0B94  00F1               	movwf	I2C_Master_Write@d+1
  5670  0B95  160A  118A  27F8  120A  158A  	fcall	_I2C_Master_Write
  5671                           
  5672                           ;I2C.c: 61: ++data;
  5673  0B9A  3001               	movlw	1
  5674  0B9B  00F5               	movwf	??_EEPROM_Write
  5675  0B9C  0875               	movf	??_EEPROM_Write,w
  5676  0B9D  07F4               	addwf	EEPROM_Write@data,f
  5677  0B9E  2B85               	goto	l3514
  5678  0B9F                     l3516:	
  5679                           
  5680                           ;I2C.c: 62: }
  5681                           ;I2C.c: 63: I2C_Master_Stop();
  5682  0B9F  160A  118A  27F1  120A  158A  	fcall	_I2C_Master_Stop
  5683                           
  5684                           ;I2C.c: 64: _delay((unsigned long)((200)*(10000000/4000.0)));
  5685  0BA4  3003               	movlw	3
  5686  0BA5  00F7               	movwf	??_EEPROM_Write+2
  5687  0BA6  308A               	movlw	138
  5688  0BA7  00F6               	movwf	??_EEPROM_Write+1
  5689  0BA8  3056               	movlw	86
  5690  0BA9  00F5               	movwf	??_EEPROM_Write
  5691  0BAA                     u3677:	
  5692  0BAA  0BF5               	decfsz	??_EEPROM_Write,f
  5693  0BAB  2BAA               	goto	u3677
  5694  0BAC  0BF6               	decfsz	??_EEPROM_Write+1,f
  5695  0BAD  2BAA               	goto	u3677
  5696  0BAE  0BF7               	decfsz	??_EEPROM_Write+2,f
  5697  0BAF  2BAA               	goto	u3677
  5698  0BB0  2BB1               	nop2
  5699  0BB1  0008               	return
  5700  0BB2                     __end_of_EEPROM_Write:	
  5701                           
  5702                           	psect	text18
  5703  17F8                     __ptext18:	
  5704 ;; *************** function _I2C_Master_Write *****************
  5705 ;; Defined at:
  5706 ;;		line 34 in file "I2C.c"
  5707 ;; Parameters:    Size  Location     Type
  5708 ;;  d               2    0[COMMON] unsigned int 
  5709 ;; Auto vars:     Size  Location     Type
  5710 ;;		None
  5711 ;; Return value:  Size  Location     Type
  5712 ;;                  1    wreg      void 
  5713 ;; Registers used:
  5714 ;;		wreg, status,2, status,0, pclath, cstack
  5715 ;; Tracked objects:
  5716 ;;		On entry : 0/0
  5717 ;;		On exit  : 0/0
  5718 ;;		Unchanged: 0/0
  5719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5720 ;;      Params:         2       0       0       0       0
  5721 ;;      Locals:         0       0       0       0       0
  5722 ;;      Temps:          0       0       0       0       0
  5723 ;;      Totals:         2       0       0       0       0
  5724 ;;Total ram usage:        2 bytes
  5725 ;; Hardware stack levels used:    1
  5726 ;; Hardware stack levels required when called:    1
  5727 ;; This function calls:
  5728 ;;		_I2C_Master_Wait
  5729 ;; This function is called by:
  5730 ;;		_EEPROM_Write
  5731 ;;		_EEPROM_Read
  5732 ;; This function uses a non-reentrant model
  5733 ;;
  5734                           
  5735                           
  5736                           ;psect for function _I2C_Master_Write
  5737  17F8                     _I2C_Master_Write:	
  5738                           
  5739                           ;I2C.c: 35: I2C_Master_Wait();
  5740                           
  5741                           ;incstack = 0
  5742                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5743  17F8  120A  158A  2030   	fcall	_I2C_Master_Wait
  5744                           
  5745                           ;I2C.c: 36: SSPBUF = d;
  5746  17FB  0870               	movf	I2C_Master_Write@d,w
  5747  17FC  1283               	bcf	3,5	;RP0=0, select bank0
  5748  17FD  1303               	bcf	3,6	;RP1=0, select bank0
  5749  17FE  0093               	movwf	19	;volatile
  5750  17FF  0008               	return
  5751  1800                     __end_of_I2C_Master_Write:	
  5752                           
  5753                           	psect	text19
  5754  17F1                     __ptext19:	
  5755 ;; *************** function _I2C_Master_Stop *****************
  5756 ;; Defined at:
  5757 ;;		line 29 in file "I2C.c"
  5758 ;; Parameters:    Size  Location     Type
  5759 ;;		None
  5760 ;; Auto vars:     Size  Location     Type
  5761 ;;		None
  5762 ;; Return value:  Size  Location     Type
  5763 ;;                  1    wreg      void 
  5764 ;; Registers used:
  5765 ;;		wreg, status,2, status,0, pclath, cstack
  5766 ;; Tracked objects:
  5767 ;;		On entry : 0/0
  5768 ;;		On exit  : 0/0
  5769 ;;		Unchanged: 0/0
  5770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5771 ;;      Params:         0       0       0       0       0
  5772 ;;      Locals:         0       0       0       0       0
  5773 ;;      Temps:          0       0       0       0       0
  5774 ;;      Totals:         0       0       0       0       0
  5775 ;;Total ram usage:        0 bytes
  5776 ;; Hardware stack levels used:    1
  5777 ;; Hardware stack levels required when called:    1
  5778 ;; This function calls:
  5779 ;;		_I2C_Master_Wait
  5780 ;; This function is called by:
  5781 ;;		_EEPROM_Write
  5782 ;;		_EEPROM_Read
  5783 ;; This function uses a non-reentrant model
  5784 ;;
  5785                           
  5786                           
  5787                           ;psect for function _I2C_Master_Stop
  5788  17F1                     _I2C_Master_Stop:	
  5789                           
  5790                           ;I2C.c: 30: I2C_Master_Wait();
  5791                           
  5792                           ;incstack = 0
  5793                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5794  17F1  120A  158A  2030   	fcall	_I2C_Master_Wait
  5795                           
  5796                           ;I2C.c: 31: PEN = 1;
  5797  17F4  1683               	bsf	3,5	;RP0=1, select bank1
  5798  17F5  1303               	bcf	3,6	;RP1=0, select bank1
  5799  17F6  1511               	bsf	17,2	;volatile
  5800  17F7  0008               	return
  5801  17F8                     __end_of_I2C_Master_Stop:	
  5802                           
  5803                           	psect	text20
  5804  17EA                     __ptext20:	
  5805 ;; *************** function _I2C_Master_Start *****************
  5806 ;; Defined at:
  5807 ;;		line 19 in file "I2C.c"
  5808 ;; Parameters:    Size  Location     Type
  5809 ;;		None
  5810 ;; Auto vars:     Size  Location     Type
  5811 ;;		None
  5812 ;; Return value:  Size  Location     Type
  5813 ;;                  1    wreg      void 
  5814 ;; Registers used:
  5815 ;;		wreg, status,2, status,0, pclath, cstack
  5816 ;; Tracked objects:
  5817 ;;		On entry : 0/0
  5818 ;;		On exit  : 0/0
  5819 ;;		Unchanged: 0/0
  5820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5821 ;;      Params:         0       0       0       0       0
  5822 ;;      Locals:         0       0       0       0       0
  5823 ;;      Temps:          0       0       0       0       0
  5824 ;;      Totals:         0       0       0       0       0
  5825 ;;Total ram usage:        0 bytes
  5826 ;; Hardware stack levels used:    1
  5827 ;; Hardware stack levels required when called:    1
  5828 ;; This function calls:
  5829 ;;		_I2C_Master_Wait
  5830 ;; This function is called by:
  5831 ;;		_EEPROM_Write
  5832 ;;		_EEPROM_Read
  5833 ;; This function uses a non-reentrant model
  5834 ;;
  5835                           
  5836                           
  5837                           ;psect for function _I2C_Master_Start
  5838  17EA                     _I2C_Master_Start:	
  5839                           
  5840                           ;I2C.c: 20: I2C_Master_Wait();
  5841                           
  5842                           ;incstack = 0
  5843                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5844  17EA  120A  158A  2030   	fcall	_I2C_Master_Wait
  5845                           
  5846                           ;I2C.c: 21: SEN = 1;
  5847  17ED  1683               	bsf	3,5	;RP0=1, select bank1
  5848  17EE  1303               	bcf	3,6	;RP1=0, select bank1
  5849  17EF  1411               	bsf	17,0	;volatile
  5850  17F0  0008               	return
  5851  17F1                     __end_of_I2C_Master_Start:	
  5852                           
  5853                           	psect	text21
  5854  0830                     __ptext21:	
  5855 ;; *************** function _I2C_Master_Wait *****************
  5856 ;; Defined at:
  5857 ;;		line 15 in file "I2C.c"
  5858 ;; Parameters:    Size  Location     Type
  5859 ;;		None
  5860 ;; Auto vars:     Size  Location     Type
  5861 ;;		None
  5862 ;; Return value:  Size  Location     Type
  5863 ;;                  1    wreg      void 
  5864 ;; Registers used:
  5865 ;;		wreg, status,2
  5866 ;; Tracked objects:
  5867 ;;		On entry : 0/0
  5868 ;;		On exit  : 0/0
  5869 ;;		Unchanged: 0/0
  5870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5871 ;;      Params:         0       0       0       0       0
  5872 ;;      Locals:         0       0       0       0       0
  5873 ;;      Temps:          0       0       0       0       0
  5874 ;;      Totals:         0       0       0       0       0
  5875 ;;Total ram usage:        0 bytes
  5876 ;; Hardware stack levels used:    1
  5877 ;; This function calls:
  5878 ;;		Nothing
  5879 ;; This function is called by:
  5880 ;;		_I2C_Master_Start
  5881 ;;		_I2C_Master_Stop
  5882 ;;		_I2C_Master_Write
  5883 ;;		_I2C_Master_RepeatedStart
  5884 ;;		_I2C_Master_Read
  5885 ;; This function uses a non-reentrant model
  5886 ;;
  5887                           
  5888                           
  5889                           ;psect for function _I2C_Master_Wait
  5890  0830                     _I2C_Master_Wait:	
  5891  0830                     l498:	
  5892                           ;I2C.c: 16: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5893                           
  5894                           ;incstack = 0
  5895                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5896                           
  5897  0830  1683               	bsf	3,5	;RP0=1, select bank1
  5898  0831  1303               	bcf	3,6	;RP1=0, select bank1
  5899  0832  1914               	btfsc	20,2	;volatile
  5900  0833  2830               	goto	l498
  5901  0834  0811               	movf	17,w	;volatile
  5902  0835  391F               	andlw	31
  5903  0836  1903               	btfsc	3,2
  5904  0837  0008               	return
  5905  0838  2830               	goto	l498
  5906  0839                     __end_of_I2C_Master_Wait:	
  5907                           
  5908                           	psect	text22
  5909  093E                     __ptext22:	
  5910 ;; *************** function _CWTX *****************
  5911 ;; Defined at:
  5912 ;;		line 284 in file "FMCW.c"
  5913 ;; Parameters:    Size  Location     Type
  5914 ;;  Nref            2   60[BANK0 ] int 
  5915 ;;  Nprg            2   62[BANK0 ] PTR int 
  5916 ;;		 -> RAM(512), main@CWTX_Nprg(10), CWTX_Nprg(10), 
  5917 ;; Auto vars:     Size  Location     Type
  5918 ;;  cwtx            2   64[BANK0 ] int 
  5919 ;; Return value:  Size  Location     Type
  5920 ;;                  1    wreg      void 
  5921 ;; Registers used:
  5922 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5923 ;; Tracked objects:
  5924 ;;		On entry : 0/0
  5925 ;;		On exit  : 0/0
  5926 ;;		Unchanged: 0/0
  5927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5928 ;;      Params:         0       4       0       0       0
  5929 ;;      Locals:         0       2       0       0       0
  5930 ;;      Temps:          0       0       0       0       0
  5931 ;;      Totals:         0       6       0       0       0
  5932 ;;Total ram usage:        6 bytes
  5933 ;; Hardware stack levels used:    1
  5934 ;; Hardware stack levels required when called:    3
  5935 ;; This function calls:
  5936 ;;		_OPINIT
  5937 ;;		_OUTFQ
  5938 ;;		_RFDOUT
  5939 ;; This function is called by:
  5940 ;;		_main
  5941 ;;		_SetPLL
  5942 ;; This function uses a non-reentrant model
  5943 ;;
  5944                           
  5945                           
  5946                           ;psect for function _CWTX
  5947  093E                     _CWTX:	
  5948                           
  5949                           ;FMCW.c: 285: int cwtx = 2;
  5950                           
  5951                           ;incstack = 0
  5952                           ; Regs used in _CWTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5953  093E  3002               	movlw	2
  5954  093F  1283               	bcf	3,5	;RP0=0, select bank0
  5955  0940  1303               	bcf	3,6	;RP1=0, select bank0
  5956  0941  00E0               	movwf	CWTX@cwtx
  5957  0942  3000               	movlw	0
  5958  0943  00E1               	movwf	CWTX@cwtx+1
  5959                           
  5960                           ;FMCW.c: 286: OPINIT(cwtx);
  5961  0944  0861               	movf	CWTX@cwtx+1,w
  5962  0945  00F5               	movwf	OPINIT@fmcwtxrx+1
  5963  0946  0860               	movf	CWTX@cwtx,w
  5964  0947  00F4               	movwf	OPINIT@fmcwtxrx
  5965  0948  120A  158A  24D6  120A  158A  	fcall	_OPINIT
  5966                           
  5967                           ;FMCW.c: 287: RFDOUT(cwtx, Nref);
  5968  094D  1283               	bcf	3,5	;RP0=0, select bank0
  5969  094E  1303               	bcf	3,6	;RP1=0, select bank0
  5970  094F  0861               	movf	CWTX@cwtx+1,w
  5971  0950  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5972  0951  0860               	movf	CWTX@cwtx,w
  5973  0952  00F9               	movwf	RFDOUT@fmcwtxrx
  5974  0953  085D               	movf	CWTX@Nref+1,w
  5975  0954  00FC               	movwf	RFDOUT@Nref+1
  5976  0955  085C               	movf	CWTX@Nref,w
  5977  0956  00FB               	movwf	RFDOUT@Nref
  5978  0957  120A  158A  2553  120A  158A  	fcall	_RFDOUT
  5979                           
  5980                           ;FMCW.c: 288: OUTFQ(cwtx, Nprg);
  5981  095C  1283               	bcf	3,5	;RP0=0, select bank0
  5982  095D  1303               	bcf	3,6	;RP1=0, select bank0
  5983  095E  0861               	movf	CWTX@cwtx+1,w
  5984  095F  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5985  0960  0860               	movf	CWTX@cwtx,w
  5986  0961  00F9               	movwf	OUTFQ@fmcwtxrx
  5987  0962  085E               	movf	CWTX@Nprg,w
  5988  0963  00FB               	movwf	OUTFQ@Nprg
  5989  0964  085F               	movf	CWTX@Nprg+1,w
  5990  0965  00FC               	movwf	OUTFQ@Nprg+1
  5991  0966  120A  118A  20AC   	fcall	_OUTFQ
  5992  0969  0008               	return
  5993  096A                     __end_of_CWTX:	
  5994                           
  5995                           	psect	text23
  5996  0D53                     __ptext23:	
  5997 ;; *************** function _RFDOUT *****************
  5998 ;; Defined at:
  5999 ;;		line 200 in file "FMCW.c"
  6000 ;; Parameters:    Size  Location     Type
  6001 ;;  fmcwtxrx        2    9[COMMON] int 
  6002 ;;  Nref            2   11[COMMON] int 
  6003 ;; Auto vars:     Size  Location     Type
  6004 ;;  i               2   31[BANK0 ] int 
  6005 ;;  i               2   27[BANK0 ] int 
  6006 ;;  i               2   29[BANK0 ] int 
  6007 ;;  Nref_b         24    3[BANK0 ] int [12]
  6008 ;; Return value:  Size  Location     Type
  6009 ;;                  1    wreg      void 
  6010 ;; Registers used:
  6011 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6012 ;; Tracked objects:
  6013 ;;		On entry : 0/0
  6014 ;;		On exit  : 0/0
  6015 ;;		Unchanged: 0/0
  6016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6017 ;;      Params:         4       0       0       0       0
  6018 ;;      Locals:         0      30       0       0       0
  6019 ;;      Temps:          0       3       0       0       0
  6020 ;;      Totals:         4      33       0       0       0
  6021 ;;Total ram usage:       37 bytes
  6022 ;; Hardware stack levels used:    1
  6023 ;; Hardware stack levels required when called:    2
  6024 ;; This function calls:
  6025 ;;		_H_OUT
  6026 ;;		_L_OUT
  6027 ;;		_STBOUT
  6028 ;;		___awdiv
  6029 ;; This function is called by:
  6030 ;;		_FMTX
  6031 ;;		_CWTX
  6032 ;;		_FMRX
  6033 ;; This function uses a non-reentrant model
  6034 ;;
  6035                           
  6036                           
  6037                           ;psect for function _RFDOUT
  6038  0D53                     _RFDOUT:	
  6039                           
  6040                           ;FMCW.c: 201: int Nref_b[12];
  6041                           ;FMCW.c: 203: for(int i=0; i<12; i++){
  6042                           
  6043                           ;incstack = 0
  6044                           ; Regs used in _RFDOUT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6045  0D53  1283               	bcf	3,5	;RP0=0, select bank0
  6046  0D54  1303               	bcf	3,6	;RP1=0, select bank0
  6047  0D55  01BD               	clrf	RFDOUT@i
  6048  0D56  01BE               	clrf	RFDOUT@i+1
  6049  0D57  083E               	movf	RFDOUT@i+1,w
  6050  0D58  3A80               	xorlw	128
  6051  0D59  00FF               	movwf	127
  6052  0D5A  3080               	movlw	128
  6053  0D5B  027F               	subwf	127,w
  6054  0D5C  1D03               	skipz
  6055  0D5D  2D60               	goto	u2925
  6056  0D5E  300C               	movlw	12
  6057  0D5F  023D               	subwf	RFDOUT@i,w
  6058  0D60                     u2925:	
  6059  0D60  1803               	btfsc	3,0
  6060  0D61  2D7E               	goto	l3262
  6061  0D62                     l3256:	
  6062                           
  6063                           ;FMCW.c: 204: Nref_b[i] = 0;
  6064  0D62  1283               	bcf	3,5	;RP0=0, select bank0
  6065  0D63  1303               	bcf	3,6	;RP1=0, select bank0
  6066  0D64  083D               	movf	RFDOUT@i,w
  6067  0D65  00A0               	movwf	??_RFDOUT
  6068  0D66  0720               	addwf	??_RFDOUT,w
  6069  0D67  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6070  0D68  0084               	movwf	4
  6071  0D69  1383               	bcf	3,7	;select IRP bank0
  6072  0D6A  0180               	clrf	0
  6073  0D6B  0A84               	incf	4,f
  6074  0D6C  0180               	clrf	0
  6075  0D6D  3001               	movlw	1
  6076  0D6E  07BD               	addwf	RFDOUT@i,f
  6077  0D6F  1803               	skipnc
  6078  0D70  0ABE               	incf	RFDOUT@i+1,f
  6079  0D71  3000               	movlw	0
  6080  0D72  07BE               	addwf	RFDOUT@i+1,f
  6081  0D73  083E               	movf	RFDOUT@i+1,w
  6082  0D74  3A80               	xorlw	128
  6083  0D75  00FF               	movwf	127
  6084  0D76  3080               	movlw	128
  6085  0D77  027F               	subwf	127,w
  6086  0D78  1D03               	skipz
  6087  0D79  2D7C               	goto	u2935
  6088  0D7A  300C               	movlw	12
  6089  0D7B  023D               	subwf	RFDOUT@i,w
  6090  0D7C                     u2935:	
  6091  0D7C  1C03               	skipc
  6092  0D7D  2D62               	goto	l3256
  6093  0D7E                     l3262:	
  6094                           
  6095                           ;FMCW.c: 205: }
  6096                           ;FMCW.c: 208: for(int i=0; Nref>0; i++){
  6097  0D7E  1283               	bcf	3,5	;RP0=0, select bank0
  6098  0D7F  1303               	bcf	3,6	;RP1=0, select bank0
  6099  0D80  01BB               	clrf	RFDOUT@i_481
  6100  0D81  01BC               	clrf	RFDOUT@i_481+1
  6101  0D82  087C               	movf	RFDOUT@Nref+1,w
  6102  0D83  3A80               	xorlw	128
  6103  0D84  00FF               	movwf	127
  6104  0D85  3080               	movlw	128
  6105  0D86  027F               	subwf	127,w
  6106  0D87  1D03               	skipz
  6107  0D88  2D8B               	goto	u2945
  6108  0D89  3001               	movlw	1
  6109  0D8A  027B               	subwf	RFDOUT@Nref,w
  6110  0D8B                     u2945:	
  6111  0D8B  1C03               	btfss	3,0
  6112  0D8C  2DC4               	goto	l3276
  6113  0D8D                     l3268:	
  6114                           
  6115                           ;FMCW.c: 209: Nref_b[i] = Nref % 2;
  6116  0D8D  3001               	movlw	1
  6117  0D8E  057B               	andwf	RFDOUT@Nref,w
  6118  0D8F  1283               	bcf	3,5	;RP0=0, select bank0
  6119  0D90  1303               	bcf	3,6	;RP1=0, select bank0
  6120  0D91  00A0               	movwf	??_RFDOUT
  6121  0D92  3000               	movlw	0
  6122  0D93  057C               	andwf	RFDOUT@Nref+1,w
  6123  0D94  00A1               	movwf	??_RFDOUT+1
  6124  0D95  083B               	movf	RFDOUT@i_481,w
  6125  0D96  00A2               	movwf	??_RFDOUT+2
  6126  0D97  0722               	addwf	??_RFDOUT+2,w
  6127  0D98  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6128  0D99  0084               	movwf	4
  6129  0D9A  0820               	movf	??_RFDOUT,w
  6130  0D9B  1383               	bcf	3,7	;select IRP bank0
  6131  0D9C  0080               	movwf	0
  6132  0D9D  0A84               	incf	4,f
  6133  0D9E  0821               	movf	??_RFDOUT+1,w
  6134  0D9F  0080               	movwf	0
  6135                           
  6136                           ;FMCW.c: 210: Nref = Nref / 2;
  6137  0DA0  3002               	movlw	2
  6138  0DA1  00F0               	movwf	___awdiv@divisor
  6139  0DA2  3000               	movlw	0
  6140  0DA3  00F1               	movwf	___awdiv@divisor+1
  6141  0DA4  087C               	movf	RFDOUT@Nref+1,w
  6142  0DA5  00F3               	movwf	___awdiv@dividend+1
  6143  0DA6  087B               	movf	RFDOUT@Nref,w
  6144  0DA7  00F2               	movwf	___awdiv@dividend
  6145  0DA8  120A  158A  22FC  120A  158A  	fcall	___awdiv
  6146  0DAD  0871               	movf	?___awdiv+1,w
  6147  0DAE  00FC               	movwf	RFDOUT@Nref+1
  6148  0DAF  0870               	movf	?___awdiv,w
  6149  0DB0  00FB               	movwf	RFDOUT@Nref
  6150  0DB1  3001               	movlw	1
  6151  0DB2  1283               	bcf	3,5	;RP0=0, select bank0
  6152  0DB3  1303               	bcf	3,6	;RP1=0, select bank0
  6153  0DB4  07BB               	addwf	RFDOUT@i_481,f
  6154  0DB5  1803               	skipnc
  6155  0DB6  0ABC               	incf	RFDOUT@i_481+1,f
  6156  0DB7  3000               	movlw	0
  6157  0DB8  07BC               	addwf	RFDOUT@i_481+1,f
  6158  0DB9  087C               	movf	RFDOUT@Nref+1,w
  6159  0DBA  3A80               	xorlw	128
  6160  0DBB  00FF               	movwf	127
  6161  0DBC  3080               	movlw	128
  6162  0DBD  027F               	subwf	127,w
  6163  0DBE  1D03               	skipz
  6164  0DBF  2DC2               	goto	u2955
  6165  0DC0  3001               	movlw	1
  6166  0DC1  027B               	subwf	RFDOUT@Nref,w
  6167  0DC2                     u2955:	
  6168  0DC2  1803               	skipnc
  6169  0DC3  2D8D               	goto	l3268
  6170  0DC4                     l3276:	
  6171                           
  6172                           ;FMCW.c: 211: }
  6173                           ;FMCW.c: 214: for (int i=0; i<12; i++)
  6174  0DC4  1283               	bcf	3,5	;RP0=0, select bank0
  6175  0DC5  1303               	bcf	3,6	;RP1=0, select bank0
  6176  0DC6  01BF               	clrf	RFDOUT@i_482
  6177  0DC7  01C0               	clrf	RFDOUT@i_482+1
  6178  0DC8  0840               	movf	RFDOUT@i_482+1,w
  6179  0DC9  3A80               	xorlw	128
  6180  0DCA  00FF               	movwf	127
  6181  0DCB  3080               	movlw	128
  6182  0DCC  027F               	subwf	127,w
  6183  0DCD  1D03               	skipz
  6184  0DCE  2DD1               	goto	u2965
  6185  0DCF  300C               	movlw	12
  6186  0DD0  023F               	subwf	RFDOUT@i_482,w
  6187  0DD1                     u2965:	
  6188  0DD1  1803               	btfsc	3,0
  6189  0DD2  2E1A               	goto	l3294
  6190  0DD3                     l3282:	
  6191                           
  6192                           ;FMCW.c: 215: {
  6193                           ;FMCW.c: 216: if(Nref_b[i] == 0)
  6194  0DD3  1283               	bcf	3,5	;RP0=0, select bank0
  6195  0DD4  1303               	bcf	3,6	;RP1=0, select bank0
  6196  0DD5  083F               	movf	RFDOUT@i_482,w
  6197  0DD6  00A0               	movwf	??_RFDOUT
  6198  0DD7  0720               	addwf	??_RFDOUT,w
  6199  0DD8  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6200  0DD9  0084               	movwf	4
  6201  0DDA  1383               	bcf	3,7	;select IRP bank0
  6202  0DDB  0800               	movf	0,w
  6203  0DDC  00A1               	movwf	??_RFDOUT+1
  6204  0DDD  0A84               	incf	4,f
  6205  0DDE  0800               	movf	0,w
  6206  0DDF  00A2               	movwf	??_RFDOUT+2
  6207  0DE0  0821               	movf	??_RFDOUT+1,w
  6208  0DE1  0422               	iorwf	??_RFDOUT+2,w
  6209  0DE2  1D03               	btfss	3,2
  6210  0DE3  2DED               	goto	l3286
  6211                           
  6212                           ;FMCW.c: 217: {
  6213                           ;FMCW.c: 218: L_OUT(fmcwtxrx);
  6214  0DE4  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6215  0DE5  00F3               	movwf	L_OUT@fmcwtxrx+1
  6216  0DE6  0879               	movf	RFDOUT@fmcwtxrx,w
  6217  0DE7  00F2               	movwf	L_OUT@fmcwtxrx
  6218  0DE8  120A  158A  226A  120A  158A  	fcall	_L_OUT
  6219  0DED                     l3286:	
  6220                           
  6221                           ;FMCW.c: 219: }
  6222                           ;FMCW.c: 220: if(Nref_b[i] == 1)
  6223  0DED  1283               	bcf	3,5	;RP0=0, select bank0
  6224  0DEE  1303               	bcf	3,6	;RP1=0, select bank0
  6225  0DEF  083F               	movf	RFDOUT@i_482,w
  6226  0DF0  00A0               	movwf	??_RFDOUT
  6227  0DF1  0720               	addwf	??_RFDOUT,w
  6228  0DF2  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6229  0DF3  0084               	movwf	4
  6230  0DF4  1383               	bcf	3,7	;select IRP bank0
  6231  0DF5  0800               	movf	0,w
  6232  0DF6  00A1               	movwf	??_RFDOUT+1
  6233  0DF7  0A84               	incf	4,f
  6234  0DF8  0800               	movf	0,w
  6235  0DF9  00A2               	movwf	??_RFDOUT+2
  6236  0DFA  0321               	decf	??_RFDOUT+1,w
  6237  0DFB  0422               	iorwf	??_RFDOUT+2,w
  6238  0DFC  1D03               	btfss	3,2
  6239  0DFD  2E07               	goto	l3290
  6240                           
  6241                           ;FMCW.c: 221: {
  6242                           ;FMCW.c: 222: H_OUT(fmcwtxrx);
  6243  0DFE  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6244  0DFF  00F3               	movwf	H_OUT@fmcwtxrx+1
  6245  0E00  0879               	movf	RFDOUT@fmcwtxrx,w
  6246  0E01  00F2               	movwf	H_OUT@fmcwtxrx
  6247  0E02  120A  158A  2224  120A  158A  	fcall	_H_OUT
  6248  0E07                     l3290:	
  6249  0E07  3001               	movlw	1
  6250  0E08  1283               	bcf	3,5	;RP0=0, select bank0
  6251  0E09  1303               	bcf	3,6	;RP1=0, select bank0
  6252  0E0A  07BF               	addwf	RFDOUT@i_482,f
  6253  0E0B  1803               	skipnc
  6254  0E0C  0AC0               	incf	RFDOUT@i_482+1,f
  6255  0E0D  3000               	movlw	0
  6256  0E0E  07C0               	addwf	RFDOUT@i_482+1,f
  6257  0E0F  0840               	movf	RFDOUT@i_482+1,w
  6258  0E10  3A80               	xorlw	128
  6259  0E11  00FF               	movwf	127
  6260  0E12  3080               	movlw	128
  6261  0E13  027F               	subwf	127,w
  6262  0E14  1D03               	skipz
  6263  0E15  2E18               	goto	u2995
  6264  0E16  300C               	movlw	12
  6265  0E17  023F               	subwf	RFDOUT@i_482,w
  6266  0E18                     u2995:	
  6267  0E18  1C03               	skipc
  6268  0E19  2DD3               	goto	l3282
  6269  0E1A                     l3294:	
  6270                           
  6271                           ;FMCW.c: 223: }
  6272                           ;FMCW.c: 224: }
  6273                           ;FMCW.c: 227: H_OUT(fmcwtxrx);
  6274  0E1A  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6275  0E1B  00F3               	movwf	H_OUT@fmcwtxrx+1
  6276  0E1C  0879               	movf	RFDOUT@fmcwtxrx,w
  6277  0E1D  00F2               	movwf	H_OUT@fmcwtxrx
  6278  0E1E  120A  158A  2224  120A  158A  	fcall	_H_OUT
  6279                           
  6280                           ;FMCW.c: 228: H_OUT(fmcwtxrx);
  6281  0E23  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6282  0E24  00F3               	movwf	H_OUT@fmcwtxrx+1
  6283  0E25  0879               	movf	RFDOUT@fmcwtxrx,w
  6284  0E26  00F2               	movwf	H_OUT@fmcwtxrx
  6285  0E27  120A  158A  2224  120A  158A  	fcall	_H_OUT
  6286                           
  6287                           ;FMCW.c: 231: STBOUT(fmcwtxrx);
  6288  0E2C  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6289  0E2D  00F3               	movwf	STBOUT@fmcwtxrx+1
  6290  0E2E  0879               	movf	RFDOUT@fmcwtxrx,w
  6291  0E2F  00F2               	movwf	STBOUT@fmcwtxrx
  6292  0E30  120A  158A  21C2   	fcall	_STBOUT
  6293  0E33  0008               	return
  6294  0E34                     __end_of_RFDOUT:	
  6295                           
  6296                           	psect	text24
  6297  00AC                     __ptext24:	
  6298 ;; *************** function _OUTFQ *****************
  6299 ;; Defined at:
  6300 ;;		line 136 in file "FMCW.c"
  6301 ;; Parameters:    Size  Location     Type
  6302 ;;  fmcwtxrx        2    9[COMMON] int 
  6303 ;;  Nprg            2   11[COMMON] PTR int 
  6304 ;;		 -> RAM(512), main@FMRX_Nprg(10), main@CWTX_Nprg(10), main@FMTX_Nprg(10), 
  6305 ;;		 -> FMRX_Nprg(10), CWTX_Nprg(10), FMTX_Nprg(10), 
  6306 ;; Auto vars:     Size  Location     Type
  6307 ;;  j               2   58[BANK0 ] int 
  6308 ;;  i               2   56[BANK0 ] int 
  6309 ;;  i               2   50[BANK0 ] int 
  6310 ;;  i               2   54[BANK0 ] int 
  6311 ;;  Nprg_b         34   16[BANK0 ] int [17]
  6312 ;;  count           2   52[BANK0 ] int 
  6313 ;; Return value:  Size  Location     Type
  6314 ;;                  1    wreg      void 
  6315 ;; Registers used:
  6316 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6317 ;; Tracked objects:
  6318 ;;		On entry : 0/0
  6319 ;;		On exit  : 0/0
  6320 ;;		Unchanged: 0/0
  6321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6322 ;;      Params:         4       0       0       0       0
  6323 ;;      Locals:         0      44       0       0       0
  6324 ;;      Temps:          0      16       0       0       0
  6325 ;;      Totals:         4      60       0       0       0
  6326 ;;Total ram usage:       64 bytes
  6327 ;; Hardware stack levels used:    1
  6328 ;; Hardware stack levels required when called:    2
  6329 ;; This function calls:
  6330 ;;		_H_OUT
  6331 ;;		_L_OUT
  6332 ;;		_STBOUT
  6333 ;;		___awdiv
  6334 ;; This function is called by:
  6335 ;;		_FMTX
  6336 ;;		_CWTX
  6337 ;;		_FMRX
  6338 ;; This function uses a non-reentrant model
  6339 ;;
  6340                           
  6341                           
  6342                           ;psect for function _OUTFQ
  6343  00AC                     _OUTFQ:	
  6344                           
  6345                           ;FMCW.c: 137: int count = 0;
  6346                           
  6347                           ;incstack = 0
  6348                           ; Regs used in _OUTFQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6349  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  6350  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  6351  00AE  01D4               	clrf	OUTFQ@count
  6352  00AF  01D5               	clrf	OUTFQ@count+1
  6353                           
  6354                           ;FMCW.c: 138: int Nprg_b[17];
  6355                           ;FMCW.c: 140: for(int i=0; i<17; i++){
  6356  00B0  01D6               	clrf	OUTFQ@i
  6357  00B1  01D7               	clrf	OUTFQ@i+1
  6358  00B2  0857               	movf	OUTFQ@i+1,w
  6359  00B3  3A80               	xorlw	128
  6360  00B4  00FF               	movwf	127
  6361  00B5  3080               	movlw	128
  6362  00B6  027F               	subwf	127,w
  6363  00B7  1D03               	skipz
  6364  00B8  28BB               	goto	u2785
  6365  00B9  3011               	movlw	17
  6366  00BA  0256               	subwf	OUTFQ@i,w
  6367  00BB                     u2785:	
  6368  00BB  1803               	btfsc	3,0
  6369  00BC  28D9               	goto	l3184
  6370  00BD                     l3178:	
  6371                           
  6372                           ;FMCW.c: 141: Nprg_b[i] = 0;
  6373  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  6374  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  6375  00BF  0856               	movf	OUTFQ@i,w
  6376  00C0  00A0               	movwf	??_OUTFQ
  6377  00C1  0720               	addwf	??_OUTFQ,w
  6378  00C2  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6379  00C3  0084               	movwf	4
  6380  00C4  1383               	bcf	3,7	;select IRP bank0
  6381  00C5  0180               	clrf	0
  6382  00C6  0A84               	incf	4,f
  6383  00C7  0180               	clrf	0
  6384  00C8  3001               	movlw	1
  6385  00C9  07D6               	addwf	OUTFQ@i,f
  6386  00CA  1803               	skipnc
  6387  00CB  0AD7               	incf	OUTFQ@i+1,f
  6388  00CC  3000               	movlw	0
  6389  00CD  07D7               	addwf	OUTFQ@i+1,f
  6390  00CE  0857               	movf	OUTFQ@i+1,w
  6391  00CF  3A80               	xorlw	128
  6392  00D0  00FF               	movwf	127
  6393  00D1  3080               	movlw	128
  6394  00D2  027F               	subwf	127,w
  6395  00D3  1D03               	skipz
  6396  00D4  28D7               	goto	u2795
  6397  00D5  3011               	movlw	17
  6398  00D6  0256               	subwf	OUTFQ@i,w
  6399  00D7                     u2795:	
  6400  00D7  1C03               	skipc
  6401  00D8  28BD               	goto	l3178
  6402  00D9                     l3184:	
  6403                           
  6404                           ;FMCW.c: 142: }
  6405                           ;FMCW.c: 145: for(int i = 0; i < 17; i++){
  6406  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  6407  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  6408  00DB  01D2               	clrf	OUTFQ@i_470
  6409  00DC  01D3               	clrf	OUTFQ@i_470+1
  6410  00DD  0853               	movf	OUTFQ@i_470+1,w
  6411  00DE  3A80               	xorlw	128
  6412  00DF  00FF               	movwf	127
  6413  00E0  3080               	movlw	128
  6414  00E1  027F               	subwf	127,w
  6415  00E2  1D03               	skipz
  6416  00E3  28E6               	goto	u2805
  6417  00E4  3011               	movlw	17
  6418  00E5  0252               	subwf	OUTFQ@i_470,w
  6419  00E6                     u2805:	
  6420  00E6  1803               	btfsc	3,0
  6421  00E7  2AB7               	goto	l3230
  6422  00E8                     l3190:	
  6423                           
  6424                           ;FMCW.c: 146: for(int j = 0; j<5; j++){
  6425  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  6426  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  6427  00EA  01DA               	clrf	OUTFQ@j
  6428  00EB  01DB               	clrf	OUTFQ@j+1
  6429  00EC  085B               	movf	OUTFQ@j+1,w
  6430  00ED  3A80               	xorlw	128
  6431  00EE  00FF               	movwf	127
  6432  00EF  3080               	movlw	128
  6433  00F0  027F               	subwf	127,w
  6434  00F1  1D03               	skipz
  6435  00F2  28F5               	goto	u2815
  6436  00F3  3005               	movlw	5
  6437  00F4  025A               	subwf	OUTFQ@j,w
  6438  00F5                     u2815:	
  6439  00F5  1803               	btfsc	3,0
  6440  00F6  2AA4               	goto	l3226
  6441  00F7                     l3196:	
  6442                           
  6443                           ;FMCW.c: 147: if(Nprg[j] % 2 == 0) {
  6444  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  6445  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  6446  00F9  085B               	movf	OUTFQ@j+1,w
  6447  00FA  00A1               	movwf	??_OUTFQ+1
  6448  00FB  085A               	movf	OUTFQ@j,w
  6449  00FC  00A0               	movwf	??_OUTFQ
  6450  00FD  1003               	clrc
  6451  00FE  0DA0               	rlf	??_OUTFQ,f
  6452  00FF  0DA1               	rlf	??_OUTFQ+1,f
  6453  0100  0820               	movf	??_OUTFQ,w
  6454  0101  077B               	addwf	OUTFQ@Nprg,w
  6455  0102  00A2               	movwf	??_OUTFQ+2
  6456  0103  0821               	movf	??_OUTFQ+1,w
  6457  0104  1803               	skipnc
  6458  0105  0A21               	incf	??_OUTFQ+1,w
  6459  0106  077C               	addwf	OUTFQ@Nprg+1,w
  6460  0107  00A3               	movwf	??_OUTFQ+3
  6461  0108  0822               	movf	??_OUTFQ+2,w
  6462  0109  0084               	movwf	4
  6463  010A  1783               	bsf	3,7
  6464  010B  1C23               	btfss	??_OUTFQ+3,0
  6465  010C  1383               	bcf	3,7
  6466  010D  0800               	movf	0,w
  6467  010E  00A4               	movwf	??_OUTFQ+4
  6468  010F  0A84               	incf	4,f
  6469  0110  0800               	movf	0,w
  6470  0111  00A5               	movwf	??_OUTFQ+5
  6471  0112  1824               	btfsc	??_OUTFQ+4,0
  6472  0113  299D               	goto	l3208
  6473                           
  6474                           ;FMCW.c: 148: if(j == 4){
  6475  0114  3004               	movlw	4
  6476  0115  065A               	xorwf	OUTFQ@j,w
  6477  0116  045B               	iorwf	OUTFQ@j+1,w
  6478  0117  1D03               	btfss	3,2
  6479  0118  2960               	goto	l3206
  6480                           
  6481                           ;FMCW.c: 149: Nprg[j] = Nprg[j] / 2;
  6482  0119  3002               	movlw	2
  6483  011A  00F0               	movwf	___awdiv@divisor
  6484  011B  3000               	movlw	0
  6485  011C  00F1               	movwf	___awdiv@divisor+1
  6486  011D  085B               	movf	OUTFQ@j+1,w
  6487  011E  00A1               	movwf	??_OUTFQ+1
  6488  011F  085A               	movf	OUTFQ@j,w
  6489  0120  00A0               	movwf	??_OUTFQ
  6490  0121  1003               	clrc
  6491  0122  0DA0               	rlf	??_OUTFQ,f
  6492  0123  0DA1               	rlf	??_OUTFQ+1,f
  6493  0124  0820               	movf	??_OUTFQ,w
  6494  0125  077B               	addwf	OUTFQ@Nprg,w
  6495  0126  00A2               	movwf	??_OUTFQ+2
  6496  0127  0821               	movf	??_OUTFQ+1,w
  6497  0128  1803               	skipnc
  6498  0129  0A21               	incf	??_OUTFQ+1,w
  6499  012A  077C               	addwf	OUTFQ@Nprg+1,w
  6500  012B  00A3               	movwf	??_OUTFQ+3
  6501  012C  0822               	movf	??_OUTFQ+2,w
  6502  012D  0084               	movwf	4
  6503  012E  1783               	bsf	3,7
  6504  012F  1C23               	btfss	??_OUTFQ+3,0
  6505  0130  1383               	bcf	3,7
  6506  0131  0800               	movf	0,w
  6507  0132  00F2               	movwf	___awdiv@dividend
  6508  0133  0A84               	incf	4,f
  6509  0134  0800               	movf	0,w
  6510  0135  00F3               	movwf	___awdiv@dividend+1
  6511  0136  120A  158A  22FC  120A  118A  	fcall	___awdiv
  6512  013B  1283               	bcf	3,5	;RP0=0, select bank0
  6513  013C  1303               	bcf	3,6	;RP1=0, select bank0
  6514  013D  085B               	movf	OUTFQ@j+1,w
  6515  013E  00A5               	movwf	??_OUTFQ+5
  6516  013F  085A               	movf	OUTFQ@j,w
  6517  0140  00A4               	movwf	??_OUTFQ+4
  6518  0141  1003               	clrc
  6519  0142  0DA4               	rlf	??_OUTFQ+4,f
  6520  0143  0DA5               	rlf	??_OUTFQ+5,f
  6521  0144  0824               	movf	??_OUTFQ+4,w
  6522  0145  077B               	addwf	OUTFQ@Nprg,w
  6523  0146  00A6               	movwf	??_OUTFQ+6
  6524  0147  0825               	movf	??_OUTFQ+5,w
  6525  0148  1803               	skipnc
  6526  0149  0A25               	incf	??_OUTFQ+5,w
  6527  014A  077C               	addwf	OUTFQ@Nprg+1,w
  6528  014B  00A7               	movwf	??_OUTFQ+7
  6529  014C  0826               	movf	??_OUTFQ+6,w
  6530  014D  0084               	movwf	4
  6531  014E  1783               	bsf	3,7
  6532  014F  1C27               	btfss	??_OUTFQ+7,0
  6533  0150  1383               	bcf	3,7
  6534  0151  0870               	movf	?___awdiv,w
  6535  0152  0080               	movwf	0
  6536  0153  0A84               	incf	4,f
  6537  0154  0871               	movf	?___awdiv+1,w
  6538  0155  0080               	movwf	0
  6539                           
  6540                           ;FMCW.c: 150: Nprg_b[count] = 0;
  6541  0156  0854               	movf	OUTFQ@count,w
  6542  0157  00A0               	movwf	??_OUTFQ
  6543  0158  0720               	addwf	??_OUTFQ,w
  6544  0159  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6545  015A  0084               	movwf	4
  6546  015B  1383               	bcf	3,7	;select IRP bank0
  6547  015C  0180               	clrf	0
  6548  015D  0A84               	incf	4,f
  6549  015E  0180               	clrf	0
  6550  015F  2A05               	goto	l3216
  6551  0160                     l3206:	
  6552                           ;FMCW.c: 152: }
  6553                           
  6554                           ;FMCW.c: 151: count++;
  6555                           
  6556                           
  6557                           ;FMCW.c: 153: else{
  6558                           ;FMCW.c: 154: Nprg[j] = Nprg[j] / 2;
  6559  0160  3002               	movlw	2
  6560  0161  00F0               	movwf	___awdiv@divisor
  6561  0162  3000               	movlw	0
  6562  0163  00F1               	movwf	___awdiv@divisor+1
  6563  0164  085B               	movf	OUTFQ@j+1,w
  6564  0165  00A1               	movwf	??_OUTFQ+1
  6565  0166  085A               	movf	OUTFQ@j,w
  6566  0167  00A0               	movwf	??_OUTFQ
  6567  0168  1003               	clrc
  6568  0169  0DA0               	rlf	??_OUTFQ,f
  6569  016A  0DA1               	rlf	??_OUTFQ+1,f
  6570  016B  0820               	movf	??_OUTFQ,w
  6571  016C  077B               	addwf	OUTFQ@Nprg,w
  6572  016D  00A2               	movwf	??_OUTFQ+2
  6573  016E  0821               	movf	??_OUTFQ+1,w
  6574  016F  1803               	skipnc
  6575  0170  0A21               	incf	??_OUTFQ+1,w
  6576  0171  077C               	addwf	OUTFQ@Nprg+1,w
  6577  0172  00A3               	movwf	??_OUTFQ+3
  6578  0173  0822               	movf	??_OUTFQ+2,w
  6579  0174  0084               	movwf	4
  6580  0175  1783               	bsf	3,7
  6581  0176  1C23               	btfss	??_OUTFQ+3,0
  6582  0177  1383               	bcf	3,7
  6583  0178  0800               	movf	0,w
  6584  0179  00F2               	movwf	___awdiv@dividend
  6585  017A  0A84               	incf	4,f
  6586  017B  0800               	movf	0,w
  6587  017C  00F3               	movwf	___awdiv@dividend+1
  6588  017D  120A  158A  22FC  120A  118A  	fcall	___awdiv
  6589  0182  1283               	bcf	3,5	;RP0=0, select bank0
  6590  0183  1303               	bcf	3,6	;RP1=0, select bank0
  6591  0184  085B               	movf	OUTFQ@j+1,w
  6592  0185  00A5               	movwf	??_OUTFQ+5
  6593  0186  085A               	movf	OUTFQ@j,w
  6594  0187  00A4               	movwf	??_OUTFQ+4
  6595  0188  1003               	clrc
  6596  0189  0DA4               	rlf	??_OUTFQ+4,f
  6597  018A  0DA5               	rlf	??_OUTFQ+5,f
  6598  018B  0824               	movf	??_OUTFQ+4,w
  6599  018C  077B               	addwf	OUTFQ@Nprg,w
  6600  018D  00A6               	movwf	??_OUTFQ+6
  6601  018E  0825               	movf	??_OUTFQ+5,w
  6602  018F  1803               	skipnc
  6603  0190  0A25               	incf	??_OUTFQ+5,w
  6604  0191  077C               	addwf	OUTFQ@Nprg+1,w
  6605  0192  00A7               	movwf	??_OUTFQ+7
  6606  0193  0826               	movf	??_OUTFQ+6,w
  6607  0194  0084               	movwf	4
  6608  0195  1783               	bsf	3,7
  6609  0196  1C27               	btfss	??_OUTFQ+7,0
  6610  0197  1383               	bcf	3,7
  6611  0198  0870               	movf	?___awdiv,w
  6612  0199  0080               	movwf	0
  6613  019A  0A84               	incf	4,f
  6614  019B  0871               	movf	?___awdiv+1,w
  6615  019C  2A92               	goto	L8
  6616  019D                     l3208:	
  6617                           ;FMCW.c: 155: }
  6618                           ;FMCW.c: 156: }
  6619                           
  6620                           
  6621                           ;FMCW.c: 157: else if(Nprg[j] % 2 == 1) {
  6622  019D  085B               	movf	OUTFQ@j+1,w
  6623  019E  00A1               	movwf	??_OUTFQ+1
  6624  019F  085A               	movf	OUTFQ@j,w
  6625  01A0  00A0               	movwf	??_OUTFQ
  6626  01A1  1003               	clrc
  6627  01A2  0DA0               	rlf	??_OUTFQ,f
  6628  01A3  0DA1               	rlf	??_OUTFQ+1,f
  6629  01A4  0820               	movf	??_OUTFQ,w
  6630  01A5  077B               	addwf	OUTFQ@Nprg,w
  6631  01A6  00A2               	movwf	??_OUTFQ+2
  6632  01A7  0821               	movf	??_OUTFQ+1,w
  6633  01A8  1803               	skipnc
  6634  01A9  0A21               	incf	??_OUTFQ+1,w
  6635  01AA  077C               	addwf	OUTFQ@Nprg+1,w
  6636  01AB  00A3               	movwf	??_OUTFQ+3
  6637  01AC  0822               	movf	??_OUTFQ+2,w
  6638  01AD  0084               	movwf	4
  6639  01AE  1783               	bsf	3,7
  6640  01AF  1C23               	btfss	??_OUTFQ+3,0
  6641  01B0  1383               	bcf	3,7
  6642  01B1  0800               	movf	0,w
  6643  01B2  00A4               	movwf	??_OUTFQ+4
  6644  01B3  0A84               	incf	4,f
  6645  01B4  0800               	movf	0,w
  6646  01B5  00A5               	movwf	??_OUTFQ+5
  6647  01B6  1C24               	btfss	??_OUTFQ+4,0
  6648  01B7  2A93               	goto	l3222
  6649                           
  6650                           ;FMCW.c: 158: if(j == 4){
  6651  01B8  3004               	movlw	4
  6652  01B9  065A               	xorwf	OUTFQ@j,w
  6653  01BA  045B               	iorwf	OUTFQ@j+1,w
  6654  01BB  1D03               	btfss	3,2
  6655  01BC  2A0C               	goto	l3218
  6656                           
  6657                           ;FMCW.c: 159: Nprg[j] = Nprg[j] / 2;
  6658  01BD  3002               	movlw	2
  6659  01BE  00F0               	movwf	___awdiv@divisor
  6660  01BF  3000               	movlw	0
  6661  01C0  00F1               	movwf	___awdiv@divisor+1
  6662  01C1  085B               	movf	OUTFQ@j+1,w
  6663  01C2  00A1               	movwf	??_OUTFQ+1
  6664  01C3  085A               	movf	OUTFQ@j,w
  6665  01C4  00A0               	movwf	??_OUTFQ
  6666  01C5  1003               	clrc
  6667  01C6  0DA0               	rlf	??_OUTFQ,f
  6668  01C7  0DA1               	rlf	??_OUTFQ+1,f
  6669  01C8  0820               	movf	??_OUTFQ,w
  6670  01C9  077B               	addwf	OUTFQ@Nprg,w
  6671  01CA  00A2               	movwf	??_OUTFQ+2
  6672  01CB  0821               	movf	??_OUTFQ+1,w
  6673  01CC  1803               	skipnc
  6674  01CD  0A21               	incf	??_OUTFQ+1,w
  6675  01CE  077C               	addwf	OUTFQ@Nprg+1,w
  6676  01CF  00A3               	movwf	??_OUTFQ+3
  6677  01D0  0822               	movf	??_OUTFQ+2,w
  6678  01D1  0084               	movwf	4
  6679  01D2  1783               	bsf	3,7
  6680  01D3  1C23               	btfss	??_OUTFQ+3,0
  6681  01D4  1383               	bcf	3,7
  6682  01D5  0800               	movf	0,w
  6683  01D6  00F2               	movwf	___awdiv@dividend
  6684  01D7  0A84               	incf	4,f
  6685  01D8  0800               	movf	0,w
  6686  01D9  00F3               	movwf	___awdiv@dividend+1
  6687  01DA  120A  158A  22FC  120A  118A  	fcall	___awdiv
  6688  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  6689  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  6690  01E1  085B               	movf	OUTFQ@j+1,w
  6691  01E2  00A5               	movwf	??_OUTFQ+5
  6692  01E3  085A               	movf	OUTFQ@j,w
  6693  01E4  00A4               	movwf	??_OUTFQ+4
  6694  01E5  1003               	clrc
  6695  01E6  0DA4               	rlf	??_OUTFQ+4,f
  6696  01E7  0DA5               	rlf	??_OUTFQ+5,f
  6697  01E8  0824               	movf	??_OUTFQ+4,w
  6698  01E9  077B               	addwf	OUTFQ@Nprg,w
  6699  01EA  00A6               	movwf	??_OUTFQ+6
  6700  01EB  0825               	movf	??_OUTFQ+5,w
  6701  01EC  1803               	skipnc
  6702  01ED  0A25               	incf	??_OUTFQ+5,w
  6703  01EE  077C               	addwf	OUTFQ@Nprg+1,w
  6704  01EF  00A7               	movwf	??_OUTFQ+7
  6705  01F0  0826               	movf	??_OUTFQ+6,w
  6706  01F1  0084               	movwf	4
  6707  01F2  1783               	bsf	3,7
  6708  01F3  1C27               	btfss	??_OUTFQ+7,0
  6709  01F4  1383               	bcf	3,7
  6710  01F5  0870               	movf	?___awdiv,w
  6711  01F6  0080               	movwf	0
  6712  01F7  0A84               	incf	4,f
  6713  01F8  0871               	movf	?___awdiv+1,w
  6714  01F9  0080               	movwf	0
  6715                           
  6716                           ;FMCW.c: 160: Nprg_b[count] = 1;
  6717  01FA  0854               	movf	OUTFQ@count,w
  6718  01FB  00A0               	movwf	??_OUTFQ
  6719  01FC  0720               	addwf	??_OUTFQ,w
  6720  01FD  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6721  01FE  0084               	movwf	4
  6722  01FF  3001               	movlw	1
  6723  0200  1383               	bcf	3,7	;select IRP bank0
  6724  0201  0080               	movwf	0
  6725  0202  0A84               	incf	4,f
  6726  0203  3000               	movlw	0
  6727  0204  0080               	movwf	0
  6728  0205                     l3216:	
  6729                           
  6730                           ;FMCW.c: 161: count++;
  6731  0205  3001               	movlw	1
  6732  0206  07D4               	addwf	OUTFQ@count,f
  6733  0207  1803               	skipnc
  6734  0208  0AD5               	incf	OUTFQ@count+1,f
  6735  0209  3000               	movlw	0
  6736  020A  07D5               	addwf	OUTFQ@count+1,f
  6737                           
  6738                           ;FMCW.c: 162: }
  6739  020B  2A93               	goto	l3222
  6740  020C                     l3218:	
  6741                           
  6742                           ;FMCW.c: 163: else{
  6743                           ;FMCW.c: 164: Nprg[j] = Nprg[j] / 2;
  6744  020C  3002               	movlw	2
  6745  020D  00F0               	movwf	___awdiv@divisor
  6746  020E  3000               	movlw	0
  6747  020F  00F1               	movwf	___awdiv@divisor+1
  6748  0210  085B               	movf	OUTFQ@j+1,w
  6749  0211  00A1               	movwf	??_OUTFQ+1
  6750  0212  085A               	movf	OUTFQ@j,w
  6751  0213  00A0               	movwf	??_OUTFQ
  6752  0214  1003               	clrc
  6753  0215  0DA0               	rlf	??_OUTFQ,f
  6754  0216  0DA1               	rlf	??_OUTFQ+1,f
  6755  0217  0820               	movf	??_OUTFQ,w
  6756  0218  077B               	addwf	OUTFQ@Nprg,w
  6757  0219  00A2               	movwf	??_OUTFQ+2
  6758  021A  0821               	movf	??_OUTFQ+1,w
  6759  021B  1803               	skipnc
  6760  021C  0A21               	incf	??_OUTFQ+1,w
  6761  021D  077C               	addwf	OUTFQ@Nprg+1,w
  6762  021E  00A3               	movwf	??_OUTFQ+3
  6763  021F  0822               	movf	??_OUTFQ+2,w
  6764  0220  0084               	movwf	4
  6765  0221  1783               	bsf	3,7
  6766  0222  1C23               	btfss	??_OUTFQ+3,0
  6767  0223  1383               	bcf	3,7
  6768  0224  0800               	movf	0,w
  6769  0225  00F2               	movwf	___awdiv@dividend
  6770  0226  0A84               	incf	4,f
  6771  0227  0800               	movf	0,w
  6772  0228  00F3               	movwf	___awdiv@dividend+1
  6773  0229  120A  158A  22FC  120A  118A  	fcall	___awdiv
  6774  022E  1283               	bcf	3,5	;RP0=0, select bank0
  6775  022F  1303               	bcf	3,6	;RP1=0, select bank0
  6776  0230  085B               	movf	OUTFQ@j+1,w
  6777  0231  00A5               	movwf	??_OUTFQ+5
  6778  0232  085A               	movf	OUTFQ@j,w
  6779  0233  00A4               	movwf	??_OUTFQ+4
  6780  0234  1003               	clrc
  6781  0235  0DA4               	rlf	??_OUTFQ+4,f
  6782  0236  0DA5               	rlf	??_OUTFQ+5,f
  6783  0237  0824               	movf	??_OUTFQ+4,w
  6784  0238  077B               	addwf	OUTFQ@Nprg,w
  6785  0239  00A6               	movwf	??_OUTFQ+6
  6786  023A  0825               	movf	??_OUTFQ+5,w
  6787  023B  1803               	skipnc
  6788  023C  0A25               	incf	??_OUTFQ+5,w
  6789  023D  077C               	addwf	OUTFQ@Nprg+1,w
  6790  023E  00A7               	movwf	??_OUTFQ+7
  6791  023F  0826               	movf	??_OUTFQ+6,w
  6792  0240  0084               	movwf	4
  6793  0241  1783               	bsf	3,7
  6794  0242  1C27               	btfss	??_OUTFQ+7,0
  6795  0243  1383               	bcf	3,7
  6796  0244  0870               	movf	?___awdiv,w
  6797  0245  0080               	movwf	0
  6798  0246  0A84               	incf	4,f
  6799  0247  0871               	movf	?___awdiv+1,w
  6800  0248  0080               	movwf	0
  6801                           
  6802                           ;FMCW.c: 165: Nprg[j+1] = Nprg[j+1] + 10;
  6803  0249  085B               	movf	OUTFQ@j+1,w
  6804  024A  00A1               	movwf	??_OUTFQ+1
  6805  024B  085A               	movf	OUTFQ@j,w
  6806  024C  00A0               	movwf	??_OUTFQ
  6807  024D  1003               	clrc
  6808  024E  0DA0               	rlf	??_OUTFQ,f
  6809  024F  0DA1               	rlf	??_OUTFQ+1,f
  6810  0250  0820               	movf	??_OUTFQ,w
  6811  0251  3E02               	addlw	2
  6812  0252  00A2               	movwf	??_OUTFQ+2
  6813  0253  0821               	movf	??_OUTFQ+1,w
  6814  0254  1803               	skipnc
  6815  0255  3E01               	addlw	1
  6816  0256  3E00               	addlw	0
  6817  0257  00A3               	movwf	??_OUTFQ+3
  6818  0258  0822               	movf	??_OUTFQ+2,w
  6819  0259  077B               	addwf	OUTFQ@Nprg,w
  6820  025A  00A4               	movwf	??_OUTFQ+4
  6821  025B  0823               	movf	??_OUTFQ+3,w
  6822  025C  1803               	skipnc
  6823  025D  0A23               	incf	??_OUTFQ+3,w
  6824  025E  077C               	addwf	OUTFQ@Nprg+1,w
  6825  025F  00A5               	movwf	??_OUTFQ+5
  6826  0260  0824               	movf	??_OUTFQ+4,w
  6827  0261  0084               	movwf	4
  6828  0262  1783               	bsf	3,7
  6829  0263  1C25               	btfss	??_OUTFQ+5,0
  6830  0264  1383               	bcf	3,7
  6831  0265  0800               	movf	0,w
  6832  0266  00A6               	movwf	??_OUTFQ+6
  6833  0267  0A84               	incf	4,f
  6834  0268  0800               	movf	0,w
  6835  0269  00A7               	movwf	??_OUTFQ+7
  6836  026A  0826               	movf	??_OUTFQ+6,w
  6837  026B  3E0A               	addlw	10
  6838  026C  00A8               	movwf	??_OUTFQ+8
  6839  026D  0827               	movf	??_OUTFQ+7,w
  6840  026E  1803               	skipnc
  6841  026F  3E01               	addlw	1
  6842  0270  3E00               	addlw	0
  6843  0271  00A9               	movwf	??_OUTFQ+9
  6844  0272  085B               	movf	OUTFQ@j+1,w
  6845  0273  00AB               	movwf	??_OUTFQ+11
  6846  0274  085A               	movf	OUTFQ@j,w
  6847  0275  00AA               	movwf	??_OUTFQ+10
  6848  0276  1003               	clrc
  6849  0277  0DAA               	rlf	??_OUTFQ+10,f
  6850  0278  0DAB               	rlf	??_OUTFQ+11,f
  6851  0279  082A               	movf	??_OUTFQ+10,w
  6852  027A  3E02               	addlw	2
  6853  027B  00AC               	movwf	??_OUTFQ+12
  6854  027C  082B               	movf	??_OUTFQ+11,w
  6855  027D  1803               	skipnc
  6856  027E  3E01               	addlw	1
  6857  027F  3E00               	addlw	0
  6858  0280  00AD               	movwf	??_OUTFQ+13
  6859  0281  082C               	movf	??_OUTFQ+12,w
  6860  0282  077B               	addwf	OUTFQ@Nprg,w
  6861  0283  00AE               	movwf	??_OUTFQ+14
  6862  0284  082D               	movf	??_OUTFQ+13,w
  6863  0285  1803               	skipnc
  6864  0286  0A2D               	incf	??_OUTFQ+13,w
  6865  0287  077C               	addwf	OUTFQ@Nprg+1,w
  6866  0288  00AF               	movwf	??_OUTFQ+15
  6867  0289  082E               	movf	??_OUTFQ+14,w
  6868  028A  0084               	movwf	4
  6869  028B  1783               	bsf	3,7
  6870  028C  1C2F               	btfss	??_OUTFQ+15,0
  6871  028D  1383               	bcf	3,7
  6872  028E  0828               	movf	??_OUTFQ+8,w
  6873  028F  0080               	movwf	0
  6874  0290  0A84               	incf	4,f
  6875  0291  0829               	movf	??_OUTFQ+9,w
  6876  0292                     L8:	
  6877  0292  0080               	movwf	0
  6878  0293                     l3222:	
  6879  0293  3001               	movlw	1
  6880  0294  07DA               	addwf	OUTFQ@j,f
  6881  0295  1803               	skipnc
  6882  0296  0ADB               	incf	OUTFQ@j+1,f
  6883  0297  3000               	movlw	0
  6884  0298  07DB               	addwf	OUTFQ@j+1,f
  6885  0299  085B               	movf	OUTFQ@j+1,w
  6886  029A  3A80               	xorlw	128
  6887  029B  00FF               	movwf	127
  6888  029C  3080               	movlw	128
  6889  029D  027F               	subwf	127,w
  6890  029E  1D03               	skipz
  6891  029F  2AA2               	goto	u2865
  6892  02A0  3005               	movlw	5
  6893  02A1  025A               	subwf	OUTFQ@j,w
  6894  02A2                     u2865:	
  6895  02A2  1C03               	skipc
  6896  02A3  28F7               	goto	l3196
  6897  02A4                     l3226:	
  6898  02A4  3001               	movlw	1
  6899  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  6900  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  6901  02A7  07D2               	addwf	OUTFQ@i_470,f
  6902  02A8  1803               	skipnc
  6903  02A9  0AD3               	incf	OUTFQ@i_470+1,f
  6904  02AA  3000               	movlw	0
  6905  02AB  07D3               	addwf	OUTFQ@i_470+1,f
  6906  02AC  0853               	movf	OUTFQ@i_470+1,w
  6907  02AD  3A80               	xorlw	128
  6908  02AE  00FF               	movwf	127
  6909  02AF  3080               	movlw	128
  6910  02B0  027F               	subwf	127,w
  6911  02B1  1D03               	skipz
  6912  02B2  2AB5               	goto	u2875
  6913  02B3  3011               	movlw	17
  6914  02B4  0252               	subwf	OUTFQ@i_470,w
  6915  02B5                     u2875:	
  6916  02B5  1C03               	skipc
  6917  02B6  28E8               	goto	l3190
  6918  02B7                     l3230:	
  6919                           
  6920                           ;FMCW.c: 166: }
  6921                           ;FMCW.c: 167: }
  6922                           ;FMCW.c: 168: }
  6923                           ;FMCW.c: 169: }
  6924                           ;FMCW.c: 172: for (int i=0; i<17; i++)
  6925  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  6926  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  6927  02B9  01D8               	clrf	OUTFQ@i_472
  6928  02BA  01D9               	clrf	OUTFQ@i_472+1
  6929  02BB  0859               	movf	OUTFQ@i_472+1,w
  6930  02BC  3A80               	xorlw	128
  6931  02BD  00FF               	movwf	127
  6932  02BE  3080               	movlw	128
  6933  02BF  027F               	subwf	127,w
  6934  02C0  1D03               	skipz
  6935  02C1  2AC4               	goto	u2885
  6936  02C2  3011               	movlw	17
  6937  02C3  0258               	subwf	OUTFQ@i_472,w
  6938  02C4                     u2885:	
  6939  02C4  1803               	btfsc	3,0
  6940  02C5  2B0D               	goto	l3248
  6941  02C6                     l3236:	
  6942                           
  6943                           ;FMCW.c: 173: {
  6944                           ;FMCW.c: 174: if(Nprg_b[i] == 0)
  6945  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  6946  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  6947  02C8  0858               	movf	OUTFQ@i_472,w
  6948  02C9  00A0               	movwf	??_OUTFQ
  6949  02CA  0720               	addwf	??_OUTFQ,w
  6950  02CB  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6951  02CC  0084               	movwf	4
  6952  02CD  1383               	bcf	3,7	;select IRP bank0
  6953  02CE  0800               	movf	0,w
  6954  02CF  00A1               	movwf	??_OUTFQ+1
  6955  02D0  0A84               	incf	4,f
  6956  02D1  0800               	movf	0,w
  6957  02D2  00A2               	movwf	??_OUTFQ+2
  6958  02D3  0821               	movf	??_OUTFQ+1,w
  6959  02D4  0422               	iorwf	??_OUTFQ+2,w
  6960  02D5  1D03               	btfss	3,2
  6961  02D6  2AE0               	goto	l3240
  6962                           
  6963                           ;FMCW.c: 175: {
  6964                           ;FMCW.c: 176: L_OUT(fmcwtxrx);
  6965  02D7  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6966  02D8  00F3               	movwf	L_OUT@fmcwtxrx+1
  6967  02D9  0879               	movf	OUTFQ@fmcwtxrx,w
  6968  02DA  00F2               	movwf	L_OUT@fmcwtxrx
  6969  02DB  120A  158A  226A  120A  118A  	fcall	_L_OUT
  6970  02E0                     l3240:	
  6971                           
  6972                           ;FMCW.c: 177: }
  6973                           ;FMCW.c: 178: if(Nprg_b[i] == 1)
  6974  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  6975  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  6976  02E2  0858               	movf	OUTFQ@i_472,w
  6977  02E3  00A0               	movwf	??_OUTFQ
  6978  02E4  0720               	addwf	??_OUTFQ,w
  6979  02E5  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6980  02E6  0084               	movwf	4
  6981  02E7  1383               	bcf	3,7	;select IRP bank0
  6982  02E8  0800               	movf	0,w
  6983  02E9  00A1               	movwf	??_OUTFQ+1
  6984  02EA  0A84               	incf	4,f
  6985  02EB  0800               	movf	0,w
  6986  02EC  00A2               	movwf	??_OUTFQ+2
  6987  02ED  0321               	decf	??_OUTFQ+1,w
  6988  02EE  0422               	iorwf	??_OUTFQ+2,w
  6989  02EF  1D03               	btfss	3,2
  6990  02F0  2AFA               	goto	l3244
  6991                           
  6992                           ;FMCW.c: 179: {
  6993                           ;FMCW.c: 180: H_OUT(fmcwtxrx);
  6994  02F1  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6995  02F2  00F3               	movwf	H_OUT@fmcwtxrx+1
  6996  02F3  0879               	movf	OUTFQ@fmcwtxrx,w
  6997  02F4  00F2               	movwf	H_OUT@fmcwtxrx
  6998  02F5  120A  158A  2224  120A  118A  	fcall	_H_OUT
  6999  02FA                     l3244:	
  7000  02FA  3001               	movlw	1
  7001  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  7002  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  7003  02FD  07D8               	addwf	OUTFQ@i_472,f
  7004  02FE  1803               	skipnc
  7005  02FF  0AD9               	incf	OUTFQ@i_472+1,f
  7006  0300  3000               	movlw	0
  7007  0301  07D9               	addwf	OUTFQ@i_472+1,f
  7008  0302  0859               	movf	OUTFQ@i_472+1,w
  7009  0303  3A80               	xorlw	128
  7010  0304  00FF               	movwf	127
  7011  0305  3080               	movlw	128
  7012  0306  027F               	subwf	127,w
  7013  0307  1D03               	skipz
  7014  0308  2B0B               	goto	u2915
  7015  0309  3011               	movlw	17
  7016  030A  0258               	subwf	OUTFQ@i_472,w
  7017  030B                     u2915:	
  7018  030B  1C03               	skipc
  7019  030C  2AC6               	goto	l3236
  7020  030D                     l3248:	
  7021                           
  7022                           ;FMCW.c: 181: }
  7023                           ;FMCW.c: 182: }
  7024                           ;FMCW.c: 185: H_OUT(fmcwtxrx);
  7025  030D  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7026  030E  00F3               	movwf	H_OUT@fmcwtxrx+1
  7027  030F  0879               	movf	OUTFQ@fmcwtxrx,w
  7028  0310  00F2               	movwf	H_OUT@fmcwtxrx
  7029  0311  120A  158A  2224  120A  118A  	fcall	_H_OUT
  7030                           
  7031                           ;FMCW.c: 186: L_OUT(fmcwtxrx);
  7032  0316  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7033  0317  00F3               	movwf	L_OUT@fmcwtxrx+1
  7034  0318  0879               	movf	OUTFQ@fmcwtxrx,w
  7035  0319  00F2               	movwf	L_OUT@fmcwtxrx
  7036  031A  120A  158A  226A  120A  118A  	fcall	_L_OUT
  7037                           
  7038                           ;FMCW.c: 189: STBOUT(fmcwtxrx);
  7039  031F  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7040  0320  00F3               	movwf	STBOUT@fmcwtxrx+1
  7041  0321  0879               	movf	OUTFQ@fmcwtxrx,w
  7042  0322  00F2               	movwf	STBOUT@fmcwtxrx
  7043  0323  120A  158A  21C2   	fcall	_STBOUT
  7044  0326  0008               	return
  7045  0327                     __end_of_OUTFQ:	
  7046                           
  7047                           	psect	text25
  7048  0AFC                     __ptext25:	
  7049 ;; *************** function ___awdiv *****************
  7050 ;; Defined at:
  7051 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  7052 ;; Parameters:    Size  Location     Type
  7053 ;;  divisor         2    0[COMMON] int 
  7054 ;;  dividend        2    2[COMMON] int 
  7055 ;; Auto vars:     Size  Location     Type
  7056 ;;  quotient        2    7[COMMON] int 
  7057 ;;  sign            1    6[COMMON] unsigned char 
  7058 ;;  counter         1    5[COMMON] unsigned char 
  7059 ;; Return value:  Size  Location     Type
  7060 ;;                  2    0[COMMON] int 
  7061 ;; Registers used:
  7062 ;;		wreg, status,2, status,0
  7063 ;; Tracked objects:
  7064 ;;		On entry : 0/0
  7065 ;;		On exit  : 0/0
  7066 ;;		Unchanged: 0/0
  7067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7068 ;;      Params:         4       0       0       0       0
  7069 ;;      Locals:         4       0       0       0       0
  7070 ;;      Temps:          1       0       0       0       0
  7071 ;;      Totals:         9       0       0       0       0
  7072 ;;Total ram usage:        9 bytes
  7073 ;; Hardware stack levels used:    1
  7074 ;; This function calls:
  7075 ;;		Nothing
  7076 ;; This function is called by:
  7077 ;;		_OUTFQ
  7078 ;;		_RFDOUT
  7079 ;; This function uses a non-reentrant model
  7080 ;;
  7081                           
  7082                           
  7083                           ;psect for function ___awdiv
  7084  0AFC                     ___awdiv:	
  7085                           
  7086                           ;incstack = 0
  7087                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7088  0AFC  01F6               	clrf	___awdiv@sign
  7089  0AFD  1FF1               	btfss	___awdiv@divisor+1,7
  7090  0AFE  2B06               	goto	l2660
  7091  0AFF  09F0               	comf	___awdiv@divisor,f
  7092  0B00  09F1               	comf	___awdiv@divisor+1,f
  7093  0B01  0AF0               	incf	___awdiv@divisor,f
  7094  0B02  1903               	skipnz
  7095  0B03  0AF1               	incf	___awdiv@divisor+1,f
  7096  0B04  01F6               	clrf	___awdiv@sign
  7097  0B05  0AF6               	incf	___awdiv@sign,f
  7098  0B06                     l2660:	
  7099  0B06  1FF3               	btfss	___awdiv@dividend+1,7
  7100  0B07  2B11               	goto	l2666
  7101  0B08  09F2               	comf	___awdiv@dividend,f
  7102  0B09  09F3               	comf	___awdiv@dividend+1,f
  7103  0B0A  0AF2               	incf	___awdiv@dividend,f
  7104  0B0B  1903               	skipnz
  7105  0B0C  0AF3               	incf	___awdiv@dividend+1,f
  7106  0B0D  3001               	movlw	1
  7107  0B0E  00F4               	movwf	??___awdiv
  7108  0B0F  0874               	movf	??___awdiv,w
  7109  0B10  06F6               	xorwf	___awdiv@sign,f
  7110  0B11                     l2666:	
  7111  0B11  01F7               	clrf	___awdiv@quotient
  7112  0B12  01F8               	clrf	___awdiv@quotient+1
  7113  0B13  0870               	movf	___awdiv@divisor,w
  7114  0B14  0471               	iorwf	___awdiv@divisor+1,w
  7115  0B15  1903               	btfsc	3,2
  7116  0B16  2B48               	goto	l2688
  7117  0B17  01F5               	clrf	___awdiv@counter
  7118  0B18  0AF5               	incf	___awdiv@counter,f
  7119  0B19                     l2676:	
  7120  0B19  1BF1               	btfsc	___awdiv@divisor+1,7
  7121  0B1A  2B27               	goto	l2678
  7122  0B1B  3001               	movlw	1
  7123  0B1C                     u2035:	
  7124  0B1C  1003               	clrc
  7125  0B1D  0DF0               	rlf	___awdiv@divisor,f
  7126  0B1E  0DF1               	rlf	___awdiv@divisor+1,f
  7127  0B1F  3EFF               	addlw	-1
  7128  0B20  1D03               	skipz
  7129  0B21  2B1C               	goto	u2035
  7130  0B22  3001               	movlw	1
  7131  0B23  00F4               	movwf	??___awdiv
  7132  0B24  0874               	movf	??___awdiv,w
  7133  0B25  07F5               	addwf	___awdiv@counter,f
  7134  0B26  2B19               	goto	l2676
  7135  0B27                     l2678:	
  7136  0B27  3001               	movlw	1
  7137  0B28                     u2055:	
  7138  0B28  1003               	clrc
  7139  0B29  0DF7               	rlf	___awdiv@quotient,f
  7140  0B2A  0DF8               	rlf	___awdiv@quotient+1,f
  7141  0B2B  3EFF               	addlw	-1
  7142  0B2C  1D03               	skipz
  7143  0B2D  2B28               	goto	u2055
  7144  0B2E  0871               	movf	___awdiv@divisor+1,w
  7145  0B2F  0273               	subwf	___awdiv@dividend+1,w
  7146  0B30  1D03               	skipz
  7147  0B31  2B34               	goto	u2065
  7148  0B32  0870               	movf	___awdiv@divisor,w
  7149  0B33  0272               	subwf	___awdiv@dividend,w
  7150  0B34                     u2065:	
  7151  0B34  1C03               	skipc
  7152  0B35  2B3D               	goto	l2684
  7153  0B36  0870               	movf	___awdiv@divisor,w
  7154  0B37  02F2               	subwf	___awdiv@dividend,f
  7155  0B38  0871               	movf	___awdiv@divisor+1,w
  7156  0B39  1C03               	skipc
  7157  0B3A  03F3               	decf	___awdiv@dividend+1,f
  7158  0B3B  02F3               	subwf	___awdiv@dividend+1,f
  7159  0B3C  1477               	bsf	___awdiv@quotient,0
  7160  0B3D                     l2684:	
  7161  0B3D  3001               	movlw	1
  7162  0B3E                     u2075:	
  7163  0B3E  1003               	clrc
  7164  0B3F  0CF1               	rrf	___awdiv@divisor+1,f
  7165  0B40  0CF0               	rrf	___awdiv@divisor,f
  7166  0B41  3EFF               	addlw	-1
  7167  0B42  1D03               	skipz
  7168  0B43  2B3E               	goto	u2075
  7169  0B44  3001               	movlw	1
  7170  0B45  02F5               	subwf	___awdiv@counter,f
  7171  0B46  1D03               	btfss	3,2
  7172  0B47  2B27               	goto	l2678
  7173  0B48                     l2688:	
  7174  0B48  0876               	movf	___awdiv@sign,w
  7175  0B49  1903               	btfsc	3,2
  7176  0B4A  2B50               	goto	l2692
  7177  0B4B  09F7               	comf	___awdiv@quotient,f
  7178  0B4C  09F8               	comf	___awdiv@quotient+1,f
  7179  0B4D  0AF7               	incf	___awdiv@quotient,f
  7180  0B4E  1903               	skipnz
  7181  0B4F  0AF8               	incf	___awdiv@quotient+1,f
  7182  0B50                     l2692:	
  7183  0B50  0878               	movf	___awdiv@quotient+1,w
  7184  0B51  00F1               	movwf	?___awdiv+1
  7185  0B52  0877               	movf	___awdiv@quotient,w
  7186  0B53  00F0               	movwf	?___awdiv
  7187  0B54  0008               	return
  7188  0B55                     __end_of___awdiv:	
  7189                           
  7190                           	psect	text26
  7191  0CD6                     __ptext26:	
  7192 ;; *************** function _OPINIT *****************
  7193 ;; Defined at:
  7194 ;;		line 241 in file "FMCW.c"
  7195 ;; Parameters:    Size  Location     Type
  7196 ;;  fmcwtxrx        2    4[COMMON] int 
  7197 ;; Auto vars:     Size  Location     Type
  7198 ;;		None
  7199 ;; Return value:  Size  Location     Type
  7200 ;;                  1    wreg      void 
  7201 ;; Registers used:
  7202 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7203 ;; Tracked objects:
  7204 ;;		On entry : 0/0
  7205 ;;		On exit  : 0/0
  7206 ;;		Unchanged: 0/0
  7207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7208 ;;      Params:         2       0       0       0       0
  7209 ;;      Locals:         0       0       0       0       0
  7210 ;;      Temps:          0       0       0       0       0
  7211 ;;      Totals:         2       0       0       0       0
  7212 ;;Total ram usage:        2 bytes
  7213 ;; Hardware stack levels used:    1
  7214 ;; Hardware stack levels required when called:    2
  7215 ;; This function calls:
  7216 ;;		_H_OUT
  7217 ;;		_L_OUT
  7218 ;;		_STBOUT
  7219 ;; This function is called by:
  7220 ;;		_FMTX
  7221 ;;		_CWTX
  7222 ;;		_FMRX
  7223 ;; This function uses a non-reentrant model
  7224 ;;
  7225                           
  7226                           
  7227                           ;psect for function _OPINIT
  7228  0CD6                     _OPINIT:	
  7229                           
  7230                           ;FMCW.c: 243: L_OUT(fmcwtxrx);
  7231                           
  7232                           ;incstack = 0
  7233                           ; Regs used in _OPINIT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7234  0CD6  0875               	movf	OPINIT@fmcwtxrx+1,w
  7235  0CD7  00F3               	movwf	L_OUT@fmcwtxrx+1
  7236  0CD8  0874               	movf	OPINIT@fmcwtxrx,w
  7237  0CD9  00F2               	movwf	L_OUT@fmcwtxrx
  7238  0CDA  120A  158A  226A  120A  158A  	fcall	_L_OUT
  7239                           
  7240                           ;FMCW.c: 244: L_OUT(fmcwtxrx);
  7241  0CDF  0875               	movf	OPINIT@fmcwtxrx+1,w
  7242  0CE0  00F3               	movwf	L_OUT@fmcwtxrx+1
  7243  0CE1  0874               	movf	OPINIT@fmcwtxrx,w
  7244  0CE2  00F2               	movwf	L_OUT@fmcwtxrx
  7245  0CE3  120A  158A  226A  120A  158A  	fcall	_L_OUT
  7246                           
  7247                           ;FMCW.c: 245: L_OUT(fmcwtxrx);
  7248  0CE8  0875               	movf	OPINIT@fmcwtxrx+1,w
  7249  0CE9  00F3               	movwf	L_OUT@fmcwtxrx+1
  7250  0CEA  0874               	movf	OPINIT@fmcwtxrx,w
  7251  0CEB  00F2               	movwf	L_OUT@fmcwtxrx
  7252  0CEC  120A  158A  226A  120A  158A  	fcall	_L_OUT
  7253                           
  7254                           ;FMCW.c: 246: H_OUT(fmcwtxrx);
  7255  0CF1  0875               	movf	OPINIT@fmcwtxrx+1,w
  7256  0CF2  00F3               	movwf	H_OUT@fmcwtxrx+1
  7257  0CF3  0874               	movf	OPINIT@fmcwtxrx,w
  7258  0CF4  00F2               	movwf	H_OUT@fmcwtxrx
  7259  0CF5  120A  158A  2224  120A  158A  	fcall	_H_OUT
  7260                           
  7261                           ;FMCW.c: 247: H_OUT(fmcwtxrx);
  7262  0CFA  0875               	movf	OPINIT@fmcwtxrx+1,w
  7263  0CFB  00F3               	movwf	H_OUT@fmcwtxrx+1
  7264  0CFC  0874               	movf	OPINIT@fmcwtxrx,w
  7265  0CFD  00F2               	movwf	H_OUT@fmcwtxrx
  7266  0CFE  120A  158A  2224  120A  158A  	fcall	_H_OUT
  7267                           
  7268                           ;FMCW.c: 248: L_OUT(fmcwtxrx);
  7269  0D03  0875               	movf	OPINIT@fmcwtxrx+1,w
  7270  0D04  00F3               	movwf	L_OUT@fmcwtxrx+1
  7271  0D05  0874               	movf	OPINIT@fmcwtxrx,w
  7272  0D06  00F2               	movwf	L_OUT@fmcwtxrx
  7273  0D07  120A  158A  226A  120A  158A  	fcall	_L_OUT
  7274                           
  7275                           ;FMCW.c: 249: L_OUT(fmcwtxrx);
  7276  0D0C  0875               	movf	OPINIT@fmcwtxrx+1,w
  7277  0D0D  00F3               	movwf	L_OUT@fmcwtxrx+1
  7278  0D0E  0874               	movf	OPINIT@fmcwtxrx,w
  7279  0D0F  00F2               	movwf	L_OUT@fmcwtxrx
  7280  0D10  120A  158A  226A  120A  158A  	fcall	_L_OUT
  7281                           
  7282                           ;FMCW.c: 250: L_OUT(fmcwtxrx);
  7283  0D15  0875               	movf	OPINIT@fmcwtxrx+1,w
  7284  0D16  00F3               	movwf	L_OUT@fmcwtxrx+1
  7285  0D17  0874               	movf	OPINIT@fmcwtxrx,w
  7286  0D18  00F2               	movwf	L_OUT@fmcwtxrx
  7287  0D19  120A  158A  226A  120A  158A  	fcall	_L_OUT
  7288                           
  7289                           ;FMCW.c: 251: L_OUT(fmcwtxrx);
  7290  0D1E  0875               	movf	OPINIT@fmcwtxrx+1,w
  7291  0D1F  00F3               	movwf	L_OUT@fmcwtxrx+1
  7292  0D20  0874               	movf	OPINIT@fmcwtxrx,w
  7293  0D21  00F2               	movwf	L_OUT@fmcwtxrx
  7294  0D22  120A  158A  226A  120A  158A  	fcall	_L_OUT
  7295                           
  7296                           ;FMCW.c: 252: L_OUT(fmcwtxrx);
  7297  0D27  0875               	movf	OPINIT@fmcwtxrx+1,w
  7298  0D28  00F3               	movwf	L_OUT@fmcwtxrx+1
  7299  0D29  0874               	movf	OPINIT@fmcwtxrx,w
  7300  0D2A  00F2               	movwf	L_OUT@fmcwtxrx
  7301  0D2B  120A  158A  226A  120A  158A  	fcall	_L_OUT
  7302                           
  7303                           ;FMCW.c: 253: H_OUT(fmcwtxrx);
  7304  0D30  0875               	movf	OPINIT@fmcwtxrx+1,w
  7305  0D31  00F3               	movwf	H_OUT@fmcwtxrx+1
  7306  0D32  0874               	movf	OPINIT@fmcwtxrx,w
  7307  0D33  00F2               	movwf	H_OUT@fmcwtxrx
  7308  0D34  120A  158A  2224  120A  158A  	fcall	_H_OUT
  7309                           
  7310                           ;FMCW.c: 256: L_OUT(fmcwtxrx);
  7311  0D39  0875               	movf	OPINIT@fmcwtxrx+1,w
  7312  0D3A  00F3               	movwf	L_OUT@fmcwtxrx+1
  7313  0D3B  0874               	movf	OPINIT@fmcwtxrx,w
  7314  0D3C  00F2               	movwf	L_OUT@fmcwtxrx
  7315  0D3D  120A  158A  226A  120A  158A  	fcall	_L_OUT
  7316                           
  7317                           ;FMCW.c: 257: L_OUT(fmcwtxrx);
  7318  0D42  0875               	movf	OPINIT@fmcwtxrx+1,w
  7319  0D43  00F3               	movwf	L_OUT@fmcwtxrx+1
  7320  0D44  0874               	movf	OPINIT@fmcwtxrx,w
  7321  0D45  00F2               	movwf	L_OUT@fmcwtxrx
  7322  0D46  120A  158A  226A  120A  158A  	fcall	_L_OUT
  7323                           
  7324                           ;FMCW.c: 260: STBOUT(fmcwtxrx);
  7325  0D4B  0875               	movf	OPINIT@fmcwtxrx+1,w
  7326  0D4C  00F3               	movwf	STBOUT@fmcwtxrx+1
  7327  0D4D  0874               	movf	OPINIT@fmcwtxrx,w
  7328  0D4E  00F2               	movwf	STBOUT@fmcwtxrx
  7329  0D4F  120A  158A  21C2   	fcall	_STBOUT
  7330  0D52  0008               	return
  7331  0D53                     __end_of_OPINIT:	
  7332                           
  7333                           	psect	text27
  7334  09C2                     __ptext27:	
  7335 ;; *************** function _STBOUT *****************
  7336 ;; Defined at:
  7337 ;;		line 107 in file "FMCW.c"
  7338 ;; Parameters:    Size  Location     Type
  7339 ;;  fmcwtxrx        2    2[COMMON] int 
  7340 ;; Auto vars:     Size  Location     Type
  7341 ;;		None
  7342 ;; Return value:  Size  Location     Type
  7343 ;;                  1    wreg      void 
  7344 ;; Registers used:
  7345 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7346 ;; Tracked objects:
  7347 ;;		On entry : 0/0
  7348 ;;		On exit  : 0/0
  7349 ;;		Unchanged: 0/0
  7350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7351 ;;      Params:         2       0       0       0       0
  7352 ;;      Locals:         0       0       0       0       0
  7353 ;;      Temps:          0       0       0       0       0
  7354 ;;      Totals:         2       0       0       0       0
  7355 ;;Total ram usage:        2 bytes
  7356 ;; Hardware stack levels used:    1
  7357 ;; Hardware stack levels required when called:    1
  7358 ;; This function calls:
  7359 ;;		__NOP
  7360 ;; This function is called by:
  7361 ;;		_OUTFQ
  7362 ;;		_RFDOUT
  7363 ;;		_OPINIT
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366                           
  7367                           
  7368                           ;psect for function _STBOUT
  7369  09C2                     _STBOUT:	
  7370                           
  7371                           ;FMCW.c: 108: if(fmcwtxrx == 1)
  7372                           
  7373                           ;incstack = 0
  7374                           ; Regs used in _STBOUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7375  09C2  0372               	decf	STBOUT@fmcwtxrx,w
  7376  09C3  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7377  09C4  1D03               	btfss	3,2
  7378  09C5  29D1               	goto	l2636
  7379                           
  7380                           ;FMCW.c: 109: {
  7381                           ;FMCW.c: 110: PORTAbits.RA5 = 1;
  7382  09C6  1283               	bcf	3,5	;RP0=0, select bank0
  7383  09C7  1303               	bcf	3,6	;RP1=0, select bank0
  7384  09C8  1685               	bsf	5,5	;volatile
  7385                           
  7386                           ;FMCW.c: 111: _NOP();
  7387  09C9  120A  158A  205C  120A  158A  	fcall	__NOP
  7388                           
  7389                           ;FMCW.c: 112: PORTAbits.RA5 = 0;
  7390  09CE  1283               	bcf	3,5	;RP0=0, select bank0
  7391  09CF  1303               	bcf	3,6	;RP1=0, select bank0
  7392  09D0  1285               	bcf	5,5	;volatile
  7393  09D1                     l2636:	
  7394                           
  7395                           ;FMCW.c: 113: }
  7396                           ;FMCW.c: 114: if(fmcwtxrx == 2)
  7397  09D1  3002               	movlw	2
  7398  09D2  0672               	xorwf	STBOUT@fmcwtxrx,w
  7399  09D3  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7400  09D4  1D03               	btfss	3,2
  7401  09D5  29E1               	goto	l2644
  7402                           
  7403                           ;FMCW.c: 115: {
  7404                           ;FMCW.c: 116: PORTDbits.RD0 = 1;
  7405  09D6  1283               	bcf	3,5	;RP0=0, select bank0
  7406  09D7  1303               	bcf	3,6	;RP1=0, select bank0
  7407  09D8  1408               	bsf	8,0	;volatile
  7408                           
  7409                           ;FMCW.c: 117: _NOP();
  7410  09D9  120A  158A  205C  120A  158A  	fcall	__NOP
  7411                           
  7412                           ;FMCW.c: 118: PORTDbits.RD0 = 0;
  7413  09DE  1283               	bcf	3,5	;RP0=0, select bank0
  7414  09DF  1303               	bcf	3,6	;RP1=0, select bank0
  7415  09E0  1008               	bcf	8,0	;volatile
  7416  09E1                     l2644:	
  7417                           
  7418                           ;FMCW.c: 119: }
  7419                           ;FMCW.c: 120: if(fmcwtxrx == 3)
  7420  09E1  3003               	movlw	3
  7421  09E2  0672               	xorwf	STBOUT@fmcwtxrx,w
  7422  09E3  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7423  09E4  1D03               	btfss	3,2
  7424  09E5  0008               	return
  7425                           
  7426                           ;FMCW.c: 121: {
  7427                           ;FMCW.c: 122: PORTAbits.RA4 = 1;
  7428  09E6  1283               	bcf	3,5	;RP0=0, select bank0
  7429  09E7  1303               	bcf	3,6	;RP1=0, select bank0
  7430  09E8  1605               	bsf	5,4	;volatile
  7431                           
  7432                           ;FMCW.c: 123: _NOP();
  7433  09E9  120A  158A  205C   	fcall	__NOP
  7434                           
  7435                           ;FMCW.c: 124: PORTAbits.RA4 = 0;
  7436  09EC  1283               	bcf	3,5	;RP0=0, select bank0
  7437  09ED  1303               	bcf	3,6	;RP1=0, select bank0
  7438  09EE  1205               	bcf	5,4	;volatile
  7439  09EF  0008               	return
  7440  09F0                     __end_of_STBOUT:	
  7441                           
  7442                           	psect	text28
  7443  0A6A                     __ptext28:	
  7444 ;; *************** function _L_OUT *****************
  7445 ;; Defined at:
  7446 ;;		line 40 in file "FMCW.c"
  7447 ;; Parameters:    Size  Location     Type
  7448 ;;  fmcwtxrx        2    2[COMMON] int 
  7449 ;; Auto vars:     Size  Location     Type
  7450 ;;		None
  7451 ;; Return value:  Size  Location     Type
  7452 ;;                  1    wreg      void 
  7453 ;; Registers used:
  7454 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7455 ;; Tracked objects:
  7456 ;;		On entry : 0/0
  7457 ;;		On exit  : 0/0
  7458 ;;		Unchanged: 0/0
  7459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7460 ;;      Params:         2       0       0       0       0
  7461 ;;      Locals:         0       0       0       0       0
  7462 ;;      Temps:          0       0       0       0       0
  7463 ;;      Totals:         2       0       0       0       0
  7464 ;;Total ram usage:        2 bytes
  7465 ;; Hardware stack levels used:    1
  7466 ;; Hardware stack levels required when called:    1
  7467 ;; This function calls:
  7468 ;;		__NOP
  7469 ;; This function is called by:
  7470 ;;		_OUTFQ
  7471 ;;		_RFDOUT
  7472 ;;		_OPINIT
  7473 ;; This function uses a non-reentrant model
  7474 ;;
  7475                           
  7476                           
  7477                           ;psect for function _L_OUT
  7478  0A6A                     _L_OUT:	
  7479                           
  7480                           ;FMCW.c: 41: if(fmcwtxrx == 1)
  7481                           
  7482                           ;incstack = 0
  7483                           ; Regs used in _L_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7484  0A6A  0372               	decf	L_OUT@fmcwtxrx,w
  7485  0A6B  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7486  0A6C  1D03               	btfss	3,2
  7487  0A6D  2A81               	goto	l2578
  7488                           
  7489                           ;FMCW.c: 42: {
  7490                           ;FMCW.c: 43: PORTEbits.RE0 = 0;
  7491  0A6E  1283               	bcf	3,5	;RP0=0, select bank0
  7492  0A6F  1303               	bcf	3,6	;RP1=0, select bank0
  7493  0A70  1009               	bcf	9,0	;volatile
  7494                           
  7495                           ;FMCW.c: 44: _NOP();
  7496  0A71  120A  158A  205C  120A  158A  	fcall	__NOP
  7497                           
  7498                           ;FMCW.c: 45: PORTEbits.RE1 = 1;
  7499  0A76  1283               	bcf	3,5	;RP0=0, select bank0
  7500  0A77  1303               	bcf	3,6	;RP1=0, select bank0
  7501  0A78  1489               	bsf	9,1	;volatile
  7502                           
  7503                           ;FMCW.c: 46: _NOP();
  7504  0A79  120A  158A  205C  120A  158A  	fcall	__NOP
  7505                           
  7506                           ;FMCW.c: 47: PORTEbits.RE1 = 0;
  7507  0A7E  1283               	bcf	3,5	;RP0=0, select bank0
  7508  0A7F  1303               	bcf	3,6	;RP1=0, select bank0
  7509  0A80  1089               	bcf	9,1	;volatile
  7510  0A81                     l2578:	
  7511                           
  7512                           ;FMCW.c: 48: }
  7513                           ;FMCW.c: 49: if(fmcwtxrx == 2)
  7514  0A81  3002               	movlw	2
  7515  0A82  0672               	xorwf	L_OUT@fmcwtxrx,w
  7516  0A83  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7517  0A84  1D03               	btfss	3,2
  7518  0A85  2A99               	goto	l2588
  7519                           
  7520                           ;FMCW.c: 50: {
  7521                           ;FMCW.c: 51: PORTDbits.RD1 = 0;
  7522  0A86  1283               	bcf	3,5	;RP0=0, select bank0
  7523  0A87  1303               	bcf	3,6	;RP1=0, select bank0
  7524  0A88  1088               	bcf	8,1	;volatile
  7525                           
  7526                           ;FMCW.c: 52: _NOP();
  7527  0A89  120A  158A  205C  120A  158A  	fcall	__NOP
  7528                           
  7529                           ;FMCW.c: 53: PORTDbits.RD2 = 1;
  7530  0A8E  1283               	bcf	3,5	;RP0=0, select bank0
  7531  0A8F  1303               	bcf	3,6	;RP1=0, select bank0
  7532  0A90  1508               	bsf	8,2	;volatile
  7533                           
  7534                           ;FMCW.c: 54: _NOP();
  7535  0A91  120A  158A  205C  120A  158A  	fcall	__NOP
  7536                           
  7537                           ;FMCW.c: 55: PORTDbits.RD2 = 0;
  7538  0A96  1283               	bcf	3,5	;RP0=0, select bank0
  7539  0A97  1303               	bcf	3,6	;RP1=0, select bank0
  7540  0A98  1108               	bcf	8,2	;volatile
  7541  0A99                     l2588:	
  7542                           
  7543                           ;FMCW.c: 56: }
  7544                           ;FMCW.c: 57: if(fmcwtxrx == 3)
  7545  0A99  3003               	movlw	3
  7546  0A9A  0672               	xorwf	L_OUT@fmcwtxrx,w
  7547  0A9B  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7548  0A9C  1D03               	btfss	3,2
  7549  0A9D  0008               	return
  7550                           
  7551                           ;FMCW.c: 58: {
  7552                           ;FMCW.c: 59: PORTAbits.RA3 = 0;
  7553  0A9E  1283               	bcf	3,5	;RP0=0, select bank0
  7554  0A9F  1303               	bcf	3,6	;RP1=0, select bank0
  7555  0AA0  1185               	bcf	5,3	;volatile
  7556                           
  7557                           ;FMCW.c: 60: _NOP();
  7558  0AA1  120A  158A  205C  120A  158A  	fcall	__NOP
  7559                           
  7560                           ;FMCW.c: 61: PORTAbits.RA2 = 1;
  7561  0AA6  1283               	bcf	3,5	;RP0=0, select bank0
  7562  0AA7  1303               	bcf	3,6	;RP1=0, select bank0
  7563  0AA8  1505               	bsf	5,2	;volatile
  7564                           
  7565                           ;FMCW.c: 62: _NOP();
  7566  0AA9  120A  158A  205C   	fcall	__NOP
  7567                           
  7568                           ;FMCW.c: 63: PORTAbits.RA2 = 0;
  7569  0AAC  1283               	bcf	3,5	;RP0=0, select bank0
  7570  0AAD  1303               	bcf	3,6	;RP1=0, select bank0
  7571  0AAE  1105               	bcf	5,2	;volatile
  7572  0AAF  0008               	return
  7573  0AB0                     __end_of_L_OUT:	
  7574                           
  7575                           	psect	text29
  7576  0A24                     __ptext29:	
  7577 ;; *************** function _H_OUT *****************
  7578 ;; Defined at:
  7579 ;;		line 74 in file "FMCW.c"
  7580 ;; Parameters:    Size  Location     Type
  7581 ;;  fmcwtxrx        2    2[COMMON] int 
  7582 ;; Auto vars:     Size  Location     Type
  7583 ;;		None
  7584 ;; Return value:  Size  Location     Type
  7585 ;;                  1    wreg      void 
  7586 ;; Registers used:
  7587 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7588 ;; Tracked objects:
  7589 ;;		On entry : 0/0
  7590 ;;		On exit  : 0/0
  7591 ;;		Unchanged: 0/0
  7592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7593 ;;      Params:         2       0       0       0       0
  7594 ;;      Locals:         0       0       0       0       0
  7595 ;;      Temps:          0       0       0       0       0
  7596 ;;      Totals:         2       0       0       0       0
  7597 ;;Total ram usage:        2 bytes
  7598 ;; Hardware stack levels used:    1
  7599 ;; Hardware stack levels required when called:    1
  7600 ;; This function calls:
  7601 ;;		__NOP
  7602 ;; This function is called by:
  7603 ;;		_OUTFQ
  7604 ;;		_RFDOUT
  7605 ;;		_OPINIT
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609                           
  7610                           ;psect for function _H_OUT
  7611  0A24                     _H_OUT:	
  7612                           
  7613                           ;FMCW.c: 75: if(fmcwtxrx == 1)
  7614                           
  7615                           ;incstack = 0
  7616                           ; Regs used in _H_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7617  0A24  0372               	decf	H_OUT@fmcwtxrx,w
  7618  0A25  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7619  0A26  1D03               	btfss	3,2
  7620  0A27  2A3B               	goto	l2608
  7621                           
  7622                           ;FMCW.c: 76: {
  7623                           ;FMCW.c: 77: PORTEbits.RE0 = 1;
  7624  0A28  1283               	bcf	3,5	;RP0=0, select bank0
  7625  0A29  1303               	bcf	3,6	;RP1=0, select bank0
  7626  0A2A  1409               	bsf	9,0	;volatile
  7627                           
  7628                           ;FMCW.c: 78: _NOP();
  7629  0A2B  120A  158A  205C  120A  158A  	fcall	__NOP
  7630                           
  7631                           ;FMCW.c: 79: PORTEbits.RE1 = 1;
  7632  0A30  1283               	bcf	3,5	;RP0=0, select bank0
  7633  0A31  1303               	bcf	3,6	;RP1=0, select bank0
  7634  0A32  1489               	bsf	9,1	;volatile
  7635                           
  7636                           ;FMCW.c: 80: _NOP();
  7637  0A33  120A  158A  205C  120A  158A  	fcall	__NOP
  7638                           
  7639                           ;FMCW.c: 81: PORTEbits.RE1 = 0;
  7640  0A38  1283               	bcf	3,5	;RP0=0, select bank0
  7641  0A39  1303               	bcf	3,6	;RP1=0, select bank0
  7642  0A3A  1089               	bcf	9,1	;volatile
  7643  0A3B                     l2608:	
  7644                           
  7645                           ;FMCW.c: 82: }
  7646                           ;FMCW.c: 83: if(fmcwtxrx == 2)
  7647  0A3B  3002               	movlw	2
  7648  0A3C  0672               	xorwf	H_OUT@fmcwtxrx,w
  7649  0A3D  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7650  0A3E  1D03               	btfss	3,2
  7651  0A3F  2A53               	goto	l2618
  7652                           
  7653                           ;FMCW.c: 84: {
  7654                           ;FMCW.c: 85: PORTDbits.RD1 = 1;
  7655  0A40  1283               	bcf	3,5	;RP0=0, select bank0
  7656  0A41  1303               	bcf	3,6	;RP1=0, select bank0
  7657  0A42  1488               	bsf	8,1	;volatile
  7658                           
  7659                           ;FMCW.c: 86: _NOP();
  7660  0A43  120A  158A  205C  120A  158A  	fcall	__NOP
  7661                           
  7662                           ;FMCW.c: 87: PORTDbits.RD2 = 1;
  7663  0A48  1283               	bcf	3,5	;RP0=0, select bank0
  7664  0A49  1303               	bcf	3,6	;RP1=0, select bank0
  7665  0A4A  1508               	bsf	8,2	;volatile
  7666                           
  7667                           ;FMCW.c: 88: _NOP();
  7668  0A4B  120A  158A  205C  120A  158A  	fcall	__NOP
  7669                           
  7670                           ;FMCW.c: 89: PORTDbits.RD2 = 0;
  7671  0A50  1283               	bcf	3,5	;RP0=0, select bank0
  7672  0A51  1303               	bcf	3,6	;RP1=0, select bank0
  7673  0A52  1108               	bcf	8,2	;volatile
  7674  0A53                     l2618:	
  7675                           
  7676                           ;FMCW.c: 90: }
  7677                           ;FMCW.c: 91: if(fmcwtxrx == 3)
  7678  0A53  3003               	movlw	3
  7679  0A54  0672               	xorwf	H_OUT@fmcwtxrx,w
  7680  0A55  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7681  0A56  1D03               	btfss	3,2
  7682  0A57  0008               	return
  7683                           
  7684                           ;FMCW.c: 92: {
  7685                           ;FMCW.c: 93: PORTAbits.RA3 = 1;
  7686  0A58  1283               	bcf	3,5	;RP0=0, select bank0
  7687  0A59  1303               	bcf	3,6	;RP1=0, select bank0
  7688  0A5A  1585               	bsf	5,3	;volatile
  7689                           
  7690                           ;FMCW.c: 94: _NOP();
  7691  0A5B  120A  158A  205C  120A  158A  	fcall	__NOP
  7692                           
  7693                           ;FMCW.c: 95: PORTAbits.RA2 = 1;
  7694  0A60  1283               	bcf	3,5	;RP0=0, select bank0
  7695  0A61  1303               	bcf	3,6	;RP1=0, select bank0
  7696  0A62  1505               	bsf	5,2	;volatile
  7697                           
  7698                           ;FMCW.c: 96: _NOP();
  7699  0A63  120A  158A  205C   	fcall	__NOP
  7700                           
  7701                           ;FMCW.c: 97: PORTAbits.RA2 = 0;
  7702  0A66  1283               	bcf	3,5	;RP0=0, select bank0
  7703  0A67  1303               	bcf	3,6	;RP1=0, select bank0
  7704  0A68  1105               	bcf	5,2	;volatile
  7705  0A69  0008               	return
  7706  0A6A                     __end_of_H_OUT:	
  7707                           
  7708                           	psect	text30
  7709  085C                     __ptext30:	
  7710 ;; *************** function __NOP *****************
  7711 ;; Defined at:
  7712 ;;		line 349 in file "FMCW.c"
  7713 ;; Parameters:    Size  Location     Type
  7714 ;;		None
  7715 ;; Auto vars:     Size  Location     Type
  7716 ;;  i               2    0[COMMON] int 
  7717 ;; Return value:  Size  Location     Type
  7718 ;;                  1    wreg      void 
  7719 ;; Registers used:
  7720 ;;		wreg, status,2, btemp+1
  7721 ;; Tracked objects:
  7722 ;;		On entry : 0/0
  7723 ;;		On exit  : 0/0
  7724 ;;		Unchanged: 0/0
  7725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7726 ;;      Params:         0       0       0       0       0
  7727 ;;      Locals:         2       0       0       0       0
  7728 ;;      Temps:          0       0       0       0       0
  7729 ;;      Totals:         2       0       0       0       0
  7730 ;;Total ram usage:        2 bytes
  7731 ;; Hardware stack levels used:    1
  7732 ;; This function calls:
  7733 ;;		Nothing
  7734 ;; This function is called by:
  7735 ;;		_L_OUT
  7736 ;;		_H_OUT
  7737 ;;		_STBOUT
  7738 ;; This function uses a non-reentrant model
  7739 ;;
  7740                           
  7741                           
  7742                           ;psect for function __NOP
  7743  085C                     __NOP:	
  7744                           
  7745                           ;FMCW.c: 350: for(int i=0; i<5; i++){
  7746                           
  7747                           ;incstack = 0
  7748                           ; Regs used in __NOP: [wreg+status,2+btemp+1]
  7749  085C  01F0               	clrf	__NOP@i
  7750  085D  01F1               	clrf	__NOP@i+1
  7751  085E                     L9:	
  7752  085E  0871               	movf	__NOP@i+1,w
  7753  085F  3A80               	xorlw	128
  7754  0860  00FF               	movwf	127
  7755  0861  3080               	movlw	128
  7756  0862  027F               	subwf	127,w
  7757  0863  1D03               	skipz
  7758  0864  2867               	goto	u1845
  7759  0865  3005               	movlw	5
  7760  0866  0270               	subwf	__NOP@i,w
  7761  0867                     u1845:	
  7762  0867  1803               	btfsc	3,0
  7763  0868  0008               	return
  7764                           
  7765                           ;FMCW.c: 351: __nop();
  7766  0869  0000               	nop
  7767  086A  3001               	movlw	1
  7768  086B  07F0               	addwf	__NOP@i,f
  7769  086C  1803               	skipnc
  7770  086D  0AF1               	incf	__NOP@i+1,f
  7771  086E  3000               	movlw	0
  7772  086F  07F1               	addwf	__NOP@i+1,f
  7773  0870  285E               	goto	L9
  7774  0871                     __end_of__NOP:	
  7775  007E                     btemp	set	126	;btemp
  7776  007E                     wtemp	set	126
  7777  007E                     wtemp0	set	126
  7778  0080                     wtemp1	set	128
  7779  0082                     wtemp2	set	130
  7780  0084                     wtemp3	set	132
  7781  0086                     wtemp4	set	134
  7782  0088                     wtemp5	set	136
  7783  007F                     wtemp6	set	127
  7784  007E                     ttemp	set	126
  7785  007E                     ttemp0	set	126
  7786  0081                     ttemp1	set	129
  7787  0084                     ttemp2	set	132
  7788  0087                     ttemp3	set	135
  7789  007F                     ttemp4	set	127
  7790  007E                     ltemp	set	126
  7791  007E                     ltemp0	set	126
  7792  0082                     ltemp1	set	130
  7793  0086                     ltemp2	set	134
  7794  0080                     ltemp3	set	128


Data Sizes:
    Strings     22
    Constant    2
    Data        91
    BSS         121
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      80
    BANK1            80     33      72
    BANK3            96      0      90
    BANK2            96      0      73

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_15(CODE[8]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 

    FMRX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), FMRX_Nprg(BANK3[10]), 

    CWTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@CWTX_Nprg(BANK1[10]), CWTX_Nprg(BANK1[10]), 

    FMTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    OUTFQ@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), main@CWTX_Nprg(BANK1[10]), main@FMTX_Nprg(BANK1[10]), 
		 -> FMRX_Nprg(BANK3[10]), CWTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    sp__EEPROM_Read	PTR unsigned char  size(1) Largest target is 32
		 -> EEPROMData(BANK2[32]), 

    EEPROM_Write@data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK2[16]), 

    main@dData	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK2[16]), 

    sp__ReceivePacket_data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK2[16]), 


Critical Paths under _main in COMMON

    _printf->_putch
    _TXOBC_waddress->_putch
    _ReceivePacket_data->_fcscheck
    _ReceivePacket_data->_waitFlag
    _waitFlag->_getbit
    _getdata->_getbit
    _NM_waddress->_putch
    _Init_I2C_M->___lldiv
    _FMTX->_OUTFQ
    _FMTX->_RFDOUT
    _FMRX->_OUTFQ
    _FMRX->_RFDOUT
    _EEPROM_Write->_I2C_Master_Write
    _CWTX->_OUTFQ
    _CWTX->_RFDOUT
    _RFDOUT->___awdiv
    _OUTFQ->___awdiv
    _OPINIT->_H_OUT
    _OPINIT->_L_OUT
    _OPINIT->_STBOUT
    _STBOUT->__NOP
    _L_OUT->__NOP
    _H_OUT->__NOP

Critical Paths under _main in BANK0

    _main->_CWTX
    _main->_FMRX
    _main->_FMTX
    _ReceivePacket_data->_waitFlag
    _FMTX->_OUTFQ
    _FMRX->_OUTFQ
    _CWTX->_OUTFQ

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0   33319
                                             66 BANK0      4     4      0
                                              0 BANK1     33    33      0
                               _CWTX
                       _EEPROM_Write
                               _FMRX
                               _FMTX
                         _Init_I2C_M
                           _Init_MPU
                        _Init_SERIAL
                        _NM_waddress
                 _ReceivePacket_data
                          _Reset_EPS
                     _TXOBC_waddress
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              16    16      0      95
                                              1 COMMON     4     4      0
                              _putch
 ---------------------------------------------------------------------------------
 (1) _TXOBC_waddress                                       5     3      2     194
                                              1 COMMON     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _Reset_EPS                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ReceivePacket_data                                   6     6      0    2691
                                             10 COMMON     2     2      0
                                             29 BANK0      4     4      0
                           _fcscheck
                            _getdata
                           _waitFlag
 ---------------------------------------------------------------------------------
 (2) _waitFlag                                            33    33      0    2205
                                              6 COMMON     4     4      0
                                              0 BANK0     29    29      0
                             _getbit
 ---------------------------------------------------------------------------------
 (2) _getdata                                             10    10      0     212
                                              6 COMMON     2     2      0
                                              0 BANK0      7     7      0
                             _getbit
 ---------------------------------------------------------------------------------
 (3) _getbit                                               6     4      2      46
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _fcscheck                                            10     8      2     161
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (1) _NM_waddress                                          3     1      2     194
                                              1 COMMON     3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_SERIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_MPU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_I2C_M                                           8     4      4     343
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _FMTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _FMRX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         8     5      3     739
                                              2 COMMON     8     5      3
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     446
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CWTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (2) _RFDOUT                                              37    33      4    3231
                                              9 COMMON     4     0      4
                                              0 BANK0     33    33      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _OUTFQ                                               64    60      4    3853
                                              9 COMMON     4     0      4
                                              0 BANK0     60    60      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _OPINIT                                               2     0      2    2075
                                              4 COMMON     2     0      2
                              _H_OUT
                              _L_OUT
                             _STBOUT
 ---------------------------------------------------------------------------------
 (3) _STBOUT                                               2     0      2     271
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _L_OUT                                                2     0      2     801
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _H_OUT                                                2     0      2     536
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (4) __NOP                                                 2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CWTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _EEPROM_Write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _FMRX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _FMTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _Init_I2C_M
     ___lldiv
   _Init_MPU
   _Init_SERIAL
   _NM_waddress
     _putch
   _ReceivePacket_data
     _fcscheck
     _getdata
       _getbit
     _waitFlag
       _getbit
   _Reset_EPS
   _TXOBC_waddress
     _putch
   _printf
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      5A       9       93.8%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      49      11       76.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     21      48       7       90.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     46      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     149      12        0.0%
ABS                  0      0     149       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Tue Feb 20 17:04:11 2018

                             pc 0002                     __CFG_CP$OFF 0000                              l69 0821  
                  ___awdiv@sign 0076                              fsr 0004                             l214 0566  
                           l442 0FF0                             l443 0FDD                             l279 0091  
                           l498 0830                             _RA1 0029                             _RB2 0032  
                           _RC2 003A                             _RB4 0034                             _RB5 0035  
                           _RC5 003D                             _PEN 048A                    __CFG_CPD$OFF 0000  
                           _SEN 0488                             _RX9 00C6                             _TX9 04C6  
                           fsr0 0004                             indf 0000                    __CFG_FOSC$HS 0000  
                  __CFG_LVP$OFF 0000                            l3100 0C4A                            l3020 0706  
                          l3004 06CB                            l3030 0721                            l3104 0C55  
                          l3008 06D8                            l3114 0C19                            l3034 072E  
                          l3140 008A                            l3060 0784                            l3222 0293  
                          l3206 0160                            l3230 02B7                            l3134 0076  
                          l3142 0038                            l3046 075C                            l3240 02E0  
                          l3216 0205                            l3208 019D                            l3304 0BC2  
                          l3128 0059                            l3056 0777                            l3080 032F  
                          l3400 0CCA                            l3218 020C                            l3226 02A4  
                          l3314 0BFA                            l3306 0BD2                            l3154 00A9  
                          l3244 02FA                            l3236 02C6                            l3190 00E8  
                          l3262 0D7E                            l3318 0C07                            l3094 0C39  
                          l3078 07B0                            l2608 0A3B                            l3248 030D  
                          l3184 00D9                            l3256 0D62                            l2560 0AF7  
                          l3096 0C3C                            l3408 0CD0                            l2618 0A53  
                          l3178 00BD                            l3290 0E07                            l3282 0DD3  
                          l3514 0B85                            l2802 0464                            l2722 035E  
                          l2714 0336                            l2644 09E1                            l2636 09D1  
                          l2660 0B06                            l3196 00F7                            l3276 0DC4  
                          l3268 0D8D                            l3516 0B9F                            l2812 047F  
                          l2732 0379                            l2716 0355                            l3286 0DED  
                          l3294 0E1A                            l2558 0AEA                            l2902 058A  
                          l2750 03B8                            l2816 048C                            l2760 03D3  
                          l2736 0386                            l3800 0F0D                            l2578 0A81  
                          l2666 0B11                            l2930 05D6                            l2906 0597  
                          l2842 04E2                            l3394 0CA2                            l2588 0A99  
                          l2692 0B50                            l2684 0B3D                            l2676 0B19  
                          l2916 05AE                            l2828 04BA                            l2764 03E0  
                          l2678 0B27                            l2942 0604                            l2926 05C9  
                          l2854 0510                            l2838 04D5                            l2790 0436  
                          l3806 0F1E                            l2688 0B48                            l2952 061F  
                          l2864 052B                            l2776 040E                            l2786 0429  
                          l3498 08C2                            l3826 0FC5                            l2956 062C  
                          l2892 056F                            l2868 0538                            l2982 0682  
                          l2886 0564                            l3782 0EB4                            l2968 065A  
                          l2994 06B0                            l2978 0675                            STR_1 0817  
                          STR_2 0817                            STR_3 0817                            STR_4 0817  
                          STR_5 0817                            STR_6 0817                            STR_7 0810  
                          STR_8 0810                            STR_9 0810                            _BRGH 04C2  
                          _CREN 00C4                            _FERR 00C2                            u2035 0B1C  
                          u2055 0B28                            u3015 0BC6                            u2215 03F5  
                          u2065 0B34                            u2075 0B3E                            u3035 0BD4  
                          u3045 0BE9                            u3055 0BFB                            u2335 04F7  
                          u2255 044B                            u2175 039F                            u3165 0A02  
                          u2605 0743                            u2525 0697                            u2445 05EB  
                          u3085 0CA0                            u3510 0F3C                            u2375 054D  
                          u2295 04A1                            u3095 0CC8                            u3520 0F52  
                          _FMRX 096A                            u3530 0F68                            _FMTX 0996  
                          u1845 0867                            u2805 00E6                            u2645 0799  
                          u2565 06ED                            u2485 0641                            u2815 00F5  
                          u3607 0FBD                            u2745 0046                            u3617 0FE6  
                          u2915 030B                            u1875 0ADA                            u3627 0FF8  
                          u2925 0D60                            u3637 08FE                            u2935 0D7C  
                          u3647 0011                            u3567 0E3C                            u2865 02A2  
                          u2785 00BB                            u2945 0D8B                            u3657 0022  
                          u3577 0E65                            u2875 02B5                            u2795 00D7  
                          u2955 0DC2                            u3667 0ADE                            u3587 0EC9  
                          _RCIE 0465                            _RCEN 048B                            _RCIF 0065  
                          _CWTX 093E                            u2885 02C4                            u2965 0DD1  
                          u3677 0BAA                            u3597 0F2B                            u2995 0E18  
                          _OERR 00C1                            _TMR1 000E                            _SPEN 00C7  
                          _RSEN 0489                            _SREN 00C5                            _TXIE 0464  
                          _TXEN 04C5                            _TXIF 0064                            _SYNC 04C4  
                          __NOP 085C  TXOBC_waddress@TXOBC_wad_header 0075                    __CFG_WRT$OFF 0000  
                          _main 0E34                     _NM_waddress 084A                   ??_Init_SERIAL 0070  
                          btemp 007E                   __CFG_BOREN$ON 0000                            ltemp 007E  
                  getbit@oldbit 00E6                     Init_I2C_M@c 0020                            start 0000  
  ReceivePacket_data@fcschecker 003D                            ttemp 007E                            wtemp 007E  
                 __CFG_IESO$OFF 0000                   __CFG_MCLRE$ON 0000            __end_of_EEPROM_Write 0BB2  
                         ?_FMRX 005C                           ?_FMTX 005C                           ?_CWTX 005C  
              ?_I2C_Master_Wait 0070                ?_I2C_Master_Stop 0070                           ?__NOP 0070  
                         ?_main 0070                           _ACKEN 048C                           _ACKDT 048D  
               __end_of___awdiv 0B55                           STR_10 0810                           STR_11 0810  
                         STR_12 0810                           STR_15 0808                   __CFG_WDTE$OFF 0000  
                         _ANSEL 0188                 __end_of___lldiv 0C10                 ___awdiv@divisor 0070  
       __size_of_TXOBC_waddress 0020                 ___awdiv@counter 0075                           _RCREG 001A  
                         _SPBRG 0099                           _PORTA 0005                           _PORTB 0006  
                         _PORTC 0007                           _PORTD 0008                           _PORTE 0009  
                         _H_OUT 0A24                           _OUTFQ 00AC                           _TRISA 0085  
                         _TRISB 0086                           _TRISC 0087                           _TRISD 0088  
                         _TRISE 0089                           _L_OUT 0A6A                           _TXREG 0019  
                 __CFG_PWRTE$ON 0000                  __CFG_FCMEN$OFF 0000                           _dData 0130  
               __end_of_getdata 0C71                           _eflag 0068                   getdata@dstuff 0022  
                         _putch 0820                           pclath 000A                           ltemp0 007E  
                         ltemp1 0082                           ltemp2 0086                           ltemp3 0080  
                         ttemp0 007E                           ttemp1 0081                           ttemp2 0084  
                         ttemp3 0087                           ttemp4 007F                           status 0003  
                         wtemp0 007E                           wtemp1 0080                           wtemp2 0082  
                         wtemp3 0084                           wtemp4 0086                           wtemp5 0088  
                         wtemp6 007F                      _Init_I2C_M 09F0                EEPROM_Write@data 0074  
    __end_of_ReceivePacket_data 0CD6                    __end_of_FMRX 0996                    __end_of_FMTX 09C2  
                  __end_of_CWTX 096A                    __end_of__NOP 0871                 __initialization 07B3  
                  __end_of_main 1000             __end_of_Init_SERIAL 088A                __end_of_Init_MPU 08F6  
                        ??_FMRX 007D                          ??_FMTX 007D                          ??_CWTX 007D  
                        ??__NOP 0070                          ??_main 0062                          ?_H_OUT 0072  
      EEPROM_Write@high_address 0072                          ?_OUTFQ 0079                          ?_L_OUT 0072  
             ?_I2C_Master_Start 0070               ?_I2C_Master_Write 0070                          OUTFQ@i 0056  
            ??_I2C_Master_Start 0070                          OUTFQ@j 005A              ??_I2C_Master_Write 0072  
              ___awdiv@dividend 0072                      _eDataField 0140                          ?_putch 0070  
                        _ANSELH 0189                          _RFDOUT 0D53                          _OPINIT 0CD6  
                        _SSPADD 0093                          _STBOUT 09C2                          _STATUS 0003  
                        _SSPCON 0014                          _SSPBUF 0013                          __NOP@i 0070  
              __end_of_fcscheck 00AC                       ??___awdiv 0074                          _dfcshi 006C  
                     ??___lldiv 0078                          _dfcslo 006D                          _efcshi 006E  
                        _efcslo 006F                          _getbit 0AB0              __size_of_Reset_EPS 0023  
                        _estuff 00E4                ___awdiv@quotient 0077                      _dPacketnum 0066  
                        _printf 08BD                       ??_getdata 0076                     RFDOUT@i_481 003B  
                   RFDOUT@i_482 003F                __end_of_waitFlag 07B3      EEPROM_Write@EEPROM_address 0078  
       __end_of__initialization 07FC         EEPROM_Write@low_address 0073                     ?_Init_I2C_M 0020  
                   _Init_SERIAL 0871           __size_of_EEPROM_Write 005D                   __end_of_H_OUT 0A6A  
                 __end_of_OUTFQ 0327                   __end_of_L_OUT 0AB0                   L_OUT@fmcwtxrx 0072  
                __pcstackCOMMON 0070                    __pidataBANK1 08A3                    __pidataBANK2 088A  
                  __pidataBANK3 0916                   __end_of_putch 0828                  _TXOBC_waddress 08F6  
                       ??_H_OUT 0074                         ??_OUTFQ 0020                         ??_L_OUT 0074  
                       ??_putch 0070                    _EEPROM_Write 0B55                      __pbssBANK0 0066  
                    __pbssBANK1 00DB                      __pbssBANK2 0110                      __pbssBANK3 0190  
             __end_of_Reset_EPS 002A                       ?_Init_MPU 0070                         ?_RFDOUT 0079  
                       ?_OPINIT 0074                    ?_NM_waddress 0071                         ?_STBOUT 0072  
                       RFDOUT@i 003D                      __pmaintext 0E34                      _ebitstatus 00E0  
                       ?_getbit 0070          __end_of_TXOBC_waddress 0916                         ?_printf 0070  
   TXOBC_waddress@whigh_address 0071             __size_of_Init_I2C_M 0034                       OUTFQ@Nprg 007B  
                     ?_fcscheck 0070                         _SSPCON2 0091                         _SSPSTAT 0094  
                    __stringtab 0800                      ??_Init_MPU 0070                 __size_of_RFDOUT 00E1  
               __size_of_OPINIT 007D                 __size_of_STBOUT 002E                       ?_waitFlag 0070  
                       _dPacket 0190                         _ePacket 00DB                         ___awdiv 0AFC  
                       ___lldiv 0BB2                 __size_of_getbit 004C                     waitFlag@buf 003C  
               ?_TXOBC_waddress 0071                         __ptext1 08BD                         __ptext2 08F6  
                       __ptext3 0007                         __ptext4 0C71                         __ptext5 0327  
                       __ptext6 0C10                         __ptext7 0AB0                         __ptext8 002A  
                       __ptext9 084A                 __size_of_printf 001C                         _getdata 0C10  
            _ReceivePacket_data 0C71                       _T1CONbits 0010        __size_of_I2C_Master_Wait 0009  
      __size_of_I2C_Master_Stop 0007                      ??_fcscheck 0072             ?_ReceivePacket_data 0070  
                       getbit@i 0074                         clrloop0 0829            end_of_initialization 07FC  
                  RFDOUT@Nref_b 0023                       _FMRX_Nref 00C3                       _FMRX_Nprg 01E0  
                     _FMTX_Nref 00C5                       _FMTX_Nprg 00D1                       _CWTX_Nref 00C1  
                     _CWTX_Nprg 00C7                     OUTFQ@Nprg_b 0030       __size_of_I2C_Master_Start 0007  
     __size_of_I2C_Master_Write 0008                 ___lldiv@divisor 0070                 ___lldiv@counter 007D  
                    ??_waitFlag 0076            ??_ReceivePacket_data 007A                         printf@c 0073  
                       printf@f 0074                      fcscheck@bt 0074                  OPINIT@fmcwtxrx 0074  
                     _PORTAbits 0005                       _PORTCbits 0007                       _PORTDbits 0008  
                     _PORTEbits 0009                      getdata@buf 0026                    ??_Init_I2C_M 0024  
                  ?_Init_SERIAL 0070                  __end_of_RFDOUT 0E34                  __end_of_OPINIT 0D53  
                __end_of_STBOUT 09F0            __size_of_NM_waddress 0012                  __end_of_getbit 0AFC  
    TXOBC_waddress@wlow_address 0072                  __end_of_printf 08D9             start_initialization 07B3  
            __end_of_Init_I2C_M 0A24                        ??_RFDOUT 0020                        ??_OPINIT 0076  
             ??_I2C_Master_Wait 0070               ??_I2C_Master_Stop 0070                        ??_STBOUT 0074  
             __size_of_Init_MPU 001D                       _Reset_EPS 0007               getdata@dbitstatus 0024  
                    init_fetch0 0839                        ??_getbit 0072                     __pdataBANK1 00C1  
                   __pdataBANK2 0140                     __pdataBANK3 01C2                      RFDOUT@Nref 007B  
                      ??_printf 0071             __end_of_commandSize 0808        NM_waddress@whigh_address 0071  
                     ___latbits 0002                   __pcstackBANK0 0020                   __pcstackBANK1 00A0  
                      FMRX@Nref 005C                        FMRX@Nprg 005E                        FMTX@Nref 005C  
                      FMTX@Nprg 005E                        FMRX@fmrx 0060                        FMTX@fmtx 0060  
                      CWTX@Nref 005C                        CWTX@Nprg 005E               __size_of_fcscheck 0082  
                 waitFlag@j_120 0026                   waitFlag@j_122 0028                   waitFlag@j_131 0032  
                 waitFlag@j_124 002A                   waitFlag@j_133 0034                   waitFlag@j_126 002C  
                 waitFlag@j_118 0024                   waitFlag@j_135 0036                   waitFlag@j_127 002E  
                 waitFlag@j_137 0038                   waitFlag@j_129 0030                        CWTX@cwtx 0060  
              _I2C_Master_Start 17EA                      ?_Reset_EPS 0070                _I2C_Master_Write 17F8  
              ??_TXOBC_waddress 0073         getdata@bufstore_counter 0020                        ?___awdiv 0070  
                      ?___lldiv 0070               __size_of_waitFlag 048C                       __pstrings 0800  
                      ?_getdata 0070                  __size_of_H_OUT 0046                  __size_of_OUTFQ 027B  
                __size_of_L_OUT 0046                  __size_of_putch 0008                   H_OUT@fmcwtxrx 0072  
                     clear_ram0 0828                        _PIE1bits 008C                      OUTFQ@i_470 0052  
                    OUTFQ@i_472 0058                       _rcv_state 006A            __size_of_Init_SERIAL 0019  
                      _PIR1bits 000C                      OUTFQ@count 0054                     _commandSize 0806  
                     fcscheck@i 0075                       main@F2010 01C2                       main@F2012 01CC  
                     main@F2014 01D6                     __stringbase 0805                       main@dData 00C0  
                      _Init_MPU 08D9                     ??_Reset_EPS 0070                   fcscheck@i_149 0077  
   __size_of_ReceivePacket_data 0065                __size_of___awdiv 0059                __size_of___lldiv 005E  
            __end_of__stringtab 0806                      _EEPROMData 0110                __size_of_getdata 0061  
               _I2C_Master_Wait 0830                 _I2C_Master_Stop 17F1                  RFDOUT@fmcwtxrx 0079  
                      _efcsflag 00E2                        _fcscheck 002A                        __ptext10 0820  
                      __ptext11 0871                        __ptext20 17EA                        __ptext12 08D9  
                      __ptext21 0830                        __ptext13 09F0                        __ptext30 085C  
                      __ptext22 093E                        __ptext14 0BB2                        __ptext23 0D53  
                      __ptext15 0996                        __ptext24 00AC                        __ptext16 096A  
                      __ptext25 0AFC                        __ptext17 0B55                        __ptext26 0CD6  
                      __ptext18 17F8                        __ptext27 09C2                        __ptext19 17F1  
                      __ptext28 0A6A                        __ptext29 0A24               __CFG_BOR4V$BOR21V 0000  
                 ?_EEPROM_Write 0072                   __size_of_FMRX 002C                   __size_of_FMTX 002C  
                 __size_of_CWTX 002C                   __size_of__NOP 0015                   ??_NM_waddress 0073  
                     waitFlag@i 0020                       waitFlag@j 0022                   __size_of_main 01CC  
                STBOUT@fmcwtxrx 0072                        _waitFlag 0327        NM_waddress@NM_wad_header 0073  
                 OUTFQ@fmcwtxrx 0079        __end_of_I2C_Master_Start 17F1                       putch@byte 0070  
      __end_of_I2C_Master_Write 1800                      _INTCONbits 000B                        init_ram0 083D  
                  fcscheck@byte 0079                  ??_EEPROM_Write 0075              waitFlag@flag_judge 003A  
              ___lldiv@dividend 0074                       stringcode 0800                   main@FMRX_Nprg 00B4  
             main@NM_wad_header 00BF                   main@FMTX_Nprg 00A0             __end_of_NM_waddress 085C  
                      printf@ap 0072                   main@CWTX_Nprg 00AA         __end_of_I2C_Master_Wait 0839  
       __end_of_I2C_Master_Stop 17F8                ___lldiv@quotient 0079               I2C_Master_Write@d 0070  
           EEPROM_Write@Address 0079                        stringdir 0800                        stringtab 0800  
           ReceivePacket_data@i 003F         NM_waddress@wlow_address 0072            main@TXOBC_wad_header 00BE  
