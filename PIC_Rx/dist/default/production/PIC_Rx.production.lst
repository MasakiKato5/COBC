

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Nov 07 20:57:29 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	dabs	1,0x7E,2
    53  0000                     
    54                           ; Version 1.44
    55                           ; Generated 14/09/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC16F887 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     	;# 
    89  0001                     	;# 
    90  0002                     	;# 
    91  0003                     	;# 
    92  0004                     	;# 
    93  0005                     	;# 
    94  0006                     	;# 
    95  0007                     	;# 
    96  0008                     	;# 
    97  0009                     	;# 
    98  000A                     	;# 
    99  000B                     	;# 
   100  000C                     	;# 
   101  000D                     	;# 
   102  000E                     	;# 
   103  000E                     	;# 
   104  000F                     	;# 
   105  0010                     	;# 
   106  0011                     	;# 
   107  0012                     	;# 
   108  0013                     	;# 
   109  0014                     	;# 
   110  0015                     	;# 
   111  0015                     	;# 
   112  0016                     	;# 
   113  0017                     	;# 
   114  0018                     	;# 
   115  0019                     	;# 
   116  001A                     	;# 
   117  001B                     	;# 
   118  001B                     	;# 
   119  001C                     	;# 
   120  001D                     	;# 
   121  001E                     	;# 
   122  001F                     	;# 
   123  0081                     	;# 
   124  0085                     	;# 
   125  0086                     	;# 
   126  0087                     	;# 
   127  0088                     	;# 
   128  0089                     	;# 
   129  008C                     	;# 
   130  008D                     	;# 
   131  008E                     	;# 
   132  008F                     	;# 
   133  0090                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0093                     	;# 
   137  0093                     	;# 
   138  0093                     	;# 
   139  0094                     	;# 
   140  0095                     	;# 
   141  0096                     	;# 
   142  0097                     	;# 
   143  0098                     	;# 
   144  0099                     	;# 
   145  009A                     	;# 
   146  009B                     	;# 
   147  009C                     	;# 
   148  009D                     	;# 
   149  009E                     	;# 
   150  009F                     	;# 
   151  0105                     	;# 
   152  0107                     	;# 
   153  0108                     	;# 
   154  0109                     	;# 
   155  010C                     	;# 
   156  010C                     	;# 
   157  010D                     	;# 
   158  010E                     	;# 
   159  010F                     	;# 
   160  0185                     	;# 
   161  0187                     	;# 
   162  0188                     	;# 
   163  0189                     	;# 
   164  018C                     	;# 
   165  018D                     	;# 
   166  0000                     	;# 
   167  0001                     	;# 
   168  0002                     	;# 
   169  0003                     	;# 
   170  0004                     	;# 
   171  0005                     	;# 
   172  0006                     	;# 
   173  0007                     	;# 
   174  0008                     	;# 
   175  0009                     	;# 
   176  000A                     	;# 
   177  000B                     	;# 
   178  000C                     	;# 
   179  000D                     	;# 
   180  000E                     	;# 
   181  000E                     	;# 
   182  000F                     	;# 
   183  0010                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0013                     	;# 
   187  0014                     	;# 
   188  0015                     	;# 
   189  0015                     	;# 
   190  0016                     	;# 
   191  0017                     	;# 
   192  0018                     	;# 
   193  0019                     	;# 
   194  001A                     	;# 
   195  001B                     	;# 
   196  001B                     	;# 
   197  001C                     	;# 
   198  001D                     	;# 
   199  001E                     	;# 
   200  001F                     	;# 
   201  0081                     	;# 
   202  0085                     	;# 
   203  0086                     	;# 
   204  0087                     	;# 
   205  0088                     	;# 
   206  0089                     	;# 
   207  008C                     	;# 
   208  008D                     	;# 
   209  008E                     	;# 
   210  008F                     	;# 
   211  0090                     	;# 
   212  0091                     	;# 
   213  0092                     	;# 
   214  0093                     	;# 
   215  0093                     	;# 
   216  0093                     	;# 
   217  0094                     	;# 
   218  0095                     	;# 
   219  0096                     	;# 
   220  0097                     	;# 
   221  0098                     	;# 
   222  0099                     	;# 
   223  009A                     	;# 
   224  009B                     	;# 
   225  009C                     	;# 
   226  009D                     	;# 
   227  009E                     	;# 
   228  009F                     	;# 
   229  0105                     	;# 
   230  0107                     	;# 
   231  0108                     	;# 
   232  0109                     	;# 
   233  010C                     	;# 
   234  010C                     	;# 
   235  010D                     	;# 
   236  010E                     	;# 
   237  010F                     	;# 
   238  0185                     	;# 
   239  0187                     	;# 
   240  0188                     	;# 
   241  0189                     	;# 
   242  018C                     	;# 
   243  018D                     	;# 
   244  0000                     	;# 
   245  0001                     	;# 
   246  0002                     	;# 
   247  0003                     	;# 
   248  0004                     	;# 
   249  0005                     	;# 
   250  0006                     	;# 
   251  0007                     	;# 
   252  0008                     	;# 
   253  0009                     	;# 
   254  000A                     	;# 
   255  000B                     	;# 
   256  000C                     	;# 
   257  000D                     	;# 
   258  000E                     	;# 
   259  000E                     	;# 
   260  000F                     	;# 
   261  0010                     	;# 
   262  0011                     	;# 
   263  0012                     	;# 
   264  0013                     	;# 
   265  0014                     	;# 
   266  0015                     	;# 
   267  0015                     	;# 
   268  0016                     	;# 
   269  0017                     	;# 
   270  0018                     	;# 
   271  0019                     	;# 
   272  001A                     	;# 
   273  001B                     	;# 
   274  001B                     	;# 
   275  001C                     	;# 
   276  001D                     	;# 
   277  001E                     	;# 
   278  001F                     	;# 
   279  0081                     	;# 
   280  0085                     	;# 
   281  0086                     	;# 
   282  0087                     	;# 
   283  0088                     	;# 
   284  0089                     	;# 
   285  008C                     	;# 
   286  008D                     	;# 
   287  008E                     	;# 
   288  008F                     	;# 
   289  0090                     	;# 
   290  0091                     	;# 
   291  0092                     	;# 
   292  0093                     	;# 
   293  0093                     	;# 
   294  0093                     	;# 
   295  0094                     	;# 
   296  0095                     	;# 
   297  0096                     	;# 
   298  0097                     	;# 
   299  0098                     	;# 
   300  0099                     	;# 
   301  009A                     	;# 
   302  009B                     	;# 
   303  009C                     	;# 
   304  009D                     	;# 
   305  009E                     	;# 
   306  009F                     	;# 
   307  0105                     	;# 
   308  0107                     	;# 
   309  0108                     	;# 
   310  0109                     	;# 
   311  010C                     	;# 
   312  010C                     	;# 
   313  010D                     	;# 
   314  010E                     	;# 
   315  010F                     	;# 
   316  0185                     	;# 
   317  0187                     	;# 
   318  0188                     	;# 
   319  0189                     	;# 
   320  018C                     	;# 
   321  018D                     	;# 
   322  0000                     	;# 
   323  0001                     	;# 
   324  0002                     	;# 
   325  0003                     	;# 
   326  0004                     	;# 
   327  0005                     	;# 
   328  0006                     	;# 
   329  0007                     	;# 
   330  0008                     	;# 
   331  0009                     	;# 
   332  000A                     	;# 
   333  000B                     	;# 
   334  000C                     	;# 
   335  000D                     	;# 
   336  000E                     	;# 
   337  000E                     	;# 
   338  000F                     	;# 
   339  0010                     	;# 
   340  0011                     	;# 
   341  0012                     	;# 
   342  0013                     	;# 
   343  0014                     	;# 
   344  0015                     	;# 
   345  0015                     	;# 
   346  0016                     	;# 
   347  0017                     	;# 
   348  0018                     	;# 
   349  0019                     	;# 
   350  001A                     	;# 
   351  001B                     	;# 
   352  001B                     	;# 
   353  001C                     	;# 
   354  001D                     	;# 
   355  001E                     	;# 
   356  001F                     	;# 
   357  0081                     	;# 
   358  0085                     	;# 
   359  0086                     	;# 
   360  0087                     	;# 
   361  0088                     	;# 
   362  0089                     	;# 
   363  008C                     	;# 
   364  008D                     	;# 
   365  008E                     	;# 
   366  008F                     	;# 
   367  0090                     	;# 
   368  0091                     	;# 
   369  0092                     	;# 
   370  0093                     	;# 
   371  0093                     	;# 
   372  0093                     	;# 
   373  0094                     	;# 
   374  0095                     	;# 
   375  0096                     	;# 
   376  0097                     	;# 
   377  0098                     	;# 
   378  0099                     	;# 
   379  009A                     	;# 
   380  009B                     	;# 
   381  009C                     	;# 
   382  009D                     	;# 
   383  009E                     	;# 
   384  009F                     	;# 
   385  0105                     	;# 
   386  0107                     	;# 
   387  0108                     	;# 
   388  0109                     	;# 
   389  010C                     	;# 
   390  010C                     	;# 
   391  010D                     	;# 
   392  010E                     	;# 
   393  010F                     	;# 
   394  0185                     	;# 
   395  0187                     	;# 
   396  0188                     	;# 
   397  0189                     	;# 
   398  018C                     	;# 
   399  018D                     	;# 
   400  0000                     	;# 
   401  0001                     	;# 
   402  0002                     	;# 
   403  0003                     	;# 
   404  0004                     	;# 
   405  0005                     	;# 
   406  0006                     	;# 
   407  0007                     	;# 
   408  0008                     	;# 
   409  0009                     	;# 
   410  000A                     	;# 
   411  000B                     	;# 
   412  000C                     	;# 
   413  000D                     	;# 
   414  000E                     	;# 
   415  000E                     	;# 
   416  000F                     	;# 
   417  0010                     	;# 
   418  0011                     	;# 
   419  0012                     	;# 
   420  0013                     	;# 
   421  0014                     	;# 
   422  0015                     	;# 
   423  0015                     	;# 
   424  0016                     	;# 
   425  0017                     	;# 
   426  0018                     	;# 
   427  0019                     	;# 
   428  001A                     	;# 
   429  001B                     	;# 
   430  001B                     	;# 
   431  001C                     	;# 
   432  001D                     	;# 
   433  001E                     	;# 
   434  001F                     	;# 
   435  0081                     	;# 
   436  0085                     	;# 
   437  0086                     	;# 
   438  0087                     	;# 
   439  0088                     	;# 
   440  0089                     	;# 
   441  008C                     	;# 
   442  008D                     	;# 
   443  008E                     	;# 
   444  008F                     	;# 
   445  0090                     	;# 
   446  0091                     	;# 
   447  0092                     	;# 
   448  0093                     	;# 
   449  0093                     	;# 
   450  0093                     	;# 
   451  0094                     	;# 
   452  0095                     	;# 
   453  0096                     	;# 
   454  0097                     	;# 
   455  0098                     	;# 
   456  0099                     	;# 
   457  009A                     	;# 
   458  009B                     	;# 
   459  009C                     	;# 
   460  009D                     	;# 
   461  009E                     	;# 
   462  009F                     	;# 
   463  0105                     	;# 
   464  0107                     	;# 
   465  0108                     	;# 
   466  0109                     	;# 
   467  010C                     	;# 
   468  010C                     	;# 
   469  010D                     	;# 
   470  010E                     	;# 
   471  010F                     	;# 
   472  0185                     	;# 
   473  0187                     	;# 
   474  0188                     	;# 
   475  0189                     	;# 
   476  018C                     	;# 
   477  018D                     	;# 
   478  0000                     	;# 
   479  0001                     	;# 
   480  0002                     	;# 
   481  0003                     	;# 
   482  0004                     	;# 
   483  0005                     	;# 
   484  0006                     	;# 
   485  0007                     	;# 
   486  0008                     	;# 
   487  0009                     	;# 
   488  000A                     	;# 
   489  000B                     	;# 
   490  000C                     	;# 
   491  000D                     	;# 
   492  000E                     	;# 
   493  000E                     	;# 
   494  000F                     	;# 
   495  0010                     	;# 
   496  0011                     	;# 
   497  0012                     	;# 
   498  0013                     	;# 
   499  0014                     	;# 
   500  0015                     	;# 
   501  0015                     	;# 
   502  0016                     	;# 
   503  0017                     	;# 
   504  0018                     	;# 
   505  0019                     	;# 
   506  001A                     	;# 
   507  001B                     	;# 
   508  001B                     	;# 
   509  001C                     	;# 
   510  001D                     	;# 
   511  001E                     	;# 
   512  001F                     	;# 
   513  0081                     	;# 
   514  0085                     	;# 
   515  0086                     	;# 
   516  0087                     	;# 
   517  0088                     	;# 
   518  0089                     	;# 
   519  008C                     	;# 
   520  008D                     	;# 
   521  008E                     	;# 
   522  008F                     	;# 
   523  0090                     	;# 
   524  0091                     	;# 
   525  0092                     	;# 
   526  0093                     	;# 
   527  0093                     	;# 
   528  0093                     	;# 
   529  0094                     	;# 
   530  0095                     	;# 
   531  0096                     	;# 
   532  0097                     	;# 
   533  0098                     	;# 
   534  0099                     	;# 
   535  009A                     	;# 
   536  009B                     	;# 
   537  009C                     	;# 
   538  009D                     	;# 
   539  009E                     	;# 
   540  009F                     	;# 
   541  0105                     	;# 
   542  0107                     	;# 
   543  0108                     	;# 
   544  0109                     	;# 
   545  010C                     	;# 
   546  010C                     	;# 
   547  010D                     	;# 
   548  010E                     	;# 
   549  010F                     	;# 
   550  0185                     	;# 
   551  0187                     	;# 
   552  0188                     	;# 
   553  0189                     	;# 
   554  018C                     	;# 
   555  018D                     	;# 
   556  0000                     	;# 
   557  0001                     	;# 
   558  0002                     	;# 
   559  0003                     	;# 
   560  0004                     	;# 
   561  0005                     	;# 
   562  0006                     	;# 
   563  0007                     	;# 
   564  0008                     	;# 
   565  0009                     	;# 
   566  000A                     	;# 
   567  000B                     	;# 
   568  000C                     	;# 
   569  000D                     	;# 
   570  000E                     	;# 
   571  000E                     	;# 
   572  000F                     	;# 
   573  0010                     	;# 
   574  0011                     	;# 
   575  0012                     	;# 
   576  0013                     	;# 
   577  0014                     	;# 
   578  0015                     	;# 
   579  0015                     	;# 
   580  0016                     	;# 
   581  0017                     	;# 
   582  0018                     	;# 
   583  0019                     	;# 
   584  001A                     	;# 
   585  001B                     	;# 
   586  001B                     	;# 
   587  001C                     	;# 
   588  001D                     	;# 
   589  001E                     	;# 
   590  001F                     	;# 
   591  0081                     	;# 
   592  0085                     	;# 
   593  0086                     	;# 
   594  0087                     	;# 
   595  0088                     	;# 
   596  0089                     	;# 
   597  008C                     	;# 
   598  008D                     	;# 
   599  008E                     	;# 
   600  008F                     	;# 
   601  0090                     	;# 
   602  0091                     	;# 
   603  0092                     	;# 
   604  0093                     	;# 
   605  0093                     	;# 
   606  0093                     	;# 
   607  0094                     	;# 
   608  0095                     	;# 
   609  0096                     	;# 
   610  0097                     	;# 
   611  0098                     	;# 
   612  0099                     	;# 
   613  009A                     	;# 
   614  009B                     	;# 
   615  009C                     	;# 
   616  009D                     	;# 
   617  009E                     	;# 
   618  009F                     	;# 
   619  0105                     	;# 
   620  0107                     	;# 
   621  0108                     	;# 
   622  0109                     	;# 
   623  010C                     	;# 
   624  010C                     	;# 
   625  010D                     	;# 
   626  010E                     	;# 
   627  010F                     	;# 
   628  0185                     	;# 
   629  0187                     	;# 
   630  0188                     	;# 
   631  0189                     	;# 
   632  018C                     	;# 
   633  018D                     	;# 
   634  0000                     	;# 
   635  0001                     	;# 
   636  0002                     	;# 
   637  0003                     	;# 
   638  0004                     	;# 
   639  0005                     	;# 
   640  0006                     	;# 
   641  0007                     	;# 
   642  0008                     	;# 
   643  0009                     	;# 
   644  000A                     	;# 
   645  000B                     	;# 
   646  000C                     	;# 
   647  000D                     	;# 
   648  000E                     	;# 
   649  000E                     	;# 
   650  000F                     	;# 
   651  0010                     	;# 
   652  0011                     	;# 
   653  0012                     	;# 
   654  0013                     	;# 
   655  0014                     	;# 
   656  0015                     	;# 
   657  0015                     	;# 
   658  0016                     	;# 
   659  0017                     	;# 
   660  0018                     	;# 
   661  0019                     	;# 
   662  001A                     	;# 
   663  001B                     	;# 
   664  001B                     	;# 
   665  001C                     	;# 
   666  001D                     	;# 
   667  001E                     	;# 
   668  001F                     	;# 
   669  0081                     	;# 
   670  0085                     	;# 
   671  0086                     	;# 
   672  0087                     	;# 
   673  0088                     	;# 
   674  0089                     	;# 
   675  008C                     	;# 
   676  008D                     	;# 
   677  008E                     	;# 
   678  008F                     	;# 
   679  0090                     	;# 
   680  0091                     	;# 
   681  0092                     	;# 
   682  0093                     	;# 
   683  0093                     	;# 
   684  0093                     	;# 
   685  0094                     	;# 
   686  0095                     	;# 
   687  0096                     	;# 
   688  0097                     	;# 
   689  0098                     	;# 
   690  0099                     	;# 
   691  009A                     	;# 
   692  009B                     	;# 
   693  009C                     	;# 
   694  009D                     	;# 
   695  009E                     	;# 
   696  009F                     	;# 
   697  0105                     	;# 
   698  0107                     	;# 
   699  0108                     	;# 
   700  0109                     	;# 
   701  010C                     	;# 
   702  010C                     	;# 
   703  010D                     	;# 
   704  010E                     	;# 
   705  010F                     	;# 
   706  0185                     	;# 
   707  0187                     	;# 
   708  0188                     	;# 
   709  0189                     	;# 
   710  018C                     	;# 
   711  018D                     	;# 
   712  0000                     	;# 
   713  0001                     	;# 
   714  0002                     	;# 
   715  0003                     	;# 
   716  0004                     	;# 
   717  0005                     	;# 
   718  0006                     	;# 
   719  0007                     	;# 
   720  0008                     	;# 
   721  0009                     	;# 
   722  000A                     	;# 
   723  000B                     	;# 
   724  000C                     	;# 
   725  000D                     	;# 
   726  000E                     	;# 
   727  000E                     	;# 
   728  000F                     	;# 
   729  0010                     	;# 
   730  0011                     	;# 
   731  0012                     	;# 
   732  0013                     	;# 
   733  0014                     	;# 
   734  0015                     	;# 
   735  0015                     	;# 
   736  0016                     	;# 
   737  0017                     	;# 
   738  0018                     	;# 
   739  0019                     	;# 
   740  001A                     	;# 
   741  001B                     	;# 
   742  001B                     	;# 
   743  001C                     	;# 
   744  001D                     	;# 
   745  001E                     	;# 
   746  001F                     	;# 
   747  0081                     	;# 
   748  0085                     	;# 
   749  0086                     	;# 
   750  0087                     	;# 
   751  0088                     	;# 
   752  0089                     	;# 
   753  008C                     	;# 
   754  008D                     	;# 
   755  008E                     	;# 
   756  008F                     	;# 
   757  0090                     	;# 
   758  0091                     	;# 
   759  0092                     	;# 
   760  0093                     	;# 
   761  0093                     	;# 
   762  0093                     	;# 
   763  0094                     	;# 
   764  0095                     	;# 
   765  0096                     	;# 
   766  0097                     	;# 
   767  0098                     	;# 
   768  0099                     	;# 
   769  009A                     	;# 
   770  009B                     	;# 
   771  009C                     	;# 
   772  009D                     	;# 
   773  009E                     	;# 
   774  009F                     	;# 
   775  0105                     	;# 
   776  0107                     	;# 
   777  0108                     	;# 
   778  0109                     	;# 
   779  010C                     	;# 
   780  010C                     	;# 
   781  010D                     	;# 
   782  010E                     	;# 
   783  010F                     	;# 
   784  0185                     	;# 
   785  0187                     	;# 
   786  0188                     	;# 
   787  0189                     	;# 
   788  018C                     	;# 
   789  018D                     	;# 
   790                           
   791                           	psect	idataBANK1
   792  0884                     __pidataBANK1:	
   793                           
   794                           ;initializer for main@F2005
   795  0884  3445               	retlw	69
   796  0885  3441               	retlw	65
   797  0886  3400               	retlw	0
   798                           
   799                           ;initializer for _FMRX_Nref
   800  0887  3400               	retlw	0
   801  0888  340A               	retlw	10
   802                           
   803                           ;initializer for _CWTX_Nref
   804  0889  34A0               	retlw	160
   805  088A  3400               	retlw	0
   806                           
   807                           ;initializer for _FMTX_Nref
   808  088B  3400               	retlw	0
   809  088C  340A               	retlw	10
   810                           
   811                           ;initializer for _CWTX_Nprg
   812  088D  3400               	retlw	0
   813  088E  3400               	retlw	0
   814  088F  3401               	retlw	1
   815  0890  3400               	retlw	0
   816  0891  3407               	retlw	7
   817  0892  3400               	retlw	0
   818  0893  3404               	retlw	4
   819  0894  3400               	retlw	0
   820  0895  3407               	retlw	7
   821  0896  3400               	retlw	0
   822                           
   823                           ;initializer for _FMTX_Nprg
   824  0897  3408               	retlw	8
   825  0898  3400               	retlw	0
   826  0899  3407               	retlw	7
   827  089A  3400               	retlw	0
   828  089B  3403               	retlw	3
   829  089C  3400               	retlw	0
   830  089D  3400               	retlw	0
   831  089E  3400               	retlw	0
   832  089F  3400               	retlw	0
   833  08A0  3400               	retlw	0
   834                           
   835                           	psect	idataBANK2
   836  0005                     __pidataBANK2:	
   837                           
   838                           ;initializer for _eDataField
   839  0005  3448               	retlw	72
   840  0006  3465               	retlw	101
   841  0007  346C               	retlw	108
   842  0008  346C               	retlw	108
   843  0009  346F               	retlw	111
   844  000A  3421               	retlw	33
   845  000B  3420               	retlw	32
   846  000C  3449               	retlw	73
   847  000D  3427               	retlw	39
   848  000E  346D               	retlw	109
   849  000F  3420               	retlw	32
   850  0010  344F               	retlw	79
   851  0011  3472               	retlw	114
   852  0012  3469               	retlw	105
   853  0013  3467               	retlw	103
   854  0014  3461               	retlw	97
   855  0015  346D               	retlw	109
   856  0016  3469               	retlw	105
   857  0017  3453               	retlw	83
   858  0018  3461               	retlw	97
   859  0019  3474               	retlw	116
   860  001A  3431               	retlw	49
   861  001B  3421               	retlw	33
   862  001C  3421               	retlw	33
   863  001D  3400               	retlw	0
   864                           
   865                           	psect	idataBANK3
   866  08C4                     __pidataBANK3:	
   867                           
   868                           ;initializer for main@F2013
   869  08C4  3402               	retlw	2
   870  08C5  3400               	retlw	0
   871  08C6  3404               	retlw	4
   872  08C7  3400               	retlw	0
   873  08C8  3408               	retlw	8
   874  08C9  3400               	retlw	0
   875  08CA  3408               	retlw	8
   876  08CB  3400               	retlw	0
   877  08CC  3407               	retlw	7
   878  08CD  3400               	retlw	0
   879                           
   880                           ;initializer for main@F2011
   881  08CE  3400               	retlw	0
   882  08CF  3400               	retlw	0
   883  08D0  3401               	retlw	1
   884  08D1  3400               	retlw	0
   885  08D2  3407               	retlw	7
   886  08D3  3400               	retlw	0
   887  08D4  3404               	retlw	4
   888  08D5  3400               	retlw	0
   889  08D6  3407               	retlw	7
   890  08D7  3400               	retlw	0
   891                           
   892                           ;initializer for main@F2009
   893  08D8  3408               	retlw	8
   894  08D9  3400               	retlw	0
   895  08DA  3407               	retlw	7
   896  08DB  3400               	retlw	0
   897  08DC  3403               	retlw	3
   898  08DD  3400               	retlw	0
   899  08DE  3400               	retlw	0
   900  08DF  3400               	retlw	0
   901  08E0  3400               	retlw	0
   902  08E1  3400               	retlw	0
   903                           
   904                           ;initializer for _FMRX_Nprg
   905  08E2  3402               	retlw	2
   906  08E3  3400               	retlw	0
   907  08E4  3404               	retlw	4
   908  08E5  3400               	retlw	0
   909  08E6  3408               	retlw	8
   910  08E7  3400               	retlw	0
   911  08E8  3408               	retlw	8
   912  08E9  3400               	retlw	0
   913  08EA  3407               	retlw	7
   914  08EB  3400               	retlw	0
   915  0008                     _PORTDbits	set	8
   916  0007                     _PORTCbits	set	7
   917  0009                     _PORTEbits	set	9
   918  0005                     _PORTAbits	set	5
   919  0013                     _SSPBUF	set	19
   920  0014                     _SSPCON	set	20
   921  0003                     _STATUS	set	3
   922  0009                     _PORTE	set	9
   923  0008                     _PORTD	set	8
   924  0007                     _PORTC	set	7
   925  0006                     _PORTB	set	6
   926  0005                     _PORTA	set	5
   927  0019                     _TXREG	set	25
   928  001A                     _RCREG	set	26
   929  0029                     _RA1	set	41
   930  0034                     _RB4	set	52
   931  0035                     _RB5	set	53
   932  0032                     _RB2	set	50
   933  0064                     _TXIF	set	100
   934  00C6                     _RX9	set	198
   935  0065                     _RCIF	set	101
   936  00C5                     _SREN	set	197
   937  00C4                     _CREN	set	196
   938  00C7                     _SPEN	set	199
   939  0094                     _SSPSTAT	set	148
   940  0093                     _SSPADD	set	147
   941  0091                     _SSPCON2	set	145
   942  0089                     _TRISE	set	137
   943  0088                     _TRISD	set	136
   944  0087                     _TRISC	set	135
   945  0086                     _TRISB	set	134
   946  0085                     _TRISA	set	133
   947  0099                     _SPBRG	set	153
   948  048C                     _ACKEN	set	1164
   949  048D                     _ACKDT	set	1165
   950  048B                     _RCEN	set	1163
   951  048A                     _PEN	set	1162
   952  0489                     _RSEN	set	1161
   953  0488                     _SEN	set	1160
   954  04C5                     _TXEN	set	1221
   955  04C6                     _TX9	set	1222
   956  0465                     _RCIE	set	1125
   957  0464                     _TXIE	set	1124
   958  04C4                     _SYNC	set	1220
   959  04C2                     _BRGH	set	1218
   960  0189                     _ANSELH	set	393
   961  0188                     _ANSEL	set	392
   962                           
   963                           	psect	strings
   964  0800                     __pstrings:	
   965  0800                     stringtab:	
   966  0800                     __stringtab:	
   967                           
   968                           ;	String table - string pointers are 1 byte each
   969  0800  1BFF               	btfsc	btemp+1,7
   970  0801  280A               	ljmp	stringcode
   971  0802  1383               	bcf	3,7
   972  0803  187F               	btfsc	btemp+1,0
   973  0804  1783               	bsf	3,7
   974  0805  0800               	movf	0,w
   975  0806  0A84               	incf	4,f
   976  0807  1903               	skipnz
   977  0808  0AFF               	incf	btemp+1,f
   978  0809  0008               	return
   979  080A                     stringcode:	
   980  080A                     stringdir:	
   981  080A  3008               	movlw	high stringdir
   982  080B  008A               	movwf	10
   983  080C  0804               	movf	4,w
   984  080D  0A84               	incf	4,f
   985  080E  0782               	addwf	2,f
   986  080F                     __stringbase:	
   987  080F  3400               	retlw	0
   988  0810                     __end_of__stringtab:	
   989  0810                     STR_16:	
   990  0810  3428               	retlw	40	;'('
   991  0811  346E               	retlw	110	;'n'
   992  0812  3475               	retlw	117	;'u'
   993  0813  346C               	retlw	108	;'l'
   994  0814  346C               	retlw	108	;'l'
   995  0815  3429               	retlw	41	;')'
   996  0816  3400               	retlw	0
   997  0817                     STR_7:	
   998  0817  344A               	retlw	74	;'J'
   999  0818  3451               	retlw	81	;'Q'
  1000  0819  3431               	retlw	49	;'1'
  1001  081A  345A               	retlw	90	;'Z'
  1002  081B  3448               	retlw	72	;'H'
  1003  081C  3458               	retlw	88	;'X'
  1004  081D  3400               	retlw	0
  1005  081E                     STR_1:	
  1006  081E  344A               	retlw	74	;'J'
  1007  081F  3451               	retlw	81	;'Q'
  1008  0820  3431               	retlw	49	;'1'
  1009  0821  3459               	retlw	89	;'Y'
  1010  0822  3443               	retlw	67	;'C'
  1011  0823  345A               	retlw	90	;'Z'
  1012  0824  3400               	retlw	0
  1013  0825                     STR_15:	
  1014  0825  3425               	retlw	37	;'%'
  1015  0826  3473               	retlw	115	;'s'
  1016  0827  3425               	retlw	37	;'%'
  1017  0828  3463               	retlw	99	;'c'
  1018  0829  3400               	retlw	0
  1019  0817                     
  1020                           ; #config settings
  1021  0000                     
  1022                           	psect	cinit
  1023  07B3                     start_initialization:	
  1024  07B3                     __initialization:	
  1025                           
  1026                           ; Initialize objects allocated to BANK3
  1027  07B3  1783               	bsf	3,7	;select IRP bank2
  1028  07B4  30EA               	movlw	low (__pdataBANK3+40)
  1029  07B5  00FD               	movwf	btemp+-1
  1030  07B6  3008               	movlw	high __pidataBANK3
  1031  07B7  00FE               	movwf	btemp
  1032  07B8  30C4               	movlw	low __pidataBANK3
  1033  07B9  00FF               	movwf	btemp+1
  1034  07BA  30C2               	movlw	low __pdataBANK3
  1035  07BB  0084               	movwf	4
  1036  07BC  160A  118A  27E1  120A  118A  	fcall	init_ram0
  1037                           
  1038                           ; Initialize objects allocated to BANK2
  1039  07C1  3069               	movlw	low (__pdataBANK2+25)
  1040  07C2  00FD               	movwf	btemp+-1
  1041  07C3  3000               	movlw	high __pidataBANK2
  1042  07C4  00FE               	movwf	btemp
  1043  07C5  3005               	movlw	low __pidataBANK2
  1044  07C6  00FF               	movwf	btemp+1
  1045  07C7  3050               	movlw	low __pdataBANK2
  1046  07C8  0084               	movwf	4
  1047  07C9  160A  118A  27E1  120A  118A  	fcall	init_ram0
  1048                           
  1049                           ; Initialize objects allocated to BANK1
  1050  07CE  1383               	bcf	3,7	;select IRP bank0
  1051  07CF  30E1               	movlw	low (__pdataBANK1+29)
  1052  07D0  00FD               	movwf	btemp+-1
  1053  07D1  3008               	movlw	high __pidataBANK1
  1054  07D2  00FE               	movwf	btemp
  1055  07D3  3084               	movlw	low __pidataBANK1
  1056  07D4  00FF               	movwf	btemp+1
  1057  07D5  30C4               	movlw	low __pdataBANK1
  1058  07D6  0084               	movwf	4
  1059  07D7  160A  118A  27E1  120A  118A  	fcall	init_ram0
  1060                           
  1061                           ; Clear objects allocated to BANK3
  1062  07DC  1783               	bsf	3,7	;select IRP bank2
  1063  07DD  3090               	movlw	low __pbssBANK3
  1064  07DE  0084               	movwf	4
  1065  07DF  30C2               	movlw	low (__pbssBANK3+50)
  1066  07E0  160A  118A  27D5  120A  118A  	fcall	clear_ram0
  1067                           
  1068                           ; Clear objects allocated to BANK2
  1069  07E5  3010               	movlw	low __pbssBANK2
  1070  07E6  0084               	movwf	4
  1071  07E7  3050               	movlw	low (__pbssBANK2+64)
  1072  07E8  160A  118A  27D5  120A  118A  	fcall	clear_ram0
  1073                           
  1074                           ; Clear objects allocated to BANK1
  1075  07ED  1383               	bcf	3,7	;select IRP bank0
  1076  07EE  30E1               	movlw	low __pbssBANK1
  1077  07EF  0084               	movwf	4
  1078  07F0  30EE               	movlw	low (__pbssBANK1+13)
  1079  07F1  160A  118A  27D5  120A  118A  	fcall	clear_ram0
  1080                           
  1081                           ; Clear objects allocated to BANK0
  1082  07F6  3066               	movlw	low __pbssBANK0
  1083  07F7  0084               	movwf	4
  1084  07F8  3070               	movlw	low (__pbssBANK0+10)
  1085  07F9  160A  118A  27D5   	fcall	clear_ram0
  1086  07FC                     end_of_initialization:	
  1087                           ;End of C runtime variable initialization code
  1088                           
  1089  07FC                     __end_of__initialization:	
  1090  07FC  0183               	clrf	3
  1091  07FD  120A  158A  2E71   	ljmp	_main	;jump to C main() function
  1092                           
  1093                           	psect	bssBANK0
  1094  0066                     __pbssBANK0:	
  1095  0066                     _eflag:	
  1096  0066                     	ds	2
  1097  0068                     _dPacketnum:	
  1098  0068                     	ds	2
  1099  006A                     _rcv_state:	
  1100  006A                     	ds	2
  1101  006C                     _efcshi:	
  1102  006C                     	ds	1
  1103  006D                     _efcslo:	
  1104  006D                     	ds	1
  1105  006E                     _dfcslo:	
  1106  006E                     	ds	1
  1107  006F                     _dfcshi:	
  1108  006F                     	ds	1
  1109                           
  1110                           	psect	bssBANK1
  1111  00E1                     __pbssBANK1:	
  1112  00E1                     _ePacket:	
  1113  00E1                     	ds	5
  1114  00E6                     _ebitstatus:	
  1115  00E6                     	ds	2
  1116  00E8                     _estuff:	
  1117  00E8                     	ds	2
  1118  00EA                     _efcsflag:	
  1119  00EA                     	ds	2
  1120  00EC                     getbit@oldbit:	
  1121  00EC                     	ds	2
  1122                           
  1123                           	psect	dataBANK1
  1124  00C4                     __pdataBANK1:	
  1125  00C4                     main@F2005:	
  1126  00C4                     	ds	3
  1127  00C7                     _FMRX_Nref:	
  1128  00C7                     	ds	2
  1129  00C9                     _CWTX_Nref:	
  1130  00C9                     	ds	2
  1131  00CB                     _FMTX_Nref:	
  1132  00CB                     	ds	2
  1133  00CD                     _CWTX_Nprg:	
  1134  00CD                     	ds	10
  1135  00D7                     _FMTX_Nprg:	
  1136  00D7                     	ds	10
  1137                           
  1138                           	psect	bssBANK3
  1139  0190                     __pbssBANK3:	
  1140  0190                     _dPacket:	
  1141  0190                     	ds	50
  1142                           
  1143                           	psect	dataBANK3
  1144  01C2                     __pdataBANK3:	
  1145  01C2                     main@F2013:	
  1146  01C2                     	ds	10
  1147  01CC                     main@F2011:	
  1148  01CC                     	ds	10
  1149  01D6                     main@F2009:	
  1150  01D6                     	ds	10
  1151  01E0                     _FMRX_Nprg:	
  1152  01E0                     	ds	10
  1153                           
  1154                           	psect	bssBANK2
  1155  0110                     __pbssBANK2:	
  1156  0110                     _EEPROMData:	
  1157  0110                     	ds	32
  1158  0130                     _dData:	
  1159  0130                     	ds	32
  1160                           
  1161                           	psect	dataBANK2
  1162  0150                     __pdataBANK2:	
  1163  0150                     _eDataField:	
  1164  0150                     	ds	25
  1165                           
  1166                           	psect	inittext
  1167  17DD                     init_fetch0:	
  1168                           ;	Called with low address in FSR and high address in W
  1169                           
  1170  17DD  087E               	movf	126,w
  1171  17DE  008A               	movwf	10
  1172  17DF  087F               	movf	127,w
  1173  17E0  0082               	movwf	2
  1174  17E1                     init_ram0:	
  1175                           ;Called with:
  1176                           ;	high address of idata address in btemp 
  1177                           ;	low address of idata address in btemp+1 
  1178                           ;	low address of data in FSR
  1179                           ;	high address + 1 of data in btemp-1
  1180                           
  1181  17E1  27DD  160A  118A   	fcall	init_fetch0
  1182  17E4  0080               	movwf	0
  1183  17E5  0A84               	incf	4,f
  1184  17E6  0804               	movf	4,w
  1185  17E7  067D               	xorwf	125,w
  1186  17E8  1903               	btfsc	3,2
  1187  17E9  3400               	retlw	0
  1188  17EA  0AFF               	incf	127,f
  1189  17EB  1903               	btfsc	3,2
  1190  17EC  0AFE               	incf	126,f
  1191  17ED  2FE1               	goto	init_ram0
  1192                           
  1193                           	psect	clrtext
  1194  17D5                     clear_ram0:	
  1195                           ;	Called with FSR containing the base address, and
  1196                           ;	W with the last address+1
  1197                           
  1198  17D5  0064               	clrwdt	;clear the watchdog before getting into this loop
  1199  17D6                     clrloop0:	
  1200  17D6  0180               	clrf	0	;clear RAM location pointed to by FSR
  1201  17D7  0A84               	incf	4,f	;increment pointer
  1202  17D8  0604               	xorwf	4,w	;XOR with final address
  1203  17D9  1903               	btfsc	3,2	;have we reached the end yet?
  1204  17DA  3400               	retlw	0	;all done for this memory range, return
  1205  17DB  0604               	xorwf	4,w	;XOR again to restore value
  1206  17DC  2FD6               	goto	clrloop0	;do the next byte
  1207                           
  1208                           	psect	cstackBANK1
  1209  00A0                     __pcstackBANK1:	
  1210  00A0                     main@EPS_kill:	
  1211  00A0                     main@EPS_kill_1:	
  1212                           ; 0 bytes @ 0x0
  1213                           
  1214                           
  1215                           ; 3 bytes @ 0x0
  1216  00A0                     	ds	3
  1217  00A3                     main@FMTX_Nprg:	
  1218                           
  1219                           ; 10 bytes @ 0x3
  1220  00A3                     	ds	10
  1221  00AD                     main@CWTX_Nprg:	
  1222                           
  1223                           ; 10 bytes @ 0xD
  1224  00AD                     	ds	10
  1225  00B7                     main@FMRX_Nprg:	
  1226                           
  1227                           ; 10 bytes @ 0x17
  1228  00B7                     	ds	10
  1229  00C1                     main@NM_wad_header:	
  1230                           
  1231                           ; 1 bytes @ 0x21
  1232  00C1                     	ds	1
  1233  00C2                     main@EPS_kill_2:	
  1234                           
  1235                           ; 1 bytes @ 0x22
  1236  00C2                     	ds	1
  1237  00C3                     main@dData:	
  1238                           
  1239                           ; 1 bytes @ 0x23
  1240  00C3                     	ds	1
  1241                           
  1242                           	psect	cstackCOMMON
  1243  0070                     __pcstackCOMMON:	
  1244  0070                     ?_ReceivePacket_data:	
  1245  0070                     ?_Reset_EPS:	
  1246                           ; 1 bytes @ 0x0
  1247                           
  1248  0070                     ??_Reset_EPS:	
  1249                           ; 1 bytes @ 0x0
  1250                           
  1251  0070                     ?__NOP:	
  1252                           ; 1 bytes @ 0x0
  1253                           
  1254  0070                     ??__NOP:	
  1255                           ; 1 bytes @ 0x0
  1256                           
  1257  0070                     ?_Init_SERIAL:	
  1258                           ; 1 bytes @ 0x0
  1259                           
  1260  0070                     ??_Init_SERIAL:	
  1261                           ; 1 bytes @ 0x0
  1262                           
  1263  0070                     ?_putch:	
  1264                           ; 1 bytes @ 0x0
  1265                           
  1266  0070                     ??_putch:	
  1267                           ; 1 bytes @ 0x0
  1268                           
  1269  0070                     ?_Init_MPU:	
  1270                           ; 1 bytes @ 0x0
  1271                           
  1272  0070                     ??_Init_MPU:	
  1273                           ; 1 bytes @ 0x0
  1274                           
  1275  0070                     ?_waitFlag:	
  1276                           ; 1 bytes @ 0x0
  1277                           
  1278  0070                     ?_getdata:	
  1279                           ; 1 bytes @ 0x0
  1280                           
  1281  0070                     ?_main:	
  1282                           ; 1 bytes @ 0x0
  1283                           
  1284  0070                     ?_I2C_Master_Wait:	
  1285                           ; 1 bytes @ 0x0
  1286                           
  1287  0070                     ??_I2C_Master_Wait:	
  1288                           ; 1 bytes @ 0x0
  1289                           
  1290  0070                     ?_I2C_Master_Start:	
  1291                           ; 1 bytes @ 0x0
  1292                           
  1293  0070                     ??_I2C_Master_Start:	
  1294                           ; 1 bytes @ 0x0
  1295                           
  1296  0070                     ?_I2C_Master_Stop:	
  1297                           ; 1 bytes @ 0x0
  1298                           
  1299  0070                     ??_I2C_Master_Stop:	
  1300                           ; 1 bytes @ 0x0
  1301                           
  1302  0070                     ?_I2C_Master_Write:	
  1303                           ; 1 bytes @ 0x0
  1304                           
  1305  0070                     ?_sprintf:	
  1306                           ; 1 bytes @ 0x0
  1307                           
  1308  0070                     ?_strcmp:	
  1309                           ; 2 bytes @ 0x0
  1310                           
  1311  0070                     ?_getbit:	
  1312                           ; 2 bytes @ 0x0
  1313                           
  1314  0070                     ?_fcscheck:	
  1315                           ; 2 bytes @ 0x0
  1316                           
  1317  0070                     ?___awdiv:	
  1318                           ; 2 bytes @ 0x0
  1319                           
  1320  0070                     ?___lldiv:	
  1321                           ; 2 bytes @ 0x0
  1322                           
  1323  0070                     putch@byte:	
  1324                           ; 4 bytes @ 0x0
  1325                           
  1326  0070                     I2C_Master_Write@d:	
  1327                           ; 1 bytes @ 0x0
  1328                           
  1329  0070                     __NOP@i:	
  1330                           ; 2 bytes @ 0x0
  1331                           
  1332  0070                     sprintf@sp:	
  1333                           ; 2 bytes @ 0x0
  1334                           
  1335  0070                     ___awdiv@divisor:	
  1336                           ; 2 bytes @ 0x0
  1337                           
  1338  0070                     strcmp@s2:	
  1339                           ; 2 bytes @ 0x0
  1340                           
  1341  0070                     ___lldiv@divisor:	
  1342                           ; 2 bytes @ 0x0
  1343                           
  1344                           
  1345                           ; 4 bytes @ 0x0
  1346  0070                     	ds	1
  1347  0071                     ?_NM_waddress:	
  1348  0071                     NM_waddress@whigh_address:	
  1349                           ; 1 bytes @ 0x1
  1350                           
  1351                           
  1352                           ; 1 bytes @ 0x1
  1353  0071                     	ds	1
  1354  0072                     ?_EEPROM_Write:	
  1355  0072                     ??_strcmp:	
  1356                           ; 1 bytes @ 0x2
  1357                           
  1358  0072                     ??_getbit:	
  1359                           ; 1 bytes @ 0x2
  1360                           
  1361  0072                     ??_fcscheck:	
  1362                           ; 1 bytes @ 0x2
  1363                           
  1364  0072                     ??_I2C_Master_Write:	
  1365                           ; 1 bytes @ 0x2
  1366                           
  1367  0072                     ?_L_OUT:	
  1368                           ; 1 bytes @ 0x2
  1369                           
  1370  0072                     ?_H_OUT:	
  1371                           ; 1 bytes @ 0x2
  1372                           
  1373  0072                     ?_STBOUT:	
  1374                           ; 1 bytes @ 0x2
  1375                           
  1376  0072                     NM_waddress@wlow_address:	
  1377                           ; 1 bytes @ 0x2
  1378                           
  1379  0072                     EEPROM_Write@high_address:	
  1380                           ; 1 bytes @ 0x2
  1381                           
  1382  0072                     sprintf@f:	
  1383                           ; 1 bytes @ 0x2
  1384                           
  1385  0072                     L_OUT@fmcwtxrx:	
  1386                           ; 1 bytes @ 0x2
  1387                           
  1388  0072                     H_OUT@fmcwtxrx:	
  1389                           ; 2 bytes @ 0x2
  1390                           
  1391  0072                     STBOUT@fmcwtxrx:	
  1392                           ; 2 bytes @ 0x2
  1393                           
  1394  0072                     ___awdiv@dividend:	
  1395                           ; 2 bytes @ 0x2
  1396                           
  1397                           
  1398                           ; 2 bytes @ 0x2
  1399  0072                     	ds	1
  1400  0073                     ??_NM_waddress:	
  1401  0073                     NM_waddress@NM_wad_header:	
  1402                           ; 1 bytes @ 0x3
  1403                           
  1404  0073                     EEPROM_Write@low_address:	
  1405                           ; 1 bytes @ 0x3
  1406                           
  1407                           
  1408                           ; 1 bytes @ 0x3
  1409  0073                     	ds	1
  1410  0074                     ??_L_OUT:	
  1411  0074                     ??_H_OUT:	
  1412                           ; 1 bytes @ 0x4
  1413                           
  1414  0074                     ??_STBOUT:	
  1415                           ; 1 bytes @ 0x4
  1416                           
  1417  0074                     ?_OPINIT:	
  1418                           ; 1 bytes @ 0x4
  1419                           
  1420  0074                     ??___awdiv:	
  1421                           ; 1 bytes @ 0x4
  1422                           
  1423  0074                     fcscheck@bt:	
  1424                           ; 1 bytes @ 0x4
  1425                           
  1426  0074                     EEPROM_Write@data:	
  1427                           ; 1 bytes @ 0x4
  1428                           
  1429  0074                     strcmp@r:	
  1430                           ; 1 bytes @ 0x4
  1431                           
  1432  0074                     getbit@i:	
  1433                           ; 1 bytes @ 0x4
  1434                           
  1435  0074                     OPINIT@fmcwtxrx:	
  1436                           ; 2 bytes @ 0x4
  1437                           
  1438  0074                     ___lldiv@dividend:	
  1439                           ; 2 bytes @ 0x4
  1440                           
  1441                           
  1442                           ; 4 bytes @ 0x4
  1443  0074                     	ds	1
  1444  0075                     ??_EEPROM_Write:	
  1445  0075                     ___awdiv@counter:	
  1446                           ; 1 bytes @ 0x5
  1447                           
  1448  0075                     strcmp@s1:	
  1449                           ; 1 bytes @ 0x5
  1450                           
  1451  0075                     fcscheck@i:	
  1452                           ; 1 bytes @ 0x5
  1453                           
  1454                           
  1455                           ; 2 bytes @ 0x5
  1456  0075                     	ds	1
  1457  0076                     ??_sprintf:	
  1458  0076                     ??_waitFlag:	
  1459                           ; 1 bytes @ 0x6
  1460                           
  1461  0076                     ??_getdata:	
  1462                           ; 1 bytes @ 0x6
  1463                           
  1464  0076                     ??_OPINIT:	
  1465                           ; 1 bytes @ 0x6
  1466                           
  1467  0076                     ___awdiv@sign:	
  1468                           ; 1 bytes @ 0x6
  1469                           
  1470                           
  1471                           ; 1 bytes @ 0x6
  1472  0076                     	ds	1
  1473  0077                     sprintf@flag:	
  1474  0077                     fcscheck@i_134:	
  1475                           ; 1 bytes @ 0x7
  1476                           
  1477  0077                     ___awdiv@quotient:	
  1478                           ; 2 bytes @ 0x7
  1479                           
  1480                           
  1481                           ; 2 bytes @ 0x7
  1482  0077                     	ds	1
  1483  0078                     ??___lldiv:	
  1484  0078                     EEPROM_Write@EEPROM_address:	
  1485                           ; 1 bytes @ 0x8
  1486                           
  1487  0078                     sprintf@ap:	
  1488                           ; 1 bytes @ 0x8
  1489                           
  1490                           
  1491                           ; 1 bytes @ 0x8
  1492  0078                     	ds	1
  1493  0079                     ?_OUTFQ:	
  1494  0079                     ?_RFDOUT:	
  1495                           ; 1 bytes @ 0x9
  1496                           
  1497  0079                     fcscheck@byte:	
  1498                           ; 1 bytes @ 0x9
  1499                           
  1500  0079                     EEPROM_Write@Address:	
  1501                           ; 1 bytes @ 0x9
  1502                           
  1503  0079                     OUTFQ@fmcwtxrx:	
  1504                           ; 1 bytes @ 0x9
  1505                           
  1506  0079                     RFDOUT@fmcwtxrx:	
  1507                           ; 2 bytes @ 0x9
  1508                           
  1509  0079                     sprintf@cp:	
  1510                           ; 2 bytes @ 0x9
  1511                           
  1512  0079                     ___lldiv@quotient:	
  1513                           ; 2 bytes @ 0x9
  1514                           
  1515                           
  1516                           ; 4 bytes @ 0x9
  1517  0079                     	ds	1
  1518  007A                     ??_ReceivePacket_data:	
  1519                           
  1520                           ; 1 bytes @ 0xA
  1521  007A                     	ds	1
  1522  007B                     sprintf@c:	
  1523  007B                     OUTFQ@Nprg:	
  1524                           ; 1 bytes @ 0xB
  1525                           
  1526  007B                     RFDOUT@Nref:	
  1527                           ; 2 bytes @ 0xB
  1528                           
  1529                           
  1530                           ; 2 bytes @ 0xB
  1531  007B                     	ds	2
  1532  007D                     ??_FMTX:	
  1533  007D                     ??_CWTX:	
  1534                           ; 1 bytes @ 0xD
  1535                           
  1536  007D                     ??_FMRX:	
  1537                           ; 1 bytes @ 0xD
  1538                           
  1539  007D                     ___lldiv@counter:	
  1540                           ; 1 bytes @ 0xD
  1541                           
  1542                           
  1543                           ; 1 bytes @ 0xD
  1544  007D                     	ds	1
  1545                           
  1546                           	psect	cstackBANK0
  1547  0020                     __pcstackBANK0:	
  1548  0020                     ?_Init_I2C_M:	
  1549  0020                     ??_OUTFQ:	
  1550                           ; 1 bytes @ 0x0
  1551                           
  1552  0020                     ??_RFDOUT:	
  1553                           ; 1 bytes @ 0x0
  1554                           
  1555  0020                     waitFlag@i:	
  1556                           ; 1 bytes @ 0x0
  1557                           
  1558  0020                     getdata@bufstore_counter:	
  1559                           ; 2 bytes @ 0x0
  1560                           
  1561  0020                     Init_I2C_M@c:	
  1562                           ; 2 bytes @ 0x0
  1563                           
  1564                           
  1565                           ; 4 bytes @ 0x0
  1566  0020                     	ds	2
  1567  0022                     waitFlag@j:	
  1568  0022                     getdata@dstuff:	
  1569                           ; 2 bytes @ 0x2
  1570                           
  1571                           
  1572                           ; 2 bytes @ 0x2
  1573  0022                     	ds	1
  1574  0023                     RFDOUT@Nref_b:	
  1575                           
  1576                           ; 24 bytes @ 0x3
  1577  0023                     	ds	1
  1578  0024                     ??_Init_I2C_M:	
  1579  0024                     waitFlag@j_103:	
  1580                           ; 1 bytes @ 0x4
  1581                           
  1582  0024                     getdata@dbitstatus:	
  1583                           ; 2 bytes @ 0x4
  1584                           
  1585                           
  1586                           ; 2 bytes @ 0x4
  1587  0024                     	ds	2
  1588  0026                     getdata@buf:	
  1589  0026                     waitFlag@j_105:	
  1590                           ; 1 bytes @ 0x6
  1591                           
  1592                           
  1593                           ; 2 bytes @ 0x6
  1594  0026                     	ds	2
  1595  0028                     waitFlag@j_107:	
  1596                           
  1597                           ; 2 bytes @ 0x8
  1598  0028                     	ds	2
  1599  002A                     waitFlag@j_109:	
  1600                           
  1601                           ; 2 bytes @ 0xA
  1602  002A                     	ds	2
  1603  002C                     waitFlag@j_111:	
  1604                           
  1605                           ; 2 bytes @ 0xC
  1606  002C                     	ds	2
  1607  002E                     waitFlag@j_112:	
  1608                           
  1609                           ; 2 bytes @ 0xE
  1610  002E                     	ds	2
  1611  0030                     waitFlag@j_114:	
  1612  0030                     OUTFQ@Nprg_b:	
  1613                           ; 2 bytes @ 0x10
  1614                           
  1615                           
  1616                           ; 34 bytes @ 0x10
  1617  0030                     	ds	2
  1618  0032                     waitFlag@j_116:	
  1619                           
  1620                           ; 2 bytes @ 0x12
  1621  0032                     	ds	2
  1622  0034                     waitFlag@j_118:	
  1623                           
  1624                           ; 2 bytes @ 0x14
  1625  0034                     	ds	2
  1626  0036                     waitFlag@j_120:	
  1627                           
  1628                           ; 2 bytes @ 0x16
  1629  0036                     	ds	2
  1630  0038                     waitFlag@j_122:	
  1631                           
  1632                           ; 2 bytes @ 0x18
  1633  0038                     	ds	2
  1634  003A                     waitFlag@flag_judge:	
  1635                           
  1636                           ; 2 bytes @ 0x1A
  1637  003A                     	ds	1
  1638  003B                     RFDOUT@i_484:	
  1639                           
  1640                           ; 2 bytes @ 0x1B
  1641  003B                     	ds	1
  1642  003C                     waitFlag@buf:	
  1643                           
  1644                           ; 1 bytes @ 0x1C
  1645  003C                     	ds	1
  1646  003D                     ReceivePacket_data@fcschecker:	
  1647  003D                     RFDOUT@i:	
  1648                           ; 2 bytes @ 0x1D
  1649                           
  1650                           
  1651                           ; 2 bytes @ 0x1D
  1652  003D                     	ds	2
  1653  003F                     ReceivePacket_data@i:	
  1654  003F                     RFDOUT@i_485:	
  1655                           ; 2 bytes @ 0x1F
  1656                           
  1657                           
  1658                           ; 2 bytes @ 0x1F
  1659  003F                     	ds	19
  1660  0052                     OUTFQ@i_473:	
  1661                           
  1662                           ; 2 bytes @ 0x32
  1663  0052                     	ds	2
  1664  0054                     OUTFQ@count:	
  1665                           
  1666                           ; 2 bytes @ 0x34
  1667  0054                     	ds	2
  1668  0056                     OUTFQ@i:	
  1669                           
  1670                           ; 2 bytes @ 0x36
  1671  0056                     	ds	2
  1672  0058                     OUTFQ@i_475:	
  1673                           
  1674                           ; 2 bytes @ 0x38
  1675  0058                     	ds	2
  1676  005A                     OUTFQ@j:	
  1677                           
  1678                           ; 2 bytes @ 0x3A
  1679  005A                     	ds	2
  1680  005C                     ?_FMTX:	
  1681  005C                     ?_CWTX:	
  1682                           ; 1 bytes @ 0x3C
  1683                           
  1684  005C                     ?_FMRX:	
  1685                           ; 1 bytes @ 0x3C
  1686                           
  1687  005C                     FMTX@Nref:	
  1688                           ; 1 bytes @ 0x3C
  1689                           
  1690  005C                     CWTX@Nref:	
  1691                           ; 2 bytes @ 0x3C
  1692                           
  1693  005C                     FMRX@Nref:	
  1694                           ; 2 bytes @ 0x3C
  1695                           
  1696                           
  1697                           ; 2 bytes @ 0x3C
  1698  005C                     	ds	2
  1699  005E                     FMTX@Nprg:	
  1700  005E                     CWTX@Nprg:	
  1701                           ; 2 bytes @ 0x3E
  1702                           
  1703  005E                     FMRX@Nprg:	
  1704                           ; 2 bytes @ 0x3E
  1705                           
  1706                           
  1707                           ; 2 bytes @ 0x3E
  1708  005E                     	ds	2
  1709  0060                     FMTX@fmtx:	
  1710  0060                     CWTX@cwtx:	
  1711                           ; 2 bytes @ 0x40
  1712                           
  1713  0060                     FMRX@fmrx:	
  1714                           ; 2 bytes @ 0x40
  1715                           
  1716                           
  1717                           ; 2 bytes @ 0x40
  1718  0060                     	ds	2
  1719  0062                     ??_main:	
  1720                           
  1721                           ; 1 bytes @ 0x42
  1722  0062                     	ds	4
  1723                           
  1724                           	psect	maintext
  1725  0E71                     __pmaintext:	
  1726 ;;
  1727 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1728 ;;
  1729 ;; *************** function _main *****************
  1730 ;; Defined at:
  1731 ;;		line 39 in file "main.c"
  1732 ;; Parameters:    Size  Location     Type
  1733 ;;		None
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;  FMRX_Nprg      10   23[BANK1 ] int [5]
  1736 ;;  CWTX_Nprg      10   13[BANK1 ] int [5]
  1737 ;;  FMTX_Nprg      10    3[BANK1 ] int [5]
  1738 ;;  EPS_kill_1      3    0[BANK1 ] unsigned char [3]
  1739 ;;  dData           1   35[BANK1 ] PTR unsigned char 
  1740 ;;		 -> NULL(0), dData(32), 
  1741 ;;  EPS_kill_2      1   34[BANK1 ] unsigned char 
  1742 ;;  NM_wad_heade    1   33[BANK1 ] unsigned char 
  1743 ;;  EPS_kill        0    0[BANK1 ] unsigned char [0]
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  1    wreg      void 
  1746 ;; Registers used:
  1747 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1748 ;; Tracked objects:
  1749 ;;		On entry : B00/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1753 ;;      Params:         0       0       0       0       0
  1754 ;;      Locals:         0       0      36       0       0
  1755 ;;      Temps:          0       4       0       0       0
  1756 ;;      Totals:         0       4      36       0       0
  1757 ;;Total ram usage:       40 bytes
  1758 ;; Hardware stack levels required when called:    4
  1759 ;; This function calls:
  1760 ;;		_CWTX
  1761 ;;		_EEPROM_Write
  1762 ;;		_FMRX
  1763 ;;		_FMTX
  1764 ;;		_Init_I2C_M
  1765 ;;		_Init_MPU
  1766 ;;		_Init_SERIAL
  1767 ;;		_NM_waddress
  1768 ;;		_ReceivePacket_data
  1769 ;;		_Reset_EPS
  1770 ;;		_sprintf
  1771 ;;		_strcmp
  1772 ;; This function is called by:
  1773 ;;		Startup code after reset
  1774 ;; This function uses a non-reentrant model
  1775 ;;
  1776                           
  1777                           
  1778                           ;psect for function _main
  1779  0E71                     _main:	
  1780                           
  1781                           ;main.c: 44: _delay((unsigned long)((500)*(10000000/4000.0)));
  1782                           
  1783                           ;incstack = 0
  1784                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1785  0E71  3007               	movlw	7
  1786  0E72  1283               	bcf	3,5	;RP0=0, select bank0
  1787  0E73  1303               	bcf	3,6	;RP1=0, select bank0
  1788  0E74  00E4               	movwf	??_main+2
  1789  0E75  3058               	movlw	88
  1790  0E76  00E3               	movwf	??_main+1
  1791  0E77  3059               	movlw	89
  1792  0E78  00E2               	movwf	??_main
  1793  0E79                     u3587:	
  1794  0E79  0BE2               	decfsz	??_main,f
  1795  0E7A  2E79               	goto	u3587
  1796  0E7B  0BE3               	decfsz	??_main+1,f
  1797  0E7C  2E79               	goto	u3587
  1798  0E7D  0BE4               	decfsz	??_main+2,f
  1799  0E7E  2E79               	goto	u3587
  1800                           
  1801                           ;main.c: 46: Init_SERIAL();
  1802  0E7F  120A  158A  204E  120A  158A  	fcall	_Init_SERIAL
  1803                           
  1804                           ;main.c: 47: Init_MPU();
  1805  0E84  120A  158A  2067  120A  158A  	fcall	_Init_MPU
  1806                           
  1807                           ;main.c: 48: Init_I2C_M(400000);
  1808  0E89  3000               	movlw	0
  1809  0E8A  1283               	bcf	3,5	;RP0=0, select bank0
  1810  0E8B  1303               	bcf	3,6	;RP1=0, select bank0
  1811  0E8C  00A3               	movwf	Init_I2C_M@c+3
  1812  0E8D  3006               	movlw	6
  1813  0E8E  00A2               	movwf	Init_I2C_M@c+2
  1814  0E8F  301A               	movlw	26
  1815  0E90  00A1               	movwf	Init_I2C_M@c+1
  1816  0E91  3080               	movlw	128
  1817  0E92  00A0               	movwf	Init_I2C_M@c
  1818  0E93  120A  158A  21C9  120A  158A  	fcall	_Init_I2C_M
  1819                           
  1820                           ;main.c: 54: _delay((unsigned long)((5000)*(10000000/4000.0)));
  1821  0E98  3040               	movlw	64
  1822  0E99  1283               	bcf	3,5	;RP0=0, select bank0
  1823  0E9A  1303               	bcf	3,6	;RP1=0, select bank0
  1824  0E9B  00E4               	movwf	??_main+2
  1825  0E9C  306A               	movlw	106
  1826  0E9D  00E3               	movwf	??_main+1
  1827  0E9E  3097               	movlw	151
  1828  0E9F  00E2               	movwf	??_main
  1829  0EA0                     u3597:	
  1830  0EA0  0BE2               	decfsz	??_main,f
  1831  0EA1  2EA0               	goto	u3597
  1832  0EA2  0BE3               	decfsz	??_main+1,f
  1833  0EA3  2EA0               	goto	u3597
  1834  0EA4  0BE4               	decfsz	??_main+2,f
  1835  0EA5  2EA0               	goto	u3597
  1836                           
  1837                           ;main.c: 56: FMTX(FMTX_Nref, FMTX_Nprg);
  1838  0EA6  1683               	bsf	3,5	;RP0=1, select bank1
  1839  0EA7  1303               	bcf	3,6	;RP1=0, select bank1
  1840  0EA8  084C               	movf	(_FMTX_Nref+1)^(0+128),w
  1841  0EA9  1283               	bcf	3,5	;RP0=0, select bank0
  1842  0EAA  1303               	bcf	3,6	;RP1=0, select bank0
  1843  0EAB  00DD               	movwf	FMTX@Nref+1
  1844  0EAC  1683               	bsf	3,5	;RP0=1, select bank1
  1845  0EAD  1303               	bcf	3,6	;RP1=0, select bank1
  1846  0EAE  084B               	movf	_FMTX_Nref^(0+128),w
  1847  0EAF  1283               	bcf	3,5	;RP0=0, select bank0
  1848  0EB0  1303               	bcf	3,6	;RP1=0, select bank0
  1849  0EB1  00DC               	movwf	FMTX@Nref
  1850  0EB2  30D7               	movlw	(low (_FMTX_Nprg| 0))& (0+255)
  1851  0EB3  00DE               	movwf	FMTX@Nprg
  1852  0EB4  3000               	movlw	0
  1853  0EB5  00DF               	movwf	FMTX@Nprg+1
  1854  0EB6  120A  158A  216F  120A  158A  	fcall	_FMTX
  1855                           
  1856                           ;main.c: 57: CWTX(CWTX_Nref, CWTX_Nprg);
  1857  0EBB  1683               	bsf	3,5	;RP0=1, select bank1
  1858  0EBC  1303               	bcf	3,6	;RP1=0, select bank1
  1859  0EBD  084A               	movf	(_CWTX_Nref+1)^(0+128),w
  1860  0EBE  1283               	bcf	3,5	;RP0=0, select bank0
  1861  0EBF  1303               	bcf	3,6	;RP1=0, select bank0
  1862  0EC0  00DD               	movwf	CWTX@Nref+1
  1863  0EC1  1683               	bsf	3,5	;RP0=1, select bank1
  1864  0EC2  1303               	bcf	3,6	;RP1=0, select bank1
  1865  0EC3  0849               	movf	_CWTX_Nref^(0+128),w
  1866  0EC4  1283               	bcf	3,5	;RP0=0, select bank0
  1867  0EC5  1303               	bcf	3,6	;RP1=0, select bank0
  1868  0EC6  00DC               	movwf	CWTX@Nref
  1869  0EC7  30CD               	movlw	(low (_CWTX_Nprg| 0))& (0+255)
  1870  0EC8  00DE               	movwf	CWTX@Nprg
  1871  0EC9  3000               	movlw	0
  1872  0ECA  00DF               	movwf	CWTX@Nprg+1
  1873  0ECB  120A  158A  2117  120A  158A  	fcall	_CWTX
  1874                           
  1875                           ;main.c: 58: FMRX(FMRX_Nref, FMRX_Nprg);
  1876  0ED0  1683               	bsf	3,5	;RP0=1, select bank1
  1877  0ED1  1303               	bcf	3,6	;RP1=0, select bank1
  1878  0ED2  0848               	movf	(_FMRX_Nref+1)^(0+128),w
  1879  0ED3  1283               	bcf	3,5	;RP0=0, select bank0
  1880  0ED4  1303               	bcf	3,6	;RP1=0, select bank0
  1881  0ED5  00DD               	movwf	FMRX@Nref+1
  1882  0ED6  1683               	bsf	3,5	;RP0=1, select bank1
  1883  0ED7  1303               	bcf	3,6	;RP1=0, select bank1
  1884  0ED8  0847               	movf	_FMRX_Nref^(0+128),w
  1885  0ED9  1283               	bcf	3,5	;RP0=0, select bank0
  1886  0EDA  1303               	bcf	3,6	;RP1=0, select bank0
  1887  0EDB  00DC               	movwf	FMRX@Nref
  1888  0EDC  30E0               	movlw	(low (_FMRX_Nprg| (0+256)))& (0+255)
  1889  0EDD  00DE               	movwf	FMRX@Nprg
  1890  0EDE  3001               	movlw	1
  1891  0EDF  00DF               	movwf	FMRX@Nprg+1
  1892  0EE0  120A  158A  2143  120A  158A  	fcall	_FMRX
  1893  0EE5                     l3786:	
  1894                           ;main.c: 60: while(1){
  1895                           
  1896                           
  1897                           ;main.c: 74: UBYTE *dData;
  1898                           ;main.c: 75: dData = ReceivePacket_data();
  1899  0EE5  120A  158A  22D2  120A  158A  	fcall	_ReceivePacket_data
  1900  0EEA  1283               	bcf	3,5	;RP0=0, select bank0
  1901  0EEB  1303               	bcf	3,6	;RP1=0, select bank0
  1902  0EEC  00E2               	movwf	??_main
  1903  0EED  0862               	movf	??_main,w
  1904  0EEE  1683               	bsf	3,5	;RP0=1, select bank1
  1905  0EEF  1303               	bcf	3,6	;RP1=0, select bank1
  1906  0EF0  00C3               	movwf	main@dData^(0+128)
  1907                           
  1908                           ;main.c: 90: EEPROM_Write(0x50,0x00,0x00,dData);
  1909  0EF1  01F2               	clrf	EEPROM_Write@high_address
  1910  0EF2  01F3               	clrf	EEPROM_Write@low_address
  1911  0EF3  0843               	movf	main@dData^(0+128),w
  1912  0EF4  1283               	bcf	3,5	;RP0=0, select bank0
  1913  0EF5  1303               	bcf	3,6	;RP1=0, select bank0
  1914  0EF6  00E2               	movwf	??_main
  1915  0EF7  0862               	movf	??_main,w
  1916  0EF8  00F4               	movwf	EEPROM_Write@data
  1917  0EF9  3050               	movlw	80
  1918  0EFA  120A  158A  2375  120A  158A  	fcall	_EEPROM_Write
  1919                           
  1920                           ;main.c: 93: UBYTE NM_wad_header = 0x72;
  1921  0EFF  3072               	movlw	114
  1922  0F00  1283               	bcf	3,5	;RP0=0, select bank0
  1923  0F01  1303               	bcf	3,6	;RP1=0, select bank0
  1924  0F02  00E2               	movwf	??_main
  1925  0F03  0862               	movf	??_main,w
  1926  0F04  1683               	bsf	3,5	;RP0=1, select bank1
  1927  0F05  1303               	bcf	3,6	;RP1=0, select bank1
  1928  0F06  00C1               	movwf	main@NM_wad_header^(0+128)
  1929                           
  1930                           ;main.c: 94: NM_waddress(NM_wad_header, 0x00, 0x00);
  1931  0F07  01F1               	clrf	NM_waddress@whigh_address
  1932  0F08  01F2               	clrf	NM_waddress@wlow_address
  1933  0F09  0841               	movf	main@NM_wad_header^(0+128),w
  1934  0F0A  160A  118A  27EE  120A  158A  	fcall	_NM_waddress
  1935                           
  1936                           ;main.c: 105: UBYTE EPS_kill[];
  1937                           ;main.c: 106: UBYTE EPS_kill_1[] = "EA";
  1938  0F0F  1683               	bsf	3,5	;RP0=1, select bank1
  1939  0F10  1303               	bcf	3,6	;RP1=0, select bank1
  1940  0F11  0844               	movf	main@F2005^(0+128),w
  1941  0F12  00A0               	movwf	main@EPS_kill_1^(0+128)
  1942  0F13  0845               	movf	(main@F2005+1)^(0+128),w
  1943  0F14  00A1               	movwf	(main@EPS_kill_1+1)^(0+128)
  1944  0F15  0846               	movf	(main@F2005+2)^(0+128),w
  1945  0F16  00A2               	movwf	(main@EPS_kill_1+2)^(0+128)
  1946                           
  1947                           ;main.c: 107: UBYTE EPS_kill_2 = 0x0D;
  1948  0F17  300D               	movlw	13
  1949  0F18  1283               	bcf	3,5	;RP0=0, select bank0
  1950  0F19  1303               	bcf	3,6	;RP1=0, select bank0
  1951  0F1A  00E2               	movwf	??_main
  1952  0F1B  0862               	movf	??_main,w
  1953  0F1C  1683               	bsf	3,5	;RP0=1, select bank1
  1954  0F1D  1303               	bcf	3,6	;RP1=0, select bank1
  1955  0F1E  00C2               	movwf	main@EPS_kill_2^(0+128)
  1956                           
  1957                           ;main.c: 108: sprintf(EPS_kill,"%s%c",EPS_kill_1,EPS_kill_2);
  1958  0F1F  30A0               	movlw	low main@EPS_kill
  1959  0F20  00F0               	movwf	sprintf@sp
  1960  0F21  3000               	movlw	high main@EPS_kill
  1961  0F22  00F1               	movwf	sprintf@sp+1
  1962  0F23  3016               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1963  0F24  1283               	bcf	3,5	;RP0=0, select bank0
  1964  0F25  1303               	bcf	3,6	;RP1=0, select bank0
  1965  0F26  00E2               	movwf	??_main
  1966  0F27  0862               	movf	??_main,w
  1967  0F28  00F2               	movwf	sprintf@f
  1968  0F29  30A0               	movlw	(low (main@EPS_kill_1| 0))& (0+255)
  1969  0F2A  00E3               	movwf	??_main+1
  1970  0F2B  0863               	movf	??_main+1,w
  1971  0F2C  00F3               	movwf	?_sprintf+3
  1972  0F2D  1683               	bsf	3,5	;RP0=1, select bank1
  1973  0F2E  1303               	bcf	3,6	;RP1=0, select bank1
  1974  0F2F  0842               	movf	main@EPS_kill_2^(0+128),w
  1975  0F30  1283               	bcf	3,5	;RP0=0, select bank0
  1976  0F31  1303               	bcf	3,6	;RP1=0, select bank0
  1977  0F32  00E4               	movwf	??_main+2
  1978  0F33  01E5               	clrf	??_main+3
  1979  0F34  0864               	movf	??_main+2,w
  1980  0F35  00F4               	movwf	?_sprintf+4
  1981  0F36  0865               	movf	??_main+3,w
  1982  0F37  00F5               	movwf	?_sprintf+5
  1983  0F38  120A  118A  201E  120A  158A  	fcall	_sprintf
  1984                           
  1985                           ;main.c: 117: if (strcmp(dData,EPS_kill) == 0){
  1986  0F3D  30A0               	movlw	low main@EPS_kill
  1987  0F3E  00F0               	movwf	strcmp@s2
  1988  0F3F  3000               	movlw	high main@EPS_kill
  1989  0F40  00F1               	movwf	strcmp@s2+1
  1990  0F41  1683               	bsf	3,5	;RP0=1, select bank1
  1991  0F42  1303               	bcf	3,6	;RP1=0, select bank1
  1992  0F43  0843               	movf	main@dData^(0+128),w
  1993  0F44  120A  158A  20EC  120A  158A  	fcall	_strcmp
  1994  0F49  0870               	movf	?_strcmp,w
  1995  0F4A  0471               	iorwf	?_strcmp+1,w
  1996  0F4B  1D03               	btfss	3,2
  1997  0F4C  2FF1               	goto	l3820
  1998                           
  1999                           ;main.c: 118: Reset_EPS();
  2000  0F4D  120A  158A  20A1  120A  158A  	fcall	_Reset_EPS
  2001                           
  2002                           ;main.c: 119: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2003  0F52  3040               	movlw	64
  2004  0F53  1283               	bcf	3,5	;RP0=0, select bank0
  2005  0F54  1303               	bcf	3,6	;RP1=0, select bank0
  2006  0F55  00E4               	movwf	??_main+2
  2007  0F56  306A               	movlw	106
  2008  0F57  00E3               	movwf	??_main+1
  2009  0F58  3097               	movlw	151
  2010  0F59  00E2               	movwf	??_main
  2011  0F5A                     u3607:	
  2012  0F5A  0BE2               	decfsz	??_main,f
  2013  0F5B  2F5A               	goto	u3607
  2014  0F5C  0BE3               	decfsz	??_main+1,f
  2015  0F5D  2F5A               	goto	u3607
  2016  0F5E  0BE4               	decfsz	??_main+2,f
  2017  0F5F  2F5A               	goto	u3607
  2018                           
  2019                           ;main.c: 122: int FMTX_Nprg[5] = {8,7,3,0,0};
  2020  0F60  30A3               	movlw	main@FMTX_Nprg& (0+255)
  2021  0F61  0084               	movwf	4
  2022  0F62  30D6               	movlw	low main@F2009
  2023  0F63  1283               	bcf	3,5	;RP0=0, select bank0
  2024  0F64  1303               	bcf	3,6	;RP1=0, select bank0
  2025  0F65  00E2               	movwf	??_main
  2026  0F66  0804               	movf	4,w
  2027  0F67  00E3               	movwf	??_main+1
  2028  0F68  300A               	movlw	10
  2029  0F69  00E4               	movwf	??_main+2
  2030  0F6A                     u3530:	
  2031  0F6A  0862               	movf	??_main,w
  2032  0F6B  0084               	movwf	4
  2033  0F6C  1783               	bsf	3,7	;select IRP bank3
  2034  0F6D  0800               	movf	0,w
  2035  0F6E  00E5               	movwf	??_main+3
  2036  0F6F  0AE2               	incf	??_main,f
  2037  0F70  0863               	movf	??_main+1,w
  2038  0F71  0084               	movwf	4
  2039  0F72  1383               	bcf	3,7	;select IRP bank1
  2040  0F73  0865               	movf	??_main+3,w
  2041  0F74  0080               	movwf	0
  2042  0F75  0AE3               	incf	??_main+1,f
  2043  0F76  0BE4               	decfsz	??_main+2,f
  2044  0F77  2F6A               	goto	u3530
  2045                           
  2046                           ;main.c: 123: int CWTX_Nprg[5] = {0,1,7,4,7};
  2047  0F78  30AD               	movlw	main@CWTX_Nprg& (0+255)
  2048  0F79  0084               	movwf	4
  2049  0F7A  30CC               	movlw	low main@F2011
  2050  0F7B  00E2               	movwf	??_main
  2051  0F7C  0804               	movf	4,w
  2052  0F7D  00E3               	movwf	??_main+1
  2053  0F7E  300A               	movlw	10
  2054  0F7F  00E4               	movwf	??_main+2
  2055  0F80                     u3540:	
  2056  0F80  0862               	movf	??_main,w
  2057  0F81  0084               	movwf	4
  2058  0F82  1783               	bsf	3,7	;select IRP bank3
  2059  0F83  0800               	movf	0,w
  2060  0F84  00E5               	movwf	??_main+3
  2061  0F85  0AE2               	incf	??_main,f
  2062  0F86  0863               	movf	??_main+1,w
  2063  0F87  0084               	movwf	4
  2064  0F88  1383               	bcf	3,7	;select IRP bank1
  2065  0F89  0865               	movf	??_main+3,w
  2066  0F8A  0080               	movwf	0
  2067  0F8B  0AE3               	incf	??_main+1,f
  2068  0F8C  0BE4               	decfsz	??_main+2,f
  2069  0F8D  2F80               	goto	u3540
  2070                           
  2071                           ;main.c: 124: int FMRX_Nprg[5] = {2,4,8,8,7};
  2072  0F8E  30B7               	movlw	main@FMRX_Nprg& (0+255)
  2073  0F8F  0084               	movwf	4
  2074  0F90  30C2               	movlw	low main@F2013
  2075  0F91  00E2               	movwf	??_main
  2076  0F92  0804               	movf	4,w
  2077  0F93  00E3               	movwf	??_main+1
  2078  0F94  300A               	movlw	10
  2079  0F95  00E4               	movwf	??_main+2
  2080  0F96                     u3550:	
  2081  0F96  0862               	movf	??_main,w
  2082  0F97  0084               	movwf	4
  2083  0F98  1783               	bsf	3,7	;select IRP bank3
  2084  0F99  0800               	movf	0,w
  2085  0F9A  00E5               	movwf	??_main+3
  2086  0F9B  0AE2               	incf	??_main,f
  2087  0F9C  0863               	movf	??_main+1,w
  2088  0F9D  0084               	movwf	4
  2089  0F9E  1383               	bcf	3,7	;select IRP bank1
  2090  0F9F  0865               	movf	??_main+3,w
  2091  0FA0  0080               	movwf	0
  2092  0FA1  0AE3               	incf	??_main+1,f
  2093  0FA2  0BE4               	decfsz	??_main+2,f
  2094  0FA3  2F96               	goto	u3550
  2095                           
  2096                           ;main.c: 126: FMTX(FMTX_Nref, FMTX_Nprg);
  2097  0FA4  1683               	bsf	3,5	;RP0=1, select bank1
  2098  0FA5  1303               	bcf	3,6	;RP1=0, select bank1
  2099  0FA6  084C               	movf	(_FMTX_Nref+1)^(0+128),w
  2100  0FA7  1283               	bcf	3,5	;RP0=0, select bank0
  2101  0FA8  1303               	bcf	3,6	;RP1=0, select bank0
  2102  0FA9  00DD               	movwf	FMTX@Nref+1
  2103  0FAA  1683               	bsf	3,5	;RP0=1, select bank1
  2104  0FAB  1303               	bcf	3,6	;RP1=0, select bank1
  2105  0FAC  084B               	movf	_FMTX_Nref^(0+128),w
  2106  0FAD  1283               	bcf	3,5	;RP0=0, select bank0
  2107  0FAE  1303               	bcf	3,6	;RP1=0, select bank0
  2108  0FAF  00DC               	movwf	FMTX@Nref
  2109  0FB0  30A3               	movlw	(low (main@FMTX_Nprg| 0))& (0+255)
  2110  0FB1  00DE               	movwf	FMTX@Nprg
  2111  0FB2  3000               	movlw	0
  2112  0FB3  00DF               	movwf	FMTX@Nprg+1
  2113  0FB4  120A  158A  216F  120A  158A  	fcall	_FMTX
  2114                           
  2115                           ;main.c: 127: CWTX(CWTX_Nref, CWTX_Nprg);
  2116  0FB9  1683               	bsf	3,5	;RP0=1, select bank1
  2117  0FBA  1303               	bcf	3,6	;RP1=0, select bank1
  2118  0FBB  084A               	movf	(_CWTX_Nref+1)^(0+128),w
  2119  0FBC  1283               	bcf	3,5	;RP0=0, select bank0
  2120  0FBD  1303               	bcf	3,6	;RP1=0, select bank0
  2121  0FBE  00DD               	movwf	CWTX@Nref+1
  2122  0FBF  1683               	bsf	3,5	;RP0=1, select bank1
  2123  0FC0  1303               	bcf	3,6	;RP1=0, select bank1
  2124  0FC1  0849               	movf	_CWTX_Nref^(0+128),w
  2125  0FC2  1283               	bcf	3,5	;RP0=0, select bank0
  2126  0FC3  1303               	bcf	3,6	;RP1=0, select bank0
  2127  0FC4  00DC               	movwf	CWTX@Nref
  2128  0FC5  30AD               	movlw	(low (main@CWTX_Nprg| 0))& (0+255)
  2129  0FC6  00DE               	movwf	CWTX@Nprg
  2130  0FC7  3000               	movlw	0
  2131  0FC8  00DF               	movwf	CWTX@Nprg+1
  2132  0FC9  120A  158A  2117  120A  158A  	fcall	_CWTX
  2133                           
  2134                           ;main.c: 128: FMRX(FMRX_Nref, FMRX_Nprg);
  2135  0FCE  1683               	bsf	3,5	;RP0=1, select bank1
  2136  0FCF  1303               	bcf	3,6	;RP1=0, select bank1
  2137  0FD0  0848               	movf	(_FMRX_Nref+1)^(0+128),w
  2138  0FD1  1283               	bcf	3,5	;RP0=0, select bank0
  2139  0FD2  1303               	bcf	3,6	;RP1=0, select bank0
  2140  0FD3  00DD               	movwf	FMRX@Nref+1
  2141  0FD4  1683               	bsf	3,5	;RP0=1, select bank1
  2142  0FD5  1303               	bcf	3,6	;RP1=0, select bank1
  2143  0FD6  0847               	movf	_FMRX_Nref^(0+128),w
  2144  0FD7  1283               	bcf	3,5	;RP0=0, select bank0
  2145  0FD8  1303               	bcf	3,6	;RP1=0, select bank0
  2146  0FD9  00DC               	movwf	FMRX@Nref
  2147  0FDA  30B7               	movlw	(low (main@FMRX_Nprg| 0))& (0+255)
  2148  0FDB  00DE               	movwf	FMRX@Nprg
  2149  0FDC  3000               	movlw	0
  2150  0FDD  00DF               	movwf	FMRX@Nprg+1
  2151  0FDE  120A  158A  2143  120A  158A  	fcall	_FMRX
  2152                           
  2153                           ;main.c: 129: _delay((unsigned long)((500)*(10000000/4000.0)));
  2154  0FE3  3007               	movlw	7
  2155  0FE4  1283               	bcf	3,5	;RP0=0, select bank0
  2156  0FE5  1303               	bcf	3,6	;RP1=0, select bank0
  2157  0FE6  00E4               	movwf	??_main+2
  2158  0FE7  3058               	movlw	88
  2159  0FE8  00E3               	movwf	??_main+1
  2160  0FE9  3059               	movlw	89
  2161  0FEA  00E2               	movwf	??_main
  2162  0FEB                     u3617:	
  2163  0FEB  0BE2               	decfsz	??_main,f
  2164  0FEC  2FEB               	goto	u3617
  2165  0FED  0BE3               	decfsz	??_main+1,f
  2166  0FEE  2FEB               	goto	u3617
  2167  0FEF  0BE4               	decfsz	??_main+2,f
  2168  0FF0  2FEB               	goto	u3617
  2169  0FF1                     l3820:	
  2170                           
  2171                           ;main.c: 131: }
  2172                           ;main.c: 136: _delay((unsigned long)((500)*(10000000/4000.0)));
  2173  0FF1  3007               	movlw	7
  2174  0FF2  1283               	bcf	3,5	;RP0=0, select bank0
  2175  0FF3  1303               	bcf	3,6	;RP1=0, select bank0
  2176  0FF4  00E4               	movwf	??_main+2
  2177  0FF5  3058               	movlw	88
  2178  0FF6  00E3               	movwf	??_main+1
  2179  0FF7  3059               	movlw	89
  2180  0FF8  00E2               	movwf	??_main
  2181  0FF9                     u3627:	
  2182  0FF9  0BE2               	decfsz	??_main,f
  2183  0FFA  2FF9               	goto	u3627
  2184  0FFB  0BE3               	decfsz	??_main+1,f
  2185  0FFC  2FF9               	goto	u3627
  2186  0FFD  0BE4               	decfsz	??_main+2,f
  2187  0FFE  2FF9               	goto	u3627
  2188  0FFF  2EE5               	goto	l3786
  2189  1000                     __end_of_main:	
  2190                           ;main.c: 137: }
  2191                           ;main.c: 138: return;
  2192                           
  2193                           
  2194                           	psect	text1
  2195  08EC                     __ptext1:	
  2196 ;; *************** function _strcmp *****************
  2197 ;; Defined at:
  2198 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strcmp.c"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;  s1              1    wreg     PTR const unsigned char 
  2201 ;;		 -> NULL(0), dData(32), 
  2202 ;;  s2              2    0[COMMON] PTR const unsigned char 
  2203 ;;		 -> main@EPS_kill(0), 
  2204 ;; Auto vars:     Size  Location     Type
  2205 ;;  s1              1    5[COMMON] PTR const unsigned char 
  2206 ;;		 -> NULL(0), dData(32), 
  2207 ;;  r               1    4[COMMON] char 
  2208 ;; Return value:  Size  Location     Type
  2209 ;;                  2    0[COMMON] int 
  2210 ;; Registers used:
  2211 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2212 ;; Tracked objects:
  2213 ;;		On entry : 0/0
  2214 ;;		On exit  : 0/0
  2215 ;;		Unchanged: 0/0
  2216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2217 ;;      Params:         2       0       0       0       0
  2218 ;;      Locals:         2       0       0       0       0
  2219 ;;      Temps:          2       0       0       0       0
  2220 ;;      Totals:         6       0       0       0       0
  2221 ;;Total ram usage:        6 bytes
  2222 ;; Hardware stack levels used:    1
  2223 ;; This function calls:
  2224 ;;		Nothing
  2225 ;; This function is called by:
  2226 ;;		_main
  2227 ;; This function uses a non-reentrant model
  2228 ;;
  2229                           
  2230                           
  2231                           ;psect for function _strcmp
  2232  08EC                     _strcmp:	
  2233                           
  2234                           ;incstack = 0
  2235                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0]
  2236                           ;strcmp@s1 stored from wreg
  2237  08EC  00F5               	movwf	strcmp@s1
  2238  08ED  28F8               	goto	l3522
  2239  08EE                     l3520:	
  2240  08EE  3001               	movlw	1
  2241  08EF  00F2               	movwf	??_strcmp
  2242  08F0  0872               	movf	??_strcmp,w
  2243  08F1  07F5               	addwf	strcmp@s1,f
  2244  08F2  3001               	movlw	1
  2245  08F3  07F0               	addwf	strcmp@s2,f
  2246  08F4  1803               	skipnc
  2247  08F5  0AF1               	incf	strcmp@s2+1,f
  2248  08F6  3000               	movlw	0
  2249  08F7  07F1               	addwf	strcmp@s2+1,f
  2250  08F8                     l3522:	
  2251  08F8  0875               	movf	strcmp@s1,w
  2252  08F9  0084               	movwf	4
  2253  08FA  1783               	bsf	3,7	;select IRP bank2
  2254  08FB  0800               	movf	0,w
  2255  08FC  00F2               	movwf	??_strcmp
  2256  08FD  0870               	movf	strcmp@s2,w
  2257  08FE  0084               	movwf	4
  2258  08FF  1783               	bsf	3,7
  2259  0900  1C71               	btfss	strcmp@s2+1,0
  2260  0901  1383               	bcf	3,7
  2261  0902  0300               	decf	0,w
  2262  0903  3AFF               	xorlw	255
  2263  0904  0772               	addwf	??_strcmp,w
  2264  0905  00F3               	movwf	??_strcmp+1
  2265  0906  0873               	movf	??_strcmp+1,w
  2266  0907  00F4               	movwf	strcmp@r
  2267  0908  0874               	movf	strcmp@r,w
  2268  0909  1D03               	btfss	3,2
  2269  090A  2911               	goto	l3526
  2270  090B  0875               	movf	strcmp@s1,w
  2271  090C  0084               	movwf	4
  2272  090D  1783               	bsf	3,7	;select IRP bank2
  2273  090E  0800               	movf	0,w
  2274  090F  1D03               	btfss	3,2
  2275  0910  28EE               	goto	l3520
  2276  0911                     l3526:	
  2277  0911  0874               	movf	strcmp@r,w
  2278  0912  00F0               	movwf	?_strcmp
  2279  0913  01F1               	clrf	?_strcmp+1
  2280  0914  1BF0               	btfsc	?_strcmp,7
  2281  0915  03F1               	decf	?_strcmp+1,f
  2282  0916  0008               	return
  2283  0917                     __end_of_strcmp:	
  2284                           
  2285                           	psect	text2
  2286  001E                     __ptext2:	
  2287 ;; *************** function _sprintf *****************
  2288 ;; Defined at:
  2289 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2290 ;; Parameters:    Size  Location     Type
  2291 ;;  sp              2    0[COMMON] PTR unsigned char 
  2292 ;;		 -> main@EPS_kill(0), 
  2293 ;;  f               1    2[COMMON] PTR const unsigned char 
  2294 ;;		 -> STR_15(5), 
  2295 ;; Auto vars:     Size  Location     Type
  2296 ;;  tmpval          4    0        struct .
  2297 ;;  cp              2    9[COMMON] PTR const unsigned char 
  2298 ;;		 -> STR_16(7), main@EPS_kill_1(3), 
  2299 ;;  len             2    0        unsigned int 
  2300 ;;  val             2    0        unsigned int 
  2301 ;;  c               1   11[COMMON] char 
  2302 ;;  ap              1    8[COMMON] PTR void [1]
  2303 ;;		 -> ?_sprintf(2), 
  2304 ;;  flag            1    7[COMMON] unsigned char 
  2305 ;;  prec            1    0        char 
  2306 ;; Return value:  Size  Location     Type
  2307 ;;                  2    0[COMMON] int 
  2308 ;; Registers used:
  2309 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  2310 ;; Tracked objects:
  2311 ;;		On entry : 0/0
  2312 ;;		On exit  : 0/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2315 ;;      Params:         6       0       0       0       0
  2316 ;;      Locals:         5       0       0       0       0
  2317 ;;      Temps:          1       0       0       0       0
  2318 ;;      Totals:        12       0       0       0       0
  2319 ;;Total ram usage:       12 bytes
  2320 ;; Hardware stack levels used:    2
  2321 ;; This function calls:
  2322 ;;		Nothing
  2323 ;; This function is called by:
  2324 ;;		_main
  2325 ;; This function uses a non-reentrant model
  2326 ;;
  2327                           
  2328                           
  2329                           ;psect for function _sprintf
  2330  001E                     _sprintf:	
  2331                           
  2332                           ;doprnt.c: 494: va_list ap;
  2333                           ;doprnt.c: 499: signed char c;
  2334                           ;doprnt.c: 506: signed char prec;
  2335                           ;doprnt.c: 508: unsigned char flag;
  2336                           ;doprnt.c: 523: union {
  2337                           ;doprnt.c: 524: unsigned long vd;
  2338                           ;doprnt.c: 525: double integ;
  2339                           ;doprnt.c: 526: } tmpval;
  2340                           ;doprnt.c: 528: unsigned int val;
  2341                           ;doprnt.c: 529: unsigned len;
  2342                           ;doprnt.c: 530: const char * cp;
  2343                           ;doprnt.c: 533: *ap = __va_start();
  2344                           
  2345                           ;incstack = 0
  2346                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  2347  001E  3073               	movlw	(low ((?_sprintf| 0+3)))& (0+255)
  2348  001F  00F6               	movwf	??_sprintf
  2349  0020  0876               	movf	??_sprintf,w
  2350  0021  00F8               	movwf	sprintf@ap
  2351                           
  2352                           ;doprnt.c: 635: switch(c = *f++) {
  2353  0022  287A               	goto	l3512
  2354  0023                     l3484:	
  2355                           ;doprnt.c: 728: case 's':
  2356                           
  2357                           ;doprnt.c: 638: goto alldone;
  2358                           
  2359                           ;doprnt.c: 637: case 0:
  2360                           
  2361                           
  2362                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  2363  0023  0878               	movf	sprintf@ap,w
  2364  0024  0084               	movwf	4
  2365  0025  0800               	movf	0,w
  2366  0026  00F9               	movwf	sprintf@cp
  2367  0027  3000               	movlw	0
  2368  0028  00FA               	movwf	sprintf@cp+1
  2369  0029  3001               	movlw	1
  2370  002A  00F6               	movwf	??_sprintf
  2371  002B  0876               	movf	??_sprintf,w
  2372  002C  07F8               	addwf	sprintf@ap,f
  2373                           
  2374                           ;doprnt.c: 740: if(!cp)
  2375  002D  0879               	movf	sprintf@cp,w
  2376  002E  047A               	iorwf	sprintf@cp+1,w
  2377  002F  1D03               	btfss	3,2
  2378  0030  2835               	goto	l3498
  2379                           
  2380                           ;doprnt.c: 741: cp = "(null)";
  2381  0031  3001               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  2382  0032  00F9               	movwf	sprintf@cp
  2383  0033  3080               	movlw	128
  2384  0034  00FA               	movwf	sprintf@cp+1
  2385  0035                     l3498:	
  2386                           ;doprnt.c: 777: while(*cp)
  2387                           
  2388  0035  087A               	movf	sprintf@cp+1,w
  2389  0036  1283               	bcf	3,5	;RP0=0, select bank0
  2390  0037  1303               	bcf	3,6	;RP1=0, select bank0
  2391  0038  00FF               	movwf	127
  2392  0039  0879               	movf	sprintf@cp,w
  2393  003A  0084               	movwf	4
  2394  003B  120A  158A  2000  120A  118A  	fcall	stringtab
  2395  0040  3A00               	xorlw	0
  2396  0041  1903               	btfsc	3,2
  2397  0042  287A               	goto	l3512
  2398                           
  2399                           ;doprnt.c: 778: ((*sp++ = (*cp++)));
  2400  0043  087A               	movf	sprintf@cp+1,w
  2401  0044  1283               	bcf	3,5	;RP0=0, select bank0
  2402  0045  1303               	bcf	3,6	;RP1=0, select bank0
  2403  0046  00FF               	movwf	127
  2404  0047  0879               	movf	sprintf@cp,w
  2405  0048  0084               	movwf	4
  2406  0049  120A  158A  2000  120A  118A  	fcall	stringtab
  2407  004E  00F6               	movwf	??_sprintf
  2408  004F  0870               	movf	sprintf@sp,w
  2409  0050  0084               	movwf	4
  2410  0051  1783               	bsf	3,7
  2411  0052  1C71               	btfss	sprintf@sp+1,0
  2412  0053  1383               	bcf	3,7
  2413  0054  0876               	movf	??_sprintf,w
  2414  0055  0080               	movwf	0
  2415  0056  3001               	movlw	1
  2416  0057  07F9               	addwf	sprintf@cp,f
  2417  0058  1803               	skipnc
  2418  0059  0AFA               	incf	sprintf@cp+1,f
  2419  005A  3001               	movlw	1
  2420  005B  07F0               	addwf	sprintf@sp,f
  2421  005C  1803               	skipnc
  2422  005D  0AF1               	incf	sprintf@sp+1,f
  2423  005E  3000               	movlw	0
  2424  005F  07F1               	addwf	sprintf@sp+1,f
  2425  0060  2835               	goto	l3498
  2426  0061                     l3500:	
  2427                           ;doprnt.c: 784: case 'c':
  2428                           
  2429                           ;doprnt.c: 779: continue;
  2430                           
  2431                           
  2432                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2433  0061  0878               	movf	sprintf@ap,w
  2434  0062  0084               	movwf	4
  2435  0063  0800               	movf	0,w
  2436  0064  00F6               	movwf	??_sprintf
  2437  0065  0876               	movf	??_sprintf,w
  2438  0066  00FB               	movwf	sprintf@c
  2439  0067  3002               	movlw	2
  2440  0068  00F6               	movwf	??_sprintf
  2441  0069  0876               	movf	??_sprintf,w
  2442  006A  07F8               	addwf	sprintf@ap,f
  2443  006B                     l3504:	
  2444                           ;doprnt.c: 802: default:
  2445                           
  2446                           
  2447                           ;doprnt.c: 809: ((*sp++ = (c)));
  2448  006B  087B               	movf	sprintf@c,w
  2449  006C  00F6               	movwf	??_sprintf
  2450  006D  0870               	movf	sprintf@sp,w
  2451  006E  0084               	movwf	4
  2452  006F  1783               	bsf	3,7
  2453  0070  1C71               	btfss	sprintf@sp+1,0
  2454  0071  1383               	bcf	3,7
  2455  0072  0876               	movf	??_sprintf,w
  2456  0073  0080               	movwf	0
  2457  0074  3001               	movlw	1
  2458  0075  07F0               	addwf	sprintf@sp,f
  2459  0076  1803               	skipnc
  2460  0077  0AF1               	incf	sprintf@sp+1,f
  2461  0078  3000               	movlw	0
  2462  0079  07F1               	addwf	sprintf@sp+1,f
  2463  007A                     l3512:	
  2464                           ;doprnt.c: 1422: {
  2465                           
  2466                           ;doprnt.c: 536: while(c = *f++) {
  2467                           
  2468                           ;doprnt.c: 822: }
  2469                           
  2470                           ;doprnt.c: 810: continue;
  2471                           
  2472  007A  3001               	movlw	1
  2473  007B  07F2               	addwf	sprintf@f,f
  2474  007C  30FF               	movlw	-1
  2475  007D  0772               	addwf	sprintf@f,w
  2476  007E  0084               	movwf	4
  2477  007F  120A  158A  200A  120A  118A  	fcall	stringdir
  2478  0084  00F6               	movwf	??_sprintf
  2479  0085  0876               	movf	??_sprintf,w
  2480  0086  00FB               	movwf	sprintf@c
  2481  0087  087B               	movf	sprintf@c,w
  2482  0088  1903               	btfsc	3,2
  2483  0089  28A5               	goto	l3514
  2484                           
  2485                           ;doprnt.c: 538: if(c != '%')
  2486  008A  3025               	movlw	37
  2487  008B  067B               	xorwf	sprintf@c,w
  2488  008C  1D03               	btfss	3,2
  2489  008D  286B               	goto	l3504
  2490                           
  2491                           ;doprnt.c: 543: }
  2492                           ;doprnt.c: 548: flag = 0;
  2493                           
  2494                           ;doprnt.c: 542: continue;
  2495                           
  2496                           ;doprnt.c: 540: {
  2497                           ;doprnt.c: 541: ((*sp++ = (c)));
  2498  008E  01F7               	clrf	sprintf@flag
  2499  008F  3001               	movlw	1
  2500  0090  07F2               	addwf	sprintf@f,f
  2501  0091  30FF               	movlw	-1
  2502  0092  0772               	addwf	sprintf@f,w
  2503  0093  0084               	movwf	4
  2504  0094  120A  158A  200A  120A  118A  	fcall	stringdir
  2505  0099  00FB               	movwf	sprintf@c
  2506                           
  2507                           ; Switch size 1, requested type "space"
  2508                           ; Number of cases is 3, Range of values is 0 to 115
  2509                           ; switch strategies available:
  2510                           ; Name         Instructions Cycles
  2511                           ; simple_byte           10     6 (average)
  2512                           ; jumptable            260     6 (fixed)
  2513                           ;	Chosen strategy is simple_byte
  2514  009A  3A00               	xorlw	0	; case 0
  2515  009B  1903               	skipnz
  2516  009C  28A5               	goto	l3514
  2517  009D  3A63               	xorlw	99	; case 99
  2518  009E  1903               	skipnz
  2519  009F  2861               	goto	l3500
  2520  00A0  3A10               	xorlw	16	; case 115
  2521  00A1  1903               	skipnz
  2522  00A2  2823               	goto	l3484
  2523  00A3  286B               	goto	l3504
  2524  00A4  287A               	goto	l3512
  2525  00A5                     l3514:	
  2526                           ;doprnt.c: 1469: }
  2527                           ;doprnt.c: 1533: }
  2528                           ;doprnt.c: 1535: alldone:
  2529                           
  2530                           
  2531                           ;doprnt.c: 1538: *sp = 0;
  2532  00A5  0870               	movf	sprintf@sp,w
  2533  00A6  0084               	movwf	4
  2534  00A7  1783               	bsf	3,7
  2535  00A8  1C71               	btfss	sprintf@sp+1,0
  2536  00A9  1383               	bcf	3,7
  2537  00AA  0180               	clrf	0
  2538  00AB  0008               	return
  2539  00AC                     __end_of_sprintf:	
  2540                           ;doprnt.c: 1540: return 0;
  2541                           ;	Return value of _sprintf is never used
  2542                           
  2543                           
  2544                           	psect	text3
  2545  08A1                     __ptext3:	
  2546 ;; *************** function _Reset_EPS *****************
  2547 ;; Defined at:
  2548 ;;		line 19 in file "EPS.c"
  2549 ;; Parameters:    Size  Location     Type
  2550 ;;		None
  2551 ;; Auto vars:     Size  Location     Type
  2552 ;;		None
  2553 ;; Return value:  Size  Location     Type
  2554 ;;                  1    wreg      void 
  2555 ;; Registers used:
  2556 ;;		wreg
  2557 ;; Tracked objects:
  2558 ;;		On entry : 0/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2562 ;;      Params:         0       0       0       0       0
  2563 ;;      Locals:         0       0       0       0       0
  2564 ;;      Temps:          3       0       0       0       0
  2565 ;;      Totals:         3       0       0       0       0
  2566 ;;Total ram usage:        3 bytes
  2567 ;; Hardware stack levels used:    1
  2568 ;; This function calls:
  2569 ;;		Nothing
  2570 ;; This function is called by:
  2571 ;;		_main
  2572 ;; This function uses a non-reentrant model
  2573 ;;
  2574                           
  2575                           
  2576                           ;psect for function _Reset_EPS
  2577  08A1                     _Reset_EPS:	
  2578                           
  2579                           ;EPS.c: 20: RB4 = 1;
  2580                           
  2581                           ;incstack = 0
  2582                           ; Regs used in _Reset_EPS: [wreg]
  2583  08A1  1283               	bcf	3,5	;RP0=0, select bank0
  2584  08A2  1303               	bcf	3,6	;RP1=0, select bank0
  2585  08A3  1606               	bsf	6,4	;volatile
  2586                           
  2587                           ;EPS.c: 21: RA1 = 1;
  2588  08A4  1485               	bsf	5,1	;volatile
  2589                           
  2590                           ;EPS.c: 22: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2591  08A5  3040               	movlw	64
  2592  08A6  00F2               	movwf	??_Reset_EPS+2
  2593  08A7  306A               	movlw	106
  2594  08A8  00F1               	movwf	??_Reset_EPS+1
  2595  08A9  3097               	movlw	151
  2596  08AA  00F0               	movwf	??_Reset_EPS
  2597  08AB                     u3637:	
  2598  08AB  0BF0               	decfsz	??_Reset_EPS,f
  2599  08AC  28AB               	goto	u3637
  2600  08AD  0BF1               	decfsz	??_Reset_EPS+1,f
  2601  08AE  28AB               	goto	u3637
  2602  08AF  0BF2               	decfsz	??_Reset_EPS+2,f
  2603  08B0  28AB               	goto	u3637
  2604  08B1  28B2               	nop2
  2605                           
  2606                           ;EPS.c: 23: RB4 = 0;
  2607  08B2  1283               	bcf	3,5	;RP0=0, select bank0
  2608  08B3  1303               	bcf	3,6	;RP1=0, select bank0
  2609  08B4  1206               	bcf	6,4	;volatile
  2610                           
  2611                           ;EPS.c: 24: RA1 = 0;
  2612  08B5  1085               	bcf	5,1	;volatile
  2613                           
  2614                           ;EPS.c: 25: _delay((unsigned long)((500)*(10000000/4000.0)));
  2615  08B6  3007               	movlw	7
  2616  08B7  00F2               	movwf	??_Reset_EPS+2
  2617  08B8  3058               	movlw	88
  2618  08B9  00F1               	movwf	??_Reset_EPS+1
  2619  08BA  3059               	movlw	89
  2620  08BB  00F0               	movwf	??_Reset_EPS
  2621  08BC                     u3647:	
  2622  08BC  0BF0               	decfsz	??_Reset_EPS,f
  2623  08BD  28BC               	goto	u3647
  2624  08BE  0BF1               	decfsz	??_Reset_EPS+1,f
  2625  08BF  28BC               	goto	u3647
  2626  08C0  0BF2               	decfsz	??_Reset_EPS+2,f
  2627  08C1  28BC               	goto	u3647
  2628  08C2  28C3               	nop2
  2629  08C3  0008               	return
  2630  08C4                     __end_of_Reset_EPS:	
  2631                           
  2632                           	psect	text4
  2633  0AD2                     __ptext4:	
  2634 ;; *************** function _ReceivePacket_data *****************
  2635 ;; Defined at:
  2636 ;;		line 357 in file "decode_AX25.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;		None
  2639 ;; Auto vars:     Size  Location     Type
  2640 ;;  i               2   31[BANK0 ] unsigned int 
  2641 ;;  fcschecker      2   29[BANK0 ] unsigned int 
  2642 ;; Return value:  Size  Location     Type
  2643 ;;                  1    wreg      PTR unsigned char 
  2644 ;; Registers used:
  2645 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2646 ;; Tracked objects:
  2647 ;;		On entry : 0/0
  2648 ;;		On exit  : 0/0
  2649 ;;		Unchanged: 0/0
  2650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2651 ;;      Params:         0       0       0       0       0
  2652 ;;      Locals:         0       4       0       0       0
  2653 ;;      Temps:          2       0       0       0       0
  2654 ;;      Totals:         2       4       0       0       0
  2655 ;;Total ram usage:        6 bytes
  2656 ;; Hardware stack levels used:    1
  2657 ;; Hardware stack levels required when called:    2
  2658 ;; This function calls:
  2659 ;;		_fcscheck
  2660 ;;		_getdata
  2661 ;;		_waitFlag
  2662 ;; This function is called by:
  2663 ;;		_main
  2664 ;; This function uses a non-reentrant model
  2665 ;;
  2666                           
  2667                           
  2668                           ;psect for function _ReceivePacket_data
  2669  0AD2                     _ReceivePacket_data:	
  2670                           
  2671                           ;decode_AX25.c: 358: UINT fcschecker;
  2672                           ;decode_AX25.c: 361: waitFlag();
  2673                           
  2674                           ;incstack = 0
  2675                           ; Regs used in _ReceivePacket_data: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2676  0AD2  120A  118A  2327  120A  158A  	fcall	_waitFlag
  2677                           
  2678                           ;decode_AX25.c: 362: getdata();
  2679  0AD7  120A  158A  2430  120A  158A  	fcall	_getdata
  2680                           
  2681                           ;decode_AX25.c: 363: fcschecker = fcscheck();
  2682  0ADC  120A  158A  250E  120A  158A  	fcall	_fcscheck
  2683  0AE1  0871               	movf	?_fcscheck+1,w
  2684  0AE2  1283               	bcf	3,5	;RP0=0, select bank0
  2685  0AE3  1303               	bcf	3,6	;RP1=0, select bank0
  2686  0AE4  00BE               	movwf	ReceivePacket_data@fcschecker+1
  2687  0AE5  0870               	movf	?_fcscheck,w
  2688  0AE6  00BD               	movwf	ReceivePacket_data@fcschecker
  2689                           
  2690                           ;decode_AX25.c: 365: if(fcschecker == 1){
  2691  0AE7  033D               	decf	ReceivePacket_data@fcschecker,w
  2692  0AE8  043E               	iorwf	ReceivePacket_data@fcschecker+1,w
  2693  0AE9  1D03               	btfss	3,2
  2694  0AEA  2B16               	goto	l3368
  2695                           
  2696                           ;decode_AX25.c: 366: for(UINT i=0; i<dPacketnum-18; i++){
  2697  0AEB  01BF               	clrf	ReceivePacket_data@i
  2698  0AEC  01C0               	clrf	ReceivePacket_data@i+1
  2699  0AED                     l3358:	
  2700  0AED  0868               	movf	_dPacketnum,w
  2701  0AEE  3EEE               	addlw	238
  2702  0AEF  00FA               	movwf	??_ReceivePacket_data
  2703  0AF0  0869               	movf	_dPacketnum+1,w
  2704  0AF1  1803               	skipnc
  2705  0AF2  3E01               	addlw	1
  2706  0AF3  3EFF               	addlw	255
  2707  0AF4  00FB               	movwf	??_ReceivePacket_data+1
  2708  0AF5  087B               	movf	??_ReceivePacket_data+1,w
  2709  0AF6  0240               	subwf	ReceivePacket_data@i+1,w
  2710  0AF7  1D03               	skipz
  2711  0AF8  2AFB               	goto	u3085
  2712  0AF9  087A               	movf	??_ReceivePacket_data,w
  2713  0AFA  023F               	subwf	ReceivePacket_data@i,w
  2714  0AFB                     u3085:	
  2715  0AFB  1803               	btfsc	3,0
  2716  0AFC  2B10               	goto	l3360
  2717                           
  2718                           ;decode_AX25.c: 367: dData[i] = dPacket[i+16];
  2719  0AFD  083F               	movf	ReceivePacket_data@i,w
  2720  0AFE  3E10               	addlw	16
  2721  0AFF  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2722  0B00  0084               	movwf	4
  2723  0B01  1783               	bsf	3,7	;select IRP bank3
  2724  0B02  0800               	movf	0,w
  2725  0B03  00FA               	movwf	??_ReceivePacket_data
  2726  0B04  083F               	movf	ReceivePacket_data@i,w
  2727  0B05  3E30               	addlw	(low (_dData| (0+256)))& (0+255)
  2728  0B06  0084               	movwf	4
  2729  0B07  087A               	movf	??_ReceivePacket_data,w
  2730  0B08  0080               	movwf	0
  2731  0B09  3001               	movlw	1
  2732  0B0A  07BF               	addwf	ReceivePacket_data@i,f
  2733  0B0B  1803               	skipnc
  2734  0B0C  0AC0               	incf	ReceivePacket_data@i+1,f
  2735  0B0D  3000               	movlw	0
  2736  0B0E  07C0               	addwf	ReceivePacket_data@i+1,f
  2737  0B0F  2AED               	goto	l3358
  2738  0B10                     l3360:	
  2739                           
  2740                           ;decode_AX25.c: 368: }
  2741                           ;decode_AX25.c: 369: dPacketnum = 0;
  2742  0B10  01E8               	clrf	_dPacketnum
  2743  0B11  01E9               	clrf	_dPacketnum+1
  2744                           
  2745                           ;decode_AX25.c: 370: rcv_state = 0;
  2746  0B12  01EA               	clrf	_rcv_state
  2747  0B13  01EB               	clrf	_rcv_state+1
  2748                           
  2749                           ;decode_AX25.c: 371: return dData;
  2750  0B14  3030               	movlw	(low (_dData| (0+256)))& (0+255)
  2751                           
  2752                           ;decode_AX25.c: 372: }else{
  2753  0B15  0008               	return
  2754  0B16                     l3368:	
  2755                           
  2756                           ;decode_AX25.c: 373: dPacketnum = 0;
  2757  0B16  01E8               	clrf	_dPacketnum
  2758  0B17  01E9               	clrf	_dPacketnum+1
  2759                           
  2760                           ;decode_AX25.c: 374: rcv_state = 0;
  2761  0B18  01EA               	clrf	_rcv_state
  2762  0B19  01EB               	clrf	_rcv_state+1
  2763                           
  2764                           ;decode_AX25.c: 375: return 0x00;
  2765  0B1A  3000               	movlw	0
  2766  0B1B  0008               	return
  2767  0B1C                     __end_of_ReceivePacket_data:	
  2768                           
  2769                           	psect	text5
  2770  0327                     __ptext5:	
  2771 ;; *************** function _waitFlag *****************
  2772 ;; Defined at:
  2773 ;;		line 52 in file "decode_AX25.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;		None
  2776 ;; Auto vars:     Size  Location     Type
  2777 ;;  j               2   24[BANK0 ] unsigned int 
  2778 ;;  j               2   10[BANK0 ] unsigned int 
  2779 ;;  j               2   22[BANK0 ] unsigned int 
  2780 ;;  j               2    8[BANK0 ] unsigned int 
  2781 ;;  j               2   20[BANK0 ] unsigned int 
  2782 ;;  j               2    6[BANK0 ] unsigned int 
  2783 ;;  j               2   18[BANK0 ] unsigned int 
  2784 ;;  j               2    4[BANK0 ] unsigned int 
  2785 ;;  j               2   16[BANK0 ] unsigned int 
  2786 ;;  j               2    2[BANK0 ] unsigned int 
  2787 ;;  i               2    0[BANK0 ] unsigned int 
  2788 ;;  j               2   14[BANK0 ] unsigned int 
  2789 ;;  j               2   12[BANK0 ] unsigned int 
  2790 ;;  flag_judge      2   26[BANK0 ] unsigned int 
  2791 ;;  buf             1   28[BANK0 ] unsigned char 
  2792 ;; Return value:  Size  Location     Type
  2793 ;;                  1    wreg      void 
  2794 ;; Registers used:
  2795 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2796 ;; Tracked objects:
  2797 ;;		On entry : 0/0
  2798 ;;		On exit  : 0/0
  2799 ;;		Unchanged: 0/0
  2800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2801 ;;      Params:         0       0       0       0       0
  2802 ;;      Locals:         0      29       0       0       0
  2803 ;;      Temps:          4       0       0       0       0
  2804 ;;      Totals:         4      29       0       0       0
  2805 ;;Total ram usage:       33 bytes
  2806 ;; Hardware stack levels used:    1
  2807 ;; Hardware stack levels required when called:    1
  2808 ;; This function calls:
  2809 ;;		_getbit
  2810 ;; This function is called by:
  2811 ;;		_ReceivePacket_data
  2812 ;;		_ReceivePacket
  2813 ;; This function uses a non-reentrant model
  2814 ;;
  2815                           
  2816                           
  2817                           ;psect for function _waitFlag
  2818  0327                     _waitFlag:	
  2819                           
  2820                           ;decode_AX25.c: 53: UINT flag_judge;
  2821                           ;decode_AX25.c: 54: UBYTE buf = 0xff;
  2822                           
  2823                           ;incstack = 0
  2824                           ; Regs used in _waitFlag: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2825  0327  30FF               	movlw	255
  2826  0328  00F6               	movwf	??_waitFlag
  2827  0329  0876               	movf	??_waitFlag,w
  2828  032A  1283               	bcf	3,5	;RP0=0, select bank0
  2829  032B  1303               	bcf	3,6	;RP1=0, select bank0
  2830  032C  00BC               	movwf	waitFlag@buf
  2831  032D                     L6:	
  2832                           
  2833                           ;decode_AX25.c: 269: rcv_state = 0;
  2834  032D  01EA               	clrf	_rcv_state
  2835  032E  01EB               	clrf	_rcv_state+1
  2836  032F                     l3056:	
  2837  032F  3000               	movlw	0
  2838  0330  026B               	subwf	_rcv_state+1,w
  2839  0331  3002               	movlw	2
  2840  0332  1903               	skipnz
  2841  0333  026A               	subwf	_rcv_state,w
  2842  0334  1803               	btfsc	3,0
  2843  0335  0008               	return
  2844  0336                     l2690:	
  2845                           ;decode_AX25.c: 57: while(buf != 0x7e){
  2846                           
  2847                           ;decode_AX25.c: 56: while(rcv_state < 2){
  2848                           
  2849                           ;decode_AX25.c: 55: rcv_state = 0;
  2850                           
  2851  0336  307E               	movlw	126
  2852  0337  063C               	xorwf	waitFlag@buf,w
  2853  0338  1903               	btfsc	3,2
  2854  0339  2B86               	goto	l2712
  2855                           
  2856                           ;decode_AX25.c: 58: flag_judge = getbit();
  2857  033A  120A  158A  2289  120A  118A  	fcall	_getbit
  2858  033F  0871               	movf	?_getbit+1,w
  2859  0340  1283               	bcf	3,5	;RP0=0, select bank0
  2860  0341  1303               	bcf	3,6	;RP1=0, select bank0
  2861  0342  00BB               	movwf	waitFlag@flag_judge+1
  2862  0343  0870               	movf	?_getbit,w
  2863  0344  00BA               	movwf	waitFlag@flag_judge
  2864                           
  2865                           ;decode_AX25.c: 59: buf = buf << 1;
  2866  0345  083C               	movf	waitFlag@buf,w
  2867  0346  00F6               	movwf	??_waitFlag
  2868  0347  0776               	addwf	??_waitFlag,w
  2869  0348  00F7               	movwf	??_waitFlag+1
  2870  0349  0877               	movf	??_waitFlag+1,w
  2871  034A  00BC               	movwf	waitFlag@buf
  2872                           
  2873                           ;decode_AX25.c: 61: buf = buf | 0x00;
  2874  034B  083A               	movf	waitFlag@flag_judge,w
  2875  034C  043B               	iorwf	waitFlag@flag_judge+1,w
  2876  034D  1903               	btfsc	3,2
  2877  034E  2B36               	goto	l2690
  2878                           
  2879                           ;decode_AX25.c: 63: buf = buf | 0x01;
  2880                           
  2881                           ;decode_AX25.c: 62: }else{
  2882  034F  083C               	movf	waitFlag@buf,w
  2883  0350  3801               	iorlw	1
  2884  0351  00F6               	movwf	??_waitFlag
  2885  0352  0876               	movf	??_waitFlag,w
  2886  0353  00BC               	movwf	waitFlag@buf
  2887  0354  2B36               	goto	l2690
  2888  0355                     l2692:	
  2889                           ;decode_AX25.c: 64: }
  2890                           ;decode_AX25.c: 65: }
  2891                           ;decode_AX25.c: 69: while(buf == 0x7e){
  2892                           
  2893                           
  2894                           ;decode_AX25.c: 70: for(UINT i=0;i<8;i++){
  2895  0355  01A0               	clrf	waitFlag@i
  2896  0356  01A1               	clrf	waitFlag@i+1
  2897  0357  3000               	movlw	0
  2898  0358  0221               	subwf	waitFlag@i+1,w
  2899  0359  3008               	movlw	8
  2900  035A  1903               	skipnz
  2901  035B  0220               	subwf	waitFlag@i,w
  2902  035C  1803               	btfsc	3,0
  2903  035D  2B86               	goto	l2712
  2904  035E                     l2698:	
  2905                           
  2906                           ;decode_AX25.c: 71: flag_judge = getbit();
  2907  035E  120A  158A  2289  120A  118A  	fcall	_getbit
  2908  0363  0871               	movf	?_getbit+1,w
  2909  0364  1283               	bcf	3,5	;RP0=0, select bank0
  2910  0365  1303               	bcf	3,6	;RP1=0, select bank0
  2911  0366  00BB               	movwf	waitFlag@flag_judge+1
  2912  0367  0870               	movf	?_getbit,w
  2913  0368  00BA               	movwf	waitFlag@flag_judge
  2914                           
  2915                           ;decode_AX25.c: 72: buf = buf >> 1;
  2916  0369  083C               	movf	waitFlag@buf,w
  2917  036A  00F6               	movwf	??_waitFlag
  2918  036B  1003               	clrc
  2919  036C  0C76               	rrf	??_waitFlag,w
  2920  036D  00F7               	movwf	??_waitFlag+1
  2921  036E  0877               	movf	??_waitFlag+1,w
  2922  036F  00BC               	movwf	waitFlag@buf
  2923                           
  2924                           ;decode_AX25.c: 74: buf = buf | 0x00;
  2925  0370  083A               	movf	waitFlag@flag_judge,w
  2926  0371  043B               	iorwf	waitFlag@flag_judge+1,w
  2927  0372  1903               	btfsc	3,2
  2928  0373  2B79               	goto	l2708
  2929                           
  2930                           ;decode_AX25.c: 76: buf = buf | 0x80;
  2931                           
  2932                           ;decode_AX25.c: 75: }else{
  2933  0374  083C               	movf	waitFlag@buf,w
  2934  0375  3880               	iorlw	128
  2935  0376  00F6               	movwf	??_waitFlag
  2936  0377  0876               	movf	??_waitFlag,w
  2937  0378  00BC               	movwf	waitFlag@buf
  2938  0379                     l2708:	
  2939  0379  3001               	movlw	1
  2940  037A  07A0               	addwf	waitFlag@i,f
  2941  037B  1803               	skipnc
  2942  037C  0AA1               	incf	waitFlag@i+1,f
  2943  037D  3000               	movlw	0
  2944  037E  07A1               	addwf	waitFlag@i+1,f
  2945  037F  3000               	movlw	0
  2946  0380  0221               	subwf	waitFlag@i+1,w
  2947  0381  3008               	movlw	8
  2948  0382  1903               	skipnz
  2949  0383  0220               	subwf	waitFlag@i,w
  2950  0384  1C03               	skipc
  2951  0385  2B5E               	goto	l2698
  2952  0386                     l2712:	
  2953  0386  307E               	movlw	126
  2954  0387  063C               	xorwf	waitFlag@buf,w
  2955  0388  1903               	btfsc	3,2
  2956  0389  2B55               	goto	l2692
  2957                           
  2958                           ;decode_AX25.c: 77: }
  2959                           ;decode_AX25.c: 78: }
  2960                           ;decode_AX25.c: 79: }
  2961                           ;decode_AX25.c: 80: if(buf == ("JQ1YCZ"[0] << 1)){
  2962  038A  300F               	movlw	low (STR_1-__stringbase)
  2963  038B  0084               	movwf	4
  2964  038C  120A  158A  200A  120A  118A  	fcall	stringdir
  2965  0391  00F6               	movwf	??_waitFlag
  2966  0392  01F7               	clrf	??_waitFlag+1
  2967  0393  1003               	clrc
  2968  0394  0DF6               	rlf	??_waitFlag,f
  2969  0395  0DF7               	rlf	??_waitFlag+1,f
  2970  0396  083C               	movf	waitFlag@buf,w
  2971  0397  00F8               	movwf	??_waitFlag+2
  2972  0398  01F9               	clrf	??_waitFlag+3
  2973  0399  0877               	movf	??_waitFlag+1,w
  2974  039A  0679               	xorwf	??_waitFlag+3,w
  2975  039B  1D03               	skipz
  2976  039C  2B9F               	goto	u2175
  2977  039D  0876               	movf	??_waitFlag,w
  2978  039E  0678               	xorwf	??_waitFlag+2,w
  2979  039F                     u2175:	
  2980  039F  1D03               	skipz
  2981  03A0  2D64               	goto	l2862
  2982                           
  2983                           ;decode_AX25.c: 81: dPacket[dPacketnum] = buf;
  2984  03A1  083C               	movf	waitFlag@buf,w
  2985  03A2  00F6               	movwf	??_waitFlag
  2986  03A3  0868               	movf	_dPacketnum,w
  2987  03A4  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2988  03A5  0084               	movwf	4
  2989  03A6  0876               	movf	??_waitFlag,w
  2990  03A7  1783               	bsf	3,7	;select IRP bank3
  2991  03A8  0080               	movwf	0
  2992                           
  2993                           ;decode_AX25.c: 82: dPacketnum ++;
  2994  03A9  3001               	movlw	1
  2995  03AA  07E8               	addwf	_dPacketnum,f
  2996  03AB  1803               	skipnc
  2997  03AC  0AE9               	incf	_dPacketnum+1,f
  2998  03AD  3000               	movlw	0
  2999  03AE  07E9               	addwf	_dPacketnum+1,f
  3000                           
  3001                           ;decode_AX25.c: 83: for(UINT j=0;j<8;j++){
  3002  03AF  01A2               	clrf	waitFlag@j
  3003  03B0  01A3               	clrf	waitFlag@j+1
  3004  03B1  3000               	movlw	0
  3005  03B2  0223               	subwf	waitFlag@j+1,w
  3006  03B3  3008               	movlw	8
  3007  03B4  1903               	skipnz
  3008  03B5  0222               	subwf	waitFlag@j,w
  3009  03B6  1803               	btfsc	3,0
  3010  03B7  2BE0               	goto	l2740
  3011  03B8                     l2726:	
  3012                           
  3013                           ;decode_AX25.c: 84: flag_judge = getbit();
  3014  03B8  120A  158A  2289  120A  118A  	fcall	_getbit
  3015  03BD  0871               	movf	?_getbit+1,w
  3016  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  3017  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  3018  03C0  00BB               	movwf	waitFlag@flag_judge+1
  3019  03C1  0870               	movf	?_getbit,w
  3020  03C2  00BA               	movwf	waitFlag@flag_judge
  3021                           
  3022                           ;decode_AX25.c: 85: buf = buf >> 1;
  3023  03C3  083C               	movf	waitFlag@buf,w
  3024  03C4  00F6               	movwf	??_waitFlag
  3025  03C5  1003               	clrc
  3026  03C6  0C76               	rrf	??_waitFlag,w
  3027  03C7  00F7               	movwf	??_waitFlag+1
  3028  03C8  0877               	movf	??_waitFlag+1,w
  3029  03C9  00BC               	movwf	waitFlag@buf
  3030                           
  3031                           ;decode_AX25.c: 87: buf = buf | 0x00;
  3032  03CA  083A               	movf	waitFlag@flag_judge,w
  3033  03CB  043B               	iorwf	waitFlag@flag_judge+1,w
  3034  03CC  1903               	btfsc	3,2
  3035  03CD  2BD3               	goto	l2736
  3036                           
  3037                           ;decode_AX25.c: 89: buf = buf | 0x80;
  3038                           
  3039                           ;decode_AX25.c: 88: }else{
  3040  03CE  083C               	movf	waitFlag@buf,w
  3041  03CF  3880               	iorlw	128
  3042  03D0  00F6               	movwf	??_waitFlag
  3043  03D1  0876               	movf	??_waitFlag,w
  3044  03D2  00BC               	movwf	waitFlag@buf
  3045  03D3                     l2736:	
  3046  03D3  3001               	movlw	1
  3047  03D4  07A2               	addwf	waitFlag@j,f
  3048  03D5  1803               	skipnc
  3049  03D6  0AA3               	incf	waitFlag@j+1,f
  3050  03D7  3000               	movlw	0
  3051  03D8  07A3               	addwf	waitFlag@j+1,f
  3052  03D9  3000               	movlw	0
  3053  03DA  0223               	subwf	waitFlag@j+1,w
  3054  03DB  3008               	movlw	8
  3055  03DC  1903               	skipnz
  3056  03DD  0222               	subwf	waitFlag@j,w
  3057  03DE  1C03               	skipc
  3058  03DF  2BB8               	goto	l2726
  3059  03E0                     l2740:	
  3060                           
  3061                           ;decode_AX25.c: 90: }
  3062                           ;decode_AX25.c: 91: }
  3063                           ;decode_AX25.c: 92: if(buf == ("JQ1YCZ"[1] << 1)){
  3064  03E0  3010               	movlw	low (((STR_1+1)-__stringbase)| (0+32768))
  3065  03E1  0084               	movwf	4
  3066  03E2  120A  158A  200A  120A  118A  	fcall	stringdir
  3067  03E7  00F6               	movwf	??_waitFlag
  3068  03E8  01F7               	clrf	??_waitFlag+1
  3069  03E9  1003               	clrc
  3070  03EA  0DF6               	rlf	??_waitFlag,f
  3071  03EB  0DF7               	rlf	??_waitFlag+1,f
  3072  03EC  083C               	movf	waitFlag@buf,w
  3073  03ED  00F8               	movwf	??_waitFlag+2
  3074  03EE  01F9               	clrf	??_waitFlag+3
  3075  03EF  0877               	movf	??_waitFlag+1,w
  3076  03F0  0679               	xorwf	??_waitFlag+3,w
  3077  03F1  1D03               	skipz
  3078  03F2  2BF5               	goto	u2215
  3079  03F3  0876               	movf	??_waitFlag,w
  3080  03F4  0678               	xorwf	??_waitFlag+2,w
  3081  03F5                     u2215:	
  3082  03F5  1D03               	skipz
  3083  03F6  2D64               	goto	l2862
  3084                           
  3085                           ;decode_AX25.c: 93: dPacket[dPacketnum] = buf;
  3086  03F7  083C               	movf	waitFlag@buf,w
  3087  03F8  00F6               	movwf	??_waitFlag
  3088  03F9  0868               	movf	_dPacketnum,w
  3089  03FA  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3090  03FB  0084               	movwf	4
  3091  03FC  0876               	movf	??_waitFlag,w
  3092  03FD  1783               	bsf	3,7	;select IRP bank3
  3093  03FE  0080               	movwf	0
  3094                           
  3095                           ;decode_AX25.c: 94: dPacketnum ++;
  3096  03FF  3001               	movlw	1
  3097  0400  07E8               	addwf	_dPacketnum,f
  3098  0401  1803               	skipnc
  3099  0402  0AE9               	incf	_dPacketnum+1,f
  3100  0403  3000               	movlw	0
  3101  0404  07E9               	addwf	_dPacketnum+1,f
  3102                           
  3103                           ;decode_AX25.c: 95: for(UINT j=0;j<8;j++){
  3104  0405  01A4               	clrf	waitFlag@j_103
  3105  0406  01A5               	clrf	waitFlag@j_103+1
  3106  0407  3000               	movlw	0
  3107  0408  0225               	subwf	waitFlag@j_103+1,w
  3108  0409  3008               	movlw	8
  3109  040A  1903               	skipnz
  3110  040B  0224               	subwf	waitFlag@j_103,w
  3111  040C  1803               	btfsc	3,0
  3112  040D  2C36               	goto	l2766
  3113  040E                     l2752:	
  3114                           
  3115                           ;decode_AX25.c: 96: flag_judge = getbit();
  3116  040E  120A  158A  2289  120A  118A  	fcall	_getbit
  3117  0413  0871               	movf	?_getbit+1,w
  3118  0414  1283               	bcf	3,5	;RP0=0, select bank0
  3119  0415  1303               	bcf	3,6	;RP1=0, select bank0
  3120  0416  00BB               	movwf	waitFlag@flag_judge+1
  3121  0417  0870               	movf	?_getbit,w
  3122  0418  00BA               	movwf	waitFlag@flag_judge
  3123                           
  3124                           ;decode_AX25.c: 97: buf = buf >> 1;
  3125  0419  083C               	movf	waitFlag@buf,w
  3126  041A  00F6               	movwf	??_waitFlag
  3127  041B  1003               	clrc
  3128  041C  0C76               	rrf	??_waitFlag,w
  3129  041D  00F7               	movwf	??_waitFlag+1
  3130  041E  0877               	movf	??_waitFlag+1,w
  3131  041F  00BC               	movwf	waitFlag@buf
  3132                           
  3133                           ;decode_AX25.c: 99: buf = buf | 0x00;
  3134  0420  083A               	movf	waitFlag@flag_judge,w
  3135  0421  043B               	iorwf	waitFlag@flag_judge+1,w
  3136  0422  1903               	btfsc	3,2
  3137  0423  2C29               	goto	l2762
  3138                           
  3139                           ;decode_AX25.c: 101: buf = buf | 0x80;
  3140                           
  3141                           ;decode_AX25.c: 100: }else{
  3142  0424  083C               	movf	waitFlag@buf,w
  3143  0425  3880               	iorlw	128
  3144  0426  00F6               	movwf	??_waitFlag
  3145  0427  0876               	movf	??_waitFlag,w
  3146  0428  00BC               	movwf	waitFlag@buf
  3147  0429                     l2762:	
  3148  0429  3001               	movlw	1
  3149  042A  07A4               	addwf	waitFlag@j_103,f
  3150  042B  1803               	skipnc
  3151  042C  0AA5               	incf	waitFlag@j_103+1,f
  3152  042D  3000               	movlw	0
  3153  042E  07A5               	addwf	waitFlag@j_103+1,f
  3154  042F  3000               	movlw	0
  3155  0430  0225               	subwf	waitFlag@j_103+1,w
  3156  0431  3008               	movlw	8
  3157  0432  1903               	skipnz
  3158  0433  0224               	subwf	waitFlag@j_103,w
  3159  0434  1C03               	skipc
  3160  0435  2C0E               	goto	l2752
  3161  0436                     l2766:	
  3162                           
  3163                           ;decode_AX25.c: 102: }
  3164                           ;decode_AX25.c: 103: }
  3165                           ;decode_AX25.c: 104: if(buf == ("JQ1YCZ"[2] << 1)){
  3166  0436  3011               	movlw	low (((STR_1+2)-__stringbase)| (0+32768))
  3167  0437  0084               	movwf	4
  3168  0438  120A  158A  200A  120A  118A  	fcall	stringdir
  3169  043D  00F6               	movwf	??_waitFlag
  3170  043E  01F7               	clrf	??_waitFlag+1
  3171  043F  1003               	clrc
  3172  0440  0DF6               	rlf	??_waitFlag,f
  3173  0441  0DF7               	rlf	??_waitFlag+1,f
  3174  0442  083C               	movf	waitFlag@buf,w
  3175  0443  00F8               	movwf	??_waitFlag+2
  3176  0444  01F9               	clrf	??_waitFlag+3
  3177  0445  0877               	movf	??_waitFlag+1,w
  3178  0446  0679               	xorwf	??_waitFlag+3,w
  3179  0447  1D03               	skipz
  3180  0448  2C4B               	goto	u2255
  3181  0449  0876               	movf	??_waitFlag,w
  3182  044A  0678               	xorwf	??_waitFlag+2,w
  3183  044B                     u2255:	
  3184  044B  1D03               	skipz
  3185  044C  2D64               	goto	l2862
  3186                           
  3187                           ;decode_AX25.c: 105: dPacket[dPacketnum] = buf;
  3188  044D  083C               	movf	waitFlag@buf,w
  3189  044E  00F6               	movwf	??_waitFlag
  3190  044F  0868               	movf	_dPacketnum,w
  3191  0450  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3192  0451  0084               	movwf	4
  3193  0452  0876               	movf	??_waitFlag,w
  3194  0453  1783               	bsf	3,7	;select IRP bank3
  3195  0454  0080               	movwf	0
  3196                           
  3197                           ;decode_AX25.c: 106: dPacketnum ++;
  3198  0455  3001               	movlw	1
  3199  0456  07E8               	addwf	_dPacketnum,f
  3200  0457  1803               	skipnc
  3201  0458  0AE9               	incf	_dPacketnum+1,f
  3202  0459  3000               	movlw	0
  3203  045A  07E9               	addwf	_dPacketnum+1,f
  3204                           
  3205                           ;decode_AX25.c: 107: for(UINT j=0;j<8;j++){
  3206  045B  01A6               	clrf	waitFlag@j_105
  3207  045C  01A7               	clrf	waitFlag@j_105+1
  3208  045D  3000               	movlw	0
  3209  045E  0227               	subwf	waitFlag@j_105+1,w
  3210  045F  3008               	movlw	8
  3211  0460  1903               	skipnz
  3212  0461  0226               	subwf	waitFlag@j_105,w
  3213  0462  1803               	btfsc	3,0
  3214  0463  2C8C               	goto	l2792
  3215  0464                     l2778:	
  3216                           
  3217                           ;decode_AX25.c: 108: flag_judge = getbit();
  3218  0464  120A  158A  2289  120A  118A  	fcall	_getbit
  3219  0469  0871               	movf	?_getbit+1,w
  3220  046A  1283               	bcf	3,5	;RP0=0, select bank0
  3221  046B  1303               	bcf	3,6	;RP1=0, select bank0
  3222  046C  00BB               	movwf	waitFlag@flag_judge+1
  3223  046D  0870               	movf	?_getbit,w
  3224  046E  00BA               	movwf	waitFlag@flag_judge
  3225                           
  3226                           ;decode_AX25.c: 109: buf = buf >> 1;
  3227  046F  083C               	movf	waitFlag@buf,w
  3228  0470  00F6               	movwf	??_waitFlag
  3229  0471  1003               	clrc
  3230  0472  0C76               	rrf	??_waitFlag,w
  3231  0473  00F7               	movwf	??_waitFlag+1
  3232  0474  0877               	movf	??_waitFlag+1,w
  3233  0475  00BC               	movwf	waitFlag@buf
  3234                           
  3235                           ;decode_AX25.c: 111: buf = buf | 0x00;
  3236  0476  083A               	movf	waitFlag@flag_judge,w
  3237  0477  043B               	iorwf	waitFlag@flag_judge+1,w
  3238  0478  1903               	btfsc	3,2
  3239  0479  2C7F               	goto	l2788
  3240                           
  3241                           ;decode_AX25.c: 113: buf = buf | 0x80;
  3242                           
  3243                           ;decode_AX25.c: 112: }else{
  3244  047A  083C               	movf	waitFlag@buf,w
  3245  047B  3880               	iorlw	128
  3246  047C  00F6               	movwf	??_waitFlag
  3247  047D  0876               	movf	??_waitFlag,w
  3248  047E  00BC               	movwf	waitFlag@buf
  3249  047F                     l2788:	
  3250  047F  3001               	movlw	1
  3251  0480  07A6               	addwf	waitFlag@j_105,f
  3252  0481  1803               	skipnc
  3253  0482  0AA7               	incf	waitFlag@j_105+1,f
  3254  0483  3000               	movlw	0
  3255  0484  07A7               	addwf	waitFlag@j_105+1,f
  3256  0485  3000               	movlw	0
  3257  0486  0227               	subwf	waitFlag@j_105+1,w
  3258  0487  3008               	movlw	8
  3259  0488  1903               	skipnz
  3260  0489  0226               	subwf	waitFlag@j_105,w
  3261  048A  1C03               	skipc
  3262  048B  2C64               	goto	l2778
  3263  048C                     l2792:	
  3264                           
  3265                           ;decode_AX25.c: 114: }
  3266                           ;decode_AX25.c: 115: }
  3267                           ;decode_AX25.c: 116: if(buf == ("JQ1YCZ"[3] << 1)){
  3268  048C  3012               	movlw	low (((STR_1+3)-__stringbase)| (0+32768))
  3269  048D  0084               	movwf	4
  3270  048E  120A  158A  200A  120A  118A  	fcall	stringdir
  3271  0493  00F6               	movwf	??_waitFlag
  3272  0494  01F7               	clrf	??_waitFlag+1
  3273  0495  1003               	clrc
  3274  0496  0DF6               	rlf	??_waitFlag,f
  3275  0497  0DF7               	rlf	??_waitFlag+1,f
  3276  0498  083C               	movf	waitFlag@buf,w
  3277  0499  00F8               	movwf	??_waitFlag+2
  3278  049A  01F9               	clrf	??_waitFlag+3
  3279  049B  0877               	movf	??_waitFlag+1,w
  3280  049C  0679               	xorwf	??_waitFlag+3,w
  3281  049D  1D03               	skipz
  3282  049E  2CA1               	goto	u2295
  3283  049F  0876               	movf	??_waitFlag,w
  3284  04A0  0678               	xorwf	??_waitFlag+2,w
  3285  04A1                     u2295:	
  3286  04A1  1D03               	skipz
  3287  04A2  2D64               	goto	l2862
  3288                           
  3289                           ;decode_AX25.c: 117: dPacket[dPacketnum] = buf;
  3290  04A3  083C               	movf	waitFlag@buf,w
  3291  04A4  00F6               	movwf	??_waitFlag
  3292  04A5  0868               	movf	_dPacketnum,w
  3293  04A6  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3294  04A7  0084               	movwf	4
  3295  04A8  0876               	movf	??_waitFlag,w
  3296  04A9  1783               	bsf	3,7	;select IRP bank3
  3297  04AA  0080               	movwf	0
  3298                           
  3299                           ;decode_AX25.c: 118: dPacketnum ++;
  3300  04AB  3001               	movlw	1
  3301  04AC  07E8               	addwf	_dPacketnum,f
  3302  04AD  1803               	skipnc
  3303  04AE  0AE9               	incf	_dPacketnum+1,f
  3304  04AF  3000               	movlw	0
  3305  04B0  07E9               	addwf	_dPacketnum+1,f
  3306                           
  3307                           ;decode_AX25.c: 119: for(UINT j=0;j<8;j++){
  3308  04B1  01A8               	clrf	waitFlag@j_107
  3309  04B2  01A9               	clrf	waitFlag@j_107+1
  3310  04B3  3000               	movlw	0
  3311  04B4  0229               	subwf	waitFlag@j_107+1,w
  3312  04B5  3008               	movlw	8
  3313  04B6  1903               	skipnz
  3314  04B7  0228               	subwf	waitFlag@j_107,w
  3315  04B8  1803               	btfsc	3,0
  3316  04B9  2CE2               	goto	l2818
  3317  04BA                     l2804:	
  3318                           
  3319                           ;decode_AX25.c: 120: flag_judge = getbit();
  3320  04BA  120A  158A  2289  120A  118A  	fcall	_getbit
  3321  04BF  0871               	movf	?_getbit+1,w
  3322  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  3323  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  3324  04C2  00BB               	movwf	waitFlag@flag_judge+1
  3325  04C3  0870               	movf	?_getbit,w
  3326  04C4  00BA               	movwf	waitFlag@flag_judge
  3327                           
  3328                           ;decode_AX25.c: 121: buf = buf >> 1;
  3329  04C5  083C               	movf	waitFlag@buf,w
  3330  04C6  00F6               	movwf	??_waitFlag
  3331  04C7  1003               	clrc
  3332  04C8  0C76               	rrf	??_waitFlag,w
  3333  04C9  00F7               	movwf	??_waitFlag+1
  3334  04CA  0877               	movf	??_waitFlag+1,w
  3335  04CB  00BC               	movwf	waitFlag@buf
  3336                           
  3337                           ;decode_AX25.c: 123: buf = buf | 0x00;
  3338  04CC  083A               	movf	waitFlag@flag_judge,w
  3339  04CD  043B               	iorwf	waitFlag@flag_judge+1,w
  3340  04CE  1903               	btfsc	3,2
  3341  04CF  2CD5               	goto	l2814
  3342                           
  3343                           ;decode_AX25.c: 125: buf = buf | 0x80;
  3344                           
  3345                           ;decode_AX25.c: 124: }else{
  3346  04D0  083C               	movf	waitFlag@buf,w
  3347  04D1  3880               	iorlw	128
  3348  04D2  00F6               	movwf	??_waitFlag
  3349  04D3  0876               	movf	??_waitFlag,w
  3350  04D4  00BC               	movwf	waitFlag@buf
  3351  04D5                     l2814:	
  3352  04D5  3001               	movlw	1
  3353  04D6  07A8               	addwf	waitFlag@j_107,f
  3354  04D7  1803               	skipnc
  3355  04D8  0AA9               	incf	waitFlag@j_107+1,f
  3356  04D9  3000               	movlw	0
  3357  04DA  07A9               	addwf	waitFlag@j_107+1,f
  3358  04DB  3000               	movlw	0
  3359  04DC  0229               	subwf	waitFlag@j_107+1,w
  3360  04DD  3008               	movlw	8
  3361  04DE  1903               	skipnz
  3362  04DF  0228               	subwf	waitFlag@j_107,w
  3363  04E0  1C03               	skipc
  3364  04E1  2CBA               	goto	l2804
  3365  04E2                     l2818:	
  3366                           
  3367                           ;decode_AX25.c: 126: }
  3368                           ;decode_AX25.c: 127: }
  3369                           ;decode_AX25.c: 128: if(buf == ("JQ1YCZ"[4] << 1)){
  3370  04E2  3013               	movlw	low (((STR_1+4)-__stringbase)| (0+32768))
  3371  04E3  0084               	movwf	4
  3372  04E4  120A  158A  200A  120A  118A  	fcall	stringdir
  3373  04E9  00F6               	movwf	??_waitFlag
  3374  04EA  01F7               	clrf	??_waitFlag+1
  3375  04EB  1003               	clrc
  3376  04EC  0DF6               	rlf	??_waitFlag,f
  3377  04ED  0DF7               	rlf	??_waitFlag+1,f
  3378  04EE  083C               	movf	waitFlag@buf,w
  3379  04EF  00F8               	movwf	??_waitFlag+2
  3380  04F0  01F9               	clrf	??_waitFlag+3
  3381  04F1  0877               	movf	??_waitFlag+1,w
  3382  04F2  0679               	xorwf	??_waitFlag+3,w
  3383  04F3  1D03               	skipz
  3384  04F4  2CF7               	goto	u2335
  3385  04F5  0876               	movf	??_waitFlag,w
  3386  04F6  0678               	xorwf	??_waitFlag+2,w
  3387  04F7                     u2335:	
  3388  04F7  1D03               	skipz
  3389  04F8  2D64               	goto	l2862
  3390                           
  3391                           ;decode_AX25.c: 129: dPacket[dPacketnum] = buf;
  3392  04F9  083C               	movf	waitFlag@buf,w
  3393  04FA  00F6               	movwf	??_waitFlag
  3394  04FB  0868               	movf	_dPacketnum,w
  3395  04FC  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3396  04FD  0084               	movwf	4
  3397  04FE  0876               	movf	??_waitFlag,w
  3398  04FF  1783               	bsf	3,7	;select IRP bank3
  3399  0500  0080               	movwf	0
  3400                           
  3401                           ;decode_AX25.c: 130: dPacketnum ++;
  3402  0501  3001               	movlw	1
  3403  0502  07E8               	addwf	_dPacketnum,f
  3404  0503  1803               	skipnc
  3405  0504  0AE9               	incf	_dPacketnum+1,f
  3406  0505  3000               	movlw	0
  3407  0506  07E9               	addwf	_dPacketnum+1,f
  3408                           
  3409                           ;decode_AX25.c: 131: for(UINT j=0;j<8;j++){
  3410  0507  01AA               	clrf	waitFlag@j_109
  3411  0508  01AB               	clrf	waitFlag@j_109+1
  3412  0509  3000               	movlw	0
  3413  050A  022B               	subwf	waitFlag@j_109+1,w
  3414  050B  3008               	movlw	8
  3415  050C  1903               	skipnz
  3416  050D  022A               	subwf	waitFlag@j_109,w
  3417  050E  1803               	btfsc	3,0
  3418  050F  2D38               	goto	l2844
  3419  0510                     l2830:	
  3420                           
  3421                           ;decode_AX25.c: 132: flag_judge = getbit();
  3422  0510  120A  158A  2289  120A  118A  	fcall	_getbit
  3423  0515  0871               	movf	?_getbit+1,w
  3424  0516  1283               	bcf	3,5	;RP0=0, select bank0
  3425  0517  1303               	bcf	3,6	;RP1=0, select bank0
  3426  0518  00BB               	movwf	waitFlag@flag_judge+1
  3427  0519  0870               	movf	?_getbit,w
  3428  051A  00BA               	movwf	waitFlag@flag_judge
  3429                           
  3430                           ;decode_AX25.c: 133: buf = buf >> 1;
  3431  051B  083C               	movf	waitFlag@buf,w
  3432  051C  00F6               	movwf	??_waitFlag
  3433  051D  1003               	clrc
  3434  051E  0C76               	rrf	??_waitFlag,w
  3435  051F  00F7               	movwf	??_waitFlag+1
  3436  0520  0877               	movf	??_waitFlag+1,w
  3437  0521  00BC               	movwf	waitFlag@buf
  3438                           
  3439                           ;decode_AX25.c: 135: buf = buf | 0x00;
  3440  0522  083A               	movf	waitFlag@flag_judge,w
  3441  0523  043B               	iorwf	waitFlag@flag_judge+1,w
  3442  0524  1903               	btfsc	3,2
  3443  0525  2D2B               	goto	l2840
  3444                           
  3445                           ;decode_AX25.c: 137: buf = buf | 0x80;
  3446                           
  3447                           ;decode_AX25.c: 136: }else{
  3448  0526  083C               	movf	waitFlag@buf,w
  3449  0527  3880               	iorlw	128
  3450  0528  00F6               	movwf	??_waitFlag
  3451  0529  0876               	movf	??_waitFlag,w
  3452  052A  00BC               	movwf	waitFlag@buf
  3453  052B                     l2840:	
  3454  052B  3001               	movlw	1
  3455  052C  07AA               	addwf	waitFlag@j_109,f
  3456  052D  1803               	skipnc
  3457  052E  0AAB               	incf	waitFlag@j_109+1,f
  3458  052F  3000               	movlw	0
  3459  0530  07AB               	addwf	waitFlag@j_109+1,f
  3460  0531  3000               	movlw	0
  3461  0532  022B               	subwf	waitFlag@j_109+1,w
  3462  0533  3008               	movlw	8
  3463  0534  1903               	skipnz
  3464  0535  022A               	subwf	waitFlag@j_109,w
  3465  0536  1C03               	skipc
  3466  0537  2D10               	goto	l2830
  3467  0538                     l2844:	
  3468                           
  3469                           ;decode_AX25.c: 138: }
  3470                           ;decode_AX25.c: 139: }
  3471                           ;decode_AX25.c: 140: if(buf == ("JQ1YCZ"[5] << 1)){
  3472  0538  3014               	movlw	low (((STR_1+5)-__stringbase)| (0+32768))
  3473  0539  0084               	movwf	4
  3474  053A  120A  158A  200A  120A  118A  	fcall	stringdir
  3475  053F  00F6               	movwf	??_waitFlag
  3476  0540  01F7               	clrf	??_waitFlag+1
  3477  0541  1003               	clrc
  3478  0542  0DF6               	rlf	??_waitFlag,f
  3479  0543  0DF7               	rlf	??_waitFlag+1,f
  3480  0544  083C               	movf	waitFlag@buf,w
  3481  0545  00F8               	movwf	??_waitFlag+2
  3482  0546  01F9               	clrf	??_waitFlag+3
  3483  0547  0877               	movf	??_waitFlag+1,w
  3484  0548  0679               	xorwf	??_waitFlag+3,w
  3485  0549  1D03               	skipz
  3486  054A  2D4D               	goto	u2375
  3487  054B  0876               	movf	??_waitFlag,w
  3488  054C  0678               	xorwf	??_waitFlag+2,w
  3489  054D                     u2375:	
  3490  054D  1D03               	skipz
  3491  054E  2D64               	goto	l2862
  3492                           
  3493                           ;decode_AX25.c: 141: dPacket[dPacketnum] = buf;
  3494  054F  083C               	movf	waitFlag@buf,w
  3495  0550  00F6               	movwf	??_waitFlag
  3496  0551  0868               	movf	_dPacketnum,w
  3497  0552  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3498  0553  0084               	movwf	4
  3499  0554  0876               	movf	??_waitFlag,w
  3500  0555  1783               	bsf	3,7	;select IRP bank3
  3501  0556  0080               	movwf	0
  3502                           
  3503                           ;decode_AX25.c: 142: dPacketnum ++;
  3504  0557  3001               	movlw	1
  3505  0558  07E8               	addwf	_dPacketnum,f
  3506  0559  1803               	skipnc
  3507  055A  0AE9               	incf	_dPacketnum+1,f
  3508  055B  3000               	movlw	0
  3509  055C  07E9               	addwf	_dPacketnum+1,f
  3510                           
  3511                           ;decode_AX25.c: 143: rcv_state ++;
  3512  055D  3001               	movlw	1
  3513  055E  07EA               	addwf	_rcv_state,f
  3514  055F  1803               	skipnc
  3515  0560  0AEB               	incf	_rcv_state+1,f
  3516  0561  3000               	movlw	0
  3517  0562  07EB               	addwf	_rcv_state+1,f
  3518                           
  3519                           ;decode_AX25.c: 144: }else{
  3520  0563  2D66               	goto	l194
  3521  0564                     l2862:	
  3522                           ;decode_AX25.c: 158: }
  3523                           ;decode_AX25.c: 159: }else{
  3524                           
  3525                           ;decode_AX25.c: 157: dPacketnum = 0;
  3526                           
  3527                           ;decode_AX25.c: 155: }
  3528                           ;decode_AX25.c: 156: }else{
  3529                           
  3530                           ;decode_AX25.c: 154: dPacketnum = 0;
  3531                           
  3532                           ;decode_AX25.c: 152: }
  3533                           ;decode_AX25.c: 153: }else{
  3534                           
  3535                           ;decode_AX25.c: 151: dPacketnum = 0;
  3536                           
  3537                           ;decode_AX25.c: 149: }
  3538                           ;decode_AX25.c: 150: }else{
  3539                           
  3540                           ;decode_AX25.c: 148: dPacketnum = 0;
  3541                           
  3542                           ;decode_AX25.c: 146: }
  3543                           ;decode_AX25.c: 147: }else{
  3544                           
  3545                           ;decode_AX25.c: 145: dPacketnum = 0;
  3546                           
  3547                           
  3548                           ;decode_AX25.c: 160: dPacketnum = 0;
  3549  0564  01E8               	clrf	_dPacketnum
  3550  0565  01E9               	clrf	_dPacketnum+1
  3551  0566                     l194:	
  3552                           
  3553                           ;decode_AX25.c: 161: }
  3554                           ;decode_AX25.c: 163: for(UINT j=0;j<8;j++){
  3555  0566  01AC               	clrf	waitFlag@j_111
  3556  0567  01AD               	clrf	waitFlag@j_111+1
  3557  0568  3000               	movlw	0
  3558  0569  022D               	subwf	waitFlag@j_111+1,w
  3559  056A  3008               	movlw	8
  3560  056B  1903               	skipnz
  3561  056C  022C               	subwf	waitFlag@j_111,w
  3562  056D  1803               	btfsc	3,0
  3563  056E  2D97               	goto	l2882
  3564  056F                     l2868:	
  3565                           
  3566                           ;decode_AX25.c: 164: flag_judge = getbit();
  3567  056F  120A  158A  2289  120A  118A  	fcall	_getbit
  3568  0574  0871               	movf	?_getbit+1,w
  3569  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3570  0576  1303               	bcf	3,6	;RP1=0, select bank0
  3571  0577  00BB               	movwf	waitFlag@flag_judge+1
  3572  0578  0870               	movf	?_getbit,w
  3573  0579  00BA               	movwf	waitFlag@flag_judge
  3574                           
  3575                           ;decode_AX25.c: 165: buf = buf >> 1;
  3576  057A  083C               	movf	waitFlag@buf,w
  3577  057B  00F6               	movwf	??_waitFlag
  3578  057C  1003               	clrc
  3579  057D  0C76               	rrf	??_waitFlag,w
  3580  057E  00F7               	movwf	??_waitFlag+1
  3581  057F  0877               	movf	??_waitFlag+1,w
  3582  0580  00BC               	movwf	waitFlag@buf
  3583                           
  3584                           ;decode_AX25.c: 167: buf = buf | 0x00;
  3585  0581  083A               	movf	waitFlag@flag_judge,w
  3586  0582  043B               	iorwf	waitFlag@flag_judge+1,w
  3587  0583  1903               	btfsc	3,2
  3588  0584  2D8A               	goto	l2878
  3589                           
  3590                           ;decode_AX25.c: 169: buf = buf | 0x80;
  3591                           
  3592                           ;decode_AX25.c: 168: }else{
  3593  0585  083C               	movf	waitFlag@buf,w
  3594  0586  3880               	iorlw	128
  3595  0587  00F6               	movwf	??_waitFlag
  3596  0588  0876               	movf	??_waitFlag,w
  3597  0589  00BC               	movwf	waitFlag@buf
  3598  058A                     l2878:	
  3599  058A  3001               	movlw	1
  3600  058B  07AC               	addwf	waitFlag@j_111,f
  3601  058C  1803               	skipnc
  3602  058D  0AAD               	incf	waitFlag@j_111+1,f
  3603  058E  3000               	movlw	0
  3604  058F  07AD               	addwf	waitFlag@j_111+1,f
  3605  0590  3000               	movlw	0
  3606  0591  022D               	subwf	waitFlag@j_111+1,w
  3607  0592  3008               	movlw	8
  3608  0593  1903               	skipnz
  3609  0594  022C               	subwf	waitFlag@j_111,w
  3610  0595  1C03               	skipc
  3611  0596  2D6F               	goto	l2868
  3612  0597                     l2882:	
  3613                           
  3614                           ;decode_AX25.c: 170: }
  3615                           ;decode_AX25.c: 171: }
  3616                           ;decode_AX25.c: 172: dPacket[dPacketnum] = buf;
  3617  0597  083C               	movf	waitFlag@buf,w
  3618  0598  00F6               	movwf	??_waitFlag
  3619  0599  0868               	movf	_dPacketnum,w
  3620  059A  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3621  059B  0084               	movwf	4
  3622  059C  0876               	movf	??_waitFlag,w
  3623  059D  1783               	bsf	3,7	;select IRP bank3
  3624  059E  0080               	movwf	0
  3625                           
  3626                           ;decode_AX25.c: 173: dPacketnum ++;
  3627  059F  3001               	movlw	1
  3628  05A0  07E8               	addwf	_dPacketnum,f
  3629  05A1  1803               	skipnc
  3630  05A2  0AE9               	incf	_dPacketnum+1,f
  3631  05A3  3000               	movlw	0
  3632  05A4  07E9               	addwf	_dPacketnum+1,f
  3633                           
  3634                           ;decode_AX25.c: 174: for(UINT j=0;j<8;j++){
  3635  05A5  01AE               	clrf	waitFlag@j_112
  3636  05A6  01AF               	clrf	waitFlag@j_112+1
  3637  05A7  3000               	movlw	0
  3638  05A8  022F               	subwf	waitFlag@j_112+1,w
  3639  05A9  3008               	movlw	8
  3640  05AA  1903               	skipnz
  3641  05AB  022E               	subwf	waitFlag@j_112,w
  3642  05AC  1803               	btfsc	3,0
  3643  05AD  2DD6               	goto	l2906
  3644  05AE                     l2892:	
  3645                           
  3646                           ;decode_AX25.c: 175: flag_judge = getbit();
  3647  05AE  120A  158A  2289  120A  118A  	fcall	_getbit
  3648  05B3  0871               	movf	?_getbit+1,w
  3649  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  3650  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  3651  05B6  00BB               	movwf	waitFlag@flag_judge+1
  3652  05B7  0870               	movf	?_getbit,w
  3653  05B8  00BA               	movwf	waitFlag@flag_judge
  3654                           
  3655                           ;decode_AX25.c: 176: buf = buf >> 1;
  3656  05B9  083C               	movf	waitFlag@buf,w
  3657  05BA  00F6               	movwf	??_waitFlag
  3658  05BB  1003               	clrc
  3659  05BC  0C76               	rrf	??_waitFlag,w
  3660  05BD  00F7               	movwf	??_waitFlag+1
  3661  05BE  0877               	movf	??_waitFlag+1,w
  3662  05BF  00BC               	movwf	waitFlag@buf
  3663                           
  3664                           ;decode_AX25.c: 178: buf = buf | 0x00;
  3665  05C0  083A               	movf	waitFlag@flag_judge,w
  3666  05C1  043B               	iorwf	waitFlag@flag_judge+1,w
  3667  05C2  1903               	btfsc	3,2
  3668  05C3  2DC9               	goto	l2902
  3669                           
  3670                           ;decode_AX25.c: 180: buf = buf | 0x80;
  3671                           
  3672                           ;decode_AX25.c: 179: }else{
  3673  05C4  083C               	movf	waitFlag@buf,w
  3674  05C5  3880               	iorlw	128
  3675  05C6  00F6               	movwf	??_waitFlag
  3676  05C7  0876               	movf	??_waitFlag,w
  3677  05C8  00BC               	movwf	waitFlag@buf
  3678  05C9                     l2902:	
  3679  05C9  3001               	movlw	1
  3680  05CA  07AE               	addwf	waitFlag@j_112,f
  3681  05CB  1803               	skipnc
  3682  05CC  0AAF               	incf	waitFlag@j_112+1,f
  3683  05CD  3000               	movlw	0
  3684  05CE  07AF               	addwf	waitFlag@j_112+1,f
  3685  05CF  3000               	movlw	0
  3686  05D0  022F               	subwf	waitFlag@j_112+1,w
  3687  05D1  3008               	movlw	8
  3688  05D2  1903               	skipnz
  3689  05D3  022E               	subwf	waitFlag@j_112,w
  3690  05D4  1C03               	skipc
  3691  05D5  2DAE               	goto	l2892
  3692  05D6                     l2906:	
  3693                           
  3694                           ;decode_AX25.c: 181: }
  3695                           ;decode_AX25.c: 182: }
  3696                           ;decode_AX25.c: 183: if(buf == ("JQ1ZHX"[0] << 1)){
  3697  05D6  3008               	movlw	low (STR_7-__stringbase)
  3698  05D7  0084               	movwf	4
  3699  05D8  120A  158A  200A  120A  118A  	fcall	stringdir
  3700  05DD  00F6               	movwf	??_waitFlag
  3701  05DE  01F7               	clrf	??_waitFlag+1
  3702  05DF  1003               	clrc
  3703  05E0  0DF6               	rlf	??_waitFlag,f
  3704  05E1  0DF7               	rlf	??_waitFlag+1,f
  3705  05E2  083C               	movf	waitFlag@buf,w
  3706  05E3  00F8               	movwf	??_waitFlag+2
  3707  05E4  01F9               	clrf	??_waitFlag+3
  3708  05E5  0877               	movf	??_waitFlag+1,w
  3709  05E6  0679               	xorwf	??_waitFlag+3,w
  3710  05E7  1D03               	skipz
  3711  05E8  2DEB               	goto	u2445
  3712  05E9  0876               	movf	??_waitFlag,w
  3713  05EA  0678               	xorwf	??_waitFlag+2,w
  3714  05EB                     u2445:	
  3715  05EB  1D03               	skipz
  3716  05EC  2FB0               	goto	l3054
  3717                           
  3718                           ;decode_AX25.c: 184: dPacket[dPacketnum] = buf;
  3719  05ED  083C               	movf	waitFlag@buf,w
  3720  05EE  00F6               	movwf	??_waitFlag
  3721  05EF  0868               	movf	_dPacketnum,w
  3722  05F0  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3723  05F1  0084               	movwf	4
  3724  05F2  0876               	movf	??_waitFlag,w
  3725  05F3  1783               	bsf	3,7	;select IRP bank3
  3726  05F4  0080               	movwf	0
  3727                           
  3728                           ;decode_AX25.c: 185: dPacketnum ++;
  3729  05F5  3001               	movlw	1
  3730  05F6  07E8               	addwf	_dPacketnum,f
  3731  05F7  1803               	skipnc
  3732  05F8  0AE9               	incf	_dPacketnum+1,f
  3733  05F9  3000               	movlw	0
  3734  05FA  07E9               	addwf	_dPacketnum+1,f
  3735                           
  3736                           ;decode_AX25.c: 186: for(UINT j=0;j<8;j++){
  3737  05FB  01B0               	clrf	waitFlag@j_114
  3738  05FC  01B1               	clrf	waitFlag@j_114+1
  3739  05FD  3000               	movlw	0
  3740  05FE  0231               	subwf	waitFlag@j_114+1,w
  3741  05FF  3008               	movlw	8
  3742  0600  1903               	skipnz
  3743  0601  0230               	subwf	waitFlag@j_114,w
  3744  0602  1803               	btfsc	3,0
  3745  0603  2E2C               	goto	l2932
  3746  0604                     l2918:	
  3747                           
  3748                           ;decode_AX25.c: 187: flag_judge = getbit();
  3749  0604  120A  158A  2289  120A  118A  	fcall	_getbit
  3750  0609  0871               	movf	?_getbit+1,w
  3751  060A  1283               	bcf	3,5	;RP0=0, select bank0
  3752  060B  1303               	bcf	3,6	;RP1=0, select bank0
  3753  060C  00BB               	movwf	waitFlag@flag_judge+1
  3754  060D  0870               	movf	?_getbit,w
  3755  060E  00BA               	movwf	waitFlag@flag_judge
  3756                           
  3757                           ;decode_AX25.c: 188: buf = buf >> 1;
  3758  060F  083C               	movf	waitFlag@buf,w
  3759  0610  00F6               	movwf	??_waitFlag
  3760  0611  1003               	clrc
  3761  0612  0C76               	rrf	??_waitFlag,w
  3762  0613  00F7               	movwf	??_waitFlag+1
  3763  0614  0877               	movf	??_waitFlag+1,w
  3764  0615  00BC               	movwf	waitFlag@buf
  3765                           
  3766                           ;decode_AX25.c: 190: buf = buf | 0x00;
  3767  0616  083A               	movf	waitFlag@flag_judge,w
  3768  0617  043B               	iorwf	waitFlag@flag_judge+1,w
  3769  0618  1903               	btfsc	3,2
  3770  0619  2E1F               	goto	l2928
  3771                           
  3772                           ;decode_AX25.c: 192: buf = buf | 0x80;
  3773                           
  3774                           ;decode_AX25.c: 191: }else{
  3775  061A  083C               	movf	waitFlag@buf,w
  3776  061B  3880               	iorlw	128
  3777  061C  00F6               	movwf	??_waitFlag
  3778  061D  0876               	movf	??_waitFlag,w
  3779  061E  00BC               	movwf	waitFlag@buf
  3780  061F                     l2928:	
  3781  061F  3001               	movlw	1
  3782  0620  07B0               	addwf	waitFlag@j_114,f
  3783  0621  1803               	skipnc
  3784  0622  0AB1               	incf	waitFlag@j_114+1,f
  3785  0623  3000               	movlw	0
  3786  0624  07B1               	addwf	waitFlag@j_114+1,f
  3787  0625  3000               	movlw	0
  3788  0626  0231               	subwf	waitFlag@j_114+1,w
  3789  0627  3008               	movlw	8
  3790  0628  1903               	skipnz
  3791  0629  0230               	subwf	waitFlag@j_114,w
  3792  062A  1C03               	skipc
  3793  062B  2E04               	goto	l2918
  3794  062C                     l2932:	
  3795                           
  3796                           ;decode_AX25.c: 193: }
  3797                           ;decode_AX25.c: 194: }
  3798                           ;decode_AX25.c: 195: if(buf == ("JQ1ZHX"[1] << 1)){
  3799  062C  3009               	movlw	low (((STR_7+1)-__stringbase)| (0+32768))
  3800  062D  0084               	movwf	4
  3801  062E  120A  158A  200A  120A  118A  	fcall	stringdir
  3802  0633  00F6               	movwf	??_waitFlag
  3803  0634  01F7               	clrf	??_waitFlag+1
  3804  0635  1003               	clrc
  3805  0636  0DF6               	rlf	??_waitFlag,f
  3806  0637  0DF7               	rlf	??_waitFlag+1,f
  3807  0638  083C               	movf	waitFlag@buf,w
  3808  0639  00F8               	movwf	??_waitFlag+2
  3809  063A  01F9               	clrf	??_waitFlag+3
  3810  063B  0877               	movf	??_waitFlag+1,w
  3811  063C  0679               	xorwf	??_waitFlag+3,w
  3812  063D  1D03               	skipz
  3813  063E  2E41               	goto	u2485
  3814  063F  0876               	movf	??_waitFlag,w
  3815  0640  0678               	xorwf	??_waitFlag+2,w
  3816  0641                     u2485:	
  3817  0641  1D03               	skipz
  3818  0642  2FB0               	goto	l3054
  3819                           
  3820                           ;decode_AX25.c: 196: dPacket[dPacketnum] = buf;
  3821  0643  083C               	movf	waitFlag@buf,w
  3822  0644  00F6               	movwf	??_waitFlag
  3823  0645  0868               	movf	_dPacketnum,w
  3824  0646  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3825  0647  0084               	movwf	4
  3826  0648  0876               	movf	??_waitFlag,w
  3827  0649  1783               	bsf	3,7	;select IRP bank3
  3828  064A  0080               	movwf	0
  3829                           
  3830                           ;decode_AX25.c: 197: dPacketnum ++;
  3831  064B  3001               	movlw	1
  3832  064C  07E8               	addwf	_dPacketnum,f
  3833  064D  1803               	skipnc
  3834  064E  0AE9               	incf	_dPacketnum+1,f
  3835  064F  3000               	movlw	0
  3836  0650  07E9               	addwf	_dPacketnum+1,f
  3837                           
  3838                           ;decode_AX25.c: 198: for(UINT j=0;j<8;j++){
  3839  0651  01B2               	clrf	waitFlag@j_116
  3840  0652  01B3               	clrf	waitFlag@j_116+1
  3841  0653  3000               	movlw	0
  3842  0654  0233               	subwf	waitFlag@j_116+1,w
  3843  0655  3008               	movlw	8
  3844  0656  1903               	skipnz
  3845  0657  0232               	subwf	waitFlag@j_116,w
  3846  0658  1803               	btfsc	3,0
  3847  0659  2E82               	goto	l2958
  3848  065A                     l2944:	
  3849                           
  3850                           ;decode_AX25.c: 199: flag_judge = getbit();
  3851  065A  120A  158A  2289  120A  118A  	fcall	_getbit
  3852  065F  0871               	movf	?_getbit+1,w
  3853  0660  1283               	bcf	3,5	;RP0=0, select bank0
  3854  0661  1303               	bcf	3,6	;RP1=0, select bank0
  3855  0662  00BB               	movwf	waitFlag@flag_judge+1
  3856  0663  0870               	movf	?_getbit,w
  3857  0664  00BA               	movwf	waitFlag@flag_judge
  3858                           
  3859                           ;decode_AX25.c: 200: buf = buf >> 1;
  3860  0665  083C               	movf	waitFlag@buf,w
  3861  0666  00F6               	movwf	??_waitFlag
  3862  0667  1003               	clrc
  3863  0668  0C76               	rrf	??_waitFlag,w
  3864  0669  00F7               	movwf	??_waitFlag+1
  3865  066A  0877               	movf	??_waitFlag+1,w
  3866  066B  00BC               	movwf	waitFlag@buf
  3867                           
  3868                           ;decode_AX25.c: 202: buf = buf | 0x00;
  3869  066C  083A               	movf	waitFlag@flag_judge,w
  3870  066D  043B               	iorwf	waitFlag@flag_judge+1,w
  3871  066E  1903               	btfsc	3,2
  3872  066F  2E75               	goto	l2954
  3873                           
  3874                           ;decode_AX25.c: 204: buf = buf | 0x80;
  3875                           
  3876                           ;decode_AX25.c: 203: }else{
  3877  0670  083C               	movf	waitFlag@buf,w
  3878  0671  3880               	iorlw	128
  3879  0672  00F6               	movwf	??_waitFlag
  3880  0673  0876               	movf	??_waitFlag,w
  3881  0674  00BC               	movwf	waitFlag@buf
  3882  0675                     l2954:	
  3883  0675  3001               	movlw	1
  3884  0676  07B2               	addwf	waitFlag@j_116,f
  3885  0677  1803               	skipnc
  3886  0678  0AB3               	incf	waitFlag@j_116+1,f
  3887  0679  3000               	movlw	0
  3888  067A  07B3               	addwf	waitFlag@j_116+1,f
  3889  067B  3000               	movlw	0
  3890  067C  0233               	subwf	waitFlag@j_116+1,w
  3891  067D  3008               	movlw	8
  3892  067E  1903               	skipnz
  3893  067F  0232               	subwf	waitFlag@j_116,w
  3894  0680  1C03               	skipc
  3895  0681  2E5A               	goto	l2944
  3896  0682                     l2958:	
  3897                           
  3898                           ;decode_AX25.c: 205: }
  3899                           ;decode_AX25.c: 206: }
  3900                           ;decode_AX25.c: 207: if(buf == ("JQ1ZHX"[2] << 1)){
  3901  0682  300A               	movlw	low (((STR_7+2)-__stringbase)| (0+32768))
  3902  0683  0084               	movwf	4
  3903  0684  120A  158A  200A  120A  118A  	fcall	stringdir
  3904  0689  00F6               	movwf	??_waitFlag
  3905  068A  01F7               	clrf	??_waitFlag+1
  3906  068B  1003               	clrc
  3907  068C  0DF6               	rlf	??_waitFlag,f
  3908  068D  0DF7               	rlf	??_waitFlag+1,f
  3909  068E  083C               	movf	waitFlag@buf,w
  3910  068F  00F8               	movwf	??_waitFlag+2
  3911  0690  01F9               	clrf	??_waitFlag+3
  3912  0691  0877               	movf	??_waitFlag+1,w
  3913  0692  0679               	xorwf	??_waitFlag+3,w
  3914  0693  1D03               	skipz
  3915  0694  2E97               	goto	u2525
  3916  0695  0876               	movf	??_waitFlag,w
  3917  0696  0678               	xorwf	??_waitFlag+2,w
  3918  0697                     u2525:	
  3919  0697  1D03               	skipz
  3920  0698  2FB0               	goto	l3054
  3921                           
  3922                           ;decode_AX25.c: 208: dPacket[dPacketnum] = buf;
  3923  0699  083C               	movf	waitFlag@buf,w
  3924  069A  00F6               	movwf	??_waitFlag
  3925  069B  0868               	movf	_dPacketnum,w
  3926  069C  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3927  069D  0084               	movwf	4
  3928  069E  0876               	movf	??_waitFlag,w
  3929  069F  1783               	bsf	3,7	;select IRP bank3
  3930  06A0  0080               	movwf	0
  3931                           
  3932                           ;decode_AX25.c: 209: dPacketnum ++;
  3933  06A1  3001               	movlw	1
  3934  06A2  07E8               	addwf	_dPacketnum,f
  3935  06A3  1803               	skipnc
  3936  06A4  0AE9               	incf	_dPacketnum+1,f
  3937  06A5  3000               	movlw	0
  3938  06A6  07E9               	addwf	_dPacketnum+1,f
  3939                           
  3940                           ;decode_AX25.c: 210: for(UINT j=0;j<8;j++){
  3941  06A7  01B4               	clrf	waitFlag@j_118
  3942  06A8  01B5               	clrf	waitFlag@j_118+1
  3943  06A9  3000               	movlw	0
  3944  06AA  0235               	subwf	waitFlag@j_118+1,w
  3945  06AB  3008               	movlw	8
  3946  06AC  1903               	skipnz
  3947  06AD  0234               	subwf	waitFlag@j_118,w
  3948  06AE  1803               	btfsc	3,0
  3949  06AF  2ED8               	goto	l2984
  3950  06B0                     l2970:	
  3951                           
  3952                           ;decode_AX25.c: 211: flag_judge = getbit();
  3953  06B0  120A  158A  2289  120A  118A  	fcall	_getbit
  3954  06B5  0871               	movf	?_getbit+1,w
  3955  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  3956  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  3957  06B8  00BB               	movwf	waitFlag@flag_judge+1
  3958  06B9  0870               	movf	?_getbit,w
  3959  06BA  00BA               	movwf	waitFlag@flag_judge
  3960                           
  3961                           ;decode_AX25.c: 212: buf = buf >> 1;
  3962  06BB  083C               	movf	waitFlag@buf,w
  3963  06BC  00F6               	movwf	??_waitFlag
  3964  06BD  1003               	clrc
  3965  06BE  0C76               	rrf	??_waitFlag,w
  3966  06BF  00F7               	movwf	??_waitFlag+1
  3967  06C0  0877               	movf	??_waitFlag+1,w
  3968  06C1  00BC               	movwf	waitFlag@buf
  3969                           
  3970                           ;decode_AX25.c: 214: buf = buf | 0x00;
  3971  06C2  083A               	movf	waitFlag@flag_judge,w
  3972  06C3  043B               	iorwf	waitFlag@flag_judge+1,w
  3973  06C4  1903               	btfsc	3,2
  3974  06C5  2ECB               	goto	l2980
  3975                           
  3976                           ;decode_AX25.c: 216: buf = buf | 0x80;
  3977                           
  3978                           ;decode_AX25.c: 215: }else{
  3979  06C6  083C               	movf	waitFlag@buf,w
  3980  06C7  3880               	iorlw	128
  3981  06C8  00F6               	movwf	??_waitFlag
  3982  06C9  0876               	movf	??_waitFlag,w
  3983  06CA  00BC               	movwf	waitFlag@buf
  3984  06CB                     l2980:	
  3985  06CB  3001               	movlw	1
  3986  06CC  07B4               	addwf	waitFlag@j_118,f
  3987  06CD  1803               	skipnc
  3988  06CE  0AB5               	incf	waitFlag@j_118+1,f
  3989  06CF  3000               	movlw	0
  3990  06D0  07B5               	addwf	waitFlag@j_118+1,f
  3991  06D1  3000               	movlw	0
  3992  06D2  0235               	subwf	waitFlag@j_118+1,w
  3993  06D3  3008               	movlw	8
  3994  06D4  1903               	skipnz
  3995  06D5  0234               	subwf	waitFlag@j_118,w
  3996  06D6  1C03               	skipc
  3997  06D7  2EB0               	goto	l2970
  3998  06D8                     l2984:	
  3999                           
  4000                           ;decode_AX25.c: 217: }
  4001                           ;decode_AX25.c: 218: }
  4002                           ;decode_AX25.c: 219: if(buf == ("JQ1ZHX"[3] << 1)){
  4003  06D8  300B               	movlw	low (((STR_7+3)-__stringbase)| (0+32768))
  4004  06D9  0084               	movwf	4
  4005  06DA  120A  158A  200A  120A  118A  	fcall	stringdir
  4006  06DF  00F6               	movwf	??_waitFlag
  4007  06E0  01F7               	clrf	??_waitFlag+1
  4008  06E1  1003               	clrc
  4009  06E2  0DF6               	rlf	??_waitFlag,f
  4010  06E3  0DF7               	rlf	??_waitFlag+1,f
  4011  06E4  083C               	movf	waitFlag@buf,w
  4012  06E5  00F8               	movwf	??_waitFlag+2
  4013  06E6  01F9               	clrf	??_waitFlag+3
  4014  06E7  0877               	movf	??_waitFlag+1,w
  4015  06E8  0679               	xorwf	??_waitFlag+3,w
  4016  06E9  1D03               	skipz
  4017  06EA  2EED               	goto	u2565
  4018  06EB  0876               	movf	??_waitFlag,w
  4019  06EC  0678               	xorwf	??_waitFlag+2,w
  4020  06ED                     u2565:	
  4021  06ED  1D03               	skipz
  4022  06EE  2FB0               	goto	l3054
  4023                           
  4024                           ;decode_AX25.c: 220: dPacket[dPacketnum] = buf;
  4025  06EF  083C               	movf	waitFlag@buf,w
  4026  06F0  00F6               	movwf	??_waitFlag
  4027  06F1  0868               	movf	_dPacketnum,w
  4028  06F2  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4029  06F3  0084               	movwf	4
  4030  06F4  0876               	movf	??_waitFlag,w
  4031  06F5  1783               	bsf	3,7	;select IRP bank3
  4032  06F6  0080               	movwf	0
  4033                           
  4034                           ;decode_AX25.c: 221: dPacketnum ++;
  4035  06F7  3001               	movlw	1
  4036  06F8  07E8               	addwf	_dPacketnum,f
  4037  06F9  1803               	skipnc
  4038  06FA  0AE9               	incf	_dPacketnum+1,f
  4039  06FB  3000               	movlw	0
  4040  06FC  07E9               	addwf	_dPacketnum+1,f
  4041                           
  4042                           ;decode_AX25.c: 222: for(UINT j=0;j<8;j++){
  4043  06FD  01B6               	clrf	waitFlag@j_120
  4044  06FE  01B7               	clrf	waitFlag@j_120+1
  4045  06FF  3000               	movlw	0
  4046  0700  0237               	subwf	waitFlag@j_120+1,w
  4047  0701  3008               	movlw	8
  4048  0702  1903               	skipnz
  4049  0703  0236               	subwf	waitFlag@j_120,w
  4050  0704  1803               	btfsc	3,0
  4051  0705  2F2E               	goto	l3010
  4052  0706                     l2996:	
  4053                           
  4054                           ;decode_AX25.c: 223: flag_judge = getbit();
  4055  0706  120A  158A  2289  120A  118A  	fcall	_getbit
  4056  070B  0871               	movf	?_getbit+1,w
  4057  070C  1283               	bcf	3,5	;RP0=0, select bank0
  4058  070D  1303               	bcf	3,6	;RP1=0, select bank0
  4059  070E  00BB               	movwf	waitFlag@flag_judge+1
  4060  070F  0870               	movf	?_getbit,w
  4061  0710  00BA               	movwf	waitFlag@flag_judge
  4062                           
  4063                           ;decode_AX25.c: 224: buf = buf >> 1;
  4064  0711  083C               	movf	waitFlag@buf,w
  4065  0712  00F6               	movwf	??_waitFlag
  4066  0713  1003               	clrc
  4067  0714  0C76               	rrf	??_waitFlag,w
  4068  0715  00F7               	movwf	??_waitFlag+1
  4069  0716  0877               	movf	??_waitFlag+1,w
  4070  0717  00BC               	movwf	waitFlag@buf
  4071                           
  4072                           ;decode_AX25.c: 226: buf = buf | 0x00;
  4073  0718  083A               	movf	waitFlag@flag_judge,w
  4074  0719  043B               	iorwf	waitFlag@flag_judge+1,w
  4075  071A  1903               	btfsc	3,2
  4076  071B  2F21               	goto	l3006
  4077                           
  4078                           ;decode_AX25.c: 228: buf = buf | 0x80;
  4079                           
  4080                           ;decode_AX25.c: 227: }else{
  4081  071C  083C               	movf	waitFlag@buf,w
  4082  071D  3880               	iorlw	128
  4083  071E  00F6               	movwf	??_waitFlag
  4084  071F  0876               	movf	??_waitFlag,w
  4085  0720  00BC               	movwf	waitFlag@buf
  4086  0721                     l3006:	
  4087  0721  3001               	movlw	1
  4088  0722  07B6               	addwf	waitFlag@j_120,f
  4089  0723  1803               	skipnc
  4090  0724  0AB7               	incf	waitFlag@j_120+1,f
  4091  0725  3000               	movlw	0
  4092  0726  07B7               	addwf	waitFlag@j_120+1,f
  4093  0727  3000               	movlw	0
  4094  0728  0237               	subwf	waitFlag@j_120+1,w
  4095  0729  3008               	movlw	8
  4096  072A  1903               	skipnz
  4097  072B  0236               	subwf	waitFlag@j_120,w
  4098  072C  1C03               	skipc
  4099  072D  2F06               	goto	l2996
  4100  072E                     l3010:	
  4101                           
  4102                           ;decode_AX25.c: 229: }
  4103                           ;decode_AX25.c: 230: }
  4104                           ;decode_AX25.c: 231: if(buf == ("JQ1ZHX"[4] << 1)){
  4105  072E  300C               	movlw	low (((STR_7+4)-__stringbase)| (0+32768))
  4106  072F  0084               	movwf	4
  4107  0730  120A  158A  200A  120A  118A  	fcall	stringdir
  4108  0735  00F6               	movwf	??_waitFlag
  4109  0736  01F7               	clrf	??_waitFlag+1
  4110  0737  1003               	clrc
  4111  0738  0DF6               	rlf	??_waitFlag,f
  4112  0739  0DF7               	rlf	??_waitFlag+1,f
  4113  073A  083C               	movf	waitFlag@buf,w
  4114  073B  00F8               	movwf	??_waitFlag+2
  4115  073C  01F9               	clrf	??_waitFlag+3
  4116  073D  0877               	movf	??_waitFlag+1,w
  4117  073E  0679               	xorwf	??_waitFlag+3,w
  4118  073F  1D03               	skipz
  4119  0740  2F43               	goto	u2605
  4120  0741  0876               	movf	??_waitFlag,w
  4121  0742  0678               	xorwf	??_waitFlag+2,w
  4122  0743                     u2605:	
  4123  0743  1D03               	skipz
  4124  0744  2FB0               	goto	l3054
  4125                           
  4126                           ;decode_AX25.c: 232: dPacket[dPacketnum] = buf;
  4127  0745  083C               	movf	waitFlag@buf,w
  4128  0746  00F6               	movwf	??_waitFlag
  4129  0747  0868               	movf	_dPacketnum,w
  4130  0748  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4131  0749  0084               	movwf	4
  4132  074A  0876               	movf	??_waitFlag,w
  4133  074B  1783               	bsf	3,7	;select IRP bank3
  4134  074C  0080               	movwf	0
  4135                           
  4136                           ;decode_AX25.c: 233: dPacketnum ++;
  4137  074D  3001               	movlw	1
  4138  074E  07E8               	addwf	_dPacketnum,f
  4139  074F  1803               	skipnc
  4140  0750  0AE9               	incf	_dPacketnum+1,f
  4141  0751  3000               	movlw	0
  4142  0752  07E9               	addwf	_dPacketnum+1,f
  4143                           
  4144                           ;decode_AX25.c: 234: for(UINT j=0;j<8;j++){
  4145  0753  01B8               	clrf	waitFlag@j_122
  4146  0754  01B9               	clrf	waitFlag@j_122+1
  4147  0755  3000               	movlw	0
  4148  0756  0239               	subwf	waitFlag@j_122+1,w
  4149  0757  3008               	movlw	8
  4150  0758  1903               	skipnz
  4151  0759  0238               	subwf	waitFlag@j_122,w
  4152  075A  1803               	btfsc	3,0
  4153  075B  2F84               	goto	l3036
  4154  075C                     l3022:	
  4155                           
  4156                           ;decode_AX25.c: 235: flag_judge = getbit();
  4157  075C  120A  158A  2289  120A  118A  	fcall	_getbit
  4158  0761  0871               	movf	?_getbit+1,w
  4159  0762  1283               	bcf	3,5	;RP0=0, select bank0
  4160  0763  1303               	bcf	3,6	;RP1=0, select bank0
  4161  0764  00BB               	movwf	waitFlag@flag_judge+1
  4162  0765  0870               	movf	?_getbit,w
  4163  0766  00BA               	movwf	waitFlag@flag_judge
  4164                           
  4165                           ;decode_AX25.c: 236: buf = buf >> 1;
  4166  0767  083C               	movf	waitFlag@buf,w
  4167  0768  00F6               	movwf	??_waitFlag
  4168  0769  1003               	clrc
  4169  076A  0C76               	rrf	??_waitFlag,w
  4170  076B  00F7               	movwf	??_waitFlag+1
  4171  076C  0877               	movf	??_waitFlag+1,w
  4172  076D  00BC               	movwf	waitFlag@buf
  4173                           
  4174                           ;decode_AX25.c: 238: buf = buf | 0x00;
  4175  076E  083A               	movf	waitFlag@flag_judge,w
  4176  076F  043B               	iorwf	waitFlag@flag_judge+1,w
  4177  0770  1903               	btfsc	3,2
  4178  0771  2F77               	goto	l3032
  4179                           
  4180                           ;decode_AX25.c: 240: buf = buf | 0x80;
  4181                           
  4182                           ;decode_AX25.c: 239: }else{
  4183  0772  083C               	movf	waitFlag@buf,w
  4184  0773  3880               	iorlw	128
  4185  0774  00F6               	movwf	??_waitFlag
  4186  0775  0876               	movf	??_waitFlag,w
  4187  0776  00BC               	movwf	waitFlag@buf
  4188  0777                     l3032:	
  4189  0777  3001               	movlw	1
  4190  0778  07B8               	addwf	waitFlag@j_122,f
  4191  0779  1803               	skipnc
  4192  077A  0AB9               	incf	waitFlag@j_122+1,f
  4193  077B  3000               	movlw	0
  4194  077C  07B9               	addwf	waitFlag@j_122+1,f
  4195  077D  3000               	movlw	0
  4196  077E  0239               	subwf	waitFlag@j_122+1,w
  4197  077F  3008               	movlw	8
  4198  0780  1903               	skipnz
  4199  0781  0238               	subwf	waitFlag@j_122,w
  4200  0782  1C03               	skipc
  4201  0783  2F5C               	goto	l3022
  4202  0784                     l3036:	
  4203                           
  4204                           ;decode_AX25.c: 241: }
  4205                           ;decode_AX25.c: 242: }
  4206                           ;decode_AX25.c: 243: if(buf == ("JQ1ZHX"[5] << 1)){
  4207  0784  300D               	movlw	low (((STR_7+5)-__stringbase)| (0+32768))
  4208  0785  0084               	movwf	4
  4209  0786  120A  158A  200A  120A  118A  	fcall	stringdir
  4210  078B  00F6               	movwf	??_waitFlag
  4211  078C  01F7               	clrf	??_waitFlag+1
  4212  078D  1003               	clrc
  4213  078E  0DF6               	rlf	??_waitFlag,f
  4214  078F  0DF7               	rlf	??_waitFlag+1,f
  4215  0790  083C               	movf	waitFlag@buf,w
  4216  0791  00F8               	movwf	??_waitFlag+2
  4217  0792  01F9               	clrf	??_waitFlag+3
  4218  0793  0877               	movf	??_waitFlag+1,w
  4219  0794  0679               	xorwf	??_waitFlag+3,w
  4220  0795  1D03               	skipz
  4221  0796  2F99               	goto	u2645
  4222  0797  0876               	movf	??_waitFlag,w
  4223  0798  0678               	xorwf	??_waitFlag+2,w
  4224  0799                     u2645:	
  4225  0799  1D03               	skipz
  4226  079A  2FB0               	goto	l3054
  4227                           
  4228                           ;decode_AX25.c: 244: dPacket[dPacketnum] = buf;
  4229  079B  083C               	movf	waitFlag@buf,w
  4230  079C  00F6               	movwf	??_waitFlag
  4231  079D  0868               	movf	_dPacketnum,w
  4232  079E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4233  079F  0084               	movwf	4
  4234  07A0  0876               	movf	??_waitFlag,w
  4235  07A1  1783               	bsf	3,7	;select IRP bank3
  4236  07A2  0080               	movwf	0
  4237                           
  4238                           ;decode_AX25.c: 245: dPacketnum ++;
  4239  07A3  3001               	movlw	1
  4240  07A4  07E8               	addwf	_dPacketnum,f
  4241  07A5  1803               	skipnc
  4242  07A6  0AE9               	incf	_dPacketnum+1,f
  4243  07A7  3000               	movlw	0
  4244  07A8  07E9               	addwf	_dPacketnum+1,f
  4245                           
  4246                           ;decode_AX25.c: 246: rcv_state ++;
  4247  07A9  3001               	movlw	1
  4248  07AA  07EA               	addwf	_rcv_state,f
  4249  07AB  1803               	skipnc
  4250  07AC  0AEB               	incf	_rcv_state+1,f
  4251  07AD  3000               	movlw	0
  4252  07AE  07EB               	addwf	_rcv_state+1,f
  4253                           
  4254                           ;decode_AX25.c: 247: }else{
  4255  07AF  2B2F               	goto	l3056
  4256  07B0                     l3054:	
  4257                           ;decode_AX25.c: 266: }
  4258                           ;decode_AX25.c: 267: }else{
  4259                           
  4260                           ;decode_AX25.c: 265: rcv_state = 0;
  4261                           
  4262                           ;decode_AX25.c: 264: dPacketnum = 0;
  4263                           
  4264                           ;decode_AX25.c: 262: }
  4265                           ;decode_AX25.c: 263: }else{
  4266                           
  4267                           ;decode_AX25.c: 261: rcv_state = 0;
  4268                           
  4269                           ;decode_AX25.c: 260: dPacketnum = 0;
  4270                           
  4271                           ;decode_AX25.c: 258: }
  4272                           ;decode_AX25.c: 259: }else{
  4273                           
  4274                           ;decode_AX25.c: 257: rcv_state = 0;
  4275                           
  4276                           ;decode_AX25.c: 256: dPacketnum = 0;
  4277                           
  4278                           ;decode_AX25.c: 254: }
  4279                           ;decode_AX25.c: 255: }else{
  4280                           
  4281                           ;decode_AX25.c: 253: rcv_state = 0;
  4282                           
  4283                           ;decode_AX25.c: 252: dPacketnum = 0;
  4284                           
  4285                           ;decode_AX25.c: 250: }
  4286                           ;decode_AX25.c: 251: }else{
  4287                           
  4288                           ;decode_AX25.c: 249: rcv_state = 0;
  4289                           
  4290                           ;decode_AX25.c: 248: dPacketnum = 0;
  4291                           
  4292                           
  4293                           ;decode_AX25.c: 268: dPacketnum = 0;
  4294  07B0  01E8               	clrf	_dPacketnum
  4295  07B1  01E9               	clrf	_dPacketnum+1
  4296  07B2  2B2D               	goto	L6
  4297  07B3                     __end_of_waitFlag:	
  4298                           
  4299                           	psect	text6
  4300  0C30                     __ptext6:	
  4301 ;; *************** function _getdata *****************
  4302 ;; Defined at:
  4303 ;;		line 276 in file "decode_AX25.c"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;		None
  4306 ;; Auto vars:     Size  Location     Type
  4307 ;;  dbitstatus      2    4[BANK0 ] unsigned int 
  4308 ;;  dstuff          2    2[BANK0 ] unsigned int 
  4309 ;;  bufstore_cou    2    0[BANK0 ] unsigned int 
  4310 ;;  buf             1    6[BANK0 ] unsigned char 
  4311 ;;  dammy_data      1    0        unsigned char 
  4312 ;; Return value:  Size  Location     Type
  4313 ;;                  1    wreg      void 
  4314 ;; Registers used:
  4315 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4316 ;; Tracked objects:
  4317 ;;		On entry : 0/0
  4318 ;;		On exit  : 0/0
  4319 ;;		Unchanged: 0/0
  4320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4321 ;;      Params:         0       0       0       0       0
  4322 ;;      Locals:         0       7       0       0       0
  4323 ;;      Temps:          2       0       0       0       0
  4324 ;;      Totals:         2       7       0       0       0
  4325 ;;Total ram usage:        9 bytes
  4326 ;; Hardware stack levels used:    1
  4327 ;; Hardware stack levels required when called:    1
  4328 ;; This function calls:
  4329 ;;		_getbit
  4330 ;; This function is called by:
  4331 ;;		_ReceivePacket_data
  4332 ;;		_ReceivePacket
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           
  4337                           ;psect for function _getdata
  4338  0C30                     _getdata:	
  4339                           
  4340                           ;decode_AX25.c: 277: UBYTE buf = 0x00;
  4341                           
  4342                           ;incstack = 0
  4343                           ; Regs used in _getdata: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4344  0C30  1283               	bcf	3,5	;RP0=0, select bank0
  4345  0C31  1303               	bcf	3,6	;RP1=0, select bank0
  4346  0C32  01A6               	clrf	getdata@buf
  4347                           
  4348                           ;decode_AX25.c: 278: UINT dstuff = 0;
  4349  0C33  01A2               	clrf	getdata@dstuff
  4350  0C34  01A3               	clrf	getdata@dstuff+1
  4351                           
  4352                           ;decode_AX25.c: 279: UBYTE dammy_data;
  4353                           ;decode_AX25.c: 280: UINT bufstore_counter = 0;
  4354  0C35  01A0               	clrf	getdata@bufstore_counter
  4355  0C36  01A1               	clrf	getdata@bufstore_counter+1
  4356                           
  4357                           ;decode_AX25.c: 281: UINT dbitstatus = 0;
  4358  0C37  01A4               	clrf	getdata@dbitstatus
  4359  0C38  01A5               	clrf	getdata@dbitstatus+1
  4360  0C39                     l3090:	
  4361                           ;decode_AX25.c: 283: while(rcv_state == 2){
  4362                           
  4363  0C39  3002               	movlw	2
  4364  0C3A  066A               	xorwf	_rcv_state,w
  4365  0C3B  046B               	iorwf	_rcv_state+1,w
  4366  0C3C  1D03               	btfss	3,2
  4367  0C3D  0008               	return
  4368                           
  4369                           ;decode_AX25.c: 284: dbitstatus = getbit();
  4370  0C3E  120A  158A  2289  120A  158A  	fcall	_getbit
  4371  0C43  0871               	movf	?_getbit+1,w
  4372  0C44  1283               	bcf	3,5	;RP0=0, select bank0
  4373  0C45  1303               	bcf	3,6	;RP1=0, select bank0
  4374  0C46  00A5               	movwf	getdata@dbitstatus+1
  4375  0C47  0870               	movf	?_getbit,w
  4376  0C48  00A4               	movwf	getdata@dbitstatus
  4377                           
  4378                           ;decode_AX25.c: 285: if(dstuff == 5){
  4379  0C49  3005               	movlw	5
  4380  0C4A  0622               	xorwf	getdata@dstuff,w
  4381  0C4B  0423               	iorwf	getdata@dstuff+1,w
  4382  0C4C  1D03               	btfss	3,2
  4383  0C4D  2C5C               	goto	l3072
  4384                           
  4385                           ;decode_AX25.c: 286: if(dbitstatus == 1){
  4386  0C4E  0324               	decf	getdata@dbitstatus,w
  4387  0C4F  0425               	iorwf	getdata@dbitstatus+1,w
  4388  0C50  1D03               	btfss	3,2
  4389  0C51  2C59               	goto	l3070
  4390                           
  4391                           ;decode_AX25.c: 287: rcv_state ++;
  4392  0C52  3001               	movlw	1
  4393  0C53  07EA               	addwf	_rcv_state,f
  4394  0C54  1803               	skipnc
  4395  0C55  0AEB               	incf	_rcv_state+1,f
  4396  0C56  3000               	movlw	0
  4397  0C57  07EB               	addwf	_rcv_state+1,f
  4398                           
  4399                           ;decode_AX25.c: 288: break;
  4400  0C58  0008               	return
  4401  0C59                     l3070:	
  4402                           ;decode_AX25.c: 289: }else{
  4403                           
  4404                           
  4405                           ;decode_AX25.c: 290: dstuff = 0;
  4406  0C59  01A2               	clrf	getdata@dstuff
  4407  0C5A  01A3               	clrf	getdata@dstuff+1
  4408                           
  4409                           ;decode_AX25.c: 291: }
  4410                           ;decode_AX25.c: 292: }else{
  4411  0C5B  2C39               	goto	l3090
  4412  0C5C                     l3072:	
  4413                           
  4414                           ;decode_AX25.c: 293: buf = buf >> 1;
  4415  0C5C  0826               	movf	getdata@buf,w
  4416  0C5D  00F6               	movwf	??_getdata
  4417  0C5E  1003               	clrc
  4418  0C5F  0C76               	rrf	??_getdata,w
  4419  0C60  00F7               	movwf	??_getdata+1
  4420  0C61  0877               	movf	??_getdata+1,w
  4421  0C62  00A6               	movwf	getdata@buf
  4422                           
  4423                           ;decode_AX25.c: 295: buf = buf | 0x00;
  4424  0C63  0824               	movf	getdata@dbitstatus,w
  4425  0C64  0425               	iorwf	getdata@dbitstatus+1,w
  4426  0C65  1D03               	btfss	3,2
  4427  0C66  2C6A               	goto	l3076
  4428                           
  4429                           ;decode_AX25.c: 296: dstuff = 0;
  4430  0C67  01A2               	clrf	getdata@dstuff
  4431  0C68  01A3               	clrf	getdata@dstuff+1
  4432                           
  4433                           ;decode_AX25.c: 297: }else{
  4434  0C69  2C75               	goto	l3080
  4435  0C6A                     l3076:	
  4436                           
  4437                           ;decode_AX25.c: 298: buf = buf | 0x80;
  4438  0C6A  0826               	movf	getdata@buf,w
  4439  0C6B  3880               	iorlw	128
  4440  0C6C  00F6               	movwf	??_getdata
  4441  0C6D  0876               	movf	??_getdata,w
  4442  0C6E  00A6               	movwf	getdata@buf
  4443                           
  4444                           ;decode_AX25.c: 299: dstuff ++;
  4445  0C6F  3001               	movlw	1
  4446  0C70  07A2               	addwf	getdata@dstuff,f
  4447  0C71  1803               	skipnc
  4448  0C72  0AA3               	incf	getdata@dstuff+1,f
  4449  0C73  3000               	movlw	0
  4450  0C74  07A3               	addwf	getdata@dstuff+1,f
  4451  0C75                     l3080:	
  4452                           
  4453                           ;decode_AX25.c: 300: }
  4454                           ;decode_AX25.c: 301: bufstore_counter ++;
  4455  0C75  3001               	movlw	1
  4456  0C76  07A0               	addwf	getdata@bufstore_counter,f
  4457  0C77  1803               	skipnc
  4458  0C78  0AA1               	incf	getdata@bufstore_counter+1,f
  4459  0C79  3000               	movlw	0
  4460  0C7A  07A1               	addwf	getdata@bufstore_counter+1,f
  4461                           
  4462                           ;decode_AX25.c: 302: if(bufstore_counter == 8){
  4463  0C7B  3008               	movlw	8
  4464  0C7C  0620               	xorwf	getdata@bufstore_counter,w
  4465  0C7D  0421               	iorwf	getdata@bufstore_counter+1,w
  4466  0C7E  1D03               	btfss	3,2
  4467  0C7F  2C39               	goto	l3090
  4468                           
  4469                           ;decode_AX25.c: 303: bufstore_counter = 0;
  4470  0C80  01A0               	clrf	getdata@bufstore_counter
  4471  0C81  01A1               	clrf	getdata@bufstore_counter+1
  4472                           
  4473                           ;decode_AX25.c: 304: dPacket[dPacketnum] = buf;
  4474  0C82  0826               	movf	getdata@buf,w
  4475  0C83  00F6               	movwf	??_getdata
  4476  0C84  0868               	movf	_dPacketnum,w
  4477  0C85  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4478  0C86  0084               	movwf	4
  4479  0C87  0876               	movf	??_getdata,w
  4480  0C88  1783               	bsf	3,7	;select IRP bank3
  4481  0C89  0080               	movwf	0
  4482                           
  4483                           ;decode_AX25.c: 305: dPacketnum ++;
  4484  0C8A  3001               	movlw	1
  4485  0C8B  07E8               	addwf	_dPacketnum,f
  4486  0C8C  1803               	skipnc
  4487  0C8D  0AE9               	incf	_dPacketnum+1,f
  4488  0C8E  3000               	movlw	0
  4489  0C8F  07E9               	addwf	_dPacketnum+1,f
  4490  0C90  2C39               	goto	l3090
  4491  0C91                     __end_of_getdata:	
  4492                           
  4493                           	psect	text7
  4494  0A89                     __ptext7:	
  4495 ;; *************** function _getbit *****************
  4496 ;; Defined at:
  4497 ;;		line 39 in file "decode_AX25.c"
  4498 ;; Parameters:    Size  Location     Type
  4499 ;;		None
  4500 ;; Auto vars:     Size  Location     Type
  4501 ;;  i               2    4[COMMON] unsigned int 
  4502 ;; Return value:  Size  Location     Type
  4503 ;;                  2    0[COMMON] unsigned int 
  4504 ;; Registers used:
  4505 ;;		wreg, status,2, status,0
  4506 ;; Tracked objects:
  4507 ;;		On entry : 0/0
  4508 ;;		On exit  : 0/0
  4509 ;;		Unchanged: 0/0
  4510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4511 ;;      Params:         2       0       0       0       0
  4512 ;;      Locals:         2       0       0       0       0
  4513 ;;      Temps:          2       0       0       0       0
  4514 ;;      Totals:         6       0       0       0       0
  4515 ;;Total ram usage:        6 bytes
  4516 ;; Hardware stack levels used:    1
  4517 ;; This function calls:
  4518 ;;		Nothing
  4519 ;; This function is called by:
  4520 ;;		_waitFlag
  4521 ;;		_getdata
  4522 ;;		_conv_DI_UARTRX
  4523 ;; This function uses a non-reentrant model
  4524 ;;
  4525                           
  4526                           
  4527                           ;psect for function _getbit
  4528  0A89                     _getbit:	
  4529                           
  4530                           ;decode_AX25.c: 40: static UINT oldbit;
  4531                           ;decode_AX25.c: 41: oldbit = RB5;
  4532                           
  4533                           ;incstack = 0
  4534                           ; Regs used in _getbit: [wreg+status,2+status,0]
  4535  0A89  1003               	clrc
  4536  0A8A  1283               	bcf	3,5	;RP0=0, select bank0
  4537  0A8B  1303               	bcf	3,6	;RP1=0, select bank0
  4538  0A8C  1A86               	btfsc	6,5	;volatile
  4539  0A8D  1403               	setc
  4540  0A8E  3000               	movlw	0
  4541  0A8F  1803               	skipnc
  4542  0A90  3001               	movlw	1
  4543  0A91  00F2               	movwf	??_getbit
  4544  0A92  01F3               	clrf	??_getbit+1
  4545  0A93  0872               	movf	??_getbit,w
  4546  0A94  1683               	bsf	3,5	;RP0=1, select bank1
  4547  0A95  1303               	bcf	3,6	;RP1=0, select bank1
  4548  0A96  00EC               	movwf	getbit@oldbit^(0+128)
  4549  0A97  0873               	movf	??_getbit+1,w
  4550  0A98  00ED               	movwf	(getbit@oldbit+1)^(0+128)
  4551                           
  4552                           ;decode_AX25.c: 42: for(UINT i=0;i<60;i++){
  4553  0A99  01F4               	clrf	getbit@i
  4554  0A9A  01F5               	clrf	getbit@i+1
  4555  0A9B  3000               	movlw	0
  4556  0A9C  0275               	subwf	getbit@i+1,w
  4557  0A9D  303C               	movlw	60
  4558  0A9E  1903               	skipnz
  4559  0A9F  0274               	subwf	getbit@i,w
  4560  0AA0  1803               	btfsc	3,0
  4561  0AA1  2ACD               	goto	l2536
  4562                           
  4563                           ;decode_AX25.c: 43: if(RB5 != oldbit){
  4564  0AA2  1003               	clrc
  4565  0AA3                     L7:	
  4566  0AA3  1283               	bcf	3,5	;RP0=0, select bank0
  4567  0AA4  1303               	bcf	3,6	;RP1=0, select bank0
  4568  0AA5  1A86               	btfsc	6,5	;volatile
  4569  0AA6  1403               	setc
  4570  0AA7  3000               	movlw	0
  4571  0AA8  1803               	skipnc
  4572  0AA9  3001               	movlw	1
  4573  0AAA  00F2               	movwf	??_getbit
  4574  0AAB  01F3               	clrf	??_getbit+1
  4575  0AAC  1683               	bsf	3,5	;RP0=1, select bank1
  4576  0AAD  1303               	bcf	3,6	;RP1=0, select bank1
  4577  0AAE  086D               	movf	(getbit@oldbit+1)^(0+128),w
  4578  0AAF  0673               	xorwf	??_getbit+1,w
  4579  0AB0  1D03               	skipz
  4580  0AB1  2AB4               	goto	u1875
  4581  0AB2  086C               	movf	getbit@oldbit^(0+128),w
  4582  0AB3  0672               	xorwf	??_getbit,w
  4583  0AB4                     u1875:	
  4584  0AB4  1903               	skipnz
  4585  0AB5  2AC0               	goto	l2534
  4586                           
  4587                           ;decode_AX25.c: 44: _delay((unsigned long)((400)*(10000000/4000000.0)));
  4588  0AB6  30C7               	movlw	199
  4589  0AB7  00F2               	movwf	??_getbit
  4590  0AB8                     u3657:	
  4591  0AB8  2AB9               	nop2
  4592  0AB9  0BF2               	decfsz	??_getbit,f
  4593  0ABA  2AB8               	goto	u3657
  4594  0ABB  2ABC               	nop2
  4595  0ABC  2ABD               	nop2
  4596                           
  4597                           ;decode_AX25.c: 45: return 0;
  4598  0ABD  01F0               	clrf	?_getbit
  4599  0ABE  01F1               	clrf	?_getbit+1
  4600  0ABF  0008               	return
  4601  0AC0                     l2534:	
  4602  0AC0  3001               	movlw	1
  4603  0AC1  07F4               	addwf	getbit@i,f
  4604  0AC2  1803               	skipnc
  4605  0AC3  0AF5               	incf	getbit@i+1,f
  4606  0AC4  3000               	movlw	0
  4607  0AC5  07F5               	addwf	getbit@i+1,f
  4608  0AC6  3000               	movlw	0
  4609  0AC7  0275               	subwf	getbit@i+1,w
  4610  0AC8  303C               	movlw	60
  4611  0AC9  1903               	skipnz
  4612  0ACA  0274               	subwf	getbit@i,w
  4613  0ACB  1C03               	skipc
  4614  0ACC  2AA3               	goto	L7
  4615  0ACD                     l2536:	
  4616                           
  4617                           ;decode_AX25.c: 46: }
  4618                           ;decode_AX25.c: 47: }
  4619                           ;decode_AX25.c: 48: return 1;
  4620  0ACD  3001               	movlw	1
  4621  0ACE  00F0               	movwf	?_getbit
  4622  0ACF  3000               	movlw	0
  4623  0AD0  00F1               	movwf	?_getbit+1
  4624  0AD1  0008               	return
  4625  0AD2                     __end_of_getbit:	
  4626                           
  4627                           	psect	text8
  4628  0D0E                     __ptext8:	
  4629 ;; *************** function _fcscheck *****************
  4630 ;; Defined at:
  4631 ;;		line 311 in file "decode_AX25.c"
  4632 ;; Parameters:    Size  Location     Type
  4633 ;;		None
  4634 ;; Auto vars:     Size  Location     Type
  4635 ;;  i               2    7[COMMON] unsigned int 
  4636 ;;  i               2    5[COMMON] unsigned int 
  4637 ;;  byte            1    9[COMMON] unsigned char 
  4638 ;;  bt              1    4[COMMON] unsigned char 
  4639 ;; Return value:  Size  Location     Type
  4640 ;;                  2    0[COMMON] unsigned int 
  4641 ;; Registers used:
  4642 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4643 ;; Tracked objects:
  4644 ;;		On entry : 0/0
  4645 ;;		On exit  : 0/0
  4646 ;;		Unchanged: 0/0
  4647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4648 ;;      Params:         2       0       0       0       0
  4649 ;;      Locals:         6       0       0       0       0
  4650 ;;      Temps:          2       0       0       0       0
  4651 ;;      Totals:        10       0       0       0       0
  4652 ;;Total ram usage:       10 bytes
  4653 ;; Hardware stack levels used:    1
  4654 ;; This function calls:
  4655 ;;		Nothing
  4656 ;; This function is called by:
  4657 ;;		_ReceivePacket_data
  4658 ;;		_ReceivePacket
  4659 ;; This function uses a non-reentrant model
  4660 ;;
  4661                           
  4662                           
  4663                           ;psect for function _fcscheck
  4664  0D0E                     _fcscheck:	
  4665                           
  4666                           ;decode_AX25.c: 312: UBYTE bt,byte;
  4667                           ;decode_AX25.c: 313: dfcslo = dfcshi = 0xff;
  4668                           
  4669                           ;incstack = 0
  4670                           ; Regs used in _fcscheck: [wreg-fsr0h+status,2+status,0]
  4671  0D0E  30FF               	movlw	255
  4672  0D0F  1283               	bcf	3,5	;RP0=0, select bank0
  4673  0D10  1303               	bcf	3,6	;RP1=0, select bank0
  4674  0D11  00EF               	movwf	_dfcshi
  4675  0D12  00F2               	movwf	??_fcscheck
  4676  0D13  0872               	movf	??_fcscheck,w
  4677  0D14  00EE               	movwf	_dfcslo
  4678                           
  4679                           ;decode_AX25.c: 314: while(rcv_state == 3){
  4680  0D15  3003               	movlw	3
  4681  0D16  066A               	xorwf	_rcv_state,w
  4682  0D17  046B               	iorwf	_rcv_state+1,w
  4683  0D18  1D03               	btfss	3,2
  4684  0D19  0008               	return
  4685                           
  4686                           ;decode_AX25.c: 315: for(UINT i=0;i<dPacketnum-2;i++){
  4687  0D1A  01F5               	clrf	fcscheck@i
  4688  0D1B  01F6               	clrf	fcscheck@i+1
  4689  0D1C                     l3118:	
  4690  0D1C  0868               	movf	_dPacketnum,w
  4691  0D1D  3EFE               	addlw	254
  4692  0D1E  00F2               	movwf	??_fcscheck
  4693  0D1F  0869               	movf	_dPacketnum+1,w
  4694  0D20  1803               	skipnc
  4695  0D21  3E01               	addlw	1
  4696  0D22  3EFF               	addlw	255
  4697  0D23  00F3               	movwf	??_fcscheck+1
  4698  0D24  0873               	movf	??_fcscheck+1,w
  4699  0D25  0276               	subwf	fcscheck@i+1,w
  4700  0D26  1D03               	skipz
  4701  0D27  2D2A               	goto	u2745
  4702  0D28  0872               	movf	??_fcscheck,w
  4703  0D29  0275               	subwf	fcscheck@i,w
  4704  0D2A                     u2745:	
  4705  0D2A  1803               	btfsc	3,0
  4706  0D2B  2D75               	goto	l259
  4707                           
  4708                           ;decode_AX25.c: 316: byte = dPacket[i];
  4709  0D2C  0875               	movf	fcscheck@i,w
  4710  0D2D  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4711  0D2E  0084               	movwf	4
  4712  0D2F  1783               	bsf	3,7	;select IRP bank3
  4713  0D30  0800               	movf	0,w
  4714  0D31  00F2               	movwf	??_fcscheck
  4715  0D32  0872               	movf	??_fcscheck,w
  4716  0D33  00F9               	movwf	fcscheck@byte
  4717                           
  4718                           ;decode_AX25.c: 317: for(UINT i=0;i<8;i++){
  4719  0D34  01F7               	clrf	fcscheck@i_134
  4720  0D35  01F8               	clrf	fcscheck@i_134+1
  4721  0D36  3000               	movlw	0
  4722  0D37  0278               	subwf	fcscheck@i_134+1,w
  4723  0D38  3008               	movlw	8
  4724  0D39  1903               	skipnz
  4725  0D3A  0277               	subwf	fcscheck@i_134,w
  4726  0D3B  1803               	btfsc	3,0
  4727  0D3C  2D6E               	goto	l3116
  4728  0D3D                     l3104:	
  4729                           
  4730                           ;decode_AX25.c: 318: bt = byte & 0x01;
  4731  0D3D  0879               	movf	fcscheck@byte,w
  4732  0D3E  3901               	andlw	1
  4733  0D3F  00F2               	movwf	??_fcscheck
  4734  0D40  0872               	movf	??_fcscheck,w
  4735  0D41  00F4               	movwf	fcscheck@bt
  4736  0D42  1003               	bcf	3,0	;# 
  4737  0D43  0CEF               	rrf	_dfcshi,f	;# 
  4738  0D44  0CEE               	rrf	_dfcslo,f	;# 
  4739                           
  4740                           ;decode_AX25.c: 324: if(((STATUS & 0x01)^bt) == 0x01){
  4741  0D45  3001               	movlw	1
  4742  0D46  1283               	bcf	3,5	;RP0=0, select bank0
  4743  0D47  1303               	bcf	3,6	;RP1=0, select bank0
  4744  0D48  0503               	andwf	3,w	;volatile
  4745  0D49  00F2               	movwf	??_fcscheck
  4746  0D4A  0874               	movf	fcscheck@bt,w
  4747  0D4B  0672               	xorwf	??_fcscheck,w
  4748  0D4C  00F3               	movwf	??_fcscheck+1
  4749  0D4D  0373               	decf	??_fcscheck+1,w
  4750  0D4E  1D03               	btfss	3,2
  4751  0D4F  2D5A               	goto	l3110
  4752                           
  4753                           ;decode_AX25.c: 325: dfcshi = dfcshi ^ 0x84;
  4754  0D50  086F               	movf	_dfcshi,w
  4755  0D51  3A84               	xorlw	132
  4756  0D52  00F2               	movwf	??_fcscheck
  4757  0D53  0872               	movf	??_fcscheck,w
  4758  0D54  00EF               	movwf	_dfcshi
  4759                           
  4760                           ;decode_AX25.c: 326: dfcslo = dfcslo ^ 0x08;
  4761  0D55  086E               	movf	_dfcslo,w
  4762  0D56  3A08               	xorlw	8
  4763  0D57  00F2               	movwf	??_fcscheck
  4764  0D58  0872               	movf	??_fcscheck,w
  4765  0D59  00EE               	movwf	_dfcslo
  4766  0D5A                     l3110:	
  4767                           
  4768                           ;decode_AX25.c: 327: }
  4769                           ;decode_AX25.c: 328: byte = byte >> 1;
  4770  0D5A  0879               	movf	fcscheck@byte,w
  4771  0D5B  00F2               	movwf	??_fcscheck
  4772  0D5C  1003               	clrc
  4773  0D5D  0C72               	rrf	??_fcscheck,w
  4774  0D5E  00F3               	movwf	??_fcscheck+1
  4775  0D5F  0873               	movf	??_fcscheck+1,w
  4776  0D60  00F9               	movwf	fcscheck@byte
  4777  0D61  3001               	movlw	1
  4778  0D62  07F7               	addwf	fcscheck@i_134,f
  4779  0D63  1803               	skipnc
  4780  0D64  0AF8               	incf	fcscheck@i_134+1,f
  4781  0D65  3000               	movlw	0
  4782  0D66  07F8               	addwf	fcscheck@i_134+1,f
  4783  0D67  3000               	movlw	0
  4784  0D68  0278               	subwf	fcscheck@i_134+1,w
  4785  0D69  3008               	movlw	8
  4786  0D6A  1903               	skipnz
  4787  0D6B  0277               	subwf	fcscheck@i_134,w
  4788  0D6C  1C03               	skipc
  4789  0D6D  2D3D               	goto	l3104
  4790  0D6E                     l3116:	
  4791  0D6E  3001               	movlw	1
  4792  0D6F  07F5               	addwf	fcscheck@i,f
  4793  0D70  1803               	skipnc
  4794  0D71  0AF6               	incf	fcscheck@i+1,f
  4795  0D72  3000               	movlw	0
  4796  0D73  07F6               	addwf	fcscheck@i+1,f
  4797  0D74  2D1C               	goto	l3118
  4798  0D75                     l259:	
  4799                           
  4800                           ;decode_AX25.c: 329: }
  4801                           ;decode_AX25.c: 330: }
  4802                           ;decode_AX25.c: 331: dfcslo = dfcslo ^ 0xff;
  4803  0D75  09EE               	comf	_dfcslo,f
  4804                           
  4805                           ;decode_AX25.c: 332: dfcshi = dfcshi ^ 0xff;
  4806  0D76  09EF               	comf	_dfcshi,f
  4807                           
  4808                           ;decode_AX25.c: 335: if((dPacket[dPacketnum-2] == dfcslo) && (dPacket[dPacketnum-1] == d
      +                          fcshi)){
  4809  0D77  0868               	movf	_dPacketnum,w
  4810  0D78  3EFE               	addlw	254
  4811  0D79  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4812  0D7A  0084               	movwf	4
  4813  0D7B  1783               	bsf	3,7	;select IRP bank3
  4814  0D7C  0800               	movf	0,w
  4815  0D7D  066E               	xorwf	_dfcslo,w
  4816  0D7E  1D03               	skipz
  4817  0D7F  2D8D               	goto	l3130
  4818  0D80  0868               	movf	_dPacketnum,w
  4819  0D81  3EFF               	addlw	255
  4820  0D82  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4821  0D83  0084               	movwf	4
  4822  0D84  0800               	movf	0,w
  4823  0D85  066F               	xorwf	_dfcshi,w
  4824  0D86  1D03               	skipz
  4825  0D87  2D8D               	goto	l3130
  4826                           
  4827                           ;decode_AX25.c: 340: return 1;
  4828  0D88  3001               	movlw	1
  4829  0D89  00F0               	movwf	?_fcscheck
  4830  0D8A  3000               	movlw	0
  4831  0D8B  00F1               	movwf	?_fcscheck+1
  4832  0D8C  0008               	return
  4833  0D8D                     l3130:	
  4834                           ;decode_AX25.c: 341: }else{
  4835                           
  4836                           
  4837                           ;decode_AX25.c: 346: return 0;
  4838  0D8D  01F0               	clrf	?_fcscheck
  4839  0D8E  01F1               	clrf	?_fcscheck+1
  4840  0D8F  0008               	return
  4841  0D90                     __end_of_fcscheck:	
  4842                           
  4843                           	psect	text9
  4844  17EE                     __ptext9:	
  4845 ;; *************** function _NM_waddress *****************
  4846 ;; Defined at:
  4847 ;;		line 68 in file "UART.c"
  4848 ;; Parameters:    Size  Location     Type
  4849 ;;  NM_wad_heade    1    wreg     unsigned char 
  4850 ;;  whigh_addres    1    1[COMMON] unsigned char 
  4851 ;;  wlow_address    1    2[COMMON] unsigned char 
  4852 ;; Auto vars:     Size  Location     Type
  4853 ;;  NM_wad_heade    1    3[COMMON] unsigned char 
  4854 ;; Return value:  Size  Location     Type
  4855 ;;                  1    wreg      void 
  4856 ;; Registers used:
  4857 ;;		wreg, status,2, status,0, pclath, cstack
  4858 ;; Tracked objects:
  4859 ;;		On entry : 0/0
  4860 ;;		On exit  : 0/0
  4861 ;;		Unchanged: 0/0
  4862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4863 ;;      Params:         2       0       0       0       0
  4864 ;;      Locals:         1       0       0       0       0
  4865 ;;      Temps:          0       0       0       0       0
  4866 ;;      Totals:         3       0       0       0       0
  4867 ;;Total ram usage:        3 bytes
  4868 ;; Hardware stack levels used:    1
  4869 ;; Hardware stack levels required when called:    1
  4870 ;; This function calls:
  4871 ;;		_putch
  4872 ;; This function is called by:
  4873 ;;		_main
  4874 ;; This function uses a non-reentrant model
  4875 ;;
  4876                           
  4877                           
  4878                           ;psect for function _NM_waddress
  4879  17EE                     _NM_waddress:	
  4880                           
  4881                           ;incstack = 0
  4882                           ; Regs used in _NM_waddress: [wreg+status,2+status,0+pclath+cstack]
  4883                           ;NM_waddress@NM_wad_header stored from wreg
  4884  17EE  00F3               	movwf	NM_waddress@NM_wad_header
  4885                           
  4886                           ;UART.c: 69: putch(NM_wad_header);
  4887  17EF  0873               	movf	NM_waddress@NM_wad_header,w
  4888  17F0  160A  118A  27CD  160A  118A  	fcall	_putch
  4889                           
  4890                           ;UART.c: 70: putch(whigh_address);
  4891  17F5  0871               	movf	NM_waddress@whigh_address,w
  4892  17F6  160A  118A  27CD  160A  118A  	fcall	_putch
  4893                           
  4894                           ;UART.c: 71: putch(wlow_address);
  4895  17FB  0872               	movf	NM_waddress@wlow_address,w
  4896  17FC  160A  118A  27CD   	fcall	_putch
  4897  17FF  0008               	return
  4898  1800                     __end_of_NM_waddress:	
  4899                           
  4900                           	psect	text10
  4901  17CD                     __ptext10:	
  4902 ;; *************** function _putch *****************
  4903 ;; Defined at:
  4904 ;;		line 35 in file "UART.c"
  4905 ;; Parameters:    Size  Location     Type
  4906 ;;  byte            1    wreg     unsigned char 
  4907 ;; Auto vars:     Size  Location     Type
  4908 ;;  byte            1    0[COMMON] unsigned char 
  4909 ;; Return value:  Size  Location     Type
  4910 ;;                  1    wreg      void 
  4911 ;; Registers used:
  4912 ;;		wreg
  4913 ;; Tracked objects:
  4914 ;;		On entry : 0/0
  4915 ;;		On exit  : 0/0
  4916 ;;		Unchanged: 0/0
  4917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4918 ;;      Params:         0       0       0       0       0
  4919 ;;      Locals:         1       0       0       0       0
  4920 ;;      Temps:          0       0       0       0       0
  4921 ;;      Totals:         1       0       0       0       0
  4922 ;;Total ram usage:        1 bytes
  4923 ;; Hardware stack levels used:    1
  4924 ;; This function calls:
  4925 ;;		Nothing
  4926 ;; This function is called by:
  4927 ;;		_NM_waddress
  4928 ;;		_putstr
  4929 ;;		_putcrlf
  4930 ;;		_put_error
  4931 ;;		_put_ok
  4932 ;;		_putAX25
  4933 ;;		_conv_DI_UARTRX
  4934 ;;		_test_Packetmaker
  4935 ;;		_EEPROM_Read
  4936 ;; This function uses a non-reentrant model
  4937 ;;
  4938                           
  4939                           
  4940                           ;psect for function _putch
  4941  17CD                     _putch:	
  4942                           
  4943                           ;incstack = 0
  4944                           ; Regs used in _putch: [wreg]
  4945                           ;putch@byte stored from wreg
  4946  17CD  00F0               	movwf	putch@byte
  4947  17CE                     l56:	
  4948                           ;UART.c: 36: while(!TXIF);
  4949                           
  4950  17CE  1283               	bcf	3,5	;RP0=0, select bank0
  4951  17CF  1303               	bcf	3,6	;RP1=0, select bank0
  4952  17D0  1E0C               	btfss	12,4	;volatile
  4953  17D1  2FCE               	goto	l56
  4954                           
  4955                           ;UART.c: 37: TXREG = byte;
  4956  17D2  0870               	movf	putch@byte,w
  4957  17D3  0099               	movwf	25	;volatile
  4958  17D4  0008               	return
  4959  17D5                     __end_of_putch:	
  4960                           
  4961                           	psect	text11
  4962  084E                     __ptext11:	
  4963 ;; *************** function _Init_SERIAL *****************
  4964 ;; Defined at:
  4965 ;;		line 5 in file "UART.c"
  4966 ;; Parameters:    Size  Location     Type
  4967 ;;		None
  4968 ;; Auto vars:     Size  Location     Type
  4969 ;;		None
  4970 ;; Return value:  Size  Location     Type
  4971 ;;                  1    wreg      void 
  4972 ;; Registers used:
  4973 ;;		wreg
  4974 ;; Tracked objects:
  4975 ;;		On entry : 0/0
  4976 ;;		On exit  : 0/0
  4977 ;;		Unchanged: 0/0
  4978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4979 ;;      Params:         0       0       0       0       0
  4980 ;;      Locals:         0       0       0       0       0
  4981 ;;      Temps:          0       0       0       0       0
  4982 ;;      Totals:         0       0       0       0       0
  4983 ;;Total ram usage:        0 bytes
  4984 ;; Hardware stack levels used:    1
  4985 ;; This function calls:
  4986 ;;		Nothing
  4987 ;; This function is called by:
  4988 ;;		_main
  4989 ;; This function uses a non-reentrant model
  4990 ;;
  4991                           
  4992                           
  4993                           ;psect for function _Init_SERIAL
  4994  084E                     _Init_SERIAL:	
  4995                           
  4996                           ;UART.c: 6: SPBRG = 10;
  4997                           
  4998                           ;incstack = 0
  4999                           ; Regs used in _Init_SERIAL: [wreg]
  5000  084E  300A               	movlw	10
  5001  084F  1683               	bsf	3,5	;RP0=1, select bank1
  5002  0850  1303               	bcf	3,6	;RP1=0, select bank1
  5003  0851  0099               	movwf	25	;volatile
  5004                           
  5005                           ;UART.c: 7: BRGH = 0;
  5006  0852  1118               	bcf	24,2	;volatile
  5007                           
  5008                           ;UART.c: 8: SYNC = 0;
  5009  0853  1218               	bcf	24,4	;volatile
  5010                           
  5011                           ;UART.c: 9: SPEN = 1;
  5012  0854  1283               	bcf	3,5	;RP0=0, select bank0
  5013  0855  1303               	bcf	3,6	;RP1=0, select bank0
  5014  0856  1798               	bsf	24,7	;volatile
  5015                           
  5016                           ;UART.c: 10: CREN = 1;
  5017  0857  1618               	bsf	24,4	;volatile
  5018                           
  5019                           ;UART.c: 11: SREN = 0;
  5020  0858  1298               	bcf	24,5	;volatile
  5021                           
  5022                           ;UART.c: 12: RCIF = 0;
  5023  0859  128C               	bcf	12,5	;volatile
  5024                           
  5025                           ;UART.c: 13: TXIE = 0;
  5026  085A  1683               	bsf	3,5	;RP0=1, select bank1
  5027  085B  1303               	bcf	3,6	;RP1=0, select bank1
  5028  085C  120C               	bcf	12,4	;volatile
  5029                           
  5030                           ;UART.c: 14: RCIE = 1;
  5031  085D  168C               	bsf	12,5	;volatile
  5032                           
  5033                           ;UART.c: 15: TX9 = 0;
  5034  085E  1318               	bcf	24,6	;volatile
  5035                           
  5036                           ;UART.c: 16: RX9 = 0;
  5037  085F  1283               	bcf	3,5	;RP0=0, select bank0
  5038  0860  1303               	bcf	3,6	;RP1=0, select bank0
  5039  0861  1318               	bcf	24,6	;volatile
  5040                           
  5041                           ;UART.c: 17: TXEN = 0;
  5042  0862  1683               	bsf	3,5	;RP0=1, select bank1
  5043  0863  1303               	bcf	3,6	;RP1=0, select bank1
  5044  0864  1298               	bcf	24,5	;volatile
  5045                           
  5046                           ;UART.c: 18: TXEN = 1;
  5047  0865  1698               	bsf	24,5	;volatile
  5048  0866  0008               	return
  5049  0867                     __end_of_Init_SERIAL:	
  5050                           
  5051                           	psect	text12
  5052  0867                     __ptext12:	
  5053 ;; *************** function _Init_MPU *****************
  5054 ;; Defined at:
  5055 ;;		line 8 in file "Init_MPU.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;		None
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;		None
  5060 ;; Return value:  Size  Location     Type
  5061 ;;                  1    wreg      void 
  5062 ;; Registers used:
  5063 ;;		wreg, status,2
  5064 ;; Tracked objects:
  5065 ;;		On entry : 0/0
  5066 ;;		On exit  : 0/0
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5069 ;;      Params:         0       0       0       0       0
  5070 ;;      Locals:         0       0       0       0       0
  5071 ;;      Temps:          0       0       0       0       0
  5072 ;;      Totals:         0       0       0       0       0
  5073 ;;Total ram usage:        0 bytes
  5074 ;; Hardware stack levels used:    1
  5075 ;; This function calls:
  5076 ;;		Nothing
  5077 ;; This function is called by:
  5078 ;;		_main
  5079 ;; This function uses a non-reentrant model
  5080 ;;
  5081                           
  5082                           
  5083                           ;psect for function _Init_MPU
  5084  0867                     _Init_MPU:	
  5085                           
  5086                           ;Init_MPU.c: 11: PORTA = 0x00;
  5087                           
  5088                           ;incstack = 0
  5089                           ; Regs used in _Init_MPU: [wreg+status,2]
  5090  0867  1283               	bcf	3,5	;RP0=0, select bank0
  5091  0868  1303               	bcf	3,6	;RP1=0, select bank0
  5092  0869  0185               	clrf	5	;volatile
  5093                           
  5094                           ;Init_MPU.c: 12: PORTB = 0x00;
  5095  086A  0186               	clrf	6	;volatile
  5096                           
  5097                           ;Init_MPU.c: 13: PORTC = 0x00;
  5098  086B  0187               	clrf	7	;volatile
  5099                           
  5100                           ;Init_MPU.c: 14: PORTD = 0x00;
  5101  086C  0188               	clrf	8	;volatile
  5102                           
  5103                           ;Init_MPU.c: 15: PORTE = 0x00;
  5104  086D  0189               	clrf	9	;volatile
  5105                           
  5106                           ;Init_MPU.c: 18: ANSEL = 0x00;
  5107  086E  1683               	bsf	3,5	;RP0=1, select bank3
  5108  086F  1703               	bsf	3,6	;RP1=1, select bank3
  5109  0870  0188               	clrf	8	;volatile
  5110                           
  5111                           ;Init_MPU.c: 19: ANSELH = 0x00;
  5112  0871  0189               	clrf	9	;volatile
  5113                           
  5114                           ;Init_MPU.c: 23: TRISA = 0b10000000;
  5115  0872  3080               	movlw	128
  5116  0873  1683               	bsf	3,5	;RP0=1, select bank1
  5117  0874  1303               	bcf	3,6	;RP1=0, select bank1
  5118  0875  0085               	movwf	5	;volatile
  5119                           
  5120                           ;Init_MPU.c: 24: TRISB = 0b00000001;
  5121  0876  3001               	movlw	1
  5122  0877  0086               	movwf	6	;volatile
  5123                           
  5124                           ;Init_MPU.c: 25: TRISC = 0b10011000;
  5125  0878  3098               	movlw	152
  5126  0879  0087               	movwf	7	;volatile
  5127                           
  5128                           ;Init_MPU.c: 26: TRISD = 0b00000000;
  5129  087A  0188               	clrf	8	;volatile
  5130                           
  5131                           ;Init_MPU.c: 27: TRISE = 0b00000000;
  5132  087B  0189               	clrf	9	;volatile
  5133                           
  5134                           ;Init_MPU.c: 30: PORTA = 0x00;
  5135  087C  1283               	bcf	3,5	;RP0=0, select bank0
  5136  087D  1303               	bcf	3,6	;RP1=0, select bank0
  5137  087E  0185               	clrf	5	;volatile
  5138                           
  5139                           ;Init_MPU.c: 31: PORTB = 0x00;
  5140  087F  0186               	clrf	6	;volatile
  5141                           
  5142                           ;Init_MPU.c: 32: PORTC = 0x00;
  5143  0880  0187               	clrf	7	;volatile
  5144                           
  5145                           ;Init_MPU.c: 33: PORTD = 0x00;
  5146  0881  0188               	clrf	8	;volatile
  5147                           
  5148                           ;Init_MPU.c: 34: PORTE = 0x00;
  5149  0882  0189               	clrf	9	;volatile
  5150  0883  0008               	return
  5151  0884                     __end_of_Init_MPU:	
  5152                           
  5153                           	psect	text13
  5154  09C9                     __ptext13:	
  5155 ;; *************** function _Init_I2C_M *****************
  5156 ;; Defined at:
  5157 ;;		line 8 in file "I2C.c"
  5158 ;; Parameters:    Size  Location     Type
  5159 ;;  c               4    0[BANK0 ] const unsigned long 
  5160 ;; Auto vars:     Size  Location     Type
  5161 ;;		None
  5162 ;; Return value:  Size  Location     Type
  5163 ;;                  1    wreg      void 
  5164 ;; Registers used:
  5165 ;;		wreg, status,2, status,0, pclath, cstack
  5166 ;; Tracked objects:
  5167 ;;		On entry : 0/0
  5168 ;;		On exit  : 0/0
  5169 ;;		Unchanged: 0/0
  5170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5171 ;;      Params:         0       4       0       0       0
  5172 ;;      Locals:         0       0       0       0       0
  5173 ;;      Temps:          0       4       0       0       0
  5174 ;;      Totals:         0       8       0       0       0
  5175 ;;Total ram usage:        8 bytes
  5176 ;; Hardware stack levels used:    1
  5177 ;; Hardware stack levels required when called:    1
  5178 ;; This function calls:
  5179 ;;		___lldiv
  5180 ;; This function is called by:
  5181 ;;		_main
  5182 ;; This function uses a non-reentrant model
  5183 ;;
  5184                           
  5185                           
  5186                           ;psect for function _Init_I2C_M
  5187  09C9                     _Init_I2C_M:	
  5188                           
  5189                           ;I2C.c: 9: SSPCON = 0b00101000;
  5190                           
  5191                           ;incstack = 0
  5192                           ; Regs used in _Init_I2C_M: [wreg+status,2+status,0+pclath+cstack]
  5193  09C9  3028               	movlw	40
  5194  09CA  1283               	bcf	3,5	;RP0=0, select bank0
  5195  09CB  1303               	bcf	3,6	;RP1=0, select bank0
  5196  09CC  0094               	movwf	20	;volatile
  5197                           
  5198                           ;I2C.c: 10: SSPCON2 = 0;
  5199  09CD  1683               	bsf	3,5	;RP0=1, select bank1
  5200  09CE  1303               	bcf	3,6	;RP1=0, select bank1
  5201  09CF  0191               	clrf	17	;volatile
  5202                           
  5203                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  5204  09D0  1283               	bcf	3,5	;RP0=0, select bank0
  5205  09D1  1303               	bcf	3,6	;RP1=0, select bank0
  5206  09D2  0820               	movf	Init_I2C_M@c,w
  5207  09D3  00A4               	movwf	??_Init_I2C_M
  5208  09D4  0821               	movf	Init_I2C_M@c+1,w
  5209  09D5  00A5               	movwf	??_Init_I2C_M+1
  5210  09D6  0822               	movf	Init_I2C_M@c+2,w
  5211  09D7  00A6               	movwf	??_Init_I2C_M+2
  5212  09D8  0823               	movf	Init_I2C_M@c+3,w
  5213  09D9  00A7               	movwf	??_Init_I2C_M+3
  5214  09DA  3002               	movlw	2
  5215  09DB                     u3155:	
  5216  09DB  1003               	clrc
  5217  09DC  0DA4               	rlf	??_Init_I2C_M,f
  5218  09DD  0DA5               	rlf	??_Init_I2C_M+1,f
  5219  09DE  0DA6               	rlf	??_Init_I2C_M+2,f
  5220  09DF  0DA7               	rlf	??_Init_I2C_M+3,f
  5221  09E0  3EFF               	addlw	-1
  5222  09E1  1D03               	skipz
  5223  09E2  29DB               	goto	u3155
  5224  09E3  0827               	movf	??_Init_I2C_M+3,w
  5225  09E4  00F3               	movwf	___lldiv@divisor+3
  5226  09E5  0826               	movf	??_Init_I2C_M+2,w
  5227  09E6  00F2               	movwf	___lldiv@divisor+2
  5228  09E7  0825               	movf	??_Init_I2C_M+1,w
  5229  09E8  00F1               	movwf	___lldiv@divisor+1
  5230  09E9  0824               	movf	??_Init_I2C_M,w
  5231  09EA  00F0               	movwf	___lldiv@divisor
  5232  09EB  3000               	movlw	0
  5233  09EC  00F7               	movwf	___lldiv@dividend+3
  5234  09ED  3098               	movlw	152
  5235  09EE  00F6               	movwf	___lldiv@dividend+2
  5236  09EF  3096               	movlw	150
  5237  09F0  00F5               	movwf	___lldiv@dividend+1
  5238  09F1  3080               	movlw	128
  5239  09F2  00F4               	movwf	___lldiv@dividend
  5240  09F3  120A  158A  23D2   	fcall	___lldiv
  5241  09F6  0870               	movf	?___lldiv,w
  5242  09F7  3EFF               	addlw	255
  5243  09F8  1683               	bsf	3,5	;RP0=1, select bank1
  5244  09F9  1303               	bcf	3,6	;RP1=0, select bank1
  5245  09FA  0093               	movwf	19	;volatile
  5246                           
  5247                           ;I2C.c: 12: SSPSTAT = 0;
  5248  09FB  0194               	clrf	20	;volatile
  5249  09FC  0008               	return
  5250  09FD                     __end_of_Init_I2C_M:	
  5251                           
  5252                           	psect	text14
  5253  0BD2                     __ptext14:	
  5254 ;; *************** function ___lldiv *****************
  5255 ;; Defined at:
  5256 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  5257 ;; Parameters:    Size  Location     Type
  5258 ;;  divisor         4    0[COMMON] unsigned long 
  5259 ;;  dividend        4    4[COMMON] unsigned long 
  5260 ;; Auto vars:     Size  Location     Type
  5261 ;;  quotient        4    9[COMMON] unsigned long 
  5262 ;;  counter         1   13[COMMON] unsigned char 
  5263 ;; Return value:  Size  Location     Type
  5264 ;;                  4    0[COMMON] unsigned long 
  5265 ;; Registers used:
  5266 ;;		wreg, status,2, status,0
  5267 ;; Tracked objects:
  5268 ;;		On entry : 0/0
  5269 ;;		On exit  : 0/0
  5270 ;;		Unchanged: 0/0
  5271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5272 ;;      Params:         8       0       0       0       0
  5273 ;;      Locals:         5       0       0       0       0
  5274 ;;      Temps:          1       0       0       0       0
  5275 ;;      Totals:        14       0       0       0       0
  5276 ;;Total ram usage:       14 bytes
  5277 ;; Hardware stack levels used:    1
  5278 ;; This function calls:
  5279 ;;		Nothing
  5280 ;; This function is called by:
  5281 ;;		_Init_I2C_M
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           
  5286                           ;psect for function ___lldiv
  5287  0BD2                     ___lldiv:	
  5288                           
  5289                           ;incstack = 0
  5290                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5291  0BD2  3000               	movlw	0
  5292  0BD3  00FC               	movwf	___lldiv@quotient+3
  5293  0BD4  3000               	movlw	0
  5294  0BD5  00FB               	movwf	___lldiv@quotient+2
  5295  0BD6  3000               	movlw	0
  5296  0BD7  00FA               	movwf	___lldiv@quotient+1
  5297  0BD8  3000               	movlw	0
  5298  0BD9  00F9               	movwf	___lldiv@quotient
  5299  0BDA  0873               	movf	___lldiv@divisor+3,w
  5300  0BDB  0472               	iorwf	___lldiv@divisor+2,w
  5301  0BDC  0471               	iorwf	___lldiv@divisor+1,w
  5302  0BDD  0470               	iorwf	___lldiv@divisor,w
  5303  0BDE  1903               	skipnz
  5304  0BDF  2C27               	goto	l3294
  5305  0BE0  01FD               	clrf	___lldiv@counter
  5306  0BE1  0AFD               	incf	___lldiv@counter,f
  5307  0BE2                     l3280:	
  5308  0BE2  1BF3               	btfsc	___lldiv@divisor+3,7
  5309  0BE3  2BF2               	goto	l3282
  5310  0BE4  3001               	movlw	1
  5311  0BE5  00F8               	movwf	??___lldiv
  5312  0BE6                     u3015:	
  5313  0BE6  1003               	clrc
  5314  0BE7  0DF0               	rlf	___lldiv@divisor,f
  5315  0BE8  0DF1               	rlf	___lldiv@divisor+1,f
  5316  0BE9  0DF2               	rlf	___lldiv@divisor+2,f
  5317  0BEA  0DF3               	rlf	___lldiv@divisor+3,f
  5318  0BEB  0BF8               	decfsz	??___lldiv,f
  5319  0BEC  2BE6               	goto	u3015
  5320  0BED  3001               	movlw	1
  5321  0BEE  00F8               	movwf	??___lldiv
  5322  0BEF  0878               	movf	??___lldiv,w
  5323  0BF0  07FD               	addwf	___lldiv@counter,f
  5324  0BF1  2BE2               	goto	l3280
  5325  0BF2                     l3282:	
  5326  0BF2  3001               	movlw	1
  5327  0BF3  00F8               	movwf	??___lldiv
  5328  0BF4                     u3035:	
  5329  0BF4  1003               	clrc
  5330  0BF5  0DF9               	rlf	___lldiv@quotient,f
  5331  0BF6  0DFA               	rlf	___lldiv@quotient+1,f
  5332  0BF7  0DFB               	rlf	___lldiv@quotient+2,f
  5333  0BF8  0DFC               	rlf	___lldiv@quotient+3,f
  5334  0BF9  0BF8               	decfsz	??___lldiv,f
  5335  0BFA  2BF4               	goto	u3035
  5336  0BFB  0873               	movf	___lldiv@divisor+3,w
  5337  0BFC  0277               	subwf	___lldiv@dividend+3,w
  5338  0BFD  1D03               	skipz
  5339  0BFE  2C09               	goto	u3045
  5340  0BFF  0872               	movf	___lldiv@divisor+2,w
  5341  0C00  0276               	subwf	___lldiv@dividend+2,w
  5342  0C01  1D03               	skipz
  5343  0C02  2C09               	goto	u3045
  5344  0C03  0871               	movf	___lldiv@divisor+1,w
  5345  0C04  0275               	subwf	___lldiv@dividend+1,w
  5346  0C05  1D03               	skipz
  5347  0C06  2C09               	goto	u3045
  5348  0C07  0870               	movf	___lldiv@divisor,w
  5349  0C08  0274               	subwf	___lldiv@dividend,w
  5350  0C09                     u3045:	
  5351  0C09  1C03               	skipc
  5352  0C0A  2C1A               	goto	l3290
  5353  0C0B  0870               	movf	___lldiv@divisor,w
  5354  0C0C  02F4               	subwf	___lldiv@dividend,f
  5355  0C0D  0871               	movf	___lldiv@divisor+1,w
  5356  0C0E  1C03               	skipc
  5357  0C0F  0F71               	incfsz	___lldiv@divisor+1,w
  5358  0C10  02F5               	subwf	___lldiv@dividend+1,f
  5359  0C11  0872               	movf	___lldiv@divisor+2,w
  5360  0C12  1C03               	skipc
  5361  0C13  0F72               	incfsz	___lldiv@divisor+2,w
  5362  0C14  02F6               	subwf	___lldiv@dividend+2,f
  5363  0C15  0873               	movf	___lldiv@divisor+3,w
  5364  0C16  1C03               	skipc
  5365  0C17  0F73               	incfsz	___lldiv@divisor+3,w
  5366  0C18  02F7               	subwf	___lldiv@dividend+3,f
  5367  0C19  1479               	bsf	___lldiv@quotient,0
  5368  0C1A                     l3290:	
  5369  0C1A  3001               	movlw	1
  5370  0C1B                     u3055:	
  5371  0C1B  1003               	clrc
  5372  0C1C  0CF3               	rrf	___lldiv@divisor+3,f
  5373  0C1D  0CF2               	rrf	___lldiv@divisor+2,f
  5374  0C1E  0CF1               	rrf	___lldiv@divisor+1,f
  5375  0C1F  0CF0               	rrf	___lldiv@divisor,f
  5376  0C20  3EFF               	addlw	-1
  5377  0C21  1D03               	skipz
  5378  0C22  2C1B               	goto	u3055
  5379  0C23  3001               	movlw	1
  5380  0C24  02FD               	subwf	___lldiv@counter,f
  5381  0C25  1D03               	btfss	3,2
  5382  0C26  2BF2               	goto	l3282
  5383  0C27                     l3294:	
  5384  0C27  087C               	movf	___lldiv@quotient+3,w
  5385  0C28  00F3               	movwf	?___lldiv+3
  5386  0C29  087B               	movf	___lldiv@quotient+2,w
  5387  0C2A  00F2               	movwf	?___lldiv+2
  5388  0C2B  087A               	movf	___lldiv@quotient+1,w
  5389  0C2C  00F1               	movwf	?___lldiv+1
  5390  0C2D  0879               	movf	___lldiv@quotient,w
  5391  0C2E  00F0               	movwf	?___lldiv
  5392  0C2F  0008               	return
  5393  0C30                     __end_of___lldiv:	
  5394                           
  5395                           	psect	text15
  5396  096F                     __ptext15:	
  5397 ;; *************** function _FMTX *****************
  5398 ;; Defined at:
  5399 ;;		line 270 in file "FMCW.c"
  5400 ;; Parameters:    Size  Location     Type
  5401 ;;  Nref            2   60[BANK0 ] int 
  5402 ;;  Nprg            2   62[BANK0 ] PTR int 
  5403 ;;		 -> RAM(512), main@FMTX_Nprg(10), FMTX_Nprg(10), 
  5404 ;; Auto vars:     Size  Location     Type
  5405 ;;  fmtx            2   64[BANK0 ] int 
  5406 ;; Return value:  Size  Location     Type
  5407 ;;                  1    wreg      void 
  5408 ;; Registers used:
  5409 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5410 ;; Tracked objects:
  5411 ;;		On entry : 0/0
  5412 ;;		On exit  : 0/0
  5413 ;;		Unchanged: 0/0
  5414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5415 ;;      Params:         0       4       0       0       0
  5416 ;;      Locals:         0       2       0       0       0
  5417 ;;      Temps:          0       0       0       0       0
  5418 ;;      Totals:         0       6       0       0       0
  5419 ;;Total ram usage:        6 bytes
  5420 ;; Hardware stack levels used:    1
  5421 ;; Hardware stack levels required when called:    3
  5422 ;; This function calls:
  5423 ;;		_OPINIT
  5424 ;;		_OUTFQ
  5425 ;;		_RFDOUT
  5426 ;; This function is called by:
  5427 ;;		_main
  5428 ;;		_SetPLL
  5429 ;; This function uses a non-reentrant model
  5430 ;;
  5431                           
  5432                           
  5433                           ;psect for function _FMTX
  5434  096F                     _FMTX:	
  5435                           
  5436                           ;FMCW.c: 271: int fmtx = 1;
  5437                           
  5438                           ;incstack = 0
  5439                           ; Regs used in _FMTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5440  096F  3001               	movlw	1
  5441  0970  1283               	bcf	3,5	;RP0=0, select bank0
  5442  0971  1303               	bcf	3,6	;RP1=0, select bank0
  5443  0972  00E0               	movwf	FMTX@fmtx
  5444  0973  3000               	movlw	0
  5445  0974  00E1               	movwf	FMTX@fmtx+1
  5446                           
  5447                           ;FMCW.c: 272: OPINIT(fmtx);
  5448  0975  0861               	movf	FMTX@fmtx+1,w
  5449  0976  00F5               	movwf	OPINIT@fmcwtxrx+1
  5450  0977  0860               	movf	FMTX@fmtx,w
  5451  0978  00F4               	movwf	OPINIT@fmcwtxrx
  5452  0979  120A  158A  2491  120A  158A  	fcall	_OPINIT
  5453                           
  5454                           ;FMCW.c: 273: RFDOUT(fmtx, Nref);
  5455  097E  1283               	bcf	3,5	;RP0=0, select bank0
  5456  097F  1303               	bcf	3,6	;RP1=0, select bank0
  5457  0980  0861               	movf	FMTX@fmtx+1,w
  5458  0981  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5459  0982  0860               	movf	FMTX@fmtx,w
  5460  0983  00F9               	movwf	RFDOUT@fmcwtxrx
  5461  0984  085D               	movf	FMTX@Nref+1,w
  5462  0985  00FC               	movwf	RFDOUT@Nref+1
  5463  0986  085C               	movf	FMTX@Nref,w
  5464  0987  00FB               	movwf	RFDOUT@Nref
  5465  0988  120A  158A  2590  120A  158A  	fcall	_RFDOUT
  5466                           
  5467                           ;FMCW.c: 274: OUTFQ(fmtx, Nprg);
  5468  098D  1283               	bcf	3,5	;RP0=0, select bank0
  5469  098E  1303               	bcf	3,6	;RP1=0, select bank0
  5470  098F  0861               	movf	FMTX@fmtx+1,w
  5471  0990  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5472  0991  0860               	movf	FMTX@fmtx,w
  5473  0992  00F9               	movwf	OUTFQ@fmcwtxrx
  5474  0993  085E               	movf	FMTX@Nprg,w
  5475  0994  00FB               	movwf	OUTFQ@Nprg
  5476  0995  085F               	movf	FMTX@Nprg+1,w
  5477  0996  00FC               	movwf	OUTFQ@Nprg+1
  5478  0997  120A  118A  20AC   	fcall	_OUTFQ
  5479  099A  0008               	return
  5480  099B                     __end_of_FMTX:	
  5481                           
  5482                           	psect	text16
  5483  0943                     __ptext16:	
  5484 ;; *************** function _FMRX *****************
  5485 ;; Defined at:
  5486 ;;		line 298 in file "FMCW.c"
  5487 ;; Parameters:    Size  Location     Type
  5488 ;;  Nref            2   60[BANK0 ] int 
  5489 ;;  Nprg            2   62[BANK0 ] PTR int 
  5490 ;;		 -> RAM(512), main@FMRX_Nprg(10), FMRX_Nprg(10), 
  5491 ;; Auto vars:     Size  Location     Type
  5492 ;;  fmrx            2   64[BANK0 ] int 
  5493 ;; Return value:  Size  Location     Type
  5494 ;;                  1    wreg      void 
  5495 ;; Registers used:
  5496 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5497 ;; Tracked objects:
  5498 ;;		On entry : 0/0
  5499 ;;		On exit  : 0/0
  5500 ;;		Unchanged: 0/0
  5501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5502 ;;      Params:         0       4       0       0       0
  5503 ;;      Locals:         0       2       0       0       0
  5504 ;;      Temps:          0       0       0       0       0
  5505 ;;      Totals:         0       6       0       0       0
  5506 ;;Total ram usage:        6 bytes
  5507 ;; Hardware stack levels used:    1
  5508 ;; Hardware stack levels required when called:    3
  5509 ;; This function calls:
  5510 ;;		_OPINIT
  5511 ;;		_OUTFQ
  5512 ;;		_RFDOUT
  5513 ;; This function is called by:
  5514 ;;		_main
  5515 ;;		_SetPLL
  5516 ;; This function uses a non-reentrant model
  5517 ;;
  5518                           
  5519                           
  5520                           ;psect for function _FMRX
  5521  0943                     _FMRX:	
  5522                           
  5523                           ;FMCW.c: 299: int fmrx = 3;
  5524                           
  5525                           ;incstack = 0
  5526                           ; Regs used in _FMRX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5527  0943  3003               	movlw	3
  5528  0944  1283               	bcf	3,5	;RP0=0, select bank0
  5529  0945  1303               	bcf	3,6	;RP1=0, select bank0
  5530  0946  00E0               	movwf	FMRX@fmrx
  5531  0947  3000               	movlw	0
  5532  0948  00E1               	movwf	FMRX@fmrx+1
  5533                           
  5534                           ;FMCW.c: 300: OPINIT(fmrx);
  5535  0949  0861               	movf	FMRX@fmrx+1,w
  5536  094A  00F5               	movwf	OPINIT@fmcwtxrx+1
  5537  094B  0860               	movf	FMRX@fmrx,w
  5538  094C  00F4               	movwf	OPINIT@fmcwtxrx
  5539  094D  120A  158A  2491  120A  158A  	fcall	_OPINIT
  5540                           
  5541                           ;FMCW.c: 301: RFDOUT(fmrx, Nref);
  5542  0952  1283               	bcf	3,5	;RP0=0, select bank0
  5543  0953  1303               	bcf	3,6	;RP1=0, select bank0
  5544  0954  0861               	movf	FMRX@fmrx+1,w
  5545  0955  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5546  0956  0860               	movf	FMRX@fmrx,w
  5547  0957  00F9               	movwf	RFDOUT@fmcwtxrx
  5548  0958  085D               	movf	FMRX@Nref+1,w
  5549  0959  00FC               	movwf	RFDOUT@Nref+1
  5550  095A  085C               	movf	FMRX@Nref,w
  5551  095B  00FB               	movwf	RFDOUT@Nref
  5552  095C  120A  158A  2590  120A  158A  	fcall	_RFDOUT
  5553                           
  5554                           ;FMCW.c: 302: OUTFQ(fmrx, Nprg);
  5555  0961  1283               	bcf	3,5	;RP0=0, select bank0
  5556  0962  1303               	bcf	3,6	;RP1=0, select bank0
  5557  0963  0861               	movf	FMRX@fmrx+1,w
  5558  0964  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5559  0965  0860               	movf	FMRX@fmrx,w
  5560  0966  00F9               	movwf	OUTFQ@fmcwtxrx
  5561  0967  085E               	movf	FMRX@Nprg,w
  5562  0968  00FB               	movwf	OUTFQ@Nprg
  5563  0969  085F               	movf	FMRX@Nprg+1,w
  5564  096A  00FC               	movwf	OUTFQ@Nprg+1
  5565  096B  120A  118A  20AC   	fcall	_OUTFQ
  5566  096E  0008               	return
  5567  096F                     __end_of_FMRX:	
  5568                           
  5569                           	psect	text17
  5570  0B75                     __ptext17:	
  5571 ;; *************** function _EEPROM_Write *****************
  5572 ;; Defined at:
  5573 ;;		line 51 in file "I2C.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;  EEPROM_addre    1    wreg     unsigned char 
  5576 ;;  high_address    1    2[COMMON] unsigned char 
  5577 ;;  low_address     1    3[COMMON] unsigned char 
  5578 ;;  data            1    4[COMMON] PTR unsigned char 
  5579 ;;		 -> NULL(0), dData(32), 
  5580 ;; Auto vars:     Size  Location     Type
  5581 ;;  EEPROM_addre    1    8[COMMON] unsigned char 
  5582 ;;  Address         1    9[COMMON] unsigned char 
  5583 ;; Return value:  Size  Location     Type
  5584 ;;                  1    wreg      void 
  5585 ;; Registers used:
  5586 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5587 ;; Tracked objects:
  5588 ;;		On entry : 0/0
  5589 ;;		On exit  : 0/0
  5590 ;;		Unchanged: 0/0
  5591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5592 ;;      Params:         3       0       0       0       0
  5593 ;;      Locals:         2       0       0       0       0
  5594 ;;      Temps:          3       0       0       0       0
  5595 ;;      Totals:         8       0       0       0       0
  5596 ;;Total ram usage:        8 bytes
  5597 ;; Hardware stack levels used:    1
  5598 ;; Hardware stack levels required when called:    2
  5599 ;; This function calls:
  5600 ;;		_I2C_Master_Start
  5601 ;;		_I2C_Master_Stop
  5602 ;;		_I2C_Master_Write
  5603 ;; This function is called by:
  5604 ;;		_main
  5605 ;; This function uses a non-reentrant model
  5606 ;;
  5607                           
  5608                           
  5609                           ;psect for function _EEPROM_Write
  5610  0B75                     _EEPROM_Write:	
  5611                           
  5612                           ;incstack = 0
  5613                           ; Regs used in _EEPROM_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5614                           ;EEPROM_Write@EEPROM_address stored from wreg
  5615  0B75  00F8               	movwf	EEPROM_Write@EEPROM_address
  5616                           
  5617                           ;I2C.c: 52: UBYTE Address = EEPROM_address << 1;
  5618  0B76  0878               	movf	EEPROM_Write@EEPROM_address,w
  5619  0B77  00F5               	movwf	??_EEPROM_Write
  5620  0B78  0775               	addwf	??_EEPROM_Write,w
  5621  0B79  00F6               	movwf	??_EEPROM_Write+1
  5622  0B7A  0876               	movf	??_EEPROM_Write+1,w
  5623  0B7B  00F9               	movwf	EEPROM_Write@Address
  5624                           
  5625                           ;I2C.c: 55: I2C_Master_Start();
  5626  0B7C  160A  118A  27B7  120A  158A  	fcall	_I2C_Master_Start
  5627                           
  5628                           ;I2C.c: 56: I2C_Master_Write(Address);
  5629  0B81  0879               	movf	EEPROM_Write@Address,w
  5630  0B82  00F5               	movwf	??_EEPROM_Write
  5631  0B83  01F6               	clrf	??_EEPROM_Write+1
  5632  0B84  0875               	movf	??_EEPROM_Write,w
  5633  0B85  00F0               	movwf	I2C_Master_Write@d
  5634  0B86  0876               	movf	??_EEPROM_Write+1,w
  5635  0B87  00F1               	movwf	I2C_Master_Write@d+1
  5636  0B88  160A  118A  27C5  120A  158A  	fcall	_I2C_Master_Write
  5637                           
  5638                           ;I2C.c: 57: I2C_Master_Write(high_address);
  5639  0B8D  0872               	movf	EEPROM_Write@high_address,w
  5640  0B8E  00F5               	movwf	??_EEPROM_Write
  5641  0B8F  01F6               	clrf	??_EEPROM_Write+1
  5642  0B90  0875               	movf	??_EEPROM_Write,w
  5643  0B91  00F0               	movwf	I2C_Master_Write@d
  5644  0B92  0876               	movf	??_EEPROM_Write+1,w
  5645  0B93  00F1               	movwf	I2C_Master_Write@d+1
  5646  0B94  160A  118A  27C5  120A  158A  	fcall	_I2C_Master_Write
  5647                           
  5648                           ;I2C.c: 58: I2C_Master_Write(low_address);
  5649  0B99  0873               	movf	EEPROM_Write@low_address,w
  5650  0B9A  00F5               	movwf	??_EEPROM_Write
  5651  0B9B  01F6               	clrf	??_EEPROM_Write+1
  5652  0B9C  0875               	movf	??_EEPROM_Write,w
  5653  0B9D  00F0               	movwf	I2C_Master_Write@d
  5654  0B9E  0876               	movf	??_EEPROM_Write+1,w
  5655  0B9F  00F1               	movwf	I2C_Master_Write@d+1
  5656  0BA0  160A  118A  27C5  120A  158A  	fcall	_I2C_Master_Write
  5657  0BA5                     l3468:	
  5658                           ;I2C.c: 59: while(*data){
  5659                           
  5660  0BA5  0874               	movf	EEPROM_Write@data,w
  5661  0BA6  0084               	movwf	4
  5662  0BA7  1783               	bsf	3,7	;select IRP bank2
  5663  0BA8  0800               	movf	0,w
  5664  0BA9  1903               	btfsc	3,2
  5665  0BAA  2BBF               	goto	l3470
  5666                           
  5667                           ;I2C.c: 60: I2C_Master_Write(*data);
  5668  0BAB  0874               	movf	EEPROM_Write@data,w
  5669  0BAC  0084               	movwf	4
  5670  0BAD  1783               	bsf	3,7	;select IRP bank2
  5671  0BAE  0800               	movf	0,w
  5672  0BAF  00F5               	movwf	??_EEPROM_Write
  5673  0BB0  01F6               	clrf	??_EEPROM_Write+1
  5674  0BB1  0875               	movf	??_EEPROM_Write,w
  5675  0BB2  00F0               	movwf	I2C_Master_Write@d
  5676  0BB3  0876               	movf	??_EEPROM_Write+1,w
  5677  0BB4  00F1               	movwf	I2C_Master_Write@d+1
  5678  0BB5  160A  118A  27C5  120A  158A  	fcall	_I2C_Master_Write
  5679                           
  5680                           ;I2C.c: 61: ++data;
  5681  0BBA  3001               	movlw	1
  5682  0BBB  00F5               	movwf	??_EEPROM_Write
  5683  0BBC  0875               	movf	??_EEPROM_Write,w
  5684  0BBD  07F4               	addwf	EEPROM_Write@data,f
  5685  0BBE  2BA5               	goto	l3468
  5686  0BBF                     l3470:	
  5687                           
  5688                           ;I2C.c: 62: }
  5689                           ;I2C.c: 63: I2C_Master_Stop();
  5690  0BBF  160A  118A  27BE  120A  158A  	fcall	_I2C_Master_Stop
  5691                           
  5692                           ;I2C.c: 64: _delay((unsigned long)((200)*(10000000/4000.0)));
  5693  0BC4  3003               	movlw	3
  5694  0BC5  00F7               	movwf	??_EEPROM_Write+2
  5695  0BC6  308A               	movlw	138
  5696  0BC7  00F6               	movwf	??_EEPROM_Write+1
  5697  0BC8  3055               	movlw	85
  5698  0BC9  00F5               	movwf	??_EEPROM_Write
  5699  0BCA                     u3667:	
  5700  0BCA  0BF5               	decfsz	??_EEPROM_Write,f
  5701  0BCB  2BCA               	goto	u3667
  5702  0BCC  0BF6               	decfsz	??_EEPROM_Write+1,f
  5703  0BCD  2BCA               	goto	u3667
  5704  0BCE  0BF7               	decfsz	??_EEPROM_Write+2,f
  5705  0BCF  2BCA               	goto	u3667
  5706  0BD0  2BD1               	nop2
  5707  0BD1  0008               	return
  5708  0BD2                     __end_of_EEPROM_Write:	
  5709                           
  5710                           	psect	text18
  5711  17C5                     __ptext18:	
  5712 ;; *************** function _I2C_Master_Write *****************
  5713 ;; Defined at:
  5714 ;;		line 34 in file "I2C.c"
  5715 ;; Parameters:    Size  Location     Type
  5716 ;;  d               2    0[COMMON] unsigned int 
  5717 ;; Auto vars:     Size  Location     Type
  5718 ;;		None
  5719 ;; Return value:  Size  Location     Type
  5720 ;;                  1    wreg      void 
  5721 ;; Registers used:
  5722 ;;		wreg, status,2, status,0, pclath, cstack
  5723 ;; Tracked objects:
  5724 ;;		On entry : 0/0
  5725 ;;		On exit  : 0/0
  5726 ;;		Unchanged: 0/0
  5727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5728 ;;      Params:         2       0       0       0       0
  5729 ;;      Locals:         0       0       0       0       0
  5730 ;;      Temps:          0       0       0       0       0
  5731 ;;      Totals:         2       0       0       0       0
  5732 ;;Total ram usage:        2 bytes
  5733 ;; Hardware stack levels used:    1
  5734 ;; Hardware stack levels required when called:    1
  5735 ;; This function calls:
  5736 ;;		_I2C_Master_Wait
  5737 ;; This function is called by:
  5738 ;;		_EEPROM_Write
  5739 ;;		_EEPROM_Read
  5740 ;; This function uses a non-reentrant model
  5741 ;;
  5742                           
  5743                           
  5744                           ;psect for function _I2C_Master_Write
  5745  17C5                     _I2C_Master_Write:	
  5746                           
  5747                           ;I2C.c: 35: I2C_Master_Wait();
  5748                           
  5749                           ;incstack = 0
  5750                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5751  17C5  120A  158A  2030   	fcall	_I2C_Master_Wait
  5752                           
  5753                           ;I2C.c: 36: SSPBUF = d;
  5754  17C8  0870               	movf	I2C_Master_Write@d,w
  5755  17C9  1283               	bcf	3,5	;RP0=0, select bank0
  5756  17CA  1303               	bcf	3,6	;RP1=0, select bank0
  5757  17CB  0093               	movwf	19	;volatile
  5758  17CC  0008               	return
  5759  17CD                     __end_of_I2C_Master_Write:	
  5760                           
  5761                           	psect	text19
  5762  17BE                     __ptext19:	
  5763 ;; *************** function _I2C_Master_Stop *****************
  5764 ;; Defined at:
  5765 ;;		line 29 in file "I2C.c"
  5766 ;; Parameters:    Size  Location     Type
  5767 ;;		None
  5768 ;; Auto vars:     Size  Location     Type
  5769 ;;		None
  5770 ;; Return value:  Size  Location     Type
  5771 ;;                  1    wreg      void 
  5772 ;; Registers used:
  5773 ;;		wreg, status,2, status,0, pclath, cstack
  5774 ;; Tracked objects:
  5775 ;;		On entry : 0/0
  5776 ;;		On exit  : 0/0
  5777 ;;		Unchanged: 0/0
  5778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5779 ;;      Params:         0       0       0       0       0
  5780 ;;      Locals:         0       0       0       0       0
  5781 ;;      Temps:          0       0       0       0       0
  5782 ;;      Totals:         0       0       0       0       0
  5783 ;;Total ram usage:        0 bytes
  5784 ;; Hardware stack levels used:    1
  5785 ;; Hardware stack levels required when called:    1
  5786 ;; This function calls:
  5787 ;;		_I2C_Master_Wait
  5788 ;; This function is called by:
  5789 ;;		_EEPROM_Write
  5790 ;;		_EEPROM_Read
  5791 ;; This function uses a non-reentrant model
  5792 ;;
  5793                           
  5794                           
  5795                           ;psect for function _I2C_Master_Stop
  5796  17BE                     _I2C_Master_Stop:	
  5797                           
  5798                           ;I2C.c: 30: I2C_Master_Wait();
  5799                           
  5800                           ;incstack = 0
  5801                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5802  17BE  120A  158A  2030   	fcall	_I2C_Master_Wait
  5803                           
  5804                           ;I2C.c: 31: PEN = 1;
  5805  17C1  1683               	bsf	3,5	;RP0=1, select bank1
  5806  17C2  1303               	bcf	3,6	;RP1=0, select bank1
  5807  17C3  1511               	bsf	17,2	;volatile
  5808  17C4  0008               	return
  5809  17C5                     __end_of_I2C_Master_Stop:	
  5810                           
  5811                           	psect	text20
  5812  17B7                     __ptext20:	
  5813 ;; *************** function _I2C_Master_Start *****************
  5814 ;; Defined at:
  5815 ;;		line 19 in file "I2C.c"
  5816 ;; Parameters:    Size  Location     Type
  5817 ;;		None
  5818 ;; Auto vars:     Size  Location     Type
  5819 ;;		None
  5820 ;; Return value:  Size  Location     Type
  5821 ;;                  1    wreg      void 
  5822 ;; Registers used:
  5823 ;;		wreg, status,2, status,0, pclath, cstack
  5824 ;; Tracked objects:
  5825 ;;		On entry : 0/0
  5826 ;;		On exit  : 0/0
  5827 ;;		Unchanged: 0/0
  5828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5829 ;;      Params:         0       0       0       0       0
  5830 ;;      Locals:         0       0       0       0       0
  5831 ;;      Temps:          0       0       0       0       0
  5832 ;;      Totals:         0       0       0       0       0
  5833 ;;Total ram usage:        0 bytes
  5834 ;; Hardware stack levels used:    1
  5835 ;; Hardware stack levels required when called:    1
  5836 ;; This function calls:
  5837 ;;		_I2C_Master_Wait
  5838 ;; This function is called by:
  5839 ;;		_EEPROM_Write
  5840 ;;		_EEPROM_Read
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           
  5845                           ;psect for function _I2C_Master_Start
  5846  17B7                     _I2C_Master_Start:	
  5847                           
  5848                           ;I2C.c: 20: I2C_Master_Wait();
  5849                           
  5850                           ;incstack = 0
  5851                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5852  17B7  120A  158A  2030   	fcall	_I2C_Master_Wait
  5853                           
  5854                           ;I2C.c: 21: SEN = 1;
  5855  17BA  1683               	bsf	3,5	;RP0=1, select bank1
  5856  17BB  1303               	bcf	3,6	;RP1=0, select bank1
  5857  17BC  1411               	bsf	17,0	;volatile
  5858  17BD  0008               	return
  5859  17BE                     __end_of_I2C_Master_Start:	
  5860                           
  5861                           	psect	text21
  5862  0830                     __ptext21:	
  5863 ;; *************** function _I2C_Master_Wait *****************
  5864 ;; Defined at:
  5865 ;;		line 15 in file "I2C.c"
  5866 ;; Parameters:    Size  Location     Type
  5867 ;;		None
  5868 ;; Auto vars:     Size  Location     Type
  5869 ;;		None
  5870 ;; Return value:  Size  Location     Type
  5871 ;;                  1    wreg      void 
  5872 ;; Registers used:
  5873 ;;		wreg, status,2
  5874 ;; Tracked objects:
  5875 ;;		On entry : 0/0
  5876 ;;		On exit  : 0/0
  5877 ;;		Unchanged: 0/0
  5878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5879 ;;      Params:         0       0       0       0       0
  5880 ;;      Locals:         0       0       0       0       0
  5881 ;;      Temps:          0       0       0       0       0
  5882 ;;      Totals:         0       0       0       0       0
  5883 ;;Total ram usage:        0 bytes
  5884 ;; Hardware stack levels used:    1
  5885 ;; This function calls:
  5886 ;;		Nothing
  5887 ;; This function is called by:
  5888 ;;		_I2C_Master_Start
  5889 ;;		_I2C_Master_Stop
  5890 ;;		_I2C_Master_Write
  5891 ;;		_I2C_Master_RepeatedStart
  5892 ;;		_I2C_Master_Read
  5893 ;; This function uses a non-reentrant model
  5894 ;;
  5895                           
  5896                           
  5897                           ;psect for function _I2C_Master_Wait
  5898  0830                     _I2C_Master_Wait:	
  5899  0830                     l467:	
  5900                           ;I2C.c: 16: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5901                           
  5902                           ;incstack = 0
  5903                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5904                           
  5905  0830  1683               	bsf	3,5	;RP0=1, select bank1
  5906  0831  1303               	bcf	3,6	;RP1=0, select bank1
  5907  0832  1914               	btfsc	20,2	;volatile
  5908  0833  2830               	goto	l467
  5909  0834  0811               	movf	17,w	;volatile
  5910  0835  391F               	andlw	31
  5911  0836  1903               	btfsc	3,2
  5912  0837  0008               	return
  5913  0838  2830               	goto	l467
  5914  0839                     __end_of_I2C_Master_Wait:	
  5915                           
  5916                           	psect	text22
  5917  0917                     __ptext22:	
  5918 ;; *************** function _CWTX *****************
  5919 ;; Defined at:
  5920 ;;		line 284 in file "FMCW.c"
  5921 ;; Parameters:    Size  Location     Type
  5922 ;;  Nref            2   60[BANK0 ] int 
  5923 ;;  Nprg            2   62[BANK0 ] PTR int 
  5924 ;;		 -> RAM(512), main@CWTX_Nprg(10), CWTX_Nprg(10), 
  5925 ;; Auto vars:     Size  Location     Type
  5926 ;;  cwtx            2   64[BANK0 ] int 
  5927 ;; Return value:  Size  Location     Type
  5928 ;;                  1    wreg      void 
  5929 ;; Registers used:
  5930 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5931 ;; Tracked objects:
  5932 ;;		On entry : 0/0
  5933 ;;		On exit  : 0/0
  5934 ;;		Unchanged: 0/0
  5935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5936 ;;      Params:         0       4       0       0       0
  5937 ;;      Locals:         0       2       0       0       0
  5938 ;;      Temps:          0       0       0       0       0
  5939 ;;      Totals:         0       6       0       0       0
  5940 ;;Total ram usage:        6 bytes
  5941 ;; Hardware stack levels used:    1
  5942 ;; Hardware stack levels required when called:    3
  5943 ;; This function calls:
  5944 ;;		_OPINIT
  5945 ;;		_OUTFQ
  5946 ;;		_RFDOUT
  5947 ;; This function is called by:
  5948 ;;		_main
  5949 ;;		_SetPLL
  5950 ;; This function uses a non-reentrant model
  5951 ;;
  5952                           
  5953                           
  5954                           ;psect for function _CWTX
  5955  0917                     _CWTX:	
  5956                           
  5957                           ;FMCW.c: 285: int cwtx = 2;
  5958                           
  5959                           ;incstack = 0
  5960                           ; Regs used in _CWTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5961  0917  3002               	movlw	2
  5962  0918  1283               	bcf	3,5	;RP0=0, select bank0
  5963  0919  1303               	bcf	3,6	;RP1=0, select bank0
  5964  091A  00E0               	movwf	CWTX@cwtx
  5965  091B  3000               	movlw	0
  5966  091C  00E1               	movwf	CWTX@cwtx+1
  5967                           
  5968                           ;FMCW.c: 286: OPINIT(cwtx);
  5969  091D  0861               	movf	CWTX@cwtx+1,w
  5970  091E  00F5               	movwf	OPINIT@fmcwtxrx+1
  5971  091F  0860               	movf	CWTX@cwtx,w
  5972  0920  00F4               	movwf	OPINIT@fmcwtxrx
  5973  0921  120A  158A  2491  120A  158A  	fcall	_OPINIT
  5974                           
  5975                           ;FMCW.c: 287: RFDOUT(cwtx, Nref);
  5976  0926  1283               	bcf	3,5	;RP0=0, select bank0
  5977  0927  1303               	bcf	3,6	;RP1=0, select bank0
  5978  0928  0861               	movf	CWTX@cwtx+1,w
  5979  0929  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5980  092A  0860               	movf	CWTX@cwtx,w
  5981  092B  00F9               	movwf	RFDOUT@fmcwtxrx
  5982  092C  085D               	movf	CWTX@Nref+1,w
  5983  092D  00FC               	movwf	RFDOUT@Nref+1
  5984  092E  085C               	movf	CWTX@Nref,w
  5985  092F  00FB               	movwf	RFDOUT@Nref
  5986  0930  120A  158A  2590  120A  158A  	fcall	_RFDOUT
  5987                           
  5988                           ;FMCW.c: 288: OUTFQ(cwtx, Nprg);
  5989  0935  1283               	bcf	3,5	;RP0=0, select bank0
  5990  0936  1303               	bcf	3,6	;RP1=0, select bank0
  5991  0937  0861               	movf	CWTX@cwtx+1,w
  5992  0938  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5993  0939  0860               	movf	CWTX@cwtx,w
  5994  093A  00F9               	movwf	OUTFQ@fmcwtxrx
  5995  093B  085E               	movf	CWTX@Nprg,w
  5996  093C  00FB               	movwf	OUTFQ@Nprg
  5997  093D  085F               	movf	CWTX@Nprg+1,w
  5998  093E  00FC               	movwf	OUTFQ@Nprg+1
  5999  093F  120A  118A  20AC   	fcall	_OUTFQ
  6000  0942  0008               	return
  6001  0943                     __end_of_CWTX:	
  6002                           
  6003                           	psect	text23
  6004  0D90                     __ptext23:	
  6005 ;; *************** function _RFDOUT *****************
  6006 ;; Defined at:
  6007 ;;		line 200 in file "FMCW.c"
  6008 ;; Parameters:    Size  Location     Type
  6009 ;;  fmcwtxrx        2    9[COMMON] int 
  6010 ;;  Nref            2   11[COMMON] int 
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;  i               2   31[BANK0 ] int 
  6013 ;;  i               2   27[BANK0 ] int 
  6014 ;;  i               2   29[BANK0 ] int 
  6015 ;;  Nref_b         24    3[BANK0 ] int [12]
  6016 ;; Return value:  Size  Location     Type
  6017 ;;                  1    wreg      void 
  6018 ;; Registers used:
  6019 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6020 ;; Tracked objects:
  6021 ;;		On entry : 0/0
  6022 ;;		On exit  : 0/0
  6023 ;;		Unchanged: 0/0
  6024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6025 ;;      Params:         4       0       0       0       0
  6026 ;;      Locals:         0      30       0       0       0
  6027 ;;      Temps:          0       3       0       0       0
  6028 ;;      Totals:         4      33       0       0       0
  6029 ;;Total ram usage:       37 bytes
  6030 ;; Hardware stack levels used:    1
  6031 ;; Hardware stack levels required when called:    2
  6032 ;; This function calls:
  6033 ;;		_H_OUT
  6034 ;;		_L_OUT
  6035 ;;		_STBOUT
  6036 ;;		___awdiv
  6037 ;; This function is called by:
  6038 ;;		_FMTX
  6039 ;;		_CWTX
  6040 ;;		_FMRX
  6041 ;; This function uses a non-reentrant model
  6042 ;;
  6043                           
  6044                           
  6045                           ;psect for function _RFDOUT
  6046  0D90                     _RFDOUT:	
  6047                           
  6048                           ;FMCW.c: 201: int Nref_b[12];
  6049                           ;FMCW.c: 203: for(int i=0; i<12; i++){
  6050                           
  6051                           ;incstack = 0
  6052                           ; Regs used in _RFDOUT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6053  0D90  1283               	bcf	3,5	;RP0=0, select bank0
  6054  0D91  1303               	bcf	3,6	;RP1=0, select bank0
  6055  0D92  01BD               	clrf	RFDOUT@i
  6056  0D93  01BE               	clrf	RFDOUT@i+1
  6057  0D94  083E               	movf	RFDOUT@i+1,w
  6058  0D95  3A80               	xorlw	128
  6059  0D96  00FF               	movwf	127
  6060  0D97  3080               	movlw	128
  6061  0D98  027F               	subwf	127,w
  6062  0D99  1D03               	skipz
  6063  0D9A  2D9D               	goto	u2925
  6064  0D9B  300C               	movlw	12
  6065  0D9C  023D               	subwf	RFDOUT@i,w
  6066  0D9D                     u2925:	
  6067  0D9D  1803               	btfsc	3,0
  6068  0D9E  2DBB               	goto	l3238
  6069  0D9F                     l3232:	
  6070                           
  6071                           ;FMCW.c: 204: Nref_b[i] = 0;
  6072  0D9F  1283               	bcf	3,5	;RP0=0, select bank0
  6073  0DA0  1303               	bcf	3,6	;RP1=0, select bank0
  6074  0DA1  083D               	movf	RFDOUT@i,w
  6075  0DA2  00A0               	movwf	??_RFDOUT
  6076  0DA3  0720               	addwf	??_RFDOUT,w
  6077  0DA4  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6078  0DA5  0084               	movwf	4
  6079  0DA6  1383               	bcf	3,7	;select IRP bank0
  6080  0DA7  0180               	clrf	0
  6081  0DA8  0A84               	incf	4,f
  6082  0DA9  0180               	clrf	0
  6083  0DAA  3001               	movlw	1
  6084  0DAB  07BD               	addwf	RFDOUT@i,f
  6085  0DAC  1803               	skipnc
  6086  0DAD  0ABE               	incf	RFDOUT@i+1,f
  6087  0DAE  3000               	movlw	0
  6088  0DAF  07BE               	addwf	RFDOUT@i+1,f
  6089  0DB0  083E               	movf	RFDOUT@i+1,w
  6090  0DB1  3A80               	xorlw	128
  6091  0DB2  00FF               	movwf	127
  6092  0DB3  3080               	movlw	128
  6093  0DB4  027F               	subwf	127,w
  6094  0DB5  1D03               	skipz
  6095  0DB6  2DB9               	goto	u2935
  6096  0DB7  300C               	movlw	12
  6097  0DB8  023D               	subwf	RFDOUT@i,w
  6098  0DB9                     u2935:	
  6099  0DB9  1C03               	skipc
  6100  0DBA  2D9F               	goto	l3232
  6101  0DBB                     l3238:	
  6102                           
  6103                           ;FMCW.c: 205: }
  6104                           ;FMCW.c: 208: for(int i=0; Nref>0; i++){
  6105  0DBB  1283               	bcf	3,5	;RP0=0, select bank0
  6106  0DBC  1303               	bcf	3,6	;RP1=0, select bank0
  6107  0DBD  01BB               	clrf	RFDOUT@i_484
  6108  0DBE  01BC               	clrf	RFDOUT@i_484+1
  6109  0DBF  087C               	movf	RFDOUT@Nref+1,w
  6110  0DC0  3A80               	xorlw	128
  6111  0DC1  00FF               	movwf	127
  6112  0DC2  3080               	movlw	128
  6113  0DC3  027F               	subwf	127,w
  6114  0DC4  1D03               	skipz
  6115  0DC5  2DC8               	goto	u2945
  6116  0DC6  3001               	movlw	1
  6117  0DC7  027B               	subwf	RFDOUT@Nref,w
  6118  0DC8                     u2945:	
  6119  0DC8  1C03               	btfss	3,0
  6120  0DC9  2E01               	goto	l3252
  6121  0DCA                     l3244:	
  6122                           
  6123                           ;FMCW.c: 209: Nref_b[i] = Nref % 2;
  6124  0DCA  3001               	movlw	1
  6125  0DCB  057B               	andwf	RFDOUT@Nref,w
  6126  0DCC  1283               	bcf	3,5	;RP0=0, select bank0
  6127  0DCD  1303               	bcf	3,6	;RP1=0, select bank0
  6128  0DCE  00A0               	movwf	??_RFDOUT
  6129  0DCF  3000               	movlw	0
  6130  0DD0  057C               	andwf	RFDOUT@Nref+1,w
  6131  0DD1  00A1               	movwf	??_RFDOUT+1
  6132  0DD2  083B               	movf	RFDOUT@i_484,w
  6133  0DD3  00A2               	movwf	??_RFDOUT+2
  6134  0DD4  0722               	addwf	??_RFDOUT+2,w
  6135  0DD5  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6136  0DD6  0084               	movwf	4
  6137  0DD7  0820               	movf	??_RFDOUT,w
  6138  0DD8  1383               	bcf	3,7	;select IRP bank0
  6139  0DD9  0080               	movwf	0
  6140  0DDA  0A84               	incf	4,f
  6141  0DDB  0821               	movf	??_RFDOUT+1,w
  6142  0DDC  0080               	movwf	0
  6143                           
  6144                           ;FMCW.c: 210: Nref = Nref / 2;
  6145  0DDD  3002               	movlw	2
  6146  0DDE  00F0               	movwf	___awdiv@divisor
  6147  0DDF  3000               	movlw	0
  6148  0DE0  00F1               	movwf	___awdiv@divisor+1
  6149  0DE1  087C               	movf	RFDOUT@Nref+1,w
  6150  0DE2  00F3               	movwf	___awdiv@dividend+1
  6151  0DE3  087B               	movf	RFDOUT@Nref,w
  6152  0DE4  00F2               	movwf	___awdiv@dividend
  6153  0DE5  120A  158A  231C  120A  158A  	fcall	___awdiv
  6154  0DEA  0871               	movf	?___awdiv+1,w
  6155  0DEB  00FC               	movwf	RFDOUT@Nref+1
  6156  0DEC  0870               	movf	?___awdiv,w
  6157  0DED  00FB               	movwf	RFDOUT@Nref
  6158  0DEE  3001               	movlw	1
  6159  0DEF  1283               	bcf	3,5	;RP0=0, select bank0
  6160  0DF0  1303               	bcf	3,6	;RP1=0, select bank0
  6161  0DF1  07BB               	addwf	RFDOUT@i_484,f
  6162  0DF2  1803               	skipnc
  6163  0DF3  0ABC               	incf	RFDOUT@i_484+1,f
  6164  0DF4  3000               	movlw	0
  6165  0DF5  07BC               	addwf	RFDOUT@i_484+1,f
  6166  0DF6  087C               	movf	RFDOUT@Nref+1,w
  6167  0DF7  3A80               	xorlw	128
  6168  0DF8  00FF               	movwf	127
  6169  0DF9  3080               	movlw	128
  6170  0DFA  027F               	subwf	127,w
  6171  0DFB  1D03               	skipz
  6172  0DFC  2DFF               	goto	u2955
  6173  0DFD  3001               	movlw	1
  6174  0DFE  027B               	subwf	RFDOUT@Nref,w
  6175  0DFF                     u2955:	
  6176  0DFF  1803               	skipnc
  6177  0E00  2DCA               	goto	l3244
  6178  0E01                     l3252:	
  6179                           
  6180                           ;FMCW.c: 211: }
  6181                           ;FMCW.c: 214: for (int i=0; i<12; i++)
  6182  0E01  1283               	bcf	3,5	;RP0=0, select bank0
  6183  0E02  1303               	bcf	3,6	;RP1=0, select bank0
  6184  0E03  01BF               	clrf	RFDOUT@i_485
  6185  0E04  01C0               	clrf	RFDOUT@i_485+1
  6186  0E05  0840               	movf	RFDOUT@i_485+1,w
  6187  0E06  3A80               	xorlw	128
  6188  0E07  00FF               	movwf	127
  6189  0E08  3080               	movlw	128
  6190  0E09  027F               	subwf	127,w
  6191  0E0A  1D03               	skipz
  6192  0E0B  2E0E               	goto	u2965
  6193  0E0C  300C               	movlw	12
  6194  0E0D  023F               	subwf	RFDOUT@i_485,w
  6195  0E0E                     u2965:	
  6196  0E0E  1803               	btfsc	3,0
  6197  0E0F  2E57               	goto	l3270
  6198  0E10                     l3258:	
  6199                           
  6200                           ;FMCW.c: 215: {
  6201                           ;FMCW.c: 216: if(Nref_b[i] == 0)
  6202  0E10  1283               	bcf	3,5	;RP0=0, select bank0
  6203  0E11  1303               	bcf	3,6	;RP1=0, select bank0
  6204  0E12  083F               	movf	RFDOUT@i_485,w
  6205  0E13  00A0               	movwf	??_RFDOUT
  6206  0E14  0720               	addwf	??_RFDOUT,w
  6207  0E15  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6208  0E16  0084               	movwf	4
  6209  0E17  1383               	bcf	3,7	;select IRP bank0
  6210  0E18  0800               	movf	0,w
  6211  0E19  00A1               	movwf	??_RFDOUT+1
  6212  0E1A  0A84               	incf	4,f
  6213  0E1B  0800               	movf	0,w
  6214  0E1C  00A2               	movwf	??_RFDOUT+2
  6215  0E1D  0821               	movf	??_RFDOUT+1,w
  6216  0E1E  0422               	iorwf	??_RFDOUT+2,w
  6217  0E1F  1D03               	btfss	3,2
  6218  0E20  2E2A               	goto	l3262
  6219                           
  6220                           ;FMCW.c: 217: {
  6221                           ;FMCW.c: 218: L_OUT(fmcwtxrx);
  6222  0E21  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6223  0E22  00F3               	movwf	L_OUT@fmcwtxrx+1
  6224  0E23  0879               	movf	RFDOUT@fmcwtxrx,w
  6225  0E24  00F2               	movwf	L_OUT@fmcwtxrx
  6226  0E25  120A  158A  2243  120A  158A  	fcall	_L_OUT
  6227  0E2A                     l3262:	
  6228                           
  6229                           ;FMCW.c: 219: }
  6230                           ;FMCW.c: 220: if(Nref_b[i] == 1)
  6231  0E2A  1283               	bcf	3,5	;RP0=0, select bank0
  6232  0E2B  1303               	bcf	3,6	;RP1=0, select bank0
  6233  0E2C  083F               	movf	RFDOUT@i_485,w
  6234  0E2D  00A0               	movwf	??_RFDOUT
  6235  0E2E  0720               	addwf	??_RFDOUT,w
  6236  0E2F  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6237  0E30  0084               	movwf	4
  6238  0E31  1383               	bcf	3,7	;select IRP bank0
  6239  0E32  0800               	movf	0,w
  6240  0E33  00A1               	movwf	??_RFDOUT+1
  6241  0E34  0A84               	incf	4,f
  6242  0E35  0800               	movf	0,w
  6243  0E36  00A2               	movwf	??_RFDOUT+2
  6244  0E37  0321               	decf	??_RFDOUT+1,w
  6245  0E38  0422               	iorwf	??_RFDOUT+2,w
  6246  0E39  1D03               	btfss	3,2
  6247  0E3A  2E44               	goto	l3266
  6248                           
  6249                           ;FMCW.c: 221: {
  6250                           ;FMCW.c: 222: H_OUT(fmcwtxrx);
  6251  0E3B  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6252  0E3C  00F3               	movwf	H_OUT@fmcwtxrx+1
  6253  0E3D  0879               	movf	RFDOUT@fmcwtxrx,w
  6254  0E3E  00F2               	movwf	H_OUT@fmcwtxrx
  6255  0E3F  120A  158A  21FD  120A  158A  	fcall	_H_OUT
  6256  0E44                     l3266:	
  6257  0E44  3001               	movlw	1
  6258  0E45  1283               	bcf	3,5	;RP0=0, select bank0
  6259  0E46  1303               	bcf	3,6	;RP1=0, select bank0
  6260  0E47  07BF               	addwf	RFDOUT@i_485,f
  6261  0E48  1803               	skipnc
  6262  0E49  0AC0               	incf	RFDOUT@i_485+1,f
  6263  0E4A  3000               	movlw	0
  6264  0E4B  07C0               	addwf	RFDOUT@i_485+1,f
  6265  0E4C  0840               	movf	RFDOUT@i_485+1,w
  6266  0E4D  3A80               	xorlw	128
  6267  0E4E  00FF               	movwf	127
  6268  0E4F  3080               	movlw	128
  6269  0E50  027F               	subwf	127,w
  6270  0E51  1D03               	skipz
  6271  0E52  2E55               	goto	u2995
  6272  0E53  300C               	movlw	12
  6273  0E54  023F               	subwf	RFDOUT@i_485,w
  6274  0E55                     u2995:	
  6275  0E55  1C03               	skipc
  6276  0E56  2E10               	goto	l3258
  6277  0E57                     l3270:	
  6278                           
  6279                           ;FMCW.c: 223: }
  6280                           ;FMCW.c: 224: }
  6281                           ;FMCW.c: 227: H_OUT(fmcwtxrx);
  6282  0E57  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6283  0E58  00F3               	movwf	H_OUT@fmcwtxrx+1
  6284  0E59  0879               	movf	RFDOUT@fmcwtxrx,w
  6285  0E5A  00F2               	movwf	H_OUT@fmcwtxrx
  6286  0E5B  120A  158A  21FD  120A  158A  	fcall	_H_OUT
  6287                           
  6288                           ;FMCW.c: 228: H_OUT(fmcwtxrx);
  6289  0E60  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6290  0E61  00F3               	movwf	H_OUT@fmcwtxrx+1
  6291  0E62  0879               	movf	RFDOUT@fmcwtxrx,w
  6292  0E63  00F2               	movwf	H_OUT@fmcwtxrx
  6293  0E64  120A  158A  21FD  120A  158A  	fcall	_H_OUT
  6294                           
  6295                           ;FMCW.c: 231: STBOUT(fmcwtxrx);
  6296  0E69  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6297  0E6A  00F3               	movwf	STBOUT@fmcwtxrx+1
  6298  0E6B  0879               	movf	RFDOUT@fmcwtxrx,w
  6299  0E6C  00F2               	movwf	STBOUT@fmcwtxrx
  6300  0E6D  120A  158A  219B   	fcall	_STBOUT
  6301  0E70  0008               	return
  6302  0E71                     __end_of_RFDOUT:	
  6303                           
  6304                           	psect	text24
  6305  00AC                     __ptext24:	
  6306 ;; *************** function _OUTFQ *****************
  6307 ;; Defined at:
  6308 ;;		line 136 in file "FMCW.c"
  6309 ;; Parameters:    Size  Location     Type
  6310 ;;  fmcwtxrx        2    9[COMMON] int 
  6311 ;;  Nprg            2   11[COMMON] PTR int 
  6312 ;;		 -> RAM(512), main@FMRX_Nprg(10), main@CWTX_Nprg(10), main@FMTX_Nprg(10), 
  6313 ;;		 -> FMRX_Nprg(10), CWTX_Nprg(10), FMTX_Nprg(10), 
  6314 ;; Auto vars:     Size  Location     Type
  6315 ;;  j               2   58[BANK0 ] int 
  6316 ;;  i               2   56[BANK0 ] int 
  6317 ;;  i               2   50[BANK0 ] int 
  6318 ;;  i               2   54[BANK0 ] int 
  6319 ;;  Nprg_b         34   16[BANK0 ] int [17]
  6320 ;;  count           2   52[BANK0 ] int 
  6321 ;; Return value:  Size  Location     Type
  6322 ;;                  1    wreg      void 
  6323 ;; Registers used:
  6324 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6325 ;; Tracked objects:
  6326 ;;		On entry : 0/0
  6327 ;;		On exit  : 0/0
  6328 ;;		Unchanged: 0/0
  6329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6330 ;;      Params:         4       0       0       0       0
  6331 ;;      Locals:         0      44       0       0       0
  6332 ;;      Temps:          0      16       0       0       0
  6333 ;;      Totals:         4      60       0       0       0
  6334 ;;Total ram usage:       64 bytes
  6335 ;; Hardware stack levels used:    1
  6336 ;; Hardware stack levels required when called:    2
  6337 ;; This function calls:
  6338 ;;		_H_OUT
  6339 ;;		_L_OUT
  6340 ;;		_STBOUT
  6341 ;;		___awdiv
  6342 ;; This function is called by:
  6343 ;;		_FMTX
  6344 ;;		_CWTX
  6345 ;;		_FMRX
  6346 ;; This function uses a non-reentrant model
  6347 ;;
  6348                           
  6349                           
  6350                           ;psect for function _OUTFQ
  6351  00AC                     _OUTFQ:	
  6352                           
  6353                           ;FMCW.c: 137: int count = 0;
  6354                           
  6355                           ;incstack = 0
  6356                           ; Regs used in _OUTFQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6357  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  6358  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  6359  00AE  01D4               	clrf	OUTFQ@count
  6360  00AF  01D5               	clrf	OUTFQ@count+1
  6361                           
  6362                           ;FMCW.c: 138: int Nprg_b[17];
  6363                           ;FMCW.c: 140: for(int i=0; i<17; i++){
  6364  00B0  01D6               	clrf	OUTFQ@i
  6365  00B1  01D7               	clrf	OUTFQ@i+1
  6366  00B2  0857               	movf	OUTFQ@i+1,w
  6367  00B3  3A80               	xorlw	128
  6368  00B4  00FF               	movwf	127
  6369  00B5  3080               	movlw	128
  6370  00B6  027F               	subwf	127,w
  6371  00B7  1D03               	skipz
  6372  00B8  28BB               	goto	u2785
  6373  00B9  3011               	movlw	17
  6374  00BA  0256               	subwf	OUTFQ@i,w
  6375  00BB                     u2785:	
  6376  00BB  1803               	btfsc	3,0
  6377  00BC  28D9               	goto	l3160
  6378  00BD                     l3154:	
  6379                           
  6380                           ;FMCW.c: 141: Nprg_b[i] = 0;
  6381  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  6382  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  6383  00BF  0856               	movf	OUTFQ@i,w
  6384  00C0  00A0               	movwf	??_OUTFQ
  6385  00C1  0720               	addwf	??_OUTFQ,w
  6386  00C2  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6387  00C3  0084               	movwf	4
  6388  00C4  1383               	bcf	3,7	;select IRP bank0
  6389  00C5  0180               	clrf	0
  6390  00C6  0A84               	incf	4,f
  6391  00C7  0180               	clrf	0
  6392  00C8  3001               	movlw	1
  6393  00C9  07D6               	addwf	OUTFQ@i,f
  6394  00CA  1803               	skipnc
  6395  00CB  0AD7               	incf	OUTFQ@i+1,f
  6396  00CC  3000               	movlw	0
  6397  00CD  07D7               	addwf	OUTFQ@i+1,f
  6398  00CE  0857               	movf	OUTFQ@i+1,w
  6399  00CF  3A80               	xorlw	128
  6400  00D0  00FF               	movwf	127
  6401  00D1  3080               	movlw	128
  6402  00D2  027F               	subwf	127,w
  6403  00D3  1D03               	skipz
  6404  00D4  28D7               	goto	u2795
  6405  00D5  3011               	movlw	17
  6406  00D6  0256               	subwf	OUTFQ@i,w
  6407  00D7                     u2795:	
  6408  00D7  1C03               	skipc
  6409  00D8  28BD               	goto	l3154
  6410  00D9                     l3160:	
  6411                           
  6412                           ;FMCW.c: 142: }
  6413                           ;FMCW.c: 145: for(int i = 0; i < 17; i++){
  6414  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  6415  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  6416  00DB  01D2               	clrf	OUTFQ@i_473
  6417  00DC  01D3               	clrf	OUTFQ@i_473+1
  6418  00DD  0853               	movf	OUTFQ@i_473+1,w
  6419  00DE  3A80               	xorlw	128
  6420  00DF  00FF               	movwf	127
  6421  00E0  3080               	movlw	128
  6422  00E1  027F               	subwf	127,w
  6423  00E2  1D03               	skipz
  6424  00E3  28E6               	goto	u2805
  6425  00E4  3011               	movlw	17
  6426  00E5  0252               	subwf	OUTFQ@i_473,w
  6427  00E6                     u2805:	
  6428  00E6  1803               	btfsc	3,0
  6429  00E7  2AB7               	goto	l3206
  6430  00E8                     l3166:	
  6431                           
  6432                           ;FMCW.c: 146: for(int j = 0; j<5; j++){
  6433  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  6434  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  6435  00EA  01DA               	clrf	OUTFQ@j
  6436  00EB  01DB               	clrf	OUTFQ@j+1
  6437  00EC  085B               	movf	OUTFQ@j+1,w
  6438  00ED  3A80               	xorlw	128
  6439  00EE  00FF               	movwf	127
  6440  00EF  3080               	movlw	128
  6441  00F0  027F               	subwf	127,w
  6442  00F1  1D03               	skipz
  6443  00F2  28F5               	goto	u2815
  6444  00F3  3005               	movlw	5
  6445  00F4  025A               	subwf	OUTFQ@j,w
  6446  00F5                     u2815:	
  6447  00F5  1803               	btfsc	3,0
  6448  00F6  2AA4               	goto	l3202
  6449  00F7                     l3172:	
  6450                           
  6451                           ;FMCW.c: 147: if(Nprg[j] % 2 == 0) {
  6452  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  6453  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  6454  00F9  085B               	movf	OUTFQ@j+1,w
  6455  00FA  00A1               	movwf	??_OUTFQ+1
  6456  00FB  085A               	movf	OUTFQ@j,w
  6457  00FC  00A0               	movwf	??_OUTFQ
  6458  00FD  1003               	clrc
  6459  00FE  0DA0               	rlf	??_OUTFQ,f
  6460  00FF  0DA1               	rlf	??_OUTFQ+1,f
  6461  0100  0820               	movf	??_OUTFQ,w
  6462  0101  077B               	addwf	OUTFQ@Nprg,w
  6463  0102  00A2               	movwf	??_OUTFQ+2
  6464  0103  0821               	movf	??_OUTFQ+1,w
  6465  0104  1803               	skipnc
  6466  0105  0A21               	incf	??_OUTFQ+1,w
  6467  0106  077C               	addwf	OUTFQ@Nprg+1,w
  6468  0107  00A3               	movwf	??_OUTFQ+3
  6469  0108  0822               	movf	??_OUTFQ+2,w
  6470  0109  0084               	movwf	4
  6471  010A  1783               	bsf	3,7
  6472  010B  1C23               	btfss	??_OUTFQ+3,0
  6473  010C  1383               	bcf	3,7
  6474  010D  0800               	movf	0,w
  6475  010E  00A4               	movwf	??_OUTFQ+4
  6476  010F  0A84               	incf	4,f
  6477  0110  0800               	movf	0,w
  6478  0111  00A5               	movwf	??_OUTFQ+5
  6479  0112  1824               	btfsc	??_OUTFQ+4,0
  6480  0113  299D               	goto	l3184
  6481                           
  6482                           ;FMCW.c: 148: if(j == 4){
  6483  0114  3004               	movlw	4
  6484  0115  065A               	xorwf	OUTFQ@j,w
  6485  0116  045B               	iorwf	OUTFQ@j+1,w
  6486  0117  1D03               	btfss	3,2
  6487  0118  2960               	goto	l3182
  6488                           
  6489                           ;FMCW.c: 149: Nprg[j] = Nprg[j] / 2;
  6490  0119  3002               	movlw	2
  6491  011A  00F0               	movwf	___awdiv@divisor
  6492  011B  3000               	movlw	0
  6493  011C  00F1               	movwf	___awdiv@divisor+1
  6494  011D  085B               	movf	OUTFQ@j+1,w
  6495  011E  00A1               	movwf	??_OUTFQ+1
  6496  011F  085A               	movf	OUTFQ@j,w
  6497  0120  00A0               	movwf	??_OUTFQ
  6498  0121  1003               	clrc
  6499  0122  0DA0               	rlf	??_OUTFQ,f
  6500  0123  0DA1               	rlf	??_OUTFQ+1,f
  6501  0124  0820               	movf	??_OUTFQ,w
  6502  0125  077B               	addwf	OUTFQ@Nprg,w
  6503  0126  00A2               	movwf	??_OUTFQ+2
  6504  0127  0821               	movf	??_OUTFQ+1,w
  6505  0128  1803               	skipnc
  6506  0129  0A21               	incf	??_OUTFQ+1,w
  6507  012A  077C               	addwf	OUTFQ@Nprg+1,w
  6508  012B  00A3               	movwf	??_OUTFQ+3
  6509  012C  0822               	movf	??_OUTFQ+2,w
  6510  012D  0084               	movwf	4
  6511  012E  1783               	bsf	3,7
  6512  012F  1C23               	btfss	??_OUTFQ+3,0
  6513  0130  1383               	bcf	3,7
  6514  0131  0800               	movf	0,w
  6515  0132  00F2               	movwf	___awdiv@dividend
  6516  0133  0A84               	incf	4,f
  6517  0134  0800               	movf	0,w
  6518  0135  00F3               	movwf	___awdiv@dividend+1
  6519  0136  120A  158A  231C  120A  118A  	fcall	___awdiv
  6520  013B  1283               	bcf	3,5	;RP0=0, select bank0
  6521  013C  1303               	bcf	3,6	;RP1=0, select bank0
  6522  013D  085B               	movf	OUTFQ@j+1,w
  6523  013E  00A5               	movwf	??_OUTFQ+5
  6524  013F  085A               	movf	OUTFQ@j,w
  6525  0140  00A4               	movwf	??_OUTFQ+4
  6526  0141  1003               	clrc
  6527  0142  0DA4               	rlf	??_OUTFQ+4,f
  6528  0143  0DA5               	rlf	??_OUTFQ+5,f
  6529  0144  0824               	movf	??_OUTFQ+4,w
  6530  0145  077B               	addwf	OUTFQ@Nprg,w
  6531  0146  00A6               	movwf	??_OUTFQ+6
  6532  0147  0825               	movf	??_OUTFQ+5,w
  6533  0148  1803               	skipnc
  6534  0149  0A25               	incf	??_OUTFQ+5,w
  6535  014A  077C               	addwf	OUTFQ@Nprg+1,w
  6536  014B  00A7               	movwf	??_OUTFQ+7
  6537  014C  0826               	movf	??_OUTFQ+6,w
  6538  014D  0084               	movwf	4
  6539  014E  1783               	bsf	3,7
  6540  014F  1C27               	btfss	??_OUTFQ+7,0
  6541  0150  1383               	bcf	3,7
  6542  0151  0870               	movf	?___awdiv,w
  6543  0152  0080               	movwf	0
  6544  0153  0A84               	incf	4,f
  6545  0154  0871               	movf	?___awdiv+1,w
  6546  0155  0080               	movwf	0
  6547                           
  6548                           ;FMCW.c: 150: Nprg_b[count] = 0;
  6549  0156  0854               	movf	OUTFQ@count,w
  6550  0157  00A0               	movwf	??_OUTFQ
  6551  0158  0720               	addwf	??_OUTFQ,w
  6552  0159  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6553  015A  0084               	movwf	4
  6554  015B  1383               	bcf	3,7	;select IRP bank0
  6555  015C  0180               	clrf	0
  6556  015D  0A84               	incf	4,f
  6557  015E  0180               	clrf	0
  6558  015F  2A05               	goto	l3192
  6559  0160                     l3182:	
  6560                           ;FMCW.c: 152: }
  6561                           
  6562                           ;FMCW.c: 151: count++;
  6563                           
  6564                           
  6565                           ;FMCW.c: 153: else{
  6566                           ;FMCW.c: 154: Nprg[j] = Nprg[j] / 2;
  6567  0160  3002               	movlw	2
  6568  0161  00F0               	movwf	___awdiv@divisor
  6569  0162  3000               	movlw	0
  6570  0163  00F1               	movwf	___awdiv@divisor+1
  6571  0164  085B               	movf	OUTFQ@j+1,w
  6572  0165  00A1               	movwf	??_OUTFQ+1
  6573  0166  085A               	movf	OUTFQ@j,w
  6574  0167  00A0               	movwf	??_OUTFQ
  6575  0168  1003               	clrc
  6576  0169  0DA0               	rlf	??_OUTFQ,f
  6577  016A  0DA1               	rlf	??_OUTFQ+1,f
  6578  016B  0820               	movf	??_OUTFQ,w
  6579  016C  077B               	addwf	OUTFQ@Nprg,w
  6580  016D  00A2               	movwf	??_OUTFQ+2
  6581  016E  0821               	movf	??_OUTFQ+1,w
  6582  016F  1803               	skipnc
  6583  0170  0A21               	incf	??_OUTFQ+1,w
  6584  0171  077C               	addwf	OUTFQ@Nprg+1,w
  6585  0172  00A3               	movwf	??_OUTFQ+3
  6586  0173  0822               	movf	??_OUTFQ+2,w
  6587  0174  0084               	movwf	4
  6588  0175  1783               	bsf	3,7
  6589  0176  1C23               	btfss	??_OUTFQ+3,0
  6590  0177  1383               	bcf	3,7
  6591  0178  0800               	movf	0,w
  6592  0179  00F2               	movwf	___awdiv@dividend
  6593  017A  0A84               	incf	4,f
  6594  017B  0800               	movf	0,w
  6595  017C  00F3               	movwf	___awdiv@dividend+1
  6596  017D  120A  158A  231C  120A  118A  	fcall	___awdiv
  6597  0182  1283               	bcf	3,5	;RP0=0, select bank0
  6598  0183  1303               	bcf	3,6	;RP1=0, select bank0
  6599  0184  085B               	movf	OUTFQ@j+1,w
  6600  0185  00A5               	movwf	??_OUTFQ+5
  6601  0186  085A               	movf	OUTFQ@j,w
  6602  0187  00A4               	movwf	??_OUTFQ+4
  6603  0188  1003               	clrc
  6604  0189  0DA4               	rlf	??_OUTFQ+4,f
  6605  018A  0DA5               	rlf	??_OUTFQ+5,f
  6606  018B  0824               	movf	??_OUTFQ+4,w
  6607  018C  077B               	addwf	OUTFQ@Nprg,w
  6608  018D  00A6               	movwf	??_OUTFQ+6
  6609  018E  0825               	movf	??_OUTFQ+5,w
  6610  018F  1803               	skipnc
  6611  0190  0A25               	incf	??_OUTFQ+5,w
  6612  0191  077C               	addwf	OUTFQ@Nprg+1,w
  6613  0192  00A7               	movwf	??_OUTFQ+7
  6614  0193  0826               	movf	??_OUTFQ+6,w
  6615  0194  0084               	movwf	4
  6616  0195  1783               	bsf	3,7
  6617  0196  1C27               	btfss	??_OUTFQ+7,0
  6618  0197  1383               	bcf	3,7
  6619  0198  0870               	movf	?___awdiv,w
  6620  0199  0080               	movwf	0
  6621  019A  0A84               	incf	4,f
  6622  019B  0871               	movf	?___awdiv+1,w
  6623  019C  2A92               	goto	L8
  6624  019D                     l3184:	
  6625                           ;FMCW.c: 155: }
  6626                           ;FMCW.c: 156: }
  6627                           
  6628                           
  6629                           ;FMCW.c: 157: else if(Nprg[j] % 2 == 1) {
  6630  019D  085B               	movf	OUTFQ@j+1,w
  6631  019E  00A1               	movwf	??_OUTFQ+1
  6632  019F  085A               	movf	OUTFQ@j,w
  6633  01A0  00A0               	movwf	??_OUTFQ
  6634  01A1  1003               	clrc
  6635  01A2  0DA0               	rlf	??_OUTFQ,f
  6636  01A3  0DA1               	rlf	??_OUTFQ+1,f
  6637  01A4  0820               	movf	??_OUTFQ,w
  6638  01A5  077B               	addwf	OUTFQ@Nprg,w
  6639  01A6  00A2               	movwf	??_OUTFQ+2
  6640  01A7  0821               	movf	??_OUTFQ+1,w
  6641  01A8  1803               	skipnc
  6642  01A9  0A21               	incf	??_OUTFQ+1,w
  6643  01AA  077C               	addwf	OUTFQ@Nprg+1,w
  6644  01AB  00A3               	movwf	??_OUTFQ+3
  6645  01AC  0822               	movf	??_OUTFQ+2,w
  6646  01AD  0084               	movwf	4
  6647  01AE  1783               	bsf	3,7
  6648  01AF  1C23               	btfss	??_OUTFQ+3,0
  6649  01B0  1383               	bcf	3,7
  6650  01B1  0800               	movf	0,w
  6651  01B2  00A4               	movwf	??_OUTFQ+4
  6652  01B3  0A84               	incf	4,f
  6653  01B4  0800               	movf	0,w
  6654  01B5  00A5               	movwf	??_OUTFQ+5
  6655  01B6  1C24               	btfss	??_OUTFQ+4,0
  6656  01B7  2A93               	goto	l3198
  6657                           
  6658                           ;FMCW.c: 158: if(j == 4){
  6659  01B8  3004               	movlw	4
  6660  01B9  065A               	xorwf	OUTFQ@j,w
  6661  01BA  045B               	iorwf	OUTFQ@j+1,w
  6662  01BB  1D03               	btfss	3,2
  6663  01BC  2A0C               	goto	l3194
  6664                           
  6665                           ;FMCW.c: 159: Nprg[j] = Nprg[j] / 2;
  6666  01BD  3002               	movlw	2
  6667  01BE  00F0               	movwf	___awdiv@divisor
  6668  01BF  3000               	movlw	0
  6669  01C0  00F1               	movwf	___awdiv@divisor+1
  6670  01C1  085B               	movf	OUTFQ@j+1,w
  6671  01C2  00A1               	movwf	??_OUTFQ+1
  6672  01C3  085A               	movf	OUTFQ@j,w
  6673  01C4  00A0               	movwf	??_OUTFQ
  6674  01C5  1003               	clrc
  6675  01C6  0DA0               	rlf	??_OUTFQ,f
  6676  01C7  0DA1               	rlf	??_OUTFQ+1,f
  6677  01C8  0820               	movf	??_OUTFQ,w
  6678  01C9  077B               	addwf	OUTFQ@Nprg,w
  6679  01CA  00A2               	movwf	??_OUTFQ+2
  6680  01CB  0821               	movf	??_OUTFQ+1,w
  6681  01CC  1803               	skipnc
  6682  01CD  0A21               	incf	??_OUTFQ+1,w
  6683  01CE  077C               	addwf	OUTFQ@Nprg+1,w
  6684  01CF  00A3               	movwf	??_OUTFQ+3
  6685  01D0  0822               	movf	??_OUTFQ+2,w
  6686  01D1  0084               	movwf	4
  6687  01D2  1783               	bsf	3,7
  6688  01D3  1C23               	btfss	??_OUTFQ+3,0
  6689  01D4  1383               	bcf	3,7
  6690  01D5  0800               	movf	0,w
  6691  01D6  00F2               	movwf	___awdiv@dividend
  6692  01D7  0A84               	incf	4,f
  6693  01D8  0800               	movf	0,w
  6694  01D9  00F3               	movwf	___awdiv@dividend+1
  6695  01DA  120A  158A  231C  120A  118A  	fcall	___awdiv
  6696  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  6697  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  6698  01E1  085B               	movf	OUTFQ@j+1,w
  6699  01E2  00A5               	movwf	??_OUTFQ+5
  6700  01E3  085A               	movf	OUTFQ@j,w
  6701  01E4  00A4               	movwf	??_OUTFQ+4
  6702  01E5  1003               	clrc
  6703  01E6  0DA4               	rlf	??_OUTFQ+4,f
  6704  01E7  0DA5               	rlf	??_OUTFQ+5,f
  6705  01E8  0824               	movf	??_OUTFQ+4,w
  6706  01E9  077B               	addwf	OUTFQ@Nprg,w
  6707  01EA  00A6               	movwf	??_OUTFQ+6
  6708  01EB  0825               	movf	??_OUTFQ+5,w
  6709  01EC  1803               	skipnc
  6710  01ED  0A25               	incf	??_OUTFQ+5,w
  6711  01EE  077C               	addwf	OUTFQ@Nprg+1,w
  6712  01EF  00A7               	movwf	??_OUTFQ+7
  6713  01F0  0826               	movf	??_OUTFQ+6,w
  6714  01F1  0084               	movwf	4
  6715  01F2  1783               	bsf	3,7
  6716  01F3  1C27               	btfss	??_OUTFQ+7,0
  6717  01F4  1383               	bcf	3,7
  6718  01F5  0870               	movf	?___awdiv,w
  6719  01F6  0080               	movwf	0
  6720  01F7  0A84               	incf	4,f
  6721  01F8  0871               	movf	?___awdiv+1,w
  6722  01F9  0080               	movwf	0
  6723                           
  6724                           ;FMCW.c: 160: Nprg_b[count] = 1;
  6725  01FA  0854               	movf	OUTFQ@count,w
  6726  01FB  00A0               	movwf	??_OUTFQ
  6727  01FC  0720               	addwf	??_OUTFQ,w
  6728  01FD  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6729  01FE  0084               	movwf	4
  6730  01FF  3001               	movlw	1
  6731  0200  1383               	bcf	3,7	;select IRP bank0
  6732  0201  0080               	movwf	0
  6733  0202  0A84               	incf	4,f
  6734  0203  3000               	movlw	0
  6735  0204  0080               	movwf	0
  6736  0205                     l3192:	
  6737                           
  6738                           ;FMCW.c: 161: count++;
  6739  0205  3001               	movlw	1
  6740  0206  07D4               	addwf	OUTFQ@count,f
  6741  0207  1803               	skipnc
  6742  0208  0AD5               	incf	OUTFQ@count+1,f
  6743  0209  3000               	movlw	0
  6744  020A  07D5               	addwf	OUTFQ@count+1,f
  6745                           
  6746                           ;FMCW.c: 162: }
  6747  020B  2A93               	goto	l3198
  6748  020C                     l3194:	
  6749                           
  6750                           ;FMCW.c: 163: else{
  6751                           ;FMCW.c: 164: Nprg[j] = Nprg[j] / 2;
  6752  020C  3002               	movlw	2
  6753  020D  00F0               	movwf	___awdiv@divisor
  6754  020E  3000               	movlw	0
  6755  020F  00F1               	movwf	___awdiv@divisor+1
  6756  0210  085B               	movf	OUTFQ@j+1,w
  6757  0211  00A1               	movwf	??_OUTFQ+1
  6758  0212  085A               	movf	OUTFQ@j,w
  6759  0213  00A0               	movwf	??_OUTFQ
  6760  0214  1003               	clrc
  6761  0215  0DA0               	rlf	??_OUTFQ,f
  6762  0216  0DA1               	rlf	??_OUTFQ+1,f
  6763  0217  0820               	movf	??_OUTFQ,w
  6764  0218  077B               	addwf	OUTFQ@Nprg,w
  6765  0219  00A2               	movwf	??_OUTFQ+2
  6766  021A  0821               	movf	??_OUTFQ+1,w
  6767  021B  1803               	skipnc
  6768  021C  0A21               	incf	??_OUTFQ+1,w
  6769  021D  077C               	addwf	OUTFQ@Nprg+1,w
  6770  021E  00A3               	movwf	??_OUTFQ+3
  6771  021F  0822               	movf	??_OUTFQ+2,w
  6772  0220  0084               	movwf	4
  6773  0221  1783               	bsf	3,7
  6774  0222  1C23               	btfss	??_OUTFQ+3,0
  6775  0223  1383               	bcf	3,7
  6776  0224  0800               	movf	0,w
  6777  0225  00F2               	movwf	___awdiv@dividend
  6778  0226  0A84               	incf	4,f
  6779  0227  0800               	movf	0,w
  6780  0228  00F3               	movwf	___awdiv@dividend+1
  6781  0229  120A  158A  231C  120A  118A  	fcall	___awdiv
  6782  022E  1283               	bcf	3,5	;RP0=0, select bank0
  6783  022F  1303               	bcf	3,6	;RP1=0, select bank0
  6784  0230  085B               	movf	OUTFQ@j+1,w
  6785  0231  00A5               	movwf	??_OUTFQ+5
  6786  0232  085A               	movf	OUTFQ@j,w
  6787  0233  00A4               	movwf	??_OUTFQ+4
  6788  0234  1003               	clrc
  6789  0235  0DA4               	rlf	??_OUTFQ+4,f
  6790  0236  0DA5               	rlf	??_OUTFQ+5,f
  6791  0237  0824               	movf	??_OUTFQ+4,w
  6792  0238  077B               	addwf	OUTFQ@Nprg,w
  6793  0239  00A6               	movwf	??_OUTFQ+6
  6794  023A  0825               	movf	??_OUTFQ+5,w
  6795  023B  1803               	skipnc
  6796  023C  0A25               	incf	??_OUTFQ+5,w
  6797  023D  077C               	addwf	OUTFQ@Nprg+1,w
  6798  023E  00A7               	movwf	??_OUTFQ+7
  6799  023F  0826               	movf	??_OUTFQ+6,w
  6800  0240  0084               	movwf	4
  6801  0241  1783               	bsf	3,7
  6802  0242  1C27               	btfss	??_OUTFQ+7,0
  6803  0243  1383               	bcf	3,7
  6804  0244  0870               	movf	?___awdiv,w
  6805  0245  0080               	movwf	0
  6806  0246  0A84               	incf	4,f
  6807  0247  0871               	movf	?___awdiv+1,w
  6808  0248  0080               	movwf	0
  6809                           
  6810                           ;FMCW.c: 165: Nprg[j+1] = Nprg[j+1] + 10;
  6811  0249  085B               	movf	OUTFQ@j+1,w
  6812  024A  00A1               	movwf	??_OUTFQ+1
  6813  024B  085A               	movf	OUTFQ@j,w
  6814  024C  00A0               	movwf	??_OUTFQ
  6815  024D  1003               	clrc
  6816  024E  0DA0               	rlf	??_OUTFQ,f
  6817  024F  0DA1               	rlf	??_OUTFQ+1,f
  6818  0250  0820               	movf	??_OUTFQ,w
  6819  0251  3E02               	addlw	2
  6820  0252  00A2               	movwf	??_OUTFQ+2
  6821  0253  0821               	movf	??_OUTFQ+1,w
  6822  0254  1803               	skipnc
  6823  0255  3E01               	addlw	1
  6824  0256  3E00               	addlw	0
  6825  0257  00A3               	movwf	??_OUTFQ+3
  6826  0258  0822               	movf	??_OUTFQ+2,w
  6827  0259  077B               	addwf	OUTFQ@Nprg,w
  6828  025A  00A4               	movwf	??_OUTFQ+4
  6829  025B  0823               	movf	??_OUTFQ+3,w
  6830  025C  1803               	skipnc
  6831  025D  0A23               	incf	??_OUTFQ+3,w
  6832  025E  077C               	addwf	OUTFQ@Nprg+1,w
  6833  025F  00A5               	movwf	??_OUTFQ+5
  6834  0260  0824               	movf	??_OUTFQ+4,w
  6835  0261  0084               	movwf	4
  6836  0262  1783               	bsf	3,7
  6837  0263  1C25               	btfss	??_OUTFQ+5,0
  6838  0264  1383               	bcf	3,7
  6839  0265  0800               	movf	0,w
  6840  0266  00A6               	movwf	??_OUTFQ+6
  6841  0267  0A84               	incf	4,f
  6842  0268  0800               	movf	0,w
  6843  0269  00A7               	movwf	??_OUTFQ+7
  6844  026A  0826               	movf	??_OUTFQ+6,w
  6845  026B  3E0A               	addlw	10
  6846  026C  00A8               	movwf	??_OUTFQ+8
  6847  026D  0827               	movf	??_OUTFQ+7,w
  6848  026E  1803               	skipnc
  6849  026F  3E01               	addlw	1
  6850  0270  3E00               	addlw	0
  6851  0271  00A9               	movwf	??_OUTFQ+9
  6852  0272  085B               	movf	OUTFQ@j+1,w
  6853  0273  00AB               	movwf	??_OUTFQ+11
  6854  0274  085A               	movf	OUTFQ@j,w
  6855  0275  00AA               	movwf	??_OUTFQ+10
  6856  0276  1003               	clrc
  6857  0277  0DAA               	rlf	??_OUTFQ+10,f
  6858  0278  0DAB               	rlf	??_OUTFQ+11,f
  6859  0279  082A               	movf	??_OUTFQ+10,w
  6860  027A  3E02               	addlw	2
  6861  027B  00AC               	movwf	??_OUTFQ+12
  6862  027C  082B               	movf	??_OUTFQ+11,w
  6863  027D  1803               	skipnc
  6864  027E  3E01               	addlw	1
  6865  027F  3E00               	addlw	0
  6866  0280  00AD               	movwf	??_OUTFQ+13
  6867  0281  082C               	movf	??_OUTFQ+12,w
  6868  0282  077B               	addwf	OUTFQ@Nprg,w
  6869  0283  00AE               	movwf	??_OUTFQ+14
  6870  0284  082D               	movf	??_OUTFQ+13,w
  6871  0285  1803               	skipnc
  6872  0286  0A2D               	incf	??_OUTFQ+13,w
  6873  0287  077C               	addwf	OUTFQ@Nprg+1,w
  6874  0288  00AF               	movwf	??_OUTFQ+15
  6875  0289  082E               	movf	??_OUTFQ+14,w
  6876  028A  0084               	movwf	4
  6877  028B  1783               	bsf	3,7
  6878  028C  1C2F               	btfss	??_OUTFQ+15,0
  6879  028D  1383               	bcf	3,7
  6880  028E  0828               	movf	??_OUTFQ+8,w
  6881  028F  0080               	movwf	0
  6882  0290  0A84               	incf	4,f
  6883  0291  0829               	movf	??_OUTFQ+9,w
  6884  0292                     L8:	
  6885  0292  0080               	movwf	0
  6886  0293                     l3198:	
  6887  0293  3001               	movlw	1
  6888  0294  07DA               	addwf	OUTFQ@j,f
  6889  0295  1803               	skipnc
  6890  0296  0ADB               	incf	OUTFQ@j+1,f
  6891  0297  3000               	movlw	0
  6892  0298  07DB               	addwf	OUTFQ@j+1,f
  6893  0299  085B               	movf	OUTFQ@j+1,w
  6894  029A  3A80               	xorlw	128
  6895  029B  00FF               	movwf	127
  6896  029C  3080               	movlw	128
  6897  029D  027F               	subwf	127,w
  6898  029E  1D03               	skipz
  6899  029F  2AA2               	goto	u2865
  6900  02A0  3005               	movlw	5
  6901  02A1  025A               	subwf	OUTFQ@j,w
  6902  02A2                     u2865:	
  6903  02A2  1C03               	skipc
  6904  02A3  28F7               	goto	l3172
  6905  02A4                     l3202:	
  6906  02A4  3001               	movlw	1
  6907  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  6908  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  6909  02A7  07D2               	addwf	OUTFQ@i_473,f
  6910  02A8  1803               	skipnc
  6911  02A9  0AD3               	incf	OUTFQ@i_473+1,f
  6912  02AA  3000               	movlw	0
  6913  02AB  07D3               	addwf	OUTFQ@i_473+1,f
  6914  02AC  0853               	movf	OUTFQ@i_473+1,w
  6915  02AD  3A80               	xorlw	128
  6916  02AE  00FF               	movwf	127
  6917  02AF  3080               	movlw	128
  6918  02B0  027F               	subwf	127,w
  6919  02B1  1D03               	skipz
  6920  02B2  2AB5               	goto	u2875
  6921  02B3  3011               	movlw	17
  6922  02B4  0252               	subwf	OUTFQ@i_473,w
  6923  02B5                     u2875:	
  6924  02B5  1C03               	skipc
  6925  02B6  28E8               	goto	l3166
  6926  02B7                     l3206:	
  6927                           
  6928                           ;FMCW.c: 166: }
  6929                           ;FMCW.c: 167: }
  6930                           ;FMCW.c: 168: }
  6931                           ;FMCW.c: 169: }
  6932                           ;FMCW.c: 172: for (int i=0; i<17; i++)
  6933  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  6934  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  6935  02B9  01D8               	clrf	OUTFQ@i_475
  6936  02BA  01D9               	clrf	OUTFQ@i_475+1
  6937  02BB  0859               	movf	OUTFQ@i_475+1,w
  6938  02BC  3A80               	xorlw	128
  6939  02BD  00FF               	movwf	127
  6940  02BE  3080               	movlw	128
  6941  02BF  027F               	subwf	127,w
  6942  02C0  1D03               	skipz
  6943  02C1  2AC4               	goto	u2885
  6944  02C2  3011               	movlw	17
  6945  02C3  0258               	subwf	OUTFQ@i_475,w
  6946  02C4                     u2885:	
  6947  02C4  1803               	btfsc	3,0
  6948  02C5  2B0D               	goto	l3224
  6949  02C6                     l3212:	
  6950                           
  6951                           ;FMCW.c: 173: {
  6952                           ;FMCW.c: 174: if(Nprg_b[i] == 0)
  6953  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  6954  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  6955  02C8  0858               	movf	OUTFQ@i_475,w
  6956  02C9  00A0               	movwf	??_OUTFQ
  6957  02CA  0720               	addwf	??_OUTFQ,w
  6958  02CB  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6959  02CC  0084               	movwf	4
  6960  02CD  1383               	bcf	3,7	;select IRP bank0
  6961  02CE  0800               	movf	0,w
  6962  02CF  00A1               	movwf	??_OUTFQ+1
  6963  02D0  0A84               	incf	4,f
  6964  02D1  0800               	movf	0,w
  6965  02D2  00A2               	movwf	??_OUTFQ+2
  6966  02D3  0821               	movf	??_OUTFQ+1,w
  6967  02D4  0422               	iorwf	??_OUTFQ+2,w
  6968  02D5  1D03               	btfss	3,2
  6969  02D6  2AE0               	goto	l3216
  6970                           
  6971                           ;FMCW.c: 175: {
  6972                           ;FMCW.c: 176: L_OUT(fmcwtxrx);
  6973  02D7  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6974  02D8  00F3               	movwf	L_OUT@fmcwtxrx+1
  6975  02D9  0879               	movf	OUTFQ@fmcwtxrx,w
  6976  02DA  00F2               	movwf	L_OUT@fmcwtxrx
  6977  02DB  120A  158A  2243  120A  118A  	fcall	_L_OUT
  6978  02E0                     l3216:	
  6979                           
  6980                           ;FMCW.c: 177: }
  6981                           ;FMCW.c: 178: if(Nprg_b[i] == 1)
  6982  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  6983  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  6984  02E2  0858               	movf	OUTFQ@i_475,w
  6985  02E3  00A0               	movwf	??_OUTFQ
  6986  02E4  0720               	addwf	??_OUTFQ,w
  6987  02E5  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6988  02E6  0084               	movwf	4
  6989  02E7  1383               	bcf	3,7	;select IRP bank0
  6990  02E8  0800               	movf	0,w
  6991  02E9  00A1               	movwf	??_OUTFQ+1
  6992  02EA  0A84               	incf	4,f
  6993  02EB  0800               	movf	0,w
  6994  02EC  00A2               	movwf	??_OUTFQ+2
  6995  02ED  0321               	decf	??_OUTFQ+1,w
  6996  02EE  0422               	iorwf	??_OUTFQ+2,w
  6997  02EF  1D03               	btfss	3,2
  6998  02F0  2AFA               	goto	l3220
  6999                           
  7000                           ;FMCW.c: 179: {
  7001                           ;FMCW.c: 180: H_OUT(fmcwtxrx);
  7002  02F1  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7003  02F2  00F3               	movwf	H_OUT@fmcwtxrx+1
  7004  02F3  0879               	movf	OUTFQ@fmcwtxrx,w
  7005  02F4  00F2               	movwf	H_OUT@fmcwtxrx
  7006  02F5  120A  158A  21FD  120A  118A  	fcall	_H_OUT
  7007  02FA                     l3220:	
  7008  02FA  3001               	movlw	1
  7009  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  7010  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  7011  02FD  07D8               	addwf	OUTFQ@i_475,f
  7012  02FE  1803               	skipnc
  7013  02FF  0AD9               	incf	OUTFQ@i_475+1,f
  7014  0300  3000               	movlw	0
  7015  0301  07D9               	addwf	OUTFQ@i_475+1,f
  7016  0302  0859               	movf	OUTFQ@i_475+1,w
  7017  0303  3A80               	xorlw	128
  7018  0304  00FF               	movwf	127
  7019  0305  3080               	movlw	128
  7020  0306  027F               	subwf	127,w
  7021  0307  1D03               	skipz
  7022  0308  2B0B               	goto	u2915
  7023  0309  3011               	movlw	17
  7024  030A  0258               	subwf	OUTFQ@i_475,w
  7025  030B                     u2915:	
  7026  030B  1C03               	skipc
  7027  030C  2AC6               	goto	l3212
  7028  030D                     l3224:	
  7029                           
  7030                           ;FMCW.c: 181: }
  7031                           ;FMCW.c: 182: }
  7032                           ;FMCW.c: 185: H_OUT(fmcwtxrx);
  7033  030D  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7034  030E  00F3               	movwf	H_OUT@fmcwtxrx+1
  7035  030F  0879               	movf	OUTFQ@fmcwtxrx,w
  7036  0310  00F2               	movwf	H_OUT@fmcwtxrx
  7037  0311  120A  158A  21FD  120A  118A  	fcall	_H_OUT
  7038                           
  7039                           ;FMCW.c: 186: L_OUT(fmcwtxrx);
  7040  0316  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7041  0317  00F3               	movwf	L_OUT@fmcwtxrx+1
  7042  0318  0879               	movf	OUTFQ@fmcwtxrx,w
  7043  0319  00F2               	movwf	L_OUT@fmcwtxrx
  7044  031A  120A  158A  2243  120A  118A  	fcall	_L_OUT
  7045                           
  7046                           ;FMCW.c: 189: STBOUT(fmcwtxrx);
  7047  031F  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7048  0320  00F3               	movwf	STBOUT@fmcwtxrx+1
  7049  0321  0879               	movf	OUTFQ@fmcwtxrx,w
  7050  0322  00F2               	movwf	STBOUT@fmcwtxrx
  7051  0323  120A  158A  219B   	fcall	_STBOUT
  7052  0326  0008               	return
  7053  0327                     __end_of_OUTFQ:	
  7054                           
  7055                           	psect	text25
  7056  0B1C                     __ptext25:	
  7057 ;; *************** function ___awdiv *****************
  7058 ;; Defined at:
  7059 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  7060 ;; Parameters:    Size  Location     Type
  7061 ;;  divisor         2    0[COMMON] int 
  7062 ;;  dividend        2    2[COMMON] int 
  7063 ;; Auto vars:     Size  Location     Type
  7064 ;;  quotient        2    7[COMMON] int 
  7065 ;;  sign            1    6[COMMON] unsigned char 
  7066 ;;  counter         1    5[COMMON] unsigned char 
  7067 ;; Return value:  Size  Location     Type
  7068 ;;                  2    0[COMMON] int 
  7069 ;; Registers used:
  7070 ;;		wreg, status,2, status,0
  7071 ;; Tracked objects:
  7072 ;;		On entry : 0/0
  7073 ;;		On exit  : 0/0
  7074 ;;		Unchanged: 0/0
  7075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7076 ;;      Params:         4       0       0       0       0
  7077 ;;      Locals:         4       0       0       0       0
  7078 ;;      Temps:          1       0       0       0       0
  7079 ;;      Totals:         9       0       0       0       0
  7080 ;;Total ram usage:        9 bytes
  7081 ;; Hardware stack levels used:    1
  7082 ;; This function calls:
  7083 ;;		Nothing
  7084 ;; This function is called by:
  7085 ;;		_OUTFQ
  7086 ;;		_RFDOUT
  7087 ;; This function uses a non-reentrant model
  7088 ;;
  7089                           
  7090                           
  7091                           ;psect for function ___awdiv
  7092  0B1C                     ___awdiv:	
  7093                           
  7094                           ;incstack = 0
  7095                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7096  0B1C  01F6               	clrf	___awdiv@sign
  7097  0B1D  1FF1               	btfss	___awdiv@divisor+1,7
  7098  0B1E  2B26               	goto	l2636
  7099  0B1F  09F0               	comf	___awdiv@divisor,f
  7100  0B20  09F1               	comf	___awdiv@divisor+1,f
  7101  0B21  0AF0               	incf	___awdiv@divisor,f
  7102  0B22  1903               	skipnz
  7103  0B23  0AF1               	incf	___awdiv@divisor+1,f
  7104  0B24  01F6               	clrf	___awdiv@sign
  7105  0B25  0AF6               	incf	___awdiv@sign,f
  7106  0B26                     l2636:	
  7107  0B26  1FF3               	btfss	___awdiv@dividend+1,7
  7108  0B27  2B31               	goto	l2642
  7109  0B28  09F2               	comf	___awdiv@dividend,f
  7110  0B29  09F3               	comf	___awdiv@dividend+1,f
  7111  0B2A  0AF2               	incf	___awdiv@dividend,f
  7112  0B2B  1903               	skipnz
  7113  0B2C  0AF3               	incf	___awdiv@dividend+1,f
  7114  0B2D  3001               	movlw	1
  7115  0B2E  00F4               	movwf	??___awdiv
  7116  0B2F  0874               	movf	??___awdiv,w
  7117  0B30  06F6               	xorwf	___awdiv@sign,f
  7118  0B31                     l2642:	
  7119  0B31  01F7               	clrf	___awdiv@quotient
  7120  0B32  01F8               	clrf	___awdiv@quotient+1
  7121  0B33  0870               	movf	___awdiv@divisor,w
  7122  0B34  0471               	iorwf	___awdiv@divisor+1,w
  7123  0B35  1903               	btfsc	3,2
  7124  0B36  2B68               	goto	l2664
  7125  0B37  01F5               	clrf	___awdiv@counter
  7126  0B38  0AF5               	incf	___awdiv@counter,f
  7127  0B39                     l2652:	
  7128  0B39  1BF1               	btfsc	___awdiv@divisor+1,7
  7129  0B3A  2B47               	goto	l2654
  7130  0B3B  3001               	movlw	1
  7131  0B3C                     u2035:	
  7132  0B3C  1003               	clrc
  7133  0B3D  0DF0               	rlf	___awdiv@divisor,f
  7134  0B3E  0DF1               	rlf	___awdiv@divisor+1,f
  7135  0B3F  3EFF               	addlw	-1
  7136  0B40  1D03               	skipz
  7137  0B41  2B3C               	goto	u2035
  7138  0B42  3001               	movlw	1
  7139  0B43  00F4               	movwf	??___awdiv
  7140  0B44  0874               	movf	??___awdiv,w
  7141  0B45  07F5               	addwf	___awdiv@counter,f
  7142  0B46  2B39               	goto	l2652
  7143  0B47                     l2654:	
  7144  0B47  3001               	movlw	1
  7145  0B48                     u2055:	
  7146  0B48  1003               	clrc
  7147  0B49  0DF7               	rlf	___awdiv@quotient,f
  7148  0B4A  0DF8               	rlf	___awdiv@quotient+1,f
  7149  0B4B  3EFF               	addlw	-1
  7150  0B4C  1D03               	skipz
  7151  0B4D  2B48               	goto	u2055
  7152  0B4E  0871               	movf	___awdiv@divisor+1,w
  7153  0B4F  0273               	subwf	___awdiv@dividend+1,w
  7154  0B50  1D03               	skipz
  7155  0B51  2B54               	goto	u2065
  7156  0B52  0870               	movf	___awdiv@divisor,w
  7157  0B53  0272               	subwf	___awdiv@dividend,w
  7158  0B54                     u2065:	
  7159  0B54  1C03               	skipc
  7160  0B55  2B5D               	goto	l2660
  7161  0B56  0870               	movf	___awdiv@divisor,w
  7162  0B57  02F2               	subwf	___awdiv@dividend,f
  7163  0B58  0871               	movf	___awdiv@divisor+1,w
  7164  0B59  1C03               	skipc
  7165  0B5A  03F3               	decf	___awdiv@dividend+1,f
  7166  0B5B  02F3               	subwf	___awdiv@dividend+1,f
  7167  0B5C  1477               	bsf	___awdiv@quotient,0
  7168  0B5D                     l2660:	
  7169  0B5D  3001               	movlw	1
  7170  0B5E                     u2075:	
  7171  0B5E  1003               	clrc
  7172  0B5F  0CF1               	rrf	___awdiv@divisor+1,f
  7173  0B60  0CF0               	rrf	___awdiv@divisor,f
  7174  0B61  3EFF               	addlw	-1
  7175  0B62  1D03               	skipz
  7176  0B63  2B5E               	goto	u2075
  7177  0B64  3001               	movlw	1
  7178  0B65  02F5               	subwf	___awdiv@counter,f
  7179  0B66  1D03               	btfss	3,2
  7180  0B67  2B47               	goto	l2654
  7181  0B68                     l2664:	
  7182  0B68  0876               	movf	___awdiv@sign,w
  7183  0B69  1903               	btfsc	3,2
  7184  0B6A  2B70               	goto	l2668
  7185  0B6B  09F7               	comf	___awdiv@quotient,f
  7186  0B6C  09F8               	comf	___awdiv@quotient+1,f
  7187  0B6D  0AF7               	incf	___awdiv@quotient,f
  7188  0B6E  1903               	skipnz
  7189  0B6F  0AF8               	incf	___awdiv@quotient+1,f
  7190  0B70                     l2668:	
  7191  0B70  0878               	movf	___awdiv@quotient+1,w
  7192  0B71  00F1               	movwf	?___awdiv+1
  7193  0B72  0877               	movf	___awdiv@quotient,w
  7194  0B73  00F0               	movwf	?___awdiv
  7195  0B74  0008               	return
  7196  0B75                     __end_of___awdiv:	
  7197                           
  7198                           	psect	text26
  7199  0C91                     __ptext26:	
  7200 ;; *************** function _OPINIT *****************
  7201 ;; Defined at:
  7202 ;;		line 241 in file "FMCW.c"
  7203 ;; Parameters:    Size  Location     Type
  7204 ;;  fmcwtxrx        2    4[COMMON] int 
  7205 ;; Auto vars:     Size  Location     Type
  7206 ;;		None
  7207 ;; Return value:  Size  Location     Type
  7208 ;;                  1    wreg      void 
  7209 ;; Registers used:
  7210 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7211 ;; Tracked objects:
  7212 ;;		On entry : 0/0
  7213 ;;		On exit  : 0/0
  7214 ;;		Unchanged: 0/0
  7215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7216 ;;      Params:         2       0       0       0       0
  7217 ;;      Locals:         0       0       0       0       0
  7218 ;;      Temps:          0       0       0       0       0
  7219 ;;      Totals:         2       0       0       0       0
  7220 ;;Total ram usage:        2 bytes
  7221 ;; Hardware stack levels used:    1
  7222 ;; Hardware stack levels required when called:    2
  7223 ;; This function calls:
  7224 ;;		_H_OUT
  7225 ;;		_L_OUT
  7226 ;;		_STBOUT
  7227 ;; This function is called by:
  7228 ;;		_FMTX
  7229 ;;		_CWTX
  7230 ;;		_FMRX
  7231 ;; This function uses a non-reentrant model
  7232 ;;
  7233                           
  7234                           
  7235                           ;psect for function _OPINIT
  7236  0C91                     _OPINIT:	
  7237                           
  7238                           ;FMCW.c: 243: L_OUT(fmcwtxrx);
  7239                           
  7240                           ;incstack = 0
  7241                           ; Regs used in _OPINIT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7242  0C91  0875               	movf	OPINIT@fmcwtxrx+1,w
  7243  0C92  00F3               	movwf	L_OUT@fmcwtxrx+1
  7244  0C93  0874               	movf	OPINIT@fmcwtxrx,w
  7245  0C94  00F2               	movwf	L_OUT@fmcwtxrx
  7246  0C95  120A  158A  2243  120A  158A  	fcall	_L_OUT
  7247                           
  7248                           ;FMCW.c: 244: L_OUT(fmcwtxrx);
  7249  0C9A  0875               	movf	OPINIT@fmcwtxrx+1,w
  7250  0C9B  00F3               	movwf	L_OUT@fmcwtxrx+1
  7251  0C9C  0874               	movf	OPINIT@fmcwtxrx,w
  7252  0C9D  00F2               	movwf	L_OUT@fmcwtxrx
  7253  0C9E  120A  158A  2243  120A  158A  	fcall	_L_OUT
  7254                           
  7255                           ;FMCW.c: 245: L_OUT(fmcwtxrx);
  7256  0CA3  0875               	movf	OPINIT@fmcwtxrx+1,w
  7257  0CA4  00F3               	movwf	L_OUT@fmcwtxrx+1
  7258  0CA5  0874               	movf	OPINIT@fmcwtxrx,w
  7259  0CA6  00F2               	movwf	L_OUT@fmcwtxrx
  7260  0CA7  120A  158A  2243  120A  158A  	fcall	_L_OUT
  7261                           
  7262                           ;FMCW.c: 246: H_OUT(fmcwtxrx);
  7263  0CAC  0875               	movf	OPINIT@fmcwtxrx+1,w
  7264  0CAD  00F3               	movwf	H_OUT@fmcwtxrx+1
  7265  0CAE  0874               	movf	OPINIT@fmcwtxrx,w
  7266  0CAF  00F2               	movwf	H_OUT@fmcwtxrx
  7267  0CB0  120A  158A  21FD  120A  158A  	fcall	_H_OUT
  7268                           
  7269                           ;FMCW.c: 247: H_OUT(fmcwtxrx);
  7270  0CB5  0875               	movf	OPINIT@fmcwtxrx+1,w
  7271  0CB6  00F3               	movwf	H_OUT@fmcwtxrx+1
  7272  0CB7  0874               	movf	OPINIT@fmcwtxrx,w
  7273  0CB8  00F2               	movwf	H_OUT@fmcwtxrx
  7274  0CB9  120A  158A  21FD  120A  158A  	fcall	_H_OUT
  7275                           
  7276                           ;FMCW.c: 248: L_OUT(fmcwtxrx);
  7277  0CBE  0875               	movf	OPINIT@fmcwtxrx+1,w
  7278  0CBF  00F3               	movwf	L_OUT@fmcwtxrx+1
  7279  0CC0  0874               	movf	OPINIT@fmcwtxrx,w
  7280  0CC1  00F2               	movwf	L_OUT@fmcwtxrx
  7281  0CC2  120A  158A  2243  120A  158A  	fcall	_L_OUT
  7282                           
  7283                           ;FMCW.c: 249: L_OUT(fmcwtxrx);
  7284  0CC7  0875               	movf	OPINIT@fmcwtxrx+1,w
  7285  0CC8  00F3               	movwf	L_OUT@fmcwtxrx+1
  7286  0CC9  0874               	movf	OPINIT@fmcwtxrx,w
  7287  0CCA  00F2               	movwf	L_OUT@fmcwtxrx
  7288  0CCB  120A  158A  2243  120A  158A  	fcall	_L_OUT
  7289                           
  7290                           ;FMCW.c: 250: L_OUT(fmcwtxrx);
  7291  0CD0  0875               	movf	OPINIT@fmcwtxrx+1,w
  7292  0CD1  00F3               	movwf	L_OUT@fmcwtxrx+1
  7293  0CD2  0874               	movf	OPINIT@fmcwtxrx,w
  7294  0CD3  00F2               	movwf	L_OUT@fmcwtxrx
  7295  0CD4  120A  158A  2243  120A  158A  	fcall	_L_OUT
  7296                           
  7297                           ;FMCW.c: 251: L_OUT(fmcwtxrx);
  7298  0CD9  0875               	movf	OPINIT@fmcwtxrx+1,w
  7299  0CDA  00F3               	movwf	L_OUT@fmcwtxrx+1
  7300  0CDB  0874               	movf	OPINIT@fmcwtxrx,w
  7301  0CDC  00F2               	movwf	L_OUT@fmcwtxrx
  7302  0CDD  120A  158A  2243  120A  158A  	fcall	_L_OUT
  7303                           
  7304                           ;FMCW.c: 252: L_OUT(fmcwtxrx);
  7305  0CE2  0875               	movf	OPINIT@fmcwtxrx+1,w
  7306  0CE3  00F3               	movwf	L_OUT@fmcwtxrx+1
  7307  0CE4  0874               	movf	OPINIT@fmcwtxrx,w
  7308  0CE5  00F2               	movwf	L_OUT@fmcwtxrx
  7309  0CE6  120A  158A  2243  120A  158A  	fcall	_L_OUT
  7310                           
  7311                           ;FMCW.c: 253: H_OUT(fmcwtxrx);
  7312  0CEB  0875               	movf	OPINIT@fmcwtxrx+1,w
  7313  0CEC  00F3               	movwf	H_OUT@fmcwtxrx+1
  7314  0CED  0874               	movf	OPINIT@fmcwtxrx,w
  7315  0CEE  00F2               	movwf	H_OUT@fmcwtxrx
  7316  0CEF  120A  158A  21FD  120A  158A  	fcall	_H_OUT
  7317                           
  7318                           ;FMCW.c: 256: L_OUT(fmcwtxrx);
  7319  0CF4  0875               	movf	OPINIT@fmcwtxrx+1,w
  7320  0CF5  00F3               	movwf	L_OUT@fmcwtxrx+1
  7321  0CF6  0874               	movf	OPINIT@fmcwtxrx,w
  7322  0CF7  00F2               	movwf	L_OUT@fmcwtxrx
  7323  0CF8  120A  158A  2243  120A  158A  	fcall	_L_OUT
  7324                           
  7325                           ;FMCW.c: 257: L_OUT(fmcwtxrx);
  7326  0CFD  0875               	movf	OPINIT@fmcwtxrx+1,w
  7327  0CFE  00F3               	movwf	L_OUT@fmcwtxrx+1
  7328  0CFF  0874               	movf	OPINIT@fmcwtxrx,w
  7329  0D00  00F2               	movwf	L_OUT@fmcwtxrx
  7330  0D01  120A  158A  2243  120A  158A  	fcall	_L_OUT
  7331                           
  7332                           ;FMCW.c: 260: STBOUT(fmcwtxrx);
  7333  0D06  0875               	movf	OPINIT@fmcwtxrx+1,w
  7334  0D07  00F3               	movwf	STBOUT@fmcwtxrx+1
  7335  0D08  0874               	movf	OPINIT@fmcwtxrx,w
  7336  0D09  00F2               	movwf	STBOUT@fmcwtxrx
  7337  0D0A  120A  158A  219B   	fcall	_STBOUT
  7338  0D0D  0008               	return
  7339  0D0E                     __end_of_OPINIT:	
  7340                           
  7341                           	psect	text27
  7342  099B                     __ptext27:	
  7343 ;; *************** function _STBOUT *****************
  7344 ;; Defined at:
  7345 ;;		line 107 in file "FMCW.c"
  7346 ;; Parameters:    Size  Location     Type
  7347 ;;  fmcwtxrx        2    2[COMMON] int 
  7348 ;; Auto vars:     Size  Location     Type
  7349 ;;		None
  7350 ;; Return value:  Size  Location     Type
  7351 ;;                  1    wreg      void 
  7352 ;; Registers used:
  7353 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7354 ;; Tracked objects:
  7355 ;;		On entry : 0/0
  7356 ;;		On exit  : 0/0
  7357 ;;		Unchanged: 0/0
  7358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7359 ;;      Params:         2       0       0       0       0
  7360 ;;      Locals:         0       0       0       0       0
  7361 ;;      Temps:          0       0       0       0       0
  7362 ;;      Totals:         2       0       0       0       0
  7363 ;;Total ram usage:        2 bytes
  7364 ;; Hardware stack levels used:    1
  7365 ;; Hardware stack levels required when called:    1
  7366 ;; This function calls:
  7367 ;;		__NOP
  7368 ;; This function is called by:
  7369 ;;		_OUTFQ
  7370 ;;		_RFDOUT
  7371 ;;		_OPINIT
  7372 ;; This function uses a non-reentrant model
  7373 ;;
  7374                           
  7375                           
  7376                           ;psect for function _STBOUT
  7377  099B                     _STBOUT:	
  7378                           
  7379                           ;FMCW.c: 108: if(fmcwtxrx == 1)
  7380                           
  7381                           ;incstack = 0
  7382                           ; Regs used in _STBOUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7383  099B  0372               	decf	STBOUT@fmcwtxrx,w
  7384  099C  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7385  099D  1D03               	btfss	3,2
  7386  099E  29AA               	goto	l2612
  7387                           
  7388                           ;FMCW.c: 109: {
  7389                           ;FMCW.c: 110: PORTAbits.RA5 = 1;
  7390  099F  1283               	bcf	3,5	;RP0=0, select bank0
  7391  09A0  1303               	bcf	3,6	;RP1=0, select bank0
  7392  09A1  1685               	bsf	5,5	;volatile
  7393                           
  7394                           ;FMCW.c: 111: _NOP();
  7395  09A2  120A  158A  2039  120A  158A  	fcall	__NOP
  7396                           
  7397                           ;FMCW.c: 112: PORTAbits.RA5 = 0;
  7398  09A7  1283               	bcf	3,5	;RP0=0, select bank0
  7399  09A8  1303               	bcf	3,6	;RP1=0, select bank0
  7400  09A9  1285               	bcf	5,5	;volatile
  7401  09AA                     l2612:	
  7402                           
  7403                           ;FMCW.c: 113: }
  7404                           ;FMCW.c: 114: if(fmcwtxrx == 2)
  7405  09AA  3002               	movlw	2
  7406  09AB  0672               	xorwf	STBOUT@fmcwtxrx,w
  7407  09AC  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7408  09AD  1D03               	btfss	3,2
  7409  09AE  29BA               	goto	l2620
  7410                           
  7411                           ;FMCW.c: 115: {
  7412                           ;FMCW.c: 116: PORTDbits.RD0 = 1;
  7413  09AF  1283               	bcf	3,5	;RP0=0, select bank0
  7414  09B0  1303               	bcf	3,6	;RP1=0, select bank0
  7415  09B1  1408               	bsf	8,0	;volatile
  7416                           
  7417                           ;FMCW.c: 117: _NOP();
  7418  09B2  120A  158A  2039  120A  158A  	fcall	__NOP
  7419                           
  7420                           ;FMCW.c: 118: PORTDbits.RD0 = 0;
  7421  09B7  1283               	bcf	3,5	;RP0=0, select bank0
  7422  09B8  1303               	bcf	3,6	;RP1=0, select bank0
  7423  09B9  1008               	bcf	8,0	;volatile
  7424  09BA                     l2620:	
  7425                           
  7426                           ;FMCW.c: 119: }
  7427                           ;FMCW.c: 120: if(fmcwtxrx == 3)
  7428  09BA  3003               	movlw	3
  7429  09BB  0672               	xorwf	STBOUT@fmcwtxrx,w
  7430  09BC  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7431  09BD  1D03               	btfss	3,2
  7432  09BE  0008               	return
  7433                           
  7434                           ;FMCW.c: 121: {
  7435                           ;FMCW.c: 122: PORTAbits.RA4 = 1;
  7436  09BF  1283               	bcf	3,5	;RP0=0, select bank0
  7437  09C0  1303               	bcf	3,6	;RP1=0, select bank0
  7438  09C1  1605               	bsf	5,4	;volatile
  7439                           
  7440                           ;FMCW.c: 123: _NOP();
  7441  09C2  120A  158A  2039   	fcall	__NOP
  7442                           
  7443                           ;FMCW.c: 124: PORTAbits.RA4 = 0;
  7444  09C5  1283               	bcf	3,5	;RP0=0, select bank0
  7445  09C6  1303               	bcf	3,6	;RP1=0, select bank0
  7446  09C7  1205               	bcf	5,4	;volatile
  7447  09C8  0008               	return
  7448  09C9                     __end_of_STBOUT:	
  7449                           
  7450                           	psect	text28
  7451  0A43                     __ptext28:	
  7452 ;; *************** function _L_OUT *****************
  7453 ;; Defined at:
  7454 ;;		line 40 in file "FMCW.c"
  7455 ;; Parameters:    Size  Location     Type
  7456 ;;  fmcwtxrx        2    2[COMMON] int 
  7457 ;; Auto vars:     Size  Location     Type
  7458 ;;		None
  7459 ;; Return value:  Size  Location     Type
  7460 ;;                  1    wreg      void 
  7461 ;; Registers used:
  7462 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7463 ;; Tracked objects:
  7464 ;;		On entry : 0/0
  7465 ;;		On exit  : 0/0
  7466 ;;		Unchanged: 0/0
  7467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7468 ;;      Params:         2       0       0       0       0
  7469 ;;      Locals:         0       0       0       0       0
  7470 ;;      Temps:          0       0       0       0       0
  7471 ;;      Totals:         2       0       0       0       0
  7472 ;;Total ram usage:        2 bytes
  7473 ;; Hardware stack levels used:    1
  7474 ;; Hardware stack levels required when called:    1
  7475 ;; This function calls:
  7476 ;;		__NOP
  7477 ;; This function is called by:
  7478 ;;		_OUTFQ
  7479 ;;		_RFDOUT
  7480 ;;		_OPINIT
  7481 ;; This function uses a non-reentrant model
  7482 ;;
  7483                           
  7484                           
  7485                           ;psect for function _L_OUT
  7486  0A43                     _L_OUT:	
  7487                           
  7488                           ;FMCW.c: 41: if(fmcwtxrx == 1)
  7489                           
  7490                           ;incstack = 0
  7491                           ; Regs used in _L_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7492  0A43  0372               	decf	L_OUT@fmcwtxrx,w
  7493  0A44  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7494  0A45  1D03               	btfss	3,2
  7495  0A46  2A5A               	goto	l2554
  7496                           
  7497                           ;FMCW.c: 42: {
  7498                           ;FMCW.c: 43: PORTEbits.RE0 = 0;
  7499  0A47  1283               	bcf	3,5	;RP0=0, select bank0
  7500  0A48  1303               	bcf	3,6	;RP1=0, select bank0
  7501  0A49  1009               	bcf	9,0	;volatile
  7502                           
  7503                           ;FMCW.c: 44: _NOP();
  7504  0A4A  120A  158A  2039  120A  158A  	fcall	__NOP
  7505                           
  7506                           ;FMCW.c: 45: PORTEbits.RE1 = 1;
  7507  0A4F  1283               	bcf	3,5	;RP0=0, select bank0
  7508  0A50  1303               	bcf	3,6	;RP1=0, select bank0
  7509  0A51  1489               	bsf	9,1	;volatile
  7510                           
  7511                           ;FMCW.c: 46: _NOP();
  7512  0A52  120A  158A  2039  120A  158A  	fcall	__NOP
  7513                           
  7514                           ;FMCW.c: 47: PORTEbits.RE1 = 0;
  7515  0A57  1283               	bcf	3,5	;RP0=0, select bank0
  7516  0A58  1303               	bcf	3,6	;RP1=0, select bank0
  7517  0A59  1089               	bcf	9,1	;volatile
  7518  0A5A                     l2554:	
  7519                           
  7520                           ;FMCW.c: 48: }
  7521                           ;FMCW.c: 49: if(fmcwtxrx == 2)
  7522  0A5A  3002               	movlw	2
  7523  0A5B  0672               	xorwf	L_OUT@fmcwtxrx,w
  7524  0A5C  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7525  0A5D  1D03               	btfss	3,2
  7526  0A5E  2A72               	goto	l2564
  7527                           
  7528                           ;FMCW.c: 50: {
  7529                           ;FMCW.c: 51: PORTDbits.RD1 = 0;
  7530  0A5F  1283               	bcf	3,5	;RP0=0, select bank0
  7531  0A60  1303               	bcf	3,6	;RP1=0, select bank0
  7532  0A61  1088               	bcf	8,1	;volatile
  7533                           
  7534                           ;FMCW.c: 52: _NOP();
  7535  0A62  120A  158A  2039  120A  158A  	fcall	__NOP
  7536                           
  7537                           ;FMCW.c: 53: PORTDbits.RD2 = 1;
  7538  0A67  1283               	bcf	3,5	;RP0=0, select bank0
  7539  0A68  1303               	bcf	3,6	;RP1=0, select bank0
  7540  0A69  1508               	bsf	8,2	;volatile
  7541                           
  7542                           ;FMCW.c: 54: _NOP();
  7543  0A6A  120A  158A  2039  120A  158A  	fcall	__NOP
  7544                           
  7545                           ;FMCW.c: 55: PORTDbits.RD2 = 0;
  7546  0A6F  1283               	bcf	3,5	;RP0=0, select bank0
  7547  0A70  1303               	bcf	3,6	;RP1=0, select bank0
  7548  0A71  1108               	bcf	8,2	;volatile
  7549  0A72                     l2564:	
  7550                           
  7551                           ;FMCW.c: 56: }
  7552                           ;FMCW.c: 57: if(fmcwtxrx == 3)
  7553  0A72  3003               	movlw	3
  7554  0A73  0672               	xorwf	L_OUT@fmcwtxrx,w
  7555  0A74  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7556  0A75  1D03               	btfss	3,2
  7557  0A76  0008               	return
  7558                           
  7559                           ;FMCW.c: 58: {
  7560                           ;FMCW.c: 59: PORTAbits.RA3 = 0;
  7561  0A77  1283               	bcf	3,5	;RP0=0, select bank0
  7562  0A78  1303               	bcf	3,6	;RP1=0, select bank0
  7563  0A79  1185               	bcf	5,3	;volatile
  7564                           
  7565                           ;FMCW.c: 60: _NOP();
  7566  0A7A  120A  158A  2039  120A  158A  	fcall	__NOP
  7567                           
  7568                           ;FMCW.c: 61: PORTAbits.RA2 = 1;
  7569  0A7F  1283               	bcf	3,5	;RP0=0, select bank0
  7570  0A80  1303               	bcf	3,6	;RP1=0, select bank0
  7571  0A81  1505               	bsf	5,2	;volatile
  7572                           
  7573                           ;FMCW.c: 62: _NOP();
  7574  0A82  120A  158A  2039   	fcall	__NOP
  7575                           
  7576                           ;FMCW.c: 63: PORTAbits.RA2 = 0;
  7577  0A85  1283               	bcf	3,5	;RP0=0, select bank0
  7578  0A86  1303               	bcf	3,6	;RP1=0, select bank0
  7579  0A87  1105               	bcf	5,2	;volatile
  7580  0A88  0008               	return
  7581  0A89                     __end_of_L_OUT:	
  7582                           
  7583                           	psect	text29
  7584  09FD                     __ptext29:	
  7585 ;; *************** function _H_OUT *****************
  7586 ;; Defined at:
  7587 ;;		line 74 in file "FMCW.c"
  7588 ;; Parameters:    Size  Location     Type
  7589 ;;  fmcwtxrx        2    2[COMMON] int 
  7590 ;; Auto vars:     Size  Location     Type
  7591 ;;		None
  7592 ;; Return value:  Size  Location     Type
  7593 ;;                  1    wreg      void 
  7594 ;; Registers used:
  7595 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7596 ;; Tracked objects:
  7597 ;;		On entry : 0/0
  7598 ;;		On exit  : 0/0
  7599 ;;		Unchanged: 0/0
  7600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7601 ;;      Params:         2       0       0       0       0
  7602 ;;      Locals:         0       0       0       0       0
  7603 ;;      Temps:          0       0       0       0       0
  7604 ;;      Totals:         2       0       0       0       0
  7605 ;;Total ram usage:        2 bytes
  7606 ;; Hardware stack levels used:    1
  7607 ;; Hardware stack levels required when called:    1
  7608 ;; This function calls:
  7609 ;;		__NOP
  7610 ;; This function is called by:
  7611 ;;		_OUTFQ
  7612 ;;		_RFDOUT
  7613 ;;		_OPINIT
  7614 ;; This function uses a non-reentrant model
  7615 ;;
  7616                           
  7617                           
  7618                           ;psect for function _H_OUT
  7619  09FD                     _H_OUT:	
  7620                           
  7621                           ;FMCW.c: 75: if(fmcwtxrx == 1)
  7622                           
  7623                           ;incstack = 0
  7624                           ; Regs used in _H_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7625  09FD  0372               	decf	H_OUT@fmcwtxrx,w
  7626  09FE  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7627  09FF  1D03               	btfss	3,2
  7628  0A00  2A14               	goto	l2584
  7629                           
  7630                           ;FMCW.c: 76: {
  7631                           ;FMCW.c: 77: PORTEbits.RE0 = 1;
  7632  0A01  1283               	bcf	3,5	;RP0=0, select bank0
  7633  0A02  1303               	bcf	3,6	;RP1=0, select bank0
  7634  0A03  1409               	bsf	9,0	;volatile
  7635                           
  7636                           ;FMCW.c: 78: _NOP();
  7637  0A04  120A  158A  2039  120A  158A  	fcall	__NOP
  7638                           
  7639                           ;FMCW.c: 79: PORTEbits.RE1 = 1;
  7640  0A09  1283               	bcf	3,5	;RP0=0, select bank0
  7641  0A0A  1303               	bcf	3,6	;RP1=0, select bank0
  7642  0A0B  1489               	bsf	9,1	;volatile
  7643                           
  7644                           ;FMCW.c: 80: _NOP();
  7645  0A0C  120A  158A  2039  120A  158A  	fcall	__NOP
  7646                           
  7647                           ;FMCW.c: 81: PORTEbits.RE1 = 0;
  7648  0A11  1283               	bcf	3,5	;RP0=0, select bank0
  7649  0A12  1303               	bcf	3,6	;RP1=0, select bank0
  7650  0A13  1089               	bcf	9,1	;volatile
  7651  0A14                     l2584:	
  7652                           
  7653                           ;FMCW.c: 82: }
  7654                           ;FMCW.c: 83: if(fmcwtxrx == 2)
  7655  0A14  3002               	movlw	2
  7656  0A15  0672               	xorwf	H_OUT@fmcwtxrx,w
  7657  0A16  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7658  0A17  1D03               	btfss	3,2
  7659  0A18  2A2C               	goto	l2594
  7660                           
  7661                           ;FMCW.c: 84: {
  7662                           ;FMCW.c: 85: PORTDbits.RD1 = 1;
  7663  0A19  1283               	bcf	3,5	;RP0=0, select bank0
  7664  0A1A  1303               	bcf	3,6	;RP1=0, select bank0
  7665  0A1B  1488               	bsf	8,1	;volatile
  7666                           
  7667                           ;FMCW.c: 86: _NOP();
  7668  0A1C  120A  158A  2039  120A  158A  	fcall	__NOP
  7669                           
  7670                           ;FMCW.c: 87: PORTDbits.RD2 = 1;
  7671  0A21  1283               	bcf	3,5	;RP0=0, select bank0
  7672  0A22  1303               	bcf	3,6	;RP1=0, select bank0
  7673  0A23  1508               	bsf	8,2	;volatile
  7674                           
  7675                           ;FMCW.c: 88: _NOP();
  7676  0A24  120A  158A  2039  120A  158A  	fcall	__NOP
  7677                           
  7678                           ;FMCW.c: 89: PORTDbits.RD2 = 0;
  7679  0A29  1283               	bcf	3,5	;RP0=0, select bank0
  7680  0A2A  1303               	bcf	3,6	;RP1=0, select bank0
  7681  0A2B  1108               	bcf	8,2	;volatile
  7682  0A2C                     l2594:	
  7683                           
  7684                           ;FMCW.c: 90: }
  7685                           ;FMCW.c: 91: if(fmcwtxrx == 3)
  7686  0A2C  3003               	movlw	3
  7687  0A2D  0672               	xorwf	H_OUT@fmcwtxrx,w
  7688  0A2E  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7689  0A2F  1D03               	btfss	3,2
  7690  0A30  0008               	return
  7691                           
  7692                           ;FMCW.c: 92: {
  7693                           ;FMCW.c: 93: PORTAbits.RA3 = 1;
  7694  0A31  1283               	bcf	3,5	;RP0=0, select bank0
  7695  0A32  1303               	bcf	3,6	;RP1=0, select bank0
  7696  0A33  1585               	bsf	5,3	;volatile
  7697                           
  7698                           ;FMCW.c: 94: _NOP();
  7699  0A34  120A  158A  2039  120A  158A  	fcall	__NOP
  7700                           
  7701                           ;FMCW.c: 95: PORTAbits.RA2 = 1;
  7702  0A39  1283               	bcf	3,5	;RP0=0, select bank0
  7703  0A3A  1303               	bcf	3,6	;RP1=0, select bank0
  7704  0A3B  1505               	bsf	5,2	;volatile
  7705                           
  7706                           ;FMCW.c: 96: _NOP();
  7707  0A3C  120A  158A  2039   	fcall	__NOP
  7708                           
  7709                           ;FMCW.c: 97: PORTAbits.RA2 = 0;
  7710  0A3F  1283               	bcf	3,5	;RP0=0, select bank0
  7711  0A40  1303               	bcf	3,6	;RP1=0, select bank0
  7712  0A41  1105               	bcf	5,2	;volatile
  7713  0A42  0008               	return
  7714  0A43                     __end_of_H_OUT:	
  7715                           
  7716                           	psect	text30
  7717  0839                     __ptext30:	
  7718 ;; *************** function __NOP *****************
  7719 ;; Defined at:
  7720 ;;		line 349 in file "FMCW.c"
  7721 ;; Parameters:    Size  Location     Type
  7722 ;;		None
  7723 ;; Auto vars:     Size  Location     Type
  7724 ;;  i               2    0[COMMON] int 
  7725 ;; Return value:  Size  Location     Type
  7726 ;;                  1    wreg      void 
  7727 ;; Registers used:
  7728 ;;		wreg, status,2, btemp+1
  7729 ;; Tracked objects:
  7730 ;;		On entry : 0/0
  7731 ;;		On exit  : 0/0
  7732 ;;		Unchanged: 0/0
  7733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7734 ;;      Params:         0       0       0       0       0
  7735 ;;      Locals:         2       0       0       0       0
  7736 ;;      Temps:          0       0       0       0       0
  7737 ;;      Totals:         2       0       0       0       0
  7738 ;;Total ram usage:        2 bytes
  7739 ;; Hardware stack levels used:    1
  7740 ;; This function calls:
  7741 ;;		Nothing
  7742 ;; This function is called by:
  7743 ;;		_L_OUT
  7744 ;;		_H_OUT
  7745 ;;		_STBOUT
  7746 ;; This function uses a non-reentrant model
  7747 ;;
  7748                           
  7749                           
  7750                           ;psect for function __NOP
  7751  0839                     __NOP:	
  7752                           
  7753                           ;FMCW.c: 350: for(int i=0; i<5; i++){
  7754                           
  7755                           ;incstack = 0
  7756                           ; Regs used in __NOP: [wreg+status,2+btemp+1]
  7757  0839  01F0               	clrf	__NOP@i
  7758  083A  01F1               	clrf	__NOP@i+1
  7759  083B                     L9:	
  7760  083B  0871               	movf	__NOP@i+1,w
  7761  083C  3A80               	xorlw	128
  7762  083D  00FF               	movwf	127
  7763  083E  3080               	movlw	128
  7764  083F  027F               	subwf	127,w
  7765  0840  1D03               	skipz
  7766  0841  2844               	goto	u1845
  7767  0842  3005               	movlw	5
  7768  0843  0270               	subwf	__NOP@i,w
  7769  0844                     u1845:	
  7770  0844  1803               	btfsc	3,0
  7771  0845  0008               	return
  7772                           
  7773                           ;FMCW.c: 351: __nop();
  7774  0846  0000               	nop
  7775  0847  3001               	movlw	1
  7776  0848  07F0               	addwf	__NOP@i,f
  7777  0849  1803               	skipnc
  7778  084A  0AF1               	incf	__NOP@i+1,f
  7779  084B  3000               	movlw	0
  7780  084C  07F1               	addwf	__NOP@i+1,f
  7781  084D  283B               	goto	L9
  7782  084E                     __end_of__NOP:	
  7783  007E                     btemp	set	126	;btemp
  7784  007E                     wtemp0	set	126


Data Sizes:
    Strings     26
    Constant    0
    Data        94
    BSS         137
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      80
    BANK1            80     36      78
    BANK3            96      0      90
    BANK2            96      0      89

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 0
		 -> main@EPS_kill(BANK1[0]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_15(CODE[5]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_16(CODE[7]), main@EPS_kill_1(BANK1[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 0
		 -> main@EPS_kill(BANK1[0]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMMON[2]), 

    FMRX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), FMRX_Nprg(BANK3[10]), 

    CWTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@CWTX_Nprg(BANK1[10]), CWTX_Nprg(BANK1[10]), 

    FMTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    OUTFQ@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), main@CWTX_Nprg(BANK1[10]), main@FMTX_Nprg(BANK1[10]), 
		 -> FMRX_Nprg(BANK3[10]), CWTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    sp__EEPROM_Read	PTR unsigned char  size(1) Largest target is 32
		 -> EEPROMData(BANK2[32]), 

    EEPROM_Write@data	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 

    main@dData	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 

    sp__ReceivePacket_data	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 


Critical Paths under _main in COMMON

    _ReceivePacket_data->_fcscheck
    _ReceivePacket_data->_waitFlag
    _waitFlag->_getbit
    _getdata->_getbit
    _NM_waddress->_putch
    _Init_I2C_M->___lldiv
    _FMTX->_OUTFQ
    _FMTX->_RFDOUT
    _FMRX->_OUTFQ
    _FMRX->_RFDOUT
    _EEPROM_Write->_I2C_Master_Write
    _CWTX->_OUTFQ
    _CWTX->_RFDOUT
    _RFDOUT->___awdiv
    _OUTFQ->___awdiv
    _OPINIT->_H_OUT
    _OPINIT->_L_OUT
    _OPINIT->_STBOUT
    _STBOUT->__NOP
    _L_OUT->__NOP
    _H_OUT->__NOP

Critical Paths under _main in BANK0

    _main->_CWTX
    _main->_FMRX
    _main->_FMTX
    _ReceivePacket_data->_waitFlag
    _FMTX->_OUTFQ
    _FMRX->_OUTFQ
    _CWTX->_OUTFQ

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                40    40      0   33596
                                             66 BANK0      4     4      0
                                              0 BANK1     36    36      0
                               _CWTX
                       _EEPROM_Write
                               _FMRX
                               _FMTX
                         _Init_I2C_M
                           _Init_MPU
                        _Init_SERIAL
                        _NM_waddress
                 _ReceivePacket_data
                          _Reset_EPS
                            _sprintf
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     4      2     171
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6     427
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (1) _Reset_EPS                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ReceivePacket_data                                   6     6      0    2669
                                             10 COMMON     2     2      0
                                             29 BANK0      4     4      0
                           _fcscheck
                            _getdata
                           _waitFlag
 ---------------------------------------------------------------------------------
 (2) _waitFlag                                            33    33      0    2205
                                              6 COMMON     4     4      0
                                              0 BANK0     29    29      0
                             _getbit
 ---------------------------------------------------------------------------------
 (2) _getdata                                             10    10      0     212
                                              6 COMMON     2     2      0
                                              0 BANK0      7     7      0
                             _getbit
 ---------------------------------------------------------------------------------
 (3) _getbit                                               6     4      2      46
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _fcscheck                                            10     8      2     161
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (1) _NM_waddress                                          3     1      2     194
                                              1 COMMON     3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_SERIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_MPU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_I2C_M                                           8     4      4     343
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _FMTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _FMRX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         8     5      3     739
                                              2 COMMON     8     5      3
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     446
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CWTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (2) _RFDOUT                                              37    33      4    3231
                                              9 COMMON     4     0      4
                                              0 BANK0     33    33      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _OUTFQ                                               64    60      4    3853
                                              9 COMMON     4     0      4
                                              0 BANK0     60    60      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _OPINIT                                               2     0      2    2075
                                              4 COMMON     2     0      2
                              _H_OUT
                              _L_OUT
                             _STBOUT
 ---------------------------------------------------------------------------------
 (3) _STBOUT                                               2     0      2     271
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _L_OUT                                                2     0      2     801
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _H_OUT                                                2     0      2     536
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (4) __NOP                                                 2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CWTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _EEPROM_Write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _FMRX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _FMTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _Init_I2C_M
     ___lldiv
   _Init_MPU
   _Init_SERIAL
   _NM_waddress
     _putch
   _ReceivePacket_data
     _fcscheck
     _getdata
       _getbit
     _waitFlag
       _getbit
   _Reset_EPS
   _sprintf
   _strcmp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      5A       9       93.8%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      59      11       92.7%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     24      4E       7       97.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     46      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     15F      12        0.0%
ABS                  0      0     15F       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Nov 07 20:57:29 2017

                           pc 0002                   __CFG_CP$OFF 0000                            l56 17CE  
                ___awdiv@sign 0076                            fsr 0004                           l194 0566  
                         l259 0D75                           l467 0830                           _RA1 0029  
                         _RB2 0032                           _RB4 0034                           _RB5 0035  
                         _PEN 048A                  __CFG_CPD$OFF 0000                           _SEN 0488  
                         _RX9 00C6                           _TX9 04C6                           fsr0 0004  
                         indf 0000                  __CFG_FOSC$HS 0000                  __CFG_LVP$OFF 0000  
                        l3010 072E                          l3110 0D5A                          l3022 075C  
                        l3006 0721                          l3104 0D3D                          l3032 0777  
                        l3202 02A4                          l3130 0D8D                          l3220 02FA  
                        l3212 02C6                          l3116 0D6E                          l3036 0784  
                        l3206 02B7                          l3118 0D1C                          l3070 0C59  
                        l3054 07B0                          l3216 02E0                          l3224 030D  
                        l3160 00D9                          l3232 0D9F                          l3080 0C75  
                        l3072 0C5C                          l3056 032F                          l3154 00BD  
                        l3090 0C39                          l2620 09BA                          l2612 09AA  
                        l3172 00F7                          l3252 0E01                          l3244 0DCA  
                        l3076 0C6A                          l3500 0061                          l3182 0160  
                        l3166 00E8                          l3262 0E2A                          l3270 0E57  
                        l3238 0DBB                          l2534 0AC0                          l3192 0205  
                        l3184 019D                          l3280 0BE2                          l2536 0ACD  
                        l2712 0386                          l3360 0B10                          l3504 006B  
                        l3512 007A                          l3520 08EE                          l2554 0A5A  
                        l2642 0B31                          l3194 020C                          l3266 0E44  
                        l3258 0E10                          l3290 0C1A                          l3282 0BF2  
                        l3514 00A5                          l3522 08F8                          l2564 0A72  
                        l2660 0B5D                          l2652 0B39                          l2636 0B26  
                        l2804 04BA                          l2740 03E0                          l2708 0379  
                        l2654 0B47                          l3198 0293                          l3470 0BBF  
                        l3294 0C27                          l2902 05C9                          l2830 0510  
                        l2814 04D5                          l2726 03B8                          l3358 0AED  
                        l3526 0911                          l2584 0A14                          l2664 0B68  
                        l2840 052B                          l2752 040E                          l2736 03D3  
                        l3368 0B16                          l2594 0A2C                          l2906 05D6  
                        l2818 04E2                          l2762 0429                          l2690 0336  
                        l2668 0B70                          l3468 0BA5                          l2932 062C  
                        l2844 0538                          l2692 0355                          l3484 0023  
                        l3820 0FF1                          l2918 0604                          l2766 0436  
                        l2862 0564                          l2944 065A                          l2928 061F  
                        l2792 048C                          l2970 06B0                          l2954 0675  
                        l2882 0597                          l2778 0464                          l2698 035E  
                        l3498 0035                          l2980 06CB                          l2892 05AE  
                        l2868 056F                          l2788 047F                          l2958 0682  
                        l2878 058A                          l2984 06D8                          l3786 0EE5  
                        l2996 0706                          STR_1 081E                          STR_2 081E  
                        STR_3 081E                          STR_4 081E                          STR_5 081E  
                        STR_6 081E                          STR_7 0817                          STR_8 0817  
                        STR_9 0817                          _BRGH 04C2                          _CREN 00C4  
                        u2035 0B3C                          u2055 0B48                          u3015 0BE6  
                        u2215 03F5                          u2065 0B54                          u2075 0B5E  
                        u3035 0BF4                          u3045 0C09                          u3055 0C1B  
                        u2335 04F7                          u2255 044B                          u2175 039F  
                        u3155 09DB                          u2605 0743                          u2525 0697  
                        u2445 05EB                          u3085 0AFB                          u2375 054D  
                        u2295 04A1                          _FMRX 0943                          u3530 0F6A  
                        u3540 0F80                          _FMTX 096F                          u1845 0844  
                        u2805 00E6                          u2645 0799                          u2565 06ED  
                        u2485 0641                          u3550 0F96                          u2815 00F5  
                        u3607 0F5A                          u2745 0D2A                          u3617 0FEB  
                        u2915 030B                          u1875 0AB4                          u3627 0FF9  
                        u2925 0D9D                          u3637 08AB                          u2935 0DB9  
                        u3647 08BC                          u2865 02A2                          u2785 00BB  
                        u2945 0DC8                          u3657 0AB8                          u2875 02B5  
                        u2795 00D7                          u2955 0DFF                          u3667 0BCA  
                        u3587 0E79                          _RCIE 0465                          _RCEN 048B  
                        _RCIF 0065                          _CWTX 0917                          u2885 02C4  
                        u2965 0E0E                          u3597 0EA0                          u2995 0E55  
                        _SPEN 00C7                          _RSEN 0489                          _SREN 00C5  
                        _TXIE 0464                          _TXEN 04C5                          _TXIF 0064  
                        _SYNC 04C4                          __NOP 0839                  __CFG_WRT$OFF 0000  
                        _main 0E71                   _NM_waddress 17EE                 ??_Init_SERIAL 0070  
                        btemp 007E                  getbit@oldbit 00EC                   Init_I2C_M@c 0020  
                        start 0000  ReceivePacket_data@fcschecker 003D                 __CFG_IESO$OFF 0000  
               __CFG_MCLRE$ON 0000          __end_of_EEPROM_Write 0BD2                         ?_FMRX 005C  
                       ?_FMTX 005C                         ?_CWTX 005C              ?_I2C_Master_Wait 0070  
            ?_I2C_Master_Stop 0070                         ?__NOP 0070                         ?_main 0070  
                       _ACKEN 048C                         _ACKDT 048D               __end_of___awdiv 0B75  
                       STR_10 0817                         STR_11 0817                         STR_12 0817  
                       STR_15 0825                         STR_16 0810                 __CFG_WDTE$OFF 0000  
                       _ANSEL 0188               __end_of___lldiv 0C30               ___awdiv@divisor 0070  
             ___awdiv@counter 0075                         _RCREG 001A                         _SPBRG 0099  
                       _PORTA 0005                         _PORTB 0006                         _PORTC 0007  
                       _PORTD 0008                         _PORTE 0009                         _H_OUT 09FD  
                       _OUTFQ 00AC                         _TRISA 0085                         _TRISB 0086  
                       _TRISC 0087                         _TRISD 0088                         _TRISE 0089  
                       _L_OUT 0A43                         _TXREG 0019                 __CFG_PWRTE$ON 0000  
              __CFG_FCMEN$OFF 0000                         _dData 0130               __end_of_getdata 0C91  
                       _eflag 0066                 getdata@dstuff 0022                         _putch 17CD  
              __CFG_BOREN$OFF 0000                         pclath 000A                         status 0003  
                       wtemp0 007E               __end_of_sprintf 00AC                    _Init_I2C_M 09C9  
            EEPROM_Write@data 0074    __end_of_ReceivePacket_data 0B1C                  __end_of_FMRX 096F  
                __end_of_FMTX 099B                  __end_of_CWTX 0943                  __end_of__NOP 084E  
             __initialization 07B3                  __end_of_main 1000           __end_of_Init_SERIAL 0867  
            __end_of_Init_MPU 0884                        ??_FMRX 007D                        ??_FMTX 007D  
                      ??_CWTX 007D                        ??__NOP 0070                        ??_main 0062  
                      ?_H_OUT 0072      EEPROM_Write@high_address 0072                        ?_OUTFQ 0079  
                      ?_L_OUT 0072             ?_I2C_Master_Start 0070             ?_I2C_Master_Write 0070  
                      OUTFQ@i 0056            ??_I2C_Master_Start 0070                        OUTFQ@j 005A  
          ??_I2C_Master_Write 0072              ___awdiv@dividend 0072                    _eDataField 0150  
                      ?_putch 0070                        _ANSELH 0189                        _RFDOUT 0D90  
                      _OPINIT 0C91                        _SSPADD 0093                        _STBOUT 099B  
                      _STATUS 0003                        _SSPCON 0014                        _SSPBUF 0013  
                      __NOP@i 0070              __end_of_fcscheck 0D90                     ??___awdiv 0074  
                      _dfcshi 006F                     ??___lldiv 0078                        _dfcslo 006E  
                      _efcshi 006C                        _efcslo 006D                        _getbit 0A89  
          __size_of_Reset_EPS 0023                        _estuff 00E8              ___awdiv@quotient 0077  
                  _dPacketnum 0068                     ??_getdata 0076                        _strcmp 08EC  
                 RFDOUT@i_484 003B                   RFDOUT@i_485 003F              __end_of_waitFlag 07B3  
                   ??_sprintf 0076    EEPROM_Write@EEPROM_address 0078       __end_of__initialization 07FC  
     EEPROM_Write@low_address 0073                   ?_Init_I2C_M 0020                   _Init_SERIAL 084E  
       __size_of_EEPROM_Write 005D                 __end_of_H_OUT 0A43                 __end_of_OUTFQ 0327  
               __end_of_L_OUT 0A89                 L_OUT@fmcwtxrx 0072                __pcstackCOMMON 0070  
                __pidataBANK1 0884                  __pidataBANK2 0005                  __pidataBANK3 08C4  
               __end_of_putch 17D5                       ??_H_OUT 0074                       ??_OUTFQ 0020  
                     ??_L_OUT 0074                       ??_putch 0070                  _EEPROM_Write 0B75  
                  __pbssBANK0 0066                    __pbssBANK1 00E1                    __pbssBANK2 0110  
                  __pbssBANK3 0190             __end_of_Reset_EPS 08C4                     ?_Init_MPU 0070  
                     ?_RFDOUT 0079                       ?_OPINIT 0074                  ?_NM_waddress 0071  
                     ?_STBOUT 0072                       RFDOUT@i 003D                    __pmaintext 0E71  
                  _ebitstatus 00E6                       ?_getbit 0070                       ?_strcmp 0070  
         __size_of_Init_I2C_M 0034                     OUTFQ@Nprg 007B                     ?_fcscheck 0070  
                     _SSPCON2 0091                       _SSPSTAT 0094                    __stringtab 0800  
                  ??_Init_MPU 0070               __size_of_RFDOUT 00E1               __size_of_OPINIT 007D  
             __size_of_STBOUT 002E                     ?_waitFlag 0070                       _dPacket 0190  
                     _ePacket 00E1                       ___awdiv 0B1C                       ___lldiv 0BD2  
             __size_of_getbit 0049                   waitFlag@buf 003C                       __ptext1 08EC  
                     __ptext2 001E                       __ptext3 08A1                       __ptext4 0AD2  
                     __ptext5 0327                       __ptext6 0C30                       __ptext7 0A89  
                     __ptext8 0D0E                       __ptext9 17EE                       _getdata 0C30  
          _ReceivePacket_data 0AD2               __size_of_strcmp 002B      __size_of_I2C_Master_Wait 0009  
    __size_of_I2C_Master_Stop 0007                    ??_fcscheck 0072           ?_ReceivePacket_data 0070  
                     getbit@i 0074                       _sprintf 001E                       clrloop0 17D6  
        end_of_initialization 07FC                  RFDOUT@Nref_b 0023                     _FMRX_Nref 00C7  
                   _FMRX_Nprg 01E0                     _FMTX_Nref 00CB                     _FMTX_Nprg 00D7  
                   _CWTX_Nref 00C9                     _CWTX_Nprg 00CD                   OUTFQ@Nprg_b 0030  
   __size_of_I2C_Master_Start 0007     __size_of_I2C_Master_Write 0008               ___lldiv@divisor 0070  
             ___lldiv@counter 007D                    ??_waitFlag 0076          ??_ReceivePacket_data 007A  
                  fcscheck@bt 0074                OPINIT@fmcwtxrx 0074                       strcmp@r 0074  
                   _PORTAbits 0005                     _PORTCbits 0007                     _PORTDbits 0008  
                   _PORTEbits 0009                    getdata@buf 0026                  ??_Init_I2C_M 0024  
                ?_Init_SERIAL 0070                __end_of_RFDOUT 0E71                __end_of_OPINIT 0D0E  
              __end_of_STBOUT 09C9          __size_of_NM_waddress 0012                __end_of_getbit 0AD2  
              __end_of_strcmp 0917           start_initialization 07B3            __end_of_Init_I2C_M 09FD  
                    ??_RFDOUT 0020                      ??_OPINIT 0076             ??_I2C_Master_Wait 0070  
           ??_I2C_Master_Stop 0070                      ??_STBOUT 0074             __size_of_Init_MPU 001D  
                   _Reset_EPS 08A1             getdata@dbitstatus 0024                    init_fetch0 17DD  
                    ??_getbit 0072                   __pdataBANK1 00C4                   __pdataBANK2 0150  
                 __pdataBANK3 01C2                    RFDOUT@Nref 007B                      ??_strcmp 0072  
    NM_waddress@whigh_address 0071                     ___latbits 0002                 __pcstackBANK0 0020  
               __pcstackBANK1 00A0                      FMRX@Nref 005C                      FMRX@Nprg 005E  
                    FMTX@Nref 005C                      FMTX@Nprg 005E                      FMRX@fmrx 0060  
                    FMTX@fmtx 0060                      CWTX@Nref 005C                      CWTX@Nprg 005E  
           __size_of_fcscheck 0082                 waitFlag@j_111 002C                 waitFlag@j_103 0024  
               waitFlag@j_120 0036                 waitFlag@j_112 002E                 waitFlag@j_105 0026  
               waitFlag@j_122 0038                 waitFlag@j_114 0030                 waitFlag@j_107 0028  
               waitFlag@j_116 0032                 waitFlag@j_109 002A                 waitFlag@j_118 0034  
                    CWTX@cwtx 0060                   sprintf@flag 0077              _I2C_Master_Start 17B7  
                  ?_Reset_EPS 0070              _I2C_Master_Write 17C5       getdata@bufstore_counter 0020  
                    ?___awdiv 0070                      ?___lldiv 0070             __size_of_waitFlag 048C  
                   __pstrings 0800                      ?_getdata 0070                __size_of_H_OUT 0046  
              __size_of_OUTFQ 027B                __size_of_L_OUT 0046                      ?_sprintf 0070  
              __size_of_putch 0008                 H_OUT@fmcwtxrx 0072                     clear_ram0 17D5  
                  OUTFQ@i_473 0052                    OUTFQ@i_475 0058                     _rcv_state 006A  
        __size_of_Init_SERIAL 0019                    OUTFQ@count 0054                     fcscheck@i 0075  
                   main@F2011 01CC                     main@F2013 01C2                     main@F2005 00C4  
                   main@F2009 01D6                   __stringbase 080F                     main@dData 00C3  
                    _Init_MPU 0867                   ??_Reset_EPS 0070                 fcscheck@i_134 0077  
 __size_of_ReceivePacket_data 004A              __size_of___awdiv 0059              __size_of___lldiv 005E  
          __end_of__stringtab 0810                    _EEPROMData 0110              __size_of_getdata 0061  
             _I2C_Master_Wait 0830               _I2C_Master_Stop 17BE                RFDOUT@fmcwtxrx 0079  
                    _efcsflag 00EA                      _fcscheck 0D0E                      __ptext10 17CD  
                    __ptext11 084E                      __ptext20 17B7                      __ptext12 0867  
                    __ptext21 0830                      __ptext13 09C9                      __ptext30 0839  
                    __ptext22 0917                      __ptext14 0BD2                      __ptext23 0D90  
                    __ptext15 096F                      __ptext24 00AC                      __ptext16 0943  
                    __ptext25 0B1C                      __ptext17 0B75                      __ptext26 0C91  
                    __ptext18 17C5                      __ptext27 099B                      __ptext19 17BE  
                    __ptext28 0A43                      __ptext29 09FD             __CFG_BOR4V$BOR40V 0000  
               ?_EEPROM_Write 0072              __size_of_sprintf 008E                 __size_of_FMRX 002C  
               __size_of_FMTX 002C                 __size_of_CWTX 002C                 __size_of__NOP 0015  
               ??_NM_waddress 0073                     waitFlag@i 0020                     waitFlag@j 0022  
               __size_of_main 018F                STBOUT@fmcwtxrx 0072                      _waitFlag 0327  
    NM_waddress@NM_wad_header 0073                 OUTFQ@fmcwtxrx 0079                main@EPS_kill_1 00A0  
              main@EPS_kill_2 00C2      __end_of_I2C_Master_Start 17BE                     putch@byte 0070  
    __end_of_I2C_Master_Write 17CD                      init_ram0 17E1                  fcscheck@byte 0079  
              ??_EEPROM_Write 0075            waitFlag@flag_judge 003A                     sprintf@ap 0078  
                   sprintf@cp 0079                     sprintf@sp 0070              ___lldiv@dividend 0074  
                   stringcode 080A                 main@FMRX_Nprg 00B7             main@NM_wad_header 00C1  
               main@FMTX_Nprg 00A3           __end_of_NM_waddress 1800                 main@CWTX_Nprg 00AD  
     __end_of_I2C_Master_Wait 0839       __end_of_I2C_Master_Stop 17C5                      sprintf@c 007B  
                    sprintf@f 0072                      strcmp@s1 0075                      strcmp@s2 0070  
            ___lldiv@quotient 0079             I2C_Master_Write@d 0070           EEPROM_Write@Address 0079  
                    stringdir 080A                      stringtab 0800           ReceivePacket_data@i 003F  
                main@EPS_kill 00A0       NM_waddress@wlow_address 0072  
