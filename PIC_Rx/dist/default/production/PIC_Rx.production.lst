

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Feb 19 20:10:00 2018

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	dabs	1,0x7E,2
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  008F                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  0105                     	;# 
   116  0107                     	;# 
   117  0108                     	;# 
   118  0109                     	;# 
   119  010C                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  0185                     	;# 
   125  0187                     	;# 
   126  0188                     	;# 
   127  0189                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  000E                     	;# 
   146  000F                     	;# 
   147  0010                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0013                     	;# 
   151  0014                     	;# 
   152  0015                     	;# 
   153  0015                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001B                     	;# 
   160  001B                     	;# 
   161  001C                     	;# 
   162  001D                     	;# 
   163  001E                     	;# 
   164  001F                     	;# 
   165  0081                     	;# 
   166  0085                     	;# 
   167  0086                     	;# 
   168  0087                     	;# 
   169  0088                     	;# 
   170  0089                     	;# 
   171  008C                     	;# 
   172  008D                     	;# 
   173  008E                     	;# 
   174  008F                     	;# 
   175  0090                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0094                     	;# 
   182  0095                     	;# 
   183  0096                     	;# 
   184  0097                     	;# 
   185  0098                     	;# 
   186  0099                     	;# 
   187  009A                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  0105                     	;# 
   194  0107                     	;# 
   195  0108                     	;# 
   196  0109                     	;# 
   197  010C                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  010F                     	;# 
   202  0185                     	;# 
   203  0187                     	;# 
   204  0188                     	;# 
   205  0189                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  0000                     	;# 
   209  0001                     	;# 
   210  0002                     	;# 
   211  0003                     	;# 
   212  0004                     	;# 
   213  0005                     	;# 
   214  0006                     	;# 
   215  0007                     	;# 
   216  0008                     	;# 
   217  0009                     	;# 
   218  000A                     	;# 
   219  000B                     	;# 
   220  000C                     	;# 
   221  000D                     	;# 
   222  000E                     	;# 
   223  000E                     	;# 
   224  000F                     	;# 
   225  0010                     	;# 
   226  0011                     	;# 
   227  0012                     	;# 
   228  0013                     	;# 
   229  0014                     	;# 
   230  0015                     	;# 
   231  0015                     	;# 
   232  0016                     	;# 
   233  0017                     	;# 
   234  0018                     	;# 
   235  0019                     	;# 
   236  001A                     	;# 
   237  001B                     	;# 
   238  001B                     	;# 
   239  001C                     	;# 
   240  001D                     	;# 
   241  001E                     	;# 
   242  001F                     	;# 
   243  0081                     	;# 
   244  0085                     	;# 
   245  0086                     	;# 
   246  0087                     	;# 
   247  0088                     	;# 
   248  0089                     	;# 
   249  008C                     	;# 
   250  008D                     	;# 
   251  008E                     	;# 
   252  008F                     	;# 
   253  0090                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0094                     	;# 
   260  0095                     	;# 
   261  0096                     	;# 
   262  0097                     	;# 
   263  0098                     	;# 
   264  0099                     	;# 
   265  009A                     	;# 
   266  009B                     	;# 
   267  009C                     	;# 
   268  009D                     	;# 
   269  009E                     	;# 
   270  009F                     	;# 
   271  0105                     	;# 
   272  0107                     	;# 
   273  0108                     	;# 
   274  0109                     	;# 
   275  010C                     	;# 
   276  010C                     	;# 
   277  010D                     	;# 
   278  010E                     	;# 
   279  010F                     	;# 
   280  0185                     	;# 
   281  0187                     	;# 
   282  0188                     	;# 
   283  0189                     	;# 
   284  018C                     	;# 
   285  018D                     	;# 
   286  0000                     	;# 
   287  0001                     	;# 
   288  0002                     	;# 
   289  0003                     	;# 
   290  0004                     	;# 
   291  0005                     	;# 
   292  0006                     	;# 
   293  0007                     	;# 
   294  0008                     	;# 
   295  0009                     	;# 
   296  000A                     	;# 
   297  000B                     	;# 
   298  000C                     	;# 
   299  000D                     	;# 
   300  000E                     	;# 
   301  000E                     	;# 
   302  000F                     	;# 
   303  0010                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0013                     	;# 
   307  0014                     	;# 
   308  0015                     	;# 
   309  0015                     	;# 
   310  0016                     	;# 
   311  0017                     	;# 
   312  0018                     	;# 
   313  0019                     	;# 
   314  001A                     	;# 
   315  001B                     	;# 
   316  001B                     	;# 
   317  001C                     	;# 
   318  001D                     	;# 
   319  001E                     	;# 
   320  001F                     	;# 
   321  0081                     	;# 
   322  0085                     	;# 
   323  0086                     	;# 
   324  0087                     	;# 
   325  0088                     	;# 
   326  0089                     	;# 
   327  008C                     	;# 
   328  008D                     	;# 
   329  008E                     	;# 
   330  008F                     	;# 
   331  0090                     	;# 
   332  0091                     	;# 
   333  0092                     	;# 
   334  0093                     	;# 
   335  0093                     	;# 
   336  0093                     	;# 
   337  0094                     	;# 
   338  0095                     	;# 
   339  0096                     	;# 
   340  0097                     	;# 
   341  0098                     	;# 
   342  0099                     	;# 
   343  009A                     	;# 
   344  009B                     	;# 
   345  009C                     	;# 
   346  009D                     	;# 
   347  009E                     	;# 
   348  009F                     	;# 
   349  0105                     	;# 
   350  0107                     	;# 
   351  0108                     	;# 
   352  0109                     	;# 
   353  010C                     	;# 
   354  010C                     	;# 
   355  010D                     	;# 
   356  010E                     	;# 
   357  010F                     	;# 
   358  0185                     	;# 
   359  0187                     	;# 
   360  0188                     	;# 
   361  0189                     	;# 
   362  018C                     	;# 
   363  018D                     	;# 
   364  0000                     	;# 
   365  0001                     	;# 
   366  0002                     	;# 
   367  0003                     	;# 
   368  0004                     	;# 
   369  0005                     	;# 
   370  0006                     	;# 
   371  0007                     	;# 
   372  0008                     	;# 
   373  0009                     	;# 
   374  000A                     	;# 
   375  000B                     	;# 
   376  000C                     	;# 
   377  000D                     	;# 
   378  000E                     	;# 
   379  000E                     	;# 
   380  000F                     	;# 
   381  0010                     	;# 
   382  0011                     	;# 
   383  0012                     	;# 
   384  0013                     	;# 
   385  0014                     	;# 
   386  0015                     	;# 
   387  0015                     	;# 
   388  0016                     	;# 
   389  0017                     	;# 
   390  0018                     	;# 
   391  0019                     	;# 
   392  001A                     	;# 
   393  001B                     	;# 
   394  001B                     	;# 
   395  001C                     	;# 
   396  001D                     	;# 
   397  001E                     	;# 
   398  001F                     	;# 
   399  0081                     	;# 
   400  0085                     	;# 
   401  0086                     	;# 
   402  0087                     	;# 
   403  0088                     	;# 
   404  0089                     	;# 
   405  008C                     	;# 
   406  008D                     	;# 
   407  008E                     	;# 
   408  008F                     	;# 
   409  0090                     	;# 
   410  0091                     	;# 
   411  0092                     	;# 
   412  0093                     	;# 
   413  0093                     	;# 
   414  0093                     	;# 
   415  0094                     	;# 
   416  0095                     	;# 
   417  0096                     	;# 
   418  0097                     	;# 
   419  0098                     	;# 
   420  0099                     	;# 
   421  009A                     	;# 
   422  009B                     	;# 
   423  009C                     	;# 
   424  009D                     	;# 
   425  009E                     	;# 
   426  009F                     	;# 
   427  0105                     	;# 
   428  0107                     	;# 
   429  0108                     	;# 
   430  0109                     	;# 
   431  010C                     	;# 
   432  010C                     	;# 
   433  010D                     	;# 
   434  010E                     	;# 
   435  010F                     	;# 
   436  0185                     	;# 
   437  0187                     	;# 
   438  0188                     	;# 
   439  0189                     	;# 
   440  018C                     	;# 
   441  018D                     	;# 
   442  0000                     	;# 
   443  0001                     	;# 
   444  0002                     	;# 
   445  0003                     	;# 
   446  0004                     	;# 
   447  0005                     	;# 
   448  0006                     	;# 
   449  0007                     	;# 
   450  0008                     	;# 
   451  0009                     	;# 
   452  000A                     	;# 
   453  000B                     	;# 
   454  000C                     	;# 
   455  000D                     	;# 
   456  000E                     	;# 
   457  000E                     	;# 
   458  000F                     	;# 
   459  0010                     	;# 
   460  0011                     	;# 
   461  0012                     	;# 
   462  0013                     	;# 
   463  0014                     	;# 
   464  0015                     	;# 
   465  0015                     	;# 
   466  0016                     	;# 
   467  0017                     	;# 
   468  0018                     	;# 
   469  0019                     	;# 
   470  001A                     	;# 
   471  001B                     	;# 
   472  001B                     	;# 
   473  001C                     	;# 
   474  001D                     	;# 
   475  001E                     	;# 
   476  001F                     	;# 
   477  0081                     	;# 
   478  0085                     	;# 
   479  0086                     	;# 
   480  0087                     	;# 
   481  0088                     	;# 
   482  0089                     	;# 
   483  008C                     	;# 
   484  008D                     	;# 
   485  008E                     	;# 
   486  008F                     	;# 
   487  0090                     	;# 
   488  0091                     	;# 
   489  0092                     	;# 
   490  0093                     	;# 
   491  0093                     	;# 
   492  0093                     	;# 
   493  0094                     	;# 
   494  0095                     	;# 
   495  0096                     	;# 
   496  0097                     	;# 
   497  0098                     	;# 
   498  0099                     	;# 
   499  009A                     	;# 
   500  009B                     	;# 
   501  009C                     	;# 
   502  009D                     	;# 
   503  009E                     	;# 
   504  009F                     	;# 
   505  0105                     	;# 
   506  0107                     	;# 
   507  0108                     	;# 
   508  0109                     	;# 
   509  010C                     	;# 
   510  010C                     	;# 
   511  010D                     	;# 
   512  010E                     	;# 
   513  010F                     	;# 
   514  0185                     	;# 
   515  0187                     	;# 
   516  0188                     	;# 
   517  0189                     	;# 
   518  018C                     	;# 
   519  018D                     	;# 
   520  0000                     	;# 
   521  0001                     	;# 
   522  0002                     	;# 
   523  0003                     	;# 
   524  0004                     	;# 
   525  0005                     	;# 
   526  0006                     	;# 
   527  0007                     	;# 
   528  0008                     	;# 
   529  0009                     	;# 
   530  000A                     	;# 
   531  000B                     	;# 
   532  000C                     	;# 
   533  000D                     	;# 
   534  000E                     	;# 
   535  000E                     	;# 
   536  000F                     	;# 
   537  0010                     	;# 
   538  0011                     	;# 
   539  0012                     	;# 
   540  0013                     	;# 
   541  0014                     	;# 
   542  0015                     	;# 
   543  0015                     	;# 
   544  0016                     	;# 
   545  0017                     	;# 
   546  0018                     	;# 
   547  0019                     	;# 
   548  001A                     	;# 
   549  001B                     	;# 
   550  001B                     	;# 
   551  001C                     	;# 
   552  001D                     	;# 
   553  001E                     	;# 
   554  001F                     	;# 
   555  0081                     	;# 
   556  0085                     	;# 
   557  0086                     	;# 
   558  0087                     	;# 
   559  0088                     	;# 
   560  0089                     	;# 
   561  008C                     	;# 
   562  008D                     	;# 
   563  008E                     	;# 
   564  008F                     	;# 
   565  0090                     	;# 
   566  0091                     	;# 
   567  0092                     	;# 
   568  0093                     	;# 
   569  0093                     	;# 
   570  0093                     	;# 
   571  0094                     	;# 
   572  0095                     	;# 
   573  0096                     	;# 
   574  0097                     	;# 
   575  0098                     	;# 
   576  0099                     	;# 
   577  009A                     	;# 
   578  009B                     	;# 
   579  009C                     	;# 
   580  009D                     	;# 
   581  009E                     	;# 
   582  009F                     	;# 
   583  0105                     	;# 
   584  0107                     	;# 
   585  0108                     	;# 
   586  0109                     	;# 
   587  010C                     	;# 
   588  010C                     	;# 
   589  010D                     	;# 
   590  010E                     	;# 
   591  010F                     	;# 
   592  0185                     	;# 
   593  0187                     	;# 
   594  0188                     	;# 
   595  0189                     	;# 
   596  018C                     	;# 
   597  018D                     	;# 
   598  0000                     	;# 
   599  0001                     	;# 
   600  0002                     	;# 
   601  0003                     	;# 
   602  0004                     	;# 
   603  0005                     	;# 
   604  0006                     	;# 
   605  0007                     	;# 
   606  0008                     	;# 
   607  0009                     	;# 
   608  000A                     	;# 
   609  000B                     	;# 
   610  000C                     	;# 
   611  000D                     	;# 
   612  000E                     	;# 
   613  000E                     	;# 
   614  000F                     	;# 
   615  0010                     	;# 
   616  0011                     	;# 
   617  0012                     	;# 
   618  0013                     	;# 
   619  0014                     	;# 
   620  0015                     	;# 
   621  0015                     	;# 
   622  0016                     	;# 
   623  0017                     	;# 
   624  0018                     	;# 
   625  0019                     	;# 
   626  001A                     	;# 
   627  001B                     	;# 
   628  001B                     	;# 
   629  001C                     	;# 
   630  001D                     	;# 
   631  001E                     	;# 
   632  001F                     	;# 
   633  0081                     	;# 
   634  0085                     	;# 
   635  0086                     	;# 
   636  0087                     	;# 
   637  0088                     	;# 
   638  0089                     	;# 
   639  008C                     	;# 
   640  008D                     	;# 
   641  008E                     	;# 
   642  008F                     	;# 
   643  0090                     	;# 
   644  0091                     	;# 
   645  0092                     	;# 
   646  0093                     	;# 
   647  0093                     	;# 
   648  0093                     	;# 
   649  0094                     	;# 
   650  0095                     	;# 
   651  0096                     	;# 
   652  0097                     	;# 
   653  0098                     	;# 
   654  0099                     	;# 
   655  009A                     	;# 
   656  009B                     	;# 
   657  009C                     	;# 
   658  009D                     	;# 
   659  009E                     	;# 
   660  009F                     	;# 
   661  0105                     	;# 
   662  0107                     	;# 
   663  0108                     	;# 
   664  0109                     	;# 
   665  010C                     	;# 
   666  010C                     	;# 
   667  010D                     	;# 
   668  010E                     	;# 
   669  010F                     	;# 
   670  0185                     	;# 
   671  0187                     	;# 
   672  0188                     	;# 
   673  0189                     	;# 
   674  018C                     	;# 
   675  018D                     	;# 
   676  0000                     	;# 
   677  0001                     	;# 
   678  0002                     	;# 
   679  0003                     	;# 
   680  0004                     	;# 
   681  0005                     	;# 
   682  0006                     	;# 
   683  0007                     	;# 
   684  0008                     	;# 
   685  0009                     	;# 
   686  000A                     	;# 
   687  000B                     	;# 
   688  000C                     	;# 
   689  000D                     	;# 
   690  000E                     	;# 
   691  000E                     	;# 
   692  000F                     	;# 
   693  0010                     	;# 
   694  0011                     	;# 
   695  0012                     	;# 
   696  0013                     	;# 
   697  0014                     	;# 
   698  0015                     	;# 
   699  0015                     	;# 
   700  0016                     	;# 
   701  0017                     	;# 
   702  0018                     	;# 
   703  0019                     	;# 
   704  001A                     	;# 
   705  001B                     	;# 
   706  001B                     	;# 
   707  001C                     	;# 
   708  001D                     	;# 
   709  001E                     	;# 
   710  001F                     	;# 
   711  0081                     	;# 
   712  0085                     	;# 
   713  0086                     	;# 
   714  0087                     	;# 
   715  0088                     	;# 
   716  0089                     	;# 
   717  008C                     	;# 
   718  008D                     	;# 
   719  008E                     	;# 
   720  008F                     	;# 
   721  0090                     	;# 
   722  0091                     	;# 
   723  0092                     	;# 
   724  0093                     	;# 
   725  0093                     	;# 
   726  0093                     	;# 
   727  0094                     	;# 
   728  0095                     	;# 
   729  0096                     	;# 
   730  0097                     	;# 
   731  0098                     	;# 
   732  0099                     	;# 
   733  009A                     	;# 
   734  009B                     	;# 
   735  009C                     	;# 
   736  009D                     	;# 
   737  009E                     	;# 
   738  009F                     	;# 
   739  0105                     	;# 
   740  0107                     	;# 
   741  0108                     	;# 
   742  0109                     	;# 
   743  010C                     	;# 
   744  010C                     	;# 
   745  010D                     	;# 
   746  010E                     	;# 
   747  010F                     	;# 
   748  0185                     	;# 
   749  0187                     	;# 
   750  0188                     	;# 
   751  0189                     	;# 
   752  018C                     	;# 
   753  018D                     	;# 
   754  0000                     	;# 
   755  0001                     	;# 
   756  0002                     	;# 
   757  0003                     	;# 
   758  0004                     	;# 
   759  0005                     	;# 
   760  0006                     	;# 
   761  0007                     	;# 
   762  0008                     	;# 
   763  0009                     	;# 
   764  000A                     	;# 
   765  000B                     	;# 
   766  000C                     	;# 
   767  000D                     	;# 
   768  000E                     	;# 
   769  000E                     	;# 
   770  000F                     	;# 
   771  0010                     	;# 
   772  0011                     	;# 
   773  0012                     	;# 
   774  0013                     	;# 
   775  0014                     	;# 
   776  0015                     	;# 
   777  0015                     	;# 
   778  0016                     	;# 
   779  0017                     	;# 
   780  0018                     	;# 
   781  0019                     	;# 
   782  001A                     	;# 
   783  001B                     	;# 
   784  001B                     	;# 
   785  001C                     	;# 
   786  001D                     	;# 
   787  001E                     	;# 
   788  001F                     	;# 
   789  0081                     	;# 
   790  0085                     	;# 
   791  0086                     	;# 
   792  0087                     	;# 
   793  0088                     	;# 
   794  0089                     	;# 
   795  008C                     	;# 
   796  008D                     	;# 
   797  008E                     	;# 
   798  008F                     	;# 
   799  0090                     	;# 
   800  0091                     	;# 
   801  0092                     	;# 
   802  0093                     	;# 
   803  0093                     	;# 
   804  0093                     	;# 
   805  0094                     	;# 
   806  0095                     	;# 
   807  0096                     	;# 
   808  0097                     	;# 
   809  0098                     	;# 
   810  0099                     	;# 
   811  009A                     	;# 
   812  009B                     	;# 
   813  009C                     	;# 
   814  009D                     	;# 
   815  009E                     	;# 
   816  009F                     	;# 
   817  0105                     	;# 
   818  0107                     	;# 
   819  0108                     	;# 
   820  0109                     	;# 
   821  010C                     	;# 
   822  010C                     	;# 
   823  010D                     	;# 
   824  010E                     	;# 
   825  010F                     	;# 
   826  0185                     	;# 
   827  0187                     	;# 
   828  0188                     	;# 
   829  0189                     	;# 
   830  018C                     	;# 
   831  018D                     	;# 
   832                           
   833                           	psect	idataBANK1
   834  08BD                     __pidataBANK1:	
   835                           
   836                           ;initializer for _CWTX_Nref
   837  08BD  34A0               	retlw	160
   838  08BE  3400               	retlw	0
   839                           
   840                           ;initializer for _FMRX_Nref
   841  08BF  3400               	retlw	0
   842  08C0  340A               	retlw	10
   843                           
   844                           ;initializer for _FMTX_Nref
   845  08C1  3400               	retlw	0
   846  08C2  340A               	retlw	10
   847                           
   848                           ;initializer for _CWTX_Nprg
   849  08C3  3400               	retlw	0
   850  08C4  3400               	retlw	0
   851  08C5  3401               	retlw	1
   852  08C6  3400               	retlw	0
   853  08C7  3407               	retlw	7
   854  08C8  3400               	retlw	0
   855  08C9  3404               	retlw	4
   856  08CA  3400               	retlw	0
   857  08CB  3407               	retlw	7
   858  08CC  3400               	retlw	0
   859                           
   860                           ;initializer for _FMTX_Nprg
   861  08CD  3408               	retlw	8
   862  08CE  3400               	retlw	0
   863  08CF  3407               	retlw	7
   864  08D0  3400               	retlw	0
   865  08D1  3403               	retlw	3
   866  08D2  3400               	retlw	0
   867  08D3  3400               	retlw	0
   868  08D4  3400               	retlw	0
   869  08D5  3400               	retlw	0
   870  08D6  3400               	retlw	0
   871                           
   872                           	psect	idataBANK2
   873  08A4                     __pidataBANK2:	
   874                           
   875                           ;initializer for _eDataField
   876  08A4  3448               	retlw	72
   877  08A5  3465               	retlw	101
   878  08A6  346C               	retlw	108
   879  08A7  346C               	retlw	108
   880  08A8  346F               	retlw	111
   881  08A9  3421               	retlw	33
   882  08AA  3420               	retlw	32
   883  08AB  3449               	retlw	73
   884  08AC  3427               	retlw	39
   885  08AD  346D               	retlw	109
   886  08AE  3420               	retlw	32
   887  08AF  344F               	retlw	79
   888  08B0  3472               	retlw	114
   889  08B1  3469               	retlw	105
   890  08B2  3467               	retlw	103
   891  08B3  3461               	retlw	97
   892  08B4  346D               	retlw	109
   893  08B5  3469               	retlw	105
   894  08B6  3453               	retlw	83
   895  08B7  3461               	retlw	97
   896  08B8  3474               	retlw	116
   897  08B9  3431               	retlw	49
   898  08BA  3421               	retlw	33
   899  08BB  3421               	retlw	33
   900  08BC  3400               	retlw	0
   901                           
   902                           	psect	idataBANK3
   903  0910                     __pidataBANK3:	
   904                           
   905                           ;initializer for main@F2006
   906  0910  3408               	retlw	8
   907  0911  3400               	retlw	0
   908  0912  3407               	retlw	7
   909  0913  3400               	retlw	0
   910  0914  3403               	retlw	3
   911  0915  3400               	retlw	0
   912  0916  3400               	retlw	0
   913  0917  3400               	retlw	0
   914  0918  3400               	retlw	0
   915  0919  3400               	retlw	0
   916                           
   917                           ;initializer for main@F2008
   918  091A  3400               	retlw	0
   919  091B  3400               	retlw	0
   920  091C  3401               	retlw	1
   921  091D  3400               	retlw	0
   922  091E  3407               	retlw	7
   923  091F  3400               	retlw	0
   924  0920  3404               	retlw	4
   925  0921  3400               	retlw	0
   926  0922  3407               	retlw	7
   927  0923  3400               	retlw	0
   928                           
   929                           ;initializer for main@F2010
   930  0924  3402               	retlw	2
   931  0925  3400               	retlw	0
   932  0926  3404               	retlw	4
   933  0927  3400               	retlw	0
   934  0928  3408               	retlw	8
   935  0929  3400               	retlw	0
   936  092A  3408               	retlw	8
   937  092B  3400               	retlw	0
   938  092C  3407               	retlw	7
   939  092D  3400               	retlw	0
   940                           
   941                           ;initializer for _FMRX_Nprg
   942  092E  3402               	retlw	2
   943  092F  3400               	retlw	0
   944  0930  3404               	retlw	4
   945  0931  3400               	retlw	0
   946  0932  3408               	retlw	8
   947  0933  3400               	retlw	0
   948  0934  3408               	retlw	8
   949  0935  3400               	retlw	0
   950  0936  3407               	retlw	7
   951  0937  3400               	retlw	0
   952                           
   953                           	psect	strings
   954  0800                     __pstrings:	
   955  0800                     stringtab:	
   956  0800                     __stringtab:	
   957  0800                     stringcode:	
   958                           ;	String table - string pointers are 1 byte each
   959                           
   960  0800                     stringdir:	
   961  0800  3008               	movlw	high stringdir
   962  0801  008A               	movwf	10
   963  0802  0804               	movf	4,w
   964  0803  0A84               	incf	4,f
   965  0804  0782               	addwf	2,f
   966  0805                     __stringbase:	
   967  0805  3400               	retlw	0
   968  0806                     __end_of__stringtab:	
   969  0806                     _commandSize:	
   970  0806  3420               	retlw	32
   971  0807  3400               	retlw	0
   972  0808                     __end_of_commandSize:	
   973  000E                     _TMR1	set	14
   974  000B                     _INTCONbits	set	11
   975  000C                     _PIR1bits	set	12
   976  0005                     _PORTA	set	5
   977  0005                     _PORTAbits	set	5
   978  0006                     _PORTB	set	6
   979  0007                     _PORTC	set	7
   980  0007                     _PORTCbits	set	7
   981  0008                     _PORTD	set	8
   982  0008                     _PORTDbits	set	8
   983  0009                     _PORTE	set	9
   984  0009                     _PORTEbits	set	9
   985  001A                     _RCREG	set	26
   986  0013                     _SSPBUF	set	19
   987  0014                     _SSPCON	set	20
   988  0003                     _STATUS	set	3
   989  0010                     _T1CONbits	set	16
   990  0019                     _TXREG	set	25
   991  00C4                     _CREN	set	196
   992  00C2                     _FERR	set	194
   993  00C1                     _OERR	set	193
   994  0029                     _RA1	set	41
   995  0032                     _RB2	set	50
   996  0034                     _RB4	set	52
   997  0035                     _RB5	set	53
   998  003A                     _RC2	set	58
   999  0065                     _RCIF	set	101
  1000  00C6                     _RX9	set	198
  1001  00C7                     _SPEN	set	199
  1002  00C5                     _SREN	set	197
  1003  0064                     _TXIF	set	100
  1004  008C                     _PIE1bits	set	140
  1005  0099                     _SPBRG	set	153
  1006  0093                     _SSPADD	set	147
  1007  0091                     _SSPCON2	set	145
  1008  0094                     _SSPSTAT	set	148
  1009  0085                     _TRISA	set	133
  1010  0086                     _TRISB	set	134
  1011  0087                     _TRISC	set	135
  1012  0088                     _TRISD	set	136
  1013  0089                     _TRISE	set	137
  1014  048D                     _ACKDT	set	1165
  1015  048C                     _ACKEN	set	1164
  1016  04C2                     _BRGH	set	1218
  1017  048A                     _PEN	set	1162
  1018  048B                     _RCEN	set	1163
  1019  0465                     _RCIE	set	1125
  1020  0489                     _RSEN	set	1161
  1021  0488                     _SEN	set	1160
  1022  04C4                     _SYNC	set	1220
  1023  04C6                     _TX9	set	1222
  1024  04C5                     _TXEN	set	1221
  1025  0464                     _TXIE	set	1124
  1026  0188                     _ANSEL	set	392
  1027  0189                     _ANSELH	set	393
  1028  0808                     STR_15:	
  1029  0808  3473               	retlw	115	;'s'
  1030  0809  3474               	retlw	116	;'t'
  1031  080A  3461               	retlw	97	;'a'
  1032  080B  3472               	retlw	114	;'r'
  1033  080C  3474               	retlw	116	;'t'
  1034  080D  340D               	retlw	13
  1035  080E  340A               	retlw	10
  1036  080F  3400               	retlw	0
  1037  0810                     STR_7:	
  1038  0810  344A               	retlw	74	;'J'
  1039  0811  3451               	retlw	81	;'Q'
  1040  0812  3431               	retlw	49	;'1'
  1041  0813  345A               	retlw	90	;'Z'
  1042  0814  3448               	retlw	72	;'H'
  1043  0815  3458               	retlw	88	;'X'
  1044  0816  3400               	retlw	0
  1045  0817                     STR_1:	
  1046  0817  344A               	retlw	74	;'J'
  1047  0818  3451               	retlw	81	;'Q'
  1048  0819  3431               	retlw	49	;'1'
  1049  081A  3459               	retlw	89	;'Y'
  1050  081B  3443               	retlw	67	;'C'
  1051  081C  345A               	retlw	90	;'Z'
  1052  081D  3400               	retlw	0
  1053  0810                     
  1054                           ; #config settings
  1055  0000                     
  1056                           	psect	cinit
  1057  07B3                     start_initialization:	
  1058  07B3                     __initialization:	
  1059                           
  1060                           ; Initialize objects allocated to BANK3
  1061  07B3  1783               	bsf	3,7	;select IRP bank2
  1062  07B4  30EA               	movlw	low (__pdataBANK3+40)
  1063  07B5  00FD               	movwf	btemp+-1
  1064  07B6  3009               	movlw	high __pidataBANK3
  1065  07B7  00FE               	movwf	btemp
  1066  07B8  3010               	movlw	low __pidataBANK3
  1067  07B9  00FF               	movwf	btemp+1
  1068  07BA  30C2               	movlw	low __pdataBANK3
  1069  07BB  0084               	movwf	4
  1070  07BC  120A  158A  2057  120A  118A  	fcall	init_ram0
  1071                           
  1072                           ; Initialize objects allocated to BANK2
  1073  07C1  3059               	movlw	low (__pdataBANK2+25)
  1074  07C2  00FD               	movwf	btemp+-1
  1075  07C3  3008               	movlw	high __pidataBANK2
  1076  07C4  00FE               	movwf	btemp
  1077  07C5  30A4               	movlw	low __pidataBANK2
  1078  07C6  00FF               	movwf	btemp+1
  1079  07C7  3040               	movlw	low __pdataBANK2
  1080  07C8  0084               	movwf	4
  1081  07C9  120A  158A  2057  120A  118A  	fcall	init_ram0
  1082                           
  1083                           ; Initialize objects allocated to BANK1
  1084  07CE  1383               	bcf	3,7	;select IRP bank0
  1085  07CF  30DC               	movlw	low (__pdataBANK1+26)
  1086  07D0  00FD               	movwf	btemp+-1
  1087  07D1  3008               	movlw	high __pidataBANK1
  1088  07D2  00FE               	movwf	btemp
  1089  07D3  30BD               	movlw	low __pidataBANK1
  1090  07D4  00FF               	movwf	btemp+1
  1091  07D5  30C2               	movlw	low __pdataBANK1
  1092  07D6  0084               	movwf	4
  1093  07D7  120A  158A  2057  120A  118A  	fcall	init_ram0
  1094                           
  1095                           ; Clear objects allocated to BANK3
  1096  07DC  1783               	bsf	3,7	;select IRP bank2
  1097  07DD  3090               	movlw	low __pbssBANK3
  1098  07DE  0084               	movwf	4
  1099  07DF  30C2               	movlw	low (__pbssBANK3+50)
  1100  07E0  120A  158A  2042  120A  118A  	fcall	clear_ram0
  1101                           
  1102                           ; Clear objects allocated to BANK2
  1103  07E5  3010               	movlw	low __pbssBANK2
  1104  07E6  0084               	movwf	4
  1105  07E7  3040               	movlw	low (__pbssBANK2+48)
  1106  07E8  120A  158A  2042  120A  118A  	fcall	clear_ram0
  1107                           
  1108                           ; Clear objects allocated to BANK1
  1109  07ED  1383               	bcf	3,7	;select IRP bank0
  1110  07EE  30DC               	movlw	low __pbssBANK1
  1111  07EF  0084               	movwf	4
  1112  07F0  30E9               	movlw	low (__pbssBANK1+13)
  1113  07F1  120A  158A  2042  120A  118A  	fcall	clear_ram0
  1114                           
  1115                           ; Clear objects allocated to BANK0
  1116  07F6  3066               	movlw	low __pbssBANK0
  1117  07F7  0084               	movwf	4
  1118  07F8  3070               	movlw	low (__pbssBANK0+10)
  1119  07F9  120A  158A  2042   	fcall	clear_ram0
  1120  07FC                     end_of_initialization:	
  1121                           ;End of C runtime variable initialization code
  1122                           
  1123  07FC                     __end_of__initialization:	
  1124  07FC  0183               	clrf	3
  1125  07FD  120A  158A  2E2E   	ljmp	_main	;jump to C main() function
  1126                           
  1127                           	psect	bssBANK0
  1128  0066                     __pbssBANK0:	
  1129  0066                     _dPacketnum:	
  1130  0066                     	ds	2
  1131  0068                     _eflag:	
  1132  0068                     	ds	2
  1133  006A                     _rcv_state:	
  1134  006A                     	ds	2
  1135  006C                     _dfcshi:	
  1136  006C                     	ds	1
  1137  006D                     _dfcslo:	
  1138  006D                     	ds	1
  1139  006E                     _efcshi:	
  1140  006E                     	ds	1
  1141  006F                     _efcslo:	
  1142  006F                     	ds	1
  1143                           
  1144                           	psect	bssBANK1
  1145  00DC                     __pbssBANK1:	
  1146  00DC                     _ePacket:	
  1147  00DC                     	ds	5
  1148  00E1                     _ebitstatus:	
  1149  00E1                     	ds	2
  1150  00E3                     _efcsflag:	
  1151  00E3                     	ds	2
  1152  00E5                     _estuff:	
  1153  00E5                     	ds	2
  1154  00E7                     getbit@oldbit:	
  1155  00E7                     	ds	2
  1156                           
  1157                           	psect	dataBANK1
  1158  00C2                     __pdataBANK1:	
  1159  00C2                     _CWTX_Nref:	
  1160  00C2                     	ds	2
  1161  00C4                     _FMRX_Nref:	
  1162  00C4                     	ds	2
  1163  00C6                     _FMTX_Nref:	
  1164  00C6                     	ds	2
  1165  00C8                     _CWTX_Nprg:	
  1166  00C8                     	ds	10
  1167  00D2                     _FMTX_Nprg:	
  1168  00D2                     	ds	10
  1169                           
  1170                           	psect	bssBANK3
  1171  0190                     __pbssBANK3:	
  1172  0190                     _dPacket:	
  1173  0190                     	ds	50
  1174                           
  1175                           	psect	dataBANK3
  1176  01C2                     __pdataBANK3:	
  1177  01C2                     main@F2006:	
  1178  01C2                     	ds	10
  1179  01CC                     main@F2008:	
  1180  01CC                     	ds	10
  1181  01D6                     main@F2010:	
  1182  01D6                     	ds	10
  1183  01E0                     _FMRX_Nprg:	
  1184  01E0                     	ds	10
  1185                           
  1186                           	psect	bssBANK2
  1187  0110                     __pbssBANK2:	
  1188  0110                     _EEPROMData:	
  1189  0110                     	ds	32
  1190  0130                     _dData:	
  1191  0130                     	ds	16
  1192                           
  1193                           	psect	dataBANK2
  1194  0140                     __pdataBANK2:	
  1195  0140                     _eDataField:	
  1196  0140                     	ds	25
  1197                           
  1198                           	psect	inittext
  1199  0853                     init_fetch0:	
  1200                           ;	Called with low address in FSR and high address in W
  1201                           
  1202  0853  087E               	movf	126,w
  1203  0854  008A               	movwf	10
  1204  0855  087F               	movf	127,w
  1205  0856  0082               	movwf	2
  1206  0857                     init_ram0:	
  1207                           ;Called with:
  1208                           ;	high address of idata address in btemp 
  1209                           ;	low address of idata address in btemp+1 
  1210                           ;	low address of data in FSR
  1211                           ;	high address + 1 of data in btemp-1
  1212                           
  1213  0857  2053  120A  158A   	fcall	init_fetch0
  1214  085A  0080               	movwf	0
  1215  085B  0A84               	incf	4,f
  1216  085C  0804               	movf	4,w
  1217  085D  067D               	xorwf	125,w
  1218  085E  1903               	btfsc	3,2
  1219  085F  3400               	retlw	0
  1220  0860  0AFF               	incf	127,f
  1221  0861  1903               	btfsc	3,2
  1222  0862  0AFE               	incf	126,f
  1223  0863  2857               	goto	init_ram0
  1224                           
  1225                           	psect	clrtext
  1226  0842                     clear_ram0:	
  1227                           ;	Called with FSR containing the base address, and
  1228                           ;	W with the last address+1
  1229                           
  1230  0842  0064               	clrwdt	;clear the watchdog before getting into this loop
  1231  0843                     clrloop0:	
  1232  0843  0180               	clrf	0	;clear RAM location pointed to by FSR
  1233  0844  0A84               	incf	4,f	;increment pointer
  1234  0845  0604               	xorwf	4,w	;XOR with final address
  1235  0846  1903               	btfsc	3,2	;have we reached the end yet?
  1236  0847  3400               	retlw	0	;all done for this memory range, return
  1237  0848  0604               	xorwf	4,w	;XOR again to restore value
  1238  0849  2843               	goto	clrloop0	;do the next byte
  1239                           
  1240                           	psect	cstackBANK1
  1241  00A0                     __pcstackBANK1:	
  1242  00A0                     main@FMTX_Nprg:	
  1243                           
  1244                           ; 10 bytes @ 0x0
  1245  00A0                     	ds	10
  1246  00AA                     main@CWTX_Nprg:	
  1247                           
  1248                           ; 10 bytes @ 0xA
  1249  00AA                     	ds	10
  1250  00B4                     main@FMRX_Nprg:	
  1251                           
  1252                           ; 10 bytes @ 0x14
  1253  00B4                     	ds	10
  1254  00BE                     main@NM_wad_header:	
  1255                           
  1256                           ; 1 bytes @ 0x1E
  1257  00BE                     	ds	1
  1258  00BF                     main@i:	
  1259                           
  1260                           ; 2 bytes @ 0x1F
  1261  00BF                     	ds	2
  1262  00C1                     main@dData:	
  1263                           
  1264                           ; 1 bytes @ 0x21
  1265  00C1                     	ds	1
  1266                           
  1267                           	psect	cstackCOMMON
  1268  0070                     __pcstackCOMMON:	
  1269  0070                     ?_Reset_EPS:	
  1270  0070                     ??_Reset_EPS:	
  1271                           ; 1 bytes @ 0x0
  1272                           
  1273  0070                     ?__NOP:	
  1274                           ; 1 bytes @ 0x0
  1275                           
  1276  0070                     ??__NOP:	
  1277                           ; 1 bytes @ 0x0
  1278                           
  1279  0070                     ?_Init_SERIAL:	
  1280                           ; 1 bytes @ 0x0
  1281                           
  1282  0070                     ??_Init_SERIAL:	
  1283                           ; 1 bytes @ 0x0
  1284                           
  1285  0070                     ?_putch:	
  1286                           ; 1 bytes @ 0x0
  1287                           
  1288  0070                     ??_putch:	
  1289                           ; 1 bytes @ 0x0
  1290                           
  1291  0070                     ?_Init_MPU:	
  1292                           ; 1 bytes @ 0x0
  1293                           
  1294  0070                     ??_Init_MPU:	
  1295                           ; 1 bytes @ 0x0
  1296                           
  1297  0070                     ?_waitFlag:	
  1298                           ; 1 bytes @ 0x0
  1299                           
  1300  0070                     ?_getdata:	
  1301                           ; 1 bytes @ 0x0
  1302                           
  1303  0070                     ?_ReceivePacket_data:	
  1304                           ; 1 bytes @ 0x0
  1305                           
  1306  0070                     ?_main:	
  1307                           ; 1 bytes @ 0x0
  1308                           
  1309  0070                     ?_I2C_Master_Wait:	
  1310                           ; 1 bytes @ 0x0
  1311                           
  1312  0070                     ??_I2C_Master_Wait:	
  1313                           ; 1 bytes @ 0x0
  1314                           
  1315  0070                     ?_I2C_Master_Start:	
  1316                           ; 1 bytes @ 0x0
  1317                           
  1318  0070                     ??_I2C_Master_Start:	
  1319                           ; 1 bytes @ 0x0
  1320                           
  1321  0070                     ?_I2C_Master_Stop:	
  1322                           ; 1 bytes @ 0x0
  1323                           
  1324  0070                     ??_I2C_Master_Stop:	
  1325                           ; 1 bytes @ 0x0
  1326                           
  1327  0070                     ?_I2C_Master_Write:	
  1328                           ; 1 bytes @ 0x0
  1329                           
  1330  0070                     ?_printf:	
  1331                           ; 1 bytes @ 0x0
  1332                           
  1333  0070                     ?_getbit:	
  1334                           ; 2 bytes @ 0x0
  1335                           
  1336  0070                     ?_fcscheck:	
  1337                           ; 2 bytes @ 0x0
  1338                           
  1339  0070                     ?___awdiv:	
  1340                           ; 2 bytes @ 0x0
  1341                           
  1342  0070                     ?___lldiv:	
  1343                           ; 2 bytes @ 0x0
  1344                           
  1345  0070                     putch@byte:	
  1346                           ; 4 bytes @ 0x0
  1347                           
  1348  0070                     I2C_Master_Write@d:	
  1349                           ; 1 bytes @ 0x0
  1350                           
  1351  0070                     __NOP@i:	
  1352                           ; 2 bytes @ 0x0
  1353                           
  1354  0070                     ___awdiv@divisor:	
  1355                           ; 2 bytes @ 0x0
  1356                           
  1357  0070                     ___lldiv@divisor:	
  1358                           ; 2 bytes @ 0x0
  1359                           
  1360                           
  1361                           ; 4 bytes @ 0x0
  1362  0070                     	ds	1
  1363  0071                     ??_printf:	
  1364  0071                     ?_NM_waddress:	
  1365                           ; 1 bytes @ 0x1
  1366                           
  1367  0071                     NM_waddress@whigh_address:	
  1368                           ; 1 bytes @ 0x1
  1369                           
  1370                           
  1371                           ; 1 bytes @ 0x1
  1372  0071                     	ds	1
  1373  0072                     ?_EEPROM_Write:	
  1374  0072                     ??_getbit:	
  1375                           ; 1 bytes @ 0x2
  1376                           
  1377  0072                     ??_fcscheck:	
  1378                           ; 1 bytes @ 0x2
  1379                           
  1380  0072                     ??_I2C_Master_Write:	
  1381                           ; 1 bytes @ 0x2
  1382                           
  1383  0072                     ?_L_OUT:	
  1384                           ; 1 bytes @ 0x2
  1385                           
  1386  0072                     ?_H_OUT:	
  1387                           ; 1 bytes @ 0x2
  1388                           
  1389  0072                     ?_STBOUT:	
  1390                           ; 1 bytes @ 0x2
  1391                           
  1392  0072                     NM_waddress@wlow_address:	
  1393                           ; 1 bytes @ 0x2
  1394                           
  1395  0072                     EEPROM_Write@high_address:	
  1396                           ; 1 bytes @ 0x2
  1397                           
  1398  0072                     printf@ap:	
  1399                           ; 1 bytes @ 0x2
  1400                           
  1401  0072                     L_OUT@fmcwtxrx:	
  1402                           ; 1 bytes @ 0x2
  1403                           
  1404  0072                     H_OUT@fmcwtxrx:	
  1405                           ; 2 bytes @ 0x2
  1406                           
  1407  0072                     STBOUT@fmcwtxrx:	
  1408                           ; 2 bytes @ 0x2
  1409                           
  1410  0072                     ___awdiv@dividend:	
  1411                           ; 2 bytes @ 0x2
  1412                           
  1413                           
  1414                           ; 2 bytes @ 0x2
  1415  0072                     	ds	1
  1416  0073                     ??_NM_waddress:	
  1417  0073                     NM_waddress@NM_wad_header:	
  1418                           ; 1 bytes @ 0x3
  1419                           
  1420  0073                     EEPROM_Write@low_address:	
  1421                           ; 1 bytes @ 0x3
  1422                           
  1423  0073                     printf@c:	
  1424                           ; 1 bytes @ 0x3
  1425                           
  1426                           
  1427                           ; 1 bytes @ 0x3
  1428  0073                     	ds	1
  1429  0074                     ??_L_OUT:	
  1430  0074                     ??_H_OUT:	
  1431                           ; 1 bytes @ 0x4
  1432                           
  1433  0074                     ??_STBOUT:	
  1434                           ; 1 bytes @ 0x4
  1435                           
  1436  0074                     ?_OPINIT:	
  1437                           ; 1 bytes @ 0x4
  1438                           
  1439  0074                     ??___awdiv:	
  1440                           ; 1 bytes @ 0x4
  1441                           
  1442  0074                     fcscheck@bt:	
  1443                           ; 1 bytes @ 0x4
  1444                           
  1445  0074                     EEPROM_Write@data:	
  1446                           ; 1 bytes @ 0x4
  1447                           
  1448  0074                     printf@f:	
  1449                           ; 1 bytes @ 0x4
  1450                           
  1451  0074                     getbit@i:	
  1452                           ; 1 bytes @ 0x4
  1453                           
  1454  0074                     OPINIT@fmcwtxrx:	
  1455                           ; 2 bytes @ 0x4
  1456                           
  1457  0074                     ___lldiv@dividend:	
  1458                           ; 2 bytes @ 0x4
  1459                           
  1460                           
  1461                           ; 4 bytes @ 0x4
  1462  0074                     	ds	1
  1463  0075                     ??_EEPROM_Write:	
  1464  0075                     ___awdiv@counter:	
  1465                           ; 1 bytes @ 0x5
  1466                           
  1467  0075                     fcscheck@i:	
  1468                           ; 1 bytes @ 0x5
  1469                           
  1470                           
  1471                           ; 2 bytes @ 0x5
  1472  0075                     	ds	1
  1473  0076                     ??_waitFlag:	
  1474  0076                     ??_getdata:	
  1475                           ; 1 bytes @ 0x6
  1476                           
  1477  0076                     ??_OPINIT:	
  1478                           ; 1 bytes @ 0x6
  1479                           
  1480  0076                     ___awdiv@sign:	
  1481                           ; 1 bytes @ 0x6
  1482                           
  1483                           
  1484                           ; 1 bytes @ 0x6
  1485  0076                     	ds	1
  1486  0077                     fcscheck@i_142:	
  1487  0077                     ___awdiv@quotient:	
  1488                           ; 2 bytes @ 0x7
  1489                           
  1490                           
  1491                           ; 2 bytes @ 0x7
  1492  0077                     	ds	1
  1493  0078                     ??___lldiv:	
  1494  0078                     EEPROM_Write@EEPROM_address:	
  1495                           ; 1 bytes @ 0x8
  1496                           
  1497                           
  1498                           ; 1 bytes @ 0x8
  1499  0078                     	ds	1
  1500  0079                     ?_OUTFQ:	
  1501  0079                     ?_RFDOUT:	
  1502                           ; 1 bytes @ 0x9
  1503                           
  1504  0079                     fcscheck@byte:	
  1505                           ; 1 bytes @ 0x9
  1506                           
  1507  0079                     EEPROM_Write@Address:	
  1508                           ; 1 bytes @ 0x9
  1509                           
  1510  0079                     OUTFQ@fmcwtxrx:	
  1511                           ; 1 bytes @ 0x9
  1512                           
  1513  0079                     RFDOUT@fmcwtxrx:	
  1514                           ; 2 bytes @ 0x9
  1515                           
  1516  0079                     ___lldiv@quotient:	
  1517                           ; 2 bytes @ 0x9
  1518                           
  1519                           
  1520                           ; 4 bytes @ 0x9
  1521  0079                     	ds	1
  1522  007A                     ??_ReceivePacket_data:	
  1523                           
  1524                           ; 1 bytes @ 0xA
  1525  007A                     	ds	1
  1526  007B                     OUTFQ@Nprg:	
  1527  007B                     RFDOUT@Nref:	
  1528                           ; 2 bytes @ 0xB
  1529                           
  1530                           
  1531                           ; 2 bytes @ 0xB
  1532  007B                     	ds	2
  1533  007D                     ??_FMTX:	
  1534  007D                     ??_CWTX:	
  1535                           ; 1 bytes @ 0xD
  1536                           
  1537  007D                     ??_FMRX:	
  1538                           ; 1 bytes @ 0xD
  1539                           
  1540  007D                     ___lldiv@counter:	
  1541                           ; 1 bytes @ 0xD
  1542                           
  1543                           
  1544                           ; 1 bytes @ 0xD
  1545  007D                     	ds	1
  1546                           
  1547                           	psect	cstackBANK0
  1548  0020                     __pcstackBANK0:	
  1549  0020                     ?_Init_I2C_M:	
  1550  0020                     ??_OUTFQ:	
  1551                           ; 1 bytes @ 0x0
  1552                           
  1553  0020                     ??_RFDOUT:	
  1554                           ; 1 bytes @ 0x0
  1555                           
  1556  0020                     waitFlag@i:	
  1557                           ; 1 bytes @ 0x0
  1558                           
  1559  0020                     getdata@bufstore_counter:	
  1560                           ; 2 bytes @ 0x0
  1561                           
  1562  0020                     Init_I2C_M@c:	
  1563                           ; 2 bytes @ 0x0
  1564                           
  1565                           
  1566                           ; 4 bytes @ 0x0
  1567  0020                     	ds	2
  1568  0022                     waitFlag@j:	
  1569  0022                     getdata@dstuff:	
  1570                           ; 2 bytes @ 0x2
  1571                           
  1572                           
  1573                           ; 2 bytes @ 0x2
  1574  0022                     	ds	1
  1575  0023                     RFDOUT@Nref_b:	
  1576                           
  1577                           ; 24 bytes @ 0x3
  1578  0023                     	ds	1
  1579  0024                     ??_Init_I2C_M:	
  1580  0024                     waitFlag@j_111:	
  1581                           ; 1 bytes @ 0x4
  1582                           
  1583  0024                     getdata@dbitstatus:	
  1584                           ; 2 bytes @ 0x4
  1585                           
  1586                           
  1587                           ; 2 bytes @ 0x4
  1588  0024                     	ds	2
  1589  0026                     getdata@buf:	
  1590  0026                     waitFlag@j_113:	
  1591                           ; 1 bytes @ 0x6
  1592                           
  1593                           
  1594                           ; 2 bytes @ 0x6
  1595  0026                     	ds	2
  1596  0028                     waitFlag@j_115:	
  1597                           
  1598                           ; 2 bytes @ 0x8
  1599  0028                     	ds	2
  1600  002A                     waitFlag@j_117:	
  1601                           
  1602                           ; 2 bytes @ 0xA
  1603  002A                     	ds	2
  1604  002C                     waitFlag@j_119:	
  1605                           
  1606                           ; 2 bytes @ 0xC
  1607  002C                     	ds	2
  1608  002E                     waitFlag@j_120:	
  1609                           
  1610                           ; 2 bytes @ 0xE
  1611  002E                     	ds	2
  1612  0030                     waitFlag@j_122:	
  1613  0030                     OUTFQ@Nprg_b:	
  1614                           ; 2 bytes @ 0x10
  1615                           
  1616                           
  1617                           ; 34 bytes @ 0x10
  1618  0030                     	ds	2
  1619  0032                     waitFlag@j_124:	
  1620                           
  1621                           ; 2 bytes @ 0x12
  1622  0032                     	ds	2
  1623  0034                     waitFlag@j_126:	
  1624                           
  1625                           ; 2 bytes @ 0x14
  1626  0034                     	ds	2
  1627  0036                     waitFlag@j_128:	
  1628                           
  1629                           ; 2 bytes @ 0x16
  1630  0036                     	ds	2
  1631  0038                     waitFlag@j_130:	
  1632                           
  1633                           ; 2 bytes @ 0x18
  1634  0038                     	ds	2
  1635  003A                     waitFlag@flag_judge:	
  1636                           
  1637                           ; 2 bytes @ 0x1A
  1638  003A                     	ds	1
  1639  003B                     RFDOUT@i_472:	
  1640                           
  1641                           ; 2 bytes @ 0x1B
  1642  003B                     	ds	1
  1643  003C                     waitFlag@buf:	
  1644                           
  1645                           ; 1 bytes @ 0x1C
  1646  003C                     	ds	1
  1647  003D                     ReceivePacket_data@fcschecker:	
  1648  003D                     RFDOUT@i:	
  1649                           ; 2 bytes @ 0x1D
  1650                           
  1651                           
  1652                           ; 2 bytes @ 0x1D
  1653  003D                     	ds	2
  1654  003F                     ReceivePacket_data@i:	
  1655  003F                     RFDOUT@i_473:	
  1656                           ; 2 bytes @ 0x1F
  1657                           
  1658                           
  1659                           ; 2 bytes @ 0x1F
  1660  003F                     	ds	19
  1661  0052                     OUTFQ@i_461:	
  1662                           
  1663                           ; 2 bytes @ 0x32
  1664  0052                     	ds	2
  1665  0054                     OUTFQ@count:	
  1666                           
  1667                           ; 2 bytes @ 0x34
  1668  0054                     	ds	2
  1669  0056                     OUTFQ@i:	
  1670                           
  1671                           ; 2 bytes @ 0x36
  1672  0056                     	ds	2
  1673  0058                     OUTFQ@i_463:	
  1674                           
  1675                           ; 2 bytes @ 0x38
  1676  0058                     	ds	2
  1677  005A                     OUTFQ@j:	
  1678                           
  1679                           ; 2 bytes @ 0x3A
  1680  005A                     	ds	2
  1681  005C                     ?_FMTX:	
  1682  005C                     ?_CWTX:	
  1683                           ; 1 bytes @ 0x3C
  1684                           
  1685  005C                     ?_FMRX:	
  1686                           ; 1 bytes @ 0x3C
  1687                           
  1688  005C                     FMTX@Nref:	
  1689                           ; 1 bytes @ 0x3C
  1690                           
  1691  005C                     CWTX@Nref:	
  1692                           ; 2 bytes @ 0x3C
  1693                           
  1694  005C                     FMRX@Nref:	
  1695                           ; 2 bytes @ 0x3C
  1696                           
  1697                           
  1698                           ; 2 bytes @ 0x3C
  1699  005C                     	ds	2
  1700  005E                     FMTX@Nprg:	
  1701  005E                     CWTX@Nprg:	
  1702                           ; 2 bytes @ 0x3E
  1703                           
  1704  005E                     FMRX@Nprg:	
  1705                           ; 2 bytes @ 0x3E
  1706                           
  1707                           
  1708                           ; 2 bytes @ 0x3E
  1709  005E                     	ds	2
  1710  0060                     FMTX@fmtx:	
  1711  0060                     CWTX@cwtx:	
  1712                           ; 2 bytes @ 0x40
  1713                           
  1714  0060                     FMRX@fmrx:	
  1715                           ; 2 bytes @ 0x40
  1716                           
  1717                           
  1718                           ; 2 bytes @ 0x40
  1719  0060                     	ds	2
  1720  0062                     ??_main:	
  1721                           
  1722                           ; 1 bytes @ 0x42
  1723  0062                     	ds	4
  1724                           
  1725                           	psect	maintext
  1726  0E2E                     __pmaintext:	
  1727 ;;
  1728 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1729 ;;
  1730 ;; *************** function _main *****************
  1731 ;; Defined at:
  1732 ;;		line 38 in file "main.c"
  1733 ;; Parameters:    Size  Location     Type
  1734 ;;		None
  1735 ;; Auto vars:     Size  Location     Type
  1736 ;;  FMRX_Nprg      10   20[BANK1 ] int [5]
  1737 ;;  CWTX_Nprg      10   10[BANK1 ] int [5]
  1738 ;;  FMTX_Nprg      10    0[BANK1 ] int [5]
  1739 ;;  NM_wad_heade    1   30[BANK1 ] unsigned char 
  1740 ;;  i               2   31[BANK1 ] unsigned int 
  1741 ;;  dData           1   33[BANK1 ] PTR unsigned char 
  1742 ;;		 -> NULL(0), dData(16), 
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  1    wreg      void 
  1745 ;; Registers used:
  1746 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1747 ;; Tracked objects:
  1748 ;;		On entry : B00/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1752 ;;      Params:         0       0       0       0       0
  1753 ;;      Locals:         0       0      34       0       0
  1754 ;;      Temps:          0       4       0       0       0
  1755 ;;      Totals:         0       4      34       0       0
  1756 ;;Total ram usage:       38 bytes
  1757 ;; Hardware stack levels required when called:    4
  1758 ;; This function calls:
  1759 ;;		_CWTX
  1760 ;;		_EEPROM_Write
  1761 ;;		_FMRX
  1762 ;;		_FMTX
  1763 ;;		_Init_I2C_M
  1764 ;;		_Init_MPU
  1765 ;;		_Init_SERIAL
  1766 ;;		_NM_waddress
  1767 ;;		_ReceivePacket_data
  1768 ;;		_Reset_EPS
  1769 ;;		_printf
  1770 ;; This function is called by:
  1771 ;;		Startup code after reset
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           
  1776                           ;psect for function _main
  1777  0E2E                     _main:	
  1778                           
  1779                           ;main.c: 43: _delay((unsigned long)((3000)*(10000000/4000.0)));
  1780                           
  1781                           ;incstack = 0
  1782                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1783  0E2E  3027               	movlw	39
  1784  0E2F  1283               	bcf	3,5	;RP0=0, select bank0
  1785  0E30  1303               	bcf	3,6	;RP1=0, select bank0
  1786  0E31  00E4               	movwf	??_main+2
  1787  0E32  300D               	movlw	13
  1788  0E33  00E3               	movwf	??_main+1
  1789  0E34  304B               	movlw	75
  1790  0E35  00E2               	movwf	??_main
  1791  0E36                     u3607:	
  1792  0E36  0BE2               	decfsz	??_main,f
  1793  0E37  2E36               	goto	u3607
  1794  0E38  0BE3               	decfsz	??_main+1,f
  1795  0E39  2E36               	goto	u3607
  1796  0E3A  0BE4               	decfsz	??_main+2,f
  1797  0E3B  2E36               	goto	u3607
  1798  0E3C  0000               	nop
  1799                           
  1800                           ;main.c: 45: Init_SERIAL();
  1801  0E3D  120A  158A  208B  120A  158A  	fcall	_Init_SERIAL
  1802                           
  1803                           ;main.c: 46: Init_MPU();
  1804  0E42  120A  158A  20F3  120A  158A  	fcall	_Init_MPU
  1805                           
  1806                           ;main.c: 47: Init_I2C_M(400000);
  1807  0E47  3000               	movlw	0
  1808  0E48  1283               	bcf	3,5	;RP0=0, select bank0
  1809  0E49  1303               	bcf	3,6	;RP1=0, select bank0
  1810  0E4A  00A3               	movwf	Init_I2C_M@c+3
  1811  0E4B  3006               	movlw	6
  1812  0E4C  00A2               	movwf	Init_I2C_M@c+2
  1813  0E4D  301A               	movlw	26
  1814  0E4E  00A1               	movwf	Init_I2C_M@c+1
  1815  0E4F  3080               	movlw	128
  1816  0E50  00A0               	movwf	Init_I2C_M@c
  1817  0E51  120A  158A  21EA  120A  158A  	fcall	_Init_I2C_M
  1818                           
  1819                           ;main.c: 54: RB2 = 1;
  1820  0E56  1283               	bcf	3,5	;RP0=0, select bank0
  1821  0E57  1303               	bcf	3,6	;RP1=0, select bank0
  1822  0E58  1506               	bsf	6,2	;volatile
  1823                           
  1824                           ;main.c: 55: _delay((unsigned long)((500)*(10000000/4000.0)));
  1825  0E59  3007               	movlw	7
  1826  0E5A  00E4               	movwf	??_main+2
  1827  0E5B  3058               	movlw	88
  1828  0E5C  00E3               	movwf	??_main+1
  1829  0E5D  305E               	movlw	94
  1830  0E5E  00E2               	movwf	??_main
  1831  0E5F                     u3617:	
  1832  0E5F  0BE2               	decfsz	??_main,f
  1833  0E60  2E5F               	goto	u3617
  1834  0E61  0BE3               	decfsz	??_main+1,f
  1835  0E62  2E5F               	goto	u3617
  1836  0E63  0BE4               	decfsz	??_main+2,f
  1837  0E64  2E5F               	goto	u3617
  1838  0E65  2E66               	nop2
  1839                           
  1840                           ;main.c: 57: FMTX(FMTX_Nref, FMTX_Nprg);
  1841  0E66  1683               	bsf	3,5	;RP0=1, select bank1
  1842  0E67  1303               	bcf	3,6	;RP1=0, select bank1
  1843  0E68  0847               	movf	(_FMTX_Nref+1)^(0+128),w
  1844  0E69  1283               	bcf	3,5	;RP0=0, select bank0
  1845  0E6A  1303               	bcf	3,6	;RP1=0, select bank0
  1846  0E6B  00DD               	movwf	FMTX@Nref+1
  1847  0E6C  1683               	bsf	3,5	;RP0=1, select bank1
  1848  0E6D  1303               	bcf	3,6	;RP1=0, select bank1
  1849  0E6E  0846               	movf	_FMTX_Nref^(0+128),w
  1850  0E6F  1283               	bcf	3,5	;RP0=0, select bank0
  1851  0E70  1303               	bcf	3,6	;RP1=0, select bank0
  1852  0E71  00DC               	movwf	FMTX@Nref
  1853  0E72  30D2               	movlw	(low (_FMTX_Nprg| 0))& (0+255)
  1854  0E73  00DE               	movwf	FMTX@Nprg
  1855  0E74  3000               	movlw	0
  1856  0E75  00DF               	movwf	FMTX@Nprg+1
  1857  0E76  120A  158A  2190  120A  158A  	fcall	_FMTX
  1858                           
  1859                           ;main.c: 58: CWTX(CWTX_Nref, CWTX_Nprg);
  1860  0E7B  1683               	bsf	3,5	;RP0=1, select bank1
  1861  0E7C  1303               	bcf	3,6	;RP1=0, select bank1
  1862  0E7D  0843               	movf	(_CWTX_Nref+1)^(0+128),w
  1863  0E7E  1283               	bcf	3,5	;RP0=0, select bank0
  1864  0E7F  1303               	bcf	3,6	;RP1=0, select bank0
  1865  0E80  00DD               	movwf	CWTX@Nref+1
  1866  0E81  1683               	bsf	3,5	;RP0=1, select bank1
  1867  0E82  1303               	bcf	3,6	;RP1=0, select bank1
  1868  0E83  0842               	movf	_CWTX_Nref^(0+128),w
  1869  0E84  1283               	bcf	3,5	;RP0=0, select bank0
  1870  0E85  1303               	bcf	3,6	;RP1=0, select bank0
  1871  0E86  00DC               	movwf	CWTX@Nref
  1872  0E87  30C8               	movlw	(low (_CWTX_Nprg| 0))& (0+255)
  1873  0E88  00DE               	movwf	CWTX@Nprg
  1874  0E89  3000               	movlw	0
  1875  0E8A  00DF               	movwf	CWTX@Nprg+1
  1876  0E8B  120A  158A  2138  120A  158A  	fcall	_CWTX
  1877                           
  1878                           ;main.c: 59: FMRX(FMRX_Nref, FMRX_Nprg);
  1879  0E90  1683               	bsf	3,5	;RP0=1, select bank1
  1880  0E91  1303               	bcf	3,6	;RP1=0, select bank1
  1881  0E92  0845               	movf	(_FMRX_Nref+1)^(0+128),w
  1882  0E93  1283               	bcf	3,5	;RP0=0, select bank0
  1883  0E94  1303               	bcf	3,6	;RP1=0, select bank0
  1884  0E95  00DD               	movwf	FMRX@Nref+1
  1885  0E96  1683               	bsf	3,5	;RP0=1, select bank1
  1886  0E97  1303               	bcf	3,6	;RP1=0, select bank1
  1887  0E98  0844               	movf	_FMRX_Nref^(0+128),w
  1888  0E99  1283               	bcf	3,5	;RP0=0, select bank0
  1889  0E9A  1303               	bcf	3,6	;RP1=0, select bank0
  1890  0E9B  00DC               	movwf	FMRX@Nref
  1891  0E9C  30E0               	movlw	(low (_FMRX_Nprg| (0+256)))& (0+255)
  1892  0E9D  00DE               	movwf	FMRX@Nprg
  1893  0E9E  3001               	movlw	1
  1894  0E9F  00DF               	movwf	FMRX@Nprg+1
  1895  0EA0  120A  158A  2164  120A  158A  	fcall	_FMRX
  1896                           
  1897                           ;main.c: 60: RB2 = 0;
  1898  0EA5  1283               	bcf	3,5	;RP0=0, select bank0
  1899  0EA6  1303               	bcf	3,6	;RP1=0, select bank0
  1900  0EA7  1106               	bcf	6,2	;volatile
  1901                           
  1902                           ;main.c: 61: printf("start\r\n");
  1903  0EA8  3003               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1904  0EA9  120A  158A  20D7  120A  158A  	fcall	_printf
  1905  0EAE                     l3757:	
  1906                           ;main.c: 63: while(1){
  1907                           
  1908                           
  1909                           ;main.c: 78: UBYTE *dData;
  1910                           ;main.c: 79: dData = ReceivePacket_data();
  1911  0EAE  120A  158A  246B  120A  158A  	fcall	_ReceivePacket_data
  1912  0EB3  1283               	bcf	3,5	;RP0=0, select bank0
  1913  0EB4  1303               	bcf	3,6	;RP1=0, select bank0
  1914  0EB5  00E2               	movwf	??_main
  1915  0EB6  0862               	movf	??_main,w
  1916  0EB7  1683               	bsf	3,5	;RP0=1, select bank1
  1917  0EB8  1303               	bcf	3,6	;RP1=0, select bank1
  1918  0EB9  00C1               	movwf	main@dData^(0+128)
  1919                           
  1920                           ;main.c: 80: RB2 = 1;
  1921  0EBA  1283               	bcf	3,5	;RP0=0, select bank0
  1922  0EBB  1303               	bcf	3,6	;RP1=0, select bank0
  1923  0EBC  1506               	bsf	6,2	;volatile
  1924                           
  1925                           ;main.c: 81: _delay((unsigned long)((500)*(10000000/4000.0)));
  1926  0EBD  3007               	movlw	7
  1927  0EBE  00E4               	movwf	??_main+2
  1928  0EBF  3058               	movlw	88
  1929  0EC0  00E3               	movwf	??_main+1
  1930  0EC1  305E               	movlw	94
  1931  0EC2  00E2               	movwf	??_main
  1932  0EC3                     u3627:	
  1933  0EC3  0BE2               	decfsz	??_main,f
  1934  0EC4  2EC3               	goto	u3627
  1935  0EC5  0BE3               	decfsz	??_main+1,f
  1936  0EC6  2EC3               	goto	u3627
  1937  0EC7  0BE4               	decfsz	??_main+2,f
  1938  0EC8  2EC3               	goto	u3627
  1939  0EC9  2ECA               	nop2
  1940                           
  1941                           ;main.c: 82: RB2 = 0;
  1942  0ECA  1283               	bcf	3,5	;RP0=0, select bank0
  1943  0ECB  1303               	bcf	3,6	;RP1=0, select bank0
  1944  0ECC  1106               	bcf	6,2	;volatile
  1945                           
  1946                           ;main.c: 84: EEPROM_Write(0x50,0x00,0x00,dData);
  1947  0ECD  01F2               	clrf	EEPROM_Write@high_address
  1948  0ECE  01F3               	clrf	EEPROM_Write@low_address
  1949  0ECF  1683               	bsf	3,5	;RP0=1, select bank1
  1950  0ED0  1303               	bcf	3,6	;RP1=0, select bank1
  1951  0ED1  0841               	movf	main@dData^(0+128),w
  1952  0ED2  1283               	bcf	3,5	;RP0=0, select bank0
  1953  0ED3  1303               	bcf	3,6	;RP1=0, select bank0
  1954  0ED4  00E2               	movwf	??_main
  1955  0ED5  0862               	movf	??_main,w
  1956  0ED6  00F4               	movwf	EEPROM_Write@data
  1957  0ED7  3050               	movlw	80
  1958  0ED8  120A  158A  234F  120A  158A  	fcall	_EEPROM_Write
  1959                           
  1960                           ;main.c: 86: for (UINT i = 0;i < 32;i++){
  1961  0EDD  1683               	bsf	3,5	;RP0=1, select bank1
  1962  0EDE  1303               	bcf	3,6	;RP1=0, select bank1
  1963  0EDF  01BF               	clrf	main@i^(0+128)
  1964  0EE0  01C0               	clrf	(main@i+1)^(0+128)
  1965  0EE1  3000               	movlw	0
  1966  0EE2  0240               	subwf	(main@i+1)^(0+128),w
  1967  0EE3  3020               	movlw	32
  1968  0EE4  1903               	skipnz
  1969  0EE5  023F               	subwf	main@i^(0+128),w
  1970  0EE6  1803               	btfsc	3,0
  1971  0EE7  2EF5               	goto	l3775
  1972  0EE8                     l3773:	
  1973  0EE8  3001               	movlw	1
  1974  0EE9  07BF               	addwf	main@i^(0+128),f
  1975  0EEA  1803               	skipnc
  1976  0EEB  0AC0               	incf	(main@i+1)^(0+128),f
  1977  0EEC  3000               	movlw	0
  1978  0EED  07C0               	addwf	(main@i+1)^(0+128),f
  1979  0EEE  3000               	movlw	0
  1980  0EEF  0240               	subwf	(main@i+1)^(0+128),w
  1981  0EF0  3020               	movlw	32
  1982  0EF1  1903               	skipnz
  1983  0EF2  023F               	subwf	main@i^(0+128),w
  1984  0EF3  1C03               	skipc
  1985  0EF4  2EE8               	goto	l3773
  1986  0EF5                     l3775:	
  1987                           
  1988                           ;main.c: 89: }
  1989                           ;main.c: 96: if(dData[0]=='n'){
  1990  0EF5  0841               	movf	main@dData^(0+128),w
  1991  0EF6  0084               	movwf	4
  1992  0EF7  306E               	movlw	110
  1993  0EF8  1783               	bsf	3,7	;select IRP bank2
  1994  0EF9  0600               	xorwf	0,w
  1995  0EFA  1D03               	btfss	3,2
  1996  0EFB  2F0D               	goto	l3781
  1997                           
  1998                           ;main.c: 98: UBYTE NM_wad_header = 0x72;
  1999  0EFC  3072               	movlw	114
  2000  0EFD  1283               	bcf	3,5	;RP0=0, select bank0
  2001  0EFE  1303               	bcf	3,6	;RP1=0, select bank0
  2002  0EFF  00E2               	movwf	??_main
  2003  0F00  0862               	movf	??_main,w
  2004  0F01  1683               	bsf	3,5	;RP0=1, select bank1
  2005  0F02  1303               	bcf	3,6	;RP1=0, select bank1
  2006  0F03  00BE               	movwf	main@NM_wad_header^(0+128)
  2007                           
  2008                           ;main.c: 99: NM_waddress(NM_wad_header, 0x00, 0x00);
  2009  0F04  01F1               	clrf	NM_waddress@whigh_address
  2010  0F05  01F2               	clrf	NM_waddress@wlow_address
  2011  0F06  083E               	movf	main@NM_wad_header^(0+128),w
  2012  0F07  120A  158A  2064  120A  158A  	fcall	_NM_waddress
  2013                           
  2014                           ;main.c: 101: }else if(dData[0]=='p'){
  2015  0F0C  2FF0               	goto	l435
  2016  0F0D                     l3781:	
  2017  0F0D  1683               	bsf	3,5	;RP0=1, select bank1
  2018  0F0E  1303               	bcf	3,6	;RP1=0, select bank1
  2019  0F0F  0841               	movf	main@dData^(0+128),w
  2020  0F10  0084               	movwf	4
  2021  0F11  3070               	movlw	112
  2022  0F12  1783               	bsf	3,7	;select IRP bank2
  2023  0F13  0600               	xorwf	0,w
  2024  0F14  1D03               	btfss	3,2
  2025  0F15  2FDD               	goto	l436
  2026                           
  2027                           ;main.c: 106: if(dData[2] == 'r'){
  2028  0F16  0841               	movf	main@dData^(0+128),w
  2029  0F17  3E02               	addlw	2
  2030  0F18  0084               	movwf	4
  2031  0F19  3072               	movlw	114
  2032  0F1A  0600               	xorwf	0,w
  2033  0F1B  1903               	btfsc	3,2
  2034  0F1C  2FC5               	goto	l3807
  2035  0F1D  2FF0               	goto	l435
  2036  0F1E                     l3787:	
  2037                           ;main.c: 112: case 'E':
  2038                           
  2039                           ;main.c: 111: switch(dData[3]){
  2040                           
  2041                           
  2042                           ;main.c: 117: Reset_EPS();
  2043  0F1E  120A  118A  2007  120A  158A  	fcall	_Reset_EPS
  2044                           
  2045                           ;main.c: 118: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2046  0F23  3040               	movlw	64
  2047  0F24  1283               	bcf	3,5	;RP0=0, select bank0
  2048  0F25  1303               	bcf	3,6	;RP1=0, select bank0
  2049  0F26  00E4               	movwf	??_main+2
  2050  0F27  306A               	movlw	106
  2051  0F28  00E3               	movwf	??_main+1
  2052  0F29  30D5               	movlw	213
  2053  0F2A  00E2               	movwf	??_main
  2054  0F2B                     u3637:	
  2055  0F2B  0BE2               	decfsz	??_main,f
  2056  0F2C  2F2B               	goto	u3637
  2057  0F2D  0BE3               	decfsz	??_main+1,f
  2058  0F2E  2F2B               	goto	u3637
  2059  0F2F  0BE4               	decfsz	??_main+2,f
  2060  0F30  2F2B               	goto	u3637
  2061  0F31  2F32               	nop2
  2062                           
  2063                           ;main.c: 121: int FMTX_Nprg[5] = {8,7,3,0,0};
  2064  0F32  30A0               	movlw	main@FMTX_Nprg& (0+255)
  2065  0F33  0084               	movwf	4
  2066  0F34  30C2               	movlw	low main@F2006
  2067  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  2068  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  2069  0F37  00E2               	movwf	??_main
  2070  0F38  0804               	movf	4,w
  2071  0F39  00E3               	movwf	??_main+1
  2072  0F3A  300A               	movlw	10
  2073  0F3B  00E4               	movwf	??_main+2
  2074  0F3C                     u3550:	
  2075  0F3C  0862               	movf	??_main,w
  2076  0F3D  0084               	movwf	4
  2077  0F3E  1783               	bsf	3,7	;select IRP bank3
  2078  0F3F  0800               	movf	0,w
  2079  0F40  00E5               	movwf	??_main+3
  2080  0F41  0AE2               	incf	??_main,f
  2081  0F42  0863               	movf	??_main+1,w
  2082  0F43  0084               	movwf	4
  2083  0F44  1383               	bcf	3,7	;select IRP bank1
  2084  0F45  0865               	movf	??_main+3,w
  2085  0F46  0080               	movwf	0
  2086  0F47  0AE3               	incf	??_main+1,f
  2087  0F48  0BE4               	decfsz	??_main+2,f
  2088  0F49  2F3C               	goto	u3550
  2089                           
  2090                           ;main.c: 122: int CWTX_Nprg[5] = {0,1,7,4,7};
  2091  0F4A  30AA               	movlw	main@CWTX_Nprg& (0+255)
  2092  0F4B  0084               	movwf	4
  2093  0F4C  30CC               	movlw	low main@F2008
  2094  0F4D  00E2               	movwf	??_main
  2095  0F4E  0804               	movf	4,w
  2096  0F4F  00E3               	movwf	??_main+1
  2097  0F50  300A               	movlw	10
  2098  0F51  00E4               	movwf	??_main+2
  2099  0F52                     u3560:	
  2100  0F52  0862               	movf	??_main,w
  2101  0F53  0084               	movwf	4
  2102  0F54  1783               	bsf	3,7	;select IRP bank3
  2103  0F55  0800               	movf	0,w
  2104  0F56  00E5               	movwf	??_main+3
  2105  0F57  0AE2               	incf	??_main,f
  2106  0F58  0863               	movf	??_main+1,w
  2107  0F59  0084               	movwf	4
  2108  0F5A  1383               	bcf	3,7	;select IRP bank1
  2109  0F5B  0865               	movf	??_main+3,w
  2110  0F5C  0080               	movwf	0
  2111  0F5D  0AE3               	incf	??_main+1,f
  2112  0F5E  0BE4               	decfsz	??_main+2,f
  2113  0F5F  2F52               	goto	u3560
  2114                           
  2115                           ;main.c: 123: int FMRX_Nprg[5] = {2,4,8,8,7};
  2116  0F60  30B4               	movlw	main@FMRX_Nprg& (0+255)
  2117  0F61  0084               	movwf	4
  2118  0F62  30D6               	movlw	low main@F2010
  2119  0F63  00E2               	movwf	??_main
  2120  0F64  0804               	movf	4,w
  2121  0F65  00E3               	movwf	??_main+1
  2122  0F66  300A               	movlw	10
  2123  0F67  00E4               	movwf	??_main+2
  2124  0F68                     u3570:	
  2125  0F68  0862               	movf	??_main,w
  2126  0F69  0084               	movwf	4
  2127  0F6A  1783               	bsf	3,7	;select IRP bank3
  2128  0F6B  0800               	movf	0,w
  2129  0F6C  00E5               	movwf	??_main+3
  2130  0F6D  0AE2               	incf	??_main,f
  2131  0F6E  0863               	movf	??_main+1,w
  2132  0F6F  0084               	movwf	4
  2133  0F70  1383               	bcf	3,7	;select IRP bank1
  2134  0F71  0865               	movf	??_main+3,w
  2135  0F72  0080               	movwf	0
  2136  0F73  0AE3               	incf	??_main+1,f
  2137  0F74  0BE4               	decfsz	??_main+2,f
  2138  0F75  2F68               	goto	u3570
  2139                           
  2140                           ;main.c: 125: FMTX(FMTX_Nref, FMTX_Nprg);
  2141  0F76  1683               	bsf	3,5	;RP0=1, select bank1
  2142  0F77  1303               	bcf	3,6	;RP1=0, select bank1
  2143  0F78  0847               	movf	(_FMTX_Nref+1)^(0+128),w
  2144  0F79  1283               	bcf	3,5	;RP0=0, select bank0
  2145  0F7A  1303               	bcf	3,6	;RP1=0, select bank0
  2146  0F7B  00DD               	movwf	FMTX@Nref+1
  2147  0F7C  1683               	bsf	3,5	;RP0=1, select bank1
  2148  0F7D  1303               	bcf	3,6	;RP1=0, select bank1
  2149  0F7E  0846               	movf	_FMTX_Nref^(0+128),w
  2150  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  2151  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  2152  0F81  00DC               	movwf	FMTX@Nref
  2153  0F82  30A0               	movlw	(low (main@FMTX_Nprg| 0))& (0+255)
  2154  0F83  00DE               	movwf	FMTX@Nprg
  2155  0F84  3000               	movlw	0
  2156  0F85  00DF               	movwf	FMTX@Nprg+1
  2157  0F86  120A  158A  2190  120A  158A  	fcall	_FMTX
  2158                           
  2159                           ;main.c: 126: CWTX(CWTX_Nref, CWTX_Nprg);
  2160  0F8B  1683               	bsf	3,5	;RP0=1, select bank1
  2161  0F8C  1303               	bcf	3,6	;RP1=0, select bank1
  2162  0F8D  0843               	movf	(_CWTX_Nref+1)^(0+128),w
  2163  0F8E  1283               	bcf	3,5	;RP0=0, select bank0
  2164  0F8F  1303               	bcf	3,6	;RP1=0, select bank0
  2165  0F90  00DD               	movwf	CWTX@Nref+1
  2166  0F91  1683               	bsf	3,5	;RP0=1, select bank1
  2167  0F92  1303               	bcf	3,6	;RP1=0, select bank1
  2168  0F93  0842               	movf	_CWTX_Nref^(0+128),w
  2169  0F94  1283               	bcf	3,5	;RP0=0, select bank0
  2170  0F95  1303               	bcf	3,6	;RP1=0, select bank0
  2171  0F96  00DC               	movwf	CWTX@Nref
  2172  0F97  30AA               	movlw	(low (main@CWTX_Nprg| 0))& (0+255)
  2173  0F98  00DE               	movwf	CWTX@Nprg
  2174  0F99  3000               	movlw	0
  2175  0F9A  00DF               	movwf	CWTX@Nprg+1
  2176  0F9B  120A  158A  2138  120A  158A  	fcall	_CWTX
  2177                           
  2178                           ;main.c: 127: FMRX(FMRX_Nref, FMRX_Nprg);
  2179  0FA0  1683               	bsf	3,5	;RP0=1, select bank1
  2180  0FA1  1303               	bcf	3,6	;RP1=0, select bank1
  2181  0FA2  0845               	movf	(_FMRX_Nref+1)^(0+128),w
  2182  0FA3  1283               	bcf	3,5	;RP0=0, select bank0
  2183  0FA4  1303               	bcf	3,6	;RP1=0, select bank0
  2184  0FA5  00DD               	movwf	FMRX@Nref+1
  2185  0FA6  1683               	bsf	3,5	;RP0=1, select bank1
  2186  0FA7  1303               	bcf	3,6	;RP1=0, select bank1
  2187  0FA8  0844               	movf	_FMRX_Nref^(0+128),w
  2188  0FA9  1283               	bcf	3,5	;RP0=0, select bank0
  2189  0FAA  1303               	bcf	3,6	;RP1=0, select bank0
  2190  0FAB  00DC               	movwf	FMRX@Nref
  2191  0FAC  30B4               	movlw	(low (main@FMRX_Nprg| 0))& (0+255)
  2192  0FAD  00DE               	movwf	FMRX@Nprg
  2193  0FAE  3000               	movlw	0
  2194  0FAF  00DF               	movwf	FMRX@Nprg+1
  2195  0FB0  120A  158A  2164  120A  158A  	fcall	_FMRX
  2196                           
  2197                           ;main.c: 128: _delay((unsigned long)((500)*(10000000/4000.0)));
  2198  0FB5  3007               	movlw	7
  2199  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  2200  0FB7  1303               	bcf	3,6	;RP1=0, select bank0
  2201  0FB8  00E4               	movwf	??_main+2
  2202  0FB9  3058               	movlw	88
  2203  0FBA  00E3               	movwf	??_main+1
  2204  0FBB  305E               	movlw	94
  2205  0FBC  00E2               	movwf	??_main
  2206  0FBD                     u3647:	
  2207  0FBD  0BE2               	decfsz	??_main,f
  2208  0FBE  2FBD               	goto	u3647
  2209  0FBF  0BE3               	decfsz	??_main+1,f
  2210  0FC0  2FBD               	goto	u3647
  2211  0FC1  0BE4               	decfsz	??_main+2,f
  2212  0FC2  2FBD               	goto	u3647
  2213  0FC3  2FC4               	nop2
  2214                           
  2215                           ;main.c: 145: }
  2216                           
  2217                           ;main.c: 144: break;
  2218                           
  2219                           ;main.c: 142: default:
  2220                           
  2221                           ;main.c: 141: break;
  2222                           
  2223                           ;main.c: 139: case 'T':
  2224                           
  2225                           ;main.c: 138: break;
  2226                           
  2227                           ;main.c: 136: case 'N':
  2228                           
  2229                           ;main.c: 135: break;
  2230                           
  2231                           ;main.c: 133: case '3':
  2232                           
  2233                           ;main.c: 132: break;
  2234                           
  2235                           ;main.c: 130: case 'I':
  2236                           
  2237                           ;main.c: 129: break;
  2238  0FC4  2FF0               	goto	l435
  2239  0FC5                     l3807:	
  2240  0FC5  1683               	bsf	3,5	;RP0=1, select bank1
  2241  0FC6  1303               	bcf	3,6	;RP1=0, select bank1
  2242  0FC7  0841               	movf	main@dData^(0+128),w
  2243  0FC8  3E03               	addlw	3
  2244  0FC9  0084               	movwf	4
  2245  0FCA  1783               	bsf	3,7	;select IRP bank2
  2246  0FCB  0800               	movf	0,w
  2247                           
  2248                           ; Switch size 1, requested type "space"
  2249                           ; Number of cases is 5, Range of values is 51 to 84
  2250                           ; switch strategies available:
  2251                           ; Name         Instructions Cycles
  2252                           ; simple_byte           16     9 (average)
  2253                           ; direct_byte          113    11 (fixed)
  2254                           ; jumptable            263     9 (fixed)
  2255                           ;	Chosen strategy is simple_byte
  2256  0FCC  3A33               	xorlw	51	; case 51
  2257  0FCD  1903               	skipnz
  2258  0FCE  2FF0               	goto	l435
  2259  0FCF  3A76               	xorlw	118	; case 69
  2260  0FD0  1903               	skipnz
  2261  0FD1  2F1E               	goto	l3787
  2262  0FD2  3A0C               	xorlw	12	; case 73
  2263  0FD3  1903               	skipnz
  2264  0FD4  2FF0               	goto	l435
  2265  0FD5  3A07               	xorlw	7	; case 78
  2266  0FD6  1903               	skipnz
  2267  0FD7  2FF0               	goto	l435
  2268  0FD8  3A1A               	xorlw	26	; case 84
  2269  0FD9  1903               	skipnz
  2270  0FDA  2FF0               	goto	l435
  2271  0FDB  2FF0               	goto	l435
  2272                           
  2273                           ;main.c: 149: }
  2274                           ;main.c: 150: }else{
  2275                           
  2276                           ;main.c: 147: }else if(dData[2] == 't'){
  2277  0FDC  2FF0               	goto	l435
  2278  0FDD                     l436:	
  2279                           
  2280                           ;main.c: 151: RB2 = 1;
  2281  0FDD  1283               	bcf	3,5	;RP0=0, select bank0
  2282  0FDE  1303               	bcf	3,6	;RP1=0, select bank0
  2283  0FDF  1506               	bsf	6,2	;volatile
  2284                           
  2285                           ;main.c: 152: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2286  0FE0  300D               	movlw	13
  2287  0FE1  00E4               	movwf	??_main+2
  2288  0FE2  30AF               	movlw	175
  2289  0FE3  00E3               	movwf	??_main+1
  2290  0FE4  30C1               	movlw	193
  2291  0FE5  00E2               	movwf	??_main
  2292  0FE6                     u3657:	
  2293  0FE6  0BE2               	decfsz	??_main,f
  2294  0FE7  2FE6               	goto	u3657
  2295  0FE8  0BE3               	decfsz	??_main+1,f
  2296  0FE9  2FE6               	goto	u3657
  2297  0FEA  0BE4               	decfsz	??_main+2,f
  2298  0FEB  2FE6               	goto	u3657
  2299  0FEC  0000               	nop
  2300                           
  2301                           ;main.c: 153: RB2 = 0;
  2302  0FED  1283               	bcf	3,5	;RP0=0, select bank0
  2303  0FEE  1303               	bcf	3,6	;RP1=0, select bank0
  2304  0FEF  1106               	bcf	6,2	;volatile
  2305  0FF0                     l435:	
  2306                           
  2307                           ;main.c: 154: }
  2308                           ;main.c: 198: _delay((unsigned long)((500)*(10000000/4000.0)));
  2309  0FF0  3007               	movlw	7
  2310  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  2311  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
  2312  0FF3  00E4               	movwf	??_main+2
  2313  0FF4  3058               	movlw	88
  2314  0FF5  00E3               	movwf	??_main+1
  2315  0FF6  305E               	movlw	94
  2316  0FF7  00E2               	movwf	??_main
  2317  0FF8                     u3667:	
  2318  0FF8  0BE2               	decfsz	??_main,f
  2319  0FF9  2FF8               	goto	u3667
  2320  0FFA  0BE3               	decfsz	??_main+1,f
  2321  0FFB  2FF8               	goto	u3667
  2322  0FFC  0BE4               	decfsz	??_main+2,f
  2323  0FFD  2FF8               	goto	u3667
  2324  0FFE  2FFF               	nop2
  2325  0FFF  2EAE               	goto	l3757
  2326  1000                     __end_of_main:	
  2327                           ;main.c: 199: }
  2328                           ;main.c: 200: return;
  2329                           
  2330                           
  2331                           	psect	text1
  2332  08D7                     __ptext1:	
  2333 ;; *************** function _printf *****************
  2334 ;; Defined at:
  2335 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  2336 ;; Parameters:    Size  Location     Type
  2337 ;;  f               1    wreg     PTR const unsigned char 
  2338 ;;		 -> STR_15(8), 
  2339 ;; Auto vars:     Size  Location     Type
  2340 ;;  f               1    4[COMMON] PTR const unsigned char 
  2341 ;;		 -> STR_15(8), 
  2342 ;;  tmpval          4    0        struct .
  2343 ;;  cp              2    0        PTR const unsigned char 
  2344 ;;  len             2    0        unsigned int 
  2345 ;;  val             2    0        unsigned int 
  2346 ;;  c               1    3[COMMON] char 
  2347 ;;  ap              1    2[COMMON] PTR void [1]
  2348 ;;		 -> ?_printf(2), 
  2349 ;;  flag            1    0        unsigned char 
  2350 ;;  prec            1    0        char 
  2351 ;; Return value:  Size  Location     Type
  2352 ;;                  2  408[None  ] int 
  2353 ;; Registers used:
  2354 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2355 ;; Tracked objects:
  2356 ;;		On entry : 0/0
  2357 ;;		On exit  : 0/0
  2358 ;;		Unchanged: 0/0
  2359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2360 ;;      Params:         0       0       0       0       0
  2361 ;;      Locals:         3       0       0       0       0
  2362 ;;      Temps:          1       0       0       0       0
  2363 ;;      Totals:         4       0       0       0       0
  2364 ;;Total ram usage:        4 bytes
  2365 ;; Hardware stack levels used:    1
  2366 ;; Hardware stack levels required when called:    1
  2367 ;; This function calls:
  2368 ;;		_putch
  2369 ;; This function is called by:
  2370 ;;		_main
  2371 ;; This function uses a non-reentrant model
  2372 ;;
  2373                           
  2374                           
  2375                           ;psect for function _printf
  2376  08D7                     _printf:	
  2377                           
  2378                           ;incstack = 0
  2379                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2380                           ;printf@f stored from wreg
  2381  08D7  00F4               	movwf	printf@f
  2382                           
  2383                           ;doprnt.c: 466: va_list ap;
  2384                           ;doprnt.c: 499: signed char c;
  2385                           ;doprnt.c: 506: signed char prec;
  2386                           ;doprnt.c: 508: unsigned char flag;
  2387                           ;doprnt.c: 523: union {
  2388                           ;doprnt.c: 524: unsigned long vd;
  2389                           ;doprnt.c: 525: double integ;
  2390                           ;doprnt.c: 526: } tmpval;
  2391                           ;doprnt.c: 528: unsigned int val;
  2392                           ;doprnt.c: 529: unsigned len;
  2393                           ;doprnt.c: 530: const char * cp;
  2394                           ;doprnt.c: 533: *ap = __va_start();
  2395  08D8  3070               	movlw	(low (?_printf| 0))& (0+255)
  2396  08D9  00F1               	movwf	??_printf
  2397  08DA  0871               	movf	??_printf,w
  2398  08DB  00F2               	movwf	printf@ap
  2399  08DC                     l3473:	
  2400                           ;doprnt.c: 543: }
  2401                           ;doprnt.c: 1422: {
  2402                           
  2403                           ;doprnt.c: 542: continue;
  2404                           
  2405                           ;doprnt.c: 536: while(c = *f++) {
  2406                           
  2407  08DC  3001               	movlw	1
  2408  08DD  07F4               	addwf	printf@f,f
  2409  08DE  30FF               	movlw	-1
  2410  08DF  0774               	addwf	printf@f,w
  2411  08E0  0084               	movwf	4
  2412  08E1  120A  158A  2000  120A  158A  	fcall	stringdir
  2413  08E6  00F1               	movwf	??_printf
  2414  08E7  0871               	movf	??_printf,w
  2415  08E8  00F3               	movwf	printf@c
  2416  08E9  0873               	movf	printf@c,w
  2417  08EA  1903               	btfsc	3,2
  2418  08EB  0008               	return
  2419                           
  2420                           ;doprnt.c: 540: {
  2421                           ;doprnt.c: 541: (putch(c) );
  2422  08EC  0873               	movf	printf@c,w
  2423  08ED  120A  158A  203A  120A  158A  	fcall	_putch
  2424  08F2  28DC               	goto	l3473
  2425  08F3                     __end_of_printf:	
  2426                           ;doprnt.c: 1469: }
  2427                           ;doprnt.c: 1533: }
  2428                           ;doprnt.c: 1540: return 0;
  2429                           ;	Return value of _printf is never used
  2430                           
  2431                           
  2432                           	psect	text2
  2433  0007                     __ptext2:	
  2434 ;; *************** function _Reset_EPS *****************
  2435 ;; Defined at:
  2436 ;;		line 19 in file "EPS.c"
  2437 ;; Parameters:    Size  Location     Type
  2438 ;;		None
  2439 ;; Auto vars:     Size  Location     Type
  2440 ;;		None
  2441 ;; Return value:  Size  Location     Type
  2442 ;;                  1    wreg      void 
  2443 ;; Registers used:
  2444 ;;		wreg
  2445 ;; Tracked objects:
  2446 ;;		On entry : 0/0
  2447 ;;		On exit  : 0/0
  2448 ;;		Unchanged: 0/0
  2449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2450 ;;      Params:         0       0       0       0       0
  2451 ;;      Locals:         0       0       0       0       0
  2452 ;;      Temps:          3       0       0       0       0
  2453 ;;      Totals:         3       0       0       0       0
  2454 ;;Total ram usage:        3 bytes
  2455 ;; Hardware stack levels used:    1
  2456 ;; This function calls:
  2457 ;;		Nothing
  2458 ;; This function is called by:
  2459 ;;		_main
  2460 ;; This function uses a non-reentrant model
  2461 ;;
  2462                           
  2463                           
  2464                           ;psect for function _Reset_EPS
  2465  0007                     _Reset_EPS:	
  2466                           
  2467                           ;EPS.c: 20: RB4 = 1;
  2468                           
  2469                           ;incstack = 0
  2470                           ; Regs used in _Reset_EPS: [wreg]
  2471  0007  1283               	bcf	3,5	;RP0=0, select bank0
  2472  0008  1303               	bcf	3,6	;RP1=0, select bank0
  2473  0009  1606               	bsf	6,4	;volatile
  2474                           
  2475                           ;EPS.c: 21: RA1 = 1;
  2476  000A  1485               	bsf	5,1	;volatile
  2477                           
  2478                           ;EPS.c: 22: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2479  000B  3040               	movlw	64
  2480  000C  00F2               	movwf	??_Reset_EPS+2
  2481  000D  306A               	movlw	106
  2482  000E  00F1               	movwf	??_Reset_EPS+1
  2483  000F  30D5               	movlw	213
  2484  0010  00F0               	movwf	??_Reset_EPS
  2485  0011                     u3677:	
  2486  0011  0BF0               	decfsz	??_Reset_EPS,f
  2487  0012  2811               	goto	u3677
  2488  0013  0BF1               	decfsz	??_Reset_EPS+1,f
  2489  0014  2811               	goto	u3677
  2490  0015  0BF2               	decfsz	??_Reset_EPS+2,f
  2491  0016  2811               	goto	u3677
  2492  0017  2818               	nop2
  2493                           
  2494                           ;EPS.c: 23: RB4 = 0;
  2495  0018  1283               	bcf	3,5	;RP0=0, select bank0
  2496  0019  1303               	bcf	3,6	;RP1=0, select bank0
  2497  001A  1206               	bcf	6,4	;volatile
  2498                           
  2499                           ;EPS.c: 24: RA1 = 0;
  2500  001B  1085               	bcf	5,1	;volatile
  2501                           
  2502                           ;EPS.c: 25: _delay((unsigned long)((500)*(10000000/4000.0)));
  2503  001C  3007               	movlw	7
  2504  001D  00F2               	movwf	??_Reset_EPS+2
  2505  001E  3058               	movlw	88
  2506  001F  00F1               	movwf	??_Reset_EPS+1
  2507  0020  305E               	movlw	94
  2508  0021  00F0               	movwf	??_Reset_EPS
  2509  0022                     u3687:	
  2510  0022  0BF0               	decfsz	??_Reset_EPS,f
  2511  0023  2822               	goto	u3687
  2512  0024  0BF1               	decfsz	??_Reset_EPS+1,f
  2513  0025  2822               	goto	u3687
  2514  0026  0BF2               	decfsz	??_Reset_EPS+2,f
  2515  0027  2822               	goto	u3687
  2516  0028  2829               	nop2
  2517  0029  0008               	return
  2518  002A                     __end_of_Reset_EPS:	
  2519                           
  2520                           	psect	text3
  2521  0C6B                     __ptext3:	
  2522 ;; *************** function _ReceivePacket_data *****************
  2523 ;; Defined at:
  2524 ;;		line 359 in file "decode_AX25.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;		None
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;  i               2   31[BANK0 ] unsigned int 
  2529 ;;  fcschecker      2   29[BANK0 ] unsigned int 
  2530 ;; Return value:  Size  Location     Type
  2531 ;;                  1    wreg      PTR unsigned char 
  2532 ;; Registers used:
  2533 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2534 ;; Tracked objects:
  2535 ;;		On entry : 0/0
  2536 ;;		On exit  : 0/0
  2537 ;;		Unchanged: 0/0
  2538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2539 ;;      Params:         0       0       0       0       0
  2540 ;;      Locals:         0       4       0       0       0
  2541 ;;      Temps:          2       0       0       0       0
  2542 ;;      Totals:         2       4       0       0       0
  2543 ;;Total ram usage:        6 bytes
  2544 ;; Hardware stack levels used:    1
  2545 ;; Hardware stack levels required when called:    2
  2546 ;; This function calls:
  2547 ;;		_fcscheck
  2548 ;;		_getdata
  2549 ;;		_waitFlag
  2550 ;; This function is called by:
  2551 ;;		_main
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           
  2556                           ;psect for function _ReceivePacket_data
  2557  0C6B                     _ReceivePacket_data:	
  2558                           
  2559                           ;decode_AX25.c: 360: UINT fcschecker;
  2560                           ;decode_AX25.c: 363: waitFlag();
  2561                           
  2562                           ;incstack = 0
  2563                           ; Regs used in _ReceivePacket_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2564  0C6B  120A  118A  2327  120A  158A  	fcall	_waitFlag
  2565                           
  2566                           ;decode_AX25.c: 365: getdata();
  2567  0C70  120A  158A  240A  120A  158A  	fcall	_getdata
  2568                           
  2569                           ;decode_AX25.c: 367: fcschecker = fcscheck();
  2570  0C75  120A  118A  202A  120A  158A  	fcall	_fcscheck
  2571  0C7A  0871               	movf	?_fcscheck+1,w
  2572  0C7B  1283               	bcf	3,5	;RP0=0, select bank0
  2573  0C7C  1303               	bcf	3,6	;RP1=0, select bank0
  2574  0C7D  00BE               	movwf	ReceivePacket_data@fcschecker+1
  2575  0C7E  0870               	movf	?_fcscheck,w
  2576  0C7F  00BD               	movwf	ReceivePacket_data@fcschecker
  2577                           
  2578                           ;decode_AX25.c: 369: if(fcschecker == 1){
  2579  0C80  033D               	decf	ReceivePacket_data@fcschecker,w
  2580  0C81  043E               	iorwf	ReceivePacket_data@fcschecker+1,w
  2581  0C82  1D03               	btfss	3,2
  2582  0C83  2CCA               	goto	l3383
  2583                           
  2584                           ;decode_AX25.c: 370: for(UINT i=0; i<commandSize; i++){
  2585  0C84  01BF               	clrf	ReceivePacket_data@i
  2586  0C85  01C0               	clrf	ReceivePacket_data@i+1
  2587  0C86  3001               	movlw	low (_commandSize-__stringbase)
  2588  0C87  0084               	movwf	4
  2589  0C88  120A  158A  2000  120A  158A  	fcall	stringdir
  2590  0C8D  00FA               	movwf	??_ReceivePacket_data
  2591  0C8E  120A  158A  2000  120A  158A  	fcall	stringdir
  2592  0C93  00FB               	movwf	??_ReceivePacket_data+1
  2593  0C94  087B               	movf	??_ReceivePacket_data+1,w
  2594  0C95  0240               	subwf	ReceivePacket_data@i+1,w
  2595  0C96  1D03               	skipz
  2596  0C97  2C9A               	goto	u3105
  2597  0C98  087A               	movf	??_ReceivePacket_data,w
  2598  0C99  023F               	subwf	ReceivePacket_data@i,w
  2599  0C9A                     u3105:	
  2600  0C9A  1803               	btfsc	3,0
  2601  0C9B  2CC4               	goto	l3375
  2602  0C9C                     l3369:	
  2603                           
  2604                           ;decode_AX25.c: 371: dData[i] = dPacket[i+20];
  2605  0C9C  083F               	movf	ReceivePacket_data@i,w
  2606  0C9D  3E14               	addlw	20
  2607  0C9E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2608  0C9F  0084               	movwf	4
  2609  0CA0  1783               	bsf	3,7	;select IRP bank3
  2610  0CA1  0800               	movf	0,w
  2611  0CA2  00FA               	movwf	??_ReceivePacket_data
  2612  0CA3  083F               	movf	ReceivePacket_data@i,w
  2613  0CA4  3E30               	addlw	(low (_dData| (0+256)))& (0+255)
  2614  0CA5  0084               	movwf	4
  2615  0CA6  087A               	movf	??_ReceivePacket_data,w
  2616  0CA7  0080               	movwf	0
  2617  0CA8  3001               	movlw	1
  2618  0CA9  07BF               	addwf	ReceivePacket_data@i,f
  2619  0CAA  1803               	skipnc
  2620  0CAB  0AC0               	incf	ReceivePacket_data@i+1,f
  2621  0CAC  3000               	movlw	0
  2622  0CAD  07C0               	addwf	ReceivePacket_data@i+1,f
  2623  0CAE  3001               	movlw	low (_commandSize-__stringbase)
  2624  0CAF  0084               	movwf	4
  2625  0CB0  120A  158A  2000  120A  158A  	fcall	stringdir
  2626  0CB5  00FA               	movwf	??_ReceivePacket_data
  2627  0CB6  120A  158A  2000  120A  158A  	fcall	stringdir
  2628  0CBB  00FB               	movwf	??_ReceivePacket_data+1
  2629  0CBC  087B               	movf	??_ReceivePacket_data+1,w
  2630  0CBD  0240               	subwf	ReceivePacket_data@i+1,w
  2631  0CBE  1D03               	skipz
  2632  0CBF  2CC2               	goto	u3115
  2633  0CC0  087A               	movf	??_ReceivePacket_data,w
  2634  0CC1  023F               	subwf	ReceivePacket_data@i,w
  2635  0CC2                     u3115:	
  2636  0CC2  1C03               	skipc
  2637  0CC3  2C9C               	goto	l3369
  2638  0CC4                     l3375:	
  2639                           
  2640                           ;decode_AX25.c: 372: }
  2641                           ;decode_AX25.c: 373: dPacketnum = 0;
  2642  0CC4  01E6               	clrf	_dPacketnum
  2643  0CC5  01E7               	clrf	_dPacketnum+1
  2644                           
  2645                           ;decode_AX25.c: 374: rcv_state = 0;
  2646  0CC6  01EA               	clrf	_rcv_state
  2647  0CC7  01EB               	clrf	_rcv_state+1
  2648                           
  2649                           ;decode_AX25.c: 375: return dData;
  2650  0CC8  3030               	movlw	(low (_dData| (0+256)))& (0+255)
  2651                           
  2652                           ;decode_AX25.c: 376: }else{
  2653  0CC9  0008               	return
  2654  0CCA                     l3383:	
  2655                           
  2656                           ;decode_AX25.c: 377: dPacketnum = 0;
  2657  0CCA  01E6               	clrf	_dPacketnum
  2658  0CCB  01E7               	clrf	_dPacketnum+1
  2659                           
  2660                           ;decode_AX25.c: 378: rcv_state = 0;
  2661  0CCC  01EA               	clrf	_rcv_state
  2662  0CCD  01EB               	clrf	_rcv_state+1
  2663                           
  2664                           ;decode_AX25.c: 379: return 0x00;
  2665  0CCE  3000               	movlw	0
  2666  0CCF  0008               	return
  2667  0CD0                     __end_of_ReceivePacket_data:	
  2668                           
  2669                           	psect	text4
  2670  0327                     __ptext4:	
  2671 ;; *************** function _waitFlag *****************
  2672 ;; Defined at:
  2673 ;;		line 54 in file "decode_AX25.c"
  2674 ;; Parameters:    Size  Location     Type
  2675 ;;		None
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;  j               2   24[BANK0 ] unsigned int 
  2678 ;;  j               2   10[BANK0 ] unsigned int 
  2679 ;;  j               2   22[BANK0 ] unsigned int 
  2680 ;;  j               2    8[BANK0 ] unsigned int 
  2681 ;;  j               2   20[BANK0 ] unsigned int 
  2682 ;;  j               2    6[BANK0 ] unsigned int 
  2683 ;;  j               2   18[BANK0 ] unsigned int 
  2684 ;;  j               2    4[BANK0 ] unsigned int 
  2685 ;;  j               2   16[BANK0 ] unsigned int 
  2686 ;;  j               2    2[BANK0 ] unsigned int 
  2687 ;;  i               2    0[BANK0 ] unsigned int 
  2688 ;;  j               2   14[BANK0 ] unsigned int 
  2689 ;;  j               2   12[BANK0 ] unsigned int 
  2690 ;;  flag_judge      2   26[BANK0 ] unsigned int 
  2691 ;;  buf             1   28[BANK0 ] unsigned char 
  2692 ;; Return value:  Size  Location     Type
  2693 ;;                  1    wreg      void 
  2694 ;; Registers used:
  2695 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2696 ;; Tracked objects:
  2697 ;;		On entry : 0/0
  2698 ;;		On exit  : 0/0
  2699 ;;		Unchanged: 0/0
  2700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2701 ;;      Params:         0       0       0       0       0
  2702 ;;      Locals:         0      29       0       0       0
  2703 ;;      Temps:          4       0       0       0       0
  2704 ;;      Totals:         4      29       0       0       0
  2705 ;;Total ram usage:       33 bytes
  2706 ;; Hardware stack levels used:    1
  2707 ;; Hardware stack levels required when called:    1
  2708 ;; This function calls:
  2709 ;;		_getbit
  2710 ;; This function is called by:
  2711 ;;		_ReceivePacket_data
  2712 ;;		_ReceivePacket
  2713 ;; This function uses a non-reentrant model
  2714 ;;
  2715                           
  2716                           
  2717                           ;psect for function _waitFlag
  2718  0327                     _waitFlag:	
  2719                           
  2720                           ;decode_AX25.c: 55: UINT flag_judge;
  2721                           ;decode_AX25.c: 56: UBYTE buf = 0xff;
  2722                           
  2723                           ;incstack = 0
  2724                           ; Regs used in _waitFlag: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2725  0327  30FF               	movlw	255
  2726  0328  00F6               	movwf	??_waitFlag
  2727  0329  0876               	movf	??_waitFlag,w
  2728  032A  1283               	bcf	3,5	;RP0=0, select bank0
  2729  032B  1303               	bcf	3,6	;RP1=0, select bank0
  2730  032C  00BC               	movwf	waitFlag@buf
  2731  032D                     L6:	
  2732                           
  2733                           ;decode_AX25.c: 271: rcv_state = 0;
  2734  032D  01EA               	clrf	_rcv_state
  2735  032E  01EB               	clrf	_rcv_state+1
  2736  032F                     l3067:	
  2737  032F  3000               	movlw	0
  2738  0330  026B               	subwf	_rcv_state+1,w
  2739  0331  3002               	movlw	2
  2740  0332  1903               	skipnz
  2741  0333  026A               	subwf	_rcv_state,w
  2742  0334  1803               	btfsc	3,0
  2743  0335  0008               	return
  2744  0336                     l2701:	
  2745                           ;decode_AX25.c: 59: while(buf != 0x7e){
  2746                           
  2747                           ;decode_AX25.c: 58: while(rcv_state < 2){
  2748                           
  2749                           ;decode_AX25.c: 57: rcv_state = 0;
  2750                           
  2751  0336  307E               	movlw	126
  2752  0337  063C               	xorwf	waitFlag@buf,w
  2753  0338  1903               	btfsc	3,2
  2754  0339  2B86               	goto	l2723
  2755                           
  2756                           ;decode_AX25.c: 60: flag_judge = getbit();
  2757  033A  120A  158A  22AA  120A  118A  	fcall	_getbit
  2758  033F  0871               	movf	?_getbit+1,w
  2759  0340  1283               	bcf	3,5	;RP0=0, select bank0
  2760  0341  1303               	bcf	3,6	;RP1=0, select bank0
  2761  0342  00BB               	movwf	waitFlag@flag_judge+1
  2762  0343  0870               	movf	?_getbit,w
  2763  0344  00BA               	movwf	waitFlag@flag_judge
  2764                           
  2765                           ;decode_AX25.c: 61: buf = buf << 1;
  2766  0345  083C               	movf	waitFlag@buf,w
  2767  0346  00F6               	movwf	??_waitFlag
  2768  0347  0776               	addwf	??_waitFlag,w
  2769  0348  00F7               	movwf	??_waitFlag+1
  2770  0349  0877               	movf	??_waitFlag+1,w
  2771  034A  00BC               	movwf	waitFlag@buf
  2772                           
  2773                           ;decode_AX25.c: 63: buf = buf | 0x00;
  2774  034B  083A               	movf	waitFlag@flag_judge,w
  2775  034C  043B               	iorwf	waitFlag@flag_judge+1,w
  2776  034D  1903               	btfsc	3,2
  2777  034E  2B36               	goto	l2701
  2778                           
  2779                           ;decode_AX25.c: 65: buf = buf | 0x01;
  2780                           
  2781                           ;decode_AX25.c: 64: }else{
  2782  034F  083C               	movf	waitFlag@buf,w
  2783  0350  3801               	iorlw	1
  2784  0351  00F6               	movwf	??_waitFlag
  2785  0352  0876               	movf	??_waitFlag,w
  2786  0353  00BC               	movwf	waitFlag@buf
  2787  0354  2B36               	goto	l2701
  2788  0355                     l2703:	
  2789                           ;decode_AX25.c: 66: }
  2790                           ;decode_AX25.c: 67: }
  2791                           ;decode_AX25.c: 71: while(buf == 0x7e){
  2792                           
  2793                           
  2794                           ;decode_AX25.c: 72: for(UINT i=0;i<8;i++){
  2795  0355  01A0               	clrf	waitFlag@i
  2796  0356  01A1               	clrf	waitFlag@i+1
  2797  0357  3000               	movlw	0
  2798  0358  0221               	subwf	waitFlag@i+1,w
  2799  0359  3008               	movlw	8
  2800  035A  1903               	skipnz
  2801  035B  0220               	subwf	waitFlag@i,w
  2802  035C  1803               	btfsc	3,0
  2803  035D  2B86               	goto	l2723
  2804  035E                     l2709:	
  2805                           
  2806                           ;decode_AX25.c: 73: flag_judge = getbit();
  2807  035E  120A  158A  22AA  120A  118A  	fcall	_getbit
  2808  0363  0871               	movf	?_getbit+1,w
  2809  0364  1283               	bcf	3,5	;RP0=0, select bank0
  2810  0365  1303               	bcf	3,6	;RP1=0, select bank0
  2811  0366  00BB               	movwf	waitFlag@flag_judge+1
  2812  0367  0870               	movf	?_getbit,w
  2813  0368  00BA               	movwf	waitFlag@flag_judge
  2814                           
  2815                           ;decode_AX25.c: 74: buf = buf >> 1;
  2816  0369  083C               	movf	waitFlag@buf,w
  2817  036A  00F6               	movwf	??_waitFlag
  2818  036B  1003               	clrc
  2819  036C  0C76               	rrf	??_waitFlag,w
  2820  036D  00F7               	movwf	??_waitFlag+1
  2821  036E  0877               	movf	??_waitFlag+1,w
  2822  036F  00BC               	movwf	waitFlag@buf
  2823                           
  2824                           ;decode_AX25.c: 76: buf = buf | 0x00;
  2825  0370  083A               	movf	waitFlag@flag_judge,w
  2826  0371  043B               	iorwf	waitFlag@flag_judge+1,w
  2827  0372  1903               	btfsc	3,2
  2828  0373  2B79               	goto	l2719
  2829                           
  2830                           ;decode_AX25.c: 78: buf = buf | 0x80;
  2831                           
  2832                           ;decode_AX25.c: 77: }else{
  2833  0374  083C               	movf	waitFlag@buf,w
  2834  0375  3880               	iorlw	128
  2835  0376  00F6               	movwf	??_waitFlag
  2836  0377  0876               	movf	??_waitFlag,w
  2837  0378  00BC               	movwf	waitFlag@buf
  2838  0379                     l2719:	
  2839  0379  3001               	movlw	1
  2840  037A  07A0               	addwf	waitFlag@i,f
  2841  037B  1803               	skipnc
  2842  037C  0AA1               	incf	waitFlag@i+1,f
  2843  037D  3000               	movlw	0
  2844  037E  07A1               	addwf	waitFlag@i+1,f
  2845  037F  3000               	movlw	0
  2846  0380  0221               	subwf	waitFlag@i+1,w
  2847  0381  3008               	movlw	8
  2848  0382  1903               	skipnz
  2849  0383  0220               	subwf	waitFlag@i,w
  2850  0384  1C03               	skipc
  2851  0385  2B5E               	goto	l2709
  2852  0386                     l2723:	
  2853  0386  307E               	movlw	126
  2854  0387  063C               	xorwf	waitFlag@buf,w
  2855  0388  1903               	btfsc	3,2
  2856  0389  2B55               	goto	l2703
  2857                           
  2858                           ;decode_AX25.c: 79: }
  2859                           ;decode_AX25.c: 80: }
  2860                           ;decode_AX25.c: 81: }
  2861                           ;decode_AX25.c: 82: if(buf == ("JQ1YCZ"[0] << 1)){
  2862  038A  3012               	movlw	low (STR_1-__stringbase)
  2863  038B  0084               	movwf	4
  2864  038C  120A  158A  2000  120A  118A  	fcall	stringdir
  2865  0391  00F6               	movwf	??_waitFlag
  2866  0392  01F7               	clrf	??_waitFlag+1
  2867  0393  1003               	clrc
  2868  0394  0DF6               	rlf	??_waitFlag,f
  2869  0395  0DF7               	rlf	??_waitFlag+1,f
  2870  0396  083C               	movf	waitFlag@buf,w
  2871  0397  00F8               	movwf	??_waitFlag+2
  2872  0398  01F9               	clrf	??_waitFlag+3
  2873  0399  0877               	movf	??_waitFlag+1,w
  2874  039A  0679               	xorwf	??_waitFlag+3,w
  2875  039B  1D03               	skipz
  2876  039C  2B9F               	goto	u2195
  2877  039D  0876               	movf	??_waitFlag,w
  2878  039E  0678               	xorwf	??_waitFlag+2,w
  2879  039F                     u2195:	
  2880  039F  1D03               	skipz
  2881  03A0  2D64               	goto	l2873
  2882                           
  2883                           ;decode_AX25.c: 83: dPacket[dPacketnum] = buf;
  2884  03A1  083C               	movf	waitFlag@buf,w
  2885  03A2  00F6               	movwf	??_waitFlag
  2886  03A3  0866               	movf	_dPacketnum,w
  2887  03A4  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2888  03A5  0084               	movwf	4
  2889  03A6  0876               	movf	??_waitFlag,w
  2890  03A7  1783               	bsf	3,7	;select IRP bank3
  2891  03A8  0080               	movwf	0
  2892                           
  2893                           ;decode_AX25.c: 84: dPacketnum ++;
  2894  03A9  3001               	movlw	1
  2895  03AA  07E6               	addwf	_dPacketnum,f
  2896  03AB  1803               	skipnc
  2897  03AC  0AE7               	incf	_dPacketnum+1,f
  2898  03AD  3000               	movlw	0
  2899  03AE  07E7               	addwf	_dPacketnum+1,f
  2900                           
  2901                           ;decode_AX25.c: 85: for(UINT j=0;j<8;j++){
  2902  03AF  01A2               	clrf	waitFlag@j
  2903  03B0  01A3               	clrf	waitFlag@j+1
  2904  03B1  3000               	movlw	0
  2905  03B2  0223               	subwf	waitFlag@j+1,w
  2906  03B3  3008               	movlw	8
  2907  03B4  1903               	skipnz
  2908  03B5  0222               	subwf	waitFlag@j,w
  2909  03B6  1803               	btfsc	3,0
  2910  03B7  2BE0               	goto	l2751
  2911  03B8                     l2737:	
  2912                           
  2913                           ;decode_AX25.c: 86: flag_judge = getbit();
  2914  03B8  120A  158A  22AA  120A  118A  	fcall	_getbit
  2915  03BD  0871               	movf	?_getbit+1,w
  2916  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  2917  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  2918  03C0  00BB               	movwf	waitFlag@flag_judge+1
  2919  03C1  0870               	movf	?_getbit,w
  2920  03C2  00BA               	movwf	waitFlag@flag_judge
  2921                           
  2922                           ;decode_AX25.c: 87: buf = buf >> 1;
  2923  03C3  083C               	movf	waitFlag@buf,w
  2924  03C4  00F6               	movwf	??_waitFlag
  2925  03C5  1003               	clrc
  2926  03C6  0C76               	rrf	??_waitFlag,w
  2927  03C7  00F7               	movwf	??_waitFlag+1
  2928  03C8  0877               	movf	??_waitFlag+1,w
  2929  03C9  00BC               	movwf	waitFlag@buf
  2930                           
  2931                           ;decode_AX25.c: 89: buf = buf | 0x00;
  2932  03CA  083A               	movf	waitFlag@flag_judge,w
  2933  03CB  043B               	iorwf	waitFlag@flag_judge+1,w
  2934  03CC  1903               	btfsc	3,2
  2935  03CD  2BD3               	goto	l2747
  2936                           
  2937                           ;decode_AX25.c: 91: buf = buf | 0x80;
  2938                           
  2939                           ;decode_AX25.c: 90: }else{
  2940  03CE  083C               	movf	waitFlag@buf,w
  2941  03CF  3880               	iorlw	128
  2942  03D0  00F6               	movwf	??_waitFlag
  2943  03D1  0876               	movf	??_waitFlag,w
  2944  03D2  00BC               	movwf	waitFlag@buf
  2945  03D3                     l2747:	
  2946  03D3  3001               	movlw	1
  2947  03D4  07A2               	addwf	waitFlag@j,f
  2948  03D5  1803               	skipnc
  2949  03D6  0AA3               	incf	waitFlag@j+1,f
  2950  03D7  3000               	movlw	0
  2951  03D8  07A3               	addwf	waitFlag@j+1,f
  2952  03D9  3000               	movlw	0
  2953  03DA  0223               	subwf	waitFlag@j+1,w
  2954  03DB  3008               	movlw	8
  2955  03DC  1903               	skipnz
  2956  03DD  0222               	subwf	waitFlag@j,w
  2957  03DE  1C03               	skipc
  2958  03DF  2BB8               	goto	l2737
  2959  03E0                     l2751:	
  2960                           
  2961                           ;decode_AX25.c: 92: }
  2962                           ;decode_AX25.c: 93: }
  2963                           ;decode_AX25.c: 94: if(buf == ("JQ1YCZ"[1] << 1)){
  2964  03E0  3013               	movlw	low (((STR_1+1)-__stringbase)| (0+32768))
  2965  03E1  0084               	movwf	4
  2966  03E2  120A  158A  2000  120A  118A  	fcall	stringdir
  2967  03E7  00F6               	movwf	??_waitFlag
  2968  03E8  01F7               	clrf	??_waitFlag+1
  2969  03E9  1003               	clrc
  2970  03EA  0DF6               	rlf	??_waitFlag,f
  2971  03EB  0DF7               	rlf	??_waitFlag+1,f
  2972  03EC  083C               	movf	waitFlag@buf,w
  2973  03ED  00F8               	movwf	??_waitFlag+2
  2974  03EE  01F9               	clrf	??_waitFlag+3
  2975  03EF  0877               	movf	??_waitFlag+1,w
  2976  03F0  0679               	xorwf	??_waitFlag+3,w
  2977  03F1  1D03               	skipz
  2978  03F2  2BF5               	goto	u2235
  2979  03F3  0876               	movf	??_waitFlag,w
  2980  03F4  0678               	xorwf	??_waitFlag+2,w
  2981  03F5                     u2235:	
  2982  03F5  1D03               	skipz
  2983  03F6  2D64               	goto	l2873
  2984                           
  2985                           ;decode_AX25.c: 95: dPacket[dPacketnum] = buf;
  2986  03F7  083C               	movf	waitFlag@buf,w
  2987  03F8  00F6               	movwf	??_waitFlag
  2988  03F9  0866               	movf	_dPacketnum,w
  2989  03FA  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2990  03FB  0084               	movwf	4
  2991  03FC  0876               	movf	??_waitFlag,w
  2992  03FD  1783               	bsf	3,7	;select IRP bank3
  2993  03FE  0080               	movwf	0
  2994                           
  2995                           ;decode_AX25.c: 96: dPacketnum ++;
  2996  03FF  3001               	movlw	1
  2997  0400  07E6               	addwf	_dPacketnum,f
  2998  0401  1803               	skipnc
  2999  0402  0AE7               	incf	_dPacketnum+1,f
  3000  0403  3000               	movlw	0
  3001  0404  07E7               	addwf	_dPacketnum+1,f
  3002                           
  3003                           ;decode_AX25.c: 97: for(UINT j=0;j<8;j++){
  3004  0405  01A4               	clrf	waitFlag@j_111
  3005  0406  01A5               	clrf	waitFlag@j_111+1
  3006  0407  3000               	movlw	0
  3007  0408  0225               	subwf	waitFlag@j_111+1,w
  3008  0409  3008               	movlw	8
  3009  040A  1903               	skipnz
  3010  040B  0224               	subwf	waitFlag@j_111,w
  3011  040C  1803               	btfsc	3,0
  3012  040D  2C36               	goto	l2777
  3013  040E                     l2763:	
  3014                           
  3015                           ;decode_AX25.c: 98: flag_judge = getbit();
  3016  040E  120A  158A  22AA  120A  118A  	fcall	_getbit
  3017  0413  0871               	movf	?_getbit+1,w
  3018  0414  1283               	bcf	3,5	;RP0=0, select bank0
  3019  0415  1303               	bcf	3,6	;RP1=0, select bank0
  3020  0416  00BB               	movwf	waitFlag@flag_judge+1
  3021  0417  0870               	movf	?_getbit,w
  3022  0418  00BA               	movwf	waitFlag@flag_judge
  3023                           
  3024                           ;decode_AX25.c: 99: buf = buf >> 1;
  3025  0419  083C               	movf	waitFlag@buf,w
  3026  041A  00F6               	movwf	??_waitFlag
  3027  041B  1003               	clrc
  3028  041C  0C76               	rrf	??_waitFlag,w
  3029  041D  00F7               	movwf	??_waitFlag+1
  3030  041E  0877               	movf	??_waitFlag+1,w
  3031  041F  00BC               	movwf	waitFlag@buf
  3032                           
  3033                           ;decode_AX25.c: 101: buf = buf | 0x00;
  3034  0420  083A               	movf	waitFlag@flag_judge,w
  3035  0421  043B               	iorwf	waitFlag@flag_judge+1,w
  3036  0422  1903               	btfsc	3,2
  3037  0423  2C29               	goto	l2773
  3038                           
  3039                           ;decode_AX25.c: 103: buf = buf | 0x80;
  3040                           
  3041                           ;decode_AX25.c: 102: }else{
  3042  0424  083C               	movf	waitFlag@buf,w
  3043  0425  3880               	iorlw	128
  3044  0426  00F6               	movwf	??_waitFlag
  3045  0427  0876               	movf	??_waitFlag,w
  3046  0428  00BC               	movwf	waitFlag@buf
  3047  0429                     l2773:	
  3048  0429  3001               	movlw	1
  3049  042A  07A4               	addwf	waitFlag@j_111,f
  3050  042B  1803               	skipnc
  3051  042C  0AA5               	incf	waitFlag@j_111+1,f
  3052  042D  3000               	movlw	0
  3053  042E  07A5               	addwf	waitFlag@j_111+1,f
  3054  042F  3000               	movlw	0
  3055  0430  0225               	subwf	waitFlag@j_111+1,w
  3056  0431  3008               	movlw	8
  3057  0432  1903               	skipnz
  3058  0433  0224               	subwf	waitFlag@j_111,w
  3059  0434  1C03               	skipc
  3060  0435  2C0E               	goto	l2763
  3061  0436                     l2777:	
  3062                           
  3063                           ;decode_AX25.c: 104: }
  3064                           ;decode_AX25.c: 105: }
  3065                           ;decode_AX25.c: 106: if(buf == ("JQ1YCZ"[2] << 1)){
  3066  0436  3014               	movlw	low (((STR_1+2)-__stringbase)| (0+32768))
  3067  0437  0084               	movwf	4
  3068  0438  120A  158A  2000  120A  118A  	fcall	stringdir
  3069  043D  00F6               	movwf	??_waitFlag
  3070  043E  01F7               	clrf	??_waitFlag+1
  3071  043F  1003               	clrc
  3072  0440  0DF6               	rlf	??_waitFlag,f
  3073  0441  0DF7               	rlf	??_waitFlag+1,f
  3074  0442  083C               	movf	waitFlag@buf,w
  3075  0443  00F8               	movwf	??_waitFlag+2
  3076  0444  01F9               	clrf	??_waitFlag+3
  3077  0445  0877               	movf	??_waitFlag+1,w
  3078  0446  0679               	xorwf	??_waitFlag+3,w
  3079  0447  1D03               	skipz
  3080  0448  2C4B               	goto	u2275
  3081  0449  0876               	movf	??_waitFlag,w
  3082  044A  0678               	xorwf	??_waitFlag+2,w
  3083  044B                     u2275:	
  3084  044B  1D03               	skipz
  3085  044C  2D64               	goto	l2873
  3086                           
  3087                           ;decode_AX25.c: 107: dPacket[dPacketnum] = buf;
  3088  044D  083C               	movf	waitFlag@buf,w
  3089  044E  00F6               	movwf	??_waitFlag
  3090  044F  0866               	movf	_dPacketnum,w
  3091  0450  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3092  0451  0084               	movwf	4
  3093  0452  0876               	movf	??_waitFlag,w
  3094  0453  1783               	bsf	3,7	;select IRP bank3
  3095  0454  0080               	movwf	0
  3096                           
  3097                           ;decode_AX25.c: 108: dPacketnum ++;
  3098  0455  3001               	movlw	1
  3099  0456  07E6               	addwf	_dPacketnum,f
  3100  0457  1803               	skipnc
  3101  0458  0AE7               	incf	_dPacketnum+1,f
  3102  0459  3000               	movlw	0
  3103  045A  07E7               	addwf	_dPacketnum+1,f
  3104                           
  3105                           ;decode_AX25.c: 109: for(UINT j=0;j<8;j++){
  3106  045B  01A6               	clrf	waitFlag@j_113
  3107  045C  01A7               	clrf	waitFlag@j_113+1
  3108  045D  3000               	movlw	0
  3109  045E  0227               	subwf	waitFlag@j_113+1,w
  3110  045F  3008               	movlw	8
  3111  0460  1903               	skipnz
  3112  0461  0226               	subwf	waitFlag@j_113,w
  3113  0462  1803               	btfsc	3,0
  3114  0463  2C8C               	goto	l2803
  3115  0464                     l2789:	
  3116                           
  3117                           ;decode_AX25.c: 110: flag_judge = getbit();
  3118  0464  120A  158A  22AA  120A  118A  	fcall	_getbit
  3119  0469  0871               	movf	?_getbit+1,w
  3120  046A  1283               	bcf	3,5	;RP0=0, select bank0
  3121  046B  1303               	bcf	3,6	;RP1=0, select bank0
  3122  046C  00BB               	movwf	waitFlag@flag_judge+1
  3123  046D  0870               	movf	?_getbit,w
  3124  046E  00BA               	movwf	waitFlag@flag_judge
  3125                           
  3126                           ;decode_AX25.c: 111: buf = buf >> 1;
  3127  046F  083C               	movf	waitFlag@buf,w
  3128  0470  00F6               	movwf	??_waitFlag
  3129  0471  1003               	clrc
  3130  0472  0C76               	rrf	??_waitFlag,w
  3131  0473  00F7               	movwf	??_waitFlag+1
  3132  0474  0877               	movf	??_waitFlag+1,w
  3133  0475  00BC               	movwf	waitFlag@buf
  3134                           
  3135                           ;decode_AX25.c: 113: buf = buf | 0x00;
  3136  0476  083A               	movf	waitFlag@flag_judge,w
  3137  0477  043B               	iorwf	waitFlag@flag_judge+1,w
  3138  0478  1903               	btfsc	3,2
  3139  0479  2C7F               	goto	l2799
  3140                           
  3141                           ;decode_AX25.c: 115: buf = buf | 0x80;
  3142                           
  3143                           ;decode_AX25.c: 114: }else{
  3144  047A  083C               	movf	waitFlag@buf,w
  3145  047B  3880               	iorlw	128
  3146  047C  00F6               	movwf	??_waitFlag
  3147  047D  0876               	movf	??_waitFlag,w
  3148  047E  00BC               	movwf	waitFlag@buf
  3149  047F                     l2799:	
  3150  047F  3001               	movlw	1
  3151  0480  07A6               	addwf	waitFlag@j_113,f
  3152  0481  1803               	skipnc
  3153  0482  0AA7               	incf	waitFlag@j_113+1,f
  3154  0483  3000               	movlw	0
  3155  0484  07A7               	addwf	waitFlag@j_113+1,f
  3156  0485  3000               	movlw	0
  3157  0486  0227               	subwf	waitFlag@j_113+1,w
  3158  0487  3008               	movlw	8
  3159  0488  1903               	skipnz
  3160  0489  0226               	subwf	waitFlag@j_113,w
  3161  048A  1C03               	skipc
  3162  048B  2C64               	goto	l2789
  3163  048C                     l2803:	
  3164                           
  3165                           ;decode_AX25.c: 116: }
  3166                           ;decode_AX25.c: 117: }
  3167                           ;decode_AX25.c: 118: if(buf == ("JQ1YCZ"[3] << 1)){
  3168  048C  3015               	movlw	low (((STR_1+3)-__stringbase)| (0+32768))
  3169  048D  0084               	movwf	4
  3170  048E  120A  158A  2000  120A  118A  	fcall	stringdir
  3171  0493  00F6               	movwf	??_waitFlag
  3172  0494  01F7               	clrf	??_waitFlag+1
  3173  0495  1003               	clrc
  3174  0496  0DF6               	rlf	??_waitFlag,f
  3175  0497  0DF7               	rlf	??_waitFlag+1,f
  3176  0498  083C               	movf	waitFlag@buf,w
  3177  0499  00F8               	movwf	??_waitFlag+2
  3178  049A  01F9               	clrf	??_waitFlag+3
  3179  049B  0877               	movf	??_waitFlag+1,w
  3180  049C  0679               	xorwf	??_waitFlag+3,w
  3181  049D  1D03               	skipz
  3182  049E  2CA1               	goto	u2315
  3183  049F  0876               	movf	??_waitFlag,w
  3184  04A0  0678               	xorwf	??_waitFlag+2,w
  3185  04A1                     u2315:	
  3186  04A1  1D03               	skipz
  3187  04A2  2D64               	goto	l2873
  3188                           
  3189                           ;decode_AX25.c: 119: dPacket[dPacketnum] = buf;
  3190  04A3  083C               	movf	waitFlag@buf,w
  3191  04A4  00F6               	movwf	??_waitFlag
  3192  04A5  0866               	movf	_dPacketnum,w
  3193  04A6  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3194  04A7  0084               	movwf	4
  3195  04A8  0876               	movf	??_waitFlag,w
  3196  04A9  1783               	bsf	3,7	;select IRP bank3
  3197  04AA  0080               	movwf	0
  3198                           
  3199                           ;decode_AX25.c: 120: dPacketnum ++;
  3200  04AB  3001               	movlw	1
  3201  04AC  07E6               	addwf	_dPacketnum,f
  3202  04AD  1803               	skipnc
  3203  04AE  0AE7               	incf	_dPacketnum+1,f
  3204  04AF  3000               	movlw	0
  3205  04B0  07E7               	addwf	_dPacketnum+1,f
  3206                           
  3207                           ;decode_AX25.c: 121: for(UINT j=0;j<8;j++){
  3208  04B1  01A8               	clrf	waitFlag@j_115
  3209  04B2  01A9               	clrf	waitFlag@j_115+1
  3210  04B3  3000               	movlw	0
  3211  04B4  0229               	subwf	waitFlag@j_115+1,w
  3212  04B5  3008               	movlw	8
  3213  04B6  1903               	skipnz
  3214  04B7  0228               	subwf	waitFlag@j_115,w
  3215  04B8  1803               	btfsc	3,0
  3216  04B9  2CE2               	goto	l2829
  3217  04BA                     l2815:	
  3218                           
  3219                           ;decode_AX25.c: 122: flag_judge = getbit();
  3220  04BA  120A  158A  22AA  120A  118A  	fcall	_getbit
  3221  04BF  0871               	movf	?_getbit+1,w
  3222  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  3223  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  3224  04C2  00BB               	movwf	waitFlag@flag_judge+1
  3225  04C3  0870               	movf	?_getbit,w
  3226  04C4  00BA               	movwf	waitFlag@flag_judge
  3227                           
  3228                           ;decode_AX25.c: 123: buf = buf >> 1;
  3229  04C5  083C               	movf	waitFlag@buf,w
  3230  04C6  00F6               	movwf	??_waitFlag
  3231  04C7  1003               	clrc
  3232  04C8  0C76               	rrf	??_waitFlag,w
  3233  04C9  00F7               	movwf	??_waitFlag+1
  3234  04CA  0877               	movf	??_waitFlag+1,w
  3235  04CB  00BC               	movwf	waitFlag@buf
  3236                           
  3237                           ;decode_AX25.c: 125: buf = buf | 0x00;
  3238  04CC  083A               	movf	waitFlag@flag_judge,w
  3239  04CD  043B               	iorwf	waitFlag@flag_judge+1,w
  3240  04CE  1903               	btfsc	3,2
  3241  04CF  2CD5               	goto	l2825
  3242                           
  3243                           ;decode_AX25.c: 127: buf = buf | 0x80;
  3244                           
  3245                           ;decode_AX25.c: 126: }else{
  3246  04D0  083C               	movf	waitFlag@buf,w
  3247  04D1  3880               	iorlw	128
  3248  04D2  00F6               	movwf	??_waitFlag
  3249  04D3  0876               	movf	??_waitFlag,w
  3250  04D4  00BC               	movwf	waitFlag@buf
  3251  04D5                     l2825:	
  3252  04D5  3001               	movlw	1
  3253  04D6  07A8               	addwf	waitFlag@j_115,f
  3254  04D7  1803               	skipnc
  3255  04D8  0AA9               	incf	waitFlag@j_115+1,f
  3256  04D9  3000               	movlw	0
  3257  04DA  07A9               	addwf	waitFlag@j_115+1,f
  3258  04DB  3000               	movlw	0
  3259  04DC  0229               	subwf	waitFlag@j_115+1,w
  3260  04DD  3008               	movlw	8
  3261  04DE  1903               	skipnz
  3262  04DF  0228               	subwf	waitFlag@j_115,w
  3263  04E0  1C03               	skipc
  3264  04E1  2CBA               	goto	l2815
  3265  04E2                     l2829:	
  3266                           
  3267                           ;decode_AX25.c: 128: }
  3268                           ;decode_AX25.c: 129: }
  3269                           ;decode_AX25.c: 130: if(buf == ("JQ1YCZ"[4] << 1)){
  3270  04E2  3016               	movlw	low (((STR_1+4)-__stringbase)| (0+32768))
  3271  04E3  0084               	movwf	4
  3272  04E4  120A  158A  2000  120A  118A  	fcall	stringdir
  3273  04E9  00F6               	movwf	??_waitFlag
  3274  04EA  01F7               	clrf	??_waitFlag+1
  3275  04EB  1003               	clrc
  3276  04EC  0DF6               	rlf	??_waitFlag,f
  3277  04ED  0DF7               	rlf	??_waitFlag+1,f
  3278  04EE  083C               	movf	waitFlag@buf,w
  3279  04EF  00F8               	movwf	??_waitFlag+2
  3280  04F0  01F9               	clrf	??_waitFlag+3
  3281  04F1  0877               	movf	??_waitFlag+1,w
  3282  04F2  0679               	xorwf	??_waitFlag+3,w
  3283  04F3  1D03               	skipz
  3284  04F4  2CF7               	goto	u2355
  3285  04F5  0876               	movf	??_waitFlag,w
  3286  04F6  0678               	xorwf	??_waitFlag+2,w
  3287  04F7                     u2355:	
  3288  04F7  1D03               	skipz
  3289  04F8  2D64               	goto	l2873
  3290                           
  3291                           ;decode_AX25.c: 131: dPacket[dPacketnum] = buf;
  3292  04F9  083C               	movf	waitFlag@buf,w
  3293  04FA  00F6               	movwf	??_waitFlag
  3294  04FB  0866               	movf	_dPacketnum,w
  3295  04FC  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3296  04FD  0084               	movwf	4
  3297  04FE  0876               	movf	??_waitFlag,w
  3298  04FF  1783               	bsf	3,7	;select IRP bank3
  3299  0500  0080               	movwf	0
  3300                           
  3301                           ;decode_AX25.c: 132: dPacketnum ++;
  3302  0501  3001               	movlw	1
  3303  0502  07E6               	addwf	_dPacketnum,f
  3304  0503  1803               	skipnc
  3305  0504  0AE7               	incf	_dPacketnum+1,f
  3306  0505  3000               	movlw	0
  3307  0506  07E7               	addwf	_dPacketnum+1,f
  3308                           
  3309                           ;decode_AX25.c: 133: for(UINT j=0;j<8;j++){
  3310  0507  01AA               	clrf	waitFlag@j_117
  3311  0508  01AB               	clrf	waitFlag@j_117+1
  3312  0509  3000               	movlw	0
  3313  050A  022B               	subwf	waitFlag@j_117+1,w
  3314  050B  3008               	movlw	8
  3315  050C  1903               	skipnz
  3316  050D  022A               	subwf	waitFlag@j_117,w
  3317  050E  1803               	btfsc	3,0
  3318  050F  2D38               	goto	l2855
  3319  0510                     l2841:	
  3320                           
  3321                           ;decode_AX25.c: 134: flag_judge = getbit();
  3322  0510  120A  158A  22AA  120A  118A  	fcall	_getbit
  3323  0515  0871               	movf	?_getbit+1,w
  3324  0516  1283               	bcf	3,5	;RP0=0, select bank0
  3325  0517  1303               	bcf	3,6	;RP1=0, select bank0
  3326  0518  00BB               	movwf	waitFlag@flag_judge+1
  3327  0519  0870               	movf	?_getbit,w
  3328  051A  00BA               	movwf	waitFlag@flag_judge
  3329                           
  3330                           ;decode_AX25.c: 135: buf = buf >> 1;
  3331  051B  083C               	movf	waitFlag@buf,w
  3332  051C  00F6               	movwf	??_waitFlag
  3333  051D  1003               	clrc
  3334  051E  0C76               	rrf	??_waitFlag,w
  3335  051F  00F7               	movwf	??_waitFlag+1
  3336  0520  0877               	movf	??_waitFlag+1,w
  3337  0521  00BC               	movwf	waitFlag@buf
  3338                           
  3339                           ;decode_AX25.c: 137: buf = buf | 0x00;
  3340  0522  083A               	movf	waitFlag@flag_judge,w
  3341  0523  043B               	iorwf	waitFlag@flag_judge+1,w
  3342  0524  1903               	btfsc	3,2
  3343  0525  2D2B               	goto	l2851
  3344                           
  3345                           ;decode_AX25.c: 139: buf = buf | 0x80;
  3346                           
  3347                           ;decode_AX25.c: 138: }else{
  3348  0526  083C               	movf	waitFlag@buf,w
  3349  0527  3880               	iorlw	128
  3350  0528  00F6               	movwf	??_waitFlag
  3351  0529  0876               	movf	??_waitFlag,w
  3352  052A  00BC               	movwf	waitFlag@buf
  3353  052B                     l2851:	
  3354  052B  3001               	movlw	1
  3355  052C  07AA               	addwf	waitFlag@j_117,f
  3356  052D  1803               	skipnc
  3357  052E  0AAB               	incf	waitFlag@j_117+1,f
  3358  052F  3000               	movlw	0
  3359  0530  07AB               	addwf	waitFlag@j_117+1,f
  3360  0531  3000               	movlw	0
  3361  0532  022B               	subwf	waitFlag@j_117+1,w
  3362  0533  3008               	movlw	8
  3363  0534  1903               	skipnz
  3364  0535  022A               	subwf	waitFlag@j_117,w
  3365  0536  1C03               	skipc
  3366  0537  2D10               	goto	l2841
  3367  0538                     l2855:	
  3368                           
  3369                           ;decode_AX25.c: 140: }
  3370                           ;decode_AX25.c: 141: }
  3371                           ;decode_AX25.c: 142: if(buf == ("JQ1YCZ"[5] << 1)){
  3372  0538  3017               	movlw	low (((STR_1+5)-__stringbase)| (0+32768))
  3373  0539  0084               	movwf	4
  3374  053A  120A  158A  2000  120A  118A  	fcall	stringdir
  3375  053F  00F6               	movwf	??_waitFlag
  3376  0540  01F7               	clrf	??_waitFlag+1
  3377  0541  1003               	clrc
  3378  0542  0DF6               	rlf	??_waitFlag,f
  3379  0543  0DF7               	rlf	??_waitFlag+1,f
  3380  0544  083C               	movf	waitFlag@buf,w
  3381  0545  00F8               	movwf	??_waitFlag+2
  3382  0546  01F9               	clrf	??_waitFlag+3
  3383  0547  0877               	movf	??_waitFlag+1,w
  3384  0548  0679               	xorwf	??_waitFlag+3,w
  3385  0549  1D03               	skipz
  3386  054A  2D4D               	goto	u2395
  3387  054B  0876               	movf	??_waitFlag,w
  3388  054C  0678               	xorwf	??_waitFlag+2,w
  3389  054D                     u2395:	
  3390  054D  1D03               	skipz
  3391  054E  2D64               	goto	l2873
  3392                           
  3393                           ;decode_AX25.c: 143: dPacket[dPacketnum] = buf;
  3394  054F  083C               	movf	waitFlag@buf,w
  3395  0550  00F6               	movwf	??_waitFlag
  3396  0551  0866               	movf	_dPacketnum,w
  3397  0552  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3398  0553  0084               	movwf	4
  3399  0554  0876               	movf	??_waitFlag,w
  3400  0555  1783               	bsf	3,7	;select IRP bank3
  3401  0556  0080               	movwf	0
  3402                           
  3403                           ;decode_AX25.c: 144: dPacketnum ++;
  3404  0557  3001               	movlw	1
  3405  0558  07E6               	addwf	_dPacketnum,f
  3406  0559  1803               	skipnc
  3407  055A  0AE7               	incf	_dPacketnum+1,f
  3408  055B  3000               	movlw	0
  3409  055C  07E7               	addwf	_dPacketnum+1,f
  3410                           
  3411                           ;decode_AX25.c: 145: rcv_state ++;
  3412  055D  3001               	movlw	1
  3413  055E  07EA               	addwf	_rcv_state,f
  3414  055F  1803               	skipnc
  3415  0560  0AEB               	incf	_rcv_state+1,f
  3416  0561  3000               	movlw	0
  3417  0562  07EB               	addwf	_rcv_state+1,f
  3418                           
  3419                           ;decode_AX25.c: 146: }else{
  3420  0563  2D66               	goto	l207
  3421  0564                     l2873:	
  3422                           ;decode_AX25.c: 160: }
  3423                           ;decode_AX25.c: 161: }else{
  3424                           
  3425                           ;decode_AX25.c: 159: dPacketnum = 0;
  3426                           
  3427                           ;decode_AX25.c: 157: }
  3428                           ;decode_AX25.c: 158: }else{
  3429                           
  3430                           ;decode_AX25.c: 156: dPacketnum = 0;
  3431                           
  3432                           ;decode_AX25.c: 154: }
  3433                           ;decode_AX25.c: 155: }else{
  3434                           
  3435                           ;decode_AX25.c: 153: dPacketnum = 0;
  3436                           
  3437                           ;decode_AX25.c: 151: }
  3438                           ;decode_AX25.c: 152: }else{
  3439                           
  3440                           ;decode_AX25.c: 150: dPacketnum = 0;
  3441                           
  3442                           ;decode_AX25.c: 148: }
  3443                           ;decode_AX25.c: 149: }else{
  3444                           
  3445                           ;decode_AX25.c: 147: dPacketnum = 0;
  3446                           
  3447                           
  3448                           ;decode_AX25.c: 162: dPacketnum = 0;
  3449  0564  01E6               	clrf	_dPacketnum
  3450  0565  01E7               	clrf	_dPacketnum+1
  3451  0566                     l207:	
  3452                           
  3453                           ;decode_AX25.c: 163: }
  3454                           ;decode_AX25.c: 165: for(UINT j=0;j<8;j++){
  3455  0566  01AC               	clrf	waitFlag@j_119
  3456  0567  01AD               	clrf	waitFlag@j_119+1
  3457  0568  3000               	movlw	0
  3458  0569  022D               	subwf	waitFlag@j_119+1,w
  3459  056A  3008               	movlw	8
  3460  056B  1903               	skipnz
  3461  056C  022C               	subwf	waitFlag@j_119,w
  3462  056D  1803               	btfsc	3,0
  3463  056E  2D97               	goto	l2893
  3464  056F                     l2879:	
  3465                           
  3466                           ;decode_AX25.c: 166: flag_judge = getbit();
  3467  056F  120A  158A  22AA  120A  118A  	fcall	_getbit
  3468  0574  0871               	movf	?_getbit+1,w
  3469  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3470  0576  1303               	bcf	3,6	;RP1=0, select bank0
  3471  0577  00BB               	movwf	waitFlag@flag_judge+1
  3472  0578  0870               	movf	?_getbit,w
  3473  0579  00BA               	movwf	waitFlag@flag_judge
  3474                           
  3475                           ;decode_AX25.c: 167: buf = buf >> 1;
  3476  057A  083C               	movf	waitFlag@buf,w
  3477  057B  00F6               	movwf	??_waitFlag
  3478  057C  1003               	clrc
  3479  057D  0C76               	rrf	??_waitFlag,w
  3480  057E  00F7               	movwf	??_waitFlag+1
  3481  057F  0877               	movf	??_waitFlag+1,w
  3482  0580  00BC               	movwf	waitFlag@buf
  3483                           
  3484                           ;decode_AX25.c: 169: buf = buf | 0x00;
  3485  0581  083A               	movf	waitFlag@flag_judge,w
  3486  0582  043B               	iorwf	waitFlag@flag_judge+1,w
  3487  0583  1903               	btfsc	3,2
  3488  0584  2D8A               	goto	l2889
  3489                           
  3490                           ;decode_AX25.c: 171: buf = buf | 0x80;
  3491                           
  3492                           ;decode_AX25.c: 170: }else{
  3493  0585  083C               	movf	waitFlag@buf,w
  3494  0586  3880               	iorlw	128
  3495  0587  00F6               	movwf	??_waitFlag
  3496  0588  0876               	movf	??_waitFlag,w
  3497  0589  00BC               	movwf	waitFlag@buf
  3498  058A                     l2889:	
  3499  058A  3001               	movlw	1
  3500  058B  07AC               	addwf	waitFlag@j_119,f
  3501  058C  1803               	skipnc
  3502  058D  0AAD               	incf	waitFlag@j_119+1,f
  3503  058E  3000               	movlw	0
  3504  058F  07AD               	addwf	waitFlag@j_119+1,f
  3505  0590  3000               	movlw	0
  3506  0591  022D               	subwf	waitFlag@j_119+1,w
  3507  0592  3008               	movlw	8
  3508  0593  1903               	skipnz
  3509  0594  022C               	subwf	waitFlag@j_119,w
  3510  0595  1C03               	skipc
  3511  0596  2D6F               	goto	l2879
  3512  0597                     l2893:	
  3513                           
  3514                           ;decode_AX25.c: 172: }
  3515                           ;decode_AX25.c: 173: }
  3516                           ;decode_AX25.c: 174: dPacket[dPacketnum] = buf;
  3517  0597  083C               	movf	waitFlag@buf,w
  3518  0598  00F6               	movwf	??_waitFlag
  3519  0599  0866               	movf	_dPacketnum,w
  3520  059A  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3521  059B  0084               	movwf	4
  3522  059C  0876               	movf	??_waitFlag,w
  3523  059D  1783               	bsf	3,7	;select IRP bank3
  3524  059E  0080               	movwf	0
  3525                           
  3526                           ;decode_AX25.c: 175: dPacketnum ++;
  3527  059F  3001               	movlw	1
  3528  05A0  07E6               	addwf	_dPacketnum,f
  3529  05A1  1803               	skipnc
  3530  05A2  0AE7               	incf	_dPacketnum+1,f
  3531  05A3  3000               	movlw	0
  3532  05A4  07E7               	addwf	_dPacketnum+1,f
  3533                           
  3534                           ;decode_AX25.c: 176: for(UINT j=0;j<8;j++){
  3535  05A5  01AE               	clrf	waitFlag@j_120
  3536  05A6  01AF               	clrf	waitFlag@j_120+1
  3537  05A7  3000               	movlw	0
  3538  05A8  022F               	subwf	waitFlag@j_120+1,w
  3539  05A9  3008               	movlw	8
  3540  05AA  1903               	skipnz
  3541  05AB  022E               	subwf	waitFlag@j_120,w
  3542  05AC  1803               	btfsc	3,0
  3543  05AD  2DD6               	goto	l2917
  3544  05AE                     l2903:	
  3545                           
  3546                           ;decode_AX25.c: 177: flag_judge = getbit();
  3547  05AE  120A  158A  22AA  120A  118A  	fcall	_getbit
  3548  05B3  0871               	movf	?_getbit+1,w
  3549  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  3550  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  3551  05B6  00BB               	movwf	waitFlag@flag_judge+1
  3552  05B7  0870               	movf	?_getbit,w
  3553  05B8  00BA               	movwf	waitFlag@flag_judge
  3554                           
  3555                           ;decode_AX25.c: 178: buf = buf >> 1;
  3556  05B9  083C               	movf	waitFlag@buf,w
  3557  05BA  00F6               	movwf	??_waitFlag
  3558  05BB  1003               	clrc
  3559  05BC  0C76               	rrf	??_waitFlag,w
  3560  05BD  00F7               	movwf	??_waitFlag+1
  3561  05BE  0877               	movf	??_waitFlag+1,w
  3562  05BF  00BC               	movwf	waitFlag@buf
  3563                           
  3564                           ;decode_AX25.c: 180: buf = buf | 0x00;
  3565  05C0  083A               	movf	waitFlag@flag_judge,w
  3566  05C1  043B               	iorwf	waitFlag@flag_judge+1,w
  3567  05C2  1903               	btfsc	3,2
  3568  05C3  2DC9               	goto	l2913
  3569                           
  3570                           ;decode_AX25.c: 182: buf = buf | 0x80;
  3571                           
  3572                           ;decode_AX25.c: 181: }else{
  3573  05C4  083C               	movf	waitFlag@buf,w
  3574  05C5  3880               	iorlw	128
  3575  05C6  00F6               	movwf	??_waitFlag
  3576  05C7  0876               	movf	??_waitFlag,w
  3577  05C8  00BC               	movwf	waitFlag@buf
  3578  05C9                     l2913:	
  3579  05C9  3001               	movlw	1
  3580  05CA  07AE               	addwf	waitFlag@j_120,f
  3581  05CB  1803               	skipnc
  3582  05CC  0AAF               	incf	waitFlag@j_120+1,f
  3583  05CD  3000               	movlw	0
  3584  05CE  07AF               	addwf	waitFlag@j_120+1,f
  3585  05CF  3000               	movlw	0
  3586  05D0  022F               	subwf	waitFlag@j_120+1,w
  3587  05D1  3008               	movlw	8
  3588  05D2  1903               	skipnz
  3589  05D3  022E               	subwf	waitFlag@j_120,w
  3590  05D4  1C03               	skipc
  3591  05D5  2DAE               	goto	l2903
  3592  05D6                     l2917:	
  3593                           
  3594                           ;decode_AX25.c: 183: }
  3595                           ;decode_AX25.c: 184: }
  3596                           ;decode_AX25.c: 185: if(buf == ("JQ1ZHX"[0] << 1)){
  3597  05D6  300B               	movlw	low (STR_7-__stringbase)
  3598  05D7  0084               	movwf	4
  3599  05D8  120A  158A  2000  120A  118A  	fcall	stringdir
  3600  05DD  00F6               	movwf	??_waitFlag
  3601  05DE  01F7               	clrf	??_waitFlag+1
  3602  05DF  1003               	clrc
  3603  05E0  0DF6               	rlf	??_waitFlag,f
  3604  05E1  0DF7               	rlf	??_waitFlag+1,f
  3605  05E2  083C               	movf	waitFlag@buf,w
  3606  05E3  00F8               	movwf	??_waitFlag+2
  3607  05E4  01F9               	clrf	??_waitFlag+3
  3608  05E5  0877               	movf	??_waitFlag+1,w
  3609  05E6  0679               	xorwf	??_waitFlag+3,w
  3610  05E7  1D03               	skipz
  3611  05E8  2DEB               	goto	u2465
  3612  05E9  0876               	movf	??_waitFlag,w
  3613  05EA  0678               	xorwf	??_waitFlag+2,w
  3614  05EB                     u2465:	
  3615  05EB  1D03               	skipz
  3616  05EC  2FB0               	goto	l3065
  3617                           
  3618                           ;decode_AX25.c: 186: dPacket[dPacketnum] = buf;
  3619  05ED  083C               	movf	waitFlag@buf,w
  3620  05EE  00F6               	movwf	??_waitFlag
  3621  05EF  0866               	movf	_dPacketnum,w
  3622  05F0  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3623  05F1  0084               	movwf	4
  3624  05F2  0876               	movf	??_waitFlag,w
  3625  05F3  1783               	bsf	3,7	;select IRP bank3
  3626  05F4  0080               	movwf	0
  3627                           
  3628                           ;decode_AX25.c: 187: dPacketnum ++;
  3629  05F5  3001               	movlw	1
  3630  05F6  07E6               	addwf	_dPacketnum,f
  3631  05F7  1803               	skipnc
  3632  05F8  0AE7               	incf	_dPacketnum+1,f
  3633  05F9  3000               	movlw	0
  3634  05FA  07E7               	addwf	_dPacketnum+1,f
  3635                           
  3636                           ;decode_AX25.c: 188: for(UINT j=0;j<8;j++){
  3637  05FB  01B0               	clrf	waitFlag@j_122
  3638  05FC  01B1               	clrf	waitFlag@j_122+1
  3639  05FD  3000               	movlw	0
  3640  05FE  0231               	subwf	waitFlag@j_122+1,w
  3641  05FF  3008               	movlw	8
  3642  0600  1903               	skipnz
  3643  0601  0230               	subwf	waitFlag@j_122,w
  3644  0602  1803               	btfsc	3,0
  3645  0603  2E2C               	goto	l2943
  3646  0604                     l2929:	
  3647                           
  3648                           ;decode_AX25.c: 189: flag_judge = getbit();
  3649  0604  120A  158A  22AA  120A  118A  	fcall	_getbit
  3650  0609  0871               	movf	?_getbit+1,w
  3651  060A  1283               	bcf	3,5	;RP0=0, select bank0
  3652  060B  1303               	bcf	3,6	;RP1=0, select bank0
  3653  060C  00BB               	movwf	waitFlag@flag_judge+1
  3654  060D  0870               	movf	?_getbit,w
  3655  060E  00BA               	movwf	waitFlag@flag_judge
  3656                           
  3657                           ;decode_AX25.c: 190: buf = buf >> 1;
  3658  060F  083C               	movf	waitFlag@buf,w
  3659  0610  00F6               	movwf	??_waitFlag
  3660  0611  1003               	clrc
  3661  0612  0C76               	rrf	??_waitFlag,w
  3662  0613  00F7               	movwf	??_waitFlag+1
  3663  0614  0877               	movf	??_waitFlag+1,w
  3664  0615  00BC               	movwf	waitFlag@buf
  3665                           
  3666                           ;decode_AX25.c: 192: buf = buf | 0x00;
  3667  0616  083A               	movf	waitFlag@flag_judge,w
  3668  0617  043B               	iorwf	waitFlag@flag_judge+1,w
  3669  0618  1903               	btfsc	3,2
  3670  0619  2E1F               	goto	l2939
  3671                           
  3672                           ;decode_AX25.c: 194: buf = buf | 0x80;
  3673                           
  3674                           ;decode_AX25.c: 193: }else{
  3675  061A  083C               	movf	waitFlag@buf,w
  3676  061B  3880               	iorlw	128
  3677  061C  00F6               	movwf	??_waitFlag
  3678  061D  0876               	movf	??_waitFlag,w
  3679  061E  00BC               	movwf	waitFlag@buf
  3680  061F                     l2939:	
  3681  061F  3001               	movlw	1
  3682  0620  07B0               	addwf	waitFlag@j_122,f
  3683  0621  1803               	skipnc
  3684  0622  0AB1               	incf	waitFlag@j_122+1,f
  3685  0623  3000               	movlw	0
  3686  0624  07B1               	addwf	waitFlag@j_122+1,f
  3687  0625  3000               	movlw	0
  3688  0626  0231               	subwf	waitFlag@j_122+1,w
  3689  0627  3008               	movlw	8
  3690  0628  1903               	skipnz
  3691  0629  0230               	subwf	waitFlag@j_122,w
  3692  062A  1C03               	skipc
  3693  062B  2E04               	goto	l2929
  3694  062C                     l2943:	
  3695                           
  3696                           ;decode_AX25.c: 195: }
  3697                           ;decode_AX25.c: 196: }
  3698                           ;decode_AX25.c: 197: if(buf == ("JQ1ZHX"[1] << 1)){
  3699  062C  300C               	movlw	low (((STR_7+1)-__stringbase)| (0+32768))
  3700  062D  0084               	movwf	4
  3701  062E  120A  158A  2000  120A  118A  	fcall	stringdir
  3702  0633  00F6               	movwf	??_waitFlag
  3703  0634  01F7               	clrf	??_waitFlag+1
  3704  0635  1003               	clrc
  3705  0636  0DF6               	rlf	??_waitFlag,f
  3706  0637  0DF7               	rlf	??_waitFlag+1,f
  3707  0638  083C               	movf	waitFlag@buf,w
  3708  0639  00F8               	movwf	??_waitFlag+2
  3709  063A  01F9               	clrf	??_waitFlag+3
  3710  063B  0877               	movf	??_waitFlag+1,w
  3711  063C  0679               	xorwf	??_waitFlag+3,w
  3712  063D  1D03               	skipz
  3713  063E  2E41               	goto	u2505
  3714  063F  0876               	movf	??_waitFlag,w
  3715  0640  0678               	xorwf	??_waitFlag+2,w
  3716  0641                     u2505:	
  3717  0641  1D03               	skipz
  3718  0642  2FB0               	goto	l3065
  3719                           
  3720                           ;decode_AX25.c: 198: dPacket[dPacketnum] = buf;
  3721  0643  083C               	movf	waitFlag@buf,w
  3722  0644  00F6               	movwf	??_waitFlag
  3723  0645  0866               	movf	_dPacketnum,w
  3724  0646  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3725  0647  0084               	movwf	4
  3726  0648  0876               	movf	??_waitFlag,w
  3727  0649  1783               	bsf	3,7	;select IRP bank3
  3728  064A  0080               	movwf	0
  3729                           
  3730                           ;decode_AX25.c: 199: dPacketnum ++;
  3731  064B  3001               	movlw	1
  3732  064C  07E6               	addwf	_dPacketnum,f
  3733  064D  1803               	skipnc
  3734  064E  0AE7               	incf	_dPacketnum+1,f
  3735  064F  3000               	movlw	0
  3736  0650  07E7               	addwf	_dPacketnum+1,f
  3737                           
  3738                           ;decode_AX25.c: 200: for(UINT j=0;j<8;j++){
  3739  0651  01B2               	clrf	waitFlag@j_124
  3740  0652  01B3               	clrf	waitFlag@j_124+1
  3741  0653  3000               	movlw	0
  3742  0654  0233               	subwf	waitFlag@j_124+1,w
  3743  0655  3008               	movlw	8
  3744  0656  1903               	skipnz
  3745  0657  0232               	subwf	waitFlag@j_124,w
  3746  0658  1803               	btfsc	3,0
  3747  0659  2E82               	goto	l2969
  3748  065A                     l2955:	
  3749                           
  3750                           ;decode_AX25.c: 201: flag_judge = getbit();
  3751  065A  120A  158A  22AA  120A  118A  	fcall	_getbit
  3752  065F  0871               	movf	?_getbit+1,w
  3753  0660  1283               	bcf	3,5	;RP0=0, select bank0
  3754  0661  1303               	bcf	3,6	;RP1=0, select bank0
  3755  0662  00BB               	movwf	waitFlag@flag_judge+1
  3756  0663  0870               	movf	?_getbit,w
  3757  0664  00BA               	movwf	waitFlag@flag_judge
  3758                           
  3759                           ;decode_AX25.c: 202: buf = buf >> 1;
  3760  0665  083C               	movf	waitFlag@buf,w
  3761  0666  00F6               	movwf	??_waitFlag
  3762  0667  1003               	clrc
  3763  0668  0C76               	rrf	??_waitFlag,w
  3764  0669  00F7               	movwf	??_waitFlag+1
  3765  066A  0877               	movf	??_waitFlag+1,w
  3766  066B  00BC               	movwf	waitFlag@buf
  3767                           
  3768                           ;decode_AX25.c: 204: buf = buf | 0x00;
  3769  066C  083A               	movf	waitFlag@flag_judge,w
  3770  066D  043B               	iorwf	waitFlag@flag_judge+1,w
  3771  066E  1903               	btfsc	3,2
  3772  066F  2E75               	goto	l2965
  3773                           
  3774                           ;decode_AX25.c: 206: buf = buf | 0x80;
  3775                           
  3776                           ;decode_AX25.c: 205: }else{
  3777  0670  083C               	movf	waitFlag@buf,w
  3778  0671  3880               	iorlw	128
  3779  0672  00F6               	movwf	??_waitFlag
  3780  0673  0876               	movf	??_waitFlag,w
  3781  0674  00BC               	movwf	waitFlag@buf
  3782  0675                     l2965:	
  3783  0675  3001               	movlw	1
  3784  0676  07B2               	addwf	waitFlag@j_124,f
  3785  0677  1803               	skipnc
  3786  0678  0AB3               	incf	waitFlag@j_124+1,f
  3787  0679  3000               	movlw	0
  3788  067A  07B3               	addwf	waitFlag@j_124+1,f
  3789  067B  3000               	movlw	0
  3790  067C  0233               	subwf	waitFlag@j_124+1,w
  3791  067D  3008               	movlw	8
  3792  067E  1903               	skipnz
  3793  067F  0232               	subwf	waitFlag@j_124,w
  3794  0680  1C03               	skipc
  3795  0681  2E5A               	goto	l2955
  3796  0682                     l2969:	
  3797                           
  3798                           ;decode_AX25.c: 207: }
  3799                           ;decode_AX25.c: 208: }
  3800                           ;decode_AX25.c: 209: if(buf == ("JQ1ZHX"[2] << 1)){
  3801  0682  300D               	movlw	low (((STR_7+2)-__stringbase)| (0+32768))
  3802  0683  0084               	movwf	4
  3803  0684  120A  158A  2000  120A  118A  	fcall	stringdir
  3804  0689  00F6               	movwf	??_waitFlag
  3805  068A  01F7               	clrf	??_waitFlag+1
  3806  068B  1003               	clrc
  3807  068C  0DF6               	rlf	??_waitFlag,f
  3808  068D  0DF7               	rlf	??_waitFlag+1,f
  3809  068E  083C               	movf	waitFlag@buf,w
  3810  068F  00F8               	movwf	??_waitFlag+2
  3811  0690  01F9               	clrf	??_waitFlag+3
  3812  0691  0877               	movf	??_waitFlag+1,w
  3813  0692  0679               	xorwf	??_waitFlag+3,w
  3814  0693  1D03               	skipz
  3815  0694  2E97               	goto	u2545
  3816  0695  0876               	movf	??_waitFlag,w
  3817  0696  0678               	xorwf	??_waitFlag+2,w
  3818  0697                     u2545:	
  3819  0697  1D03               	skipz
  3820  0698  2FB0               	goto	l3065
  3821                           
  3822                           ;decode_AX25.c: 210: dPacket[dPacketnum] = buf;
  3823  0699  083C               	movf	waitFlag@buf,w
  3824  069A  00F6               	movwf	??_waitFlag
  3825  069B  0866               	movf	_dPacketnum,w
  3826  069C  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3827  069D  0084               	movwf	4
  3828  069E  0876               	movf	??_waitFlag,w
  3829  069F  1783               	bsf	3,7	;select IRP bank3
  3830  06A0  0080               	movwf	0
  3831                           
  3832                           ;decode_AX25.c: 211: dPacketnum ++;
  3833  06A1  3001               	movlw	1
  3834  06A2  07E6               	addwf	_dPacketnum,f
  3835  06A3  1803               	skipnc
  3836  06A4  0AE7               	incf	_dPacketnum+1,f
  3837  06A5  3000               	movlw	0
  3838  06A6  07E7               	addwf	_dPacketnum+1,f
  3839                           
  3840                           ;decode_AX25.c: 212: for(UINT j=0;j<8;j++){
  3841  06A7  01B4               	clrf	waitFlag@j_126
  3842  06A8  01B5               	clrf	waitFlag@j_126+1
  3843  06A9  3000               	movlw	0
  3844  06AA  0235               	subwf	waitFlag@j_126+1,w
  3845  06AB  3008               	movlw	8
  3846  06AC  1903               	skipnz
  3847  06AD  0234               	subwf	waitFlag@j_126,w
  3848  06AE  1803               	btfsc	3,0
  3849  06AF  2ED8               	goto	l2995
  3850  06B0                     l2981:	
  3851                           
  3852                           ;decode_AX25.c: 213: flag_judge = getbit();
  3853  06B0  120A  158A  22AA  120A  118A  	fcall	_getbit
  3854  06B5  0871               	movf	?_getbit+1,w
  3855  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  3856  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  3857  06B8  00BB               	movwf	waitFlag@flag_judge+1
  3858  06B9  0870               	movf	?_getbit,w
  3859  06BA  00BA               	movwf	waitFlag@flag_judge
  3860                           
  3861                           ;decode_AX25.c: 214: buf = buf >> 1;
  3862  06BB  083C               	movf	waitFlag@buf,w
  3863  06BC  00F6               	movwf	??_waitFlag
  3864  06BD  1003               	clrc
  3865  06BE  0C76               	rrf	??_waitFlag,w
  3866  06BF  00F7               	movwf	??_waitFlag+1
  3867  06C0  0877               	movf	??_waitFlag+1,w
  3868  06C1  00BC               	movwf	waitFlag@buf
  3869                           
  3870                           ;decode_AX25.c: 216: buf = buf | 0x00;
  3871  06C2  083A               	movf	waitFlag@flag_judge,w
  3872  06C3  043B               	iorwf	waitFlag@flag_judge+1,w
  3873  06C4  1903               	btfsc	3,2
  3874  06C5  2ECB               	goto	l2991
  3875                           
  3876                           ;decode_AX25.c: 218: buf = buf | 0x80;
  3877                           
  3878                           ;decode_AX25.c: 217: }else{
  3879  06C6  083C               	movf	waitFlag@buf,w
  3880  06C7  3880               	iorlw	128
  3881  06C8  00F6               	movwf	??_waitFlag
  3882  06C9  0876               	movf	??_waitFlag,w
  3883  06CA  00BC               	movwf	waitFlag@buf
  3884  06CB                     l2991:	
  3885  06CB  3001               	movlw	1
  3886  06CC  07B4               	addwf	waitFlag@j_126,f
  3887  06CD  1803               	skipnc
  3888  06CE  0AB5               	incf	waitFlag@j_126+1,f
  3889  06CF  3000               	movlw	0
  3890  06D0  07B5               	addwf	waitFlag@j_126+1,f
  3891  06D1  3000               	movlw	0
  3892  06D2  0235               	subwf	waitFlag@j_126+1,w
  3893  06D3  3008               	movlw	8
  3894  06D4  1903               	skipnz
  3895  06D5  0234               	subwf	waitFlag@j_126,w
  3896  06D6  1C03               	skipc
  3897  06D7  2EB0               	goto	l2981
  3898  06D8                     l2995:	
  3899                           
  3900                           ;decode_AX25.c: 219: }
  3901                           ;decode_AX25.c: 220: }
  3902                           ;decode_AX25.c: 221: if(buf == ("JQ1ZHX"[3] << 1)){
  3903  06D8  300E               	movlw	low (((STR_7+3)-__stringbase)| (0+32768))
  3904  06D9  0084               	movwf	4
  3905  06DA  120A  158A  2000  120A  118A  	fcall	stringdir
  3906  06DF  00F6               	movwf	??_waitFlag
  3907  06E0  01F7               	clrf	??_waitFlag+1
  3908  06E1  1003               	clrc
  3909  06E2  0DF6               	rlf	??_waitFlag,f
  3910  06E3  0DF7               	rlf	??_waitFlag+1,f
  3911  06E4  083C               	movf	waitFlag@buf,w
  3912  06E5  00F8               	movwf	??_waitFlag+2
  3913  06E6  01F9               	clrf	??_waitFlag+3
  3914  06E7  0877               	movf	??_waitFlag+1,w
  3915  06E8  0679               	xorwf	??_waitFlag+3,w
  3916  06E9  1D03               	skipz
  3917  06EA  2EED               	goto	u2585
  3918  06EB  0876               	movf	??_waitFlag,w
  3919  06EC  0678               	xorwf	??_waitFlag+2,w
  3920  06ED                     u2585:	
  3921  06ED  1D03               	skipz
  3922  06EE  2FB0               	goto	l3065
  3923                           
  3924                           ;decode_AX25.c: 222: dPacket[dPacketnum] = buf;
  3925  06EF  083C               	movf	waitFlag@buf,w
  3926  06F0  00F6               	movwf	??_waitFlag
  3927  06F1  0866               	movf	_dPacketnum,w
  3928  06F2  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3929  06F3  0084               	movwf	4
  3930  06F4  0876               	movf	??_waitFlag,w
  3931  06F5  1783               	bsf	3,7	;select IRP bank3
  3932  06F6  0080               	movwf	0
  3933                           
  3934                           ;decode_AX25.c: 223: dPacketnum ++;
  3935  06F7  3001               	movlw	1
  3936  06F8  07E6               	addwf	_dPacketnum,f
  3937  06F9  1803               	skipnc
  3938  06FA  0AE7               	incf	_dPacketnum+1,f
  3939  06FB  3000               	movlw	0
  3940  06FC  07E7               	addwf	_dPacketnum+1,f
  3941                           
  3942                           ;decode_AX25.c: 224: for(UINT j=0;j<8;j++){
  3943  06FD  01B6               	clrf	waitFlag@j_128
  3944  06FE  01B7               	clrf	waitFlag@j_128+1
  3945  06FF  3000               	movlw	0
  3946  0700  0237               	subwf	waitFlag@j_128+1,w
  3947  0701  3008               	movlw	8
  3948  0702  1903               	skipnz
  3949  0703  0236               	subwf	waitFlag@j_128,w
  3950  0704  1803               	btfsc	3,0
  3951  0705  2F2E               	goto	l3021
  3952  0706                     l3007:	
  3953                           
  3954                           ;decode_AX25.c: 225: flag_judge = getbit();
  3955  0706  120A  158A  22AA  120A  118A  	fcall	_getbit
  3956  070B  0871               	movf	?_getbit+1,w
  3957  070C  1283               	bcf	3,5	;RP0=0, select bank0
  3958  070D  1303               	bcf	3,6	;RP1=0, select bank0
  3959  070E  00BB               	movwf	waitFlag@flag_judge+1
  3960  070F  0870               	movf	?_getbit,w
  3961  0710  00BA               	movwf	waitFlag@flag_judge
  3962                           
  3963                           ;decode_AX25.c: 226: buf = buf >> 1;
  3964  0711  083C               	movf	waitFlag@buf,w
  3965  0712  00F6               	movwf	??_waitFlag
  3966  0713  1003               	clrc
  3967  0714  0C76               	rrf	??_waitFlag,w
  3968  0715  00F7               	movwf	??_waitFlag+1
  3969  0716  0877               	movf	??_waitFlag+1,w
  3970  0717  00BC               	movwf	waitFlag@buf
  3971                           
  3972                           ;decode_AX25.c: 228: buf = buf | 0x00;
  3973  0718  083A               	movf	waitFlag@flag_judge,w
  3974  0719  043B               	iorwf	waitFlag@flag_judge+1,w
  3975  071A  1903               	btfsc	3,2
  3976  071B  2F21               	goto	l3017
  3977                           
  3978                           ;decode_AX25.c: 230: buf = buf | 0x80;
  3979                           
  3980                           ;decode_AX25.c: 229: }else{
  3981  071C  083C               	movf	waitFlag@buf,w
  3982  071D  3880               	iorlw	128
  3983  071E  00F6               	movwf	??_waitFlag
  3984  071F  0876               	movf	??_waitFlag,w
  3985  0720  00BC               	movwf	waitFlag@buf
  3986  0721                     l3017:	
  3987  0721  3001               	movlw	1
  3988  0722  07B6               	addwf	waitFlag@j_128,f
  3989  0723  1803               	skipnc
  3990  0724  0AB7               	incf	waitFlag@j_128+1,f
  3991  0725  3000               	movlw	0
  3992  0726  07B7               	addwf	waitFlag@j_128+1,f
  3993  0727  3000               	movlw	0
  3994  0728  0237               	subwf	waitFlag@j_128+1,w
  3995  0729  3008               	movlw	8
  3996  072A  1903               	skipnz
  3997  072B  0236               	subwf	waitFlag@j_128,w
  3998  072C  1C03               	skipc
  3999  072D  2F06               	goto	l3007
  4000  072E                     l3021:	
  4001                           
  4002                           ;decode_AX25.c: 231: }
  4003                           ;decode_AX25.c: 232: }
  4004                           ;decode_AX25.c: 233: if(buf == ("JQ1ZHX"[4] << 1)){
  4005  072E  300F               	movlw	low (((STR_7+4)-__stringbase)| (0+32768))
  4006  072F  0084               	movwf	4
  4007  0730  120A  158A  2000  120A  118A  	fcall	stringdir
  4008  0735  00F6               	movwf	??_waitFlag
  4009  0736  01F7               	clrf	??_waitFlag+1
  4010  0737  1003               	clrc
  4011  0738  0DF6               	rlf	??_waitFlag,f
  4012  0739  0DF7               	rlf	??_waitFlag+1,f
  4013  073A  083C               	movf	waitFlag@buf,w
  4014  073B  00F8               	movwf	??_waitFlag+2
  4015  073C  01F9               	clrf	??_waitFlag+3
  4016  073D  0877               	movf	??_waitFlag+1,w
  4017  073E  0679               	xorwf	??_waitFlag+3,w
  4018  073F  1D03               	skipz
  4019  0740  2F43               	goto	u2625
  4020  0741  0876               	movf	??_waitFlag,w
  4021  0742  0678               	xorwf	??_waitFlag+2,w
  4022  0743                     u2625:	
  4023  0743  1D03               	skipz
  4024  0744  2FB0               	goto	l3065
  4025                           
  4026                           ;decode_AX25.c: 234: dPacket[dPacketnum] = buf;
  4027  0745  083C               	movf	waitFlag@buf,w
  4028  0746  00F6               	movwf	??_waitFlag
  4029  0747  0866               	movf	_dPacketnum,w
  4030  0748  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4031  0749  0084               	movwf	4
  4032  074A  0876               	movf	??_waitFlag,w
  4033  074B  1783               	bsf	3,7	;select IRP bank3
  4034  074C  0080               	movwf	0
  4035                           
  4036                           ;decode_AX25.c: 235: dPacketnum ++;
  4037  074D  3001               	movlw	1
  4038  074E  07E6               	addwf	_dPacketnum,f
  4039  074F  1803               	skipnc
  4040  0750  0AE7               	incf	_dPacketnum+1,f
  4041  0751  3000               	movlw	0
  4042  0752  07E7               	addwf	_dPacketnum+1,f
  4043                           
  4044                           ;decode_AX25.c: 236: for(UINT j=0;j<8;j++){
  4045  0753  01B8               	clrf	waitFlag@j_130
  4046  0754  01B9               	clrf	waitFlag@j_130+1
  4047  0755  3000               	movlw	0
  4048  0756  0239               	subwf	waitFlag@j_130+1,w
  4049  0757  3008               	movlw	8
  4050  0758  1903               	skipnz
  4051  0759  0238               	subwf	waitFlag@j_130,w
  4052  075A  1803               	btfsc	3,0
  4053  075B  2F84               	goto	l3047
  4054  075C                     l3033:	
  4055                           
  4056                           ;decode_AX25.c: 237: flag_judge = getbit();
  4057  075C  120A  158A  22AA  120A  118A  	fcall	_getbit
  4058  0761  0871               	movf	?_getbit+1,w
  4059  0762  1283               	bcf	3,5	;RP0=0, select bank0
  4060  0763  1303               	bcf	3,6	;RP1=0, select bank0
  4061  0764  00BB               	movwf	waitFlag@flag_judge+1
  4062  0765  0870               	movf	?_getbit,w
  4063  0766  00BA               	movwf	waitFlag@flag_judge
  4064                           
  4065                           ;decode_AX25.c: 238: buf = buf >> 1;
  4066  0767  083C               	movf	waitFlag@buf,w
  4067  0768  00F6               	movwf	??_waitFlag
  4068  0769  1003               	clrc
  4069  076A  0C76               	rrf	??_waitFlag,w
  4070  076B  00F7               	movwf	??_waitFlag+1
  4071  076C  0877               	movf	??_waitFlag+1,w
  4072  076D  00BC               	movwf	waitFlag@buf
  4073                           
  4074                           ;decode_AX25.c: 240: buf = buf | 0x00;
  4075  076E  083A               	movf	waitFlag@flag_judge,w
  4076  076F  043B               	iorwf	waitFlag@flag_judge+1,w
  4077  0770  1903               	btfsc	3,2
  4078  0771  2F77               	goto	l3043
  4079                           
  4080                           ;decode_AX25.c: 242: buf = buf | 0x80;
  4081                           
  4082                           ;decode_AX25.c: 241: }else{
  4083  0772  083C               	movf	waitFlag@buf,w
  4084  0773  3880               	iorlw	128
  4085  0774  00F6               	movwf	??_waitFlag
  4086  0775  0876               	movf	??_waitFlag,w
  4087  0776  00BC               	movwf	waitFlag@buf
  4088  0777                     l3043:	
  4089  0777  3001               	movlw	1
  4090  0778  07B8               	addwf	waitFlag@j_130,f
  4091  0779  1803               	skipnc
  4092  077A  0AB9               	incf	waitFlag@j_130+1,f
  4093  077B  3000               	movlw	0
  4094  077C  07B9               	addwf	waitFlag@j_130+1,f
  4095  077D  3000               	movlw	0
  4096  077E  0239               	subwf	waitFlag@j_130+1,w
  4097  077F  3008               	movlw	8
  4098  0780  1903               	skipnz
  4099  0781  0238               	subwf	waitFlag@j_130,w
  4100  0782  1C03               	skipc
  4101  0783  2F5C               	goto	l3033
  4102  0784                     l3047:	
  4103                           
  4104                           ;decode_AX25.c: 243: }
  4105                           ;decode_AX25.c: 244: }
  4106                           ;decode_AX25.c: 245: if(buf == ("JQ1ZHX"[5] << 1)){
  4107  0784  3010               	movlw	low (((STR_7+5)-__stringbase)| (0+32768))
  4108  0785  0084               	movwf	4
  4109  0786  120A  158A  2000  120A  118A  	fcall	stringdir
  4110  078B  00F6               	movwf	??_waitFlag
  4111  078C  01F7               	clrf	??_waitFlag+1
  4112  078D  1003               	clrc
  4113  078E  0DF6               	rlf	??_waitFlag,f
  4114  078F  0DF7               	rlf	??_waitFlag+1,f
  4115  0790  083C               	movf	waitFlag@buf,w
  4116  0791  00F8               	movwf	??_waitFlag+2
  4117  0792  01F9               	clrf	??_waitFlag+3
  4118  0793  0877               	movf	??_waitFlag+1,w
  4119  0794  0679               	xorwf	??_waitFlag+3,w
  4120  0795  1D03               	skipz
  4121  0796  2F99               	goto	u2665
  4122  0797  0876               	movf	??_waitFlag,w
  4123  0798  0678               	xorwf	??_waitFlag+2,w
  4124  0799                     u2665:	
  4125  0799  1D03               	skipz
  4126  079A  2FB0               	goto	l3065
  4127                           
  4128                           ;decode_AX25.c: 246: dPacket[dPacketnum] = buf;
  4129  079B  083C               	movf	waitFlag@buf,w
  4130  079C  00F6               	movwf	??_waitFlag
  4131  079D  0866               	movf	_dPacketnum,w
  4132  079E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4133  079F  0084               	movwf	4
  4134  07A0  0876               	movf	??_waitFlag,w
  4135  07A1  1783               	bsf	3,7	;select IRP bank3
  4136  07A2  0080               	movwf	0
  4137                           
  4138                           ;decode_AX25.c: 247: dPacketnum ++;
  4139  07A3  3001               	movlw	1
  4140  07A4  07E6               	addwf	_dPacketnum,f
  4141  07A5  1803               	skipnc
  4142  07A6  0AE7               	incf	_dPacketnum+1,f
  4143  07A7  3000               	movlw	0
  4144  07A8  07E7               	addwf	_dPacketnum+1,f
  4145                           
  4146                           ;decode_AX25.c: 248: rcv_state ++;
  4147  07A9  3001               	movlw	1
  4148  07AA  07EA               	addwf	_rcv_state,f
  4149  07AB  1803               	skipnc
  4150  07AC  0AEB               	incf	_rcv_state+1,f
  4151  07AD  3000               	movlw	0
  4152  07AE  07EB               	addwf	_rcv_state+1,f
  4153                           
  4154                           ;decode_AX25.c: 249: }else{
  4155  07AF  2B2F               	goto	l3067
  4156  07B0                     l3065:	
  4157                           ;decode_AX25.c: 268: }
  4158                           ;decode_AX25.c: 269: }else{
  4159                           
  4160                           ;decode_AX25.c: 267: rcv_state = 0;
  4161                           
  4162                           ;decode_AX25.c: 266: dPacketnum = 0;
  4163                           
  4164                           ;decode_AX25.c: 264: }
  4165                           ;decode_AX25.c: 265: }else{
  4166                           
  4167                           ;decode_AX25.c: 263: rcv_state = 0;
  4168                           
  4169                           ;decode_AX25.c: 262: dPacketnum = 0;
  4170                           
  4171                           ;decode_AX25.c: 260: }
  4172                           ;decode_AX25.c: 261: }else{
  4173                           
  4174                           ;decode_AX25.c: 259: rcv_state = 0;
  4175                           
  4176                           ;decode_AX25.c: 258: dPacketnum = 0;
  4177                           
  4178                           ;decode_AX25.c: 256: }
  4179                           ;decode_AX25.c: 257: }else{
  4180                           
  4181                           ;decode_AX25.c: 255: rcv_state = 0;
  4182                           
  4183                           ;decode_AX25.c: 254: dPacketnum = 0;
  4184                           
  4185                           ;decode_AX25.c: 252: }
  4186                           ;decode_AX25.c: 253: }else{
  4187                           
  4188                           ;decode_AX25.c: 251: rcv_state = 0;
  4189                           
  4190                           ;decode_AX25.c: 250: dPacketnum = 0;
  4191                           
  4192                           
  4193                           ;decode_AX25.c: 270: dPacketnum = 0;
  4194  07B0  01E6               	clrf	_dPacketnum
  4195  07B1  01E7               	clrf	_dPacketnum+1
  4196  07B2  2B2D               	goto	L6
  4197  07B3                     __end_of_waitFlag:	
  4198                           
  4199                           	psect	text5
  4200  0C0A                     __ptext5:	
  4201 ;; *************** function _getdata *****************
  4202 ;; Defined at:
  4203 ;;		line 278 in file "decode_AX25.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;		None
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;  dbitstatus      2    4[BANK0 ] unsigned int 
  4208 ;;  dstuff          2    2[BANK0 ] unsigned int 
  4209 ;;  bufstore_cou    2    0[BANK0 ] unsigned int 
  4210 ;;  buf             1    6[BANK0 ] unsigned char 
  4211 ;;  dammy_data      1    0        unsigned char 
  4212 ;; Return value:  Size  Location     Type
  4213 ;;                  1    wreg      void 
  4214 ;; Registers used:
  4215 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 0/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4221 ;;      Params:         0       0       0       0       0
  4222 ;;      Locals:         0       7       0       0       0
  4223 ;;      Temps:          2       0       0       0       0
  4224 ;;      Totals:         2       7       0       0       0
  4225 ;;Total ram usage:        9 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; Hardware stack levels required when called:    1
  4228 ;; This function calls:
  4229 ;;		_getbit
  4230 ;; This function is called by:
  4231 ;;		_ReceivePacket_data
  4232 ;;		_ReceivePacket
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236                           
  4237                           ;psect for function _getdata
  4238  0C0A                     _getdata:	
  4239                           
  4240                           ;decode_AX25.c: 279: UBYTE buf = 0x00;
  4241                           
  4242                           ;incstack = 0
  4243                           ; Regs used in _getdata: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4244  0C0A  1283               	bcf	3,5	;RP0=0, select bank0
  4245  0C0B  1303               	bcf	3,6	;RP1=0, select bank0
  4246  0C0C  01A6               	clrf	getdata@buf
  4247                           
  4248                           ;decode_AX25.c: 280: UINT dstuff = 0;
  4249  0C0D  01A2               	clrf	getdata@dstuff
  4250  0C0E  01A3               	clrf	getdata@dstuff+1
  4251                           
  4252                           ;decode_AX25.c: 281: UBYTE dammy_data;
  4253                           ;decode_AX25.c: 282: UINT bufstore_counter = 0;
  4254  0C0F  01A0               	clrf	getdata@bufstore_counter
  4255  0C10  01A1               	clrf	getdata@bufstore_counter+1
  4256                           
  4257                           ;decode_AX25.c: 283: UINT dbitstatus = 0;
  4258  0C11  01A4               	clrf	getdata@dbitstatus
  4259  0C12  01A5               	clrf	getdata@dbitstatus+1
  4260  0C13                     l3101:	
  4261                           ;decode_AX25.c: 285: while(rcv_state == 2){
  4262                           
  4263  0C13  3002               	movlw	2
  4264  0C14  066A               	xorwf	_rcv_state,w
  4265  0C15  046B               	iorwf	_rcv_state+1,w
  4266  0C16  1D03               	btfss	3,2
  4267  0C17  0008               	return
  4268                           
  4269                           ;decode_AX25.c: 286: dbitstatus = getbit();
  4270  0C18  120A  158A  22AA  120A  158A  	fcall	_getbit
  4271  0C1D  0871               	movf	?_getbit+1,w
  4272  0C1E  1283               	bcf	3,5	;RP0=0, select bank0
  4273  0C1F  1303               	bcf	3,6	;RP1=0, select bank0
  4274  0C20  00A5               	movwf	getdata@dbitstatus+1
  4275  0C21  0870               	movf	?_getbit,w
  4276  0C22  00A4               	movwf	getdata@dbitstatus
  4277                           
  4278                           ;decode_AX25.c: 287: if(dstuff == 5){
  4279  0C23  3005               	movlw	5
  4280  0C24  0622               	xorwf	getdata@dstuff,w
  4281  0C25  0423               	iorwf	getdata@dstuff+1,w
  4282  0C26  1D03               	btfss	3,2
  4283  0C27  2C36               	goto	l3083
  4284                           
  4285                           ;decode_AX25.c: 288: if(dbitstatus == 1){
  4286  0C28  0324               	decf	getdata@dbitstatus,w
  4287  0C29  0425               	iorwf	getdata@dbitstatus+1,w
  4288  0C2A  1D03               	btfss	3,2
  4289  0C2B  2C33               	goto	l3081
  4290                           
  4291                           ;decode_AX25.c: 289: rcv_state ++;
  4292  0C2C  3001               	movlw	1
  4293  0C2D  07EA               	addwf	_rcv_state,f
  4294  0C2E  1803               	skipnc
  4295  0C2F  0AEB               	incf	_rcv_state+1,f
  4296  0C30  3000               	movlw	0
  4297  0C31  07EB               	addwf	_rcv_state+1,f
  4298                           
  4299                           ;decode_AX25.c: 290: break;
  4300  0C32  0008               	return
  4301  0C33                     l3081:	
  4302                           ;decode_AX25.c: 291: }else{
  4303                           
  4304                           
  4305                           ;decode_AX25.c: 292: dstuff = 0;
  4306  0C33  01A2               	clrf	getdata@dstuff
  4307  0C34  01A3               	clrf	getdata@dstuff+1
  4308                           
  4309                           ;decode_AX25.c: 293: }
  4310                           ;decode_AX25.c: 294: }else{
  4311  0C35  2C13               	goto	l3101
  4312  0C36                     l3083:	
  4313                           
  4314                           ;decode_AX25.c: 295: buf = buf >> 1;
  4315  0C36  0826               	movf	getdata@buf,w
  4316  0C37  00F6               	movwf	??_getdata
  4317  0C38  1003               	clrc
  4318  0C39  0C76               	rrf	??_getdata,w
  4319  0C3A  00F7               	movwf	??_getdata+1
  4320  0C3B  0877               	movf	??_getdata+1,w
  4321  0C3C  00A6               	movwf	getdata@buf
  4322                           
  4323                           ;decode_AX25.c: 297: buf = buf | 0x00;
  4324  0C3D  0824               	movf	getdata@dbitstatus,w
  4325  0C3E  0425               	iorwf	getdata@dbitstatus+1,w
  4326  0C3F  1D03               	btfss	3,2
  4327  0C40  2C44               	goto	l3087
  4328                           
  4329                           ;decode_AX25.c: 298: dstuff = 0;
  4330  0C41  01A2               	clrf	getdata@dstuff
  4331  0C42  01A3               	clrf	getdata@dstuff+1
  4332                           
  4333                           ;decode_AX25.c: 299: }else{
  4334  0C43  2C4F               	goto	l3091
  4335  0C44                     l3087:	
  4336                           
  4337                           ;decode_AX25.c: 300: buf = buf | 0x80;
  4338  0C44  0826               	movf	getdata@buf,w
  4339  0C45  3880               	iorlw	128
  4340  0C46  00F6               	movwf	??_getdata
  4341  0C47  0876               	movf	??_getdata,w
  4342  0C48  00A6               	movwf	getdata@buf
  4343                           
  4344                           ;decode_AX25.c: 301: dstuff ++;
  4345  0C49  3001               	movlw	1
  4346  0C4A  07A2               	addwf	getdata@dstuff,f
  4347  0C4B  1803               	skipnc
  4348  0C4C  0AA3               	incf	getdata@dstuff+1,f
  4349  0C4D  3000               	movlw	0
  4350  0C4E  07A3               	addwf	getdata@dstuff+1,f
  4351  0C4F                     l3091:	
  4352                           
  4353                           ;decode_AX25.c: 302: }
  4354                           ;decode_AX25.c: 303: bufstore_counter ++;
  4355  0C4F  3001               	movlw	1
  4356  0C50  07A0               	addwf	getdata@bufstore_counter,f
  4357  0C51  1803               	skipnc
  4358  0C52  0AA1               	incf	getdata@bufstore_counter+1,f
  4359  0C53  3000               	movlw	0
  4360  0C54  07A1               	addwf	getdata@bufstore_counter+1,f
  4361                           
  4362                           ;decode_AX25.c: 304: if(bufstore_counter == 8){
  4363  0C55  3008               	movlw	8
  4364  0C56  0620               	xorwf	getdata@bufstore_counter,w
  4365  0C57  0421               	iorwf	getdata@bufstore_counter+1,w
  4366  0C58  1D03               	btfss	3,2
  4367  0C59  2C13               	goto	l3101
  4368                           
  4369                           ;decode_AX25.c: 305: bufstore_counter = 0;
  4370  0C5A  01A0               	clrf	getdata@bufstore_counter
  4371  0C5B  01A1               	clrf	getdata@bufstore_counter+1
  4372                           
  4373                           ;decode_AX25.c: 306: dPacket[dPacketnum] = buf;
  4374  0C5C  0826               	movf	getdata@buf,w
  4375  0C5D  00F6               	movwf	??_getdata
  4376  0C5E  0866               	movf	_dPacketnum,w
  4377  0C5F  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4378  0C60  0084               	movwf	4
  4379  0C61  0876               	movf	??_getdata,w
  4380  0C62  1783               	bsf	3,7	;select IRP bank3
  4381  0C63  0080               	movwf	0
  4382                           
  4383                           ;decode_AX25.c: 307: dPacketnum ++;
  4384  0C64  3001               	movlw	1
  4385  0C65  07E6               	addwf	_dPacketnum,f
  4386  0C66  1803               	skipnc
  4387  0C67  0AE7               	incf	_dPacketnum+1,f
  4388  0C68  3000               	movlw	0
  4389  0C69  07E7               	addwf	_dPacketnum+1,f
  4390  0C6A  2C13               	goto	l3101
  4391  0C6B                     __end_of_getdata:	
  4392                           
  4393                           	psect	text6
  4394  0AAA                     __ptext6:	
  4395 ;; *************** function _getbit *****************
  4396 ;; Defined at:
  4397 ;;		line 40 in file "decode_AX25.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;		None
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;  i               2    4[COMMON] unsigned int 
  4402 ;; Return value:  Size  Location     Type
  4403 ;;                  2    0[COMMON] unsigned int 
  4404 ;; Registers used:
  4405 ;;		wreg, status,2, status,0
  4406 ;; Tracked objects:
  4407 ;;		On entry : 0/0
  4408 ;;		On exit  : 0/0
  4409 ;;		Unchanged: 0/0
  4410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4411 ;;      Params:         2       0       0       0       0
  4412 ;;      Locals:         2       0       0       0       0
  4413 ;;      Temps:          2       0       0       0       0
  4414 ;;      Totals:         6       0       0       0       0
  4415 ;;Total ram usage:        6 bytes
  4416 ;; Hardware stack levels used:    1
  4417 ;; This function calls:
  4418 ;;		Nothing
  4419 ;; This function is called by:
  4420 ;;		_waitFlag
  4421 ;;		_getdata
  4422 ;;		_conv_DI_UARTRX
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           
  4427                           ;psect for function _getbit
  4428  0AAA                     _getbit:	
  4429                           
  4430                           ;decode_AX25.c: 41: static UINT oldbit;
  4431                           ;decode_AX25.c: 42: oldbit = RB5;
  4432                           
  4433                           ;incstack = 0
  4434                           ; Regs used in _getbit: [wreg+status,2+status,0]
  4435  0AAA  1003               	clrc
  4436  0AAB  1283               	bcf	3,5	;RP0=0, select bank0
  4437  0AAC  1303               	bcf	3,6	;RP1=0, select bank0
  4438  0AAD  1A86               	btfsc	6,5	;volatile
  4439  0AAE  1403               	setc
  4440  0AAF  3000               	movlw	0
  4441  0AB0  1803               	skipnc
  4442  0AB1  3001               	movlw	1
  4443  0AB2  00F2               	movwf	??_getbit
  4444  0AB3  01F3               	clrf	??_getbit+1
  4445  0AB4  0872               	movf	??_getbit,w
  4446  0AB5  1683               	bsf	3,5	;RP0=1, select bank1
  4447  0AB6  1303               	bcf	3,6	;RP1=0, select bank1
  4448  0AB7  00E7               	movwf	getbit@oldbit^(0+128)
  4449  0AB8  0873               	movf	??_getbit+1,w
  4450  0AB9  00E8               	movwf	(getbit@oldbit+1)^(0+128)
  4451                           
  4452                           ;decode_AX25.c: 43: for(UINT i=0;i<62;i++){
  4453  0ABA  01F4               	clrf	getbit@i
  4454  0ABB  01F5               	clrf	getbit@i+1
  4455  0ABC  3000               	movlw	0
  4456  0ABD  0275               	subwf	getbit@i+1,w
  4457  0ABE  303E               	movlw	62
  4458  0ABF  1903               	skipnz
  4459  0AC0  0274               	subwf	getbit@i,w
  4460  0AC1  1803               	btfsc	3,0
  4461  0AC2  2AF1               	goto	l2547
  4462                           
  4463                           ;decode_AX25.c: 44: if(RB5 != oldbit){
  4464  0AC3  1003               	clrc
  4465  0AC4                     L7:	
  4466  0AC4  1283               	bcf	3,5	;RP0=0, select bank0
  4467  0AC5  1A86               	btfsc	6,5	;volatile
  4468  0AC6  1403               	setc
  4469  0AC7  3000               	movlw	0
  4470  0AC8  1803               	skipnc
  4471  0AC9  3001               	movlw	1
  4472  0ACA  00F2               	movwf	??_getbit
  4473  0ACB  01F3               	clrf	??_getbit+1
  4474  0ACC  1683               	bsf	3,5	;RP0=1, select bank1
  4475  0ACD  1303               	bcf	3,6	;RP1=0, select bank1
  4476  0ACE  0868               	movf	(getbit@oldbit+1)^(0+128),w
  4477  0ACF  0673               	xorwf	??_getbit+1,w
  4478  0AD0  1D03               	skipz
  4479  0AD1  2AD4               	goto	u1895
  4480  0AD2  0867               	movf	getbit@oldbit^(0+128),w
  4481  0AD3  0672               	xorwf	??_getbit,w
  4482  0AD4                     u1895:	
  4483  0AD4  1903               	skipnz
  4484  0AD5  2AE4               	goto	l2545
  4485                           
  4486                           ;decode_AX25.c: 45: _delay((unsigned long)((400)*(10000000/4000000.0)));
  4487  0AD6  30F9               	movlw	249
  4488  0AD7  00F2               	movwf	??_getbit
  4489  0AD8                     u3697:	
  4490  0AD8  0000               	nop
  4491  0AD9  0BF2               	decfsz	??_getbit,f
  4492  0ADA  2AD8               	goto	u3697
  4493  0ADB  2ADC               	nop2	;nop
  4494  0ADC  0000               	nop
  4495                           
  4496                           ;decode_AX25.c: 46: RC2= 1- RC2;
  4497  0ADD  3004               	movlw	4
  4498  0ADE  1283               	bcf	3,5	;RP0=0, select bank0
  4499  0ADF  1303               	bcf	3,6	;RP1=0, select bank0
  4500  0AE0  0687               	xorwf	7,f
  4501                           
  4502                           ;decode_AX25.c: 47: return 0;
  4503  0AE1  01F0               	clrf	?_getbit
  4504  0AE2  01F1               	clrf	?_getbit+1
  4505  0AE3  0008               	return
  4506  0AE4                     l2545:	
  4507  0AE4  3001               	movlw	1
  4508  0AE5  07F4               	addwf	getbit@i,f
  4509  0AE6  1803               	skipnc
  4510  0AE7  0AF5               	incf	getbit@i+1,f
  4511  0AE8  3000               	movlw	0
  4512  0AE9  07F5               	addwf	getbit@i+1,f
  4513  0AEA  3000               	movlw	0
  4514  0AEB  0275               	subwf	getbit@i+1,w
  4515  0AEC  303E               	movlw	62
  4516  0AED  1903               	skipnz
  4517  0AEE  0274               	subwf	getbit@i,w
  4518  0AEF  1C03               	skipc
  4519  0AF0  2AC4               	goto	L7
  4520  0AF1                     l2547:	
  4521                           
  4522                           ;decode_AX25.c: 48: }
  4523                           ;decode_AX25.c: 49: }
  4524                           ;decode_AX25.c: 50: return 1;
  4525  0AF1  3001               	movlw	1
  4526  0AF2  00F0               	movwf	?_getbit
  4527  0AF3  3000               	movlw	0
  4528  0AF4  00F1               	movwf	?_getbit+1
  4529  0AF5  0008               	return
  4530  0AF6                     __end_of_getbit:	
  4531                           
  4532                           	psect	text7
  4533  002A                     __ptext7:	
  4534 ;; *************** function _fcscheck *****************
  4535 ;; Defined at:
  4536 ;;		line 313 in file "decode_AX25.c"
  4537 ;; Parameters:    Size  Location     Type
  4538 ;;		None
  4539 ;; Auto vars:     Size  Location     Type
  4540 ;;  i               2    7[COMMON] unsigned int 
  4541 ;;  i               2    5[COMMON] unsigned int 
  4542 ;;  byte            1    9[COMMON] unsigned char 
  4543 ;;  bt              1    4[COMMON] unsigned char 
  4544 ;; Return value:  Size  Location     Type
  4545 ;;                  2    0[COMMON] unsigned int 
  4546 ;; Registers used:
  4547 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4548 ;; Tracked objects:
  4549 ;;		On entry : 0/0
  4550 ;;		On exit  : 0/0
  4551 ;;		Unchanged: 0/0
  4552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4553 ;;      Params:         2       0       0       0       0
  4554 ;;      Locals:         6       0       0       0       0
  4555 ;;      Temps:          2       0       0       0       0
  4556 ;;      Totals:        10       0       0       0       0
  4557 ;;Total ram usage:       10 bytes
  4558 ;; Hardware stack levels used:    1
  4559 ;; This function calls:
  4560 ;;		Nothing
  4561 ;; This function is called by:
  4562 ;;		_ReceivePacket_data
  4563 ;;		_ReceivePacket
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           
  4568                           ;psect for function _fcscheck
  4569  002A                     _fcscheck:	
  4570                           
  4571                           ;decode_AX25.c: 314: UBYTE bt,byte;
  4572                           ;decode_AX25.c: 315: dfcslo = dfcshi = 0xff;
  4573                           
  4574                           ;incstack = 0
  4575                           ; Regs used in _fcscheck: [wreg-fsr0h+status,2+status,0]
  4576  002A  30FF               	movlw	255
  4577  002B  1283               	bcf	3,5	;RP0=0, select bank0
  4578  002C  1303               	bcf	3,6	;RP1=0, select bank0
  4579  002D  00EC               	movwf	_dfcshi
  4580  002E  00F2               	movwf	??_fcscheck
  4581  002F  0872               	movf	??_fcscheck,w
  4582  0030  00ED               	movwf	_dfcslo
  4583                           
  4584                           ;decode_AX25.c: 316: while(rcv_state == 3){
  4585  0031  3003               	movlw	3
  4586  0032  066A               	xorwf	_rcv_state,w
  4587  0033  046B               	iorwf	_rcv_state+1,w
  4588  0034  1D03               	btfss	3,2
  4589  0035  0008               	return
  4590                           
  4591                           ;decode_AX25.c: 317: for(UINT i=0;i<dPacketnum-2;i++){
  4592  0036  01F5               	clrf	fcscheck@i
  4593  0037  01F6               	clrf	fcscheck@i+1
  4594  0038                     l3129:	
  4595  0038  0866               	movf	_dPacketnum,w
  4596  0039  3EFE               	addlw	254
  4597  003A  00F2               	movwf	??_fcscheck
  4598  003B  0867               	movf	_dPacketnum+1,w
  4599  003C  1803               	skipnc
  4600  003D  3E01               	addlw	1
  4601  003E  3EFF               	addlw	255
  4602  003F  00F3               	movwf	??_fcscheck+1
  4603  0040  0873               	movf	??_fcscheck+1,w
  4604  0041  0276               	subwf	fcscheck@i+1,w
  4605  0042  1D03               	skipz
  4606  0043  2846               	goto	u2765
  4607  0044  0872               	movf	??_fcscheck,w
  4608  0045  0275               	subwf	fcscheck@i,w
  4609  0046                     u2765:	
  4610  0046  1803               	btfsc	3,0
  4611  0047  2891               	goto	l272
  4612                           
  4613                           ;decode_AX25.c: 318: byte = dPacket[i];
  4614  0048  0875               	movf	fcscheck@i,w
  4615  0049  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4616  004A  0084               	movwf	4
  4617  004B  1783               	bsf	3,7	;select IRP bank3
  4618  004C  0800               	movf	0,w
  4619  004D  00F2               	movwf	??_fcscheck
  4620  004E  0872               	movf	??_fcscheck,w
  4621  004F  00F9               	movwf	fcscheck@byte
  4622                           
  4623                           ;decode_AX25.c: 319: for(UINT i=0;i<8;i++){
  4624  0050  01F7               	clrf	fcscheck@i_142
  4625  0051  01F8               	clrf	fcscheck@i_142+1
  4626  0052  3000               	movlw	0
  4627  0053  0278               	subwf	fcscheck@i_142+1,w
  4628  0054  3008               	movlw	8
  4629  0055  1903               	skipnz
  4630  0056  0277               	subwf	fcscheck@i_142,w
  4631  0057  1803               	btfsc	3,0
  4632  0058  288A               	goto	l3127
  4633  0059                     l3115:	
  4634                           
  4635                           ;decode_AX25.c: 320: bt = byte & 0x01;
  4636  0059  0879               	movf	fcscheck@byte,w
  4637  005A  3901               	andlw	1
  4638  005B  00F2               	movwf	??_fcscheck
  4639  005C  0872               	movf	??_fcscheck,w
  4640  005D  00F4               	movwf	fcscheck@bt
  4641  005E  1003               	bcf	3,0	;# 
  4642  005F  0CEC               	rrf	_dfcshi,f	;# 
  4643  0060  0CED               	rrf	_dfcslo,f	;# 
  4644                           
  4645                           ;decode_AX25.c: 326: if(((STATUS & 0x01)^bt) == 0x01){
  4646  0061  3001               	movlw	1
  4647  0062  1283               	bcf	3,5	;RP0=0, select bank0
  4648  0063  1303               	bcf	3,6	;RP1=0, select bank0
  4649  0064  0503               	andwf	3,w	;volatile
  4650  0065  00F2               	movwf	??_fcscheck
  4651  0066  0874               	movf	fcscheck@bt,w
  4652  0067  0672               	xorwf	??_fcscheck,w
  4653  0068  00F3               	movwf	??_fcscheck+1
  4654  0069  0373               	decf	??_fcscheck+1,w
  4655  006A  1D03               	btfss	3,2
  4656  006B  2876               	goto	l3121
  4657                           
  4658                           ;decode_AX25.c: 327: dfcshi = dfcshi ^ 0x84;
  4659  006C  086C               	movf	_dfcshi,w
  4660  006D  3A84               	xorlw	132
  4661  006E  00F2               	movwf	??_fcscheck
  4662  006F  0872               	movf	??_fcscheck,w
  4663  0070  00EC               	movwf	_dfcshi
  4664                           
  4665                           ;decode_AX25.c: 328: dfcslo = dfcslo ^ 0x08;
  4666  0071  086D               	movf	_dfcslo,w
  4667  0072  3A08               	xorlw	8
  4668  0073  00F2               	movwf	??_fcscheck
  4669  0074  0872               	movf	??_fcscheck,w
  4670  0075  00ED               	movwf	_dfcslo
  4671  0076                     l3121:	
  4672                           
  4673                           ;decode_AX25.c: 329: }
  4674                           ;decode_AX25.c: 330: byte = byte >> 1;
  4675  0076  0879               	movf	fcscheck@byte,w
  4676  0077  00F2               	movwf	??_fcscheck
  4677  0078  1003               	clrc
  4678  0079  0C72               	rrf	??_fcscheck,w
  4679  007A  00F3               	movwf	??_fcscheck+1
  4680  007B  0873               	movf	??_fcscheck+1,w
  4681  007C  00F9               	movwf	fcscheck@byte
  4682  007D  3001               	movlw	1
  4683  007E  07F7               	addwf	fcscheck@i_142,f
  4684  007F  1803               	skipnc
  4685  0080  0AF8               	incf	fcscheck@i_142+1,f
  4686  0081  3000               	movlw	0
  4687  0082  07F8               	addwf	fcscheck@i_142+1,f
  4688  0083  3000               	movlw	0
  4689  0084  0278               	subwf	fcscheck@i_142+1,w
  4690  0085  3008               	movlw	8
  4691  0086  1903               	skipnz
  4692  0087  0277               	subwf	fcscheck@i_142,w
  4693  0088  1C03               	skipc
  4694  0089  2859               	goto	l3115
  4695  008A                     l3127:	
  4696  008A  3001               	movlw	1
  4697  008B  07F5               	addwf	fcscheck@i,f
  4698  008C  1803               	skipnc
  4699  008D  0AF6               	incf	fcscheck@i+1,f
  4700  008E  3000               	movlw	0
  4701  008F  07F6               	addwf	fcscheck@i+1,f
  4702  0090  2838               	goto	l3129
  4703  0091                     l272:	
  4704                           
  4705                           ;decode_AX25.c: 331: }
  4706                           ;decode_AX25.c: 332: }
  4707                           ;decode_AX25.c: 333: dfcslo = dfcslo ^ 0xff;
  4708  0091  09ED               	comf	_dfcslo,f
  4709                           
  4710                           ;decode_AX25.c: 334: dfcshi = dfcshi ^ 0xff;
  4711  0092  09EC               	comf	_dfcshi,f
  4712                           
  4713                           ;decode_AX25.c: 337: if((dPacket[dPacketnum-2] == dfcslo) && (dPacket[dPacketnum-1] == d
      +                          fcshi)){
  4714  0093  0866               	movf	_dPacketnum,w
  4715  0094  3EFE               	addlw	254
  4716  0095  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4717  0096  0084               	movwf	4
  4718  0097  1783               	bsf	3,7	;select IRP bank3
  4719  0098  0800               	movf	0,w
  4720  0099  066D               	xorwf	_dfcslo,w
  4721  009A  1D03               	skipz
  4722  009B  28A9               	goto	l3141
  4723  009C  0866               	movf	_dPacketnum,w
  4724  009D  3EFF               	addlw	255
  4725  009E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4726  009F  0084               	movwf	4
  4727  00A0  0800               	movf	0,w
  4728  00A1  066C               	xorwf	_dfcshi,w
  4729  00A2  1D03               	skipz
  4730  00A3  28A9               	goto	l3141
  4731                           
  4732                           ;decode_AX25.c: 342: return 1;
  4733  00A4  3001               	movlw	1
  4734  00A5  00F0               	movwf	?_fcscheck
  4735  00A6  3000               	movlw	0
  4736  00A7  00F1               	movwf	?_fcscheck+1
  4737  00A8  0008               	return
  4738  00A9                     l3141:	
  4739                           ;decode_AX25.c: 343: }else{
  4740                           
  4741                           
  4742                           ;decode_AX25.c: 348: return 0;
  4743  00A9  01F0               	clrf	?_fcscheck
  4744  00AA  01F1               	clrf	?_fcscheck+1
  4745  00AB  0008               	return
  4746  00AC                     __end_of_fcscheck:	
  4747                           
  4748                           	psect	text8
  4749  0864                     __ptext8:	
  4750 ;; *************** function _NM_waddress *****************
  4751 ;; Defined at:
  4752 ;;		line 71 in file "UART.c"
  4753 ;; Parameters:    Size  Location     Type
  4754 ;;  NM_wad_heade    1    wreg     unsigned char 
  4755 ;;  whigh_addres    1    1[COMMON] unsigned char 
  4756 ;;  wlow_address    1    2[COMMON] unsigned char 
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;  NM_wad_heade    1    3[COMMON] unsigned char 
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  1    wreg      void 
  4761 ;; Registers used:
  4762 ;;		wreg, status,2, status,0, pclath, cstack
  4763 ;; Tracked objects:
  4764 ;;		On entry : 0/0
  4765 ;;		On exit  : 0/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4768 ;;      Params:         2       0       0       0       0
  4769 ;;      Locals:         1       0       0       0       0
  4770 ;;      Temps:          0       0       0       0       0
  4771 ;;      Totals:         3       0       0       0       0
  4772 ;;Total ram usage:        3 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; Hardware stack levels required when called:    1
  4775 ;; This function calls:
  4776 ;;		_putch
  4777 ;; This function is called by:
  4778 ;;		_main
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           
  4783                           ;psect for function _NM_waddress
  4784  0864                     _NM_waddress:	
  4785                           
  4786                           ;incstack = 0
  4787                           ; Regs used in _NM_waddress: [wreg+status,2+status,0+pclath+cstack]
  4788                           ;NM_waddress@NM_wad_header stored from wreg
  4789  0864  00F3               	movwf	NM_waddress@NM_wad_header
  4790                           
  4791                           ;UART.c: 72: putch(NM_wad_header);
  4792  0865  0873               	movf	NM_waddress@NM_wad_header,w
  4793  0866  120A  158A  203A  120A  158A  	fcall	_putch
  4794                           
  4795                           ;UART.c: 73: putch(whigh_address);
  4796  086B  0871               	movf	NM_waddress@whigh_address,w
  4797  086C  120A  158A  203A  120A  158A  	fcall	_putch
  4798                           
  4799                           ;UART.c: 74: putch(wlow_address);
  4800  0871  0872               	movf	NM_waddress@wlow_address,w
  4801  0872  120A  158A  203A   	fcall	_putch
  4802  0875  0008               	return
  4803  0876                     __end_of_NM_waddress:	
  4804                           
  4805                           	psect	text9
  4806  083A                     __ptext9:	
  4807 ;; *************** function _putch *****************
  4808 ;; Defined at:
  4809 ;;		line 38 in file "UART.c"
  4810 ;; Parameters:    Size  Location     Type
  4811 ;;  byte            1    wreg     unsigned char 
  4812 ;; Auto vars:     Size  Location     Type
  4813 ;;  byte            1    0[COMMON] unsigned char 
  4814 ;; Return value:  Size  Location     Type
  4815 ;;                  1    wreg      void 
  4816 ;; Registers used:
  4817 ;;		wreg
  4818 ;; Tracked objects:
  4819 ;;		On entry : 0/0
  4820 ;;		On exit  : 0/0
  4821 ;;		Unchanged: 0/0
  4822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4823 ;;      Params:         0       0       0       0       0
  4824 ;;      Locals:         1       0       0       0       0
  4825 ;;      Temps:          0       0       0       0       0
  4826 ;;      Totals:         1       0       0       0       0
  4827 ;;Total ram usage:        1 bytes
  4828 ;; Hardware stack levels used:    1
  4829 ;; This function calls:
  4830 ;;		Nothing
  4831 ;; This function is called by:
  4832 ;;		_NM_waddress
  4833 ;;		_printf
  4834 ;;		_putstr
  4835 ;;		_putcrlf
  4836 ;;		_put_error
  4837 ;;		_put_ok
  4838 ;;		_putAX25
  4839 ;;		_conv_DI_UARTRX
  4840 ;;		_test_Packetmaker
  4841 ;;		_EEPROM_Read
  4842 ;; This function uses a non-reentrant model
  4843 ;;
  4844                           
  4845                           
  4846                           ;psect for function _putch
  4847  083A                     _putch:	
  4848                           
  4849                           ;incstack = 0
  4850                           ; Regs used in _putch: [wreg]
  4851                           ;putch@byte stored from wreg
  4852  083A  00F0               	movwf	putch@byte
  4853  083B                     l65:	
  4854                           ;UART.c: 39: while(!TXIF);
  4855                           
  4856  083B  1283               	bcf	3,5	;RP0=0, select bank0
  4857  083C  1303               	bcf	3,6	;RP1=0, select bank0
  4858  083D  1E0C               	btfss	12,4	;volatile
  4859  083E  283B               	goto	l65
  4860                           
  4861                           ;UART.c: 40: TXREG = byte;
  4862  083F  0870               	movf	putch@byte,w
  4863  0840  0099               	movwf	25	;volatile
  4864  0841  0008               	return
  4865  0842                     __end_of_putch:	
  4866                           
  4867                           	psect	text10
  4868  088B                     __ptext10:	
  4869 ;; *************** function _Init_SERIAL *****************
  4870 ;; Defined at:
  4871 ;;		line 5 in file "UART.c"
  4872 ;; Parameters:    Size  Location     Type
  4873 ;;		None
  4874 ;; Auto vars:     Size  Location     Type
  4875 ;;		None
  4876 ;; Return value:  Size  Location     Type
  4877 ;;                  1    wreg      void 
  4878 ;; Registers used:
  4879 ;;		wreg
  4880 ;; Tracked objects:
  4881 ;;		On entry : 0/0
  4882 ;;		On exit  : 0/0
  4883 ;;		Unchanged: 0/0
  4884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4885 ;;      Params:         0       0       0       0       0
  4886 ;;      Locals:         0       0       0       0       0
  4887 ;;      Temps:          0       0       0       0       0
  4888 ;;      Totals:         0       0       0       0       0
  4889 ;;Total ram usage:        0 bytes
  4890 ;; Hardware stack levels used:    1
  4891 ;; This function calls:
  4892 ;;		Nothing
  4893 ;; This function is called by:
  4894 ;;		_main
  4895 ;; This function uses a non-reentrant model
  4896 ;;
  4897                           
  4898                           
  4899                           ;psect for function _Init_SERIAL
  4900  088B                     _Init_SERIAL:	
  4901                           
  4902                           ;UART.c: 6: SPBRG = 10;
  4903                           
  4904                           ;incstack = 0
  4905                           ; Regs used in _Init_SERIAL: [wreg]
  4906  088B  300A               	movlw	10
  4907  088C  1683               	bsf	3,5	;RP0=1, select bank1
  4908  088D  1303               	bcf	3,6	;RP1=0, select bank1
  4909  088E  0099               	movwf	25	;volatile
  4910                           
  4911                           ;UART.c: 7: BRGH = 0;
  4912  088F  1118               	bcf	24,2	;volatile
  4913                           
  4914                           ;UART.c: 8: SYNC = 0;
  4915  0890  1218               	bcf	24,4	;volatile
  4916                           
  4917                           ;UART.c: 9: SPEN = 1;
  4918  0891  1283               	bcf	3,5	;RP0=0, select bank0
  4919  0892  1303               	bcf	3,6	;RP1=0, select bank0
  4920  0893  1798               	bsf	24,7	;volatile
  4921                           
  4922                           ;UART.c: 10: CREN = 1;
  4923  0894  1618               	bsf	24,4	;volatile
  4924                           
  4925                           ;UART.c: 11: SREN = 0;
  4926  0895  1298               	bcf	24,5	;volatile
  4927                           
  4928                           ;UART.c: 12: RCIF = 0;
  4929  0896  128C               	bcf	12,5	;volatile
  4930                           
  4931                           ;UART.c: 13: TXIE = 0;
  4932  0897  1683               	bsf	3,5	;RP0=1, select bank1
  4933  0898  1303               	bcf	3,6	;RP1=0, select bank1
  4934  0899  120C               	bcf	12,4	;volatile
  4935                           
  4936                           ;UART.c: 14: RCIE = 1;
  4937  089A  168C               	bsf	12,5	;volatile
  4938                           
  4939                           ;UART.c: 15: TX9 = 0;
  4940  089B  1318               	bcf	24,6	;volatile
  4941                           
  4942                           ;UART.c: 16: RX9 = 0;
  4943  089C  1283               	bcf	3,5	;RP0=0, select bank0
  4944  089D  1303               	bcf	3,6	;RP1=0, select bank0
  4945  089E  1318               	bcf	24,6	;volatile
  4946                           
  4947                           ;UART.c: 17: TXEN = 0;
  4948  089F  1683               	bsf	3,5	;RP0=1, select bank1
  4949  08A0  1303               	bcf	3,6	;RP1=0, select bank1
  4950  08A1  1298               	bcf	24,5	;volatile
  4951                           
  4952                           ;UART.c: 18: TXEN = 1;
  4953  08A2  1698               	bsf	24,5	;volatile
  4954  08A3  0008               	return
  4955  08A4                     __end_of_Init_SERIAL:	
  4956                           
  4957                           	psect	text11
  4958  08F3                     __ptext11:	
  4959 ;; *************** function _Init_MPU *****************
  4960 ;; Defined at:
  4961 ;;		line 8 in file "Init_MPU.c"
  4962 ;; Parameters:    Size  Location     Type
  4963 ;;		None
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;		None
  4966 ;; Return value:  Size  Location     Type
  4967 ;;                  1    wreg      void 
  4968 ;; Registers used:
  4969 ;;		wreg, status,2
  4970 ;; Tracked objects:
  4971 ;;		On entry : 0/0
  4972 ;;		On exit  : 0/0
  4973 ;;		Unchanged: 0/0
  4974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4975 ;;      Params:         0       0       0       0       0
  4976 ;;      Locals:         0       0       0       0       0
  4977 ;;      Temps:          0       0       0       0       0
  4978 ;;      Totals:         0       0       0       0       0
  4979 ;;Total ram usage:        0 bytes
  4980 ;; Hardware stack levels used:    1
  4981 ;; This function calls:
  4982 ;;		Nothing
  4983 ;; This function is called by:
  4984 ;;		_main
  4985 ;; This function uses a non-reentrant model
  4986 ;;
  4987                           
  4988                           
  4989                           ;psect for function _Init_MPU
  4990  08F3                     _Init_MPU:	
  4991                           
  4992                           ;Init_MPU.c: 11: PORTA = 0x00;
  4993                           
  4994                           ;incstack = 0
  4995                           ; Regs used in _Init_MPU: [wreg+status,2]
  4996  08F3  1283               	bcf	3,5	;RP0=0, select bank0
  4997  08F4  1303               	bcf	3,6	;RP1=0, select bank0
  4998  08F5  0185               	clrf	5	;volatile
  4999                           
  5000                           ;Init_MPU.c: 12: PORTB = 0x00;
  5001  08F6  0186               	clrf	6	;volatile
  5002                           
  5003                           ;Init_MPU.c: 13: PORTC = 0x00;
  5004  08F7  0187               	clrf	7	;volatile
  5005                           
  5006                           ;Init_MPU.c: 14: PORTD = 0x00;
  5007  08F8  0188               	clrf	8	;volatile
  5008                           
  5009                           ;Init_MPU.c: 15: PORTE = 0x00;
  5010  08F9  0189               	clrf	9	;volatile
  5011                           
  5012                           ;Init_MPU.c: 18: ANSEL = 0x00;
  5013  08FA  1683               	bsf	3,5	;RP0=1, select bank3
  5014  08FB  1703               	bsf	3,6	;RP1=1, select bank3
  5015  08FC  0188               	clrf	8	;volatile
  5016                           
  5017                           ;Init_MPU.c: 19: ANSELH = 0x00;
  5018  08FD  0189               	clrf	9	;volatile
  5019                           
  5020                           ;Init_MPU.c: 23: TRISA = 0b10000000;
  5021  08FE  3080               	movlw	128
  5022  08FF  1683               	bsf	3,5	;RP0=1, select bank1
  5023  0900  1303               	bcf	3,6	;RP1=0, select bank1
  5024  0901  0085               	movwf	5	;volatile
  5025                           
  5026                           ;Init_MPU.c: 24: TRISB = 0b00100000;
  5027  0902  3020               	movlw	32
  5028  0903  0086               	movwf	6	;volatile
  5029                           
  5030                           ;Init_MPU.c: 25: TRISC = 0b10011000;
  5031  0904  3098               	movlw	152
  5032  0905  0087               	movwf	7	;volatile
  5033                           
  5034                           ;Init_MPU.c: 26: TRISD = 0b00000000;
  5035  0906  0188               	clrf	8	;volatile
  5036                           
  5037                           ;Init_MPU.c: 27: TRISE = 0b00000000;
  5038  0907  0189               	clrf	9	;volatile
  5039                           
  5040                           ;Init_MPU.c: 30: PORTA = 0x00;
  5041  0908  1283               	bcf	3,5	;RP0=0, select bank0
  5042  0909  1303               	bcf	3,6	;RP1=0, select bank0
  5043  090A  0185               	clrf	5	;volatile
  5044                           
  5045                           ;Init_MPU.c: 31: PORTB = 0x00;
  5046  090B  0186               	clrf	6	;volatile
  5047                           
  5048                           ;Init_MPU.c: 32: PORTC = 0x00;
  5049  090C  0187               	clrf	7	;volatile
  5050                           
  5051                           ;Init_MPU.c: 33: PORTD = 0x00;
  5052  090D  0188               	clrf	8	;volatile
  5053                           
  5054                           ;Init_MPU.c: 34: PORTE = 0x00;
  5055  090E  0189               	clrf	9	;volatile
  5056  090F  0008               	return
  5057  0910                     __end_of_Init_MPU:	
  5058                           
  5059                           	psect	text12
  5060  09EA                     __ptext12:	
  5061 ;; *************** function _Init_I2C_M *****************
  5062 ;; Defined at:
  5063 ;;		line 8 in file "I2C.c"
  5064 ;; Parameters:    Size  Location     Type
  5065 ;;  c               4    0[BANK0 ] const unsigned long 
  5066 ;; Auto vars:     Size  Location     Type
  5067 ;;		None
  5068 ;; Return value:  Size  Location     Type
  5069 ;;                  1    wreg      void 
  5070 ;; Registers used:
  5071 ;;		wreg, status,2, status,0, pclath, cstack
  5072 ;; Tracked objects:
  5073 ;;		On entry : 0/0
  5074 ;;		On exit  : 0/0
  5075 ;;		Unchanged: 0/0
  5076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5077 ;;      Params:         0       4       0       0       0
  5078 ;;      Locals:         0       0       0       0       0
  5079 ;;      Temps:          0       4       0       0       0
  5080 ;;      Totals:         0       8       0       0       0
  5081 ;;Total ram usage:        8 bytes
  5082 ;; Hardware stack levels used:    1
  5083 ;; Hardware stack levels required when called:    1
  5084 ;; This function calls:
  5085 ;;		___lldiv
  5086 ;; This function is called by:
  5087 ;;		_main
  5088 ;; This function uses a non-reentrant model
  5089 ;;
  5090                           
  5091                           
  5092                           ;psect for function _Init_I2C_M
  5093  09EA                     _Init_I2C_M:	
  5094                           
  5095                           ;I2C.c: 9: SSPCON = 0b00101000;
  5096                           
  5097                           ;incstack = 0
  5098                           ; Regs used in _Init_I2C_M: [wreg+status,2+status,0+pclath+cstack]
  5099  09EA  3028               	movlw	40
  5100  09EB  1283               	bcf	3,5	;RP0=0, select bank0
  5101  09EC  1303               	bcf	3,6	;RP1=0, select bank0
  5102  09ED  0094               	movwf	20	;volatile
  5103                           
  5104                           ;I2C.c: 10: SSPCON2 = 0;
  5105  09EE  1683               	bsf	3,5	;RP0=1, select bank1
  5106  09EF  1303               	bcf	3,6	;RP1=0, select bank1
  5107  09F0  0191               	clrf	17	;volatile
  5108                           
  5109                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  5110  09F1  1283               	bcf	3,5	;RP0=0, select bank0
  5111  09F2  1303               	bcf	3,6	;RP1=0, select bank0
  5112  09F3  0820               	movf	Init_I2C_M@c,w
  5113  09F4  00A4               	movwf	??_Init_I2C_M
  5114  09F5  0821               	movf	Init_I2C_M@c+1,w
  5115  09F6  00A5               	movwf	??_Init_I2C_M+1
  5116  09F7  0822               	movf	Init_I2C_M@c+2,w
  5117  09F8  00A6               	movwf	??_Init_I2C_M+2
  5118  09F9  0823               	movf	Init_I2C_M@c+3,w
  5119  09FA  00A7               	movwf	??_Init_I2C_M+3
  5120  09FB  3002               	movlw	2
  5121  09FC                     u3185:	
  5122  09FC  1003               	clrc
  5123  09FD  0DA4               	rlf	??_Init_I2C_M,f
  5124  09FE  0DA5               	rlf	??_Init_I2C_M+1,f
  5125  09FF  0DA6               	rlf	??_Init_I2C_M+2,f
  5126  0A00  0DA7               	rlf	??_Init_I2C_M+3,f
  5127  0A01  3EFF               	addlw	-1
  5128  0A02  1D03               	skipz
  5129  0A03  29FC               	goto	u3185
  5130  0A04  0827               	movf	??_Init_I2C_M+3,w
  5131  0A05  00F3               	movwf	___lldiv@divisor+3
  5132  0A06  0826               	movf	??_Init_I2C_M+2,w
  5133  0A07  00F2               	movwf	___lldiv@divisor+2
  5134  0A08  0825               	movf	??_Init_I2C_M+1,w
  5135  0A09  00F1               	movwf	___lldiv@divisor+1
  5136  0A0A  0824               	movf	??_Init_I2C_M,w
  5137  0A0B  00F0               	movwf	___lldiv@divisor
  5138  0A0C  3000               	movlw	0
  5139  0A0D  00F7               	movwf	___lldiv@dividend+3
  5140  0A0E  3098               	movlw	152
  5141  0A0F  00F6               	movwf	___lldiv@dividend+2
  5142  0A10  3096               	movlw	150
  5143  0A11  00F5               	movwf	___lldiv@dividend+1
  5144  0A12  3080               	movlw	128
  5145  0A13  00F4               	movwf	___lldiv@dividend
  5146  0A14  120A  158A  23AC   	fcall	___lldiv
  5147  0A17  0870               	movf	?___lldiv,w
  5148  0A18  3EFF               	addlw	255
  5149  0A19  1683               	bsf	3,5	;RP0=1, select bank1
  5150  0A1A  1303               	bcf	3,6	;RP1=0, select bank1
  5151  0A1B  0093               	movwf	19	;volatile
  5152                           
  5153                           ;I2C.c: 12: SSPSTAT = 0;
  5154  0A1C  0194               	clrf	20	;volatile
  5155  0A1D  0008               	return
  5156  0A1E                     __end_of_Init_I2C_M:	
  5157                           
  5158                           	psect	text13
  5159  0BAC                     __ptext13:	
  5160 ;; *************** function ___lldiv *****************
  5161 ;; Defined at:
  5162 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  5163 ;; Parameters:    Size  Location     Type
  5164 ;;  divisor         4    0[COMMON] unsigned long 
  5165 ;;  dividend        4    4[COMMON] unsigned long 
  5166 ;; Auto vars:     Size  Location     Type
  5167 ;;  quotient        4    9[COMMON] unsigned long 
  5168 ;;  counter         1   13[COMMON] unsigned char 
  5169 ;; Return value:  Size  Location     Type
  5170 ;;                  4    0[COMMON] unsigned long 
  5171 ;; Registers used:
  5172 ;;		wreg, status,2, status,0
  5173 ;; Tracked objects:
  5174 ;;		On entry : 0/0
  5175 ;;		On exit  : 0/0
  5176 ;;		Unchanged: 0/0
  5177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5178 ;;      Params:         8       0       0       0       0
  5179 ;;      Locals:         5       0       0       0       0
  5180 ;;      Temps:          1       0       0       0       0
  5181 ;;      Totals:        14       0       0       0       0
  5182 ;;Total ram usage:       14 bytes
  5183 ;; Hardware stack levels used:    1
  5184 ;; This function calls:
  5185 ;;		Nothing
  5186 ;; This function is called by:
  5187 ;;		_Init_I2C_M
  5188 ;; This function uses a non-reentrant model
  5189 ;;
  5190                           
  5191                           
  5192                           ;psect for function ___lldiv
  5193  0BAC                     ___lldiv:	
  5194                           
  5195                           ;incstack = 0
  5196                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5197  0BAC  3000               	movlw	0
  5198  0BAD  00FC               	movwf	___lldiv@quotient+3
  5199  0BAE  3000               	movlw	0
  5200  0BAF  00FB               	movwf	___lldiv@quotient+2
  5201  0BB0  3000               	movlw	0
  5202  0BB1  00FA               	movwf	___lldiv@quotient+1
  5203  0BB2  3000               	movlw	0
  5204  0BB3  00F9               	movwf	___lldiv@quotient
  5205  0BB4  0873               	movf	___lldiv@divisor+3,w
  5206  0BB5  0472               	iorwf	___lldiv@divisor+2,w
  5207  0BB6  0471               	iorwf	___lldiv@divisor+1,w
  5208  0BB7  0470               	iorwf	___lldiv@divisor,w
  5209  0BB8  1903               	skipnz
  5210  0BB9  2C01               	goto	l3305
  5211  0BBA  01FD               	clrf	___lldiv@counter
  5212  0BBB  0AFD               	incf	___lldiv@counter,f
  5213  0BBC                     l3291:	
  5214  0BBC  1BF3               	btfsc	___lldiv@divisor+3,7
  5215  0BBD  2BCC               	goto	l3293
  5216  0BBE  3001               	movlw	1
  5217  0BBF  00F8               	movwf	??___lldiv
  5218  0BC0                     u3035:	
  5219  0BC0  1003               	clrc
  5220  0BC1  0DF0               	rlf	___lldiv@divisor,f
  5221  0BC2  0DF1               	rlf	___lldiv@divisor+1,f
  5222  0BC3  0DF2               	rlf	___lldiv@divisor+2,f
  5223  0BC4  0DF3               	rlf	___lldiv@divisor+3,f
  5224  0BC5  0BF8               	decfsz	??___lldiv,f
  5225  0BC6  2BC0               	goto	u3035
  5226  0BC7  3001               	movlw	1
  5227  0BC8  00F8               	movwf	??___lldiv
  5228  0BC9  0878               	movf	??___lldiv,w
  5229  0BCA  07FD               	addwf	___lldiv@counter,f
  5230  0BCB  2BBC               	goto	l3291
  5231  0BCC                     l3293:	
  5232  0BCC  3001               	movlw	1
  5233  0BCD  00F8               	movwf	??___lldiv
  5234  0BCE                     u3055:	
  5235  0BCE  1003               	clrc
  5236  0BCF  0DF9               	rlf	___lldiv@quotient,f
  5237  0BD0  0DFA               	rlf	___lldiv@quotient+1,f
  5238  0BD1  0DFB               	rlf	___lldiv@quotient+2,f
  5239  0BD2  0DFC               	rlf	___lldiv@quotient+3,f
  5240  0BD3  0BF8               	decfsz	??___lldiv,f
  5241  0BD4  2BCE               	goto	u3055
  5242  0BD5  0873               	movf	___lldiv@divisor+3,w
  5243  0BD6  0277               	subwf	___lldiv@dividend+3,w
  5244  0BD7  1D03               	skipz
  5245  0BD8  2BE3               	goto	u3065
  5246  0BD9  0872               	movf	___lldiv@divisor+2,w
  5247  0BDA  0276               	subwf	___lldiv@dividend+2,w
  5248  0BDB  1D03               	skipz
  5249  0BDC  2BE3               	goto	u3065
  5250  0BDD  0871               	movf	___lldiv@divisor+1,w
  5251  0BDE  0275               	subwf	___lldiv@dividend+1,w
  5252  0BDF  1D03               	skipz
  5253  0BE0  2BE3               	goto	u3065
  5254  0BE1  0870               	movf	___lldiv@divisor,w
  5255  0BE2  0274               	subwf	___lldiv@dividend,w
  5256  0BE3                     u3065:	
  5257  0BE3  1C03               	skipc
  5258  0BE4  2BF4               	goto	l3301
  5259  0BE5  0870               	movf	___lldiv@divisor,w
  5260  0BE6  02F4               	subwf	___lldiv@dividend,f
  5261  0BE7  0871               	movf	___lldiv@divisor+1,w
  5262  0BE8  1C03               	skipc
  5263  0BE9  0F71               	incfsz	___lldiv@divisor+1,w
  5264  0BEA  02F5               	subwf	___lldiv@dividend+1,f
  5265  0BEB  0872               	movf	___lldiv@divisor+2,w
  5266  0BEC  1C03               	skipc
  5267  0BED  0F72               	incfsz	___lldiv@divisor+2,w
  5268  0BEE  02F6               	subwf	___lldiv@dividend+2,f
  5269  0BEF  0873               	movf	___lldiv@divisor+3,w
  5270  0BF0  1C03               	skipc
  5271  0BF1  0F73               	incfsz	___lldiv@divisor+3,w
  5272  0BF2  02F7               	subwf	___lldiv@dividend+3,f
  5273  0BF3  1479               	bsf	___lldiv@quotient,0
  5274  0BF4                     l3301:	
  5275  0BF4  3001               	movlw	1
  5276  0BF5                     u3075:	
  5277  0BF5  1003               	clrc
  5278  0BF6  0CF3               	rrf	___lldiv@divisor+3,f
  5279  0BF7  0CF2               	rrf	___lldiv@divisor+2,f
  5280  0BF8  0CF1               	rrf	___lldiv@divisor+1,f
  5281  0BF9  0CF0               	rrf	___lldiv@divisor,f
  5282  0BFA  3EFF               	addlw	-1
  5283  0BFB  1D03               	skipz
  5284  0BFC  2BF5               	goto	u3075
  5285  0BFD  3001               	movlw	1
  5286  0BFE  02FD               	subwf	___lldiv@counter,f
  5287  0BFF  1D03               	btfss	3,2
  5288  0C00  2BCC               	goto	l3293
  5289  0C01                     l3305:	
  5290  0C01  087C               	movf	___lldiv@quotient+3,w
  5291  0C02  00F3               	movwf	?___lldiv+3
  5292  0C03  087B               	movf	___lldiv@quotient+2,w
  5293  0C04  00F2               	movwf	?___lldiv+2
  5294  0C05  087A               	movf	___lldiv@quotient+1,w
  5295  0C06  00F1               	movwf	?___lldiv+1
  5296  0C07  0879               	movf	___lldiv@quotient,w
  5297  0C08  00F0               	movwf	?___lldiv
  5298  0C09  0008               	return
  5299  0C0A                     __end_of___lldiv:	
  5300                           
  5301                           	psect	text14
  5302  0990                     __ptext14:	
  5303 ;; *************** function _FMTX *****************
  5304 ;; Defined at:
  5305 ;;		line 270 in file "FMCW.c"
  5306 ;; Parameters:    Size  Location     Type
  5307 ;;  Nref            2   60[BANK0 ] int 
  5308 ;;  Nprg            2   62[BANK0 ] PTR int 
  5309 ;;		 -> RAM(512), main@FMTX_Nprg(10), FMTX_Nprg(10), 
  5310 ;; Auto vars:     Size  Location     Type
  5311 ;;  fmtx            2   64[BANK0 ] int 
  5312 ;; Return value:  Size  Location     Type
  5313 ;;                  1    wreg      void 
  5314 ;; Registers used:
  5315 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5316 ;; Tracked objects:
  5317 ;;		On entry : 0/0
  5318 ;;		On exit  : 0/0
  5319 ;;		Unchanged: 0/0
  5320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5321 ;;      Params:         0       4       0       0       0
  5322 ;;      Locals:         0       2       0       0       0
  5323 ;;      Temps:          0       0       0       0       0
  5324 ;;      Totals:         0       6       0       0       0
  5325 ;;Total ram usage:        6 bytes
  5326 ;; Hardware stack levels used:    1
  5327 ;; Hardware stack levels required when called:    3
  5328 ;; This function calls:
  5329 ;;		_OPINIT
  5330 ;;		_OUTFQ
  5331 ;;		_RFDOUT
  5332 ;; This function is called by:
  5333 ;;		_main
  5334 ;;		_SetPLL
  5335 ;; This function uses a non-reentrant model
  5336 ;;
  5337                           
  5338                           
  5339                           ;psect for function _FMTX
  5340  0990                     _FMTX:	
  5341                           
  5342                           ;FMCW.c: 271: int fmtx = 1;
  5343                           
  5344                           ;incstack = 0
  5345                           ; Regs used in _FMTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5346  0990  3001               	movlw	1
  5347  0991  1283               	bcf	3,5	;RP0=0, select bank0
  5348  0992  1303               	bcf	3,6	;RP1=0, select bank0
  5349  0993  00E0               	movwf	FMTX@fmtx
  5350  0994  3000               	movlw	0
  5351  0995  00E1               	movwf	FMTX@fmtx+1
  5352                           
  5353                           ;FMCW.c: 272: OPINIT(fmtx);
  5354  0996  0861               	movf	FMTX@fmtx+1,w
  5355  0997  00F5               	movwf	OPINIT@fmcwtxrx+1
  5356  0998  0860               	movf	FMTX@fmtx,w
  5357  0999  00F4               	movwf	OPINIT@fmcwtxrx
  5358  099A  120A  158A  24D0  120A  158A  	fcall	_OPINIT
  5359                           
  5360                           ;FMCW.c: 273: RFDOUT(fmtx, Nref);
  5361  099F  1283               	bcf	3,5	;RP0=0, select bank0
  5362  09A0  1303               	bcf	3,6	;RP1=0, select bank0
  5363  09A1  0861               	movf	FMTX@fmtx+1,w
  5364  09A2  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5365  09A3  0860               	movf	FMTX@fmtx,w
  5366  09A4  00F9               	movwf	RFDOUT@fmcwtxrx
  5367  09A5  085D               	movf	FMTX@Nref+1,w
  5368  09A6  00FC               	movwf	RFDOUT@Nref+1
  5369  09A7  085C               	movf	FMTX@Nref,w
  5370  09A8  00FB               	movwf	RFDOUT@Nref
  5371  09A9  120A  158A  254D  120A  158A  	fcall	_RFDOUT
  5372                           
  5373                           ;FMCW.c: 274: OUTFQ(fmtx, Nprg);
  5374  09AE  1283               	bcf	3,5	;RP0=0, select bank0
  5375  09AF  1303               	bcf	3,6	;RP1=0, select bank0
  5376  09B0  0861               	movf	FMTX@fmtx+1,w
  5377  09B1  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5378  09B2  0860               	movf	FMTX@fmtx,w
  5379  09B3  00F9               	movwf	OUTFQ@fmcwtxrx
  5380  09B4  085E               	movf	FMTX@Nprg,w
  5381  09B5  00FB               	movwf	OUTFQ@Nprg
  5382  09B6  085F               	movf	FMTX@Nprg+1,w
  5383  09B7  00FC               	movwf	OUTFQ@Nprg+1
  5384  09B8  120A  118A  20AC   	fcall	_OUTFQ
  5385  09BB  0008               	return
  5386  09BC                     __end_of_FMTX:	
  5387                           
  5388                           	psect	text15
  5389  0964                     __ptext15:	
  5390 ;; *************** function _FMRX *****************
  5391 ;; Defined at:
  5392 ;;		line 298 in file "FMCW.c"
  5393 ;; Parameters:    Size  Location     Type
  5394 ;;  Nref            2   60[BANK0 ] int 
  5395 ;;  Nprg            2   62[BANK0 ] PTR int 
  5396 ;;		 -> RAM(512), main@FMRX_Nprg(10), FMRX_Nprg(10), 
  5397 ;; Auto vars:     Size  Location     Type
  5398 ;;  fmrx            2   64[BANK0 ] int 
  5399 ;; Return value:  Size  Location     Type
  5400 ;;                  1    wreg      void 
  5401 ;; Registers used:
  5402 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5403 ;; Tracked objects:
  5404 ;;		On entry : 0/0
  5405 ;;		On exit  : 0/0
  5406 ;;		Unchanged: 0/0
  5407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5408 ;;      Params:         0       4       0       0       0
  5409 ;;      Locals:         0       2       0       0       0
  5410 ;;      Temps:          0       0       0       0       0
  5411 ;;      Totals:         0       6       0       0       0
  5412 ;;Total ram usage:        6 bytes
  5413 ;; Hardware stack levels used:    1
  5414 ;; Hardware stack levels required when called:    3
  5415 ;; This function calls:
  5416 ;;		_OPINIT
  5417 ;;		_OUTFQ
  5418 ;;		_RFDOUT
  5419 ;; This function is called by:
  5420 ;;		_main
  5421 ;;		_SetPLL
  5422 ;; This function uses a non-reentrant model
  5423 ;;
  5424                           
  5425                           
  5426                           ;psect for function _FMRX
  5427  0964                     _FMRX:	
  5428                           
  5429                           ;FMCW.c: 299: int fmrx = 3;
  5430                           
  5431                           ;incstack = 0
  5432                           ; Regs used in _FMRX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5433  0964  3003               	movlw	3
  5434  0965  1283               	bcf	3,5	;RP0=0, select bank0
  5435  0966  1303               	bcf	3,6	;RP1=0, select bank0
  5436  0967  00E0               	movwf	FMRX@fmrx
  5437  0968  3000               	movlw	0
  5438  0969  00E1               	movwf	FMRX@fmrx+1
  5439                           
  5440                           ;FMCW.c: 300: OPINIT(fmrx);
  5441  096A  0861               	movf	FMRX@fmrx+1,w
  5442  096B  00F5               	movwf	OPINIT@fmcwtxrx+1
  5443  096C  0860               	movf	FMRX@fmrx,w
  5444  096D  00F4               	movwf	OPINIT@fmcwtxrx
  5445  096E  120A  158A  24D0  120A  158A  	fcall	_OPINIT
  5446                           
  5447                           ;FMCW.c: 301: RFDOUT(fmrx, Nref);
  5448  0973  1283               	bcf	3,5	;RP0=0, select bank0
  5449  0974  1303               	bcf	3,6	;RP1=0, select bank0
  5450  0975  0861               	movf	FMRX@fmrx+1,w
  5451  0976  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5452  0977  0860               	movf	FMRX@fmrx,w
  5453  0978  00F9               	movwf	RFDOUT@fmcwtxrx
  5454  0979  085D               	movf	FMRX@Nref+1,w
  5455  097A  00FC               	movwf	RFDOUT@Nref+1
  5456  097B  085C               	movf	FMRX@Nref,w
  5457  097C  00FB               	movwf	RFDOUT@Nref
  5458  097D  120A  158A  254D  120A  158A  	fcall	_RFDOUT
  5459                           
  5460                           ;FMCW.c: 302: OUTFQ(fmrx, Nprg);
  5461  0982  1283               	bcf	3,5	;RP0=0, select bank0
  5462  0983  1303               	bcf	3,6	;RP1=0, select bank0
  5463  0984  0861               	movf	FMRX@fmrx+1,w
  5464  0985  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5465  0986  0860               	movf	FMRX@fmrx,w
  5466  0987  00F9               	movwf	OUTFQ@fmcwtxrx
  5467  0988  085E               	movf	FMRX@Nprg,w
  5468  0989  00FB               	movwf	OUTFQ@Nprg
  5469  098A  085F               	movf	FMRX@Nprg+1,w
  5470  098B  00FC               	movwf	OUTFQ@Nprg+1
  5471  098C  120A  118A  20AC   	fcall	_OUTFQ
  5472  098F  0008               	return
  5473  0990                     __end_of_FMRX:	
  5474                           
  5475                           	psect	text16
  5476  0B4F                     __ptext16:	
  5477 ;; *************** function _EEPROM_Write *****************
  5478 ;; Defined at:
  5479 ;;		line 51 in file "I2C.c"
  5480 ;; Parameters:    Size  Location     Type
  5481 ;;  EEPROM_addre    1    wreg     unsigned char 
  5482 ;;  high_address    1    2[COMMON] unsigned char 
  5483 ;;  low_address     1    3[COMMON] unsigned char 
  5484 ;;  data            1    4[COMMON] PTR unsigned char 
  5485 ;;		 -> NULL(0), dData(16), 
  5486 ;; Auto vars:     Size  Location     Type
  5487 ;;  EEPROM_addre    1    8[COMMON] unsigned char 
  5488 ;;  Address         1    9[COMMON] unsigned char 
  5489 ;; Return value:  Size  Location     Type
  5490 ;;                  1    wreg      void 
  5491 ;; Registers used:
  5492 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5493 ;; Tracked objects:
  5494 ;;		On entry : 0/0
  5495 ;;		On exit  : 0/0
  5496 ;;		Unchanged: 0/0
  5497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5498 ;;      Params:         3       0       0       0       0
  5499 ;;      Locals:         2       0       0       0       0
  5500 ;;      Temps:          3       0       0       0       0
  5501 ;;      Totals:         8       0       0       0       0
  5502 ;;Total ram usage:        8 bytes
  5503 ;; Hardware stack levels used:    1
  5504 ;; Hardware stack levels required when called:    2
  5505 ;; This function calls:
  5506 ;;		_I2C_Master_Start
  5507 ;;		_I2C_Master_Stop
  5508 ;;		_I2C_Master_Write
  5509 ;; This function is called by:
  5510 ;;		_main
  5511 ;; This function uses a non-reentrant model
  5512 ;;
  5513                           
  5514                           
  5515                           ;psect for function _EEPROM_Write
  5516  0B4F                     _EEPROM_Write:	
  5517                           
  5518                           ;incstack = 0
  5519                           ; Regs used in _EEPROM_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5520                           ;EEPROM_Write@EEPROM_address stored from wreg
  5521  0B4F  00F8               	movwf	EEPROM_Write@EEPROM_address
  5522                           
  5523                           ;I2C.c: 52: UBYTE Address = EEPROM_address << 1;
  5524  0B50  0878               	movf	EEPROM_Write@EEPROM_address,w
  5525  0B51  00F5               	movwf	??_EEPROM_Write
  5526  0B52  0775               	addwf	??_EEPROM_Write,w
  5527  0B53  00F6               	movwf	??_EEPROM_Write+1
  5528  0B54  0876               	movf	??_EEPROM_Write+1,w
  5529  0B55  00F9               	movwf	EEPROM_Write@Address
  5530                           
  5531                           ;I2C.c: 55: I2C_Master_Start();
  5532  0B56  120A  158A  2024  120A  158A  	fcall	_I2C_Master_Start
  5533                           
  5534                           ;I2C.c: 56: I2C_Master_Write(Address);
  5535  0B5B  0879               	movf	EEPROM_Write@Address,w
  5536  0B5C  00F5               	movwf	??_EEPROM_Write
  5537  0B5D  01F6               	clrf	??_EEPROM_Write+1
  5538  0B5E  0875               	movf	??_EEPROM_Write,w
  5539  0B5F  00F0               	movwf	I2C_Master_Write@d
  5540  0B60  0876               	movf	??_EEPROM_Write+1,w
  5541  0B61  00F1               	movwf	I2C_Master_Write@d+1
  5542  0B62  120A  158A  2032  120A  158A  	fcall	_I2C_Master_Write
  5543                           
  5544                           ;I2C.c: 57: I2C_Master_Write(high_address);
  5545  0B67  0872               	movf	EEPROM_Write@high_address,w
  5546  0B68  00F5               	movwf	??_EEPROM_Write
  5547  0B69  01F6               	clrf	??_EEPROM_Write+1
  5548  0B6A  0875               	movf	??_EEPROM_Write,w
  5549  0B6B  00F0               	movwf	I2C_Master_Write@d
  5550  0B6C  0876               	movf	??_EEPROM_Write+1,w
  5551  0B6D  00F1               	movwf	I2C_Master_Write@d+1
  5552  0B6E  120A  158A  2032  120A  158A  	fcall	_I2C_Master_Write
  5553                           
  5554                           ;I2C.c: 58: I2C_Master_Write(low_address);
  5555  0B73  0873               	movf	EEPROM_Write@low_address,w
  5556  0B74  00F5               	movwf	??_EEPROM_Write
  5557  0B75  01F6               	clrf	??_EEPROM_Write+1
  5558  0B76  0875               	movf	??_EEPROM_Write,w
  5559  0B77  00F0               	movwf	I2C_Master_Write@d
  5560  0B78  0876               	movf	??_EEPROM_Write+1,w
  5561  0B79  00F1               	movwf	I2C_Master_Write@d+1
  5562  0B7A  120A  158A  2032  120A  158A  	fcall	_I2C_Master_Write
  5563  0B7F                     l3489:	
  5564                           ;I2C.c: 59: while(*data){
  5565                           
  5566  0B7F  0874               	movf	EEPROM_Write@data,w
  5567  0B80  0084               	movwf	4
  5568  0B81  1783               	bsf	3,7	;select IRP bank2
  5569  0B82  0800               	movf	0,w
  5570  0B83  1903               	btfsc	3,2
  5571  0B84  2B99               	goto	l3491
  5572                           
  5573                           ;I2C.c: 60: I2C_Master_Write(*data);
  5574  0B85  0874               	movf	EEPROM_Write@data,w
  5575  0B86  0084               	movwf	4
  5576  0B87  1783               	bsf	3,7	;select IRP bank2
  5577  0B88  0800               	movf	0,w
  5578  0B89  00F5               	movwf	??_EEPROM_Write
  5579  0B8A  01F6               	clrf	??_EEPROM_Write+1
  5580  0B8B  0875               	movf	??_EEPROM_Write,w
  5581  0B8C  00F0               	movwf	I2C_Master_Write@d
  5582  0B8D  0876               	movf	??_EEPROM_Write+1,w
  5583  0B8E  00F1               	movwf	I2C_Master_Write@d+1
  5584  0B8F  120A  158A  2032  120A  158A  	fcall	_I2C_Master_Write
  5585                           
  5586                           ;I2C.c: 61: ++data;
  5587  0B94  3001               	movlw	1
  5588  0B95  00F5               	movwf	??_EEPROM_Write
  5589  0B96  0875               	movf	??_EEPROM_Write,w
  5590  0B97  07F4               	addwf	EEPROM_Write@data,f
  5591  0B98  2B7F               	goto	l3489
  5592  0B99                     l3491:	
  5593                           
  5594                           ;I2C.c: 62: }
  5595                           ;I2C.c: 63: I2C_Master_Stop();
  5596  0B99  120A  158A  202B  120A  158A  	fcall	_I2C_Master_Stop
  5597                           
  5598                           ;I2C.c: 64: _delay((unsigned long)((200)*(10000000/4000.0)));
  5599  0B9E  3003               	movlw	3
  5600  0B9F  00F7               	movwf	??_EEPROM_Write+2
  5601  0BA0  308A               	movlw	138
  5602  0BA1  00F6               	movwf	??_EEPROM_Write+1
  5603  0BA2  3056               	movlw	86
  5604  0BA3  00F5               	movwf	??_EEPROM_Write
  5605  0BA4                     u3707:	
  5606  0BA4  0BF5               	decfsz	??_EEPROM_Write,f
  5607  0BA5  2BA4               	goto	u3707
  5608  0BA6  0BF6               	decfsz	??_EEPROM_Write+1,f
  5609  0BA7  2BA4               	goto	u3707
  5610  0BA8  0BF7               	decfsz	??_EEPROM_Write+2,f
  5611  0BA9  2BA4               	goto	u3707
  5612  0BAA  2BAB               	nop2
  5613  0BAB  0008               	return
  5614  0BAC                     __end_of_EEPROM_Write:	
  5615                           
  5616                           	psect	text17
  5617  0832                     __ptext17:	
  5618 ;; *************** function _I2C_Master_Write *****************
  5619 ;; Defined at:
  5620 ;;		line 34 in file "I2C.c"
  5621 ;; Parameters:    Size  Location     Type
  5622 ;;  d               2    0[COMMON] unsigned int 
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;		None
  5625 ;; Return value:  Size  Location     Type
  5626 ;;                  1    wreg      void 
  5627 ;; Registers used:
  5628 ;;		wreg, status,2, status,0, pclath, cstack
  5629 ;; Tracked objects:
  5630 ;;		On entry : 0/0
  5631 ;;		On exit  : 0/0
  5632 ;;		Unchanged: 0/0
  5633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5634 ;;      Params:         2       0       0       0       0
  5635 ;;      Locals:         0       0       0       0       0
  5636 ;;      Temps:          0       0       0       0       0
  5637 ;;      Totals:         2       0       0       0       0
  5638 ;;Total ram usage:        2 bytes
  5639 ;; Hardware stack levels used:    1
  5640 ;; Hardware stack levels required when called:    1
  5641 ;; This function calls:
  5642 ;;		_I2C_Master_Wait
  5643 ;; This function is called by:
  5644 ;;		_EEPROM_Write
  5645 ;;		_EEPROM_Read
  5646 ;; This function uses a non-reentrant model
  5647 ;;
  5648                           
  5649                           
  5650                           ;psect for function _I2C_Master_Write
  5651  0832                     _I2C_Master_Write:	
  5652                           
  5653                           ;I2C.c: 35: I2C_Master_Wait();
  5654                           
  5655                           ;incstack = 0
  5656                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5657  0832  120A  158A  204A   	fcall	_I2C_Master_Wait
  5658                           
  5659                           ;I2C.c: 36: SSPBUF = d;
  5660  0835  0870               	movf	I2C_Master_Write@d,w
  5661  0836  1283               	bcf	3,5	;RP0=0, select bank0
  5662  0837  1303               	bcf	3,6	;RP1=0, select bank0
  5663  0838  0093               	movwf	19	;volatile
  5664  0839  0008               	return
  5665  083A                     __end_of_I2C_Master_Write:	
  5666                           
  5667                           	psect	text18
  5668  082B                     __ptext18:	
  5669 ;; *************** function _I2C_Master_Stop *****************
  5670 ;; Defined at:
  5671 ;;		line 29 in file "I2C.c"
  5672 ;; Parameters:    Size  Location     Type
  5673 ;;		None
  5674 ;; Auto vars:     Size  Location     Type
  5675 ;;		None
  5676 ;; Return value:  Size  Location     Type
  5677 ;;                  1    wreg      void 
  5678 ;; Registers used:
  5679 ;;		wreg, status,2, status,0, pclath, cstack
  5680 ;; Tracked objects:
  5681 ;;		On entry : 0/0
  5682 ;;		On exit  : 0/0
  5683 ;;		Unchanged: 0/0
  5684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5685 ;;      Params:         0       0       0       0       0
  5686 ;;      Locals:         0       0       0       0       0
  5687 ;;      Temps:          0       0       0       0       0
  5688 ;;      Totals:         0       0       0       0       0
  5689 ;;Total ram usage:        0 bytes
  5690 ;; Hardware stack levels used:    1
  5691 ;; Hardware stack levels required when called:    1
  5692 ;; This function calls:
  5693 ;;		_I2C_Master_Wait
  5694 ;; This function is called by:
  5695 ;;		_EEPROM_Write
  5696 ;;		_EEPROM_Read
  5697 ;; This function uses a non-reentrant model
  5698 ;;
  5699                           
  5700                           
  5701                           ;psect for function _I2C_Master_Stop
  5702  082B                     _I2C_Master_Stop:	
  5703                           
  5704                           ;I2C.c: 30: I2C_Master_Wait();
  5705                           
  5706                           ;incstack = 0
  5707                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5708  082B  120A  158A  204A   	fcall	_I2C_Master_Wait
  5709                           
  5710                           ;I2C.c: 31: PEN = 1;
  5711  082E  1683               	bsf	3,5	;RP0=1, select bank1
  5712  082F  1303               	bcf	3,6	;RP1=0, select bank1
  5713  0830  1511               	bsf	17,2	;volatile
  5714  0831  0008               	return
  5715  0832                     __end_of_I2C_Master_Stop:	
  5716                           
  5717                           	psect	text19
  5718  0824                     __ptext19:	
  5719 ;; *************** function _I2C_Master_Start *****************
  5720 ;; Defined at:
  5721 ;;		line 19 in file "I2C.c"
  5722 ;; Parameters:    Size  Location     Type
  5723 ;;		None
  5724 ;; Auto vars:     Size  Location     Type
  5725 ;;		None
  5726 ;; Return value:  Size  Location     Type
  5727 ;;                  1    wreg      void 
  5728 ;; Registers used:
  5729 ;;		wreg, status,2, status,0, pclath, cstack
  5730 ;; Tracked objects:
  5731 ;;		On entry : 0/0
  5732 ;;		On exit  : 0/0
  5733 ;;		Unchanged: 0/0
  5734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5735 ;;      Params:         0       0       0       0       0
  5736 ;;      Locals:         0       0       0       0       0
  5737 ;;      Temps:          0       0       0       0       0
  5738 ;;      Totals:         0       0       0       0       0
  5739 ;;Total ram usage:        0 bytes
  5740 ;; Hardware stack levels used:    1
  5741 ;; Hardware stack levels required when called:    1
  5742 ;; This function calls:
  5743 ;;		_I2C_Master_Wait
  5744 ;; This function is called by:
  5745 ;;		_EEPROM_Write
  5746 ;;		_EEPROM_Read
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749                           
  5750                           
  5751                           ;psect for function _I2C_Master_Start
  5752  0824                     _I2C_Master_Start:	
  5753                           
  5754                           ;I2C.c: 20: I2C_Master_Wait();
  5755                           
  5756                           ;incstack = 0
  5757                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5758  0824  120A  158A  204A   	fcall	_I2C_Master_Wait
  5759                           
  5760                           ;I2C.c: 21: SEN = 1;
  5761  0827  1683               	bsf	3,5	;RP0=1, select bank1
  5762  0828  1303               	bcf	3,6	;RP1=0, select bank1
  5763  0829  1411               	bsf	17,0	;volatile
  5764  082A  0008               	return
  5765  082B                     __end_of_I2C_Master_Start:	
  5766                           
  5767                           	psect	text20
  5768  084A                     __ptext20:	
  5769 ;; *************** function _I2C_Master_Wait *****************
  5770 ;; Defined at:
  5771 ;;		line 15 in file "I2C.c"
  5772 ;; Parameters:    Size  Location     Type
  5773 ;;		None
  5774 ;; Auto vars:     Size  Location     Type
  5775 ;;		None
  5776 ;; Return value:  Size  Location     Type
  5777 ;;                  1    wreg      void 
  5778 ;; Registers used:
  5779 ;;		wreg, status,2
  5780 ;; Tracked objects:
  5781 ;;		On entry : 0/0
  5782 ;;		On exit  : 0/0
  5783 ;;		Unchanged: 0/0
  5784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5785 ;;      Params:         0       0       0       0       0
  5786 ;;      Locals:         0       0       0       0       0
  5787 ;;      Temps:          0       0       0       0       0
  5788 ;;      Totals:         0       0       0       0       0
  5789 ;;Total ram usage:        0 bytes
  5790 ;; Hardware stack levels used:    1
  5791 ;; This function calls:
  5792 ;;		Nothing
  5793 ;; This function is called by:
  5794 ;;		_I2C_Master_Start
  5795 ;;		_I2C_Master_Stop
  5796 ;;		_I2C_Master_Write
  5797 ;;		_I2C_Master_RepeatedStart
  5798 ;;		_I2C_Master_Read
  5799 ;; This function uses a non-reentrant model
  5800 ;;
  5801                           
  5802                           
  5803                           ;psect for function _I2C_Master_Wait
  5804  084A                     _I2C_Master_Wait:	
  5805  084A                     l491:	
  5806                           ;I2C.c: 16: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5807                           
  5808                           ;incstack = 0
  5809                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5810                           
  5811  084A  1683               	bsf	3,5	;RP0=1, select bank1
  5812  084B  1303               	bcf	3,6	;RP1=0, select bank1
  5813  084C  1914               	btfsc	20,2	;volatile
  5814  084D  284A               	goto	l491
  5815  084E  0811               	movf	17,w	;volatile
  5816  084F  391F               	andlw	31
  5817  0850  1903               	btfsc	3,2
  5818  0851  0008               	return
  5819  0852  284A               	goto	l491
  5820  0853                     __end_of_I2C_Master_Wait:	
  5821                           
  5822                           	psect	text21
  5823  0938                     __ptext21:	
  5824 ;; *************** function _CWTX *****************
  5825 ;; Defined at:
  5826 ;;		line 284 in file "FMCW.c"
  5827 ;; Parameters:    Size  Location     Type
  5828 ;;  Nref            2   60[BANK0 ] int 
  5829 ;;  Nprg            2   62[BANK0 ] PTR int 
  5830 ;;		 -> RAM(512), main@CWTX_Nprg(10), CWTX_Nprg(10), 
  5831 ;; Auto vars:     Size  Location     Type
  5832 ;;  cwtx            2   64[BANK0 ] int 
  5833 ;; Return value:  Size  Location     Type
  5834 ;;                  1    wreg      void 
  5835 ;; Registers used:
  5836 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5837 ;; Tracked objects:
  5838 ;;		On entry : 0/0
  5839 ;;		On exit  : 0/0
  5840 ;;		Unchanged: 0/0
  5841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5842 ;;      Params:         0       4       0       0       0
  5843 ;;      Locals:         0       2       0       0       0
  5844 ;;      Temps:          0       0       0       0       0
  5845 ;;      Totals:         0       6       0       0       0
  5846 ;;Total ram usage:        6 bytes
  5847 ;; Hardware stack levels used:    1
  5848 ;; Hardware stack levels required when called:    3
  5849 ;; This function calls:
  5850 ;;		_OPINIT
  5851 ;;		_OUTFQ
  5852 ;;		_RFDOUT
  5853 ;; This function is called by:
  5854 ;;		_main
  5855 ;;		_SetPLL
  5856 ;; This function uses a non-reentrant model
  5857 ;;
  5858                           
  5859                           
  5860                           ;psect for function _CWTX
  5861  0938                     _CWTX:	
  5862                           
  5863                           ;FMCW.c: 285: int cwtx = 2;
  5864                           
  5865                           ;incstack = 0
  5866                           ; Regs used in _CWTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5867  0938  3002               	movlw	2
  5868  0939  1283               	bcf	3,5	;RP0=0, select bank0
  5869  093A  1303               	bcf	3,6	;RP1=0, select bank0
  5870  093B  00E0               	movwf	CWTX@cwtx
  5871  093C  3000               	movlw	0
  5872  093D  00E1               	movwf	CWTX@cwtx+1
  5873                           
  5874                           ;FMCW.c: 286: OPINIT(cwtx);
  5875  093E  0861               	movf	CWTX@cwtx+1,w
  5876  093F  00F5               	movwf	OPINIT@fmcwtxrx+1
  5877  0940  0860               	movf	CWTX@cwtx,w
  5878  0941  00F4               	movwf	OPINIT@fmcwtxrx
  5879  0942  120A  158A  24D0  120A  158A  	fcall	_OPINIT
  5880                           
  5881                           ;FMCW.c: 287: RFDOUT(cwtx, Nref);
  5882  0947  1283               	bcf	3,5	;RP0=0, select bank0
  5883  0948  1303               	bcf	3,6	;RP1=0, select bank0
  5884  0949  0861               	movf	CWTX@cwtx+1,w
  5885  094A  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5886  094B  0860               	movf	CWTX@cwtx,w
  5887  094C  00F9               	movwf	RFDOUT@fmcwtxrx
  5888  094D  085D               	movf	CWTX@Nref+1,w
  5889  094E  00FC               	movwf	RFDOUT@Nref+1
  5890  094F  085C               	movf	CWTX@Nref,w
  5891  0950  00FB               	movwf	RFDOUT@Nref
  5892  0951  120A  158A  254D  120A  158A  	fcall	_RFDOUT
  5893                           
  5894                           ;FMCW.c: 288: OUTFQ(cwtx, Nprg);
  5895  0956  1283               	bcf	3,5	;RP0=0, select bank0
  5896  0957  1303               	bcf	3,6	;RP1=0, select bank0
  5897  0958  0861               	movf	CWTX@cwtx+1,w
  5898  0959  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5899  095A  0860               	movf	CWTX@cwtx,w
  5900  095B  00F9               	movwf	OUTFQ@fmcwtxrx
  5901  095C  085E               	movf	CWTX@Nprg,w
  5902  095D  00FB               	movwf	OUTFQ@Nprg
  5903  095E  085F               	movf	CWTX@Nprg+1,w
  5904  095F  00FC               	movwf	OUTFQ@Nprg+1
  5905  0960  120A  118A  20AC   	fcall	_OUTFQ
  5906  0963  0008               	return
  5907  0964                     __end_of_CWTX:	
  5908                           
  5909                           	psect	text22
  5910  0D4D                     __ptext22:	
  5911 ;; *************** function _RFDOUT *****************
  5912 ;; Defined at:
  5913 ;;		line 200 in file "FMCW.c"
  5914 ;; Parameters:    Size  Location     Type
  5915 ;;  fmcwtxrx        2    9[COMMON] int 
  5916 ;;  Nref            2   11[COMMON] int 
  5917 ;; Auto vars:     Size  Location     Type
  5918 ;;  i               2   31[BANK0 ] int 
  5919 ;;  i               2   27[BANK0 ] int 
  5920 ;;  i               2   29[BANK0 ] int 
  5921 ;;  Nref_b         24    3[BANK0 ] int [12]
  5922 ;; Return value:  Size  Location     Type
  5923 ;;                  1    wreg      void 
  5924 ;; Registers used:
  5925 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5926 ;; Tracked objects:
  5927 ;;		On entry : 0/0
  5928 ;;		On exit  : 0/0
  5929 ;;		Unchanged: 0/0
  5930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5931 ;;      Params:         4       0       0       0       0
  5932 ;;      Locals:         0      30       0       0       0
  5933 ;;      Temps:          0       3       0       0       0
  5934 ;;      Totals:         4      33       0       0       0
  5935 ;;Total ram usage:       37 bytes
  5936 ;; Hardware stack levels used:    1
  5937 ;; Hardware stack levels required when called:    2
  5938 ;; This function calls:
  5939 ;;		_H_OUT
  5940 ;;		_L_OUT
  5941 ;;		_STBOUT
  5942 ;;		___awdiv
  5943 ;; This function is called by:
  5944 ;;		_FMTX
  5945 ;;		_CWTX
  5946 ;;		_FMRX
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           
  5951                           ;psect for function _RFDOUT
  5952  0D4D                     _RFDOUT:	
  5953                           
  5954                           ;FMCW.c: 201: int Nref_b[12];
  5955                           ;FMCW.c: 203: for(int i=0; i<12; i++){
  5956                           
  5957                           ;incstack = 0
  5958                           ; Regs used in _RFDOUT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5959  0D4D  1283               	bcf	3,5	;RP0=0, select bank0
  5960  0D4E  1303               	bcf	3,6	;RP1=0, select bank0
  5961  0D4F  01BD               	clrf	RFDOUT@i
  5962  0D50  01BE               	clrf	RFDOUT@i+1
  5963  0D51  083E               	movf	RFDOUT@i+1,w
  5964  0D52  3A80               	xorlw	128
  5965  0D53  00FF               	movwf	127
  5966  0D54  3080               	movlw	128
  5967  0D55  027F               	subwf	127,w
  5968  0D56  1D03               	skipz
  5969  0D57  2D5A               	goto	u2945
  5970  0D58  300C               	movlw	12
  5971  0D59  023D               	subwf	RFDOUT@i,w
  5972  0D5A                     u2945:	
  5973  0D5A  1803               	btfsc	3,0
  5974  0D5B  2D78               	goto	l3249
  5975  0D5C                     l3243:	
  5976                           
  5977                           ;FMCW.c: 204: Nref_b[i] = 0;
  5978  0D5C  1283               	bcf	3,5	;RP0=0, select bank0
  5979  0D5D  1303               	bcf	3,6	;RP1=0, select bank0
  5980  0D5E  083D               	movf	RFDOUT@i,w
  5981  0D5F  00A0               	movwf	??_RFDOUT
  5982  0D60  0720               	addwf	??_RFDOUT,w
  5983  0D61  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  5984  0D62  0084               	movwf	4
  5985  0D63  1383               	bcf	3,7	;select IRP bank0
  5986  0D64  0180               	clrf	0
  5987  0D65  0A84               	incf	4,f
  5988  0D66  0180               	clrf	0
  5989  0D67  3001               	movlw	1
  5990  0D68  07BD               	addwf	RFDOUT@i,f
  5991  0D69  1803               	skipnc
  5992  0D6A  0ABE               	incf	RFDOUT@i+1,f
  5993  0D6B  3000               	movlw	0
  5994  0D6C  07BE               	addwf	RFDOUT@i+1,f
  5995  0D6D  083E               	movf	RFDOUT@i+1,w
  5996  0D6E  3A80               	xorlw	128
  5997  0D6F  00FF               	movwf	127
  5998  0D70  3080               	movlw	128
  5999  0D71  027F               	subwf	127,w
  6000  0D72  1D03               	skipz
  6001  0D73  2D76               	goto	u2955
  6002  0D74  300C               	movlw	12
  6003  0D75  023D               	subwf	RFDOUT@i,w
  6004  0D76                     u2955:	
  6005  0D76  1C03               	skipc
  6006  0D77  2D5C               	goto	l3243
  6007  0D78                     l3249:	
  6008                           
  6009                           ;FMCW.c: 205: }
  6010                           ;FMCW.c: 208: for(int i=0; Nref>0; i++){
  6011  0D78  1283               	bcf	3,5	;RP0=0, select bank0
  6012  0D79  1303               	bcf	3,6	;RP1=0, select bank0
  6013  0D7A  01BB               	clrf	RFDOUT@i_472
  6014  0D7B  01BC               	clrf	RFDOUT@i_472+1
  6015  0D7C  087C               	movf	RFDOUT@Nref+1,w
  6016  0D7D  3A80               	xorlw	128
  6017  0D7E  00FF               	movwf	127
  6018  0D7F  3080               	movlw	128
  6019  0D80  027F               	subwf	127,w
  6020  0D81  1D03               	skipz
  6021  0D82  2D85               	goto	u2965
  6022  0D83  3001               	movlw	1
  6023  0D84  027B               	subwf	RFDOUT@Nref,w
  6024  0D85                     u2965:	
  6025  0D85  1C03               	btfss	3,0
  6026  0D86  2DBE               	goto	l3263
  6027  0D87                     l3255:	
  6028                           
  6029                           ;FMCW.c: 209: Nref_b[i] = Nref % 2;
  6030  0D87  3001               	movlw	1
  6031  0D88  057B               	andwf	RFDOUT@Nref,w
  6032  0D89  1283               	bcf	3,5	;RP0=0, select bank0
  6033  0D8A  1303               	bcf	3,6	;RP1=0, select bank0
  6034  0D8B  00A0               	movwf	??_RFDOUT
  6035  0D8C  3000               	movlw	0
  6036  0D8D  057C               	andwf	RFDOUT@Nref+1,w
  6037  0D8E  00A1               	movwf	??_RFDOUT+1
  6038  0D8F  083B               	movf	RFDOUT@i_472,w
  6039  0D90  00A2               	movwf	??_RFDOUT+2
  6040  0D91  0722               	addwf	??_RFDOUT+2,w
  6041  0D92  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6042  0D93  0084               	movwf	4
  6043  0D94  0820               	movf	??_RFDOUT,w
  6044  0D95  1383               	bcf	3,7	;select IRP bank0
  6045  0D96  0080               	movwf	0
  6046  0D97  0A84               	incf	4,f
  6047  0D98  0821               	movf	??_RFDOUT+1,w
  6048  0D99  0080               	movwf	0
  6049                           
  6050                           ;FMCW.c: 210: Nref = Nref / 2;
  6051  0D9A  3002               	movlw	2
  6052  0D9B  00F0               	movwf	___awdiv@divisor
  6053  0D9C  3000               	movlw	0
  6054  0D9D  00F1               	movwf	___awdiv@divisor+1
  6055  0D9E  087C               	movf	RFDOUT@Nref+1,w
  6056  0D9F  00F3               	movwf	___awdiv@dividend+1
  6057  0DA0  087B               	movf	RFDOUT@Nref,w
  6058  0DA1  00F2               	movwf	___awdiv@dividend
  6059  0DA2  120A  158A  22F6  120A  158A  	fcall	___awdiv
  6060  0DA7  0871               	movf	?___awdiv+1,w
  6061  0DA8  00FC               	movwf	RFDOUT@Nref+1
  6062  0DA9  0870               	movf	?___awdiv,w
  6063  0DAA  00FB               	movwf	RFDOUT@Nref
  6064  0DAB  3001               	movlw	1
  6065  0DAC  1283               	bcf	3,5	;RP0=0, select bank0
  6066  0DAD  1303               	bcf	3,6	;RP1=0, select bank0
  6067  0DAE  07BB               	addwf	RFDOUT@i_472,f
  6068  0DAF  1803               	skipnc
  6069  0DB0  0ABC               	incf	RFDOUT@i_472+1,f
  6070  0DB1  3000               	movlw	0
  6071  0DB2  07BC               	addwf	RFDOUT@i_472+1,f
  6072  0DB3  087C               	movf	RFDOUT@Nref+1,w
  6073  0DB4  3A80               	xorlw	128
  6074  0DB5  00FF               	movwf	127
  6075  0DB6  3080               	movlw	128
  6076  0DB7  027F               	subwf	127,w
  6077  0DB8  1D03               	skipz
  6078  0DB9  2DBC               	goto	u2975
  6079  0DBA  3001               	movlw	1
  6080  0DBB  027B               	subwf	RFDOUT@Nref,w
  6081  0DBC                     u2975:	
  6082  0DBC  1803               	skipnc
  6083  0DBD  2D87               	goto	l3255
  6084  0DBE                     l3263:	
  6085                           
  6086                           ;FMCW.c: 211: }
  6087                           ;FMCW.c: 214: for (int i=0; i<12; i++)
  6088  0DBE  1283               	bcf	3,5	;RP0=0, select bank0
  6089  0DBF  1303               	bcf	3,6	;RP1=0, select bank0
  6090  0DC0  01BF               	clrf	RFDOUT@i_473
  6091  0DC1  01C0               	clrf	RFDOUT@i_473+1
  6092  0DC2  0840               	movf	RFDOUT@i_473+1,w
  6093  0DC3  3A80               	xorlw	128
  6094  0DC4  00FF               	movwf	127
  6095  0DC5  3080               	movlw	128
  6096  0DC6  027F               	subwf	127,w
  6097  0DC7  1D03               	skipz
  6098  0DC8  2DCB               	goto	u2985
  6099  0DC9  300C               	movlw	12
  6100  0DCA  023F               	subwf	RFDOUT@i_473,w
  6101  0DCB                     u2985:	
  6102  0DCB  1803               	btfsc	3,0
  6103  0DCC  2E14               	goto	l3281
  6104  0DCD                     l3269:	
  6105                           
  6106                           ;FMCW.c: 215: {
  6107                           ;FMCW.c: 216: if(Nref_b[i] == 0)
  6108  0DCD  1283               	bcf	3,5	;RP0=0, select bank0
  6109  0DCE  1303               	bcf	3,6	;RP1=0, select bank0
  6110  0DCF  083F               	movf	RFDOUT@i_473,w
  6111  0DD0  00A0               	movwf	??_RFDOUT
  6112  0DD1  0720               	addwf	??_RFDOUT,w
  6113  0DD2  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6114  0DD3  0084               	movwf	4
  6115  0DD4  1383               	bcf	3,7	;select IRP bank0
  6116  0DD5  0800               	movf	0,w
  6117  0DD6  00A1               	movwf	??_RFDOUT+1
  6118  0DD7  0A84               	incf	4,f
  6119  0DD8  0800               	movf	0,w
  6120  0DD9  00A2               	movwf	??_RFDOUT+2
  6121  0DDA  0821               	movf	??_RFDOUT+1,w
  6122  0DDB  0422               	iorwf	??_RFDOUT+2,w
  6123  0DDC  1D03               	btfss	3,2
  6124  0DDD  2DE7               	goto	l3273
  6125                           
  6126                           ;FMCW.c: 217: {
  6127                           ;FMCW.c: 218: L_OUT(fmcwtxrx);
  6128  0DDE  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6129  0DDF  00F3               	movwf	L_OUT@fmcwtxrx+1
  6130  0DE0  0879               	movf	RFDOUT@fmcwtxrx,w
  6131  0DE1  00F2               	movwf	L_OUT@fmcwtxrx
  6132  0DE2  120A  158A  2264  120A  158A  	fcall	_L_OUT
  6133  0DE7                     l3273:	
  6134                           
  6135                           ;FMCW.c: 219: }
  6136                           ;FMCW.c: 220: if(Nref_b[i] == 1)
  6137  0DE7  1283               	bcf	3,5	;RP0=0, select bank0
  6138  0DE8  1303               	bcf	3,6	;RP1=0, select bank0
  6139  0DE9  083F               	movf	RFDOUT@i_473,w
  6140  0DEA  00A0               	movwf	??_RFDOUT
  6141  0DEB  0720               	addwf	??_RFDOUT,w
  6142  0DEC  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6143  0DED  0084               	movwf	4
  6144  0DEE  1383               	bcf	3,7	;select IRP bank0
  6145  0DEF  0800               	movf	0,w
  6146  0DF0  00A1               	movwf	??_RFDOUT+1
  6147  0DF1  0A84               	incf	4,f
  6148  0DF2  0800               	movf	0,w
  6149  0DF3  00A2               	movwf	??_RFDOUT+2
  6150  0DF4  0321               	decf	??_RFDOUT+1,w
  6151  0DF5  0422               	iorwf	??_RFDOUT+2,w
  6152  0DF6  1D03               	btfss	3,2
  6153  0DF7  2E01               	goto	l3277
  6154                           
  6155                           ;FMCW.c: 221: {
  6156                           ;FMCW.c: 222: H_OUT(fmcwtxrx);
  6157  0DF8  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6158  0DF9  00F3               	movwf	H_OUT@fmcwtxrx+1
  6159  0DFA  0879               	movf	RFDOUT@fmcwtxrx,w
  6160  0DFB  00F2               	movwf	H_OUT@fmcwtxrx
  6161  0DFC  120A  158A  221E  120A  158A  	fcall	_H_OUT
  6162  0E01                     l3277:	
  6163  0E01  3001               	movlw	1
  6164  0E02  1283               	bcf	3,5	;RP0=0, select bank0
  6165  0E03  1303               	bcf	3,6	;RP1=0, select bank0
  6166  0E04  07BF               	addwf	RFDOUT@i_473,f
  6167  0E05  1803               	skipnc
  6168  0E06  0AC0               	incf	RFDOUT@i_473+1,f
  6169  0E07  3000               	movlw	0
  6170  0E08  07C0               	addwf	RFDOUT@i_473+1,f
  6171  0E09  0840               	movf	RFDOUT@i_473+1,w
  6172  0E0A  3A80               	xorlw	128
  6173  0E0B  00FF               	movwf	127
  6174  0E0C  3080               	movlw	128
  6175  0E0D  027F               	subwf	127,w
  6176  0E0E  1D03               	skipz
  6177  0E0F  2E12               	goto	u3015
  6178  0E10  300C               	movlw	12
  6179  0E11  023F               	subwf	RFDOUT@i_473,w
  6180  0E12                     u3015:	
  6181  0E12  1C03               	skipc
  6182  0E13  2DCD               	goto	l3269
  6183  0E14                     l3281:	
  6184                           
  6185                           ;FMCW.c: 223: }
  6186                           ;FMCW.c: 224: }
  6187                           ;FMCW.c: 227: H_OUT(fmcwtxrx);
  6188  0E14  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6189  0E15  00F3               	movwf	H_OUT@fmcwtxrx+1
  6190  0E16  0879               	movf	RFDOUT@fmcwtxrx,w
  6191  0E17  00F2               	movwf	H_OUT@fmcwtxrx
  6192  0E18  120A  158A  221E  120A  158A  	fcall	_H_OUT
  6193                           
  6194                           ;FMCW.c: 228: H_OUT(fmcwtxrx);
  6195  0E1D  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6196  0E1E  00F3               	movwf	H_OUT@fmcwtxrx+1
  6197  0E1F  0879               	movf	RFDOUT@fmcwtxrx,w
  6198  0E20  00F2               	movwf	H_OUT@fmcwtxrx
  6199  0E21  120A  158A  221E  120A  158A  	fcall	_H_OUT
  6200                           
  6201                           ;FMCW.c: 231: STBOUT(fmcwtxrx);
  6202  0E26  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6203  0E27  00F3               	movwf	STBOUT@fmcwtxrx+1
  6204  0E28  0879               	movf	RFDOUT@fmcwtxrx,w
  6205  0E29  00F2               	movwf	STBOUT@fmcwtxrx
  6206  0E2A  120A  158A  21BC   	fcall	_STBOUT
  6207  0E2D  0008               	return
  6208  0E2E                     __end_of_RFDOUT:	
  6209                           
  6210                           	psect	text23
  6211  00AC                     __ptext23:	
  6212 ;; *************** function _OUTFQ *****************
  6213 ;; Defined at:
  6214 ;;		line 136 in file "FMCW.c"
  6215 ;; Parameters:    Size  Location     Type
  6216 ;;  fmcwtxrx        2    9[COMMON] int 
  6217 ;;  Nprg            2   11[COMMON] PTR int 
  6218 ;;		 -> RAM(512), main@FMRX_Nprg(10), main@CWTX_Nprg(10), main@FMTX_Nprg(10), 
  6219 ;;		 -> FMRX_Nprg(10), CWTX_Nprg(10), FMTX_Nprg(10), 
  6220 ;; Auto vars:     Size  Location     Type
  6221 ;;  j               2   58[BANK0 ] int 
  6222 ;;  i               2   56[BANK0 ] int 
  6223 ;;  i               2   50[BANK0 ] int 
  6224 ;;  i               2   54[BANK0 ] int 
  6225 ;;  Nprg_b         34   16[BANK0 ] int [17]
  6226 ;;  count           2   52[BANK0 ] int 
  6227 ;; Return value:  Size  Location     Type
  6228 ;;                  1    wreg      void 
  6229 ;; Registers used:
  6230 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6231 ;; Tracked objects:
  6232 ;;		On entry : 0/0
  6233 ;;		On exit  : 0/0
  6234 ;;		Unchanged: 0/0
  6235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6236 ;;      Params:         4       0       0       0       0
  6237 ;;      Locals:         0      44       0       0       0
  6238 ;;      Temps:          0      16       0       0       0
  6239 ;;      Totals:         4      60       0       0       0
  6240 ;;Total ram usage:       64 bytes
  6241 ;; Hardware stack levels used:    1
  6242 ;; Hardware stack levels required when called:    2
  6243 ;; This function calls:
  6244 ;;		_H_OUT
  6245 ;;		_L_OUT
  6246 ;;		_STBOUT
  6247 ;;		___awdiv
  6248 ;; This function is called by:
  6249 ;;		_FMTX
  6250 ;;		_CWTX
  6251 ;;		_FMRX
  6252 ;; This function uses a non-reentrant model
  6253 ;;
  6254                           
  6255                           
  6256                           ;psect for function _OUTFQ
  6257  00AC                     _OUTFQ:	
  6258                           
  6259                           ;FMCW.c: 137: int count = 0;
  6260                           
  6261                           ;incstack = 0
  6262                           ; Regs used in _OUTFQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6263  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  6264  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  6265  00AE  01D4               	clrf	OUTFQ@count
  6266  00AF  01D5               	clrf	OUTFQ@count+1
  6267                           
  6268                           ;FMCW.c: 138: int Nprg_b[17];
  6269                           ;FMCW.c: 140: for(int i=0; i<17; i++){
  6270  00B0  01D6               	clrf	OUTFQ@i
  6271  00B1  01D7               	clrf	OUTFQ@i+1
  6272  00B2  0857               	movf	OUTFQ@i+1,w
  6273  00B3  3A80               	xorlw	128
  6274  00B4  00FF               	movwf	127
  6275  00B5  3080               	movlw	128
  6276  00B6  027F               	subwf	127,w
  6277  00B7  1D03               	skipz
  6278  00B8  28BB               	goto	u2805
  6279  00B9  3011               	movlw	17
  6280  00BA  0256               	subwf	OUTFQ@i,w
  6281  00BB                     u2805:	
  6282  00BB  1803               	btfsc	3,0
  6283  00BC  28D9               	goto	l3171
  6284  00BD                     l3165:	
  6285                           
  6286                           ;FMCW.c: 141: Nprg_b[i] = 0;
  6287  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  6288  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  6289  00BF  0856               	movf	OUTFQ@i,w
  6290  00C0  00A0               	movwf	??_OUTFQ
  6291  00C1  0720               	addwf	??_OUTFQ,w
  6292  00C2  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6293  00C3  0084               	movwf	4
  6294  00C4  1383               	bcf	3,7	;select IRP bank0
  6295  00C5  0180               	clrf	0
  6296  00C6  0A84               	incf	4,f
  6297  00C7  0180               	clrf	0
  6298  00C8  3001               	movlw	1
  6299  00C9  07D6               	addwf	OUTFQ@i,f
  6300  00CA  1803               	skipnc
  6301  00CB  0AD7               	incf	OUTFQ@i+1,f
  6302  00CC  3000               	movlw	0
  6303  00CD  07D7               	addwf	OUTFQ@i+1,f
  6304  00CE  0857               	movf	OUTFQ@i+1,w
  6305  00CF  3A80               	xorlw	128
  6306  00D0  00FF               	movwf	127
  6307  00D1  3080               	movlw	128
  6308  00D2  027F               	subwf	127,w
  6309  00D3  1D03               	skipz
  6310  00D4  28D7               	goto	u2815
  6311  00D5  3011               	movlw	17
  6312  00D6  0256               	subwf	OUTFQ@i,w
  6313  00D7                     u2815:	
  6314  00D7  1C03               	skipc
  6315  00D8  28BD               	goto	l3165
  6316  00D9                     l3171:	
  6317                           
  6318                           ;FMCW.c: 142: }
  6319                           ;FMCW.c: 145: for(int i = 0; i < 17; i++){
  6320  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  6321  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  6322  00DB  01D2               	clrf	OUTFQ@i_461
  6323  00DC  01D3               	clrf	OUTFQ@i_461+1
  6324  00DD  0853               	movf	OUTFQ@i_461+1,w
  6325  00DE  3A80               	xorlw	128
  6326  00DF  00FF               	movwf	127
  6327  00E0  3080               	movlw	128
  6328  00E1  027F               	subwf	127,w
  6329  00E2  1D03               	skipz
  6330  00E3  28E6               	goto	u2825
  6331  00E4  3011               	movlw	17
  6332  00E5  0252               	subwf	OUTFQ@i_461,w
  6333  00E6                     u2825:	
  6334  00E6  1803               	btfsc	3,0
  6335  00E7  2AB7               	goto	l3217
  6336  00E8                     l3177:	
  6337                           
  6338                           ;FMCW.c: 146: for(int j = 0; j<5; j++){
  6339  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  6340  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  6341  00EA  01DA               	clrf	OUTFQ@j
  6342  00EB  01DB               	clrf	OUTFQ@j+1
  6343  00EC  085B               	movf	OUTFQ@j+1,w
  6344  00ED  3A80               	xorlw	128
  6345  00EE  00FF               	movwf	127
  6346  00EF  3080               	movlw	128
  6347  00F0  027F               	subwf	127,w
  6348  00F1  1D03               	skipz
  6349  00F2  28F5               	goto	u2835
  6350  00F3  3005               	movlw	5
  6351  00F4  025A               	subwf	OUTFQ@j,w
  6352  00F5                     u2835:	
  6353  00F5  1803               	btfsc	3,0
  6354  00F6  2AA4               	goto	l3213
  6355  00F7                     l3183:	
  6356                           
  6357                           ;FMCW.c: 147: if(Nprg[j] % 2 == 0) {
  6358  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  6359  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  6360  00F9  085B               	movf	OUTFQ@j+1,w
  6361  00FA  00A1               	movwf	??_OUTFQ+1
  6362  00FB  085A               	movf	OUTFQ@j,w
  6363  00FC  00A0               	movwf	??_OUTFQ
  6364  00FD  1003               	clrc
  6365  00FE  0DA0               	rlf	??_OUTFQ,f
  6366  00FF  0DA1               	rlf	??_OUTFQ+1,f
  6367  0100  0820               	movf	??_OUTFQ,w
  6368  0101  077B               	addwf	OUTFQ@Nprg,w
  6369  0102  00A2               	movwf	??_OUTFQ+2
  6370  0103  0821               	movf	??_OUTFQ+1,w
  6371  0104  1803               	skipnc
  6372  0105  0A21               	incf	??_OUTFQ+1,w
  6373  0106  077C               	addwf	OUTFQ@Nprg+1,w
  6374  0107  00A3               	movwf	??_OUTFQ+3
  6375  0108  0822               	movf	??_OUTFQ+2,w
  6376  0109  0084               	movwf	4
  6377  010A  1783               	bsf	3,7
  6378  010B  1C23               	btfss	??_OUTFQ+3,0
  6379  010C  1383               	bcf	3,7
  6380  010D  0800               	movf	0,w
  6381  010E  00A4               	movwf	??_OUTFQ+4
  6382  010F  0A84               	incf	4,f
  6383  0110  0800               	movf	0,w
  6384  0111  00A5               	movwf	??_OUTFQ+5
  6385  0112  1824               	btfsc	??_OUTFQ+4,0
  6386  0113  299D               	goto	l3195
  6387                           
  6388                           ;FMCW.c: 148: if(j == 4){
  6389  0114  3004               	movlw	4
  6390  0115  065A               	xorwf	OUTFQ@j,w
  6391  0116  045B               	iorwf	OUTFQ@j+1,w
  6392  0117  1D03               	btfss	3,2
  6393  0118  2960               	goto	l3193
  6394                           
  6395                           ;FMCW.c: 149: Nprg[j] = Nprg[j] / 2;
  6396  0119  3002               	movlw	2
  6397  011A  00F0               	movwf	___awdiv@divisor
  6398  011B  3000               	movlw	0
  6399  011C  00F1               	movwf	___awdiv@divisor+1
  6400  011D  085B               	movf	OUTFQ@j+1,w
  6401  011E  00A1               	movwf	??_OUTFQ+1
  6402  011F  085A               	movf	OUTFQ@j,w
  6403  0120  00A0               	movwf	??_OUTFQ
  6404  0121  1003               	clrc
  6405  0122  0DA0               	rlf	??_OUTFQ,f
  6406  0123  0DA1               	rlf	??_OUTFQ+1,f
  6407  0124  0820               	movf	??_OUTFQ,w
  6408  0125  077B               	addwf	OUTFQ@Nprg,w
  6409  0126  00A2               	movwf	??_OUTFQ+2
  6410  0127  0821               	movf	??_OUTFQ+1,w
  6411  0128  1803               	skipnc
  6412  0129  0A21               	incf	??_OUTFQ+1,w
  6413  012A  077C               	addwf	OUTFQ@Nprg+1,w
  6414  012B  00A3               	movwf	??_OUTFQ+3
  6415  012C  0822               	movf	??_OUTFQ+2,w
  6416  012D  0084               	movwf	4
  6417  012E  1783               	bsf	3,7
  6418  012F  1C23               	btfss	??_OUTFQ+3,0
  6419  0130  1383               	bcf	3,7
  6420  0131  0800               	movf	0,w
  6421  0132  00F2               	movwf	___awdiv@dividend
  6422  0133  0A84               	incf	4,f
  6423  0134  0800               	movf	0,w
  6424  0135  00F3               	movwf	___awdiv@dividend+1
  6425  0136  120A  158A  22F6  120A  118A  	fcall	___awdiv
  6426  013B  1283               	bcf	3,5	;RP0=0, select bank0
  6427  013C  1303               	bcf	3,6	;RP1=0, select bank0
  6428  013D  085B               	movf	OUTFQ@j+1,w
  6429  013E  00A5               	movwf	??_OUTFQ+5
  6430  013F  085A               	movf	OUTFQ@j,w
  6431  0140  00A4               	movwf	??_OUTFQ+4
  6432  0141  1003               	clrc
  6433  0142  0DA4               	rlf	??_OUTFQ+4,f
  6434  0143  0DA5               	rlf	??_OUTFQ+5,f
  6435  0144  0824               	movf	??_OUTFQ+4,w
  6436  0145  077B               	addwf	OUTFQ@Nprg,w
  6437  0146  00A6               	movwf	??_OUTFQ+6
  6438  0147  0825               	movf	??_OUTFQ+5,w
  6439  0148  1803               	skipnc
  6440  0149  0A25               	incf	??_OUTFQ+5,w
  6441  014A  077C               	addwf	OUTFQ@Nprg+1,w
  6442  014B  00A7               	movwf	??_OUTFQ+7
  6443  014C  0826               	movf	??_OUTFQ+6,w
  6444  014D  0084               	movwf	4
  6445  014E  1783               	bsf	3,7
  6446  014F  1C27               	btfss	??_OUTFQ+7,0
  6447  0150  1383               	bcf	3,7
  6448  0151  0870               	movf	?___awdiv,w
  6449  0152  0080               	movwf	0
  6450  0153  0A84               	incf	4,f
  6451  0154  0871               	movf	?___awdiv+1,w
  6452  0155  0080               	movwf	0
  6453                           
  6454                           ;FMCW.c: 150: Nprg_b[count] = 0;
  6455  0156  0854               	movf	OUTFQ@count,w
  6456  0157  00A0               	movwf	??_OUTFQ
  6457  0158  0720               	addwf	??_OUTFQ,w
  6458  0159  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6459  015A  0084               	movwf	4
  6460  015B  1383               	bcf	3,7	;select IRP bank0
  6461  015C  0180               	clrf	0
  6462  015D  0A84               	incf	4,f
  6463  015E  0180               	clrf	0
  6464  015F  2A05               	goto	l3203
  6465  0160                     l3193:	
  6466                           ;FMCW.c: 152: }
  6467                           
  6468                           ;FMCW.c: 151: count++;
  6469                           
  6470                           
  6471                           ;FMCW.c: 153: else{
  6472                           ;FMCW.c: 154: Nprg[j] = Nprg[j] / 2;
  6473  0160  3002               	movlw	2
  6474  0161  00F0               	movwf	___awdiv@divisor
  6475  0162  3000               	movlw	0
  6476  0163  00F1               	movwf	___awdiv@divisor+1
  6477  0164  085B               	movf	OUTFQ@j+1,w
  6478  0165  00A1               	movwf	??_OUTFQ+1
  6479  0166  085A               	movf	OUTFQ@j,w
  6480  0167  00A0               	movwf	??_OUTFQ
  6481  0168  1003               	clrc
  6482  0169  0DA0               	rlf	??_OUTFQ,f
  6483  016A  0DA1               	rlf	??_OUTFQ+1,f
  6484  016B  0820               	movf	??_OUTFQ,w
  6485  016C  077B               	addwf	OUTFQ@Nprg,w
  6486  016D  00A2               	movwf	??_OUTFQ+2
  6487  016E  0821               	movf	??_OUTFQ+1,w
  6488  016F  1803               	skipnc
  6489  0170  0A21               	incf	??_OUTFQ+1,w
  6490  0171  077C               	addwf	OUTFQ@Nprg+1,w
  6491  0172  00A3               	movwf	??_OUTFQ+3
  6492  0173  0822               	movf	??_OUTFQ+2,w
  6493  0174  0084               	movwf	4
  6494  0175  1783               	bsf	3,7
  6495  0176  1C23               	btfss	??_OUTFQ+3,0
  6496  0177  1383               	bcf	3,7
  6497  0178  0800               	movf	0,w
  6498  0179  00F2               	movwf	___awdiv@dividend
  6499  017A  0A84               	incf	4,f
  6500  017B  0800               	movf	0,w
  6501  017C  00F3               	movwf	___awdiv@dividend+1
  6502  017D  120A  158A  22F6  120A  118A  	fcall	___awdiv
  6503  0182  1283               	bcf	3,5	;RP0=0, select bank0
  6504  0183  1303               	bcf	3,6	;RP1=0, select bank0
  6505  0184  085B               	movf	OUTFQ@j+1,w
  6506  0185  00A5               	movwf	??_OUTFQ+5
  6507  0186  085A               	movf	OUTFQ@j,w
  6508  0187  00A4               	movwf	??_OUTFQ+4
  6509  0188  1003               	clrc
  6510  0189  0DA4               	rlf	??_OUTFQ+4,f
  6511  018A  0DA5               	rlf	??_OUTFQ+5,f
  6512  018B  0824               	movf	??_OUTFQ+4,w
  6513  018C  077B               	addwf	OUTFQ@Nprg,w
  6514  018D  00A6               	movwf	??_OUTFQ+6
  6515  018E  0825               	movf	??_OUTFQ+5,w
  6516  018F  1803               	skipnc
  6517  0190  0A25               	incf	??_OUTFQ+5,w
  6518  0191  077C               	addwf	OUTFQ@Nprg+1,w
  6519  0192  00A7               	movwf	??_OUTFQ+7
  6520  0193  0826               	movf	??_OUTFQ+6,w
  6521  0194  0084               	movwf	4
  6522  0195  1783               	bsf	3,7
  6523  0196  1C27               	btfss	??_OUTFQ+7,0
  6524  0197  1383               	bcf	3,7
  6525  0198  0870               	movf	?___awdiv,w
  6526  0199  0080               	movwf	0
  6527  019A  0A84               	incf	4,f
  6528  019B  0871               	movf	?___awdiv+1,w
  6529  019C  2A92               	goto	L8
  6530  019D                     l3195:	
  6531                           ;FMCW.c: 155: }
  6532                           ;FMCW.c: 156: }
  6533                           
  6534                           
  6535                           ;FMCW.c: 157: else if(Nprg[j] % 2 == 1) {
  6536  019D  085B               	movf	OUTFQ@j+1,w
  6537  019E  00A1               	movwf	??_OUTFQ+1
  6538  019F  085A               	movf	OUTFQ@j,w
  6539  01A0  00A0               	movwf	??_OUTFQ
  6540  01A1  1003               	clrc
  6541  01A2  0DA0               	rlf	??_OUTFQ,f
  6542  01A3  0DA1               	rlf	??_OUTFQ+1,f
  6543  01A4  0820               	movf	??_OUTFQ,w
  6544  01A5  077B               	addwf	OUTFQ@Nprg,w
  6545  01A6  00A2               	movwf	??_OUTFQ+2
  6546  01A7  0821               	movf	??_OUTFQ+1,w
  6547  01A8  1803               	skipnc
  6548  01A9  0A21               	incf	??_OUTFQ+1,w
  6549  01AA  077C               	addwf	OUTFQ@Nprg+1,w
  6550  01AB  00A3               	movwf	??_OUTFQ+3
  6551  01AC  0822               	movf	??_OUTFQ+2,w
  6552  01AD  0084               	movwf	4
  6553  01AE  1783               	bsf	3,7
  6554  01AF  1C23               	btfss	??_OUTFQ+3,0
  6555  01B0  1383               	bcf	3,7
  6556  01B1  0800               	movf	0,w
  6557  01B2  00A4               	movwf	??_OUTFQ+4
  6558  01B3  0A84               	incf	4,f
  6559  01B4  0800               	movf	0,w
  6560  01B5  00A5               	movwf	??_OUTFQ+5
  6561  01B6  1C24               	btfss	??_OUTFQ+4,0
  6562  01B7  2A93               	goto	l3209
  6563                           
  6564                           ;FMCW.c: 158: if(j == 4){
  6565  01B8  3004               	movlw	4
  6566  01B9  065A               	xorwf	OUTFQ@j,w
  6567  01BA  045B               	iorwf	OUTFQ@j+1,w
  6568  01BB  1D03               	btfss	3,2
  6569  01BC  2A0C               	goto	l3205
  6570                           
  6571                           ;FMCW.c: 159: Nprg[j] = Nprg[j] / 2;
  6572  01BD  3002               	movlw	2
  6573  01BE  00F0               	movwf	___awdiv@divisor
  6574  01BF  3000               	movlw	0
  6575  01C0  00F1               	movwf	___awdiv@divisor+1
  6576  01C1  085B               	movf	OUTFQ@j+1,w
  6577  01C2  00A1               	movwf	??_OUTFQ+1
  6578  01C3  085A               	movf	OUTFQ@j,w
  6579  01C4  00A0               	movwf	??_OUTFQ
  6580  01C5  1003               	clrc
  6581  01C6  0DA0               	rlf	??_OUTFQ,f
  6582  01C7  0DA1               	rlf	??_OUTFQ+1,f
  6583  01C8  0820               	movf	??_OUTFQ,w
  6584  01C9  077B               	addwf	OUTFQ@Nprg,w
  6585  01CA  00A2               	movwf	??_OUTFQ+2
  6586  01CB  0821               	movf	??_OUTFQ+1,w
  6587  01CC  1803               	skipnc
  6588  01CD  0A21               	incf	??_OUTFQ+1,w
  6589  01CE  077C               	addwf	OUTFQ@Nprg+1,w
  6590  01CF  00A3               	movwf	??_OUTFQ+3
  6591  01D0  0822               	movf	??_OUTFQ+2,w
  6592  01D1  0084               	movwf	4
  6593  01D2  1783               	bsf	3,7
  6594  01D3  1C23               	btfss	??_OUTFQ+3,0
  6595  01D4  1383               	bcf	3,7
  6596  01D5  0800               	movf	0,w
  6597  01D6  00F2               	movwf	___awdiv@dividend
  6598  01D7  0A84               	incf	4,f
  6599  01D8  0800               	movf	0,w
  6600  01D9  00F3               	movwf	___awdiv@dividend+1
  6601  01DA  120A  158A  22F6  120A  118A  	fcall	___awdiv
  6602  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  6603  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  6604  01E1  085B               	movf	OUTFQ@j+1,w
  6605  01E2  00A5               	movwf	??_OUTFQ+5
  6606  01E3  085A               	movf	OUTFQ@j,w
  6607  01E4  00A4               	movwf	??_OUTFQ+4
  6608  01E5  1003               	clrc
  6609  01E6  0DA4               	rlf	??_OUTFQ+4,f
  6610  01E7  0DA5               	rlf	??_OUTFQ+5,f
  6611  01E8  0824               	movf	??_OUTFQ+4,w
  6612  01E9  077B               	addwf	OUTFQ@Nprg,w
  6613  01EA  00A6               	movwf	??_OUTFQ+6
  6614  01EB  0825               	movf	??_OUTFQ+5,w
  6615  01EC  1803               	skipnc
  6616  01ED  0A25               	incf	??_OUTFQ+5,w
  6617  01EE  077C               	addwf	OUTFQ@Nprg+1,w
  6618  01EF  00A7               	movwf	??_OUTFQ+7
  6619  01F0  0826               	movf	??_OUTFQ+6,w
  6620  01F1  0084               	movwf	4
  6621  01F2  1783               	bsf	3,7
  6622  01F3  1C27               	btfss	??_OUTFQ+7,0
  6623  01F4  1383               	bcf	3,7
  6624  01F5  0870               	movf	?___awdiv,w
  6625  01F6  0080               	movwf	0
  6626  01F7  0A84               	incf	4,f
  6627  01F8  0871               	movf	?___awdiv+1,w
  6628  01F9  0080               	movwf	0
  6629                           
  6630                           ;FMCW.c: 160: Nprg_b[count] = 1;
  6631  01FA  0854               	movf	OUTFQ@count,w
  6632  01FB  00A0               	movwf	??_OUTFQ
  6633  01FC  0720               	addwf	??_OUTFQ,w
  6634  01FD  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6635  01FE  0084               	movwf	4
  6636  01FF  3001               	movlw	1
  6637  0200  1383               	bcf	3,7	;select IRP bank0
  6638  0201  0080               	movwf	0
  6639  0202  0A84               	incf	4,f
  6640  0203  3000               	movlw	0
  6641  0204  0080               	movwf	0
  6642  0205                     l3203:	
  6643                           
  6644                           ;FMCW.c: 161: count++;
  6645  0205  3001               	movlw	1
  6646  0206  07D4               	addwf	OUTFQ@count,f
  6647  0207  1803               	skipnc
  6648  0208  0AD5               	incf	OUTFQ@count+1,f
  6649  0209  3000               	movlw	0
  6650  020A  07D5               	addwf	OUTFQ@count+1,f
  6651                           
  6652                           ;FMCW.c: 162: }
  6653  020B  2A93               	goto	l3209
  6654  020C                     l3205:	
  6655                           
  6656                           ;FMCW.c: 163: else{
  6657                           ;FMCW.c: 164: Nprg[j] = Nprg[j] / 2;
  6658  020C  3002               	movlw	2
  6659  020D  00F0               	movwf	___awdiv@divisor
  6660  020E  3000               	movlw	0
  6661  020F  00F1               	movwf	___awdiv@divisor+1
  6662  0210  085B               	movf	OUTFQ@j+1,w
  6663  0211  00A1               	movwf	??_OUTFQ+1
  6664  0212  085A               	movf	OUTFQ@j,w
  6665  0213  00A0               	movwf	??_OUTFQ
  6666  0214  1003               	clrc
  6667  0215  0DA0               	rlf	??_OUTFQ,f
  6668  0216  0DA1               	rlf	??_OUTFQ+1,f
  6669  0217  0820               	movf	??_OUTFQ,w
  6670  0218  077B               	addwf	OUTFQ@Nprg,w
  6671  0219  00A2               	movwf	??_OUTFQ+2
  6672  021A  0821               	movf	??_OUTFQ+1,w
  6673  021B  1803               	skipnc
  6674  021C  0A21               	incf	??_OUTFQ+1,w
  6675  021D  077C               	addwf	OUTFQ@Nprg+1,w
  6676  021E  00A3               	movwf	??_OUTFQ+3
  6677  021F  0822               	movf	??_OUTFQ+2,w
  6678  0220  0084               	movwf	4
  6679  0221  1783               	bsf	3,7
  6680  0222  1C23               	btfss	??_OUTFQ+3,0
  6681  0223  1383               	bcf	3,7
  6682  0224  0800               	movf	0,w
  6683  0225  00F2               	movwf	___awdiv@dividend
  6684  0226  0A84               	incf	4,f
  6685  0227  0800               	movf	0,w
  6686  0228  00F3               	movwf	___awdiv@dividend+1
  6687  0229  120A  158A  22F6  120A  118A  	fcall	___awdiv
  6688  022E  1283               	bcf	3,5	;RP0=0, select bank0
  6689  022F  1303               	bcf	3,6	;RP1=0, select bank0
  6690  0230  085B               	movf	OUTFQ@j+1,w
  6691  0231  00A5               	movwf	??_OUTFQ+5
  6692  0232  085A               	movf	OUTFQ@j,w
  6693  0233  00A4               	movwf	??_OUTFQ+4
  6694  0234  1003               	clrc
  6695  0235  0DA4               	rlf	??_OUTFQ+4,f
  6696  0236  0DA5               	rlf	??_OUTFQ+5,f
  6697  0237  0824               	movf	??_OUTFQ+4,w
  6698  0238  077B               	addwf	OUTFQ@Nprg,w
  6699  0239  00A6               	movwf	??_OUTFQ+6
  6700  023A  0825               	movf	??_OUTFQ+5,w
  6701  023B  1803               	skipnc
  6702  023C  0A25               	incf	??_OUTFQ+5,w
  6703  023D  077C               	addwf	OUTFQ@Nprg+1,w
  6704  023E  00A7               	movwf	??_OUTFQ+7
  6705  023F  0826               	movf	??_OUTFQ+6,w
  6706  0240  0084               	movwf	4
  6707  0241  1783               	bsf	3,7
  6708  0242  1C27               	btfss	??_OUTFQ+7,0
  6709  0243  1383               	bcf	3,7
  6710  0244  0870               	movf	?___awdiv,w
  6711  0245  0080               	movwf	0
  6712  0246  0A84               	incf	4,f
  6713  0247  0871               	movf	?___awdiv+1,w
  6714  0248  0080               	movwf	0
  6715                           
  6716                           ;FMCW.c: 165: Nprg[j+1] = Nprg[j+1] + 10;
  6717  0249  085B               	movf	OUTFQ@j+1,w
  6718  024A  00A1               	movwf	??_OUTFQ+1
  6719  024B  085A               	movf	OUTFQ@j,w
  6720  024C  00A0               	movwf	??_OUTFQ
  6721  024D  1003               	clrc
  6722  024E  0DA0               	rlf	??_OUTFQ,f
  6723  024F  0DA1               	rlf	??_OUTFQ+1,f
  6724  0250  0820               	movf	??_OUTFQ,w
  6725  0251  3E02               	addlw	2
  6726  0252  00A2               	movwf	??_OUTFQ+2
  6727  0253  0821               	movf	??_OUTFQ+1,w
  6728  0254  1803               	skipnc
  6729  0255  3E01               	addlw	1
  6730  0256  3E00               	addlw	0
  6731  0257  00A3               	movwf	??_OUTFQ+3
  6732  0258  0822               	movf	??_OUTFQ+2,w
  6733  0259  077B               	addwf	OUTFQ@Nprg,w
  6734  025A  00A4               	movwf	??_OUTFQ+4
  6735  025B  0823               	movf	??_OUTFQ+3,w
  6736  025C  1803               	skipnc
  6737  025D  0A23               	incf	??_OUTFQ+3,w
  6738  025E  077C               	addwf	OUTFQ@Nprg+1,w
  6739  025F  00A5               	movwf	??_OUTFQ+5
  6740  0260  0824               	movf	??_OUTFQ+4,w
  6741  0261  0084               	movwf	4
  6742  0262  1783               	bsf	3,7
  6743  0263  1C25               	btfss	??_OUTFQ+5,0
  6744  0264  1383               	bcf	3,7
  6745  0265  0800               	movf	0,w
  6746  0266  00A6               	movwf	??_OUTFQ+6
  6747  0267  0A84               	incf	4,f
  6748  0268  0800               	movf	0,w
  6749  0269  00A7               	movwf	??_OUTFQ+7
  6750  026A  0826               	movf	??_OUTFQ+6,w
  6751  026B  3E0A               	addlw	10
  6752  026C  00A8               	movwf	??_OUTFQ+8
  6753  026D  0827               	movf	??_OUTFQ+7,w
  6754  026E  1803               	skipnc
  6755  026F  3E01               	addlw	1
  6756  0270  3E00               	addlw	0
  6757  0271  00A9               	movwf	??_OUTFQ+9
  6758  0272  085B               	movf	OUTFQ@j+1,w
  6759  0273  00AB               	movwf	??_OUTFQ+11
  6760  0274  085A               	movf	OUTFQ@j,w
  6761  0275  00AA               	movwf	??_OUTFQ+10
  6762  0276  1003               	clrc
  6763  0277  0DAA               	rlf	??_OUTFQ+10,f
  6764  0278  0DAB               	rlf	??_OUTFQ+11,f
  6765  0279  082A               	movf	??_OUTFQ+10,w
  6766  027A  3E02               	addlw	2
  6767  027B  00AC               	movwf	??_OUTFQ+12
  6768  027C  082B               	movf	??_OUTFQ+11,w
  6769  027D  1803               	skipnc
  6770  027E  3E01               	addlw	1
  6771  027F  3E00               	addlw	0
  6772  0280  00AD               	movwf	??_OUTFQ+13
  6773  0281  082C               	movf	??_OUTFQ+12,w
  6774  0282  077B               	addwf	OUTFQ@Nprg,w
  6775  0283  00AE               	movwf	??_OUTFQ+14
  6776  0284  082D               	movf	??_OUTFQ+13,w
  6777  0285  1803               	skipnc
  6778  0286  0A2D               	incf	??_OUTFQ+13,w
  6779  0287  077C               	addwf	OUTFQ@Nprg+1,w
  6780  0288  00AF               	movwf	??_OUTFQ+15
  6781  0289  082E               	movf	??_OUTFQ+14,w
  6782  028A  0084               	movwf	4
  6783  028B  1783               	bsf	3,7
  6784  028C  1C2F               	btfss	??_OUTFQ+15,0
  6785  028D  1383               	bcf	3,7
  6786  028E  0828               	movf	??_OUTFQ+8,w
  6787  028F  0080               	movwf	0
  6788  0290  0A84               	incf	4,f
  6789  0291  0829               	movf	??_OUTFQ+9,w
  6790  0292                     L8:	
  6791  0292  0080               	movwf	0
  6792  0293                     l3209:	
  6793  0293  3001               	movlw	1
  6794  0294  07DA               	addwf	OUTFQ@j,f
  6795  0295  1803               	skipnc
  6796  0296  0ADB               	incf	OUTFQ@j+1,f
  6797  0297  3000               	movlw	0
  6798  0298  07DB               	addwf	OUTFQ@j+1,f
  6799  0299  085B               	movf	OUTFQ@j+1,w
  6800  029A  3A80               	xorlw	128
  6801  029B  00FF               	movwf	127
  6802  029C  3080               	movlw	128
  6803  029D  027F               	subwf	127,w
  6804  029E  1D03               	skipz
  6805  029F  2AA2               	goto	u2885
  6806  02A0  3005               	movlw	5
  6807  02A1  025A               	subwf	OUTFQ@j,w
  6808  02A2                     u2885:	
  6809  02A2  1C03               	skipc
  6810  02A3  28F7               	goto	l3183
  6811  02A4                     l3213:	
  6812  02A4  3001               	movlw	1
  6813  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  6814  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  6815  02A7  07D2               	addwf	OUTFQ@i_461,f
  6816  02A8  1803               	skipnc
  6817  02A9  0AD3               	incf	OUTFQ@i_461+1,f
  6818  02AA  3000               	movlw	0
  6819  02AB  07D3               	addwf	OUTFQ@i_461+1,f
  6820  02AC  0853               	movf	OUTFQ@i_461+1,w
  6821  02AD  3A80               	xorlw	128
  6822  02AE  00FF               	movwf	127
  6823  02AF  3080               	movlw	128
  6824  02B0  027F               	subwf	127,w
  6825  02B1  1D03               	skipz
  6826  02B2  2AB5               	goto	u2895
  6827  02B3  3011               	movlw	17
  6828  02B4  0252               	subwf	OUTFQ@i_461,w
  6829  02B5                     u2895:	
  6830  02B5  1C03               	skipc
  6831  02B6  28E8               	goto	l3177
  6832  02B7                     l3217:	
  6833                           
  6834                           ;FMCW.c: 166: }
  6835                           ;FMCW.c: 167: }
  6836                           ;FMCW.c: 168: }
  6837                           ;FMCW.c: 169: }
  6838                           ;FMCW.c: 172: for (int i=0; i<17; i++)
  6839  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  6840  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  6841  02B9  01D8               	clrf	OUTFQ@i_463
  6842  02BA  01D9               	clrf	OUTFQ@i_463+1
  6843  02BB  0859               	movf	OUTFQ@i_463+1,w
  6844  02BC  3A80               	xorlw	128
  6845  02BD  00FF               	movwf	127
  6846  02BE  3080               	movlw	128
  6847  02BF  027F               	subwf	127,w
  6848  02C0  1D03               	skipz
  6849  02C1  2AC4               	goto	u2905
  6850  02C2  3011               	movlw	17
  6851  02C3  0258               	subwf	OUTFQ@i_463,w
  6852  02C4                     u2905:	
  6853  02C4  1803               	btfsc	3,0
  6854  02C5  2B0D               	goto	l3235
  6855  02C6                     l3223:	
  6856                           
  6857                           ;FMCW.c: 173: {
  6858                           ;FMCW.c: 174: if(Nprg_b[i] == 0)
  6859  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  6860  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  6861  02C8  0858               	movf	OUTFQ@i_463,w
  6862  02C9  00A0               	movwf	??_OUTFQ
  6863  02CA  0720               	addwf	??_OUTFQ,w
  6864  02CB  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6865  02CC  0084               	movwf	4
  6866  02CD  1383               	bcf	3,7	;select IRP bank0
  6867  02CE  0800               	movf	0,w
  6868  02CF  00A1               	movwf	??_OUTFQ+1
  6869  02D0  0A84               	incf	4,f
  6870  02D1  0800               	movf	0,w
  6871  02D2  00A2               	movwf	??_OUTFQ+2
  6872  02D3  0821               	movf	??_OUTFQ+1,w
  6873  02D4  0422               	iorwf	??_OUTFQ+2,w
  6874  02D5  1D03               	btfss	3,2
  6875  02D6  2AE0               	goto	l3227
  6876                           
  6877                           ;FMCW.c: 175: {
  6878                           ;FMCW.c: 176: L_OUT(fmcwtxrx);
  6879  02D7  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6880  02D8  00F3               	movwf	L_OUT@fmcwtxrx+1
  6881  02D9  0879               	movf	OUTFQ@fmcwtxrx,w
  6882  02DA  00F2               	movwf	L_OUT@fmcwtxrx
  6883  02DB  120A  158A  2264  120A  118A  	fcall	_L_OUT
  6884  02E0                     l3227:	
  6885                           
  6886                           ;FMCW.c: 177: }
  6887                           ;FMCW.c: 178: if(Nprg_b[i] == 1)
  6888  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  6889  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  6890  02E2  0858               	movf	OUTFQ@i_463,w
  6891  02E3  00A0               	movwf	??_OUTFQ
  6892  02E4  0720               	addwf	??_OUTFQ,w
  6893  02E5  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6894  02E6  0084               	movwf	4
  6895  02E7  1383               	bcf	3,7	;select IRP bank0
  6896  02E8  0800               	movf	0,w
  6897  02E9  00A1               	movwf	??_OUTFQ+1
  6898  02EA  0A84               	incf	4,f
  6899  02EB  0800               	movf	0,w
  6900  02EC  00A2               	movwf	??_OUTFQ+2
  6901  02ED  0321               	decf	??_OUTFQ+1,w
  6902  02EE  0422               	iorwf	??_OUTFQ+2,w
  6903  02EF  1D03               	btfss	3,2
  6904  02F0  2AFA               	goto	l3231
  6905                           
  6906                           ;FMCW.c: 179: {
  6907                           ;FMCW.c: 180: H_OUT(fmcwtxrx);
  6908  02F1  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6909  02F2  00F3               	movwf	H_OUT@fmcwtxrx+1
  6910  02F3  0879               	movf	OUTFQ@fmcwtxrx,w
  6911  02F4  00F2               	movwf	H_OUT@fmcwtxrx
  6912  02F5  120A  158A  221E  120A  118A  	fcall	_H_OUT
  6913  02FA                     l3231:	
  6914  02FA  3001               	movlw	1
  6915  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  6916  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  6917  02FD  07D8               	addwf	OUTFQ@i_463,f
  6918  02FE  1803               	skipnc
  6919  02FF  0AD9               	incf	OUTFQ@i_463+1,f
  6920  0300  3000               	movlw	0
  6921  0301  07D9               	addwf	OUTFQ@i_463+1,f
  6922  0302  0859               	movf	OUTFQ@i_463+1,w
  6923  0303  3A80               	xorlw	128
  6924  0304  00FF               	movwf	127
  6925  0305  3080               	movlw	128
  6926  0306  027F               	subwf	127,w
  6927  0307  1D03               	skipz
  6928  0308  2B0B               	goto	u2935
  6929  0309  3011               	movlw	17
  6930  030A  0258               	subwf	OUTFQ@i_463,w
  6931  030B                     u2935:	
  6932  030B  1C03               	skipc
  6933  030C  2AC6               	goto	l3223
  6934  030D                     l3235:	
  6935                           
  6936                           ;FMCW.c: 181: }
  6937                           ;FMCW.c: 182: }
  6938                           ;FMCW.c: 185: H_OUT(fmcwtxrx);
  6939  030D  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6940  030E  00F3               	movwf	H_OUT@fmcwtxrx+1
  6941  030F  0879               	movf	OUTFQ@fmcwtxrx,w
  6942  0310  00F2               	movwf	H_OUT@fmcwtxrx
  6943  0311  120A  158A  221E  120A  118A  	fcall	_H_OUT
  6944                           
  6945                           ;FMCW.c: 186: L_OUT(fmcwtxrx);
  6946  0316  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6947  0317  00F3               	movwf	L_OUT@fmcwtxrx+1
  6948  0318  0879               	movf	OUTFQ@fmcwtxrx,w
  6949  0319  00F2               	movwf	L_OUT@fmcwtxrx
  6950  031A  120A  158A  2264  120A  118A  	fcall	_L_OUT
  6951                           
  6952                           ;FMCW.c: 189: STBOUT(fmcwtxrx);
  6953  031F  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6954  0320  00F3               	movwf	STBOUT@fmcwtxrx+1
  6955  0321  0879               	movf	OUTFQ@fmcwtxrx,w
  6956  0322  00F2               	movwf	STBOUT@fmcwtxrx
  6957  0323  120A  158A  21BC   	fcall	_STBOUT
  6958  0326  0008               	return
  6959  0327                     __end_of_OUTFQ:	
  6960                           
  6961                           	psect	text24
  6962  0AF6                     __ptext24:	
  6963 ;; *************** function ___awdiv *****************
  6964 ;; Defined at:
  6965 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  6966 ;; Parameters:    Size  Location     Type
  6967 ;;  divisor         2    0[COMMON] int 
  6968 ;;  dividend        2    2[COMMON] int 
  6969 ;; Auto vars:     Size  Location     Type
  6970 ;;  quotient        2    7[COMMON] int 
  6971 ;;  sign            1    6[COMMON] unsigned char 
  6972 ;;  counter         1    5[COMMON] unsigned char 
  6973 ;; Return value:  Size  Location     Type
  6974 ;;                  2    0[COMMON] int 
  6975 ;; Registers used:
  6976 ;;		wreg, status,2, status,0
  6977 ;; Tracked objects:
  6978 ;;		On entry : 0/0
  6979 ;;		On exit  : 0/0
  6980 ;;		Unchanged: 0/0
  6981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6982 ;;      Params:         4       0       0       0       0
  6983 ;;      Locals:         4       0       0       0       0
  6984 ;;      Temps:          1       0       0       0       0
  6985 ;;      Totals:         9       0       0       0       0
  6986 ;;Total ram usage:        9 bytes
  6987 ;; Hardware stack levels used:    1
  6988 ;; This function calls:
  6989 ;;		Nothing
  6990 ;; This function is called by:
  6991 ;;		_OUTFQ
  6992 ;;		_RFDOUT
  6993 ;; This function uses a non-reentrant model
  6994 ;;
  6995                           
  6996                           
  6997                           ;psect for function ___awdiv
  6998  0AF6                     ___awdiv:	
  6999                           
  7000                           ;incstack = 0
  7001                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7002  0AF6  01F6               	clrf	___awdiv@sign
  7003  0AF7  1FF1               	btfss	___awdiv@divisor+1,7
  7004  0AF8  2B00               	goto	l2647
  7005  0AF9  09F0               	comf	___awdiv@divisor,f
  7006  0AFA  09F1               	comf	___awdiv@divisor+1,f
  7007  0AFB  0AF0               	incf	___awdiv@divisor,f
  7008  0AFC  1903               	skipnz
  7009  0AFD  0AF1               	incf	___awdiv@divisor+1,f
  7010  0AFE  01F6               	clrf	___awdiv@sign
  7011  0AFF  0AF6               	incf	___awdiv@sign,f
  7012  0B00                     l2647:	
  7013  0B00  1FF3               	btfss	___awdiv@dividend+1,7
  7014  0B01  2B0B               	goto	l2653
  7015  0B02  09F2               	comf	___awdiv@dividend,f
  7016  0B03  09F3               	comf	___awdiv@dividend+1,f
  7017  0B04  0AF2               	incf	___awdiv@dividend,f
  7018  0B05  1903               	skipnz
  7019  0B06  0AF3               	incf	___awdiv@dividend+1,f
  7020  0B07  3001               	movlw	1
  7021  0B08  00F4               	movwf	??___awdiv
  7022  0B09  0874               	movf	??___awdiv,w
  7023  0B0A  06F6               	xorwf	___awdiv@sign,f
  7024  0B0B                     l2653:	
  7025  0B0B  01F7               	clrf	___awdiv@quotient
  7026  0B0C  01F8               	clrf	___awdiv@quotient+1
  7027  0B0D  0870               	movf	___awdiv@divisor,w
  7028  0B0E  0471               	iorwf	___awdiv@divisor+1,w
  7029  0B0F  1903               	btfsc	3,2
  7030  0B10  2B42               	goto	l2675
  7031  0B11  01F5               	clrf	___awdiv@counter
  7032  0B12  0AF5               	incf	___awdiv@counter,f
  7033  0B13                     l2663:	
  7034  0B13  1BF1               	btfsc	___awdiv@divisor+1,7
  7035  0B14  2B21               	goto	l2665
  7036  0B15  3001               	movlw	1
  7037  0B16                     u2055:	
  7038  0B16  1003               	clrc
  7039  0B17  0DF0               	rlf	___awdiv@divisor,f
  7040  0B18  0DF1               	rlf	___awdiv@divisor+1,f
  7041  0B19  3EFF               	addlw	-1
  7042  0B1A  1D03               	skipz
  7043  0B1B  2B16               	goto	u2055
  7044  0B1C  3001               	movlw	1
  7045  0B1D  00F4               	movwf	??___awdiv
  7046  0B1E  0874               	movf	??___awdiv,w
  7047  0B1F  07F5               	addwf	___awdiv@counter,f
  7048  0B20  2B13               	goto	l2663
  7049  0B21                     l2665:	
  7050  0B21  3001               	movlw	1
  7051  0B22                     u2075:	
  7052  0B22  1003               	clrc
  7053  0B23  0DF7               	rlf	___awdiv@quotient,f
  7054  0B24  0DF8               	rlf	___awdiv@quotient+1,f
  7055  0B25  3EFF               	addlw	-1
  7056  0B26  1D03               	skipz
  7057  0B27  2B22               	goto	u2075
  7058  0B28  0871               	movf	___awdiv@divisor+1,w
  7059  0B29  0273               	subwf	___awdiv@dividend+1,w
  7060  0B2A  1D03               	skipz
  7061  0B2B  2B2E               	goto	u2085
  7062  0B2C  0870               	movf	___awdiv@divisor,w
  7063  0B2D  0272               	subwf	___awdiv@dividend,w
  7064  0B2E                     u2085:	
  7065  0B2E  1C03               	skipc
  7066  0B2F  2B37               	goto	l2671
  7067  0B30  0870               	movf	___awdiv@divisor,w
  7068  0B31  02F2               	subwf	___awdiv@dividend,f
  7069  0B32  0871               	movf	___awdiv@divisor+1,w
  7070  0B33  1C03               	skipc
  7071  0B34  03F3               	decf	___awdiv@dividend+1,f
  7072  0B35  02F3               	subwf	___awdiv@dividend+1,f
  7073  0B36  1477               	bsf	___awdiv@quotient,0
  7074  0B37                     l2671:	
  7075  0B37  3001               	movlw	1
  7076  0B38                     u2095:	
  7077  0B38  1003               	clrc
  7078  0B39  0CF1               	rrf	___awdiv@divisor+1,f
  7079  0B3A  0CF0               	rrf	___awdiv@divisor,f
  7080  0B3B  3EFF               	addlw	-1
  7081  0B3C  1D03               	skipz
  7082  0B3D  2B38               	goto	u2095
  7083  0B3E  3001               	movlw	1
  7084  0B3F  02F5               	subwf	___awdiv@counter,f
  7085  0B40  1D03               	btfss	3,2
  7086  0B41  2B21               	goto	l2665
  7087  0B42                     l2675:	
  7088  0B42  0876               	movf	___awdiv@sign,w
  7089  0B43  1903               	btfsc	3,2
  7090  0B44  2B4A               	goto	l2679
  7091  0B45  09F7               	comf	___awdiv@quotient,f
  7092  0B46  09F8               	comf	___awdiv@quotient+1,f
  7093  0B47  0AF7               	incf	___awdiv@quotient,f
  7094  0B48  1903               	skipnz
  7095  0B49  0AF8               	incf	___awdiv@quotient+1,f
  7096  0B4A                     l2679:	
  7097  0B4A  0878               	movf	___awdiv@quotient+1,w
  7098  0B4B  00F1               	movwf	?___awdiv+1
  7099  0B4C  0877               	movf	___awdiv@quotient,w
  7100  0B4D  00F0               	movwf	?___awdiv
  7101  0B4E  0008               	return
  7102  0B4F                     __end_of___awdiv:	
  7103                           
  7104                           	psect	text25
  7105  0CD0                     __ptext25:	
  7106 ;; *************** function _OPINIT *****************
  7107 ;; Defined at:
  7108 ;;		line 241 in file "FMCW.c"
  7109 ;; Parameters:    Size  Location     Type
  7110 ;;  fmcwtxrx        2    4[COMMON] int 
  7111 ;; Auto vars:     Size  Location     Type
  7112 ;;		None
  7113 ;; Return value:  Size  Location     Type
  7114 ;;                  1    wreg      void 
  7115 ;; Registers used:
  7116 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7117 ;; Tracked objects:
  7118 ;;		On entry : 0/0
  7119 ;;		On exit  : 0/0
  7120 ;;		Unchanged: 0/0
  7121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7122 ;;      Params:         2       0       0       0       0
  7123 ;;      Locals:         0       0       0       0       0
  7124 ;;      Temps:          0       0       0       0       0
  7125 ;;      Totals:         2       0       0       0       0
  7126 ;;Total ram usage:        2 bytes
  7127 ;; Hardware stack levels used:    1
  7128 ;; Hardware stack levels required when called:    2
  7129 ;; This function calls:
  7130 ;;		_H_OUT
  7131 ;;		_L_OUT
  7132 ;;		_STBOUT
  7133 ;; This function is called by:
  7134 ;;		_FMTX
  7135 ;;		_CWTX
  7136 ;;		_FMRX
  7137 ;; This function uses a non-reentrant model
  7138 ;;
  7139                           
  7140                           
  7141                           ;psect for function _OPINIT
  7142  0CD0                     _OPINIT:	
  7143                           
  7144                           ;FMCW.c: 243: L_OUT(fmcwtxrx);
  7145                           
  7146                           ;incstack = 0
  7147                           ; Regs used in _OPINIT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7148  0CD0  0875               	movf	OPINIT@fmcwtxrx+1,w
  7149  0CD1  00F3               	movwf	L_OUT@fmcwtxrx+1
  7150  0CD2  0874               	movf	OPINIT@fmcwtxrx,w
  7151  0CD3  00F2               	movwf	L_OUT@fmcwtxrx
  7152  0CD4  120A  158A  2264  120A  158A  	fcall	_L_OUT
  7153                           
  7154                           ;FMCW.c: 244: L_OUT(fmcwtxrx);
  7155  0CD9  0875               	movf	OPINIT@fmcwtxrx+1,w
  7156  0CDA  00F3               	movwf	L_OUT@fmcwtxrx+1
  7157  0CDB  0874               	movf	OPINIT@fmcwtxrx,w
  7158  0CDC  00F2               	movwf	L_OUT@fmcwtxrx
  7159  0CDD  120A  158A  2264  120A  158A  	fcall	_L_OUT
  7160                           
  7161                           ;FMCW.c: 245: L_OUT(fmcwtxrx);
  7162  0CE2  0875               	movf	OPINIT@fmcwtxrx+1,w
  7163  0CE3  00F3               	movwf	L_OUT@fmcwtxrx+1
  7164  0CE4  0874               	movf	OPINIT@fmcwtxrx,w
  7165  0CE5  00F2               	movwf	L_OUT@fmcwtxrx
  7166  0CE6  120A  158A  2264  120A  158A  	fcall	_L_OUT
  7167                           
  7168                           ;FMCW.c: 246: H_OUT(fmcwtxrx);
  7169  0CEB  0875               	movf	OPINIT@fmcwtxrx+1,w
  7170  0CEC  00F3               	movwf	H_OUT@fmcwtxrx+1
  7171  0CED  0874               	movf	OPINIT@fmcwtxrx,w
  7172  0CEE  00F2               	movwf	H_OUT@fmcwtxrx
  7173  0CEF  120A  158A  221E  120A  158A  	fcall	_H_OUT
  7174                           
  7175                           ;FMCW.c: 247: H_OUT(fmcwtxrx);
  7176  0CF4  0875               	movf	OPINIT@fmcwtxrx+1,w
  7177  0CF5  00F3               	movwf	H_OUT@fmcwtxrx+1
  7178  0CF6  0874               	movf	OPINIT@fmcwtxrx,w
  7179  0CF7  00F2               	movwf	H_OUT@fmcwtxrx
  7180  0CF8  120A  158A  221E  120A  158A  	fcall	_H_OUT
  7181                           
  7182                           ;FMCW.c: 248: L_OUT(fmcwtxrx);
  7183  0CFD  0875               	movf	OPINIT@fmcwtxrx+1,w
  7184  0CFE  00F3               	movwf	L_OUT@fmcwtxrx+1
  7185  0CFF  0874               	movf	OPINIT@fmcwtxrx,w
  7186  0D00  00F2               	movwf	L_OUT@fmcwtxrx
  7187  0D01  120A  158A  2264  120A  158A  	fcall	_L_OUT
  7188                           
  7189                           ;FMCW.c: 249: L_OUT(fmcwtxrx);
  7190  0D06  0875               	movf	OPINIT@fmcwtxrx+1,w
  7191  0D07  00F3               	movwf	L_OUT@fmcwtxrx+1
  7192  0D08  0874               	movf	OPINIT@fmcwtxrx,w
  7193  0D09  00F2               	movwf	L_OUT@fmcwtxrx
  7194  0D0A  120A  158A  2264  120A  158A  	fcall	_L_OUT
  7195                           
  7196                           ;FMCW.c: 250: L_OUT(fmcwtxrx);
  7197  0D0F  0875               	movf	OPINIT@fmcwtxrx+1,w
  7198  0D10  00F3               	movwf	L_OUT@fmcwtxrx+1
  7199  0D11  0874               	movf	OPINIT@fmcwtxrx,w
  7200  0D12  00F2               	movwf	L_OUT@fmcwtxrx
  7201  0D13  120A  158A  2264  120A  158A  	fcall	_L_OUT
  7202                           
  7203                           ;FMCW.c: 251: L_OUT(fmcwtxrx);
  7204  0D18  0875               	movf	OPINIT@fmcwtxrx+1,w
  7205  0D19  00F3               	movwf	L_OUT@fmcwtxrx+1
  7206  0D1A  0874               	movf	OPINIT@fmcwtxrx,w
  7207  0D1B  00F2               	movwf	L_OUT@fmcwtxrx
  7208  0D1C  120A  158A  2264  120A  158A  	fcall	_L_OUT
  7209                           
  7210                           ;FMCW.c: 252: L_OUT(fmcwtxrx);
  7211  0D21  0875               	movf	OPINIT@fmcwtxrx+1,w
  7212  0D22  00F3               	movwf	L_OUT@fmcwtxrx+1
  7213  0D23  0874               	movf	OPINIT@fmcwtxrx,w
  7214  0D24  00F2               	movwf	L_OUT@fmcwtxrx
  7215  0D25  120A  158A  2264  120A  158A  	fcall	_L_OUT
  7216                           
  7217                           ;FMCW.c: 253: H_OUT(fmcwtxrx);
  7218  0D2A  0875               	movf	OPINIT@fmcwtxrx+1,w
  7219  0D2B  00F3               	movwf	H_OUT@fmcwtxrx+1
  7220  0D2C  0874               	movf	OPINIT@fmcwtxrx,w
  7221  0D2D  00F2               	movwf	H_OUT@fmcwtxrx
  7222  0D2E  120A  158A  221E  120A  158A  	fcall	_H_OUT
  7223                           
  7224                           ;FMCW.c: 256: L_OUT(fmcwtxrx);
  7225  0D33  0875               	movf	OPINIT@fmcwtxrx+1,w
  7226  0D34  00F3               	movwf	L_OUT@fmcwtxrx+1
  7227  0D35  0874               	movf	OPINIT@fmcwtxrx,w
  7228  0D36  00F2               	movwf	L_OUT@fmcwtxrx
  7229  0D37  120A  158A  2264  120A  158A  	fcall	_L_OUT
  7230                           
  7231                           ;FMCW.c: 257: L_OUT(fmcwtxrx);
  7232  0D3C  0875               	movf	OPINIT@fmcwtxrx+1,w
  7233  0D3D  00F3               	movwf	L_OUT@fmcwtxrx+1
  7234  0D3E  0874               	movf	OPINIT@fmcwtxrx,w
  7235  0D3F  00F2               	movwf	L_OUT@fmcwtxrx
  7236  0D40  120A  158A  2264  120A  158A  	fcall	_L_OUT
  7237                           
  7238                           ;FMCW.c: 260: STBOUT(fmcwtxrx);
  7239  0D45  0875               	movf	OPINIT@fmcwtxrx+1,w
  7240  0D46  00F3               	movwf	STBOUT@fmcwtxrx+1
  7241  0D47  0874               	movf	OPINIT@fmcwtxrx,w
  7242  0D48  00F2               	movwf	STBOUT@fmcwtxrx
  7243  0D49  120A  158A  21BC   	fcall	_STBOUT
  7244  0D4C  0008               	return
  7245  0D4D                     __end_of_OPINIT:	
  7246                           
  7247                           	psect	text26
  7248  09BC                     __ptext26:	
  7249 ;; *************** function _STBOUT *****************
  7250 ;; Defined at:
  7251 ;;		line 107 in file "FMCW.c"
  7252 ;; Parameters:    Size  Location     Type
  7253 ;;  fmcwtxrx        2    2[COMMON] int 
  7254 ;; Auto vars:     Size  Location     Type
  7255 ;;		None
  7256 ;; Return value:  Size  Location     Type
  7257 ;;                  1    wreg      void 
  7258 ;; Registers used:
  7259 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7260 ;; Tracked objects:
  7261 ;;		On entry : 0/0
  7262 ;;		On exit  : 0/0
  7263 ;;		Unchanged: 0/0
  7264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7265 ;;      Params:         2       0       0       0       0
  7266 ;;      Locals:         0       0       0       0       0
  7267 ;;      Temps:          0       0       0       0       0
  7268 ;;      Totals:         2       0       0       0       0
  7269 ;;Total ram usage:        2 bytes
  7270 ;; Hardware stack levels used:    1
  7271 ;; Hardware stack levels required when called:    1
  7272 ;; This function calls:
  7273 ;;		__NOP
  7274 ;; This function is called by:
  7275 ;;		_OUTFQ
  7276 ;;		_RFDOUT
  7277 ;;		_OPINIT
  7278 ;; This function uses a non-reentrant model
  7279 ;;
  7280                           
  7281                           
  7282                           ;psect for function _STBOUT
  7283  09BC                     _STBOUT:	
  7284                           
  7285                           ;FMCW.c: 108: if(fmcwtxrx == 1)
  7286                           
  7287                           ;incstack = 0
  7288                           ; Regs used in _STBOUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7289  09BC  0372               	decf	STBOUT@fmcwtxrx,w
  7290  09BD  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7291  09BE  1D03               	btfss	3,2
  7292  09BF  29CB               	goto	l2623
  7293                           
  7294                           ;FMCW.c: 109: {
  7295                           ;FMCW.c: 110: PORTAbits.RA5 = 1;
  7296  09C0  1283               	bcf	3,5	;RP0=0, select bank0
  7297  09C1  1303               	bcf	3,6	;RP1=0, select bank0
  7298  09C2  1685               	bsf	5,5	;volatile
  7299                           
  7300                           ;FMCW.c: 111: _NOP();
  7301  09C3  120A  158A  2076  120A  158A  	fcall	__NOP
  7302                           
  7303                           ;FMCW.c: 112: PORTAbits.RA5 = 0;
  7304  09C8  1283               	bcf	3,5	;RP0=0, select bank0
  7305  09C9  1303               	bcf	3,6	;RP1=0, select bank0
  7306  09CA  1285               	bcf	5,5	;volatile
  7307  09CB                     l2623:	
  7308                           
  7309                           ;FMCW.c: 113: }
  7310                           ;FMCW.c: 114: if(fmcwtxrx == 2)
  7311  09CB  3002               	movlw	2
  7312  09CC  0672               	xorwf	STBOUT@fmcwtxrx,w
  7313  09CD  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7314  09CE  1D03               	btfss	3,2
  7315  09CF  29DB               	goto	l2631
  7316                           
  7317                           ;FMCW.c: 115: {
  7318                           ;FMCW.c: 116: PORTDbits.RD0 = 1;
  7319  09D0  1283               	bcf	3,5	;RP0=0, select bank0
  7320  09D1  1303               	bcf	3,6	;RP1=0, select bank0
  7321  09D2  1408               	bsf	8,0	;volatile
  7322                           
  7323                           ;FMCW.c: 117: _NOP();
  7324  09D3  120A  158A  2076  120A  158A  	fcall	__NOP
  7325                           
  7326                           ;FMCW.c: 118: PORTDbits.RD0 = 0;
  7327  09D8  1283               	bcf	3,5	;RP0=0, select bank0
  7328  09D9  1303               	bcf	3,6	;RP1=0, select bank0
  7329  09DA  1008               	bcf	8,0	;volatile
  7330  09DB                     l2631:	
  7331                           
  7332                           ;FMCW.c: 119: }
  7333                           ;FMCW.c: 120: if(fmcwtxrx == 3)
  7334  09DB  3003               	movlw	3
  7335  09DC  0672               	xorwf	STBOUT@fmcwtxrx,w
  7336  09DD  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7337  09DE  1D03               	btfss	3,2
  7338  09DF  0008               	return
  7339                           
  7340                           ;FMCW.c: 121: {
  7341                           ;FMCW.c: 122: PORTAbits.RA4 = 1;
  7342  09E0  1283               	bcf	3,5	;RP0=0, select bank0
  7343  09E1  1303               	bcf	3,6	;RP1=0, select bank0
  7344  09E2  1605               	bsf	5,4	;volatile
  7345                           
  7346                           ;FMCW.c: 123: _NOP();
  7347  09E3  120A  158A  2076   	fcall	__NOP
  7348                           
  7349                           ;FMCW.c: 124: PORTAbits.RA4 = 0;
  7350  09E6  1283               	bcf	3,5	;RP0=0, select bank0
  7351  09E7  1303               	bcf	3,6	;RP1=0, select bank0
  7352  09E8  1205               	bcf	5,4	;volatile
  7353  09E9  0008               	return
  7354  09EA                     __end_of_STBOUT:	
  7355                           
  7356                           	psect	text27
  7357  0A64                     __ptext27:	
  7358 ;; *************** function _L_OUT *****************
  7359 ;; Defined at:
  7360 ;;		line 40 in file "FMCW.c"
  7361 ;; Parameters:    Size  Location     Type
  7362 ;;  fmcwtxrx        2    2[COMMON] int 
  7363 ;; Auto vars:     Size  Location     Type
  7364 ;;		None
  7365 ;; Return value:  Size  Location     Type
  7366 ;;                  1    wreg      void 
  7367 ;; Registers used:
  7368 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7369 ;; Tracked objects:
  7370 ;;		On entry : 0/0
  7371 ;;		On exit  : 0/0
  7372 ;;		Unchanged: 0/0
  7373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7374 ;;      Params:         2       0       0       0       0
  7375 ;;      Locals:         0       0       0       0       0
  7376 ;;      Temps:          0       0       0       0       0
  7377 ;;      Totals:         2       0       0       0       0
  7378 ;;Total ram usage:        2 bytes
  7379 ;; Hardware stack levels used:    1
  7380 ;; Hardware stack levels required when called:    1
  7381 ;; This function calls:
  7382 ;;		__NOP
  7383 ;; This function is called by:
  7384 ;;		_OUTFQ
  7385 ;;		_RFDOUT
  7386 ;;		_OPINIT
  7387 ;; This function uses a non-reentrant model
  7388 ;;
  7389                           
  7390                           
  7391                           ;psect for function _L_OUT
  7392  0A64                     _L_OUT:	
  7393                           
  7394                           ;FMCW.c: 41: if(fmcwtxrx == 1)
  7395                           
  7396                           ;incstack = 0
  7397                           ; Regs used in _L_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7398  0A64  0372               	decf	L_OUT@fmcwtxrx,w
  7399  0A65  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7400  0A66  1D03               	btfss	3,2
  7401  0A67  2A7B               	goto	l2565
  7402                           
  7403                           ;FMCW.c: 42: {
  7404                           ;FMCW.c: 43: PORTEbits.RE0 = 0;
  7405  0A68  1283               	bcf	3,5	;RP0=0, select bank0
  7406  0A69  1303               	bcf	3,6	;RP1=0, select bank0
  7407  0A6A  1009               	bcf	9,0	;volatile
  7408                           
  7409                           ;FMCW.c: 44: _NOP();
  7410  0A6B  120A  158A  2076  120A  158A  	fcall	__NOP
  7411                           
  7412                           ;FMCW.c: 45: PORTEbits.RE1 = 1;
  7413  0A70  1283               	bcf	3,5	;RP0=0, select bank0
  7414  0A71  1303               	bcf	3,6	;RP1=0, select bank0
  7415  0A72  1489               	bsf	9,1	;volatile
  7416                           
  7417                           ;FMCW.c: 46: _NOP();
  7418  0A73  120A  158A  2076  120A  158A  	fcall	__NOP
  7419                           
  7420                           ;FMCW.c: 47: PORTEbits.RE1 = 0;
  7421  0A78  1283               	bcf	3,5	;RP0=0, select bank0
  7422  0A79  1303               	bcf	3,6	;RP1=0, select bank0
  7423  0A7A  1089               	bcf	9,1	;volatile
  7424  0A7B                     l2565:	
  7425                           
  7426                           ;FMCW.c: 48: }
  7427                           ;FMCW.c: 49: if(fmcwtxrx == 2)
  7428  0A7B  3002               	movlw	2
  7429  0A7C  0672               	xorwf	L_OUT@fmcwtxrx,w
  7430  0A7D  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7431  0A7E  1D03               	btfss	3,2
  7432  0A7F  2A93               	goto	l2575
  7433                           
  7434                           ;FMCW.c: 50: {
  7435                           ;FMCW.c: 51: PORTDbits.RD1 = 0;
  7436  0A80  1283               	bcf	3,5	;RP0=0, select bank0
  7437  0A81  1303               	bcf	3,6	;RP1=0, select bank0
  7438  0A82  1088               	bcf	8,1	;volatile
  7439                           
  7440                           ;FMCW.c: 52: _NOP();
  7441  0A83  120A  158A  2076  120A  158A  	fcall	__NOP
  7442                           
  7443                           ;FMCW.c: 53: PORTDbits.RD2 = 1;
  7444  0A88  1283               	bcf	3,5	;RP0=0, select bank0
  7445  0A89  1303               	bcf	3,6	;RP1=0, select bank0
  7446  0A8A  1508               	bsf	8,2	;volatile
  7447                           
  7448                           ;FMCW.c: 54: _NOP();
  7449  0A8B  120A  158A  2076  120A  158A  	fcall	__NOP
  7450                           
  7451                           ;FMCW.c: 55: PORTDbits.RD2 = 0;
  7452  0A90  1283               	bcf	3,5	;RP0=0, select bank0
  7453  0A91  1303               	bcf	3,6	;RP1=0, select bank0
  7454  0A92  1108               	bcf	8,2	;volatile
  7455  0A93                     l2575:	
  7456                           
  7457                           ;FMCW.c: 56: }
  7458                           ;FMCW.c: 57: if(fmcwtxrx == 3)
  7459  0A93  3003               	movlw	3
  7460  0A94  0672               	xorwf	L_OUT@fmcwtxrx,w
  7461  0A95  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7462  0A96  1D03               	btfss	3,2
  7463  0A97  0008               	return
  7464                           
  7465                           ;FMCW.c: 58: {
  7466                           ;FMCW.c: 59: PORTAbits.RA3 = 0;
  7467  0A98  1283               	bcf	3,5	;RP0=0, select bank0
  7468  0A99  1303               	bcf	3,6	;RP1=0, select bank0
  7469  0A9A  1185               	bcf	5,3	;volatile
  7470                           
  7471                           ;FMCW.c: 60: _NOP();
  7472  0A9B  120A  158A  2076  120A  158A  	fcall	__NOP
  7473                           
  7474                           ;FMCW.c: 61: PORTAbits.RA2 = 1;
  7475  0AA0  1283               	bcf	3,5	;RP0=0, select bank0
  7476  0AA1  1303               	bcf	3,6	;RP1=0, select bank0
  7477  0AA2  1505               	bsf	5,2	;volatile
  7478                           
  7479                           ;FMCW.c: 62: _NOP();
  7480  0AA3  120A  158A  2076   	fcall	__NOP
  7481                           
  7482                           ;FMCW.c: 63: PORTAbits.RA2 = 0;
  7483  0AA6  1283               	bcf	3,5	;RP0=0, select bank0
  7484  0AA7  1303               	bcf	3,6	;RP1=0, select bank0
  7485  0AA8  1105               	bcf	5,2	;volatile
  7486  0AA9  0008               	return
  7487  0AAA                     __end_of_L_OUT:	
  7488                           
  7489                           	psect	text28
  7490  0A1E                     __ptext28:	
  7491 ;; *************** function _H_OUT *****************
  7492 ;; Defined at:
  7493 ;;		line 74 in file "FMCW.c"
  7494 ;; Parameters:    Size  Location     Type
  7495 ;;  fmcwtxrx        2    2[COMMON] int 
  7496 ;; Auto vars:     Size  Location     Type
  7497 ;;		None
  7498 ;; Return value:  Size  Location     Type
  7499 ;;                  1    wreg      void 
  7500 ;; Registers used:
  7501 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7502 ;; Tracked objects:
  7503 ;;		On entry : 0/0
  7504 ;;		On exit  : 0/0
  7505 ;;		Unchanged: 0/0
  7506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7507 ;;      Params:         2       0       0       0       0
  7508 ;;      Locals:         0       0       0       0       0
  7509 ;;      Temps:          0       0       0       0       0
  7510 ;;      Totals:         2       0       0       0       0
  7511 ;;Total ram usage:        2 bytes
  7512 ;; Hardware stack levels used:    1
  7513 ;; Hardware stack levels required when called:    1
  7514 ;; This function calls:
  7515 ;;		__NOP
  7516 ;; This function is called by:
  7517 ;;		_OUTFQ
  7518 ;;		_RFDOUT
  7519 ;;		_OPINIT
  7520 ;; This function uses a non-reentrant model
  7521 ;;
  7522                           
  7523                           
  7524                           ;psect for function _H_OUT
  7525  0A1E                     _H_OUT:	
  7526                           
  7527                           ;FMCW.c: 75: if(fmcwtxrx == 1)
  7528                           
  7529                           ;incstack = 0
  7530                           ; Regs used in _H_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7531  0A1E  0372               	decf	H_OUT@fmcwtxrx,w
  7532  0A1F  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7533  0A20  1D03               	btfss	3,2
  7534  0A21  2A35               	goto	l2595
  7535                           
  7536                           ;FMCW.c: 76: {
  7537                           ;FMCW.c: 77: PORTEbits.RE0 = 1;
  7538  0A22  1283               	bcf	3,5	;RP0=0, select bank0
  7539  0A23  1303               	bcf	3,6	;RP1=0, select bank0
  7540  0A24  1409               	bsf	9,0	;volatile
  7541                           
  7542                           ;FMCW.c: 78: _NOP();
  7543  0A25  120A  158A  2076  120A  158A  	fcall	__NOP
  7544                           
  7545                           ;FMCW.c: 79: PORTEbits.RE1 = 1;
  7546  0A2A  1283               	bcf	3,5	;RP0=0, select bank0
  7547  0A2B  1303               	bcf	3,6	;RP1=0, select bank0
  7548  0A2C  1489               	bsf	9,1	;volatile
  7549                           
  7550                           ;FMCW.c: 80: _NOP();
  7551  0A2D  120A  158A  2076  120A  158A  	fcall	__NOP
  7552                           
  7553                           ;FMCW.c: 81: PORTEbits.RE1 = 0;
  7554  0A32  1283               	bcf	3,5	;RP0=0, select bank0
  7555  0A33  1303               	bcf	3,6	;RP1=0, select bank0
  7556  0A34  1089               	bcf	9,1	;volatile
  7557  0A35                     l2595:	
  7558                           
  7559                           ;FMCW.c: 82: }
  7560                           ;FMCW.c: 83: if(fmcwtxrx == 2)
  7561  0A35  3002               	movlw	2
  7562  0A36  0672               	xorwf	H_OUT@fmcwtxrx,w
  7563  0A37  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7564  0A38  1D03               	btfss	3,2
  7565  0A39  2A4D               	goto	l2605
  7566                           
  7567                           ;FMCW.c: 84: {
  7568                           ;FMCW.c: 85: PORTDbits.RD1 = 1;
  7569  0A3A  1283               	bcf	3,5	;RP0=0, select bank0
  7570  0A3B  1303               	bcf	3,6	;RP1=0, select bank0
  7571  0A3C  1488               	bsf	8,1	;volatile
  7572                           
  7573                           ;FMCW.c: 86: _NOP();
  7574  0A3D  120A  158A  2076  120A  158A  	fcall	__NOP
  7575                           
  7576                           ;FMCW.c: 87: PORTDbits.RD2 = 1;
  7577  0A42  1283               	bcf	3,5	;RP0=0, select bank0
  7578  0A43  1303               	bcf	3,6	;RP1=0, select bank0
  7579  0A44  1508               	bsf	8,2	;volatile
  7580                           
  7581                           ;FMCW.c: 88: _NOP();
  7582  0A45  120A  158A  2076  120A  158A  	fcall	__NOP
  7583                           
  7584                           ;FMCW.c: 89: PORTDbits.RD2 = 0;
  7585  0A4A  1283               	bcf	3,5	;RP0=0, select bank0
  7586  0A4B  1303               	bcf	3,6	;RP1=0, select bank0
  7587  0A4C  1108               	bcf	8,2	;volatile
  7588  0A4D                     l2605:	
  7589                           
  7590                           ;FMCW.c: 90: }
  7591                           ;FMCW.c: 91: if(fmcwtxrx == 3)
  7592  0A4D  3003               	movlw	3
  7593  0A4E  0672               	xorwf	H_OUT@fmcwtxrx,w
  7594  0A4F  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7595  0A50  1D03               	btfss	3,2
  7596  0A51  0008               	return
  7597                           
  7598                           ;FMCW.c: 92: {
  7599                           ;FMCW.c: 93: PORTAbits.RA3 = 1;
  7600  0A52  1283               	bcf	3,5	;RP0=0, select bank0
  7601  0A53  1303               	bcf	3,6	;RP1=0, select bank0
  7602  0A54  1585               	bsf	5,3	;volatile
  7603                           
  7604                           ;FMCW.c: 94: _NOP();
  7605  0A55  120A  158A  2076  120A  158A  	fcall	__NOP
  7606                           
  7607                           ;FMCW.c: 95: PORTAbits.RA2 = 1;
  7608  0A5A  1283               	bcf	3,5	;RP0=0, select bank0
  7609  0A5B  1303               	bcf	3,6	;RP1=0, select bank0
  7610  0A5C  1505               	bsf	5,2	;volatile
  7611                           
  7612                           ;FMCW.c: 96: _NOP();
  7613  0A5D  120A  158A  2076   	fcall	__NOP
  7614                           
  7615                           ;FMCW.c: 97: PORTAbits.RA2 = 0;
  7616  0A60  1283               	bcf	3,5	;RP0=0, select bank0
  7617  0A61  1303               	bcf	3,6	;RP1=0, select bank0
  7618  0A62  1105               	bcf	5,2	;volatile
  7619  0A63  0008               	return
  7620  0A64                     __end_of_H_OUT:	
  7621                           
  7622                           	psect	text29
  7623  0876                     __ptext29:	
  7624 ;; *************** function __NOP *****************
  7625 ;; Defined at:
  7626 ;;		line 349 in file "FMCW.c"
  7627 ;; Parameters:    Size  Location     Type
  7628 ;;		None
  7629 ;; Auto vars:     Size  Location     Type
  7630 ;;  i               2    0[COMMON] int 
  7631 ;; Return value:  Size  Location     Type
  7632 ;;                  1    wreg      void 
  7633 ;; Registers used:
  7634 ;;		wreg, status,2, btemp+1
  7635 ;; Tracked objects:
  7636 ;;		On entry : 0/0
  7637 ;;		On exit  : 0/0
  7638 ;;		Unchanged: 0/0
  7639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7640 ;;      Params:         0       0       0       0       0
  7641 ;;      Locals:         2       0       0       0       0
  7642 ;;      Temps:          0       0       0       0       0
  7643 ;;      Totals:         2       0       0       0       0
  7644 ;;Total ram usage:        2 bytes
  7645 ;; Hardware stack levels used:    1
  7646 ;; This function calls:
  7647 ;;		Nothing
  7648 ;; This function is called by:
  7649 ;;		_L_OUT
  7650 ;;		_H_OUT
  7651 ;;		_STBOUT
  7652 ;; This function uses a non-reentrant model
  7653 ;;
  7654                           
  7655                           
  7656                           ;psect for function __NOP
  7657  0876                     __NOP:	
  7658                           
  7659                           ;FMCW.c: 350: for(int i=0; i<5; i++){
  7660                           
  7661                           ;incstack = 0
  7662                           ; Regs used in __NOP: [wreg+status,2+btemp+1]
  7663  0876  01F0               	clrf	__NOP@i
  7664  0877  01F1               	clrf	__NOP@i+1
  7665  0878                     L9:	
  7666  0878  0871               	movf	__NOP@i+1,w
  7667  0879  3A80               	xorlw	128
  7668  087A  00FF               	movwf	127
  7669  087B  3080               	movlw	128
  7670  087C  027F               	subwf	127,w
  7671  087D  1D03               	skipz
  7672  087E  2881               	goto	u1865
  7673  087F  3005               	movlw	5
  7674  0880  0270               	subwf	__NOP@i,w
  7675  0881                     u1865:	
  7676  0881  1803               	btfsc	3,0
  7677  0882  0008               	return
  7678                           
  7679                           ;FMCW.c: 351: __nop();
  7680  0883  0000               	nop
  7681  0884  3001               	movlw	1
  7682  0885  07F0               	addwf	__NOP@i,f
  7683  0886  1803               	skipnc
  7684  0887  0AF1               	incf	__NOP@i+1,f
  7685  0888  3000               	movlw	0
  7686  0889  07F1               	addwf	__NOP@i+1,f
  7687  088A  2878               	goto	L9
  7688  088B                     __end_of__NOP:	
  7689  007E                     btemp	set	126	;btemp
  7690  007E                     wtemp	set	126
  7691  007E                     wtemp0	set	126
  7692  0080                     wtemp1	set	128
  7693  0082                     wtemp2	set	130
  7694  0084                     wtemp3	set	132
  7695  0086                     wtemp4	set	134
  7696  0088                     wtemp5	set	136
  7697  007F                     wtemp6	set	127
  7698  007E                     ttemp	set	126
  7699  007E                     ttemp0	set	126
  7700  0081                     ttemp1	set	129
  7701  0084                     ttemp2	set	132
  7702  0087                     ttemp3	set	135
  7703  007F                     ttemp4	set	127
  7704  007E                     ltemp	set	126
  7705  007E                     ltemp0	set	126
  7706  0082                     ltemp1	set	130
  7707  0086                     ltemp2	set	134
  7708  0080                     ltemp3	set	128


Data Sizes:
    Strings     22
    Constant    2
    Data        91
    BSS         121
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      80
    BANK1            80     34      73
    BANK3            96      0      90
    BANK2            96      0      73

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_15(CODE[8]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 

    FMRX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), FMRX_Nprg(BANK3[10]), 

    CWTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@CWTX_Nprg(BANK1[10]), CWTX_Nprg(BANK1[10]), 

    FMTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    OUTFQ@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), main@CWTX_Nprg(BANK1[10]), main@FMTX_Nprg(BANK1[10]), 
		 -> FMRX_Nprg(BANK3[10]), CWTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    sp__EEPROM_Read	PTR unsigned char  size(1) Largest target is 32
		 -> EEPROMData(BANK2[32]), 

    EEPROM_Write@data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK2[16]), 

    main@dData	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK2[16]), 

    sp__ReceivePacket_data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK2[16]), 


Critical Paths under _main in COMMON

    _printf->_putch
    _ReceivePacket_data->_fcscheck
    _ReceivePacket_data->_waitFlag
    _waitFlag->_getbit
    _getdata->_getbit
    _NM_waddress->_putch
    _Init_I2C_M->___lldiv
    _FMTX->_OUTFQ
    _FMTX->_RFDOUT
    _FMRX->_OUTFQ
    _FMRX->_RFDOUT
    _EEPROM_Write->_I2C_Master_Write
    _CWTX->_OUTFQ
    _CWTX->_RFDOUT
    _RFDOUT->___awdiv
    _OUTFQ->___awdiv
    _OPINIT->_H_OUT
    _OPINIT->_L_OUT
    _OPINIT->_STBOUT
    _STBOUT->__NOP
    _L_OUT->__NOP
    _H_OUT->__NOP

Critical Paths under _main in BANK0

    _main->_CWTX
    _main->_FMRX
    _main->_FMTX
    _ReceivePacket_data->_waitFlag
    _FMTX->_OUTFQ
    _FMRX->_OUTFQ
    _CWTX->_OUTFQ

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                38    38      0   33148
                                             66 BANK0      4     4      0
                                              0 BANK1     34    34      0
                               _CWTX
                       _EEPROM_Write
                               _FMRX
                               _FMTX
                         _Init_I2C_M
                           _Init_MPU
                        _Init_SERIAL
                        _NM_waddress
                 _ReceivePacket_data
                          _Reset_EPS
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              16    16      0      95
                                              1 COMMON     4     4      0
                              _putch
 ---------------------------------------------------------------------------------
 (1) _Reset_EPS                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ReceivePacket_data                                   6     6      0    2691
                                             10 COMMON     2     2      0
                                             29 BANK0      4     4      0
                           _fcscheck
                            _getdata
                           _waitFlag
 ---------------------------------------------------------------------------------
 (2) _waitFlag                                            33    33      0    2205
                                              6 COMMON     4     4      0
                                              0 BANK0     29    29      0
                             _getbit
 ---------------------------------------------------------------------------------
 (2) _getdata                                             10    10      0     212
                                              6 COMMON     2     2      0
                                              0 BANK0      7     7      0
                             _getbit
 ---------------------------------------------------------------------------------
 (3) _getbit                                               6     4      2      46
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _fcscheck                                            10     8      2     161
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (1) _NM_waddress                                          3     1      2     194
                                              1 COMMON     3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_SERIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_MPU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_I2C_M                                           8     4      4     343
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _FMTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _FMRX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         8     5      3     739
                                              2 COMMON     8     5      3
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     446
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CWTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (2) _RFDOUT                                              37    33      4    3231
                                              9 COMMON     4     0      4
                                              0 BANK0     33    33      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _OUTFQ                                               64    60      4    3853
                                              9 COMMON     4     0      4
                                              0 BANK0     60    60      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _OPINIT                                               2     0      2    2075
                                              4 COMMON     2     0      2
                              _H_OUT
                              _L_OUT
                             _STBOUT
 ---------------------------------------------------------------------------------
 (3) _STBOUT                                               2     0      2     271
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _L_OUT                                                2     0      2     801
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _H_OUT                                                2     0      2     536
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (4) __NOP                                                 2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CWTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _EEPROM_Write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _FMRX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _FMTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _Init_I2C_M
     ___lldiv
   _Init_MPU
   _Init_SERIAL
   _NM_waddress
     _putch
   _ReceivePacket_data
     _fcscheck
     _getdata
       _getbit
     _waitFlag
       _getbit
   _Reset_EPS
   _printf
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      5A       9       93.8%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      49      11       76.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     22      49       7       91.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     46      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     14A      12        0.0%
ABS                  0      0     14A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Feb 19 20:10:00 2018

                           pc 0002                   __CFG_CP$OFF 0000                            l65 083B  
                ___awdiv@sign 0076                            fsr 0004                           l207 0566  
                         l272 0091                           l435 0FF0                           l436 0FDD  
                         l491 084A                           _RA1 0029                           _RB2 0032  
                         _RC2 003A                           _RB4 0034                           _RB5 0035  
                         _PEN 048A                  __CFG_CPD$OFF 0000                           _SEN 0488  
                         _RX9 00C6                           _TX9 04C6                           fsr0 0004  
                         indf 0000                  __CFG_FOSC$HS 0000                  __CFG_LVP$OFF 0000  
                        l3101 0C13                          l3021 072E                          l3007 0706  
                        l3121 0076                          l3033 075C                          l3017 0721  
                        l3203 0205                          l3115 0059                          l3043 0777  
                        l3205 020C                          l3213 02A4                          l3301 0BF4  
                        l3141 00A9                          l3231 02FA                          l3223 02C6  
                        l3127 008A                          l3047 0784                          l3209 0293  
                        l3217 02B7                          l3305 0C01                          l3129 0038  
                        l3081 0C33                          l3065 07B0                          l3227 02E0  
                        l3235 030D                          l3171 00D9                          l3243 0D5C  
                        l3091 0C4F                          l3083 0C36                          l3067 032F  
                        l2605 0A4D                          l3165 00BD                          l2701 0336  
                        l2631 09DB                          l2623 09CB                          l3183 00F7  
                        l3263 0DBE                          l3255 0D87                          l3087 0C44  
                        l2703 0355                          l3193 0160                          l3177 00E8  
                        l3273 0DE7                          l3281 0E14                          l3249 0D78  
                        l2545 0AE4                          l3195 019D                          l3291 0BBC  
                        l2547 0AF1                          l2803 048C                          l2723 0386  
                        l2565 0A7B                          l2653 0B0B                          l3277 0E01  
                        l3269 0DCD                          l3293 0BCC                          l2709 035E  
                        l2575 0A93                          l2671 0B37                          l2663 0B13  
                        l2647 0B00                          l2903 05AE                          l2815 04BA  
                        l2751 03E0                          l2719 0379                          l3375 0CC4  
                        l3383 0CCA                          l2665 0B21                          l2913 05C9  
                        l2841 0510                          l2825 04D5                          l2737 03B8  
                        l3369 0C9C                          l3473 08DC                          l2595 0A35  
                        l2675 0B42                          l3491 0B99                          l2851 052B  
                        l2763 040E                          l2747 03D3                          l2917 05D6  
                        l2829 04E2                          l2773 0429                          l2679 0B4A  
                        l2943 062C                          l2855 0538                          l3807 0FC5  
                        l3489 0B7F                          l2929 0604                          l2777 0436  
                        l2873 0564                          l2955 065A                          l2939 061F  
                        l2981 06B0                          l2965 0675                          l2893 0597  
                        l2789 0464                          l3781 0F0D                          l3773 0EE8  
                        l3757 0EAE                          l2991 06CB                          l2879 056F  
                        l2799 047F                          l3775 0EF5                          l2969 0682  
                        l2889 058A                          l2995 06D8                          l3787 0F1E  
                        STR_1 0817                          STR_2 0817                          STR_3 0817  
                        STR_4 0817                          STR_5 0817                          STR_6 0817  
                        STR_7 0810                          STR_8 0810                          STR_9 0810  
                        _BRGH 04C2                          _CREN 00C4                          _FERR 00C2  
                        u2055 0B16                          u3015 0E12                          u3105 0C9A  
                        u2075 0B22                          u3035 0BC0                          u2315 04A1  
                        u2235 03F5                          u3115 0CC2                          u2085 0B2E  
                        u2095 0B38                          u3055 0BCE                          u3065 0BE3  
                        u2505 0641                          u3075 0BF5                          u2355 04F7  
                        u2275 044B                          u2195 039F                          _FMRX 0964  
                        u3185 09FC                          u2625 0743                          u2545 0697  
                        u2465 05EB                          u2395 054D                          _FMTX 0990  
                        u2805 00BB                          u3550 0F3C                          u2815 00D7  
                        u3607 0E36                          u3560 0F52                          u1865 0881  
                        u2905 02C4                          u2825 00E6                          u2665 0799  
                        u2585 06ED                          u3617 0E5F                          u3570 0F68  
                        u2835 00F5                          u3707 0BA4                          u3627 0EC3  
                        u2765 0046                          u3637 0F2B                          u2935 030B  
                        u1895 0AD4                          u3647 0FBD                          u2945 0D5A  
                        u3657 0FE6                          u2955 0D76                          u3667 0FF8  
                        _RCIE 0465                          _RCEN 048B                          _RCIF 0065  
                        _CWTX 0938                          u2885 02A2                          u2965 0D85  
                        u3677 0011                          u2895 02B5                          u2975 0DBC  
                        u3687 0022                          u2985 0DCB                          u3697 0AD8  
                        _OERR 00C1                          _TMR1 000E                          _SPEN 00C7  
                        _RSEN 0489                          _SREN 00C5                          _TXIE 0464  
                        _TXEN 04C5                          _TXIF 0064                          _SYNC 04C4  
                        __NOP 0876                  __CFG_WRT$OFF 0000                          _main 0E2E  
                 _NM_waddress 0864                 ??_Init_SERIAL 0070                          btemp 007E  
               __CFG_BOREN$ON 0000                          ltemp 007E                  getbit@oldbit 00E7  
                 Init_I2C_M@c 0020                          start 0000  ReceivePacket_data@fcschecker 003D  
                        ttemp 007E                          wtemp 007E                 __CFG_IESO$OFF 0000  
               __CFG_MCLRE$ON 0000          __end_of_EEPROM_Write 0BAC                         ?_FMRX 005C  
                       ?_FMTX 005C                         ?_CWTX 005C              ?_I2C_Master_Wait 0070  
            ?_I2C_Master_Stop 0070                         ?__NOP 0070                         ?_main 0070  
                       _ACKEN 048C                         _ACKDT 048D               __end_of___awdiv 0B4F  
                       STR_10 0810                         STR_11 0810                         STR_12 0810  
                       STR_15 0808                 __CFG_WDTE$OFF 0000                         _ANSEL 0188  
             __end_of___lldiv 0C0A               ___awdiv@divisor 0070               ___awdiv@counter 0075  
                       _RCREG 001A                         _SPBRG 0099                         _PORTA 0005  
                       _PORTB 0006                         _PORTC 0007                         _PORTD 0008  
                       _PORTE 0009                         _H_OUT 0A1E                         _OUTFQ 00AC  
                       _TRISA 0085                         _TRISB 0086                         _TRISC 0087  
                       _TRISD 0088                         _TRISE 0089                         _L_OUT 0A64  
                       _TXREG 0019                 __CFG_PWRTE$ON 0000                __CFG_FCMEN$OFF 0000  
                       _dData 0130               __end_of_getdata 0C6B                         _eflag 0068  
               getdata@dstuff 0022                         _putch 083A                         main@i 00BF  
                       pclath 000A                         ltemp0 007E                         ltemp1 0082  
                       ltemp2 0086                         ltemp3 0080                         ttemp0 007E  
                       ttemp1 0081                         ttemp2 0084                         ttemp3 0087  
                       ttemp4 007F                         status 0003                         wtemp0 007E  
                       wtemp1 0080                         wtemp2 0082                         wtemp3 0084  
                       wtemp4 0086                         wtemp5 0088                         wtemp6 007F  
                  _Init_I2C_M 09EA              EEPROM_Write@data 0074    __end_of_ReceivePacket_data 0CD0  
                __end_of_FMRX 0990                  __end_of_FMTX 09BC                  __end_of_CWTX 0964  
                __end_of__NOP 088B               __initialization 07B3                  __end_of_main 1000  
         __end_of_Init_SERIAL 08A4              __end_of_Init_MPU 0910                        ??_FMRX 007D  
                      ??_FMTX 007D                        ??_CWTX 007D                        ??__NOP 0070  
                      ??_main 0062                        ?_H_OUT 0072      EEPROM_Write@high_address 0072  
                      ?_OUTFQ 0079                        ?_L_OUT 0072             ?_I2C_Master_Start 0070  
           ?_I2C_Master_Write 0070                        OUTFQ@i 0056            ??_I2C_Master_Start 0070  
                      OUTFQ@j 005A            ??_I2C_Master_Write 0072              ___awdiv@dividend 0072  
                  _eDataField 0140                        ?_putch 0070                        _ANSELH 0189  
                      _RFDOUT 0D4D                        _OPINIT 0CD0                        _SSPADD 0093  
                      _STBOUT 09BC                        _STATUS 0003                        _SSPCON 0014  
                      _SSPBUF 0013                        __NOP@i 0070              __end_of_fcscheck 00AC  
                   ??___awdiv 0074                        _dfcshi 006C                     ??___lldiv 0078  
                      _dfcslo 006D                        _efcshi 006E                        _efcslo 006F  
                      _getbit 0AAA            __size_of_Reset_EPS 0023                        _estuff 00E5  
            ___awdiv@quotient 0077                    _dPacketnum 0066                        _printf 08D7  
                   ??_getdata 0076                   RFDOUT@i_472 003B                   RFDOUT@i_473 003F  
            __end_of_waitFlag 07B3    EEPROM_Write@EEPROM_address 0078       __end_of__initialization 07FC  
     EEPROM_Write@low_address 0073                   ?_Init_I2C_M 0020                   _Init_SERIAL 088B  
       __size_of_EEPROM_Write 005D                 __end_of_H_OUT 0A64                 __end_of_OUTFQ 0327  
               __end_of_L_OUT 0AAA                 L_OUT@fmcwtxrx 0072                __pcstackCOMMON 0070  
                __pidataBANK1 08BD                  __pidataBANK2 08A4                  __pidataBANK3 0910  
               __end_of_putch 0842                       ??_H_OUT 0074                       ??_OUTFQ 0020  
                     ??_L_OUT 0074                       ??_putch 0070                  _EEPROM_Write 0B4F  
                  __pbssBANK0 0066                    __pbssBANK1 00DC                    __pbssBANK2 0110  
                  __pbssBANK3 0190             __end_of_Reset_EPS 002A                     ?_Init_MPU 0070  
                     ?_RFDOUT 0079                       ?_OPINIT 0074                  ?_NM_waddress 0071  
                     ?_STBOUT 0072                       RFDOUT@i 003D                    __pmaintext 0E2E  
                  _ebitstatus 00E1                       ?_getbit 0070                       ?_printf 0070  
         __size_of_Init_I2C_M 0034                     OUTFQ@Nprg 007B                     ?_fcscheck 0070  
                     _SSPCON2 0091                       _SSPSTAT 0094                    __stringtab 0800  
                  ??_Init_MPU 0070               __size_of_RFDOUT 00E1               __size_of_OPINIT 007D  
             __size_of_STBOUT 002E                     ?_waitFlag 0070                       _dPacket 0190  
                     _ePacket 00DC                       ___awdiv 0AF6                       ___lldiv 0BAC  
             __size_of_getbit 004C                   waitFlag@buf 003C                       __ptext1 08D7  
                     __ptext2 0007                       __ptext3 0C6B                       __ptext4 0327  
                     __ptext5 0C0A                       __ptext6 0AAA                       __ptext7 002A  
                     __ptext8 0864                       __ptext9 083A               __size_of_printf 001C  
                     _getdata 0C0A            _ReceivePacket_data 0C6B                     _T1CONbits 0010  
    __size_of_I2C_Master_Wait 0009      __size_of_I2C_Master_Stop 0007                    ??_fcscheck 0072  
         ?_ReceivePacket_data 0070                       getbit@i 0074                       clrloop0 0843  
        end_of_initialization 07FC                  RFDOUT@Nref_b 0023                     _FMRX_Nref 00C4  
                   _FMRX_Nprg 01E0                     _FMTX_Nref 00C6                     _FMTX_Nprg 00D2  
                   _CWTX_Nref 00C2                     _CWTX_Nprg 00C8                   OUTFQ@Nprg_b 0030  
   __size_of_I2C_Master_Start 0007     __size_of_I2C_Master_Write 0008               ___lldiv@divisor 0070  
             ___lldiv@counter 007D                    ??_waitFlag 0076          ??_ReceivePacket_data 007A  
                     printf@c 0073                       printf@f 0074                    fcscheck@bt 0074  
              OPINIT@fmcwtxrx 0074                     _PORTAbits 0005                     _PORTCbits 0007  
                   _PORTDbits 0008                     _PORTEbits 0009                    getdata@buf 0026  
                ??_Init_I2C_M 0024                  ?_Init_SERIAL 0070                __end_of_RFDOUT 0E2E  
              __end_of_OPINIT 0D4D                __end_of_STBOUT 09EA          __size_of_NM_waddress 0012  
              __end_of_getbit 0AF6                __end_of_printf 08F3           start_initialization 07B3  
          __end_of_Init_I2C_M 0A1E                      ??_RFDOUT 0020                      ??_OPINIT 0076  
           ??_I2C_Master_Wait 0070             ??_I2C_Master_Stop 0070                      ??_STBOUT 0074  
           __size_of_Init_MPU 001D                     _Reset_EPS 0007             getdata@dbitstatus 0024  
                  init_fetch0 0853                      ??_getbit 0072                   __pdataBANK1 00C2  
                 __pdataBANK2 0140                   __pdataBANK3 01C2                    RFDOUT@Nref 007B  
                    ??_printf 0071           __end_of_commandSize 0808      NM_waddress@whigh_address 0071  
                   ___latbits 0002                 __pcstackBANK0 0020                 __pcstackBANK1 00A0  
                    FMRX@Nref 005C                      FMRX@Nprg 005E                      FMTX@Nref 005C  
                    FMTX@Nprg 005E                      FMRX@fmrx 0060                      FMTX@fmtx 0060  
                    CWTX@Nref 005C                      CWTX@Nprg 005E             __size_of_fcscheck 0082  
               waitFlag@j_111 0024                 waitFlag@j_120 002E                 waitFlag@j_113 0026  
               waitFlag@j_130 0038                 waitFlag@j_122 0030                 waitFlag@j_115 0028  
               waitFlag@j_124 0032                 waitFlag@j_117 002A                 waitFlag@j_126 0034  
               waitFlag@j_119 002C                 waitFlag@j_128 0036                      CWTX@cwtx 0060  
            _I2C_Master_Start 0824                    ?_Reset_EPS 0070              _I2C_Master_Write 0832  
     getdata@bufstore_counter 0020                      ?___awdiv 0070                      ?___lldiv 0070  
           __size_of_waitFlag 048C                     __pstrings 0800                      ?_getdata 0070  
              __size_of_H_OUT 0046                __size_of_OUTFQ 027B                __size_of_L_OUT 0046  
              __size_of_putch 0008                 H_OUT@fmcwtxrx 0072                     clear_ram0 0842  
                    _PIE1bits 008C                    OUTFQ@i_461 0052                    OUTFQ@i_463 0058  
                   _rcv_state 006A          __size_of_Init_SERIAL 0019                      _PIR1bits 000C  
                  OUTFQ@count 0054                   _commandSize 0806                     fcscheck@i 0075  
                   main@F2010 01D6                     main@F2006 01C2                     main@F2008 01CC  
                 __stringbase 0805                     main@dData 00C1                      _Init_MPU 08F3  
                 ??_Reset_EPS 0070                 fcscheck@i_142 0077   __size_of_ReceivePacket_data 0065  
            __size_of___awdiv 0059              __size_of___lldiv 005E            __end_of__stringtab 0806  
                  _EEPROMData 0110              __size_of_getdata 0061               _I2C_Master_Wait 084A  
             _I2C_Master_Stop 082B                RFDOUT@fmcwtxrx 0079                      _efcsflag 00E3  
                    _fcscheck 002A                      __ptext10 088B                      __ptext11 08F3  
                    __ptext20 084A                      __ptext12 09EA                      __ptext21 0938  
                    __ptext13 0BAC                      __ptext22 0D4D                      __ptext14 0990  
                    __ptext23 00AC                      __ptext15 0964                      __ptext24 0AF6  
                    __ptext16 0B4F                      __ptext25 0CD0                      __ptext17 0832  
                    __ptext26 09BC                      __ptext18 082B                      __ptext27 0A64  
                    __ptext19 0824                      __ptext28 0A1E                      __ptext29 0876  
           __CFG_BOR4V$BOR21V 0000                 ?_EEPROM_Write 0072                 __size_of_FMRX 002C  
               __size_of_FMTX 002C                 __size_of_CWTX 002C                 __size_of__NOP 0015  
               ??_NM_waddress 0073                     waitFlag@i 0020                     waitFlag@j 0022  
               __size_of_main 01D2                STBOUT@fmcwtxrx 0072                      _waitFlag 0327  
    NM_waddress@NM_wad_header 0073                 OUTFQ@fmcwtxrx 0079      __end_of_I2C_Master_Start 082B  
                   putch@byte 0070      __end_of_I2C_Master_Write 083A                    _INTCONbits 000B  
                    init_ram0 0857                  fcscheck@byte 0079                ??_EEPROM_Write 0075  
          waitFlag@flag_judge 003A              ___lldiv@dividend 0074                     stringcode 0800  
               main@FMRX_Nprg 00B4             main@NM_wad_header 00BE                 main@FMTX_Nprg 00A0  
         __end_of_NM_waddress 0876                      printf@ap 0072                 main@CWTX_Nprg 00AA  
     __end_of_I2C_Master_Wait 0853       __end_of_I2C_Master_Stop 0832              ___lldiv@quotient 0079  
           I2C_Master_Write@d 0070           EEPROM_Write@Address 0079                      stringdir 0800  
                    stringtab 0800           ReceivePacket_data@i 003F       NM_waddress@wlow_address 0072  
