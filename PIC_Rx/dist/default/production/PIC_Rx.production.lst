

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sat Jan 20 20:51:50 2018

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	dabs	1,0x7E,2
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  008F                     	;# 
    98  0090                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  0105                     	;# 
   117  0107                     	;# 
   118  0108                     	;# 
   119  0109                     	;# 
   120  010C                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  010F                     	;# 
   125  0185                     	;# 
   126  0187                     	;# 
   127  0188                     	;# 
   128  0189                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  0000                     	;# 
   132  0001                     	;# 
   133  0002                     	;# 
   134  0003                     	;# 
   135  0004                     	;# 
   136  0005                     	;# 
   137  0006                     	;# 
   138  0007                     	;# 
   139  0008                     	;# 
   140  0009                     	;# 
   141  000A                     	;# 
   142  000B                     	;# 
   143  000C                     	;# 
   144  000D                     	;# 
   145  000E                     	;# 
   146  000E                     	;# 
   147  000F                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0013                     	;# 
   152  0014                     	;# 
   153  0015                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0017                     	;# 
   157  0018                     	;# 
   158  0019                     	;# 
   159  001A                     	;# 
   160  001B                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001D                     	;# 
   164  001E                     	;# 
   165  001F                     	;# 
   166  0081                     	;# 
   167  0085                     	;# 
   168  0086                     	;# 
   169  0087                     	;# 
   170  0088                     	;# 
   171  0089                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  008F                     	;# 
   176  0090                     	;# 
   177  0091                     	;# 
   178  0092                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0094                     	;# 
   183  0095                     	;# 
   184  0096                     	;# 
   185  0097                     	;# 
   186  0098                     	;# 
   187  0099                     	;# 
   188  009A                     	;# 
   189  009B                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  009F                     	;# 
   194  0105                     	;# 
   195  0107                     	;# 
   196  0108                     	;# 
   197  0109                     	;# 
   198  010C                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  010F                     	;# 
   203  0185                     	;# 
   204  0187                     	;# 
   205  0188                     	;# 
   206  0189                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  0000                     	;# 
   210  0001                     	;# 
   211  0002                     	;# 
   212  0003                     	;# 
   213  0004                     	;# 
   214  0005                     	;# 
   215  0006                     	;# 
   216  0007                     	;# 
   217  0008                     	;# 
   218  0009                     	;# 
   219  000A                     	;# 
   220  000B                     	;# 
   221  000C                     	;# 
   222  000D                     	;# 
   223  000E                     	;# 
   224  000E                     	;# 
   225  000F                     	;# 
   226  0010                     	;# 
   227  0011                     	;# 
   228  0012                     	;# 
   229  0013                     	;# 
   230  0014                     	;# 
   231  0015                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0017                     	;# 
   235  0018                     	;# 
   236  0019                     	;# 
   237  001A                     	;# 
   238  001B                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  001D                     	;# 
   242  001E                     	;# 
   243  001F                     	;# 
   244  0081                     	;# 
   245  0085                     	;# 
   246  0086                     	;# 
   247  0087                     	;# 
   248  0088                     	;# 
   249  0089                     	;# 
   250  008C                     	;# 
   251  008D                     	;# 
   252  008E                     	;# 
   253  008F                     	;# 
   254  0090                     	;# 
   255  0091                     	;# 
   256  0092                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0093                     	;# 
   260  0094                     	;# 
   261  0095                     	;# 
   262  0096                     	;# 
   263  0097                     	;# 
   264  0098                     	;# 
   265  0099                     	;# 
   266  009A                     	;# 
   267  009B                     	;# 
   268  009C                     	;# 
   269  009D                     	;# 
   270  009E                     	;# 
   271  009F                     	;# 
   272  0105                     	;# 
   273  0107                     	;# 
   274  0108                     	;# 
   275  0109                     	;# 
   276  010C                     	;# 
   277  010C                     	;# 
   278  010D                     	;# 
   279  010E                     	;# 
   280  010F                     	;# 
   281  0185                     	;# 
   282  0187                     	;# 
   283  0188                     	;# 
   284  0189                     	;# 
   285  018C                     	;# 
   286  018D                     	;# 
   287  0000                     	;# 
   288  0001                     	;# 
   289  0002                     	;# 
   290  0003                     	;# 
   291  0004                     	;# 
   292  0005                     	;# 
   293  0006                     	;# 
   294  0007                     	;# 
   295  0008                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000D                     	;# 
   301  000E                     	;# 
   302  000E                     	;# 
   303  000F                     	;# 
   304  0010                     	;# 
   305  0011                     	;# 
   306  0012                     	;# 
   307  0013                     	;# 
   308  0014                     	;# 
   309  0015                     	;# 
   310  0015                     	;# 
   311  0016                     	;# 
   312  0017                     	;# 
   313  0018                     	;# 
   314  0019                     	;# 
   315  001A                     	;# 
   316  001B                     	;# 
   317  001B                     	;# 
   318  001C                     	;# 
   319  001D                     	;# 
   320  001E                     	;# 
   321  001F                     	;# 
   322  0081                     	;# 
   323  0085                     	;# 
   324  0086                     	;# 
   325  0087                     	;# 
   326  0088                     	;# 
   327  0089                     	;# 
   328  008C                     	;# 
   329  008D                     	;# 
   330  008E                     	;# 
   331  008F                     	;# 
   332  0090                     	;# 
   333  0091                     	;# 
   334  0092                     	;# 
   335  0093                     	;# 
   336  0093                     	;# 
   337  0093                     	;# 
   338  0094                     	;# 
   339  0095                     	;# 
   340  0096                     	;# 
   341  0097                     	;# 
   342  0098                     	;# 
   343  0099                     	;# 
   344  009A                     	;# 
   345  009B                     	;# 
   346  009C                     	;# 
   347  009D                     	;# 
   348  009E                     	;# 
   349  009F                     	;# 
   350  0105                     	;# 
   351  0107                     	;# 
   352  0108                     	;# 
   353  0109                     	;# 
   354  010C                     	;# 
   355  010C                     	;# 
   356  010D                     	;# 
   357  010E                     	;# 
   358  010F                     	;# 
   359  0185                     	;# 
   360  0187                     	;# 
   361  0188                     	;# 
   362  0189                     	;# 
   363  018C                     	;# 
   364  018D                     	;# 
   365  0000                     	;# 
   366  0001                     	;# 
   367  0002                     	;# 
   368  0003                     	;# 
   369  0004                     	;# 
   370  0005                     	;# 
   371  0006                     	;# 
   372  0007                     	;# 
   373  0008                     	;# 
   374  0009                     	;# 
   375  000A                     	;# 
   376  000B                     	;# 
   377  000C                     	;# 
   378  000D                     	;# 
   379  000E                     	;# 
   380  000E                     	;# 
   381  000F                     	;# 
   382  0010                     	;# 
   383  0011                     	;# 
   384  0012                     	;# 
   385  0013                     	;# 
   386  0014                     	;# 
   387  0015                     	;# 
   388  0015                     	;# 
   389  0016                     	;# 
   390  0017                     	;# 
   391  0018                     	;# 
   392  0019                     	;# 
   393  001A                     	;# 
   394  001B                     	;# 
   395  001B                     	;# 
   396  001C                     	;# 
   397  001D                     	;# 
   398  001E                     	;# 
   399  001F                     	;# 
   400  0081                     	;# 
   401  0085                     	;# 
   402  0086                     	;# 
   403  0087                     	;# 
   404  0088                     	;# 
   405  0089                     	;# 
   406  008C                     	;# 
   407  008D                     	;# 
   408  008E                     	;# 
   409  008F                     	;# 
   410  0090                     	;# 
   411  0091                     	;# 
   412  0092                     	;# 
   413  0093                     	;# 
   414  0093                     	;# 
   415  0093                     	;# 
   416  0094                     	;# 
   417  0095                     	;# 
   418  0096                     	;# 
   419  0097                     	;# 
   420  0098                     	;# 
   421  0099                     	;# 
   422  009A                     	;# 
   423  009B                     	;# 
   424  009C                     	;# 
   425  009D                     	;# 
   426  009E                     	;# 
   427  009F                     	;# 
   428  0105                     	;# 
   429  0107                     	;# 
   430  0108                     	;# 
   431  0109                     	;# 
   432  010C                     	;# 
   433  010C                     	;# 
   434  010D                     	;# 
   435  010E                     	;# 
   436  010F                     	;# 
   437  0185                     	;# 
   438  0187                     	;# 
   439  0188                     	;# 
   440  0189                     	;# 
   441  018C                     	;# 
   442  018D                     	;# 
   443  0000                     	;# 
   444  0001                     	;# 
   445  0002                     	;# 
   446  0003                     	;# 
   447  0004                     	;# 
   448  0005                     	;# 
   449  0006                     	;# 
   450  0007                     	;# 
   451  0008                     	;# 
   452  0009                     	;# 
   453  000A                     	;# 
   454  000B                     	;# 
   455  000C                     	;# 
   456  000D                     	;# 
   457  000E                     	;# 
   458  000E                     	;# 
   459  000F                     	;# 
   460  0010                     	;# 
   461  0011                     	;# 
   462  0012                     	;# 
   463  0013                     	;# 
   464  0014                     	;# 
   465  0015                     	;# 
   466  0015                     	;# 
   467  0016                     	;# 
   468  0017                     	;# 
   469  0018                     	;# 
   470  0019                     	;# 
   471  001A                     	;# 
   472  001B                     	;# 
   473  001B                     	;# 
   474  001C                     	;# 
   475  001D                     	;# 
   476  001E                     	;# 
   477  001F                     	;# 
   478  0081                     	;# 
   479  0085                     	;# 
   480  0086                     	;# 
   481  0087                     	;# 
   482  0088                     	;# 
   483  0089                     	;# 
   484  008C                     	;# 
   485  008D                     	;# 
   486  008E                     	;# 
   487  008F                     	;# 
   488  0090                     	;# 
   489  0091                     	;# 
   490  0092                     	;# 
   491  0093                     	;# 
   492  0093                     	;# 
   493  0093                     	;# 
   494  0094                     	;# 
   495  0095                     	;# 
   496  0096                     	;# 
   497  0097                     	;# 
   498  0098                     	;# 
   499  0099                     	;# 
   500  009A                     	;# 
   501  009B                     	;# 
   502  009C                     	;# 
   503  009D                     	;# 
   504  009E                     	;# 
   505  009F                     	;# 
   506  0105                     	;# 
   507  0107                     	;# 
   508  0108                     	;# 
   509  0109                     	;# 
   510  010C                     	;# 
   511  010C                     	;# 
   512  010D                     	;# 
   513  010E                     	;# 
   514  010F                     	;# 
   515  0185                     	;# 
   516  0187                     	;# 
   517  0188                     	;# 
   518  0189                     	;# 
   519  018C                     	;# 
   520  018D                     	;# 
   521  0000                     	;# 
   522  0001                     	;# 
   523  0002                     	;# 
   524  0003                     	;# 
   525  0004                     	;# 
   526  0005                     	;# 
   527  0006                     	;# 
   528  0007                     	;# 
   529  0008                     	;# 
   530  0009                     	;# 
   531  000A                     	;# 
   532  000B                     	;# 
   533  000C                     	;# 
   534  000D                     	;# 
   535  000E                     	;# 
   536  000E                     	;# 
   537  000F                     	;# 
   538  0010                     	;# 
   539  0011                     	;# 
   540  0012                     	;# 
   541  0013                     	;# 
   542  0014                     	;# 
   543  0015                     	;# 
   544  0015                     	;# 
   545  0016                     	;# 
   546  0017                     	;# 
   547  0018                     	;# 
   548  0019                     	;# 
   549  001A                     	;# 
   550  001B                     	;# 
   551  001B                     	;# 
   552  001C                     	;# 
   553  001D                     	;# 
   554  001E                     	;# 
   555  001F                     	;# 
   556  0081                     	;# 
   557  0085                     	;# 
   558  0086                     	;# 
   559  0087                     	;# 
   560  0088                     	;# 
   561  0089                     	;# 
   562  008C                     	;# 
   563  008D                     	;# 
   564  008E                     	;# 
   565  008F                     	;# 
   566  0090                     	;# 
   567  0091                     	;# 
   568  0092                     	;# 
   569  0093                     	;# 
   570  0093                     	;# 
   571  0093                     	;# 
   572  0094                     	;# 
   573  0095                     	;# 
   574  0096                     	;# 
   575  0097                     	;# 
   576  0098                     	;# 
   577  0099                     	;# 
   578  009A                     	;# 
   579  009B                     	;# 
   580  009C                     	;# 
   581  009D                     	;# 
   582  009E                     	;# 
   583  009F                     	;# 
   584  0105                     	;# 
   585  0107                     	;# 
   586  0108                     	;# 
   587  0109                     	;# 
   588  010C                     	;# 
   589  010C                     	;# 
   590  010D                     	;# 
   591  010E                     	;# 
   592  010F                     	;# 
   593  0185                     	;# 
   594  0187                     	;# 
   595  0188                     	;# 
   596  0189                     	;# 
   597  018C                     	;# 
   598  018D                     	;# 
   599  0000                     	;# 
   600  0001                     	;# 
   601  0002                     	;# 
   602  0003                     	;# 
   603  0004                     	;# 
   604  0005                     	;# 
   605  0006                     	;# 
   606  0007                     	;# 
   607  0008                     	;# 
   608  0009                     	;# 
   609  000A                     	;# 
   610  000B                     	;# 
   611  000C                     	;# 
   612  000D                     	;# 
   613  000E                     	;# 
   614  000E                     	;# 
   615  000F                     	;# 
   616  0010                     	;# 
   617  0011                     	;# 
   618  0012                     	;# 
   619  0013                     	;# 
   620  0014                     	;# 
   621  0015                     	;# 
   622  0015                     	;# 
   623  0016                     	;# 
   624  0017                     	;# 
   625  0018                     	;# 
   626  0019                     	;# 
   627  001A                     	;# 
   628  001B                     	;# 
   629  001B                     	;# 
   630  001C                     	;# 
   631  001D                     	;# 
   632  001E                     	;# 
   633  001F                     	;# 
   634  0081                     	;# 
   635  0085                     	;# 
   636  0086                     	;# 
   637  0087                     	;# 
   638  0088                     	;# 
   639  0089                     	;# 
   640  008C                     	;# 
   641  008D                     	;# 
   642  008E                     	;# 
   643  008F                     	;# 
   644  0090                     	;# 
   645  0091                     	;# 
   646  0092                     	;# 
   647  0093                     	;# 
   648  0093                     	;# 
   649  0093                     	;# 
   650  0094                     	;# 
   651  0095                     	;# 
   652  0096                     	;# 
   653  0097                     	;# 
   654  0098                     	;# 
   655  0099                     	;# 
   656  009A                     	;# 
   657  009B                     	;# 
   658  009C                     	;# 
   659  009D                     	;# 
   660  009E                     	;# 
   661  009F                     	;# 
   662  0105                     	;# 
   663  0107                     	;# 
   664  0108                     	;# 
   665  0109                     	;# 
   666  010C                     	;# 
   667  010C                     	;# 
   668  010D                     	;# 
   669  010E                     	;# 
   670  010F                     	;# 
   671  0185                     	;# 
   672  0187                     	;# 
   673  0188                     	;# 
   674  0189                     	;# 
   675  018C                     	;# 
   676  018D                     	;# 
   677  0000                     	;# 
   678  0001                     	;# 
   679  0002                     	;# 
   680  0003                     	;# 
   681  0004                     	;# 
   682  0005                     	;# 
   683  0006                     	;# 
   684  0007                     	;# 
   685  0008                     	;# 
   686  0009                     	;# 
   687  000A                     	;# 
   688  000B                     	;# 
   689  000C                     	;# 
   690  000D                     	;# 
   691  000E                     	;# 
   692  000E                     	;# 
   693  000F                     	;# 
   694  0010                     	;# 
   695  0011                     	;# 
   696  0012                     	;# 
   697  0013                     	;# 
   698  0014                     	;# 
   699  0015                     	;# 
   700  0015                     	;# 
   701  0016                     	;# 
   702  0017                     	;# 
   703  0018                     	;# 
   704  0019                     	;# 
   705  001A                     	;# 
   706  001B                     	;# 
   707  001B                     	;# 
   708  001C                     	;# 
   709  001D                     	;# 
   710  001E                     	;# 
   711  001F                     	;# 
   712  0081                     	;# 
   713  0085                     	;# 
   714  0086                     	;# 
   715  0087                     	;# 
   716  0088                     	;# 
   717  0089                     	;# 
   718  008C                     	;# 
   719  008D                     	;# 
   720  008E                     	;# 
   721  008F                     	;# 
   722  0090                     	;# 
   723  0091                     	;# 
   724  0092                     	;# 
   725  0093                     	;# 
   726  0093                     	;# 
   727  0093                     	;# 
   728  0094                     	;# 
   729  0095                     	;# 
   730  0096                     	;# 
   731  0097                     	;# 
   732  0098                     	;# 
   733  0099                     	;# 
   734  009A                     	;# 
   735  009B                     	;# 
   736  009C                     	;# 
   737  009D                     	;# 
   738  009E                     	;# 
   739  009F                     	;# 
   740  0105                     	;# 
   741  0107                     	;# 
   742  0108                     	;# 
   743  0109                     	;# 
   744  010C                     	;# 
   745  010C                     	;# 
   746  010D                     	;# 
   747  010E                     	;# 
   748  010F                     	;# 
   749  0185                     	;# 
   750  0187                     	;# 
   751  0188                     	;# 
   752  0189                     	;# 
   753  018C                     	;# 
   754  018D                     	;# 
   755  0000                     	;# 
   756  0001                     	;# 
   757  0002                     	;# 
   758  0003                     	;# 
   759  0004                     	;# 
   760  0005                     	;# 
   761  0006                     	;# 
   762  0007                     	;# 
   763  0008                     	;# 
   764  0009                     	;# 
   765  000A                     	;# 
   766  000B                     	;# 
   767  000C                     	;# 
   768  000D                     	;# 
   769  000E                     	;# 
   770  000E                     	;# 
   771  000F                     	;# 
   772  0010                     	;# 
   773  0011                     	;# 
   774  0012                     	;# 
   775  0013                     	;# 
   776  0014                     	;# 
   777  0015                     	;# 
   778  0015                     	;# 
   779  0016                     	;# 
   780  0017                     	;# 
   781  0018                     	;# 
   782  0019                     	;# 
   783  001A                     	;# 
   784  001B                     	;# 
   785  001B                     	;# 
   786  001C                     	;# 
   787  001D                     	;# 
   788  001E                     	;# 
   789  001F                     	;# 
   790  0081                     	;# 
   791  0085                     	;# 
   792  0086                     	;# 
   793  0087                     	;# 
   794  0088                     	;# 
   795  0089                     	;# 
   796  008C                     	;# 
   797  008D                     	;# 
   798  008E                     	;# 
   799  008F                     	;# 
   800  0090                     	;# 
   801  0091                     	;# 
   802  0092                     	;# 
   803  0093                     	;# 
   804  0093                     	;# 
   805  0093                     	;# 
   806  0094                     	;# 
   807  0095                     	;# 
   808  0096                     	;# 
   809  0097                     	;# 
   810  0098                     	;# 
   811  0099                     	;# 
   812  009A                     	;# 
   813  009B                     	;# 
   814  009C                     	;# 
   815  009D                     	;# 
   816  009E                     	;# 
   817  009F                     	;# 
   818  0105                     	;# 
   819  0107                     	;# 
   820  0108                     	;# 
   821  0109                     	;# 
   822  010C                     	;# 
   823  010C                     	;# 
   824  010D                     	;# 
   825  010E                     	;# 
   826  010F                     	;# 
   827  0185                     	;# 
   828  0187                     	;# 
   829  0188                     	;# 
   830  0189                     	;# 
   831  018C                     	;# 
   832  018D                     	;# 
   833                           
   834                           	psect	idataBANK1
   835  087E                     __pidataBANK1:	
   836                           
   837                           ;initializer for _CWTX_Nref
   838  087E  34A0               	retlw	160
   839  087F  3400               	retlw	0
   840                           
   841                           ;initializer for _FMRX_Nref
   842  0880  3400               	retlw	0
   843  0881  340A               	retlw	10
   844                           
   845                           ;initializer for _FMTX_Nref
   846  0882  3400               	retlw	0
   847  0883  340A               	retlw	10
   848                           
   849                           ;initializer for _CWTX_Nprg
   850  0884  3400               	retlw	0
   851  0885  3400               	retlw	0
   852  0886  3401               	retlw	1
   853  0887  3400               	retlw	0
   854  0888  3407               	retlw	7
   855  0889  3400               	retlw	0
   856  088A  3404               	retlw	4
   857  088B  3400               	retlw	0
   858  088C  3407               	retlw	7
   859  088D  3400               	retlw	0
   860                           
   861                           ;initializer for _FMTX_Nprg
   862  088E  3408               	retlw	8
   863  088F  3400               	retlw	0
   864  0890  3407               	retlw	7
   865  0891  3400               	retlw	0
   866  0892  3403               	retlw	3
   867  0893  3400               	retlw	0
   868  0894  3400               	retlw	0
   869  0895  3400               	retlw	0
   870  0896  3400               	retlw	0
   871  0897  3400               	retlw	0
   872                           
   873                           	psect	idataBANK2
   874  0865                     __pidataBANK2:	
   875                           
   876                           ;initializer for _eDataField
   877  0865  3448               	retlw	72
   878  0866  3465               	retlw	101
   879  0867  346C               	retlw	108
   880  0868  346C               	retlw	108
   881  0869  346F               	retlw	111
   882  086A  3421               	retlw	33
   883  086B  3420               	retlw	32
   884  086C  3449               	retlw	73
   885  086D  3427               	retlw	39
   886  086E  346D               	retlw	109
   887  086F  3420               	retlw	32
   888  0870  344F               	retlw	79
   889  0871  3472               	retlw	114
   890  0872  3469               	retlw	105
   891  0873  3467               	retlw	103
   892  0874  3461               	retlw	97
   893  0875  346D               	retlw	109
   894  0876  3469               	retlw	105
   895  0877  3453               	retlw	83
   896  0878  3461               	retlw	97
   897  0879  3474               	retlw	116
   898  087A  3431               	retlw	49
   899  087B  3421               	retlw	33
   900  087C  3421               	retlw	33
   901  087D  3400               	retlw	0
   902                           
   903                           	psect	idataBANK3
   904  08B5                     __pidataBANK3:	
   905                           
   906                           ;initializer for main@F2007
   907  08B5  3408               	retlw	8
   908  08B6  3400               	retlw	0
   909  08B7  3407               	retlw	7
   910  08B8  3400               	retlw	0
   911  08B9  3403               	retlw	3
   912  08BA  3400               	retlw	0
   913  08BB  3400               	retlw	0
   914  08BC  3400               	retlw	0
   915  08BD  3400               	retlw	0
   916  08BE  3400               	retlw	0
   917                           
   918                           ;initializer for main@F2009
   919  08BF  3400               	retlw	0
   920  08C0  3400               	retlw	0
   921  08C1  3401               	retlw	1
   922  08C2  3400               	retlw	0
   923  08C3  3407               	retlw	7
   924  08C4  3400               	retlw	0
   925  08C5  3404               	retlw	4
   926  08C6  3400               	retlw	0
   927  08C7  3407               	retlw	7
   928  08C8  3400               	retlw	0
   929                           
   930                           ;initializer for main@F2011
   931  08C9  3402               	retlw	2
   932  08CA  3400               	retlw	0
   933  08CB  3404               	retlw	4
   934  08CC  3400               	retlw	0
   935  08CD  3408               	retlw	8
   936  08CE  3400               	retlw	0
   937  08CF  3408               	retlw	8
   938  08D0  3400               	retlw	0
   939  08D1  3407               	retlw	7
   940  08D2  3400               	retlw	0
   941                           
   942                           ;initializer for _FMRX_Nprg
   943  08D3  3402               	retlw	2
   944  08D4  3400               	retlw	0
   945  08D5  3404               	retlw	4
   946  08D6  3400               	retlw	0
   947  08D7  3408               	retlw	8
   948  08D8  3400               	retlw	0
   949  08D9  3408               	retlw	8
   950  08DA  3400               	retlw	0
   951  08DB  3407               	retlw	7
   952  08DC  3400               	retlw	0
   953                           
   954                           	psect	strings
   955  0800                     __pstrings:	
   956  0800                     stringtab:	
   957  0800                     __stringtab:	
   958  0800                     stringcode:	
   959                           ;	String table - string pointers are 1 byte each
   960                           
   961  0800                     stringdir:	
   962  0800  3008               	movlw	high stringdir
   963  0801  008A               	movwf	10
   964  0802  0804               	movf	4,w
   965  0803  0A84               	incf	4,f
   966  0804  0782               	addwf	2,f
   967  0805                     __stringbase:	
   968  0805  3400               	retlw	0
   969  0806                     __end_of__stringtab:	
   970  0806                     _commandSize:	
   971  0806  3420               	retlw	32
   972  0807  3400               	retlw	0
   973  0808                     __end_of_commandSize:	
   974  000E                     _TMR1	set	14
   975  000B                     _INTCONbits	set	11
   976  000C                     _PIR1bits	set	12
   977  0005                     _PORTA	set	5
   978  0005                     _PORTAbits	set	5
   979  0006                     _PORTB	set	6
   980  0007                     _PORTC	set	7
   981  0007                     _PORTCbits	set	7
   982  0008                     _PORTD	set	8
   983  0008                     _PORTDbits	set	8
   984  0009                     _PORTE	set	9
   985  0009                     _PORTEbits	set	9
   986  001A                     _RCREG	set	26
   987  0013                     _SSPBUF	set	19
   988  0014                     _SSPCON	set	20
   989  0003                     _STATUS	set	3
   990  0010                     _T1CONbits	set	16
   991  0019                     _TXREG	set	25
   992  00C4                     _CREN	set	196
   993  00C2                     _FERR	set	194
   994  00C1                     _OERR	set	193
   995  0029                     _RA1	set	41
   996  0032                     _RB2	set	50
   997  0034                     _RB4	set	52
   998  0035                     _RB5	set	53
   999  003A                     _RC2	set	58
  1000  0065                     _RCIF	set	101
  1001  00C6                     _RX9	set	198
  1002  00C7                     _SPEN	set	199
  1003  00C5                     _SREN	set	197
  1004  0064                     _TXIF	set	100
  1005  008C                     _PIE1bits	set	140
  1006  0099                     _SPBRG	set	153
  1007  0093                     _SSPADD	set	147
  1008  0091                     _SSPCON2	set	145
  1009  0094                     _SSPSTAT	set	148
  1010  0085                     _TRISA	set	133
  1011  0086                     _TRISB	set	134
  1012  0087                     _TRISC	set	135
  1013  0088                     _TRISD	set	136
  1014  0089                     _TRISE	set	137
  1015  048D                     _ACKDT	set	1165
  1016  048C                     _ACKEN	set	1164
  1017  04C2                     _BRGH	set	1218
  1018  048A                     _PEN	set	1162
  1019  048B                     _RCEN	set	1163
  1020  0465                     _RCIE	set	1125
  1021  0489                     _RSEN	set	1161
  1022  0488                     _SEN	set	1160
  1023  04C4                     _SYNC	set	1220
  1024  04C6                     _TX9	set	1222
  1025  04C5                     _TXEN	set	1221
  1026  0464                     _TXIE	set	1124
  1027  0188                     _ANSEL	set	392
  1028  0189                     _ANSELH	set	393
  1029  0808                     STR_15:	
  1030  0808  3473               	retlw	115	;'s'
  1031  0809  3474               	retlw	116	;'t'
  1032  080A  3461               	retlw	97	;'a'
  1033  080B  3472               	retlw	114	;'r'
  1034  080C  3474               	retlw	116	;'t'
  1035  080D  340D               	retlw	13
  1036  080E  340A               	retlw	10
  1037  080F  3400               	retlw	0
  1038  0810                     STR_7:	
  1039  0810  344A               	retlw	74	;'J'
  1040  0811  3451               	retlw	81	;'Q'
  1041  0812  3431               	retlw	49	;'1'
  1042  0813  345A               	retlw	90	;'Z'
  1043  0814  3448               	retlw	72	;'H'
  1044  0815  3458               	retlw	88	;'X'
  1045  0816  3400               	retlw	0
  1046  0817                     STR_1:	
  1047  0817  344A               	retlw	74	;'J'
  1048  0818  3451               	retlw	81	;'Q'
  1049  0819  3431               	retlw	49	;'1'
  1050  081A  3459               	retlw	89	;'Y'
  1051  081B  3443               	retlw	67	;'C'
  1052  081C  345A               	retlw	90	;'Z'
  1053  081D  3400               	retlw	0
  1054  081E                     STR_16:	
  1055  081E  3425               	retlw	37	;'%'
  1056  081F  3463               	retlw	99	;'c'
  1057  0820  3400               	retlw	0
  1058  0810                     
  1059                           ; #config settings
  1060  0000                     
  1061                           	psect	cinit
  1062  07B3                     start_initialization:	
  1063  07B3                     __initialization:	
  1064                           
  1065                           ; Initialize objects allocated to BANK3
  1066  07B3  1783               	bsf	3,7	;select IRP bank2
  1067  07B4  30EA               	movlw	low (__pdataBANK3+40)
  1068  07B5  00FD               	movwf	btemp+-1
  1069  07B6  3008               	movlw	high __pidataBANK3
  1070  07B7  00FE               	movwf	btemp
  1071  07B8  30B5               	movlw	low __pidataBANK3
  1072  07B9  00FF               	movwf	btemp+1
  1073  07BA  30C2               	movlw	low __pdataBANK3
  1074  07BB  0084               	movwf	4
  1075  07BC  160A  118A  27E1  120A  118A  	fcall	init_ram0
  1076                           
  1077                           ; Initialize objects allocated to BANK2
  1078  07C1  3069               	movlw	low (__pdataBANK2+25)
  1079  07C2  00FD               	movwf	btemp+-1
  1080  07C3  3008               	movlw	high __pidataBANK2
  1081  07C4  00FE               	movwf	btemp
  1082  07C5  3065               	movlw	low __pidataBANK2
  1083  07C6  00FF               	movwf	btemp+1
  1084  07C7  3050               	movlw	low __pdataBANK2
  1085  07C8  0084               	movwf	4
  1086  07C9  160A  118A  27E1  120A  118A  	fcall	init_ram0
  1087                           
  1088                           ; Initialize objects allocated to BANK1
  1089  07CE  1383               	bcf	3,7	;select IRP bank0
  1090  07CF  30DC               	movlw	low (__pdataBANK1+26)
  1091  07D0  00FD               	movwf	btemp+-1
  1092  07D1  3008               	movlw	high __pidataBANK1
  1093  07D2  00FE               	movwf	btemp
  1094  07D3  307E               	movlw	low __pidataBANK1
  1095  07D4  00FF               	movwf	btemp+1
  1096  07D5  30C2               	movlw	low __pdataBANK1
  1097  07D6  0084               	movwf	4
  1098  07D7  160A  118A  27E1  120A  118A  	fcall	init_ram0
  1099                           
  1100                           ; Clear objects allocated to BANK3
  1101  07DC  1783               	bsf	3,7	;select IRP bank2
  1102  07DD  3090               	movlw	low __pbssBANK3
  1103  07DE  0084               	movwf	4
  1104  07DF  30C2               	movlw	low (__pbssBANK3+50)
  1105  07E0  160A  118A  27CC  120A  118A  	fcall	clear_ram0
  1106                           
  1107                           ; Clear objects allocated to BANK2
  1108  07E5  3010               	movlw	low __pbssBANK2
  1109  07E6  0084               	movwf	4
  1110  07E7  3050               	movlw	low (__pbssBANK2+64)
  1111  07E8  160A  118A  27CC  120A  118A  	fcall	clear_ram0
  1112                           
  1113                           ; Clear objects allocated to BANK1
  1114  07ED  1383               	bcf	3,7	;select IRP bank0
  1115  07EE  30DC               	movlw	low __pbssBANK1
  1116  07EF  0084               	movwf	4
  1117  07F0  30E9               	movlw	low (__pbssBANK1+13)
  1118  07F1  160A  118A  27CC  120A  118A  	fcall	clear_ram0
  1119                           
  1120                           ; Clear objects allocated to BANK0
  1121  07F6  3066               	movlw	low __pbssBANK0
  1122  07F7  0084               	movwf	4
  1123  07F8  3070               	movlw	low (__pbssBANK0+10)
  1124  07F9  160A  118A  27CC   	fcall	clear_ram0
  1125  07FC                     end_of_initialization:	
  1126                           ;End of C runtime variable initialization code
  1127                           
  1128  07FC                     __end_of__initialization:	
  1129  07FC  0183               	clrf	3
  1130  07FD  120A  158A  2E1A   	ljmp	_main	;jump to C main() function
  1131                           
  1132                           	psect	bssBANK0
  1133  0066                     __pbssBANK0:	
  1134  0066                     _dPacketnum:	
  1135  0066                     	ds	2
  1136  0068                     _eflag:	
  1137  0068                     	ds	2
  1138  006A                     _rcv_state:	
  1139  006A                     	ds	2
  1140  006C                     _dfcshi:	
  1141  006C                     	ds	1
  1142  006D                     _dfcslo:	
  1143  006D                     	ds	1
  1144  006E                     _efcshi:	
  1145  006E                     	ds	1
  1146  006F                     _efcslo:	
  1147  006F                     	ds	1
  1148                           
  1149                           	psect	bssBANK1
  1150  00DC                     __pbssBANK1:	
  1151  00DC                     _ePacket:	
  1152  00DC                     	ds	5
  1153  00E1                     _ebitstatus:	
  1154  00E1                     	ds	2
  1155  00E3                     _efcsflag:	
  1156  00E3                     	ds	2
  1157  00E5                     _estuff:	
  1158  00E5                     	ds	2
  1159  00E7                     getbit@oldbit:	
  1160  00E7                     	ds	2
  1161                           
  1162                           	psect	dataBANK1
  1163  00C2                     __pdataBANK1:	
  1164  00C2                     _CWTX_Nref:	
  1165  00C2                     	ds	2
  1166  00C4                     _FMRX_Nref:	
  1167  00C4                     	ds	2
  1168  00C6                     _FMTX_Nref:	
  1169  00C6                     	ds	2
  1170  00C8                     _CWTX_Nprg:	
  1171  00C8                     	ds	10
  1172  00D2                     _FMTX_Nprg:	
  1173  00D2                     	ds	10
  1174                           
  1175                           	psect	bssBANK3
  1176  0190                     __pbssBANK3:	
  1177  0190                     _dPacket:	
  1178  0190                     	ds	50
  1179                           
  1180                           	psect	dataBANK3
  1181  01C2                     __pdataBANK3:	
  1182  01C2                     main@F2007:	
  1183  01C2                     	ds	10
  1184  01CC                     main@F2009:	
  1185  01CC                     	ds	10
  1186  01D6                     main@F2011:	
  1187  01D6                     	ds	10
  1188  01E0                     _FMRX_Nprg:	
  1189  01E0                     	ds	10
  1190                           
  1191                           	psect	bssBANK2
  1192  0110                     __pbssBANK2:	
  1193  0110                     _EEPROMData:	
  1194  0110                     	ds	32
  1195  0130                     _dData:	
  1196  0130                     	ds	32
  1197                           
  1198                           	psect	dataBANK2
  1199  0150                     __pdataBANK2:	
  1200  0150                     _eDataField:	
  1201  0150                     	ds	25
  1202                           
  1203                           	psect	inittext
  1204  17DD                     init_fetch0:	
  1205                           ;	Called with low address in FSR and high address in W
  1206                           
  1207  17DD  087E               	movf	126,w
  1208  17DE  008A               	movwf	10
  1209  17DF  087F               	movf	127,w
  1210  17E0  0082               	movwf	2
  1211  17E1                     init_ram0:	
  1212                           ;Called with:
  1213                           ;	high address of idata address in btemp 
  1214                           ;	low address of idata address in btemp+1 
  1215                           ;	low address of data in FSR
  1216                           ;	high address + 1 of data in btemp-1
  1217                           
  1218  17E1  27DD  160A  118A   	fcall	init_fetch0
  1219  17E4  0080               	movwf	0
  1220  17E5  0A84               	incf	4,f
  1221  17E6  0804               	movf	4,w
  1222  17E7  067D               	xorwf	125,w
  1223  17E8  1903               	btfsc	3,2
  1224  17E9  3400               	retlw	0
  1225  17EA  0AFF               	incf	127,f
  1226  17EB  1903               	btfsc	3,2
  1227  17EC  0AFE               	incf	126,f
  1228  17ED  2FE1               	goto	init_ram0
  1229                           
  1230                           	psect	clrtext
  1231  17CC                     clear_ram0:	
  1232                           ;	Called with FSR containing the base address, and
  1233                           ;	W with the last address+1
  1234                           
  1235  17CC  0064               	clrwdt	;clear the watchdog before getting into this loop
  1236  17CD                     clrloop0:	
  1237  17CD  0180               	clrf	0	;clear RAM location pointed to by FSR
  1238  17CE  0A84               	incf	4,f	;increment pointer
  1239  17CF  0604               	xorwf	4,w	;XOR with final address
  1240  17D0  1903               	btfsc	3,2	;have we reached the end yet?
  1241  17D1  3400               	retlw	0	;all done for this memory range, return
  1242  17D2  0604               	xorwf	4,w	;XOR again to restore value
  1243  17D3  2FCD               	goto	clrloop0	;do the next byte
  1244                           
  1245                           	psect	cstackBANK1
  1246  00A0                     __pcstackBANK1:	
  1247  00A0                     main@FMTX_Nprg:	
  1248                           
  1249                           ; 10 bytes @ 0x0
  1250  00A0                     	ds	10
  1251  00AA                     main@CWTX_Nprg:	
  1252                           
  1253                           ; 10 bytes @ 0xA
  1254  00AA                     	ds	10
  1255  00B4                     main@FMRX_Nprg:	
  1256                           
  1257                           ; 10 bytes @ 0x14
  1258  00B4                     	ds	10
  1259  00BE                     main@NM_wad_header:	
  1260                           
  1261                           ; 1 bytes @ 0x1E
  1262  00BE                     	ds	1
  1263  00BF                     main@i:	
  1264                           
  1265                           ; 2 bytes @ 0x1F
  1266  00BF                     	ds	2
  1267  00C1                     main@dData:	
  1268                           
  1269                           ; 1 bytes @ 0x21
  1270  00C1                     	ds	1
  1271                           
  1272                           	psect	cstackCOMMON
  1273  0070                     __pcstackCOMMON:	
  1274  0070                     ??_Init_WDT:	
  1275  0070                     ?_Reset_EPS:	
  1276                           ; 1 bytes @ 0x0
  1277                           
  1278  0070                     ??_Reset_EPS:	
  1279                           ; 1 bytes @ 0x0
  1280                           
  1281  0070                     ?__NOP:	
  1282                           ; 1 bytes @ 0x0
  1283                           
  1284  0070                     ??__NOP:	
  1285                           ; 1 bytes @ 0x0
  1286                           
  1287  0070                     ?_Init_SERIAL:	
  1288                           ; 1 bytes @ 0x0
  1289                           
  1290  0070                     ??_Init_SERIAL:	
  1291                           ; 1 bytes @ 0x0
  1292                           
  1293  0070                     ?_putch:	
  1294                           ; 1 bytes @ 0x0
  1295                           
  1296  0070                     ??_putch:	
  1297                           ; 1 bytes @ 0x0
  1298                           
  1299  0070                     ?_Init_MPU:	
  1300                           ; 1 bytes @ 0x0
  1301                           
  1302  0070                     ??_Init_MPU:	
  1303                           ; 1 bytes @ 0x0
  1304                           
  1305  0070                     ?_waitFlag:	
  1306                           ; 1 bytes @ 0x0
  1307                           
  1308  0070                     ?_getdata:	
  1309                           ; 1 bytes @ 0x0
  1310                           
  1311  0070                     ?_ReceivePacket_data:	
  1312                           ; 1 bytes @ 0x0
  1313                           
  1314  0070                     ?_main:	
  1315                           ; 1 bytes @ 0x0
  1316                           
  1317  0070                     ?_I2C_Master_Wait:	
  1318                           ; 1 bytes @ 0x0
  1319                           
  1320  0070                     ??_I2C_Master_Wait:	
  1321                           ; 1 bytes @ 0x0
  1322                           
  1323  0070                     ?_I2C_Master_Start:	
  1324                           ; 1 bytes @ 0x0
  1325                           
  1326  0070                     ??_I2C_Master_Start:	
  1327                           ; 1 bytes @ 0x0
  1328                           
  1329  0070                     ?_I2C_Master_Stop:	
  1330                           ; 1 bytes @ 0x0
  1331                           
  1332  0070                     ??_I2C_Master_Stop:	
  1333                           ; 1 bytes @ 0x0
  1334                           
  1335  0070                     ?_I2C_Master_Write:	
  1336                           ; 1 bytes @ 0x0
  1337                           
  1338  0070                     ?_Init_WDT:	
  1339                           ; 1 bytes @ 0x0
  1340                           
  1341  0070                     ?_getbit:	
  1342                           ; 2 bytes @ 0x0
  1343                           
  1344  0070                     ?_fcscheck:	
  1345                           ; 2 bytes @ 0x0
  1346                           
  1347  0070                     ?___awdiv:	
  1348                           ; 2 bytes @ 0x0
  1349                           
  1350  0070                     ?___lldiv:	
  1351                           ; 2 bytes @ 0x0
  1352                           
  1353  0070                     putch@byte:	
  1354                           ; 4 bytes @ 0x0
  1355                           
  1356  0070                     I2C_Master_Write@d:	
  1357                           ; 1 bytes @ 0x0
  1358                           
  1359  0070                     __NOP@i:	
  1360                           ; 2 bytes @ 0x0
  1361                           
  1362  0070                     ___awdiv@divisor:	
  1363                           ; 2 bytes @ 0x0
  1364                           
  1365  0070                     ___lldiv@divisor:	
  1366                           ; 2 bytes @ 0x0
  1367                           
  1368                           
  1369                           ; 4 bytes @ 0x0
  1370  0070                     	ds	1
  1371  0071                     ?_NM_waddress:	
  1372  0071                     ?_printf:	
  1373                           ; 1 bytes @ 0x1
  1374                           
  1375  0071                     NM_waddress@whigh_address:	
  1376                           ; 2 bytes @ 0x1
  1377                           
  1378                           
  1379                           ; 1 bytes @ 0x1
  1380  0071                     	ds	1
  1381  0072                     ?_EEPROM_Write:	
  1382  0072                     ??_getbit:	
  1383                           ; 1 bytes @ 0x2
  1384                           
  1385  0072                     ??_fcscheck:	
  1386                           ; 1 bytes @ 0x2
  1387                           
  1388  0072                     ??_I2C_Master_Write:	
  1389                           ; 1 bytes @ 0x2
  1390                           
  1391  0072                     ?_L_OUT:	
  1392                           ; 1 bytes @ 0x2
  1393                           
  1394  0072                     ?_H_OUT:	
  1395                           ; 1 bytes @ 0x2
  1396                           
  1397  0072                     ?_STBOUT:	
  1398                           ; 1 bytes @ 0x2
  1399                           
  1400  0072                     NM_waddress@wlow_address:	
  1401                           ; 1 bytes @ 0x2
  1402                           
  1403  0072                     EEPROM_Write@high_address:	
  1404                           ; 1 bytes @ 0x2
  1405                           
  1406  0072                     L_OUT@fmcwtxrx:	
  1407                           ; 1 bytes @ 0x2
  1408                           
  1409  0072                     H_OUT@fmcwtxrx:	
  1410                           ; 2 bytes @ 0x2
  1411                           
  1412  0072                     STBOUT@fmcwtxrx:	
  1413                           ; 2 bytes @ 0x2
  1414                           
  1415  0072                     ___awdiv@dividend:	
  1416                           ; 2 bytes @ 0x2
  1417                           
  1418                           
  1419                           ; 2 bytes @ 0x2
  1420  0072                     	ds	1
  1421  0073                     ??_printf:	
  1422  0073                     ??_NM_waddress:	
  1423                           ; 1 bytes @ 0x3
  1424                           
  1425  0073                     NM_waddress@NM_wad_header:	
  1426                           ; 1 bytes @ 0x3
  1427                           
  1428  0073                     EEPROM_Write@low_address:	
  1429                           ; 1 bytes @ 0x3
  1430                           
  1431                           
  1432                           ; 1 bytes @ 0x3
  1433  0073                     	ds	1
  1434  0074                     ??_L_OUT:	
  1435  0074                     ??_H_OUT:	
  1436                           ; 1 bytes @ 0x4
  1437                           
  1438  0074                     ??_STBOUT:	
  1439                           ; 1 bytes @ 0x4
  1440                           
  1441  0074                     ?_OPINIT:	
  1442                           ; 1 bytes @ 0x4
  1443                           
  1444  0074                     ??___awdiv:	
  1445                           ; 1 bytes @ 0x4
  1446                           
  1447  0074                     fcscheck@bt:	
  1448                           ; 1 bytes @ 0x4
  1449                           
  1450  0074                     EEPROM_Write@data:	
  1451                           ; 1 bytes @ 0x4
  1452                           
  1453  0074                     printf@flag:	
  1454                           ; 1 bytes @ 0x4
  1455                           
  1456  0074                     getbit@i:	
  1457                           ; 1 bytes @ 0x4
  1458                           
  1459  0074                     OPINIT@fmcwtxrx:	
  1460                           ; 2 bytes @ 0x4
  1461                           
  1462  0074                     ___lldiv@dividend:	
  1463                           ; 2 bytes @ 0x4
  1464                           
  1465                           
  1466                           ; 4 bytes @ 0x4
  1467  0074                     	ds	1
  1468  0075                     ??_EEPROM_Write:	
  1469  0075                     printf@ap:	
  1470                           ; 1 bytes @ 0x5
  1471                           
  1472  0075                     ___awdiv@counter:	
  1473                           ; 1 bytes @ 0x5
  1474                           
  1475  0075                     fcscheck@i:	
  1476                           ; 1 bytes @ 0x5
  1477                           
  1478                           
  1479                           ; 2 bytes @ 0x5
  1480  0075                     	ds	1
  1481  0076                     ??_waitFlag:	
  1482  0076                     ??_getdata:	
  1483                           ; 1 bytes @ 0x6
  1484                           
  1485  0076                     ??_OPINIT:	
  1486                           ; 1 bytes @ 0x6
  1487                           
  1488  0076                     printf@f:	
  1489                           ; 1 bytes @ 0x6
  1490                           
  1491  0076                     ___awdiv@sign:	
  1492                           ; 1 bytes @ 0x6
  1493                           
  1494                           
  1495                           ; 1 bytes @ 0x6
  1496  0076                     	ds	1
  1497  0077                     printf@c:	
  1498  0077                     fcscheck@i_142:	
  1499                           ; 1 bytes @ 0x7
  1500                           
  1501  0077                     ___awdiv@quotient:	
  1502                           ; 2 bytes @ 0x7
  1503                           
  1504                           
  1505                           ; 2 bytes @ 0x7
  1506  0077                     	ds	1
  1507  0078                     ??___lldiv:	
  1508  0078                     EEPROM_Write@EEPROM_address:	
  1509                           ; 1 bytes @ 0x8
  1510                           
  1511                           
  1512                           ; 1 bytes @ 0x8
  1513  0078                     	ds	1
  1514  0079                     ?_OUTFQ:	
  1515  0079                     ?_RFDOUT:	
  1516                           ; 1 bytes @ 0x9
  1517                           
  1518  0079                     fcscheck@byte:	
  1519                           ; 1 bytes @ 0x9
  1520                           
  1521  0079                     EEPROM_Write@Address:	
  1522                           ; 1 bytes @ 0x9
  1523                           
  1524  0079                     OUTFQ@fmcwtxrx:	
  1525                           ; 1 bytes @ 0x9
  1526                           
  1527  0079                     RFDOUT@fmcwtxrx:	
  1528                           ; 2 bytes @ 0x9
  1529                           
  1530  0079                     ___lldiv@quotient:	
  1531                           ; 2 bytes @ 0x9
  1532                           
  1533                           
  1534                           ; 4 bytes @ 0x9
  1535  0079                     	ds	1
  1536  007A                     ??_ReceivePacket_data:	
  1537                           
  1538                           ; 1 bytes @ 0xA
  1539  007A                     	ds	1
  1540  007B                     OUTFQ@Nprg:	
  1541  007B                     RFDOUT@Nref:	
  1542                           ; 2 bytes @ 0xB
  1543                           
  1544                           
  1545                           ; 2 bytes @ 0xB
  1546  007B                     	ds	2
  1547  007D                     ??_FMTX:	
  1548  007D                     ??_CWTX:	
  1549                           ; 1 bytes @ 0xD
  1550                           
  1551  007D                     ??_FMRX:	
  1552                           ; 1 bytes @ 0xD
  1553                           
  1554  007D                     ___lldiv@counter:	
  1555                           ; 1 bytes @ 0xD
  1556                           
  1557                           
  1558                           ; 1 bytes @ 0xD
  1559  007D                     	ds	1
  1560                           
  1561                           	psect	cstackBANK0
  1562  0020                     __pcstackBANK0:	
  1563  0020                     ?_Init_I2C_M:	
  1564  0020                     ??_OUTFQ:	
  1565                           ; 1 bytes @ 0x0
  1566                           
  1567  0020                     ??_RFDOUT:	
  1568                           ; 1 bytes @ 0x0
  1569                           
  1570  0020                     waitFlag@i:	
  1571                           ; 1 bytes @ 0x0
  1572                           
  1573  0020                     getdata@bufstore_counter:	
  1574                           ; 2 bytes @ 0x0
  1575                           
  1576  0020                     Init_I2C_M@c:	
  1577                           ; 2 bytes @ 0x0
  1578                           
  1579                           
  1580                           ; 4 bytes @ 0x0
  1581  0020                     	ds	2
  1582  0022                     waitFlag@j:	
  1583  0022                     getdata@dstuff:	
  1584                           ; 2 bytes @ 0x2
  1585                           
  1586                           
  1587                           ; 2 bytes @ 0x2
  1588  0022                     	ds	1
  1589  0023                     RFDOUT@Nref_b:	
  1590                           
  1591                           ; 24 bytes @ 0x3
  1592  0023                     	ds	1
  1593  0024                     ??_Init_I2C_M:	
  1594  0024                     waitFlag@j_111:	
  1595                           ; 1 bytes @ 0x4
  1596                           
  1597  0024                     getdata@dbitstatus:	
  1598                           ; 2 bytes @ 0x4
  1599                           
  1600                           
  1601                           ; 2 bytes @ 0x4
  1602  0024                     	ds	2
  1603  0026                     getdata@buf:	
  1604  0026                     waitFlag@j_113:	
  1605                           ; 1 bytes @ 0x6
  1606                           
  1607                           
  1608                           ; 2 bytes @ 0x6
  1609  0026                     	ds	2
  1610  0028                     waitFlag@j_115:	
  1611                           
  1612                           ; 2 bytes @ 0x8
  1613  0028                     	ds	2
  1614  002A                     waitFlag@j_117:	
  1615                           
  1616                           ; 2 bytes @ 0xA
  1617  002A                     	ds	2
  1618  002C                     waitFlag@j_119:	
  1619                           
  1620                           ; 2 bytes @ 0xC
  1621  002C                     	ds	2
  1622  002E                     waitFlag@j_120:	
  1623                           
  1624                           ; 2 bytes @ 0xE
  1625  002E                     	ds	2
  1626  0030                     waitFlag@j_122:	
  1627  0030                     OUTFQ@Nprg_b:	
  1628                           ; 2 bytes @ 0x10
  1629                           
  1630                           
  1631                           ; 34 bytes @ 0x10
  1632  0030                     	ds	2
  1633  0032                     waitFlag@j_124:	
  1634                           
  1635                           ; 2 bytes @ 0x12
  1636  0032                     	ds	2
  1637  0034                     waitFlag@j_126:	
  1638                           
  1639                           ; 2 bytes @ 0x14
  1640  0034                     	ds	2
  1641  0036                     waitFlag@j_128:	
  1642                           
  1643                           ; 2 bytes @ 0x16
  1644  0036                     	ds	2
  1645  0038                     waitFlag@j_130:	
  1646                           
  1647                           ; 2 bytes @ 0x18
  1648  0038                     	ds	2
  1649  003A                     waitFlag@flag_judge:	
  1650                           
  1651                           ; 2 bytes @ 0x1A
  1652  003A                     	ds	1
  1653  003B                     RFDOUT@i_477:	
  1654                           
  1655                           ; 2 bytes @ 0x1B
  1656  003B                     	ds	1
  1657  003C                     waitFlag@buf:	
  1658                           
  1659                           ; 1 bytes @ 0x1C
  1660  003C                     	ds	1
  1661  003D                     ReceivePacket_data@fcschecker:	
  1662  003D                     RFDOUT@i:	
  1663                           ; 2 bytes @ 0x1D
  1664                           
  1665                           
  1666                           ; 2 bytes @ 0x1D
  1667  003D                     	ds	2
  1668  003F                     ReceivePacket_data@i:	
  1669  003F                     RFDOUT@i_478:	
  1670                           ; 2 bytes @ 0x1F
  1671                           
  1672                           
  1673                           ; 2 bytes @ 0x1F
  1674  003F                     	ds	19
  1675  0052                     OUTFQ@i_466:	
  1676                           
  1677                           ; 2 bytes @ 0x32
  1678  0052                     	ds	2
  1679  0054                     OUTFQ@count:	
  1680                           
  1681                           ; 2 bytes @ 0x34
  1682  0054                     	ds	2
  1683  0056                     OUTFQ@i:	
  1684                           
  1685                           ; 2 bytes @ 0x36
  1686  0056                     	ds	2
  1687  0058                     OUTFQ@i_468:	
  1688                           
  1689                           ; 2 bytes @ 0x38
  1690  0058                     	ds	2
  1691  005A                     OUTFQ@j:	
  1692                           
  1693                           ; 2 bytes @ 0x3A
  1694  005A                     	ds	2
  1695  005C                     ?_FMTX:	
  1696  005C                     ?_CWTX:	
  1697                           ; 1 bytes @ 0x3C
  1698                           
  1699  005C                     ?_FMRX:	
  1700                           ; 1 bytes @ 0x3C
  1701                           
  1702  005C                     FMTX@Nref:	
  1703                           ; 1 bytes @ 0x3C
  1704                           
  1705  005C                     CWTX@Nref:	
  1706                           ; 2 bytes @ 0x3C
  1707                           
  1708  005C                     FMRX@Nref:	
  1709                           ; 2 bytes @ 0x3C
  1710                           
  1711                           
  1712                           ; 2 bytes @ 0x3C
  1713  005C                     	ds	2
  1714  005E                     FMTX@Nprg:	
  1715  005E                     CWTX@Nprg:	
  1716                           ; 2 bytes @ 0x3E
  1717                           
  1718  005E                     FMRX@Nprg:	
  1719                           ; 2 bytes @ 0x3E
  1720                           
  1721                           
  1722                           ; 2 bytes @ 0x3E
  1723  005E                     	ds	2
  1724  0060                     FMTX@fmtx:	
  1725  0060                     CWTX@cwtx:	
  1726                           ; 2 bytes @ 0x40
  1727                           
  1728  0060                     FMRX@fmrx:	
  1729                           ; 2 bytes @ 0x40
  1730                           
  1731                           
  1732                           ; 2 bytes @ 0x40
  1733  0060                     	ds	2
  1734  0062                     ??_main:	
  1735                           
  1736                           ; 1 bytes @ 0x42
  1737  0062                     	ds	4
  1738                           
  1739                           	psect	maintext
  1740  0E1A                     __pmaintext:	
  1741 ;;
  1742 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1743 ;;
  1744 ;; *************** function _main *****************
  1745 ;; Defined at:
  1746 ;;		line 38 in file "main.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;		None
  1749 ;; Auto vars:     Size  Location     Type
  1750 ;;  FMRX_Nprg      10   20[BANK1 ] int [5]
  1751 ;;  CWTX_Nprg      10   10[BANK1 ] int [5]
  1752 ;;  FMTX_Nprg      10    0[BANK1 ] int [5]
  1753 ;;  NM_wad_heade    1   30[BANK1 ] unsigned char 
  1754 ;;  i               2   31[BANK1 ] unsigned int 
  1755 ;;  dData           1   33[BANK1 ] PTR unsigned char 
  1756 ;;		 -> NULL(0), dData(32), 
  1757 ;; Return value:  Size  Location     Type
  1758 ;;                  1    wreg      void 
  1759 ;; Registers used:
  1760 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1761 ;; Tracked objects:
  1762 ;;		On entry : B00/0
  1763 ;;		On exit  : 0/0
  1764 ;;		Unchanged: 0/0
  1765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1766 ;;      Params:         0       0       0       0       0
  1767 ;;      Locals:         0       0      34       0       0
  1768 ;;      Temps:          0       4       0       0       0
  1769 ;;      Totals:         0       4      34       0       0
  1770 ;;Total ram usage:       38 bytes
  1771 ;; Hardware stack levels required when called:    4
  1772 ;; This function calls:
  1773 ;;		_CWTX
  1774 ;;		_EEPROM_Write
  1775 ;;		_FMRX
  1776 ;;		_FMTX
  1777 ;;		_Init_I2C_M
  1778 ;;		_Init_MPU
  1779 ;;		_Init_SERIAL
  1780 ;;		_Init_WDT
  1781 ;;		_NM_waddress
  1782 ;;		_ReceivePacket_data
  1783 ;;		_Reset_EPS
  1784 ;;		_printf
  1785 ;; This function is called by:
  1786 ;;		Startup code after reset
  1787 ;; This function uses a non-reentrant model
  1788 ;;
  1789                           
  1790                           
  1791                           ;psect for function _main
  1792  0E1A                     _main:	
  1793                           
  1794                           ;main.c: 43: _delay((unsigned long)((500)*(10000000/4000.0)));
  1795                           
  1796                           ;incstack = 0
  1797                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1798  0E1A  3007               	movlw	7
  1799  0E1B  1283               	bcf	3,5	;RP0=0, select bank0
  1800  0E1C  1303               	bcf	3,6	;RP1=0, select bank0
  1801  0E1D  00E4               	movwf	??_main+2
  1802  0E1E  3058               	movlw	88
  1803  0E1F  00E3               	movwf	??_main+1
  1804  0E20  305E               	movlw	94
  1805  0E21  00E2               	movwf	??_main
  1806  0E22                     u3627:	
  1807  0E22  0BE2               	decfsz	??_main,f
  1808  0E23  2E22               	goto	u3627
  1809  0E24  0BE3               	decfsz	??_main+1,f
  1810  0E25  2E22               	goto	u3627
  1811  0E26  0BE4               	decfsz	??_main+2,f
  1812  0E27  2E22               	goto	u3627
  1813  0E28  2E29               	nop2
  1814                           
  1815                           ;main.c: 45: Init_SERIAL();
  1816  0E29  120A  158A  204C  120A  158A  	fcall	_Init_SERIAL
  1817                           
  1818                           ;main.c: 46: Init_MPU();
  1819  0E2E  120A  158A  2098  120A  158A  	fcall	_Init_MPU
  1820                           
  1821                           ;main.c: 47: Init_I2C_M(400000);
  1822  0E33  3000               	movlw	0
  1823  0E34  1283               	bcf	3,5	;RP0=0, select bank0
  1824  0E35  1303               	bcf	3,6	;RP1=0, select bank0
  1825  0E36  00A3               	movwf	Init_I2C_M@c+3
  1826  0E37  3006               	movlw	6
  1827  0E38  00A2               	movwf	Init_I2C_M@c+2
  1828  0E39  301A               	movlw	26
  1829  0E3A  00A1               	movwf	Init_I2C_M@c+1
  1830  0E3B  3080               	movlw	128
  1831  0E3C  00A0               	movwf	Init_I2C_M@c
  1832  0E3D  120A  158A  218F  120A  158A  	fcall	_Init_I2C_M
  1833                           
  1834                           ;main.c: 48: Init_WDT();
  1835  0E42  120A  158A  2023  120A  158A  	fcall	_Init_WDT
  1836                           
  1837                           ;main.c: 53: RB2 = 1;
  1838  0E47  1283               	bcf	3,5	;RP0=0, select bank0
  1839  0E48  1303               	bcf	3,6	;RP1=0, select bank0
  1840  0E49  1506               	bsf	6,2	;volatile
  1841                           
  1842                           ;main.c: 54: _delay((unsigned long)((500)*(10000000/4000.0)));
  1843  0E4A  3007               	movlw	7
  1844  0E4B  00E4               	movwf	??_main+2
  1845  0E4C  3058               	movlw	88
  1846  0E4D  00E3               	movwf	??_main+1
  1847  0E4E  305E               	movlw	94
  1848  0E4F  00E2               	movwf	??_main
  1849  0E50                     u3637:	
  1850  0E50  0BE2               	decfsz	??_main,f
  1851  0E51  2E50               	goto	u3637
  1852  0E52  0BE3               	decfsz	??_main+1,f
  1853  0E53  2E50               	goto	u3637
  1854  0E54  0BE4               	decfsz	??_main+2,f
  1855  0E55  2E50               	goto	u3637
  1856  0E56  2E57               	nop2
  1857                           
  1858                           ;main.c: 56: FMTX(FMTX_Nref, FMTX_Nprg);
  1859  0E57  1683               	bsf	3,5	;RP0=1, select bank1
  1860  0E58  1303               	bcf	3,6	;RP1=0, select bank1
  1861  0E59  0847               	movf	(_FMTX_Nref+1)^(0+128),w
  1862  0E5A  1283               	bcf	3,5	;RP0=0, select bank0
  1863  0E5B  1303               	bcf	3,6	;RP1=0, select bank0
  1864  0E5C  00DD               	movwf	FMTX@Nref+1
  1865  0E5D  1683               	bsf	3,5	;RP0=1, select bank1
  1866  0E5E  1303               	bcf	3,6	;RP1=0, select bank1
  1867  0E5F  0846               	movf	_FMTX_Nref^(0+128),w
  1868  0E60  1283               	bcf	3,5	;RP0=0, select bank0
  1869  0E61  1303               	bcf	3,6	;RP1=0, select bank0
  1870  0E62  00DC               	movwf	FMTX@Nref
  1871  0E63  30D2               	movlw	(low (_FMTX_Nprg| 0))& (0+255)
  1872  0E64  00DE               	movwf	FMTX@Nprg
  1873  0E65  3000               	movlw	0
  1874  0E66  00DF               	movwf	FMTX@Nprg+1
  1875  0E67  120A  158A  2135  120A  158A  	fcall	_FMTX
  1876                           
  1877                           ;main.c: 57: CWTX(CWTX_Nref, CWTX_Nprg);
  1878  0E6C  1683               	bsf	3,5	;RP0=1, select bank1
  1879  0E6D  1303               	bcf	3,6	;RP1=0, select bank1
  1880  0E6E  0843               	movf	(_CWTX_Nref+1)^(0+128),w
  1881  0E6F  1283               	bcf	3,5	;RP0=0, select bank0
  1882  0E70  1303               	bcf	3,6	;RP1=0, select bank0
  1883  0E71  00DD               	movwf	CWTX@Nref+1
  1884  0E72  1683               	bsf	3,5	;RP0=1, select bank1
  1885  0E73  1303               	bcf	3,6	;RP1=0, select bank1
  1886  0E74  0842               	movf	_CWTX_Nref^(0+128),w
  1887  0E75  1283               	bcf	3,5	;RP0=0, select bank0
  1888  0E76  1303               	bcf	3,6	;RP1=0, select bank0
  1889  0E77  00DC               	movwf	CWTX@Nref
  1890  0E78  30C8               	movlw	(low (_CWTX_Nprg| 0))& (0+255)
  1891  0E79  00DE               	movwf	CWTX@Nprg
  1892  0E7A  3000               	movlw	0
  1893  0E7B  00DF               	movwf	CWTX@Nprg+1
  1894  0E7C  120A  158A  20DD  120A  158A  	fcall	_CWTX
  1895                           
  1896                           ;main.c: 58: FMRX(FMRX_Nref, FMRX_Nprg);
  1897  0E81  1683               	bsf	3,5	;RP0=1, select bank1
  1898  0E82  1303               	bcf	3,6	;RP1=0, select bank1
  1899  0E83  0845               	movf	(_FMRX_Nref+1)^(0+128),w
  1900  0E84  1283               	bcf	3,5	;RP0=0, select bank0
  1901  0E85  1303               	bcf	3,6	;RP1=0, select bank0
  1902  0E86  00DD               	movwf	FMRX@Nref+1
  1903  0E87  1683               	bsf	3,5	;RP0=1, select bank1
  1904  0E88  1303               	bcf	3,6	;RP1=0, select bank1
  1905  0E89  0844               	movf	_FMRX_Nref^(0+128),w
  1906  0E8A  1283               	bcf	3,5	;RP0=0, select bank0
  1907  0E8B  1303               	bcf	3,6	;RP1=0, select bank0
  1908  0E8C  00DC               	movwf	FMRX@Nref
  1909  0E8D  30E0               	movlw	(low (_FMRX_Nprg| (0+256)))& (0+255)
  1910  0E8E  00DE               	movwf	FMRX@Nprg
  1911  0E8F  3001               	movlw	1
  1912  0E90  00DF               	movwf	FMRX@Nprg+1
  1913  0E91  120A  158A  2109  120A  158A  	fcall	_FMRX
  1914                           
  1915                           ;main.c: 59: RB2 = 0;
  1916  0E96  1283               	bcf	3,5	;RP0=0, select bank0
  1917  0E97  1303               	bcf	3,6	;RP1=0, select bank0
  1918  0E98  1106               	bcf	6,2	;volatile
  1919                           
  1920                           ;main.c: 60: printf("start\r\n");
  1921  0E99  3003               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1922  0E9A  120A  158A  224F  120A  158A  	fcall	_printf
  1923  0E9F                     l3807:	
  1924                           ;main.c: 61: while(1){
  1925                           
  1926                           
  1927                           ;main.c: 75: UBYTE *dData;
  1928                           ;main.c: 76: dData = ReceivePacket_data();
  1929  0E9F  120A  158A  2457  120A  158A  	fcall	_ReceivePacket_data
  1930  0EA4  1283               	bcf	3,5	;RP0=0, select bank0
  1931  0EA5  1303               	bcf	3,6	;RP1=0, select bank0
  1932  0EA6  00E2               	movwf	??_main
  1933  0EA7  0862               	movf	??_main,w
  1934  0EA8  1683               	bsf	3,5	;RP0=1, select bank1
  1935  0EA9  1303               	bcf	3,6	;RP1=0, select bank1
  1936  0EAA  00C1               	movwf	main@dData^(0+128)
  1937                           
  1938                           ;main.c: 82: EEPROM_Write(0x50,0x00,0x00,dData);
  1939  0EAB  01F2               	clrf	EEPROM_Write@high_address
  1940  0EAC  01F3               	clrf	EEPROM_Write@low_address
  1941  0EAD  0841               	movf	main@dData^(0+128),w
  1942  0EAE  1283               	bcf	3,5	;RP0=0, select bank0
  1943  0EAF  1303               	bcf	3,6	;RP1=0, select bank0
  1944  0EB0  00E2               	movwf	??_main
  1945  0EB1  0862               	movf	??_main,w
  1946  0EB2  00F4               	movwf	EEPROM_Write@data
  1947  0EB3  3050               	movlw	80
  1948  0EB4  120A  158A  233B  120A  158A  	fcall	_EEPROM_Write
  1949                           
  1950                           ;main.c: 84: for (UINT i = 0;i < 32;i++){
  1951  0EB9  1683               	bsf	3,5	;RP0=1, select bank1
  1952  0EBA  1303               	bcf	3,6	;RP1=0, select bank1
  1953  0EBB  01BF               	clrf	main@i^(0+128)
  1954  0EBC  01C0               	clrf	(main@i+1)^(0+128)
  1955  0EBD  3000               	movlw	0
  1956  0EBE  0240               	subwf	(main@i+1)^(0+128),w
  1957  0EBF  3020               	movlw	32
  1958  0EC0  1903               	skipnz
  1959  0EC1  023F               	subwf	main@i^(0+128),w
  1960  0EC2  1803               	btfsc	3,0
  1961  0EC3  2EF3               	goto	l3825
  1962  0EC4                     l3817:	
  1963                           
  1964                           ;main.c: 85: printf("%c", dData[i]);
  1965  0EC4  083F               	movf	main@i^(0+128),w
  1966  0EC5  0741               	addwf	main@dData^(0+128),w
  1967  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  1968  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  1969  0EC8  00E2               	movwf	??_main
  1970  0EC9  0862               	movf	??_main,w
  1971  0ECA  0084               	movwf	4
  1972  0ECB  1783               	bsf	3,7	;select IRP bank2
  1973  0ECC  0800               	movf	0,w
  1974  0ECD  00E3               	movwf	??_main+1
  1975  0ECE  01E4               	clrf	??_main+2
  1976  0ECF  0863               	movf	??_main+1,w
  1977  0ED0  00F1               	movwf	?_printf
  1978  0ED1  0864               	movf	??_main+2,w
  1979  0ED2  00F2               	movwf	?_printf+1
  1980  0ED3  3019               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  1981  0ED4  120A  158A  224F  120A  158A  	fcall	_printf
  1982                           
  1983                           ;main.c: 86: dData[i] = 0x00;
  1984  0ED9  1683               	bsf	3,5	;RP0=1, select bank1
  1985  0EDA  1303               	bcf	3,6	;RP1=0, select bank1
  1986  0EDB  083F               	movf	main@i^(0+128),w
  1987  0EDC  0741               	addwf	main@dData^(0+128),w
  1988  0EDD  1283               	bcf	3,5	;RP0=0, select bank0
  1989  0EDE  1303               	bcf	3,6	;RP1=0, select bank0
  1990  0EDF  00E2               	movwf	??_main
  1991  0EE0  0862               	movf	??_main,w
  1992  0EE1  0084               	movwf	4
  1993  0EE2  1783               	bsf	3,7	;select IRP bank2
  1994  0EE3  0180               	clrf	0
  1995  0EE4  3001               	movlw	1
  1996  0EE5  1683               	bsf	3,5	;RP0=1, select bank1
  1997  0EE6  1303               	bcf	3,6	;RP1=0, select bank1
  1998  0EE7  07BF               	addwf	main@i^(0+128),f
  1999  0EE8  1803               	skipnc
  2000  0EE9  0AC0               	incf	(main@i+1)^(0+128),f
  2001  0EEA  3000               	movlw	0
  2002  0EEB  07C0               	addwf	(main@i+1)^(0+128),f
  2003  0EEC  3000               	movlw	0
  2004  0EED  0240               	subwf	(main@i+1)^(0+128),w
  2005  0EEE  3020               	movlw	32
  2006  0EEF  1903               	skipnz
  2007  0EF0  023F               	subwf	main@i^(0+128),w
  2008  0EF1  1C03               	skipc
  2009  0EF2  2EC4               	goto	l3817
  2010  0EF3                     l3825:	
  2011                           
  2012                           ;main.c: 87: }
  2013                           ;main.c: 93: if(dData[0]=='n'){
  2014  0EF3  0841               	movf	main@dData^(0+128),w
  2015  0EF4  0084               	movwf	4
  2016  0EF5  306E               	movlw	110
  2017  0EF6  1783               	bsf	3,7	;select IRP bank2
  2018  0EF7  0600               	xorwf	0,w
  2019  0EF8  1D03               	btfss	3,2
  2020  0EF9  2F0B               	goto	l3831
  2021                           
  2022                           ;main.c: 95: UBYTE NM_wad_header = 0x72;
  2023  0EFA  3072               	movlw	114
  2024  0EFB  1283               	bcf	3,5	;RP0=0, select bank0
  2025  0EFC  1303               	bcf	3,6	;RP1=0, select bank0
  2026  0EFD  00E2               	movwf	??_main
  2027  0EFE  0862               	movf	??_main,w
  2028  0EFF  1683               	bsf	3,5	;RP0=1, select bank1
  2029  0F00  1303               	bcf	3,6	;RP1=0, select bank1
  2030  0F01  00BE               	movwf	main@NM_wad_header^(0+128)
  2031                           
  2032                           ;main.c: 96: NM_waddress(NM_wad_header, 0x00, 0x00);
  2033  0F02  01F1               	clrf	NM_waddress@whigh_address
  2034  0F03  01F2               	clrf	NM_waddress@wlow_address
  2035  0F04  083E               	movf	main@NM_wad_header^(0+128),w
  2036  0F05  160A  118A  27EE  120A  158A  	fcall	_NM_waddress
  2037                           
  2038                           ;main.c: 98: }else if(dData[0]=='p'){
  2039  0F0A  2FF0               	goto	l3867
  2040  0F0B                     l3831:	
  2041  0F0B  1683               	bsf	3,5	;RP0=1, select bank1
  2042  0F0C  1303               	bcf	3,6	;RP1=0, select bank1
  2043  0F0D  0841               	movf	main@dData^(0+128),w
  2044  0F0E  0084               	movwf	4
  2045  0F0F  3070               	movlw	112
  2046  0F10  1783               	bsf	3,7	;select IRP bank2
  2047  0F11  0600               	xorwf	0,w
  2048  0F12  1D03               	btfss	3,2
  2049  0F13  2FF0               	goto	l3867
  2050                           
  2051                           ;main.c: 100: RB2 = 1;
  2052  0F14  1283               	bcf	3,5	;RP0=0, select bank0
  2053  0F15  1303               	bcf	3,6	;RP1=0, select bank0
  2054  0F16  1506               	bsf	6,2	;volatile
  2055                           
  2056                           ;main.c: 101: _delay((unsigned long)((500)*(10000000/4000.0)));
  2057  0F17  3007               	movlw	7
  2058  0F18  00E4               	movwf	??_main+2
  2059  0F19  3058               	movlw	88
  2060  0F1A  00E3               	movwf	??_main+1
  2061  0F1B  305E               	movlw	94
  2062  0F1C  00E2               	movwf	??_main
  2063  0F1D                     u3647:	
  2064  0F1D  0BE2               	decfsz	??_main,f
  2065  0F1E  2F1D               	goto	u3647
  2066  0F1F  0BE3               	decfsz	??_main+1,f
  2067  0F20  2F1D               	goto	u3647
  2068  0F21  0BE4               	decfsz	??_main+2,f
  2069  0F22  2F1D               	goto	u3647
  2070  0F23  2F24               	nop2
  2071                           
  2072                           ;main.c: 102: RB2 = 0;
  2073  0F24  1283               	bcf	3,5	;RP0=0, select bank0
  2074  0F25  1303               	bcf	3,6	;RP1=0, select bank0
  2075  0F26  1106               	bcf	6,2	;volatile
  2076                           
  2077                           ;main.c: 103: if(dData[2] == 'r'){
  2078  0F27  1683               	bsf	3,5	;RP0=1, select bank1
  2079  0F28  1303               	bcf	3,6	;RP1=0, select bank1
  2080  0F29  0841               	movf	main@dData^(0+128),w
  2081  0F2A  3E02               	addlw	2
  2082  0F2B  0084               	movwf	4
  2083  0F2C  3072               	movlw	114
  2084  0F2D  1783               	bsf	3,7	;select IRP bank2
  2085  0F2E  0600               	xorwf	0,w
  2086  0F2F  1903               	btfsc	3,2
  2087  0F30  2FD9               	goto	l3863
  2088  0F31  2FF0               	goto	l3867
  2089  0F32                     l3843:	
  2090                           ;main.c: 109: case 'E':
  2091                           
  2092                           ;main.c: 108: switch(dData[3]){
  2093                           
  2094                           
  2095                           ;main.c: 114: Reset_EPS();
  2096  0F32  120A  118A  2007  120A  158A  	fcall	_Reset_EPS
  2097                           
  2098                           ;main.c: 115: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2099  0F37  3040               	movlw	64
  2100  0F38  1283               	bcf	3,5	;RP0=0, select bank0
  2101  0F39  1303               	bcf	3,6	;RP1=0, select bank0
  2102  0F3A  00E4               	movwf	??_main+2
  2103  0F3B  306A               	movlw	106
  2104  0F3C  00E3               	movwf	??_main+1
  2105  0F3D  30D5               	movlw	213
  2106  0F3E  00E2               	movwf	??_main
  2107  0F3F                     u3657:	
  2108  0F3F  0BE2               	decfsz	??_main,f
  2109  0F40  2F3F               	goto	u3657
  2110  0F41  0BE3               	decfsz	??_main+1,f
  2111  0F42  2F3F               	goto	u3657
  2112  0F43  0BE4               	decfsz	??_main+2,f
  2113  0F44  2F3F               	goto	u3657
  2114  0F45  2F46               	nop2
  2115                           
  2116                           ;main.c: 118: int FMTX_Nprg[5] = {8,7,3,0,0};
  2117  0F46  30A0               	movlw	main@FMTX_Nprg& (0+255)
  2118  0F47  0084               	movwf	4
  2119  0F48  30C2               	movlw	low main@F2007
  2120  0F49  1283               	bcf	3,5	;RP0=0, select bank0
  2121  0F4A  1303               	bcf	3,6	;RP1=0, select bank0
  2122  0F4B  00E2               	movwf	??_main
  2123  0F4C  0804               	movf	4,w
  2124  0F4D  00E3               	movwf	??_main+1
  2125  0F4E  300A               	movlw	10
  2126  0F4F  00E4               	movwf	??_main+2
  2127  0F50                     u3570:	
  2128  0F50  0862               	movf	??_main,w
  2129  0F51  0084               	movwf	4
  2130  0F52  1783               	bsf	3,7	;select IRP bank3
  2131  0F53  0800               	movf	0,w
  2132  0F54  00E5               	movwf	??_main+3
  2133  0F55  0AE2               	incf	??_main,f
  2134  0F56  0863               	movf	??_main+1,w
  2135  0F57  0084               	movwf	4
  2136  0F58  1383               	bcf	3,7	;select IRP bank1
  2137  0F59  0865               	movf	??_main+3,w
  2138  0F5A  0080               	movwf	0
  2139  0F5B  0AE3               	incf	??_main+1,f
  2140  0F5C  0BE4               	decfsz	??_main+2,f
  2141  0F5D  2F50               	goto	u3570
  2142                           
  2143                           ;main.c: 119: int CWTX_Nprg[5] = {0,1,7,4,7};
  2144  0F5E  30AA               	movlw	main@CWTX_Nprg& (0+255)
  2145  0F5F  0084               	movwf	4
  2146  0F60  30CC               	movlw	low main@F2009
  2147  0F61  00E2               	movwf	??_main
  2148  0F62  0804               	movf	4,w
  2149  0F63  00E3               	movwf	??_main+1
  2150  0F64  300A               	movlw	10
  2151  0F65  00E4               	movwf	??_main+2
  2152  0F66                     u3580:	
  2153  0F66  0862               	movf	??_main,w
  2154  0F67  0084               	movwf	4
  2155  0F68  1783               	bsf	3,7	;select IRP bank3
  2156  0F69  0800               	movf	0,w
  2157  0F6A  00E5               	movwf	??_main+3
  2158  0F6B  0AE2               	incf	??_main,f
  2159  0F6C  0863               	movf	??_main+1,w
  2160  0F6D  0084               	movwf	4
  2161  0F6E  1383               	bcf	3,7	;select IRP bank1
  2162  0F6F  0865               	movf	??_main+3,w
  2163  0F70  0080               	movwf	0
  2164  0F71  0AE3               	incf	??_main+1,f
  2165  0F72  0BE4               	decfsz	??_main+2,f
  2166  0F73  2F66               	goto	u3580
  2167                           
  2168                           ;main.c: 120: int FMRX_Nprg[5] = {2,4,8,8,7};
  2169  0F74  30B4               	movlw	main@FMRX_Nprg& (0+255)
  2170  0F75  0084               	movwf	4
  2171  0F76  30D6               	movlw	low main@F2011
  2172  0F77  00E2               	movwf	??_main
  2173  0F78  0804               	movf	4,w
  2174  0F79  00E3               	movwf	??_main+1
  2175  0F7A  300A               	movlw	10
  2176  0F7B  00E4               	movwf	??_main+2
  2177  0F7C                     u3590:	
  2178  0F7C  0862               	movf	??_main,w
  2179  0F7D  0084               	movwf	4
  2180  0F7E  1783               	bsf	3,7	;select IRP bank3
  2181  0F7F  0800               	movf	0,w
  2182  0F80  00E5               	movwf	??_main+3
  2183  0F81  0AE2               	incf	??_main,f
  2184  0F82  0863               	movf	??_main+1,w
  2185  0F83  0084               	movwf	4
  2186  0F84  1383               	bcf	3,7	;select IRP bank1
  2187  0F85  0865               	movf	??_main+3,w
  2188  0F86  0080               	movwf	0
  2189  0F87  0AE3               	incf	??_main+1,f
  2190  0F88  0BE4               	decfsz	??_main+2,f
  2191  0F89  2F7C               	goto	u3590
  2192                           
  2193                           ;main.c: 122: FMTX(FMTX_Nref, FMTX_Nprg);
  2194  0F8A  1683               	bsf	3,5	;RP0=1, select bank1
  2195  0F8B  1303               	bcf	3,6	;RP1=0, select bank1
  2196  0F8C  0847               	movf	(_FMTX_Nref+1)^(0+128),w
  2197  0F8D  1283               	bcf	3,5	;RP0=0, select bank0
  2198  0F8E  1303               	bcf	3,6	;RP1=0, select bank0
  2199  0F8F  00DD               	movwf	FMTX@Nref+1
  2200  0F90  1683               	bsf	3,5	;RP0=1, select bank1
  2201  0F91  1303               	bcf	3,6	;RP1=0, select bank1
  2202  0F92  0846               	movf	_FMTX_Nref^(0+128),w
  2203  0F93  1283               	bcf	3,5	;RP0=0, select bank0
  2204  0F94  1303               	bcf	3,6	;RP1=0, select bank0
  2205  0F95  00DC               	movwf	FMTX@Nref
  2206  0F96  30A0               	movlw	(low (main@FMTX_Nprg| 0))& (0+255)
  2207  0F97  00DE               	movwf	FMTX@Nprg
  2208  0F98  3000               	movlw	0
  2209  0F99  00DF               	movwf	FMTX@Nprg+1
  2210  0F9A  120A  158A  2135  120A  158A  	fcall	_FMTX
  2211                           
  2212                           ;main.c: 123: CWTX(CWTX_Nref, CWTX_Nprg);
  2213  0F9F  1683               	bsf	3,5	;RP0=1, select bank1
  2214  0FA0  1303               	bcf	3,6	;RP1=0, select bank1
  2215  0FA1  0843               	movf	(_CWTX_Nref+1)^(0+128),w
  2216  0FA2  1283               	bcf	3,5	;RP0=0, select bank0
  2217  0FA3  1303               	bcf	3,6	;RP1=0, select bank0
  2218  0FA4  00DD               	movwf	CWTX@Nref+1
  2219  0FA5  1683               	bsf	3,5	;RP0=1, select bank1
  2220  0FA6  1303               	bcf	3,6	;RP1=0, select bank1
  2221  0FA7  0842               	movf	_CWTX_Nref^(0+128),w
  2222  0FA8  1283               	bcf	3,5	;RP0=0, select bank0
  2223  0FA9  1303               	bcf	3,6	;RP1=0, select bank0
  2224  0FAA  00DC               	movwf	CWTX@Nref
  2225  0FAB  30AA               	movlw	(low (main@CWTX_Nprg| 0))& (0+255)
  2226  0FAC  00DE               	movwf	CWTX@Nprg
  2227  0FAD  3000               	movlw	0
  2228  0FAE  00DF               	movwf	CWTX@Nprg+1
  2229  0FAF  120A  158A  20DD  120A  158A  	fcall	_CWTX
  2230                           
  2231                           ;main.c: 124: FMRX(FMRX_Nref, FMRX_Nprg);
  2232  0FB4  1683               	bsf	3,5	;RP0=1, select bank1
  2233  0FB5  1303               	bcf	3,6	;RP1=0, select bank1
  2234  0FB6  0845               	movf	(_FMRX_Nref+1)^(0+128),w
  2235  0FB7  1283               	bcf	3,5	;RP0=0, select bank0
  2236  0FB8  1303               	bcf	3,6	;RP1=0, select bank0
  2237  0FB9  00DD               	movwf	FMRX@Nref+1
  2238  0FBA  1683               	bsf	3,5	;RP0=1, select bank1
  2239  0FBB  1303               	bcf	3,6	;RP1=0, select bank1
  2240  0FBC  0844               	movf	_FMRX_Nref^(0+128),w
  2241  0FBD  1283               	bcf	3,5	;RP0=0, select bank0
  2242  0FBE  1303               	bcf	3,6	;RP1=0, select bank0
  2243  0FBF  00DC               	movwf	FMRX@Nref
  2244  0FC0  30B4               	movlw	(low (main@FMRX_Nprg| 0))& (0+255)
  2245  0FC1  00DE               	movwf	FMRX@Nprg
  2246  0FC2  3000               	movlw	0
  2247  0FC3  00DF               	movwf	FMRX@Nprg+1
  2248  0FC4  120A  158A  2109  120A  158A  	fcall	_FMRX
  2249                           
  2250                           ;main.c: 125: _delay((unsigned long)((500)*(10000000/4000.0)));
  2251  0FC9  3007               	movlw	7
  2252  0FCA  1283               	bcf	3,5	;RP0=0, select bank0
  2253  0FCB  1303               	bcf	3,6	;RP1=0, select bank0
  2254  0FCC  00E4               	movwf	??_main+2
  2255  0FCD  3058               	movlw	88
  2256  0FCE  00E3               	movwf	??_main+1
  2257  0FCF  305E               	movlw	94
  2258  0FD0  00E2               	movwf	??_main
  2259  0FD1                     u3667:	
  2260  0FD1  0BE2               	decfsz	??_main,f
  2261  0FD2  2FD1               	goto	u3667
  2262  0FD3  0BE3               	decfsz	??_main+1,f
  2263  0FD4  2FD1               	goto	u3667
  2264  0FD5  0BE4               	decfsz	??_main+2,f
  2265  0FD6  2FD1               	goto	u3667
  2266  0FD7  2FD8               	nop2
  2267                           
  2268                           ;main.c: 142: }
  2269                           
  2270                           ;main.c: 141: break;
  2271                           
  2272                           ;main.c: 139: default:
  2273                           
  2274                           ;main.c: 138: break;
  2275                           
  2276                           ;main.c: 136: case 'T':
  2277                           
  2278                           ;main.c: 135: break;
  2279                           
  2280                           ;main.c: 133: case 'N':
  2281                           
  2282                           ;main.c: 132: break;
  2283                           
  2284                           ;main.c: 130: case '3':
  2285                           
  2286                           ;main.c: 129: break;
  2287                           
  2288                           ;main.c: 127: case 'I':
  2289                           
  2290                           ;main.c: 126: break;
  2291  0FD8  2FF0               	goto	l3867
  2292  0FD9                     l3863:	
  2293  0FD9  1683               	bsf	3,5	;RP0=1, select bank1
  2294  0FDA  1303               	bcf	3,6	;RP1=0, select bank1
  2295  0FDB  0841               	movf	main@dData^(0+128),w
  2296  0FDC  3E03               	addlw	3
  2297  0FDD  0084               	movwf	4
  2298  0FDE  1783               	bsf	3,7	;select IRP bank2
  2299  0FDF  0800               	movf	0,w
  2300                           
  2301                           ; Switch size 1, requested type "space"
  2302                           ; Number of cases is 5, Range of values is 51 to 84
  2303                           ; switch strategies available:
  2304                           ; Name         Instructions Cycles
  2305                           ; simple_byte           16     9 (average)
  2306                           ; direct_byte          113    11 (fixed)
  2307                           ; jumptable            263     9 (fixed)
  2308                           ;	Chosen strategy is simple_byte
  2309  0FE0  3A33               	xorlw	51	; case 51
  2310  0FE1  1903               	skipnz
  2311  0FE2  2FF0               	goto	l3867
  2312  0FE3  3A76               	xorlw	118	; case 69
  2313  0FE4  1903               	skipnz
  2314  0FE5  2F32               	goto	l3843
  2315  0FE6  3A0C               	xorlw	12	; case 73
  2316  0FE7  1903               	skipnz
  2317  0FE8  2FF0               	goto	l3867
  2318  0FE9  3A07               	xorlw	7	; case 78
  2319  0FEA  1903               	skipnz
  2320  0FEB  2FF0               	goto	l3867
  2321  0FEC  3A1A               	xorlw	26	; case 84
  2322  0FED  1903               	skipnz
  2323  0FEE  2FF0               	goto	l3867
  2324  0FEF  2FF0               	goto	l3867
  2325  0FF0                     l3867:	
  2326                           ;main.c: 144: }else if(dData[2] == 't'){
  2327                           
  2328                           
  2329                           ;main.c: 146: }
  2330                           ;main.c: 147: }
  2331                           ;main.c: 191: _delay((unsigned long)((500)*(10000000/4000.0)));
  2332  0FF0  3007               	movlw	7
  2333  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  2334  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
  2335  0FF3  00E4               	movwf	??_main+2
  2336  0FF4  3058               	movlw	88
  2337  0FF5  00E3               	movwf	??_main+1
  2338  0FF6  305E               	movlw	94
  2339  0FF7  00E2               	movwf	??_main
  2340  0FF8                     u3677:	
  2341  0FF8  0BE2               	decfsz	??_main,f
  2342  0FF9  2FF8               	goto	u3677
  2343  0FFA  0BE3               	decfsz	??_main+1,f
  2344  0FFB  2FF8               	goto	u3677
  2345  0FFC  0BE4               	decfsz	??_main+2,f
  2346  0FFD  2FF8               	goto	u3677
  2347  0FFE  2FFF               	nop2
  2348  0FFF  2E9F               	goto	l3807
  2349  1000                     __end_of_main:	
  2350                           ;main.c: 192: }
  2351                           ;main.c: 193: return;
  2352                           
  2353                           
  2354                           	psect	text1
  2355  0A4F                     __ptext1:	
  2356 ;; *************** function _printf *****************
  2357 ;; Defined at:
  2358 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  2359 ;; Parameters:    Size  Location     Type
  2360 ;;  f               1    wreg     PTR const unsigned char 
  2361 ;;		 -> STR_16(3), STR_15(8), 
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;  f               1    6[COMMON] PTR const unsigned char 
  2364 ;;		 -> STR_16(3), STR_15(8), 
  2365 ;;  tmpval          4    0        struct .
  2366 ;;  cp              2    0        PTR const unsigned char 
  2367 ;;  len             2    0        unsigned int 
  2368 ;;  val             2    0        unsigned int 
  2369 ;;  c               1    7[COMMON] char 
  2370 ;;  ap              1    5[COMMON] PTR void [1]
  2371 ;;		 -> ?_printf(2), 
  2372 ;;  flag            1    4[COMMON] unsigned char 
  2373 ;;  prec            1    0        char 
  2374 ;; Return value:  Size  Location     Type
  2375 ;;                  2    1[COMMON] int 
  2376 ;; Registers used:
  2377 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2378 ;; Tracked objects:
  2379 ;;		On entry : 0/0
  2380 ;;		On exit  : 0/0
  2381 ;;		Unchanged: 0/0
  2382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2383 ;;      Params:         2       0       0       0       0
  2384 ;;      Locals:         4       0       0       0       0
  2385 ;;      Temps:          1       0       0       0       0
  2386 ;;      Totals:         7       0       0       0       0
  2387 ;;Total ram usage:        7 bytes
  2388 ;; Hardware stack levels used:    1
  2389 ;; Hardware stack levels required when called:    1
  2390 ;; This function calls:
  2391 ;;		_putch
  2392 ;; This function is called by:
  2393 ;;		_main
  2394 ;; This function uses a non-reentrant model
  2395 ;;
  2396                           
  2397                           
  2398                           ;psect for function _printf
  2399  0A4F                     _printf:	
  2400                           
  2401                           ;incstack = 0
  2402                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2403                           ;printf@f stored from wreg
  2404  0A4F  00F6               	movwf	printf@f
  2405                           
  2406                           ;doprnt.c: 466: va_list ap;
  2407                           ;doprnt.c: 499: signed char c;
  2408                           ;doprnt.c: 506: signed char prec;
  2409                           ;doprnt.c: 508: unsigned char flag;
  2410                           ;doprnt.c: 523: union {
  2411                           ;doprnt.c: 524: unsigned long vd;
  2412                           ;doprnt.c: 525: double integ;
  2413                           ;doprnt.c: 526: } tmpval;
  2414                           ;doprnt.c: 528: unsigned int val;
  2415                           ;doprnt.c: 529: unsigned len;
  2416                           ;doprnt.c: 530: const char * cp;
  2417                           ;doprnt.c: 533: *ap = __va_start();
  2418  0A50  3071               	movlw	(low (?_printf| 0))& (0+255)
  2419  0A51  00F3               	movwf	??_printf
  2420  0A52  0873               	movf	??_printf,w
  2421  0A53  00F5               	movwf	printf@ap
  2422  0A54                     l3523:	
  2423                           ;doprnt.c: 1422: {
  2424                           
  2425                           ;doprnt.c: 536: while(c = *f++) {
  2426                           
  2427  0A54  3001               	movlw	1
  2428  0A55  07F6               	addwf	printf@f,f
  2429  0A56  30FF               	movlw	-1
  2430  0A57  0776               	addwf	printf@f,w
  2431  0A58  0084               	movwf	4
  2432  0A59  120A  158A  2000  120A  158A  	fcall	stringdir
  2433  0A5E  00F3               	movwf	??_printf
  2434  0A5F  0873               	movf	??_printf,w
  2435  0A60  00F7               	movwf	printf@c
  2436  0A61  0877               	movf	printf@c,w
  2437  0A62  1903               	btfsc	3,2
  2438  0A63  0008               	return
  2439                           
  2440                           ;doprnt.c: 538: if(c != '%')
  2441  0A64  3025               	movlw	37
  2442  0A65  0677               	xorwf	printf@c,w
  2443  0A66  1903               	btfsc	3,2
  2444  0A67  2A6F               	goto	l3511
  2445                           
  2446                           ;doprnt.c: 540: {
  2447                           ;doprnt.c: 541: (putch(c) );
  2448  0A68  0877               	movf	printf@c,w
  2449  0A69  160A  118A  27C4  120A  158A  	fcall	_putch
  2450                           
  2451                           ;doprnt.c: 542: continue;
  2452  0A6E  2A54               	goto	l3523
  2453  0A6F                     l3511:	
  2454                           
  2455                           ;doprnt.c: 543: }
  2456                           ;doprnt.c: 548: flag = 0;
  2457  0A6F  01F4               	clrf	printf@flag
  2458                           
  2459                           ;doprnt.c: 635: switch(c = *f++) {
  2460  0A70  2A82               	goto	l3521
  2461  0A71                     l3513:	
  2462                           ;doprnt.c: 784: case 'c':
  2463                           
  2464                           ;doprnt.c: 638: goto alldone;
  2465                           
  2466                           ;doprnt.c: 637: case 0:
  2467                           
  2468                           
  2469                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2470  0A71  0875               	movf	printf@ap,w
  2471  0A72  0084               	movwf	4
  2472  0A73  0800               	movf	0,w
  2473  0A74  00F3               	movwf	??_printf
  2474  0A75  0873               	movf	??_printf,w
  2475  0A76  00F7               	movwf	printf@c
  2476  0A77  3002               	movlw	2
  2477  0A78  00F3               	movwf	??_printf
  2478  0A79  0873               	movf	??_printf,w
  2479  0A7A  07F5               	addwf	printf@ap,f
  2480  0A7B                     l3517:	
  2481                           ;doprnt.c: 802: default:
  2482                           
  2483                           
  2484                           ;doprnt.c: 809: (putch(c) );
  2485  0A7B  0877               	movf	printf@c,w
  2486  0A7C  160A  118A  27C4  120A  158A  	fcall	_putch
  2487                           
  2488                           ;doprnt.c: 822: }
  2489                           
  2490                           ;doprnt.c: 810: continue;
  2491  0A81  2A54               	goto	l3523
  2492  0A82                     l3521:	
  2493  0A82  3001               	movlw	1
  2494  0A83  07F6               	addwf	printf@f,f
  2495  0A84  30FF               	movlw	-1
  2496  0A85  0776               	addwf	printf@f,w
  2497  0A86  0084               	movwf	4
  2498  0A87  120A  158A  2000  120A  158A  	fcall	stringdir
  2499  0A8C  00F7               	movwf	printf@c
  2500                           
  2501                           ; Switch size 1, requested type "space"
  2502                           ; Number of cases is 2, Range of values is 0 to 99
  2503                           ; switch strategies available:
  2504                           ; Name         Instructions Cycles
  2505                           ; simple_byte            7     4 (average)
  2506                           ; jumptable            260     6 (fixed)
  2507                           ;	Chosen strategy is simple_byte
  2508  0A8D  3A00               	xorlw	0	; case 0
  2509  0A8E  1903               	skipnz
  2510  0A8F  2A95               	goto	l667
  2511  0A90  3A63               	xorlw	99	; case 99
  2512  0A91  1903               	skipnz
  2513  0A92  2A71               	goto	l3513
  2514  0A93  2A7B               	goto	l3517
  2515  0A94  2A54               	goto	l3523
  2516  0A95                     l667:	
  2517                           ;doprnt.c: 1540: return 0;
  2518                           ;	Return value of _printf is never used
  2519                           
  2520                           ;doprnt.c: 1469: }
  2521                           ;doprnt.c: 1533: }
  2522                           ;doprnt.c: 1535: alldone:
  2523                           
  2524  0A95  0008               	return
  2525  0A96                     __end_of_printf:	
  2526                           
  2527                           	psect	text2
  2528  0007                     __ptext2:	
  2529 ;; *************** function _Reset_EPS *****************
  2530 ;; Defined at:
  2531 ;;		line 19 in file "EPS.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;		None
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;		None
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      void 
  2538 ;; Registers used:
  2539 ;;		wreg
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2545 ;;      Params:         0       0       0       0       0
  2546 ;;      Locals:         0       0       0       0       0
  2547 ;;      Temps:          3       0       0       0       0
  2548 ;;      Totals:         3       0       0       0       0
  2549 ;;Total ram usage:        3 bytes
  2550 ;; Hardware stack levels used:    1
  2551 ;; This function calls:
  2552 ;;		Nothing
  2553 ;; This function is called by:
  2554 ;;		_main
  2555 ;; This function uses a non-reentrant model
  2556 ;;
  2557                           
  2558                           
  2559                           ;psect for function _Reset_EPS
  2560  0007                     _Reset_EPS:	
  2561                           
  2562                           ;EPS.c: 20: RB4 = 1;
  2563                           
  2564                           ;incstack = 0
  2565                           ; Regs used in _Reset_EPS: [wreg]
  2566  0007  1283               	bcf	3,5	;RP0=0, select bank0
  2567  0008  1303               	bcf	3,6	;RP1=0, select bank0
  2568  0009  1606               	bsf	6,4	;volatile
  2569                           
  2570                           ;EPS.c: 21: RA1 = 1;
  2571  000A  1485               	bsf	5,1	;volatile
  2572                           
  2573                           ;EPS.c: 22: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2574  000B  3040               	movlw	64
  2575  000C  00F2               	movwf	??_Reset_EPS+2
  2576  000D  306A               	movlw	106
  2577  000E  00F1               	movwf	??_Reset_EPS+1
  2578  000F  30D5               	movlw	213
  2579  0010  00F0               	movwf	??_Reset_EPS
  2580  0011                     u3687:	
  2581  0011  0BF0               	decfsz	??_Reset_EPS,f
  2582  0012  2811               	goto	u3687
  2583  0013  0BF1               	decfsz	??_Reset_EPS+1,f
  2584  0014  2811               	goto	u3687
  2585  0015  0BF2               	decfsz	??_Reset_EPS+2,f
  2586  0016  2811               	goto	u3687
  2587  0017  2818               	nop2
  2588                           
  2589                           ;EPS.c: 23: RB4 = 0;
  2590  0018  1283               	bcf	3,5	;RP0=0, select bank0
  2591  0019  1303               	bcf	3,6	;RP1=0, select bank0
  2592  001A  1206               	bcf	6,4	;volatile
  2593                           
  2594                           ;EPS.c: 24: RA1 = 0;
  2595  001B  1085               	bcf	5,1	;volatile
  2596                           
  2597                           ;EPS.c: 25: _delay((unsigned long)((500)*(10000000/4000.0)));
  2598  001C  3007               	movlw	7
  2599  001D  00F2               	movwf	??_Reset_EPS+2
  2600  001E  3058               	movlw	88
  2601  001F  00F1               	movwf	??_Reset_EPS+1
  2602  0020  305E               	movlw	94
  2603  0021  00F0               	movwf	??_Reset_EPS
  2604  0022                     u3697:	
  2605  0022  0BF0               	decfsz	??_Reset_EPS,f
  2606  0023  2822               	goto	u3697
  2607  0024  0BF1               	decfsz	??_Reset_EPS+1,f
  2608  0025  2822               	goto	u3697
  2609  0026  0BF2               	decfsz	??_Reset_EPS+2,f
  2610  0027  2822               	goto	u3697
  2611  0028  2829               	nop2
  2612  0029  0008               	return
  2613  002A                     __end_of_Reset_EPS:	
  2614                           
  2615                           	psect	text3
  2616  0C57                     __ptext3:	
  2617 ;; *************** function _ReceivePacket_data *****************
  2618 ;; Defined at:
  2619 ;;		line 359 in file "decode_AX25.c"
  2620 ;; Parameters:    Size  Location     Type
  2621 ;;		None
  2622 ;; Auto vars:     Size  Location     Type
  2623 ;;  i               2   31[BANK0 ] unsigned int 
  2624 ;;  fcschecker      2   29[BANK0 ] unsigned int 
  2625 ;; Return value:  Size  Location     Type
  2626 ;;                  1    wreg      PTR unsigned char 
  2627 ;; Registers used:
  2628 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2629 ;; Tracked objects:
  2630 ;;		On entry : 0/0
  2631 ;;		On exit  : 0/0
  2632 ;;		Unchanged: 0/0
  2633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2634 ;;      Params:         0       0       0       0       0
  2635 ;;      Locals:         0       4       0       0       0
  2636 ;;      Temps:          2       0       0       0       0
  2637 ;;      Totals:         2       4       0       0       0
  2638 ;;Total ram usage:        6 bytes
  2639 ;; Hardware stack levels used:    1
  2640 ;; Hardware stack levels required when called:    2
  2641 ;; This function calls:
  2642 ;;		_fcscheck
  2643 ;;		_getdata
  2644 ;;		_waitFlag
  2645 ;; This function is called by:
  2646 ;;		_main
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650                           
  2651                           ;psect for function _ReceivePacket_data
  2652  0C57                     _ReceivePacket_data:	
  2653                           
  2654                           ;decode_AX25.c: 360: UINT fcschecker;
  2655                           ;decode_AX25.c: 363: waitFlag();
  2656                           
  2657                           ;incstack = 0
  2658                           ; Regs used in _ReceivePacket_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2659  0C57  120A  118A  2327  120A  158A  	fcall	_waitFlag
  2660                           
  2661                           ;decode_AX25.c: 365: getdata();
  2662  0C5C  120A  158A  23F6  120A  158A  	fcall	_getdata
  2663                           
  2664                           ;decode_AX25.c: 367: fcschecker = fcscheck();
  2665  0C61  120A  118A  202A  120A  158A  	fcall	_fcscheck
  2666  0C66  0871               	movf	?_fcscheck+1,w
  2667  0C67  1283               	bcf	3,5	;RP0=0, select bank0
  2668  0C68  1303               	bcf	3,6	;RP1=0, select bank0
  2669  0C69  00BE               	movwf	ReceivePacket_data@fcschecker+1
  2670  0C6A  0870               	movf	?_fcscheck,w
  2671  0C6B  00BD               	movwf	ReceivePacket_data@fcschecker
  2672                           
  2673                           ;decode_AX25.c: 369: if(fcschecker == 1){
  2674  0C6C  033D               	decf	ReceivePacket_data@fcschecker,w
  2675  0C6D  043E               	iorwf	ReceivePacket_data@fcschecker+1,w
  2676  0C6E  1D03               	btfss	3,2
  2677  0C6F  2CB6               	goto	l3411
  2678                           
  2679                           ;decode_AX25.c: 370: for(UINT i=0; i<commandSize; i++){
  2680  0C70  01BF               	clrf	ReceivePacket_data@i
  2681  0C71  01C0               	clrf	ReceivePacket_data@i+1
  2682  0C72  3001               	movlw	low (_commandSize-__stringbase)
  2683  0C73  0084               	movwf	4
  2684  0C74  120A  158A  2000  120A  158A  	fcall	stringdir
  2685  0C79  00FA               	movwf	??_ReceivePacket_data
  2686  0C7A  120A  158A  2000  120A  158A  	fcall	stringdir
  2687  0C7F  00FB               	movwf	??_ReceivePacket_data+1
  2688  0C80  087B               	movf	??_ReceivePacket_data+1,w
  2689  0C81  0240               	subwf	ReceivePacket_data@i+1,w
  2690  0C82  1D03               	skipz
  2691  0C83  2C86               	goto	u3115
  2692  0C84  087A               	movf	??_ReceivePacket_data,w
  2693  0C85  023F               	subwf	ReceivePacket_data@i,w
  2694  0C86                     u3115:	
  2695  0C86  1803               	btfsc	3,0
  2696  0C87  2CB0               	goto	l3403
  2697  0C88                     l3397:	
  2698                           
  2699                           ;decode_AX25.c: 371: dData[i] = dPacket[i+20];
  2700  0C88  083F               	movf	ReceivePacket_data@i,w
  2701  0C89  3E14               	addlw	20
  2702  0C8A  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2703  0C8B  0084               	movwf	4
  2704  0C8C  1783               	bsf	3,7	;select IRP bank3
  2705  0C8D  0800               	movf	0,w
  2706  0C8E  00FA               	movwf	??_ReceivePacket_data
  2707  0C8F  083F               	movf	ReceivePacket_data@i,w
  2708  0C90  3E30               	addlw	(low (_dData| (0+256)))& (0+255)
  2709  0C91  0084               	movwf	4
  2710  0C92  087A               	movf	??_ReceivePacket_data,w
  2711  0C93  0080               	movwf	0
  2712  0C94  3001               	movlw	1
  2713  0C95  07BF               	addwf	ReceivePacket_data@i,f
  2714  0C96  1803               	skipnc
  2715  0C97  0AC0               	incf	ReceivePacket_data@i+1,f
  2716  0C98  3000               	movlw	0
  2717  0C99  07C0               	addwf	ReceivePacket_data@i+1,f
  2718  0C9A  3001               	movlw	low (_commandSize-__stringbase)
  2719  0C9B  0084               	movwf	4
  2720  0C9C  120A  158A  2000  120A  158A  	fcall	stringdir
  2721  0CA1  00FA               	movwf	??_ReceivePacket_data
  2722  0CA2  120A  158A  2000  120A  158A  	fcall	stringdir
  2723  0CA7  00FB               	movwf	??_ReceivePacket_data+1
  2724  0CA8  087B               	movf	??_ReceivePacket_data+1,w
  2725  0CA9  0240               	subwf	ReceivePacket_data@i+1,w
  2726  0CAA  1D03               	skipz
  2727  0CAB  2CAE               	goto	u3125
  2728  0CAC  087A               	movf	??_ReceivePacket_data,w
  2729  0CAD  023F               	subwf	ReceivePacket_data@i,w
  2730  0CAE                     u3125:	
  2731  0CAE  1C03               	skipc
  2732  0CAF  2C88               	goto	l3397
  2733  0CB0                     l3403:	
  2734                           
  2735                           ;decode_AX25.c: 372: }
  2736                           ;decode_AX25.c: 373: dPacketnum = 0;
  2737  0CB0  01E6               	clrf	_dPacketnum
  2738  0CB1  01E7               	clrf	_dPacketnum+1
  2739                           
  2740                           ;decode_AX25.c: 374: rcv_state = 0;
  2741  0CB2  01EA               	clrf	_rcv_state
  2742  0CB3  01EB               	clrf	_rcv_state+1
  2743                           
  2744                           ;decode_AX25.c: 375: return dData;
  2745  0CB4  3030               	movlw	(low (_dData| (0+256)))& (0+255)
  2746                           
  2747                           ;decode_AX25.c: 376: }else{
  2748  0CB5  0008               	return
  2749  0CB6                     l3411:	
  2750                           
  2751                           ;decode_AX25.c: 377: dPacketnum = 0;
  2752  0CB6  01E6               	clrf	_dPacketnum
  2753  0CB7  01E7               	clrf	_dPacketnum+1
  2754                           
  2755                           ;decode_AX25.c: 378: rcv_state = 0;
  2756  0CB8  01EA               	clrf	_rcv_state
  2757  0CB9  01EB               	clrf	_rcv_state+1
  2758                           
  2759                           ;decode_AX25.c: 379: return 0x00;
  2760  0CBA  3000               	movlw	0
  2761  0CBB  0008               	return
  2762  0CBC                     __end_of_ReceivePacket_data:	
  2763                           
  2764                           	psect	text4
  2765  0327                     __ptext4:	
  2766 ;; *************** function _waitFlag *****************
  2767 ;; Defined at:
  2768 ;;		line 54 in file "decode_AX25.c"
  2769 ;; Parameters:    Size  Location     Type
  2770 ;;		None
  2771 ;; Auto vars:     Size  Location     Type
  2772 ;;  j               2   24[BANK0 ] unsigned int 
  2773 ;;  j               2   10[BANK0 ] unsigned int 
  2774 ;;  j               2   22[BANK0 ] unsigned int 
  2775 ;;  j               2    8[BANK0 ] unsigned int 
  2776 ;;  j               2   20[BANK0 ] unsigned int 
  2777 ;;  j               2    6[BANK0 ] unsigned int 
  2778 ;;  j               2   18[BANK0 ] unsigned int 
  2779 ;;  j               2    4[BANK0 ] unsigned int 
  2780 ;;  j               2   16[BANK0 ] unsigned int 
  2781 ;;  j               2    2[BANK0 ] unsigned int 
  2782 ;;  i               2    0[BANK0 ] unsigned int 
  2783 ;;  j               2   14[BANK0 ] unsigned int 
  2784 ;;  j               2   12[BANK0 ] unsigned int 
  2785 ;;  flag_judge      2   26[BANK0 ] unsigned int 
  2786 ;;  buf             1   28[BANK0 ] unsigned char 
  2787 ;; Return value:  Size  Location     Type
  2788 ;;                  1    wreg      void 
  2789 ;; Registers used:
  2790 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2791 ;; Tracked objects:
  2792 ;;		On entry : 0/0
  2793 ;;		On exit  : 0/0
  2794 ;;		Unchanged: 0/0
  2795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2796 ;;      Params:         0       0       0       0       0
  2797 ;;      Locals:         0      29       0       0       0
  2798 ;;      Temps:          4       0       0       0       0
  2799 ;;      Totals:         4      29       0       0       0
  2800 ;;Total ram usage:       33 bytes
  2801 ;; Hardware stack levels used:    1
  2802 ;; Hardware stack levels required when called:    1
  2803 ;; This function calls:
  2804 ;;		_getbit
  2805 ;; This function is called by:
  2806 ;;		_ReceivePacket_data
  2807 ;;		_ReceivePacket
  2808 ;; This function uses a non-reentrant model
  2809 ;;
  2810                           
  2811                           
  2812                           ;psect for function _waitFlag
  2813  0327                     _waitFlag:	
  2814                           
  2815                           ;decode_AX25.c: 55: UINT flag_judge;
  2816                           ;decode_AX25.c: 56: UBYTE buf = 0xff;
  2817                           
  2818                           ;incstack = 0
  2819                           ; Regs used in _waitFlag: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2820  0327  30FF               	movlw	255
  2821  0328  00F6               	movwf	??_waitFlag
  2822  0329  0876               	movf	??_waitFlag,w
  2823  032A  1283               	bcf	3,5	;RP0=0, select bank0
  2824  032B  1303               	bcf	3,6	;RP1=0, select bank0
  2825  032C  00BC               	movwf	waitFlag@buf
  2826  032D                     L6:	
  2827                           
  2828                           ;decode_AX25.c: 271: rcv_state = 0;
  2829  032D  01EA               	clrf	_rcv_state
  2830  032E  01EB               	clrf	_rcv_state+1
  2831  032F                     l3095:	
  2832  032F  3000               	movlw	0
  2833  0330  026B               	subwf	_rcv_state+1,w
  2834  0331  3002               	movlw	2
  2835  0332  1903               	skipnz
  2836  0333  026A               	subwf	_rcv_state,w
  2837  0334  1803               	btfsc	3,0
  2838  0335  0008               	return
  2839  0336                     l2729:	
  2840                           ;decode_AX25.c: 59: while(buf != 0x7e){
  2841                           
  2842                           ;decode_AX25.c: 58: while(rcv_state < 2){
  2843                           
  2844                           ;decode_AX25.c: 57: rcv_state = 0;
  2845                           
  2846  0336  307E               	movlw	126
  2847  0337  063C               	xorwf	waitFlag@buf,w
  2848  0338  1903               	btfsc	3,2
  2849  0339  2B86               	goto	l2751
  2850                           
  2851                           ;decode_AX25.c: 60: flag_judge = getbit();
  2852  033A  120A  158A  2296  120A  118A  	fcall	_getbit
  2853  033F  0871               	movf	?_getbit+1,w
  2854  0340  1283               	bcf	3,5	;RP0=0, select bank0
  2855  0341  1303               	bcf	3,6	;RP1=0, select bank0
  2856  0342  00BB               	movwf	waitFlag@flag_judge+1
  2857  0343  0870               	movf	?_getbit,w
  2858  0344  00BA               	movwf	waitFlag@flag_judge
  2859                           
  2860                           ;decode_AX25.c: 61: buf = buf << 1;
  2861  0345  083C               	movf	waitFlag@buf,w
  2862  0346  00F6               	movwf	??_waitFlag
  2863  0347  0776               	addwf	??_waitFlag,w
  2864  0348  00F7               	movwf	??_waitFlag+1
  2865  0349  0877               	movf	??_waitFlag+1,w
  2866  034A  00BC               	movwf	waitFlag@buf
  2867                           
  2868                           ;decode_AX25.c: 63: buf = buf | 0x00;
  2869  034B  083A               	movf	waitFlag@flag_judge,w
  2870  034C  043B               	iorwf	waitFlag@flag_judge+1,w
  2871  034D  1903               	btfsc	3,2
  2872  034E  2B36               	goto	l2729
  2873                           
  2874                           ;decode_AX25.c: 65: buf = buf | 0x01;
  2875                           
  2876                           ;decode_AX25.c: 64: }else{
  2877  034F  083C               	movf	waitFlag@buf,w
  2878  0350  3801               	iorlw	1
  2879  0351  00F6               	movwf	??_waitFlag
  2880  0352  0876               	movf	??_waitFlag,w
  2881  0353  00BC               	movwf	waitFlag@buf
  2882  0354  2B36               	goto	l2729
  2883  0355                     l2731:	
  2884                           ;decode_AX25.c: 66: }
  2885                           ;decode_AX25.c: 67: }
  2886                           ;decode_AX25.c: 71: while(buf == 0x7e){
  2887                           
  2888                           
  2889                           ;decode_AX25.c: 72: for(UINT i=0;i<8;i++){
  2890  0355  01A0               	clrf	waitFlag@i
  2891  0356  01A1               	clrf	waitFlag@i+1
  2892  0357  3000               	movlw	0
  2893  0358  0221               	subwf	waitFlag@i+1,w
  2894  0359  3008               	movlw	8
  2895  035A  1903               	skipnz
  2896  035B  0220               	subwf	waitFlag@i,w
  2897  035C  1803               	btfsc	3,0
  2898  035D  2B86               	goto	l2751
  2899  035E                     l2737:	
  2900                           
  2901                           ;decode_AX25.c: 73: flag_judge = getbit();
  2902  035E  120A  158A  2296  120A  118A  	fcall	_getbit
  2903  0363  0871               	movf	?_getbit+1,w
  2904  0364  1283               	bcf	3,5	;RP0=0, select bank0
  2905  0365  1303               	bcf	3,6	;RP1=0, select bank0
  2906  0366  00BB               	movwf	waitFlag@flag_judge+1
  2907  0367  0870               	movf	?_getbit,w
  2908  0368  00BA               	movwf	waitFlag@flag_judge
  2909                           
  2910                           ;decode_AX25.c: 74: buf = buf >> 1;
  2911  0369  083C               	movf	waitFlag@buf,w
  2912  036A  00F6               	movwf	??_waitFlag
  2913  036B  1003               	clrc
  2914  036C  0C76               	rrf	??_waitFlag,w
  2915  036D  00F7               	movwf	??_waitFlag+1
  2916  036E  0877               	movf	??_waitFlag+1,w
  2917  036F  00BC               	movwf	waitFlag@buf
  2918                           
  2919                           ;decode_AX25.c: 76: buf = buf | 0x00;
  2920  0370  083A               	movf	waitFlag@flag_judge,w
  2921  0371  043B               	iorwf	waitFlag@flag_judge+1,w
  2922  0372  1903               	btfsc	3,2
  2923  0373  2B79               	goto	l2747
  2924                           
  2925                           ;decode_AX25.c: 78: buf = buf | 0x80;
  2926                           
  2927                           ;decode_AX25.c: 77: }else{
  2928  0374  083C               	movf	waitFlag@buf,w
  2929  0375  3880               	iorlw	128
  2930  0376  00F6               	movwf	??_waitFlag
  2931  0377  0876               	movf	??_waitFlag,w
  2932  0378  00BC               	movwf	waitFlag@buf
  2933  0379                     l2747:	
  2934  0379  3001               	movlw	1
  2935  037A  07A0               	addwf	waitFlag@i,f
  2936  037B  1803               	skipnc
  2937  037C  0AA1               	incf	waitFlag@i+1,f
  2938  037D  3000               	movlw	0
  2939  037E  07A1               	addwf	waitFlag@i+1,f
  2940  037F  3000               	movlw	0
  2941  0380  0221               	subwf	waitFlag@i+1,w
  2942  0381  3008               	movlw	8
  2943  0382  1903               	skipnz
  2944  0383  0220               	subwf	waitFlag@i,w
  2945  0384  1C03               	skipc
  2946  0385  2B5E               	goto	l2737
  2947  0386                     l2751:	
  2948  0386  307E               	movlw	126
  2949  0387  063C               	xorwf	waitFlag@buf,w
  2950  0388  1903               	btfsc	3,2
  2951  0389  2B55               	goto	l2731
  2952                           
  2953                           ;decode_AX25.c: 79: }
  2954                           ;decode_AX25.c: 80: }
  2955                           ;decode_AX25.c: 81: }
  2956                           ;decode_AX25.c: 82: if(buf == ("JQ1YCZ"[0] << 1)){
  2957  038A  3012               	movlw	low (STR_1-__stringbase)
  2958  038B  0084               	movwf	4
  2959  038C  120A  158A  2000  120A  118A  	fcall	stringdir
  2960  0391  00F6               	movwf	??_waitFlag
  2961  0392  01F7               	clrf	??_waitFlag+1
  2962  0393  1003               	clrc
  2963  0394  0DF6               	rlf	??_waitFlag,f
  2964  0395  0DF7               	rlf	??_waitFlag+1,f
  2965  0396  083C               	movf	waitFlag@buf,w
  2966  0397  00F8               	movwf	??_waitFlag+2
  2967  0398  01F9               	clrf	??_waitFlag+3
  2968  0399  0877               	movf	??_waitFlag+1,w
  2969  039A  0679               	xorwf	??_waitFlag+3,w
  2970  039B  1D03               	skipz
  2971  039C  2B9F               	goto	u2205
  2972  039D  0876               	movf	??_waitFlag,w
  2973  039E  0678               	xorwf	??_waitFlag+2,w
  2974  039F                     u2205:	
  2975  039F  1D03               	skipz
  2976  03A0  2D64               	goto	l2901
  2977                           
  2978                           ;decode_AX25.c: 83: dPacket[dPacketnum] = buf;
  2979  03A1  083C               	movf	waitFlag@buf,w
  2980  03A2  00F6               	movwf	??_waitFlag
  2981  03A3  0866               	movf	_dPacketnum,w
  2982  03A4  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2983  03A5  0084               	movwf	4
  2984  03A6  0876               	movf	??_waitFlag,w
  2985  03A7  1783               	bsf	3,7	;select IRP bank3
  2986  03A8  0080               	movwf	0
  2987                           
  2988                           ;decode_AX25.c: 84: dPacketnum ++;
  2989  03A9  3001               	movlw	1
  2990  03AA  07E6               	addwf	_dPacketnum,f
  2991  03AB  1803               	skipnc
  2992  03AC  0AE7               	incf	_dPacketnum+1,f
  2993  03AD  3000               	movlw	0
  2994  03AE  07E7               	addwf	_dPacketnum+1,f
  2995                           
  2996                           ;decode_AX25.c: 85: for(UINT j=0;j<8;j++){
  2997  03AF  01A2               	clrf	waitFlag@j
  2998  03B0  01A3               	clrf	waitFlag@j+1
  2999  03B1  3000               	movlw	0
  3000  03B2  0223               	subwf	waitFlag@j+1,w
  3001  03B3  3008               	movlw	8
  3002  03B4  1903               	skipnz
  3003  03B5  0222               	subwf	waitFlag@j,w
  3004  03B6  1803               	btfsc	3,0
  3005  03B7  2BE0               	goto	l2779
  3006  03B8                     l2765:	
  3007                           
  3008                           ;decode_AX25.c: 86: flag_judge = getbit();
  3009  03B8  120A  158A  2296  120A  118A  	fcall	_getbit
  3010  03BD  0871               	movf	?_getbit+1,w
  3011  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  3012  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  3013  03C0  00BB               	movwf	waitFlag@flag_judge+1
  3014  03C1  0870               	movf	?_getbit,w
  3015  03C2  00BA               	movwf	waitFlag@flag_judge
  3016                           
  3017                           ;decode_AX25.c: 87: buf = buf >> 1;
  3018  03C3  083C               	movf	waitFlag@buf,w
  3019  03C4  00F6               	movwf	??_waitFlag
  3020  03C5  1003               	clrc
  3021  03C6  0C76               	rrf	??_waitFlag,w
  3022  03C7  00F7               	movwf	??_waitFlag+1
  3023  03C8  0877               	movf	??_waitFlag+1,w
  3024  03C9  00BC               	movwf	waitFlag@buf
  3025                           
  3026                           ;decode_AX25.c: 89: buf = buf | 0x00;
  3027  03CA  083A               	movf	waitFlag@flag_judge,w
  3028  03CB  043B               	iorwf	waitFlag@flag_judge+1,w
  3029  03CC  1903               	btfsc	3,2
  3030  03CD  2BD3               	goto	l2775
  3031                           
  3032                           ;decode_AX25.c: 91: buf = buf | 0x80;
  3033                           
  3034                           ;decode_AX25.c: 90: }else{
  3035  03CE  083C               	movf	waitFlag@buf,w
  3036  03CF  3880               	iorlw	128
  3037  03D0  00F6               	movwf	??_waitFlag
  3038  03D1  0876               	movf	??_waitFlag,w
  3039  03D2  00BC               	movwf	waitFlag@buf
  3040  03D3                     l2775:	
  3041  03D3  3001               	movlw	1
  3042  03D4  07A2               	addwf	waitFlag@j,f
  3043  03D5  1803               	skipnc
  3044  03D6  0AA3               	incf	waitFlag@j+1,f
  3045  03D7  3000               	movlw	0
  3046  03D8  07A3               	addwf	waitFlag@j+1,f
  3047  03D9  3000               	movlw	0
  3048  03DA  0223               	subwf	waitFlag@j+1,w
  3049  03DB  3008               	movlw	8
  3050  03DC  1903               	skipnz
  3051  03DD  0222               	subwf	waitFlag@j,w
  3052  03DE  1C03               	skipc
  3053  03DF  2BB8               	goto	l2765
  3054  03E0                     l2779:	
  3055                           
  3056                           ;decode_AX25.c: 92: }
  3057                           ;decode_AX25.c: 93: }
  3058                           ;decode_AX25.c: 94: if(buf == ("JQ1YCZ"[1] << 1)){
  3059  03E0  3013               	movlw	low (((STR_1+1)-__stringbase)| (0+32768))
  3060  03E1  0084               	movwf	4
  3061  03E2  120A  158A  2000  120A  118A  	fcall	stringdir
  3062  03E7  00F6               	movwf	??_waitFlag
  3063  03E8  01F7               	clrf	??_waitFlag+1
  3064  03E9  1003               	clrc
  3065  03EA  0DF6               	rlf	??_waitFlag,f
  3066  03EB  0DF7               	rlf	??_waitFlag+1,f
  3067  03EC  083C               	movf	waitFlag@buf,w
  3068  03ED  00F8               	movwf	??_waitFlag+2
  3069  03EE  01F9               	clrf	??_waitFlag+3
  3070  03EF  0877               	movf	??_waitFlag+1,w
  3071  03F0  0679               	xorwf	??_waitFlag+3,w
  3072  03F1  1D03               	skipz
  3073  03F2  2BF5               	goto	u2245
  3074  03F3  0876               	movf	??_waitFlag,w
  3075  03F4  0678               	xorwf	??_waitFlag+2,w
  3076  03F5                     u2245:	
  3077  03F5  1D03               	skipz
  3078  03F6  2D64               	goto	l2901
  3079                           
  3080                           ;decode_AX25.c: 95: dPacket[dPacketnum] = buf;
  3081  03F7  083C               	movf	waitFlag@buf,w
  3082  03F8  00F6               	movwf	??_waitFlag
  3083  03F9  0866               	movf	_dPacketnum,w
  3084  03FA  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3085  03FB  0084               	movwf	4
  3086  03FC  0876               	movf	??_waitFlag,w
  3087  03FD  1783               	bsf	3,7	;select IRP bank3
  3088  03FE  0080               	movwf	0
  3089                           
  3090                           ;decode_AX25.c: 96: dPacketnum ++;
  3091  03FF  3001               	movlw	1
  3092  0400  07E6               	addwf	_dPacketnum,f
  3093  0401  1803               	skipnc
  3094  0402  0AE7               	incf	_dPacketnum+1,f
  3095  0403  3000               	movlw	0
  3096  0404  07E7               	addwf	_dPacketnum+1,f
  3097                           
  3098                           ;decode_AX25.c: 97: for(UINT j=0;j<8;j++){
  3099  0405  01A4               	clrf	waitFlag@j_111
  3100  0406  01A5               	clrf	waitFlag@j_111+1
  3101  0407  3000               	movlw	0
  3102  0408  0225               	subwf	waitFlag@j_111+1,w
  3103  0409  3008               	movlw	8
  3104  040A  1903               	skipnz
  3105  040B  0224               	subwf	waitFlag@j_111,w
  3106  040C  1803               	btfsc	3,0
  3107  040D  2C36               	goto	l2805
  3108  040E                     l2791:	
  3109                           
  3110                           ;decode_AX25.c: 98: flag_judge = getbit();
  3111  040E  120A  158A  2296  120A  118A  	fcall	_getbit
  3112  0413  0871               	movf	?_getbit+1,w
  3113  0414  1283               	bcf	3,5	;RP0=0, select bank0
  3114  0415  1303               	bcf	3,6	;RP1=0, select bank0
  3115  0416  00BB               	movwf	waitFlag@flag_judge+1
  3116  0417  0870               	movf	?_getbit,w
  3117  0418  00BA               	movwf	waitFlag@flag_judge
  3118                           
  3119                           ;decode_AX25.c: 99: buf = buf >> 1;
  3120  0419  083C               	movf	waitFlag@buf,w
  3121  041A  00F6               	movwf	??_waitFlag
  3122  041B  1003               	clrc
  3123  041C  0C76               	rrf	??_waitFlag,w
  3124  041D  00F7               	movwf	??_waitFlag+1
  3125  041E  0877               	movf	??_waitFlag+1,w
  3126  041F  00BC               	movwf	waitFlag@buf
  3127                           
  3128                           ;decode_AX25.c: 101: buf = buf | 0x00;
  3129  0420  083A               	movf	waitFlag@flag_judge,w
  3130  0421  043B               	iorwf	waitFlag@flag_judge+1,w
  3131  0422  1903               	btfsc	3,2
  3132  0423  2C29               	goto	l2801
  3133                           
  3134                           ;decode_AX25.c: 103: buf = buf | 0x80;
  3135                           
  3136                           ;decode_AX25.c: 102: }else{
  3137  0424  083C               	movf	waitFlag@buf,w
  3138  0425  3880               	iorlw	128
  3139  0426  00F6               	movwf	??_waitFlag
  3140  0427  0876               	movf	??_waitFlag,w
  3141  0428  00BC               	movwf	waitFlag@buf
  3142  0429                     l2801:	
  3143  0429  3001               	movlw	1
  3144  042A  07A4               	addwf	waitFlag@j_111,f
  3145  042B  1803               	skipnc
  3146  042C  0AA5               	incf	waitFlag@j_111+1,f
  3147  042D  3000               	movlw	0
  3148  042E  07A5               	addwf	waitFlag@j_111+1,f
  3149  042F  3000               	movlw	0
  3150  0430  0225               	subwf	waitFlag@j_111+1,w
  3151  0431  3008               	movlw	8
  3152  0432  1903               	skipnz
  3153  0433  0224               	subwf	waitFlag@j_111,w
  3154  0434  1C03               	skipc
  3155  0435  2C0E               	goto	l2791
  3156  0436                     l2805:	
  3157                           
  3158                           ;decode_AX25.c: 104: }
  3159                           ;decode_AX25.c: 105: }
  3160                           ;decode_AX25.c: 106: if(buf == ("JQ1YCZ"[2] << 1)){
  3161  0436  3014               	movlw	low (((STR_1+2)-__stringbase)| (0+32768))
  3162  0437  0084               	movwf	4
  3163  0438  120A  158A  2000  120A  118A  	fcall	stringdir
  3164  043D  00F6               	movwf	??_waitFlag
  3165  043E  01F7               	clrf	??_waitFlag+1
  3166  043F  1003               	clrc
  3167  0440  0DF6               	rlf	??_waitFlag,f
  3168  0441  0DF7               	rlf	??_waitFlag+1,f
  3169  0442  083C               	movf	waitFlag@buf,w
  3170  0443  00F8               	movwf	??_waitFlag+2
  3171  0444  01F9               	clrf	??_waitFlag+3
  3172  0445  0877               	movf	??_waitFlag+1,w
  3173  0446  0679               	xorwf	??_waitFlag+3,w
  3174  0447  1D03               	skipz
  3175  0448  2C4B               	goto	u2285
  3176  0449  0876               	movf	??_waitFlag,w
  3177  044A  0678               	xorwf	??_waitFlag+2,w
  3178  044B                     u2285:	
  3179  044B  1D03               	skipz
  3180  044C  2D64               	goto	l2901
  3181                           
  3182                           ;decode_AX25.c: 107: dPacket[dPacketnum] = buf;
  3183  044D  083C               	movf	waitFlag@buf,w
  3184  044E  00F6               	movwf	??_waitFlag
  3185  044F  0866               	movf	_dPacketnum,w
  3186  0450  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3187  0451  0084               	movwf	4
  3188  0452  0876               	movf	??_waitFlag,w
  3189  0453  1783               	bsf	3,7	;select IRP bank3
  3190  0454  0080               	movwf	0
  3191                           
  3192                           ;decode_AX25.c: 108: dPacketnum ++;
  3193  0455  3001               	movlw	1
  3194  0456  07E6               	addwf	_dPacketnum,f
  3195  0457  1803               	skipnc
  3196  0458  0AE7               	incf	_dPacketnum+1,f
  3197  0459  3000               	movlw	0
  3198  045A  07E7               	addwf	_dPacketnum+1,f
  3199                           
  3200                           ;decode_AX25.c: 109: for(UINT j=0;j<8;j++){
  3201  045B  01A6               	clrf	waitFlag@j_113
  3202  045C  01A7               	clrf	waitFlag@j_113+1
  3203  045D  3000               	movlw	0
  3204  045E  0227               	subwf	waitFlag@j_113+1,w
  3205  045F  3008               	movlw	8
  3206  0460  1903               	skipnz
  3207  0461  0226               	subwf	waitFlag@j_113,w
  3208  0462  1803               	btfsc	3,0
  3209  0463  2C8C               	goto	l2831
  3210  0464                     l2817:	
  3211                           
  3212                           ;decode_AX25.c: 110: flag_judge = getbit();
  3213  0464  120A  158A  2296  120A  118A  	fcall	_getbit
  3214  0469  0871               	movf	?_getbit+1,w
  3215  046A  1283               	bcf	3,5	;RP0=0, select bank0
  3216  046B  1303               	bcf	3,6	;RP1=0, select bank0
  3217  046C  00BB               	movwf	waitFlag@flag_judge+1
  3218  046D  0870               	movf	?_getbit,w
  3219  046E  00BA               	movwf	waitFlag@flag_judge
  3220                           
  3221                           ;decode_AX25.c: 111: buf = buf >> 1;
  3222  046F  083C               	movf	waitFlag@buf,w
  3223  0470  00F6               	movwf	??_waitFlag
  3224  0471  1003               	clrc
  3225  0472  0C76               	rrf	??_waitFlag,w
  3226  0473  00F7               	movwf	??_waitFlag+1
  3227  0474  0877               	movf	??_waitFlag+1,w
  3228  0475  00BC               	movwf	waitFlag@buf
  3229                           
  3230                           ;decode_AX25.c: 113: buf = buf | 0x00;
  3231  0476  083A               	movf	waitFlag@flag_judge,w
  3232  0477  043B               	iorwf	waitFlag@flag_judge+1,w
  3233  0478  1903               	btfsc	3,2
  3234  0479  2C7F               	goto	l2827
  3235                           
  3236                           ;decode_AX25.c: 115: buf = buf | 0x80;
  3237                           
  3238                           ;decode_AX25.c: 114: }else{
  3239  047A  083C               	movf	waitFlag@buf,w
  3240  047B  3880               	iorlw	128
  3241  047C  00F6               	movwf	??_waitFlag
  3242  047D  0876               	movf	??_waitFlag,w
  3243  047E  00BC               	movwf	waitFlag@buf
  3244  047F                     l2827:	
  3245  047F  3001               	movlw	1
  3246  0480  07A6               	addwf	waitFlag@j_113,f
  3247  0481  1803               	skipnc
  3248  0482  0AA7               	incf	waitFlag@j_113+1,f
  3249  0483  3000               	movlw	0
  3250  0484  07A7               	addwf	waitFlag@j_113+1,f
  3251  0485  3000               	movlw	0
  3252  0486  0227               	subwf	waitFlag@j_113+1,w
  3253  0487  3008               	movlw	8
  3254  0488  1903               	skipnz
  3255  0489  0226               	subwf	waitFlag@j_113,w
  3256  048A  1C03               	skipc
  3257  048B  2C64               	goto	l2817
  3258  048C                     l2831:	
  3259                           
  3260                           ;decode_AX25.c: 116: }
  3261                           ;decode_AX25.c: 117: }
  3262                           ;decode_AX25.c: 118: if(buf == ("JQ1YCZ"[3] << 1)){
  3263  048C  3015               	movlw	low (((STR_1+3)-__stringbase)| (0+32768))
  3264  048D  0084               	movwf	4
  3265  048E  120A  158A  2000  120A  118A  	fcall	stringdir
  3266  0493  00F6               	movwf	??_waitFlag
  3267  0494  01F7               	clrf	??_waitFlag+1
  3268  0495  1003               	clrc
  3269  0496  0DF6               	rlf	??_waitFlag,f
  3270  0497  0DF7               	rlf	??_waitFlag+1,f
  3271  0498  083C               	movf	waitFlag@buf,w
  3272  0499  00F8               	movwf	??_waitFlag+2
  3273  049A  01F9               	clrf	??_waitFlag+3
  3274  049B  0877               	movf	??_waitFlag+1,w
  3275  049C  0679               	xorwf	??_waitFlag+3,w
  3276  049D  1D03               	skipz
  3277  049E  2CA1               	goto	u2325
  3278  049F  0876               	movf	??_waitFlag,w
  3279  04A0  0678               	xorwf	??_waitFlag+2,w
  3280  04A1                     u2325:	
  3281  04A1  1D03               	skipz
  3282  04A2  2D64               	goto	l2901
  3283                           
  3284                           ;decode_AX25.c: 119: dPacket[dPacketnum] = buf;
  3285  04A3  083C               	movf	waitFlag@buf,w
  3286  04A4  00F6               	movwf	??_waitFlag
  3287  04A5  0866               	movf	_dPacketnum,w
  3288  04A6  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3289  04A7  0084               	movwf	4
  3290  04A8  0876               	movf	??_waitFlag,w
  3291  04A9  1783               	bsf	3,7	;select IRP bank3
  3292  04AA  0080               	movwf	0
  3293                           
  3294                           ;decode_AX25.c: 120: dPacketnum ++;
  3295  04AB  3001               	movlw	1
  3296  04AC  07E6               	addwf	_dPacketnum,f
  3297  04AD  1803               	skipnc
  3298  04AE  0AE7               	incf	_dPacketnum+1,f
  3299  04AF  3000               	movlw	0
  3300  04B0  07E7               	addwf	_dPacketnum+1,f
  3301                           
  3302                           ;decode_AX25.c: 121: for(UINT j=0;j<8;j++){
  3303  04B1  01A8               	clrf	waitFlag@j_115
  3304  04B2  01A9               	clrf	waitFlag@j_115+1
  3305  04B3  3000               	movlw	0
  3306  04B4  0229               	subwf	waitFlag@j_115+1,w
  3307  04B5  3008               	movlw	8
  3308  04B6  1903               	skipnz
  3309  04B7  0228               	subwf	waitFlag@j_115,w
  3310  04B8  1803               	btfsc	3,0
  3311  04B9  2CE2               	goto	l2857
  3312  04BA                     l2843:	
  3313                           
  3314                           ;decode_AX25.c: 122: flag_judge = getbit();
  3315  04BA  120A  158A  2296  120A  118A  	fcall	_getbit
  3316  04BF  0871               	movf	?_getbit+1,w
  3317  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  3318  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  3319  04C2  00BB               	movwf	waitFlag@flag_judge+1
  3320  04C3  0870               	movf	?_getbit,w
  3321  04C4  00BA               	movwf	waitFlag@flag_judge
  3322                           
  3323                           ;decode_AX25.c: 123: buf = buf >> 1;
  3324  04C5  083C               	movf	waitFlag@buf,w
  3325  04C6  00F6               	movwf	??_waitFlag
  3326  04C7  1003               	clrc
  3327  04C8  0C76               	rrf	??_waitFlag,w
  3328  04C9  00F7               	movwf	??_waitFlag+1
  3329  04CA  0877               	movf	??_waitFlag+1,w
  3330  04CB  00BC               	movwf	waitFlag@buf
  3331                           
  3332                           ;decode_AX25.c: 125: buf = buf | 0x00;
  3333  04CC  083A               	movf	waitFlag@flag_judge,w
  3334  04CD  043B               	iorwf	waitFlag@flag_judge+1,w
  3335  04CE  1903               	btfsc	3,2
  3336  04CF  2CD5               	goto	l2853
  3337                           
  3338                           ;decode_AX25.c: 127: buf = buf | 0x80;
  3339                           
  3340                           ;decode_AX25.c: 126: }else{
  3341  04D0  083C               	movf	waitFlag@buf,w
  3342  04D1  3880               	iorlw	128
  3343  04D2  00F6               	movwf	??_waitFlag
  3344  04D3  0876               	movf	??_waitFlag,w
  3345  04D4  00BC               	movwf	waitFlag@buf
  3346  04D5                     l2853:	
  3347  04D5  3001               	movlw	1
  3348  04D6  07A8               	addwf	waitFlag@j_115,f
  3349  04D7  1803               	skipnc
  3350  04D8  0AA9               	incf	waitFlag@j_115+1,f
  3351  04D9  3000               	movlw	0
  3352  04DA  07A9               	addwf	waitFlag@j_115+1,f
  3353  04DB  3000               	movlw	0
  3354  04DC  0229               	subwf	waitFlag@j_115+1,w
  3355  04DD  3008               	movlw	8
  3356  04DE  1903               	skipnz
  3357  04DF  0228               	subwf	waitFlag@j_115,w
  3358  04E0  1C03               	skipc
  3359  04E1  2CBA               	goto	l2843
  3360  04E2                     l2857:	
  3361                           
  3362                           ;decode_AX25.c: 128: }
  3363                           ;decode_AX25.c: 129: }
  3364                           ;decode_AX25.c: 130: if(buf == ("JQ1YCZ"[4] << 1)){
  3365  04E2  3016               	movlw	low (((STR_1+4)-__stringbase)| (0+32768))
  3366  04E3  0084               	movwf	4
  3367  04E4  120A  158A  2000  120A  118A  	fcall	stringdir
  3368  04E9  00F6               	movwf	??_waitFlag
  3369  04EA  01F7               	clrf	??_waitFlag+1
  3370  04EB  1003               	clrc
  3371  04EC  0DF6               	rlf	??_waitFlag,f
  3372  04ED  0DF7               	rlf	??_waitFlag+1,f
  3373  04EE  083C               	movf	waitFlag@buf,w
  3374  04EF  00F8               	movwf	??_waitFlag+2
  3375  04F0  01F9               	clrf	??_waitFlag+3
  3376  04F1  0877               	movf	??_waitFlag+1,w
  3377  04F2  0679               	xorwf	??_waitFlag+3,w
  3378  04F3  1D03               	skipz
  3379  04F4  2CF7               	goto	u2365
  3380  04F5  0876               	movf	??_waitFlag,w
  3381  04F6  0678               	xorwf	??_waitFlag+2,w
  3382  04F7                     u2365:	
  3383  04F7  1D03               	skipz
  3384  04F8  2D64               	goto	l2901
  3385                           
  3386                           ;decode_AX25.c: 131: dPacket[dPacketnum] = buf;
  3387  04F9  083C               	movf	waitFlag@buf,w
  3388  04FA  00F6               	movwf	??_waitFlag
  3389  04FB  0866               	movf	_dPacketnum,w
  3390  04FC  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3391  04FD  0084               	movwf	4
  3392  04FE  0876               	movf	??_waitFlag,w
  3393  04FF  1783               	bsf	3,7	;select IRP bank3
  3394  0500  0080               	movwf	0
  3395                           
  3396                           ;decode_AX25.c: 132: dPacketnum ++;
  3397  0501  3001               	movlw	1
  3398  0502  07E6               	addwf	_dPacketnum,f
  3399  0503  1803               	skipnc
  3400  0504  0AE7               	incf	_dPacketnum+1,f
  3401  0505  3000               	movlw	0
  3402  0506  07E7               	addwf	_dPacketnum+1,f
  3403                           
  3404                           ;decode_AX25.c: 133: for(UINT j=0;j<8;j++){
  3405  0507  01AA               	clrf	waitFlag@j_117
  3406  0508  01AB               	clrf	waitFlag@j_117+1
  3407  0509  3000               	movlw	0
  3408  050A  022B               	subwf	waitFlag@j_117+1,w
  3409  050B  3008               	movlw	8
  3410  050C  1903               	skipnz
  3411  050D  022A               	subwf	waitFlag@j_117,w
  3412  050E  1803               	btfsc	3,0
  3413  050F  2D38               	goto	l2883
  3414  0510                     l2869:	
  3415                           
  3416                           ;decode_AX25.c: 134: flag_judge = getbit();
  3417  0510  120A  158A  2296  120A  118A  	fcall	_getbit
  3418  0515  0871               	movf	?_getbit+1,w
  3419  0516  1283               	bcf	3,5	;RP0=0, select bank0
  3420  0517  1303               	bcf	3,6	;RP1=0, select bank0
  3421  0518  00BB               	movwf	waitFlag@flag_judge+1
  3422  0519  0870               	movf	?_getbit,w
  3423  051A  00BA               	movwf	waitFlag@flag_judge
  3424                           
  3425                           ;decode_AX25.c: 135: buf = buf >> 1;
  3426  051B  083C               	movf	waitFlag@buf,w
  3427  051C  00F6               	movwf	??_waitFlag
  3428  051D  1003               	clrc
  3429  051E  0C76               	rrf	??_waitFlag,w
  3430  051F  00F7               	movwf	??_waitFlag+1
  3431  0520  0877               	movf	??_waitFlag+1,w
  3432  0521  00BC               	movwf	waitFlag@buf
  3433                           
  3434                           ;decode_AX25.c: 137: buf = buf | 0x00;
  3435  0522  083A               	movf	waitFlag@flag_judge,w
  3436  0523  043B               	iorwf	waitFlag@flag_judge+1,w
  3437  0524  1903               	btfsc	3,2
  3438  0525  2D2B               	goto	l2879
  3439                           
  3440                           ;decode_AX25.c: 139: buf = buf | 0x80;
  3441                           
  3442                           ;decode_AX25.c: 138: }else{
  3443  0526  083C               	movf	waitFlag@buf,w
  3444  0527  3880               	iorlw	128
  3445  0528  00F6               	movwf	??_waitFlag
  3446  0529  0876               	movf	??_waitFlag,w
  3447  052A  00BC               	movwf	waitFlag@buf
  3448  052B                     l2879:	
  3449  052B  3001               	movlw	1
  3450  052C  07AA               	addwf	waitFlag@j_117,f
  3451  052D  1803               	skipnc
  3452  052E  0AAB               	incf	waitFlag@j_117+1,f
  3453  052F  3000               	movlw	0
  3454  0530  07AB               	addwf	waitFlag@j_117+1,f
  3455  0531  3000               	movlw	0
  3456  0532  022B               	subwf	waitFlag@j_117+1,w
  3457  0533  3008               	movlw	8
  3458  0534  1903               	skipnz
  3459  0535  022A               	subwf	waitFlag@j_117,w
  3460  0536  1C03               	skipc
  3461  0537  2D10               	goto	l2869
  3462  0538                     l2883:	
  3463                           
  3464                           ;decode_AX25.c: 140: }
  3465                           ;decode_AX25.c: 141: }
  3466                           ;decode_AX25.c: 142: if(buf == ("JQ1YCZ"[5] << 1)){
  3467  0538  3017               	movlw	low (((STR_1+5)-__stringbase)| (0+32768))
  3468  0539  0084               	movwf	4
  3469  053A  120A  158A  2000  120A  118A  	fcall	stringdir
  3470  053F  00F6               	movwf	??_waitFlag
  3471  0540  01F7               	clrf	??_waitFlag+1
  3472  0541  1003               	clrc
  3473  0542  0DF6               	rlf	??_waitFlag,f
  3474  0543  0DF7               	rlf	??_waitFlag+1,f
  3475  0544  083C               	movf	waitFlag@buf,w
  3476  0545  00F8               	movwf	??_waitFlag+2
  3477  0546  01F9               	clrf	??_waitFlag+3
  3478  0547  0877               	movf	??_waitFlag+1,w
  3479  0548  0679               	xorwf	??_waitFlag+3,w
  3480  0549  1D03               	skipz
  3481  054A  2D4D               	goto	u2405
  3482  054B  0876               	movf	??_waitFlag,w
  3483  054C  0678               	xorwf	??_waitFlag+2,w
  3484  054D                     u2405:	
  3485  054D  1D03               	skipz
  3486  054E  2D64               	goto	l2901
  3487                           
  3488                           ;decode_AX25.c: 143: dPacket[dPacketnum] = buf;
  3489  054F  083C               	movf	waitFlag@buf,w
  3490  0550  00F6               	movwf	??_waitFlag
  3491  0551  0866               	movf	_dPacketnum,w
  3492  0552  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3493  0553  0084               	movwf	4
  3494  0554  0876               	movf	??_waitFlag,w
  3495  0555  1783               	bsf	3,7	;select IRP bank3
  3496  0556  0080               	movwf	0
  3497                           
  3498                           ;decode_AX25.c: 144: dPacketnum ++;
  3499  0557  3001               	movlw	1
  3500  0558  07E6               	addwf	_dPacketnum,f
  3501  0559  1803               	skipnc
  3502  055A  0AE7               	incf	_dPacketnum+1,f
  3503  055B  3000               	movlw	0
  3504  055C  07E7               	addwf	_dPacketnum+1,f
  3505                           
  3506                           ;decode_AX25.c: 145: rcv_state ++;
  3507  055D  3001               	movlw	1
  3508  055E  07EA               	addwf	_rcv_state,f
  3509  055F  1803               	skipnc
  3510  0560  0AEB               	incf	_rcv_state+1,f
  3511  0561  3000               	movlw	0
  3512  0562  07EB               	addwf	_rcv_state+1,f
  3513                           
  3514                           ;decode_AX25.c: 146: }else{
  3515  0563  2D66               	goto	l207
  3516  0564                     l2901:	
  3517                           ;decode_AX25.c: 160: }
  3518                           ;decode_AX25.c: 161: }else{
  3519                           
  3520                           ;decode_AX25.c: 159: dPacketnum = 0;
  3521                           
  3522                           ;decode_AX25.c: 157: }
  3523                           ;decode_AX25.c: 158: }else{
  3524                           
  3525                           ;decode_AX25.c: 156: dPacketnum = 0;
  3526                           
  3527                           ;decode_AX25.c: 154: }
  3528                           ;decode_AX25.c: 155: }else{
  3529                           
  3530                           ;decode_AX25.c: 153: dPacketnum = 0;
  3531                           
  3532                           ;decode_AX25.c: 151: }
  3533                           ;decode_AX25.c: 152: }else{
  3534                           
  3535                           ;decode_AX25.c: 150: dPacketnum = 0;
  3536                           
  3537                           ;decode_AX25.c: 148: }
  3538                           ;decode_AX25.c: 149: }else{
  3539                           
  3540                           ;decode_AX25.c: 147: dPacketnum = 0;
  3541                           
  3542                           
  3543                           ;decode_AX25.c: 162: dPacketnum = 0;
  3544  0564  01E6               	clrf	_dPacketnum
  3545  0565  01E7               	clrf	_dPacketnum+1
  3546  0566                     l207:	
  3547                           
  3548                           ;decode_AX25.c: 163: }
  3549                           ;decode_AX25.c: 165: for(UINT j=0;j<8;j++){
  3550  0566  01AC               	clrf	waitFlag@j_119
  3551  0567  01AD               	clrf	waitFlag@j_119+1
  3552  0568  3000               	movlw	0
  3553  0569  022D               	subwf	waitFlag@j_119+1,w
  3554  056A  3008               	movlw	8
  3555  056B  1903               	skipnz
  3556  056C  022C               	subwf	waitFlag@j_119,w
  3557  056D  1803               	btfsc	3,0
  3558  056E  2D97               	goto	l2921
  3559  056F                     l2907:	
  3560                           
  3561                           ;decode_AX25.c: 166: flag_judge = getbit();
  3562  056F  120A  158A  2296  120A  118A  	fcall	_getbit
  3563  0574  0871               	movf	?_getbit+1,w
  3564  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3565  0576  1303               	bcf	3,6	;RP1=0, select bank0
  3566  0577  00BB               	movwf	waitFlag@flag_judge+1
  3567  0578  0870               	movf	?_getbit,w
  3568  0579  00BA               	movwf	waitFlag@flag_judge
  3569                           
  3570                           ;decode_AX25.c: 167: buf = buf >> 1;
  3571  057A  083C               	movf	waitFlag@buf,w
  3572  057B  00F6               	movwf	??_waitFlag
  3573  057C  1003               	clrc
  3574  057D  0C76               	rrf	??_waitFlag,w
  3575  057E  00F7               	movwf	??_waitFlag+1
  3576  057F  0877               	movf	??_waitFlag+1,w
  3577  0580  00BC               	movwf	waitFlag@buf
  3578                           
  3579                           ;decode_AX25.c: 169: buf = buf | 0x00;
  3580  0581  083A               	movf	waitFlag@flag_judge,w
  3581  0582  043B               	iorwf	waitFlag@flag_judge+1,w
  3582  0583  1903               	btfsc	3,2
  3583  0584  2D8A               	goto	l2917
  3584                           
  3585                           ;decode_AX25.c: 171: buf = buf | 0x80;
  3586                           
  3587                           ;decode_AX25.c: 170: }else{
  3588  0585  083C               	movf	waitFlag@buf,w
  3589  0586  3880               	iorlw	128
  3590  0587  00F6               	movwf	??_waitFlag
  3591  0588  0876               	movf	??_waitFlag,w
  3592  0589  00BC               	movwf	waitFlag@buf
  3593  058A                     l2917:	
  3594  058A  3001               	movlw	1
  3595  058B  07AC               	addwf	waitFlag@j_119,f
  3596  058C  1803               	skipnc
  3597  058D  0AAD               	incf	waitFlag@j_119+1,f
  3598  058E  3000               	movlw	0
  3599  058F  07AD               	addwf	waitFlag@j_119+1,f
  3600  0590  3000               	movlw	0
  3601  0591  022D               	subwf	waitFlag@j_119+1,w
  3602  0592  3008               	movlw	8
  3603  0593  1903               	skipnz
  3604  0594  022C               	subwf	waitFlag@j_119,w
  3605  0595  1C03               	skipc
  3606  0596  2D6F               	goto	l2907
  3607  0597                     l2921:	
  3608                           
  3609                           ;decode_AX25.c: 172: }
  3610                           ;decode_AX25.c: 173: }
  3611                           ;decode_AX25.c: 174: dPacket[dPacketnum] = buf;
  3612  0597  083C               	movf	waitFlag@buf,w
  3613  0598  00F6               	movwf	??_waitFlag
  3614  0599  0866               	movf	_dPacketnum,w
  3615  059A  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3616  059B  0084               	movwf	4
  3617  059C  0876               	movf	??_waitFlag,w
  3618  059D  1783               	bsf	3,7	;select IRP bank3
  3619  059E  0080               	movwf	0
  3620                           
  3621                           ;decode_AX25.c: 175: dPacketnum ++;
  3622  059F  3001               	movlw	1
  3623  05A0  07E6               	addwf	_dPacketnum,f
  3624  05A1  1803               	skipnc
  3625  05A2  0AE7               	incf	_dPacketnum+1,f
  3626  05A3  3000               	movlw	0
  3627  05A4  07E7               	addwf	_dPacketnum+1,f
  3628                           
  3629                           ;decode_AX25.c: 176: for(UINT j=0;j<8;j++){
  3630  05A5  01AE               	clrf	waitFlag@j_120
  3631  05A6  01AF               	clrf	waitFlag@j_120+1
  3632  05A7  3000               	movlw	0
  3633  05A8  022F               	subwf	waitFlag@j_120+1,w
  3634  05A9  3008               	movlw	8
  3635  05AA  1903               	skipnz
  3636  05AB  022E               	subwf	waitFlag@j_120,w
  3637  05AC  1803               	btfsc	3,0
  3638  05AD  2DD6               	goto	l2945
  3639  05AE                     l2931:	
  3640                           
  3641                           ;decode_AX25.c: 177: flag_judge = getbit();
  3642  05AE  120A  158A  2296  120A  118A  	fcall	_getbit
  3643  05B3  0871               	movf	?_getbit+1,w
  3644  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  3645  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  3646  05B6  00BB               	movwf	waitFlag@flag_judge+1
  3647  05B7  0870               	movf	?_getbit,w
  3648  05B8  00BA               	movwf	waitFlag@flag_judge
  3649                           
  3650                           ;decode_AX25.c: 178: buf = buf >> 1;
  3651  05B9  083C               	movf	waitFlag@buf,w
  3652  05BA  00F6               	movwf	??_waitFlag
  3653  05BB  1003               	clrc
  3654  05BC  0C76               	rrf	??_waitFlag,w
  3655  05BD  00F7               	movwf	??_waitFlag+1
  3656  05BE  0877               	movf	??_waitFlag+1,w
  3657  05BF  00BC               	movwf	waitFlag@buf
  3658                           
  3659                           ;decode_AX25.c: 180: buf = buf | 0x00;
  3660  05C0  083A               	movf	waitFlag@flag_judge,w
  3661  05C1  043B               	iorwf	waitFlag@flag_judge+1,w
  3662  05C2  1903               	btfsc	3,2
  3663  05C3  2DC9               	goto	l2941
  3664                           
  3665                           ;decode_AX25.c: 182: buf = buf | 0x80;
  3666                           
  3667                           ;decode_AX25.c: 181: }else{
  3668  05C4  083C               	movf	waitFlag@buf,w
  3669  05C5  3880               	iorlw	128
  3670  05C6  00F6               	movwf	??_waitFlag
  3671  05C7  0876               	movf	??_waitFlag,w
  3672  05C8  00BC               	movwf	waitFlag@buf
  3673  05C9                     l2941:	
  3674  05C9  3001               	movlw	1
  3675  05CA  07AE               	addwf	waitFlag@j_120,f
  3676  05CB  1803               	skipnc
  3677  05CC  0AAF               	incf	waitFlag@j_120+1,f
  3678  05CD  3000               	movlw	0
  3679  05CE  07AF               	addwf	waitFlag@j_120+1,f
  3680  05CF  3000               	movlw	0
  3681  05D0  022F               	subwf	waitFlag@j_120+1,w
  3682  05D1  3008               	movlw	8
  3683  05D2  1903               	skipnz
  3684  05D3  022E               	subwf	waitFlag@j_120,w
  3685  05D4  1C03               	skipc
  3686  05D5  2DAE               	goto	l2931
  3687  05D6                     l2945:	
  3688                           
  3689                           ;decode_AX25.c: 183: }
  3690                           ;decode_AX25.c: 184: }
  3691                           ;decode_AX25.c: 185: if(buf == ("JQ1ZHX"[0] << 1)){
  3692  05D6  300B               	movlw	low (STR_7-__stringbase)
  3693  05D7  0084               	movwf	4
  3694  05D8  120A  158A  2000  120A  118A  	fcall	stringdir
  3695  05DD  00F6               	movwf	??_waitFlag
  3696  05DE  01F7               	clrf	??_waitFlag+1
  3697  05DF  1003               	clrc
  3698  05E0  0DF6               	rlf	??_waitFlag,f
  3699  05E1  0DF7               	rlf	??_waitFlag+1,f
  3700  05E2  083C               	movf	waitFlag@buf,w
  3701  05E3  00F8               	movwf	??_waitFlag+2
  3702  05E4  01F9               	clrf	??_waitFlag+3
  3703  05E5  0877               	movf	??_waitFlag+1,w
  3704  05E6  0679               	xorwf	??_waitFlag+3,w
  3705  05E7  1D03               	skipz
  3706  05E8  2DEB               	goto	u2475
  3707  05E9  0876               	movf	??_waitFlag,w
  3708  05EA  0678               	xorwf	??_waitFlag+2,w
  3709  05EB                     u2475:	
  3710  05EB  1D03               	skipz
  3711  05EC  2FB0               	goto	l3093
  3712                           
  3713                           ;decode_AX25.c: 186: dPacket[dPacketnum] = buf;
  3714  05ED  083C               	movf	waitFlag@buf,w
  3715  05EE  00F6               	movwf	??_waitFlag
  3716  05EF  0866               	movf	_dPacketnum,w
  3717  05F0  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3718  05F1  0084               	movwf	4
  3719  05F2  0876               	movf	??_waitFlag,w
  3720  05F3  1783               	bsf	3,7	;select IRP bank3
  3721  05F4  0080               	movwf	0
  3722                           
  3723                           ;decode_AX25.c: 187: dPacketnum ++;
  3724  05F5  3001               	movlw	1
  3725  05F6  07E6               	addwf	_dPacketnum,f
  3726  05F7  1803               	skipnc
  3727  05F8  0AE7               	incf	_dPacketnum+1,f
  3728  05F9  3000               	movlw	0
  3729  05FA  07E7               	addwf	_dPacketnum+1,f
  3730                           
  3731                           ;decode_AX25.c: 188: for(UINT j=0;j<8;j++){
  3732  05FB  01B0               	clrf	waitFlag@j_122
  3733  05FC  01B1               	clrf	waitFlag@j_122+1
  3734  05FD  3000               	movlw	0
  3735  05FE  0231               	subwf	waitFlag@j_122+1,w
  3736  05FF  3008               	movlw	8
  3737  0600  1903               	skipnz
  3738  0601  0230               	subwf	waitFlag@j_122,w
  3739  0602  1803               	btfsc	3,0
  3740  0603  2E2C               	goto	l2971
  3741  0604                     l2957:	
  3742                           
  3743                           ;decode_AX25.c: 189: flag_judge = getbit();
  3744  0604  120A  158A  2296  120A  118A  	fcall	_getbit
  3745  0609  0871               	movf	?_getbit+1,w
  3746  060A  1283               	bcf	3,5	;RP0=0, select bank0
  3747  060B  1303               	bcf	3,6	;RP1=0, select bank0
  3748  060C  00BB               	movwf	waitFlag@flag_judge+1
  3749  060D  0870               	movf	?_getbit,w
  3750  060E  00BA               	movwf	waitFlag@flag_judge
  3751                           
  3752                           ;decode_AX25.c: 190: buf = buf >> 1;
  3753  060F  083C               	movf	waitFlag@buf,w
  3754  0610  00F6               	movwf	??_waitFlag
  3755  0611  1003               	clrc
  3756  0612  0C76               	rrf	??_waitFlag,w
  3757  0613  00F7               	movwf	??_waitFlag+1
  3758  0614  0877               	movf	??_waitFlag+1,w
  3759  0615  00BC               	movwf	waitFlag@buf
  3760                           
  3761                           ;decode_AX25.c: 192: buf = buf | 0x00;
  3762  0616  083A               	movf	waitFlag@flag_judge,w
  3763  0617  043B               	iorwf	waitFlag@flag_judge+1,w
  3764  0618  1903               	btfsc	3,2
  3765  0619  2E1F               	goto	l2967
  3766                           
  3767                           ;decode_AX25.c: 194: buf = buf | 0x80;
  3768                           
  3769                           ;decode_AX25.c: 193: }else{
  3770  061A  083C               	movf	waitFlag@buf,w
  3771  061B  3880               	iorlw	128
  3772  061C  00F6               	movwf	??_waitFlag
  3773  061D  0876               	movf	??_waitFlag,w
  3774  061E  00BC               	movwf	waitFlag@buf
  3775  061F                     l2967:	
  3776  061F  3001               	movlw	1
  3777  0620  07B0               	addwf	waitFlag@j_122,f
  3778  0621  1803               	skipnc
  3779  0622  0AB1               	incf	waitFlag@j_122+1,f
  3780  0623  3000               	movlw	0
  3781  0624  07B1               	addwf	waitFlag@j_122+1,f
  3782  0625  3000               	movlw	0
  3783  0626  0231               	subwf	waitFlag@j_122+1,w
  3784  0627  3008               	movlw	8
  3785  0628  1903               	skipnz
  3786  0629  0230               	subwf	waitFlag@j_122,w
  3787  062A  1C03               	skipc
  3788  062B  2E04               	goto	l2957
  3789  062C                     l2971:	
  3790                           
  3791                           ;decode_AX25.c: 195: }
  3792                           ;decode_AX25.c: 196: }
  3793                           ;decode_AX25.c: 197: if(buf == ("JQ1ZHX"[1] << 1)){
  3794  062C  300C               	movlw	low (((STR_7+1)-__stringbase)| (0+32768))
  3795  062D  0084               	movwf	4
  3796  062E  120A  158A  2000  120A  118A  	fcall	stringdir
  3797  0633  00F6               	movwf	??_waitFlag
  3798  0634  01F7               	clrf	??_waitFlag+1
  3799  0635  1003               	clrc
  3800  0636  0DF6               	rlf	??_waitFlag,f
  3801  0637  0DF7               	rlf	??_waitFlag+1,f
  3802  0638  083C               	movf	waitFlag@buf,w
  3803  0639  00F8               	movwf	??_waitFlag+2
  3804  063A  01F9               	clrf	??_waitFlag+3
  3805  063B  0877               	movf	??_waitFlag+1,w
  3806  063C  0679               	xorwf	??_waitFlag+3,w
  3807  063D  1D03               	skipz
  3808  063E  2E41               	goto	u2515
  3809  063F  0876               	movf	??_waitFlag,w
  3810  0640  0678               	xorwf	??_waitFlag+2,w
  3811  0641                     u2515:	
  3812  0641  1D03               	skipz
  3813  0642  2FB0               	goto	l3093
  3814                           
  3815                           ;decode_AX25.c: 198: dPacket[dPacketnum] = buf;
  3816  0643  083C               	movf	waitFlag@buf,w
  3817  0644  00F6               	movwf	??_waitFlag
  3818  0645  0866               	movf	_dPacketnum,w
  3819  0646  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3820  0647  0084               	movwf	4
  3821  0648  0876               	movf	??_waitFlag,w
  3822  0649  1783               	bsf	3,7	;select IRP bank3
  3823  064A  0080               	movwf	0
  3824                           
  3825                           ;decode_AX25.c: 199: dPacketnum ++;
  3826  064B  3001               	movlw	1
  3827  064C  07E6               	addwf	_dPacketnum,f
  3828  064D  1803               	skipnc
  3829  064E  0AE7               	incf	_dPacketnum+1,f
  3830  064F  3000               	movlw	0
  3831  0650  07E7               	addwf	_dPacketnum+1,f
  3832                           
  3833                           ;decode_AX25.c: 200: for(UINT j=0;j<8;j++){
  3834  0651  01B2               	clrf	waitFlag@j_124
  3835  0652  01B3               	clrf	waitFlag@j_124+1
  3836  0653  3000               	movlw	0
  3837  0654  0233               	subwf	waitFlag@j_124+1,w
  3838  0655  3008               	movlw	8
  3839  0656  1903               	skipnz
  3840  0657  0232               	subwf	waitFlag@j_124,w
  3841  0658  1803               	btfsc	3,0
  3842  0659  2E82               	goto	l2997
  3843  065A                     l2983:	
  3844                           
  3845                           ;decode_AX25.c: 201: flag_judge = getbit();
  3846  065A  120A  158A  2296  120A  118A  	fcall	_getbit
  3847  065F  0871               	movf	?_getbit+1,w
  3848  0660  1283               	bcf	3,5	;RP0=0, select bank0
  3849  0661  1303               	bcf	3,6	;RP1=0, select bank0
  3850  0662  00BB               	movwf	waitFlag@flag_judge+1
  3851  0663  0870               	movf	?_getbit,w
  3852  0664  00BA               	movwf	waitFlag@flag_judge
  3853                           
  3854                           ;decode_AX25.c: 202: buf = buf >> 1;
  3855  0665  083C               	movf	waitFlag@buf,w
  3856  0666  00F6               	movwf	??_waitFlag
  3857  0667  1003               	clrc
  3858  0668  0C76               	rrf	??_waitFlag,w
  3859  0669  00F7               	movwf	??_waitFlag+1
  3860  066A  0877               	movf	??_waitFlag+1,w
  3861  066B  00BC               	movwf	waitFlag@buf
  3862                           
  3863                           ;decode_AX25.c: 204: buf = buf | 0x00;
  3864  066C  083A               	movf	waitFlag@flag_judge,w
  3865  066D  043B               	iorwf	waitFlag@flag_judge+1,w
  3866  066E  1903               	btfsc	3,2
  3867  066F  2E75               	goto	l2993
  3868                           
  3869                           ;decode_AX25.c: 206: buf = buf | 0x80;
  3870                           
  3871                           ;decode_AX25.c: 205: }else{
  3872  0670  083C               	movf	waitFlag@buf,w
  3873  0671  3880               	iorlw	128
  3874  0672  00F6               	movwf	??_waitFlag
  3875  0673  0876               	movf	??_waitFlag,w
  3876  0674  00BC               	movwf	waitFlag@buf
  3877  0675                     l2993:	
  3878  0675  3001               	movlw	1
  3879  0676  07B2               	addwf	waitFlag@j_124,f
  3880  0677  1803               	skipnc
  3881  0678  0AB3               	incf	waitFlag@j_124+1,f
  3882  0679  3000               	movlw	0
  3883  067A  07B3               	addwf	waitFlag@j_124+1,f
  3884  067B  3000               	movlw	0
  3885  067C  0233               	subwf	waitFlag@j_124+1,w
  3886  067D  3008               	movlw	8
  3887  067E  1903               	skipnz
  3888  067F  0232               	subwf	waitFlag@j_124,w
  3889  0680  1C03               	skipc
  3890  0681  2E5A               	goto	l2983
  3891  0682                     l2997:	
  3892                           
  3893                           ;decode_AX25.c: 207: }
  3894                           ;decode_AX25.c: 208: }
  3895                           ;decode_AX25.c: 209: if(buf == ("JQ1ZHX"[2] << 1)){
  3896  0682  300D               	movlw	low (((STR_7+2)-__stringbase)| (0+32768))
  3897  0683  0084               	movwf	4
  3898  0684  120A  158A  2000  120A  118A  	fcall	stringdir
  3899  0689  00F6               	movwf	??_waitFlag
  3900  068A  01F7               	clrf	??_waitFlag+1
  3901  068B  1003               	clrc
  3902  068C  0DF6               	rlf	??_waitFlag,f
  3903  068D  0DF7               	rlf	??_waitFlag+1,f
  3904  068E  083C               	movf	waitFlag@buf,w
  3905  068F  00F8               	movwf	??_waitFlag+2
  3906  0690  01F9               	clrf	??_waitFlag+3
  3907  0691  0877               	movf	??_waitFlag+1,w
  3908  0692  0679               	xorwf	??_waitFlag+3,w
  3909  0693  1D03               	skipz
  3910  0694  2E97               	goto	u2555
  3911  0695  0876               	movf	??_waitFlag,w
  3912  0696  0678               	xorwf	??_waitFlag+2,w
  3913  0697                     u2555:	
  3914  0697  1D03               	skipz
  3915  0698  2FB0               	goto	l3093
  3916                           
  3917                           ;decode_AX25.c: 210: dPacket[dPacketnum] = buf;
  3918  0699  083C               	movf	waitFlag@buf,w
  3919  069A  00F6               	movwf	??_waitFlag
  3920  069B  0866               	movf	_dPacketnum,w
  3921  069C  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3922  069D  0084               	movwf	4
  3923  069E  0876               	movf	??_waitFlag,w
  3924  069F  1783               	bsf	3,7	;select IRP bank3
  3925  06A0  0080               	movwf	0
  3926                           
  3927                           ;decode_AX25.c: 211: dPacketnum ++;
  3928  06A1  3001               	movlw	1
  3929  06A2  07E6               	addwf	_dPacketnum,f
  3930  06A3  1803               	skipnc
  3931  06A4  0AE7               	incf	_dPacketnum+1,f
  3932  06A5  3000               	movlw	0
  3933  06A6  07E7               	addwf	_dPacketnum+1,f
  3934                           
  3935                           ;decode_AX25.c: 212: for(UINT j=0;j<8;j++){
  3936  06A7  01B4               	clrf	waitFlag@j_126
  3937  06A8  01B5               	clrf	waitFlag@j_126+1
  3938  06A9  3000               	movlw	0
  3939  06AA  0235               	subwf	waitFlag@j_126+1,w
  3940  06AB  3008               	movlw	8
  3941  06AC  1903               	skipnz
  3942  06AD  0234               	subwf	waitFlag@j_126,w
  3943  06AE  1803               	btfsc	3,0
  3944  06AF  2ED8               	goto	l3023
  3945  06B0                     l3009:	
  3946                           
  3947                           ;decode_AX25.c: 213: flag_judge = getbit();
  3948  06B0  120A  158A  2296  120A  118A  	fcall	_getbit
  3949  06B5  0871               	movf	?_getbit+1,w
  3950  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  3951  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  3952  06B8  00BB               	movwf	waitFlag@flag_judge+1
  3953  06B9  0870               	movf	?_getbit,w
  3954  06BA  00BA               	movwf	waitFlag@flag_judge
  3955                           
  3956                           ;decode_AX25.c: 214: buf = buf >> 1;
  3957  06BB  083C               	movf	waitFlag@buf,w
  3958  06BC  00F6               	movwf	??_waitFlag
  3959  06BD  1003               	clrc
  3960  06BE  0C76               	rrf	??_waitFlag,w
  3961  06BF  00F7               	movwf	??_waitFlag+1
  3962  06C0  0877               	movf	??_waitFlag+1,w
  3963  06C1  00BC               	movwf	waitFlag@buf
  3964                           
  3965                           ;decode_AX25.c: 216: buf = buf | 0x00;
  3966  06C2  083A               	movf	waitFlag@flag_judge,w
  3967  06C3  043B               	iorwf	waitFlag@flag_judge+1,w
  3968  06C4  1903               	btfsc	3,2
  3969  06C5  2ECB               	goto	l3019
  3970                           
  3971                           ;decode_AX25.c: 218: buf = buf | 0x80;
  3972                           
  3973                           ;decode_AX25.c: 217: }else{
  3974  06C6  083C               	movf	waitFlag@buf,w
  3975  06C7  3880               	iorlw	128
  3976  06C8  00F6               	movwf	??_waitFlag
  3977  06C9  0876               	movf	??_waitFlag,w
  3978  06CA  00BC               	movwf	waitFlag@buf
  3979  06CB                     l3019:	
  3980  06CB  3001               	movlw	1
  3981  06CC  07B4               	addwf	waitFlag@j_126,f
  3982  06CD  1803               	skipnc
  3983  06CE  0AB5               	incf	waitFlag@j_126+1,f
  3984  06CF  3000               	movlw	0
  3985  06D0  07B5               	addwf	waitFlag@j_126+1,f
  3986  06D1  3000               	movlw	0
  3987  06D2  0235               	subwf	waitFlag@j_126+1,w
  3988  06D3  3008               	movlw	8
  3989  06D4  1903               	skipnz
  3990  06D5  0234               	subwf	waitFlag@j_126,w
  3991  06D6  1C03               	skipc
  3992  06D7  2EB0               	goto	l3009
  3993  06D8                     l3023:	
  3994                           
  3995                           ;decode_AX25.c: 219: }
  3996                           ;decode_AX25.c: 220: }
  3997                           ;decode_AX25.c: 221: if(buf == ("JQ1ZHX"[3] << 1)){
  3998  06D8  300E               	movlw	low (((STR_7+3)-__stringbase)| (0+32768))
  3999  06D9  0084               	movwf	4
  4000  06DA  120A  158A  2000  120A  118A  	fcall	stringdir
  4001  06DF  00F6               	movwf	??_waitFlag
  4002  06E0  01F7               	clrf	??_waitFlag+1
  4003  06E1  1003               	clrc
  4004  06E2  0DF6               	rlf	??_waitFlag,f
  4005  06E3  0DF7               	rlf	??_waitFlag+1,f
  4006  06E4  083C               	movf	waitFlag@buf,w
  4007  06E5  00F8               	movwf	??_waitFlag+2
  4008  06E6  01F9               	clrf	??_waitFlag+3
  4009  06E7  0877               	movf	??_waitFlag+1,w
  4010  06E8  0679               	xorwf	??_waitFlag+3,w
  4011  06E9  1D03               	skipz
  4012  06EA  2EED               	goto	u2595
  4013  06EB  0876               	movf	??_waitFlag,w
  4014  06EC  0678               	xorwf	??_waitFlag+2,w
  4015  06ED                     u2595:	
  4016  06ED  1D03               	skipz
  4017  06EE  2FB0               	goto	l3093
  4018                           
  4019                           ;decode_AX25.c: 222: dPacket[dPacketnum] = buf;
  4020  06EF  083C               	movf	waitFlag@buf,w
  4021  06F0  00F6               	movwf	??_waitFlag
  4022  06F1  0866               	movf	_dPacketnum,w
  4023  06F2  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4024  06F3  0084               	movwf	4
  4025  06F4  0876               	movf	??_waitFlag,w
  4026  06F5  1783               	bsf	3,7	;select IRP bank3
  4027  06F6  0080               	movwf	0
  4028                           
  4029                           ;decode_AX25.c: 223: dPacketnum ++;
  4030  06F7  3001               	movlw	1
  4031  06F8  07E6               	addwf	_dPacketnum,f
  4032  06F9  1803               	skipnc
  4033  06FA  0AE7               	incf	_dPacketnum+1,f
  4034  06FB  3000               	movlw	0
  4035  06FC  07E7               	addwf	_dPacketnum+1,f
  4036                           
  4037                           ;decode_AX25.c: 224: for(UINT j=0;j<8;j++){
  4038  06FD  01B6               	clrf	waitFlag@j_128
  4039  06FE  01B7               	clrf	waitFlag@j_128+1
  4040  06FF  3000               	movlw	0
  4041  0700  0237               	subwf	waitFlag@j_128+1,w
  4042  0701  3008               	movlw	8
  4043  0702  1903               	skipnz
  4044  0703  0236               	subwf	waitFlag@j_128,w
  4045  0704  1803               	btfsc	3,0
  4046  0705  2F2E               	goto	l3049
  4047  0706                     l3035:	
  4048                           
  4049                           ;decode_AX25.c: 225: flag_judge = getbit();
  4050  0706  120A  158A  2296  120A  118A  	fcall	_getbit
  4051  070B  0871               	movf	?_getbit+1,w
  4052  070C  1283               	bcf	3,5	;RP0=0, select bank0
  4053  070D  1303               	bcf	3,6	;RP1=0, select bank0
  4054  070E  00BB               	movwf	waitFlag@flag_judge+1
  4055  070F  0870               	movf	?_getbit,w
  4056  0710  00BA               	movwf	waitFlag@flag_judge
  4057                           
  4058                           ;decode_AX25.c: 226: buf = buf >> 1;
  4059  0711  083C               	movf	waitFlag@buf,w
  4060  0712  00F6               	movwf	??_waitFlag
  4061  0713  1003               	clrc
  4062  0714  0C76               	rrf	??_waitFlag,w
  4063  0715  00F7               	movwf	??_waitFlag+1
  4064  0716  0877               	movf	??_waitFlag+1,w
  4065  0717  00BC               	movwf	waitFlag@buf
  4066                           
  4067                           ;decode_AX25.c: 228: buf = buf | 0x00;
  4068  0718  083A               	movf	waitFlag@flag_judge,w
  4069  0719  043B               	iorwf	waitFlag@flag_judge+1,w
  4070  071A  1903               	btfsc	3,2
  4071  071B  2F21               	goto	l3045
  4072                           
  4073                           ;decode_AX25.c: 230: buf = buf | 0x80;
  4074                           
  4075                           ;decode_AX25.c: 229: }else{
  4076  071C  083C               	movf	waitFlag@buf,w
  4077  071D  3880               	iorlw	128
  4078  071E  00F6               	movwf	??_waitFlag
  4079  071F  0876               	movf	??_waitFlag,w
  4080  0720  00BC               	movwf	waitFlag@buf
  4081  0721                     l3045:	
  4082  0721  3001               	movlw	1
  4083  0722  07B6               	addwf	waitFlag@j_128,f
  4084  0723  1803               	skipnc
  4085  0724  0AB7               	incf	waitFlag@j_128+1,f
  4086  0725  3000               	movlw	0
  4087  0726  07B7               	addwf	waitFlag@j_128+1,f
  4088  0727  3000               	movlw	0
  4089  0728  0237               	subwf	waitFlag@j_128+1,w
  4090  0729  3008               	movlw	8
  4091  072A  1903               	skipnz
  4092  072B  0236               	subwf	waitFlag@j_128,w
  4093  072C  1C03               	skipc
  4094  072D  2F06               	goto	l3035
  4095  072E                     l3049:	
  4096                           
  4097                           ;decode_AX25.c: 231: }
  4098                           ;decode_AX25.c: 232: }
  4099                           ;decode_AX25.c: 233: if(buf == ("JQ1ZHX"[4] << 1)){
  4100  072E  300F               	movlw	low (((STR_7+4)-__stringbase)| (0+32768))
  4101  072F  0084               	movwf	4
  4102  0730  120A  158A  2000  120A  118A  	fcall	stringdir
  4103  0735  00F6               	movwf	??_waitFlag
  4104  0736  01F7               	clrf	??_waitFlag+1
  4105  0737  1003               	clrc
  4106  0738  0DF6               	rlf	??_waitFlag,f
  4107  0739  0DF7               	rlf	??_waitFlag+1,f
  4108  073A  083C               	movf	waitFlag@buf,w
  4109  073B  00F8               	movwf	??_waitFlag+2
  4110  073C  01F9               	clrf	??_waitFlag+3
  4111  073D  0877               	movf	??_waitFlag+1,w
  4112  073E  0679               	xorwf	??_waitFlag+3,w
  4113  073F  1D03               	skipz
  4114  0740  2F43               	goto	u2635
  4115  0741  0876               	movf	??_waitFlag,w
  4116  0742  0678               	xorwf	??_waitFlag+2,w
  4117  0743                     u2635:	
  4118  0743  1D03               	skipz
  4119  0744  2FB0               	goto	l3093
  4120                           
  4121                           ;decode_AX25.c: 234: dPacket[dPacketnum] = buf;
  4122  0745  083C               	movf	waitFlag@buf,w
  4123  0746  00F6               	movwf	??_waitFlag
  4124  0747  0866               	movf	_dPacketnum,w
  4125  0748  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4126  0749  0084               	movwf	4
  4127  074A  0876               	movf	??_waitFlag,w
  4128  074B  1783               	bsf	3,7	;select IRP bank3
  4129  074C  0080               	movwf	0
  4130                           
  4131                           ;decode_AX25.c: 235: dPacketnum ++;
  4132  074D  3001               	movlw	1
  4133  074E  07E6               	addwf	_dPacketnum,f
  4134  074F  1803               	skipnc
  4135  0750  0AE7               	incf	_dPacketnum+1,f
  4136  0751  3000               	movlw	0
  4137  0752  07E7               	addwf	_dPacketnum+1,f
  4138                           
  4139                           ;decode_AX25.c: 236: for(UINT j=0;j<8;j++){
  4140  0753  01B8               	clrf	waitFlag@j_130
  4141  0754  01B9               	clrf	waitFlag@j_130+1
  4142  0755  3000               	movlw	0
  4143  0756  0239               	subwf	waitFlag@j_130+1,w
  4144  0757  3008               	movlw	8
  4145  0758  1903               	skipnz
  4146  0759  0238               	subwf	waitFlag@j_130,w
  4147  075A  1803               	btfsc	3,0
  4148  075B  2F84               	goto	l3075
  4149  075C                     l3061:	
  4150                           
  4151                           ;decode_AX25.c: 237: flag_judge = getbit();
  4152  075C  120A  158A  2296  120A  118A  	fcall	_getbit
  4153  0761  0871               	movf	?_getbit+1,w
  4154  0762  1283               	bcf	3,5	;RP0=0, select bank0
  4155  0763  1303               	bcf	3,6	;RP1=0, select bank0
  4156  0764  00BB               	movwf	waitFlag@flag_judge+1
  4157  0765  0870               	movf	?_getbit,w
  4158  0766  00BA               	movwf	waitFlag@flag_judge
  4159                           
  4160                           ;decode_AX25.c: 238: buf = buf >> 1;
  4161  0767  083C               	movf	waitFlag@buf,w
  4162  0768  00F6               	movwf	??_waitFlag
  4163  0769  1003               	clrc
  4164  076A  0C76               	rrf	??_waitFlag,w
  4165  076B  00F7               	movwf	??_waitFlag+1
  4166  076C  0877               	movf	??_waitFlag+1,w
  4167  076D  00BC               	movwf	waitFlag@buf
  4168                           
  4169                           ;decode_AX25.c: 240: buf = buf | 0x00;
  4170  076E  083A               	movf	waitFlag@flag_judge,w
  4171  076F  043B               	iorwf	waitFlag@flag_judge+1,w
  4172  0770  1903               	btfsc	3,2
  4173  0771  2F77               	goto	l3071
  4174                           
  4175                           ;decode_AX25.c: 242: buf = buf | 0x80;
  4176                           
  4177                           ;decode_AX25.c: 241: }else{
  4178  0772  083C               	movf	waitFlag@buf,w
  4179  0773  3880               	iorlw	128
  4180  0774  00F6               	movwf	??_waitFlag
  4181  0775  0876               	movf	??_waitFlag,w
  4182  0776  00BC               	movwf	waitFlag@buf
  4183  0777                     l3071:	
  4184  0777  3001               	movlw	1
  4185  0778  07B8               	addwf	waitFlag@j_130,f
  4186  0779  1803               	skipnc
  4187  077A  0AB9               	incf	waitFlag@j_130+1,f
  4188  077B  3000               	movlw	0
  4189  077C  07B9               	addwf	waitFlag@j_130+1,f
  4190  077D  3000               	movlw	0
  4191  077E  0239               	subwf	waitFlag@j_130+1,w
  4192  077F  3008               	movlw	8
  4193  0780  1903               	skipnz
  4194  0781  0238               	subwf	waitFlag@j_130,w
  4195  0782  1C03               	skipc
  4196  0783  2F5C               	goto	l3061
  4197  0784                     l3075:	
  4198                           
  4199                           ;decode_AX25.c: 243: }
  4200                           ;decode_AX25.c: 244: }
  4201                           ;decode_AX25.c: 245: if(buf == ("JQ1ZHX"[5] << 1)){
  4202  0784  3010               	movlw	low (((STR_7+5)-__stringbase)| (0+32768))
  4203  0785  0084               	movwf	4
  4204  0786  120A  158A  2000  120A  118A  	fcall	stringdir
  4205  078B  00F6               	movwf	??_waitFlag
  4206  078C  01F7               	clrf	??_waitFlag+1
  4207  078D  1003               	clrc
  4208  078E  0DF6               	rlf	??_waitFlag,f
  4209  078F  0DF7               	rlf	??_waitFlag+1,f
  4210  0790  083C               	movf	waitFlag@buf,w
  4211  0791  00F8               	movwf	??_waitFlag+2
  4212  0792  01F9               	clrf	??_waitFlag+3
  4213  0793  0877               	movf	??_waitFlag+1,w
  4214  0794  0679               	xorwf	??_waitFlag+3,w
  4215  0795  1D03               	skipz
  4216  0796  2F99               	goto	u2675
  4217  0797  0876               	movf	??_waitFlag,w
  4218  0798  0678               	xorwf	??_waitFlag+2,w
  4219  0799                     u2675:	
  4220  0799  1D03               	skipz
  4221  079A  2FB0               	goto	l3093
  4222                           
  4223                           ;decode_AX25.c: 246: dPacket[dPacketnum] = buf;
  4224  079B  083C               	movf	waitFlag@buf,w
  4225  079C  00F6               	movwf	??_waitFlag
  4226  079D  0866               	movf	_dPacketnum,w
  4227  079E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4228  079F  0084               	movwf	4
  4229  07A0  0876               	movf	??_waitFlag,w
  4230  07A1  1783               	bsf	3,7	;select IRP bank3
  4231  07A2  0080               	movwf	0
  4232                           
  4233                           ;decode_AX25.c: 247: dPacketnum ++;
  4234  07A3  3001               	movlw	1
  4235  07A4  07E6               	addwf	_dPacketnum,f
  4236  07A5  1803               	skipnc
  4237  07A6  0AE7               	incf	_dPacketnum+1,f
  4238  07A7  3000               	movlw	0
  4239  07A8  07E7               	addwf	_dPacketnum+1,f
  4240                           
  4241                           ;decode_AX25.c: 248: rcv_state ++;
  4242  07A9  3001               	movlw	1
  4243  07AA  07EA               	addwf	_rcv_state,f
  4244  07AB  1803               	skipnc
  4245  07AC  0AEB               	incf	_rcv_state+1,f
  4246  07AD  3000               	movlw	0
  4247  07AE  07EB               	addwf	_rcv_state+1,f
  4248                           
  4249                           ;decode_AX25.c: 249: }else{
  4250  07AF  2B2F               	goto	l3095
  4251  07B0                     l3093:	
  4252                           ;decode_AX25.c: 268: }
  4253                           ;decode_AX25.c: 269: }else{
  4254                           
  4255                           ;decode_AX25.c: 267: rcv_state = 0;
  4256                           
  4257                           ;decode_AX25.c: 266: dPacketnum = 0;
  4258                           
  4259                           ;decode_AX25.c: 264: }
  4260                           ;decode_AX25.c: 265: }else{
  4261                           
  4262                           ;decode_AX25.c: 263: rcv_state = 0;
  4263                           
  4264                           ;decode_AX25.c: 262: dPacketnum = 0;
  4265                           
  4266                           ;decode_AX25.c: 260: }
  4267                           ;decode_AX25.c: 261: }else{
  4268                           
  4269                           ;decode_AX25.c: 259: rcv_state = 0;
  4270                           
  4271                           ;decode_AX25.c: 258: dPacketnum = 0;
  4272                           
  4273                           ;decode_AX25.c: 256: }
  4274                           ;decode_AX25.c: 257: }else{
  4275                           
  4276                           ;decode_AX25.c: 255: rcv_state = 0;
  4277                           
  4278                           ;decode_AX25.c: 254: dPacketnum = 0;
  4279                           
  4280                           ;decode_AX25.c: 252: }
  4281                           ;decode_AX25.c: 253: }else{
  4282                           
  4283                           ;decode_AX25.c: 251: rcv_state = 0;
  4284                           
  4285                           ;decode_AX25.c: 250: dPacketnum = 0;
  4286                           
  4287                           
  4288                           ;decode_AX25.c: 270: dPacketnum = 0;
  4289  07B0  01E6               	clrf	_dPacketnum
  4290  07B1  01E7               	clrf	_dPacketnum+1
  4291  07B2  2B2D               	goto	L6
  4292  07B3                     __end_of_waitFlag:	
  4293                           
  4294                           	psect	text5
  4295  0BF6                     __ptext5:	
  4296 ;; *************** function _getdata *****************
  4297 ;; Defined at:
  4298 ;;		line 278 in file "decode_AX25.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;		None
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;  dbitstatus      2    4[BANK0 ] unsigned int 
  4303 ;;  dstuff          2    2[BANK0 ] unsigned int 
  4304 ;;  bufstore_cou    2    0[BANK0 ] unsigned int 
  4305 ;;  buf             1    6[BANK0 ] unsigned char 
  4306 ;;  dammy_data      1    0        unsigned char 
  4307 ;; Return value:  Size  Location     Type
  4308 ;;                  1    wreg      void 
  4309 ;; Registers used:
  4310 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4311 ;; Tracked objects:
  4312 ;;		On entry : 0/0
  4313 ;;		On exit  : 0/0
  4314 ;;		Unchanged: 0/0
  4315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4316 ;;      Params:         0       0       0       0       0
  4317 ;;      Locals:         0       7       0       0       0
  4318 ;;      Temps:          2       0       0       0       0
  4319 ;;      Totals:         2       7       0       0       0
  4320 ;;Total ram usage:        9 bytes
  4321 ;; Hardware stack levels used:    1
  4322 ;; Hardware stack levels required when called:    1
  4323 ;; This function calls:
  4324 ;;		_getbit
  4325 ;; This function is called by:
  4326 ;;		_ReceivePacket_data
  4327 ;;		_ReceivePacket
  4328 ;; This function uses a non-reentrant model
  4329 ;;
  4330                           
  4331                           
  4332                           ;psect for function _getdata
  4333  0BF6                     _getdata:	
  4334                           
  4335                           ;decode_AX25.c: 279: UBYTE buf = 0x00;
  4336                           
  4337                           ;incstack = 0
  4338                           ; Regs used in _getdata: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4339  0BF6  1283               	bcf	3,5	;RP0=0, select bank0
  4340  0BF7  1303               	bcf	3,6	;RP1=0, select bank0
  4341  0BF8  01A6               	clrf	getdata@buf
  4342                           
  4343                           ;decode_AX25.c: 280: UINT dstuff = 0;
  4344  0BF9  01A2               	clrf	getdata@dstuff
  4345  0BFA  01A3               	clrf	getdata@dstuff+1
  4346                           
  4347                           ;decode_AX25.c: 281: UBYTE dammy_data;
  4348                           ;decode_AX25.c: 282: UINT bufstore_counter = 0;
  4349  0BFB  01A0               	clrf	getdata@bufstore_counter
  4350  0BFC  01A1               	clrf	getdata@bufstore_counter+1
  4351                           
  4352                           ;decode_AX25.c: 283: UINT dbitstatus = 0;
  4353  0BFD  01A4               	clrf	getdata@dbitstatus
  4354  0BFE  01A5               	clrf	getdata@dbitstatus+1
  4355  0BFF                     l3129:	
  4356                           ;decode_AX25.c: 285: while(rcv_state == 2){
  4357                           
  4358  0BFF  3002               	movlw	2
  4359  0C00  066A               	xorwf	_rcv_state,w
  4360  0C01  046B               	iorwf	_rcv_state+1,w
  4361  0C02  1D03               	btfss	3,2
  4362  0C03  0008               	return
  4363                           
  4364                           ;decode_AX25.c: 286: dbitstatus = getbit();
  4365  0C04  120A  158A  2296  120A  158A  	fcall	_getbit
  4366  0C09  0871               	movf	?_getbit+1,w
  4367  0C0A  1283               	bcf	3,5	;RP0=0, select bank0
  4368  0C0B  1303               	bcf	3,6	;RP1=0, select bank0
  4369  0C0C  00A5               	movwf	getdata@dbitstatus+1
  4370  0C0D  0870               	movf	?_getbit,w
  4371  0C0E  00A4               	movwf	getdata@dbitstatus
  4372                           
  4373                           ;decode_AX25.c: 287: if(dstuff == 5){
  4374  0C0F  3005               	movlw	5
  4375  0C10  0622               	xorwf	getdata@dstuff,w
  4376  0C11  0423               	iorwf	getdata@dstuff+1,w
  4377  0C12  1D03               	btfss	3,2
  4378  0C13  2C22               	goto	l3111
  4379                           
  4380                           ;decode_AX25.c: 288: if(dbitstatus == 1){
  4381  0C14  0324               	decf	getdata@dbitstatus,w
  4382  0C15  0425               	iorwf	getdata@dbitstatus+1,w
  4383  0C16  1D03               	btfss	3,2
  4384  0C17  2C1F               	goto	l3109
  4385                           
  4386                           ;decode_AX25.c: 289: rcv_state ++;
  4387  0C18  3001               	movlw	1
  4388  0C19  07EA               	addwf	_rcv_state,f
  4389  0C1A  1803               	skipnc
  4390  0C1B  0AEB               	incf	_rcv_state+1,f
  4391  0C1C  3000               	movlw	0
  4392  0C1D  07EB               	addwf	_rcv_state+1,f
  4393                           
  4394                           ;decode_AX25.c: 290: break;
  4395  0C1E  0008               	return
  4396  0C1F                     l3109:	
  4397                           ;decode_AX25.c: 291: }else{
  4398                           
  4399                           
  4400                           ;decode_AX25.c: 292: dstuff = 0;
  4401  0C1F  01A2               	clrf	getdata@dstuff
  4402  0C20  01A3               	clrf	getdata@dstuff+1
  4403                           
  4404                           ;decode_AX25.c: 293: }
  4405                           ;decode_AX25.c: 294: }else{
  4406  0C21  2BFF               	goto	l3129
  4407  0C22                     l3111:	
  4408                           
  4409                           ;decode_AX25.c: 295: buf = buf >> 1;
  4410  0C22  0826               	movf	getdata@buf,w
  4411  0C23  00F6               	movwf	??_getdata
  4412  0C24  1003               	clrc
  4413  0C25  0C76               	rrf	??_getdata,w
  4414  0C26  00F7               	movwf	??_getdata+1
  4415  0C27  0877               	movf	??_getdata+1,w
  4416  0C28  00A6               	movwf	getdata@buf
  4417                           
  4418                           ;decode_AX25.c: 297: buf = buf | 0x00;
  4419  0C29  0824               	movf	getdata@dbitstatus,w
  4420  0C2A  0425               	iorwf	getdata@dbitstatus+1,w
  4421  0C2B  1D03               	btfss	3,2
  4422  0C2C  2C30               	goto	l3115
  4423                           
  4424                           ;decode_AX25.c: 298: dstuff = 0;
  4425  0C2D  01A2               	clrf	getdata@dstuff
  4426  0C2E  01A3               	clrf	getdata@dstuff+1
  4427                           
  4428                           ;decode_AX25.c: 299: }else{
  4429  0C2F  2C3B               	goto	l3119
  4430  0C30                     l3115:	
  4431                           
  4432                           ;decode_AX25.c: 300: buf = buf | 0x80;
  4433  0C30  0826               	movf	getdata@buf,w
  4434  0C31  3880               	iorlw	128
  4435  0C32  00F6               	movwf	??_getdata
  4436  0C33  0876               	movf	??_getdata,w
  4437  0C34  00A6               	movwf	getdata@buf
  4438                           
  4439                           ;decode_AX25.c: 301: dstuff ++;
  4440  0C35  3001               	movlw	1
  4441  0C36  07A2               	addwf	getdata@dstuff,f
  4442  0C37  1803               	skipnc
  4443  0C38  0AA3               	incf	getdata@dstuff+1,f
  4444  0C39  3000               	movlw	0
  4445  0C3A  07A3               	addwf	getdata@dstuff+1,f
  4446  0C3B                     l3119:	
  4447                           
  4448                           ;decode_AX25.c: 302: }
  4449                           ;decode_AX25.c: 303: bufstore_counter ++;
  4450  0C3B  3001               	movlw	1
  4451  0C3C  07A0               	addwf	getdata@bufstore_counter,f
  4452  0C3D  1803               	skipnc
  4453  0C3E  0AA1               	incf	getdata@bufstore_counter+1,f
  4454  0C3F  3000               	movlw	0
  4455  0C40  07A1               	addwf	getdata@bufstore_counter+1,f
  4456                           
  4457                           ;decode_AX25.c: 304: if(bufstore_counter == 8){
  4458  0C41  3008               	movlw	8
  4459  0C42  0620               	xorwf	getdata@bufstore_counter,w
  4460  0C43  0421               	iorwf	getdata@bufstore_counter+1,w
  4461  0C44  1D03               	btfss	3,2
  4462  0C45  2BFF               	goto	l3129
  4463                           
  4464                           ;decode_AX25.c: 305: bufstore_counter = 0;
  4465  0C46  01A0               	clrf	getdata@bufstore_counter
  4466  0C47  01A1               	clrf	getdata@bufstore_counter+1
  4467                           
  4468                           ;decode_AX25.c: 306: dPacket[dPacketnum] = buf;
  4469  0C48  0826               	movf	getdata@buf,w
  4470  0C49  00F6               	movwf	??_getdata
  4471  0C4A  0866               	movf	_dPacketnum,w
  4472  0C4B  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4473  0C4C  0084               	movwf	4
  4474  0C4D  0876               	movf	??_getdata,w
  4475  0C4E  1783               	bsf	3,7	;select IRP bank3
  4476  0C4F  0080               	movwf	0
  4477                           
  4478                           ;decode_AX25.c: 307: dPacketnum ++;
  4479  0C50  3001               	movlw	1
  4480  0C51  07E6               	addwf	_dPacketnum,f
  4481  0C52  1803               	skipnc
  4482  0C53  0AE7               	incf	_dPacketnum+1,f
  4483  0C54  3000               	movlw	0
  4484  0C55  07E7               	addwf	_dPacketnum+1,f
  4485  0C56  2BFF               	goto	l3129
  4486  0C57                     __end_of_getdata:	
  4487                           
  4488                           	psect	text6
  4489  0A96                     __ptext6:	
  4490 ;; *************** function _getbit *****************
  4491 ;; Defined at:
  4492 ;;		line 40 in file "decode_AX25.c"
  4493 ;; Parameters:    Size  Location     Type
  4494 ;;		None
  4495 ;; Auto vars:     Size  Location     Type
  4496 ;;  i               2    4[COMMON] unsigned int 
  4497 ;; Return value:  Size  Location     Type
  4498 ;;                  2    0[COMMON] unsigned int 
  4499 ;; Registers used:
  4500 ;;		wreg, status,2, status,0
  4501 ;; Tracked objects:
  4502 ;;		On entry : 0/0
  4503 ;;		On exit  : 0/0
  4504 ;;		Unchanged: 0/0
  4505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4506 ;;      Params:         2       0       0       0       0
  4507 ;;      Locals:         2       0       0       0       0
  4508 ;;      Temps:          2       0       0       0       0
  4509 ;;      Totals:         6       0       0       0       0
  4510 ;;Total ram usage:        6 bytes
  4511 ;; Hardware stack levels used:    1
  4512 ;; This function calls:
  4513 ;;		Nothing
  4514 ;; This function is called by:
  4515 ;;		_waitFlag
  4516 ;;		_getdata
  4517 ;;		_conv_DI_UARTRX
  4518 ;; This function uses a non-reentrant model
  4519 ;;
  4520                           
  4521                           
  4522                           ;psect for function _getbit
  4523  0A96                     _getbit:	
  4524                           
  4525                           ;decode_AX25.c: 41: static UINT oldbit;
  4526                           ;decode_AX25.c: 42: oldbit = RB5;
  4527                           
  4528                           ;incstack = 0
  4529                           ; Regs used in _getbit: [wreg+status,2+status,0]
  4530  0A96  1003               	clrc
  4531  0A97  1283               	bcf	3,5	;RP0=0, select bank0
  4532  0A98  1303               	bcf	3,6	;RP1=0, select bank0
  4533  0A99  1A86               	btfsc	6,5	;volatile
  4534  0A9A  1403               	setc
  4535  0A9B  3000               	movlw	0
  4536  0A9C  1803               	skipnc
  4537  0A9D  3001               	movlw	1
  4538  0A9E  00F2               	movwf	??_getbit
  4539  0A9F  01F3               	clrf	??_getbit+1
  4540  0AA0  0872               	movf	??_getbit,w
  4541  0AA1  1683               	bsf	3,5	;RP0=1, select bank1
  4542  0AA2  1303               	bcf	3,6	;RP1=0, select bank1
  4543  0AA3  00E7               	movwf	getbit@oldbit^(0+128)
  4544  0AA4  0873               	movf	??_getbit+1,w
  4545  0AA5  00E8               	movwf	(getbit@oldbit+1)^(0+128)
  4546                           
  4547                           ;decode_AX25.c: 43: for(UINT i=0;i<62;i++){
  4548  0AA6  01F4               	clrf	getbit@i
  4549  0AA7  01F5               	clrf	getbit@i+1
  4550  0AA8  3000               	movlw	0
  4551  0AA9  0275               	subwf	getbit@i+1,w
  4552  0AAA  303E               	movlw	62
  4553  0AAB  1903               	skipnz
  4554  0AAC  0274               	subwf	getbit@i,w
  4555  0AAD  1803               	btfsc	3,0
  4556  0AAE  2ADD               	goto	l2575
  4557                           
  4558                           ;decode_AX25.c: 44: if(RB5 != oldbit){
  4559  0AAF  1003               	clrc
  4560  0AB0                     L7:	
  4561  0AB0  1283               	bcf	3,5	;RP0=0, select bank0
  4562  0AB1  1A86               	btfsc	6,5	;volatile
  4563  0AB2  1403               	setc
  4564  0AB3  3000               	movlw	0
  4565  0AB4  1803               	skipnc
  4566  0AB5  3001               	movlw	1
  4567  0AB6  00F2               	movwf	??_getbit
  4568  0AB7  01F3               	clrf	??_getbit+1
  4569  0AB8  1683               	bsf	3,5	;RP0=1, select bank1
  4570  0AB9  1303               	bcf	3,6	;RP1=0, select bank1
  4571  0ABA  0868               	movf	(getbit@oldbit+1)^(0+128),w
  4572  0ABB  0673               	xorwf	??_getbit+1,w
  4573  0ABC  1D03               	skipz
  4574  0ABD  2AC0               	goto	u1905
  4575  0ABE  0867               	movf	getbit@oldbit^(0+128),w
  4576  0ABF  0672               	xorwf	??_getbit,w
  4577  0AC0                     u1905:	
  4578  0AC0  1903               	skipnz
  4579  0AC1  2AD0               	goto	l2573
  4580                           
  4581                           ;decode_AX25.c: 45: _delay((unsigned long)((400)*(10000000/4000000.0)));
  4582  0AC2  30F9               	movlw	249
  4583  0AC3  00F2               	movwf	??_getbit
  4584  0AC4                     u3707:	
  4585  0AC4  0000               	nop
  4586  0AC5  0BF2               	decfsz	??_getbit,f
  4587  0AC6  2AC4               	goto	u3707
  4588  0AC7  2AC8               	nop2	;nop
  4589  0AC8  0000               	nop
  4590                           
  4591                           ;decode_AX25.c: 46: RC2= 1- RC2;
  4592  0AC9  3004               	movlw	4
  4593  0ACA  1283               	bcf	3,5	;RP0=0, select bank0
  4594  0ACB  1303               	bcf	3,6	;RP1=0, select bank0
  4595  0ACC  0687               	xorwf	7,f
  4596                           
  4597                           ;decode_AX25.c: 47: return 0;
  4598  0ACD  01F0               	clrf	?_getbit
  4599  0ACE  01F1               	clrf	?_getbit+1
  4600  0ACF  0008               	return
  4601  0AD0                     l2573:	
  4602  0AD0  3001               	movlw	1
  4603  0AD1  07F4               	addwf	getbit@i,f
  4604  0AD2  1803               	skipnc
  4605  0AD3  0AF5               	incf	getbit@i+1,f
  4606  0AD4  3000               	movlw	0
  4607  0AD5  07F5               	addwf	getbit@i+1,f
  4608  0AD6  3000               	movlw	0
  4609  0AD7  0275               	subwf	getbit@i+1,w
  4610  0AD8  303E               	movlw	62
  4611  0AD9  1903               	skipnz
  4612  0ADA  0274               	subwf	getbit@i,w
  4613  0ADB  1C03               	skipc
  4614  0ADC  2AB0               	goto	L7
  4615  0ADD                     l2575:	
  4616                           
  4617                           ;decode_AX25.c: 48: }
  4618                           ;decode_AX25.c: 49: }
  4619                           ;decode_AX25.c: 50: return 1;
  4620  0ADD  3001               	movlw	1
  4621  0ADE  00F0               	movwf	?_getbit
  4622  0ADF  3000               	movlw	0
  4623  0AE0  00F1               	movwf	?_getbit+1
  4624  0AE1  0008               	return
  4625  0AE2                     __end_of_getbit:	
  4626                           
  4627                           	psect	text7
  4628  002A                     __ptext7:	
  4629 ;; *************** function _fcscheck *****************
  4630 ;; Defined at:
  4631 ;;		line 313 in file "decode_AX25.c"
  4632 ;; Parameters:    Size  Location     Type
  4633 ;;		None
  4634 ;; Auto vars:     Size  Location     Type
  4635 ;;  i               2    7[COMMON] unsigned int 
  4636 ;;  i               2    5[COMMON] unsigned int 
  4637 ;;  byte            1    9[COMMON] unsigned char 
  4638 ;;  bt              1    4[COMMON] unsigned char 
  4639 ;; Return value:  Size  Location     Type
  4640 ;;                  2    0[COMMON] unsigned int 
  4641 ;; Registers used:
  4642 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4643 ;; Tracked objects:
  4644 ;;		On entry : 0/0
  4645 ;;		On exit  : 0/0
  4646 ;;		Unchanged: 0/0
  4647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4648 ;;      Params:         2       0       0       0       0
  4649 ;;      Locals:         6       0       0       0       0
  4650 ;;      Temps:          2       0       0       0       0
  4651 ;;      Totals:        10       0       0       0       0
  4652 ;;Total ram usage:       10 bytes
  4653 ;; Hardware stack levels used:    1
  4654 ;; This function calls:
  4655 ;;		Nothing
  4656 ;; This function is called by:
  4657 ;;		_ReceivePacket_data
  4658 ;;		_ReceivePacket
  4659 ;; This function uses a non-reentrant model
  4660 ;;
  4661                           
  4662                           
  4663                           ;psect for function _fcscheck
  4664  002A                     _fcscheck:	
  4665                           
  4666                           ;decode_AX25.c: 314: UBYTE bt,byte;
  4667                           ;decode_AX25.c: 315: dfcslo = dfcshi = 0xff;
  4668                           
  4669                           ;incstack = 0
  4670                           ; Regs used in _fcscheck: [wreg-fsr0h+status,2+status,0]
  4671  002A  30FF               	movlw	255
  4672  002B  1283               	bcf	3,5	;RP0=0, select bank0
  4673  002C  1303               	bcf	3,6	;RP1=0, select bank0
  4674  002D  00EC               	movwf	_dfcshi
  4675  002E  00F2               	movwf	??_fcscheck
  4676  002F  0872               	movf	??_fcscheck,w
  4677  0030  00ED               	movwf	_dfcslo
  4678                           
  4679                           ;decode_AX25.c: 316: while(rcv_state == 3){
  4680  0031  3003               	movlw	3
  4681  0032  066A               	xorwf	_rcv_state,w
  4682  0033  046B               	iorwf	_rcv_state+1,w
  4683  0034  1D03               	btfss	3,2
  4684  0035  0008               	return
  4685                           
  4686                           ;decode_AX25.c: 317: for(UINT i=0;i<dPacketnum-2;i++){
  4687  0036  01F5               	clrf	fcscheck@i
  4688  0037  01F6               	clrf	fcscheck@i+1
  4689  0038                     l3157:	
  4690  0038  0866               	movf	_dPacketnum,w
  4691  0039  3EFE               	addlw	254
  4692  003A  00F2               	movwf	??_fcscheck
  4693  003B  0867               	movf	_dPacketnum+1,w
  4694  003C  1803               	skipnc
  4695  003D  3E01               	addlw	1
  4696  003E  3EFF               	addlw	255
  4697  003F  00F3               	movwf	??_fcscheck+1
  4698  0040  0873               	movf	??_fcscheck+1,w
  4699  0041  0276               	subwf	fcscheck@i+1,w
  4700  0042  1D03               	skipz
  4701  0043  2846               	goto	u2775
  4702  0044  0872               	movf	??_fcscheck,w
  4703  0045  0275               	subwf	fcscheck@i,w
  4704  0046                     u2775:	
  4705  0046  1803               	btfsc	3,0
  4706  0047  2891               	goto	l272
  4707                           
  4708                           ;decode_AX25.c: 318: byte = dPacket[i];
  4709  0048  0875               	movf	fcscheck@i,w
  4710  0049  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4711  004A  0084               	movwf	4
  4712  004B  1783               	bsf	3,7	;select IRP bank3
  4713  004C  0800               	movf	0,w
  4714  004D  00F2               	movwf	??_fcscheck
  4715  004E  0872               	movf	??_fcscheck,w
  4716  004F  00F9               	movwf	fcscheck@byte
  4717                           
  4718                           ;decode_AX25.c: 319: for(UINT i=0;i<8;i++){
  4719  0050  01F7               	clrf	fcscheck@i_142
  4720  0051  01F8               	clrf	fcscheck@i_142+1
  4721  0052  3000               	movlw	0
  4722  0053  0278               	subwf	fcscheck@i_142+1,w
  4723  0054  3008               	movlw	8
  4724  0055  1903               	skipnz
  4725  0056  0277               	subwf	fcscheck@i_142,w
  4726  0057  1803               	btfsc	3,0
  4727  0058  288A               	goto	l3155
  4728  0059                     l3143:	
  4729                           
  4730                           ;decode_AX25.c: 320: bt = byte & 0x01;
  4731  0059  0879               	movf	fcscheck@byte,w
  4732  005A  3901               	andlw	1
  4733  005B  00F2               	movwf	??_fcscheck
  4734  005C  0872               	movf	??_fcscheck,w
  4735  005D  00F4               	movwf	fcscheck@bt
  4736  005E  1003               	bcf	3,0	;# 
  4737  005F  0CEC               	rrf	_dfcshi,f	;# 
  4738  0060  0CED               	rrf	_dfcslo,f	;# 
  4739                           
  4740                           ;decode_AX25.c: 326: if(((STATUS & 0x01)^bt) == 0x01){
  4741  0061  3001               	movlw	1
  4742  0062  1283               	bcf	3,5	;RP0=0, select bank0
  4743  0063  1303               	bcf	3,6	;RP1=0, select bank0
  4744  0064  0503               	andwf	3,w	;volatile
  4745  0065  00F2               	movwf	??_fcscheck
  4746  0066  0874               	movf	fcscheck@bt,w
  4747  0067  0672               	xorwf	??_fcscheck,w
  4748  0068  00F3               	movwf	??_fcscheck+1
  4749  0069  0373               	decf	??_fcscheck+1,w
  4750  006A  1D03               	btfss	3,2
  4751  006B  2876               	goto	l3149
  4752                           
  4753                           ;decode_AX25.c: 327: dfcshi = dfcshi ^ 0x84;
  4754  006C  086C               	movf	_dfcshi,w
  4755  006D  3A84               	xorlw	132
  4756  006E  00F2               	movwf	??_fcscheck
  4757  006F  0872               	movf	??_fcscheck,w
  4758  0070  00EC               	movwf	_dfcshi
  4759                           
  4760                           ;decode_AX25.c: 328: dfcslo = dfcslo ^ 0x08;
  4761  0071  086D               	movf	_dfcslo,w
  4762  0072  3A08               	xorlw	8
  4763  0073  00F2               	movwf	??_fcscheck
  4764  0074  0872               	movf	??_fcscheck,w
  4765  0075  00ED               	movwf	_dfcslo
  4766  0076                     l3149:	
  4767                           
  4768                           ;decode_AX25.c: 329: }
  4769                           ;decode_AX25.c: 330: byte = byte >> 1;
  4770  0076  0879               	movf	fcscheck@byte,w
  4771  0077  00F2               	movwf	??_fcscheck
  4772  0078  1003               	clrc
  4773  0079  0C72               	rrf	??_fcscheck,w
  4774  007A  00F3               	movwf	??_fcscheck+1
  4775  007B  0873               	movf	??_fcscheck+1,w
  4776  007C  00F9               	movwf	fcscheck@byte
  4777  007D  3001               	movlw	1
  4778  007E  07F7               	addwf	fcscheck@i_142,f
  4779  007F  1803               	skipnc
  4780  0080  0AF8               	incf	fcscheck@i_142+1,f
  4781  0081  3000               	movlw	0
  4782  0082  07F8               	addwf	fcscheck@i_142+1,f
  4783  0083  3000               	movlw	0
  4784  0084  0278               	subwf	fcscheck@i_142+1,w
  4785  0085  3008               	movlw	8
  4786  0086  1903               	skipnz
  4787  0087  0277               	subwf	fcscheck@i_142,w
  4788  0088  1C03               	skipc
  4789  0089  2859               	goto	l3143
  4790  008A                     l3155:	
  4791  008A  3001               	movlw	1
  4792  008B  07F5               	addwf	fcscheck@i,f
  4793  008C  1803               	skipnc
  4794  008D  0AF6               	incf	fcscheck@i+1,f
  4795  008E  3000               	movlw	0
  4796  008F  07F6               	addwf	fcscheck@i+1,f
  4797  0090  2838               	goto	l3157
  4798  0091                     l272:	
  4799                           
  4800                           ;decode_AX25.c: 331: }
  4801                           ;decode_AX25.c: 332: }
  4802                           ;decode_AX25.c: 333: dfcslo = dfcslo ^ 0xff;
  4803  0091  09ED               	comf	_dfcslo,f
  4804                           
  4805                           ;decode_AX25.c: 334: dfcshi = dfcshi ^ 0xff;
  4806  0092  09EC               	comf	_dfcshi,f
  4807                           
  4808                           ;decode_AX25.c: 337: if((dPacket[dPacketnum-2] == dfcslo) && (dPacket[dPacketnum-1] == d
      +                          fcshi)){
  4809  0093  0866               	movf	_dPacketnum,w
  4810  0094  3EFE               	addlw	254
  4811  0095  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4812  0096  0084               	movwf	4
  4813  0097  1783               	bsf	3,7	;select IRP bank3
  4814  0098  0800               	movf	0,w
  4815  0099  066D               	xorwf	_dfcslo,w
  4816  009A  1D03               	skipz
  4817  009B  28A9               	goto	l3169
  4818  009C  0866               	movf	_dPacketnum,w
  4819  009D  3EFF               	addlw	255
  4820  009E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4821  009F  0084               	movwf	4
  4822  00A0  0800               	movf	0,w
  4823  00A1  066C               	xorwf	_dfcshi,w
  4824  00A2  1D03               	skipz
  4825  00A3  28A9               	goto	l3169
  4826                           
  4827                           ;decode_AX25.c: 342: return 1;
  4828  00A4  3001               	movlw	1
  4829  00A5  00F0               	movwf	?_fcscheck
  4830  00A6  3000               	movlw	0
  4831  00A7  00F1               	movwf	?_fcscheck+1
  4832  00A8  0008               	return
  4833  00A9                     l3169:	
  4834                           ;decode_AX25.c: 343: }else{
  4835                           
  4836                           
  4837                           ;decode_AX25.c: 348: return 0;
  4838  00A9  01F0               	clrf	?_fcscheck
  4839  00AA  01F1               	clrf	?_fcscheck+1
  4840  00AB  0008               	return
  4841  00AC                     __end_of_fcscheck:	
  4842                           
  4843                           	psect	text8
  4844  17EE                     __ptext8:	
  4845 ;; *************** function _NM_waddress *****************
  4846 ;; Defined at:
  4847 ;;		line 71 in file "UART.c"
  4848 ;; Parameters:    Size  Location     Type
  4849 ;;  NM_wad_heade    1    wreg     unsigned char 
  4850 ;;  whigh_addres    1    1[COMMON] unsigned char 
  4851 ;;  wlow_address    1    2[COMMON] unsigned char 
  4852 ;; Auto vars:     Size  Location     Type
  4853 ;;  NM_wad_heade    1    3[COMMON] unsigned char 
  4854 ;; Return value:  Size  Location     Type
  4855 ;;                  1    wreg      void 
  4856 ;; Registers used:
  4857 ;;		wreg, status,2, status,0, pclath, cstack
  4858 ;; Tracked objects:
  4859 ;;		On entry : 0/0
  4860 ;;		On exit  : 0/0
  4861 ;;		Unchanged: 0/0
  4862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4863 ;;      Params:         2       0       0       0       0
  4864 ;;      Locals:         1       0       0       0       0
  4865 ;;      Temps:          0       0       0       0       0
  4866 ;;      Totals:         3       0       0       0       0
  4867 ;;Total ram usage:        3 bytes
  4868 ;; Hardware stack levels used:    1
  4869 ;; Hardware stack levels required when called:    1
  4870 ;; This function calls:
  4871 ;;		_putch
  4872 ;; This function is called by:
  4873 ;;		_main
  4874 ;; This function uses a non-reentrant model
  4875 ;;
  4876                           
  4877                           
  4878                           ;psect for function _NM_waddress
  4879  17EE                     _NM_waddress:	
  4880                           
  4881                           ;incstack = 0
  4882                           ; Regs used in _NM_waddress: [wreg+status,2+status,0+pclath+cstack]
  4883                           ;NM_waddress@NM_wad_header stored from wreg
  4884  17EE  00F3               	movwf	NM_waddress@NM_wad_header
  4885                           
  4886                           ;UART.c: 72: putch(NM_wad_header);
  4887  17EF  0873               	movf	NM_waddress@NM_wad_header,w
  4888  17F0  160A  118A  27C4  160A  118A  	fcall	_putch
  4889                           
  4890                           ;UART.c: 73: putch(whigh_address);
  4891  17F5  0871               	movf	NM_waddress@whigh_address,w
  4892  17F6  160A  118A  27C4  160A  118A  	fcall	_putch
  4893                           
  4894                           ;UART.c: 74: putch(wlow_address);
  4895  17FB  0872               	movf	NM_waddress@wlow_address,w
  4896  17FC  160A  118A  27C4   	fcall	_putch
  4897  17FF  0008               	return
  4898  1800                     __end_of_NM_waddress:	
  4899                           
  4900                           	psect	text9
  4901  17C4                     __ptext9:	
  4902 ;; *************** function _putch *****************
  4903 ;; Defined at:
  4904 ;;		line 38 in file "UART.c"
  4905 ;; Parameters:    Size  Location     Type
  4906 ;;  byte            1    wreg     unsigned char 
  4907 ;; Auto vars:     Size  Location     Type
  4908 ;;  byte            1    0[COMMON] unsigned char 
  4909 ;; Return value:  Size  Location     Type
  4910 ;;                  1    wreg      void 
  4911 ;; Registers used:
  4912 ;;		wreg
  4913 ;; Tracked objects:
  4914 ;;		On entry : 0/0
  4915 ;;		On exit  : 0/0
  4916 ;;		Unchanged: 0/0
  4917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4918 ;;      Params:         0       0       0       0       0
  4919 ;;      Locals:         1       0       0       0       0
  4920 ;;      Temps:          0       0       0       0       0
  4921 ;;      Totals:         1       0       0       0       0
  4922 ;;Total ram usage:        1 bytes
  4923 ;; Hardware stack levels used:    1
  4924 ;; This function calls:
  4925 ;;		Nothing
  4926 ;; This function is called by:
  4927 ;;		_NM_waddress
  4928 ;;		_printf
  4929 ;;		_putstr
  4930 ;;		_putcrlf
  4931 ;;		_put_error
  4932 ;;		_put_ok
  4933 ;;		_putAX25
  4934 ;;		_conv_DI_UARTRX
  4935 ;;		_test_Packetmaker
  4936 ;;		_EEPROM_Read
  4937 ;; This function uses a non-reentrant model
  4938 ;;
  4939                           
  4940                           
  4941                           ;psect for function _putch
  4942  17C4                     _putch:	
  4943                           
  4944                           ;incstack = 0
  4945                           ; Regs used in _putch: [wreg]
  4946                           ;putch@byte stored from wreg
  4947  17C4  00F0               	movwf	putch@byte
  4948  17C5                     l65:	
  4949                           ;UART.c: 39: while(!TXIF);
  4950                           
  4951  17C5  1283               	bcf	3,5	;RP0=0, select bank0
  4952  17C6  1303               	bcf	3,6	;RP1=0, select bank0
  4953  17C7  1E0C               	btfss	12,4	;volatile
  4954  17C8  2FC5               	goto	l65
  4955                           
  4956                           ;UART.c: 40: TXREG = byte;
  4957  17C9  0870               	movf	putch@byte,w
  4958  17CA  0099               	movwf	25	;volatile
  4959  17CB  0008               	return
  4960  17CC                     __end_of_putch:	
  4961                           
  4962                           	psect	text10
  4963  0823                     __ptext10:	
  4964 ;; *************** function _Init_WDT *****************
  4965 ;; Defined at:
  4966 ;;		line 5 in file "WDT.c"
  4967 ;; Parameters:    Size  Location     Type
  4968 ;;		None
  4969 ;; Auto vars:     Size  Location     Type
  4970 ;;		None
  4971 ;; Return value:  Size  Location     Type
  4972 ;;                  2  400[None  ] int 
  4973 ;; Registers used:
  4974 ;;		wreg, status,2, status,0
  4975 ;; Tracked objects:
  4976 ;;		On entry : 0/0
  4977 ;;		On exit  : 0/0
  4978 ;;		Unchanged: 0/0
  4979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4980 ;;      Params:         0       0       0       0       0
  4981 ;;      Locals:         0       0       0       0       0
  4982 ;;      Temps:          0       0       0       0       0
  4983 ;;      Totals:         0       0       0       0       0
  4984 ;;Total ram usage:        0 bytes
  4985 ;; Hardware stack levels used:    1
  4986 ;; This function calls:
  4987 ;;		Nothing
  4988 ;; This function is called by:
  4989 ;;		_main
  4990 ;; This function uses a non-reentrant model
  4991 ;;
  4992                           
  4993                           
  4994                           ;psect for function _Init_WDT
  4995  0823                     _Init_WDT:	
  4996                           
  4997                           ;WDT.c: 6: INTCONbits.GIE = 1;
  4998                           
  4999                           ;incstack = 0
  5000                           ; Regs used in _Init_WDT: [wreg+status,2+status,0]
  5001  0823  178B               	bsf	11,7	;volatile
  5002                           
  5003                           ;WDT.c: 7: INTCONbits.PEIE = 1;
  5004  0824  170B               	bsf	11,6	;volatile
  5005                           
  5006                           ;WDT.c: 9: PIR1bits.TMR1IF = 0;
  5007  0825  1283               	bcf	3,5	;RP0=0, select bank0
  5008  0826  1303               	bcf	3,6	;RP1=0, select bank0
  5009  0827  100C               	bcf	12,0	;volatile
  5010                           
  5011                           ;WDT.c: 10: PIE1bits.TMR1IE = 1;
  5012  0828  1683               	bsf	3,5	;RP0=1, select bank1
  5013  0829  1303               	bcf	3,6	;RP1=0, select bank1
  5014  082A  140C               	bsf	12,0	;volatile
  5015                           
  5016                           ;WDT.c: 13: T1CONbits.T1CKPS = 2;
  5017  082B  1283               	bcf	3,5	;RP0=0, select bank0
  5018  082C  1303               	bcf	3,6	;RP1=0, select bank0
  5019  082D  0810               	movf	16,w	;volatile
  5020  082E  39CF               	andlw	-49
  5021  082F  3820               	iorlw	32
  5022  0830  0090               	movwf	16	;volatile
  5023                           
  5024                           ;WDT.c: 14: TMR1 = (0xffff - 62500);
  5025  0831  300B               	movlw	11
  5026  0832  008F               	movwf	15	;volatile
  5027  0833  30DB               	movlw	219
  5028  0834  008E               	movwf	14	;volatile
  5029                           
  5030                           ;WDT.c: 16: T1CONbits.TMR1ON = 1;
  5031  0835  1410               	bsf	16,0	;volatile
  5032  0836  0008               	return
  5033  0837                     __end_of_Init_WDT:	
  5034                           
  5035                           	psect	text11
  5036  084C                     __ptext11:	
  5037 ;; *************** function _Init_SERIAL *****************
  5038 ;; Defined at:
  5039 ;;		line 5 in file "UART.c"
  5040 ;; Parameters:    Size  Location     Type
  5041 ;;		None
  5042 ;; Auto vars:     Size  Location     Type
  5043 ;;		None
  5044 ;; Return value:  Size  Location     Type
  5045 ;;                  1    wreg      void 
  5046 ;; Registers used:
  5047 ;;		wreg
  5048 ;; Tracked objects:
  5049 ;;		On entry : 0/0
  5050 ;;		On exit  : 0/0
  5051 ;;		Unchanged: 0/0
  5052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5053 ;;      Params:         0       0       0       0       0
  5054 ;;      Locals:         0       0       0       0       0
  5055 ;;      Temps:          0       0       0       0       0
  5056 ;;      Totals:         0       0       0       0       0
  5057 ;;Total ram usage:        0 bytes
  5058 ;; Hardware stack levels used:    1
  5059 ;; This function calls:
  5060 ;;		Nothing
  5061 ;; This function is called by:
  5062 ;;		_main
  5063 ;; This function uses a non-reentrant model
  5064 ;;
  5065                           
  5066                           
  5067                           ;psect for function _Init_SERIAL
  5068  084C                     _Init_SERIAL:	
  5069                           
  5070                           ;UART.c: 6: SPBRG = 10;
  5071                           
  5072                           ;incstack = 0
  5073                           ; Regs used in _Init_SERIAL: [wreg]
  5074  084C  300A               	movlw	10
  5075  084D  1683               	bsf	3,5	;RP0=1, select bank1
  5076  084E  1303               	bcf	3,6	;RP1=0, select bank1
  5077  084F  0099               	movwf	25	;volatile
  5078                           
  5079                           ;UART.c: 7: BRGH = 0;
  5080  0850  1118               	bcf	24,2	;volatile
  5081                           
  5082                           ;UART.c: 8: SYNC = 0;
  5083  0851  1218               	bcf	24,4	;volatile
  5084                           
  5085                           ;UART.c: 9: SPEN = 1;
  5086  0852  1283               	bcf	3,5	;RP0=0, select bank0
  5087  0853  1303               	bcf	3,6	;RP1=0, select bank0
  5088  0854  1798               	bsf	24,7	;volatile
  5089                           
  5090                           ;UART.c: 10: CREN = 1;
  5091  0855  1618               	bsf	24,4	;volatile
  5092                           
  5093                           ;UART.c: 11: SREN = 0;
  5094  0856  1298               	bcf	24,5	;volatile
  5095                           
  5096                           ;UART.c: 12: RCIF = 0;
  5097  0857  128C               	bcf	12,5	;volatile
  5098                           
  5099                           ;UART.c: 13: TXIE = 0;
  5100  0858  1683               	bsf	3,5	;RP0=1, select bank1
  5101  0859  1303               	bcf	3,6	;RP1=0, select bank1
  5102  085A  120C               	bcf	12,4	;volatile
  5103                           
  5104                           ;UART.c: 14: RCIE = 1;
  5105  085B  168C               	bsf	12,5	;volatile
  5106                           
  5107                           ;UART.c: 15: TX9 = 0;
  5108  085C  1318               	bcf	24,6	;volatile
  5109                           
  5110                           ;UART.c: 16: RX9 = 0;
  5111  085D  1283               	bcf	3,5	;RP0=0, select bank0
  5112  085E  1303               	bcf	3,6	;RP1=0, select bank0
  5113  085F  1318               	bcf	24,6	;volatile
  5114                           
  5115                           ;UART.c: 17: TXEN = 0;
  5116  0860  1683               	bsf	3,5	;RP0=1, select bank1
  5117  0861  1303               	bcf	3,6	;RP1=0, select bank1
  5118  0862  1298               	bcf	24,5	;volatile
  5119                           
  5120                           ;UART.c: 18: TXEN = 1;
  5121  0863  1698               	bsf	24,5	;volatile
  5122  0864  0008               	return
  5123  0865                     __end_of_Init_SERIAL:	
  5124                           
  5125                           	psect	text12
  5126  0898                     __ptext12:	
  5127 ;; *************** function _Init_MPU *****************
  5128 ;; Defined at:
  5129 ;;		line 8 in file "Init_MPU.c"
  5130 ;; Parameters:    Size  Location     Type
  5131 ;;		None
  5132 ;; Auto vars:     Size  Location     Type
  5133 ;;		None
  5134 ;; Return value:  Size  Location     Type
  5135 ;;                  1    wreg      void 
  5136 ;; Registers used:
  5137 ;;		wreg, status,2
  5138 ;; Tracked objects:
  5139 ;;		On entry : 0/0
  5140 ;;		On exit  : 0/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5143 ;;      Params:         0       0       0       0       0
  5144 ;;      Locals:         0       0       0       0       0
  5145 ;;      Temps:          0       0       0       0       0
  5146 ;;      Totals:         0       0       0       0       0
  5147 ;;Total ram usage:        0 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; This function calls:
  5150 ;;		Nothing
  5151 ;; This function is called by:
  5152 ;;		_main
  5153 ;; This function uses a non-reentrant model
  5154 ;;
  5155                           
  5156                           
  5157                           ;psect for function _Init_MPU
  5158  0898                     _Init_MPU:	
  5159                           
  5160                           ;Init_MPU.c: 11: PORTA = 0x00;
  5161                           
  5162                           ;incstack = 0
  5163                           ; Regs used in _Init_MPU: [wreg+status,2]
  5164  0898  1283               	bcf	3,5	;RP0=0, select bank0
  5165  0899  1303               	bcf	3,6	;RP1=0, select bank0
  5166  089A  0185               	clrf	5	;volatile
  5167                           
  5168                           ;Init_MPU.c: 12: PORTB = 0x00;
  5169  089B  0186               	clrf	6	;volatile
  5170                           
  5171                           ;Init_MPU.c: 13: PORTC = 0x00;
  5172  089C  0187               	clrf	7	;volatile
  5173                           
  5174                           ;Init_MPU.c: 14: PORTD = 0x00;
  5175  089D  0188               	clrf	8	;volatile
  5176                           
  5177                           ;Init_MPU.c: 15: PORTE = 0x00;
  5178  089E  0189               	clrf	9	;volatile
  5179                           
  5180                           ;Init_MPU.c: 18: ANSEL = 0x00;
  5181  089F  1683               	bsf	3,5	;RP0=1, select bank3
  5182  08A0  1703               	bsf	3,6	;RP1=1, select bank3
  5183  08A1  0188               	clrf	8	;volatile
  5184                           
  5185                           ;Init_MPU.c: 19: ANSELH = 0x00;
  5186  08A2  0189               	clrf	9	;volatile
  5187                           
  5188                           ;Init_MPU.c: 23: TRISA = 0b10000000;
  5189  08A3  3080               	movlw	128
  5190  08A4  1683               	bsf	3,5	;RP0=1, select bank1
  5191  08A5  1303               	bcf	3,6	;RP1=0, select bank1
  5192  08A6  0085               	movwf	5	;volatile
  5193                           
  5194                           ;Init_MPU.c: 24: TRISB = 0b00100000;
  5195  08A7  3020               	movlw	32
  5196  08A8  0086               	movwf	6	;volatile
  5197                           
  5198                           ;Init_MPU.c: 25: TRISC = 0b10011000;
  5199  08A9  3098               	movlw	152
  5200  08AA  0087               	movwf	7	;volatile
  5201                           
  5202                           ;Init_MPU.c: 26: TRISD = 0b00000000;
  5203  08AB  0188               	clrf	8	;volatile
  5204                           
  5205                           ;Init_MPU.c: 27: TRISE = 0b00000000;
  5206  08AC  0189               	clrf	9	;volatile
  5207                           
  5208                           ;Init_MPU.c: 30: PORTA = 0x00;
  5209  08AD  1283               	bcf	3,5	;RP0=0, select bank0
  5210  08AE  1303               	bcf	3,6	;RP1=0, select bank0
  5211  08AF  0185               	clrf	5	;volatile
  5212                           
  5213                           ;Init_MPU.c: 31: PORTB = 0x00;
  5214  08B0  0186               	clrf	6	;volatile
  5215                           
  5216                           ;Init_MPU.c: 32: PORTC = 0x00;
  5217  08B1  0187               	clrf	7	;volatile
  5218                           
  5219                           ;Init_MPU.c: 33: PORTD = 0x00;
  5220  08B2  0188               	clrf	8	;volatile
  5221                           
  5222                           ;Init_MPU.c: 34: PORTE = 0x00;
  5223  08B3  0189               	clrf	9	;volatile
  5224  08B4  0008               	return
  5225  08B5                     __end_of_Init_MPU:	
  5226                           
  5227                           	psect	text13
  5228  098F                     __ptext13:	
  5229 ;; *************** function _Init_I2C_M *****************
  5230 ;; Defined at:
  5231 ;;		line 8 in file "I2C.c"
  5232 ;; Parameters:    Size  Location     Type
  5233 ;;  c               4    0[BANK0 ] const unsigned long 
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;		None
  5236 ;; Return value:  Size  Location     Type
  5237 ;;                  1    wreg      void 
  5238 ;; Registers used:
  5239 ;;		wreg, status,2, status,0, pclath, cstack
  5240 ;; Tracked objects:
  5241 ;;		On entry : 0/0
  5242 ;;		On exit  : 0/0
  5243 ;;		Unchanged: 0/0
  5244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5245 ;;      Params:         0       4       0       0       0
  5246 ;;      Locals:         0       0       0       0       0
  5247 ;;      Temps:          0       4       0       0       0
  5248 ;;      Totals:         0       8       0       0       0
  5249 ;;Total ram usage:        8 bytes
  5250 ;; Hardware stack levels used:    1
  5251 ;; Hardware stack levels required when called:    1
  5252 ;; This function calls:
  5253 ;;		___lldiv
  5254 ;; This function is called by:
  5255 ;;		_main
  5256 ;; This function uses a non-reentrant model
  5257 ;;
  5258                           
  5259                           
  5260                           ;psect for function _Init_I2C_M
  5261  098F                     _Init_I2C_M:	
  5262                           
  5263                           ;I2C.c: 9: SSPCON = 0b00101000;
  5264                           
  5265                           ;incstack = 0
  5266                           ; Regs used in _Init_I2C_M: [wreg+status,2+status,0+pclath+cstack]
  5267  098F  3028               	movlw	40
  5268  0990  1283               	bcf	3,5	;RP0=0, select bank0
  5269  0991  1303               	bcf	3,6	;RP1=0, select bank0
  5270  0992  0094               	movwf	20	;volatile
  5271                           
  5272                           ;I2C.c: 10: SSPCON2 = 0;
  5273  0993  1683               	bsf	3,5	;RP0=1, select bank1
  5274  0994  1303               	bcf	3,6	;RP1=0, select bank1
  5275  0995  0191               	clrf	17	;volatile
  5276                           
  5277                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  5278  0996  1283               	bcf	3,5	;RP0=0, select bank0
  5279  0997  1303               	bcf	3,6	;RP1=0, select bank0
  5280  0998  0820               	movf	Init_I2C_M@c,w
  5281  0999  00A4               	movwf	??_Init_I2C_M
  5282  099A  0821               	movf	Init_I2C_M@c+1,w
  5283  099B  00A5               	movwf	??_Init_I2C_M+1
  5284  099C  0822               	movf	Init_I2C_M@c+2,w
  5285  099D  00A6               	movwf	??_Init_I2C_M+2
  5286  099E  0823               	movf	Init_I2C_M@c+3,w
  5287  099F  00A7               	movwf	??_Init_I2C_M+3
  5288  09A0  3002               	movlw	2
  5289  09A1                     u3195:	
  5290  09A1  1003               	clrc
  5291  09A2  0DA4               	rlf	??_Init_I2C_M,f
  5292  09A3  0DA5               	rlf	??_Init_I2C_M+1,f
  5293  09A4  0DA6               	rlf	??_Init_I2C_M+2,f
  5294  09A5  0DA7               	rlf	??_Init_I2C_M+3,f
  5295  09A6  3EFF               	addlw	-1
  5296  09A7  1D03               	skipz
  5297  09A8  29A1               	goto	u3195
  5298  09A9  0827               	movf	??_Init_I2C_M+3,w
  5299  09AA  00F3               	movwf	___lldiv@divisor+3
  5300  09AB  0826               	movf	??_Init_I2C_M+2,w
  5301  09AC  00F2               	movwf	___lldiv@divisor+2
  5302  09AD  0825               	movf	??_Init_I2C_M+1,w
  5303  09AE  00F1               	movwf	___lldiv@divisor+1
  5304  09AF  0824               	movf	??_Init_I2C_M,w
  5305  09B0  00F0               	movwf	___lldiv@divisor
  5306  09B1  3000               	movlw	0
  5307  09B2  00F7               	movwf	___lldiv@dividend+3
  5308  09B3  3098               	movlw	152
  5309  09B4  00F6               	movwf	___lldiv@dividend+2
  5310  09B5  3096               	movlw	150
  5311  09B6  00F5               	movwf	___lldiv@dividend+1
  5312  09B7  3080               	movlw	128
  5313  09B8  00F4               	movwf	___lldiv@dividend
  5314  09B9  120A  158A  2398   	fcall	___lldiv
  5315  09BC  0870               	movf	?___lldiv,w
  5316  09BD  3EFF               	addlw	255
  5317  09BE  1683               	bsf	3,5	;RP0=1, select bank1
  5318  09BF  1303               	bcf	3,6	;RP1=0, select bank1
  5319  09C0  0093               	movwf	19	;volatile
  5320                           
  5321                           ;I2C.c: 12: SSPSTAT = 0;
  5322  09C1  0194               	clrf	20	;volatile
  5323  09C2  0008               	return
  5324  09C3                     __end_of_Init_I2C_M:	
  5325                           
  5326                           	psect	text14
  5327  0B98                     __ptext14:	
  5328 ;; *************** function ___lldiv *****************
  5329 ;; Defined at:
  5330 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  5331 ;; Parameters:    Size  Location     Type
  5332 ;;  divisor         4    0[COMMON] unsigned long 
  5333 ;;  dividend        4    4[COMMON] unsigned long 
  5334 ;; Auto vars:     Size  Location     Type
  5335 ;;  quotient        4    9[COMMON] unsigned long 
  5336 ;;  counter         1   13[COMMON] unsigned char 
  5337 ;; Return value:  Size  Location     Type
  5338 ;;                  4    0[COMMON] unsigned long 
  5339 ;; Registers used:
  5340 ;;		wreg, status,2, status,0
  5341 ;; Tracked objects:
  5342 ;;		On entry : 0/0
  5343 ;;		On exit  : 0/0
  5344 ;;		Unchanged: 0/0
  5345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5346 ;;      Params:         8       0       0       0       0
  5347 ;;      Locals:         5       0       0       0       0
  5348 ;;      Temps:          1       0       0       0       0
  5349 ;;      Totals:        14       0       0       0       0
  5350 ;;Total ram usage:       14 bytes
  5351 ;; Hardware stack levels used:    1
  5352 ;; This function calls:
  5353 ;;		Nothing
  5354 ;; This function is called by:
  5355 ;;		_Init_I2C_M
  5356 ;; This function uses a non-reentrant model
  5357 ;;
  5358                           
  5359                           
  5360                           ;psect for function ___lldiv
  5361  0B98                     ___lldiv:	
  5362                           
  5363                           ;incstack = 0
  5364                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5365  0B98  3000               	movlw	0
  5366  0B99  00FC               	movwf	___lldiv@quotient+3
  5367  0B9A  3000               	movlw	0
  5368  0B9B  00FB               	movwf	___lldiv@quotient+2
  5369  0B9C  3000               	movlw	0
  5370  0B9D  00FA               	movwf	___lldiv@quotient+1
  5371  0B9E  3000               	movlw	0
  5372  0B9F  00F9               	movwf	___lldiv@quotient
  5373  0BA0  0873               	movf	___lldiv@divisor+3,w
  5374  0BA1  0472               	iorwf	___lldiv@divisor+2,w
  5375  0BA2  0471               	iorwf	___lldiv@divisor+1,w
  5376  0BA3  0470               	iorwf	___lldiv@divisor,w
  5377  0BA4  1903               	skipnz
  5378  0BA5  2BED               	goto	l3333
  5379  0BA6  01FD               	clrf	___lldiv@counter
  5380  0BA7  0AFD               	incf	___lldiv@counter,f
  5381  0BA8                     l3319:	
  5382  0BA8  1BF3               	btfsc	___lldiv@divisor+3,7
  5383  0BA9  2BB8               	goto	l3321
  5384  0BAA  3001               	movlw	1
  5385  0BAB  00F8               	movwf	??___lldiv
  5386  0BAC                     u3045:	
  5387  0BAC  1003               	clrc
  5388  0BAD  0DF0               	rlf	___lldiv@divisor,f
  5389  0BAE  0DF1               	rlf	___lldiv@divisor+1,f
  5390  0BAF  0DF2               	rlf	___lldiv@divisor+2,f
  5391  0BB0  0DF3               	rlf	___lldiv@divisor+3,f
  5392  0BB1  0BF8               	decfsz	??___lldiv,f
  5393  0BB2  2BAC               	goto	u3045
  5394  0BB3  3001               	movlw	1
  5395  0BB4  00F8               	movwf	??___lldiv
  5396  0BB5  0878               	movf	??___lldiv,w
  5397  0BB6  07FD               	addwf	___lldiv@counter,f
  5398  0BB7  2BA8               	goto	l3319
  5399  0BB8                     l3321:	
  5400  0BB8  3001               	movlw	1
  5401  0BB9  00F8               	movwf	??___lldiv
  5402  0BBA                     u3065:	
  5403  0BBA  1003               	clrc
  5404  0BBB  0DF9               	rlf	___lldiv@quotient,f
  5405  0BBC  0DFA               	rlf	___lldiv@quotient+1,f
  5406  0BBD  0DFB               	rlf	___lldiv@quotient+2,f
  5407  0BBE  0DFC               	rlf	___lldiv@quotient+3,f
  5408  0BBF  0BF8               	decfsz	??___lldiv,f
  5409  0BC0  2BBA               	goto	u3065
  5410  0BC1  0873               	movf	___lldiv@divisor+3,w
  5411  0BC2  0277               	subwf	___lldiv@dividend+3,w
  5412  0BC3  1D03               	skipz
  5413  0BC4  2BCF               	goto	u3075
  5414  0BC5  0872               	movf	___lldiv@divisor+2,w
  5415  0BC6  0276               	subwf	___lldiv@dividend+2,w
  5416  0BC7  1D03               	skipz
  5417  0BC8  2BCF               	goto	u3075
  5418  0BC9  0871               	movf	___lldiv@divisor+1,w
  5419  0BCA  0275               	subwf	___lldiv@dividend+1,w
  5420  0BCB  1D03               	skipz
  5421  0BCC  2BCF               	goto	u3075
  5422  0BCD  0870               	movf	___lldiv@divisor,w
  5423  0BCE  0274               	subwf	___lldiv@dividend,w
  5424  0BCF                     u3075:	
  5425  0BCF  1C03               	skipc
  5426  0BD0  2BE0               	goto	l3329
  5427  0BD1  0870               	movf	___lldiv@divisor,w
  5428  0BD2  02F4               	subwf	___lldiv@dividend,f
  5429  0BD3  0871               	movf	___lldiv@divisor+1,w
  5430  0BD4  1C03               	skipc
  5431  0BD5  0F71               	incfsz	___lldiv@divisor+1,w
  5432  0BD6  02F5               	subwf	___lldiv@dividend+1,f
  5433  0BD7  0872               	movf	___lldiv@divisor+2,w
  5434  0BD8  1C03               	skipc
  5435  0BD9  0F72               	incfsz	___lldiv@divisor+2,w
  5436  0BDA  02F6               	subwf	___lldiv@dividend+2,f
  5437  0BDB  0873               	movf	___lldiv@divisor+3,w
  5438  0BDC  1C03               	skipc
  5439  0BDD  0F73               	incfsz	___lldiv@divisor+3,w
  5440  0BDE  02F7               	subwf	___lldiv@dividend+3,f
  5441  0BDF  1479               	bsf	___lldiv@quotient,0
  5442  0BE0                     l3329:	
  5443  0BE0  3001               	movlw	1
  5444  0BE1                     u3085:	
  5445  0BE1  1003               	clrc
  5446  0BE2  0CF3               	rrf	___lldiv@divisor+3,f
  5447  0BE3  0CF2               	rrf	___lldiv@divisor+2,f
  5448  0BE4  0CF1               	rrf	___lldiv@divisor+1,f
  5449  0BE5  0CF0               	rrf	___lldiv@divisor,f
  5450  0BE6  3EFF               	addlw	-1
  5451  0BE7  1D03               	skipz
  5452  0BE8  2BE1               	goto	u3085
  5453  0BE9  3001               	movlw	1
  5454  0BEA  02FD               	subwf	___lldiv@counter,f
  5455  0BEB  1D03               	btfss	3,2
  5456  0BEC  2BB8               	goto	l3321
  5457  0BED                     l3333:	
  5458  0BED  087C               	movf	___lldiv@quotient+3,w
  5459  0BEE  00F3               	movwf	?___lldiv+3
  5460  0BEF  087B               	movf	___lldiv@quotient+2,w
  5461  0BF0  00F2               	movwf	?___lldiv+2
  5462  0BF1  087A               	movf	___lldiv@quotient+1,w
  5463  0BF2  00F1               	movwf	?___lldiv+1
  5464  0BF3  0879               	movf	___lldiv@quotient,w
  5465  0BF4  00F0               	movwf	?___lldiv
  5466  0BF5  0008               	return
  5467  0BF6                     __end_of___lldiv:	
  5468                           
  5469                           	psect	text15
  5470  0935                     __ptext15:	
  5471 ;; *************** function _FMTX *****************
  5472 ;; Defined at:
  5473 ;;		line 270 in file "FMCW.c"
  5474 ;; Parameters:    Size  Location     Type
  5475 ;;  Nref            2   60[BANK0 ] int 
  5476 ;;  Nprg            2   62[BANK0 ] PTR int 
  5477 ;;		 -> RAM(512), main@FMTX_Nprg(10), FMTX_Nprg(10), 
  5478 ;; Auto vars:     Size  Location     Type
  5479 ;;  fmtx            2   64[BANK0 ] int 
  5480 ;; Return value:  Size  Location     Type
  5481 ;;                  1    wreg      void 
  5482 ;; Registers used:
  5483 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5484 ;; Tracked objects:
  5485 ;;		On entry : 0/0
  5486 ;;		On exit  : 0/0
  5487 ;;		Unchanged: 0/0
  5488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5489 ;;      Params:         0       4       0       0       0
  5490 ;;      Locals:         0       2       0       0       0
  5491 ;;      Temps:          0       0       0       0       0
  5492 ;;      Totals:         0       6       0       0       0
  5493 ;;Total ram usage:        6 bytes
  5494 ;; Hardware stack levels used:    1
  5495 ;; Hardware stack levels required when called:    3
  5496 ;; This function calls:
  5497 ;;		_OPINIT
  5498 ;;		_OUTFQ
  5499 ;;		_RFDOUT
  5500 ;; This function is called by:
  5501 ;;		_main
  5502 ;;		_SetPLL
  5503 ;; This function uses a non-reentrant model
  5504 ;;
  5505                           
  5506                           
  5507                           ;psect for function _FMTX
  5508  0935                     _FMTX:	
  5509                           
  5510                           ;FMCW.c: 271: int fmtx = 1;
  5511                           
  5512                           ;incstack = 0
  5513                           ; Regs used in _FMTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5514  0935  3001               	movlw	1
  5515  0936  1283               	bcf	3,5	;RP0=0, select bank0
  5516  0937  1303               	bcf	3,6	;RP1=0, select bank0
  5517  0938  00E0               	movwf	FMTX@fmtx
  5518  0939  3000               	movlw	0
  5519  093A  00E1               	movwf	FMTX@fmtx+1
  5520                           
  5521                           ;FMCW.c: 272: OPINIT(fmtx);
  5522  093B  0861               	movf	FMTX@fmtx+1,w
  5523  093C  00F5               	movwf	OPINIT@fmcwtxrx+1
  5524  093D  0860               	movf	FMTX@fmtx,w
  5525  093E  00F4               	movwf	OPINIT@fmcwtxrx
  5526  093F  120A  158A  24BC  120A  158A  	fcall	_OPINIT
  5527                           
  5528                           ;FMCW.c: 273: RFDOUT(fmtx, Nref);
  5529  0944  1283               	bcf	3,5	;RP0=0, select bank0
  5530  0945  1303               	bcf	3,6	;RP1=0, select bank0
  5531  0946  0861               	movf	FMTX@fmtx+1,w
  5532  0947  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5533  0948  0860               	movf	FMTX@fmtx,w
  5534  0949  00F9               	movwf	RFDOUT@fmcwtxrx
  5535  094A  085D               	movf	FMTX@Nref+1,w
  5536  094B  00FC               	movwf	RFDOUT@Nref+1
  5537  094C  085C               	movf	FMTX@Nref,w
  5538  094D  00FB               	movwf	RFDOUT@Nref
  5539  094E  120A  158A  2539  120A  158A  	fcall	_RFDOUT
  5540                           
  5541                           ;FMCW.c: 274: OUTFQ(fmtx, Nprg);
  5542  0953  1283               	bcf	3,5	;RP0=0, select bank0
  5543  0954  1303               	bcf	3,6	;RP1=0, select bank0
  5544  0955  0861               	movf	FMTX@fmtx+1,w
  5545  0956  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5546  0957  0860               	movf	FMTX@fmtx,w
  5547  0958  00F9               	movwf	OUTFQ@fmcwtxrx
  5548  0959  085E               	movf	FMTX@Nprg,w
  5549  095A  00FB               	movwf	OUTFQ@Nprg
  5550  095B  085F               	movf	FMTX@Nprg+1,w
  5551  095C  00FC               	movwf	OUTFQ@Nprg+1
  5552  095D  120A  118A  20AC   	fcall	_OUTFQ
  5553  0960  0008               	return
  5554  0961                     __end_of_FMTX:	
  5555                           
  5556                           	psect	text16
  5557  0909                     __ptext16:	
  5558 ;; *************** function _FMRX *****************
  5559 ;; Defined at:
  5560 ;;		line 298 in file "FMCW.c"
  5561 ;; Parameters:    Size  Location     Type
  5562 ;;  Nref            2   60[BANK0 ] int 
  5563 ;;  Nprg            2   62[BANK0 ] PTR int 
  5564 ;;		 -> RAM(512), main@FMRX_Nprg(10), FMRX_Nprg(10), 
  5565 ;; Auto vars:     Size  Location     Type
  5566 ;;  fmrx            2   64[BANK0 ] int 
  5567 ;; Return value:  Size  Location     Type
  5568 ;;                  1    wreg      void 
  5569 ;; Registers used:
  5570 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5571 ;; Tracked objects:
  5572 ;;		On entry : 0/0
  5573 ;;		On exit  : 0/0
  5574 ;;		Unchanged: 0/0
  5575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5576 ;;      Params:         0       4       0       0       0
  5577 ;;      Locals:         0       2       0       0       0
  5578 ;;      Temps:          0       0       0       0       0
  5579 ;;      Totals:         0       6       0       0       0
  5580 ;;Total ram usage:        6 bytes
  5581 ;; Hardware stack levels used:    1
  5582 ;; Hardware stack levels required when called:    3
  5583 ;; This function calls:
  5584 ;;		_OPINIT
  5585 ;;		_OUTFQ
  5586 ;;		_RFDOUT
  5587 ;; This function is called by:
  5588 ;;		_main
  5589 ;;		_SetPLL
  5590 ;; This function uses a non-reentrant model
  5591 ;;
  5592                           
  5593                           
  5594                           ;psect for function _FMRX
  5595  0909                     _FMRX:	
  5596                           
  5597                           ;FMCW.c: 299: int fmrx = 3;
  5598                           
  5599                           ;incstack = 0
  5600                           ; Regs used in _FMRX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5601  0909  3003               	movlw	3
  5602  090A  1283               	bcf	3,5	;RP0=0, select bank0
  5603  090B  1303               	bcf	3,6	;RP1=0, select bank0
  5604  090C  00E0               	movwf	FMRX@fmrx
  5605  090D  3000               	movlw	0
  5606  090E  00E1               	movwf	FMRX@fmrx+1
  5607                           
  5608                           ;FMCW.c: 300: OPINIT(fmrx);
  5609  090F  0861               	movf	FMRX@fmrx+1,w
  5610  0910  00F5               	movwf	OPINIT@fmcwtxrx+1
  5611  0911  0860               	movf	FMRX@fmrx,w
  5612  0912  00F4               	movwf	OPINIT@fmcwtxrx
  5613  0913  120A  158A  24BC  120A  158A  	fcall	_OPINIT
  5614                           
  5615                           ;FMCW.c: 301: RFDOUT(fmrx, Nref);
  5616  0918  1283               	bcf	3,5	;RP0=0, select bank0
  5617  0919  1303               	bcf	3,6	;RP1=0, select bank0
  5618  091A  0861               	movf	FMRX@fmrx+1,w
  5619  091B  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5620  091C  0860               	movf	FMRX@fmrx,w
  5621  091D  00F9               	movwf	RFDOUT@fmcwtxrx
  5622  091E  085D               	movf	FMRX@Nref+1,w
  5623  091F  00FC               	movwf	RFDOUT@Nref+1
  5624  0920  085C               	movf	FMRX@Nref,w
  5625  0921  00FB               	movwf	RFDOUT@Nref
  5626  0922  120A  158A  2539  120A  158A  	fcall	_RFDOUT
  5627                           
  5628                           ;FMCW.c: 302: OUTFQ(fmrx, Nprg);
  5629  0927  1283               	bcf	3,5	;RP0=0, select bank0
  5630  0928  1303               	bcf	3,6	;RP1=0, select bank0
  5631  0929  0861               	movf	FMRX@fmrx+1,w
  5632  092A  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5633  092B  0860               	movf	FMRX@fmrx,w
  5634  092C  00F9               	movwf	OUTFQ@fmcwtxrx
  5635  092D  085E               	movf	FMRX@Nprg,w
  5636  092E  00FB               	movwf	OUTFQ@Nprg
  5637  092F  085F               	movf	FMRX@Nprg+1,w
  5638  0930  00FC               	movwf	OUTFQ@Nprg+1
  5639  0931  120A  118A  20AC   	fcall	_OUTFQ
  5640  0934  0008               	return
  5641  0935                     __end_of_FMRX:	
  5642                           
  5643                           	psect	text17
  5644  0B3B                     __ptext17:	
  5645 ;; *************** function _EEPROM_Write *****************
  5646 ;; Defined at:
  5647 ;;		line 51 in file "I2C.c"
  5648 ;; Parameters:    Size  Location     Type
  5649 ;;  EEPROM_addre    1    wreg     unsigned char 
  5650 ;;  high_address    1    2[COMMON] unsigned char 
  5651 ;;  low_address     1    3[COMMON] unsigned char 
  5652 ;;  data            1    4[COMMON] PTR unsigned char 
  5653 ;;		 -> NULL(0), dData(32), 
  5654 ;; Auto vars:     Size  Location     Type
  5655 ;;  EEPROM_addre    1    8[COMMON] unsigned char 
  5656 ;;  Address         1    9[COMMON] unsigned char 
  5657 ;; Return value:  Size  Location     Type
  5658 ;;                  1    wreg      void 
  5659 ;; Registers used:
  5660 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5661 ;; Tracked objects:
  5662 ;;		On entry : 0/0
  5663 ;;		On exit  : 0/0
  5664 ;;		Unchanged: 0/0
  5665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5666 ;;      Params:         3       0       0       0       0
  5667 ;;      Locals:         2       0       0       0       0
  5668 ;;      Temps:          3       0       0       0       0
  5669 ;;      Totals:         8       0       0       0       0
  5670 ;;Total ram usage:        8 bytes
  5671 ;; Hardware stack levels used:    1
  5672 ;; Hardware stack levels required when called:    2
  5673 ;; This function calls:
  5674 ;;		_I2C_Master_Start
  5675 ;;		_I2C_Master_Stop
  5676 ;;		_I2C_Master_Write
  5677 ;; This function is called by:
  5678 ;;		_main
  5679 ;; This function uses a non-reentrant model
  5680 ;;
  5681                           
  5682                           
  5683                           ;psect for function _EEPROM_Write
  5684  0B3B                     _EEPROM_Write:	
  5685                           
  5686                           ;incstack = 0
  5687                           ; Regs used in _EEPROM_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5688                           ;EEPROM_Write@EEPROM_address stored from wreg
  5689  0B3B  00F8               	movwf	EEPROM_Write@EEPROM_address
  5690                           
  5691                           ;I2C.c: 52: UBYTE Address = EEPROM_address << 1;
  5692  0B3C  0878               	movf	EEPROM_Write@EEPROM_address,w
  5693  0B3D  00F5               	movwf	??_EEPROM_Write
  5694  0B3E  0775               	addwf	??_EEPROM_Write,w
  5695  0B3F  00F6               	movwf	??_EEPROM_Write+1
  5696  0B40  0876               	movf	??_EEPROM_Write+1,w
  5697  0B41  00F9               	movwf	EEPROM_Write@Address
  5698                           
  5699                           ;I2C.c: 55: I2C_Master_Start();
  5700  0B42  160A  118A  27AE  120A  158A  	fcall	_I2C_Master_Start
  5701                           
  5702                           ;I2C.c: 56: I2C_Master_Write(Address);
  5703  0B47  0879               	movf	EEPROM_Write@Address,w
  5704  0B48  00F5               	movwf	??_EEPROM_Write
  5705  0B49  01F6               	clrf	??_EEPROM_Write+1
  5706  0B4A  0875               	movf	??_EEPROM_Write,w
  5707  0B4B  00F0               	movwf	I2C_Master_Write@d
  5708  0B4C  0876               	movf	??_EEPROM_Write+1,w
  5709  0B4D  00F1               	movwf	I2C_Master_Write@d+1
  5710  0B4E  160A  118A  27BC  120A  158A  	fcall	_I2C_Master_Write
  5711                           
  5712                           ;I2C.c: 57: I2C_Master_Write(high_address);
  5713  0B53  0872               	movf	EEPROM_Write@high_address,w
  5714  0B54  00F5               	movwf	??_EEPROM_Write
  5715  0B55  01F6               	clrf	??_EEPROM_Write+1
  5716  0B56  0875               	movf	??_EEPROM_Write,w
  5717  0B57  00F0               	movwf	I2C_Master_Write@d
  5718  0B58  0876               	movf	??_EEPROM_Write+1,w
  5719  0B59  00F1               	movwf	I2C_Master_Write@d+1
  5720  0B5A  160A  118A  27BC  120A  158A  	fcall	_I2C_Master_Write
  5721                           
  5722                           ;I2C.c: 58: I2C_Master_Write(low_address);
  5723  0B5F  0873               	movf	EEPROM_Write@low_address,w
  5724  0B60  00F5               	movwf	??_EEPROM_Write
  5725  0B61  01F6               	clrf	??_EEPROM_Write+1
  5726  0B62  0875               	movf	??_EEPROM_Write,w
  5727  0B63  00F0               	movwf	I2C_Master_Write@d
  5728  0B64  0876               	movf	??_EEPROM_Write+1,w
  5729  0B65  00F1               	movwf	I2C_Master_Write@d+1
  5730  0B66  160A  118A  27BC  120A  158A  	fcall	_I2C_Master_Write
  5731  0B6B                     l3539:	
  5732                           ;I2C.c: 59: while(*data){
  5733                           
  5734  0B6B  0874               	movf	EEPROM_Write@data,w
  5735  0B6C  0084               	movwf	4
  5736  0B6D  1783               	bsf	3,7	;select IRP bank2
  5737  0B6E  0800               	movf	0,w
  5738  0B6F  1903               	btfsc	3,2
  5739  0B70  2B85               	goto	l3541
  5740                           
  5741                           ;I2C.c: 60: I2C_Master_Write(*data);
  5742  0B71  0874               	movf	EEPROM_Write@data,w
  5743  0B72  0084               	movwf	4
  5744  0B73  1783               	bsf	3,7	;select IRP bank2
  5745  0B74  0800               	movf	0,w
  5746  0B75  00F5               	movwf	??_EEPROM_Write
  5747  0B76  01F6               	clrf	??_EEPROM_Write+1
  5748  0B77  0875               	movf	??_EEPROM_Write,w
  5749  0B78  00F0               	movwf	I2C_Master_Write@d
  5750  0B79  0876               	movf	??_EEPROM_Write+1,w
  5751  0B7A  00F1               	movwf	I2C_Master_Write@d+1
  5752  0B7B  160A  118A  27BC  120A  158A  	fcall	_I2C_Master_Write
  5753                           
  5754                           ;I2C.c: 61: ++data;
  5755  0B80  3001               	movlw	1
  5756  0B81  00F5               	movwf	??_EEPROM_Write
  5757  0B82  0875               	movf	??_EEPROM_Write,w
  5758  0B83  07F4               	addwf	EEPROM_Write@data,f
  5759  0B84  2B6B               	goto	l3539
  5760  0B85                     l3541:	
  5761                           
  5762                           ;I2C.c: 62: }
  5763                           ;I2C.c: 63: I2C_Master_Stop();
  5764  0B85  160A  118A  27B5  120A  158A  	fcall	_I2C_Master_Stop
  5765                           
  5766                           ;I2C.c: 64: _delay((unsigned long)((200)*(10000000/4000.0)));
  5767  0B8A  3003               	movlw	3
  5768  0B8B  00F7               	movwf	??_EEPROM_Write+2
  5769  0B8C  308A               	movlw	138
  5770  0B8D  00F6               	movwf	??_EEPROM_Write+1
  5771  0B8E  3056               	movlw	86
  5772  0B8F  00F5               	movwf	??_EEPROM_Write
  5773  0B90                     u3717:	
  5774  0B90  0BF5               	decfsz	??_EEPROM_Write,f
  5775  0B91  2B90               	goto	u3717
  5776  0B92  0BF6               	decfsz	??_EEPROM_Write+1,f
  5777  0B93  2B90               	goto	u3717
  5778  0B94  0BF7               	decfsz	??_EEPROM_Write+2,f
  5779  0B95  2B90               	goto	u3717
  5780  0B96  2B97               	nop2
  5781  0B97  0008               	return
  5782  0B98                     __end_of_EEPROM_Write:	
  5783                           
  5784                           	psect	text18
  5785  17BC                     __ptext18:	
  5786 ;; *************** function _I2C_Master_Write *****************
  5787 ;; Defined at:
  5788 ;;		line 34 in file "I2C.c"
  5789 ;; Parameters:    Size  Location     Type
  5790 ;;  d               2    0[COMMON] unsigned int 
  5791 ;; Auto vars:     Size  Location     Type
  5792 ;;		None
  5793 ;; Return value:  Size  Location     Type
  5794 ;;                  1    wreg      void 
  5795 ;; Registers used:
  5796 ;;		wreg, status,2, status,0, pclath, cstack
  5797 ;; Tracked objects:
  5798 ;;		On entry : 0/0
  5799 ;;		On exit  : 0/0
  5800 ;;		Unchanged: 0/0
  5801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5802 ;;      Params:         2       0       0       0       0
  5803 ;;      Locals:         0       0       0       0       0
  5804 ;;      Temps:          0       0       0       0       0
  5805 ;;      Totals:         2       0       0       0       0
  5806 ;;Total ram usage:        2 bytes
  5807 ;; Hardware stack levels used:    1
  5808 ;; Hardware stack levels required when called:    1
  5809 ;; This function calls:
  5810 ;;		_I2C_Master_Wait
  5811 ;; This function is called by:
  5812 ;;		_EEPROM_Write
  5813 ;;		_EEPROM_Read
  5814 ;; This function uses a non-reentrant model
  5815 ;;
  5816                           
  5817                           
  5818                           ;psect for function _I2C_Master_Write
  5819  17BC                     _I2C_Master_Write:	
  5820                           
  5821                           ;I2C.c: 35: I2C_Master_Wait();
  5822                           
  5823                           ;incstack = 0
  5824                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5825  17BC  160A  118A  27D4   	fcall	_I2C_Master_Wait
  5826                           
  5827                           ;I2C.c: 36: SSPBUF = d;
  5828  17BF  0870               	movf	I2C_Master_Write@d,w
  5829  17C0  1283               	bcf	3,5	;RP0=0, select bank0
  5830  17C1  1303               	bcf	3,6	;RP1=0, select bank0
  5831  17C2  0093               	movwf	19	;volatile
  5832  17C3  0008               	return
  5833  17C4                     __end_of_I2C_Master_Write:	
  5834                           
  5835                           	psect	text19
  5836  17B5                     __ptext19:	
  5837 ;; *************** function _I2C_Master_Stop *****************
  5838 ;; Defined at:
  5839 ;;		line 29 in file "I2C.c"
  5840 ;; Parameters:    Size  Location     Type
  5841 ;;		None
  5842 ;; Auto vars:     Size  Location     Type
  5843 ;;		None
  5844 ;; Return value:  Size  Location     Type
  5845 ;;                  1    wreg      void 
  5846 ;; Registers used:
  5847 ;;		wreg, status,2, status,0, pclath, cstack
  5848 ;; Tracked objects:
  5849 ;;		On entry : 0/0
  5850 ;;		On exit  : 0/0
  5851 ;;		Unchanged: 0/0
  5852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5853 ;;      Params:         0       0       0       0       0
  5854 ;;      Locals:         0       0       0       0       0
  5855 ;;      Temps:          0       0       0       0       0
  5856 ;;      Totals:         0       0       0       0       0
  5857 ;;Total ram usage:        0 bytes
  5858 ;; Hardware stack levels used:    1
  5859 ;; Hardware stack levels required when called:    1
  5860 ;; This function calls:
  5861 ;;		_I2C_Master_Wait
  5862 ;; This function is called by:
  5863 ;;		_EEPROM_Write
  5864 ;;		_EEPROM_Read
  5865 ;; This function uses a non-reentrant model
  5866 ;;
  5867                           
  5868                           
  5869                           ;psect for function _I2C_Master_Stop
  5870  17B5                     _I2C_Master_Stop:	
  5871                           
  5872                           ;I2C.c: 30: I2C_Master_Wait();
  5873                           
  5874                           ;incstack = 0
  5875                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5876  17B5  160A  118A  27D4   	fcall	_I2C_Master_Wait
  5877                           
  5878                           ;I2C.c: 31: PEN = 1;
  5879  17B8  1683               	bsf	3,5	;RP0=1, select bank1
  5880  17B9  1303               	bcf	3,6	;RP1=0, select bank1
  5881  17BA  1511               	bsf	17,2	;volatile
  5882  17BB  0008               	return
  5883  17BC                     __end_of_I2C_Master_Stop:	
  5884                           
  5885                           	psect	text20
  5886  17AE                     __ptext20:	
  5887 ;; *************** function _I2C_Master_Start *****************
  5888 ;; Defined at:
  5889 ;;		line 19 in file "I2C.c"
  5890 ;; Parameters:    Size  Location     Type
  5891 ;;		None
  5892 ;; Auto vars:     Size  Location     Type
  5893 ;;		None
  5894 ;; Return value:  Size  Location     Type
  5895 ;;                  1    wreg      void 
  5896 ;; Registers used:
  5897 ;;		wreg, status,2, status,0, pclath, cstack
  5898 ;; Tracked objects:
  5899 ;;		On entry : 0/0
  5900 ;;		On exit  : 0/0
  5901 ;;		Unchanged: 0/0
  5902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5903 ;;      Params:         0       0       0       0       0
  5904 ;;      Locals:         0       0       0       0       0
  5905 ;;      Temps:          0       0       0       0       0
  5906 ;;      Totals:         0       0       0       0       0
  5907 ;;Total ram usage:        0 bytes
  5908 ;; Hardware stack levels used:    1
  5909 ;; Hardware stack levels required when called:    1
  5910 ;; This function calls:
  5911 ;;		_I2C_Master_Wait
  5912 ;; This function is called by:
  5913 ;;		_EEPROM_Write
  5914 ;;		_EEPROM_Read
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           
  5919                           ;psect for function _I2C_Master_Start
  5920  17AE                     _I2C_Master_Start:	
  5921                           
  5922                           ;I2C.c: 20: I2C_Master_Wait();
  5923                           
  5924                           ;incstack = 0
  5925                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5926  17AE  160A  118A  27D4   	fcall	_I2C_Master_Wait
  5927                           
  5928                           ;I2C.c: 21: SEN = 1;
  5929  17B1  1683               	bsf	3,5	;RP0=1, select bank1
  5930  17B2  1303               	bcf	3,6	;RP1=0, select bank1
  5931  17B3  1411               	bsf	17,0	;volatile
  5932  17B4  0008               	return
  5933  17B5                     __end_of_I2C_Master_Start:	
  5934                           
  5935                           	psect	text21
  5936  17D4                     __ptext21:	
  5937 ;; *************** function _I2C_Master_Wait *****************
  5938 ;; Defined at:
  5939 ;;		line 15 in file "I2C.c"
  5940 ;; Parameters:    Size  Location     Type
  5941 ;;		None
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;		None
  5944 ;; Return value:  Size  Location     Type
  5945 ;;                  1    wreg      void 
  5946 ;; Registers used:
  5947 ;;		wreg, status,2
  5948 ;; Tracked objects:
  5949 ;;		On entry : 0/0
  5950 ;;		On exit  : 0/0
  5951 ;;		Unchanged: 0/0
  5952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5953 ;;      Params:         0       0       0       0       0
  5954 ;;      Locals:         0       0       0       0       0
  5955 ;;      Temps:          0       0       0       0       0
  5956 ;;      Totals:         0       0       0       0       0
  5957 ;;Total ram usage:        0 bytes
  5958 ;; Hardware stack levels used:    1
  5959 ;; This function calls:
  5960 ;;		Nothing
  5961 ;; This function is called by:
  5962 ;;		_I2C_Master_Start
  5963 ;;		_I2C_Master_Stop
  5964 ;;		_I2C_Master_Write
  5965 ;;		_I2C_Master_RepeatedStart
  5966 ;;		_I2C_Master_Read
  5967 ;; This function uses a non-reentrant model
  5968 ;;
  5969                           
  5970                           
  5971                           ;psect for function _I2C_Master_Wait
  5972  17D4                     _I2C_Master_Wait:	
  5973  17D4                     l492:	
  5974                           ;I2C.c: 16: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5975                           
  5976                           ;incstack = 0
  5977                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5978                           
  5979  17D4  1683               	bsf	3,5	;RP0=1, select bank1
  5980  17D5  1303               	bcf	3,6	;RP1=0, select bank1
  5981  17D6  1914               	btfsc	20,2	;volatile
  5982  17D7  2FD4               	goto	l492
  5983  17D8  0811               	movf	17,w	;volatile
  5984  17D9  391F               	andlw	31
  5985  17DA  1903               	btfsc	3,2
  5986  17DB  0008               	return
  5987  17DC  2FD4               	goto	l492
  5988  17DD                     __end_of_I2C_Master_Wait:	
  5989                           
  5990                           	psect	text22
  5991  08DD                     __ptext22:	
  5992 ;; *************** function _CWTX *****************
  5993 ;; Defined at:
  5994 ;;		line 284 in file "FMCW.c"
  5995 ;; Parameters:    Size  Location     Type
  5996 ;;  Nref            2   60[BANK0 ] int 
  5997 ;;  Nprg            2   62[BANK0 ] PTR int 
  5998 ;;		 -> RAM(512), main@CWTX_Nprg(10), CWTX_Nprg(10), 
  5999 ;; Auto vars:     Size  Location     Type
  6000 ;;  cwtx            2   64[BANK0 ] int 
  6001 ;; Return value:  Size  Location     Type
  6002 ;;                  1    wreg      void 
  6003 ;; Registers used:
  6004 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6005 ;; Tracked objects:
  6006 ;;		On entry : 0/0
  6007 ;;		On exit  : 0/0
  6008 ;;		Unchanged: 0/0
  6009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6010 ;;      Params:         0       4       0       0       0
  6011 ;;      Locals:         0       2       0       0       0
  6012 ;;      Temps:          0       0       0       0       0
  6013 ;;      Totals:         0       6       0       0       0
  6014 ;;Total ram usage:        6 bytes
  6015 ;; Hardware stack levels used:    1
  6016 ;; Hardware stack levels required when called:    3
  6017 ;; This function calls:
  6018 ;;		_OPINIT
  6019 ;;		_OUTFQ
  6020 ;;		_RFDOUT
  6021 ;; This function is called by:
  6022 ;;		_main
  6023 ;;		_SetPLL
  6024 ;; This function uses a non-reentrant model
  6025 ;;
  6026                           
  6027                           
  6028                           ;psect for function _CWTX
  6029  08DD                     _CWTX:	
  6030                           
  6031                           ;FMCW.c: 285: int cwtx = 2;
  6032                           
  6033                           ;incstack = 0
  6034                           ; Regs used in _CWTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6035  08DD  3002               	movlw	2
  6036  08DE  1283               	bcf	3,5	;RP0=0, select bank0
  6037  08DF  1303               	bcf	3,6	;RP1=0, select bank0
  6038  08E0  00E0               	movwf	CWTX@cwtx
  6039  08E1  3000               	movlw	0
  6040  08E2  00E1               	movwf	CWTX@cwtx+1
  6041                           
  6042                           ;FMCW.c: 286: OPINIT(cwtx);
  6043  08E3  0861               	movf	CWTX@cwtx+1,w
  6044  08E4  00F5               	movwf	OPINIT@fmcwtxrx+1
  6045  08E5  0860               	movf	CWTX@cwtx,w
  6046  08E6  00F4               	movwf	OPINIT@fmcwtxrx
  6047  08E7  120A  158A  24BC  120A  158A  	fcall	_OPINIT
  6048                           
  6049                           ;FMCW.c: 287: RFDOUT(cwtx, Nref);
  6050  08EC  1283               	bcf	3,5	;RP0=0, select bank0
  6051  08ED  1303               	bcf	3,6	;RP1=0, select bank0
  6052  08EE  0861               	movf	CWTX@cwtx+1,w
  6053  08EF  00FA               	movwf	RFDOUT@fmcwtxrx+1
  6054  08F0  0860               	movf	CWTX@cwtx,w
  6055  08F1  00F9               	movwf	RFDOUT@fmcwtxrx
  6056  08F2  085D               	movf	CWTX@Nref+1,w
  6057  08F3  00FC               	movwf	RFDOUT@Nref+1
  6058  08F4  085C               	movf	CWTX@Nref,w
  6059  08F5  00FB               	movwf	RFDOUT@Nref
  6060  08F6  120A  158A  2539  120A  158A  	fcall	_RFDOUT
  6061                           
  6062                           ;FMCW.c: 288: OUTFQ(cwtx, Nprg);
  6063  08FB  1283               	bcf	3,5	;RP0=0, select bank0
  6064  08FC  1303               	bcf	3,6	;RP1=0, select bank0
  6065  08FD  0861               	movf	CWTX@cwtx+1,w
  6066  08FE  00FA               	movwf	OUTFQ@fmcwtxrx+1
  6067  08FF  0860               	movf	CWTX@cwtx,w
  6068  0900  00F9               	movwf	OUTFQ@fmcwtxrx
  6069  0901  085E               	movf	CWTX@Nprg,w
  6070  0902  00FB               	movwf	OUTFQ@Nprg
  6071  0903  085F               	movf	CWTX@Nprg+1,w
  6072  0904  00FC               	movwf	OUTFQ@Nprg+1
  6073  0905  120A  118A  20AC   	fcall	_OUTFQ
  6074  0908  0008               	return
  6075  0909                     __end_of_CWTX:	
  6076                           
  6077                           	psect	text23
  6078  0D39                     __ptext23:	
  6079 ;; *************** function _RFDOUT *****************
  6080 ;; Defined at:
  6081 ;;		line 200 in file "FMCW.c"
  6082 ;; Parameters:    Size  Location     Type
  6083 ;;  fmcwtxrx        2    9[COMMON] int 
  6084 ;;  Nref            2   11[COMMON] int 
  6085 ;; Auto vars:     Size  Location     Type
  6086 ;;  i               2   31[BANK0 ] int 
  6087 ;;  i               2   27[BANK0 ] int 
  6088 ;;  i               2   29[BANK0 ] int 
  6089 ;;  Nref_b         24    3[BANK0 ] int [12]
  6090 ;; Return value:  Size  Location     Type
  6091 ;;                  1    wreg      void 
  6092 ;; Registers used:
  6093 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6094 ;; Tracked objects:
  6095 ;;		On entry : 0/0
  6096 ;;		On exit  : 0/0
  6097 ;;		Unchanged: 0/0
  6098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6099 ;;      Params:         4       0       0       0       0
  6100 ;;      Locals:         0      30       0       0       0
  6101 ;;      Temps:          0       3       0       0       0
  6102 ;;      Totals:         4      33       0       0       0
  6103 ;;Total ram usage:       37 bytes
  6104 ;; Hardware stack levels used:    1
  6105 ;; Hardware stack levels required when called:    2
  6106 ;; This function calls:
  6107 ;;		_H_OUT
  6108 ;;		_L_OUT
  6109 ;;		_STBOUT
  6110 ;;		___awdiv
  6111 ;; This function is called by:
  6112 ;;		_FMTX
  6113 ;;		_CWTX
  6114 ;;		_FMRX
  6115 ;; This function uses a non-reentrant model
  6116 ;;
  6117                           
  6118                           
  6119                           ;psect for function _RFDOUT
  6120  0D39                     _RFDOUT:	
  6121                           
  6122                           ;FMCW.c: 201: int Nref_b[12];
  6123                           ;FMCW.c: 203: for(int i=0; i<12; i++){
  6124                           
  6125                           ;incstack = 0
  6126                           ; Regs used in _RFDOUT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6127  0D39  1283               	bcf	3,5	;RP0=0, select bank0
  6128  0D3A  1303               	bcf	3,6	;RP1=0, select bank0
  6129  0D3B  01BD               	clrf	RFDOUT@i
  6130  0D3C  01BE               	clrf	RFDOUT@i+1
  6131  0D3D  083E               	movf	RFDOUT@i+1,w
  6132  0D3E  3A80               	xorlw	128
  6133  0D3F  00FF               	movwf	127
  6134  0D40  3080               	movlw	128
  6135  0D41  027F               	subwf	127,w
  6136  0D42  1D03               	skipz
  6137  0D43  2D46               	goto	u2955
  6138  0D44  300C               	movlw	12
  6139  0D45  023D               	subwf	RFDOUT@i,w
  6140  0D46                     u2955:	
  6141  0D46  1803               	btfsc	3,0
  6142  0D47  2D64               	goto	l3277
  6143  0D48                     l3271:	
  6144                           
  6145                           ;FMCW.c: 204: Nref_b[i] = 0;
  6146  0D48  1283               	bcf	3,5	;RP0=0, select bank0
  6147  0D49  1303               	bcf	3,6	;RP1=0, select bank0
  6148  0D4A  083D               	movf	RFDOUT@i,w
  6149  0D4B  00A0               	movwf	??_RFDOUT
  6150  0D4C  0720               	addwf	??_RFDOUT,w
  6151  0D4D  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6152  0D4E  0084               	movwf	4
  6153  0D4F  1383               	bcf	3,7	;select IRP bank0
  6154  0D50  0180               	clrf	0
  6155  0D51  0A84               	incf	4,f
  6156  0D52  0180               	clrf	0
  6157  0D53  3001               	movlw	1
  6158  0D54  07BD               	addwf	RFDOUT@i,f
  6159  0D55  1803               	skipnc
  6160  0D56  0ABE               	incf	RFDOUT@i+1,f
  6161  0D57  3000               	movlw	0
  6162  0D58  07BE               	addwf	RFDOUT@i+1,f
  6163  0D59  083E               	movf	RFDOUT@i+1,w
  6164  0D5A  3A80               	xorlw	128
  6165  0D5B  00FF               	movwf	127
  6166  0D5C  3080               	movlw	128
  6167  0D5D  027F               	subwf	127,w
  6168  0D5E  1D03               	skipz
  6169  0D5F  2D62               	goto	u2965
  6170  0D60  300C               	movlw	12
  6171  0D61  023D               	subwf	RFDOUT@i,w
  6172  0D62                     u2965:	
  6173  0D62  1C03               	skipc
  6174  0D63  2D48               	goto	l3271
  6175  0D64                     l3277:	
  6176                           
  6177                           ;FMCW.c: 205: }
  6178                           ;FMCW.c: 208: for(int i=0; Nref>0; i++){
  6179  0D64  1283               	bcf	3,5	;RP0=0, select bank0
  6180  0D65  1303               	bcf	3,6	;RP1=0, select bank0
  6181  0D66  01BB               	clrf	RFDOUT@i_477
  6182  0D67  01BC               	clrf	RFDOUT@i_477+1
  6183  0D68  087C               	movf	RFDOUT@Nref+1,w
  6184  0D69  3A80               	xorlw	128
  6185  0D6A  00FF               	movwf	127
  6186  0D6B  3080               	movlw	128
  6187  0D6C  027F               	subwf	127,w
  6188  0D6D  1D03               	skipz
  6189  0D6E  2D71               	goto	u2975
  6190  0D6F  3001               	movlw	1
  6191  0D70  027B               	subwf	RFDOUT@Nref,w
  6192  0D71                     u2975:	
  6193  0D71  1C03               	btfss	3,0
  6194  0D72  2DAA               	goto	l3291
  6195  0D73                     l3283:	
  6196                           
  6197                           ;FMCW.c: 209: Nref_b[i] = Nref % 2;
  6198  0D73  3001               	movlw	1
  6199  0D74  057B               	andwf	RFDOUT@Nref,w
  6200  0D75  1283               	bcf	3,5	;RP0=0, select bank0
  6201  0D76  1303               	bcf	3,6	;RP1=0, select bank0
  6202  0D77  00A0               	movwf	??_RFDOUT
  6203  0D78  3000               	movlw	0
  6204  0D79  057C               	andwf	RFDOUT@Nref+1,w
  6205  0D7A  00A1               	movwf	??_RFDOUT+1
  6206  0D7B  083B               	movf	RFDOUT@i_477,w
  6207  0D7C  00A2               	movwf	??_RFDOUT+2
  6208  0D7D  0722               	addwf	??_RFDOUT+2,w
  6209  0D7E  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6210  0D7F  0084               	movwf	4
  6211  0D80  0820               	movf	??_RFDOUT,w
  6212  0D81  1383               	bcf	3,7	;select IRP bank0
  6213  0D82  0080               	movwf	0
  6214  0D83  0A84               	incf	4,f
  6215  0D84  0821               	movf	??_RFDOUT+1,w
  6216  0D85  0080               	movwf	0
  6217                           
  6218                           ;FMCW.c: 210: Nref = Nref / 2;
  6219  0D86  3002               	movlw	2
  6220  0D87  00F0               	movwf	___awdiv@divisor
  6221  0D88  3000               	movlw	0
  6222  0D89  00F1               	movwf	___awdiv@divisor+1
  6223  0D8A  087C               	movf	RFDOUT@Nref+1,w
  6224  0D8B  00F3               	movwf	___awdiv@dividend+1
  6225  0D8C  087B               	movf	RFDOUT@Nref,w
  6226  0D8D  00F2               	movwf	___awdiv@dividend
  6227  0D8E  120A  158A  22E2  120A  158A  	fcall	___awdiv
  6228  0D93  0871               	movf	?___awdiv+1,w
  6229  0D94  00FC               	movwf	RFDOUT@Nref+1
  6230  0D95  0870               	movf	?___awdiv,w
  6231  0D96  00FB               	movwf	RFDOUT@Nref
  6232  0D97  3001               	movlw	1
  6233  0D98  1283               	bcf	3,5	;RP0=0, select bank0
  6234  0D99  1303               	bcf	3,6	;RP1=0, select bank0
  6235  0D9A  07BB               	addwf	RFDOUT@i_477,f
  6236  0D9B  1803               	skipnc
  6237  0D9C  0ABC               	incf	RFDOUT@i_477+1,f
  6238  0D9D  3000               	movlw	0
  6239  0D9E  07BC               	addwf	RFDOUT@i_477+1,f
  6240  0D9F  087C               	movf	RFDOUT@Nref+1,w
  6241  0DA0  3A80               	xorlw	128
  6242  0DA1  00FF               	movwf	127
  6243  0DA2  3080               	movlw	128
  6244  0DA3  027F               	subwf	127,w
  6245  0DA4  1D03               	skipz
  6246  0DA5  2DA8               	goto	u2985
  6247  0DA6  3001               	movlw	1
  6248  0DA7  027B               	subwf	RFDOUT@Nref,w
  6249  0DA8                     u2985:	
  6250  0DA8  1803               	skipnc
  6251  0DA9  2D73               	goto	l3283
  6252  0DAA                     l3291:	
  6253                           
  6254                           ;FMCW.c: 211: }
  6255                           ;FMCW.c: 214: for (int i=0; i<12; i++)
  6256  0DAA  1283               	bcf	3,5	;RP0=0, select bank0
  6257  0DAB  1303               	bcf	3,6	;RP1=0, select bank0
  6258  0DAC  01BF               	clrf	RFDOUT@i_478
  6259  0DAD  01C0               	clrf	RFDOUT@i_478+1
  6260  0DAE  0840               	movf	RFDOUT@i_478+1,w
  6261  0DAF  3A80               	xorlw	128
  6262  0DB0  00FF               	movwf	127
  6263  0DB1  3080               	movlw	128
  6264  0DB2  027F               	subwf	127,w
  6265  0DB3  1D03               	skipz
  6266  0DB4  2DB7               	goto	u2995
  6267  0DB5  300C               	movlw	12
  6268  0DB6  023F               	subwf	RFDOUT@i_478,w
  6269  0DB7                     u2995:	
  6270  0DB7  1803               	btfsc	3,0
  6271  0DB8  2E00               	goto	l3309
  6272  0DB9                     l3297:	
  6273                           
  6274                           ;FMCW.c: 215: {
  6275                           ;FMCW.c: 216: if(Nref_b[i] == 0)
  6276  0DB9  1283               	bcf	3,5	;RP0=0, select bank0
  6277  0DBA  1303               	bcf	3,6	;RP1=0, select bank0
  6278  0DBB  083F               	movf	RFDOUT@i_478,w
  6279  0DBC  00A0               	movwf	??_RFDOUT
  6280  0DBD  0720               	addwf	??_RFDOUT,w
  6281  0DBE  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6282  0DBF  0084               	movwf	4
  6283  0DC0  1383               	bcf	3,7	;select IRP bank0
  6284  0DC1  0800               	movf	0,w
  6285  0DC2  00A1               	movwf	??_RFDOUT+1
  6286  0DC3  0A84               	incf	4,f
  6287  0DC4  0800               	movf	0,w
  6288  0DC5  00A2               	movwf	??_RFDOUT+2
  6289  0DC6  0821               	movf	??_RFDOUT+1,w
  6290  0DC7  0422               	iorwf	??_RFDOUT+2,w
  6291  0DC8  1D03               	btfss	3,2
  6292  0DC9  2DD3               	goto	l3301
  6293                           
  6294                           ;FMCW.c: 217: {
  6295                           ;FMCW.c: 218: L_OUT(fmcwtxrx);
  6296  0DCA  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6297  0DCB  00F3               	movwf	L_OUT@fmcwtxrx+1
  6298  0DCC  0879               	movf	RFDOUT@fmcwtxrx,w
  6299  0DCD  00F2               	movwf	L_OUT@fmcwtxrx
  6300  0DCE  120A  158A  2209  120A  158A  	fcall	_L_OUT
  6301  0DD3                     l3301:	
  6302                           
  6303                           ;FMCW.c: 219: }
  6304                           ;FMCW.c: 220: if(Nref_b[i] == 1)
  6305  0DD3  1283               	bcf	3,5	;RP0=0, select bank0
  6306  0DD4  1303               	bcf	3,6	;RP1=0, select bank0
  6307  0DD5  083F               	movf	RFDOUT@i_478,w
  6308  0DD6  00A0               	movwf	??_RFDOUT
  6309  0DD7  0720               	addwf	??_RFDOUT,w
  6310  0DD8  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6311  0DD9  0084               	movwf	4
  6312  0DDA  1383               	bcf	3,7	;select IRP bank0
  6313  0DDB  0800               	movf	0,w
  6314  0DDC  00A1               	movwf	??_RFDOUT+1
  6315  0DDD  0A84               	incf	4,f
  6316  0DDE  0800               	movf	0,w
  6317  0DDF  00A2               	movwf	??_RFDOUT+2
  6318  0DE0  0321               	decf	??_RFDOUT+1,w
  6319  0DE1  0422               	iorwf	??_RFDOUT+2,w
  6320  0DE2  1D03               	btfss	3,2
  6321  0DE3  2DED               	goto	l3305
  6322                           
  6323                           ;FMCW.c: 221: {
  6324                           ;FMCW.c: 222: H_OUT(fmcwtxrx);
  6325  0DE4  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6326  0DE5  00F3               	movwf	H_OUT@fmcwtxrx+1
  6327  0DE6  0879               	movf	RFDOUT@fmcwtxrx,w
  6328  0DE7  00F2               	movwf	H_OUT@fmcwtxrx
  6329  0DE8  120A  158A  21C3  120A  158A  	fcall	_H_OUT
  6330  0DED                     l3305:	
  6331  0DED  3001               	movlw	1
  6332  0DEE  1283               	bcf	3,5	;RP0=0, select bank0
  6333  0DEF  1303               	bcf	3,6	;RP1=0, select bank0
  6334  0DF0  07BF               	addwf	RFDOUT@i_478,f
  6335  0DF1  1803               	skipnc
  6336  0DF2  0AC0               	incf	RFDOUT@i_478+1,f
  6337  0DF3  3000               	movlw	0
  6338  0DF4  07C0               	addwf	RFDOUT@i_478+1,f
  6339  0DF5  0840               	movf	RFDOUT@i_478+1,w
  6340  0DF6  3A80               	xorlw	128
  6341  0DF7  00FF               	movwf	127
  6342  0DF8  3080               	movlw	128
  6343  0DF9  027F               	subwf	127,w
  6344  0DFA  1D03               	skipz
  6345  0DFB  2DFE               	goto	u3025
  6346  0DFC  300C               	movlw	12
  6347  0DFD  023F               	subwf	RFDOUT@i_478,w
  6348  0DFE                     u3025:	
  6349  0DFE  1C03               	skipc
  6350  0DFF  2DB9               	goto	l3297
  6351  0E00                     l3309:	
  6352                           
  6353                           ;FMCW.c: 223: }
  6354                           ;FMCW.c: 224: }
  6355                           ;FMCW.c: 227: H_OUT(fmcwtxrx);
  6356  0E00  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6357  0E01  00F3               	movwf	H_OUT@fmcwtxrx+1
  6358  0E02  0879               	movf	RFDOUT@fmcwtxrx,w
  6359  0E03  00F2               	movwf	H_OUT@fmcwtxrx
  6360  0E04  120A  158A  21C3  120A  158A  	fcall	_H_OUT
  6361                           
  6362                           ;FMCW.c: 228: H_OUT(fmcwtxrx);
  6363  0E09  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6364  0E0A  00F3               	movwf	H_OUT@fmcwtxrx+1
  6365  0E0B  0879               	movf	RFDOUT@fmcwtxrx,w
  6366  0E0C  00F2               	movwf	H_OUT@fmcwtxrx
  6367  0E0D  120A  158A  21C3  120A  158A  	fcall	_H_OUT
  6368                           
  6369                           ;FMCW.c: 231: STBOUT(fmcwtxrx);
  6370  0E12  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6371  0E13  00F3               	movwf	STBOUT@fmcwtxrx+1
  6372  0E14  0879               	movf	RFDOUT@fmcwtxrx,w
  6373  0E15  00F2               	movwf	STBOUT@fmcwtxrx
  6374  0E16  120A  158A  2161   	fcall	_STBOUT
  6375  0E19  0008               	return
  6376  0E1A                     __end_of_RFDOUT:	
  6377                           
  6378                           	psect	text24
  6379  00AC                     __ptext24:	
  6380 ;; *************** function _OUTFQ *****************
  6381 ;; Defined at:
  6382 ;;		line 136 in file "FMCW.c"
  6383 ;; Parameters:    Size  Location     Type
  6384 ;;  fmcwtxrx        2    9[COMMON] int 
  6385 ;;  Nprg            2   11[COMMON] PTR int 
  6386 ;;		 -> RAM(512), main@FMRX_Nprg(10), main@CWTX_Nprg(10), main@FMTX_Nprg(10), 
  6387 ;;		 -> FMRX_Nprg(10), CWTX_Nprg(10), FMTX_Nprg(10), 
  6388 ;; Auto vars:     Size  Location     Type
  6389 ;;  j               2   58[BANK0 ] int 
  6390 ;;  i               2   56[BANK0 ] int 
  6391 ;;  i               2   50[BANK0 ] int 
  6392 ;;  i               2   54[BANK0 ] int 
  6393 ;;  Nprg_b         34   16[BANK0 ] int [17]
  6394 ;;  count           2   52[BANK0 ] int 
  6395 ;; Return value:  Size  Location     Type
  6396 ;;                  1    wreg      void 
  6397 ;; Registers used:
  6398 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6399 ;; Tracked objects:
  6400 ;;		On entry : 0/0
  6401 ;;		On exit  : 0/0
  6402 ;;		Unchanged: 0/0
  6403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6404 ;;      Params:         4       0       0       0       0
  6405 ;;      Locals:         0      44       0       0       0
  6406 ;;      Temps:          0      16       0       0       0
  6407 ;;      Totals:         4      60       0       0       0
  6408 ;;Total ram usage:       64 bytes
  6409 ;; Hardware stack levels used:    1
  6410 ;; Hardware stack levels required when called:    2
  6411 ;; This function calls:
  6412 ;;		_H_OUT
  6413 ;;		_L_OUT
  6414 ;;		_STBOUT
  6415 ;;		___awdiv
  6416 ;; This function is called by:
  6417 ;;		_FMTX
  6418 ;;		_CWTX
  6419 ;;		_FMRX
  6420 ;; This function uses a non-reentrant model
  6421 ;;
  6422                           
  6423                           
  6424                           ;psect for function _OUTFQ
  6425  00AC                     _OUTFQ:	
  6426                           
  6427                           ;FMCW.c: 137: int count = 0;
  6428                           
  6429                           ;incstack = 0
  6430                           ; Regs used in _OUTFQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6431  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  6432  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  6433  00AE  01D4               	clrf	OUTFQ@count
  6434  00AF  01D5               	clrf	OUTFQ@count+1
  6435                           
  6436                           ;FMCW.c: 138: int Nprg_b[17];
  6437                           ;FMCW.c: 140: for(int i=0; i<17; i++){
  6438  00B0  01D6               	clrf	OUTFQ@i
  6439  00B1  01D7               	clrf	OUTFQ@i+1
  6440  00B2  0857               	movf	OUTFQ@i+1,w
  6441  00B3  3A80               	xorlw	128
  6442  00B4  00FF               	movwf	127
  6443  00B5  3080               	movlw	128
  6444  00B6  027F               	subwf	127,w
  6445  00B7  1D03               	skipz
  6446  00B8  28BB               	goto	u2815
  6447  00B9  3011               	movlw	17
  6448  00BA  0256               	subwf	OUTFQ@i,w
  6449  00BB                     u2815:	
  6450  00BB  1803               	btfsc	3,0
  6451  00BC  28D9               	goto	l3199
  6452  00BD                     l3193:	
  6453                           
  6454                           ;FMCW.c: 141: Nprg_b[i] = 0;
  6455  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  6456  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  6457  00BF  0856               	movf	OUTFQ@i,w
  6458  00C0  00A0               	movwf	??_OUTFQ
  6459  00C1  0720               	addwf	??_OUTFQ,w
  6460  00C2  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6461  00C3  0084               	movwf	4
  6462  00C4  1383               	bcf	3,7	;select IRP bank0
  6463  00C5  0180               	clrf	0
  6464  00C6  0A84               	incf	4,f
  6465  00C7  0180               	clrf	0
  6466  00C8  3001               	movlw	1
  6467  00C9  07D6               	addwf	OUTFQ@i,f
  6468  00CA  1803               	skipnc
  6469  00CB  0AD7               	incf	OUTFQ@i+1,f
  6470  00CC  3000               	movlw	0
  6471  00CD  07D7               	addwf	OUTFQ@i+1,f
  6472  00CE  0857               	movf	OUTFQ@i+1,w
  6473  00CF  3A80               	xorlw	128
  6474  00D0  00FF               	movwf	127
  6475  00D1  3080               	movlw	128
  6476  00D2  027F               	subwf	127,w
  6477  00D3  1D03               	skipz
  6478  00D4  28D7               	goto	u2825
  6479  00D5  3011               	movlw	17
  6480  00D6  0256               	subwf	OUTFQ@i,w
  6481  00D7                     u2825:	
  6482  00D7  1C03               	skipc
  6483  00D8  28BD               	goto	l3193
  6484  00D9                     l3199:	
  6485                           
  6486                           ;FMCW.c: 142: }
  6487                           ;FMCW.c: 145: for(int i = 0; i < 17; i++){
  6488  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  6489  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  6490  00DB  01D2               	clrf	OUTFQ@i_466
  6491  00DC  01D3               	clrf	OUTFQ@i_466+1
  6492  00DD  0853               	movf	OUTFQ@i_466+1,w
  6493  00DE  3A80               	xorlw	128
  6494  00DF  00FF               	movwf	127
  6495  00E0  3080               	movlw	128
  6496  00E1  027F               	subwf	127,w
  6497  00E2  1D03               	skipz
  6498  00E3  28E6               	goto	u2835
  6499  00E4  3011               	movlw	17
  6500  00E5  0252               	subwf	OUTFQ@i_466,w
  6501  00E6                     u2835:	
  6502  00E6  1803               	btfsc	3,0
  6503  00E7  2AB7               	goto	l3245
  6504  00E8                     l3205:	
  6505                           
  6506                           ;FMCW.c: 146: for(int j = 0; j<5; j++){
  6507  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  6508  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  6509  00EA  01DA               	clrf	OUTFQ@j
  6510  00EB  01DB               	clrf	OUTFQ@j+1
  6511  00EC  085B               	movf	OUTFQ@j+1,w
  6512  00ED  3A80               	xorlw	128
  6513  00EE  00FF               	movwf	127
  6514  00EF  3080               	movlw	128
  6515  00F0  027F               	subwf	127,w
  6516  00F1  1D03               	skipz
  6517  00F2  28F5               	goto	u2845
  6518  00F3  3005               	movlw	5
  6519  00F4  025A               	subwf	OUTFQ@j,w
  6520  00F5                     u2845:	
  6521  00F5  1803               	btfsc	3,0
  6522  00F6  2AA4               	goto	l3241
  6523  00F7                     l3211:	
  6524                           
  6525                           ;FMCW.c: 147: if(Nprg[j] % 2 == 0) {
  6526  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  6527  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  6528  00F9  085B               	movf	OUTFQ@j+1,w
  6529  00FA  00A1               	movwf	??_OUTFQ+1
  6530  00FB  085A               	movf	OUTFQ@j,w
  6531  00FC  00A0               	movwf	??_OUTFQ
  6532  00FD  1003               	clrc
  6533  00FE  0DA0               	rlf	??_OUTFQ,f
  6534  00FF  0DA1               	rlf	??_OUTFQ+1,f
  6535  0100  0820               	movf	??_OUTFQ,w
  6536  0101  077B               	addwf	OUTFQ@Nprg,w
  6537  0102  00A2               	movwf	??_OUTFQ+2
  6538  0103  0821               	movf	??_OUTFQ+1,w
  6539  0104  1803               	skipnc
  6540  0105  0A21               	incf	??_OUTFQ+1,w
  6541  0106  077C               	addwf	OUTFQ@Nprg+1,w
  6542  0107  00A3               	movwf	??_OUTFQ+3
  6543  0108  0822               	movf	??_OUTFQ+2,w
  6544  0109  0084               	movwf	4
  6545  010A  1783               	bsf	3,7
  6546  010B  1C23               	btfss	??_OUTFQ+3,0
  6547  010C  1383               	bcf	3,7
  6548  010D  0800               	movf	0,w
  6549  010E  00A4               	movwf	??_OUTFQ+4
  6550  010F  0A84               	incf	4,f
  6551  0110  0800               	movf	0,w
  6552  0111  00A5               	movwf	??_OUTFQ+5
  6553  0112  1824               	btfsc	??_OUTFQ+4,0
  6554  0113  299D               	goto	l3223
  6555                           
  6556                           ;FMCW.c: 148: if(j == 4){
  6557  0114  3004               	movlw	4
  6558  0115  065A               	xorwf	OUTFQ@j,w
  6559  0116  045B               	iorwf	OUTFQ@j+1,w
  6560  0117  1D03               	btfss	3,2
  6561  0118  2960               	goto	l3221
  6562                           
  6563                           ;FMCW.c: 149: Nprg[j] = Nprg[j] / 2;
  6564  0119  3002               	movlw	2
  6565  011A  00F0               	movwf	___awdiv@divisor
  6566  011B  3000               	movlw	0
  6567  011C  00F1               	movwf	___awdiv@divisor+1
  6568  011D  085B               	movf	OUTFQ@j+1,w
  6569  011E  00A1               	movwf	??_OUTFQ+1
  6570  011F  085A               	movf	OUTFQ@j,w
  6571  0120  00A0               	movwf	??_OUTFQ
  6572  0121  1003               	clrc
  6573  0122  0DA0               	rlf	??_OUTFQ,f
  6574  0123  0DA1               	rlf	??_OUTFQ+1,f
  6575  0124  0820               	movf	??_OUTFQ,w
  6576  0125  077B               	addwf	OUTFQ@Nprg,w
  6577  0126  00A2               	movwf	??_OUTFQ+2
  6578  0127  0821               	movf	??_OUTFQ+1,w
  6579  0128  1803               	skipnc
  6580  0129  0A21               	incf	??_OUTFQ+1,w
  6581  012A  077C               	addwf	OUTFQ@Nprg+1,w
  6582  012B  00A3               	movwf	??_OUTFQ+3
  6583  012C  0822               	movf	??_OUTFQ+2,w
  6584  012D  0084               	movwf	4
  6585  012E  1783               	bsf	3,7
  6586  012F  1C23               	btfss	??_OUTFQ+3,0
  6587  0130  1383               	bcf	3,7
  6588  0131  0800               	movf	0,w
  6589  0132  00F2               	movwf	___awdiv@dividend
  6590  0133  0A84               	incf	4,f
  6591  0134  0800               	movf	0,w
  6592  0135  00F3               	movwf	___awdiv@dividend+1
  6593  0136  120A  158A  22E2  120A  118A  	fcall	___awdiv
  6594  013B  1283               	bcf	3,5	;RP0=0, select bank0
  6595  013C  1303               	bcf	3,6	;RP1=0, select bank0
  6596  013D  085B               	movf	OUTFQ@j+1,w
  6597  013E  00A5               	movwf	??_OUTFQ+5
  6598  013F  085A               	movf	OUTFQ@j,w
  6599  0140  00A4               	movwf	??_OUTFQ+4
  6600  0141  1003               	clrc
  6601  0142  0DA4               	rlf	??_OUTFQ+4,f
  6602  0143  0DA5               	rlf	??_OUTFQ+5,f
  6603  0144  0824               	movf	??_OUTFQ+4,w
  6604  0145  077B               	addwf	OUTFQ@Nprg,w
  6605  0146  00A6               	movwf	??_OUTFQ+6
  6606  0147  0825               	movf	??_OUTFQ+5,w
  6607  0148  1803               	skipnc
  6608  0149  0A25               	incf	??_OUTFQ+5,w
  6609  014A  077C               	addwf	OUTFQ@Nprg+1,w
  6610  014B  00A7               	movwf	??_OUTFQ+7
  6611  014C  0826               	movf	??_OUTFQ+6,w
  6612  014D  0084               	movwf	4
  6613  014E  1783               	bsf	3,7
  6614  014F  1C27               	btfss	??_OUTFQ+7,0
  6615  0150  1383               	bcf	3,7
  6616  0151  0870               	movf	?___awdiv,w
  6617  0152  0080               	movwf	0
  6618  0153  0A84               	incf	4,f
  6619  0154  0871               	movf	?___awdiv+1,w
  6620  0155  0080               	movwf	0
  6621                           
  6622                           ;FMCW.c: 150: Nprg_b[count] = 0;
  6623  0156  0854               	movf	OUTFQ@count,w
  6624  0157  00A0               	movwf	??_OUTFQ
  6625  0158  0720               	addwf	??_OUTFQ,w
  6626  0159  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6627  015A  0084               	movwf	4
  6628  015B  1383               	bcf	3,7	;select IRP bank0
  6629  015C  0180               	clrf	0
  6630  015D  0A84               	incf	4,f
  6631  015E  0180               	clrf	0
  6632  015F  2A05               	goto	l3231
  6633  0160                     l3221:	
  6634                           ;FMCW.c: 152: }
  6635                           
  6636                           ;FMCW.c: 151: count++;
  6637                           
  6638                           
  6639                           ;FMCW.c: 153: else{
  6640                           ;FMCW.c: 154: Nprg[j] = Nprg[j] / 2;
  6641  0160  3002               	movlw	2
  6642  0161  00F0               	movwf	___awdiv@divisor
  6643  0162  3000               	movlw	0
  6644  0163  00F1               	movwf	___awdiv@divisor+1
  6645  0164  085B               	movf	OUTFQ@j+1,w
  6646  0165  00A1               	movwf	??_OUTFQ+1
  6647  0166  085A               	movf	OUTFQ@j,w
  6648  0167  00A0               	movwf	??_OUTFQ
  6649  0168  1003               	clrc
  6650  0169  0DA0               	rlf	??_OUTFQ,f
  6651  016A  0DA1               	rlf	??_OUTFQ+1,f
  6652  016B  0820               	movf	??_OUTFQ,w
  6653  016C  077B               	addwf	OUTFQ@Nprg,w
  6654  016D  00A2               	movwf	??_OUTFQ+2
  6655  016E  0821               	movf	??_OUTFQ+1,w
  6656  016F  1803               	skipnc
  6657  0170  0A21               	incf	??_OUTFQ+1,w
  6658  0171  077C               	addwf	OUTFQ@Nprg+1,w
  6659  0172  00A3               	movwf	??_OUTFQ+3
  6660  0173  0822               	movf	??_OUTFQ+2,w
  6661  0174  0084               	movwf	4
  6662  0175  1783               	bsf	3,7
  6663  0176  1C23               	btfss	??_OUTFQ+3,0
  6664  0177  1383               	bcf	3,7
  6665  0178  0800               	movf	0,w
  6666  0179  00F2               	movwf	___awdiv@dividend
  6667  017A  0A84               	incf	4,f
  6668  017B  0800               	movf	0,w
  6669  017C  00F3               	movwf	___awdiv@dividend+1
  6670  017D  120A  158A  22E2  120A  118A  	fcall	___awdiv
  6671  0182  1283               	bcf	3,5	;RP0=0, select bank0
  6672  0183  1303               	bcf	3,6	;RP1=0, select bank0
  6673  0184  085B               	movf	OUTFQ@j+1,w
  6674  0185  00A5               	movwf	??_OUTFQ+5
  6675  0186  085A               	movf	OUTFQ@j,w
  6676  0187  00A4               	movwf	??_OUTFQ+4
  6677  0188  1003               	clrc
  6678  0189  0DA4               	rlf	??_OUTFQ+4,f
  6679  018A  0DA5               	rlf	??_OUTFQ+5,f
  6680  018B  0824               	movf	??_OUTFQ+4,w
  6681  018C  077B               	addwf	OUTFQ@Nprg,w
  6682  018D  00A6               	movwf	??_OUTFQ+6
  6683  018E  0825               	movf	??_OUTFQ+5,w
  6684  018F  1803               	skipnc
  6685  0190  0A25               	incf	??_OUTFQ+5,w
  6686  0191  077C               	addwf	OUTFQ@Nprg+1,w
  6687  0192  00A7               	movwf	??_OUTFQ+7
  6688  0193  0826               	movf	??_OUTFQ+6,w
  6689  0194  0084               	movwf	4
  6690  0195  1783               	bsf	3,7
  6691  0196  1C27               	btfss	??_OUTFQ+7,0
  6692  0197  1383               	bcf	3,7
  6693  0198  0870               	movf	?___awdiv,w
  6694  0199  0080               	movwf	0
  6695  019A  0A84               	incf	4,f
  6696  019B  0871               	movf	?___awdiv+1,w
  6697  019C  2A92               	goto	L8
  6698  019D                     l3223:	
  6699                           ;FMCW.c: 155: }
  6700                           ;FMCW.c: 156: }
  6701                           
  6702                           
  6703                           ;FMCW.c: 157: else if(Nprg[j] % 2 == 1) {
  6704  019D  085B               	movf	OUTFQ@j+1,w
  6705  019E  00A1               	movwf	??_OUTFQ+1
  6706  019F  085A               	movf	OUTFQ@j,w
  6707  01A0  00A0               	movwf	??_OUTFQ
  6708  01A1  1003               	clrc
  6709  01A2  0DA0               	rlf	??_OUTFQ,f
  6710  01A3  0DA1               	rlf	??_OUTFQ+1,f
  6711  01A4  0820               	movf	??_OUTFQ,w
  6712  01A5  077B               	addwf	OUTFQ@Nprg,w
  6713  01A6  00A2               	movwf	??_OUTFQ+2
  6714  01A7  0821               	movf	??_OUTFQ+1,w
  6715  01A8  1803               	skipnc
  6716  01A9  0A21               	incf	??_OUTFQ+1,w
  6717  01AA  077C               	addwf	OUTFQ@Nprg+1,w
  6718  01AB  00A3               	movwf	??_OUTFQ+3
  6719  01AC  0822               	movf	??_OUTFQ+2,w
  6720  01AD  0084               	movwf	4
  6721  01AE  1783               	bsf	3,7
  6722  01AF  1C23               	btfss	??_OUTFQ+3,0
  6723  01B0  1383               	bcf	3,7
  6724  01B1  0800               	movf	0,w
  6725  01B2  00A4               	movwf	??_OUTFQ+4
  6726  01B3  0A84               	incf	4,f
  6727  01B4  0800               	movf	0,w
  6728  01B5  00A5               	movwf	??_OUTFQ+5
  6729  01B6  1C24               	btfss	??_OUTFQ+4,0
  6730  01B7  2A93               	goto	l3237
  6731                           
  6732                           ;FMCW.c: 158: if(j == 4){
  6733  01B8  3004               	movlw	4
  6734  01B9  065A               	xorwf	OUTFQ@j,w
  6735  01BA  045B               	iorwf	OUTFQ@j+1,w
  6736  01BB  1D03               	btfss	3,2
  6737  01BC  2A0C               	goto	l3233
  6738                           
  6739                           ;FMCW.c: 159: Nprg[j] = Nprg[j] / 2;
  6740  01BD  3002               	movlw	2
  6741  01BE  00F0               	movwf	___awdiv@divisor
  6742  01BF  3000               	movlw	0
  6743  01C0  00F1               	movwf	___awdiv@divisor+1
  6744  01C1  085B               	movf	OUTFQ@j+1,w
  6745  01C2  00A1               	movwf	??_OUTFQ+1
  6746  01C3  085A               	movf	OUTFQ@j,w
  6747  01C4  00A0               	movwf	??_OUTFQ
  6748  01C5  1003               	clrc
  6749  01C6  0DA0               	rlf	??_OUTFQ,f
  6750  01C7  0DA1               	rlf	??_OUTFQ+1,f
  6751  01C8  0820               	movf	??_OUTFQ,w
  6752  01C9  077B               	addwf	OUTFQ@Nprg,w
  6753  01CA  00A2               	movwf	??_OUTFQ+2
  6754  01CB  0821               	movf	??_OUTFQ+1,w
  6755  01CC  1803               	skipnc
  6756  01CD  0A21               	incf	??_OUTFQ+1,w
  6757  01CE  077C               	addwf	OUTFQ@Nprg+1,w
  6758  01CF  00A3               	movwf	??_OUTFQ+3
  6759  01D0  0822               	movf	??_OUTFQ+2,w
  6760  01D1  0084               	movwf	4
  6761  01D2  1783               	bsf	3,7
  6762  01D3  1C23               	btfss	??_OUTFQ+3,0
  6763  01D4  1383               	bcf	3,7
  6764  01D5  0800               	movf	0,w
  6765  01D6  00F2               	movwf	___awdiv@dividend
  6766  01D7  0A84               	incf	4,f
  6767  01D8  0800               	movf	0,w
  6768  01D9  00F3               	movwf	___awdiv@dividend+1
  6769  01DA  120A  158A  22E2  120A  118A  	fcall	___awdiv
  6770  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  6771  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  6772  01E1  085B               	movf	OUTFQ@j+1,w
  6773  01E2  00A5               	movwf	??_OUTFQ+5
  6774  01E3  085A               	movf	OUTFQ@j,w
  6775  01E4  00A4               	movwf	??_OUTFQ+4
  6776  01E5  1003               	clrc
  6777  01E6  0DA4               	rlf	??_OUTFQ+4,f
  6778  01E7  0DA5               	rlf	??_OUTFQ+5,f
  6779  01E8  0824               	movf	??_OUTFQ+4,w
  6780  01E9  077B               	addwf	OUTFQ@Nprg,w
  6781  01EA  00A6               	movwf	??_OUTFQ+6
  6782  01EB  0825               	movf	??_OUTFQ+5,w
  6783  01EC  1803               	skipnc
  6784  01ED  0A25               	incf	??_OUTFQ+5,w
  6785  01EE  077C               	addwf	OUTFQ@Nprg+1,w
  6786  01EF  00A7               	movwf	??_OUTFQ+7
  6787  01F0  0826               	movf	??_OUTFQ+6,w
  6788  01F1  0084               	movwf	4
  6789  01F2  1783               	bsf	3,7
  6790  01F3  1C27               	btfss	??_OUTFQ+7,0
  6791  01F4  1383               	bcf	3,7
  6792  01F5  0870               	movf	?___awdiv,w
  6793  01F6  0080               	movwf	0
  6794  01F7  0A84               	incf	4,f
  6795  01F8  0871               	movf	?___awdiv+1,w
  6796  01F9  0080               	movwf	0
  6797                           
  6798                           ;FMCW.c: 160: Nprg_b[count] = 1;
  6799  01FA  0854               	movf	OUTFQ@count,w
  6800  01FB  00A0               	movwf	??_OUTFQ
  6801  01FC  0720               	addwf	??_OUTFQ,w
  6802  01FD  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6803  01FE  0084               	movwf	4
  6804  01FF  3001               	movlw	1
  6805  0200  1383               	bcf	3,7	;select IRP bank0
  6806  0201  0080               	movwf	0
  6807  0202  0A84               	incf	4,f
  6808  0203  3000               	movlw	0
  6809  0204  0080               	movwf	0
  6810  0205                     l3231:	
  6811                           
  6812                           ;FMCW.c: 161: count++;
  6813  0205  3001               	movlw	1
  6814  0206  07D4               	addwf	OUTFQ@count,f
  6815  0207  1803               	skipnc
  6816  0208  0AD5               	incf	OUTFQ@count+1,f
  6817  0209  3000               	movlw	0
  6818  020A  07D5               	addwf	OUTFQ@count+1,f
  6819                           
  6820                           ;FMCW.c: 162: }
  6821  020B  2A93               	goto	l3237
  6822  020C                     l3233:	
  6823                           
  6824                           ;FMCW.c: 163: else{
  6825                           ;FMCW.c: 164: Nprg[j] = Nprg[j] / 2;
  6826  020C  3002               	movlw	2
  6827  020D  00F0               	movwf	___awdiv@divisor
  6828  020E  3000               	movlw	0
  6829  020F  00F1               	movwf	___awdiv@divisor+1
  6830  0210  085B               	movf	OUTFQ@j+1,w
  6831  0211  00A1               	movwf	??_OUTFQ+1
  6832  0212  085A               	movf	OUTFQ@j,w
  6833  0213  00A0               	movwf	??_OUTFQ
  6834  0214  1003               	clrc
  6835  0215  0DA0               	rlf	??_OUTFQ,f
  6836  0216  0DA1               	rlf	??_OUTFQ+1,f
  6837  0217  0820               	movf	??_OUTFQ,w
  6838  0218  077B               	addwf	OUTFQ@Nprg,w
  6839  0219  00A2               	movwf	??_OUTFQ+2
  6840  021A  0821               	movf	??_OUTFQ+1,w
  6841  021B  1803               	skipnc
  6842  021C  0A21               	incf	??_OUTFQ+1,w
  6843  021D  077C               	addwf	OUTFQ@Nprg+1,w
  6844  021E  00A3               	movwf	??_OUTFQ+3
  6845  021F  0822               	movf	??_OUTFQ+2,w
  6846  0220  0084               	movwf	4
  6847  0221  1783               	bsf	3,7
  6848  0222  1C23               	btfss	??_OUTFQ+3,0
  6849  0223  1383               	bcf	3,7
  6850  0224  0800               	movf	0,w
  6851  0225  00F2               	movwf	___awdiv@dividend
  6852  0226  0A84               	incf	4,f
  6853  0227  0800               	movf	0,w
  6854  0228  00F3               	movwf	___awdiv@dividend+1
  6855  0229  120A  158A  22E2  120A  118A  	fcall	___awdiv
  6856  022E  1283               	bcf	3,5	;RP0=0, select bank0
  6857  022F  1303               	bcf	3,6	;RP1=0, select bank0
  6858  0230  085B               	movf	OUTFQ@j+1,w
  6859  0231  00A5               	movwf	??_OUTFQ+5
  6860  0232  085A               	movf	OUTFQ@j,w
  6861  0233  00A4               	movwf	??_OUTFQ+4
  6862  0234  1003               	clrc
  6863  0235  0DA4               	rlf	??_OUTFQ+4,f
  6864  0236  0DA5               	rlf	??_OUTFQ+5,f
  6865  0237  0824               	movf	??_OUTFQ+4,w
  6866  0238  077B               	addwf	OUTFQ@Nprg,w
  6867  0239  00A6               	movwf	??_OUTFQ+6
  6868  023A  0825               	movf	??_OUTFQ+5,w
  6869  023B  1803               	skipnc
  6870  023C  0A25               	incf	??_OUTFQ+5,w
  6871  023D  077C               	addwf	OUTFQ@Nprg+1,w
  6872  023E  00A7               	movwf	??_OUTFQ+7
  6873  023F  0826               	movf	??_OUTFQ+6,w
  6874  0240  0084               	movwf	4
  6875  0241  1783               	bsf	3,7
  6876  0242  1C27               	btfss	??_OUTFQ+7,0
  6877  0243  1383               	bcf	3,7
  6878  0244  0870               	movf	?___awdiv,w
  6879  0245  0080               	movwf	0
  6880  0246  0A84               	incf	4,f
  6881  0247  0871               	movf	?___awdiv+1,w
  6882  0248  0080               	movwf	0
  6883                           
  6884                           ;FMCW.c: 165: Nprg[j+1] = Nprg[j+1] + 10;
  6885  0249  085B               	movf	OUTFQ@j+1,w
  6886  024A  00A1               	movwf	??_OUTFQ+1
  6887  024B  085A               	movf	OUTFQ@j,w
  6888  024C  00A0               	movwf	??_OUTFQ
  6889  024D  1003               	clrc
  6890  024E  0DA0               	rlf	??_OUTFQ,f
  6891  024F  0DA1               	rlf	??_OUTFQ+1,f
  6892  0250  0820               	movf	??_OUTFQ,w
  6893  0251  3E02               	addlw	2
  6894  0252  00A2               	movwf	??_OUTFQ+2
  6895  0253  0821               	movf	??_OUTFQ+1,w
  6896  0254  1803               	skipnc
  6897  0255  3E01               	addlw	1
  6898  0256  3E00               	addlw	0
  6899  0257  00A3               	movwf	??_OUTFQ+3
  6900  0258  0822               	movf	??_OUTFQ+2,w
  6901  0259  077B               	addwf	OUTFQ@Nprg,w
  6902  025A  00A4               	movwf	??_OUTFQ+4
  6903  025B  0823               	movf	??_OUTFQ+3,w
  6904  025C  1803               	skipnc
  6905  025D  0A23               	incf	??_OUTFQ+3,w
  6906  025E  077C               	addwf	OUTFQ@Nprg+1,w
  6907  025F  00A5               	movwf	??_OUTFQ+5
  6908  0260  0824               	movf	??_OUTFQ+4,w
  6909  0261  0084               	movwf	4
  6910  0262  1783               	bsf	3,7
  6911  0263  1C25               	btfss	??_OUTFQ+5,0
  6912  0264  1383               	bcf	3,7
  6913  0265  0800               	movf	0,w
  6914  0266  00A6               	movwf	??_OUTFQ+6
  6915  0267  0A84               	incf	4,f
  6916  0268  0800               	movf	0,w
  6917  0269  00A7               	movwf	??_OUTFQ+7
  6918  026A  0826               	movf	??_OUTFQ+6,w
  6919  026B  3E0A               	addlw	10
  6920  026C  00A8               	movwf	??_OUTFQ+8
  6921  026D  0827               	movf	??_OUTFQ+7,w
  6922  026E  1803               	skipnc
  6923  026F  3E01               	addlw	1
  6924  0270  3E00               	addlw	0
  6925  0271  00A9               	movwf	??_OUTFQ+9
  6926  0272  085B               	movf	OUTFQ@j+1,w
  6927  0273  00AB               	movwf	??_OUTFQ+11
  6928  0274  085A               	movf	OUTFQ@j,w
  6929  0275  00AA               	movwf	??_OUTFQ+10
  6930  0276  1003               	clrc
  6931  0277  0DAA               	rlf	??_OUTFQ+10,f
  6932  0278  0DAB               	rlf	??_OUTFQ+11,f
  6933  0279  082A               	movf	??_OUTFQ+10,w
  6934  027A  3E02               	addlw	2
  6935  027B  00AC               	movwf	??_OUTFQ+12
  6936  027C  082B               	movf	??_OUTFQ+11,w
  6937  027D  1803               	skipnc
  6938  027E  3E01               	addlw	1
  6939  027F  3E00               	addlw	0
  6940  0280  00AD               	movwf	??_OUTFQ+13
  6941  0281  082C               	movf	??_OUTFQ+12,w
  6942  0282  077B               	addwf	OUTFQ@Nprg,w
  6943  0283  00AE               	movwf	??_OUTFQ+14
  6944  0284  082D               	movf	??_OUTFQ+13,w
  6945  0285  1803               	skipnc
  6946  0286  0A2D               	incf	??_OUTFQ+13,w
  6947  0287  077C               	addwf	OUTFQ@Nprg+1,w
  6948  0288  00AF               	movwf	??_OUTFQ+15
  6949  0289  082E               	movf	??_OUTFQ+14,w
  6950  028A  0084               	movwf	4
  6951  028B  1783               	bsf	3,7
  6952  028C  1C2F               	btfss	??_OUTFQ+15,0
  6953  028D  1383               	bcf	3,7
  6954  028E  0828               	movf	??_OUTFQ+8,w
  6955  028F  0080               	movwf	0
  6956  0290  0A84               	incf	4,f
  6957  0291  0829               	movf	??_OUTFQ+9,w
  6958  0292                     L8:	
  6959  0292  0080               	movwf	0
  6960  0293                     l3237:	
  6961  0293  3001               	movlw	1
  6962  0294  07DA               	addwf	OUTFQ@j,f
  6963  0295  1803               	skipnc
  6964  0296  0ADB               	incf	OUTFQ@j+1,f
  6965  0297  3000               	movlw	0
  6966  0298  07DB               	addwf	OUTFQ@j+1,f
  6967  0299  085B               	movf	OUTFQ@j+1,w
  6968  029A  3A80               	xorlw	128
  6969  029B  00FF               	movwf	127
  6970  029C  3080               	movlw	128
  6971  029D  027F               	subwf	127,w
  6972  029E  1D03               	skipz
  6973  029F  2AA2               	goto	u2895
  6974  02A0  3005               	movlw	5
  6975  02A1  025A               	subwf	OUTFQ@j,w
  6976  02A2                     u2895:	
  6977  02A2  1C03               	skipc
  6978  02A3  28F7               	goto	l3211
  6979  02A4                     l3241:	
  6980  02A4  3001               	movlw	1
  6981  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  6982  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  6983  02A7  07D2               	addwf	OUTFQ@i_466,f
  6984  02A8  1803               	skipnc
  6985  02A9  0AD3               	incf	OUTFQ@i_466+1,f
  6986  02AA  3000               	movlw	0
  6987  02AB  07D3               	addwf	OUTFQ@i_466+1,f
  6988  02AC  0853               	movf	OUTFQ@i_466+1,w
  6989  02AD  3A80               	xorlw	128
  6990  02AE  00FF               	movwf	127
  6991  02AF  3080               	movlw	128
  6992  02B0  027F               	subwf	127,w
  6993  02B1  1D03               	skipz
  6994  02B2  2AB5               	goto	u2905
  6995  02B3  3011               	movlw	17
  6996  02B4  0252               	subwf	OUTFQ@i_466,w
  6997  02B5                     u2905:	
  6998  02B5  1C03               	skipc
  6999  02B6  28E8               	goto	l3205
  7000  02B7                     l3245:	
  7001                           
  7002                           ;FMCW.c: 166: }
  7003                           ;FMCW.c: 167: }
  7004                           ;FMCW.c: 168: }
  7005                           ;FMCW.c: 169: }
  7006                           ;FMCW.c: 172: for (int i=0; i<17; i++)
  7007  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  7008  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  7009  02B9  01D8               	clrf	OUTFQ@i_468
  7010  02BA  01D9               	clrf	OUTFQ@i_468+1
  7011  02BB  0859               	movf	OUTFQ@i_468+1,w
  7012  02BC  3A80               	xorlw	128
  7013  02BD  00FF               	movwf	127
  7014  02BE  3080               	movlw	128
  7015  02BF  027F               	subwf	127,w
  7016  02C0  1D03               	skipz
  7017  02C1  2AC4               	goto	u2915
  7018  02C2  3011               	movlw	17
  7019  02C3  0258               	subwf	OUTFQ@i_468,w
  7020  02C4                     u2915:	
  7021  02C4  1803               	btfsc	3,0
  7022  02C5  2B0D               	goto	l3263
  7023  02C6                     l3251:	
  7024                           
  7025                           ;FMCW.c: 173: {
  7026                           ;FMCW.c: 174: if(Nprg_b[i] == 0)
  7027  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  7028  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  7029  02C8  0858               	movf	OUTFQ@i_468,w
  7030  02C9  00A0               	movwf	??_OUTFQ
  7031  02CA  0720               	addwf	??_OUTFQ,w
  7032  02CB  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  7033  02CC  0084               	movwf	4
  7034  02CD  1383               	bcf	3,7	;select IRP bank0
  7035  02CE  0800               	movf	0,w
  7036  02CF  00A1               	movwf	??_OUTFQ+1
  7037  02D0  0A84               	incf	4,f
  7038  02D1  0800               	movf	0,w
  7039  02D2  00A2               	movwf	??_OUTFQ+2
  7040  02D3  0821               	movf	??_OUTFQ+1,w
  7041  02D4  0422               	iorwf	??_OUTFQ+2,w
  7042  02D5  1D03               	btfss	3,2
  7043  02D6  2AE0               	goto	l3255
  7044                           
  7045                           ;FMCW.c: 175: {
  7046                           ;FMCW.c: 176: L_OUT(fmcwtxrx);
  7047  02D7  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7048  02D8  00F3               	movwf	L_OUT@fmcwtxrx+1
  7049  02D9  0879               	movf	OUTFQ@fmcwtxrx,w
  7050  02DA  00F2               	movwf	L_OUT@fmcwtxrx
  7051  02DB  120A  158A  2209  120A  118A  	fcall	_L_OUT
  7052  02E0                     l3255:	
  7053                           
  7054                           ;FMCW.c: 177: }
  7055                           ;FMCW.c: 178: if(Nprg_b[i] == 1)
  7056  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  7057  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  7058  02E2  0858               	movf	OUTFQ@i_468,w
  7059  02E3  00A0               	movwf	??_OUTFQ
  7060  02E4  0720               	addwf	??_OUTFQ,w
  7061  02E5  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  7062  02E6  0084               	movwf	4
  7063  02E7  1383               	bcf	3,7	;select IRP bank0
  7064  02E8  0800               	movf	0,w
  7065  02E9  00A1               	movwf	??_OUTFQ+1
  7066  02EA  0A84               	incf	4,f
  7067  02EB  0800               	movf	0,w
  7068  02EC  00A2               	movwf	??_OUTFQ+2
  7069  02ED  0321               	decf	??_OUTFQ+1,w
  7070  02EE  0422               	iorwf	??_OUTFQ+2,w
  7071  02EF  1D03               	btfss	3,2
  7072  02F0  2AFA               	goto	l3259
  7073                           
  7074                           ;FMCW.c: 179: {
  7075                           ;FMCW.c: 180: H_OUT(fmcwtxrx);
  7076  02F1  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7077  02F2  00F3               	movwf	H_OUT@fmcwtxrx+1
  7078  02F3  0879               	movf	OUTFQ@fmcwtxrx,w
  7079  02F4  00F2               	movwf	H_OUT@fmcwtxrx
  7080  02F5  120A  158A  21C3  120A  118A  	fcall	_H_OUT
  7081  02FA                     l3259:	
  7082  02FA  3001               	movlw	1
  7083  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  7084  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  7085  02FD  07D8               	addwf	OUTFQ@i_468,f
  7086  02FE  1803               	skipnc
  7087  02FF  0AD9               	incf	OUTFQ@i_468+1,f
  7088  0300  3000               	movlw	0
  7089  0301  07D9               	addwf	OUTFQ@i_468+1,f
  7090  0302  0859               	movf	OUTFQ@i_468+1,w
  7091  0303  3A80               	xorlw	128
  7092  0304  00FF               	movwf	127
  7093  0305  3080               	movlw	128
  7094  0306  027F               	subwf	127,w
  7095  0307  1D03               	skipz
  7096  0308  2B0B               	goto	u2945
  7097  0309  3011               	movlw	17
  7098  030A  0258               	subwf	OUTFQ@i_468,w
  7099  030B                     u2945:	
  7100  030B  1C03               	skipc
  7101  030C  2AC6               	goto	l3251
  7102  030D                     l3263:	
  7103                           
  7104                           ;FMCW.c: 181: }
  7105                           ;FMCW.c: 182: }
  7106                           ;FMCW.c: 185: H_OUT(fmcwtxrx);
  7107  030D  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7108  030E  00F3               	movwf	H_OUT@fmcwtxrx+1
  7109  030F  0879               	movf	OUTFQ@fmcwtxrx,w
  7110  0310  00F2               	movwf	H_OUT@fmcwtxrx
  7111  0311  120A  158A  21C3  120A  118A  	fcall	_H_OUT
  7112                           
  7113                           ;FMCW.c: 186: L_OUT(fmcwtxrx);
  7114  0316  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7115  0317  00F3               	movwf	L_OUT@fmcwtxrx+1
  7116  0318  0879               	movf	OUTFQ@fmcwtxrx,w
  7117  0319  00F2               	movwf	L_OUT@fmcwtxrx
  7118  031A  120A  158A  2209  120A  118A  	fcall	_L_OUT
  7119                           
  7120                           ;FMCW.c: 189: STBOUT(fmcwtxrx);
  7121  031F  087A               	movf	OUTFQ@fmcwtxrx+1,w
  7122  0320  00F3               	movwf	STBOUT@fmcwtxrx+1
  7123  0321  0879               	movf	OUTFQ@fmcwtxrx,w
  7124  0322  00F2               	movwf	STBOUT@fmcwtxrx
  7125  0323  120A  158A  2161   	fcall	_STBOUT
  7126  0326  0008               	return
  7127  0327                     __end_of_OUTFQ:	
  7128                           
  7129                           	psect	text25
  7130  0AE2                     __ptext25:	
  7131 ;; *************** function ___awdiv *****************
  7132 ;; Defined at:
  7133 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  7134 ;; Parameters:    Size  Location     Type
  7135 ;;  divisor         2    0[COMMON] int 
  7136 ;;  dividend        2    2[COMMON] int 
  7137 ;; Auto vars:     Size  Location     Type
  7138 ;;  quotient        2    7[COMMON] int 
  7139 ;;  sign            1    6[COMMON] unsigned char 
  7140 ;;  counter         1    5[COMMON] unsigned char 
  7141 ;; Return value:  Size  Location     Type
  7142 ;;                  2    0[COMMON] int 
  7143 ;; Registers used:
  7144 ;;		wreg, status,2, status,0
  7145 ;; Tracked objects:
  7146 ;;		On entry : 0/0
  7147 ;;		On exit  : 0/0
  7148 ;;		Unchanged: 0/0
  7149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7150 ;;      Params:         4       0       0       0       0
  7151 ;;      Locals:         4       0       0       0       0
  7152 ;;      Temps:          1       0       0       0       0
  7153 ;;      Totals:         9       0       0       0       0
  7154 ;;Total ram usage:        9 bytes
  7155 ;; Hardware stack levels used:    1
  7156 ;; This function calls:
  7157 ;;		Nothing
  7158 ;; This function is called by:
  7159 ;;		_OUTFQ
  7160 ;;		_RFDOUT
  7161 ;; This function uses a non-reentrant model
  7162 ;;
  7163                           
  7164                           
  7165                           ;psect for function ___awdiv
  7166  0AE2                     ___awdiv:	
  7167                           
  7168                           ;incstack = 0
  7169                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7170  0AE2  01F6               	clrf	___awdiv@sign
  7171  0AE3  1FF1               	btfss	___awdiv@divisor+1,7
  7172  0AE4  2AEC               	goto	l2675
  7173  0AE5  09F0               	comf	___awdiv@divisor,f
  7174  0AE6  09F1               	comf	___awdiv@divisor+1,f
  7175  0AE7  0AF0               	incf	___awdiv@divisor,f
  7176  0AE8  1903               	skipnz
  7177  0AE9  0AF1               	incf	___awdiv@divisor+1,f
  7178  0AEA  01F6               	clrf	___awdiv@sign
  7179  0AEB  0AF6               	incf	___awdiv@sign,f
  7180  0AEC                     l2675:	
  7181  0AEC  1FF3               	btfss	___awdiv@dividend+1,7
  7182  0AED  2AF7               	goto	l2681
  7183  0AEE  09F2               	comf	___awdiv@dividend,f
  7184  0AEF  09F3               	comf	___awdiv@dividend+1,f
  7185  0AF0  0AF2               	incf	___awdiv@dividend,f
  7186  0AF1  1903               	skipnz
  7187  0AF2  0AF3               	incf	___awdiv@dividend+1,f
  7188  0AF3  3001               	movlw	1
  7189  0AF4  00F4               	movwf	??___awdiv
  7190  0AF5  0874               	movf	??___awdiv,w
  7191  0AF6  06F6               	xorwf	___awdiv@sign,f
  7192  0AF7                     l2681:	
  7193  0AF7  01F7               	clrf	___awdiv@quotient
  7194  0AF8  01F8               	clrf	___awdiv@quotient+1
  7195  0AF9  0870               	movf	___awdiv@divisor,w
  7196  0AFA  0471               	iorwf	___awdiv@divisor+1,w
  7197  0AFB  1903               	btfsc	3,2
  7198  0AFC  2B2E               	goto	l2703
  7199  0AFD  01F5               	clrf	___awdiv@counter
  7200  0AFE  0AF5               	incf	___awdiv@counter,f
  7201  0AFF                     l2691:	
  7202  0AFF  1BF1               	btfsc	___awdiv@divisor+1,7
  7203  0B00  2B0D               	goto	l2693
  7204  0B01  3001               	movlw	1
  7205  0B02                     u2065:	
  7206  0B02  1003               	clrc
  7207  0B03  0DF0               	rlf	___awdiv@divisor,f
  7208  0B04  0DF1               	rlf	___awdiv@divisor+1,f
  7209  0B05  3EFF               	addlw	-1
  7210  0B06  1D03               	skipz
  7211  0B07  2B02               	goto	u2065
  7212  0B08  3001               	movlw	1
  7213  0B09  00F4               	movwf	??___awdiv
  7214  0B0A  0874               	movf	??___awdiv,w
  7215  0B0B  07F5               	addwf	___awdiv@counter,f
  7216  0B0C  2AFF               	goto	l2691
  7217  0B0D                     l2693:	
  7218  0B0D  3001               	movlw	1
  7219  0B0E                     u2085:	
  7220  0B0E  1003               	clrc
  7221  0B0F  0DF7               	rlf	___awdiv@quotient,f
  7222  0B10  0DF8               	rlf	___awdiv@quotient+1,f
  7223  0B11  3EFF               	addlw	-1
  7224  0B12  1D03               	skipz
  7225  0B13  2B0E               	goto	u2085
  7226  0B14  0871               	movf	___awdiv@divisor+1,w
  7227  0B15  0273               	subwf	___awdiv@dividend+1,w
  7228  0B16  1D03               	skipz
  7229  0B17  2B1A               	goto	u2095
  7230  0B18  0870               	movf	___awdiv@divisor,w
  7231  0B19  0272               	subwf	___awdiv@dividend,w
  7232  0B1A                     u2095:	
  7233  0B1A  1C03               	skipc
  7234  0B1B  2B23               	goto	l2699
  7235  0B1C  0870               	movf	___awdiv@divisor,w
  7236  0B1D  02F2               	subwf	___awdiv@dividend,f
  7237  0B1E  0871               	movf	___awdiv@divisor+1,w
  7238  0B1F  1C03               	skipc
  7239  0B20  03F3               	decf	___awdiv@dividend+1,f
  7240  0B21  02F3               	subwf	___awdiv@dividend+1,f
  7241  0B22  1477               	bsf	___awdiv@quotient,0
  7242  0B23                     l2699:	
  7243  0B23  3001               	movlw	1
  7244  0B24                     u2105:	
  7245  0B24  1003               	clrc
  7246  0B25  0CF1               	rrf	___awdiv@divisor+1,f
  7247  0B26  0CF0               	rrf	___awdiv@divisor,f
  7248  0B27  3EFF               	addlw	-1
  7249  0B28  1D03               	skipz
  7250  0B29  2B24               	goto	u2105
  7251  0B2A  3001               	movlw	1
  7252  0B2B  02F5               	subwf	___awdiv@counter,f
  7253  0B2C  1D03               	btfss	3,2
  7254  0B2D  2B0D               	goto	l2693
  7255  0B2E                     l2703:	
  7256  0B2E  0876               	movf	___awdiv@sign,w
  7257  0B2F  1903               	btfsc	3,2
  7258  0B30  2B36               	goto	l2707
  7259  0B31  09F7               	comf	___awdiv@quotient,f
  7260  0B32  09F8               	comf	___awdiv@quotient+1,f
  7261  0B33  0AF7               	incf	___awdiv@quotient,f
  7262  0B34  1903               	skipnz
  7263  0B35  0AF8               	incf	___awdiv@quotient+1,f
  7264  0B36                     l2707:	
  7265  0B36  0878               	movf	___awdiv@quotient+1,w
  7266  0B37  00F1               	movwf	?___awdiv+1
  7267  0B38  0877               	movf	___awdiv@quotient,w
  7268  0B39  00F0               	movwf	?___awdiv
  7269  0B3A  0008               	return
  7270  0B3B                     __end_of___awdiv:	
  7271                           
  7272                           	psect	text26
  7273  0CBC                     __ptext26:	
  7274 ;; *************** function _OPINIT *****************
  7275 ;; Defined at:
  7276 ;;		line 241 in file "FMCW.c"
  7277 ;; Parameters:    Size  Location     Type
  7278 ;;  fmcwtxrx        2    4[COMMON] int 
  7279 ;; Auto vars:     Size  Location     Type
  7280 ;;		None
  7281 ;; Return value:  Size  Location     Type
  7282 ;;                  1    wreg      void 
  7283 ;; Registers used:
  7284 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7285 ;; Tracked objects:
  7286 ;;		On entry : 0/0
  7287 ;;		On exit  : 0/0
  7288 ;;		Unchanged: 0/0
  7289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7290 ;;      Params:         2       0       0       0       0
  7291 ;;      Locals:         0       0       0       0       0
  7292 ;;      Temps:          0       0       0       0       0
  7293 ;;      Totals:         2       0       0       0       0
  7294 ;;Total ram usage:        2 bytes
  7295 ;; Hardware stack levels used:    1
  7296 ;; Hardware stack levels required when called:    2
  7297 ;; This function calls:
  7298 ;;		_H_OUT
  7299 ;;		_L_OUT
  7300 ;;		_STBOUT
  7301 ;; This function is called by:
  7302 ;;		_FMTX
  7303 ;;		_CWTX
  7304 ;;		_FMRX
  7305 ;; This function uses a non-reentrant model
  7306 ;;
  7307                           
  7308                           
  7309                           ;psect for function _OPINIT
  7310  0CBC                     _OPINIT:	
  7311                           
  7312                           ;FMCW.c: 243: L_OUT(fmcwtxrx);
  7313                           
  7314                           ;incstack = 0
  7315                           ; Regs used in _OPINIT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7316  0CBC  0875               	movf	OPINIT@fmcwtxrx+1,w
  7317  0CBD  00F3               	movwf	L_OUT@fmcwtxrx+1
  7318  0CBE  0874               	movf	OPINIT@fmcwtxrx,w
  7319  0CBF  00F2               	movwf	L_OUT@fmcwtxrx
  7320  0CC0  120A  158A  2209  120A  158A  	fcall	_L_OUT
  7321                           
  7322                           ;FMCW.c: 244: L_OUT(fmcwtxrx);
  7323  0CC5  0875               	movf	OPINIT@fmcwtxrx+1,w
  7324  0CC6  00F3               	movwf	L_OUT@fmcwtxrx+1
  7325  0CC7  0874               	movf	OPINIT@fmcwtxrx,w
  7326  0CC8  00F2               	movwf	L_OUT@fmcwtxrx
  7327  0CC9  120A  158A  2209  120A  158A  	fcall	_L_OUT
  7328                           
  7329                           ;FMCW.c: 245: L_OUT(fmcwtxrx);
  7330  0CCE  0875               	movf	OPINIT@fmcwtxrx+1,w
  7331  0CCF  00F3               	movwf	L_OUT@fmcwtxrx+1
  7332  0CD0  0874               	movf	OPINIT@fmcwtxrx,w
  7333  0CD1  00F2               	movwf	L_OUT@fmcwtxrx
  7334  0CD2  120A  158A  2209  120A  158A  	fcall	_L_OUT
  7335                           
  7336                           ;FMCW.c: 246: H_OUT(fmcwtxrx);
  7337  0CD7  0875               	movf	OPINIT@fmcwtxrx+1,w
  7338  0CD8  00F3               	movwf	H_OUT@fmcwtxrx+1
  7339  0CD9  0874               	movf	OPINIT@fmcwtxrx,w
  7340  0CDA  00F2               	movwf	H_OUT@fmcwtxrx
  7341  0CDB  120A  158A  21C3  120A  158A  	fcall	_H_OUT
  7342                           
  7343                           ;FMCW.c: 247: H_OUT(fmcwtxrx);
  7344  0CE0  0875               	movf	OPINIT@fmcwtxrx+1,w
  7345  0CE1  00F3               	movwf	H_OUT@fmcwtxrx+1
  7346  0CE2  0874               	movf	OPINIT@fmcwtxrx,w
  7347  0CE3  00F2               	movwf	H_OUT@fmcwtxrx
  7348  0CE4  120A  158A  21C3  120A  158A  	fcall	_H_OUT
  7349                           
  7350                           ;FMCW.c: 248: L_OUT(fmcwtxrx);
  7351  0CE9  0875               	movf	OPINIT@fmcwtxrx+1,w
  7352  0CEA  00F3               	movwf	L_OUT@fmcwtxrx+1
  7353  0CEB  0874               	movf	OPINIT@fmcwtxrx,w
  7354  0CEC  00F2               	movwf	L_OUT@fmcwtxrx
  7355  0CED  120A  158A  2209  120A  158A  	fcall	_L_OUT
  7356                           
  7357                           ;FMCW.c: 249: L_OUT(fmcwtxrx);
  7358  0CF2  0875               	movf	OPINIT@fmcwtxrx+1,w
  7359  0CF3  00F3               	movwf	L_OUT@fmcwtxrx+1
  7360  0CF4  0874               	movf	OPINIT@fmcwtxrx,w
  7361  0CF5  00F2               	movwf	L_OUT@fmcwtxrx
  7362  0CF6  120A  158A  2209  120A  158A  	fcall	_L_OUT
  7363                           
  7364                           ;FMCW.c: 250: L_OUT(fmcwtxrx);
  7365  0CFB  0875               	movf	OPINIT@fmcwtxrx+1,w
  7366  0CFC  00F3               	movwf	L_OUT@fmcwtxrx+1
  7367  0CFD  0874               	movf	OPINIT@fmcwtxrx,w
  7368  0CFE  00F2               	movwf	L_OUT@fmcwtxrx
  7369  0CFF  120A  158A  2209  120A  158A  	fcall	_L_OUT
  7370                           
  7371                           ;FMCW.c: 251: L_OUT(fmcwtxrx);
  7372  0D04  0875               	movf	OPINIT@fmcwtxrx+1,w
  7373  0D05  00F3               	movwf	L_OUT@fmcwtxrx+1
  7374  0D06  0874               	movf	OPINIT@fmcwtxrx,w
  7375  0D07  00F2               	movwf	L_OUT@fmcwtxrx
  7376  0D08  120A  158A  2209  120A  158A  	fcall	_L_OUT
  7377                           
  7378                           ;FMCW.c: 252: L_OUT(fmcwtxrx);
  7379  0D0D  0875               	movf	OPINIT@fmcwtxrx+1,w
  7380  0D0E  00F3               	movwf	L_OUT@fmcwtxrx+1
  7381  0D0F  0874               	movf	OPINIT@fmcwtxrx,w
  7382  0D10  00F2               	movwf	L_OUT@fmcwtxrx
  7383  0D11  120A  158A  2209  120A  158A  	fcall	_L_OUT
  7384                           
  7385                           ;FMCW.c: 253: H_OUT(fmcwtxrx);
  7386  0D16  0875               	movf	OPINIT@fmcwtxrx+1,w
  7387  0D17  00F3               	movwf	H_OUT@fmcwtxrx+1
  7388  0D18  0874               	movf	OPINIT@fmcwtxrx,w
  7389  0D19  00F2               	movwf	H_OUT@fmcwtxrx
  7390  0D1A  120A  158A  21C3  120A  158A  	fcall	_H_OUT
  7391                           
  7392                           ;FMCW.c: 256: L_OUT(fmcwtxrx);
  7393  0D1F  0875               	movf	OPINIT@fmcwtxrx+1,w
  7394  0D20  00F3               	movwf	L_OUT@fmcwtxrx+1
  7395  0D21  0874               	movf	OPINIT@fmcwtxrx,w
  7396  0D22  00F2               	movwf	L_OUT@fmcwtxrx
  7397  0D23  120A  158A  2209  120A  158A  	fcall	_L_OUT
  7398                           
  7399                           ;FMCW.c: 257: L_OUT(fmcwtxrx);
  7400  0D28  0875               	movf	OPINIT@fmcwtxrx+1,w
  7401  0D29  00F3               	movwf	L_OUT@fmcwtxrx+1
  7402  0D2A  0874               	movf	OPINIT@fmcwtxrx,w
  7403  0D2B  00F2               	movwf	L_OUT@fmcwtxrx
  7404  0D2C  120A  158A  2209  120A  158A  	fcall	_L_OUT
  7405                           
  7406                           ;FMCW.c: 260: STBOUT(fmcwtxrx);
  7407  0D31  0875               	movf	OPINIT@fmcwtxrx+1,w
  7408  0D32  00F3               	movwf	STBOUT@fmcwtxrx+1
  7409  0D33  0874               	movf	OPINIT@fmcwtxrx,w
  7410  0D34  00F2               	movwf	STBOUT@fmcwtxrx
  7411  0D35  120A  158A  2161   	fcall	_STBOUT
  7412  0D38  0008               	return
  7413  0D39                     __end_of_OPINIT:	
  7414                           
  7415                           	psect	text27
  7416  0961                     __ptext27:	
  7417 ;; *************** function _STBOUT *****************
  7418 ;; Defined at:
  7419 ;;		line 107 in file "FMCW.c"
  7420 ;; Parameters:    Size  Location     Type
  7421 ;;  fmcwtxrx        2    2[COMMON] int 
  7422 ;; Auto vars:     Size  Location     Type
  7423 ;;		None
  7424 ;; Return value:  Size  Location     Type
  7425 ;;                  1    wreg      void 
  7426 ;; Registers used:
  7427 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7428 ;; Tracked objects:
  7429 ;;		On entry : 0/0
  7430 ;;		On exit  : 0/0
  7431 ;;		Unchanged: 0/0
  7432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7433 ;;      Params:         2       0       0       0       0
  7434 ;;      Locals:         0       0       0       0       0
  7435 ;;      Temps:          0       0       0       0       0
  7436 ;;      Totals:         2       0       0       0       0
  7437 ;;Total ram usage:        2 bytes
  7438 ;; Hardware stack levels used:    1
  7439 ;; Hardware stack levels required when called:    1
  7440 ;; This function calls:
  7441 ;;		__NOP
  7442 ;; This function is called by:
  7443 ;;		_OUTFQ
  7444 ;;		_RFDOUT
  7445 ;;		_OPINIT
  7446 ;; This function uses a non-reentrant model
  7447 ;;
  7448                           
  7449                           
  7450                           ;psect for function _STBOUT
  7451  0961                     _STBOUT:	
  7452                           
  7453                           ;FMCW.c: 108: if(fmcwtxrx == 1)
  7454                           
  7455                           ;incstack = 0
  7456                           ; Regs used in _STBOUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7457  0961  0372               	decf	STBOUT@fmcwtxrx,w
  7458  0962  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7459  0963  1D03               	btfss	3,2
  7460  0964  2970               	goto	l2651
  7461                           
  7462                           ;FMCW.c: 109: {
  7463                           ;FMCW.c: 110: PORTAbits.RA5 = 1;
  7464  0965  1283               	bcf	3,5	;RP0=0, select bank0
  7465  0966  1303               	bcf	3,6	;RP1=0, select bank0
  7466  0967  1685               	bsf	5,5	;volatile
  7467                           
  7468                           ;FMCW.c: 111: _NOP();
  7469  0968  120A  158A  2037  120A  158A  	fcall	__NOP
  7470                           
  7471                           ;FMCW.c: 112: PORTAbits.RA5 = 0;
  7472  096D  1283               	bcf	3,5	;RP0=0, select bank0
  7473  096E  1303               	bcf	3,6	;RP1=0, select bank0
  7474  096F  1285               	bcf	5,5	;volatile
  7475  0970                     l2651:	
  7476                           
  7477                           ;FMCW.c: 113: }
  7478                           ;FMCW.c: 114: if(fmcwtxrx == 2)
  7479  0970  3002               	movlw	2
  7480  0971  0672               	xorwf	STBOUT@fmcwtxrx,w
  7481  0972  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7482  0973  1D03               	btfss	3,2
  7483  0974  2980               	goto	l2659
  7484                           
  7485                           ;FMCW.c: 115: {
  7486                           ;FMCW.c: 116: PORTDbits.RD0 = 1;
  7487  0975  1283               	bcf	3,5	;RP0=0, select bank0
  7488  0976  1303               	bcf	3,6	;RP1=0, select bank0
  7489  0977  1408               	bsf	8,0	;volatile
  7490                           
  7491                           ;FMCW.c: 117: _NOP();
  7492  0978  120A  158A  2037  120A  158A  	fcall	__NOP
  7493                           
  7494                           ;FMCW.c: 118: PORTDbits.RD0 = 0;
  7495  097D  1283               	bcf	3,5	;RP0=0, select bank0
  7496  097E  1303               	bcf	3,6	;RP1=0, select bank0
  7497  097F  1008               	bcf	8,0	;volatile
  7498  0980                     l2659:	
  7499                           
  7500                           ;FMCW.c: 119: }
  7501                           ;FMCW.c: 120: if(fmcwtxrx == 3)
  7502  0980  3003               	movlw	3
  7503  0981  0672               	xorwf	STBOUT@fmcwtxrx,w
  7504  0982  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7505  0983  1D03               	btfss	3,2
  7506  0984  0008               	return
  7507                           
  7508                           ;FMCW.c: 121: {
  7509                           ;FMCW.c: 122: PORTAbits.RA4 = 1;
  7510  0985  1283               	bcf	3,5	;RP0=0, select bank0
  7511  0986  1303               	bcf	3,6	;RP1=0, select bank0
  7512  0987  1605               	bsf	5,4	;volatile
  7513                           
  7514                           ;FMCW.c: 123: _NOP();
  7515  0988  120A  158A  2037   	fcall	__NOP
  7516                           
  7517                           ;FMCW.c: 124: PORTAbits.RA4 = 0;
  7518  098B  1283               	bcf	3,5	;RP0=0, select bank0
  7519  098C  1303               	bcf	3,6	;RP1=0, select bank0
  7520  098D  1205               	bcf	5,4	;volatile
  7521  098E  0008               	return
  7522  098F                     __end_of_STBOUT:	
  7523                           
  7524                           	psect	text28
  7525  0A09                     __ptext28:	
  7526 ;; *************** function _L_OUT *****************
  7527 ;; Defined at:
  7528 ;;		line 40 in file "FMCW.c"
  7529 ;; Parameters:    Size  Location     Type
  7530 ;;  fmcwtxrx        2    2[COMMON] int 
  7531 ;; Auto vars:     Size  Location     Type
  7532 ;;		None
  7533 ;; Return value:  Size  Location     Type
  7534 ;;                  1    wreg      void 
  7535 ;; Registers used:
  7536 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7537 ;; Tracked objects:
  7538 ;;		On entry : 0/0
  7539 ;;		On exit  : 0/0
  7540 ;;		Unchanged: 0/0
  7541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7542 ;;      Params:         2       0       0       0       0
  7543 ;;      Locals:         0       0       0       0       0
  7544 ;;      Temps:          0       0       0       0       0
  7545 ;;      Totals:         2       0       0       0       0
  7546 ;;Total ram usage:        2 bytes
  7547 ;; Hardware stack levels used:    1
  7548 ;; Hardware stack levels required when called:    1
  7549 ;; This function calls:
  7550 ;;		__NOP
  7551 ;; This function is called by:
  7552 ;;		_OUTFQ
  7553 ;;		_RFDOUT
  7554 ;;		_OPINIT
  7555 ;; This function uses a non-reentrant model
  7556 ;;
  7557                           
  7558                           
  7559                           ;psect for function _L_OUT
  7560  0A09                     _L_OUT:	
  7561                           
  7562                           ;FMCW.c: 41: if(fmcwtxrx == 1)
  7563                           
  7564                           ;incstack = 0
  7565                           ; Regs used in _L_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7566  0A09  0372               	decf	L_OUT@fmcwtxrx,w
  7567  0A0A  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7568  0A0B  1D03               	btfss	3,2
  7569  0A0C  2A20               	goto	l2593
  7570                           
  7571                           ;FMCW.c: 42: {
  7572                           ;FMCW.c: 43: PORTEbits.RE0 = 0;
  7573  0A0D  1283               	bcf	3,5	;RP0=0, select bank0
  7574  0A0E  1303               	bcf	3,6	;RP1=0, select bank0
  7575  0A0F  1009               	bcf	9,0	;volatile
  7576                           
  7577                           ;FMCW.c: 44: _NOP();
  7578  0A10  120A  158A  2037  120A  158A  	fcall	__NOP
  7579                           
  7580                           ;FMCW.c: 45: PORTEbits.RE1 = 1;
  7581  0A15  1283               	bcf	3,5	;RP0=0, select bank0
  7582  0A16  1303               	bcf	3,6	;RP1=0, select bank0
  7583  0A17  1489               	bsf	9,1	;volatile
  7584                           
  7585                           ;FMCW.c: 46: _NOP();
  7586  0A18  120A  158A  2037  120A  158A  	fcall	__NOP
  7587                           
  7588                           ;FMCW.c: 47: PORTEbits.RE1 = 0;
  7589  0A1D  1283               	bcf	3,5	;RP0=0, select bank0
  7590  0A1E  1303               	bcf	3,6	;RP1=0, select bank0
  7591  0A1F  1089               	bcf	9,1	;volatile
  7592  0A20                     l2593:	
  7593                           
  7594                           ;FMCW.c: 48: }
  7595                           ;FMCW.c: 49: if(fmcwtxrx == 2)
  7596  0A20  3002               	movlw	2
  7597  0A21  0672               	xorwf	L_OUT@fmcwtxrx,w
  7598  0A22  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7599  0A23  1D03               	btfss	3,2
  7600  0A24  2A38               	goto	l2603
  7601                           
  7602                           ;FMCW.c: 50: {
  7603                           ;FMCW.c: 51: PORTDbits.RD1 = 0;
  7604  0A25  1283               	bcf	3,5	;RP0=0, select bank0
  7605  0A26  1303               	bcf	3,6	;RP1=0, select bank0
  7606  0A27  1088               	bcf	8,1	;volatile
  7607                           
  7608                           ;FMCW.c: 52: _NOP();
  7609  0A28  120A  158A  2037  120A  158A  	fcall	__NOP
  7610                           
  7611                           ;FMCW.c: 53: PORTDbits.RD2 = 1;
  7612  0A2D  1283               	bcf	3,5	;RP0=0, select bank0
  7613  0A2E  1303               	bcf	3,6	;RP1=0, select bank0
  7614  0A2F  1508               	bsf	8,2	;volatile
  7615                           
  7616                           ;FMCW.c: 54: _NOP();
  7617  0A30  120A  158A  2037  120A  158A  	fcall	__NOP
  7618                           
  7619                           ;FMCW.c: 55: PORTDbits.RD2 = 0;
  7620  0A35  1283               	bcf	3,5	;RP0=0, select bank0
  7621  0A36  1303               	bcf	3,6	;RP1=0, select bank0
  7622  0A37  1108               	bcf	8,2	;volatile
  7623  0A38                     l2603:	
  7624                           
  7625                           ;FMCW.c: 56: }
  7626                           ;FMCW.c: 57: if(fmcwtxrx == 3)
  7627  0A38  3003               	movlw	3
  7628  0A39  0672               	xorwf	L_OUT@fmcwtxrx,w
  7629  0A3A  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7630  0A3B  1D03               	btfss	3,2
  7631  0A3C  0008               	return
  7632                           
  7633                           ;FMCW.c: 58: {
  7634                           ;FMCW.c: 59: PORTAbits.RA3 = 0;
  7635  0A3D  1283               	bcf	3,5	;RP0=0, select bank0
  7636  0A3E  1303               	bcf	3,6	;RP1=0, select bank0
  7637  0A3F  1185               	bcf	5,3	;volatile
  7638                           
  7639                           ;FMCW.c: 60: _NOP();
  7640  0A40  120A  158A  2037  120A  158A  	fcall	__NOP
  7641                           
  7642                           ;FMCW.c: 61: PORTAbits.RA2 = 1;
  7643  0A45  1283               	bcf	3,5	;RP0=0, select bank0
  7644  0A46  1303               	bcf	3,6	;RP1=0, select bank0
  7645  0A47  1505               	bsf	5,2	;volatile
  7646                           
  7647                           ;FMCW.c: 62: _NOP();
  7648  0A48  120A  158A  2037   	fcall	__NOP
  7649                           
  7650                           ;FMCW.c: 63: PORTAbits.RA2 = 0;
  7651  0A4B  1283               	bcf	3,5	;RP0=0, select bank0
  7652  0A4C  1303               	bcf	3,6	;RP1=0, select bank0
  7653  0A4D  1105               	bcf	5,2	;volatile
  7654  0A4E  0008               	return
  7655  0A4F                     __end_of_L_OUT:	
  7656                           
  7657                           	psect	text29
  7658  09C3                     __ptext29:	
  7659 ;; *************** function _H_OUT *****************
  7660 ;; Defined at:
  7661 ;;		line 74 in file "FMCW.c"
  7662 ;; Parameters:    Size  Location     Type
  7663 ;;  fmcwtxrx        2    2[COMMON] int 
  7664 ;; Auto vars:     Size  Location     Type
  7665 ;;		None
  7666 ;; Return value:  Size  Location     Type
  7667 ;;                  1    wreg      void 
  7668 ;; Registers used:
  7669 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7670 ;; Tracked objects:
  7671 ;;		On entry : 0/0
  7672 ;;		On exit  : 0/0
  7673 ;;		Unchanged: 0/0
  7674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7675 ;;      Params:         2       0       0       0       0
  7676 ;;      Locals:         0       0       0       0       0
  7677 ;;      Temps:          0       0       0       0       0
  7678 ;;      Totals:         2       0       0       0       0
  7679 ;;Total ram usage:        2 bytes
  7680 ;; Hardware stack levels used:    1
  7681 ;; Hardware stack levels required when called:    1
  7682 ;; This function calls:
  7683 ;;		__NOP
  7684 ;; This function is called by:
  7685 ;;		_OUTFQ
  7686 ;;		_RFDOUT
  7687 ;;		_OPINIT
  7688 ;; This function uses a non-reentrant model
  7689 ;;
  7690                           
  7691                           
  7692                           ;psect for function _H_OUT
  7693  09C3                     _H_OUT:	
  7694                           
  7695                           ;FMCW.c: 75: if(fmcwtxrx == 1)
  7696                           
  7697                           ;incstack = 0
  7698                           ; Regs used in _H_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7699  09C3  0372               	decf	H_OUT@fmcwtxrx,w
  7700  09C4  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7701  09C5  1D03               	btfss	3,2
  7702  09C6  29DA               	goto	l2623
  7703                           
  7704                           ;FMCW.c: 76: {
  7705                           ;FMCW.c: 77: PORTEbits.RE0 = 1;
  7706  09C7  1283               	bcf	3,5	;RP0=0, select bank0
  7707  09C8  1303               	bcf	3,6	;RP1=0, select bank0
  7708  09C9  1409               	bsf	9,0	;volatile
  7709                           
  7710                           ;FMCW.c: 78: _NOP();
  7711  09CA  120A  158A  2037  120A  158A  	fcall	__NOP
  7712                           
  7713                           ;FMCW.c: 79: PORTEbits.RE1 = 1;
  7714  09CF  1283               	bcf	3,5	;RP0=0, select bank0
  7715  09D0  1303               	bcf	3,6	;RP1=0, select bank0
  7716  09D1  1489               	bsf	9,1	;volatile
  7717                           
  7718                           ;FMCW.c: 80: _NOP();
  7719  09D2  120A  158A  2037  120A  158A  	fcall	__NOP
  7720                           
  7721                           ;FMCW.c: 81: PORTEbits.RE1 = 0;
  7722  09D7  1283               	bcf	3,5	;RP0=0, select bank0
  7723  09D8  1303               	bcf	3,6	;RP1=0, select bank0
  7724  09D9  1089               	bcf	9,1	;volatile
  7725  09DA                     l2623:	
  7726                           
  7727                           ;FMCW.c: 82: }
  7728                           ;FMCW.c: 83: if(fmcwtxrx == 2)
  7729  09DA  3002               	movlw	2
  7730  09DB  0672               	xorwf	H_OUT@fmcwtxrx,w
  7731  09DC  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7732  09DD  1D03               	btfss	3,2
  7733  09DE  29F2               	goto	l2633
  7734                           
  7735                           ;FMCW.c: 84: {
  7736                           ;FMCW.c: 85: PORTDbits.RD1 = 1;
  7737  09DF  1283               	bcf	3,5	;RP0=0, select bank0
  7738  09E0  1303               	bcf	3,6	;RP1=0, select bank0
  7739  09E1  1488               	bsf	8,1	;volatile
  7740                           
  7741                           ;FMCW.c: 86: _NOP();
  7742  09E2  120A  158A  2037  120A  158A  	fcall	__NOP
  7743                           
  7744                           ;FMCW.c: 87: PORTDbits.RD2 = 1;
  7745  09E7  1283               	bcf	3,5	;RP0=0, select bank0
  7746  09E8  1303               	bcf	3,6	;RP1=0, select bank0
  7747  09E9  1508               	bsf	8,2	;volatile
  7748                           
  7749                           ;FMCW.c: 88: _NOP();
  7750  09EA  120A  158A  2037  120A  158A  	fcall	__NOP
  7751                           
  7752                           ;FMCW.c: 89: PORTDbits.RD2 = 0;
  7753  09EF  1283               	bcf	3,5	;RP0=0, select bank0
  7754  09F0  1303               	bcf	3,6	;RP1=0, select bank0
  7755  09F1  1108               	bcf	8,2	;volatile
  7756  09F2                     l2633:	
  7757                           
  7758                           ;FMCW.c: 90: }
  7759                           ;FMCW.c: 91: if(fmcwtxrx == 3)
  7760  09F2  3003               	movlw	3
  7761  09F3  0672               	xorwf	H_OUT@fmcwtxrx,w
  7762  09F4  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7763  09F5  1D03               	btfss	3,2
  7764  09F6  0008               	return
  7765                           
  7766                           ;FMCW.c: 92: {
  7767                           ;FMCW.c: 93: PORTAbits.RA3 = 1;
  7768  09F7  1283               	bcf	3,5	;RP0=0, select bank0
  7769  09F8  1303               	bcf	3,6	;RP1=0, select bank0
  7770  09F9  1585               	bsf	5,3	;volatile
  7771                           
  7772                           ;FMCW.c: 94: _NOP();
  7773  09FA  120A  158A  2037  120A  158A  	fcall	__NOP
  7774                           
  7775                           ;FMCW.c: 95: PORTAbits.RA2 = 1;
  7776  09FF  1283               	bcf	3,5	;RP0=0, select bank0
  7777  0A00  1303               	bcf	3,6	;RP1=0, select bank0
  7778  0A01  1505               	bsf	5,2	;volatile
  7779                           
  7780                           ;FMCW.c: 96: _NOP();
  7781  0A02  120A  158A  2037   	fcall	__NOP
  7782                           
  7783                           ;FMCW.c: 97: PORTAbits.RA2 = 0;
  7784  0A05  1283               	bcf	3,5	;RP0=0, select bank0
  7785  0A06  1303               	bcf	3,6	;RP1=0, select bank0
  7786  0A07  1105               	bcf	5,2	;volatile
  7787  0A08  0008               	return
  7788  0A09                     __end_of_H_OUT:	
  7789                           
  7790                           	psect	text30
  7791  0837                     __ptext30:	
  7792 ;; *************** function __NOP *****************
  7793 ;; Defined at:
  7794 ;;		line 349 in file "FMCW.c"
  7795 ;; Parameters:    Size  Location     Type
  7796 ;;		None
  7797 ;; Auto vars:     Size  Location     Type
  7798 ;;  i               2    0[COMMON] int 
  7799 ;; Return value:  Size  Location     Type
  7800 ;;                  1    wreg      void 
  7801 ;; Registers used:
  7802 ;;		wreg, status,2, btemp+1
  7803 ;; Tracked objects:
  7804 ;;		On entry : 0/0
  7805 ;;		On exit  : 0/0
  7806 ;;		Unchanged: 0/0
  7807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7808 ;;      Params:         0       0       0       0       0
  7809 ;;      Locals:         2       0       0       0       0
  7810 ;;      Temps:          0       0       0       0       0
  7811 ;;      Totals:         2       0       0       0       0
  7812 ;;Total ram usage:        2 bytes
  7813 ;; Hardware stack levels used:    1
  7814 ;; This function calls:
  7815 ;;		Nothing
  7816 ;; This function is called by:
  7817 ;;		_L_OUT
  7818 ;;		_H_OUT
  7819 ;;		_STBOUT
  7820 ;; This function uses a non-reentrant model
  7821 ;;
  7822                           
  7823                           
  7824                           ;psect for function __NOP
  7825  0837                     __NOP:	
  7826                           
  7827                           ;FMCW.c: 350: for(int i=0; i<5; i++){
  7828                           
  7829                           ;incstack = 0
  7830                           ; Regs used in __NOP: [wreg+status,2+btemp+1]
  7831  0837  01F0               	clrf	__NOP@i
  7832  0838  01F1               	clrf	__NOP@i+1
  7833  0839                     L9:	
  7834  0839  0871               	movf	__NOP@i+1,w
  7835  083A  3A80               	xorlw	128
  7836  083B  00FF               	movwf	127
  7837  083C  3080               	movlw	128
  7838  083D  027F               	subwf	127,w
  7839  083E  1D03               	skipz
  7840  083F  2842               	goto	u1875
  7841  0840  3005               	movlw	5
  7842  0841  0270               	subwf	__NOP@i,w
  7843  0842                     u1875:	
  7844  0842  1803               	btfsc	3,0
  7845  0843  0008               	return
  7846                           
  7847                           ;FMCW.c: 351: __nop();
  7848  0844  0000               	nop
  7849  0845  3001               	movlw	1
  7850  0846  07F0               	addwf	__NOP@i,f
  7851  0847  1803               	skipnc
  7852  0848  0AF1               	incf	__NOP@i+1,f
  7853  0849  3000               	movlw	0
  7854  084A  07F1               	addwf	__NOP@i+1,f
  7855  084B  2839               	goto	L9
  7856  084C                     __end_of__NOP:	
  7857  007E                     btemp	set	126	;btemp
  7858  007E                     wtemp	set	126
  7859  007E                     wtemp0	set	126
  7860  0080                     wtemp1	set	128
  7861  0082                     wtemp2	set	130
  7862  0084                     wtemp3	set	132
  7863  0086                     wtemp4	set	134
  7864  0088                     wtemp5	set	136
  7865  007F                     wtemp6	set	127
  7866  007E                     ttemp	set	126
  7867  007E                     ttemp0	set	126
  7868  0081                     ttemp1	set	129
  7869  0084                     ttemp2	set	132
  7870  0087                     ttemp3	set	135
  7871  007F                     ttemp4	set	127
  7872  007E                     ltemp	set	126
  7873  007E                     ltemp0	set	126
  7874  0082                     ltemp1	set	130
  7875  0086                     ltemp2	set	134
  7876  0080                     ltemp3	set	128


Data Sizes:
    Strings     25
    Constant    2
    Data        91
    BSS         137
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      80
    BANK1            80     34      73
    BANK3            96      0      90
    BANK2            96      0      89

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_16(CODE[3]), STR_15(CODE[8]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 

    FMRX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), FMRX_Nprg(BANK3[10]), 

    CWTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@CWTX_Nprg(BANK1[10]), CWTX_Nprg(BANK1[10]), 

    FMTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    OUTFQ@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), main@CWTX_Nprg(BANK1[10]), main@FMTX_Nprg(BANK1[10]), 
		 -> FMRX_Nprg(BANK3[10]), CWTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    sp__EEPROM_Read	PTR unsigned char  size(1) Largest target is 32
		 -> EEPROMData(BANK2[32]), 

    EEPROM_Write@data	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 

    main@dData	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 

    sp__ReceivePacket_data	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 


Critical Paths under _main in COMMON

    _printf->_putch
    _ReceivePacket_data->_fcscheck
    _ReceivePacket_data->_waitFlag
    _waitFlag->_getbit
    _getdata->_getbit
    _NM_waddress->_putch
    _Init_I2C_M->___lldiv
    _FMTX->_OUTFQ
    _FMTX->_RFDOUT
    _FMRX->_OUTFQ
    _FMRX->_RFDOUT
    _EEPROM_Write->_I2C_Master_Write
    _CWTX->_OUTFQ
    _CWTX->_RFDOUT
    _RFDOUT->___awdiv
    _OUTFQ->___awdiv
    _OPINIT->_H_OUT
    _OPINIT->_L_OUT
    _OPINIT->_STBOUT
    _STBOUT->__NOP
    _L_OUT->__NOP
    _H_OUT->__NOP

Critical Paths under _main in BANK0

    _main->_CWTX
    _main->_FMRX
    _main->_FMTX
    _ReceivePacket_data->_waitFlag
    _FMTX->_OUTFQ
    _FMRX->_OUTFQ
    _CWTX->_OUTFQ

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                38    38      0   33355
                                             66 BANK0      4     4      0
                                              0 BANK1     34    34      0
                               _CWTX
                       _EEPROM_Write
                               _FMRX
                               _FMTX
                         _Init_I2C_M
                           _Init_MPU
                        _Init_SERIAL
                           _Init_WDT
                        _NM_waddress
                 _ReceivePacket_data
                          _Reset_EPS
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     214
                                              1 COMMON     7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _Reset_EPS                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ReceivePacket_data                                   6     6      0    2691
                                             10 COMMON     2     2      0
                                             29 BANK0      4     4      0
                           _fcscheck
                            _getdata
                           _waitFlag
 ---------------------------------------------------------------------------------
 (2) _waitFlag                                            33    33      0    2205
                                              6 COMMON     4     4      0
                                              0 BANK0     29    29      0
                             _getbit
 ---------------------------------------------------------------------------------
 (2) _getdata                                             10    10      0     212
                                              6 COMMON     2     2      0
                                              0 BANK0      7     7      0
                             _getbit
 ---------------------------------------------------------------------------------
 (3) _getbit                                               6     4      2      46
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _fcscheck                                            10     8      2     161
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (1) _NM_waddress                                          3     1      2     194
                                              1 COMMON     3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_WDT                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_SERIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_MPU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_I2C_M                                           8     4      4     343
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _FMTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _FMRX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         8     5      3     739
                                              2 COMMON     8     5      3
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     446
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CWTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (2) _RFDOUT                                              37    33      4    3231
                                              9 COMMON     4     0      4
                                              0 BANK0     33    33      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _OUTFQ                                               64    60      4    3853
                                              9 COMMON     4     0      4
                                              0 BANK0     60    60      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _OPINIT                                               2     0      2    2075
                                              4 COMMON     2     0      2
                              _H_OUT
                              _L_OUT
                             _STBOUT
 ---------------------------------------------------------------------------------
 (3) _STBOUT                                               2     0      2     271
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _L_OUT                                                2     0      2     801
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _H_OUT                                                2     0      2     536
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (4) __NOP                                                 2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CWTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _EEPROM_Write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _FMRX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _FMTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _Init_I2C_M
     ___lldiv
   _Init_MPU
   _Init_SERIAL
   _Init_WDT
   _NM_waddress
     _putch
   _ReceivePacket_data
     _fcscheck
     _getdata
       _getbit
     _waitFlag
       _getbit
   _Reset_EPS
   _printf
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      5A       9       93.8%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      59      11       92.7%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     22      49       7       91.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     46      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     15A      12        0.0%
ABS                  0      0     15A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sat Jan 20 20:51:50 2018

                           pc 0002                   __CFG_CP$OFF 0000                            l65 17C5  
                ___awdiv@sign 0076                            fsr 0004                           l207 0566  
                         l272 0091                           l492 17D4                           l667 0A95  
                         _RA1 0029                           _RB2 0032                           _RC2 003A  
                         _RB4 0034                           _RB5 0035                           _PEN 048A  
                __CFG_CPD$OFF 0000                           _SEN 0488                           _RX9 00C6  
                         _TX9 04C6                           fsr0 0004                           indf 0000  
                __CFG_FOSC$HS 0000                  __CFG_LVP$OFF 0000                          l3111 0C22  
                        l3023 06D8                          l3009 06B0                          l3211 00F7  
                        l3115 0C30                          l3035 0706                          l3019 06CB  
                        l3221 0160                          l3205 00E8                          l3301 0DD3  
                        l3109 0C1F                          l3061 075C                          l3045 0721  
                        l3231 0205                          l3223 019D                          l3143 0059  
                        l3119 0C3B                          l3071 0777                          l3233 020C  
                        l3241 02A4                          l3305 0DED                          l3321 0BB8  
                        l3129 0BFF                          l3049 072E                          l2603 0A38  
                        l3251 02C6                          l3155 008A                          l3075 0784  
                        l3403 0CB0                          l3411 0CB6                          l3237 0293  
                        l3245 02B7                          l3309 0E00                          l3333 0BED  
                        l3149 0076                          l3157 0038                          l3093 07B0  
                        l2623 09DA                          l2703 0B2E                          l3255 02E0  
                        l3263 030D                          l3271 0D48                          l3319 0BA8  
                        l3095 032F                          l3511 0A6F                          l2633 09F2  
                        l3193 00BD                          l3329 0BE0                          l3169 00A9  
                        l2801 0429                          l3513 0A71                          l3521 0A82  
                        l2651 0970                          l2707 0B36                          l3259 02FA  
                        l3291 0DAA                          l3283 0D73                          l2731 0355  
                        l3523 0A54                          l3277 0D64                          l3541 0B85  
                        l2573 0AD0                          l2805 0436                          l2901 0564  
                        l3517 0A7B                          l3199 00D9                          l2575 0ADD  
                        l2831 048C                          l2751 0386                          l2593 0A20  
                        l2681 0AF7                          l3297 0DB9                          l2921 0597  
                        l2817 0464                          l2737 035E                          l2729 0336  
                        l2659 0980                          l2691 0AFF                          l2675 0AEC  
                        l3539 0B6B                          l2931 05AE                          l2907 056F  
                        l2843 04BA                          l2827 047F                          l2747 0379  
                        l2693 0B0D                          l2941 05C9                          l2917 058A  
                        l2853 04D5                          l2765 03B8                          l3397 0C88  
                        l2791 040E                          l2775 03D3                          l3831 0F0B  
                        l3807 0E9F                          l2945 05D6                          l2857 04E2  
                        l3825 0EF3                          l3817 0EC4                          l2699 0B23  
                        l2971 062C                          l2883 0538                          l2779 03E0  
                        l3843 0F32                          l2957 0604                          l2869 0510  
                        l2983 065A                          l2967 061F                          l2879 052B  
                        l3863 0FD9                          l2993 0675                          l3867 0FF0  
                        l2997 0682                          STR_1 0817                          STR_2 0817  
                        STR_3 0817                          STR_4 0817                          STR_5 0817  
                        STR_6 0817                          STR_7 0810                          STR_8 0810  
                        STR_9 0810                          _BRGH 04C2                          _CREN 00C4  
                        _FERR 00C2                          u2105 0B24                          u2205 039F  
                        u2065 0B02                          u3025 0DFE                          u3115 0C86  
                        u2085 0B0E                          u3045 0BAC                          u2405 054D  
                        u2325 04A1                          u2245 03F5                          u3125 0CAE  
                        u2095 0B1A                          u3065 0BBA                          u3075 0BCF  
                        u2515 0641                          u3085 0BE1                          u2365 04F7  
                        u2285 044B                          _FMRX 0909                          u1905 0AC0  
                        u3195 09A1                          u2635 0743                          u2555 0697  
                        u2475 05EB                          _FMTX 0935                          u2815 00BB  
                        u2905 02B5                          u2825 00D7                          u3570 0F50  
                        u1875 0842                          u2915 02C4                          u2835 00E6  
                        u3707 0AC4                          u2675 0799                          u2595 06ED  
                        u3627 0E22                          u3580 0F66                          u2845 00F5  
                        u3717 0B90                          u3637 0E50                          u3590 0F7C  
                        u2775 0046                          u3647 0F1D                          u2945 030B  
                        u3657 0F3F                          u2955 0D46                          u3667 0FD1  
                        _RCIE 0465                          _RCEN 048B                          _RCIF 0065  
                        _CWTX 08DD                          u2965 0D62                          u3677 0FF8  
                        u2895 02A2                          u2975 0D71                          u3687 0011  
                        u2985 0DA8                          u3697 0022                          u2995 0DB7  
                        _OERR 00C1                          _TMR1 000E                          _SPEN 00C7  
                        _RSEN 0489                          _SREN 00C5                          _TXIE 0464  
                        _TXEN 04C5                          _TXIF 0064                          _SYNC 04C4  
                        __NOP 0837                  __CFG_WRT$OFF 0000                          _main 0E1A  
                 _NM_waddress 17EE                 ??_Init_SERIAL 0070                          btemp 007E  
               __CFG_BOREN$ON 0000                          ltemp 007E                  getbit@oldbit 00E7  
                 Init_I2C_M@c 0020                          start 0000  ReceivePacket_data@fcschecker 003D  
                        ttemp 007E                          wtemp 007E                 __CFG_IESO$OFF 0000  
               __CFG_MCLRE$ON 0000          __end_of_EEPROM_Write 0B98                         ?_FMRX 005C  
                       ?_FMTX 005C                         ?_CWTX 005C              ?_I2C_Master_Wait 0070  
            ?_I2C_Master_Stop 0070                         ?__NOP 0070                         ?_main 0070  
                       _ACKEN 048C                         _ACKDT 048D               __end_of___awdiv 0B3B  
                       STR_10 0810                         STR_11 0810                         STR_12 0810  
                       STR_15 0808                         STR_16 081E                 __CFG_WDTE$OFF 0000  
                       _ANSEL 0188               __end_of___lldiv 0BF6               ___awdiv@divisor 0070  
             ___awdiv@counter 0075                         _RCREG 001A                         _SPBRG 0099  
                       _PORTA 0005                         _PORTB 0006                         _PORTC 0007  
                       _PORTD 0008                         _PORTE 0009                         _H_OUT 09C3  
                       _OUTFQ 00AC                         _TRISA 0085                         _TRISB 0086  
                       _TRISC 0087                         _TRISD 0088                         _TRISE 0089  
                       _L_OUT 0A09                         _TXREG 0019                 __CFG_PWRTE$ON 0000  
              __CFG_FCMEN$OFF 0000                         _dData 0130               __end_of_getdata 0C57  
                       _eflag 0068                 getdata@dstuff 0022                         _putch 17C4  
                       main@i 00BF                         pclath 000A                         ltemp0 007E  
                       ltemp1 0082                         ltemp2 0086                         ltemp3 0080  
                       ttemp0 007E                         ttemp1 0081                         ttemp2 0084  
                       ttemp3 0087                         ttemp4 007F                         status 0003  
                       wtemp0 007E                         wtemp1 0080                         wtemp2 0082  
                       wtemp3 0084                         wtemp4 0086                         wtemp5 0088  
                       wtemp6 007F                    _Init_I2C_M 098F              EEPROM_Write@data 0074  
  __end_of_ReceivePacket_data 0CBC                  __end_of_FMRX 0935                  __end_of_FMTX 0961  
                __end_of_CWTX 0909                  __end_of__NOP 084C               __initialization 07B3  
                __end_of_main 1000           __end_of_Init_SERIAL 0865              __end_of_Init_MPU 08B5  
            __end_of_Init_WDT 0837                        ??_FMRX 007D                        ??_FMTX 007D  
                      ??_CWTX 007D                        ??__NOP 0070                        ??_main 0062  
                      ?_H_OUT 0072      EEPROM_Write@high_address 0072                        ?_OUTFQ 0079  
                      ?_L_OUT 0072             ?_I2C_Master_Start 0070             ?_I2C_Master_Write 0070  
                      OUTFQ@i 0056            ??_I2C_Master_Start 0070                        OUTFQ@j 005A  
          ??_I2C_Master_Write 0072              ___awdiv@dividend 0072                    _eDataField 0150  
                      ?_putch 0070                        _ANSELH 0189                        _RFDOUT 0D39  
                      _OPINIT 0CBC                        _SSPADD 0093                        _STBOUT 0961  
                      _STATUS 0003                        _SSPCON 0014                        _SSPBUF 0013  
                      __NOP@i 0070              __end_of_fcscheck 00AC                     ??___awdiv 0074  
                      _dfcshi 006C                     ??___lldiv 0078                        _dfcslo 006D  
                      _efcshi 006E                        _efcslo 006F                        _getbit 0A96  
          __size_of_Reset_EPS 0023                        _estuff 00E5              ___awdiv@quotient 0077  
                  _dPacketnum 0066                        _printf 0A4F                     ??_getdata 0076  
                 RFDOUT@i_477 003B                   RFDOUT@i_478 003F              __end_of_waitFlag 07B3  
  EEPROM_Write@EEPROM_address 0078       __end_of__initialization 07FC       EEPROM_Write@low_address 0073  
                 ?_Init_I2C_M 0020                   _Init_SERIAL 084C         __size_of_EEPROM_Write 005D  
               __end_of_H_OUT 0A09                 __end_of_OUTFQ 0327                 __end_of_L_OUT 0A4F  
               L_OUT@fmcwtxrx 0072                __pcstackCOMMON 0070                  __pidataBANK1 087E  
                __pidataBANK2 0865                  __pidataBANK3 08B5                 __end_of_putch 17CC  
                     ??_H_OUT 0074                       ??_OUTFQ 0020                       ??_L_OUT 0074  
                     ??_putch 0070                  _EEPROM_Write 0B3B                    __pbssBANK0 0066  
                  __pbssBANK1 00DC                    __pbssBANK2 0110                    __pbssBANK3 0190  
           __end_of_Reset_EPS 002A                     ?_Init_MPU 0070                       ?_RFDOUT 0079  
                   ?_Init_WDT 0070                       ?_OPINIT 0074                  ?_NM_waddress 0071  
                     ?_STBOUT 0072                       RFDOUT@i 003D                    __pmaintext 0E1A  
                  _ebitstatus 00E1                       ?_getbit 0070                       ?_printf 0071  
         __size_of_Init_I2C_M 0034                     OUTFQ@Nprg 007B                     ?_fcscheck 0070  
                     _SSPCON2 0091                       _SSPSTAT 0094                    __stringtab 0800  
                  ??_Init_MPU 0070                    ??_Init_WDT 0070               __size_of_RFDOUT 00E1  
             __size_of_OPINIT 007D               __size_of_STBOUT 002E                     ?_waitFlag 0070  
                     _dPacket 0190                       _ePacket 00DC                       ___awdiv 0AE2  
                     ___lldiv 0B98               __size_of_getbit 004C                   waitFlag@buf 003C  
                     __ptext1 0A4F                       __ptext2 0007                       __ptext3 0C57  
                     __ptext4 0327                       __ptext5 0BF6                       __ptext6 0A96  
                     __ptext7 002A                       __ptext8 17EE                       __ptext9 17C4  
             __size_of_printf 0047                       _getdata 0BF6            _ReceivePacket_data 0C57  
                   _T1CONbits 0010      __size_of_I2C_Master_Wait 0009      __size_of_I2C_Master_Stop 0007  
                  ??_fcscheck 0072           ?_ReceivePacket_data 0070                       getbit@i 0074  
                     clrloop0 17CD          end_of_initialization 07FC                  RFDOUT@Nref_b 0023  
                   _FMRX_Nref 00C4                     _FMRX_Nprg 01E0                     _FMTX_Nref 00C6  
                   _FMTX_Nprg 00D2                     _CWTX_Nref 00C2                     _CWTX_Nprg 00C8  
                 OUTFQ@Nprg_b 0030     __size_of_I2C_Master_Start 0007     __size_of_I2C_Master_Write 0008  
             ___lldiv@divisor 0070               ___lldiv@counter 007D                    ??_waitFlag 0076  
        ??_ReceivePacket_data 007A                       printf@c 0077                       printf@f 0076  
                  fcscheck@bt 0074                OPINIT@fmcwtxrx 0074                     _PORTAbits 0005  
                   _PORTCbits 0007                     _PORTDbits 0008                     _PORTEbits 0009  
                  getdata@buf 0026                  ??_Init_I2C_M 0024                  ?_Init_SERIAL 0070  
              __end_of_RFDOUT 0E1A                __end_of_OPINIT 0D39                __end_of_STBOUT 098F  
        __size_of_NM_waddress 0012                __end_of_getbit 0AE2                __end_of_printf 0A96  
         start_initialization 07B3            __end_of_Init_I2C_M 09C3                      ??_RFDOUT 0020  
                    ??_OPINIT 0076             ??_I2C_Master_Wait 0070             ??_I2C_Master_Stop 0070  
                    ??_STBOUT 0074             __size_of_Init_MPU 001D             __size_of_Init_WDT 0014  
                   _Reset_EPS 0007             getdata@dbitstatus 0024                    init_fetch0 17DD  
                    ??_getbit 0072                   __pdataBANK1 00C2                   __pdataBANK2 0150  
                 __pdataBANK3 01C2                    RFDOUT@Nref 007B                      ??_printf 0073  
         __end_of_commandSize 0808      NM_waddress@whigh_address 0071                     ___latbits 0002  
               __pcstackBANK0 0020                 __pcstackBANK1 00A0                      FMRX@Nref 005C  
                    FMRX@Nprg 005E                      FMTX@Nref 005C                      FMTX@Nprg 005E  
                    FMRX@fmrx 0060                      FMTX@fmtx 0060                      CWTX@Nref 005C  
                    CWTX@Nprg 005E             __size_of_fcscheck 0082                 waitFlag@j_111 0024  
               waitFlag@j_120 002E                 waitFlag@j_113 0026                 waitFlag@j_130 0038  
               waitFlag@j_122 0030                 waitFlag@j_115 0028                 waitFlag@j_124 0032  
               waitFlag@j_117 002A                 waitFlag@j_126 0034                 waitFlag@j_119 002C  
               waitFlag@j_128 0036                      CWTX@cwtx 0060              _I2C_Master_Start 17AE  
                  ?_Reset_EPS 0070              _I2C_Master_Write 17BC       getdata@bufstore_counter 0020  
                    ?___awdiv 0070                      ?___lldiv 0070             __size_of_waitFlag 048C  
                   __pstrings 0800                      ?_getdata 0070                __size_of_H_OUT 0046  
              __size_of_OUTFQ 027B                __size_of_L_OUT 0046                __size_of_putch 0008  
               H_OUT@fmcwtxrx 0072                     clear_ram0 17CC                      _PIE1bits 008C  
                  OUTFQ@i_466 0052                    OUTFQ@i_468 0058                     _rcv_state 006A  
        __size_of_Init_SERIAL 0019                      _PIR1bits 000C                    OUTFQ@count 0054  
                 _commandSize 0806                     fcscheck@i 0075                     main@F2011 01D6  
                   main@F2007 01C2                     main@F2009 01CC                   __stringbase 0805  
                   main@dData 00C1                    printf@flag 0074                      _Init_MPU 0898  
                    _Init_WDT 0823                   ??_Reset_EPS 0070                 fcscheck@i_142 0077  
 __size_of_ReceivePacket_data 0065              __size_of___awdiv 0059              __size_of___lldiv 005E  
          __end_of__stringtab 0806                    _EEPROMData 0110              __size_of_getdata 0061  
             _I2C_Master_Wait 17D4               _I2C_Master_Stop 17B5                RFDOUT@fmcwtxrx 0079  
                    _efcsflag 00E3                      _fcscheck 002A                      __ptext10 0823  
                    __ptext11 084C                      __ptext20 17AE                      __ptext12 0898  
                    __ptext21 17D4                      __ptext13 098F                      __ptext30 0837  
                    __ptext22 08DD                      __ptext14 0B98                      __ptext23 0D39  
                    __ptext15 0935                      __ptext24 00AC                      __ptext16 0909  
                    __ptext25 0AE2                      __ptext17 0B3B                      __ptext26 0CBC  
                    __ptext18 17BC                      __ptext27 0961                      __ptext19 17B5  
                    __ptext28 0A09                      __ptext29 09C3             __CFG_BOR4V$BOR21V 0000  
               ?_EEPROM_Write 0072                 __size_of_FMRX 002C                 __size_of_FMTX 002C  
               __size_of_CWTX 002C                 __size_of__NOP 0015                 ??_NM_waddress 0073  
                   waitFlag@i 0020                     waitFlag@j 0022                 __size_of_main 01E6  
              STBOUT@fmcwtxrx 0072                      _waitFlag 0327      NM_waddress@NM_wad_header 0073  
               OUTFQ@fmcwtxrx 0079      __end_of_I2C_Master_Start 17B5                     putch@byte 0070  
    __end_of_I2C_Master_Write 17C4                    _INTCONbits 000B                      init_ram0 17E1  
                fcscheck@byte 0079                ??_EEPROM_Write 0075            waitFlag@flag_judge 003A  
            ___lldiv@dividend 0074                     stringcode 0800                 main@FMRX_Nprg 00B4  
           main@NM_wad_header 00BE                 main@FMTX_Nprg 00A0           __end_of_NM_waddress 1800  
                    printf@ap 0075                 main@CWTX_Nprg 00AA       __end_of_I2C_Master_Wait 17DD  
     __end_of_I2C_Master_Stop 17BC              ___lldiv@quotient 0079             I2C_Master_Write@d 0070  
         EEPROM_Write@Address 0079                      stringdir 0800                      stringtab 0800  
         ReceivePacket_data@i 003F       NM_waddress@wlow_address 0072  
