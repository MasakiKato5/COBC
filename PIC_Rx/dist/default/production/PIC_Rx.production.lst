

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu May 17 22:10:30 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	dabs	1,0x7E,2
    52  0000                     
    53                           ; Version 1.45
    54                           ; Generated 16/11/2017 GMT
    55                           ; 
    56                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC16LF877A Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     	;# 
    88  0001                     	;# 
    89  0002                     	;# 
    90  0003                     	;# 
    91  0004                     	;# 
    92  0005                     	;# 
    93  0006                     	;# 
    94  0007                     	;# 
    95  0008                     	;# 
    96  0009                     	;# 
    97  000A                     	;# 
    98  000B                     	;# 
    99  000C                     	;# 
   100  000D                     	;# 
   101  000E                     	;# 
   102  000E                     	;# 
   103  000F                     	;# 
   104  0010                     	;# 
   105  0011                     	;# 
   106  0012                     	;# 
   107  0013                     	;# 
   108  0014                     	;# 
   109  0015                     	;# 
   110  0015                     	;# 
   111  0016                     	;# 
   112  0017                     	;# 
   113  0018                     	;# 
   114  0019                     	;# 
   115  001A                     	;# 
   116  001B                     	;# 
   117  001B                     	;# 
   118  001C                     	;# 
   119  001D                     	;# 
   120  001E                     	;# 
   121  001F                     	;# 
   122  0081                     	;# 
   123  0085                     	;# 
   124  0086                     	;# 
   125  0087                     	;# 
   126  0088                     	;# 
   127  0089                     	;# 
   128  008C                     	;# 
   129  008D                     	;# 
   130  008E                     	;# 
   131  0091                     	;# 
   132  0092                     	;# 
   133  0093                     	;# 
   134  0094                     	;# 
   135  0098                     	;# 
   136  0099                     	;# 
   137  009C                     	;# 
   138  009D                     	;# 
   139  009E                     	;# 
   140  009F                     	;# 
   141  010C                     	;# 
   142  010D                     	;# 
   143  010E                     	;# 
   144  010F                     	;# 
   145  018C                     	;# 
   146  018D                     	;# 
   147  0000                     	;# 
   148  0001                     	;# 
   149  0002                     	;# 
   150  0003                     	;# 
   151  0004                     	;# 
   152  0005                     	;# 
   153  0006                     	;# 
   154  0007                     	;# 
   155  0008                     	;# 
   156  0009                     	;# 
   157  000A                     	;# 
   158  000B                     	;# 
   159  000C                     	;# 
   160  000D                     	;# 
   161  000E                     	;# 
   162  000E                     	;# 
   163  000F                     	;# 
   164  0010                     	;# 
   165  0011                     	;# 
   166  0012                     	;# 
   167  0013                     	;# 
   168  0014                     	;# 
   169  0015                     	;# 
   170  0015                     	;# 
   171  0016                     	;# 
   172  0017                     	;# 
   173  0018                     	;# 
   174  0019                     	;# 
   175  001A                     	;# 
   176  001B                     	;# 
   177  001B                     	;# 
   178  001C                     	;# 
   179  001D                     	;# 
   180  001E                     	;# 
   181  001F                     	;# 
   182  0081                     	;# 
   183  0085                     	;# 
   184  0086                     	;# 
   185  0087                     	;# 
   186  0088                     	;# 
   187  0089                     	;# 
   188  008C                     	;# 
   189  008D                     	;# 
   190  008E                     	;# 
   191  0091                     	;# 
   192  0092                     	;# 
   193  0093                     	;# 
   194  0094                     	;# 
   195  0098                     	;# 
   196  0099                     	;# 
   197  009C                     	;# 
   198  009D                     	;# 
   199  009E                     	;# 
   200  009F                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  010F                     	;# 
   205  018C                     	;# 
   206  018D                     	;# 
   207  0000                     	;# 
   208  0001                     	;# 
   209  0002                     	;# 
   210  0003                     	;# 
   211  0004                     	;# 
   212  0005                     	;# 
   213  0006                     	;# 
   214  0007                     	;# 
   215  0008                     	;# 
   216  0009                     	;# 
   217  000A                     	;# 
   218  000B                     	;# 
   219  000C                     	;# 
   220  000D                     	;# 
   221  000E                     	;# 
   222  000E                     	;# 
   223  000F                     	;# 
   224  0010                     	;# 
   225  0011                     	;# 
   226  0012                     	;# 
   227  0013                     	;# 
   228  0014                     	;# 
   229  0015                     	;# 
   230  0015                     	;# 
   231  0016                     	;# 
   232  0017                     	;# 
   233  0018                     	;# 
   234  0019                     	;# 
   235  001A                     	;# 
   236  001B                     	;# 
   237  001B                     	;# 
   238  001C                     	;# 
   239  001D                     	;# 
   240  001E                     	;# 
   241  001F                     	;# 
   242  0081                     	;# 
   243  0085                     	;# 
   244  0086                     	;# 
   245  0087                     	;# 
   246  0088                     	;# 
   247  0089                     	;# 
   248  008C                     	;# 
   249  008D                     	;# 
   250  008E                     	;# 
   251  0091                     	;# 
   252  0092                     	;# 
   253  0093                     	;# 
   254  0094                     	;# 
   255  0098                     	;# 
   256  0099                     	;# 
   257  009C                     	;# 
   258  009D                     	;# 
   259  009E                     	;# 
   260  009F                     	;# 
   261  010C                     	;# 
   262  010D                     	;# 
   263  010E                     	;# 
   264  010F                     	;# 
   265  018C                     	;# 
   266  018D                     	;# 
   267  0000                     	;# 
   268  0001                     	;# 
   269  0002                     	;# 
   270  0003                     	;# 
   271  0004                     	;# 
   272  0005                     	;# 
   273  0006                     	;# 
   274  0007                     	;# 
   275  0008                     	;# 
   276  0009                     	;# 
   277  000A                     	;# 
   278  000B                     	;# 
   279  000C                     	;# 
   280  000D                     	;# 
   281  000E                     	;# 
   282  000E                     	;# 
   283  000F                     	;# 
   284  0010                     	;# 
   285  0011                     	;# 
   286  0012                     	;# 
   287  0013                     	;# 
   288  0014                     	;# 
   289  0015                     	;# 
   290  0015                     	;# 
   291  0016                     	;# 
   292  0017                     	;# 
   293  0018                     	;# 
   294  0019                     	;# 
   295  001A                     	;# 
   296  001B                     	;# 
   297  001B                     	;# 
   298  001C                     	;# 
   299  001D                     	;# 
   300  001E                     	;# 
   301  001F                     	;# 
   302  0081                     	;# 
   303  0085                     	;# 
   304  0086                     	;# 
   305  0087                     	;# 
   306  0088                     	;# 
   307  0089                     	;# 
   308  008C                     	;# 
   309  008D                     	;# 
   310  008E                     	;# 
   311  0091                     	;# 
   312  0092                     	;# 
   313  0093                     	;# 
   314  0094                     	;# 
   315  0098                     	;# 
   316  0099                     	;# 
   317  009C                     	;# 
   318  009D                     	;# 
   319  009E                     	;# 
   320  009F                     	;# 
   321  010C                     	;# 
   322  010D                     	;# 
   323  010E                     	;# 
   324  010F                     	;# 
   325  018C                     	;# 
   326  018D                     	;# 
   327  0000                     	;# 
   328  0001                     	;# 
   329  0002                     	;# 
   330  0003                     	;# 
   331  0004                     	;# 
   332  0005                     	;# 
   333  0006                     	;# 
   334  0007                     	;# 
   335  0008                     	;# 
   336  0009                     	;# 
   337  000A                     	;# 
   338  000B                     	;# 
   339  000C                     	;# 
   340  000D                     	;# 
   341  000E                     	;# 
   342  000E                     	;# 
   343  000F                     	;# 
   344  0010                     	;# 
   345  0011                     	;# 
   346  0012                     	;# 
   347  0013                     	;# 
   348  0014                     	;# 
   349  0015                     	;# 
   350  0015                     	;# 
   351  0016                     	;# 
   352  0017                     	;# 
   353  0018                     	;# 
   354  0019                     	;# 
   355  001A                     	;# 
   356  001B                     	;# 
   357  001B                     	;# 
   358  001C                     	;# 
   359  001D                     	;# 
   360  001E                     	;# 
   361  001F                     	;# 
   362  0081                     	;# 
   363  0085                     	;# 
   364  0086                     	;# 
   365  0087                     	;# 
   366  0088                     	;# 
   367  0089                     	;# 
   368  008C                     	;# 
   369  008D                     	;# 
   370  008E                     	;# 
   371  0091                     	;# 
   372  0092                     	;# 
   373  0093                     	;# 
   374  0094                     	;# 
   375  0098                     	;# 
   376  0099                     	;# 
   377  009C                     	;# 
   378  009D                     	;# 
   379  009E                     	;# 
   380  009F                     	;# 
   381  010C                     	;# 
   382  010D                     	;# 
   383  010E                     	;# 
   384  010F                     	;# 
   385  018C                     	;# 
   386  018D                     	;# 
   387  0000                     	;# 
   388  0001                     	;# 
   389  0002                     	;# 
   390  0003                     	;# 
   391  0004                     	;# 
   392  0005                     	;# 
   393  0006                     	;# 
   394  0007                     	;# 
   395  0008                     	;# 
   396  0009                     	;# 
   397  000A                     	;# 
   398  000B                     	;# 
   399  000C                     	;# 
   400  000D                     	;# 
   401  000E                     	;# 
   402  000E                     	;# 
   403  000F                     	;# 
   404  0010                     	;# 
   405  0011                     	;# 
   406  0012                     	;# 
   407  0013                     	;# 
   408  0014                     	;# 
   409  0015                     	;# 
   410  0015                     	;# 
   411  0016                     	;# 
   412  0017                     	;# 
   413  0018                     	;# 
   414  0019                     	;# 
   415  001A                     	;# 
   416  001B                     	;# 
   417  001B                     	;# 
   418  001C                     	;# 
   419  001D                     	;# 
   420  001E                     	;# 
   421  001F                     	;# 
   422  0081                     	;# 
   423  0085                     	;# 
   424  0086                     	;# 
   425  0087                     	;# 
   426  0088                     	;# 
   427  0089                     	;# 
   428  008C                     	;# 
   429  008D                     	;# 
   430  008E                     	;# 
   431  0091                     	;# 
   432  0092                     	;# 
   433  0093                     	;# 
   434  0094                     	;# 
   435  0098                     	;# 
   436  0099                     	;# 
   437  009C                     	;# 
   438  009D                     	;# 
   439  009E                     	;# 
   440  009F                     	;# 
   441  010C                     	;# 
   442  010D                     	;# 
   443  010E                     	;# 
   444  010F                     	;# 
   445  018C                     	;# 
   446  018D                     	;# 
   447  0000                     	;# 
   448  0001                     	;# 
   449  0002                     	;# 
   450  0003                     	;# 
   451  0004                     	;# 
   452  0005                     	;# 
   453  0006                     	;# 
   454  0007                     	;# 
   455  0008                     	;# 
   456  0009                     	;# 
   457  000A                     	;# 
   458  000B                     	;# 
   459  000C                     	;# 
   460  000D                     	;# 
   461  000E                     	;# 
   462  000E                     	;# 
   463  000F                     	;# 
   464  0010                     	;# 
   465  0011                     	;# 
   466  0012                     	;# 
   467  0013                     	;# 
   468  0014                     	;# 
   469  0015                     	;# 
   470  0015                     	;# 
   471  0016                     	;# 
   472  0017                     	;# 
   473  0018                     	;# 
   474  0019                     	;# 
   475  001A                     	;# 
   476  001B                     	;# 
   477  001B                     	;# 
   478  001C                     	;# 
   479  001D                     	;# 
   480  001E                     	;# 
   481  001F                     	;# 
   482  0081                     	;# 
   483  0085                     	;# 
   484  0086                     	;# 
   485  0087                     	;# 
   486  0088                     	;# 
   487  0089                     	;# 
   488  008C                     	;# 
   489  008D                     	;# 
   490  008E                     	;# 
   491  0091                     	;# 
   492  0092                     	;# 
   493  0093                     	;# 
   494  0094                     	;# 
   495  0098                     	;# 
   496  0099                     	;# 
   497  009C                     	;# 
   498  009D                     	;# 
   499  009E                     	;# 
   500  009F                     	;# 
   501  010C                     	;# 
   502  010D                     	;# 
   503  010E                     	;# 
   504  010F                     	;# 
   505  018C                     	;# 
   506  018D                     	;# 
   507  0000                     	;# 
   508  0001                     	;# 
   509  0002                     	;# 
   510  0003                     	;# 
   511  0004                     	;# 
   512  0005                     	;# 
   513  0006                     	;# 
   514  0007                     	;# 
   515  0008                     	;# 
   516  0009                     	;# 
   517  000A                     	;# 
   518  000B                     	;# 
   519  000C                     	;# 
   520  000D                     	;# 
   521  000E                     	;# 
   522  000E                     	;# 
   523  000F                     	;# 
   524  0010                     	;# 
   525  0011                     	;# 
   526  0012                     	;# 
   527  0013                     	;# 
   528  0014                     	;# 
   529  0015                     	;# 
   530  0015                     	;# 
   531  0016                     	;# 
   532  0017                     	;# 
   533  0018                     	;# 
   534  0019                     	;# 
   535  001A                     	;# 
   536  001B                     	;# 
   537  001B                     	;# 
   538  001C                     	;# 
   539  001D                     	;# 
   540  001E                     	;# 
   541  001F                     	;# 
   542  0081                     	;# 
   543  0085                     	;# 
   544  0086                     	;# 
   545  0087                     	;# 
   546  0088                     	;# 
   547  0089                     	;# 
   548  008C                     	;# 
   549  008D                     	;# 
   550  008E                     	;# 
   551  0091                     	;# 
   552  0092                     	;# 
   553  0093                     	;# 
   554  0094                     	;# 
   555  0098                     	;# 
   556  0099                     	;# 
   557  009C                     	;# 
   558  009D                     	;# 
   559  009E                     	;# 
   560  009F                     	;# 
   561  010C                     	;# 
   562  010D                     	;# 
   563  010E                     	;# 
   564  010F                     	;# 
   565  018C                     	;# 
   566  018D                     	;# 
   567  0000                     	;# 
   568  0001                     	;# 
   569  0002                     	;# 
   570  0003                     	;# 
   571  0004                     	;# 
   572  0005                     	;# 
   573  0006                     	;# 
   574  0007                     	;# 
   575  0008                     	;# 
   576  0009                     	;# 
   577  000A                     	;# 
   578  000B                     	;# 
   579  000C                     	;# 
   580  000D                     	;# 
   581  000E                     	;# 
   582  000E                     	;# 
   583  000F                     	;# 
   584  0010                     	;# 
   585  0011                     	;# 
   586  0012                     	;# 
   587  0013                     	;# 
   588  0014                     	;# 
   589  0015                     	;# 
   590  0015                     	;# 
   591  0016                     	;# 
   592  0017                     	;# 
   593  0018                     	;# 
   594  0019                     	;# 
   595  001A                     	;# 
   596  001B                     	;# 
   597  001B                     	;# 
   598  001C                     	;# 
   599  001D                     	;# 
   600  001E                     	;# 
   601  001F                     	;# 
   602  0081                     	;# 
   603  0085                     	;# 
   604  0086                     	;# 
   605  0087                     	;# 
   606  0088                     	;# 
   607  0089                     	;# 
   608  008C                     	;# 
   609  008D                     	;# 
   610  008E                     	;# 
   611  0091                     	;# 
   612  0092                     	;# 
   613  0093                     	;# 
   614  0094                     	;# 
   615  0098                     	;# 
   616  0099                     	;# 
   617  009C                     	;# 
   618  009D                     	;# 
   619  009E                     	;# 
   620  009F                     	;# 
   621  010C                     	;# 
   622  010D                     	;# 
   623  010E                     	;# 
   624  010F                     	;# 
   625  018C                     	;# 
   626  018D                     	;# 
   627  0000                     	;# 
   628  0001                     	;# 
   629  0002                     	;# 
   630  0003                     	;# 
   631  0004                     	;# 
   632  0005                     	;# 
   633  0006                     	;# 
   634  0007                     	;# 
   635  0008                     	;# 
   636  0009                     	;# 
   637  000A                     	;# 
   638  000B                     	;# 
   639  000C                     	;# 
   640  000D                     	;# 
   641  000E                     	;# 
   642  000E                     	;# 
   643  000F                     	;# 
   644  0010                     	;# 
   645  0011                     	;# 
   646  0012                     	;# 
   647  0013                     	;# 
   648  0014                     	;# 
   649  0015                     	;# 
   650  0015                     	;# 
   651  0016                     	;# 
   652  0017                     	;# 
   653  0018                     	;# 
   654  0019                     	;# 
   655  001A                     	;# 
   656  001B                     	;# 
   657  001B                     	;# 
   658  001C                     	;# 
   659  001D                     	;# 
   660  001E                     	;# 
   661  001F                     	;# 
   662  0081                     	;# 
   663  0085                     	;# 
   664  0086                     	;# 
   665  0087                     	;# 
   666  0088                     	;# 
   667  0089                     	;# 
   668  008C                     	;# 
   669  008D                     	;# 
   670  008E                     	;# 
   671  0091                     	;# 
   672  0092                     	;# 
   673  0093                     	;# 
   674  0094                     	;# 
   675  0098                     	;# 
   676  0099                     	;# 
   677  009C                     	;# 
   678  009D                     	;# 
   679  009E                     	;# 
   680  009F                     	;# 
   681  010C                     	;# 
   682  010D                     	;# 
   683  010E                     	;# 
   684  010F                     	;# 
   685  018C                     	;# 
   686  018D                     	;# 
   687                           
   688                           	psect	idataBANK1
   689  08AA                     __pidataBANK1:	
   690                           
   691                           ;initializer for _FMRX_Nref
   692  08AA  3400               	retlw	0
   693  08AB  340A               	retlw	10
   694                           
   695                           ;initializer for _CWTX_Nref
   696  08AC  34A0               	retlw	160
   697  08AD  3400               	retlw	0
   698                           
   699                           ;initializer for _FMTX_Nref
   700  08AE  3400               	retlw	0
   701  08AF  340A               	retlw	10
   702                           
   703                           ;initializer for _CWTX_Nprg
   704  08B0  3400               	retlw	0
   705  08B1  3400               	retlw	0
   706  08B2  3401               	retlw	1
   707  08B3  3400               	retlw	0
   708  08B4  3407               	retlw	7
   709  08B5  3400               	retlw	0
   710  08B6  3404               	retlw	4
   711  08B7  3400               	retlw	0
   712  08B8  3407               	retlw	7
   713  08B9  3400               	retlw	0
   714                           
   715                           ;initializer for _FMTX_Nprg
   716  08BA  3408               	retlw	8
   717  08BB  3400               	retlw	0
   718  08BC  3407               	retlw	7
   719  08BD  3400               	retlw	0
   720  08BE  3403               	retlw	3
   721  08BF  3400               	retlw	0
   722  08C0  3400               	retlw	0
   723  08C1  3400               	retlw	0
   724  08C2  3400               	retlw	0
   725  08C3  3400               	retlw	0
   726                           
   727                           	psect	idataBANK2
   728  0891                     __pidataBANK2:	
   729                           
   730                           ;initializer for _eDataField
   731  0891  3448               	retlw	72
   732  0892  3465               	retlw	101
   733  0893  346C               	retlw	108
   734  0894  346C               	retlw	108
   735  0895  346F               	retlw	111
   736  0896  3421               	retlw	33
   737  0897  3420               	retlw	32
   738  0898  3449               	retlw	73
   739  0899  3427               	retlw	39
   740  089A  346D               	retlw	109
   741  089B  3420               	retlw	32
   742  089C  344F               	retlw	79
   743  089D  3472               	retlw	114
   744  089E  3469               	retlw	105
   745  089F  3467               	retlw	103
   746  08A0  3461               	retlw	97
   747  08A1  346D               	retlw	109
   748  08A2  3469               	retlw	105
   749  08A3  3453               	retlw	83
   750  08A4  3461               	retlw	97
   751  08A5  3474               	retlw	116
   752  08A6  3431               	retlw	49
   753  08A7  3421               	retlw	33
   754  08A8  3421               	retlw	33
   755  08A9  3400               	retlw	0
   756                           
   757                           	psect	idataBANK3
   758  08C4                     __pidataBANK3:	
   759                           
   760                           ;initializer for main@F1464
   761  08C4  3402               	retlw	2
   762  08C5  3400               	retlw	0
   763  08C6  3404               	retlw	4
   764  08C7  3400               	retlw	0
   765  08C8  3408               	retlw	8
   766  08C9  3400               	retlw	0
   767  08CA  3408               	retlw	8
   768  08CB  3400               	retlw	0
   769  08CC  3407               	retlw	7
   770  08CD  3400               	retlw	0
   771                           
   772                           ;initializer for main@F1462
   773  08CE  3400               	retlw	0
   774  08CF  3400               	retlw	0
   775  08D0  3401               	retlw	1
   776  08D1  3400               	retlw	0
   777  08D2  3407               	retlw	7
   778  08D3  3400               	retlw	0
   779  08D4  3404               	retlw	4
   780  08D5  3400               	retlw	0
   781  08D6  3407               	retlw	7
   782  08D7  3400               	retlw	0
   783                           
   784                           ;initializer for main@F1460
   785  08D8  3408               	retlw	8
   786  08D9  3400               	retlw	0
   787  08DA  3407               	retlw	7
   788  08DB  3400               	retlw	0
   789  08DC  3403               	retlw	3
   790  08DD  3400               	retlw	0
   791  08DE  3400               	retlw	0
   792  08DF  3400               	retlw	0
   793  08E0  3400               	retlw	0
   794  08E1  3400               	retlw	0
   795                           
   796                           ;initializer for _FMRX_Nprg
   797  08E2  3402               	retlw	2
   798  08E3  3400               	retlw	0
   799  08E4  3404               	retlw	4
   800  08E5  3400               	retlw	0
   801  08E6  3408               	retlw	8
   802  08E7  3400               	retlw	0
   803  08E8  3408               	retlw	8
   804  08E9  3400               	retlw	0
   805  08EA  3407               	retlw	7
   806  08EB  3400               	retlw	0
   807                           
   808                           	psect	strings
   809  0800                     __pstrings:	
   810  0800                     stringtab:	
   811  0800                     __stringtab:	
   812  0800                     stringcode:	
   813                           ;	String table - string pointers are 1 byte each
   814                           
   815  0800                     stringdir:	
   816  0800  3008               	movlw	high stringdir
   817  0801  008A               	movwf	10
   818  0802  0804               	movf	4,w
   819  0803  0A84               	incf	4,f
   820  0804  0782               	addwf	2,f
   821  0805                     __stringbase:	
   822  0805  3400               	retlw	0
   823  0806                     __end_of__stringtab:	
   824  0806                     _commandSize:	
   825  0806  3420               	retlw	32
   826  0807  3400               	retlw	0
   827  0808                     __end_of_commandSize:	
   828  000E                     _TMR1	set	14
   829  0010                     _T1CONbits	set	16
   830  000C                     _PIR1bits	set	12
   831  000B                     _INTCONbits	set	11
   832  0008                     _PORTDbits	set	8
   833  0007                     _PORTCbits	set	7
   834  0009                     _PORTEbits	set	9
   835  0005                     _PORTAbits	set	5
   836  0013                     _SSPBUF	set	19
   837  0014                     _SSPCON	set	20
   838  0003                     _STATUS	set	3
   839  0009                     _PORTE	set	9
   840  0008                     _PORTD	set	8
   841  0007                     _PORTC	set	7
   842  0006                     _PORTB	set	6
   843  0005                     _PORTA	set	5
   844  0019                     _TXREG	set	25
   845  001A                     _RCREG	set	26
   846  0029                     _RA1	set	41
   847  0034                     _RB4	set	52
   848  0032                     _RB2	set	50
   849  0035                     _RB5	set	53
   850  003A                     _RC2	set	58
   851  003D                     _RC5	set	61
   852  0064                     _TXIF	set	100
   853  00C1                     _OERR	set	193
   854  00C2                     _FERR	set	194
   855  00C6                     _RX9	set	198
   856  0065                     _RCIF	set	101
   857  00C5                     _SREN	set	197
   858  00C4                     _CREN	set	196
   859  00C7                     _SPEN	set	199
   860  008C                     _PIE1bits	set	140
   861  0094                     _SSPSTAT	set	148
   862  0093                     _SSPADD	set	147
   863  0091                     _SSPCON2	set	145
   864  0089                     _TRISE	set	137
   865  0088                     _TRISD	set	136
   866  0087                     _TRISC	set	135
   867  0086                     _TRISB	set	134
   868  0085                     _TRISA	set	133
   869  0099                     _SPBRG	set	153
   870  048C                     _ACKEN	set	1164
   871  048D                     _ACKDT	set	1165
   872  048B                     _RCEN	set	1163
   873  048A                     _PEN	set	1162
   874  0489                     _RSEN	set	1161
   875  0488                     _SEN	set	1160
   876  04C5                     _TXEN	set	1221
   877  04C6                     _TX9	set	1222
   878  0465                     _RCIE	set	1125
   879  0464                     _TXIE	set	1124
   880  04C4                     _SYNC	set	1220
   881  04C2                     _BRGH	set	1218
   882  0808                     STR_7:	
   883  0808  344A               	retlw	74	;'J'
   884  0809  3451               	retlw	81	;'Q'
   885  080A  3431               	retlw	49	;'1'
   886  080B  345A               	retlw	90	;'Z'
   887  080C  3448               	retlw	72	;'H'
   888  080D  3458               	retlw	88	;'X'
   889  080E  3400               	retlw	0
   890  080F                     STR_1:	
   891  080F  344A               	retlw	74	;'J'
   892  0810  3451               	retlw	81	;'Q'
   893  0811  3431               	retlw	49	;'1'
   894  0812  3459               	retlw	89	;'Y'
   895  0813  3443               	retlw	67	;'C'
   896  0814  345A               	retlw	90	;'Z'
   897  0815  3400               	retlw	0
   898  0808                     
   899                           ; #config settings
   900  0000                     
   901                           	psect	cinit
   902  07B3                     start_initialization:	
   903  07B3                     __initialization:	
   904                           
   905                           ; Initialize objects allocated to BANK3
   906  07B3  1783               	bsf	3,7	;select IRP bank2
   907  07B4  30EC               	movlw	low (__pdataBANK3+40)
   908  07B5  00FD               	movwf	btemp+-1
   909  07B6  3008               	movlw	high __pidataBANK3
   910  07B7  00FE               	movwf	btemp
   911  07B8  30C4               	movlw	low __pidataBANK3
   912  07B9  00FF               	movwf	btemp+1
   913  07BA  30C4               	movlw	low __pdataBANK3
   914  07BB  0084               	movwf	4
   915  07BC  120A  158A  202B  120A  118A  	fcall	init_ram0
   916                           
   917                           ; Initialize objects allocated to BANK2
   918  07C1  3049               	movlw	low (__pdataBANK2+25)
   919  07C2  00FD               	movwf	btemp+-1
   920  07C3  3008               	movlw	high __pidataBANK2
   921  07C4  00FE               	movwf	btemp
   922  07C5  3091               	movlw	low __pidataBANK2
   923  07C6  00FF               	movwf	btemp+1
   924  07C7  3030               	movlw	low __pdataBANK2
   925  07C8  0084               	movwf	4
   926  07C9  120A  158A  202B  120A  118A  	fcall	init_ram0
   927                           
   928                           ; Initialize objects allocated to BANK1
   929  07CE  1383               	bcf	3,7	;select IRP bank0
   930  07CF  30DB               	movlw	low (__pdataBANK1+26)
   931  07D0  00FD               	movwf	btemp+-1
   932  07D1  3008               	movlw	high __pidataBANK1
   933  07D2  00FE               	movwf	btemp
   934  07D3  30AA               	movlw	low __pidataBANK1
   935  07D4  00FF               	movwf	btemp+1
   936  07D5  30C1               	movlw	low __pdataBANK1
   937  07D6  0084               	movwf	4
   938  07D7  120A  158A  202B  120A  118A  	fcall	init_ram0
   939                           
   940                           ; Clear objects allocated to BANK3
   941  07DC  1783               	bsf	3,7	;select IRP bank2
   942  07DD  3090               	movlw	low __pbssBANK3
   943  07DE  0084               	movwf	4
   944  07DF  30C4               	movlw	low (__pbssBANK3+52)
   945  07E0  120A  158A  2016  120A  118A  	fcall	clear_ram0
   946                           
   947                           ; Clear objects allocated to BANK2
   948  07E5  3010               	movlw	low __pbssBANK2
   949  07E6  0084               	movwf	4
   950  07E7  3030               	movlw	low (__pbssBANK2+32)
   951  07E8  120A  158A  2016  120A  118A  	fcall	clear_ram0
   952                           
   953                           ; Clear objects allocated to BANK1
   954  07ED  1383               	bcf	3,7	;select IRP bank0
   955  07EE  30DB               	movlw	low __pbssBANK1
   956  07EF  0084               	movwf	4
   957  07F0  30E8               	movlw	low (__pbssBANK1+13)
   958  07F1  120A  158A  2016  120A  118A  	fcall	clear_ram0
   959                           
   960                           ; Clear objects allocated to BANK0
   961  07F6  3066               	movlw	low __pbssBANK0
   962  07F7  0084               	movwf	4
   963  07F8  3070               	movlw	low (__pbssBANK0+10)
   964  07F9  120A  158A  2016   	fcall	clear_ram0
   965  07FC                     end_of_initialization:	
   966                           ;End of C runtime variable initialization code
   967                           
   968  07FC                     __end_of__initialization:	
   969  07FC  0183               	clrf	3
   970  07FD  120A  158A  2E1C   	ljmp	_main	;jump to C main() function
   971                           
   972                           	psect	bssBANK0
   973  0066                     __pbssBANK0:	
   974  0066                     _eflag:	
   975  0066                     	ds	2
   976  0068                     _dPacketnum:	
   977  0068                     	ds	2
   978  006A                     _rcv_state:	
   979  006A                     	ds	2
   980  006C                     _efcshi:	
   981  006C                     	ds	1
   982  006D                     _efcslo:	
   983  006D                     	ds	1
   984  006E                     _dfcslo:	
   985  006E                     	ds	1
   986  006F                     _dfcshi:	
   987  006F                     	ds	1
   988                           
   989                           	psect	bssBANK1
   990  00DB                     __pbssBANK1:	
   991  00DB                     _ePacket:	
   992  00DB                     	ds	5
   993  00E0                     _ebitstatus:	
   994  00E0                     	ds	2
   995  00E2                     _estuff:	
   996  00E2                     	ds	2
   997  00E4                     _efcsflag:	
   998  00E4                     	ds	2
   999  00E6                     getbit@oldbit:	
  1000  00E6                     	ds	2
  1001                           
  1002                           	psect	dataBANK1
  1003  00C1                     __pdataBANK1:	
  1004  00C1                     _FMRX_Nref:	
  1005  00C1                     	ds	2
  1006  00C3                     _CWTX_Nref:	
  1007  00C3                     	ds	2
  1008  00C5                     _FMTX_Nref:	
  1009  00C5                     	ds	2
  1010  00C7                     _CWTX_Nprg:	
  1011  00C7                     	ds	10
  1012  00D1                     _FMTX_Nprg:	
  1013  00D1                     	ds	10
  1014                           
  1015                           	psect	bssBANK3
  1016  0190                     __pbssBANK3:	
  1017  0190                     _dPacket:	
  1018  0190                     	ds	52
  1019                           
  1020                           	psect	dataBANK3
  1021  01C4                     __pdataBANK3:	
  1022  01C4                     main@F1464:	
  1023  01C4                     	ds	10
  1024  01CE                     main@F1462:	
  1025  01CE                     	ds	10
  1026  01D8                     main@F1460:	
  1027  01D8                     	ds	10
  1028  01E2                     _FMRX_Nprg:	
  1029  01E2                     	ds	10
  1030                           
  1031                           	psect	bssBANK2
  1032  0110                     __pbssBANK2:	
  1033  0110                     _dData:	
  1034  0110                     	ds	32
  1035                           
  1036                           	psect	dataBANK2
  1037  0130                     __pdataBANK2:	
  1038  0130                     _eDataField:	
  1039  0130                     	ds	25
  1040                           
  1041                           	psect	inittext
  1042  0827                     init_fetch0:	
  1043                           ;	Called with low address in FSR and high address in W
  1044                           
  1045  0827  087E               	movf	126,w
  1046  0828  008A               	movwf	10
  1047  0829  087F               	movf	127,w
  1048  082A  0082               	movwf	2
  1049  082B                     init_ram0:	
  1050                           ;Called with:
  1051                           ;	high address of idata address in btemp 
  1052                           ;	low address of idata address in btemp+1 
  1053                           ;	low address of data in FSR
  1054                           ;	high address + 1 of data in btemp-1
  1055                           
  1056  082B  2027  120A  158A   	fcall	init_fetch0
  1057  082E  0080               	movwf	0
  1058  082F  0A84               	incf	4,f
  1059  0830  0804               	movf	4,w
  1060  0831  067D               	xorwf	125,w
  1061  0832  1903               	btfsc	3,2
  1062  0833  3400               	retlw	0
  1063  0834  0AFF               	incf	127,f
  1064  0835  1903               	btfsc	3,2
  1065  0836  0AFE               	incf	126,f
  1066  0837  282B               	goto	init_ram0
  1067                           
  1068                           	psect	clrtext
  1069  0816                     clear_ram0:	
  1070                           ;	Called with FSR containing the base address, and
  1071                           ;	W with the last address+1
  1072                           
  1073  0816  0064               	clrwdt	;clear the watchdog before getting into this loop
  1074  0817                     clrloop0:	
  1075  0817  0180               	clrf	0	;clear RAM location pointed to by FSR
  1076  0818  0A84               	incf	4,f	;increment pointer
  1077  0819  0604               	xorwf	4,w	;XOR with final address
  1078  081A  1903               	btfsc	3,2	;have we reached the end yet?
  1079  081B  3400               	retlw	0	;all done for this memory range, return
  1080  081C  0604               	xorwf	4,w	;XOR again to restore value
  1081  081D  2817               	goto	clrloop0	;do the next byte
  1082                           
  1083                           	psect	cstackBANK1
  1084  00A0                     __pcstackBANK1:	
  1085  00A0                     main@FMTX_Nprg:	
  1086                           
  1087                           ; 10 bytes @ 0x0
  1088  00A0                     	ds	10
  1089  00AA                     main@CWTX_Nprg:	
  1090                           
  1091                           ; 10 bytes @ 0xA
  1092  00AA                     	ds	10
  1093  00B4                     main@FMRX_Nprg:	
  1094                           
  1095                           ; 10 bytes @ 0x14
  1096  00B4                     	ds	10
  1097  00BE                     main@TXOBC_wad_header:	
  1098                           
  1099                           ; 1 bytes @ 0x1E
  1100  00BE                     	ds	1
  1101  00BF                     main@NM_wad_header:	
  1102                           
  1103                           ; 1 bytes @ 0x1F
  1104  00BF                     	ds	1
  1105  00C0                     main@dData:	
  1106                           
  1107                           ; 1 bytes @ 0x20
  1108  00C0                     	ds	1
  1109                           
  1110                           	psect	cstackCOMMON
  1111  0070                     __pcstackCOMMON:	
  1112  0070                     ?_ReceivePacket_data:	
  1113  0070                     ?_Reset_EPS:	
  1114                           ; 1 bytes @ 0x0
  1115                           
  1116  0070                     ??_Reset_EPS:	
  1117                           ; 1 bytes @ 0x0
  1118                           
  1119  0070                     ?__NOP:	
  1120                           ; 1 bytes @ 0x0
  1121                           
  1122  0070                     ??__NOP:	
  1123                           ; 1 bytes @ 0x0
  1124                           
  1125  0070                     ?_Init_SERIAL:	
  1126                           ; 1 bytes @ 0x0
  1127                           
  1128  0070                     ??_Init_SERIAL:	
  1129                           ; 1 bytes @ 0x0
  1130                           
  1131  0070                     ?_putch:	
  1132                           ; 1 bytes @ 0x0
  1133                           
  1134  0070                     ??_putch:	
  1135                           ; 1 bytes @ 0x0
  1136                           
  1137  0070                     ?_Init_MPU:	
  1138                           ; 1 bytes @ 0x0
  1139                           
  1140  0070                     ??_Init_MPU:	
  1141                           ; 1 bytes @ 0x0
  1142                           
  1143  0070                     ?_waitFlag:	
  1144                           ; 1 bytes @ 0x0
  1145                           
  1146  0070                     ?_getdata:	
  1147                           ; 1 bytes @ 0x0
  1148                           
  1149  0070                     ?_main:	
  1150                           ; 1 bytes @ 0x0
  1151                           
  1152  0070                     ?_I2C_Master_Wait:	
  1153                           ; 1 bytes @ 0x0
  1154                           
  1155  0070                     ??_I2C_Master_Wait:	
  1156                           ; 1 bytes @ 0x0
  1157                           
  1158  0070                     ?_I2C_Master_Start:	
  1159                           ; 1 bytes @ 0x0
  1160                           
  1161  0070                     ??_I2C_Master_Start:	
  1162                           ; 1 bytes @ 0x0
  1163                           
  1164  0070                     ?_I2C_Master_Stop:	
  1165                           ; 1 bytes @ 0x0
  1166                           
  1167  0070                     ??_I2C_Master_Stop:	
  1168                           ; 1 bytes @ 0x0
  1169                           
  1170  0070                     ?_I2C_Master_Write:	
  1171                           ; 1 bytes @ 0x0
  1172                           
  1173  0070                     ?_getbit:	
  1174                           ; 1 bytes @ 0x0
  1175                           
  1176  0070                     ?_fcscheck:	
  1177                           ; 2 bytes @ 0x0
  1178                           
  1179  0070                     ?___awdiv:	
  1180                           ; 2 bytes @ 0x0
  1181                           
  1182  0070                     ?___lldiv:	
  1183                           ; 2 bytes @ 0x0
  1184                           
  1185  0070                     putch@byte:	
  1186                           ; 4 bytes @ 0x0
  1187                           
  1188  0070                     I2C_Master_Write@d:	
  1189                           ; 1 bytes @ 0x0
  1190                           
  1191  0070                     __NOP@i:	
  1192                           ; 2 bytes @ 0x0
  1193                           
  1194  0070                     ___awdiv@divisor:	
  1195                           ; 2 bytes @ 0x0
  1196                           
  1197  0070                     ___lldiv@divisor:	
  1198                           ; 2 bytes @ 0x0
  1199                           
  1200                           
  1201                           ; 4 bytes @ 0x0
  1202  0070                     	ds	1
  1203  0071                     ?_NM_waddress:	
  1204  0071                     ?_TXOBC_waddress:	
  1205                           ; 1 bytes @ 0x1
  1206                           
  1207  0071                     NM_waddress@whigh_address:	
  1208                           ; 1 bytes @ 0x1
  1209                           
  1210  0071                     TXOBC_waddress@whigh_address:	
  1211                           ; 1 bytes @ 0x1
  1212                           
  1213                           
  1214                           ; 1 bytes @ 0x1
  1215  0071                     	ds	1
  1216  0072                     ?_EEPROM_Write:	
  1217  0072                     ??_getbit:	
  1218                           ; 1 bytes @ 0x2
  1219                           
  1220  0072                     ??_fcscheck:	
  1221                           ; 1 bytes @ 0x2
  1222                           
  1223  0072                     ??_I2C_Master_Write:	
  1224                           ; 1 bytes @ 0x2
  1225                           
  1226  0072                     ?_L_OUT:	
  1227                           ; 1 bytes @ 0x2
  1228                           
  1229  0072                     ?_H_OUT:	
  1230                           ; 1 bytes @ 0x2
  1231                           
  1232  0072                     ?_STBOUT:	
  1233                           ; 1 bytes @ 0x2
  1234                           
  1235  0072                     NM_waddress@wlow_address:	
  1236                           ; 1 bytes @ 0x2
  1237                           
  1238  0072                     TXOBC_waddress@wlow_address:	
  1239                           ; 1 bytes @ 0x2
  1240                           
  1241  0072                     EEPROM_Write@high_address:	
  1242                           ; 1 bytes @ 0x2
  1243                           
  1244  0072                     L_OUT@fmcwtxrx:	
  1245                           ; 1 bytes @ 0x2
  1246                           
  1247  0072                     H_OUT@fmcwtxrx:	
  1248                           ; 2 bytes @ 0x2
  1249                           
  1250  0072                     STBOUT@fmcwtxrx:	
  1251                           ; 2 bytes @ 0x2
  1252                           
  1253  0072                     ___awdiv@dividend:	
  1254                           ; 2 bytes @ 0x2
  1255                           
  1256                           
  1257                           ; 2 bytes @ 0x2
  1258  0072                     	ds	1
  1259  0073                     ??_NM_waddress:	
  1260  0073                     ??_TXOBC_waddress:	
  1261                           ; 1 bytes @ 0x3
  1262                           
  1263  0073                     NM_waddress@NM_wad_header:	
  1264                           ; 1 bytes @ 0x3
  1265                           
  1266  0073                     EEPROM_Write@low_address:	
  1267                           ; 1 bytes @ 0x3
  1268                           
  1269                           
  1270                           ; 1 bytes @ 0x3
  1271  0073                     	ds	1
  1272  0074                     ??_L_OUT:	
  1273  0074                     ??_H_OUT:	
  1274                           ; 1 bytes @ 0x4
  1275                           
  1276  0074                     ??_STBOUT:	
  1277                           ; 1 bytes @ 0x4
  1278                           
  1279  0074                     ?_OPINIT:	
  1280                           ; 1 bytes @ 0x4
  1281                           
  1282  0074                     ??___awdiv:	
  1283                           ; 1 bytes @ 0x4
  1284                           
  1285  0074                     fcscheck@bt:	
  1286                           ; 1 bytes @ 0x4
  1287                           
  1288  0074                     EEPROM_Write@data:	
  1289                           ; 1 bytes @ 0x4
  1290                           
  1291  0074                     getbit@i:	
  1292                           ; 1 bytes @ 0x4
  1293                           
  1294  0074                     OPINIT@fmcwtxrx:	
  1295                           ; 2 bytes @ 0x4
  1296                           
  1297  0074                     ___lldiv@dividend:	
  1298                           ; 2 bytes @ 0x4
  1299                           
  1300                           
  1301                           ; 4 bytes @ 0x4
  1302  0074                     	ds	1
  1303  0075                     ??_EEPROM_Write:	
  1304  0075                     TXOBC_waddress@TXOBC_wad_header:	
  1305                           ; 1 bytes @ 0x5
  1306                           
  1307  0075                     ___awdiv@counter:	
  1308                           ; 1 bytes @ 0x5
  1309                           
  1310  0075                     fcscheck@i:	
  1311                           ; 1 bytes @ 0x5
  1312                           
  1313                           
  1314                           ; 2 bytes @ 0x5
  1315  0075                     	ds	1
  1316  0076                     ??_waitFlag:	
  1317  0076                     ??_getdata:	
  1318                           ; 1 bytes @ 0x6
  1319                           
  1320  0076                     ??_OPINIT:	
  1321                           ; 1 bytes @ 0x6
  1322                           
  1323  0076                     ___awdiv@sign:	
  1324                           ; 1 bytes @ 0x6
  1325                           
  1326                           
  1327                           ; 1 bytes @ 0x6
  1328  0076                     	ds	1
  1329  0077                     fcscheck@i_147:	
  1330  0077                     ___awdiv@quotient:	
  1331                           ; 2 bytes @ 0x7
  1332                           
  1333                           
  1334                           ; 2 bytes @ 0x7
  1335  0077                     	ds	1
  1336  0078                     ??___lldiv:	
  1337  0078                     EEPROM_Write@EEPROM_address:	
  1338                           ; 1 bytes @ 0x8
  1339                           
  1340                           
  1341                           ; 1 bytes @ 0x8
  1342  0078                     	ds	1
  1343  0079                     ?_OUTFQ:	
  1344  0079                     ?_RFDOUT:	
  1345                           ; 1 bytes @ 0x9
  1346                           
  1347  0079                     fcscheck@byte:	
  1348                           ; 1 bytes @ 0x9
  1349                           
  1350  0079                     EEPROM_Write@Address:	
  1351                           ; 1 bytes @ 0x9
  1352                           
  1353  0079                     OUTFQ@fmcwtxrx:	
  1354                           ; 1 bytes @ 0x9
  1355                           
  1356  0079                     RFDOUT@fmcwtxrx:	
  1357                           ; 2 bytes @ 0x9
  1358                           
  1359  0079                     ___lldiv@quotient:	
  1360                           ; 2 bytes @ 0x9
  1361                           
  1362                           
  1363                           ; 4 bytes @ 0x9
  1364  0079                     	ds	1
  1365  007A                     ??_ReceivePacket_data:	
  1366                           
  1367                           ; 1 bytes @ 0xA
  1368  007A                     	ds	1
  1369  007B                     OUTFQ@Nprg:	
  1370  007B                     RFDOUT@Nref:	
  1371                           ; 2 bytes @ 0xB
  1372                           
  1373                           
  1374                           ; 2 bytes @ 0xB
  1375  007B                     	ds	2
  1376  007D                     ??_FMTX:	
  1377  007D                     ??_CWTX:	
  1378                           ; 1 bytes @ 0xD
  1379                           
  1380  007D                     ??_FMRX:	
  1381                           ; 1 bytes @ 0xD
  1382                           
  1383  007D                     ___lldiv@counter:	
  1384                           ; 1 bytes @ 0xD
  1385                           
  1386                           
  1387                           ; 1 bytes @ 0xD
  1388  007D                     	ds	1
  1389                           
  1390                           	psect	cstackBANK0
  1391  0020                     __pcstackBANK0:	
  1392  0020                     ?_Init_I2C_M:	
  1393  0020                     ??_OUTFQ:	
  1394                           ; 1 bytes @ 0x0
  1395                           
  1396  0020                     ??_RFDOUT:	
  1397                           ; 1 bytes @ 0x0
  1398                           
  1399  0020                     waitFlag@i:	
  1400                           ; 1 bytes @ 0x0
  1401                           
  1402  0020                     getdata@bufstore_counter:	
  1403                           ; 2 bytes @ 0x0
  1404                           
  1405  0020                     Init_I2C_M@c:	
  1406                           ; 2 bytes @ 0x0
  1407                           
  1408                           
  1409                           ; 4 bytes @ 0x0
  1410  0020                     	ds	2
  1411  0022                     waitFlag@j:	
  1412  0022                     getdata@dstuff:	
  1413                           ; 2 bytes @ 0x2
  1414                           
  1415                           
  1416                           ; 2 bytes @ 0x2
  1417  0022                     	ds	1
  1418  0023                     RFDOUT@Nref_b:	
  1419                           
  1420                           ; 24 bytes @ 0x3
  1421  0023                     	ds	1
  1422  0024                     ??_Init_I2C_M:	
  1423  0024                     waitFlag@j_116:	
  1424                           ; 1 bytes @ 0x4
  1425                           
  1426  0024                     getdata@dbitstatus:	
  1427                           ; 2 bytes @ 0x4
  1428                           
  1429                           
  1430                           ; 2 bytes @ 0x4
  1431  0024                     	ds	2
  1432  0026                     getdata@buf:	
  1433  0026                     waitFlag@j_118:	
  1434                           ; 1 bytes @ 0x6
  1435                           
  1436                           
  1437                           ; 2 bytes @ 0x6
  1438  0026                     	ds	2
  1439  0028                     waitFlag@j_120:	
  1440                           
  1441                           ; 2 bytes @ 0x8
  1442  0028                     	ds	2
  1443  002A                     waitFlag@j_122:	
  1444                           
  1445                           ; 2 bytes @ 0xA
  1446  002A                     	ds	2
  1447  002C                     waitFlag@j_124:	
  1448                           
  1449                           ; 2 bytes @ 0xC
  1450  002C                     	ds	2
  1451  002E                     waitFlag@j_125:	
  1452                           
  1453                           ; 2 bytes @ 0xE
  1454  002E                     	ds	2
  1455  0030                     waitFlag@j_127:	
  1456  0030                     OUTFQ@Nprg_b:	
  1457                           ; 2 bytes @ 0x10
  1458                           
  1459                           
  1460                           ; 34 bytes @ 0x10
  1461  0030                     	ds	2
  1462  0032                     waitFlag@j_129:	
  1463                           
  1464                           ; 2 bytes @ 0x12
  1465  0032                     	ds	2
  1466  0034                     waitFlag@j_131:	
  1467                           
  1468                           ; 2 bytes @ 0x14
  1469  0034                     	ds	2
  1470  0036                     waitFlag@j_133:	
  1471                           
  1472                           ; 2 bytes @ 0x16
  1473  0036                     	ds	2
  1474  0038                     waitFlag@j_135:	
  1475                           
  1476                           ; 2 bytes @ 0x18
  1477  0038                     	ds	2
  1478  003A                     waitFlag@flag_judge:	
  1479                           
  1480                           ; 2 bytes @ 0x1A
  1481  003A                     	ds	1
  1482  003B                     RFDOUT@i_456:	
  1483                           
  1484                           ; 2 bytes @ 0x1B
  1485  003B                     	ds	1
  1486  003C                     waitFlag@buf:	
  1487                           
  1488                           ; 1 bytes @ 0x1C
  1489  003C                     	ds	1
  1490  003D                     ReceivePacket_data@fcschecker:	
  1491  003D                     RFDOUT@i:	
  1492                           ; 2 bytes @ 0x1D
  1493                           
  1494                           
  1495                           ; 2 bytes @ 0x1D
  1496  003D                     	ds	2
  1497  003F                     ReceivePacket_data@i:	
  1498  003F                     RFDOUT@i_457:	
  1499                           ; 2 bytes @ 0x1F
  1500                           
  1501                           
  1502                           ; 2 bytes @ 0x1F
  1503  003F                     	ds	19
  1504  0052                     OUTFQ@i_445:	
  1505                           
  1506                           ; 2 bytes @ 0x32
  1507  0052                     	ds	2
  1508  0054                     OUTFQ@count:	
  1509                           
  1510                           ; 2 bytes @ 0x34
  1511  0054                     	ds	2
  1512  0056                     OUTFQ@i:	
  1513                           
  1514                           ; 2 bytes @ 0x36
  1515  0056                     	ds	2
  1516  0058                     OUTFQ@i_447:	
  1517                           
  1518                           ; 2 bytes @ 0x38
  1519  0058                     	ds	2
  1520  005A                     OUTFQ@j:	
  1521                           
  1522                           ; 2 bytes @ 0x3A
  1523  005A                     	ds	2
  1524  005C                     ?_FMTX:	
  1525  005C                     ?_CWTX:	
  1526                           ; 1 bytes @ 0x3C
  1527                           
  1528  005C                     ?_FMRX:	
  1529                           ; 1 bytes @ 0x3C
  1530                           
  1531  005C                     FMTX@Nref:	
  1532                           ; 1 bytes @ 0x3C
  1533                           
  1534  005C                     CWTX@Nref:	
  1535                           ; 2 bytes @ 0x3C
  1536                           
  1537  005C                     FMRX@Nref:	
  1538                           ; 2 bytes @ 0x3C
  1539                           
  1540                           
  1541                           ; 2 bytes @ 0x3C
  1542  005C                     	ds	2
  1543  005E                     FMTX@Nprg:	
  1544  005E                     CWTX@Nprg:	
  1545                           ; 2 bytes @ 0x3E
  1546                           
  1547  005E                     FMRX@Nprg:	
  1548                           ; 2 bytes @ 0x3E
  1549                           
  1550                           
  1551                           ; 2 bytes @ 0x3E
  1552  005E                     	ds	2
  1553  0060                     FMTX@fmtx:	
  1554  0060                     CWTX@cwtx:	
  1555                           ; 2 bytes @ 0x40
  1556                           
  1557  0060                     FMRX@fmrx:	
  1558                           ; 2 bytes @ 0x40
  1559                           
  1560                           
  1561                           ; 2 bytes @ 0x40
  1562  0060                     	ds	2
  1563  0062                     ??_main:	
  1564                           
  1565                           ; 1 bytes @ 0x42
  1566  0062                     	ds	4
  1567                           
  1568                           	psect	maintext
  1569  0E1C                     __pmaintext:	
  1570 ;;
  1571 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1572 ;;
  1573 ;; *************** function _main *****************
  1574 ;; Defined at:
  1575 ;;		line 53 in file "main.c"
  1576 ;; Parameters:    Size  Location     Type
  1577 ;;		None
  1578 ;; Auto vars:     Size  Location     Type
  1579 ;;  FMRX_Nprg      10   20[BANK1 ] int [5]
  1580 ;;  CWTX_Nprg      10   10[BANK1 ] int [5]
  1581 ;;  FMTX_Nprg      10    0[BANK1 ] int [5]
  1582 ;;  NM_wad_heade    1   31[BANK1 ] unsigned char 
  1583 ;;  dData           1   32[BANK1 ] PTR unsigned char 
  1584 ;;		 -> NULL(0), dData(32), 
  1585 ;;  TXOBC_wad_he    1   30[BANK1 ] unsigned char 
  1586 ;; Return value:  Size  Location     Type
  1587 ;;                  1    wreg      void 
  1588 ;; Registers used:
  1589 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1590 ;; Tracked objects:
  1591 ;;		On entry : B00/0
  1592 ;;		On exit  : 0/0
  1593 ;;		Unchanged: 0/0
  1594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1595 ;;      Params:         0       0       0       0       0
  1596 ;;      Locals:         0       0      33       0       0
  1597 ;;      Temps:          0       4       0       0       0
  1598 ;;      Totals:         0       4      33       0       0
  1599 ;;Total ram usage:       37 bytes
  1600 ;; Hardware stack levels required when called:    4
  1601 ;; This function calls:
  1602 ;;		_CWTX
  1603 ;;		_EEPROM_Write
  1604 ;;		_FMRX
  1605 ;;		_FMTX
  1606 ;;		_Init_I2C_M
  1607 ;;		_Init_MPU
  1608 ;;		_Init_SERIAL
  1609 ;;		_NM_waddress
  1610 ;;		_ReceivePacket_data
  1611 ;;		_Reset_EPS
  1612 ;;		_TXOBC_waddress
  1613 ;; This function is called by:
  1614 ;;		Startup code after reset
  1615 ;; This function uses a non-reentrant model
  1616 ;;
  1617                           
  1618                           
  1619                           ;psect for function _main
  1620  0E1C                     _main:	
  1621                           
  1622                           ;main.c: 58: _delay((unsigned long)((200)*(10000000/4000.0)));
  1623                           
  1624                           ;incstack = 0
  1625                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1626  0E1C  3003               	movlw	3
  1627  0E1D  1283               	bcf	3,5	;RP0=0, select bank0
  1628  0E1E  1303               	bcf	3,6	;RP1=0, select bank0
  1629  0E1F  00E4               	movwf	??_main+2
  1630  0E20  308A               	movlw	138
  1631  0E21  00E3               	movwf	??_main+1
  1632  0E22  3055               	movlw	85
  1633  0E23  00E2               	movwf	??_main
  1634  0E24                     u3507:	
  1635  0E24  0BE2               	decfsz	??_main,f
  1636  0E25  2E24               	goto	u3507
  1637  0E26  0BE3               	decfsz	??_main+1,f
  1638  0E27  2E24               	goto	u3507
  1639  0E28  0BE4               	decfsz	??_main+2,f
  1640  0E29  2E24               	goto	u3507
  1641                           
  1642                           ;main.c: 60: Init_SERIAL();
  1643  0E2A  120A  158A  2078  120A  158A  	fcall	_Init_SERIAL
  1644                           
  1645                           ;main.c: 61: Init_MPU();
  1646  0E2F  120A  158A  205F  120A  158A  	fcall	_Init_MPU
  1647                           
  1648                           ;main.c: 62: Init_I2C_M(400000);
  1649  0E34  3000               	movlw	0
  1650  0E35  1283               	bcf	3,5	;RP0=0, select bank0
  1651  0E36  1303               	bcf	3,6	;RP1=0, select bank0
  1652  0E37  00A3               	movwf	Init_I2C_M@c+3
  1653  0E38  3006               	movlw	6
  1654  0E39  00A2               	movwf	Init_I2C_M@c+2
  1655  0E3A  301A               	movlw	26
  1656  0E3B  00A1               	movwf	Init_I2C_M@c+1
  1657  0E3C  3080               	movlw	128
  1658  0E3D  00A0               	movwf	Init_I2C_M@c
  1659  0E3E  120A  158A  219E  120A  158A  	fcall	_Init_I2C_M
  1660                           
  1661                           ;main.c: 69: RB2 = 1;
  1662  0E43  1283               	bcf	3,5	;RP0=0, select bank0
  1663  0E44  1303               	bcf	3,6	;RP1=0, select bank0
  1664  0E45  1506               	bsf	6,2	;volatile
  1665                           
  1666                           ;main.c: 70: _delay((unsigned long)((1000)*(10000000/4000.0)));
  1667  0E46  300D               	movlw	13
  1668  0E47  1283               	bcf	3,5	;RP0=0, select bank0
  1669  0E48  1303               	bcf	3,6	;RP1=0, select bank0
  1670  0E49  00E4               	movwf	??_main+2
  1671  0E4A  30AF               	movlw	175
  1672  0E4B  00E3               	movwf	??_main+1
  1673  0E4C  30B5               	movlw	181
  1674  0E4D  00E2               	movwf	??_main
  1675  0E4E                     u3517:	
  1676  0E4E  0BE2               	decfsz	??_main,f
  1677  0E4F  2E4E               	goto	u3517
  1678  0E50  0BE3               	decfsz	??_main+1,f
  1679  0E51  2E4E               	goto	u3517
  1680  0E52  0BE4               	decfsz	??_main+2,f
  1681  0E53  2E4E               	goto	u3517
  1682  0E54  2E55               	nop2
  1683                           
  1684                           ;main.c: 72: FMTX(FMTX_Nref, FMTX_Nprg);
  1685  0E55  1683               	bsf	3,5	;RP0=1, select bank1
  1686  0E56  1303               	bcf	3,6	;RP1=0, select bank1
  1687  0E57  0846               	movf	(_FMTX_Nref+1)^(0+128),w
  1688  0E58  1283               	bcf	3,5	;RP0=0, select bank0
  1689  0E59  1303               	bcf	3,6	;RP1=0, select bank0
  1690  0E5A  00DD               	movwf	FMTX@Nref+1
  1691  0E5B  1683               	bsf	3,5	;RP0=1, select bank1
  1692  0E5C  1303               	bcf	3,6	;RP1=0, select bank1
  1693  0E5D  0845               	movf	_FMTX_Nref^(0+128),w
  1694  0E5E  1283               	bcf	3,5	;RP0=0, select bank0
  1695  0E5F  1303               	bcf	3,6	;RP1=0, select bank0
  1696  0E60  00DC               	movwf	FMTX@Nref
  1697  0E61  30D1               	movlw	(low (_FMTX_Nprg| 0))& (0+255)
  1698  0E62  00DE               	movwf	FMTX@Nprg
  1699  0E63  3000               	movlw	0
  1700  0E64  00DF               	movwf	FMTX@Nprg+1
  1701  0E65  120A  158A  2144  120A  158A  	fcall	_FMTX
  1702                           
  1703                           ;main.c: 73: CWTX(CWTX_Nref, CWTX_Nprg);
  1704  0E6A  1683               	bsf	3,5	;RP0=1, select bank1
  1705  0E6B  1303               	bcf	3,6	;RP1=0, select bank1
  1706  0E6C  0844               	movf	(_CWTX_Nref+1)^(0+128),w
  1707  0E6D  1283               	bcf	3,5	;RP0=0, select bank0
  1708  0E6E  1303               	bcf	3,6	;RP1=0, select bank0
  1709  0E6F  00DD               	movwf	CWTX@Nref+1
  1710  0E70  1683               	bsf	3,5	;RP0=1, select bank1
  1711  0E71  1303               	bcf	3,6	;RP1=0, select bank1
  1712  0E72  0843               	movf	_CWTX_Nref^(0+128),w
  1713  0E73  1283               	bcf	3,5	;RP0=0, select bank0
  1714  0E74  1303               	bcf	3,6	;RP1=0, select bank0
  1715  0E75  00DC               	movwf	CWTX@Nref
  1716  0E76  30C7               	movlw	(low (_CWTX_Nprg| 0))& (0+255)
  1717  0E77  00DE               	movwf	CWTX@Nprg
  1718  0E78  3000               	movlw	0
  1719  0E79  00DF               	movwf	CWTX@Nprg+1
  1720  0E7A  120A  158A  20EC  120A  158A  	fcall	_CWTX
  1721                           
  1722                           ;main.c: 74: FMRX(FMRX_Nref, FMRX_Nprg);
  1723  0E7F  1683               	bsf	3,5	;RP0=1, select bank1
  1724  0E80  1303               	bcf	3,6	;RP1=0, select bank1
  1725  0E81  0842               	movf	(_FMRX_Nref+1)^(0+128),w
  1726  0E82  1283               	bcf	3,5	;RP0=0, select bank0
  1727  0E83  1303               	bcf	3,6	;RP1=0, select bank0
  1728  0E84  00DD               	movwf	FMRX@Nref+1
  1729  0E85  1683               	bsf	3,5	;RP0=1, select bank1
  1730  0E86  1303               	bcf	3,6	;RP1=0, select bank1
  1731  0E87  0841               	movf	_FMRX_Nref^(0+128),w
  1732  0E88  1283               	bcf	3,5	;RP0=0, select bank0
  1733  0E89  1303               	bcf	3,6	;RP1=0, select bank0
  1734  0E8A  00DC               	movwf	FMRX@Nref
  1735  0E8B  30E2               	movlw	(low (_FMRX_Nprg| (0+256)))& (0+255)
  1736  0E8C  00DE               	movwf	FMRX@Nprg
  1737  0E8D  3001               	movlw	1
  1738  0E8E  00DF               	movwf	FMRX@Nprg+1
  1739  0E8F  120A  158A  2118  120A  158A  	fcall	_FMRX
  1740                           
  1741                           ;main.c: 75: RB2 = 0;
  1742  0E94  1283               	bcf	3,5	;RP0=0, select bank0
  1743  0E95  1303               	bcf	3,6	;RP1=0, select bank0
  1744  0E96  1106               	bcf	6,2	;volatile
  1745  0E97                     l3689:	
  1746                           ;main.c: 78: while(1){
  1747                           
  1748                           
  1749                           ;main.c: 93: UBYTE *dData;
  1750                           ;main.c: 94: dData = ReceivePacket_data();
  1751  0E97  120A  158A  2459  120A  158A  	fcall	_ReceivePacket_data
  1752  0E9C  1283               	bcf	3,5	;RP0=0, select bank0
  1753  0E9D  1303               	bcf	3,6	;RP1=0, select bank0
  1754  0E9E  00E2               	movwf	??_main
  1755  0E9F  0862               	movf	??_main,w
  1756  0EA0  1683               	bsf	3,5	;RP0=1, select bank1
  1757  0EA1  1303               	bcf	3,6	;RP1=0, select bank1
  1758  0EA2  00C0               	movwf	main@dData^(0+128)
  1759                           
  1760                           ;main.c: 95: RB2 = 1;
  1761  0EA3  1283               	bcf	3,5	;RP0=0, select bank0
  1762  0EA4  1303               	bcf	3,6	;RP1=0, select bank0
  1763  0EA5  1506               	bsf	6,2	;volatile
  1764                           
  1765                           ;main.c: 96: _delay((unsigned long)((500)*(10000000/4000.0)));
  1766  0EA6  3007               	movlw	7
  1767  0EA7  1283               	bcf	3,5	;RP0=0, select bank0
  1768  0EA8  1303               	bcf	3,6	;RP1=0, select bank0
  1769  0EA9  00E4               	movwf	??_main+2
  1770  0EAA  3058               	movlw	88
  1771  0EAB  00E3               	movwf	??_main+1
  1772  0EAC  3059               	movlw	89
  1773  0EAD  00E2               	movwf	??_main
  1774  0EAE                     u3527:	
  1775  0EAE  0BE2               	decfsz	??_main,f
  1776  0EAF  2EAE               	goto	u3527
  1777  0EB0  0BE3               	decfsz	??_main+1,f
  1778  0EB1  2EAE               	goto	u3527
  1779  0EB2  0BE4               	decfsz	??_main+2,f
  1780  0EB3  2EAE               	goto	u3527
  1781                           
  1782                           ;main.c: 97: RB2 = 0;
  1783  0EB4  1283               	bcf	3,5	;RP0=0, select bank0
  1784  0EB5  1303               	bcf	3,6	;RP1=0, select bank0
  1785  0EB6  1106               	bcf	6,2	;volatile
  1786                           
  1787                           ;main.c: 99: EEPROM_Write(0x50,0x00,0x00,dData);
  1788  0EB7  01F2               	clrf	EEPROM_Write@high_address
  1789  0EB8  01F3               	clrf	EEPROM_Write@low_address
  1790  0EB9  1683               	bsf	3,5	;RP0=1, select bank1
  1791  0EBA  1303               	bcf	3,6	;RP1=0, select bank1
  1792  0EBB  0840               	movf	main@dData^(0+128),w
  1793  0EBC  1283               	bcf	3,5	;RP0=0, select bank0
  1794  0EBD  1303               	bcf	3,6	;RP1=0, select bank0
  1795  0EBE  00E2               	movwf	??_main
  1796  0EBF  0862               	movf	??_main,w
  1797  0EC0  00F4               	movwf	EEPROM_Write@data
  1798  0EC1  3050               	movlw	80
  1799  0EC2  120A  158A  233D  120A  158A  	fcall	_EEPROM_Write
  1800                           
  1801                           ;main.c: 100: _delay((unsigned long)((100)*(10000000/4000.0)));
  1802  0EC7  3002               	movlw	2
  1803  0EC8  1283               	bcf	3,5	;RP0=0, select bank0
  1804  0EC9  1303               	bcf	3,6	;RP1=0, select bank0
  1805  0ECA  00E4               	movwf	??_main+2
  1806  0ECB  3045               	movlw	69
  1807  0ECC  00E3               	movwf	??_main+1
  1808  0ECD  30A9               	movlw	169
  1809  0ECE  00E2               	movwf	??_main
  1810  0ECF                     u3537:	
  1811  0ECF  0BE2               	decfsz	??_main,f
  1812  0ED0  2ECF               	goto	u3537
  1813  0ED1  0BE3               	decfsz	??_main+1,f
  1814  0ED2  2ECF               	goto	u3537
  1815  0ED3  0BE4               	decfsz	??_main+2,f
  1816  0ED4  2ECF               	goto	u3537
  1817                           
  1818                           ;main.c: 104: UBYTE TXOBC_wad_header = 0x74;
  1819  0ED5  3074               	movlw	116
  1820  0ED6  1283               	bcf	3,5	;RP0=0, select bank0
  1821  0ED7  1303               	bcf	3,6	;RP1=0, select bank0
  1822  0ED8  00E2               	movwf	??_main
  1823  0ED9  0862               	movf	??_main,w
  1824  0EDA  1683               	bsf	3,5	;RP0=1, select bank1
  1825  0EDB  1303               	bcf	3,6	;RP1=0, select bank1
  1826  0EDC  00BE               	movwf	main@TXOBC_wad_header^(0+128)
  1827                           
  1828                           ;main.c: 105: TXOBC_waddress(TXOBC_wad_header, 0x00, 0x00);
  1829  0EDD  01F1               	clrf	TXOBC_waddress@whigh_address
  1830  0EDE  01F2               	clrf	TXOBC_waddress@wlow_address
  1831  0EDF  083E               	movf	main@TXOBC_wad_header^(0+128),w
  1832  0EE0  120A  158A  21D2  120A  158A  	fcall	_TXOBC_waddress
  1833                           
  1834                           ;main.c: 113: _delay((unsigned long)((7000)*(10000000/4000.0)));
  1835  0EE5  3059               	movlw	89
  1836  0EE6  1283               	bcf	3,5	;RP0=0, select bank0
  1837  0EE7  1303               	bcf	3,6	;RP1=0, select bank0
  1838  0EE8  00E4               	movwf	??_main+2
  1839  0EE9  30C8               	movlw	200
  1840  0EEA  00E3               	movwf	??_main+1
  1841  0EEB  3007               	movlw	7
  1842  0EEC  00E2               	movwf	??_main
  1843  0EED                     u3547:	
  1844  0EED  0BE2               	decfsz	??_main,f
  1845  0EEE  2EED               	goto	u3547
  1846  0EEF  0BE3               	decfsz	??_main+1,f
  1847  0EF0  2EED               	goto	u3547
  1848  0EF1  0BE4               	decfsz	??_main+2,f
  1849  0EF2  2EED               	goto	u3547
  1850  0EF3  2EF4               	nop2
  1851                           
  1852                           ;main.c: 118: if(dData[0]=='n'){
  1853  0EF4  1683               	bsf	3,5	;RP0=1, select bank1
  1854  0EF5  1303               	bcf	3,6	;RP1=0, select bank1
  1855  0EF6  0840               	movf	main@dData^(0+128),w
  1856  0EF7  0084               	movwf	4
  1857  0EF8  306E               	movlw	110
  1858  0EF9  1783               	bsf	3,7	;select IRP bank2
  1859  0EFA  0600               	xorwf	0,w
  1860  0EFB  1D03               	btfss	3,2
  1861  0EFC  2F0E               	goto	l3713
  1862                           
  1863                           ;main.c: 120: UBYTE NM_wad_header = 0x72;
  1864  0EFD  3072               	movlw	114
  1865  0EFE  1283               	bcf	3,5	;RP0=0, select bank0
  1866  0EFF  1303               	bcf	3,6	;RP1=0, select bank0
  1867  0F00  00E2               	movwf	??_main
  1868  0F01  0862               	movf	??_main,w
  1869  0F02  1683               	bsf	3,5	;RP0=1, select bank1
  1870  0F03  1303               	bcf	3,6	;RP1=0, select bank1
  1871  0F04  00BF               	movwf	main@NM_wad_header^(0+128)
  1872                           
  1873                           ;main.c: 121: NM_waddress(NM_wad_header, 0x00, 0x00);
  1874  0F05  01F1               	clrf	NM_waddress@whigh_address
  1875  0F06  01F2               	clrf	NM_waddress@wlow_address
  1876  0F07  083F               	movf	main@NM_wad_header^(0+128),w
  1877  0F08  120A  158A  2038  120A  158A  	fcall	_NM_waddress
  1878                           
  1879                           ;main.c: 123: }else if(dData[0]=='p'){
  1880  0F0D  2FF1               	goto	l438
  1881  0F0E                     l3713:	
  1882  0F0E  1683               	bsf	3,5	;RP0=1, select bank1
  1883  0F0F  1303               	bcf	3,6	;RP1=0, select bank1
  1884  0F10  0840               	movf	main@dData^(0+128),w
  1885  0F11  0084               	movwf	4
  1886  0F12  3070               	movlw	112
  1887  0F13  1783               	bsf	3,7	;select IRP bank2
  1888  0F14  0600               	xorwf	0,w
  1889  0F15  1D03               	btfss	3,2
  1890  0F16  2FDC               	goto	l439
  1891                           
  1892                           ;main.c: 128: if(dData[2] == 'r'){
  1893  0F17  0840               	movf	main@dData^(0+128),w
  1894  0F18  3E02               	addlw	2
  1895  0F19  0084               	movwf	4
  1896  0F1A  3072               	movlw	114
  1897  0F1B  0600               	xorwf	0,w
  1898  0F1C  1903               	btfsc	3,2
  1899  0F1D  2FC4               	goto	l3739
  1900  0F1E  2FF1               	goto	l438
  1901  0F1F                     l3719:	
  1902                           ;main.c: 134: case 'E':
  1903                           
  1904                           ;main.c: 133: switch(dData[3]){
  1905                           
  1906                           
  1907                           ;main.c: 141: Reset_EPS();
  1908  0F1F  120A  118A  2007  120A  158A  	fcall	_Reset_EPS
  1909                           
  1910                           ;main.c: 142: _delay((unsigned long)((5000)*(10000000/4000.0)));
  1911  0F24  3040               	movlw	64
  1912  0F25  1283               	bcf	3,5	;RP0=0, select bank0
  1913  0F26  1303               	bcf	3,6	;RP1=0, select bank0
  1914  0F27  00E4               	movwf	??_main+2
  1915  0F28  306A               	movlw	106
  1916  0F29  00E3               	movwf	??_main+1
  1917  0F2A  3097               	movlw	151
  1918  0F2B  00E2               	movwf	??_main
  1919  0F2C                     u3557:	
  1920  0F2C  0BE2               	decfsz	??_main,f
  1921  0F2D  2F2C               	goto	u3557
  1922  0F2E  0BE3               	decfsz	??_main+1,f
  1923  0F2F  2F2C               	goto	u3557
  1924  0F30  0BE4               	decfsz	??_main+2,f
  1925  0F31  2F2C               	goto	u3557
  1926                           
  1927                           ;main.c: 145: int FMTX_Nprg[5] = {8,7,3,0,0};
  1928  0F32  30A0               	movlw	main@FMTX_Nprg& (0+255)
  1929  0F33  0084               	movwf	4
  1930  0F34  30D8               	movlw	low main@F1460
  1931  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  1932  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  1933  0F37  00E2               	movwf	??_main
  1934  0F38  0804               	movf	4,w
  1935  0F39  00E3               	movwf	??_main+1
  1936  0F3A  300A               	movlw	10
  1937  0F3B  00E4               	movwf	??_main+2
  1938  0F3C                     u3450:	
  1939  0F3C  0862               	movf	??_main,w
  1940  0F3D  0084               	movwf	4
  1941  0F3E  1783               	bsf	3,7	;select IRP bank3
  1942  0F3F  0800               	movf	0,w
  1943  0F40  00E5               	movwf	??_main+3
  1944  0F41  0AE2               	incf	??_main,f
  1945  0F42  0863               	movf	??_main+1,w
  1946  0F43  0084               	movwf	4
  1947  0F44  1383               	bcf	3,7	;select IRP bank1
  1948  0F45  0865               	movf	??_main+3,w
  1949  0F46  0080               	movwf	0
  1950  0F47  0AE3               	incf	??_main+1,f
  1951  0F48  0BE4               	decfsz	??_main+2,f
  1952  0F49  2F3C               	goto	u3450
  1953                           
  1954                           ;main.c: 146: int CWTX_Nprg[5] = {0,1,7,4,7};
  1955  0F4A  30AA               	movlw	main@CWTX_Nprg& (0+255)
  1956  0F4B  0084               	movwf	4
  1957  0F4C  30CE               	movlw	low main@F1462
  1958  0F4D  00E2               	movwf	??_main
  1959  0F4E  0804               	movf	4,w
  1960  0F4F  00E3               	movwf	??_main+1
  1961  0F50  300A               	movlw	10
  1962  0F51  00E4               	movwf	??_main+2
  1963  0F52                     u3460:	
  1964  0F52  0862               	movf	??_main,w
  1965  0F53  0084               	movwf	4
  1966  0F54  1783               	bsf	3,7	;select IRP bank3
  1967  0F55  0800               	movf	0,w
  1968  0F56  00E5               	movwf	??_main+3
  1969  0F57  0AE2               	incf	??_main,f
  1970  0F58  0863               	movf	??_main+1,w
  1971  0F59  0084               	movwf	4
  1972  0F5A  1383               	bcf	3,7	;select IRP bank1
  1973  0F5B  0865               	movf	??_main+3,w
  1974  0F5C  0080               	movwf	0
  1975  0F5D  0AE3               	incf	??_main+1,f
  1976  0F5E  0BE4               	decfsz	??_main+2,f
  1977  0F5F  2F52               	goto	u3460
  1978                           
  1979                           ;main.c: 147: int FMRX_Nprg[5] = {2,4,8,8,7};
  1980  0F60  30B4               	movlw	main@FMRX_Nprg& (0+255)
  1981  0F61  0084               	movwf	4
  1982  0F62  30C4               	movlw	low main@F1464
  1983  0F63  00E2               	movwf	??_main
  1984  0F64  0804               	movf	4,w
  1985  0F65  00E3               	movwf	??_main+1
  1986  0F66  300A               	movlw	10
  1987  0F67  00E4               	movwf	??_main+2
  1988  0F68                     u3470:	
  1989  0F68  0862               	movf	??_main,w
  1990  0F69  0084               	movwf	4
  1991  0F6A  1783               	bsf	3,7	;select IRP bank3
  1992  0F6B  0800               	movf	0,w
  1993  0F6C  00E5               	movwf	??_main+3
  1994  0F6D  0AE2               	incf	??_main,f
  1995  0F6E  0863               	movf	??_main+1,w
  1996  0F6F  0084               	movwf	4
  1997  0F70  1383               	bcf	3,7	;select IRP bank1
  1998  0F71  0865               	movf	??_main+3,w
  1999  0F72  0080               	movwf	0
  2000  0F73  0AE3               	incf	??_main+1,f
  2001  0F74  0BE4               	decfsz	??_main+2,f
  2002  0F75  2F68               	goto	u3470
  2003                           
  2004                           ;main.c: 149: FMTX(FMTX_Nref, FMTX_Nprg);
  2005  0F76  1683               	bsf	3,5	;RP0=1, select bank1
  2006  0F77  1303               	bcf	3,6	;RP1=0, select bank1
  2007  0F78  0846               	movf	(_FMTX_Nref+1)^(0+128),w
  2008  0F79  1283               	bcf	3,5	;RP0=0, select bank0
  2009  0F7A  1303               	bcf	3,6	;RP1=0, select bank0
  2010  0F7B  00DD               	movwf	FMTX@Nref+1
  2011  0F7C  1683               	bsf	3,5	;RP0=1, select bank1
  2012  0F7D  1303               	bcf	3,6	;RP1=0, select bank1
  2013  0F7E  0845               	movf	_FMTX_Nref^(0+128),w
  2014  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  2015  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  2016  0F81  00DC               	movwf	FMTX@Nref
  2017  0F82  30A0               	movlw	(low (main@FMTX_Nprg| 0))& (0+255)
  2018  0F83  00DE               	movwf	FMTX@Nprg
  2019  0F84  3000               	movlw	0
  2020  0F85  00DF               	movwf	FMTX@Nprg+1
  2021  0F86  120A  158A  2144  120A  158A  	fcall	_FMTX
  2022                           
  2023                           ;main.c: 150: CWTX(CWTX_Nref, CWTX_Nprg);
  2024  0F8B  1683               	bsf	3,5	;RP0=1, select bank1
  2025  0F8C  1303               	bcf	3,6	;RP1=0, select bank1
  2026  0F8D  0844               	movf	(_CWTX_Nref+1)^(0+128),w
  2027  0F8E  1283               	bcf	3,5	;RP0=0, select bank0
  2028  0F8F  1303               	bcf	3,6	;RP1=0, select bank0
  2029  0F90  00DD               	movwf	CWTX@Nref+1
  2030  0F91  1683               	bsf	3,5	;RP0=1, select bank1
  2031  0F92  1303               	bcf	3,6	;RP1=0, select bank1
  2032  0F93  0843               	movf	_CWTX_Nref^(0+128),w
  2033  0F94  1283               	bcf	3,5	;RP0=0, select bank0
  2034  0F95  1303               	bcf	3,6	;RP1=0, select bank0
  2035  0F96  00DC               	movwf	CWTX@Nref
  2036  0F97  30AA               	movlw	(low (main@CWTX_Nprg| 0))& (0+255)
  2037  0F98  00DE               	movwf	CWTX@Nprg
  2038  0F99  3000               	movlw	0
  2039  0F9A  00DF               	movwf	CWTX@Nprg+1
  2040  0F9B  120A  158A  20EC  120A  158A  	fcall	_CWTX
  2041                           
  2042                           ;main.c: 151: FMRX(FMRX_Nref, FMRX_Nprg);
  2043  0FA0  1683               	bsf	3,5	;RP0=1, select bank1
  2044  0FA1  1303               	bcf	3,6	;RP1=0, select bank1
  2045  0FA2  0842               	movf	(_FMRX_Nref+1)^(0+128),w
  2046  0FA3  1283               	bcf	3,5	;RP0=0, select bank0
  2047  0FA4  1303               	bcf	3,6	;RP1=0, select bank0
  2048  0FA5  00DD               	movwf	FMRX@Nref+1
  2049  0FA6  1683               	bsf	3,5	;RP0=1, select bank1
  2050  0FA7  1303               	bcf	3,6	;RP1=0, select bank1
  2051  0FA8  0841               	movf	_FMRX_Nref^(0+128),w
  2052  0FA9  1283               	bcf	3,5	;RP0=0, select bank0
  2053  0FAA  1303               	bcf	3,6	;RP1=0, select bank0
  2054  0FAB  00DC               	movwf	FMRX@Nref
  2055  0FAC  30B4               	movlw	(low (main@FMRX_Nprg| 0))& (0+255)
  2056  0FAD  00DE               	movwf	FMRX@Nprg
  2057  0FAE  3000               	movlw	0
  2058  0FAF  00DF               	movwf	FMRX@Nprg+1
  2059  0FB0  120A  158A  2118  120A  158A  	fcall	_FMRX
  2060                           
  2061                           ;main.c: 152: _delay((unsigned long)((500)*(10000000/4000.0)));
  2062  0FB5  3007               	movlw	7
  2063  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  2064  0FB7  1303               	bcf	3,6	;RP1=0, select bank0
  2065  0FB8  00E4               	movwf	??_main+2
  2066  0FB9  3058               	movlw	88
  2067  0FBA  00E3               	movwf	??_main+1
  2068  0FBB  3059               	movlw	89
  2069  0FBC  00E2               	movwf	??_main
  2070  0FBD                     u3567:	
  2071  0FBD  0BE2               	decfsz	??_main,f
  2072  0FBE  2FBD               	goto	u3567
  2073  0FBF  0BE3               	decfsz	??_main+1,f
  2074  0FC0  2FBD               	goto	u3567
  2075  0FC1  0BE4               	decfsz	??_main+2,f
  2076  0FC2  2FBD               	goto	u3567
  2077                           
  2078                           ;main.c: 169: }
  2079                           
  2080                           ;main.c: 168: break;
  2081                           
  2082                           ;main.c: 166: default:
  2083                           
  2084                           ;main.c: 165: break;
  2085                           
  2086                           ;main.c: 163: case 'T':
  2087                           
  2088                           ;main.c: 162: break;
  2089                           
  2090                           ;main.c: 160: case 'N':
  2091                           
  2092                           ;main.c: 159: break;
  2093                           
  2094                           ;main.c: 157: case '3':
  2095                           
  2096                           ;main.c: 156: break;
  2097                           
  2098                           ;main.c: 154: case 'I':
  2099                           
  2100                           ;main.c: 153: break;
  2101  0FC3  2FF1               	goto	l438
  2102  0FC4                     l3739:	
  2103  0FC4  1683               	bsf	3,5	;RP0=1, select bank1
  2104  0FC5  1303               	bcf	3,6	;RP1=0, select bank1
  2105  0FC6  0840               	movf	main@dData^(0+128),w
  2106  0FC7  3E03               	addlw	3
  2107  0FC8  0084               	movwf	4
  2108  0FC9  1783               	bsf	3,7	;select IRP bank2
  2109  0FCA  0800               	movf	0,w
  2110                           
  2111                           ; Switch size 1, requested type "space"
  2112                           ; Number of cases is 5, Range of values is 51 to 84
  2113                           ; switch strategies available:
  2114                           ; Name         Instructions Cycles
  2115                           ; simple_byte           16     9 (average)
  2116                           ; direct_byte          113    11 (fixed)
  2117                           ; jumptable            263     9 (fixed)
  2118                           ;	Chosen strategy is simple_byte
  2119  0FCB  3A33               	xorlw	51	; case 51
  2120  0FCC  1903               	skipnz
  2121  0FCD  2FF1               	goto	l438
  2122  0FCE  3A76               	xorlw	118	; case 69
  2123  0FCF  1903               	skipnz
  2124  0FD0  2F1F               	goto	l3719
  2125  0FD1  3A0C               	xorlw	12	; case 73
  2126  0FD2  1903               	skipnz
  2127  0FD3  2FF1               	goto	l438
  2128  0FD4  3A07               	xorlw	7	; case 78
  2129  0FD5  1903               	skipnz
  2130  0FD6  2FF1               	goto	l438
  2131  0FD7  3A1A               	xorlw	26	; case 84
  2132  0FD8  1903               	skipnz
  2133  0FD9  2FF1               	goto	l438
  2134  0FDA  2FF1               	goto	l438
  2135                           
  2136                           ;main.c: 173: }
  2137                           ;main.c: 174: }else{
  2138                           
  2139                           ;main.c: 171: }else if(dData[2] == 't'){
  2140  0FDB  2FF1               	goto	l438
  2141  0FDC                     l439:	
  2142                           
  2143                           ;main.c: 175: RB2 = 1;
  2144  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  2145  0FDD  1303               	bcf	3,6	;RP1=0, select bank0
  2146  0FDE  1506               	bsf	6,2	;volatile
  2147                           
  2148                           ;main.c: 176: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2149  0FDF  300D               	movlw	13
  2150  0FE0  1283               	bcf	3,5	;RP0=0, select bank0
  2151  0FE1  1303               	bcf	3,6	;RP1=0, select bank0
  2152  0FE2  00E4               	movwf	??_main+2
  2153  0FE3  30AF               	movlw	175
  2154  0FE4  00E3               	movwf	??_main+1
  2155  0FE5  30B5               	movlw	181
  2156  0FE6  00E2               	movwf	??_main
  2157  0FE7                     u3577:	
  2158  0FE7  0BE2               	decfsz	??_main,f
  2159  0FE8  2FE7               	goto	u3577
  2160  0FE9  0BE3               	decfsz	??_main+1,f
  2161  0FEA  2FE7               	goto	u3577
  2162  0FEB  0BE4               	decfsz	??_main+2,f
  2163  0FEC  2FE7               	goto	u3577
  2164  0FED  2FEE               	nop2
  2165                           
  2166                           ;main.c: 177: RB2 = 0;
  2167  0FEE  1283               	bcf	3,5	;RP0=0, select bank0
  2168  0FEF  1303               	bcf	3,6	;RP1=0, select bank0
  2169  0FF0  1106               	bcf	6,2	;volatile
  2170  0FF1                     l438:	
  2171                           
  2172                           ;main.c: 178: }
  2173                           ;main.c: 222: _delay((unsigned long)((500)*(10000000/4000.0)));
  2174  0FF1  3007               	movlw	7
  2175  0FF2  1283               	bcf	3,5	;RP0=0, select bank0
  2176  0FF3  1303               	bcf	3,6	;RP1=0, select bank0
  2177  0FF4  00E4               	movwf	??_main+2
  2178  0FF5  3058               	movlw	88
  2179  0FF6  00E3               	movwf	??_main+1
  2180  0FF7  3059               	movlw	89
  2181  0FF8  00E2               	movwf	??_main
  2182  0FF9                     u3587:	
  2183  0FF9  0BE2               	decfsz	??_main,f
  2184  0FFA  2FF9               	goto	u3587
  2185  0FFB  0BE3               	decfsz	??_main+1,f
  2186  0FFC  2FF9               	goto	u3587
  2187  0FFD  0BE4               	decfsz	??_main+2,f
  2188  0FFE  2FF9               	goto	u3587
  2189  0FFF  2E97               	goto	l3689
  2190  1000                     __end_of_main:	
  2191                           ;main.c: 223: }
  2192                           ;main.c: 224: return;
  2193                           
  2194                           
  2195                           	psect	text1
  2196  09D2                     __ptext1:	
  2197 ;; *************** function _TXOBC_waddress *****************
  2198 ;; Defined at:
  2199 ;;		line 78 in file "UART.c"
  2200 ;; Parameters:    Size  Location     Type
  2201 ;;  TXOBC_wad_he    1    wreg     unsigned char 
  2202 ;;  whigh_addres    1    1[COMMON] unsigned char 
  2203 ;;  wlow_address    1    2[COMMON] unsigned char 
  2204 ;; Auto vars:     Size  Location     Type
  2205 ;;  TXOBC_wad_he    1    5[COMMON] unsigned char 
  2206 ;; Return value:  Size  Location     Type
  2207 ;;                  1    wreg      void 
  2208 ;; Registers used:
  2209 ;;		wreg, status,2, status,0, pclath, cstack
  2210 ;; Tracked objects:
  2211 ;;		On entry : 0/0
  2212 ;;		On exit  : 0/0
  2213 ;;		Unchanged: 0/0
  2214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2215 ;;      Params:         2       0       0       0       0
  2216 ;;      Locals:         1       0       0       0       0
  2217 ;;      Temps:          2       0       0       0       0
  2218 ;;      Totals:         5       0       0       0       0
  2219 ;;Total ram usage:        5 bytes
  2220 ;; Hardware stack levels used:    1
  2221 ;; Hardware stack levels required when called:    1
  2222 ;; This function calls:
  2223 ;;		_putch
  2224 ;; This function is called by:
  2225 ;;		_main
  2226 ;; This function uses a non-reentrant model
  2227 ;;
  2228                           
  2229                           
  2230                           ;psect for function _TXOBC_waddress
  2231  09D2                     _TXOBC_waddress:	
  2232                           
  2233                           ;incstack = 0
  2234                           ; Regs used in _TXOBC_waddress: [wreg+status,2+status,0+pclath+cstack]
  2235                           ;TXOBC_waddress@TXOBC_wad_header stored from wreg
  2236  09D2  00F5               	movwf	TXOBC_waddress@TXOBC_wad_header
  2237                           
  2238                           ;UART.c: 79: RC5 = 1;
  2239  09D3  1283               	bcf	3,5	;RP0=0, select bank0
  2240  09D4  1303               	bcf	3,6	;RP1=0, select bank0
  2241  09D5  1687               	bsf	7,5	;volatile
  2242                           
  2243                           ;UART.c: 80: _delay((unsigned long)((50)*(10000000/4000.0)));
  2244  09D6  30A3               	movlw	163
  2245  09D7  00F4               	movwf	??_TXOBC_waddress+1
  2246  09D8  3055               	movlw	85
  2247  09D9  00F3               	movwf	??_TXOBC_waddress
  2248  09DA                     u3597:	
  2249  09DA  0BF3               	decfsz	??_TXOBC_waddress,f
  2250  09DB  29DA               	goto	u3597
  2251  09DC  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2252  09DD  29DA               	goto	u3597
  2253                           
  2254                           ;UART.c: 81: putch(TXOBC_wad_header);
  2255  09DE  0875               	movf	TXOBC_waddress@TXOBC_wad_header,w
  2256  09DF  160A  118A  27F8  120A  158A  	fcall	_putch
  2257                           
  2258                           ;UART.c: 82: _delay((unsigned long)((50)*(10000000/4000.0)));
  2259  09E4  30A3               	movlw	163
  2260  09E5  00F4               	movwf	??_TXOBC_waddress+1
  2261  09E6  3055               	movlw	85
  2262  09E7  00F3               	movwf	??_TXOBC_waddress
  2263  09E8                     u3607:	
  2264  09E8  0BF3               	decfsz	??_TXOBC_waddress,f
  2265  09E9  29E8               	goto	u3607
  2266  09EA  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2267  09EB  29E8               	goto	u3607
  2268                           
  2269                           ;UART.c: 83: putch(whigh_address);
  2270  09EC  0871               	movf	TXOBC_waddress@whigh_address,w
  2271  09ED  160A  118A  27F8  120A  158A  	fcall	_putch
  2272                           
  2273                           ;UART.c: 84: _delay((unsigned long)((50)*(10000000/4000.0)));
  2274  09F2  30A3               	movlw	163
  2275  09F3  00F4               	movwf	??_TXOBC_waddress+1
  2276  09F4  3055               	movlw	85
  2277  09F5  00F3               	movwf	??_TXOBC_waddress
  2278  09F6                     u3617:	
  2279  09F6  0BF3               	decfsz	??_TXOBC_waddress,f
  2280  09F7  29F6               	goto	u3617
  2281  09F8  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2282  09F9  29F6               	goto	u3617
  2283                           
  2284                           ;UART.c: 85: putch(wlow_address);
  2285  09FA  0872               	movf	TXOBC_waddress@wlow_address,w
  2286  09FB  160A  118A  27F8  120A  158A  	fcall	_putch
  2287                           
  2288                           ;UART.c: 86: _delay((unsigned long)((50)*(10000000/4000.0)));
  2289  0A00  30A3               	movlw	163
  2290  0A01  00F4               	movwf	??_TXOBC_waddress+1
  2291  0A02  3055               	movlw	85
  2292  0A03  00F3               	movwf	??_TXOBC_waddress
  2293  0A04                     u3627:	
  2294  0A04  0BF3               	decfsz	??_TXOBC_waddress,f
  2295  0A05  2A04               	goto	u3627
  2296  0A06  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2297  0A07  2A04               	goto	u3627
  2298                           
  2299                           ;UART.c: 87: RC5 = 0;
  2300  0A08  1283               	bcf	3,5	;RP0=0, select bank0
  2301  0A09  1303               	bcf	3,6	;RP1=0, select bank0
  2302  0A0A  1287               	bcf	7,5	;volatile
  2303  0A0B  0008               	return
  2304  0A0C                     __end_of_TXOBC_waddress:	
  2305                           
  2306                           	psect	text2
  2307  0007                     __ptext2:	
  2308 ;; *************** function _Reset_EPS *****************
  2309 ;; Defined at:
  2310 ;;		line 19 in file "EPS.c"
  2311 ;; Parameters:    Size  Location     Type
  2312 ;;		None
  2313 ;; Auto vars:     Size  Location     Type
  2314 ;;		None
  2315 ;; Return value:  Size  Location     Type
  2316 ;;                  1    wreg      void 
  2317 ;; Registers used:
  2318 ;;		wreg
  2319 ;; Tracked objects:
  2320 ;;		On entry : 0/0
  2321 ;;		On exit  : 0/0
  2322 ;;		Unchanged: 0/0
  2323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2324 ;;      Params:         0       0       0       0       0
  2325 ;;      Locals:         0       0       0       0       0
  2326 ;;      Temps:          3       0       0       0       0
  2327 ;;      Totals:         3       0       0       0       0
  2328 ;;Total ram usage:        3 bytes
  2329 ;; Hardware stack levels used:    1
  2330 ;; This function calls:
  2331 ;;		Nothing
  2332 ;; This function is called by:
  2333 ;;		_main
  2334 ;; This function uses a non-reentrant model
  2335 ;;
  2336                           
  2337                           
  2338                           ;psect for function _Reset_EPS
  2339  0007                     _Reset_EPS:	
  2340                           
  2341                           ;EPS.c: 20: RB4 = 1;
  2342                           
  2343                           ;incstack = 0
  2344                           ; Regs used in _Reset_EPS: [wreg]
  2345  0007  1283               	bcf	3,5	;RP0=0, select bank0
  2346  0008  1303               	bcf	3,6	;RP1=0, select bank0
  2347  0009  1606               	bsf	6,4	;volatile
  2348                           
  2349                           ;EPS.c: 21: RA1 = 1;
  2350  000A  1485               	bsf	5,1	;volatile
  2351                           
  2352                           ;EPS.c: 22: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2353  000B  3040               	movlw	64
  2354  000C  00F2               	movwf	??_Reset_EPS+2
  2355  000D  306A               	movlw	106
  2356  000E  00F1               	movwf	??_Reset_EPS+1
  2357  000F  3097               	movlw	151
  2358  0010  00F0               	movwf	??_Reset_EPS
  2359  0011                     u3637:	
  2360  0011  0BF0               	decfsz	??_Reset_EPS,f
  2361  0012  2811               	goto	u3637
  2362  0013  0BF1               	decfsz	??_Reset_EPS+1,f
  2363  0014  2811               	goto	u3637
  2364  0015  0BF2               	decfsz	??_Reset_EPS+2,f
  2365  0016  2811               	goto	u3637
  2366  0017  2818               	nop2
  2367                           
  2368                           ;EPS.c: 23: RB4 = 0;
  2369  0018  1283               	bcf	3,5	;RP0=0, select bank0
  2370  0019  1303               	bcf	3,6	;RP1=0, select bank0
  2371  001A  1206               	bcf	6,4	;volatile
  2372                           
  2373                           ;EPS.c: 24: RA1 = 0;
  2374  001B  1085               	bcf	5,1	;volatile
  2375                           
  2376                           ;EPS.c: 25: _delay((unsigned long)((500)*(10000000/4000.0)));
  2377  001C  3007               	movlw	7
  2378  001D  00F2               	movwf	??_Reset_EPS+2
  2379  001E  3058               	movlw	88
  2380  001F  00F1               	movwf	??_Reset_EPS+1
  2381  0020  3059               	movlw	89
  2382  0021  00F0               	movwf	??_Reset_EPS
  2383  0022                     u3647:	
  2384  0022  0BF0               	decfsz	??_Reset_EPS,f
  2385  0023  2822               	goto	u3647
  2386  0024  0BF1               	decfsz	??_Reset_EPS+1,f
  2387  0025  2822               	goto	u3647
  2388  0026  0BF2               	decfsz	??_Reset_EPS+2,f
  2389  0027  2822               	goto	u3647
  2390  0028  2829               	nop2
  2391  0029  0008               	return
  2392  002A                     __end_of_Reset_EPS:	
  2393                           
  2394                           	psect	text3
  2395  0C59                     __ptext3:	
  2396 ;; *************** function _ReceivePacket_data *****************
  2397 ;; Defined at:
  2398 ;;		line 359 in file "decode_AX25.c"
  2399 ;; Parameters:    Size  Location     Type
  2400 ;;		None
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;  i               2   31[BANK0 ] unsigned int 
  2403 ;;  fcschecker      2   29[BANK0 ] unsigned int 
  2404 ;; Return value:  Size  Location     Type
  2405 ;;                  1    wreg      PTR unsigned char 
  2406 ;; Registers used:
  2407 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2408 ;; Tracked objects:
  2409 ;;		On entry : 0/0
  2410 ;;		On exit  : 0/0
  2411 ;;		Unchanged: 0/0
  2412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2413 ;;      Params:         0       0       0       0       0
  2414 ;;      Locals:         0       4       0       0       0
  2415 ;;      Temps:          2       0       0       0       0
  2416 ;;      Totals:         2       4       0       0       0
  2417 ;;Total ram usage:        6 bytes
  2418 ;; Hardware stack levels used:    1
  2419 ;; Hardware stack levels required when called:    2
  2420 ;; This function calls:
  2421 ;;		_fcscheck
  2422 ;;		_getdata
  2423 ;;		_waitFlag
  2424 ;; This function is called by:
  2425 ;;		_main
  2426 ;; This function uses a non-reentrant model
  2427 ;;
  2428                           
  2429                           
  2430                           ;psect for function _ReceivePacket_data
  2431  0C59                     _ReceivePacket_data:	
  2432                           
  2433                           ;decode_AX25.c: 360: UINT fcschecker;
  2434                           ;decode_AX25.c: 363: waitFlag();
  2435                           
  2436                           ;incstack = 0
  2437                           ; Regs used in _ReceivePacket_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2438  0C59  120A  118A  2327  120A  158A  	fcall	_waitFlag
  2439                           
  2440                           ;decode_AX25.c: 365: getdata();
  2441  0C5E  120A  158A  23F8  120A  158A  	fcall	_getdata
  2442                           
  2443                           ;decode_AX25.c: 367: fcschecker = fcscheck();
  2444  0C63  120A  118A  202A  120A  158A  	fcall	_fcscheck
  2445  0C68  0871               	movf	?_fcscheck+1,w
  2446  0C69  1283               	bcf	3,5	;RP0=0, select bank0
  2447  0C6A  1303               	bcf	3,6	;RP1=0, select bank0
  2448  0C6B  00BE               	movwf	ReceivePacket_data@fcschecker+1
  2449  0C6C  0870               	movf	?_fcscheck,w
  2450  0C6D  00BD               	movwf	ReceivePacket_data@fcschecker
  2451                           
  2452                           ;decode_AX25.c: 369: if(fcschecker == 1){
  2453  0C6E  033D               	decf	ReceivePacket_data@fcschecker,w
  2454  0C6F  043E               	iorwf	ReceivePacket_data@fcschecker+1,w
  2455  0C70  1D03               	btfss	3,2
  2456  0C71  2CB8               	goto	l3343
  2457                           
  2458                           ;decode_AX25.c: 370: for(UINT i=0; i<commandSize; i++){
  2459  0C72  01BF               	clrf	ReceivePacket_data@i
  2460  0C73  01C0               	clrf	ReceivePacket_data@i+1
  2461  0C74  3001               	movlw	low (_commandSize-__stringbase)
  2462  0C75  0084               	movwf	4
  2463  0C76  120A  158A  2000  120A  158A  	fcall	stringdir
  2464  0C7B  00FA               	movwf	??_ReceivePacket_data
  2465  0C7C  120A  158A  2000  120A  158A  	fcall	stringdir
  2466  0C81  00FB               	movwf	??_ReceivePacket_data+1
  2467  0C82  087B               	movf	??_ReceivePacket_data+1,w
  2468  0C83  0240               	subwf	ReceivePacket_data@i+1,w
  2469  0C84  1D03               	skipz
  2470  0C85  2C88               	goto	u3055
  2471  0C86  087A               	movf	??_ReceivePacket_data,w
  2472  0C87  023F               	subwf	ReceivePacket_data@i,w
  2473  0C88                     u3055:	
  2474  0C88  1803               	btfsc	3,0
  2475  0C89  2CB2               	goto	l3335
  2476  0C8A                     l3329:	
  2477                           
  2478                           ;decode_AX25.c: 371: dData[i] = dPacket[i+20];
  2479  0C8A  083F               	movf	ReceivePacket_data@i,w
  2480  0C8B  3E14               	addlw	20
  2481  0C8C  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2482  0C8D  0084               	movwf	4
  2483  0C8E  1783               	bsf	3,7	;select IRP bank3
  2484  0C8F  0800               	movf	0,w
  2485  0C90  00FA               	movwf	??_ReceivePacket_data
  2486  0C91  083F               	movf	ReceivePacket_data@i,w
  2487  0C92  3E10               	addlw	(low (_dData| (0+256)))& (0+255)
  2488  0C93  0084               	movwf	4
  2489  0C94  087A               	movf	??_ReceivePacket_data,w
  2490  0C95  0080               	movwf	0
  2491  0C96  3001               	movlw	1
  2492  0C97  07BF               	addwf	ReceivePacket_data@i,f
  2493  0C98  1803               	skipnc
  2494  0C99  0AC0               	incf	ReceivePacket_data@i+1,f
  2495  0C9A  3000               	movlw	0
  2496  0C9B  07C0               	addwf	ReceivePacket_data@i+1,f
  2497  0C9C  3001               	movlw	low (_commandSize-__stringbase)
  2498  0C9D  0084               	movwf	4
  2499  0C9E  120A  158A  2000  120A  158A  	fcall	stringdir
  2500  0CA3  00FA               	movwf	??_ReceivePacket_data
  2501  0CA4  120A  158A  2000  120A  158A  	fcall	stringdir
  2502  0CA9  00FB               	movwf	??_ReceivePacket_data+1
  2503  0CAA  087B               	movf	??_ReceivePacket_data+1,w
  2504  0CAB  0240               	subwf	ReceivePacket_data@i+1,w
  2505  0CAC  1D03               	skipz
  2506  0CAD  2CB0               	goto	u3065
  2507  0CAE  087A               	movf	??_ReceivePacket_data,w
  2508  0CAF  023F               	subwf	ReceivePacket_data@i,w
  2509  0CB0                     u3065:	
  2510  0CB0  1C03               	skipc
  2511  0CB1  2C8A               	goto	l3329
  2512  0CB2                     l3335:	
  2513                           
  2514                           ;decode_AX25.c: 372: }
  2515                           ;decode_AX25.c: 373: dPacketnum = 0;
  2516  0CB2  01E8               	clrf	_dPacketnum
  2517  0CB3  01E9               	clrf	_dPacketnum+1
  2518                           
  2519                           ;decode_AX25.c: 374: rcv_state = 0;
  2520  0CB4  01EA               	clrf	_rcv_state
  2521  0CB5  01EB               	clrf	_rcv_state+1
  2522                           
  2523                           ;decode_AX25.c: 375: return dData;
  2524  0CB6  3010               	movlw	(low (_dData| (0+256)))& (0+255)
  2525                           
  2526                           ;decode_AX25.c: 376: }else{
  2527  0CB7  0008               	return
  2528  0CB8                     l3343:	
  2529                           
  2530                           ;decode_AX25.c: 377: dPacketnum = 0;
  2531  0CB8  01E8               	clrf	_dPacketnum
  2532  0CB9  01E9               	clrf	_dPacketnum+1
  2533                           
  2534                           ;decode_AX25.c: 378: rcv_state = 0;
  2535  0CBA  01EA               	clrf	_rcv_state
  2536  0CBB  01EB               	clrf	_rcv_state+1
  2537                           
  2538                           ;decode_AX25.c: 379: return 0x00;
  2539  0CBC  3000               	movlw	0
  2540  0CBD  0008               	return
  2541  0CBE                     __end_of_ReceivePacket_data:	
  2542                           
  2543                           	psect	text4
  2544  0327                     __ptext4:	
  2545 ;; *************** function _waitFlag *****************
  2546 ;; Defined at:
  2547 ;;		line 54 in file "decode_AX25.c"
  2548 ;; Parameters:    Size  Location     Type
  2549 ;;		None
  2550 ;; Auto vars:     Size  Location     Type
  2551 ;;  j               2   24[BANK0 ] unsigned int 
  2552 ;;  j               2   10[BANK0 ] unsigned int 
  2553 ;;  j               2   22[BANK0 ] unsigned int 
  2554 ;;  j               2    8[BANK0 ] unsigned int 
  2555 ;;  j               2   20[BANK0 ] unsigned int 
  2556 ;;  j               2    6[BANK0 ] unsigned int 
  2557 ;;  j               2   18[BANK0 ] unsigned int 
  2558 ;;  j               2    4[BANK0 ] unsigned int 
  2559 ;;  j               2   16[BANK0 ] unsigned int 
  2560 ;;  j               2    2[BANK0 ] unsigned int 
  2561 ;;  i               2    0[BANK0 ] unsigned int 
  2562 ;;  j               2   14[BANK0 ] unsigned int 
  2563 ;;  j               2   12[BANK0 ] unsigned int 
  2564 ;;  flag_judge      2   26[BANK0 ] unsigned int 
  2565 ;;  buf             1   28[BANK0 ] unsigned char 
  2566 ;; Return value:  Size  Location     Type
  2567 ;;                  1    wreg      void 
  2568 ;; Registers used:
  2569 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2570 ;; Tracked objects:
  2571 ;;		On entry : 0/0
  2572 ;;		On exit  : 0/0
  2573 ;;		Unchanged: 0/0
  2574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2575 ;;      Params:         0       0       0       0       0
  2576 ;;      Locals:         0      29       0       0       0
  2577 ;;      Temps:          4       0       0       0       0
  2578 ;;      Totals:         4      29       0       0       0
  2579 ;;Total ram usage:       33 bytes
  2580 ;; Hardware stack levels used:    1
  2581 ;; Hardware stack levels required when called:    1
  2582 ;; This function calls:
  2583 ;;		_getbit
  2584 ;; This function is called by:
  2585 ;;		_ReceivePacket_data
  2586 ;;		_ReceivePacket
  2587 ;; This function uses a non-reentrant model
  2588 ;;
  2589                           
  2590                           
  2591                           ;psect for function _waitFlag
  2592  0327                     _waitFlag:	
  2593                           
  2594                           ;decode_AX25.c: 55: UINT flag_judge;
  2595                           ;decode_AX25.c: 56: UBYTE buf = 0xff;
  2596                           
  2597                           ;incstack = 0
  2598                           ; Regs used in _waitFlag: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2599  0327  30FF               	movlw	255
  2600  0328  00F6               	movwf	??_waitFlag
  2601  0329  0876               	movf	??_waitFlag,w
  2602  032A  1283               	bcf	3,5	;RP0=0, select bank0
  2603  032B  1303               	bcf	3,6	;RP1=0, select bank0
  2604  032C  00BC               	movwf	waitFlag@buf
  2605  032D                     L6:	
  2606                           
  2607                           ;decode_AX25.c: 271: rcv_state = 0;
  2608  032D  01EA               	clrf	_rcv_state
  2609  032E  01EB               	clrf	_rcv_state+1
  2610  032F                     l3013:	
  2611  032F  3000               	movlw	0
  2612  0330  026B               	subwf	_rcv_state+1,w
  2613  0331  3002               	movlw	2
  2614  0332  1903               	skipnz
  2615  0333  026A               	subwf	_rcv_state,w
  2616  0334  1803               	btfsc	3,0
  2617  0335  0008               	return
  2618  0336                     l2647:	
  2619                           ;decode_AX25.c: 59: while(buf != 0x7e){
  2620                           
  2621                           ;decode_AX25.c: 58: while(rcv_state < 2){
  2622                           
  2623                           ;decode_AX25.c: 57: rcv_state = 0;
  2624                           
  2625  0336  307E               	movlw	126
  2626  0337  063C               	xorwf	waitFlag@buf,w
  2627  0338  1903               	btfsc	3,2
  2628  0339  2B86               	goto	l2669
  2629                           
  2630                           ;decode_AX25.c: 60: flag_judge = getbit();
  2631  033A  120A  158A  2298  120A  118A  	fcall	_getbit
  2632  033F  0871               	movf	?_getbit+1,w
  2633  0340  1283               	bcf	3,5	;RP0=0, select bank0
  2634  0341  1303               	bcf	3,6	;RP1=0, select bank0
  2635  0342  00BB               	movwf	waitFlag@flag_judge+1
  2636  0343  0870               	movf	?_getbit,w
  2637  0344  00BA               	movwf	waitFlag@flag_judge
  2638                           
  2639                           ;decode_AX25.c: 61: buf = buf << 1;
  2640  0345  083C               	movf	waitFlag@buf,w
  2641  0346  00F6               	movwf	??_waitFlag
  2642  0347  0776               	addwf	??_waitFlag,w
  2643  0348  00F7               	movwf	??_waitFlag+1
  2644  0349  0877               	movf	??_waitFlag+1,w
  2645  034A  00BC               	movwf	waitFlag@buf
  2646                           
  2647                           ;decode_AX25.c: 63: buf = buf | 0x00;
  2648  034B  083A               	movf	waitFlag@flag_judge,w
  2649  034C  043B               	iorwf	waitFlag@flag_judge+1,w
  2650  034D  1903               	btfsc	3,2
  2651  034E  2B36               	goto	l2647
  2652                           
  2653                           ;decode_AX25.c: 65: buf = buf | 0x01;
  2654                           
  2655                           ;decode_AX25.c: 64: }else{
  2656  034F  083C               	movf	waitFlag@buf,w
  2657  0350  3801               	iorlw	1
  2658  0351  00F6               	movwf	??_waitFlag
  2659  0352  0876               	movf	??_waitFlag,w
  2660  0353  00BC               	movwf	waitFlag@buf
  2661  0354  2B36               	goto	l2647
  2662  0355                     l2649:	
  2663                           ;decode_AX25.c: 66: }
  2664                           ;decode_AX25.c: 67: }
  2665                           ;decode_AX25.c: 71: while(buf == 0x7e){
  2666                           
  2667                           
  2668                           ;decode_AX25.c: 72: for(UINT i=0;i<8;i++){
  2669  0355  01A0               	clrf	waitFlag@i
  2670  0356  01A1               	clrf	waitFlag@i+1
  2671  0357  3000               	movlw	0
  2672  0358  0221               	subwf	waitFlag@i+1,w
  2673  0359  3008               	movlw	8
  2674  035A  1903               	skipnz
  2675  035B  0220               	subwf	waitFlag@i,w
  2676  035C  1803               	btfsc	3,0
  2677  035D  2B86               	goto	l2669
  2678  035E                     l2655:	
  2679                           
  2680                           ;decode_AX25.c: 73: flag_judge = getbit();
  2681  035E  120A  158A  2298  120A  118A  	fcall	_getbit
  2682  0363  0871               	movf	?_getbit+1,w
  2683  0364  1283               	bcf	3,5	;RP0=0, select bank0
  2684  0365  1303               	bcf	3,6	;RP1=0, select bank0
  2685  0366  00BB               	movwf	waitFlag@flag_judge+1
  2686  0367  0870               	movf	?_getbit,w
  2687  0368  00BA               	movwf	waitFlag@flag_judge
  2688                           
  2689                           ;decode_AX25.c: 74: buf = buf >> 1;
  2690  0369  083C               	movf	waitFlag@buf,w
  2691  036A  00F6               	movwf	??_waitFlag
  2692  036B  1003               	clrc
  2693  036C  0C76               	rrf	??_waitFlag,w
  2694  036D  00F7               	movwf	??_waitFlag+1
  2695  036E  0877               	movf	??_waitFlag+1,w
  2696  036F  00BC               	movwf	waitFlag@buf
  2697                           
  2698                           ;decode_AX25.c: 76: buf = buf | 0x00;
  2699  0370  083A               	movf	waitFlag@flag_judge,w
  2700  0371  043B               	iorwf	waitFlag@flag_judge+1,w
  2701  0372  1903               	btfsc	3,2
  2702  0373  2B79               	goto	l2665
  2703                           
  2704                           ;decode_AX25.c: 78: buf = buf | 0x80;
  2705                           
  2706                           ;decode_AX25.c: 77: }else{
  2707  0374  083C               	movf	waitFlag@buf,w
  2708  0375  3880               	iorlw	128
  2709  0376  00F6               	movwf	??_waitFlag
  2710  0377  0876               	movf	??_waitFlag,w
  2711  0378  00BC               	movwf	waitFlag@buf
  2712  0379                     l2665:	
  2713  0379  3001               	movlw	1
  2714  037A  07A0               	addwf	waitFlag@i,f
  2715  037B  1803               	skipnc
  2716  037C  0AA1               	incf	waitFlag@i+1,f
  2717  037D  3000               	movlw	0
  2718  037E  07A1               	addwf	waitFlag@i+1,f
  2719  037F  3000               	movlw	0
  2720  0380  0221               	subwf	waitFlag@i+1,w
  2721  0381  3008               	movlw	8
  2722  0382  1903               	skipnz
  2723  0383  0220               	subwf	waitFlag@i,w
  2724  0384  1C03               	skipc
  2725  0385  2B5E               	goto	l2655
  2726  0386                     l2669:	
  2727  0386  307E               	movlw	126
  2728  0387  063C               	xorwf	waitFlag@buf,w
  2729  0388  1903               	btfsc	3,2
  2730  0389  2B55               	goto	l2649
  2731                           
  2732                           ;decode_AX25.c: 79: }
  2733                           ;decode_AX25.c: 80: }
  2734                           ;decode_AX25.c: 81: }
  2735                           ;decode_AX25.c: 82: if(buf == ("JQ1YCZ"[0] << 1)){
  2736  038A  300A               	movlw	low (STR_1-__stringbase)
  2737  038B  0084               	movwf	4
  2738  038C  120A  158A  2000  120A  118A  	fcall	stringdir
  2739  0391  00F6               	movwf	??_waitFlag
  2740  0392  01F7               	clrf	??_waitFlag+1
  2741  0393  1003               	clrc
  2742  0394  0DF6               	rlf	??_waitFlag,f
  2743  0395  0DF7               	rlf	??_waitFlag+1,f
  2744  0396  083C               	movf	waitFlag@buf,w
  2745  0397  00F8               	movwf	??_waitFlag+2
  2746  0398  01F9               	clrf	??_waitFlag+3
  2747  0399  0877               	movf	??_waitFlag+1,w
  2748  039A  0679               	xorwf	??_waitFlag+3,w
  2749  039B  1D03               	skipz
  2750  039C  2B9F               	goto	u2145
  2751  039D  0876               	movf	??_waitFlag,w
  2752  039E  0678               	xorwf	??_waitFlag+2,w
  2753  039F                     u2145:	
  2754  039F  1D03               	skipz
  2755  03A0  2D64               	goto	l2819
  2756                           
  2757                           ;decode_AX25.c: 83: dPacket[dPacketnum] = buf;
  2758  03A1  083C               	movf	waitFlag@buf,w
  2759  03A2  00F6               	movwf	??_waitFlag
  2760  03A3  0868               	movf	_dPacketnum,w
  2761  03A4  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2762  03A5  0084               	movwf	4
  2763  03A6  0876               	movf	??_waitFlag,w
  2764  03A7  1783               	bsf	3,7	;select IRP bank3
  2765  03A8  0080               	movwf	0
  2766                           
  2767                           ;decode_AX25.c: 84: dPacketnum ++;
  2768  03A9  3001               	movlw	1
  2769  03AA  07E8               	addwf	_dPacketnum,f
  2770  03AB  1803               	skipnc
  2771  03AC  0AE9               	incf	_dPacketnum+1,f
  2772  03AD  3000               	movlw	0
  2773  03AE  07E9               	addwf	_dPacketnum+1,f
  2774                           
  2775                           ;decode_AX25.c: 85: for(UINT j=0;j<8;j++){
  2776  03AF  01A2               	clrf	waitFlag@j
  2777  03B0  01A3               	clrf	waitFlag@j+1
  2778  03B1  3000               	movlw	0
  2779  03B2  0223               	subwf	waitFlag@j+1,w
  2780  03B3  3008               	movlw	8
  2781  03B4  1903               	skipnz
  2782  03B5  0222               	subwf	waitFlag@j,w
  2783  03B6  1803               	btfsc	3,0
  2784  03B7  2BE0               	goto	l2697
  2785  03B8                     l2683:	
  2786                           
  2787                           ;decode_AX25.c: 86: flag_judge = getbit();
  2788  03B8  120A  158A  2298  120A  118A  	fcall	_getbit
  2789  03BD  0871               	movf	?_getbit+1,w
  2790  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  2791  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  2792  03C0  00BB               	movwf	waitFlag@flag_judge+1
  2793  03C1  0870               	movf	?_getbit,w
  2794  03C2  00BA               	movwf	waitFlag@flag_judge
  2795                           
  2796                           ;decode_AX25.c: 87: buf = buf >> 1;
  2797  03C3  083C               	movf	waitFlag@buf,w
  2798  03C4  00F6               	movwf	??_waitFlag
  2799  03C5  1003               	clrc
  2800  03C6  0C76               	rrf	??_waitFlag,w
  2801  03C7  00F7               	movwf	??_waitFlag+1
  2802  03C8  0877               	movf	??_waitFlag+1,w
  2803  03C9  00BC               	movwf	waitFlag@buf
  2804                           
  2805                           ;decode_AX25.c: 89: buf = buf | 0x00;
  2806  03CA  083A               	movf	waitFlag@flag_judge,w
  2807  03CB  043B               	iorwf	waitFlag@flag_judge+1,w
  2808  03CC  1903               	btfsc	3,2
  2809  03CD  2BD3               	goto	l2693
  2810                           
  2811                           ;decode_AX25.c: 91: buf = buf | 0x80;
  2812                           
  2813                           ;decode_AX25.c: 90: }else{
  2814  03CE  083C               	movf	waitFlag@buf,w
  2815  03CF  3880               	iorlw	128
  2816  03D0  00F6               	movwf	??_waitFlag
  2817  03D1  0876               	movf	??_waitFlag,w
  2818  03D2  00BC               	movwf	waitFlag@buf
  2819  03D3                     l2693:	
  2820  03D3  3001               	movlw	1
  2821  03D4  07A2               	addwf	waitFlag@j,f
  2822  03D5  1803               	skipnc
  2823  03D6  0AA3               	incf	waitFlag@j+1,f
  2824  03D7  3000               	movlw	0
  2825  03D8  07A3               	addwf	waitFlag@j+1,f
  2826  03D9  3000               	movlw	0
  2827  03DA  0223               	subwf	waitFlag@j+1,w
  2828  03DB  3008               	movlw	8
  2829  03DC  1903               	skipnz
  2830  03DD  0222               	subwf	waitFlag@j,w
  2831  03DE  1C03               	skipc
  2832  03DF  2BB8               	goto	l2683
  2833  03E0                     l2697:	
  2834                           
  2835                           ;decode_AX25.c: 92: }
  2836                           ;decode_AX25.c: 93: }
  2837                           ;decode_AX25.c: 94: if(buf == ("JQ1YCZ"[1] << 1)){
  2838  03E0  300B               	movlw	low (((STR_1+1)-__stringbase)| (0+32768))
  2839  03E1  0084               	movwf	4
  2840  03E2  120A  158A  2000  120A  118A  	fcall	stringdir
  2841  03E7  00F6               	movwf	??_waitFlag
  2842  03E8  01F7               	clrf	??_waitFlag+1
  2843  03E9  1003               	clrc
  2844  03EA  0DF6               	rlf	??_waitFlag,f
  2845  03EB  0DF7               	rlf	??_waitFlag+1,f
  2846  03EC  083C               	movf	waitFlag@buf,w
  2847  03ED  00F8               	movwf	??_waitFlag+2
  2848  03EE  01F9               	clrf	??_waitFlag+3
  2849  03EF  0877               	movf	??_waitFlag+1,w
  2850  03F0  0679               	xorwf	??_waitFlag+3,w
  2851  03F1  1D03               	skipz
  2852  03F2  2BF5               	goto	u2185
  2853  03F3  0876               	movf	??_waitFlag,w
  2854  03F4  0678               	xorwf	??_waitFlag+2,w
  2855  03F5                     u2185:	
  2856  03F5  1D03               	skipz
  2857  03F6  2D64               	goto	l2819
  2858                           
  2859                           ;decode_AX25.c: 95: dPacket[dPacketnum] = buf;
  2860  03F7  083C               	movf	waitFlag@buf,w
  2861  03F8  00F6               	movwf	??_waitFlag
  2862  03F9  0868               	movf	_dPacketnum,w
  2863  03FA  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2864  03FB  0084               	movwf	4
  2865  03FC  0876               	movf	??_waitFlag,w
  2866  03FD  1783               	bsf	3,7	;select IRP bank3
  2867  03FE  0080               	movwf	0
  2868                           
  2869                           ;decode_AX25.c: 96: dPacketnum ++;
  2870  03FF  3001               	movlw	1
  2871  0400  07E8               	addwf	_dPacketnum,f
  2872  0401  1803               	skipnc
  2873  0402  0AE9               	incf	_dPacketnum+1,f
  2874  0403  3000               	movlw	0
  2875  0404  07E9               	addwf	_dPacketnum+1,f
  2876                           
  2877                           ;decode_AX25.c: 97: for(UINT j=0;j<8;j++){
  2878  0405  01A4               	clrf	waitFlag@j_116
  2879  0406  01A5               	clrf	waitFlag@j_116+1
  2880  0407  3000               	movlw	0
  2881  0408  0225               	subwf	waitFlag@j_116+1,w
  2882  0409  3008               	movlw	8
  2883  040A  1903               	skipnz
  2884  040B  0224               	subwf	waitFlag@j_116,w
  2885  040C  1803               	btfsc	3,0
  2886  040D  2C36               	goto	l2723
  2887  040E                     l2709:	
  2888                           
  2889                           ;decode_AX25.c: 98: flag_judge = getbit();
  2890  040E  120A  158A  2298  120A  118A  	fcall	_getbit
  2891  0413  0871               	movf	?_getbit+1,w
  2892  0414  1283               	bcf	3,5	;RP0=0, select bank0
  2893  0415  1303               	bcf	3,6	;RP1=0, select bank0
  2894  0416  00BB               	movwf	waitFlag@flag_judge+1
  2895  0417  0870               	movf	?_getbit,w
  2896  0418  00BA               	movwf	waitFlag@flag_judge
  2897                           
  2898                           ;decode_AX25.c: 99: buf = buf >> 1;
  2899  0419  083C               	movf	waitFlag@buf,w
  2900  041A  00F6               	movwf	??_waitFlag
  2901  041B  1003               	clrc
  2902  041C  0C76               	rrf	??_waitFlag,w
  2903  041D  00F7               	movwf	??_waitFlag+1
  2904  041E  0877               	movf	??_waitFlag+1,w
  2905  041F  00BC               	movwf	waitFlag@buf
  2906                           
  2907                           ;decode_AX25.c: 101: buf = buf | 0x00;
  2908  0420  083A               	movf	waitFlag@flag_judge,w
  2909  0421  043B               	iorwf	waitFlag@flag_judge+1,w
  2910  0422  1903               	btfsc	3,2
  2911  0423  2C29               	goto	l2719
  2912                           
  2913                           ;decode_AX25.c: 103: buf = buf | 0x80;
  2914                           
  2915                           ;decode_AX25.c: 102: }else{
  2916  0424  083C               	movf	waitFlag@buf,w
  2917  0425  3880               	iorlw	128
  2918  0426  00F6               	movwf	??_waitFlag
  2919  0427  0876               	movf	??_waitFlag,w
  2920  0428  00BC               	movwf	waitFlag@buf
  2921  0429                     l2719:	
  2922  0429  3001               	movlw	1
  2923  042A  07A4               	addwf	waitFlag@j_116,f
  2924  042B  1803               	skipnc
  2925  042C  0AA5               	incf	waitFlag@j_116+1,f
  2926  042D  3000               	movlw	0
  2927  042E  07A5               	addwf	waitFlag@j_116+1,f
  2928  042F  3000               	movlw	0
  2929  0430  0225               	subwf	waitFlag@j_116+1,w
  2930  0431  3008               	movlw	8
  2931  0432  1903               	skipnz
  2932  0433  0224               	subwf	waitFlag@j_116,w
  2933  0434  1C03               	skipc
  2934  0435  2C0E               	goto	l2709
  2935  0436                     l2723:	
  2936                           
  2937                           ;decode_AX25.c: 104: }
  2938                           ;decode_AX25.c: 105: }
  2939                           ;decode_AX25.c: 106: if(buf == ("JQ1YCZ"[2] << 1)){
  2940  0436  300C               	movlw	low (((STR_1+2)-__stringbase)| (0+32768))
  2941  0437  0084               	movwf	4
  2942  0438  120A  158A  2000  120A  118A  	fcall	stringdir
  2943  043D  00F6               	movwf	??_waitFlag
  2944  043E  01F7               	clrf	??_waitFlag+1
  2945  043F  1003               	clrc
  2946  0440  0DF6               	rlf	??_waitFlag,f
  2947  0441  0DF7               	rlf	??_waitFlag+1,f
  2948  0442  083C               	movf	waitFlag@buf,w
  2949  0443  00F8               	movwf	??_waitFlag+2
  2950  0444  01F9               	clrf	??_waitFlag+3
  2951  0445  0877               	movf	??_waitFlag+1,w
  2952  0446  0679               	xorwf	??_waitFlag+3,w
  2953  0447  1D03               	skipz
  2954  0448  2C4B               	goto	u2225
  2955  0449  0876               	movf	??_waitFlag,w
  2956  044A  0678               	xorwf	??_waitFlag+2,w
  2957  044B                     u2225:	
  2958  044B  1D03               	skipz
  2959  044C  2D64               	goto	l2819
  2960                           
  2961                           ;decode_AX25.c: 107: dPacket[dPacketnum] = buf;
  2962  044D  083C               	movf	waitFlag@buf,w
  2963  044E  00F6               	movwf	??_waitFlag
  2964  044F  0868               	movf	_dPacketnum,w
  2965  0450  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2966  0451  0084               	movwf	4
  2967  0452  0876               	movf	??_waitFlag,w
  2968  0453  1783               	bsf	3,7	;select IRP bank3
  2969  0454  0080               	movwf	0
  2970                           
  2971                           ;decode_AX25.c: 108: dPacketnum ++;
  2972  0455  3001               	movlw	1
  2973  0456  07E8               	addwf	_dPacketnum,f
  2974  0457  1803               	skipnc
  2975  0458  0AE9               	incf	_dPacketnum+1,f
  2976  0459  3000               	movlw	0
  2977  045A  07E9               	addwf	_dPacketnum+1,f
  2978                           
  2979                           ;decode_AX25.c: 109: for(UINT j=0;j<8;j++){
  2980  045B  01A6               	clrf	waitFlag@j_118
  2981  045C  01A7               	clrf	waitFlag@j_118+1
  2982  045D  3000               	movlw	0
  2983  045E  0227               	subwf	waitFlag@j_118+1,w
  2984  045F  3008               	movlw	8
  2985  0460  1903               	skipnz
  2986  0461  0226               	subwf	waitFlag@j_118,w
  2987  0462  1803               	btfsc	3,0
  2988  0463  2C8C               	goto	l2749
  2989  0464                     l2735:	
  2990                           
  2991                           ;decode_AX25.c: 110: flag_judge = getbit();
  2992  0464  120A  158A  2298  120A  118A  	fcall	_getbit
  2993  0469  0871               	movf	?_getbit+1,w
  2994  046A  1283               	bcf	3,5	;RP0=0, select bank0
  2995  046B  1303               	bcf	3,6	;RP1=0, select bank0
  2996  046C  00BB               	movwf	waitFlag@flag_judge+1
  2997  046D  0870               	movf	?_getbit,w
  2998  046E  00BA               	movwf	waitFlag@flag_judge
  2999                           
  3000                           ;decode_AX25.c: 111: buf = buf >> 1;
  3001  046F  083C               	movf	waitFlag@buf,w
  3002  0470  00F6               	movwf	??_waitFlag
  3003  0471  1003               	clrc
  3004  0472  0C76               	rrf	??_waitFlag,w
  3005  0473  00F7               	movwf	??_waitFlag+1
  3006  0474  0877               	movf	??_waitFlag+1,w
  3007  0475  00BC               	movwf	waitFlag@buf
  3008                           
  3009                           ;decode_AX25.c: 113: buf = buf | 0x00;
  3010  0476  083A               	movf	waitFlag@flag_judge,w
  3011  0477  043B               	iorwf	waitFlag@flag_judge+1,w
  3012  0478  1903               	btfsc	3,2
  3013  0479  2C7F               	goto	l2745
  3014                           
  3015                           ;decode_AX25.c: 115: buf = buf | 0x80;
  3016                           
  3017                           ;decode_AX25.c: 114: }else{
  3018  047A  083C               	movf	waitFlag@buf,w
  3019  047B  3880               	iorlw	128
  3020  047C  00F6               	movwf	??_waitFlag
  3021  047D  0876               	movf	??_waitFlag,w
  3022  047E  00BC               	movwf	waitFlag@buf
  3023  047F                     l2745:	
  3024  047F  3001               	movlw	1
  3025  0480  07A6               	addwf	waitFlag@j_118,f
  3026  0481  1803               	skipnc
  3027  0482  0AA7               	incf	waitFlag@j_118+1,f
  3028  0483  3000               	movlw	0
  3029  0484  07A7               	addwf	waitFlag@j_118+1,f
  3030  0485  3000               	movlw	0
  3031  0486  0227               	subwf	waitFlag@j_118+1,w
  3032  0487  3008               	movlw	8
  3033  0488  1903               	skipnz
  3034  0489  0226               	subwf	waitFlag@j_118,w
  3035  048A  1C03               	skipc
  3036  048B  2C64               	goto	l2735
  3037  048C                     l2749:	
  3038                           
  3039                           ;decode_AX25.c: 116: }
  3040                           ;decode_AX25.c: 117: }
  3041                           ;decode_AX25.c: 118: if(buf == ("JQ1YCZ"[3] << 1)){
  3042  048C  300D               	movlw	low (((STR_1+3)-__stringbase)| (0+32768))
  3043  048D  0084               	movwf	4
  3044  048E  120A  158A  2000  120A  118A  	fcall	stringdir
  3045  0493  00F6               	movwf	??_waitFlag
  3046  0494  01F7               	clrf	??_waitFlag+1
  3047  0495  1003               	clrc
  3048  0496  0DF6               	rlf	??_waitFlag,f
  3049  0497  0DF7               	rlf	??_waitFlag+1,f
  3050  0498  083C               	movf	waitFlag@buf,w
  3051  0499  00F8               	movwf	??_waitFlag+2
  3052  049A  01F9               	clrf	??_waitFlag+3
  3053  049B  0877               	movf	??_waitFlag+1,w
  3054  049C  0679               	xorwf	??_waitFlag+3,w
  3055  049D  1D03               	skipz
  3056  049E  2CA1               	goto	u2265
  3057  049F  0876               	movf	??_waitFlag,w
  3058  04A0  0678               	xorwf	??_waitFlag+2,w
  3059  04A1                     u2265:	
  3060  04A1  1D03               	skipz
  3061  04A2  2D64               	goto	l2819
  3062                           
  3063                           ;decode_AX25.c: 119: dPacket[dPacketnum] = buf;
  3064  04A3  083C               	movf	waitFlag@buf,w
  3065  04A4  00F6               	movwf	??_waitFlag
  3066  04A5  0868               	movf	_dPacketnum,w
  3067  04A6  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3068  04A7  0084               	movwf	4
  3069  04A8  0876               	movf	??_waitFlag,w
  3070  04A9  1783               	bsf	3,7	;select IRP bank3
  3071  04AA  0080               	movwf	0
  3072                           
  3073                           ;decode_AX25.c: 120: dPacketnum ++;
  3074  04AB  3001               	movlw	1
  3075  04AC  07E8               	addwf	_dPacketnum,f
  3076  04AD  1803               	skipnc
  3077  04AE  0AE9               	incf	_dPacketnum+1,f
  3078  04AF  3000               	movlw	0
  3079  04B0  07E9               	addwf	_dPacketnum+1,f
  3080                           
  3081                           ;decode_AX25.c: 121: for(UINT j=0;j<8;j++){
  3082  04B1  01A8               	clrf	waitFlag@j_120
  3083  04B2  01A9               	clrf	waitFlag@j_120+1
  3084  04B3  3000               	movlw	0
  3085  04B4  0229               	subwf	waitFlag@j_120+1,w
  3086  04B5  3008               	movlw	8
  3087  04B6  1903               	skipnz
  3088  04B7  0228               	subwf	waitFlag@j_120,w
  3089  04B8  1803               	btfsc	3,0
  3090  04B9  2CE2               	goto	l2775
  3091  04BA                     l2761:	
  3092                           
  3093                           ;decode_AX25.c: 122: flag_judge = getbit();
  3094  04BA  120A  158A  2298  120A  118A  	fcall	_getbit
  3095  04BF  0871               	movf	?_getbit+1,w
  3096  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  3097  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  3098  04C2  00BB               	movwf	waitFlag@flag_judge+1
  3099  04C3  0870               	movf	?_getbit,w
  3100  04C4  00BA               	movwf	waitFlag@flag_judge
  3101                           
  3102                           ;decode_AX25.c: 123: buf = buf >> 1;
  3103  04C5  083C               	movf	waitFlag@buf,w
  3104  04C6  00F6               	movwf	??_waitFlag
  3105  04C7  1003               	clrc
  3106  04C8  0C76               	rrf	??_waitFlag,w
  3107  04C9  00F7               	movwf	??_waitFlag+1
  3108  04CA  0877               	movf	??_waitFlag+1,w
  3109  04CB  00BC               	movwf	waitFlag@buf
  3110                           
  3111                           ;decode_AX25.c: 125: buf = buf | 0x00;
  3112  04CC  083A               	movf	waitFlag@flag_judge,w
  3113  04CD  043B               	iorwf	waitFlag@flag_judge+1,w
  3114  04CE  1903               	btfsc	3,2
  3115  04CF  2CD5               	goto	l2771
  3116                           
  3117                           ;decode_AX25.c: 127: buf = buf | 0x80;
  3118                           
  3119                           ;decode_AX25.c: 126: }else{
  3120  04D0  083C               	movf	waitFlag@buf,w
  3121  04D1  3880               	iorlw	128
  3122  04D2  00F6               	movwf	??_waitFlag
  3123  04D3  0876               	movf	??_waitFlag,w
  3124  04D4  00BC               	movwf	waitFlag@buf
  3125  04D5                     l2771:	
  3126  04D5  3001               	movlw	1
  3127  04D6  07A8               	addwf	waitFlag@j_120,f
  3128  04D7  1803               	skipnc
  3129  04D8  0AA9               	incf	waitFlag@j_120+1,f
  3130  04D9  3000               	movlw	0
  3131  04DA  07A9               	addwf	waitFlag@j_120+1,f
  3132  04DB  3000               	movlw	0
  3133  04DC  0229               	subwf	waitFlag@j_120+1,w
  3134  04DD  3008               	movlw	8
  3135  04DE  1903               	skipnz
  3136  04DF  0228               	subwf	waitFlag@j_120,w
  3137  04E0  1C03               	skipc
  3138  04E1  2CBA               	goto	l2761
  3139  04E2                     l2775:	
  3140                           
  3141                           ;decode_AX25.c: 128: }
  3142                           ;decode_AX25.c: 129: }
  3143                           ;decode_AX25.c: 130: if(buf == ("JQ1YCZ"[4] << 1)){
  3144  04E2  300E               	movlw	low (((STR_1+4)-__stringbase)| (0+32768))
  3145  04E3  0084               	movwf	4
  3146  04E4  120A  158A  2000  120A  118A  	fcall	stringdir
  3147  04E9  00F6               	movwf	??_waitFlag
  3148  04EA  01F7               	clrf	??_waitFlag+1
  3149  04EB  1003               	clrc
  3150  04EC  0DF6               	rlf	??_waitFlag,f
  3151  04ED  0DF7               	rlf	??_waitFlag+1,f
  3152  04EE  083C               	movf	waitFlag@buf,w
  3153  04EF  00F8               	movwf	??_waitFlag+2
  3154  04F0  01F9               	clrf	??_waitFlag+3
  3155  04F1  0877               	movf	??_waitFlag+1,w
  3156  04F2  0679               	xorwf	??_waitFlag+3,w
  3157  04F3  1D03               	skipz
  3158  04F4  2CF7               	goto	u2305
  3159  04F5  0876               	movf	??_waitFlag,w
  3160  04F6  0678               	xorwf	??_waitFlag+2,w
  3161  04F7                     u2305:	
  3162  04F7  1D03               	skipz
  3163  04F8  2D64               	goto	l2819
  3164                           
  3165                           ;decode_AX25.c: 131: dPacket[dPacketnum] = buf;
  3166  04F9  083C               	movf	waitFlag@buf,w
  3167  04FA  00F6               	movwf	??_waitFlag
  3168  04FB  0868               	movf	_dPacketnum,w
  3169  04FC  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3170  04FD  0084               	movwf	4
  3171  04FE  0876               	movf	??_waitFlag,w
  3172  04FF  1783               	bsf	3,7	;select IRP bank3
  3173  0500  0080               	movwf	0
  3174                           
  3175                           ;decode_AX25.c: 132: dPacketnum ++;
  3176  0501  3001               	movlw	1
  3177  0502  07E8               	addwf	_dPacketnum,f
  3178  0503  1803               	skipnc
  3179  0504  0AE9               	incf	_dPacketnum+1,f
  3180  0505  3000               	movlw	0
  3181  0506  07E9               	addwf	_dPacketnum+1,f
  3182                           
  3183                           ;decode_AX25.c: 133: for(UINT j=0;j<8;j++){
  3184  0507  01AA               	clrf	waitFlag@j_122
  3185  0508  01AB               	clrf	waitFlag@j_122+1
  3186  0509  3000               	movlw	0
  3187  050A  022B               	subwf	waitFlag@j_122+1,w
  3188  050B  3008               	movlw	8
  3189  050C  1903               	skipnz
  3190  050D  022A               	subwf	waitFlag@j_122,w
  3191  050E  1803               	btfsc	3,0
  3192  050F  2D38               	goto	l2801
  3193  0510                     l2787:	
  3194                           
  3195                           ;decode_AX25.c: 134: flag_judge = getbit();
  3196  0510  120A  158A  2298  120A  118A  	fcall	_getbit
  3197  0515  0871               	movf	?_getbit+1,w
  3198  0516  1283               	bcf	3,5	;RP0=0, select bank0
  3199  0517  1303               	bcf	3,6	;RP1=0, select bank0
  3200  0518  00BB               	movwf	waitFlag@flag_judge+1
  3201  0519  0870               	movf	?_getbit,w
  3202  051A  00BA               	movwf	waitFlag@flag_judge
  3203                           
  3204                           ;decode_AX25.c: 135: buf = buf >> 1;
  3205  051B  083C               	movf	waitFlag@buf,w
  3206  051C  00F6               	movwf	??_waitFlag
  3207  051D  1003               	clrc
  3208  051E  0C76               	rrf	??_waitFlag,w
  3209  051F  00F7               	movwf	??_waitFlag+1
  3210  0520  0877               	movf	??_waitFlag+1,w
  3211  0521  00BC               	movwf	waitFlag@buf
  3212                           
  3213                           ;decode_AX25.c: 137: buf = buf | 0x00;
  3214  0522  083A               	movf	waitFlag@flag_judge,w
  3215  0523  043B               	iorwf	waitFlag@flag_judge+1,w
  3216  0524  1903               	btfsc	3,2
  3217  0525  2D2B               	goto	l2797
  3218                           
  3219                           ;decode_AX25.c: 139: buf = buf | 0x80;
  3220                           
  3221                           ;decode_AX25.c: 138: }else{
  3222  0526  083C               	movf	waitFlag@buf,w
  3223  0527  3880               	iorlw	128
  3224  0528  00F6               	movwf	??_waitFlag
  3225  0529  0876               	movf	??_waitFlag,w
  3226  052A  00BC               	movwf	waitFlag@buf
  3227  052B                     l2797:	
  3228  052B  3001               	movlw	1
  3229  052C  07AA               	addwf	waitFlag@j_122,f
  3230  052D  1803               	skipnc
  3231  052E  0AAB               	incf	waitFlag@j_122+1,f
  3232  052F  3000               	movlw	0
  3233  0530  07AB               	addwf	waitFlag@j_122+1,f
  3234  0531  3000               	movlw	0
  3235  0532  022B               	subwf	waitFlag@j_122+1,w
  3236  0533  3008               	movlw	8
  3237  0534  1903               	skipnz
  3238  0535  022A               	subwf	waitFlag@j_122,w
  3239  0536  1C03               	skipc
  3240  0537  2D10               	goto	l2787
  3241  0538                     l2801:	
  3242                           
  3243                           ;decode_AX25.c: 140: }
  3244                           ;decode_AX25.c: 141: }
  3245                           ;decode_AX25.c: 142: if(buf == ("JQ1YCZ"[5] << 1)){
  3246  0538  300F               	movlw	low (((STR_1+5)-__stringbase)| (0+32768))
  3247  0539  0084               	movwf	4
  3248  053A  120A  158A  2000  120A  118A  	fcall	stringdir
  3249  053F  00F6               	movwf	??_waitFlag
  3250  0540  01F7               	clrf	??_waitFlag+1
  3251  0541  1003               	clrc
  3252  0542  0DF6               	rlf	??_waitFlag,f
  3253  0543  0DF7               	rlf	??_waitFlag+1,f
  3254  0544  083C               	movf	waitFlag@buf,w
  3255  0545  00F8               	movwf	??_waitFlag+2
  3256  0546  01F9               	clrf	??_waitFlag+3
  3257  0547  0877               	movf	??_waitFlag+1,w
  3258  0548  0679               	xorwf	??_waitFlag+3,w
  3259  0549  1D03               	skipz
  3260  054A  2D4D               	goto	u2345
  3261  054B  0876               	movf	??_waitFlag,w
  3262  054C  0678               	xorwf	??_waitFlag+2,w
  3263  054D                     u2345:	
  3264  054D  1D03               	skipz
  3265  054E  2D64               	goto	l2819
  3266                           
  3267                           ;decode_AX25.c: 143: dPacket[dPacketnum] = buf;
  3268  054F  083C               	movf	waitFlag@buf,w
  3269  0550  00F6               	movwf	??_waitFlag
  3270  0551  0868               	movf	_dPacketnum,w
  3271  0552  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3272  0553  0084               	movwf	4
  3273  0554  0876               	movf	??_waitFlag,w
  3274  0555  1783               	bsf	3,7	;select IRP bank3
  3275  0556  0080               	movwf	0
  3276                           
  3277                           ;decode_AX25.c: 144: dPacketnum ++;
  3278  0557  3001               	movlw	1
  3279  0558  07E8               	addwf	_dPacketnum,f
  3280  0559  1803               	skipnc
  3281  055A  0AE9               	incf	_dPacketnum+1,f
  3282  055B  3000               	movlw	0
  3283  055C  07E9               	addwf	_dPacketnum+1,f
  3284                           
  3285                           ;decode_AX25.c: 145: rcv_state ++;
  3286  055D  3001               	movlw	1
  3287  055E  07EA               	addwf	_rcv_state,f
  3288  055F  1803               	skipnc
  3289  0560  0AEB               	incf	_rcv_state+1,f
  3290  0561  3000               	movlw	0
  3291  0562  07EB               	addwf	_rcv_state+1,f
  3292                           
  3293                           ;decode_AX25.c: 146: }else{
  3294  0563  2D66               	goto	l210
  3295  0564                     l2819:	
  3296                           ;decode_AX25.c: 160: }
  3297                           ;decode_AX25.c: 161: }else{
  3298                           
  3299                           ;decode_AX25.c: 159: dPacketnum = 0;
  3300                           
  3301                           ;decode_AX25.c: 157: }
  3302                           ;decode_AX25.c: 158: }else{
  3303                           
  3304                           ;decode_AX25.c: 156: dPacketnum = 0;
  3305                           
  3306                           ;decode_AX25.c: 154: }
  3307                           ;decode_AX25.c: 155: }else{
  3308                           
  3309                           ;decode_AX25.c: 153: dPacketnum = 0;
  3310                           
  3311                           ;decode_AX25.c: 151: }
  3312                           ;decode_AX25.c: 152: }else{
  3313                           
  3314                           ;decode_AX25.c: 150: dPacketnum = 0;
  3315                           
  3316                           ;decode_AX25.c: 148: }
  3317                           ;decode_AX25.c: 149: }else{
  3318                           
  3319                           ;decode_AX25.c: 147: dPacketnum = 0;
  3320                           
  3321                           
  3322                           ;decode_AX25.c: 162: dPacketnum = 0;
  3323  0564  01E8               	clrf	_dPacketnum
  3324  0565  01E9               	clrf	_dPacketnum+1
  3325  0566                     l210:	
  3326                           
  3327                           ;decode_AX25.c: 163: }
  3328                           ;decode_AX25.c: 165: for(UINT j=0;j<8;j++){
  3329  0566  01AC               	clrf	waitFlag@j_124
  3330  0567  01AD               	clrf	waitFlag@j_124+1
  3331  0568  3000               	movlw	0
  3332  0569  022D               	subwf	waitFlag@j_124+1,w
  3333  056A  3008               	movlw	8
  3334  056B  1903               	skipnz
  3335  056C  022C               	subwf	waitFlag@j_124,w
  3336  056D  1803               	btfsc	3,0
  3337  056E  2D97               	goto	l2839
  3338  056F                     l2825:	
  3339                           
  3340                           ;decode_AX25.c: 166: flag_judge = getbit();
  3341  056F  120A  158A  2298  120A  118A  	fcall	_getbit
  3342  0574  0871               	movf	?_getbit+1,w
  3343  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3344  0576  1303               	bcf	3,6	;RP1=0, select bank0
  3345  0577  00BB               	movwf	waitFlag@flag_judge+1
  3346  0578  0870               	movf	?_getbit,w
  3347  0579  00BA               	movwf	waitFlag@flag_judge
  3348                           
  3349                           ;decode_AX25.c: 167: buf = buf >> 1;
  3350  057A  083C               	movf	waitFlag@buf,w
  3351  057B  00F6               	movwf	??_waitFlag
  3352  057C  1003               	clrc
  3353  057D  0C76               	rrf	??_waitFlag,w
  3354  057E  00F7               	movwf	??_waitFlag+1
  3355  057F  0877               	movf	??_waitFlag+1,w
  3356  0580  00BC               	movwf	waitFlag@buf
  3357                           
  3358                           ;decode_AX25.c: 169: buf = buf | 0x00;
  3359  0581  083A               	movf	waitFlag@flag_judge,w
  3360  0582  043B               	iorwf	waitFlag@flag_judge+1,w
  3361  0583  1903               	btfsc	3,2
  3362  0584  2D8A               	goto	l2835
  3363                           
  3364                           ;decode_AX25.c: 171: buf = buf | 0x80;
  3365                           
  3366                           ;decode_AX25.c: 170: }else{
  3367  0585  083C               	movf	waitFlag@buf,w
  3368  0586  3880               	iorlw	128
  3369  0587  00F6               	movwf	??_waitFlag
  3370  0588  0876               	movf	??_waitFlag,w
  3371  0589  00BC               	movwf	waitFlag@buf
  3372  058A                     l2835:	
  3373  058A  3001               	movlw	1
  3374  058B  07AC               	addwf	waitFlag@j_124,f
  3375  058C  1803               	skipnc
  3376  058D  0AAD               	incf	waitFlag@j_124+1,f
  3377  058E  3000               	movlw	0
  3378  058F  07AD               	addwf	waitFlag@j_124+1,f
  3379  0590  3000               	movlw	0
  3380  0591  022D               	subwf	waitFlag@j_124+1,w
  3381  0592  3008               	movlw	8
  3382  0593  1903               	skipnz
  3383  0594  022C               	subwf	waitFlag@j_124,w
  3384  0595  1C03               	skipc
  3385  0596  2D6F               	goto	l2825
  3386  0597                     l2839:	
  3387                           
  3388                           ;decode_AX25.c: 172: }
  3389                           ;decode_AX25.c: 173: }
  3390                           ;decode_AX25.c: 174: dPacket[dPacketnum] = buf;
  3391  0597  083C               	movf	waitFlag@buf,w
  3392  0598  00F6               	movwf	??_waitFlag
  3393  0599  0868               	movf	_dPacketnum,w
  3394  059A  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3395  059B  0084               	movwf	4
  3396  059C  0876               	movf	??_waitFlag,w
  3397  059D  1783               	bsf	3,7	;select IRP bank3
  3398  059E  0080               	movwf	0
  3399                           
  3400                           ;decode_AX25.c: 175: dPacketnum ++;
  3401  059F  3001               	movlw	1
  3402  05A0  07E8               	addwf	_dPacketnum,f
  3403  05A1  1803               	skipnc
  3404  05A2  0AE9               	incf	_dPacketnum+1,f
  3405  05A3  3000               	movlw	0
  3406  05A4  07E9               	addwf	_dPacketnum+1,f
  3407                           
  3408                           ;decode_AX25.c: 176: for(UINT j=0;j<8;j++){
  3409  05A5  01AE               	clrf	waitFlag@j_125
  3410  05A6  01AF               	clrf	waitFlag@j_125+1
  3411  05A7  3000               	movlw	0
  3412  05A8  022F               	subwf	waitFlag@j_125+1,w
  3413  05A9  3008               	movlw	8
  3414  05AA  1903               	skipnz
  3415  05AB  022E               	subwf	waitFlag@j_125,w
  3416  05AC  1803               	btfsc	3,0
  3417  05AD  2DD6               	goto	l2863
  3418  05AE                     l2849:	
  3419                           
  3420                           ;decode_AX25.c: 177: flag_judge = getbit();
  3421  05AE  120A  158A  2298  120A  118A  	fcall	_getbit
  3422  05B3  0871               	movf	?_getbit+1,w
  3423  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  3424  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  3425  05B6  00BB               	movwf	waitFlag@flag_judge+1
  3426  05B7  0870               	movf	?_getbit,w
  3427  05B8  00BA               	movwf	waitFlag@flag_judge
  3428                           
  3429                           ;decode_AX25.c: 178: buf = buf >> 1;
  3430  05B9  083C               	movf	waitFlag@buf,w
  3431  05BA  00F6               	movwf	??_waitFlag
  3432  05BB  1003               	clrc
  3433  05BC  0C76               	rrf	??_waitFlag,w
  3434  05BD  00F7               	movwf	??_waitFlag+1
  3435  05BE  0877               	movf	??_waitFlag+1,w
  3436  05BF  00BC               	movwf	waitFlag@buf
  3437                           
  3438                           ;decode_AX25.c: 180: buf = buf | 0x00;
  3439  05C0  083A               	movf	waitFlag@flag_judge,w
  3440  05C1  043B               	iorwf	waitFlag@flag_judge+1,w
  3441  05C2  1903               	btfsc	3,2
  3442  05C3  2DC9               	goto	l2859
  3443                           
  3444                           ;decode_AX25.c: 182: buf = buf | 0x80;
  3445                           
  3446                           ;decode_AX25.c: 181: }else{
  3447  05C4  083C               	movf	waitFlag@buf,w
  3448  05C5  3880               	iorlw	128
  3449  05C6  00F6               	movwf	??_waitFlag
  3450  05C7  0876               	movf	??_waitFlag,w
  3451  05C8  00BC               	movwf	waitFlag@buf
  3452  05C9                     l2859:	
  3453  05C9  3001               	movlw	1
  3454  05CA  07AE               	addwf	waitFlag@j_125,f
  3455  05CB  1803               	skipnc
  3456  05CC  0AAF               	incf	waitFlag@j_125+1,f
  3457  05CD  3000               	movlw	0
  3458  05CE  07AF               	addwf	waitFlag@j_125+1,f
  3459  05CF  3000               	movlw	0
  3460  05D0  022F               	subwf	waitFlag@j_125+1,w
  3461  05D1  3008               	movlw	8
  3462  05D2  1903               	skipnz
  3463  05D3  022E               	subwf	waitFlag@j_125,w
  3464  05D4  1C03               	skipc
  3465  05D5  2DAE               	goto	l2849
  3466  05D6                     l2863:	
  3467                           
  3468                           ;decode_AX25.c: 183: }
  3469                           ;decode_AX25.c: 184: }
  3470                           ;decode_AX25.c: 185: if(buf == ("JQ1ZHX"[0] << 1)){
  3471  05D6  3003               	movlw	low (STR_7-__stringbase)
  3472  05D7  0084               	movwf	4
  3473  05D8  120A  158A  2000  120A  118A  	fcall	stringdir
  3474  05DD  00F6               	movwf	??_waitFlag
  3475  05DE  01F7               	clrf	??_waitFlag+1
  3476  05DF  1003               	clrc
  3477  05E0  0DF6               	rlf	??_waitFlag,f
  3478  05E1  0DF7               	rlf	??_waitFlag+1,f
  3479  05E2  083C               	movf	waitFlag@buf,w
  3480  05E3  00F8               	movwf	??_waitFlag+2
  3481  05E4  01F9               	clrf	??_waitFlag+3
  3482  05E5  0877               	movf	??_waitFlag+1,w
  3483  05E6  0679               	xorwf	??_waitFlag+3,w
  3484  05E7  1D03               	skipz
  3485  05E8  2DEB               	goto	u2415
  3486  05E9  0876               	movf	??_waitFlag,w
  3487  05EA  0678               	xorwf	??_waitFlag+2,w
  3488  05EB                     u2415:	
  3489  05EB  1D03               	skipz
  3490  05EC  2FB0               	goto	l3011
  3491                           
  3492                           ;decode_AX25.c: 186: dPacket[dPacketnum] = buf;
  3493  05ED  083C               	movf	waitFlag@buf,w
  3494  05EE  00F6               	movwf	??_waitFlag
  3495  05EF  0868               	movf	_dPacketnum,w
  3496  05F0  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3497  05F1  0084               	movwf	4
  3498  05F2  0876               	movf	??_waitFlag,w
  3499  05F3  1783               	bsf	3,7	;select IRP bank3
  3500  05F4  0080               	movwf	0
  3501                           
  3502                           ;decode_AX25.c: 187: dPacketnum ++;
  3503  05F5  3001               	movlw	1
  3504  05F6  07E8               	addwf	_dPacketnum,f
  3505  05F7  1803               	skipnc
  3506  05F8  0AE9               	incf	_dPacketnum+1,f
  3507  05F9  3000               	movlw	0
  3508  05FA  07E9               	addwf	_dPacketnum+1,f
  3509                           
  3510                           ;decode_AX25.c: 188: for(UINT j=0;j<8;j++){
  3511  05FB  01B0               	clrf	waitFlag@j_127
  3512  05FC  01B1               	clrf	waitFlag@j_127+1
  3513  05FD  3000               	movlw	0
  3514  05FE  0231               	subwf	waitFlag@j_127+1,w
  3515  05FF  3008               	movlw	8
  3516  0600  1903               	skipnz
  3517  0601  0230               	subwf	waitFlag@j_127,w
  3518  0602  1803               	btfsc	3,0
  3519  0603  2E2C               	goto	l2889
  3520  0604                     l2875:	
  3521                           
  3522                           ;decode_AX25.c: 189: flag_judge = getbit();
  3523  0604  120A  158A  2298  120A  118A  	fcall	_getbit
  3524  0609  0871               	movf	?_getbit+1,w
  3525  060A  1283               	bcf	3,5	;RP0=0, select bank0
  3526  060B  1303               	bcf	3,6	;RP1=0, select bank0
  3527  060C  00BB               	movwf	waitFlag@flag_judge+1
  3528  060D  0870               	movf	?_getbit,w
  3529  060E  00BA               	movwf	waitFlag@flag_judge
  3530                           
  3531                           ;decode_AX25.c: 190: buf = buf >> 1;
  3532  060F  083C               	movf	waitFlag@buf,w
  3533  0610  00F6               	movwf	??_waitFlag
  3534  0611  1003               	clrc
  3535  0612  0C76               	rrf	??_waitFlag,w
  3536  0613  00F7               	movwf	??_waitFlag+1
  3537  0614  0877               	movf	??_waitFlag+1,w
  3538  0615  00BC               	movwf	waitFlag@buf
  3539                           
  3540                           ;decode_AX25.c: 192: buf = buf | 0x00;
  3541  0616  083A               	movf	waitFlag@flag_judge,w
  3542  0617  043B               	iorwf	waitFlag@flag_judge+1,w
  3543  0618  1903               	btfsc	3,2
  3544  0619  2E1F               	goto	l2885
  3545                           
  3546                           ;decode_AX25.c: 194: buf = buf | 0x80;
  3547                           
  3548                           ;decode_AX25.c: 193: }else{
  3549  061A  083C               	movf	waitFlag@buf,w
  3550  061B  3880               	iorlw	128
  3551  061C  00F6               	movwf	??_waitFlag
  3552  061D  0876               	movf	??_waitFlag,w
  3553  061E  00BC               	movwf	waitFlag@buf
  3554  061F                     l2885:	
  3555  061F  3001               	movlw	1
  3556  0620  07B0               	addwf	waitFlag@j_127,f
  3557  0621  1803               	skipnc
  3558  0622  0AB1               	incf	waitFlag@j_127+1,f
  3559  0623  3000               	movlw	0
  3560  0624  07B1               	addwf	waitFlag@j_127+1,f
  3561  0625  3000               	movlw	0
  3562  0626  0231               	subwf	waitFlag@j_127+1,w
  3563  0627  3008               	movlw	8
  3564  0628  1903               	skipnz
  3565  0629  0230               	subwf	waitFlag@j_127,w
  3566  062A  1C03               	skipc
  3567  062B  2E04               	goto	l2875
  3568  062C                     l2889:	
  3569                           
  3570                           ;decode_AX25.c: 195: }
  3571                           ;decode_AX25.c: 196: }
  3572                           ;decode_AX25.c: 197: if(buf == ("JQ1ZHX"[1] << 1)){
  3573  062C  3004               	movlw	low (((STR_7+1)-__stringbase)| (0+32768))
  3574  062D  0084               	movwf	4
  3575  062E  120A  158A  2000  120A  118A  	fcall	stringdir
  3576  0633  00F6               	movwf	??_waitFlag
  3577  0634  01F7               	clrf	??_waitFlag+1
  3578  0635  1003               	clrc
  3579  0636  0DF6               	rlf	??_waitFlag,f
  3580  0637  0DF7               	rlf	??_waitFlag+1,f
  3581  0638  083C               	movf	waitFlag@buf,w
  3582  0639  00F8               	movwf	??_waitFlag+2
  3583  063A  01F9               	clrf	??_waitFlag+3
  3584  063B  0877               	movf	??_waitFlag+1,w
  3585  063C  0679               	xorwf	??_waitFlag+3,w
  3586  063D  1D03               	skipz
  3587  063E  2E41               	goto	u2455
  3588  063F  0876               	movf	??_waitFlag,w
  3589  0640  0678               	xorwf	??_waitFlag+2,w
  3590  0641                     u2455:	
  3591  0641  1D03               	skipz
  3592  0642  2FB0               	goto	l3011
  3593                           
  3594                           ;decode_AX25.c: 198: dPacket[dPacketnum] = buf;
  3595  0643  083C               	movf	waitFlag@buf,w
  3596  0644  00F6               	movwf	??_waitFlag
  3597  0645  0868               	movf	_dPacketnum,w
  3598  0646  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3599  0647  0084               	movwf	4
  3600  0648  0876               	movf	??_waitFlag,w
  3601  0649  1783               	bsf	3,7	;select IRP bank3
  3602  064A  0080               	movwf	0
  3603                           
  3604                           ;decode_AX25.c: 199: dPacketnum ++;
  3605  064B  3001               	movlw	1
  3606  064C  07E8               	addwf	_dPacketnum,f
  3607  064D  1803               	skipnc
  3608  064E  0AE9               	incf	_dPacketnum+1,f
  3609  064F  3000               	movlw	0
  3610  0650  07E9               	addwf	_dPacketnum+1,f
  3611                           
  3612                           ;decode_AX25.c: 200: for(UINT j=0;j<8;j++){
  3613  0651  01B2               	clrf	waitFlag@j_129
  3614  0652  01B3               	clrf	waitFlag@j_129+1
  3615  0653  3000               	movlw	0
  3616  0654  0233               	subwf	waitFlag@j_129+1,w
  3617  0655  3008               	movlw	8
  3618  0656  1903               	skipnz
  3619  0657  0232               	subwf	waitFlag@j_129,w
  3620  0658  1803               	btfsc	3,0
  3621  0659  2E82               	goto	l2915
  3622  065A                     l2901:	
  3623                           
  3624                           ;decode_AX25.c: 201: flag_judge = getbit();
  3625  065A  120A  158A  2298  120A  118A  	fcall	_getbit
  3626  065F  0871               	movf	?_getbit+1,w
  3627  0660  1283               	bcf	3,5	;RP0=0, select bank0
  3628  0661  1303               	bcf	3,6	;RP1=0, select bank0
  3629  0662  00BB               	movwf	waitFlag@flag_judge+1
  3630  0663  0870               	movf	?_getbit,w
  3631  0664  00BA               	movwf	waitFlag@flag_judge
  3632                           
  3633                           ;decode_AX25.c: 202: buf = buf >> 1;
  3634  0665  083C               	movf	waitFlag@buf,w
  3635  0666  00F6               	movwf	??_waitFlag
  3636  0667  1003               	clrc
  3637  0668  0C76               	rrf	??_waitFlag,w
  3638  0669  00F7               	movwf	??_waitFlag+1
  3639  066A  0877               	movf	??_waitFlag+1,w
  3640  066B  00BC               	movwf	waitFlag@buf
  3641                           
  3642                           ;decode_AX25.c: 204: buf = buf | 0x00;
  3643  066C  083A               	movf	waitFlag@flag_judge,w
  3644  066D  043B               	iorwf	waitFlag@flag_judge+1,w
  3645  066E  1903               	btfsc	3,2
  3646  066F  2E75               	goto	l2911
  3647                           
  3648                           ;decode_AX25.c: 206: buf = buf | 0x80;
  3649                           
  3650                           ;decode_AX25.c: 205: }else{
  3651  0670  083C               	movf	waitFlag@buf,w
  3652  0671  3880               	iorlw	128
  3653  0672  00F6               	movwf	??_waitFlag
  3654  0673  0876               	movf	??_waitFlag,w
  3655  0674  00BC               	movwf	waitFlag@buf
  3656  0675                     l2911:	
  3657  0675  3001               	movlw	1
  3658  0676  07B2               	addwf	waitFlag@j_129,f
  3659  0677  1803               	skipnc
  3660  0678  0AB3               	incf	waitFlag@j_129+1,f
  3661  0679  3000               	movlw	0
  3662  067A  07B3               	addwf	waitFlag@j_129+1,f
  3663  067B  3000               	movlw	0
  3664  067C  0233               	subwf	waitFlag@j_129+1,w
  3665  067D  3008               	movlw	8
  3666  067E  1903               	skipnz
  3667  067F  0232               	subwf	waitFlag@j_129,w
  3668  0680  1C03               	skipc
  3669  0681  2E5A               	goto	l2901
  3670  0682                     l2915:	
  3671                           
  3672                           ;decode_AX25.c: 207: }
  3673                           ;decode_AX25.c: 208: }
  3674                           ;decode_AX25.c: 209: if(buf == ("JQ1ZHX"[2] << 1)){
  3675  0682  3005               	movlw	low (((STR_7+2)-__stringbase)| (0+32768))
  3676  0683  0084               	movwf	4
  3677  0684  120A  158A  2000  120A  118A  	fcall	stringdir
  3678  0689  00F6               	movwf	??_waitFlag
  3679  068A  01F7               	clrf	??_waitFlag+1
  3680  068B  1003               	clrc
  3681  068C  0DF6               	rlf	??_waitFlag,f
  3682  068D  0DF7               	rlf	??_waitFlag+1,f
  3683  068E  083C               	movf	waitFlag@buf,w
  3684  068F  00F8               	movwf	??_waitFlag+2
  3685  0690  01F9               	clrf	??_waitFlag+3
  3686  0691  0877               	movf	??_waitFlag+1,w
  3687  0692  0679               	xorwf	??_waitFlag+3,w
  3688  0693  1D03               	skipz
  3689  0694  2E97               	goto	u2495
  3690  0695  0876               	movf	??_waitFlag,w
  3691  0696  0678               	xorwf	??_waitFlag+2,w
  3692  0697                     u2495:	
  3693  0697  1D03               	skipz
  3694  0698  2FB0               	goto	l3011
  3695                           
  3696                           ;decode_AX25.c: 210: dPacket[dPacketnum] = buf;
  3697  0699  083C               	movf	waitFlag@buf,w
  3698  069A  00F6               	movwf	??_waitFlag
  3699  069B  0868               	movf	_dPacketnum,w
  3700  069C  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3701  069D  0084               	movwf	4
  3702  069E  0876               	movf	??_waitFlag,w
  3703  069F  1783               	bsf	3,7	;select IRP bank3
  3704  06A0  0080               	movwf	0
  3705                           
  3706                           ;decode_AX25.c: 211: dPacketnum ++;
  3707  06A1  3001               	movlw	1
  3708  06A2  07E8               	addwf	_dPacketnum,f
  3709  06A3  1803               	skipnc
  3710  06A4  0AE9               	incf	_dPacketnum+1,f
  3711  06A5  3000               	movlw	0
  3712  06A6  07E9               	addwf	_dPacketnum+1,f
  3713                           
  3714                           ;decode_AX25.c: 212: for(UINT j=0;j<8;j++){
  3715  06A7  01B4               	clrf	waitFlag@j_131
  3716  06A8  01B5               	clrf	waitFlag@j_131+1
  3717  06A9  3000               	movlw	0
  3718  06AA  0235               	subwf	waitFlag@j_131+1,w
  3719  06AB  3008               	movlw	8
  3720  06AC  1903               	skipnz
  3721  06AD  0234               	subwf	waitFlag@j_131,w
  3722  06AE  1803               	btfsc	3,0
  3723  06AF  2ED8               	goto	l2941
  3724  06B0                     l2927:	
  3725                           
  3726                           ;decode_AX25.c: 213: flag_judge = getbit();
  3727  06B0  120A  158A  2298  120A  118A  	fcall	_getbit
  3728  06B5  0871               	movf	?_getbit+1,w
  3729  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  3730  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  3731  06B8  00BB               	movwf	waitFlag@flag_judge+1
  3732  06B9  0870               	movf	?_getbit,w
  3733  06BA  00BA               	movwf	waitFlag@flag_judge
  3734                           
  3735                           ;decode_AX25.c: 214: buf = buf >> 1;
  3736  06BB  083C               	movf	waitFlag@buf,w
  3737  06BC  00F6               	movwf	??_waitFlag
  3738  06BD  1003               	clrc
  3739  06BE  0C76               	rrf	??_waitFlag,w
  3740  06BF  00F7               	movwf	??_waitFlag+1
  3741  06C0  0877               	movf	??_waitFlag+1,w
  3742  06C1  00BC               	movwf	waitFlag@buf
  3743                           
  3744                           ;decode_AX25.c: 216: buf = buf | 0x00;
  3745  06C2  083A               	movf	waitFlag@flag_judge,w
  3746  06C3  043B               	iorwf	waitFlag@flag_judge+1,w
  3747  06C4  1903               	btfsc	3,2
  3748  06C5  2ECB               	goto	l2937
  3749                           
  3750                           ;decode_AX25.c: 218: buf = buf | 0x80;
  3751                           
  3752                           ;decode_AX25.c: 217: }else{
  3753  06C6  083C               	movf	waitFlag@buf,w
  3754  06C7  3880               	iorlw	128
  3755  06C8  00F6               	movwf	??_waitFlag
  3756  06C9  0876               	movf	??_waitFlag,w
  3757  06CA  00BC               	movwf	waitFlag@buf
  3758  06CB                     l2937:	
  3759  06CB  3001               	movlw	1
  3760  06CC  07B4               	addwf	waitFlag@j_131,f
  3761  06CD  1803               	skipnc
  3762  06CE  0AB5               	incf	waitFlag@j_131+1,f
  3763  06CF  3000               	movlw	0
  3764  06D0  07B5               	addwf	waitFlag@j_131+1,f
  3765  06D1  3000               	movlw	0
  3766  06D2  0235               	subwf	waitFlag@j_131+1,w
  3767  06D3  3008               	movlw	8
  3768  06D4  1903               	skipnz
  3769  06D5  0234               	subwf	waitFlag@j_131,w
  3770  06D6  1C03               	skipc
  3771  06D7  2EB0               	goto	l2927
  3772  06D8                     l2941:	
  3773                           
  3774                           ;decode_AX25.c: 219: }
  3775                           ;decode_AX25.c: 220: }
  3776                           ;decode_AX25.c: 221: if(buf == ("JQ1ZHX"[3] << 1)){
  3777  06D8  3006               	movlw	low (((STR_7+3)-__stringbase)| (0+32768))
  3778  06D9  0084               	movwf	4
  3779  06DA  120A  158A  2000  120A  118A  	fcall	stringdir
  3780  06DF  00F6               	movwf	??_waitFlag
  3781  06E0  01F7               	clrf	??_waitFlag+1
  3782  06E1  1003               	clrc
  3783  06E2  0DF6               	rlf	??_waitFlag,f
  3784  06E3  0DF7               	rlf	??_waitFlag+1,f
  3785  06E4  083C               	movf	waitFlag@buf,w
  3786  06E5  00F8               	movwf	??_waitFlag+2
  3787  06E6  01F9               	clrf	??_waitFlag+3
  3788  06E7  0877               	movf	??_waitFlag+1,w
  3789  06E8  0679               	xorwf	??_waitFlag+3,w
  3790  06E9  1D03               	skipz
  3791  06EA  2EED               	goto	u2535
  3792  06EB  0876               	movf	??_waitFlag,w
  3793  06EC  0678               	xorwf	??_waitFlag+2,w
  3794  06ED                     u2535:	
  3795  06ED  1D03               	skipz
  3796  06EE  2FB0               	goto	l3011
  3797                           
  3798                           ;decode_AX25.c: 222: dPacket[dPacketnum] = buf;
  3799  06EF  083C               	movf	waitFlag@buf,w
  3800  06F0  00F6               	movwf	??_waitFlag
  3801  06F1  0868               	movf	_dPacketnum,w
  3802  06F2  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3803  06F3  0084               	movwf	4
  3804  06F4  0876               	movf	??_waitFlag,w
  3805  06F5  1783               	bsf	3,7	;select IRP bank3
  3806  06F6  0080               	movwf	0
  3807                           
  3808                           ;decode_AX25.c: 223: dPacketnum ++;
  3809  06F7  3001               	movlw	1
  3810  06F8  07E8               	addwf	_dPacketnum,f
  3811  06F9  1803               	skipnc
  3812  06FA  0AE9               	incf	_dPacketnum+1,f
  3813  06FB  3000               	movlw	0
  3814  06FC  07E9               	addwf	_dPacketnum+1,f
  3815                           
  3816                           ;decode_AX25.c: 224: for(UINT j=0;j<8;j++){
  3817  06FD  01B6               	clrf	waitFlag@j_133
  3818  06FE  01B7               	clrf	waitFlag@j_133+1
  3819  06FF  3000               	movlw	0
  3820  0700  0237               	subwf	waitFlag@j_133+1,w
  3821  0701  3008               	movlw	8
  3822  0702  1903               	skipnz
  3823  0703  0236               	subwf	waitFlag@j_133,w
  3824  0704  1803               	btfsc	3,0
  3825  0705  2F2E               	goto	l2967
  3826  0706                     l2953:	
  3827                           
  3828                           ;decode_AX25.c: 225: flag_judge = getbit();
  3829  0706  120A  158A  2298  120A  118A  	fcall	_getbit
  3830  070B  0871               	movf	?_getbit+1,w
  3831  070C  1283               	bcf	3,5	;RP0=0, select bank0
  3832  070D  1303               	bcf	3,6	;RP1=0, select bank0
  3833  070E  00BB               	movwf	waitFlag@flag_judge+1
  3834  070F  0870               	movf	?_getbit,w
  3835  0710  00BA               	movwf	waitFlag@flag_judge
  3836                           
  3837                           ;decode_AX25.c: 226: buf = buf >> 1;
  3838  0711  083C               	movf	waitFlag@buf,w
  3839  0712  00F6               	movwf	??_waitFlag
  3840  0713  1003               	clrc
  3841  0714  0C76               	rrf	??_waitFlag,w
  3842  0715  00F7               	movwf	??_waitFlag+1
  3843  0716  0877               	movf	??_waitFlag+1,w
  3844  0717  00BC               	movwf	waitFlag@buf
  3845                           
  3846                           ;decode_AX25.c: 228: buf = buf | 0x00;
  3847  0718  083A               	movf	waitFlag@flag_judge,w
  3848  0719  043B               	iorwf	waitFlag@flag_judge+1,w
  3849  071A  1903               	btfsc	3,2
  3850  071B  2F21               	goto	l2963
  3851                           
  3852                           ;decode_AX25.c: 230: buf = buf | 0x80;
  3853                           
  3854                           ;decode_AX25.c: 229: }else{
  3855  071C  083C               	movf	waitFlag@buf,w
  3856  071D  3880               	iorlw	128
  3857  071E  00F6               	movwf	??_waitFlag
  3858  071F  0876               	movf	??_waitFlag,w
  3859  0720  00BC               	movwf	waitFlag@buf
  3860  0721                     l2963:	
  3861  0721  3001               	movlw	1
  3862  0722  07B6               	addwf	waitFlag@j_133,f
  3863  0723  1803               	skipnc
  3864  0724  0AB7               	incf	waitFlag@j_133+1,f
  3865  0725  3000               	movlw	0
  3866  0726  07B7               	addwf	waitFlag@j_133+1,f
  3867  0727  3000               	movlw	0
  3868  0728  0237               	subwf	waitFlag@j_133+1,w
  3869  0729  3008               	movlw	8
  3870  072A  1903               	skipnz
  3871  072B  0236               	subwf	waitFlag@j_133,w
  3872  072C  1C03               	skipc
  3873  072D  2F06               	goto	l2953
  3874  072E                     l2967:	
  3875                           
  3876                           ;decode_AX25.c: 231: }
  3877                           ;decode_AX25.c: 232: }
  3878                           ;decode_AX25.c: 233: if(buf == ("JQ1ZHX"[4] << 1)){
  3879  072E  3007               	movlw	low (((STR_7+4)-__stringbase)| (0+32768))
  3880  072F  0084               	movwf	4
  3881  0730  120A  158A  2000  120A  118A  	fcall	stringdir
  3882  0735  00F6               	movwf	??_waitFlag
  3883  0736  01F7               	clrf	??_waitFlag+1
  3884  0737  1003               	clrc
  3885  0738  0DF6               	rlf	??_waitFlag,f
  3886  0739  0DF7               	rlf	??_waitFlag+1,f
  3887  073A  083C               	movf	waitFlag@buf,w
  3888  073B  00F8               	movwf	??_waitFlag+2
  3889  073C  01F9               	clrf	??_waitFlag+3
  3890  073D  0877               	movf	??_waitFlag+1,w
  3891  073E  0679               	xorwf	??_waitFlag+3,w
  3892  073F  1D03               	skipz
  3893  0740  2F43               	goto	u2575
  3894  0741  0876               	movf	??_waitFlag,w
  3895  0742  0678               	xorwf	??_waitFlag+2,w
  3896  0743                     u2575:	
  3897  0743  1D03               	skipz
  3898  0744  2FB0               	goto	l3011
  3899                           
  3900                           ;decode_AX25.c: 234: dPacket[dPacketnum] = buf;
  3901  0745  083C               	movf	waitFlag@buf,w
  3902  0746  00F6               	movwf	??_waitFlag
  3903  0747  0868               	movf	_dPacketnum,w
  3904  0748  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3905  0749  0084               	movwf	4
  3906  074A  0876               	movf	??_waitFlag,w
  3907  074B  1783               	bsf	3,7	;select IRP bank3
  3908  074C  0080               	movwf	0
  3909                           
  3910                           ;decode_AX25.c: 235: dPacketnum ++;
  3911  074D  3001               	movlw	1
  3912  074E  07E8               	addwf	_dPacketnum,f
  3913  074F  1803               	skipnc
  3914  0750  0AE9               	incf	_dPacketnum+1,f
  3915  0751  3000               	movlw	0
  3916  0752  07E9               	addwf	_dPacketnum+1,f
  3917                           
  3918                           ;decode_AX25.c: 236: for(UINT j=0;j<8;j++){
  3919  0753  01B8               	clrf	waitFlag@j_135
  3920  0754  01B9               	clrf	waitFlag@j_135+1
  3921  0755  3000               	movlw	0
  3922  0756  0239               	subwf	waitFlag@j_135+1,w
  3923  0757  3008               	movlw	8
  3924  0758  1903               	skipnz
  3925  0759  0238               	subwf	waitFlag@j_135,w
  3926  075A  1803               	btfsc	3,0
  3927  075B  2F84               	goto	l2993
  3928  075C                     l2979:	
  3929                           
  3930                           ;decode_AX25.c: 237: flag_judge = getbit();
  3931  075C  120A  158A  2298  120A  118A  	fcall	_getbit
  3932  0761  0871               	movf	?_getbit+1,w
  3933  0762  1283               	bcf	3,5	;RP0=0, select bank0
  3934  0763  1303               	bcf	3,6	;RP1=0, select bank0
  3935  0764  00BB               	movwf	waitFlag@flag_judge+1
  3936  0765  0870               	movf	?_getbit,w
  3937  0766  00BA               	movwf	waitFlag@flag_judge
  3938                           
  3939                           ;decode_AX25.c: 238: buf = buf >> 1;
  3940  0767  083C               	movf	waitFlag@buf,w
  3941  0768  00F6               	movwf	??_waitFlag
  3942  0769  1003               	clrc
  3943  076A  0C76               	rrf	??_waitFlag,w
  3944  076B  00F7               	movwf	??_waitFlag+1
  3945  076C  0877               	movf	??_waitFlag+1,w
  3946  076D  00BC               	movwf	waitFlag@buf
  3947                           
  3948                           ;decode_AX25.c: 240: buf = buf | 0x00;
  3949  076E  083A               	movf	waitFlag@flag_judge,w
  3950  076F  043B               	iorwf	waitFlag@flag_judge+1,w
  3951  0770  1903               	btfsc	3,2
  3952  0771  2F77               	goto	l2989
  3953                           
  3954                           ;decode_AX25.c: 242: buf = buf | 0x80;
  3955                           
  3956                           ;decode_AX25.c: 241: }else{
  3957  0772  083C               	movf	waitFlag@buf,w
  3958  0773  3880               	iorlw	128
  3959  0774  00F6               	movwf	??_waitFlag
  3960  0775  0876               	movf	??_waitFlag,w
  3961  0776  00BC               	movwf	waitFlag@buf
  3962  0777                     l2989:	
  3963  0777  3001               	movlw	1
  3964  0778  07B8               	addwf	waitFlag@j_135,f
  3965  0779  1803               	skipnc
  3966  077A  0AB9               	incf	waitFlag@j_135+1,f
  3967  077B  3000               	movlw	0
  3968  077C  07B9               	addwf	waitFlag@j_135+1,f
  3969  077D  3000               	movlw	0
  3970  077E  0239               	subwf	waitFlag@j_135+1,w
  3971  077F  3008               	movlw	8
  3972  0780  1903               	skipnz
  3973  0781  0238               	subwf	waitFlag@j_135,w
  3974  0782  1C03               	skipc
  3975  0783  2F5C               	goto	l2979
  3976  0784                     l2993:	
  3977                           
  3978                           ;decode_AX25.c: 243: }
  3979                           ;decode_AX25.c: 244: }
  3980                           ;decode_AX25.c: 245: if(buf == ("JQ1ZHX"[5] << 1)){
  3981  0784  3008               	movlw	low (((STR_7+5)-__stringbase)| (0+32768))
  3982  0785  0084               	movwf	4
  3983  0786  120A  158A  2000  120A  118A  	fcall	stringdir
  3984  078B  00F6               	movwf	??_waitFlag
  3985  078C  01F7               	clrf	??_waitFlag+1
  3986  078D  1003               	clrc
  3987  078E  0DF6               	rlf	??_waitFlag,f
  3988  078F  0DF7               	rlf	??_waitFlag+1,f
  3989  0790  083C               	movf	waitFlag@buf,w
  3990  0791  00F8               	movwf	??_waitFlag+2
  3991  0792  01F9               	clrf	??_waitFlag+3
  3992  0793  0877               	movf	??_waitFlag+1,w
  3993  0794  0679               	xorwf	??_waitFlag+3,w
  3994  0795  1D03               	skipz
  3995  0796  2F99               	goto	u2615
  3996  0797  0876               	movf	??_waitFlag,w
  3997  0798  0678               	xorwf	??_waitFlag+2,w
  3998  0799                     u2615:	
  3999  0799  1D03               	skipz
  4000  079A  2FB0               	goto	l3011
  4001                           
  4002                           ;decode_AX25.c: 246: dPacket[dPacketnum] = buf;
  4003  079B  083C               	movf	waitFlag@buf,w
  4004  079C  00F6               	movwf	??_waitFlag
  4005  079D  0868               	movf	_dPacketnum,w
  4006  079E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4007  079F  0084               	movwf	4
  4008  07A0  0876               	movf	??_waitFlag,w
  4009  07A1  1783               	bsf	3,7	;select IRP bank3
  4010  07A2  0080               	movwf	0
  4011                           
  4012                           ;decode_AX25.c: 247: dPacketnum ++;
  4013  07A3  3001               	movlw	1
  4014  07A4  07E8               	addwf	_dPacketnum,f
  4015  07A5  1803               	skipnc
  4016  07A6  0AE9               	incf	_dPacketnum+1,f
  4017  07A7  3000               	movlw	0
  4018  07A8  07E9               	addwf	_dPacketnum+1,f
  4019                           
  4020                           ;decode_AX25.c: 248: rcv_state ++;
  4021  07A9  3001               	movlw	1
  4022  07AA  07EA               	addwf	_rcv_state,f
  4023  07AB  1803               	skipnc
  4024  07AC  0AEB               	incf	_rcv_state+1,f
  4025  07AD  3000               	movlw	0
  4026  07AE  07EB               	addwf	_rcv_state+1,f
  4027                           
  4028                           ;decode_AX25.c: 249: }else{
  4029  07AF  2B2F               	goto	l3013
  4030  07B0                     l3011:	
  4031                           ;decode_AX25.c: 268: }
  4032                           ;decode_AX25.c: 269: }else{
  4033                           
  4034                           ;decode_AX25.c: 267: rcv_state = 0;
  4035                           
  4036                           ;decode_AX25.c: 266: dPacketnum = 0;
  4037                           
  4038                           ;decode_AX25.c: 264: }
  4039                           ;decode_AX25.c: 265: }else{
  4040                           
  4041                           ;decode_AX25.c: 263: rcv_state = 0;
  4042                           
  4043                           ;decode_AX25.c: 262: dPacketnum = 0;
  4044                           
  4045                           ;decode_AX25.c: 260: }
  4046                           ;decode_AX25.c: 261: }else{
  4047                           
  4048                           ;decode_AX25.c: 259: rcv_state = 0;
  4049                           
  4050                           ;decode_AX25.c: 258: dPacketnum = 0;
  4051                           
  4052                           ;decode_AX25.c: 256: }
  4053                           ;decode_AX25.c: 257: }else{
  4054                           
  4055                           ;decode_AX25.c: 255: rcv_state = 0;
  4056                           
  4057                           ;decode_AX25.c: 254: dPacketnum = 0;
  4058                           
  4059                           ;decode_AX25.c: 252: }
  4060                           ;decode_AX25.c: 253: }else{
  4061                           
  4062                           ;decode_AX25.c: 251: rcv_state = 0;
  4063                           
  4064                           ;decode_AX25.c: 250: dPacketnum = 0;
  4065                           
  4066                           
  4067                           ;decode_AX25.c: 270: dPacketnum = 0;
  4068  07B0  01E8               	clrf	_dPacketnum
  4069  07B1  01E9               	clrf	_dPacketnum+1
  4070  07B2  2B2D               	goto	L6
  4071  07B3                     __end_of_waitFlag:	
  4072                           
  4073                           	psect	text5
  4074  0BF8                     __ptext5:	
  4075 ;; *************** function _getdata *****************
  4076 ;; Defined at:
  4077 ;;		line 278 in file "decode_AX25.c"
  4078 ;; Parameters:    Size  Location     Type
  4079 ;;		None
  4080 ;; Auto vars:     Size  Location     Type
  4081 ;;  dbitstatus      2    4[BANK0 ] unsigned int 
  4082 ;;  dstuff          2    2[BANK0 ] unsigned int 
  4083 ;;  bufstore_cou    2    0[BANK0 ] unsigned int 
  4084 ;;  buf             1    6[BANK0 ] unsigned char 
  4085 ;;  dammy_data      1    0        unsigned char 
  4086 ;; Return value:  Size  Location     Type
  4087 ;;                  1    wreg      void 
  4088 ;; Registers used:
  4089 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4090 ;; Tracked objects:
  4091 ;;		On entry : 0/0
  4092 ;;		On exit  : 0/0
  4093 ;;		Unchanged: 0/0
  4094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4095 ;;      Params:         0       0       0       0       0
  4096 ;;      Locals:         0       7       0       0       0
  4097 ;;      Temps:          2       0       0       0       0
  4098 ;;      Totals:         2       7       0       0       0
  4099 ;;Total ram usage:        9 bytes
  4100 ;; Hardware stack levels used:    1
  4101 ;; Hardware stack levels required when called:    1
  4102 ;; This function calls:
  4103 ;;		_getbit
  4104 ;; This function is called by:
  4105 ;;		_ReceivePacket_data
  4106 ;;		_ReceivePacket
  4107 ;; This function uses a non-reentrant model
  4108 ;;
  4109                           
  4110                           
  4111                           ;psect for function _getdata
  4112  0BF8                     _getdata:	
  4113                           
  4114                           ;decode_AX25.c: 279: UBYTE buf = 0x00;
  4115                           
  4116                           ;incstack = 0
  4117                           ; Regs used in _getdata: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4118  0BF8  1283               	bcf	3,5	;RP0=0, select bank0
  4119  0BF9  1303               	bcf	3,6	;RP1=0, select bank0
  4120  0BFA  01A6               	clrf	getdata@buf
  4121                           
  4122                           ;decode_AX25.c: 280: UINT dstuff = 0;
  4123  0BFB  01A2               	clrf	getdata@dstuff
  4124  0BFC  01A3               	clrf	getdata@dstuff+1
  4125                           
  4126                           ;decode_AX25.c: 281: UBYTE dammy_data;
  4127                           ;decode_AX25.c: 282: UINT bufstore_counter = 0;
  4128  0BFD  01A0               	clrf	getdata@bufstore_counter
  4129  0BFE  01A1               	clrf	getdata@bufstore_counter+1
  4130                           
  4131                           ;decode_AX25.c: 283: UINT dbitstatus = 0;
  4132  0BFF  01A4               	clrf	getdata@dbitstatus
  4133  0C00  01A5               	clrf	getdata@dbitstatus+1
  4134  0C01                     l3047:	
  4135                           ;decode_AX25.c: 285: while(rcv_state == 2){
  4136                           
  4137  0C01  3002               	movlw	2
  4138  0C02  066A               	xorwf	_rcv_state,w
  4139  0C03  046B               	iorwf	_rcv_state+1,w
  4140  0C04  1D03               	btfss	3,2
  4141  0C05  0008               	return
  4142                           
  4143                           ;decode_AX25.c: 286: dbitstatus = getbit();
  4144  0C06  120A  158A  2298  120A  158A  	fcall	_getbit
  4145  0C0B  0871               	movf	?_getbit+1,w
  4146  0C0C  1283               	bcf	3,5	;RP0=0, select bank0
  4147  0C0D  1303               	bcf	3,6	;RP1=0, select bank0
  4148  0C0E  00A5               	movwf	getdata@dbitstatus+1
  4149  0C0F  0870               	movf	?_getbit,w
  4150  0C10  00A4               	movwf	getdata@dbitstatus
  4151                           
  4152                           ;decode_AX25.c: 287: if(dstuff == 5){
  4153  0C11  3005               	movlw	5
  4154  0C12  0622               	xorwf	getdata@dstuff,w
  4155  0C13  0423               	iorwf	getdata@dstuff+1,w
  4156  0C14  1D03               	btfss	3,2
  4157  0C15  2C24               	goto	l3029
  4158                           
  4159                           ;decode_AX25.c: 288: if(dbitstatus == 1){
  4160  0C16  0324               	decf	getdata@dbitstatus,w
  4161  0C17  0425               	iorwf	getdata@dbitstatus+1,w
  4162  0C18  1D03               	btfss	3,2
  4163  0C19  2C21               	goto	l3027
  4164                           
  4165                           ;decode_AX25.c: 289: rcv_state ++;
  4166  0C1A  3001               	movlw	1
  4167  0C1B  07EA               	addwf	_rcv_state,f
  4168  0C1C  1803               	skipnc
  4169  0C1D  0AEB               	incf	_rcv_state+1,f
  4170  0C1E  3000               	movlw	0
  4171  0C1F  07EB               	addwf	_rcv_state+1,f
  4172                           
  4173                           ;decode_AX25.c: 290: break;
  4174  0C20  0008               	return
  4175  0C21                     l3027:	
  4176                           ;decode_AX25.c: 291: }else{
  4177                           
  4178                           
  4179                           ;decode_AX25.c: 292: dstuff = 0;
  4180  0C21  01A2               	clrf	getdata@dstuff
  4181  0C22  01A3               	clrf	getdata@dstuff+1
  4182                           
  4183                           ;decode_AX25.c: 293: }
  4184                           ;decode_AX25.c: 294: }else{
  4185  0C23  2C01               	goto	l3047
  4186  0C24                     l3029:	
  4187                           
  4188                           ;decode_AX25.c: 295: buf = buf >> 1;
  4189  0C24  0826               	movf	getdata@buf,w
  4190  0C25  00F6               	movwf	??_getdata
  4191  0C26  1003               	clrc
  4192  0C27  0C76               	rrf	??_getdata,w
  4193  0C28  00F7               	movwf	??_getdata+1
  4194  0C29  0877               	movf	??_getdata+1,w
  4195  0C2A  00A6               	movwf	getdata@buf
  4196                           
  4197                           ;decode_AX25.c: 297: buf = buf | 0x00;
  4198  0C2B  0824               	movf	getdata@dbitstatus,w
  4199  0C2C  0425               	iorwf	getdata@dbitstatus+1,w
  4200  0C2D  1D03               	btfss	3,2
  4201  0C2E  2C32               	goto	l3033
  4202                           
  4203                           ;decode_AX25.c: 298: dstuff = 0;
  4204  0C2F  01A2               	clrf	getdata@dstuff
  4205  0C30  01A3               	clrf	getdata@dstuff+1
  4206                           
  4207                           ;decode_AX25.c: 299: }else{
  4208  0C31  2C3D               	goto	l3037
  4209  0C32                     l3033:	
  4210                           
  4211                           ;decode_AX25.c: 300: buf = buf | 0x80;
  4212  0C32  0826               	movf	getdata@buf,w
  4213  0C33  3880               	iorlw	128
  4214  0C34  00F6               	movwf	??_getdata
  4215  0C35  0876               	movf	??_getdata,w
  4216  0C36  00A6               	movwf	getdata@buf
  4217                           
  4218                           ;decode_AX25.c: 301: dstuff ++;
  4219  0C37  3001               	movlw	1
  4220  0C38  07A2               	addwf	getdata@dstuff,f
  4221  0C39  1803               	skipnc
  4222  0C3A  0AA3               	incf	getdata@dstuff+1,f
  4223  0C3B  3000               	movlw	0
  4224  0C3C  07A3               	addwf	getdata@dstuff+1,f
  4225  0C3D                     l3037:	
  4226                           
  4227                           ;decode_AX25.c: 302: }
  4228                           ;decode_AX25.c: 303: bufstore_counter ++;
  4229  0C3D  3001               	movlw	1
  4230  0C3E  07A0               	addwf	getdata@bufstore_counter,f
  4231  0C3F  1803               	skipnc
  4232  0C40  0AA1               	incf	getdata@bufstore_counter+1,f
  4233  0C41  3000               	movlw	0
  4234  0C42  07A1               	addwf	getdata@bufstore_counter+1,f
  4235                           
  4236                           ;decode_AX25.c: 304: if(bufstore_counter == 8){
  4237  0C43  3008               	movlw	8
  4238  0C44  0620               	xorwf	getdata@bufstore_counter,w
  4239  0C45  0421               	iorwf	getdata@bufstore_counter+1,w
  4240  0C46  1D03               	btfss	3,2
  4241  0C47  2C01               	goto	l3047
  4242                           
  4243                           ;decode_AX25.c: 305: bufstore_counter = 0;
  4244  0C48  01A0               	clrf	getdata@bufstore_counter
  4245  0C49  01A1               	clrf	getdata@bufstore_counter+1
  4246                           
  4247                           ;decode_AX25.c: 306: dPacket[dPacketnum] = buf;
  4248  0C4A  0826               	movf	getdata@buf,w
  4249  0C4B  00F6               	movwf	??_getdata
  4250  0C4C  0868               	movf	_dPacketnum,w
  4251  0C4D  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4252  0C4E  0084               	movwf	4
  4253  0C4F  0876               	movf	??_getdata,w
  4254  0C50  1783               	bsf	3,7	;select IRP bank3
  4255  0C51  0080               	movwf	0
  4256                           
  4257                           ;decode_AX25.c: 307: dPacketnum ++;
  4258  0C52  3001               	movlw	1
  4259  0C53  07E8               	addwf	_dPacketnum,f
  4260  0C54  1803               	skipnc
  4261  0C55  0AE9               	incf	_dPacketnum+1,f
  4262  0C56  3000               	movlw	0
  4263  0C57  07E9               	addwf	_dPacketnum+1,f
  4264  0C58  2C01               	goto	l3047
  4265  0C59                     __end_of_getdata:	
  4266                           
  4267                           	psect	text6
  4268  0A98                     __ptext6:	
  4269 ;; *************** function _getbit *****************
  4270 ;; Defined at:
  4271 ;;		line 40 in file "decode_AX25.c"
  4272 ;; Parameters:    Size  Location     Type
  4273 ;;		None
  4274 ;; Auto vars:     Size  Location     Type
  4275 ;;  i               2    4[COMMON] unsigned int 
  4276 ;; Return value:  Size  Location     Type
  4277 ;;                  2    0[COMMON] unsigned int 
  4278 ;; Registers used:
  4279 ;;		wreg, status,2, status,0
  4280 ;; Tracked objects:
  4281 ;;		On entry : 0/0
  4282 ;;		On exit  : 0/0
  4283 ;;		Unchanged: 0/0
  4284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4285 ;;      Params:         2       0       0       0       0
  4286 ;;      Locals:         2       0       0       0       0
  4287 ;;      Temps:          2       0       0       0       0
  4288 ;;      Totals:         6       0       0       0       0
  4289 ;;Total ram usage:        6 bytes
  4290 ;; Hardware stack levels used:    1
  4291 ;; This function calls:
  4292 ;;		Nothing
  4293 ;; This function is called by:
  4294 ;;		_waitFlag
  4295 ;;		_getdata
  4296 ;;		_conv_DI_UARTRX
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300                           
  4301                           ;psect for function _getbit
  4302  0A98                     _getbit:	
  4303                           
  4304                           ;decode_AX25.c: 41: static UINT oldbit;
  4305                           ;decode_AX25.c: 42: oldbit = RB5;
  4306                           
  4307                           ;incstack = 0
  4308                           ; Regs used in _getbit: [wreg+status,2+status,0]
  4309  0A98  1003               	clrc
  4310  0A99  1283               	bcf	3,5	;RP0=0, select bank0
  4311  0A9A  1303               	bcf	3,6	;RP1=0, select bank0
  4312  0A9B  1A86               	btfsc	6,5	;volatile
  4313  0A9C  1403               	setc
  4314  0A9D  3000               	movlw	0
  4315  0A9E  1803               	skipnc
  4316  0A9F  3001               	movlw	1
  4317  0AA0  00F2               	movwf	??_getbit
  4318  0AA1  01F3               	clrf	??_getbit+1
  4319  0AA2  0872               	movf	??_getbit,w
  4320  0AA3  1683               	bsf	3,5	;RP0=1, select bank1
  4321  0AA4  1303               	bcf	3,6	;RP1=0, select bank1
  4322  0AA5  00E6               	movwf	getbit@oldbit^(0+128)
  4323  0AA6  0873               	movf	??_getbit+1,w
  4324  0AA7  00E7               	movwf	(getbit@oldbit+1)^(0+128)
  4325                           
  4326                           ;decode_AX25.c: 43: for(UINT i=0;i<62;i++){
  4327  0AA8  01F4               	clrf	getbit@i
  4328  0AA9  01F5               	clrf	getbit@i+1
  4329  0AAA  3000               	movlw	0
  4330  0AAB  0275               	subwf	getbit@i+1,w
  4331  0AAC  303E               	movlw	62
  4332  0AAD  1903               	skipnz
  4333  0AAE  0274               	subwf	getbit@i,w
  4334  0AAF  1803               	btfsc	3,0
  4335  0AB0  2ADF               	goto	l2493
  4336                           
  4337                           ;decode_AX25.c: 44: if(RB5 != oldbit){
  4338  0AB1  1003               	clrc
  4339  0AB2                     L7:	
  4340  0AB2  1283               	bcf	3,5	;RP0=0, select bank0
  4341  0AB3  1A86               	btfsc	6,5	;volatile
  4342  0AB4  1403               	setc
  4343  0AB5  3000               	movlw	0
  4344  0AB6  1803               	skipnc
  4345  0AB7  3001               	movlw	1
  4346  0AB8  00F2               	movwf	??_getbit
  4347  0AB9  01F3               	clrf	??_getbit+1
  4348  0ABA  1683               	bsf	3,5	;RP0=1, select bank1
  4349  0ABB  1303               	bcf	3,6	;RP1=0, select bank1
  4350  0ABC  0867               	movf	(getbit@oldbit+1)^(0+128),w
  4351  0ABD  0673               	xorwf	??_getbit+1,w
  4352  0ABE  1D03               	skipz
  4353  0ABF  2AC2               	goto	u1845
  4354  0AC0  0866               	movf	getbit@oldbit^(0+128),w
  4355  0AC1  0672               	xorwf	??_getbit,w
  4356  0AC2                     u1845:	
  4357  0AC2  1903               	skipnz
  4358  0AC3  2AD2               	goto	l2491
  4359                           
  4360                           ;decode_AX25.c: 45: _delay((unsigned long)((400)*(10000000/4000000.0)));
  4361  0AC4  30C7               	movlw	199
  4362  0AC5  00F2               	movwf	??_getbit
  4363  0AC6                     u3657:	
  4364  0AC6  2AC7               	nop2
  4365  0AC7  0BF2               	decfsz	??_getbit,f
  4366  0AC8  2AC6               	goto	u3657
  4367  0AC9  2ACA               	nop2
  4368  0ACA  2ACB               	nop2
  4369                           
  4370                           ;decode_AX25.c: 46: RC2= 1- RC2;
  4371  0ACB  3004               	movlw	4
  4372  0ACC  1283               	bcf	3,5	;RP0=0, select bank0
  4373  0ACD  1303               	bcf	3,6	;RP1=0, select bank0
  4374  0ACE  0687               	xorwf	7,f
  4375                           
  4376                           ;decode_AX25.c: 47: return 0;
  4377  0ACF  01F0               	clrf	?_getbit
  4378  0AD0  01F1               	clrf	?_getbit+1
  4379  0AD1  0008               	return
  4380  0AD2                     l2491:	
  4381  0AD2  3001               	movlw	1
  4382  0AD3  07F4               	addwf	getbit@i,f
  4383  0AD4  1803               	skipnc
  4384  0AD5  0AF5               	incf	getbit@i+1,f
  4385  0AD6  3000               	movlw	0
  4386  0AD7  07F5               	addwf	getbit@i+1,f
  4387  0AD8  3000               	movlw	0
  4388  0AD9  0275               	subwf	getbit@i+1,w
  4389  0ADA  303E               	movlw	62
  4390  0ADB  1903               	skipnz
  4391  0ADC  0274               	subwf	getbit@i,w
  4392  0ADD  1C03               	skipc
  4393  0ADE  2AB2               	goto	L7
  4394  0ADF                     l2493:	
  4395                           
  4396                           ;decode_AX25.c: 48: }
  4397                           ;decode_AX25.c: 49: }
  4398                           ;decode_AX25.c: 50: return 1;
  4399  0ADF  3001               	movlw	1
  4400  0AE0  00F0               	movwf	?_getbit
  4401  0AE1  3000               	movlw	0
  4402  0AE2  00F1               	movwf	?_getbit+1
  4403  0AE3  0008               	return
  4404  0AE4                     __end_of_getbit:	
  4405                           
  4406                           	psect	text7
  4407  002A                     __ptext7:	
  4408 ;; *************** function _fcscheck *****************
  4409 ;; Defined at:
  4410 ;;		line 313 in file "decode_AX25.c"
  4411 ;; Parameters:    Size  Location     Type
  4412 ;;		None
  4413 ;; Auto vars:     Size  Location     Type
  4414 ;;  i               2    7[COMMON] unsigned int 
  4415 ;;  i               2    5[COMMON] unsigned int 
  4416 ;;  byte            1    9[COMMON] unsigned char 
  4417 ;;  bt              1    4[COMMON] unsigned char 
  4418 ;; Return value:  Size  Location     Type
  4419 ;;                  2    0[COMMON] unsigned int 
  4420 ;; Registers used:
  4421 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4422 ;; Tracked objects:
  4423 ;;		On entry : 0/0
  4424 ;;		On exit  : 0/0
  4425 ;;		Unchanged: 0/0
  4426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4427 ;;      Params:         2       0       0       0       0
  4428 ;;      Locals:         6       0       0       0       0
  4429 ;;      Temps:          2       0       0       0       0
  4430 ;;      Totals:        10       0       0       0       0
  4431 ;;Total ram usage:       10 bytes
  4432 ;; Hardware stack levels used:    1
  4433 ;; This function calls:
  4434 ;;		Nothing
  4435 ;; This function is called by:
  4436 ;;		_ReceivePacket_data
  4437 ;;		_ReceivePacket
  4438 ;; This function uses a non-reentrant model
  4439 ;;
  4440                           
  4441                           
  4442                           ;psect for function _fcscheck
  4443  002A                     _fcscheck:	
  4444                           
  4445                           ;decode_AX25.c: 314: UBYTE bt,byte;
  4446                           ;decode_AX25.c: 315: dfcslo = dfcshi = 0xff;
  4447                           
  4448                           ;incstack = 0
  4449                           ; Regs used in _fcscheck: [wreg-fsr0h+status,2+status,0]
  4450  002A  30FF               	movlw	255
  4451  002B  1283               	bcf	3,5	;RP0=0, select bank0
  4452  002C  1303               	bcf	3,6	;RP1=0, select bank0
  4453  002D  00EF               	movwf	_dfcshi
  4454  002E  00F2               	movwf	??_fcscheck
  4455  002F  0872               	movf	??_fcscheck,w
  4456  0030  00EE               	movwf	_dfcslo
  4457                           
  4458                           ;decode_AX25.c: 316: while(rcv_state == 3){
  4459  0031  3003               	movlw	3
  4460  0032  066A               	xorwf	_rcv_state,w
  4461  0033  046B               	iorwf	_rcv_state+1,w
  4462  0034  1D03               	btfss	3,2
  4463  0035  0008               	return
  4464                           
  4465                           ;decode_AX25.c: 317: for(UINT i=0;i<dPacketnum-2;i++){
  4466  0036  01F5               	clrf	fcscheck@i
  4467  0037  01F6               	clrf	fcscheck@i+1
  4468  0038                     l3075:	
  4469  0038  0868               	movf	_dPacketnum,w
  4470  0039  3EFE               	addlw	254
  4471  003A  00F2               	movwf	??_fcscheck
  4472  003B  0869               	movf	_dPacketnum+1,w
  4473  003C  1803               	skipnc
  4474  003D  3E01               	addlw	1
  4475  003E  3EFF               	addlw	255
  4476  003F  00F3               	movwf	??_fcscheck+1
  4477  0040  0873               	movf	??_fcscheck+1,w
  4478  0041  0276               	subwf	fcscheck@i+1,w
  4479  0042  1D03               	skipz
  4480  0043  2846               	goto	u2715
  4481  0044  0872               	movf	??_fcscheck,w
  4482  0045  0275               	subwf	fcscheck@i,w
  4483  0046                     u2715:	
  4484  0046  1803               	btfsc	3,0
  4485  0047  2891               	goto	l275
  4486                           
  4487                           ;decode_AX25.c: 318: byte = dPacket[i];
  4488  0048  0875               	movf	fcscheck@i,w
  4489  0049  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4490  004A  0084               	movwf	4
  4491  004B  1783               	bsf	3,7	;select IRP bank3
  4492  004C  0800               	movf	0,w
  4493  004D  00F2               	movwf	??_fcscheck
  4494  004E  0872               	movf	??_fcscheck,w
  4495  004F  00F9               	movwf	fcscheck@byte
  4496                           
  4497                           ;decode_AX25.c: 319: for(UINT i=0;i<8;i++){
  4498  0050  01F7               	clrf	fcscheck@i_147
  4499  0051  01F8               	clrf	fcscheck@i_147+1
  4500  0052  3000               	movlw	0
  4501  0053  0278               	subwf	fcscheck@i_147+1,w
  4502  0054  3008               	movlw	8
  4503  0055  1903               	skipnz
  4504  0056  0277               	subwf	fcscheck@i_147,w
  4505  0057  1803               	btfsc	3,0
  4506  0058  288A               	goto	l3073
  4507  0059                     l3061:	
  4508                           
  4509                           ;decode_AX25.c: 320: bt = byte & 0x01;
  4510  0059  0879               	movf	fcscheck@byte,w
  4511  005A  3901               	andlw	1
  4512  005B  00F2               	movwf	??_fcscheck
  4513  005C  0872               	movf	??_fcscheck,w
  4514  005D  00F4               	movwf	fcscheck@bt
  4515  005E  1003               	bcf	3,0	;# 
  4516  005F  0CEF               	rrf	_dfcshi,f	;# 
  4517  0060  0CEE               	rrf	_dfcslo,f	;# 
  4518                           
  4519                           ;decode_AX25.c: 326: if(((STATUS & 0x01)^bt) == 0x01){
  4520  0061  3001               	movlw	1
  4521  0062  1283               	bcf	3,5	;RP0=0, select bank0
  4522  0063  1303               	bcf	3,6	;RP1=0, select bank0
  4523  0064  0503               	andwf	3,w	;volatile
  4524  0065  00F2               	movwf	??_fcscheck
  4525  0066  0874               	movf	fcscheck@bt,w
  4526  0067  0672               	xorwf	??_fcscheck,w
  4527  0068  00F3               	movwf	??_fcscheck+1
  4528  0069  0373               	decf	??_fcscheck+1,w
  4529  006A  1D03               	btfss	3,2
  4530  006B  2876               	goto	l3067
  4531                           
  4532                           ;decode_AX25.c: 327: dfcshi = dfcshi ^ 0x84;
  4533  006C  086F               	movf	_dfcshi,w
  4534  006D  3A84               	xorlw	132
  4535  006E  00F2               	movwf	??_fcscheck
  4536  006F  0872               	movf	??_fcscheck,w
  4537  0070  00EF               	movwf	_dfcshi
  4538                           
  4539                           ;decode_AX25.c: 328: dfcslo = dfcslo ^ 0x08;
  4540  0071  086E               	movf	_dfcslo,w
  4541  0072  3A08               	xorlw	8
  4542  0073  00F2               	movwf	??_fcscheck
  4543  0074  0872               	movf	??_fcscheck,w
  4544  0075  00EE               	movwf	_dfcslo
  4545  0076                     l3067:	
  4546                           
  4547                           ;decode_AX25.c: 329: }
  4548                           ;decode_AX25.c: 330: byte = byte >> 1;
  4549  0076  0879               	movf	fcscheck@byte,w
  4550  0077  00F2               	movwf	??_fcscheck
  4551  0078  1003               	clrc
  4552  0079  0C72               	rrf	??_fcscheck,w
  4553  007A  00F3               	movwf	??_fcscheck+1
  4554  007B  0873               	movf	??_fcscheck+1,w
  4555  007C  00F9               	movwf	fcscheck@byte
  4556  007D  3001               	movlw	1
  4557  007E  07F7               	addwf	fcscheck@i_147,f
  4558  007F  1803               	skipnc
  4559  0080  0AF8               	incf	fcscheck@i_147+1,f
  4560  0081  3000               	movlw	0
  4561  0082  07F8               	addwf	fcscheck@i_147+1,f
  4562  0083  3000               	movlw	0
  4563  0084  0278               	subwf	fcscheck@i_147+1,w
  4564  0085  3008               	movlw	8
  4565  0086  1903               	skipnz
  4566  0087  0277               	subwf	fcscheck@i_147,w
  4567  0088  1C03               	skipc
  4568  0089  2859               	goto	l3061
  4569  008A                     l3073:	
  4570  008A  3001               	movlw	1
  4571  008B  07F5               	addwf	fcscheck@i,f
  4572  008C  1803               	skipnc
  4573  008D  0AF6               	incf	fcscheck@i+1,f
  4574  008E  3000               	movlw	0
  4575  008F  07F6               	addwf	fcscheck@i+1,f
  4576  0090  2838               	goto	l3075
  4577  0091                     l275:	
  4578                           
  4579                           ;decode_AX25.c: 331: }
  4580                           ;decode_AX25.c: 332: }
  4581                           ;decode_AX25.c: 333: dfcslo = dfcslo ^ 0xff;
  4582  0091  09EE               	comf	_dfcslo,f
  4583                           
  4584                           ;decode_AX25.c: 334: dfcshi = dfcshi ^ 0xff;
  4585  0092  09EF               	comf	_dfcshi,f
  4586                           
  4587                           ;decode_AX25.c: 337: if((dPacket[dPacketnum-2] == dfcslo) && (dPacket[dPacketnum-1] == d
      +                          fcshi)){
  4588  0093  0868               	movf	_dPacketnum,w
  4589  0094  3EFE               	addlw	254
  4590  0095  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4591  0096  0084               	movwf	4
  4592  0097  1783               	bsf	3,7	;select IRP bank3
  4593  0098  0800               	movf	0,w
  4594  0099  066E               	xorwf	_dfcslo,w
  4595  009A  1D03               	skipz
  4596  009B  28A9               	goto	l3087
  4597  009C  0868               	movf	_dPacketnum,w
  4598  009D  3EFF               	addlw	255
  4599  009E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4600  009F  0084               	movwf	4
  4601  00A0  0800               	movf	0,w
  4602  00A1  066F               	xorwf	_dfcshi,w
  4603  00A2  1D03               	skipz
  4604  00A3  28A9               	goto	l3087
  4605                           
  4606                           ;decode_AX25.c: 342: return 1;
  4607  00A4  3001               	movlw	1
  4608  00A5  00F0               	movwf	?_fcscheck
  4609  00A6  3000               	movlw	0
  4610  00A7  00F1               	movwf	?_fcscheck+1
  4611  00A8  0008               	return
  4612  00A9                     l3087:	
  4613                           ;decode_AX25.c: 343: }else{
  4614                           
  4615                           
  4616                           ;decode_AX25.c: 348: return 0;
  4617  00A9  01F0               	clrf	?_fcscheck
  4618  00AA  01F1               	clrf	?_fcscheck+1
  4619  00AB  0008               	return
  4620  00AC                     __end_of_fcscheck:	
  4621                           
  4622                           	psect	text8
  4623  0838                     __ptext8:	
  4624 ;; *************** function _NM_waddress *****************
  4625 ;; Defined at:
  4626 ;;		line 72 in file "UART.c"
  4627 ;; Parameters:    Size  Location     Type
  4628 ;;  NM_wad_heade    1    wreg     unsigned char 
  4629 ;;  whigh_addres    1    1[COMMON] unsigned char 
  4630 ;;  wlow_address    1    2[COMMON] unsigned char 
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;  NM_wad_heade    1    3[COMMON] unsigned char 
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  1    wreg      void 
  4635 ;; Registers used:
  4636 ;;		wreg, status,2, status,0, pclath, cstack
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4642 ;;      Params:         2       0       0       0       0
  4643 ;;      Locals:         1       0       0       0       0
  4644 ;;      Temps:          0       0       0       0       0
  4645 ;;      Totals:         3       0       0       0       0
  4646 ;;Total ram usage:        3 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    1
  4649 ;; This function calls:
  4650 ;;		_putch
  4651 ;; This function is called by:
  4652 ;;		_main
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           
  4657                           ;psect for function _NM_waddress
  4658  0838                     _NM_waddress:	
  4659                           
  4660                           ;incstack = 0
  4661                           ; Regs used in _NM_waddress: [wreg+status,2+status,0+pclath+cstack]
  4662                           ;NM_waddress@NM_wad_header stored from wreg
  4663  0838  00F3               	movwf	NM_waddress@NM_wad_header
  4664                           
  4665                           ;UART.c: 73: putch(NM_wad_header);
  4666  0839  0873               	movf	NM_waddress@NM_wad_header,w
  4667  083A  160A  118A  27F8  120A  158A  	fcall	_putch
  4668                           
  4669                           ;UART.c: 74: putch(whigh_address);
  4670  083F  0871               	movf	NM_waddress@whigh_address,w
  4671  0840  160A  118A  27F8  120A  158A  	fcall	_putch
  4672                           
  4673                           ;UART.c: 75: putch(wlow_address);
  4674  0845  0872               	movf	NM_waddress@wlow_address,w
  4675  0846  160A  118A  27F8   	fcall	_putch
  4676  0849  0008               	return
  4677  084A                     __end_of_NM_waddress:	
  4678                           
  4679                           	psect	text9
  4680  17F8                     __ptext9:	
  4681 ;; *************** function _putch *****************
  4682 ;; Defined at:
  4683 ;;		line 39 in file "UART.c"
  4684 ;; Parameters:    Size  Location     Type
  4685 ;;  byte            1    wreg     unsigned char 
  4686 ;; Auto vars:     Size  Location     Type
  4687 ;;  byte            1    0[COMMON] unsigned char 
  4688 ;; Return value:  Size  Location     Type
  4689 ;;                  1    wreg      void 
  4690 ;; Registers used:
  4691 ;;		wreg
  4692 ;; Tracked objects:
  4693 ;;		On entry : 0/0
  4694 ;;		On exit  : 0/0
  4695 ;;		Unchanged: 0/0
  4696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4697 ;;      Params:         0       0       0       0       0
  4698 ;;      Locals:         1       0       0       0       0
  4699 ;;      Temps:          0       0       0       0       0
  4700 ;;      Totals:         1       0       0       0       0
  4701 ;;Total ram usage:        1 bytes
  4702 ;; Hardware stack levels used:    1
  4703 ;; This function calls:
  4704 ;;		Nothing
  4705 ;; This function is called by:
  4706 ;;		_NM_waddress
  4707 ;;		_TXOBC_waddress
  4708 ;;		_putstr
  4709 ;;		_putcrlf
  4710 ;;		_put_error
  4711 ;;		_put_ok
  4712 ;;		_putAX25
  4713 ;;		_conv_DI_UARTRX
  4714 ;;		_test_Packetmaker
  4715 ;; This function uses a non-reentrant model
  4716 ;;
  4717                           
  4718                           
  4719                           ;psect for function _putch
  4720  17F8                     _putch:	
  4721                           
  4722                           ;incstack = 0
  4723                           ; Regs used in _putch: [wreg]
  4724                           ;putch@byte stored from wreg
  4725  17F8  00F0               	movwf	putch@byte
  4726  17F9                     l69:	
  4727                           ;UART.c: 40: while(!TXIF);
  4728                           
  4729  17F9  1283               	bcf	3,5	;RP0=0, select bank0
  4730  17FA  1303               	bcf	3,6	;RP1=0, select bank0
  4731  17FB  1E0C               	btfss	12,4	;volatile
  4732  17FC  2FF9               	goto	l69
  4733                           
  4734                           ;UART.c: 41: TXREG = byte;
  4735  17FD  0870               	movf	putch@byte,w
  4736  17FE  0099               	movwf	25	;volatile
  4737  17FF  0008               	return
  4738  1800                     __end_of_putch:	
  4739                           
  4740                           	psect	text10
  4741  0878                     __ptext10:	
  4742 ;; *************** function _Init_SERIAL *****************
  4743 ;; Defined at:
  4744 ;;		line 6 in file "UART.c"
  4745 ;; Parameters:    Size  Location     Type
  4746 ;;		None
  4747 ;; Auto vars:     Size  Location     Type
  4748 ;;		None
  4749 ;; Return value:  Size  Location     Type
  4750 ;;                  1    wreg      void 
  4751 ;; Registers used:
  4752 ;;		wreg
  4753 ;; Tracked objects:
  4754 ;;		On entry : 0/0
  4755 ;;		On exit  : 0/0
  4756 ;;		Unchanged: 0/0
  4757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4758 ;;      Params:         0       0       0       0       0
  4759 ;;      Locals:         0       0       0       0       0
  4760 ;;      Temps:          0       0       0       0       0
  4761 ;;      Totals:         0       0       0       0       0
  4762 ;;Total ram usage:        0 bytes
  4763 ;; Hardware stack levels used:    1
  4764 ;; This function calls:
  4765 ;;		Nothing
  4766 ;; This function is called by:
  4767 ;;		_main
  4768 ;; This function uses a non-reentrant model
  4769 ;;
  4770                           
  4771                           
  4772                           ;psect for function _Init_SERIAL
  4773  0878                     _Init_SERIAL:	
  4774                           
  4775                           ;UART.c: 7: SPBRG = 10;
  4776                           
  4777                           ;incstack = 0
  4778                           ; Regs used in _Init_SERIAL: [wreg]
  4779  0878  300A               	movlw	10
  4780  0879  1683               	bsf	3,5	;RP0=1, select bank1
  4781  087A  1303               	bcf	3,6	;RP1=0, select bank1
  4782  087B  0099               	movwf	25	;volatile
  4783                           
  4784                           ;UART.c: 8: BRGH = 0;
  4785  087C  1118               	bcf	24,2	;volatile
  4786                           
  4787                           ;UART.c: 9: SYNC = 0;
  4788  087D  1218               	bcf	24,4	;volatile
  4789                           
  4790                           ;UART.c: 10: SPEN = 1;
  4791  087E  1283               	bcf	3,5	;RP0=0, select bank0
  4792  087F  1303               	bcf	3,6	;RP1=0, select bank0
  4793  0880  1798               	bsf	24,7	;volatile
  4794                           
  4795                           ;UART.c: 11: CREN = 1;
  4796  0881  1618               	bsf	24,4	;volatile
  4797                           
  4798                           ;UART.c: 12: SREN = 0;
  4799  0882  1298               	bcf	24,5	;volatile
  4800                           
  4801                           ;UART.c: 13: RCIF = 0;
  4802  0883  128C               	bcf	12,5	;volatile
  4803                           
  4804                           ;UART.c: 14: TXIE = 0;
  4805  0884  1683               	bsf	3,5	;RP0=1, select bank1
  4806  0885  1303               	bcf	3,6	;RP1=0, select bank1
  4807  0886  120C               	bcf	12,4	;volatile
  4808                           
  4809                           ;UART.c: 15: RCIE = 1;
  4810  0887  168C               	bsf	12,5	;volatile
  4811                           
  4812                           ;UART.c: 16: TX9 = 0;
  4813  0888  1318               	bcf	24,6	;volatile
  4814                           
  4815                           ;UART.c: 17: RX9 = 0;
  4816  0889  1283               	bcf	3,5	;RP0=0, select bank0
  4817  088A  1303               	bcf	3,6	;RP1=0, select bank0
  4818  088B  1318               	bcf	24,6	;volatile
  4819                           
  4820                           ;UART.c: 18: TXEN = 0;
  4821  088C  1683               	bsf	3,5	;RP0=1, select bank1
  4822  088D  1303               	bcf	3,6	;RP1=0, select bank1
  4823  088E  1298               	bcf	24,5	;volatile
  4824                           
  4825                           ;UART.c: 19: TXEN = 1;
  4826  088F  1698               	bsf	24,5	;volatile
  4827  0890  0008               	return
  4828  0891                     __end_of_Init_SERIAL:	
  4829                           
  4830                           	psect	text11
  4831  085F                     __ptext11:	
  4832 ;; *************** function _Init_MPU *****************
  4833 ;; Defined at:
  4834 ;;		line 8 in file "Init_MPU.c"
  4835 ;; Parameters:    Size  Location     Type
  4836 ;;		None
  4837 ;; Auto vars:     Size  Location     Type
  4838 ;;		None
  4839 ;; Return value:  Size  Location     Type
  4840 ;;                  1    wreg      void 
  4841 ;; Registers used:
  4842 ;;		wreg, status,2
  4843 ;; Tracked objects:
  4844 ;;		On entry : 0/0
  4845 ;;		On exit  : 0/0
  4846 ;;		Unchanged: 0/0
  4847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4848 ;;      Params:         0       0       0       0       0
  4849 ;;      Locals:         0       0       0       0       0
  4850 ;;      Temps:          0       0       0       0       0
  4851 ;;      Totals:         0       0       0       0       0
  4852 ;;Total ram usage:        0 bytes
  4853 ;; Hardware stack levels used:    1
  4854 ;; This function calls:
  4855 ;;		Nothing
  4856 ;; This function is called by:
  4857 ;;		_main
  4858 ;; This function uses a non-reentrant model
  4859 ;;
  4860                           
  4861                           
  4862                           ;psect for function _Init_MPU
  4863  085F                     _Init_MPU:	
  4864                           
  4865                           ;Init_MPU.c: 11: PORTA = 0x00;
  4866                           
  4867                           ;incstack = 0
  4868                           ; Regs used in _Init_MPU: [wreg+status,2]
  4869  085F  1283               	bcf	3,5	;RP0=0, select bank0
  4870  0860  1303               	bcf	3,6	;RP1=0, select bank0
  4871  0861  0185               	clrf	5	;volatile
  4872                           
  4873                           ;Init_MPU.c: 12: PORTB = 0x00;
  4874  0862  0186               	clrf	6	;volatile
  4875                           
  4876                           ;Init_MPU.c: 13: PORTC = 0x00;
  4877  0863  0187               	clrf	7	;volatile
  4878                           
  4879                           ;Init_MPU.c: 14: PORTD = 0x00;
  4880  0864  0188               	clrf	8	;volatile
  4881                           
  4882                           ;Init_MPU.c: 15: PORTE = 0x00;
  4883  0865  0189               	clrf	9	;volatile
  4884                           
  4885                           ;Init_MPU.c: 23: TRISA = 0b10000000;
  4886  0866  3080               	movlw	128
  4887  0867  1683               	bsf	3,5	;RP0=1, select bank1
  4888  0868  1303               	bcf	3,6	;RP1=0, select bank1
  4889  0869  0085               	movwf	5	;volatile
  4890                           
  4891                           ;Init_MPU.c: 24: TRISB = 0b00100000;
  4892  086A  3020               	movlw	32
  4893  086B  0086               	movwf	6	;volatile
  4894                           
  4895                           ;Init_MPU.c: 25: TRISC = 0b10011000;
  4896  086C  3098               	movlw	152
  4897  086D  0087               	movwf	7	;volatile
  4898                           
  4899                           ;Init_MPU.c: 26: TRISD = 0b00000000;
  4900  086E  0188               	clrf	8	;volatile
  4901                           
  4902                           ;Init_MPU.c: 27: TRISE = 0b00000000;
  4903  086F  0189               	clrf	9	;volatile
  4904                           
  4905                           ;Init_MPU.c: 30: PORTA = 0x00;
  4906  0870  1283               	bcf	3,5	;RP0=0, select bank0
  4907  0871  1303               	bcf	3,6	;RP1=0, select bank0
  4908  0872  0185               	clrf	5	;volatile
  4909                           
  4910                           ;Init_MPU.c: 31: PORTB = 0x00;
  4911  0873  0186               	clrf	6	;volatile
  4912                           
  4913                           ;Init_MPU.c: 32: PORTC = 0x00;
  4914  0874  0187               	clrf	7	;volatile
  4915                           
  4916                           ;Init_MPU.c: 33: PORTD = 0x00;
  4917  0875  0188               	clrf	8	;volatile
  4918                           
  4919                           ;Init_MPU.c: 34: PORTE = 0x00;
  4920  0876  0189               	clrf	9	;volatile
  4921  0877  0008               	return
  4922  0878                     __end_of_Init_MPU:	
  4923                           
  4924                           	psect	text12
  4925  099E                     __ptext12:	
  4926 ;; *************** function _Init_I2C_M *****************
  4927 ;; Defined at:
  4928 ;;		line 8 in file "I2C.c"
  4929 ;; Parameters:    Size  Location     Type
  4930 ;;  c               4    0[BANK0 ] const unsigned long 
  4931 ;; Auto vars:     Size  Location     Type
  4932 ;;		None
  4933 ;; Return value:  Size  Location     Type
  4934 ;;                  1    wreg      void 
  4935 ;; Registers used:
  4936 ;;		wreg, status,2, status,0, pclath, cstack
  4937 ;; Tracked objects:
  4938 ;;		On entry : 0/0
  4939 ;;		On exit  : 0/0
  4940 ;;		Unchanged: 0/0
  4941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4942 ;;      Params:         0       4       0       0       0
  4943 ;;      Locals:         0       0       0       0       0
  4944 ;;      Temps:          0       4       0       0       0
  4945 ;;      Totals:         0       8       0       0       0
  4946 ;;Total ram usage:        8 bytes
  4947 ;; Hardware stack levels used:    1
  4948 ;; Hardware stack levels required when called:    1
  4949 ;; This function calls:
  4950 ;;		___lldiv
  4951 ;; This function is called by:
  4952 ;;		_main
  4953 ;; This function uses a non-reentrant model
  4954 ;;
  4955                           
  4956                           
  4957                           ;psect for function _Init_I2C_M
  4958  099E                     _Init_I2C_M:	
  4959                           
  4960                           ;I2C.c: 9: SSPCON = 0b00101000;
  4961                           
  4962                           ;incstack = 0
  4963                           ; Regs used in _Init_I2C_M: [wreg+status,2+status,0+pclath+cstack]
  4964  099E  3028               	movlw	40
  4965  099F  1283               	bcf	3,5	;RP0=0, select bank0
  4966  09A0  1303               	bcf	3,6	;RP1=0, select bank0
  4967  09A1  0094               	movwf	20	;volatile
  4968                           
  4969                           ;I2C.c: 10: SSPCON2 = 0;
  4970  09A2  1683               	bsf	3,5	;RP0=1, select bank1
  4971  09A3  1303               	bcf	3,6	;RP1=0, select bank1
  4972  09A4  0191               	clrf	17	;volatile
  4973                           
  4974                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  4975  09A5  1283               	bcf	3,5	;RP0=0, select bank0
  4976  09A6  1303               	bcf	3,6	;RP1=0, select bank0
  4977  09A7  0820               	movf	Init_I2C_M@c,w
  4978  09A8  00A4               	movwf	??_Init_I2C_M
  4979  09A9  0821               	movf	Init_I2C_M@c+1,w
  4980  09AA  00A5               	movwf	??_Init_I2C_M+1
  4981  09AB  0822               	movf	Init_I2C_M@c+2,w
  4982  09AC  00A6               	movwf	??_Init_I2C_M+2
  4983  09AD  0823               	movf	Init_I2C_M@c+3,w
  4984  09AE  00A7               	movwf	??_Init_I2C_M+3
  4985  09AF  3002               	movlw	2
  4986  09B0                     u3135:	
  4987  09B0  1003               	clrc
  4988  09B1  0DA4               	rlf	??_Init_I2C_M,f
  4989  09B2  0DA5               	rlf	??_Init_I2C_M+1,f
  4990  09B3  0DA6               	rlf	??_Init_I2C_M+2,f
  4991  09B4  0DA7               	rlf	??_Init_I2C_M+3,f
  4992  09B5  3EFF               	addlw	-1
  4993  09B6  1D03               	skipz
  4994  09B7  29B0               	goto	u3135
  4995  09B8  0827               	movf	??_Init_I2C_M+3,w
  4996  09B9  00F3               	movwf	___lldiv@divisor+3
  4997  09BA  0826               	movf	??_Init_I2C_M+2,w
  4998  09BB  00F2               	movwf	___lldiv@divisor+2
  4999  09BC  0825               	movf	??_Init_I2C_M+1,w
  5000  09BD  00F1               	movwf	___lldiv@divisor+1
  5001  09BE  0824               	movf	??_Init_I2C_M,w
  5002  09BF  00F0               	movwf	___lldiv@divisor
  5003  09C0  3000               	movlw	0
  5004  09C1  00F7               	movwf	___lldiv@dividend+3
  5005  09C2  3098               	movlw	152
  5006  09C3  00F6               	movwf	___lldiv@dividend+2
  5007  09C4  3096               	movlw	150
  5008  09C5  00F5               	movwf	___lldiv@dividend+1
  5009  09C6  3080               	movlw	128
  5010  09C7  00F4               	movwf	___lldiv@dividend
  5011  09C8  120A  158A  239A   	fcall	___lldiv
  5012  09CB  0870               	movf	?___lldiv,w
  5013  09CC  3EFF               	addlw	255
  5014  09CD  1683               	bsf	3,5	;RP0=1, select bank1
  5015  09CE  1303               	bcf	3,6	;RP1=0, select bank1
  5016  09CF  0093               	movwf	19	;volatile
  5017                           
  5018                           ;I2C.c: 12: SSPSTAT = 0;
  5019  09D0  0194               	clrf	20	;volatile
  5020  09D1  0008               	return
  5021  09D2                     __end_of_Init_I2C_M:	
  5022                           
  5023                           	psect	text13
  5024  0B9A                     __ptext13:	
  5025 ;; *************** function ___lldiv *****************
  5026 ;; Defined at:
  5027 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5028 ;; Parameters:    Size  Location     Type
  5029 ;;  divisor         4    0[COMMON] unsigned long 
  5030 ;;  dividend        4    4[COMMON] unsigned long 
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;  quotient        4    9[COMMON] unsigned long 
  5033 ;;  counter         1   13[COMMON] unsigned char 
  5034 ;; Return value:  Size  Location     Type
  5035 ;;                  4    0[COMMON] unsigned long 
  5036 ;; Registers used:
  5037 ;;		wreg, status,2, status,0
  5038 ;; Tracked objects:
  5039 ;;		On entry : 0/0
  5040 ;;		On exit  : 0/0
  5041 ;;		Unchanged: 0/0
  5042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5043 ;;      Params:         8       0       0       0       0
  5044 ;;      Locals:         5       0       0       0       0
  5045 ;;      Temps:          1       0       0       0       0
  5046 ;;      Totals:        14       0       0       0       0
  5047 ;;Total ram usage:       14 bytes
  5048 ;; Hardware stack levels used:    1
  5049 ;; This function calls:
  5050 ;;		Nothing
  5051 ;; This function is called by:
  5052 ;;		_Init_I2C_M
  5053 ;; This function uses a non-reentrant model
  5054 ;;
  5055                           
  5056                           
  5057                           ;psect for function ___lldiv
  5058  0B9A                     ___lldiv:	
  5059                           
  5060                           ;incstack = 0
  5061                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5062  0B9A  3000               	movlw	0
  5063  0B9B  00FC               	movwf	___lldiv@quotient+3
  5064  0B9C  3000               	movlw	0
  5065  0B9D  00FB               	movwf	___lldiv@quotient+2
  5066  0B9E  3000               	movlw	0
  5067  0B9F  00FA               	movwf	___lldiv@quotient+1
  5068  0BA0  3000               	movlw	0
  5069  0BA1  00F9               	movwf	___lldiv@quotient
  5070  0BA2  0873               	movf	___lldiv@divisor+3,w
  5071  0BA3  0472               	iorwf	___lldiv@divisor+2,w
  5072  0BA4  0471               	iorwf	___lldiv@divisor+1,w
  5073  0BA5  0470               	iorwf	___lldiv@divisor,w
  5074  0BA6  1903               	skipnz
  5075  0BA7  2BEF               	goto	l3251
  5076  0BA8  01FD               	clrf	___lldiv@counter
  5077  0BA9  0AFD               	incf	___lldiv@counter,f
  5078  0BAA                     l3237:	
  5079  0BAA  1BF3               	btfsc	___lldiv@divisor+3,7
  5080  0BAB  2BBA               	goto	l3239
  5081  0BAC  3001               	movlw	1
  5082  0BAD  00F8               	movwf	??___lldiv
  5083  0BAE                     u2985:	
  5084  0BAE  1003               	clrc
  5085  0BAF  0DF0               	rlf	___lldiv@divisor,f
  5086  0BB0  0DF1               	rlf	___lldiv@divisor+1,f
  5087  0BB1  0DF2               	rlf	___lldiv@divisor+2,f
  5088  0BB2  0DF3               	rlf	___lldiv@divisor+3,f
  5089  0BB3  0BF8               	decfsz	??___lldiv,f
  5090  0BB4  2BAE               	goto	u2985
  5091  0BB5  3001               	movlw	1
  5092  0BB6  00F8               	movwf	??___lldiv
  5093  0BB7  0878               	movf	??___lldiv,w
  5094  0BB8  07FD               	addwf	___lldiv@counter,f
  5095  0BB9  2BAA               	goto	l3237
  5096  0BBA                     l3239:	
  5097  0BBA  3001               	movlw	1
  5098  0BBB  00F8               	movwf	??___lldiv
  5099  0BBC                     u3005:	
  5100  0BBC  1003               	clrc
  5101  0BBD  0DF9               	rlf	___lldiv@quotient,f
  5102  0BBE  0DFA               	rlf	___lldiv@quotient+1,f
  5103  0BBF  0DFB               	rlf	___lldiv@quotient+2,f
  5104  0BC0  0DFC               	rlf	___lldiv@quotient+3,f
  5105  0BC1  0BF8               	decfsz	??___lldiv,f
  5106  0BC2  2BBC               	goto	u3005
  5107  0BC3  0873               	movf	___lldiv@divisor+3,w
  5108  0BC4  0277               	subwf	___lldiv@dividend+3,w
  5109  0BC5  1D03               	skipz
  5110  0BC6  2BD1               	goto	u3015
  5111  0BC7  0872               	movf	___lldiv@divisor+2,w
  5112  0BC8  0276               	subwf	___lldiv@dividend+2,w
  5113  0BC9  1D03               	skipz
  5114  0BCA  2BD1               	goto	u3015
  5115  0BCB  0871               	movf	___lldiv@divisor+1,w
  5116  0BCC  0275               	subwf	___lldiv@dividend+1,w
  5117  0BCD  1D03               	skipz
  5118  0BCE  2BD1               	goto	u3015
  5119  0BCF  0870               	movf	___lldiv@divisor,w
  5120  0BD0  0274               	subwf	___lldiv@dividend,w
  5121  0BD1                     u3015:	
  5122  0BD1  1C03               	skipc
  5123  0BD2  2BE2               	goto	l3247
  5124  0BD3  0870               	movf	___lldiv@divisor,w
  5125  0BD4  02F4               	subwf	___lldiv@dividend,f
  5126  0BD5  0871               	movf	___lldiv@divisor+1,w
  5127  0BD6  1C03               	skipc
  5128  0BD7  0F71               	incfsz	___lldiv@divisor+1,w
  5129  0BD8  02F5               	subwf	___lldiv@dividend+1,f
  5130  0BD9  0872               	movf	___lldiv@divisor+2,w
  5131  0BDA  1C03               	skipc
  5132  0BDB  0F72               	incfsz	___lldiv@divisor+2,w
  5133  0BDC  02F6               	subwf	___lldiv@dividend+2,f
  5134  0BDD  0873               	movf	___lldiv@divisor+3,w
  5135  0BDE  1C03               	skipc
  5136  0BDF  0F73               	incfsz	___lldiv@divisor+3,w
  5137  0BE0  02F7               	subwf	___lldiv@dividend+3,f
  5138  0BE1  1479               	bsf	___lldiv@quotient,0
  5139  0BE2                     l3247:	
  5140  0BE2  3001               	movlw	1
  5141  0BE3                     u3025:	
  5142  0BE3  1003               	clrc
  5143  0BE4  0CF3               	rrf	___lldiv@divisor+3,f
  5144  0BE5  0CF2               	rrf	___lldiv@divisor+2,f
  5145  0BE6  0CF1               	rrf	___lldiv@divisor+1,f
  5146  0BE7  0CF0               	rrf	___lldiv@divisor,f
  5147  0BE8  3EFF               	addlw	-1
  5148  0BE9  1D03               	skipz
  5149  0BEA  2BE3               	goto	u3025
  5150  0BEB  3001               	movlw	1
  5151  0BEC  02FD               	subwf	___lldiv@counter,f
  5152  0BED  1D03               	btfss	3,2
  5153  0BEE  2BBA               	goto	l3239
  5154  0BEF                     l3251:	
  5155  0BEF  087C               	movf	___lldiv@quotient+3,w
  5156  0BF0  00F3               	movwf	?___lldiv+3
  5157  0BF1  087B               	movf	___lldiv@quotient+2,w
  5158  0BF2  00F2               	movwf	?___lldiv+2
  5159  0BF3  087A               	movf	___lldiv@quotient+1,w
  5160  0BF4  00F1               	movwf	?___lldiv+1
  5161  0BF5  0879               	movf	___lldiv@quotient,w
  5162  0BF6  00F0               	movwf	?___lldiv
  5163  0BF7  0008               	return
  5164  0BF8                     __end_of___lldiv:	
  5165                           
  5166                           	psect	text14
  5167  0944                     __ptext14:	
  5168 ;; *************** function _FMTX *****************
  5169 ;; Defined at:
  5170 ;;		line 270 in file "FMCW.c"
  5171 ;; Parameters:    Size  Location     Type
  5172 ;;  Nref            2   60[BANK0 ] int 
  5173 ;;  Nprg            2   62[BANK0 ] PTR int 
  5174 ;;		 -> RAM(512), main@FMTX_Nprg(10), FMTX_Nprg(10), 
  5175 ;; Auto vars:     Size  Location     Type
  5176 ;;  fmtx            2   64[BANK0 ] int 
  5177 ;; Return value:  Size  Location     Type
  5178 ;;                  1    wreg      void 
  5179 ;; Registers used:
  5180 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5181 ;; Tracked objects:
  5182 ;;		On entry : 0/0
  5183 ;;		On exit  : 0/0
  5184 ;;		Unchanged: 0/0
  5185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5186 ;;      Params:         0       4       0       0       0
  5187 ;;      Locals:         0       2       0       0       0
  5188 ;;      Temps:          0       0       0       0       0
  5189 ;;      Totals:         0       6       0       0       0
  5190 ;;Total ram usage:        6 bytes
  5191 ;; Hardware stack levels used:    1
  5192 ;; Hardware stack levels required when called:    3
  5193 ;; This function calls:
  5194 ;;		_OPINIT
  5195 ;;		_OUTFQ
  5196 ;;		_RFDOUT
  5197 ;; This function is called by:
  5198 ;;		_main
  5199 ;;		_SetPLL
  5200 ;; This function uses a non-reentrant model
  5201 ;;
  5202                           
  5203                           
  5204                           ;psect for function _FMTX
  5205  0944                     _FMTX:	
  5206                           
  5207                           ;FMCW.c: 271: int fmtx = 1;
  5208                           
  5209                           ;incstack = 0
  5210                           ; Regs used in _FMTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5211  0944  3001               	movlw	1
  5212  0945  1283               	bcf	3,5	;RP0=0, select bank0
  5213  0946  1303               	bcf	3,6	;RP1=0, select bank0
  5214  0947  00E0               	movwf	FMTX@fmtx
  5215  0948  3000               	movlw	0
  5216  0949  00E1               	movwf	FMTX@fmtx+1
  5217                           
  5218                           ;FMCW.c: 272: OPINIT(fmtx);
  5219  094A  0861               	movf	FMTX@fmtx+1,w
  5220  094B  00F5               	movwf	OPINIT@fmcwtxrx+1
  5221  094C  0860               	movf	FMTX@fmtx,w
  5222  094D  00F4               	movwf	OPINIT@fmcwtxrx
  5223  094E  120A  158A  24BE  120A  158A  	fcall	_OPINIT
  5224                           
  5225                           ;FMCW.c: 273: RFDOUT(fmtx, Nref);
  5226  0953  1283               	bcf	3,5	;RP0=0, select bank0
  5227  0954  1303               	bcf	3,6	;RP1=0, select bank0
  5228  0955  0861               	movf	FMTX@fmtx+1,w
  5229  0956  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5230  0957  0860               	movf	FMTX@fmtx,w
  5231  0958  00F9               	movwf	RFDOUT@fmcwtxrx
  5232  0959  085D               	movf	FMTX@Nref+1,w
  5233  095A  00FC               	movwf	RFDOUT@Nref+1
  5234  095B  085C               	movf	FMTX@Nref,w
  5235  095C  00FB               	movwf	RFDOUT@Nref
  5236  095D  120A  158A  253B  120A  158A  	fcall	_RFDOUT
  5237                           
  5238                           ;FMCW.c: 274: OUTFQ(fmtx, Nprg);
  5239  0962  1283               	bcf	3,5	;RP0=0, select bank0
  5240  0963  1303               	bcf	3,6	;RP1=0, select bank0
  5241  0964  0861               	movf	FMTX@fmtx+1,w
  5242  0965  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5243  0966  0860               	movf	FMTX@fmtx,w
  5244  0967  00F9               	movwf	OUTFQ@fmcwtxrx
  5245  0968  085E               	movf	FMTX@Nprg,w
  5246  0969  00FB               	movwf	OUTFQ@Nprg
  5247  096A  085F               	movf	FMTX@Nprg+1,w
  5248  096B  00FC               	movwf	OUTFQ@Nprg+1
  5249  096C  120A  118A  20AC   	fcall	_OUTFQ
  5250  096F  0008               	return
  5251  0970                     __end_of_FMTX:	
  5252                           
  5253                           	psect	text15
  5254  0918                     __ptext15:	
  5255 ;; *************** function _FMRX *****************
  5256 ;; Defined at:
  5257 ;;		line 298 in file "FMCW.c"
  5258 ;; Parameters:    Size  Location     Type
  5259 ;;  Nref            2   60[BANK0 ] int 
  5260 ;;  Nprg            2   62[BANK0 ] PTR int 
  5261 ;;		 -> RAM(512), main@FMRX_Nprg(10), FMRX_Nprg(10), 
  5262 ;; Auto vars:     Size  Location     Type
  5263 ;;  fmrx            2   64[BANK0 ] int 
  5264 ;; Return value:  Size  Location     Type
  5265 ;;                  1    wreg      void 
  5266 ;; Registers used:
  5267 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5268 ;; Tracked objects:
  5269 ;;		On entry : 0/0
  5270 ;;		On exit  : 0/0
  5271 ;;		Unchanged: 0/0
  5272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5273 ;;      Params:         0       4       0       0       0
  5274 ;;      Locals:         0       2       0       0       0
  5275 ;;      Temps:          0       0       0       0       0
  5276 ;;      Totals:         0       6       0       0       0
  5277 ;;Total ram usage:        6 bytes
  5278 ;; Hardware stack levels used:    1
  5279 ;; Hardware stack levels required when called:    3
  5280 ;; This function calls:
  5281 ;;		_OPINIT
  5282 ;;		_OUTFQ
  5283 ;;		_RFDOUT
  5284 ;; This function is called by:
  5285 ;;		_main
  5286 ;;		_SetPLL
  5287 ;; This function uses a non-reentrant model
  5288 ;;
  5289                           
  5290                           
  5291                           ;psect for function _FMRX
  5292  0918                     _FMRX:	
  5293                           
  5294                           ;FMCW.c: 299: int fmrx = 3;
  5295                           
  5296                           ;incstack = 0
  5297                           ; Regs used in _FMRX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5298  0918  3003               	movlw	3
  5299  0919  1283               	bcf	3,5	;RP0=0, select bank0
  5300  091A  1303               	bcf	3,6	;RP1=0, select bank0
  5301  091B  00E0               	movwf	FMRX@fmrx
  5302  091C  3000               	movlw	0
  5303  091D  00E1               	movwf	FMRX@fmrx+1
  5304                           
  5305                           ;FMCW.c: 300: OPINIT(fmrx);
  5306  091E  0861               	movf	FMRX@fmrx+1,w
  5307  091F  00F5               	movwf	OPINIT@fmcwtxrx+1
  5308  0920  0860               	movf	FMRX@fmrx,w
  5309  0921  00F4               	movwf	OPINIT@fmcwtxrx
  5310  0922  120A  158A  24BE  120A  158A  	fcall	_OPINIT
  5311                           
  5312                           ;FMCW.c: 301: RFDOUT(fmrx, Nref);
  5313  0927  1283               	bcf	3,5	;RP0=0, select bank0
  5314  0928  1303               	bcf	3,6	;RP1=0, select bank0
  5315  0929  0861               	movf	FMRX@fmrx+1,w
  5316  092A  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5317  092B  0860               	movf	FMRX@fmrx,w
  5318  092C  00F9               	movwf	RFDOUT@fmcwtxrx
  5319  092D  085D               	movf	FMRX@Nref+1,w
  5320  092E  00FC               	movwf	RFDOUT@Nref+1
  5321  092F  085C               	movf	FMRX@Nref,w
  5322  0930  00FB               	movwf	RFDOUT@Nref
  5323  0931  120A  158A  253B  120A  158A  	fcall	_RFDOUT
  5324                           
  5325                           ;FMCW.c: 302: OUTFQ(fmrx, Nprg);
  5326  0936  1283               	bcf	3,5	;RP0=0, select bank0
  5327  0937  1303               	bcf	3,6	;RP1=0, select bank0
  5328  0938  0861               	movf	FMRX@fmrx+1,w
  5329  0939  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5330  093A  0860               	movf	FMRX@fmrx,w
  5331  093B  00F9               	movwf	OUTFQ@fmcwtxrx
  5332  093C  085E               	movf	FMRX@Nprg,w
  5333  093D  00FB               	movwf	OUTFQ@Nprg
  5334  093E  085F               	movf	FMRX@Nprg+1,w
  5335  093F  00FC               	movwf	OUTFQ@Nprg+1
  5336  0940  120A  118A  20AC   	fcall	_OUTFQ
  5337  0943  0008               	return
  5338  0944                     __end_of_FMRX:	
  5339                           
  5340                           	psect	text16
  5341  0B3D                     __ptext16:	
  5342 ;; *************** function _EEPROM_Write *****************
  5343 ;; Defined at:
  5344 ;;		line 51 in file "I2C.c"
  5345 ;; Parameters:    Size  Location     Type
  5346 ;;  EEPROM_addre    1    wreg     unsigned char 
  5347 ;;  high_address    1    2[COMMON] unsigned char 
  5348 ;;  low_address     1    3[COMMON] unsigned char 
  5349 ;;  data            1    4[COMMON] PTR unsigned char 
  5350 ;;		 -> NULL(0), dData(32), 
  5351 ;; Auto vars:     Size  Location     Type
  5352 ;;  EEPROM_addre    1    8[COMMON] unsigned char 
  5353 ;;  Address         1    9[COMMON] unsigned char 
  5354 ;; Return value:  Size  Location     Type
  5355 ;;                  1    wreg      void 
  5356 ;; Registers used:
  5357 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5358 ;; Tracked objects:
  5359 ;;		On entry : 0/0
  5360 ;;		On exit  : 0/0
  5361 ;;		Unchanged: 0/0
  5362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5363 ;;      Params:         3       0       0       0       0
  5364 ;;      Locals:         2       0       0       0       0
  5365 ;;      Temps:          3       0       0       0       0
  5366 ;;      Totals:         8       0       0       0       0
  5367 ;;Total ram usage:        8 bytes
  5368 ;; Hardware stack levels used:    1
  5369 ;; Hardware stack levels required when called:    2
  5370 ;; This function calls:
  5371 ;;		_I2C_Master_Start
  5372 ;;		_I2C_Master_Stop
  5373 ;;		_I2C_Master_Write
  5374 ;; This function is called by:
  5375 ;;		_main
  5376 ;; This function uses a non-reentrant model
  5377 ;;
  5378                           
  5379                           
  5380                           ;psect for function _EEPROM_Write
  5381  0B3D                     _EEPROM_Write:	
  5382                           
  5383                           ;incstack = 0
  5384                           ; Regs used in _EEPROM_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5385                           ;EEPROM_Write@EEPROM_address stored from wreg
  5386  0B3D  00F8               	movwf	EEPROM_Write@EEPROM_address
  5387                           
  5388                           ;I2C.c: 52: UBYTE Address = EEPROM_address << 1;
  5389  0B3E  0878               	movf	EEPROM_Write@EEPROM_address,w
  5390  0B3F  00F5               	movwf	??_EEPROM_Write
  5391  0B40  0775               	addwf	??_EEPROM_Write,w
  5392  0B41  00F6               	movwf	??_EEPROM_Write+1
  5393  0B42  0876               	movf	??_EEPROM_Write+1,w
  5394  0B43  00F9               	movwf	EEPROM_Write@Address
  5395                           
  5396                           ;I2C.c: 55: I2C_Master_Start();
  5397  0B44  160A  118A  27E2  120A  158A  	fcall	_I2C_Master_Start
  5398                           
  5399                           ;I2C.c: 56: I2C_Master_Write(Address);
  5400  0B49  0879               	movf	EEPROM_Write@Address,w
  5401  0B4A  00F5               	movwf	??_EEPROM_Write
  5402  0B4B  01F6               	clrf	??_EEPROM_Write+1
  5403  0B4C  0875               	movf	??_EEPROM_Write,w
  5404  0B4D  00F0               	movwf	I2C_Master_Write@d
  5405  0B4E  0876               	movf	??_EEPROM_Write+1,w
  5406  0B4F  00F1               	movwf	I2C_Master_Write@d+1
  5407  0B50  160A  118A  27F0  120A  158A  	fcall	_I2C_Master_Write
  5408                           
  5409                           ;I2C.c: 57: I2C_Master_Write(high_address);
  5410  0B55  0872               	movf	EEPROM_Write@high_address,w
  5411  0B56  00F5               	movwf	??_EEPROM_Write
  5412  0B57  01F6               	clrf	??_EEPROM_Write+1
  5413  0B58  0875               	movf	??_EEPROM_Write,w
  5414  0B59  00F0               	movwf	I2C_Master_Write@d
  5415  0B5A  0876               	movf	??_EEPROM_Write+1,w
  5416  0B5B  00F1               	movwf	I2C_Master_Write@d+1
  5417  0B5C  160A  118A  27F0  120A  158A  	fcall	_I2C_Master_Write
  5418                           
  5419                           ;I2C.c: 58: I2C_Master_Write(low_address);
  5420  0B61  0873               	movf	EEPROM_Write@low_address,w
  5421  0B62  00F5               	movwf	??_EEPROM_Write
  5422  0B63  01F6               	clrf	??_EEPROM_Write+1
  5423  0B64  0875               	movf	??_EEPROM_Write,w
  5424  0B65  00F0               	movwf	I2C_Master_Write@d
  5425  0B66  0876               	movf	??_EEPROM_Write+1,w
  5426  0B67  00F1               	movwf	I2C_Master_Write@d+1
  5427  0B68  160A  118A  27F0  120A  158A  	fcall	_I2C_Master_Write
  5428  0B6D                     l3443:	
  5429                           ;I2C.c: 59: while(*data){
  5430                           
  5431  0B6D  0874               	movf	EEPROM_Write@data,w
  5432  0B6E  0084               	movwf	4
  5433  0B6F  1783               	bsf	3,7	;select IRP bank2
  5434  0B70  0800               	movf	0,w
  5435  0B71  1903               	btfsc	3,2
  5436  0B72  2B87               	goto	l3445
  5437                           
  5438                           ;I2C.c: 60: I2C_Master_Write(*data);
  5439  0B73  0874               	movf	EEPROM_Write@data,w
  5440  0B74  0084               	movwf	4
  5441  0B75  1783               	bsf	3,7	;select IRP bank2
  5442  0B76  0800               	movf	0,w
  5443  0B77  00F5               	movwf	??_EEPROM_Write
  5444  0B78  01F6               	clrf	??_EEPROM_Write+1
  5445  0B79  0875               	movf	??_EEPROM_Write,w
  5446  0B7A  00F0               	movwf	I2C_Master_Write@d
  5447  0B7B  0876               	movf	??_EEPROM_Write+1,w
  5448  0B7C  00F1               	movwf	I2C_Master_Write@d+1
  5449  0B7D  160A  118A  27F0  120A  158A  	fcall	_I2C_Master_Write
  5450                           
  5451                           ;I2C.c: 61: ++data;
  5452  0B82  3001               	movlw	1
  5453  0B83  00F5               	movwf	??_EEPROM_Write
  5454  0B84  0875               	movf	??_EEPROM_Write,w
  5455  0B85  07F4               	addwf	EEPROM_Write@data,f
  5456  0B86  2B6D               	goto	l3443
  5457  0B87                     l3445:	
  5458                           
  5459                           ;I2C.c: 62: }
  5460                           ;I2C.c: 63: I2C_Master_Stop();
  5461  0B87  160A  118A  27E9  120A  158A  	fcall	_I2C_Master_Stop
  5462                           
  5463                           ;I2C.c: 64: _delay((unsigned long)((200)*(10000000/4000.0)));
  5464  0B8C  3003               	movlw	3
  5465  0B8D  00F7               	movwf	??_EEPROM_Write+2
  5466  0B8E  308A               	movlw	138
  5467  0B8F  00F6               	movwf	??_EEPROM_Write+1
  5468  0B90  3055               	movlw	85
  5469  0B91  00F5               	movwf	??_EEPROM_Write
  5470  0B92                     u3667:	
  5471  0B92  0BF5               	decfsz	??_EEPROM_Write,f
  5472  0B93  2B92               	goto	u3667
  5473  0B94  0BF6               	decfsz	??_EEPROM_Write+1,f
  5474  0B95  2B92               	goto	u3667
  5475  0B96  0BF7               	decfsz	??_EEPROM_Write+2,f
  5476  0B97  2B92               	goto	u3667
  5477  0B98  2B99               	nop2
  5478  0B99  0008               	return
  5479  0B9A                     __end_of_EEPROM_Write:	
  5480                           
  5481                           	psect	text17
  5482  17F0                     __ptext17:	
  5483 ;; *************** function _I2C_Master_Write *****************
  5484 ;; Defined at:
  5485 ;;		line 34 in file "I2C.c"
  5486 ;; Parameters:    Size  Location     Type
  5487 ;;  d               2    0[COMMON] unsigned int 
  5488 ;; Auto vars:     Size  Location     Type
  5489 ;;		None
  5490 ;; Return value:  Size  Location     Type
  5491 ;;                  1    wreg      void 
  5492 ;; Registers used:
  5493 ;;		wreg, status,2, status,0, pclath, cstack
  5494 ;; Tracked objects:
  5495 ;;		On entry : 0/0
  5496 ;;		On exit  : 0/0
  5497 ;;		Unchanged: 0/0
  5498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5499 ;;      Params:         2       0       0       0       0
  5500 ;;      Locals:         0       0       0       0       0
  5501 ;;      Temps:          0       0       0       0       0
  5502 ;;      Totals:         2       0       0       0       0
  5503 ;;Total ram usage:        2 bytes
  5504 ;; Hardware stack levels used:    1
  5505 ;; Hardware stack levels required when called:    1
  5506 ;; This function calls:
  5507 ;;		_I2C_Master_Wait
  5508 ;; This function is called by:
  5509 ;;		_EEPROM_Write
  5510 ;; This function uses a non-reentrant model
  5511 ;;
  5512                           
  5513                           
  5514                           ;psect for function _I2C_Master_Write
  5515  17F0                     _I2C_Master_Write:	
  5516                           
  5517                           ;I2C.c: 35: I2C_Master_Wait();
  5518                           
  5519                           ;incstack = 0
  5520                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5521  17F0  120A  158A  201E   	fcall	_I2C_Master_Wait
  5522                           
  5523                           ;I2C.c: 36: SSPBUF = d;
  5524  17F3  0870               	movf	I2C_Master_Write@d,w
  5525  17F4  1283               	bcf	3,5	;RP0=0, select bank0
  5526  17F5  1303               	bcf	3,6	;RP1=0, select bank0
  5527  17F6  0093               	movwf	19	;volatile
  5528  17F7  0008               	return
  5529  17F8                     __end_of_I2C_Master_Write:	
  5530                           
  5531                           	psect	text18
  5532  17E9                     __ptext18:	
  5533 ;; *************** function _I2C_Master_Stop *****************
  5534 ;; Defined at:
  5535 ;;		line 29 in file "I2C.c"
  5536 ;; Parameters:    Size  Location     Type
  5537 ;;		None
  5538 ;; Auto vars:     Size  Location     Type
  5539 ;;		None
  5540 ;; Return value:  Size  Location     Type
  5541 ;;                  1    wreg      void 
  5542 ;; Registers used:
  5543 ;;		wreg, status,2, status,0, pclath, cstack
  5544 ;; Tracked objects:
  5545 ;;		On entry : 0/0
  5546 ;;		On exit  : 0/0
  5547 ;;		Unchanged: 0/0
  5548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5549 ;;      Params:         0       0       0       0       0
  5550 ;;      Locals:         0       0       0       0       0
  5551 ;;      Temps:          0       0       0       0       0
  5552 ;;      Totals:         0       0       0       0       0
  5553 ;;Total ram usage:        0 bytes
  5554 ;; Hardware stack levels used:    1
  5555 ;; Hardware stack levels required when called:    1
  5556 ;; This function calls:
  5557 ;;		_I2C_Master_Wait
  5558 ;; This function is called by:
  5559 ;;		_EEPROM_Write
  5560 ;; This function uses a non-reentrant model
  5561 ;;
  5562                           
  5563                           
  5564                           ;psect for function _I2C_Master_Stop
  5565  17E9                     _I2C_Master_Stop:	
  5566                           
  5567                           ;I2C.c: 30: I2C_Master_Wait();
  5568                           
  5569                           ;incstack = 0
  5570                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5571  17E9  120A  158A  201E   	fcall	_I2C_Master_Wait
  5572                           
  5573                           ;I2C.c: 31: PEN = 1;
  5574  17EC  1683               	bsf	3,5	;RP0=1, select bank1
  5575  17ED  1303               	bcf	3,6	;RP1=0, select bank1
  5576  17EE  1511               	bsf	17,2	;volatile
  5577  17EF  0008               	return
  5578  17F0                     __end_of_I2C_Master_Stop:	
  5579                           
  5580                           	psect	text19
  5581  17E2                     __ptext19:	
  5582 ;; *************** function _I2C_Master_Start *****************
  5583 ;; Defined at:
  5584 ;;		line 19 in file "I2C.c"
  5585 ;; Parameters:    Size  Location     Type
  5586 ;;		None
  5587 ;; Auto vars:     Size  Location     Type
  5588 ;;		None
  5589 ;; Return value:  Size  Location     Type
  5590 ;;                  1    wreg      void 
  5591 ;; Registers used:
  5592 ;;		wreg, status,2, status,0, pclath, cstack
  5593 ;; Tracked objects:
  5594 ;;		On entry : 0/0
  5595 ;;		On exit  : 0/0
  5596 ;;		Unchanged: 0/0
  5597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5598 ;;      Params:         0       0       0       0       0
  5599 ;;      Locals:         0       0       0       0       0
  5600 ;;      Temps:          0       0       0       0       0
  5601 ;;      Totals:         0       0       0       0       0
  5602 ;;Total ram usage:        0 bytes
  5603 ;; Hardware stack levels used:    1
  5604 ;; Hardware stack levels required when called:    1
  5605 ;; This function calls:
  5606 ;;		_I2C_Master_Wait
  5607 ;; This function is called by:
  5608 ;;		_EEPROM_Write
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           
  5613                           ;psect for function _I2C_Master_Start
  5614  17E2                     _I2C_Master_Start:	
  5615                           
  5616                           ;I2C.c: 20: I2C_Master_Wait();
  5617                           
  5618                           ;incstack = 0
  5619                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5620  17E2  120A  158A  201E   	fcall	_I2C_Master_Wait
  5621                           
  5622                           ;I2C.c: 21: SEN = 1;
  5623  17E5  1683               	bsf	3,5	;RP0=1, select bank1
  5624  17E6  1303               	bcf	3,6	;RP1=0, select bank1
  5625  17E7  1411               	bsf	17,0	;volatile
  5626  17E8  0008               	return
  5627  17E9                     __end_of_I2C_Master_Start:	
  5628                           
  5629                           	psect	text20
  5630  081E                     __ptext20:	
  5631 ;; *************** function _I2C_Master_Wait *****************
  5632 ;; Defined at:
  5633 ;;		line 15 in file "I2C.c"
  5634 ;; Parameters:    Size  Location     Type
  5635 ;;		None
  5636 ;; Auto vars:     Size  Location     Type
  5637 ;;		None
  5638 ;; Return value:  Size  Location     Type
  5639 ;;                  1    wreg      void 
  5640 ;; Registers used:
  5641 ;;		wreg, status,2
  5642 ;; Tracked objects:
  5643 ;;		On entry : 0/0
  5644 ;;		On exit  : 0/0
  5645 ;;		Unchanged: 0/0
  5646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5647 ;;      Params:         0       0       0       0       0
  5648 ;;      Locals:         0       0       0       0       0
  5649 ;;      Temps:          0       0       0       0       0
  5650 ;;      Totals:         0       0       0       0       0
  5651 ;;Total ram usage:        0 bytes
  5652 ;; Hardware stack levels used:    1
  5653 ;; This function calls:
  5654 ;;		Nothing
  5655 ;; This function is called by:
  5656 ;;		_I2C_Master_Start
  5657 ;;		_I2C_Master_Stop
  5658 ;;		_I2C_Master_Write
  5659 ;;		_I2C_Master_RepeatedStart
  5660 ;;		_I2C_Master_Read
  5661 ;; This function uses a non-reentrant model
  5662 ;;
  5663                           
  5664                           
  5665                           ;psect for function _I2C_Master_Wait
  5666  081E                     _I2C_Master_Wait:	
  5667  081E                     l490:	
  5668                           ;I2C.c: 16: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5669                           
  5670                           ;incstack = 0
  5671                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5672                           
  5673  081E  1683               	bsf	3,5	;RP0=1, select bank1
  5674  081F  1303               	bcf	3,6	;RP1=0, select bank1
  5675  0820  1914               	btfsc	20,2	;volatile
  5676  0821  281E               	goto	l490
  5677  0822  0811               	movf	17,w	;volatile
  5678  0823  391F               	andlw	31
  5679  0824  1903               	btfsc	3,2
  5680  0825  0008               	return
  5681  0826  281E               	goto	l490
  5682  0827                     __end_of_I2C_Master_Wait:	
  5683                           
  5684                           	psect	text21
  5685  08EC                     __ptext21:	
  5686 ;; *************** function _CWTX *****************
  5687 ;; Defined at:
  5688 ;;		line 284 in file "FMCW.c"
  5689 ;; Parameters:    Size  Location     Type
  5690 ;;  Nref            2   60[BANK0 ] int 
  5691 ;;  Nprg            2   62[BANK0 ] PTR int 
  5692 ;;		 -> RAM(512), main@CWTX_Nprg(10), CWTX_Nprg(10), 
  5693 ;; Auto vars:     Size  Location     Type
  5694 ;;  cwtx            2   64[BANK0 ] int 
  5695 ;; Return value:  Size  Location     Type
  5696 ;;                  1    wreg      void 
  5697 ;; Registers used:
  5698 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5699 ;; Tracked objects:
  5700 ;;		On entry : 0/0
  5701 ;;		On exit  : 0/0
  5702 ;;		Unchanged: 0/0
  5703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5704 ;;      Params:         0       4       0       0       0
  5705 ;;      Locals:         0       2       0       0       0
  5706 ;;      Temps:          0       0       0       0       0
  5707 ;;      Totals:         0       6       0       0       0
  5708 ;;Total ram usage:        6 bytes
  5709 ;; Hardware stack levels used:    1
  5710 ;; Hardware stack levels required when called:    3
  5711 ;; This function calls:
  5712 ;;		_OPINIT
  5713 ;;		_OUTFQ
  5714 ;;		_RFDOUT
  5715 ;; This function is called by:
  5716 ;;		_main
  5717 ;;		_SetPLL
  5718 ;; This function uses a non-reentrant model
  5719 ;;
  5720                           
  5721                           
  5722                           ;psect for function _CWTX
  5723  08EC                     _CWTX:	
  5724                           
  5725                           ;FMCW.c: 285: int cwtx = 2;
  5726                           
  5727                           ;incstack = 0
  5728                           ; Regs used in _CWTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5729  08EC  3002               	movlw	2
  5730  08ED  1283               	bcf	3,5	;RP0=0, select bank0
  5731  08EE  1303               	bcf	3,6	;RP1=0, select bank0
  5732  08EF  00E0               	movwf	CWTX@cwtx
  5733  08F0  3000               	movlw	0
  5734  08F1  00E1               	movwf	CWTX@cwtx+1
  5735                           
  5736                           ;FMCW.c: 286: OPINIT(cwtx);
  5737  08F2  0861               	movf	CWTX@cwtx+1,w
  5738  08F3  00F5               	movwf	OPINIT@fmcwtxrx+1
  5739  08F4  0860               	movf	CWTX@cwtx,w
  5740  08F5  00F4               	movwf	OPINIT@fmcwtxrx
  5741  08F6  120A  158A  24BE  120A  158A  	fcall	_OPINIT
  5742                           
  5743                           ;FMCW.c: 287: RFDOUT(cwtx, Nref);
  5744  08FB  1283               	bcf	3,5	;RP0=0, select bank0
  5745  08FC  1303               	bcf	3,6	;RP1=0, select bank0
  5746  08FD  0861               	movf	CWTX@cwtx+1,w
  5747  08FE  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5748  08FF  0860               	movf	CWTX@cwtx,w
  5749  0900  00F9               	movwf	RFDOUT@fmcwtxrx
  5750  0901  085D               	movf	CWTX@Nref+1,w
  5751  0902  00FC               	movwf	RFDOUT@Nref+1
  5752  0903  085C               	movf	CWTX@Nref,w
  5753  0904  00FB               	movwf	RFDOUT@Nref
  5754  0905  120A  158A  253B  120A  158A  	fcall	_RFDOUT
  5755                           
  5756                           ;FMCW.c: 288: OUTFQ(cwtx, Nprg);
  5757  090A  1283               	bcf	3,5	;RP0=0, select bank0
  5758  090B  1303               	bcf	3,6	;RP1=0, select bank0
  5759  090C  0861               	movf	CWTX@cwtx+1,w
  5760  090D  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5761  090E  0860               	movf	CWTX@cwtx,w
  5762  090F  00F9               	movwf	OUTFQ@fmcwtxrx
  5763  0910  085E               	movf	CWTX@Nprg,w
  5764  0911  00FB               	movwf	OUTFQ@Nprg
  5765  0912  085F               	movf	CWTX@Nprg+1,w
  5766  0913  00FC               	movwf	OUTFQ@Nprg+1
  5767  0914  120A  118A  20AC   	fcall	_OUTFQ
  5768  0917  0008               	return
  5769  0918                     __end_of_CWTX:	
  5770                           
  5771                           	psect	text22
  5772  0D3B                     __ptext22:	
  5773 ;; *************** function _RFDOUT *****************
  5774 ;; Defined at:
  5775 ;;		line 200 in file "FMCW.c"
  5776 ;; Parameters:    Size  Location     Type
  5777 ;;  fmcwtxrx        2    9[COMMON] int 
  5778 ;;  Nref            2   11[COMMON] int 
  5779 ;; Auto vars:     Size  Location     Type
  5780 ;;  i               2   31[BANK0 ] int 
  5781 ;;  i               2   27[BANK0 ] int 
  5782 ;;  i               2   29[BANK0 ] int 
  5783 ;;  Nref_b         24    3[BANK0 ] int [12]
  5784 ;; Return value:  Size  Location     Type
  5785 ;;                  1    wreg      void 
  5786 ;; Registers used:
  5787 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5788 ;; Tracked objects:
  5789 ;;		On entry : 0/0
  5790 ;;		On exit  : 0/0
  5791 ;;		Unchanged: 0/0
  5792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5793 ;;      Params:         4       0       0       0       0
  5794 ;;      Locals:         0      30       0       0       0
  5795 ;;      Temps:          0       3       0       0       0
  5796 ;;      Totals:         4      33       0       0       0
  5797 ;;Total ram usage:       37 bytes
  5798 ;; Hardware stack levels used:    1
  5799 ;; Hardware stack levels required when called:    2
  5800 ;; This function calls:
  5801 ;;		_H_OUT
  5802 ;;		_L_OUT
  5803 ;;		_STBOUT
  5804 ;;		___awdiv
  5805 ;; This function is called by:
  5806 ;;		_FMTX
  5807 ;;		_CWTX
  5808 ;;		_FMRX
  5809 ;; This function uses a non-reentrant model
  5810 ;;
  5811                           
  5812                           
  5813                           ;psect for function _RFDOUT
  5814  0D3B                     _RFDOUT:	
  5815                           
  5816                           ;FMCW.c: 201: int Nref_b[12];
  5817                           ;FMCW.c: 203: for(int i=0; i<12; i++){
  5818                           
  5819                           ;incstack = 0
  5820                           ; Regs used in _RFDOUT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5821  0D3B  1283               	bcf	3,5	;RP0=0, select bank0
  5822  0D3C  1303               	bcf	3,6	;RP1=0, select bank0
  5823  0D3D  01BD               	clrf	RFDOUT@i
  5824  0D3E  01BE               	clrf	RFDOUT@i+1
  5825  0D3F  083E               	movf	RFDOUT@i+1,w
  5826  0D40  3A80               	xorlw	128
  5827  0D41  00FF               	movwf	127
  5828  0D42  3080               	movlw	128
  5829  0D43  027F               	subwf	127,w
  5830  0D44  1D03               	skipz
  5831  0D45  2D48               	goto	u2895
  5832  0D46  300C               	movlw	12
  5833  0D47  023D               	subwf	RFDOUT@i,w
  5834  0D48                     u2895:	
  5835  0D48  1803               	btfsc	3,0
  5836  0D49  2D66               	goto	l3195
  5837  0D4A                     l3189:	
  5838                           
  5839                           ;FMCW.c: 204: Nref_b[i] = 0;
  5840  0D4A  1283               	bcf	3,5	;RP0=0, select bank0
  5841  0D4B  1303               	bcf	3,6	;RP1=0, select bank0
  5842  0D4C  083D               	movf	RFDOUT@i,w
  5843  0D4D  00A0               	movwf	??_RFDOUT
  5844  0D4E  0720               	addwf	??_RFDOUT,w
  5845  0D4F  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  5846  0D50  0084               	movwf	4
  5847  0D51  1383               	bcf	3,7	;select IRP bank0
  5848  0D52  0180               	clrf	0
  5849  0D53  0A84               	incf	4,f
  5850  0D54  0180               	clrf	0
  5851  0D55  3001               	movlw	1
  5852  0D56  07BD               	addwf	RFDOUT@i,f
  5853  0D57  1803               	skipnc
  5854  0D58  0ABE               	incf	RFDOUT@i+1,f
  5855  0D59  3000               	movlw	0
  5856  0D5A  07BE               	addwf	RFDOUT@i+1,f
  5857  0D5B  083E               	movf	RFDOUT@i+1,w
  5858  0D5C  3A80               	xorlw	128
  5859  0D5D  00FF               	movwf	127
  5860  0D5E  3080               	movlw	128
  5861  0D5F  027F               	subwf	127,w
  5862  0D60  1D03               	skipz
  5863  0D61  2D64               	goto	u2905
  5864  0D62  300C               	movlw	12
  5865  0D63  023D               	subwf	RFDOUT@i,w
  5866  0D64                     u2905:	
  5867  0D64  1C03               	skipc
  5868  0D65  2D4A               	goto	l3189
  5869  0D66                     l3195:	
  5870                           
  5871                           ;FMCW.c: 205: }
  5872                           ;FMCW.c: 208: for(int i=0; Nref>0; i++){
  5873  0D66  1283               	bcf	3,5	;RP0=0, select bank0
  5874  0D67  1303               	bcf	3,6	;RP1=0, select bank0
  5875  0D68  01BB               	clrf	RFDOUT@i_456
  5876  0D69  01BC               	clrf	RFDOUT@i_456+1
  5877  0D6A  087C               	movf	RFDOUT@Nref+1,w
  5878  0D6B  3A80               	xorlw	128
  5879  0D6C  00FF               	movwf	127
  5880  0D6D  3080               	movlw	128
  5881  0D6E  027F               	subwf	127,w
  5882  0D6F  1D03               	skipz
  5883  0D70  2D73               	goto	u2915
  5884  0D71  3001               	movlw	1
  5885  0D72  027B               	subwf	RFDOUT@Nref,w
  5886  0D73                     u2915:	
  5887  0D73  1C03               	btfss	3,0
  5888  0D74  2DAC               	goto	l3209
  5889  0D75                     l3201:	
  5890                           
  5891                           ;FMCW.c: 209: Nref_b[i] = Nref % 2;
  5892  0D75  3001               	movlw	1
  5893  0D76  057B               	andwf	RFDOUT@Nref,w
  5894  0D77  1283               	bcf	3,5	;RP0=0, select bank0
  5895  0D78  1303               	bcf	3,6	;RP1=0, select bank0
  5896  0D79  00A0               	movwf	??_RFDOUT
  5897  0D7A  3000               	movlw	0
  5898  0D7B  057C               	andwf	RFDOUT@Nref+1,w
  5899  0D7C  00A1               	movwf	??_RFDOUT+1
  5900  0D7D  083B               	movf	RFDOUT@i_456,w
  5901  0D7E  00A2               	movwf	??_RFDOUT+2
  5902  0D7F  0722               	addwf	??_RFDOUT+2,w
  5903  0D80  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  5904  0D81  0084               	movwf	4
  5905  0D82  0820               	movf	??_RFDOUT,w
  5906  0D83  1383               	bcf	3,7	;select IRP bank0
  5907  0D84  0080               	movwf	0
  5908  0D85  0A84               	incf	4,f
  5909  0D86  0821               	movf	??_RFDOUT+1,w
  5910  0D87  0080               	movwf	0
  5911                           
  5912                           ;FMCW.c: 210: Nref = Nref / 2;
  5913  0D88  3002               	movlw	2
  5914  0D89  00F0               	movwf	___awdiv@divisor
  5915  0D8A  3000               	movlw	0
  5916  0D8B  00F1               	movwf	___awdiv@divisor+1
  5917  0D8C  087C               	movf	RFDOUT@Nref+1,w
  5918  0D8D  00F3               	movwf	___awdiv@dividend+1
  5919  0D8E  087B               	movf	RFDOUT@Nref,w
  5920  0D8F  00F2               	movwf	___awdiv@dividend
  5921  0D90  120A  158A  22E4  120A  158A  	fcall	___awdiv
  5922  0D95  0871               	movf	?___awdiv+1,w
  5923  0D96  00FC               	movwf	RFDOUT@Nref+1
  5924  0D97  0870               	movf	?___awdiv,w
  5925  0D98  00FB               	movwf	RFDOUT@Nref
  5926  0D99  3001               	movlw	1
  5927  0D9A  1283               	bcf	3,5	;RP0=0, select bank0
  5928  0D9B  1303               	bcf	3,6	;RP1=0, select bank0
  5929  0D9C  07BB               	addwf	RFDOUT@i_456,f
  5930  0D9D  1803               	skipnc
  5931  0D9E  0ABC               	incf	RFDOUT@i_456+1,f
  5932  0D9F  3000               	movlw	0
  5933  0DA0  07BC               	addwf	RFDOUT@i_456+1,f
  5934  0DA1  087C               	movf	RFDOUT@Nref+1,w
  5935  0DA2  3A80               	xorlw	128
  5936  0DA3  00FF               	movwf	127
  5937  0DA4  3080               	movlw	128
  5938  0DA5  027F               	subwf	127,w
  5939  0DA6  1D03               	skipz
  5940  0DA7  2DAA               	goto	u2925
  5941  0DA8  3001               	movlw	1
  5942  0DA9  027B               	subwf	RFDOUT@Nref,w
  5943  0DAA                     u2925:	
  5944  0DAA  1803               	skipnc
  5945  0DAB  2D75               	goto	l3201
  5946  0DAC                     l3209:	
  5947                           
  5948                           ;FMCW.c: 211: }
  5949                           ;FMCW.c: 214: for (int i=0; i<12; i++)
  5950  0DAC  1283               	bcf	3,5	;RP0=0, select bank0
  5951  0DAD  1303               	bcf	3,6	;RP1=0, select bank0
  5952  0DAE  01BF               	clrf	RFDOUT@i_457
  5953  0DAF  01C0               	clrf	RFDOUT@i_457+1
  5954  0DB0  0840               	movf	RFDOUT@i_457+1,w
  5955  0DB1  3A80               	xorlw	128
  5956  0DB2  00FF               	movwf	127
  5957  0DB3  3080               	movlw	128
  5958  0DB4  027F               	subwf	127,w
  5959  0DB5  1D03               	skipz
  5960  0DB6  2DB9               	goto	u2935
  5961  0DB7  300C               	movlw	12
  5962  0DB8  023F               	subwf	RFDOUT@i_457,w
  5963  0DB9                     u2935:	
  5964  0DB9  1803               	btfsc	3,0
  5965  0DBA  2E02               	goto	l3227
  5966  0DBB                     l3215:	
  5967                           
  5968                           ;FMCW.c: 215: {
  5969                           ;FMCW.c: 216: if(Nref_b[i] == 0)
  5970  0DBB  1283               	bcf	3,5	;RP0=0, select bank0
  5971  0DBC  1303               	bcf	3,6	;RP1=0, select bank0
  5972  0DBD  083F               	movf	RFDOUT@i_457,w
  5973  0DBE  00A0               	movwf	??_RFDOUT
  5974  0DBF  0720               	addwf	??_RFDOUT,w
  5975  0DC0  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  5976  0DC1  0084               	movwf	4
  5977  0DC2  1383               	bcf	3,7	;select IRP bank0
  5978  0DC3  0800               	movf	0,w
  5979  0DC4  00A1               	movwf	??_RFDOUT+1
  5980  0DC5  0A84               	incf	4,f
  5981  0DC6  0800               	movf	0,w
  5982  0DC7  00A2               	movwf	??_RFDOUT+2
  5983  0DC8  0821               	movf	??_RFDOUT+1,w
  5984  0DC9  0422               	iorwf	??_RFDOUT+2,w
  5985  0DCA  1D03               	btfss	3,2
  5986  0DCB  2DD5               	goto	l3219
  5987                           
  5988                           ;FMCW.c: 217: {
  5989                           ;FMCW.c: 218: L_OUT(fmcwtxrx);
  5990  0DCC  087A               	movf	RFDOUT@fmcwtxrx+1,w
  5991  0DCD  00F3               	movwf	L_OUT@fmcwtxrx+1
  5992  0DCE  0879               	movf	RFDOUT@fmcwtxrx,w
  5993  0DCF  00F2               	movwf	L_OUT@fmcwtxrx
  5994  0DD0  120A  158A  2252  120A  158A  	fcall	_L_OUT
  5995  0DD5                     l3219:	
  5996                           
  5997                           ;FMCW.c: 219: }
  5998                           ;FMCW.c: 220: if(Nref_b[i] == 1)
  5999  0DD5  1283               	bcf	3,5	;RP0=0, select bank0
  6000  0DD6  1303               	bcf	3,6	;RP1=0, select bank0
  6001  0DD7  083F               	movf	RFDOUT@i_457,w
  6002  0DD8  00A0               	movwf	??_RFDOUT
  6003  0DD9  0720               	addwf	??_RFDOUT,w
  6004  0DDA  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6005  0DDB  0084               	movwf	4
  6006  0DDC  1383               	bcf	3,7	;select IRP bank0
  6007  0DDD  0800               	movf	0,w
  6008  0DDE  00A1               	movwf	??_RFDOUT+1
  6009  0DDF  0A84               	incf	4,f
  6010  0DE0  0800               	movf	0,w
  6011  0DE1  00A2               	movwf	??_RFDOUT+2
  6012  0DE2  0321               	decf	??_RFDOUT+1,w
  6013  0DE3  0422               	iorwf	??_RFDOUT+2,w
  6014  0DE4  1D03               	btfss	3,2
  6015  0DE5  2DEF               	goto	l3223
  6016                           
  6017                           ;FMCW.c: 221: {
  6018                           ;FMCW.c: 222: H_OUT(fmcwtxrx);
  6019  0DE6  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6020  0DE7  00F3               	movwf	H_OUT@fmcwtxrx+1
  6021  0DE8  0879               	movf	RFDOUT@fmcwtxrx,w
  6022  0DE9  00F2               	movwf	H_OUT@fmcwtxrx
  6023  0DEA  120A  158A  220C  120A  158A  	fcall	_H_OUT
  6024  0DEF                     l3223:	
  6025  0DEF  3001               	movlw	1
  6026  0DF0  1283               	bcf	3,5	;RP0=0, select bank0
  6027  0DF1  1303               	bcf	3,6	;RP1=0, select bank0
  6028  0DF2  07BF               	addwf	RFDOUT@i_457,f
  6029  0DF3  1803               	skipnc
  6030  0DF4  0AC0               	incf	RFDOUT@i_457+1,f
  6031  0DF5  3000               	movlw	0
  6032  0DF6  07C0               	addwf	RFDOUT@i_457+1,f
  6033  0DF7  0840               	movf	RFDOUT@i_457+1,w
  6034  0DF8  3A80               	xorlw	128
  6035  0DF9  00FF               	movwf	127
  6036  0DFA  3080               	movlw	128
  6037  0DFB  027F               	subwf	127,w
  6038  0DFC  1D03               	skipz
  6039  0DFD  2E00               	goto	u2965
  6040  0DFE  300C               	movlw	12
  6041  0DFF  023F               	subwf	RFDOUT@i_457,w
  6042  0E00                     u2965:	
  6043  0E00  1C03               	skipc
  6044  0E01  2DBB               	goto	l3215
  6045  0E02                     l3227:	
  6046                           
  6047                           ;FMCW.c: 223: }
  6048                           ;FMCW.c: 224: }
  6049                           ;FMCW.c: 227: H_OUT(fmcwtxrx);
  6050  0E02  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6051  0E03  00F3               	movwf	H_OUT@fmcwtxrx+1
  6052  0E04  0879               	movf	RFDOUT@fmcwtxrx,w
  6053  0E05  00F2               	movwf	H_OUT@fmcwtxrx
  6054  0E06  120A  158A  220C  120A  158A  	fcall	_H_OUT
  6055                           
  6056                           ;FMCW.c: 228: H_OUT(fmcwtxrx);
  6057  0E0B  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6058  0E0C  00F3               	movwf	H_OUT@fmcwtxrx+1
  6059  0E0D  0879               	movf	RFDOUT@fmcwtxrx,w
  6060  0E0E  00F2               	movwf	H_OUT@fmcwtxrx
  6061  0E0F  120A  158A  220C  120A  158A  	fcall	_H_OUT
  6062                           
  6063                           ;FMCW.c: 231: STBOUT(fmcwtxrx);
  6064  0E14  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6065  0E15  00F3               	movwf	STBOUT@fmcwtxrx+1
  6066  0E16  0879               	movf	RFDOUT@fmcwtxrx,w
  6067  0E17  00F2               	movwf	STBOUT@fmcwtxrx
  6068  0E18  120A  158A  2170   	fcall	_STBOUT
  6069  0E1B  0008               	return
  6070  0E1C                     __end_of_RFDOUT:	
  6071                           
  6072                           	psect	text23
  6073  00AC                     __ptext23:	
  6074 ;; *************** function _OUTFQ *****************
  6075 ;; Defined at:
  6076 ;;		line 136 in file "FMCW.c"
  6077 ;; Parameters:    Size  Location     Type
  6078 ;;  fmcwtxrx        2    9[COMMON] int 
  6079 ;;  Nprg            2   11[COMMON] PTR int 
  6080 ;;		 -> RAM(512), main@FMRX_Nprg(10), main@CWTX_Nprg(10), main@FMTX_Nprg(10), 
  6081 ;;		 -> FMRX_Nprg(10), CWTX_Nprg(10), FMTX_Nprg(10), 
  6082 ;; Auto vars:     Size  Location     Type
  6083 ;;  j               2   58[BANK0 ] int 
  6084 ;;  i               2   56[BANK0 ] int 
  6085 ;;  i               2   50[BANK0 ] int 
  6086 ;;  i               2   54[BANK0 ] int 
  6087 ;;  Nprg_b         34   16[BANK0 ] int [17]
  6088 ;;  count           2   52[BANK0 ] int 
  6089 ;; Return value:  Size  Location     Type
  6090 ;;                  1    wreg      void 
  6091 ;; Registers used:
  6092 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6093 ;; Tracked objects:
  6094 ;;		On entry : 0/0
  6095 ;;		On exit  : 0/0
  6096 ;;		Unchanged: 0/0
  6097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6098 ;;      Params:         4       0       0       0       0
  6099 ;;      Locals:         0      44       0       0       0
  6100 ;;      Temps:          0      16       0       0       0
  6101 ;;      Totals:         4      60       0       0       0
  6102 ;;Total ram usage:       64 bytes
  6103 ;; Hardware stack levels used:    1
  6104 ;; Hardware stack levels required when called:    2
  6105 ;; This function calls:
  6106 ;;		_H_OUT
  6107 ;;		_L_OUT
  6108 ;;		_STBOUT
  6109 ;;		___awdiv
  6110 ;; This function is called by:
  6111 ;;		_FMTX
  6112 ;;		_CWTX
  6113 ;;		_FMRX
  6114 ;; This function uses a non-reentrant model
  6115 ;;
  6116                           
  6117                           
  6118                           ;psect for function _OUTFQ
  6119  00AC                     _OUTFQ:	
  6120                           
  6121                           ;FMCW.c: 137: int count = 0;
  6122                           
  6123                           ;incstack = 0
  6124                           ; Regs used in _OUTFQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6125  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  6126  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  6127  00AE  01D4               	clrf	OUTFQ@count
  6128  00AF  01D5               	clrf	OUTFQ@count+1
  6129                           
  6130                           ;FMCW.c: 138: int Nprg_b[17];
  6131                           ;FMCW.c: 140: for(int i=0; i<17; i++){
  6132  00B0  01D6               	clrf	OUTFQ@i
  6133  00B1  01D7               	clrf	OUTFQ@i+1
  6134  00B2  0857               	movf	OUTFQ@i+1,w
  6135  00B3  3A80               	xorlw	128
  6136  00B4  00FF               	movwf	127
  6137  00B5  3080               	movlw	128
  6138  00B6  027F               	subwf	127,w
  6139  00B7  1D03               	skipz
  6140  00B8  28BB               	goto	u2755
  6141  00B9  3011               	movlw	17
  6142  00BA  0256               	subwf	OUTFQ@i,w
  6143  00BB                     u2755:	
  6144  00BB  1803               	btfsc	3,0
  6145  00BC  28D9               	goto	l3117
  6146  00BD                     l3111:	
  6147                           
  6148                           ;FMCW.c: 141: Nprg_b[i] = 0;
  6149  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  6150  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  6151  00BF  0856               	movf	OUTFQ@i,w
  6152  00C0  00A0               	movwf	??_OUTFQ
  6153  00C1  0720               	addwf	??_OUTFQ,w
  6154  00C2  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6155  00C3  0084               	movwf	4
  6156  00C4  1383               	bcf	3,7	;select IRP bank0
  6157  00C5  0180               	clrf	0
  6158  00C6  0A84               	incf	4,f
  6159  00C7  0180               	clrf	0
  6160  00C8  3001               	movlw	1
  6161  00C9  07D6               	addwf	OUTFQ@i,f
  6162  00CA  1803               	skipnc
  6163  00CB  0AD7               	incf	OUTFQ@i+1,f
  6164  00CC  3000               	movlw	0
  6165  00CD  07D7               	addwf	OUTFQ@i+1,f
  6166  00CE  0857               	movf	OUTFQ@i+1,w
  6167  00CF  3A80               	xorlw	128
  6168  00D0  00FF               	movwf	127
  6169  00D1  3080               	movlw	128
  6170  00D2  027F               	subwf	127,w
  6171  00D3  1D03               	skipz
  6172  00D4  28D7               	goto	u2765
  6173  00D5  3011               	movlw	17
  6174  00D6  0256               	subwf	OUTFQ@i,w
  6175  00D7                     u2765:	
  6176  00D7  1C03               	skipc
  6177  00D8  28BD               	goto	l3111
  6178  00D9                     l3117:	
  6179                           
  6180                           ;FMCW.c: 142: }
  6181                           ;FMCW.c: 145: for(int i = 0; i < 17; i++){
  6182  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  6183  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  6184  00DB  01D2               	clrf	OUTFQ@i_445
  6185  00DC  01D3               	clrf	OUTFQ@i_445+1
  6186  00DD  0853               	movf	OUTFQ@i_445+1,w
  6187  00DE  3A80               	xorlw	128
  6188  00DF  00FF               	movwf	127
  6189  00E0  3080               	movlw	128
  6190  00E1  027F               	subwf	127,w
  6191  00E2  1D03               	skipz
  6192  00E3  28E6               	goto	u2775
  6193  00E4  3011               	movlw	17
  6194  00E5  0252               	subwf	OUTFQ@i_445,w
  6195  00E6                     u2775:	
  6196  00E6  1803               	btfsc	3,0
  6197  00E7  2AB7               	goto	l3163
  6198  00E8                     l3123:	
  6199                           
  6200                           ;FMCW.c: 146: for(int j = 0; j<5; j++){
  6201  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  6202  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  6203  00EA  01DA               	clrf	OUTFQ@j
  6204  00EB  01DB               	clrf	OUTFQ@j+1
  6205  00EC  085B               	movf	OUTFQ@j+1,w
  6206  00ED  3A80               	xorlw	128
  6207  00EE  00FF               	movwf	127
  6208  00EF  3080               	movlw	128
  6209  00F0  027F               	subwf	127,w
  6210  00F1  1D03               	skipz
  6211  00F2  28F5               	goto	u2785
  6212  00F3  3005               	movlw	5
  6213  00F4  025A               	subwf	OUTFQ@j,w
  6214  00F5                     u2785:	
  6215  00F5  1803               	btfsc	3,0
  6216  00F6  2AA4               	goto	l3159
  6217  00F7                     l3129:	
  6218                           
  6219                           ;FMCW.c: 147: if(Nprg[j] % 2 == 0) {
  6220  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  6221  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  6222  00F9  085B               	movf	OUTFQ@j+1,w
  6223  00FA  00A1               	movwf	??_OUTFQ+1
  6224  00FB  085A               	movf	OUTFQ@j,w
  6225  00FC  00A0               	movwf	??_OUTFQ
  6226  00FD  1003               	clrc
  6227  00FE  0DA0               	rlf	??_OUTFQ,f
  6228  00FF  0DA1               	rlf	??_OUTFQ+1,f
  6229  0100  0820               	movf	??_OUTFQ,w
  6230  0101  077B               	addwf	OUTFQ@Nprg,w
  6231  0102  00A2               	movwf	??_OUTFQ+2
  6232  0103  0821               	movf	??_OUTFQ+1,w
  6233  0104  1803               	skipnc
  6234  0105  0A21               	incf	??_OUTFQ+1,w
  6235  0106  077C               	addwf	OUTFQ@Nprg+1,w
  6236  0107  00A3               	movwf	??_OUTFQ+3
  6237  0108  0822               	movf	??_OUTFQ+2,w
  6238  0109  0084               	movwf	4
  6239  010A  1783               	bsf	3,7
  6240  010B  1C23               	btfss	??_OUTFQ+3,0
  6241  010C  1383               	bcf	3,7
  6242  010D  0800               	movf	0,w
  6243  010E  00A4               	movwf	??_OUTFQ+4
  6244  010F  0A84               	incf	4,f
  6245  0110  0800               	movf	0,w
  6246  0111  00A5               	movwf	??_OUTFQ+5
  6247  0112  1824               	btfsc	??_OUTFQ+4,0
  6248  0113  299D               	goto	l3141
  6249                           
  6250                           ;FMCW.c: 148: if(j == 4){
  6251  0114  3004               	movlw	4
  6252  0115  065A               	xorwf	OUTFQ@j,w
  6253  0116  045B               	iorwf	OUTFQ@j+1,w
  6254  0117  1D03               	btfss	3,2
  6255  0118  2960               	goto	l3139
  6256                           
  6257                           ;FMCW.c: 149: Nprg[j] = Nprg[j] / 2;
  6258  0119  3002               	movlw	2
  6259  011A  00F0               	movwf	___awdiv@divisor
  6260  011B  3000               	movlw	0
  6261  011C  00F1               	movwf	___awdiv@divisor+1
  6262  011D  085B               	movf	OUTFQ@j+1,w
  6263  011E  00A1               	movwf	??_OUTFQ+1
  6264  011F  085A               	movf	OUTFQ@j,w
  6265  0120  00A0               	movwf	??_OUTFQ
  6266  0121  1003               	clrc
  6267  0122  0DA0               	rlf	??_OUTFQ,f
  6268  0123  0DA1               	rlf	??_OUTFQ+1,f
  6269  0124  0820               	movf	??_OUTFQ,w
  6270  0125  077B               	addwf	OUTFQ@Nprg,w
  6271  0126  00A2               	movwf	??_OUTFQ+2
  6272  0127  0821               	movf	??_OUTFQ+1,w
  6273  0128  1803               	skipnc
  6274  0129  0A21               	incf	??_OUTFQ+1,w
  6275  012A  077C               	addwf	OUTFQ@Nprg+1,w
  6276  012B  00A3               	movwf	??_OUTFQ+3
  6277  012C  0822               	movf	??_OUTFQ+2,w
  6278  012D  0084               	movwf	4
  6279  012E  1783               	bsf	3,7
  6280  012F  1C23               	btfss	??_OUTFQ+3,0
  6281  0130  1383               	bcf	3,7
  6282  0131  0800               	movf	0,w
  6283  0132  00F2               	movwf	___awdiv@dividend
  6284  0133  0A84               	incf	4,f
  6285  0134  0800               	movf	0,w
  6286  0135  00F3               	movwf	___awdiv@dividend+1
  6287  0136  120A  158A  22E4  120A  118A  	fcall	___awdiv
  6288  013B  1283               	bcf	3,5	;RP0=0, select bank0
  6289  013C  1303               	bcf	3,6	;RP1=0, select bank0
  6290  013D  085B               	movf	OUTFQ@j+1,w
  6291  013E  00A5               	movwf	??_OUTFQ+5
  6292  013F  085A               	movf	OUTFQ@j,w
  6293  0140  00A4               	movwf	??_OUTFQ+4
  6294  0141  1003               	clrc
  6295  0142  0DA4               	rlf	??_OUTFQ+4,f
  6296  0143  0DA5               	rlf	??_OUTFQ+5,f
  6297  0144  0824               	movf	??_OUTFQ+4,w
  6298  0145  077B               	addwf	OUTFQ@Nprg,w
  6299  0146  00A6               	movwf	??_OUTFQ+6
  6300  0147  0825               	movf	??_OUTFQ+5,w
  6301  0148  1803               	skipnc
  6302  0149  0A25               	incf	??_OUTFQ+5,w
  6303  014A  077C               	addwf	OUTFQ@Nprg+1,w
  6304  014B  00A7               	movwf	??_OUTFQ+7
  6305  014C  0826               	movf	??_OUTFQ+6,w
  6306  014D  0084               	movwf	4
  6307  014E  1783               	bsf	3,7
  6308  014F  1C27               	btfss	??_OUTFQ+7,0
  6309  0150  1383               	bcf	3,7
  6310  0151  0870               	movf	?___awdiv,w
  6311  0152  0080               	movwf	0
  6312  0153  0A84               	incf	4,f
  6313  0154  0871               	movf	?___awdiv+1,w
  6314  0155  0080               	movwf	0
  6315                           
  6316                           ;FMCW.c: 150: Nprg_b[count] = 0;
  6317  0156  0854               	movf	OUTFQ@count,w
  6318  0157  00A0               	movwf	??_OUTFQ
  6319  0158  0720               	addwf	??_OUTFQ,w
  6320  0159  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6321  015A  0084               	movwf	4
  6322  015B  1383               	bcf	3,7	;select IRP bank0
  6323  015C  0180               	clrf	0
  6324  015D  0A84               	incf	4,f
  6325  015E  0180               	clrf	0
  6326  015F  2A05               	goto	l3149
  6327  0160                     l3139:	
  6328                           ;FMCW.c: 152: }
  6329                           
  6330                           ;FMCW.c: 151: count++;
  6331                           
  6332                           
  6333                           ;FMCW.c: 153: else{
  6334                           ;FMCW.c: 154: Nprg[j] = Nprg[j] / 2;
  6335  0160  3002               	movlw	2
  6336  0161  00F0               	movwf	___awdiv@divisor
  6337  0162  3000               	movlw	0
  6338  0163  00F1               	movwf	___awdiv@divisor+1
  6339  0164  085B               	movf	OUTFQ@j+1,w
  6340  0165  00A1               	movwf	??_OUTFQ+1
  6341  0166  085A               	movf	OUTFQ@j,w
  6342  0167  00A0               	movwf	??_OUTFQ
  6343  0168  1003               	clrc
  6344  0169  0DA0               	rlf	??_OUTFQ,f
  6345  016A  0DA1               	rlf	??_OUTFQ+1,f
  6346  016B  0820               	movf	??_OUTFQ,w
  6347  016C  077B               	addwf	OUTFQ@Nprg,w
  6348  016D  00A2               	movwf	??_OUTFQ+2
  6349  016E  0821               	movf	??_OUTFQ+1,w
  6350  016F  1803               	skipnc
  6351  0170  0A21               	incf	??_OUTFQ+1,w
  6352  0171  077C               	addwf	OUTFQ@Nprg+1,w
  6353  0172  00A3               	movwf	??_OUTFQ+3
  6354  0173  0822               	movf	??_OUTFQ+2,w
  6355  0174  0084               	movwf	4
  6356  0175  1783               	bsf	3,7
  6357  0176  1C23               	btfss	??_OUTFQ+3,0
  6358  0177  1383               	bcf	3,7
  6359  0178  0800               	movf	0,w
  6360  0179  00F2               	movwf	___awdiv@dividend
  6361  017A  0A84               	incf	4,f
  6362  017B  0800               	movf	0,w
  6363  017C  00F3               	movwf	___awdiv@dividend+1
  6364  017D  120A  158A  22E4  120A  118A  	fcall	___awdiv
  6365  0182  1283               	bcf	3,5	;RP0=0, select bank0
  6366  0183  1303               	bcf	3,6	;RP1=0, select bank0
  6367  0184  085B               	movf	OUTFQ@j+1,w
  6368  0185  00A5               	movwf	??_OUTFQ+5
  6369  0186  085A               	movf	OUTFQ@j,w
  6370  0187  00A4               	movwf	??_OUTFQ+4
  6371  0188  1003               	clrc
  6372  0189  0DA4               	rlf	??_OUTFQ+4,f
  6373  018A  0DA5               	rlf	??_OUTFQ+5,f
  6374  018B  0824               	movf	??_OUTFQ+4,w
  6375  018C  077B               	addwf	OUTFQ@Nprg,w
  6376  018D  00A6               	movwf	??_OUTFQ+6
  6377  018E  0825               	movf	??_OUTFQ+5,w
  6378  018F  1803               	skipnc
  6379  0190  0A25               	incf	??_OUTFQ+5,w
  6380  0191  077C               	addwf	OUTFQ@Nprg+1,w
  6381  0192  00A7               	movwf	??_OUTFQ+7
  6382  0193  0826               	movf	??_OUTFQ+6,w
  6383  0194  0084               	movwf	4
  6384  0195  1783               	bsf	3,7
  6385  0196  1C27               	btfss	??_OUTFQ+7,0
  6386  0197  1383               	bcf	3,7
  6387  0198  0870               	movf	?___awdiv,w
  6388  0199  0080               	movwf	0
  6389  019A  0A84               	incf	4,f
  6390  019B  0871               	movf	?___awdiv+1,w
  6391  019C  2A92               	goto	L8
  6392  019D                     l3141:	
  6393                           ;FMCW.c: 155: }
  6394                           ;FMCW.c: 156: }
  6395                           
  6396                           
  6397                           ;FMCW.c: 157: else if(Nprg[j] % 2 == 1) {
  6398  019D  085B               	movf	OUTFQ@j+1,w
  6399  019E  00A1               	movwf	??_OUTFQ+1
  6400  019F  085A               	movf	OUTFQ@j,w
  6401  01A0  00A0               	movwf	??_OUTFQ
  6402  01A1  1003               	clrc
  6403  01A2  0DA0               	rlf	??_OUTFQ,f
  6404  01A3  0DA1               	rlf	??_OUTFQ+1,f
  6405  01A4  0820               	movf	??_OUTFQ,w
  6406  01A5  077B               	addwf	OUTFQ@Nprg,w
  6407  01A6  00A2               	movwf	??_OUTFQ+2
  6408  01A7  0821               	movf	??_OUTFQ+1,w
  6409  01A8  1803               	skipnc
  6410  01A9  0A21               	incf	??_OUTFQ+1,w
  6411  01AA  077C               	addwf	OUTFQ@Nprg+1,w
  6412  01AB  00A3               	movwf	??_OUTFQ+3
  6413  01AC  0822               	movf	??_OUTFQ+2,w
  6414  01AD  0084               	movwf	4
  6415  01AE  1783               	bsf	3,7
  6416  01AF  1C23               	btfss	??_OUTFQ+3,0
  6417  01B0  1383               	bcf	3,7
  6418  01B1  0800               	movf	0,w
  6419  01B2  00A4               	movwf	??_OUTFQ+4
  6420  01B3  0A84               	incf	4,f
  6421  01B4  0800               	movf	0,w
  6422  01B5  00A5               	movwf	??_OUTFQ+5
  6423  01B6  1C24               	btfss	??_OUTFQ+4,0
  6424  01B7  2A93               	goto	l3155
  6425                           
  6426                           ;FMCW.c: 158: if(j == 4){
  6427  01B8  3004               	movlw	4
  6428  01B9  065A               	xorwf	OUTFQ@j,w
  6429  01BA  045B               	iorwf	OUTFQ@j+1,w
  6430  01BB  1D03               	btfss	3,2
  6431  01BC  2A0C               	goto	l3151
  6432                           
  6433                           ;FMCW.c: 159: Nprg[j] = Nprg[j] / 2;
  6434  01BD  3002               	movlw	2
  6435  01BE  00F0               	movwf	___awdiv@divisor
  6436  01BF  3000               	movlw	0
  6437  01C0  00F1               	movwf	___awdiv@divisor+1
  6438  01C1  085B               	movf	OUTFQ@j+1,w
  6439  01C2  00A1               	movwf	??_OUTFQ+1
  6440  01C3  085A               	movf	OUTFQ@j,w
  6441  01C4  00A0               	movwf	??_OUTFQ
  6442  01C5  1003               	clrc
  6443  01C6  0DA0               	rlf	??_OUTFQ,f
  6444  01C7  0DA1               	rlf	??_OUTFQ+1,f
  6445  01C8  0820               	movf	??_OUTFQ,w
  6446  01C9  077B               	addwf	OUTFQ@Nprg,w
  6447  01CA  00A2               	movwf	??_OUTFQ+2
  6448  01CB  0821               	movf	??_OUTFQ+1,w
  6449  01CC  1803               	skipnc
  6450  01CD  0A21               	incf	??_OUTFQ+1,w
  6451  01CE  077C               	addwf	OUTFQ@Nprg+1,w
  6452  01CF  00A3               	movwf	??_OUTFQ+3
  6453  01D0  0822               	movf	??_OUTFQ+2,w
  6454  01D1  0084               	movwf	4
  6455  01D2  1783               	bsf	3,7
  6456  01D3  1C23               	btfss	??_OUTFQ+3,0
  6457  01D4  1383               	bcf	3,7
  6458  01D5  0800               	movf	0,w
  6459  01D6  00F2               	movwf	___awdiv@dividend
  6460  01D7  0A84               	incf	4,f
  6461  01D8  0800               	movf	0,w
  6462  01D9  00F3               	movwf	___awdiv@dividend+1
  6463  01DA  120A  158A  22E4  120A  118A  	fcall	___awdiv
  6464  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  6465  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  6466  01E1  085B               	movf	OUTFQ@j+1,w
  6467  01E2  00A5               	movwf	??_OUTFQ+5
  6468  01E3  085A               	movf	OUTFQ@j,w
  6469  01E4  00A4               	movwf	??_OUTFQ+4
  6470  01E5  1003               	clrc
  6471  01E6  0DA4               	rlf	??_OUTFQ+4,f
  6472  01E7  0DA5               	rlf	??_OUTFQ+5,f
  6473  01E8  0824               	movf	??_OUTFQ+4,w
  6474  01E9  077B               	addwf	OUTFQ@Nprg,w
  6475  01EA  00A6               	movwf	??_OUTFQ+6
  6476  01EB  0825               	movf	??_OUTFQ+5,w
  6477  01EC  1803               	skipnc
  6478  01ED  0A25               	incf	??_OUTFQ+5,w
  6479  01EE  077C               	addwf	OUTFQ@Nprg+1,w
  6480  01EF  00A7               	movwf	??_OUTFQ+7
  6481  01F0  0826               	movf	??_OUTFQ+6,w
  6482  01F1  0084               	movwf	4
  6483  01F2  1783               	bsf	3,7
  6484  01F3  1C27               	btfss	??_OUTFQ+7,0
  6485  01F4  1383               	bcf	3,7
  6486  01F5  0870               	movf	?___awdiv,w
  6487  01F6  0080               	movwf	0
  6488  01F7  0A84               	incf	4,f
  6489  01F8  0871               	movf	?___awdiv+1,w
  6490  01F9  0080               	movwf	0
  6491                           
  6492                           ;FMCW.c: 160: Nprg_b[count] = 1;
  6493  01FA  0854               	movf	OUTFQ@count,w
  6494  01FB  00A0               	movwf	??_OUTFQ
  6495  01FC  0720               	addwf	??_OUTFQ,w
  6496  01FD  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6497  01FE  0084               	movwf	4
  6498  01FF  3001               	movlw	1
  6499  0200  1383               	bcf	3,7	;select IRP bank0
  6500  0201  0080               	movwf	0
  6501  0202  0A84               	incf	4,f
  6502  0203  3000               	movlw	0
  6503  0204  0080               	movwf	0
  6504  0205                     l3149:	
  6505                           
  6506                           ;FMCW.c: 161: count++;
  6507  0205  3001               	movlw	1
  6508  0206  07D4               	addwf	OUTFQ@count,f
  6509  0207  1803               	skipnc
  6510  0208  0AD5               	incf	OUTFQ@count+1,f
  6511  0209  3000               	movlw	0
  6512  020A  07D5               	addwf	OUTFQ@count+1,f
  6513                           
  6514                           ;FMCW.c: 162: }
  6515  020B  2A93               	goto	l3155
  6516  020C                     l3151:	
  6517                           
  6518                           ;FMCW.c: 163: else{
  6519                           ;FMCW.c: 164: Nprg[j] = Nprg[j] / 2;
  6520  020C  3002               	movlw	2
  6521  020D  00F0               	movwf	___awdiv@divisor
  6522  020E  3000               	movlw	0
  6523  020F  00F1               	movwf	___awdiv@divisor+1
  6524  0210  085B               	movf	OUTFQ@j+1,w
  6525  0211  00A1               	movwf	??_OUTFQ+1
  6526  0212  085A               	movf	OUTFQ@j,w
  6527  0213  00A0               	movwf	??_OUTFQ
  6528  0214  1003               	clrc
  6529  0215  0DA0               	rlf	??_OUTFQ,f
  6530  0216  0DA1               	rlf	??_OUTFQ+1,f
  6531  0217  0820               	movf	??_OUTFQ,w
  6532  0218  077B               	addwf	OUTFQ@Nprg,w
  6533  0219  00A2               	movwf	??_OUTFQ+2
  6534  021A  0821               	movf	??_OUTFQ+1,w
  6535  021B  1803               	skipnc
  6536  021C  0A21               	incf	??_OUTFQ+1,w
  6537  021D  077C               	addwf	OUTFQ@Nprg+1,w
  6538  021E  00A3               	movwf	??_OUTFQ+3
  6539  021F  0822               	movf	??_OUTFQ+2,w
  6540  0220  0084               	movwf	4
  6541  0221  1783               	bsf	3,7
  6542  0222  1C23               	btfss	??_OUTFQ+3,0
  6543  0223  1383               	bcf	3,7
  6544  0224  0800               	movf	0,w
  6545  0225  00F2               	movwf	___awdiv@dividend
  6546  0226  0A84               	incf	4,f
  6547  0227  0800               	movf	0,w
  6548  0228  00F3               	movwf	___awdiv@dividend+1
  6549  0229  120A  158A  22E4  120A  118A  	fcall	___awdiv
  6550  022E  1283               	bcf	3,5	;RP0=0, select bank0
  6551  022F  1303               	bcf	3,6	;RP1=0, select bank0
  6552  0230  085B               	movf	OUTFQ@j+1,w
  6553  0231  00A5               	movwf	??_OUTFQ+5
  6554  0232  085A               	movf	OUTFQ@j,w
  6555  0233  00A4               	movwf	??_OUTFQ+4
  6556  0234  1003               	clrc
  6557  0235  0DA4               	rlf	??_OUTFQ+4,f
  6558  0236  0DA5               	rlf	??_OUTFQ+5,f
  6559  0237  0824               	movf	??_OUTFQ+4,w
  6560  0238  077B               	addwf	OUTFQ@Nprg,w
  6561  0239  00A6               	movwf	??_OUTFQ+6
  6562  023A  0825               	movf	??_OUTFQ+5,w
  6563  023B  1803               	skipnc
  6564  023C  0A25               	incf	??_OUTFQ+5,w
  6565  023D  077C               	addwf	OUTFQ@Nprg+1,w
  6566  023E  00A7               	movwf	??_OUTFQ+7
  6567  023F  0826               	movf	??_OUTFQ+6,w
  6568  0240  0084               	movwf	4
  6569  0241  1783               	bsf	3,7
  6570  0242  1C27               	btfss	??_OUTFQ+7,0
  6571  0243  1383               	bcf	3,7
  6572  0244  0870               	movf	?___awdiv,w
  6573  0245  0080               	movwf	0
  6574  0246  0A84               	incf	4,f
  6575  0247  0871               	movf	?___awdiv+1,w
  6576  0248  0080               	movwf	0
  6577                           
  6578                           ;FMCW.c: 165: Nprg[j+1] = Nprg[j+1] + 10;
  6579  0249  085B               	movf	OUTFQ@j+1,w
  6580  024A  00A1               	movwf	??_OUTFQ+1
  6581  024B  085A               	movf	OUTFQ@j,w
  6582  024C  00A0               	movwf	??_OUTFQ
  6583  024D  1003               	clrc
  6584  024E  0DA0               	rlf	??_OUTFQ,f
  6585  024F  0DA1               	rlf	??_OUTFQ+1,f
  6586  0250  0820               	movf	??_OUTFQ,w
  6587  0251  3E02               	addlw	2
  6588  0252  00A2               	movwf	??_OUTFQ+2
  6589  0253  0821               	movf	??_OUTFQ+1,w
  6590  0254  1803               	skipnc
  6591  0255  3E01               	addlw	1
  6592  0256  3E00               	addlw	0
  6593  0257  00A3               	movwf	??_OUTFQ+3
  6594  0258  0822               	movf	??_OUTFQ+2,w
  6595  0259  077B               	addwf	OUTFQ@Nprg,w
  6596  025A  00A4               	movwf	??_OUTFQ+4
  6597  025B  0823               	movf	??_OUTFQ+3,w
  6598  025C  1803               	skipnc
  6599  025D  0A23               	incf	??_OUTFQ+3,w
  6600  025E  077C               	addwf	OUTFQ@Nprg+1,w
  6601  025F  00A5               	movwf	??_OUTFQ+5
  6602  0260  0824               	movf	??_OUTFQ+4,w
  6603  0261  0084               	movwf	4
  6604  0262  1783               	bsf	3,7
  6605  0263  1C25               	btfss	??_OUTFQ+5,0
  6606  0264  1383               	bcf	3,7
  6607  0265  0800               	movf	0,w
  6608  0266  00A6               	movwf	??_OUTFQ+6
  6609  0267  0A84               	incf	4,f
  6610  0268  0800               	movf	0,w
  6611  0269  00A7               	movwf	??_OUTFQ+7
  6612  026A  0826               	movf	??_OUTFQ+6,w
  6613  026B  3E0A               	addlw	10
  6614  026C  00A8               	movwf	??_OUTFQ+8
  6615  026D  0827               	movf	??_OUTFQ+7,w
  6616  026E  1803               	skipnc
  6617  026F  3E01               	addlw	1
  6618  0270  3E00               	addlw	0
  6619  0271  00A9               	movwf	??_OUTFQ+9
  6620  0272  085B               	movf	OUTFQ@j+1,w
  6621  0273  00AB               	movwf	??_OUTFQ+11
  6622  0274  085A               	movf	OUTFQ@j,w
  6623  0275  00AA               	movwf	??_OUTFQ+10
  6624  0276  1003               	clrc
  6625  0277  0DAA               	rlf	??_OUTFQ+10,f
  6626  0278  0DAB               	rlf	??_OUTFQ+11,f
  6627  0279  082A               	movf	??_OUTFQ+10,w
  6628  027A  3E02               	addlw	2
  6629  027B  00AC               	movwf	??_OUTFQ+12
  6630  027C  082B               	movf	??_OUTFQ+11,w
  6631  027D  1803               	skipnc
  6632  027E  3E01               	addlw	1
  6633  027F  3E00               	addlw	0
  6634  0280  00AD               	movwf	??_OUTFQ+13
  6635  0281  082C               	movf	??_OUTFQ+12,w
  6636  0282  077B               	addwf	OUTFQ@Nprg,w
  6637  0283  00AE               	movwf	??_OUTFQ+14
  6638  0284  082D               	movf	??_OUTFQ+13,w
  6639  0285  1803               	skipnc
  6640  0286  0A2D               	incf	??_OUTFQ+13,w
  6641  0287  077C               	addwf	OUTFQ@Nprg+1,w
  6642  0288  00AF               	movwf	??_OUTFQ+15
  6643  0289  082E               	movf	??_OUTFQ+14,w
  6644  028A  0084               	movwf	4
  6645  028B  1783               	bsf	3,7
  6646  028C  1C2F               	btfss	??_OUTFQ+15,0
  6647  028D  1383               	bcf	3,7
  6648  028E  0828               	movf	??_OUTFQ+8,w
  6649  028F  0080               	movwf	0
  6650  0290  0A84               	incf	4,f
  6651  0291  0829               	movf	??_OUTFQ+9,w
  6652  0292                     L8:	
  6653  0292  0080               	movwf	0
  6654  0293                     l3155:	
  6655  0293  3001               	movlw	1
  6656  0294  07DA               	addwf	OUTFQ@j,f
  6657  0295  1803               	skipnc
  6658  0296  0ADB               	incf	OUTFQ@j+1,f
  6659  0297  3000               	movlw	0
  6660  0298  07DB               	addwf	OUTFQ@j+1,f
  6661  0299  085B               	movf	OUTFQ@j+1,w
  6662  029A  3A80               	xorlw	128
  6663  029B  00FF               	movwf	127
  6664  029C  3080               	movlw	128
  6665  029D  027F               	subwf	127,w
  6666  029E  1D03               	skipz
  6667  029F  2AA2               	goto	u2835
  6668  02A0  3005               	movlw	5
  6669  02A1  025A               	subwf	OUTFQ@j,w
  6670  02A2                     u2835:	
  6671  02A2  1C03               	skipc
  6672  02A3  28F7               	goto	l3129
  6673  02A4                     l3159:	
  6674  02A4  3001               	movlw	1
  6675  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  6676  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  6677  02A7  07D2               	addwf	OUTFQ@i_445,f
  6678  02A8  1803               	skipnc
  6679  02A9  0AD3               	incf	OUTFQ@i_445+1,f
  6680  02AA  3000               	movlw	0
  6681  02AB  07D3               	addwf	OUTFQ@i_445+1,f
  6682  02AC  0853               	movf	OUTFQ@i_445+1,w
  6683  02AD  3A80               	xorlw	128
  6684  02AE  00FF               	movwf	127
  6685  02AF  3080               	movlw	128
  6686  02B0  027F               	subwf	127,w
  6687  02B1  1D03               	skipz
  6688  02B2  2AB5               	goto	u2845
  6689  02B3  3011               	movlw	17
  6690  02B4  0252               	subwf	OUTFQ@i_445,w
  6691  02B5                     u2845:	
  6692  02B5  1C03               	skipc
  6693  02B6  28E8               	goto	l3123
  6694  02B7                     l3163:	
  6695                           
  6696                           ;FMCW.c: 166: }
  6697                           ;FMCW.c: 167: }
  6698                           ;FMCW.c: 168: }
  6699                           ;FMCW.c: 169: }
  6700                           ;FMCW.c: 172: for (int i=0; i<17; i++)
  6701  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  6702  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  6703  02B9  01D8               	clrf	OUTFQ@i_447
  6704  02BA  01D9               	clrf	OUTFQ@i_447+1
  6705  02BB  0859               	movf	OUTFQ@i_447+1,w
  6706  02BC  3A80               	xorlw	128
  6707  02BD  00FF               	movwf	127
  6708  02BE  3080               	movlw	128
  6709  02BF  027F               	subwf	127,w
  6710  02C0  1D03               	skipz
  6711  02C1  2AC4               	goto	u2855
  6712  02C2  3011               	movlw	17
  6713  02C3  0258               	subwf	OUTFQ@i_447,w
  6714  02C4                     u2855:	
  6715  02C4  1803               	btfsc	3,0
  6716  02C5  2B0D               	goto	l3181
  6717  02C6                     l3169:	
  6718                           
  6719                           ;FMCW.c: 173: {
  6720                           ;FMCW.c: 174: if(Nprg_b[i] == 0)
  6721  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  6722  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  6723  02C8  0858               	movf	OUTFQ@i_447,w
  6724  02C9  00A0               	movwf	??_OUTFQ
  6725  02CA  0720               	addwf	??_OUTFQ,w
  6726  02CB  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6727  02CC  0084               	movwf	4
  6728  02CD  1383               	bcf	3,7	;select IRP bank0
  6729  02CE  0800               	movf	0,w
  6730  02CF  00A1               	movwf	??_OUTFQ+1
  6731  02D0  0A84               	incf	4,f
  6732  02D1  0800               	movf	0,w
  6733  02D2  00A2               	movwf	??_OUTFQ+2
  6734  02D3  0821               	movf	??_OUTFQ+1,w
  6735  02D4  0422               	iorwf	??_OUTFQ+2,w
  6736  02D5  1D03               	btfss	3,2
  6737  02D6  2AE0               	goto	l3173
  6738                           
  6739                           ;FMCW.c: 175: {
  6740                           ;FMCW.c: 176: L_OUT(fmcwtxrx);
  6741  02D7  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6742  02D8  00F3               	movwf	L_OUT@fmcwtxrx+1
  6743  02D9  0879               	movf	OUTFQ@fmcwtxrx,w
  6744  02DA  00F2               	movwf	L_OUT@fmcwtxrx
  6745  02DB  120A  158A  2252  120A  118A  	fcall	_L_OUT
  6746  02E0                     l3173:	
  6747                           
  6748                           ;FMCW.c: 177: }
  6749                           ;FMCW.c: 178: if(Nprg_b[i] == 1)
  6750  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  6751  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  6752  02E2  0858               	movf	OUTFQ@i_447,w
  6753  02E3  00A0               	movwf	??_OUTFQ
  6754  02E4  0720               	addwf	??_OUTFQ,w
  6755  02E5  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6756  02E6  0084               	movwf	4
  6757  02E7  1383               	bcf	3,7	;select IRP bank0
  6758  02E8  0800               	movf	0,w
  6759  02E9  00A1               	movwf	??_OUTFQ+1
  6760  02EA  0A84               	incf	4,f
  6761  02EB  0800               	movf	0,w
  6762  02EC  00A2               	movwf	??_OUTFQ+2
  6763  02ED  0321               	decf	??_OUTFQ+1,w
  6764  02EE  0422               	iorwf	??_OUTFQ+2,w
  6765  02EF  1D03               	btfss	3,2
  6766  02F0  2AFA               	goto	l3177
  6767                           
  6768                           ;FMCW.c: 179: {
  6769                           ;FMCW.c: 180: H_OUT(fmcwtxrx);
  6770  02F1  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6771  02F2  00F3               	movwf	H_OUT@fmcwtxrx+1
  6772  02F3  0879               	movf	OUTFQ@fmcwtxrx,w
  6773  02F4  00F2               	movwf	H_OUT@fmcwtxrx
  6774  02F5  120A  158A  220C  120A  118A  	fcall	_H_OUT
  6775  02FA                     l3177:	
  6776  02FA  3001               	movlw	1
  6777  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  6778  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  6779  02FD  07D8               	addwf	OUTFQ@i_447,f
  6780  02FE  1803               	skipnc
  6781  02FF  0AD9               	incf	OUTFQ@i_447+1,f
  6782  0300  3000               	movlw	0
  6783  0301  07D9               	addwf	OUTFQ@i_447+1,f
  6784  0302  0859               	movf	OUTFQ@i_447+1,w
  6785  0303  3A80               	xorlw	128
  6786  0304  00FF               	movwf	127
  6787  0305  3080               	movlw	128
  6788  0306  027F               	subwf	127,w
  6789  0307  1D03               	skipz
  6790  0308  2B0B               	goto	u2885
  6791  0309  3011               	movlw	17
  6792  030A  0258               	subwf	OUTFQ@i_447,w
  6793  030B                     u2885:	
  6794  030B  1C03               	skipc
  6795  030C  2AC6               	goto	l3169
  6796  030D                     l3181:	
  6797                           
  6798                           ;FMCW.c: 181: }
  6799                           ;FMCW.c: 182: }
  6800                           ;FMCW.c: 185: H_OUT(fmcwtxrx);
  6801  030D  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6802  030E  00F3               	movwf	H_OUT@fmcwtxrx+1
  6803  030F  0879               	movf	OUTFQ@fmcwtxrx,w
  6804  0310  00F2               	movwf	H_OUT@fmcwtxrx
  6805  0311  120A  158A  220C  120A  118A  	fcall	_H_OUT
  6806                           
  6807                           ;FMCW.c: 186: L_OUT(fmcwtxrx);
  6808  0316  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6809  0317  00F3               	movwf	L_OUT@fmcwtxrx+1
  6810  0318  0879               	movf	OUTFQ@fmcwtxrx,w
  6811  0319  00F2               	movwf	L_OUT@fmcwtxrx
  6812  031A  120A  158A  2252  120A  118A  	fcall	_L_OUT
  6813                           
  6814                           ;FMCW.c: 189: STBOUT(fmcwtxrx);
  6815  031F  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6816  0320  00F3               	movwf	STBOUT@fmcwtxrx+1
  6817  0321  0879               	movf	OUTFQ@fmcwtxrx,w
  6818  0322  00F2               	movwf	STBOUT@fmcwtxrx
  6819  0323  120A  158A  2170   	fcall	_STBOUT
  6820  0326  0008               	return
  6821  0327                     __end_of_OUTFQ:	
  6822                           
  6823                           	psect	text24
  6824  0AE4                     __ptext24:	
  6825 ;; *************** function ___awdiv *****************
  6826 ;; Defined at:
  6827 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  6828 ;; Parameters:    Size  Location     Type
  6829 ;;  divisor         2    0[COMMON] int 
  6830 ;;  dividend        2    2[COMMON] int 
  6831 ;; Auto vars:     Size  Location     Type
  6832 ;;  quotient        2    7[COMMON] int 
  6833 ;;  sign            1    6[COMMON] unsigned char 
  6834 ;;  counter         1    5[COMMON] unsigned char 
  6835 ;; Return value:  Size  Location     Type
  6836 ;;                  2    0[COMMON] int 
  6837 ;; Registers used:
  6838 ;;		wreg, status,2, status,0
  6839 ;; Tracked objects:
  6840 ;;		On entry : 0/0
  6841 ;;		On exit  : 0/0
  6842 ;;		Unchanged: 0/0
  6843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6844 ;;      Params:         4       0       0       0       0
  6845 ;;      Locals:         4       0       0       0       0
  6846 ;;      Temps:          1       0       0       0       0
  6847 ;;      Totals:         9       0       0       0       0
  6848 ;;Total ram usage:        9 bytes
  6849 ;; Hardware stack levels used:    1
  6850 ;; This function calls:
  6851 ;;		Nothing
  6852 ;; This function is called by:
  6853 ;;		_OUTFQ
  6854 ;;		_RFDOUT
  6855 ;; This function uses a non-reentrant model
  6856 ;;
  6857                           
  6858                           
  6859                           ;psect for function ___awdiv
  6860  0AE4                     ___awdiv:	
  6861                           
  6862                           ;incstack = 0
  6863                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6864  0AE4  01F6               	clrf	___awdiv@sign
  6865  0AE5  1FF1               	btfss	___awdiv@divisor+1,7
  6866  0AE6  2AEE               	goto	l2593
  6867  0AE7  09F0               	comf	___awdiv@divisor,f
  6868  0AE8  09F1               	comf	___awdiv@divisor+1,f
  6869  0AE9  0AF0               	incf	___awdiv@divisor,f
  6870  0AEA  1903               	skipnz
  6871  0AEB  0AF1               	incf	___awdiv@divisor+1,f
  6872  0AEC  01F6               	clrf	___awdiv@sign
  6873  0AED  0AF6               	incf	___awdiv@sign,f
  6874  0AEE                     l2593:	
  6875  0AEE  1FF3               	btfss	___awdiv@dividend+1,7
  6876  0AEF  2AF9               	goto	l2599
  6877  0AF0  09F2               	comf	___awdiv@dividend,f
  6878  0AF1  09F3               	comf	___awdiv@dividend+1,f
  6879  0AF2  0AF2               	incf	___awdiv@dividend,f
  6880  0AF3  1903               	skipnz
  6881  0AF4  0AF3               	incf	___awdiv@dividend+1,f
  6882  0AF5  3001               	movlw	1
  6883  0AF6  00F4               	movwf	??___awdiv
  6884  0AF7  0874               	movf	??___awdiv,w
  6885  0AF8  06F6               	xorwf	___awdiv@sign,f
  6886  0AF9                     l2599:	
  6887  0AF9  01F7               	clrf	___awdiv@quotient
  6888  0AFA  01F8               	clrf	___awdiv@quotient+1
  6889  0AFB  0870               	movf	___awdiv@divisor,w
  6890  0AFC  0471               	iorwf	___awdiv@divisor+1,w
  6891  0AFD  1903               	btfsc	3,2
  6892  0AFE  2B30               	goto	l2621
  6893  0AFF  01F5               	clrf	___awdiv@counter
  6894  0B00  0AF5               	incf	___awdiv@counter,f
  6895  0B01                     l2609:	
  6896  0B01  1BF1               	btfsc	___awdiv@divisor+1,7
  6897  0B02  2B0F               	goto	l2611
  6898  0B03  3001               	movlw	1
  6899  0B04                     u2005:	
  6900  0B04  1003               	clrc
  6901  0B05  0DF0               	rlf	___awdiv@divisor,f
  6902  0B06  0DF1               	rlf	___awdiv@divisor+1,f
  6903  0B07  3EFF               	addlw	-1
  6904  0B08  1D03               	skipz
  6905  0B09  2B04               	goto	u2005
  6906  0B0A  3001               	movlw	1
  6907  0B0B  00F4               	movwf	??___awdiv
  6908  0B0C  0874               	movf	??___awdiv,w
  6909  0B0D  07F5               	addwf	___awdiv@counter,f
  6910  0B0E  2B01               	goto	l2609
  6911  0B0F                     l2611:	
  6912  0B0F  3001               	movlw	1
  6913  0B10                     u2025:	
  6914  0B10  1003               	clrc
  6915  0B11  0DF7               	rlf	___awdiv@quotient,f
  6916  0B12  0DF8               	rlf	___awdiv@quotient+1,f
  6917  0B13  3EFF               	addlw	-1
  6918  0B14  1D03               	skipz
  6919  0B15  2B10               	goto	u2025
  6920  0B16  0871               	movf	___awdiv@divisor+1,w
  6921  0B17  0273               	subwf	___awdiv@dividend+1,w
  6922  0B18  1D03               	skipz
  6923  0B19  2B1C               	goto	u2035
  6924  0B1A  0870               	movf	___awdiv@divisor,w
  6925  0B1B  0272               	subwf	___awdiv@dividend,w
  6926  0B1C                     u2035:	
  6927  0B1C  1C03               	skipc
  6928  0B1D  2B25               	goto	l2617
  6929  0B1E  0870               	movf	___awdiv@divisor,w
  6930  0B1F  02F2               	subwf	___awdiv@dividend,f
  6931  0B20  0871               	movf	___awdiv@divisor+1,w
  6932  0B21  1C03               	skipc
  6933  0B22  03F3               	decf	___awdiv@dividend+1,f
  6934  0B23  02F3               	subwf	___awdiv@dividend+1,f
  6935  0B24  1477               	bsf	___awdiv@quotient,0
  6936  0B25                     l2617:	
  6937  0B25  3001               	movlw	1
  6938  0B26                     u2045:	
  6939  0B26  1003               	clrc
  6940  0B27  0CF1               	rrf	___awdiv@divisor+1,f
  6941  0B28  0CF0               	rrf	___awdiv@divisor,f
  6942  0B29  3EFF               	addlw	-1
  6943  0B2A  1D03               	skipz
  6944  0B2B  2B26               	goto	u2045
  6945  0B2C  3001               	movlw	1
  6946  0B2D  02F5               	subwf	___awdiv@counter,f
  6947  0B2E  1D03               	btfss	3,2
  6948  0B2F  2B0F               	goto	l2611
  6949  0B30                     l2621:	
  6950  0B30  0876               	movf	___awdiv@sign,w
  6951  0B31  1903               	btfsc	3,2
  6952  0B32  2B38               	goto	l2625
  6953  0B33  09F7               	comf	___awdiv@quotient,f
  6954  0B34  09F8               	comf	___awdiv@quotient+1,f
  6955  0B35  0AF7               	incf	___awdiv@quotient,f
  6956  0B36  1903               	skipnz
  6957  0B37  0AF8               	incf	___awdiv@quotient+1,f
  6958  0B38                     l2625:	
  6959  0B38  0878               	movf	___awdiv@quotient+1,w
  6960  0B39  00F1               	movwf	?___awdiv+1
  6961  0B3A  0877               	movf	___awdiv@quotient,w
  6962  0B3B  00F0               	movwf	?___awdiv
  6963  0B3C  0008               	return
  6964  0B3D                     __end_of___awdiv:	
  6965                           
  6966                           	psect	text25
  6967  0CBE                     __ptext25:	
  6968 ;; *************** function _OPINIT *****************
  6969 ;; Defined at:
  6970 ;;		line 241 in file "FMCW.c"
  6971 ;; Parameters:    Size  Location     Type
  6972 ;;  fmcwtxrx        2    4[COMMON] int 
  6973 ;; Auto vars:     Size  Location     Type
  6974 ;;		None
  6975 ;; Return value:  Size  Location     Type
  6976 ;;                  1    wreg      void 
  6977 ;; Registers used:
  6978 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6979 ;; Tracked objects:
  6980 ;;		On entry : 0/0
  6981 ;;		On exit  : 0/0
  6982 ;;		Unchanged: 0/0
  6983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6984 ;;      Params:         2       0       0       0       0
  6985 ;;      Locals:         0       0       0       0       0
  6986 ;;      Temps:          0       0       0       0       0
  6987 ;;      Totals:         2       0       0       0       0
  6988 ;;Total ram usage:        2 bytes
  6989 ;; Hardware stack levels used:    1
  6990 ;; Hardware stack levels required when called:    2
  6991 ;; This function calls:
  6992 ;;		_H_OUT
  6993 ;;		_L_OUT
  6994 ;;		_STBOUT
  6995 ;; This function is called by:
  6996 ;;		_FMTX
  6997 ;;		_CWTX
  6998 ;;		_FMRX
  6999 ;; This function uses a non-reentrant model
  7000 ;;
  7001                           
  7002                           
  7003                           ;psect for function _OPINIT
  7004  0CBE                     _OPINIT:	
  7005                           
  7006                           ;FMCW.c: 243: L_OUT(fmcwtxrx);
  7007                           
  7008                           ;incstack = 0
  7009                           ; Regs used in _OPINIT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7010  0CBE  0875               	movf	OPINIT@fmcwtxrx+1,w
  7011  0CBF  00F3               	movwf	L_OUT@fmcwtxrx+1
  7012  0CC0  0874               	movf	OPINIT@fmcwtxrx,w
  7013  0CC1  00F2               	movwf	L_OUT@fmcwtxrx
  7014  0CC2  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7015                           
  7016                           ;FMCW.c: 244: L_OUT(fmcwtxrx);
  7017  0CC7  0875               	movf	OPINIT@fmcwtxrx+1,w
  7018  0CC8  00F3               	movwf	L_OUT@fmcwtxrx+1
  7019  0CC9  0874               	movf	OPINIT@fmcwtxrx,w
  7020  0CCA  00F2               	movwf	L_OUT@fmcwtxrx
  7021  0CCB  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7022                           
  7023                           ;FMCW.c: 245: L_OUT(fmcwtxrx);
  7024  0CD0  0875               	movf	OPINIT@fmcwtxrx+1,w
  7025  0CD1  00F3               	movwf	L_OUT@fmcwtxrx+1
  7026  0CD2  0874               	movf	OPINIT@fmcwtxrx,w
  7027  0CD3  00F2               	movwf	L_OUT@fmcwtxrx
  7028  0CD4  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7029                           
  7030                           ;FMCW.c: 246: H_OUT(fmcwtxrx);
  7031  0CD9  0875               	movf	OPINIT@fmcwtxrx+1,w
  7032  0CDA  00F3               	movwf	H_OUT@fmcwtxrx+1
  7033  0CDB  0874               	movf	OPINIT@fmcwtxrx,w
  7034  0CDC  00F2               	movwf	H_OUT@fmcwtxrx
  7035  0CDD  120A  158A  220C  120A  158A  	fcall	_H_OUT
  7036                           
  7037                           ;FMCW.c: 247: H_OUT(fmcwtxrx);
  7038  0CE2  0875               	movf	OPINIT@fmcwtxrx+1,w
  7039  0CE3  00F3               	movwf	H_OUT@fmcwtxrx+1
  7040  0CE4  0874               	movf	OPINIT@fmcwtxrx,w
  7041  0CE5  00F2               	movwf	H_OUT@fmcwtxrx
  7042  0CE6  120A  158A  220C  120A  158A  	fcall	_H_OUT
  7043                           
  7044                           ;FMCW.c: 248: L_OUT(fmcwtxrx);
  7045  0CEB  0875               	movf	OPINIT@fmcwtxrx+1,w
  7046  0CEC  00F3               	movwf	L_OUT@fmcwtxrx+1
  7047  0CED  0874               	movf	OPINIT@fmcwtxrx,w
  7048  0CEE  00F2               	movwf	L_OUT@fmcwtxrx
  7049  0CEF  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7050                           
  7051                           ;FMCW.c: 249: L_OUT(fmcwtxrx);
  7052  0CF4  0875               	movf	OPINIT@fmcwtxrx+1,w
  7053  0CF5  00F3               	movwf	L_OUT@fmcwtxrx+1
  7054  0CF6  0874               	movf	OPINIT@fmcwtxrx,w
  7055  0CF7  00F2               	movwf	L_OUT@fmcwtxrx
  7056  0CF8  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7057                           
  7058                           ;FMCW.c: 250: L_OUT(fmcwtxrx);
  7059  0CFD  0875               	movf	OPINIT@fmcwtxrx+1,w
  7060  0CFE  00F3               	movwf	L_OUT@fmcwtxrx+1
  7061  0CFF  0874               	movf	OPINIT@fmcwtxrx,w
  7062  0D00  00F2               	movwf	L_OUT@fmcwtxrx
  7063  0D01  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7064                           
  7065                           ;FMCW.c: 251: L_OUT(fmcwtxrx);
  7066  0D06  0875               	movf	OPINIT@fmcwtxrx+1,w
  7067  0D07  00F3               	movwf	L_OUT@fmcwtxrx+1
  7068  0D08  0874               	movf	OPINIT@fmcwtxrx,w
  7069  0D09  00F2               	movwf	L_OUT@fmcwtxrx
  7070  0D0A  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7071                           
  7072                           ;FMCW.c: 252: L_OUT(fmcwtxrx);
  7073  0D0F  0875               	movf	OPINIT@fmcwtxrx+1,w
  7074  0D10  00F3               	movwf	L_OUT@fmcwtxrx+1
  7075  0D11  0874               	movf	OPINIT@fmcwtxrx,w
  7076  0D12  00F2               	movwf	L_OUT@fmcwtxrx
  7077  0D13  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7078                           
  7079                           ;FMCW.c: 253: H_OUT(fmcwtxrx);
  7080  0D18  0875               	movf	OPINIT@fmcwtxrx+1,w
  7081  0D19  00F3               	movwf	H_OUT@fmcwtxrx+1
  7082  0D1A  0874               	movf	OPINIT@fmcwtxrx,w
  7083  0D1B  00F2               	movwf	H_OUT@fmcwtxrx
  7084  0D1C  120A  158A  220C  120A  158A  	fcall	_H_OUT
  7085                           
  7086                           ;FMCW.c: 256: L_OUT(fmcwtxrx);
  7087  0D21  0875               	movf	OPINIT@fmcwtxrx+1,w
  7088  0D22  00F3               	movwf	L_OUT@fmcwtxrx+1
  7089  0D23  0874               	movf	OPINIT@fmcwtxrx,w
  7090  0D24  00F2               	movwf	L_OUT@fmcwtxrx
  7091  0D25  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7092                           
  7093                           ;FMCW.c: 257: L_OUT(fmcwtxrx);
  7094  0D2A  0875               	movf	OPINIT@fmcwtxrx+1,w
  7095  0D2B  00F3               	movwf	L_OUT@fmcwtxrx+1
  7096  0D2C  0874               	movf	OPINIT@fmcwtxrx,w
  7097  0D2D  00F2               	movwf	L_OUT@fmcwtxrx
  7098  0D2E  120A  158A  2252  120A  158A  	fcall	_L_OUT
  7099                           
  7100                           ;FMCW.c: 260: STBOUT(fmcwtxrx);
  7101  0D33  0875               	movf	OPINIT@fmcwtxrx+1,w
  7102  0D34  00F3               	movwf	STBOUT@fmcwtxrx+1
  7103  0D35  0874               	movf	OPINIT@fmcwtxrx,w
  7104  0D36  00F2               	movwf	STBOUT@fmcwtxrx
  7105  0D37  120A  158A  2170   	fcall	_STBOUT
  7106  0D3A  0008               	return
  7107  0D3B                     __end_of_OPINIT:	
  7108                           
  7109                           	psect	text26
  7110  0970                     __ptext26:	
  7111 ;; *************** function _STBOUT *****************
  7112 ;; Defined at:
  7113 ;;		line 107 in file "FMCW.c"
  7114 ;; Parameters:    Size  Location     Type
  7115 ;;  fmcwtxrx        2    2[COMMON] int 
  7116 ;; Auto vars:     Size  Location     Type
  7117 ;;		None
  7118 ;; Return value:  Size  Location     Type
  7119 ;;                  1    wreg      void 
  7120 ;; Registers used:
  7121 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7122 ;; Tracked objects:
  7123 ;;		On entry : 0/0
  7124 ;;		On exit  : 0/0
  7125 ;;		Unchanged: 0/0
  7126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7127 ;;      Params:         2       0       0       0       0
  7128 ;;      Locals:         0       0       0       0       0
  7129 ;;      Temps:          0       0       0       0       0
  7130 ;;      Totals:         2       0       0       0       0
  7131 ;;Total ram usage:        2 bytes
  7132 ;; Hardware stack levels used:    1
  7133 ;; Hardware stack levels required when called:    1
  7134 ;; This function calls:
  7135 ;;		__NOP
  7136 ;; This function is called by:
  7137 ;;		_OUTFQ
  7138 ;;		_RFDOUT
  7139 ;;		_OPINIT
  7140 ;; This function uses a non-reentrant model
  7141 ;;
  7142                           
  7143                           
  7144                           ;psect for function _STBOUT
  7145  0970                     _STBOUT:	
  7146                           
  7147                           ;FMCW.c: 108: if(fmcwtxrx == 1)
  7148                           
  7149                           ;incstack = 0
  7150                           ; Regs used in _STBOUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7151  0970  0372               	decf	STBOUT@fmcwtxrx,w
  7152  0971  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7153  0972  1D03               	btfss	3,2
  7154  0973  297F               	goto	l2569
  7155                           
  7156                           ;FMCW.c: 109: {
  7157                           ;FMCW.c: 110: PORTAbits.RA5 = 1;
  7158  0974  1283               	bcf	3,5	;RP0=0, select bank0
  7159  0975  1303               	bcf	3,6	;RP1=0, select bank0
  7160  0976  1685               	bsf	5,5	;volatile
  7161                           
  7162                           ;FMCW.c: 111: _NOP();
  7163  0977  120A  158A  204A  120A  158A  	fcall	__NOP
  7164                           
  7165                           ;FMCW.c: 112: PORTAbits.RA5 = 0;
  7166  097C  1283               	bcf	3,5	;RP0=0, select bank0
  7167  097D  1303               	bcf	3,6	;RP1=0, select bank0
  7168  097E  1285               	bcf	5,5	;volatile
  7169  097F                     l2569:	
  7170                           
  7171                           ;FMCW.c: 113: }
  7172                           ;FMCW.c: 114: if(fmcwtxrx == 2)
  7173  097F  3002               	movlw	2
  7174  0980  0672               	xorwf	STBOUT@fmcwtxrx,w
  7175  0981  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7176  0982  1D03               	btfss	3,2
  7177  0983  298F               	goto	l2577
  7178                           
  7179                           ;FMCW.c: 115: {
  7180                           ;FMCW.c: 116: PORTDbits.RD0 = 1;
  7181  0984  1283               	bcf	3,5	;RP0=0, select bank0
  7182  0985  1303               	bcf	3,6	;RP1=0, select bank0
  7183  0986  1408               	bsf	8,0	;volatile
  7184                           
  7185                           ;FMCW.c: 117: _NOP();
  7186  0987  120A  158A  204A  120A  158A  	fcall	__NOP
  7187                           
  7188                           ;FMCW.c: 118: PORTDbits.RD0 = 0;
  7189  098C  1283               	bcf	3,5	;RP0=0, select bank0
  7190  098D  1303               	bcf	3,6	;RP1=0, select bank0
  7191  098E  1008               	bcf	8,0	;volatile
  7192  098F                     l2577:	
  7193                           
  7194                           ;FMCW.c: 119: }
  7195                           ;FMCW.c: 120: if(fmcwtxrx == 3)
  7196  098F  3003               	movlw	3
  7197  0990  0672               	xorwf	STBOUT@fmcwtxrx,w
  7198  0991  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7199  0992  1D03               	btfss	3,2
  7200  0993  0008               	return
  7201                           
  7202                           ;FMCW.c: 121: {
  7203                           ;FMCW.c: 122: PORTAbits.RA4 = 1;
  7204  0994  1283               	bcf	3,5	;RP0=0, select bank0
  7205  0995  1303               	bcf	3,6	;RP1=0, select bank0
  7206  0996  1605               	bsf	5,4	;volatile
  7207                           
  7208                           ;FMCW.c: 123: _NOP();
  7209  0997  120A  158A  204A   	fcall	__NOP
  7210                           
  7211                           ;FMCW.c: 124: PORTAbits.RA4 = 0;
  7212  099A  1283               	bcf	3,5	;RP0=0, select bank0
  7213  099B  1303               	bcf	3,6	;RP1=0, select bank0
  7214  099C  1205               	bcf	5,4	;volatile
  7215  099D  0008               	return
  7216  099E                     __end_of_STBOUT:	
  7217                           
  7218                           	psect	text27
  7219  0A52                     __ptext27:	
  7220 ;; *************** function _L_OUT *****************
  7221 ;; Defined at:
  7222 ;;		line 40 in file "FMCW.c"
  7223 ;; Parameters:    Size  Location     Type
  7224 ;;  fmcwtxrx        2    2[COMMON] int 
  7225 ;; Auto vars:     Size  Location     Type
  7226 ;;		None
  7227 ;; Return value:  Size  Location     Type
  7228 ;;                  1    wreg      void 
  7229 ;; Registers used:
  7230 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7231 ;; Tracked objects:
  7232 ;;		On entry : 0/0
  7233 ;;		On exit  : 0/0
  7234 ;;		Unchanged: 0/0
  7235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7236 ;;      Params:         2       0       0       0       0
  7237 ;;      Locals:         0       0       0       0       0
  7238 ;;      Temps:          0       0       0       0       0
  7239 ;;      Totals:         2       0       0       0       0
  7240 ;;Total ram usage:        2 bytes
  7241 ;; Hardware stack levels used:    1
  7242 ;; Hardware stack levels required when called:    1
  7243 ;; This function calls:
  7244 ;;		__NOP
  7245 ;; This function is called by:
  7246 ;;		_OUTFQ
  7247 ;;		_RFDOUT
  7248 ;;		_OPINIT
  7249 ;; This function uses a non-reentrant model
  7250 ;;
  7251                           
  7252                           
  7253                           ;psect for function _L_OUT
  7254  0A52                     _L_OUT:	
  7255                           
  7256                           ;FMCW.c: 41: if(fmcwtxrx == 1)
  7257                           
  7258                           ;incstack = 0
  7259                           ; Regs used in _L_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7260  0A52  0372               	decf	L_OUT@fmcwtxrx,w
  7261  0A53  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7262  0A54  1D03               	btfss	3,2
  7263  0A55  2A69               	goto	l2511
  7264                           
  7265                           ;FMCW.c: 42: {
  7266                           ;FMCW.c: 43: PORTEbits.RE0 = 0;
  7267  0A56  1283               	bcf	3,5	;RP0=0, select bank0
  7268  0A57  1303               	bcf	3,6	;RP1=0, select bank0
  7269  0A58  1009               	bcf	9,0	;volatile
  7270                           
  7271                           ;FMCW.c: 44: _NOP();
  7272  0A59  120A  158A  204A  120A  158A  	fcall	__NOP
  7273                           
  7274                           ;FMCW.c: 45: PORTEbits.RE1 = 1;
  7275  0A5E  1283               	bcf	3,5	;RP0=0, select bank0
  7276  0A5F  1303               	bcf	3,6	;RP1=0, select bank0
  7277  0A60  1489               	bsf	9,1	;volatile
  7278                           
  7279                           ;FMCW.c: 46: _NOP();
  7280  0A61  120A  158A  204A  120A  158A  	fcall	__NOP
  7281                           
  7282                           ;FMCW.c: 47: PORTEbits.RE1 = 0;
  7283  0A66  1283               	bcf	3,5	;RP0=0, select bank0
  7284  0A67  1303               	bcf	3,6	;RP1=0, select bank0
  7285  0A68  1089               	bcf	9,1	;volatile
  7286  0A69                     l2511:	
  7287                           
  7288                           ;FMCW.c: 48: }
  7289                           ;FMCW.c: 49: if(fmcwtxrx == 2)
  7290  0A69  3002               	movlw	2
  7291  0A6A  0672               	xorwf	L_OUT@fmcwtxrx,w
  7292  0A6B  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7293  0A6C  1D03               	btfss	3,2
  7294  0A6D  2A81               	goto	l2521
  7295                           
  7296                           ;FMCW.c: 50: {
  7297                           ;FMCW.c: 51: PORTDbits.RD1 = 0;
  7298  0A6E  1283               	bcf	3,5	;RP0=0, select bank0
  7299  0A6F  1303               	bcf	3,6	;RP1=0, select bank0
  7300  0A70  1088               	bcf	8,1	;volatile
  7301                           
  7302                           ;FMCW.c: 52: _NOP();
  7303  0A71  120A  158A  204A  120A  158A  	fcall	__NOP
  7304                           
  7305                           ;FMCW.c: 53: PORTDbits.RD2 = 1;
  7306  0A76  1283               	bcf	3,5	;RP0=0, select bank0
  7307  0A77  1303               	bcf	3,6	;RP1=0, select bank0
  7308  0A78  1508               	bsf	8,2	;volatile
  7309                           
  7310                           ;FMCW.c: 54: _NOP();
  7311  0A79  120A  158A  204A  120A  158A  	fcall	__NOP
  7312                           
  7313                           ;FMCW.c: 55: PORTDbits.RD2 = 0;
  7314  0A7E  1283               	bcf	3,5	;RP0=0, select bank0
  7315  0A7F  1303               	bcf	3,6	;RP1=0, select bank0
  7316  0A80  1108               	bcf	8,2	;volatile
  7317  0A81                     l2521:	
  7318                           
  7319                           ;FMCW.c: 56: }
  7320                           ;FMCW.c: 57: if(fmcwtxrx == 3)
  7321  0A81  3003               	movlw	3
  7322  0A82  0672               	xorwf	L_OUT@fmcwtxrx,w
  7323  0A83  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7324  0A84  1D03               	btfss	3,2
  7325  0A85  0008               	return
  7326                           
  7327                           ;FMCW.c: 58: {
  7328                           ;FMCW.c: 59: PORTAbits.RA3 = 0;
  7329  0A86  1283               	bcf	3,5	;RP0=0, select bank0
  7330  0A87  1303               	bcf	3,6	;RP1=0, select bank0
  7331  0A88  1185               	bcf	5,3	;volatile
  7332                           
  7333                           ;FMCW.c: 60: _NOP();
  7334  0A89  120A  158A  204A  120A  158A  	fcall	__NOP
  7335                           
  7336                           ;FMCW.c: 61: PORTAbits.RA2 = 1;
  7337  0A8E  1283               	bcf	3,5	;RP0=0, select bank0
  7338  0A8F  1303               	bcf	3,6	;RP1=0, select bank0
  7339  0A90  1505               	bsf	5,2	;volatile
  7340                           
  7341                           ;FMCW.c: 62: _NOP();
  7342  0A91  120A  158A  204A   	fcall	__NOP
  7343                           
  7344                           ;FMCW.c: 63: PORTAbits.RA2 = 0;
  7345  0A94  1283               	bcf	3,5	;RP0=0, select bank0
  7346  0A95  1303               	bcf	3,6	;RP1=0, select bank0
  7347  0A96  1105               	bcf	5,2	;volatile
  7348  0A97  0008               	return
  7349  0A98                     __end_of_L_OUT:	
  7350                           
  7351                           	psect	text28
  7352  0A0C                     __ptext28:	
  7353 ;; *************** function _H_OUT *****************
  7354 ;; Defined at:
  7355 ;;		line 74 in file "FMCW.c"
  7356 ;; Parameters:    Size  Location     Type
  7357 ;;  fmcwtxrx        2    2[COMMON] int 
  7358 ;; Auto vars:     Size  Location     Type
  7359 ;;		None
  7360 ;; Return value:  Size  Location     Type
  7361 ;;                  1    wreg      void 
  7362 ;; Registers used:
  7363 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7364 ;; Tracked objects:
  7365 ;;		On entry : 0/0
  7366 ;;		On exit  : 0/0
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7369 ;;      Params:         2       0       0       0       0
  7370 ;;      Locals:         0       0       0       0       0
  7371 ;;      Temps:          0       0       0       0       0
  7372 ;;      Totals:         2       0       0       0       0
  7373 ;;Total ram usage:        2 bytes
  7374 ;; Hardware stack levels used:    1
  7375 ;; Hardware stack levels required when called:    1
  7376 ;; This function calls:
  7377 ;;		__NOP
  7378 ;; This function is called by:
  7379 ;;		_OUTFQ
  7380 ;;		_RFDOUT
  7381 ;;		_OPINIT
  7382 ;; This function uses a non-reentrant model
  7383 ;;
  7384                           
  7385                           
  7386                           ;psect for function _H_OUT
  7387  0A0C                     _H_OUT:	
  7388                           
  7389                           ;FMCW.c: 75: if(fmcwtxrx == 1)
  7390                           
  7391                           ;incstack = 0
  7392                           ; Regs used in _H_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7393  0A0C  0372               	decf	H_OUT@fmcwtxrx,w
  7394  0A0D  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7395  0A0E  1D03               	btfss	3,2
  7396  0A0F  2A23               	goto	l2541
  7397                           
  7398                           ;FMCW.c: 76: {
  7399                           ;FMCW.c: 77: PORTEbits.RE0 = 1;
  7400  0A10  1283               	bcf	3,5	;RP0=0, select bank0
  7401  0A11  1303               	bcf	3,6	;RP1=0, select bank0
  7402  0A12  1409               	bsf	9,0	;volatile
  7403                           
  7404                           ;FMCW.c: 78: _NOP();
  7405  0A13  120A  158A  204A  120A  158A  	fcall	__NOP
  7406                           
  7407                           ;FMCW.c: 79: PORTEbits.RE1 = 1;
  7408  0A18  1283               	bcf	3,5	;RP0=0, select bank0
  7409  0A19  1303               	bcf	3,6	;RP1=0, select bank0
  7410  0A1A  1489               	bsf	9,1	;volatile
  7411                           
  7412                           ;FMCW.c: 80: _NOP();
  7413  0A1B  120A  158A  204A  120A  158A  	fcall	__NOP
  7414                           
  7415                           ;FMCW.c: 81: PORTEbits.RE1 = 0;
  7416  0A20  1283               	bcf	3,5	;RP0=0, select bank0
  7417  0A21  1303               	bcf	3,6	;RP1=0, select bank0
  7418  0A22  1089               	bcf	9,1	;volatile
  7419  0A23                     l2541:	
  7420                           
  7421                           ;FMCW.c: 82: }
  7422                           ;FMCW.c: 83: if(fmcwtxrx == 2)
  7423  0A23  3002               	movlw	2
  7424  0A24  0672               	xorwf	H_OUT@fmcwtxrx,w
  7425  0A25  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7426  0A26  1D03               	btfss	3,2
  7427  0A27  2A3B               	goto	l2551
  7428                           
  7429                           ;FMCW.c: 84: {
  7430                           ;FMCW.c: 85: PORTDbits.RD1 = 1;
  7431  0A28  1283               	bcf	3,5	;RP0=0, select bank0
  7432  0A29  1303               	bcf	3,6	;RP1=0, select bank0
  7433  0A2A  1488               	bsf	8,1	;volatile
  7434                           
  7435                           ;FMCW.c: 86: _NOP();
  7436  0A2B  120A  158A  204A  120A  158A  	fcall	__NOP
  7437                           
  7438                           ;FMCW.c: 87: PORTDbits.RD2 = 1;
  7439  0A30  1283               	bcf	3,5	;RP0=0, select bank0
  7440  0A31  1303               	bcf	3,6	;RP1=0, select bank0
  7441  0A32  1508               	bsf	8,2	;volatile
  7442                           
  7443                           ;FMCW.c: 88: _NOP();
  7444  0A33  120A  158A  204A  120A  158A  	fcall	__NOP
  7445                           
  7446                           ;FMCW.c: 89: PORTDbits.RD2 = 0;
  7447  0A38  1283               	bcf	3,5	;RP0=0, select bank0
  7448  0A39  1303               	bcf	3,6	;RP1=0, select bank0
  7449  0A3A  1108               	bcf	8,2	;volatile
  7450  0A3B                     l2551:	
  7451                           
  7452                           ;FMCW.c: 90: }
  7453                           ;FMCW.c: 91: if(fmcwtxrx == 3)
  7454  0A3B  3003               	movlw	3
  7455  0A3C  0672               	xorwf	H_OUT@fmcwtxrx,w
  7456  0A3D  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7457  0A3E  1D03               	btfss	3,2
  7458  0A3F  0008               	return
  7459                           
  7460                           ;FMCW.c: 92: {
  7461                           ;FMCW.c: 93: PORTAbits.RA3 = 1;
  7462  0A40  1283               	bcf	3,5	;RP0=0, select bank0
  7463  0A41  1303               	bcf	3,6	;RP1=0, select bank0
  7464  0A42  1585               	bsf	5,3	;volatile
  7465                           
  7466                           ;FMCW.c: 94: _NOP();
  7467  0A43  120A  158A  204A  120A  158A  	fcall	__NOP
  7468                           
  7469                           ;FMCW.c: 95: PORTAbits.RA2 = 1;
  7470  0A48  1283               	bcf	3,5	;RP0=0, select bank0
  7471  0A49  1303               	bcf	3,6	;RP1=0, select bank0
  7472  0A4A  1505               	bsf	5,2	;volatile
  7473                           
  7474                           ;FMCW.c: 96: _NOP();
  7475  0A4B  120A  158A  204A   	fcall	__NOP
  7476                           
  7477                           ;FMCW.c: 97: PORTAbits.RA2 = 0;
  7478  0A4E  1283               	bcf	3,5	;RP0=0, select bank0
  7479  0A4F  1303               	bcf	3,6	;RP1=0, select bank0
  7480  0A50  1105               	bcf	5,2	;volatile
  7481  0A51  0008               	return
  7482  0A52                     __end_of_H_OUT:	
  7483                           
  7484                           	psect	text29
  7485  084A                     __ptext29:	
  7486 ;; *************** function __NOP *****************
  7487 ;; Defined at:
  7488 ;;		line 349 in file "FMCW.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;		None
  7491 ;; Auto vars:     Size  Location     Type
  7492 ;;  i               2    0[COMMON] int 
  7493 ;; Return value:  Size  Location     Type
  7494 ;;                  1    wreg      void 
  7495 ;; Registers used:
  7496 ;;		wreg, status,2, btemp+1
  7497 ;; Tracked objects:
  7498 ;;		On entry : 0/0
  7499 ;;		On exit  : 0/0
  7500 ;;		Unchanged: 0/0
  7501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7502 ;;      Params:         0       0       0       0       0
  7503 ;;      Locals:         2       0       0       0       0
  7504 ;;      Temps:          0       0       0       0       0
  7505 ;;      Totals:         2       0       0       0       0
  7506 ;;Total ram usage:        2 bytes
  7507 ;; Hardware stack levels used:    1
  7508 ;; This function calls:
  7509 ;;		Nothing
  7510 ;; This function is called by:
  7511 ;;		_L_OUT
  7512 ;;		_H_OUT
  7513 ;;		_STBOUT
  7514 ;; This function uses a non-reentrant model
  7515 ;;
  7516                           
  7517                           
  7518                           ;psect for function __NOP
  7519  084A                     __NOP:	
  7520                           
  7521                           ;FMCW.c: 350: for(int i=0; i<5; i++){
  7522                           
  7523                           ;incstack = 0
  7524                           ; Regs used in __NOP: [wreg+status,2+btemp+1]
  7525  084A  01F0               	clrf	__NOP@i
  7526  084B  01F1               	clrf	__NOP@i+1
  7527  084C                     L9:	
  7528  084C  0871               	movf	__NOP@i+1,w
  7529  084D  3A80               	xorlw	128
  7530  084E  00FF               	movwf	127
  7531  084F  3080               	movlw	128
  7532  0850  027F               	subwf	127,w
  7533  0851  1D03               	skipz
  7534  0852  2855               	goto	u1815
  7535  0853  3005               	movlw	5
  7536  0854  0270               	subwf	__NOP@i,w
  7537  0855                     u1815:	
  7538  0855  1803               	btfsc	3,0
  7539  0856  0008               	return
  7540                           
  7541                           ;FMCW.c: 351: __nop();
  7542  0857  0000               	nop
  7543  0858  3001               	movlw	1
  7544  0859  07F0               	addwf	__NOP@i,f
  7545  085A  1803               	skipnc
  7546  085B  0AF1               	incf	__NOP@i+1,f
  7547  085C  3000               	movlw	0
  7548  085D  07F1               	addwf	__NOP@i+1,f
  7549  085E  284C               	goto	L9
  7550  085F                     __end_of__NOP:	
  7551  007E                     btemp	set	126	;btemp
  7552  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    2
    Data        91
    BSS         107
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      80
    BANK1            80     33      72
    BANK3            96      0      92
    BANK2            96      0      57

Pointer List with Targets:

    FMRX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), FMRX_Nprg(BANK3[10]), 

    CWTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@CWTX_Nprg(BANK1[10]), CWTX_Nprg(BANK1[10]), 

    FMTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    OUTFQ@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), main@CWTX_Nprg(BANK1[10]), main@FMTX_Nprg(BANK1[10]), 
		 -> FMRX_Nprg(BANK3[10]), CWTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    EEPROM_Write@data	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 

    main@dData	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 

    sp__ReceivePacket_data	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), dData(BANK2[32]), 


Critical Paths under _main in COMMON

    _TXOBC_waddress->_putch
    _ReceivePacket_data->_fcscheck
    _ReceivePacket_data->_waitFlag
    _waitFlag->_getbit
    _getdata->_getbit
    _NM_waddress->_putch
    _Init_I2C_M->___lldiv
    _FMTX->_OUTFQ
    _FMTX->_RFDOUT
    _FMRX->_OUTFQ
    _FMRX->_RFDOUT
    _EEPROM_Write->_I2C_Master_Write
    _CWTX->_OUTFQ
    _CWTX->_RFDOUT
    _RFDOUT->___awdiv
    _OUTFQ->___awdiv
    _OPINIT->_H_OUT
    _OPINIT->_L_OUT
    _OPINIT->_STBOUT
    _STBOUT->__NOP
    _L_OUT->__NOP
    _H_OUT->__NOP

Critical Paths under _main in BANK0

    _main->_CWTX
    _main->_FMRX
    _main->_FMTX
    _ReceivePacket_data->_waitFlag
    _FMTX->_OUTFQ
    _FMRX->_OUTFQ
    _CWTX->_OUTFQ

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0   33012
                                             66 BANK0      4     4      0
                                              0 BANK1     33    33      0
                               _CWTX
                       _EEPROM_Write
                               _FMRX
                               _FMTX
                         _Init_I2C_M
                           _Init_MPU
                        _Init_SERIAL
                        _NM_waddress
                 _ReceivePacket_data
                          _Reset_EPS
                     _TXOBC_waddress
 ---------------------------------------------------------------------------------
 (1) _TXOBC_waddress                                       5     3      2     194
                                              1 COMMON     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _Reset_EPS                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ReceivePacket_data                                   6     6      0    2691
                                             10 COMMON     2     2      0
                                             29 BANK0      4     4      0
                           _fcscheck
                            _getdata
                           _waitFlag
 ---------------------------------------------------------------------------------
 (2) _waitFlag                                            33    33      0    2205
                                              6 COMMON     4     4      0
                                              0 BANK0     29    29      0
                             _getbit
 ---------------------------------------------------------------------------------
 (2) _getdata                                             10    10      0     212
                                              6 COMMON     2     2      0
                                              0 BANK0      7     7      0
                             _getbit
 ---------------------------------------------------------------------------------
 (3) _getbit                                               6     4      2      46
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _fcscheck                                            10     8      2     161
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (1) _NM_waddress                                          3     1      2     194
                                              1 COMMON     3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_SERIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_MPU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_I2C_M                                           8     4      4     343
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _FMTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _FMRX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         8     5      3     527
                                              2 COMMON     8     5      3
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     234
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CWTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (2) _RFDOUT                                              37    33      4    3231
                                              9 COMMON     4     0      4
                                              0 BANK0     33    33      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _OUTFQ                                               64    60      4    3853
                                              9 COMMON     4     0      4
                                              0 BANK0     60    60      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _OPINIT                                               2     0      2    2075
                                              4 COMMON     2     0      2
                              _H_OUT
                              _L_OUT
                             _STBOUT
 ---------------------------------------------------------------------------------
 (3) _STBOUT                                               2     0      2     271
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _L_OUT                                                2     0      2     801
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _H_OUT                                                2     0      2     536
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (4) __NOP                                                 2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CWTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _EEPROM_Write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _FMRX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _FMTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _Init_I2C_M
     ___lldiv
   _Init_MPU
   _Init_SERIAL
   _NM_waddress
     _putch
   _ReceivePacket_data
     _fcscheck
     _getdata
       _getbit
     _waitFlag
       _getbit
   _Reset_EPS
   _TXOBC_waddress
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      5C       9       95.8%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      39      11       59.4%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     21      48       7       90.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     46      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     13B      12        0.0%
ABS                  0      0     13B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu May 17 22:10:30 2018

                             pc 0002                     __CFG_CP$OFF 0000                              l69 17F9  
                  ___awdiv@sign 0076                              fsr 0004                             l210 0566  
                           l275 0091                             l438 0FF1                             l439 0FDC  
                           l490 081E                             _RA1 0029                             _RB2 0032  
                           _RC2 003A                             _RB4 0034                             _RB5 0035  
                           _RC5 003D                             _PEN 048A                    __CFG_CPD$OFF 0000  
                           _SEN 0488                             _RX9 00C6                             _TX9 04C6  
                           fsr0 0004                             indf 0000                    __CFG_FOSC$HS 0000  
                  __CFG_LVP$OFF 0000                            l3011 07B0                            l3013 032F  
                          l3111 00BD                            l3201 0D75                            l3033 0C32  
                          l3123 00E8                            l3027 0C21                            l3141 019D  
                          l3117 00D9                            l3061 0059                            l3037 0C3D  
                          l3029 0C24                            l2511 0A69                            l3151 020C  
                          l3223 0DEF                            l3215 0DBB                            l3047 0C01  
                          l2521 0A81                            l3129 00F7                            l3209 0DAC  
                          l3073 008A                            l2611 0B0F                            l3155 0293  
                          l3139 0160                            l3163 02B7                            l3219 0DD5  
                          l3227 0E02                            l3251 0BEF                            l3067 0076  
                          l3075 0038                            l2541 0A23                            l2621 0B30  
                          l3173 02E0                            l3181 030D                            l3149 0205  
                          l3237 0BAA                            l2551 0A3B                            l3159 02A4  
                          l3247 0BE2                            l3239 0BBA                            l3087 00A9  
                          l3335 0CB2                            l3343 0CB8                            l2625 0B38  
                          l2617 0B25                            l2609 0B01                            l3177 02FA  
                          l3169 02C6                            l2801 0538                            l3329 0C8A  
                          l3195 0D66                            l3443 0B6D                            l2491 0AD2  
                          l2723 0436                            l3189 0D4A                            l3445 0B87  
                          l2493 0ADF                            l2901 065A                            l2709 040E  
                          l2911 0675                            l2735 0464                            l2719 0429  
                          l2655 035E                            l2647 0336                            l2577 098F  
                          l2569 097F                            l2593 0AEE                            l2825 056F  
                          l2761 04BA                            l2745 047F                            l2665 0379  
                          l2649 0355                            l3713 0F0E                            l2915 0682  
                          l2835 058A                            l2771 04D5                            l2683 03B8  
                          l2819 0564                            l2941 06D8                            l2749 048C  
                          l2693 03D3                            l2669 0386                            l2599 0AF9  
                          l2927 06B0                            l2863 05D6                            l2839 0597  
                          l2775 04E2                            l3719 0F1F                            l2953 0706  
                          l2937 06CB                            l2849 05AE                            l2697 03E0  
                          l2963 0721                            l2875 0604                            l2859 05C9  
                          l2787 0510                            l3739 0FC4                            l2885 061F  
                          l2797 052B                            l2967 072E                            l2993 0784  
                          l2889 062C                            l3689 0E97                            l2979 075C  
                          l2989 0777                            STR_1 080F                            STR_2 080F  
                          STR_3 080F                            STR_4 080F                            STR_5 080F  
                          STR_6 080F                            STR_7 0808                            STR_8 0808  
                          STR_9 0808                            _BRGH 04C2                            _CREN 00C4  
                          _FERR 00C2                            u2005 0B04                            u2025 0B10  
                          u2035 0B1C                            u2045 0B26                            u3005 0BBC  
                          u3015 0BD1                            u3025 0BE3                            u2305 04F7  
                          u2225 044B                            u2145 039F                            u3135 09B0  
                          u2415 05EB                            u3055 0C88                            u2345 054D  
                          u2265 04A1                            u2185 03F5                            u3065 0CB0  
                          u1815 0855                            u2615 0799                            u2535 06ED  
                          u2455 0641                            _FMRX 0918                            u3450 0F3C  
                          u2715 0046                            u3507 0E24                            u3460 0F52  
                          _FMTX 0944                            u1845 0AC2                            u3517 0E4E  
                          u3470 0F68                            u2575 0743                            u2495 0697  
                          u3607 09E8                            u3527 0EAE                            u2905 0D64  
                          u3617 09F6                            u3537 0ECF                            u2835 02A2  
                          u2755 00BB                            u2915 0D73                            u3627 0A04  
                          u3547 0EED                            u2845 02B5                            u2765 00D7  
                          u2925 0DAA                            u3637 0011                            u3557 0F2C  
                          u2855 02C4                            u2775 00E6                            u2935 0DB9  
                          u3647 0022                            u3567 0FBD                            u2785 00F5  
                          u3657 0AC6                            u3577 0FE7                            u3667 0B92  
                          u3587 0FF9                            _RCIE 0465                            _RCEN 048B  
                          _RCIF 0065                            _CWTX 08EC                            u2885 030B  
                          u2965 0E00                            u3597 09DA                            u2895 0D48  
                          u2985 0BAE                            _OERR 00C1                            _TMR1 000E  
                          _SPEN 00C7                            _RSEN 0489                            _SREN 00C5  
                          _TXIE 0464                            _TXEN 04C5                            _TXIF 0064  
                          _SYNC 04C4                            __NOP 084A  TXOBC_waddress@TXOBC_wad_header 0075  
                  __CFG_WRT$OFF 0000                            _main 0E1C                     _NM_waddress 0838  
                 ??_Init_SERIAL 0070                            btemp 007E                    getbit@oldbit 00E6  
                   Init_I2C_M@c 0020                            start 0000    ReceivePacket_data@fcschecker 003D  
          __end_of_EEPROM_Write 0B9A                           ?_FMRX 005C                           ?_FMTX 005C  
                         ?_CWTX 005C                ?_I2C_Master_Wait 0070                ?_I2C_Master_Stop 0070  
                         ?__NOP 0070                           ?_main 0070                           _ACKEN 048C  
                         _ACKDT 048D                 __end_of___awdiv 0B3D                           STR_10 0808  
                         STR_11 0808                           STR_12 0808                   __CFG_WDTE$OFF 0000  
               __end_of___lldiv 0BF8                 ___awdiv@divisor 0070         __size_of_TXOBC_waddress 003A  
               ___awdiv@counter 0075                           _RCREG 001A                           _SPBRG 0099  
                         _PORTA 0005                           _PORTB 0006                           _PORTC 0007  
                         _PORTD 0008                           _PORTE 0009                           _H_OUT 0A0C  
                         _OUTFQ 00AC                           _TRISA 0085                           _TRISB 0086  
                         _TRISC 0087                           _TRISD 0088                           _TRISE 0089  
                         _L_OUT 0A52                           _TXREG 0019                   __CFG_PWRTE$ON 0000  
                         _dData 0110                 __end_of_getdata 0C59                           _eflag 0066  
                 getdata@dstuff 0022                           _putch 17F8                  __CFG_BOREN$OFF 0000  
                         pclath 000A                           status 0003                           wtemp0 007E  
                    _Init_I2C_M 099E                EEPROM_Write@data 0074      __end_of_ReceivePacket_data 0CBE  
                  __end_of_FMRX 0944                    __end_of_FMTX 0970                    __end_of_CWTX 0918  
                  __end_of__NOP 085F                 __initialization 07B3                    __end_of_main 1000  
           __end_of_Init_SERIAL 0891                __end_of_Init_MPU 0878                          ??_FMRX 007D  
                        ??_FMTX 007D                          ??_CWTX 007D                          ??__NOP 0070  
                        ??_main 0062                          ?_H_OUT 0072        EEPROM_Write@high_address 0072  
                        ?_OUTFQ 0079                          ?_L_OUT 0072               ?_I2C_Master_Start 0070  
             ?_I2C_Master_Write 0070                          OUTFQ@i 0056              ??_I2C_Master_Start 0070  
                        OUTFQ@j 005A              ??_I2C_Master_Write 0072                ___awdiv@dividend 0072  
                    _eDataField 0130                          ?_putch 0070                          _RFDOUT 0D3B  
                        _OPINIT 0CBE                          _SSPADD 0093                          _STBOUT 0970  
                        _STATUS 0003                          _SSPCON 0014                          _SSPBUF 0013  
                        __NOP@i 0070                __end_of_fcscheck 00AC                       ??___awdiv 0074  
                        _dfcshi 006F                       ??___lldiv 0078                          _dfcslo 006E  
                        _efcshi 006C                          _efcslo 006D                          _getbit 0A98  
            __size_of_Reset_EPS 0023                          _estuff 00E2                ___awdiv@quotient 0077  
                    _dPacketnum 0068                       ??_getdata 0076                     RFDOUT@i_456 003B  
                   RFDOUT@i_457 003F                __end_of_waitFlag 07B3      EEPROM_Write@EEPROM_address 0078  
       __end_of__initialization 07FC         EEPROM_Write@low_address 0073                     ?_Init_I2C_M 0020  
                   _Init_SERIAL 0878           __size_of_EEPROM_Write 005D                   __end_of_H_OUT 0A52  
                 __end_of_OUTFQ 0327                   __end_of_L_OUT 0A98                   L_OUT@fmcwtxrx 0072  
                __pcstackCOMMON 0070                    __pidataBANK1 08AA                    __pidataBANK2 0891  
                  __pidataBANK3 08C4                   __end_of_putch 1800                  _TXOBC_waddress 09D2  
                       ??_H_OUT 0074                         ??_OUTFQ 0020                         ??_L_OUT 0074  
                       ??_putch 0070                    _EEPROM_Write 0B3D                      __pbssBANK0 0066  
                    __pbssBANK1 00DB                      __pbssBANK2 0110                      __pbssBANK3 0190  
             __end_of_Reset_EPS 002A                       ?_Init_MPU 0070                         ?_RFDOUT 0079  
                       ?_OPINIT 0074                    ?_NM_waddress 0071                         ?_STBOUT 0072  
                       RFDOUT@i 003D                      __pmaintext 0E1C                      _ebitstatus 00E0  
                       ?_getbit 0070          __end_of_TXOBC_waddress 0A0C     TXOBC_waddress@whigh_address 0071  
           __size_of_Init_I2C_M 0034                       OUTFQ@Nprg 007B                       ?_fcscheck 0070  
                       _SSPCON2 0091                         _SSPSTAT 0094                      __stringtab 0800  
                    ??_Init_MPU 0070                 __size_of_RFDOUT 00E1                 __size_of_OPINIT 007D  
               __size_of_STBOUT 002E                       ?_waitFlag 0070                         _dPacket 0190  
                       _ePacket 00DB                         ___awdiv 0AE4                         ___lldiv 0B9A  
               __size_of_getbit 004C                     waitFlag@buf 003C                 ?_TXOBC_waddress 0071  
                       __ptext1 09D2                         __ptext2 0007                         __ptext3 0C59  
                       __ptext4 0327                         __ptext5 0BF8                         __ptext6 0A98  
                       __ptext7 002A                         __ptext8 0838                         __ptext9 17F8  
                       _getdata 0BF8              _ReceivePacket_data 0C59                       _T1CONbits 0010  
      __size_of_I2C_Master_Wait 0009        __size_of_I2C_Master_Stop 0007                      ??_fcscheck 0072  
           ?_ReceivePacket_data 0070                         getbit@i 0074                         clrloop0 0817  
          end_of_initialization 07FC                    RFDOUT@Nref_b 0023                       _FMRX_Nref 00C1  
                     _FMRX_Nprg 01E2                       _FMTX_Nref 00C5                       _FMTX_Nprg 00D1  
                     _CWTX_Nref 00C3                       _CWTX_Nprg 00C7                     OUTFQ@Nprg_b 0030  
     __size_of_I2C_Master_Start 0007       __size_of_I2C_Master_Write 0008                 ___lldiv@divisor 0070  
               ___lldiv@counter 007D                      ??_waitFlag 0076            ??_ReceivePacket_data 007A  
                    fcscheck@bt 0074                  OPINIT@fmcwtxrx 0074                       _PORTAbits 0005  
                     _PORTCbits 0007                       _PORTDbits 0008                       _PORTEbits 0009  
                    getdata@buf 0026                    ??_Init_I2C_M 0024                    ?_Init_SERIAL 0070  
                __end_of_RFDOUT 0E1C                  __end_of_OPINIT 0D3B                  __end_of_STBOUT 099E  
          __size_of_NM_waddress 0012                  __end_of_getbit 0AE4      TXOBC_waddress@wlow_address 0072  
           start_initialization 07B3              __end_of_Init_I2C_M 09D2                        ??_RFDOUT 0020  
                      ??_OPINIT 0076               ??_I2C_Master_Wait 0070               ??_I2C_Master_Stop 0070  
                      ??_STBOUT 0074               __size_of_Init_MPU 0019                       _Reset_EPS 0007  
             getdata@dbitstatus 0024                      init_fetch0 0827                        ??_getbit 0072  
                   __pdataBANK1 00C1                     __pdataBANK2 0130                     __pdataBANK3 01C4  
                    RFDOUT@Nref 007B             __end_of_commandSize 0808        NM_waddress@whigh_address 0071  
                     ___latbits 0002                   __pcstackBANK0 0020                   __pcstackBANK1 00A0  
                      FMRX@Nref 005C                        FMRX@Nprg 005E                        FMTX@Nref 005C  
                      FMTX@Nprg 005E                        FMRX@fmrx 0060                        FMTX@fmtx 0060  
                      CWTX@Nref 005C                        CWTX@Nprg 005E               __size_of_fcscheck 0082  
                 waitFlag@j_120 0028                   waitFlag@j_122 002A                   waitFlag@j_131 0034  
                 waitFlag@j_124 002C                   waitFlag@j_116 0024                   waitFlag@j_133 0036  
                 waitFlag@j_125 002E                   waitFlag@j_118 0026                   waitFlag@j_135 0038  
                 waitFlag@j_127 0030                   waitFlag@j_129 0032                        CWTX@cwtx 0060  
              _I2C_Master_Start 17E2                      ?_Reset_EPS 0070                _I2C_Master_Write 17F0  
              ??_TXOBC_waddress 0073         getdata@bufstore_counter 0020                        ?___awdiv 0070  
                      ?___lldiv 0070               __size_of_waitFlag 048C                       __pstrings 0800  
                      ?_getdata 0070                  __size_of_H_OUT 0046                  __size_of_OUTFQ 027B  
                __size_of_L_OUT 0046                  __size_of_putch 0008                   H_OUT@fmcwtxrx 0072  
                     clear_ram0 0816                        _PIE1bits 008C                      OUTFQ@i_445 0052  
                    OUTFQ@i_447 0058                       _rcv_state 006A            __size_of_Init_SERIAL 0019  
                      _PIR1bits 000C                      OUTFQ@count 0054                     _commandSize 0806  
                     fcscheck@i 0075                       main@F1460 01D8                       main@F1462 01CE  
                     main@F1464 01C4                     __stringbase 0805                       main@dData 00C0  
                      _Init_MPU 085F                     ??_Reset_EPS 0070                   fcscheck@i_147 0077  
   __size_of_ReceivePacket_data 0065                __size_of___awdiv 0059                __size_of___lldiv 005E  
            __end_of__stringtab 0806                __size_of_getdata 0061                 _I2C_Master_Wait 081E  
               _I2C_Master_Stop 17E9                  RFDOUT@fmcwtxrx 0079                        _efcsflag 00E4  
                      _fcscheck 002A                        __ptext10 0878                        __ptext11 085F  
                      __ptext20 081E                        __ptext12 099E                        __ptext21 08EC  
                      __ptext13 0B9A                        __ptext22 0D3B                        __ptext14 0944  
                      __ptext23 00AC                        __ptext15 0918                        __ptext24 0AE4  
                      __ptext16 0B3D                        __ptext25 0CBE                        __ptext17 17F0  
                      __ptext26 0970                        __ptext18 17E9                        __ptext27 0A52  
                      __ptext19 17E2                        __ptext28 0A0C                        __ptext29 084A  
                 ?_EEPROM_Write 0072                   __size_of_FMRX 002C                   __size_of_FMTX 002C  
                 __size_of_CWTX 002C                   __size_of__NOP 0015                   ??_NM_waddress 0073  
                     waitFlag@i 0020                       waitFlag@j 0022                   __size_of_main 01E4  
                STBOUT@fmcwtxrx 0072                        _waitFlag 0327        NM_waddress@NM_wad_header 0073  
                 OUTFQ@fmcwtxrx 0079        __end_of_I2C_Master_Start 17E9                       putch@byte 0070  
      __end_of_I2C_Master_Write 17F8                      _INTCONbits 000B                        init_ram0 082B  
                  fcscheck@byte 0079                  ??_EEPROM_Write 0075              waitFlag@flag_judge 003A  
              ___lldiv@dividend 0074                       stringcode 0800                   main@FMRX_Nprg 00B4  
             main@NM_wad_header 00BF                   main@FMTX_Nprg 00A0             __end_of_NM_waddress 084A  
                 main@CWTX_Nprg 00AA         __end_of_I2C_Master_Wait 0827         __end_of_I2C_Master_Stop 17F0  
              ___lldiv@quotient 0079               I2C_Master_Write@d 0070             EEPROM_Write@Address 0079  
                      stringdir 0800                        stringtab 0800             ReceivePacket_data@i 003F  
       NM_waddress@wlow_address 0072            main@TXOBC_wad_header 00BE  
