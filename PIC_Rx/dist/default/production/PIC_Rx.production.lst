

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Feb 22 16:21:57 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	dabs	1,0x7E,2
    52  0000                     
    53                           ; Version 1.45
    54                           ; Generated 16/11/2017 GMT
    55                           ; 
    56                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC16F887 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     	;# 
    88  0001                     	;# 
    89  0002                     	;# 
    90  0003                     	;# 
    91  0004                     	;# 
    92  0005                     	;# 
    93  0006                     	;# 
    94  0007                     	;# 
    95  0008                     	;# 
    96  0009                     	;# 
    97  000A                     	;# 
    98  000B                     	;# 
    99  000C                     	;# 
   100  000D                     	;# 
   101  000E                     	;# 
   102  000E                     	;# 
   103  000F                     	;# 
   104  0010                     	;# 
   105  0011                     	;# 
   106  0012                     	;# 
   107  0013                     	;# 
   108  0014                     	;# 
   109  0015                     	;# 
   110  0015                     	;# 
   111  0016                     	;# 
   112  0017                     	;# 
   113  0018                     	;# 
   114  0019                     	;# 
   115  001A                     	;# 
   116  001B                     	;# 
   117  001B                     	;# 
   118  001C                     	;# 
   119  001D                     	;# 
   120  001E                     	;# 
   121  001F                     	;# 
   122  0081                     	;# 
   123  0085                     	;# 
   124  0086                     	;# 
   125  0087                     	;# 
   126  0088                     	;# 
   127  0089                     	;# 
   128  008C                     	;# 
   129  008D                     	;# 
   130  008E                     	;# 
   131  008F                     	;# 
   132  0090                     	;# 
   133  0091                     	;# 
   134  0092                     	;# 
   135  0093                     	;# 
   136  0093                     	;# 
   137  0093                     	;# 
   138  0094                     	;# 
   139  0095                     	;# 
   140  0096                     	;# 
   141  0097                     	;# 
   142  0098                     	;# 
   143  0099                     	;# 
   144  009A                     	;# 
   145  009B                     	;# 
   146  009C                     	;# 
   147  009D                     	;# 
   148  009E                     	;# 
   149  009F                     	;# 
   150  0105                     	;# 
   151  0107                     	;# 
   152  0108                     	;# 
   153  0109                     	;# 
   154  010C                     	;# 
   155  010C                     	;# 
   156  010D                     	;# 
   157  010E                     	;# 
   158  010F                     	;# 
   159  0185                     	;# 
   160  0187                     	;# 
   161  0188                     	;# 
   162  0189                     	;# 
   163  018C                     	;# 
   164  018D                     	;# 
   165  0000                     	;# 
   166  0001                     	;# 
   167  0002                     	;# 
   168  0003                     	;# 
   169  0004                     	;# 
   170  0005                     	;# 
   171  0006                     	;# 
   172  0007                     	;# 
   173  0008                     	;# 
   174  0009                     	;# 
   175  000A                     	;# 
   176  000B                     	;# 
   177  000C                     	;# 
   178  000D                     	;# 
   179  000E                     	;# 
   180  000E                     	;# 
   181  000F                     	;# 
   182  0010                     	;# 
   183  0011                     	;# 
   184  0012                     	;# 
   185  0013                     	;# 
   186  0014                     	;# 
   187  0015                     	;# 
   188  0015                     	;# 
   189  0016                     	;# 
   190  0017                     	;# 
   191  0018                     	;# 
   192  0019                     	;# 
   193  001A                     	;# 
   194  001B                     	;# 
   195  001B                     	;# 
   196  001C                     	;# 
   197  001D                     	;# 
   198  001E                     	;# 
   199  001F                     	;# 
   200  0081                     	;# 
   201  0085                     	;# 
   202  0086                     	;# 
   203  0087                     	;# 
   204  0088                     	;# 
   205  0089                     	;# 
   206  008C                     	;# 
   207  008D                     	;# 
   208  008E                     	;# 
   209  008F                     	;# 
   210  0090                     	;# 
   211  0091                     	;# 
   212  0092                     	;# 
   213  0093                     	;# 
   214  0093                     	;# 
   215  0093                     	;# 
   216  0094                     	;# 
   217  0095                     	;# 
   218  0096                     	;# 
   219  0097                     	;# 
   220  0098                     	;# 
   221  0099                     	;# 
   222  009A                     	;# 
   223  009B                     	;# 
   224  009C                     	;# 
   225  009D                     	;# 
   226  009E                     	;# 
   227  009F                     	;# 
   228  0105                     	;# 
   229  0107                     	;# 
   230  0108                     	;# 
   231  0109                     	;# 
   232  010C                     	;# 
   233  010C                     	;# 
   234  010D                     	;# 
   235  010E                     	;# 
   236  010F                     	;# 
   237  0185                     	;# 
   238  0187                     	;# 
   239  0188                     	;# 
   240  0189                     	;# 
   241  018C                     	;# 
   242  018D                     	;# 
   243  0000                     	;# 
   244  0001                     	;# 
   245  0002                     	;# 
   246  0003                     	;# 
   247  0004                     	;# 
   248  0005                     	;# 
   249  0006                     	;# 
   250  0007                     	;# 
   251  0008                     	;# 
   252  0009                     	;# 
   253  000A                     	;# 
   254  000B                     	;# 
   255  000C                     	;# 
   256  000D                     	;# 
   257  000E                     	;# 
   258  000E                     	;# 
   259  000F                     	;# 
   260  0010                     	;# 
   261  0011                     	;# 
   262  0012                     	;# 
   263  0013                     	;# 
   264  0014                     	;# 
   265  0015                     	;# 
   266  0015                     	;# 
   267  0016                     	;# 
   268  0017                     	;# 
   269  0018                     	;# 
   270  0019                     	;# 
   271  001A                     	;# 
   272  001B                     	;# 
   273  001B                     	;# 
   274  001C                     	;# 
   275  001D                     	;# 
   276  001E                     	;# 
   277  001F                     	;# 
   278  0081                     	;# 
   279  0085                     	;# 
   280  0086                     	;# 
   281  0087                     	;# 
   282  0088                     	;# 
   283  0089                     	;# 
   284  008C                     	;# 
   285  008D                     	;# 
   286  008E                     	;# 
   287  008F                     	;# 
   288  0090                     	;# 
   289  0091                     	;# 
   290  0092                     	;# 
   291  0093                     	;# 
   292  0093                     	;# 
   293  0093                     	;# 
   294  0094                     	;# 
   295  0095                     	;# 
   296  0096                     	;# 
   297  0097                     	;# 
   298  0098                     	;# 
   299  0099                     	;# 
   300  009A                     	;# 
   301  009B                     	;# 
   302  009C                     	;# 
   303  009D                     	;# 
   304  009E                     	;# 
   305  009F                     	;# 
   306  0105                     	;# 
   307  0107                     	;# 
   308  0108                     	;# 
   309  0109                     	;# 
   310  010C                     	;# 
   311  010C                     	;# 
   312  010D                     	;# 
   313  010E                     	;# 
   314  010F                     	;# 
   315  0185                     	;# 
   316  0187                     	;# 
   317  0188                     	;# 
   318  0189                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  0000                     	;# 
   322  0001                     	;# 
   323  0002                     	;# 
   324  0003                     	;# 
   325  0004                     	;# 
   326  0005                     	;# 
   327  0006                     	;# 
   328  0007                     	;# 
   329  0008                     	;# 
   330  0009                     	;# 
   331  000A                     	;# 
   332  000B                     	;# 
   333  000C                     	;# 
   334  000D                     	;# 
   335  000E                     	;# 
   336  000E                     	;# 
   337  000F                     	;# 
   338  0010                     	;# 
   339  0011                     	;# 
   340  0012                     	;# 
   341  0013                     	;# 
   342  0014                     	;# 
   343  0015                     	;# 
   344  0015                     	;# 
   345  0016                     	;# 
   346  0017                     	;# 
   347  0018                     	;# 
   348  0019                     	;# 
   349  001A                     	;# 
   350  001B                     	;# 
   351  001B                     	;# 
   352  001C                     	;# 
   353  001D                     	;# 
   354  001E                     	;# 
   355  001F                     	;# 
   356  0081                     	;# 
   357  0085                     	;# 
   358  0086                     	;# 
   359  0087                     	;# 
   360  0088                     	;# 
   361  0089                     	;# 
   362  008C                     	;# 
   363  008D                     	;# 
   364  008E                     	;# 
   365  008F                     	;# 
   366  0090                     	;# 
   367  0091                     	;# 
   368  0092                     	;# 
   369  0093                     	;# 
   370  0093                     	;# 
   371  0093                     	;# 
   372  0094                     	;# 
   373  0095                     	;# 
   374  0096                     	;# 
   375  0097                     	;# 
   376  0098                     	;# 
   377  0099                     	;# 
   378  009A                     	;# 
   379  009B                     	;# 
   380  009C                     	;# 
   381  009D                     	;# 
   382  009E                     	;# 
   383  009F                     	;# 
   384  0105                     	;# 
   385  0107                     	;# 
   386  0108                     	;# 
   387  0109                     	;# 
   388  010C                     	;# 
   389  010C                     	;# 
   390  010D                     	;# 
   391  010E                     	;# 
   392  010F                     	;# 
   393  0185                     	;# 
   394  0187                     	;# 
   395  0188                     	;# 
   396  0189                     	;# 
   397  018C                     	;# 
   398  018D                     	;# 
   399  0000                     	;# 
   400  0001                     	;# 
   401  0002                     	;# 
   402  0003                     	;# 
   403  0004                     	;# 
   404  0005                     	;# 
   405  0006                     	;# 
   406  0007                     	;# 
   407  0008                     	;# 
   408  0009                     	;# 
   409  000A                     	;# 
   410  000B                     	;# 
   411  000C                     	;# 
   412  000D                     	;# 
   413  000E                     	;# 
   414  000E                     	;# 
   415  000F                     	;# 
   416  0010                     	;# 
   417  0011                     	;# 
   418  0012                     	;# 
   419  0013                     	;# 
   420  0014                     	;# 
   421  0015                     	;# 
   422  0015                     	;# 
   423  0016                     	;# 
   424  0017                     	;# 
   425  0018                     	;# 
   426  0019                     	;# 
   427  001A                     	;# 
   428  001B                     	;# 
   429  001B                     	;# 
   430  001C                     	;# 
   431  001D                     	;# 
   432  001E                     	;# 
   433  001F                     	;# 
   434  0081                     	;# 
   435  0085                     	;# 
   436  0086                     	;# 
   437  0087                     	;# 
   438  0088                     	;# 
   439  0089                     	;# 
   440  008C                     	;# 
   441  008D                     	;# 
   442  008E                     	;# 
   443  008F                     	;# 
   444  0090                     	;# 
   445  0091                     	;# 
   446  0092                     	;# 
   447  0093                     	;# 
   448  0093                     	;# 
   449  0093                     	;# 
   450  0094                     	;# 
   451  0095                     	;# 
   452  0096                     	;# 
   453  0097                     	;# 
   454  0098                     	;# 
   455  0099                     	;# 
   456  009A                     	;# 
   457  009B                     	;# 
   458  009C                     	;# 
   459  009D                     	;# 
   460  009E                     	;# 
   461  009F                     	;# 
   462  0105                     	;# 
   463  0107                     	;# 
   464  0108                     	;# 
   465  0109                     	;# 
   466  010C                     	;# 
   467  010C                     	;# 
   468  010D                     	;# 
   469  010E                     	;# 
   470  010F                     	;# 
   471  0185                     	;# 
   472  0187                     	;# 
   473  0188                     	;# 
   474  0189                     	;# 
   475  018C                     	;# 
   476  018D                     	;# 
   477  0000                     	;# 
   478  0001                     	;# 
   479  0002                     	;# 
   480  0003                     	;# 
   481  0004                     	;# 
   482  0005                     	;# 
   483  0006                     	;# 
   484  0007                     	;# 
   485  0008                     	;# 
   486  0009                     	;# 
   487  000A                     	;# 
   488  000B                     	;# 
   489  000C                     	;# 
   490  000D                     	;# 
   491  000E                     	;# 
   492  000E                     	;# 
   493  000F                     	;# 
   494  0010                     	;# 
   495  0011                     	;# 
   496  0012                     	;# 
   497  0013                     	;# 
   498  0014                     	;# 
   499  0015                     	;# 
   500  0015                     	;# 
   501  0016                     	;# 
   502  0017                     	;# 
   503  0018                     	;# 
   504  0019                     	;# 
   505  001A                     	;# 
   506  001B                     	;# 
   507  001B                     	;# 
   508  001C                     	;# 
   509  001D                     	;# 
   510  001E                     	;# 
   511  001F                     	;# 
   512  0081                     	;# 
   513  0085                     	;# 
   514  0086                     	;# 
   515  0087                     	;# 
   516  0088                     	;# 
   517  0089                     	;# 
   518  008C                     	;# 
   519  008D                     	;# 
   520  008E                     	;# 
   521  008F                     	;# 
   522  0090                     	;# 
   523  0091                     	;# 
   524  0092                     	;# 
   525  0093                     	;# 
   526  0093                     	;# 
   527  0093                     	;# 
   528  0094                     	;# 
   529  0095                     	;# 
   530  0096                     	;# 
   531  0097                     	;# 
   532  0098                     	;# 
   533  0099                     	;# 
   534  009A                     	;# 
   535  009B                     	;# 
   536  009C                     	;# 
   537  009D                     	;# 
   538  009E                     	;# 
   539  009F                     	;# 
   540  0105                     	;# 
   541  0107                     	;# 
   542  0108                     	;# 
   543  0109                     	;# 
   544  010C                     	;# 
   545  010C                     	;# 
   546  010D                     	;# 
   547  010E                     	;# 
   548  010F                     	;# 
   549  0185                     	;# 
   550  0187                     	;# 
   551  0188                     	;# 
   552  0189                     	;# 
   553  018C                     	;# 
   554  018D                     	;# 
   555  0000                     	;# 
   556  0001                     	;# 
   557  0002                     	;# 
   558  0003                     	;# 
   559  0004                     	;# 
   560  0005                     	;# 
   561  0006                     	;# 
   562  0007                     	;# 
   563  0008                     	;# 
   564  0009                     	;# 
   565  000A                     	;# 
   566  000B                     	;# 
   567  000C                     	;# 
   568  000D                     	;# 
   569  000E                     	;# 
   570  000E                     	;# 
   571  000F                     	;# 
   572  0010                     	;# 
   573  0011                     	;# 
   574  0012                     	;# 
   575  0013                     	;# 
   576  0014                     	;# 
   577  0015                     	;# 
   578  0015                     	;# 
   579  0016                     	;# 
   580  0017                     	;# 
   581  0018                     	;# 
   582  0019                     	;# 
   583  001A                     	;# 
   584  001B                     	;# 
   585  001B                     	;# 
   586  001C                     	;# 
   587  001D                     	;# 
   588  001E                     	;# 
   589  001F                     	;# 
   590  0081                     	;# 
   591  0085                     	;# 
   592  0086                     	;# 
   593  0087                     	;# 
   594  0088                     	;# 
   595  0089                     	;# 
   596  008C                     	;# 
   597  008D                     	;# 
   598  008E                     	;# 
   599  008F                     	;# 
   600  0090                     	;# 
   601  0091                     	;# 
   602  0092                     	;# 
   603  0093                     	;# 
   604  0093                     	;# 
   605  0093                     	;# 
   606  0094                     	;# 
   607  0095                     	;# 
   608  0096                     	;# 
   609  0097                     	;# 
   610  0098                     	;# 
   611  0099                     	;# 
   612  009A                     	;# 
   613  009B                     	;# 
   614  009C                     	;# 
   615  009D                     	;# 
   616  009E                     	;# 
   617  009F                     	;# 
   618  0105                     	;# 
   619  0107                     	;# 
   620  0108                     	;# 
   621  0109                     	;# 
   622  010C                     	;# 
   623  010C                     	;# 
   624  010D                     	;# 
   625  010E                     	;# 
   626  010F                     	;# 
   627  0185                     	;# 
   628  0187                     	;# 
   629  0188                     	;# 
   630  0189                     	;# 
   631  018C                     	;# 
   632  018D                     	;# 
   633  0000                     	;# 
   634  0001                     	;# 
   635  0002                     	;# 
   636  0003                     	;# 
   637  0004                     	;# 
   638  0005                     	;# 
   639  0006                     	;# 
   640  0007                     	;# 
   641  0008                     	;# 
   642  0009                     	;# 
   643  000A                     	;# 
   644  000B                     	;# 
   645  000C                     	;# 
   646  000D                     	;# 
   647  000E                     	;# 
   648  000E                     	;# 
   649  000F                     	;# 
   650  0010                     	;# 
   651  0011                     	;# 
   652  0012                     	;# 
   653  0013                     	;# 
   654  0014                     	;# 
   655  0015                     	;# 
   656  0015                     	;# 
   657  0016                     	;# 
   658  0017                     	;# 
   659  0018                     	;# 
   660  0019                     	;# 
   661  001A                     	;# 
   662  001B                     	;# 
   663  001B                     	;# 
   664  001C                     	;# 
   665  001D                     	;# 
   666  001E                     	;# 
   667  001F                     	;# 
   668  0081                     	;# 
   669  0085                     	;# 
   670  0086                     	;# 
   671  0087                     	;# 
   672  0088                     	;# 
   673  0089                     	;# 
   674  008C                     	;# 
   675  008D                     	;# 
   676  008E                     	;# 
   677  008F                     	;# 
   678  0090                     	;# 
   679  0091                     	;# 
   680  0092                     	;# 
   681  0093                     	;# 
   682  0093                     	;# 
   683  0093                     	;# 
   684  0094                     	;# 
   685  0095                     	;# 
   686  0096                     	;# 
   687  0097                     	;# 
   688  0098                     	;# 
   689  0099                     	;# 
   690  009A                     	;# 
   691  009B                     	;# 
   692  009C                     	;# 
   693  009D                     	;# 
   694  009E                     	;# 
   695  009F                     	;# 
   696  0105                     	;# 
   697  0107                     	;# 
   698  0108                     	;# 
   699  0109                     	;# 
   700  010C                     	;# 
   701  010C                     	;# 
   702  010D                     	;# 
   703  010E                     	;# 
   704  010F                     	;# 
   705  0185                     	;# 
   706  0187                     	;# 
   707  0188                     	;# 
   708  0189                     	;# 
   709  018C                     	;# 
   710  018D                     	;# 
   711  0000                     	;# 
   712  0001                     	;# 
   713  0002                     	;# 
   714  0003                     	;# 
   715  0004                     	;# 
   716  0005                     	;# 
   717  0006                     	;# 
   718  0007                     	;# 
   719  0008                     	;# 
   720  0009                     	;# 
   721  000A                     	;# 
   722  000B                     	;# 
   723  000C                     	;# 
   724  000D                     	;# 
   725  000E                     	;# 
   726  000E                     	;# 
   727  000F                     	;# 
   728  0010                     	;# 
   729  0011                     	;# 
   730  0012                     	;# 
   731  0013                     	;# 
   732  0014                     	;# 
   733  0015                     	;# 
   734  0015                     	;# 
   735  0016                     	;# 
   736  0017                     	;# 
   737  0018                     	;# 
   738  0019                     	;# 
   739  001A                     	;# 
   740  001B                     	;# 
   741  001B                     	;# 
   742  001C                     	;# 
   743  001D                     	;# 
   744  001E                     	;# 
   745  001F                     	;# 
   746  0081                     	;# 
   747  0085                     	;# 
   748  0086                     	;# 
   749  0087                     	;# 
   750  0088                     	;# 
   751  0089                     	;# 
   752  008C                     	;# 
   753  008D                     	;# 
   754  008E                     	;# 
   755  008F                     	;# 
   756  0090                     	;# 
   757  0091                     	;# 
   758  0092                     	;# 
   759  0093                     	;# 
   760  0093                     	;# 
   761  0093                     	;# 
   762  0094                     	;# 
   763  0095                     	;# 
   764  0096                     	;# 
   765  0097                     	;# 
   766  0098                     	;# 
   767  0099                     	;# 
   768  009A                     	;# 
   769  009B                     	;# 
   770  009C                     	;# 
   771  009D                     	;# 
   772  009E                     	;# 
   773  009F                     	;# 
   774  0105                     	;# 
   775  0107                     	;# 
   776  0108                     	;# 
   777  0109                     	;# 
   778  010C                     	;# 
   779  010C                     	;# 
   780  010D                     	;# 
   781  010E                     	;# 
   782  010F                     	;# 
   783  0185                     	;# 
   784  0187                     	;# 
   785  0188                     	;# 
   786  0189                     	;# 
   787  018C                     	;# 
   788  018D                     	;# 
   789  0000                     	;# 
   790  0001                     	;# 
   791  0002                     	;# 
   792  0003                     	;# 
   793  0004                     	;# 
   794  0005                     	;# 
   795  0006                     	;# 
   796  0007                     	;# 
   797  0008                     	;# 
   798  0009                     	;# 
   799  000A                     	;# 
   800  000B                     	;# 
   801  000C                     	;# 
   802  000D                     	;# 
   803  000E                     	;# 
   804  000E                     	;# 
   805  000F                     	;# 
   806  0010                     	;# 
   807  0011                     	;# 
   808  0012                     	;# 
   809  0013                     	;# 
   810  0014                     	;# 
   811  0015                     	;# 
   812  0015                     	;# 
   813  0016                     	;# 
   814  0017                     	;# 
   815  0018                     	;# 
   816  0019                     	;# 
   817  001A                     	;# 
   818  001B                     	;# 
   819  001B                     	;# 
   820  001C                     	;# 
   821  001D                     	;# 
   822  001E                     	;# 
   823  001F                     	;# 
   824  0081                     	;# 
   825  0085                     	;# 
   826  0086                     	;# 
   827  0087                     	;# 
   828  0088                     	;# 
   829  0089                     	;# 
   830  008C                     	;# 
   831  008D                     	;# 
   832  008E                     	;# 
   833  008F                     	;# 
   834  0090                     	;# 
   835  0091                     	;# 
   836  0092                     	;# 
   837  0093                     	;# 
   838  0093                     	;# 
   839  0093                     	;# 
   840  0094                     	;# 
   841  0095                     	;# 
   842  0096                     	;# 
   843  0097                     	;# 
   844  0098                     	;# 
   845  0099                     	;# 
   846  009A                     	;# 
   847  009B                     	;# 
   848  009C                     	;# 
   849  009D                     	;# 
   850  009E                     	;# 
   851  009F                     	;# 
   852  0105                     	;# 
   853  0107                     	;# 
   854  0108                     	;# 
   855  0109                     	;# 
   856  010C                     	;# 
   857  010C                     	;# 
   858  010D                     	;# 
   859  010E                     	;# 
   860  010F                     	;# 
   861  0185                     	;# 
   862  0187                     	;# 
   863  0188                     	;# 
   864  0189                     	;# 
   865  018C                     	;# 
   866  018D                     	;# 
   867                           
   868                           	psect	idataBANK1
   869  089C                     __pidataBANK1:	
   870                           
   871                           ;initializer for _FMRX_Nref
   872  089C  3400               	retlw	0
   873  089D  340A               	retlw	10
   874                           
   875                           ;initializer for _CWTX_Nref
   876  089E  34A0               	retlw	160
   877  089F  3400               	retlw	0
   878                           
   879                           ;initializer for _FMTX_Nref
   880  08A0  3400               	retlw	0
   881  08A1  340A               	retlw	10
   882                           
   883                           ;initializer for _CWTX_Nprg
   884  08A2  3400               	retlw	0
   885  08A3  3400               	retlw	0
   886  08A4  3401               	retlw	1
   887  08A5  3400               	retlw	0
   888  08A6  3407               	retlw	7
   889  08A7  3400               	retlw	0
   890  08A8  3404               	retlw	4
   891  08A9  3400               	retlw	0
   892  08AA  3407               	retlw	7
   893  08AB  3400               	retlw	0
   894                           
   895                           ;initializer for _FMTX_Nprg
   896  08AC  3408               	retlw	8
   897  08AD  3400               	retlw	0
   898  08AE  3407               	retlw	7
   899  08AF  3400               	retlw	0
   900  08B0  3403               	retlw	3
   901  08B1  3400               	retlw	0
   902  08B2  3400               	retlw	0
   903  08B3  3400               	retlw	0
   904  08B4  3400               	retlw	0
   905  08B5  3400               	retlw	0
   906                           
   907                           	psect	idataBANK2
   908  0883                     __pidataBANK2:	
   909                           
   910                           ;initializer for _eDataField
   911  0883  3448               	retlw	72
   912  0884  3465               	retlw	101
   913  0885  346C               	retlw	108
   914  0886  346C               	retlw	108
   915  0887  346F               	retlw	111
   916  0888  3421               	retlw	33
   917  0889  3420               	retlw	32
   918  088A  3449               	retlw	73
   919  088B  3427               	retlw	39
   920  088C  346D               	retlw	109
   921  088D  3420               	retlw	32
   922  088E  344F               	retlw	79
   923  088F  3472               	retlw	114
   924  0890  3469               	retlw	105
   925  0891  3467               	retlw	103
   926  0892  3461               	retlw	97
   927  0893  346D               	retlw	109
   928  0894  3469               	retlw	105
   929  0895  3453               	retlw	83
   930  0896  3461               	retlw	97
   931  0897  3474               	retlw	116
   932  0898  3431               	retlw	49
   933  0899  3421               	retlw	33
   934  089A  3421               	retlw	33
   935  089B  3400               	retlw	0
   936                           
   937                           	psect	idataBANK3
   938  08D3                     __pidataBANK3:	
   939                           
   940                           ;initializer for main@F2016
   941  08D3  3402               	retlw	2
   942  08D4  3400               	retlw	0
   943  08D5  3404               	retlw	4
   944  08D6  3400               	retlw	0
   945  08D7  3408               	retlw	8
   946  08D8  3400               	retlw	0
   947  08D9  3408               	retlw	8
   948  08DA  3400               	retlw	0
   949  08DB  3407               	retlw	7
   950  08DC  3400               	retlw	0
   951                           
   952                           ;initializer for main@F2014
   953  08DD  3400               	retlw	0
   954  08DE  3400               	retlw	0
   955  08DF  3401               	retlw	1
   956  08E0  3400               	retlw	0
   957  08E1  3407               	retlw	7
   958  08E2  3400               	retlw	0
   959  08E3  3404               	retlw	4
   960  08E4  3400               	retlw	0
   961  08E5  3407               	retlw	7
   962  08E6  3400               	retlw	0
   963                           
   964                           ;initializer for main@F2012
   965  08E7  3408               	retlw	8
   966  08E8  3400               	retlw	0
   967  08E9  3407               	retlw	7
   968  08EA  3400               	retlw	0
   969  08EB  3403               	retlw	3
   970  08EC  3400               	retlw	0
   971  08ED  3400               	retlw	0
   972  08EE  3400               	retlw	0
   973  08EF  3400               	retlw	0
   974  08F0  3400               	retlw	0
   975                           
   976                           ;initializer for _FMRX_Nprg
   977  08F1  3402               	retlw	2
   978  08F2  3400               	retlw	0
   979  08F3  3404               	retlw	4
   980  08F4  3400               	retlw	0
   981  08F5  3408               	retlw	8
   982  08F6  3400               	retlw	0
   983  08F7  3408               	retlw	8
   984  08F8  3400               	retlw	0
   985  08F9  3407               	retlw	7
   986  08FA  3400               	retlw	0
   987                           
   988                           	psect	strings
   989  0800                     __pstrings:	
   990  0800                     stringtab:	
   991  0800                     __stringtab:	
   992  0800                     stringcode:	
   993                           ;	String table - string pointers are 1 byte each
   994                           
   995  0800                     stringdir:	
   996  0800  3008               	movlw	high stringdir
   997  0801  008A               	movwf	10
   998  0802  0804               	movf	4,w
   999  0803  0A84               	incf	4,f
  1000  0804  0782               	addwf	2,f
  1001  0805                     __stringbase:	
  1002  0805  3400               	retlw	0
  1003  0806                     __end_of__stringtab:	
  1004  0806                     _commandSize:	
  1005  0806  3420               	retlw	32
  1006  0807  3400               	retlw	0
  1007  0808                     __end_of_commandSize:	
  1008  000E                     _TMR1	set	14
  1009  0010                     _T1CONbits	set	16
  1010  000C                     _PIR1bits	set	12
  1011  000B                     _INTCONbits	set	11
  1012  0008                     _PORTDbits	set	8
  1013  0007                     _PORTCbits	set	7
  1014  0009                     _PORTEbits	set	9
  1015  0005                     _PORTAbits	set	5
  1016  0013                     _SSPBUF	set	19
  1017  0014                     _SSPCON	set	20
  1018  0003                     _STATUS	set	3
  1019  0009                     _PORTE	set	9
  1020  0008                     _PORTD	set	8
  1021  0007                     _PORTC	set	7
  1022  0006                     _PORTB	set	6
  1023  0005                     _PORTA	set	5
  1024  0019                     _TXREG	set	25
  1025  001A                     _RCREG	set	26
  1026  0029                     _RA1	set	41
  1027  0034                     _RB4	set	52
  1028  0032                     _RB2	set	50
  1029  0035                     _RB5	set	53
  1030  003A                     _RC2	set	58
  1031  003D                     _RC5	set	61
  1032  0064                     _TXIF	set	100
  1033  00C1                     _OERR	set	193
  1034  00C2                     _FERR	set	194
  1035  00C6                     _RX9	set	198
  1036  0065                     _RCIF	set	101
  1037  00C5                     _SREN	set	197
  1038  00C4                     _CREN	set	196
  1039  00C7                     _SPEN	set	199
  1040  008C                     _PIE1bits	set	140
  1041  0094                     _SSPSTAT	set	148
  1042  0093                     _SSPADD	set	147
  1043  0091                     _SSPCON2	set	145
  1044  0089                     _TRISE	set	137
  1045  0088                     _TRISD	set	136
  1046  0087                     _TRISC	set	135
  1047  0086                     _TRISB	set	134
  1048  0085                     _TRISA	set	133
  1049  0099                     _SPBRG	set	153
  1050  048C                     _ACKEN	set	1164
  1051  048D                     _ACKDT	set	1165
  1052  048B                     _RCEN	set	1163
  1053  048A                     _PEN	set	1162
  1054  0489                     _RSEN	set	1161
  1055  0488                     _SEN	set	1160
  1056  04C5                     _TXEN	set	1221
  1057  04C6                     _TX9	set	1222
  1058  0465                     _RCIE	set	1125
  1059  0464                     _TXIE	set	1124
  1060  04C4                     _SYNC	set	1220
  1061  04C2                     _BRGH	set	1218
  1062  0189                     _ANSELH	set	393
  1063  0188                     _ANSEL	set	392
  1064  0808                     STR_7:	
  1065  0808  344A               	retlw	74	;'J'
  1066  0809  3451               	retlw	81	;'Q'
  1067  080A  3431               	retlw	49	;'1'
  1068  080B  345A               	retlw	90	;'Z'
  1069  080C  3448               	retlw	72	;'H'
  1070  080D  3458               	retlw	88	;'X'
  1071  080E  3400               	retlw	0
  1072  080F                     STR_1:	
  1073  080F  344A               	retlw	74	;'J'
  1074  0810  3451               	retlw	81	;'Q'
  1075  0811  3431               	retlw	49	;'1'
  1076  0812  3459               	retlw	89	;'Y'
  1077  0813  3443               	retlw	67	;'C'
  1078  0814  345A               	retlw	90	;'Z'
  1079  0815  3400               	retlw	0
  1080  0808                     
  1081                           ; #config settings
  1082  0000                     
  1083                           	psect	cinit
  1084  07B3                     start_initialization:	
  1085  07B3                     __initialization:	
  1086                           
  1087                           ; Initialize objects allocated to BANK3
  1088  07B3  1783               	bsf	3,7	;select IRP bank2
  1089  07B4  30EA               	movlw	low (__pdataBANK3+40)
  1090  07B5  00FD               	movwf	btemp+-1
  1091  07B6  3008               	movlw	high __pidataBANK3
  1092  07B7  00FE               	movwf	btemp
  1093  07B8  30D3               	movlw	low __pidataBANK3
  1094  07B9  00FF               	movwf	btemp+1
  1095  07BA  30C2               	movlw	low __pdataBANK3
  1096  07BB  0084               	movwf	4
  1097  07BC  120A  158A  2036  120A  118A  	fcall	init_ram0
  1098                           
  1099                           ; Initialize objects allocated to BANK2
  1100  07C1  3059               	movlw	low (__pdataBANK2+25)
  1101  07C2  00FD               	movwf	btemp+-1
  1102  07C3  3008               	movlw	high __pidataBANK2
  1103  07C4  00FE               	movwf	btemp
  1104  07C5  3083               	movlw	low __pidataBANK2
  1105  07C6  00FF               	movwf	btemp+1
  1106  07C7  3040               	movlw	low __pdataBANK2
  1107  07C8  0084               	movwf	4
  1108  07C9  120A  158A  2036  120A  118A  	fcall	init_ram0
  1109                           
  1110                           ; Initialize objects allocated to BANK1
  1111  07CE  1383               	bcf	3,7	;select IRP bank0
  1112  07CF  30DB               	movlw	low (__pdataBANK1+26)
  1113  07D0  00FD               	movwf	btemp+-1
  1114  07D1  3008               	movlw	high __pidataBANK1
  1115  07D2  00FE               	movwf	btemp
  1116  07D3  309C               	movlw	low __pidataBANK1
  1117  07D4  00FF               	movwf	btemp+1
  1118  07D5  30C1               	movlw	low __pdataBANK1
  1119  07D6  0084               	movwf	4
  1120  07D7  120A  158A  2036  120A  118A  	fcall	init_ram0
  1121                           
  1122                           ; Clear objects allocated to BANK3
  1123  07DC  1783               	bsf	3,7	;select IRP bank2
  1124  07DD  3090               	movlw	low __pbssBANK3
  1125  07DE  0084               	movwf	4
  1126  07DF  30C2               	movlw	low (__pbssBANK3+50)
  1127  07E0  120A  158A  2021  120A  118A  	fcall	clear_ram0
  1128                           
  1129                           ; Clear objects allocated to BANK2
  1130  07E5  3010               	movlw	low __pbssBANK2
  1131  07E6  0084               	movwf	4
  1132  07E7  3040               	movlw	low (__pbssBANK2+48)
  1133  07E8  120A  158A  2021  120A  118A  	fcall	clear_ram0
  1134                           
  1135                           ; Clear objects allocated to BANK1
  1136  07ED  1383               	bcf	3,7	;select IRP bank0
  1137  07EE  30DB               	movlw	low __pbssBANK1
  1138  07EF  0084               	movwf	4
  1139  07F0  30E8               	movlw	low (__pbssBANK1+13)
  1140  07F1  120A  158A  2021  120A  118A  	fcall	clear_ram0
  1141                           
  1142                           ; Clear objects allocated to BANK0
  1143  07F6  3066               	movlw	low __pbssBANK0
  1144  07F7  0084               	movwf	4
  1145  07F8  3070               	movlw	low (__pbssBANK0+10)
  1146  07F9  120A  158A  2021   	fcall	clear_ram0
  1147  07FC                     end_of_initialization:	
  1148                           ;End of C runtime variable initialization code
  1149                           
  1150  07FC                     __end_of__initialization:	
  1151  07FC  0183               	clrf	3
  1152  07FD  120A  158A  2E2B   	ljmp	_main	;jump to C main() function
  1153                           
  1154                           	psect	bssBANK0
  1155  0066                     __pbssBANK0:	
  1156  0066                     _eflag:	
  1157  0066                     	ds	2
  1158  0068                     _dPacketnum:	
  1159  0068                     	ds	2
  1160  006A                     _rcv_state:	
  1161  006A                     	ds	2
  1162  006C                     _efcshi:	
  1163  006C                     	ds	1
  1164  006D                     _efcslo:	
  1165  006D                     	ds	1
  1166  006E                     _dfcslo:	
  1167  006E                     	ds	1
  1168  006F                     _dfcshi:	
  1169  006F                     	ds	1
  1170                           
  1171                           	psect	bssBANK1
  1172  00DB                     __pbssBANK1:	
  1173  00DB                     _ePacket:	
  1174  00DB                     	ds	5
  1175  00E0                     _ebitstatus:	
  1176  00E0                     	ds	2
  1177  00E2                     _estuff:	
  1178  00E2                     	ds	2
  1179  00E4                     _efcsflag:	
  1180  00E4                     	ds	2
  1181  00E6                     getbit@oldbit:	
  1182  00E6                     	ds	2
  1183                           
  1184                           	psect	dataBANK1
  1185  00C1                     __pdataBANK1:	
  1186  00C1                     _FMRX_Nref:	
  1187  00C1                     	ds	2
  1188  00C3                     _CWTX_Nref:	
  1189  00C3                     	ds	2
  1190  00C5                     _FMTX_Nref:	
  1191  00C5                     	ds	2
  1192  00C7                     _CWTX_Nprg:	
  1193  00C7                     	ds	10
  1194  00D1                     _FMTX_Nprg:	
  1195  00D1                     	ds	10
  1196                           
  1197                           	psect	bssBANK3
  1198  0190                     __pbssBANK3:	
  1199  0190                     _dPacket:	
  1200  0190                     	ds	50
  1201                           
  1202                           	psect	dataBANK3
  1203  01C2                     __pdataBANK3:	
  1204  01C2                     main@F2016:	
  1205  01C2                     	ds	10
  1206  01CC                     main@F2014:	
  1207  01CC                     	ds	10
  1208  01D6                     main@F2012:	
  1209  01D6                     	ds	10
  1210  01E0                     _FMRX_Nprg:	
  1211  01E0                     	ds	10
  1212                           
  1213                           	psect	bssBANK2
  1214  0110                     __pbssBANK2:	
  1215  0110                     _EEPROMData:	
  1216  0110                     	ds	32
  1217  0130                     _dData:	
  1218  0130                     	ds	16
  1219                           
  1220                           	psect	dataBANK2
  1221  0140                     __pdataBANK2:	
  1222  0140                     _eDataField:	
  1223  0140                     	ds	25
  1224                           
  1225                           	psect	inittext
  1226  0832                     init_fetch0:	
  1227                           ;	Called with low address in FSR and high address in W
  1228                           
  1229  0832  087E               	movf	126,w
  1230  0833  008A               	movwf	10
  1231  0834  087F               	movf	127,w
  1232  0835  0082               	movwf	2
  1233  0836                     init_ram0:	
  1234                           ;Called with:
  1235                           ;	high address of idata address in btemp 
  1236                           ;	low address of idata address in btemp+1 
  1237                           ;	low address of data in FSR
  1238                           ;	high address + 1 of data in btemp-1
  1239                           
  1240  0836  2032  120A  158A   	fcall	init_fetch0
  1241  0839  0080               	movwf	0
  1242  083A  0A84               	incf	4,f
  1243  083B  0804               	movf	4,w
  1244  083C  067D               	xorwf	125,w
  1245  083D  1903               	btfsc	3,2
  1246  083E  3400               	retlw	0
  1247  083F  0AFF               	incf	127,f
  1248  0840  1903               	btfsc	3,2
  1249  0841  0AFE               	incf	126,f
  1250  0842  2836               	goto	init_ram0
  1251                           
  1252                           	psect	clrtext
  1253  0821                     clear_ram0:	
  1254                           ;	Called with FSR containing the base address, and
  1255                           ;	W with the last address+1
  1256                           
  1257  0821  0064               	clrwdt	;clear the watchdog before getting into this loop
  1258  0822                     clrloop0:	
  1259  0822  0180               	clrf	0	;clear RAM location pointed to by FSR
  1260  0823  0A84               	incf	4,f	;increment pointer
  1261  0824  0604               	xorwf	4,w	;XOR with final address
  1262  0825  1903               	btfsc	3,2	;have we reached the end yet?
  1263  0826  3400               	retlw	0	;all done for this memory range, return
  1264  0827  0604               	xorwf	4,w	;XOR again to restore value
  1265  0828  2822               	goto	clrloop0	;do the next byte
  1266                           
  1267                           	psect	cstackBANK1
  1268  00A0                     __pcstackBANK1:	
  1269  00A0                     main@FMTX_Nprg:	
  1270                           
  1271                           ; 10 bytes @ 0x0
  1272  00A0                     	ds	10
  1273  00AA                     main@CWTX_Nprg:	
  1274                           
  1275                           ; 10 bytes @ 0xA
  1276  00AA                     	ds	10
  1277  00B4                     main@FMRX_Nprg:	
  1278                           
  1279                           ; 10 bytes @ 0x14
  1280  00B4                     	ds	10
  1281  00BE                     main@TXOBC_wad_header:	
  1282                           
  1283                           ; 1 bytes @ 0x1E
  1284  00BE                     	ds	1
  1285  00BF                     main@NM_wad_header:	
  1286                           
  1287                           ; 1 bytes @ 0x1F
  1288  00BF                     	ds	1
  1289  00C0                     main@dData:	
  1290                           
  1291                           ; 1 bytes @ 0x20
  1292  00C0                     	ds	1
  1293                           
  1294                           	psect	cstackCOMMON
  1295  0070                     __pcstackCOMMON:	
  1296  0070                     ?_ReceivePacket_data:	
  1297  0070                     ?_Reset_EPS:	
  1298                           ; 1 bytes @ 0x0
  1299                           
  1300  0070                     ??_Reset_EPS:	
  1301                           ; 1 bytes @ 0x0
  1302                           
  1303  0070                     ?__NOP:	
  1304                           ; 1 bytes @ 0x0
  1305                           
  1306  0070                     ??__NOP:	
  1307                           ; 1 bytes @ 0x0
  1308                           
  1309  0070                     ?_Init_SERIAL:	
  1310                           ; 1 bytes @ 0x0
  1311                           
  1312  0070                     ??_Init_SERIAL:	
  1313                           ; 1 bytes @ 0x0
  1314                           
  1315  0070                     ?_putch:	
  1316                           ; 1 bytes @ 0x0
  1317                           
  1318  0070                     ??_putch:	
  1319                           ; 1 bytes @ 0x0
  1320                           
  1321  0070                     ?_Init_MPU:	
  1322                           ; 1 bytes @ 0x0
  1323                           
  1324  0070                     ??_Init_MPU:	
  1325                           ; 1 bytes @ 0x0
  1326                           
  1327  0070                     ?_waitFlag:	
  1328                           ; 1 bytes @ 0x0
  1329                           
  1330  0070                     ?_getdata:	
  1331                           ; 1 bytes @ 0x0
  1332                           
  1333  0070                     ?_main:	
  1334                           ; 1 bytes @ 0x0
  1335                           
  1336  0070                     ?_I2C_Master_Wait:	
  1337                           ; 1 bytes @ 0x0
  1338                           
  1339  0070                     ??_I2C_Master_Wait:	
  1340                           ; 1 bytes @ 0x0
  1341                           
  1342  0070                     ?_I2C_Master_Start:	
  1343                           ; 1 bytes @ 0x0
  1344                           
  1345  0070                     ??_I2C_Master_Start:	
  1346                           ; 1 bytes @ 0x0
  1347                           
  1348  0070                     ?_I2C_Master_Stop:	
  1349                           ; 1 bytes @ 0x0
  1350                           
  1351  0070                     ??_I2C_Master_Stop:	
  1352                           ; 1 bytes @ 0x0
  1353                           
  1354  0070                     ?_I2C_Master_Write:	
  1355                           ; 1 bytes @ 0x0
  1356                           
  1357  0070                     ?_getbit:	
  1358                           ; 1 bytes @ 0x0
  1359                           
  1360  0070                     ?_fcscheck:	
  1361                           ; 2 bytes @ 0x0
  1362                           
  1363  0070                     ?___awdiv:	
  1364                           ; 2 bytes @ 0x0
  1365                           
  1366  0070                     ?___lldiv:	
  1367                           ; 2 bytes @ 0x0
  1368                           
  1369  0070                     putch@byte:	
  1370                           ; 4 bytes @ 0x0
  1371                           
  1372  0070                     I2C_Master_Write@d:	
  1373                           ; 1 bytes @ 0x0
  1374                           
  1375  0070                     __NOP@i:	
  1376                           ; 2 bytes @ 0x0
  1377                           
  1378  0070                     ___awdiv@divisor:	
  1379                           ; 2 bytes @ 0x0
  1380                           
  1381  0070                     ___lldiv@divisor:	
  1382                           ; 2 bytes @ 0x0
  1383                           
  1384                           
  1385                           ; 4 bytes @ 0x0
  1386  0070                     	ds	1
  1387  0071                     ?_NM_waddress:	
  1388  0071                     ?_TXOBC_waddress:	
  1389                           ; 1 bytes @ 0x1
  1390                           
  1391  0071                     NM_waddress@whigh_address:	
  1392                           ; 1 bytes @ 0x1
  1393                           
  1394  0071                     TXOBC_waddress@whigh_address:	
  1395                           ; 1 bytes @ 0x1
  1396                           
  1397                           
  1398                           ; 1 bytes @ 0x1
  1399  0071                     	ds	1
  1400  0072                     ?_EEPROM_Write:	
  1401  0072                     ??_getbit:	
  1402                           ; 1 bytes @ 0x2
  1403                           
  1404  0072                     ??_fcscheck:	
  1405                           ; 1 bytes @ 0x2
  1406                           
  1407  0072                     ??_I2C_Master_Write:	
  1408                           ; 1 bytes @ 0x2
  1409                           
  1410  0072                     ?_L_OUT:	
  1411                           ; 1 bytes @ 0x2
  1412                           
  1413  0072                     ?_H_OUT:	
  1414                           ; 1 bytes @ 0x2
  1415                           
  1416  0072                     ?_STBOUT:	
  1417                           ; 1 bytes @ 0x2
  1418                           
  1419  0072                     NM_waddress@wlow_address:	
  1420                           ; 1 bytes @ 0x2
  1421                           
  1422  0072                     TXOBC_waddress@wlow_address:	
  1423                           ; 1 bytes @ 0x2
  1424                           
  1425  0072                     EEPROM_Write@high_address:	
  1426                           ; 1 bytes @ 0x2
  1427                           
  1428  0072                     L_OUT@fmcwtxrx:	
  1429                           ; 1 bytes @ 0x2
  1430                           
  1431  0072                     H_OUT@fmcwtxrx:	
  1432                           ; 2 bytes @ 0x2
  1433                           
  1434  0072                     STBOUT@fmcwtxrx:	
  1435                           ; 2 bytes @ 0x2
  1436                           
  1437  0072                     ___awdiv@dividend:	
  1438                           ; 2 bytes @ 0x2
  1439                           
  1440                           
  1441                           ; 2 bytes @ 0x2
  1442  0072                     	ds	1
  1443  0073                     ??_NM_waddress:	
  1444  0073                     ??_TXOBC_waddress:	
  1445                           ; 1 bytes @ 0x3
  1446                           
  1447  0073                     NM_waddress@NM_wad_header:	
  1448                           ; 1 bytes @ 0x3
  1449                           
  1450  0073                     EEPROM_Write@low_address:	
  1451                           ; 1 bytes @ 0x3
  1452                           
  1453                           
  1454                           ; 1 bytes @ 0x3
  1455  0073                     	ds	1
  1456  0074                     ??_L_OUT:	
  1457  0074                     ??_H_OUT:	
  1458                           ; 1 bytes @ 0x4
  1459                           
  1460  0074                     ??_STBOUT:	
  1461                           ; 1 bytes @ 0x4
  1462                           
  1463  0074                     ?_OPINIT:	
  1464                           ; 1 bytes @ 0x4
  1465                           
  1466  0074                     ??___awdiv:	
  1467                           ; 1 bytes @ 0x4
  1468                           
  1469  0074                     fcscheck@bt:	
  1470                           ; 1 bytes @ 0x4
  1471                           
  1472  0074                     EEPROM_Write@data:	
  1473                           ; 1 bytes @ 0x4
  1474                           
  1475  0074                     getbit@i:	
  1476                           ; 1 bytes @ 0x4
  1477                           
  1478  0074                     OPINIT@fmcwtxrx:	
  1479                           ; 2 bytes @ 0x4
  1480                           
  1481  0074                     ___lldiv@dividend:	
  1482                           ; 2 bytes @ 0x4
  1483                           
  1484                           
  1485                           ; 4 bytes @ 0x4
  1486  0074                     	ds	1
  1487  0075                     ??_EEPROM_Write:	
  1488  0075                     TXOBC_waddress@TXOBC_wad_header:	
  1489                           ; 1 bytes @ 0x5
  1490                           
  1491  0075                     ___awdiv@counter:	
  1492                           ; 1 bytes @ 0x5
  1493                           
  1494  0075                     fcscheck@i:	
  1495                           ; 1 bytes @ 0x5
  1496                           
  1497                           
  1498                           ; 2 bytes @ 0x5
  1499  0075                     	ds	1
  1500  0076                     ??_waitFlag:	
  1501  0076                     ??_getdata:	
  1502                           ; 1 bytes @ 0x6
  1503                           
  1504  0076                     ??_OPINIT:	
  1505                           ; 1 bytes @ 0x6
  1506                           
  1507  0076                     ___awdiv@sign:	
  1508                           ; 1 bytes @ 0x6
  1509                           
  1510                           
  1511                           ; 1 bytes @ 0x6
  1512  0076                     	ds	1
  1513  0077                     fcscheck@i_149:	
  1514  0077                     ___awdiv@quotient:	
  1515                           ; 2 bytes @ 0x7
  1516                           
  1517                           
  1518                           ; 2 bytes @ 0x7
  1519  0077                     	ds	1
  1520  0078                     ??___lldiv:	
  1521  0078                     EEPROM_Write@EEPROM_address:	
  1522                           ; 1 bytes @ 0x8
  1523                           
  1524                           
  1525                           ; 1 bytes @ 0x8
  1526  0078                     	ds	1
  1527  0079                     ?_OUTFQ:	
  1528  0079                     ?_RFDOUT:	
  1529                           ; 1 bytes @ 0x9
  1530                           
  1531  0079                     fcscheck@byte:	
  1532                           ; 1 bytes @ 0x9
  1533                           
  1534  0079                     EEPROM_Write@Address:	
  1535                           ; 1 bytes @ 0x9
  1536                           
  1537  0079                     OUTFQ@fmcwtxrx:	
  1538                           ; 1 bytes @ 0x9
  1539                           
  1540  0079                     RFDOUT@fmcwtxrx:	
  1541                           ; 2 bytes @ 0x9
  1542                           
  1543  0079                     ___lldiv@quotient:	
  1544                           ; 2 bytes @ 0x9
  1545                           
  1546                           
  1547                           ; 4 bytes @ 0x9
  1548  0079                     	ds	1
  1549  007A                     ??_ReceivePacket_data:	
  1550                           
  1551                           ; 1 bytes @ 0xA
  1552  007A                     	ds	1
  1553  007B                     OUTFQ@Nprg:	
  1554  007B                     RFDOUT@Nref:	
  1555                           ; 2 bytes @ 0xB
  1556                           
  1557                           
  1558                           ; 2 bytes @ 0xB
  1559  007B                     	ds	2
  1560  007D                     ??_FMTX:	
  1561  007D                     ??_CWTX:	
  1562                           ; 1 bytes @ 0xD
  1563                           
  1564  007D                     ??_FMRX:	
  1565                           ; 1 bytes @ 0xD
  1566                           
  1567  007D                     ___lldiv@counter:	
  1568                           ; 1 bytes @ 0xD
  1569                           
  1570                           
  1571                           ; 1 bytes @ 0xD
  1572  007D                     	ds	1
  1573                           
  1574                           	psect	cstackBANK0
  1575  0020                     __pcstackBANK0:	
  1576  0020                     ?_Init_I2C_M:	
  1577  0020                     ??_OUTFQ:	
  1578                           ; 1 bytes @ 0x0
  1579                           
  1580  0020                     ??_RFDOUT:	
  1581                           ; 1 bytes @ 0x0
  1582                           
  1583  0020                     waitFlag@i:	
  1584                           ; 1 bytes @ 0x0
  1585                           
  1586  0020                     getdata@bufstore_counter:	
  1587                           ; 2 bytes @ 0x0
  1588                           
  1589  0020                     Init_I2C_M@c:	
  1590                           ; 2 bytes @ 0x0
  1591                           
  1592                           
  1593                           ; 4 bytes @ 0x0
  1594  0020                     	ds	2
  1595  0022                     waitFlag@j:	
  1596  0022                     getdata@dstuff:	
  1597                           ; 2 bytes @ 0x2
  1598                           
  1599                           
  1600                           ; 2 bytes @ 0x2
  1601  0022                     	ds	1
  1602  0023                     RFDOUT@Nref_b:	
  1603                           
  1604                           ; 24 bytes @ 0x3
  1605  0023                     	ds	1
  1606  0024                     ??_Init_I2C_M:	
  1607  0024                     waitFlag@j_118:	
  1608                           ; 1 bytes @ 0x4
  1609                           
  1610  0024                     getdata@dbitstatus:	
  1611                           ; 2 bytes @ 0x4
  1612                           
  1613                           
  1614                           ; 2 bytes @ 0x4
  1615  0024                     	ds	2
  1616  0026                     getdata@buf:	
  1617  0026                     waitFlag@j_120:	
  1618                           ; 1 bytes @ 0x6
  1619                           
  1620                           
  1621                           ; 2 bytes @ 0x6
  1622  0026                     	ds	2
  1623  0028                     waitFlag@j_122:	
  1624                           
  1625                           ; 2 bytes @ 0x8
  1626  0028                     	ds	2
  1627  002A                     waitFlag@j_124:	
  1628                           
  1629                           ; 2 bytes @ 0xA
  1630  002A                     	ds	2
  1631  002C                     waitFlag@j_126:	
  1632                           
  1633                           ; 2 bytes @ 0xC
  1634  002C                     	ds	2
  1635  002E                     waitFlag@j_127:	
  1636                           
  1637                           ; 2 bytes @ 0xE
  1638  002E                     	ds	2
  1639  0030                     waitFlag@j_129:	
  1640  0030                     OUTFQ@Nprg_b:	
  1641                           ; 2 bytes @ 0x10
  1642                           
  1643                           
  1644                           ; 34 bytes @ 0x10
  1645  0030                     	ds	2
  1646  0032                     waitFlag@j_131:	
  1647                           
  1648                           ; 2 bytes @ 0x12
  1649  0032                     	ds	2
  1650  0034                     waitFlag@j_133:	
  1651                           
  1652                           ; 2 bytes @ 0x14
  1653  0034                     	ds	2
  1654  0036                     waitFlag@j_135:	
  1655                           
  1656                           ; 2 bytes @ 0x16
  1657  0036                     	ds	2
  1658  0038                     waitFlag@j_137:	
  1659                           
  1660                           ; 2 bytes @ 0x18
  1661  0038                     	ds	2
  1662  003A                     waitFlag@flag_judge:	
  1663                           
  1664                           ; 2 bytes @ 0x1A
  1665  003A                     	ds	1
  1666  003B                     RFDOUT@i_483:	
  1667                           
  1668                           ; 2 bytes @ 0x1B
  1669  003B                     	ds	1
  1670  003C                     waitFlag@buf:	
  1671                           
  1672                           ; 1 bytes @ 0x1C
  1673  003C                     	ds	1
  1674  003D                     ReceivePacket_data@fcschecker:	
  1675  003D                     RFDOUT@i:	
  1676                           ; 2 bytes @ 0x1D
  1677                           
  1678                           
  1679                           ; 2 bytes @ 0x1D
  1680  003D                     	ds	2
  1681  003F                     ReceivePacket_data@i:	
  1682  003F                     RFDOUT@i_484:	
  1683                           ; 2 bytes @ 0x1F
  1684                           
  1685                           
  1686                           ; 2 bytes @ 0x1F
  1687  003F                     	ds	19
  1688  0052                     OUTFQ@i_472:	
  1689                           
  1690                           ; 2 bytes @ 0x32
  1691  0052                     	ds	2
  1692  0054                     OUTFQ@count:	
  1693                           
  1694                           ; 2 bytes @ 0x34
  1695  0054                     	ds	2
  1696  0056                     OUTFQ@i:	
  1697                           
  1698                           ; 2 bytes @ 0x36
  1699  0056                     	ds	2
  1700  0058                     OUTFQ@i_474:	
  1701                           
  1702                           ; 2 bytes @ 0x38
  1703  0058                     	ds	2
  1704  005A                     OUTFQ@j:	
  1705                           
  1706                           ; 2 bytes @ 0x3A
  1707  005A                     	ds	2
  1708  005C                     ?_FMTX:	
  1709  005C                     ?_CWTX:	
  1710                           ; 1 bytes @ 0x3C
  1711                           
  1712  005C                     ?_FMRX:	
  1713                           ; 1 bytes @ 0x3C
  1714                           
  1715  005C                     FMTX@Nref:	
  1716                           ; 1 bytes @ 0x3C
  1717                           
  1718  005C                     CWTX@Nref:	
  1719                           ; 2 bytes @ 0x3C
  1720                           
  1721  005C                     FMRX@Nref:	
  1722                           ; 2 bytes @ 0x3C
  1723                           
  1724                           
  1725                           ; 2 bytes @ 0x3C
  1726  005C                     	ds	2
  1727  005E                     FMTX@Nprg:	
  1728  005E                     CWTX@Nprg:	
  1729                           ; 2 bytes @ 0x3E
  1730                           
  1731  005E                     FMRX@Nprg:	
  1732                           ; 2 bytes @ 0x3E
  1733                           
  1734                           
  1735                           ; 2 bytes @ 0x3E
  1736  005E                     	ds	2
  1737  0060                     FMTX@fmtx:	
  1738  0060                     CWTX@cwtx:	
  1739                           ; 2 bytes @ 0x40
  1740                           
  1741  0060                     FMRX@fmrx:	
  1742                           ; 2 bytes @ 0x40
  1743                           
  1744                           
  1745                           ; 2 bytes @ 0x40
  1746  0060                     	ds	2
  1747  0062                     ??_main:	
  1748                           
  1749                           ; 1 bytes @ 0x42
  1750  0062                     	ds	4
  1751                           
  1752                           	psect	maintext
  1753  0E2B                     __pmaintext:	
  1754 ;;
  1755 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1756 ;;
  1757 ;; *************** function _main *****************
  1758 ;; Defined at:
  1759 ;;		line 38 in file "main.c"
  1760 ;; Parameters:    Size  Location     Type
  1761 ;;		None
  1762 ;; Auto vars:     Size  Location     Type
  1763 ;;  FMRX_Nprg      10   20[BANK1 ] int [5]
  1764 ;;  CWTX_Nprg      10   10[BANK1 ] int [5]
  1765 ;;  FMTX_Nprg      10    0[BANK1 ] int [5]
  1766 ;;  NM_wad_heade    1   31[BANK1 ] unsigned char 
  1767 ;;  dData           1   32[BANK1 ] PTR unsigned char 
  1768 ;;		 -> NULL(0), dData(16), 
  1769 ;;  TXOBC_wad_he    1   30[BANK1 ] unsigned char 
  1770 ;; Return value:  Size  Location     Type
  1771 ;;                  1    wreg      void 
  1772 ;; Registers used:
  1773 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1774 ;; Tracked objects:
  1775 ;;		On entry : B00/0
  1776 ;;		On exit  : 0/0
  1777 ;;		Unchanged: 0/0
  1778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1779 ;;      Params:         0       0       0       0       0
  1780 ;;      Locals:         0       0      33       0       0
  1781 ;;      Temps:          0       4       0       0       0
  1782 ;;      Totals:         0       4      33       0       0
  1783 ;;Total ram usage:       37 bytes
  1784 ;; Hardware stack levels required when called:    4
  1785 ;; This function calls:
  1786 ;;		_CWTX
  1787 ;;		_EEPROM_Write
  1788 ;;		_FMRX
  1789 ;;		_FMTX
  1790 ;;		_Init_I2C_M
  1791 ;;		_Init_MPU
  1792 ;;		_Init_SERIAL
  1793 ;;		_NM_waddress
  1794 ;;		_ReceivePacket_data
  1795 ;;		_Reset_EPS
  1796 ;;		_TXOBC_waddress
  1797 ;; This function is called by:
  1798 ;;		Startup code after reset
  1799 ;; This function uses a non-reentrant model
  1800 ;;
  1801                           
  1802                           
  1803                           ;psect for function _main
  1804  0E2B                     _main:	
  1805                           
  1806                           ;main.c: 43: _delay((unsigned long)((200)*(10000000/4000.0)));
  1807                           
  1808                           ;incstack = 0
  1809                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1810  0E2B  3003               	movlw	3
  1811  0E2C  1283               	bcf	3,5	;RP0=0, select bank0
  1812  0E2D  1303               	bcf	3,6	;RP1=0, select bank0
  1813  0E2E  00E4               	movwf	??_main+2
  1814  0E2F  308A               	movlw	138
  1815  0E30  00E3               	movwf	??_main+1
  1816  0E31  3055               	movlw	85
  1817  0E32  00E2               	movwf	??_main
  1818  0E33                     u3547:	
  1819  0E33  0BE2               	decfsz	??_main,f
  1820  0E34  2E33               	goto	u3547
  1821  0E35  0BE3               	decfsz	??_main+1,f
  1822  0E36  2E33               	goto	u3547
  1823  0E37  0BE4               	decfsz	??_main+2,f
  1824  0E38  2E33               	goto	u3547
  1825                           
  1826                           ;main.c: 45: Init_SERIAL();
  1827  0E39  120A  158A  206A  120A  158A  	fcall	_Init_SERIAL
  1828                           
  1829                           ;main.c: 46: Init_MPU();
  1830  0E3E  120A  158A  20B6  120A  158A  	fcall	_Init_MPU
  1831                           
  1832                           ;main.c: 47: Init_I2C_M(400000);
  1833  0E43  3000               	movlw	0
  1834  0E44  1283               	bcf	3,5	;RP0=0, select bank0
  1835  0E45  1303               	bcf	3,6	;RP1=0, select bank0
  1836  0E46  00A3               	movwf	Init_I2C_M@c+3
  1837  0E47  3006               	movlw	6
  1838  0E48  00A2               	movwf	Init_I2C_M@c+2
  1839  0E49  301A               	movlw	26
  1840  0E4A  00A1               	movwf	Init_I2C_M@c+1
  1841  0E4B  3080               	movlw	128
  1842  0E4C  00A0               	movwf	Init_I2C_M@c
  1843  0E4D  120A  158A  21AD  120A  158A  	fcall	_Init_I2C_M
  1844                           
  1845                           ;main.c: 54: RB2 = 1;
  1846  0E52  1283               	bcf	3,5	;RP0=0, select bank0
  1847  0E53  1303               	bcf	3,6	;RP1=0, select bank0
  1848  0E54  1506               	bsf	6,2	;volatile
  1849                           
  1850                           ;main.c: 55: _delay((unsigned long)((1000)*(10000000/4000.0)));
  1851  0E55  300D               	movlw	13
  1852  0E56  1283               	bcf	3,5	;RP0=0, select bank0
  1853  0E57  1303               	bcf	3,6	;RP1=0, select bank0
  1854  0E58  00E4               	movwf	??_main+2
  1855  0E59  30AF               	movlw	175
  1856  0E5A  00E3               	movwf	??_main+1
  1857  0E5B  30B5               	movlw	181
  1858  0E5C  00E2               	movwf	??_main
  1859  0E5D                     u3557:	
  1860  0E5D  0BE2               	decfsz	??_main,f
  1861  0E5E  2E5D               	goto	u3557
  1862  0E5F  0BE3               	decfsz	??_main+1,f
  1863  0E60  2E5D               	goto	u3557
  1864  0E61  0BE4               	decfsz	??_main+2,f
  1865  0E62  2E5D               	goto	u3557
  1866  0E63  2E64               	nop2
  1867                           
  1868                           ;main.c: 57: FMTX(FMTX_Nref, FMTX_Nprg);
  1869  0E64  1683               	bsf	3,5	;RP0=1, select bank1
  1870  0E65  1303               	bcf	3,6	;RP1=0, select bank1
  1871  0E66  0846               	movf	(_FMTX_Nref+1)^(0+128),w
  1872  0E67  1283               	bcf	3,5	;RP0=0, select bank0
  1873  0E68  1303               	bcf	3,6	;RP1=0, select bank0
  1874  0E69  00DD               	movwf	FMTX@Nref+1
  1875  0E6A  1683               	bsf	3,5	;RP0=1, select bank1
  1876  0E6B  1303               	bcf	3,6	;RP1=0, select bank1
  1877  0E6C  0845               	movf	_FMTX_Nref^(0+128),w
  1878  0E6D  1283               	bcf	3,5	;RP0=0, select bank0
  1879  0E6E  1303               	bcf	3,6	;RP1=0, select bank0
  1880  0E6F  00DC               	movwf	FMTX@Nref
  1881  0E70  30D1               	movlw	(low (_FMTX_Nprg| 0))& (0+255)
  1882  0E71  00DE               	movwf	FMTX@Nprg
  1883  0E72  3000               	movlw	0
  1884  0E73  00DF               	movwf	FMTX@Nprg+1
  1885  0E74  120A  158A  2153  120A  158A  	fcall	_FMTX
  1886                           
  1887                           ;main.c: 58: CWTX(CWTX_Nref, CWTX_Nprg);
  1888  0E79  1683               	bsf	3,5	;RP0=1, select bank1
  1889  0E7A  1303               	bcf	3,6	;RP1=0, select bank1
  1890  0E7B  0844               	movf	(_CWTX_Nref+1)^(0+128),w
  1891  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
  1892  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
  1893  0E7E  00DD               	movwf	CWTX@Nref+1
  1894  0E7F  1683               	bsf	3,5	;RP0=1, select bank1
  1895  0E80  1303               	bcf	3,6	;RP1=0, select bank1
  1896  0E81  0843               	movf	_CWTX_Nref^(0+128),w
  1897  0E82  1283               	bcf	3,5	;RP0=0, select bank0
  1898  0E83  1303               	bcf	3,6	;RP1=0, select bank0
  1899  0E84  00DC               	movwf	CWTX@Nref
  1900  0E85  30C7               	movlw	(low (_CWTX_Nprg| 0))& (0+255)
  1901  0E86  00DE               	movwf	CWTX@Nprg
  1902  0E87  3000               	movlw	0
  1903  0E88  00DF               	movwf	CWTX@Nprg+1
  1904  0E89  120A  158A  20FB  120A  158A  	fcall	_CWTX
  1905                           
  1906                           ;main.c: 59: FMRX(FMRX_Nref, FMRX_Nprg);
  1907  0E8E  1683               	bsf	3,5	;RP0=1, select bank1
  1908  0E8F  1303               	bcf	3,6	;RP1=0, select bank1
  1909  0E90  0842               	movf	(_FMRX_Nref+1)^(0+128),w
  1910  0E91  1283               	bcf	3,5	;RP0=0, select bank0
  1911  0E92  1303               	bcf	3,6	;RP1=0, select bank0
  1912  0E93  00DD               	movwf	FMRX@Nref+1
  1913  0E94  1683               	bsf	3,5	;RP0=1, select bank1
  1914  0E95  1303               	bcf	3,6	;RP1=0, select bank1
  1915  0E96  0841               	movf	_FMRX_Nref^(0+128),w
  1916  0E97  1283               	bcf	3,5	;RP0=0, select bank0
  1917  0E98  1303               	bcf	3,6	;RP1=0, select bank0
  1918  0E99  00DC               	movwf	FMRX@Nref
  1919  0E9A  30E0               	movlw	(low (_FMRX_Nprg| (0+256)))& (0+255)
  1920  0E9B  00DE               	movwf	FMRX@Nprg
  1921  0E9C  3001               	movlw	1
  1922  0E9D  00DF               	movwf	FMRX@Nprg+1
  1923  0E9E  120A  158A  2127  120A  158A  	fcall	_FMRX
  1924                           
  1925                           ;main.c: 60: RB2 = 0;
  1926  0EA3  1283               	bcf	3,5	;RP0=0, select bank0
  1927  0EA4  1303               	bcf	3,6	;RP1=0, select bank0
  1928  0EA5  1106               	bcf	6,2	;volatile
  1929  0EA6                     l3764:	
  1930                           ;main.c: 63: while(1){
  1931                           
  1932                           
  1933                           ;main.c: 78: UBYTE *dData;
  1934                           ;main.c: 79: dData = ReceivePacket_data();
  1935  0EA6  120A  158A  2468  120A  158A  	fcall	_ReceivePacket_data
  1936  0EAB  1283               	bcf	3,5	;RP0=0, select bank0
  1937  0EAC  1303               	bcf	3,6	;RP1=0, select bank0
  1938  0EAD  00E2               	movwf	??_main
  1939  0EAE  0862               	movf	??_main,w
  1940  0EAF  1683               	bsf	3,5	;RP0=1, select bank1
  1941  0EB0  1303               	bcf	3,6	;RP1=0, select bank1
  1942  0EB1  00C0               	movwf	main@dData^(0+128)
  1943                           
  1944                           ;main.c: 80: RB2 = 1;
  1945  0EB2  1283               	bcf	3,5	;RP0=0, select bank0
  1946  0EB3  1303               	bcf	3,6	;RP1=0, select bank0
  1947  0EB4  1506               	bsf	6,2	;volatile
  1948                           
  1949                           ;main.c: 81: _delay((unsigned long)((500)*(10000000/4000.0)));
  1950  0EB5  3007               	movlw	7
  1951  0EB6  1283               	bcf	3,5	;RP0=0, select bank0
  1952  0EB7  1303               	bcf	3,6	;RP1=0, select bank0
  1953  0EB8  00E4               	movwf	??_main+2
  1954  0EB9  3058               	movlw	88
  1955  0EBA  00E3               	movwf	??_main+1
  1956  0EBB  3059               	movlw	89
  1957  0EBC  00E2               	movwf	??_main
  1958  0EBD                     u3567:	
  1959  0EBD  0BE2               	decfsz	??_main,f
  1960  0EBE  2EBD               	goto	u3567
  1961  0EBF  0BE3               	decfsz	??_main+1,f
  1962  0EC0  2EBD               	goto	u3567
  1963  0EC1  0BE4               	decfsz	??_main+2,f
  1964  0EC2  2EBD               	goto	u3567
  1965                           
  1966                           ;main.c: 82: RB2 = 0;
  1967  0EC3  1283               	bcf	3,5	;RP0=0, select bank0
  1968  0EC4  1303               	bcf	3,6	;RP1=0, select bank0
  1969  0EC5  1106               	bcf	6,2	;volatile
  1970                           
  1971                           ;main.c: 84: EEPROM_Write(0x50,0x00,0x00,dData);
  1972  0EC6  01F2               	clrf	EEPROM_Write@high_address
  1973  0EC7  01F3               	clrf	EEPROM_Write@low_address
  1974  0EC8  1683               	bsf	3,5	;RP0=1, select bank1
  1975  0EC9  1303               	bcf	3,6	;RP1=0, select bank1
  1976  0ECA  0840               	movf	main@dData^(0+128),w
  1977  0ECB  1283               	bcf	3,5	;RP0=0, select bank0
  1978  0ECC  1303               	bcf	3,6	;RP1=0, select bank0
  1979  0ECD  00E2               	movwf	??_main
  1980  0ECE  0862               	movf	??_main,w
  1981  0ECF  00F4               	movwf	EEPROM_Write@data
  1982  0ED0  3050               	movlw	80
  1983  0ED1  120A  158A  234C  120A  158A  	fcall	_EEPROM_Write
  1984                           
  1985                           ;main.c: 85: _delay((unsigned long)((100)*(10000000/4000.0)));
  1986  0ED6  3002               	movlw	2
  1987  0ED7  1283               	bcf	3,5	;RP0=0, select bank0
  1988  0ED8  1303               	bcf	3,6	;RP1=0, select bank0
  1989  0ED9  00E4               	movwf	??_main+2
  1990  0EDA  3045               	movlw	69
  1991  0EDB  00E3               	movwf	??_main+1
  1992  0EDC  30A9               	movlw	169
  1993  0EDD  00E2               	movwf	??_main
  1994  0EDE                     u3577:	
  1995  0EDE  0BE2               	decfsz	??_main,f
  1996  0EDF  2EDE               	goto	u3577
  1997  0EE0  0BE3               	decfsz	??_main+1,f
  1998  0EE1  2EDE               	goto	u3577
  1999  0EE2  0BE4               	decfsz	??_main+2,f
  2000  0EE3  2EDE               	goto	u3577
  2001                           
  2002                           ;main.c: 89: UBYTE TXOBC_wad_header = 0x74;
  2003  0EE4  3074               	movlw	116
  2004  0EE5  1283               	bcf	3,5	;RP0=0, select bank0
  2005  0EE6  1303               	bcf	3,6	;RP1=0, select bank0
  2006  0EE7  00E2               	movwf	??_main
  2007  0EE8  0862               	movf	??_main,w
  2008  0EE9  1683               	bsf	3,5	;RP0=1, select bank1
  2009  0EEA  1303               	bcf	3,6	;RP1=0, select bank1
  2010  0EEB  00BE               	movwf	main@TXOBC_wad_header^(0+128)
  2011                           
  2012                           ;main.c: 90: TXOBC_waddress(TXOBC_wad_header, 0x00, 0x00);
  2013  0EEC  01F1               	clrf	TXOBC_waddress@whigh_address
  2014  0EED  01F2               	clrf	TXOBC_waddress@wlow_address
  2015  0EEE  083E               	movf	main@TXOBC_wad_header^(0+128),w
  2016  0EEF  120A  158A  21E1  120A  158A  	fcall	_TXOBC_waddress
  2017                           
  2018                           ;main.c: 103: if(dData[0]=='n'){
  2019  0EF4  1683               	bsf	3,5	;RP0=1, select bank1
  2020  0EF5  1303               	bcf	3,6	;RP1=0, select bank1
  2021  0EF6  0840               	movf	main@dData^(0+128),w
  2022  0EF7  0084               	movwf	4
  2023  0EF8  306E               	movlw	110
  2024  0EF9  1783               	bsf	3,7	;select IRP bank2
  2025  0EFA  0600               	xorwf	0,w
  2026  0EFB  1D03               	btfss	3,2
  2027  0EFC  2F0E               	goto	l3786
  2028                           
  2029                           ;main.c: 105: UBYTE NM_wad_header = 0x72;
  2030  0EFD  3072               	movlw	114
  2031  0EFE  1283               	bcf	3,5	;RP0=0, select bank0
  2032  0EFF  1303               	bcf	3,6	;RP1=0, select bank0
  2033  0F00  00E2               	movwf	??_main
  2034  0F01  0862               	movf	??_main,w
  2035  0F02  1683               	bsf	3,5	;RP0=1, select bank1
  2036  0F03  1303               	bcf	3,6	;RP1=0, select bank1
  2037  0F04  00BF               	movwf	main@NM_wad_header^(0+128)
  2038                           
  2039                           ;main.c: 106: NM_waddress(NM_wad_header, 0x00, 0x00);
  2040  0F05  01F1               	clrf	NM_waddress@whigh_address
  2041  0F06  01F2               	clrf	NM_waddress@wlow_address
  2042  0F07  083F               	movf	main@NM_wad_header^(0+128),w
  2043  0F08  120A  158A  2043  120A  158A  	fcall	_NM_waddress
  2044                           
  2045                           ;main.c: 108: }else if(dData[0]=='p'){
  2046  0F0D  2FF1               	goto	l442
  2047  0F0E                     l3786:	
  2048  0F0E  1683               	bsf	3,5	;RP0=1, select bank1
  2049  0F0F  1303               	bcf	3,6	;RP1=0, select bank1
  2050  0F10  0840               	movf	main@dData^(0+128),w
  2051  0F11  0084               	movwf	4
  2052  0F12  3070               	movlw	112
  2053  0F13  1783               	bsf	3,7	;select IRP bank2
  2054  0F14  0600               	xorwf	0,w
  2055  0F15  1D03               	btfss	3,2
  2056  0F16  2FDC               	goto	l443
  2057                           
  2058                           ;main.c: 113: if(dData[2] == 'r'){
  2059  0F17  0840               	movf	main@dData^(0+128),w
  2060  0F18  3E02               	addlw	2
  2061  0F19  0084               	movwf	4
  2062  0F1A  3072               	movlw	114
  2063  0F1B  0600               	xorwf	0,w
  2064  0F1C  1903               	btfsc	3,2
  2065  0F1D  2FC4               	goto	l3812
  2066  0F1E  2FF1               	goto	l442
  2067  0F1F                     l3792:	
  2068                           ;main.c: 119: case 'E':
  2069                           
  2070                           ;main.c: 118: switch(dData[3]){
  2071                           
  2072                           
  2073                           ;main.c: 124: Reset_EPS();
  2074  0F1F  120A  118A  2007  120A  158A  	fcall	_Reset_EPS
  2075                           
  2076                           ;main.c: 125: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2077  0F24  3040               	movlw	64
  2078  0F25  1283               	bcf	3,5	;RP0=0, select bank0
  2079  0F26  1303               	bcf	3,6	;RP1=0, select bank0
  2080  0F27  00E4               	movwf	??_main+2
  2081  0F28  306A               	movlw	106
  2082  0F29  00E3               	movwf	??_main+1
  2083  0F2A  3097               	movlw	151
  2084  0F2B  00E2               	movwf	??_main
  2085  0F2C                     u3587:	
  2086  0F2C  0BE2               	decfsz	??_main,f
  2087  0F2D  2F2C               	goto	u3587
  2088  0F2E  0BE3               	decfsz	??_main+1,f
  2089  0F2F  2F2C               	goto	u3587
  2090  0F30  0BE4               	decfsz	??_main+2,f
  2091  0F31  2F2C               	goto	u3587
  2092                           
  2093                           ;main.c: 128: int FMTX_Nprg[5] = {8,7,3,0,0};
  2094  0F32  30A0               	movlw	main@FMTX_Nprg& (0+255)
  2095  0F33  0084               	movwf	4
  2096  0F34  30D6               	movlw	low main@F2012
  2097  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  2098  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  2099  0F37  00E2               	movwf	??_main
  2100  0F38  0804               	movf	4,w
  2101  0F39  00E3               	movwf	??_main+1
  2102  0F3A  300A               	movlw	10
  2103  0F3B  00E4               	movwf	??_main+2
  2104  0F3C                     u3490:	
  2105  0F3C  0862               	movf	??_main,w
  2106  0F3D  0084               	movwf	4
  2107  0F3E  1783               	bsf	3,7	;select IRP bank3
  2108  0F3F  0800               	movf	0,w
  2109  0F40  00E5               	movwf	??_main+3
  2110  0F41  0AE2               	incf	??_main,f
  2111  0F42  0863               	movf	??_main+1,w
  2112  0F43  0084               	movwf	4
  2113  0F44  1383               	bcf	3,7	;select IRP bank1
  2114  0F45  0865               	movf	??_main+3,w
  2115  0F46  0080               	movwf	0
  2116  0F47  0AE3               	incf	??_main+1,f
  2117  0F48  0BE4               	decfsz	??_main+2,f
  2118  0F49  2F3C               	goto	u3490
  2119                           
  2120                           ;main.c: 129: int CWTX_Nprg[5] = {0,1,7,4,7};
  2121  0F4A  30AA               	movlw	main@CWTX_Nprg& (0+255)
  2122  0F4B  0084               	movwf	4
  2123  0F4C  30CC               	movlw	low main@F2014
  2124  0F4D  00E2               	movwf	??_main
  2125  0F4E  0804               	movf	4,w
  2126  0F4F  00E3               	movwf	??_main+1
  2127  0F50  300A               	movlw	10
  2128  0F51  00E4               	movwf	??_main+2
  2129  0F52                     u3500:	
  2130  0F52  0862               	movf	??_main,w
  2131  0F53  0084               	movwf	4
  2132  0F54  1783               	bsf	3,7	;select IRP bank3
  2133  0F55  0800               	movf	0,w
  2134  0F56  00E5               	movwf	??_main+3
  2135  0F57  0AE2               	incf	??_main,f
  2136  0F58  0863               	movf	??_main+1,w
  2137  0F59  0084               	movwf	4
  2138  0F5A  1383               	bcf	3,7	;select IRP bank1
  2139  0F5B  0865               	movf	??_main+3,w
  2140  0F5C  0080               	movwf	0
  2141  0F5D  0AE3               	incf	??_main+1,f
  2142  0F5E  0BE4               	decfsz	??_main+2,f
  2143  0F5F  2F52               	goto	u3500
  2144                           
  2145                           ;main.c: 130: int FMRX_Nprg[5] = {2,4,8,8,7};
  2146  0F60  30B4               	movlw	main@FMRX_Nprg& (0+255)
  2147  0F61  0084               	movwf	4
  2148  0F62  30C2               	movlw	low main@F2016
  2149  0F63  00E2               	movwf	??_main
  2150  0F64  0804               	movf	4,w
  2151  0F65  00E3               	movwf	??_main+1
  2152  0F66  300A               	movlw	10
  2153  0F67  00E4               	movwf	??_main+2
  2154  0F68                     u3510:	
  2155  0F68  0862               	movf	??_main,w
  2156  0F69  0084               	movwf	4
  2157  0F6A  1783               	bsf	3,7	;select IRP bank3
  2158  0F6B  0800               	movf	0,w
  2159  0F6C  00E5               	movwf	??_main+3
  2160  0F6D  0AE2               	incf	??_main,f
  2161  0F6E  0863               	movf	??_main+1,w
  2162  0F6F  0084               	movwf	4
  2163  0F70  1383               	bcf	3,7	;select IRP bank1
  2164  0F71  0865               	movf	??_main+3,w
  2165  0F72  0080               	movwf	0
  2166  0F73  0AE3               	incf	??_main+1,f
  2167  0F74  0BE4               	decfsz	??_main+2,f
  2168  0F75  2F68               	goto	u3510
  2169                           
  2170                           ;main.c: 132: FMTX(FMTX_Nref, FMTX_Nprg);
  2171  0F76  1683               	bsf	3,5	;RP0=1, select bank1
  2172  0F77  1303               	bcf	3,6	;RP1=0, select bank1
  2173  0F78  0846               	movf	(_FMTX_Nref+1)^(0+128),w
  2174  0F79  1283               	bcf	3,5	;RP0=0, select bank0
  2175  0F7A  1303               	bcf	3,6	;RP1=0, select bank0
  2176  0F7B  00DD               	movwf	FMTX@Nref+1
  2177  0F7C  1683               	bsf	3,5	;RP0=1, select bank1
  2178  0F7D  1303               	bcf	3,6	;RP1=0, select bank1
  2179  0F7E  0845               	movf	_FMTX_Nref^(0+128),w
  2180  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  2181  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  2182  0F81  00DC               	movwf	FMTX@Nref
  2183  0F82  30A0               	movlw	(low (main@FMTX_Nprg| 0))& (0+255)
  2184  0F83  00DE               	movwf	FMTX@Nprg
  2185  0F84  3000               	movlw	0
  2186  0F85  00DF               	movwf	FMTX@Nprg+1
  2187  0F86  120A  158A  2153  120A  158A  	fcall	_FMTX
  2188                           
  2189                           ;main.c: 133: CWTX(CWTX_Nref, CWTX_Nprg);
  2190  0F8B  1683               	bsf	3,5	;RP0=1, select bank1
  2191  0F8C  1303               	bcf	3,6	;RP1=0, select bank1
  2192  0F8D  0844               	movf	(_CWTX_Nref+1)^(0+128),w
  2193  0F8E  1283               	bcf	3,5	;RP0=0, select bank0
  2194  0F8F  1303               	bcf	3,6	;RP1=0, select bank0
  2195  0F90  00DD               	movwf	CWTX@Nref+1
  2196  0F91  1683               	bsf	3,5	;RP0=1, select bank1
  2197  0F92  1303               	bcf	3,6	;RP1=0, select bank1
  2198  0F93  0843               	movf	_CWTX_Nref^(0+128),w
  2199  0F94  1283               	bcf	3,5	;RP0=0, select bank0
  2200  0F95  1303               	bcf	3,6	;RP1=0, select bank0
  2201  0F96  00DC               	movwf	CWTX@Nref
  2202  0F97  30AA               	movlw	(low (main@CWTX_Nprg| 0))& (0+255)
  2203  0F98  00DE               	movwf	CWTX@Nprg
  2204  0F99  3000               	movlw	0
  2205  0F9A  00DF               	movwf	CWTX@Nprg+1
  2206  0F9B  120A  158A  20FB  120A  158A  	fcall	_CWTX
  2207                           
  2208                           ;main.c: 134: FMRX(FMRX_Nref, FMRX_Nprg);
  2209  0FA0  1683               	bsf	3,5	;RP0=1, select bank1
  2210  0FA1  1303               	bcf	3,6	;RP1=0, select bank1
  2211  0FA2  0842               	movf	(_FMRX_Nref+1)^(0+128),w
  2212  0FA3  1283               	bcf	3,5	;RP0=0, select bank0
  2213  0FA4  1303               	bcf	3,6	;RP1=0, select bank0
  2214  0FA5  00DD               	movwf	FMRX@Nref+1
  2215  0FA6  1683               	bsf	3,5	;RP0=1, select bank1
  2216  0FA7  1303               	bcf	3,6	;RP1=0, select bank1
  2217  0FA8  0841               	movf	_FMRX_Nref^(0+128),w
  2218  0FA9  1283               	bcf	3,5	;RP0=0, select bank0
  2219  0FAA  1303               	bcf	3,6	;RP1=0, select bank0
  2220  0FAB  00DC               	movwf	FMRX@Nref
  2221  0FAC  30B4               	movlw	(low (main@FMRX_Nprg| 0))& (0+255)
  2222  0FAD  00DE               	movwf	FMRX@Nprg
  2223  0FAE  3000               	movlw	0
  2224  0FAF  00DF               	movwf	FMRX@Nprg+1
  2225  0FB0  120A  158A  2127  120A  158A  	fcall	_FMRX
  2226                           
  2227                           ;main.c: 135: _delay((unsigned long)((500)*(10000000/4000.0)));
  2228  0FB5  3007               	movlw	7
  2229  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  2230  0FB7  1303               	bcf	3,6	;RP1=0, select bank0
  2231  0FB8  00E4               	movwf	??_main+2
  2232  0FB9  3058               	movlw	88
  2233  0FBA  00E3               	movwf	??_main+1
  2234  0FBB  3059               	movlw	89
  2235  0FBC  00E2               	movwf	??_main
  2236  0FBD                     u3597:	
  2237  0FBD  0BE2               	decfsz	??_main,f
  2238  0FBE  2FBD               	goto	u3597
  2239  0FBF  0BE3               	decfsz	??_main+1,f
  2240  0FC0  2FBD               	goto	u3597
  2241  0FC1  0BE4               	decfsz	??_main+2,f
  2242  0FC2  2FBD               	goto	u3597
  2243                           
  2244                           ;main.c: 152: }
  2245                           
  2246                           ;main.c: 151: break;
  2247                           
  2248                           ;main.c: 149: default:
  2249                           
  2250                           ;main.c: 148: break;
  2251                           
  2252                           ;main.c: 146: case 'T':
  2253                           
  2254                           ;main.c: 145: break;
  2255                           
  2256                           ;main.c: 143: case 'N':
  2257                           
  2258                           ;main.c: 142: break;
  2259                           
  2260                           ;main.c: 140: case '3':
  2261                           
  2262                           ;main.c: 139: break;
  2263                           
  2264                           ;main.c: 137: case 'I':
  2265                           
  2266                           ;main.c: 136: break;
  2267  0FC3  2FF1               	goto	l442
  2268  0FC4                     l3812:	
  2269  0FC4  1683               	bsf	3,5	;RP0=1, select bank1
  2270  0FC5  1303               	bcf	3,6	;RP1=0, select bank1
  2271  0FC6  0840               	movf	main@dData^(0+128),w
  2272  0FC7  3E03               	addlw	3
  2273  0FC8  0084               	movwf	4
  2274  0FC9  1783               	bsf	3,7	;select IRP bank2
  2275  0FCA  0800               	movf	0,w
  2276                           
  2277                           ; Switch size 1, requested type "space"
  2278                           ; Number of cases is 5, Range of values is 51 to 84
  2279                           ; switch strategies available:
  2280                           ; Name         Instructions Cycles
  2281                           ; simple_byte           16     9 (average)
  2282                           ; direct_byte          113    11 (fixed)
  2283                           ; jumptable            263     9 (fixed)
  2284                           ;	Chosen strategy is simple_byte
  2285  0FCB  3A33               	xorlw	51	; case 51
  2286  0FCC  1903               	skipnz
  2287  0FCD  2FF1               	goto	l442
  2288  0FCE  3A76               	xorlw	118	; case 69
  2289  0FCF  1903               	skipnz
  2290  0FD0  2F1F               	goto	l3792
  2291  0FD1  3A0C               	xorlw	12	; case 73
  2292  0FD2  1903               	skipnz
  2293  0FD3  2FF1               	goto	l442
  2294  0FD4  3A07               	xorlw	7	; case 78
  2295  0FD5  1903               	skipnz
  2296  0FD6  2FF1               	goto	l442
  2297  0FD7  3A1A               	xorlw	26	; case 84
  2298  0FD8  1903               	skipnz
  2299  0FD9  2FF1               	goto	l442
  2300  0FDA  2FF1               	goto	l442
  2301                           
  2302                           ;main.c: 156: }
  2303                           ;main.c: 157: }else{
  2304                           
  2305                           ;main.c: 154: }else if(dData[2] == 't'){
  2306  0FDB  2FF1               	goto	l442
  2307  0FDC                     l443:	
  2308                           
  2309                           ;main.c: 158: RB2 = 1;
  2310  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  2311  0FDD  1303               	bcf	3,6	;RP1=0, select bank0
  2312  0FDE  1506               	bsf	6,2	;volatile
  2313                           
  2314                           ;main.c: 159: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2315  0FDF  300D               	movlw	13
  2316  0FE0  1283               	bcf	3,5	;RP0=0, select bank0
  2317  0FE1  1303               	bcf	3,6	;RP1=0, select bank0
  2318  0FE2  00E4               	movwf	??_main+2
  2319  0FE3  30AF               	movlw	175
  2320  0FE4  00E3               	movwf	??_main+1
  2321  0FE5  30B5               	movlw	181
  2322  0FE6  00E2               	movwf	??_main
  2323  0FE7                     u3607:	
  2324  0FE7  0BE2               	decfsz	??_main,f
  2325  0FE8  2FE7               	goto	u3607
  2326  0FE9  0BE3               	decfsz	??_main+1,f
  2327  0FEA  2FE7               	goto	u3607
  2328  0FEB  0BE4               	decfsz	??_main+2,f
  2329  0FEC  2FE7               	goto	u3607
  2330  0FED  2FEE               	nop2
  2331                           
  2332                           ;main.c: 160: RB2 = 0;
  2333  0FEE  1283               	bcf	3,5	;RP0=0, select bank0
  2334  0FEF  1303               	bcf	3,6	;RP1=0, select bank0
  2335  0FF0  1106               	bcf	6,2	;volatile
  2336  0FF1                     l442:	
  2337                           
  2338                           ;main.c: 161: }
  2339                           ;main.c: 205: _delay((unsigned long)((500)*(10000000/4000.0)));
  2340  0FF1  3007               	movlw	7
  2341  0FF2  1283               	bcf	3,5	;RP0=0, select bank0
  2342  0FF3  1303               	bcf	3,6	;RP1=0, select bank0
  2343  0FF4  00E4               	movwf	??_main+2
  2344  0FF5  3058               	movlw	88
  2345  0FF6  00E3               	movwf	??_main+1
  2346  0FF7  3059               	movlw	89
  2347  0FF8  00E2               	movwf	??_main
  2348  0FF9                     u3617:	
  2349  0FF9  0BE2               	decfsz	??_main,f
  2350  0FFA  2FF9               	goto	u3617
  2351  0FFB  0BE3               	decfsz	??_main+1,f
  2352  0FFC  2FF9               	goto	u3617
  2353  0FFD  0BE4               	decfsz	??_main+2,f
  2354  0FFE  2FF9               	goto	u3617
  2355  0FFF  2EA6               	goto	l3764
  2356  1000                     __end_of_main:	
  2357                           ;main.c: 206: }
  2358                           ;main.c: 207: return;
  2359                           
  2360                           
  2361                           	psect	text1
  2362  09E1                     __ptext1:	
  2363 ;; *************** function _TXOBC_waddress *****************
  2364 ;; Defined at:
  2365 ;;		line 78 in file "UART.c"
  2366 ;; Parameters:    Size  Location     Type
  2367 ;;  TXOBC_wad_he    1    wreg     unsigned char 
  2368 ;;  whigh_addres    1    1[COMMON] unsigned char 
  2369 ;;  wlow_address    1    2[COMMON] unsigned char 
  2370 ;; Auto vars:     Size  Location     Type
  2371 ;;  TXOBC_wad_he    1    5[COMMON] unsigned char 
  2372 ;; Return value:  Size  Location     Type
  2373 ;;                  1    wreg      void 
  2374 ;; Registers used:
  2375 ;;		wreg, status,2, status,0, pclath, cstack
  2376 ;; Tracked objects:
  2377 ;;		On entry : 0/0
  2378 ;;		On exit  : 0/0
  2379 ;;		Unchanged: 0/0
  2380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2381 ;;      Params:         2       0       0       0       0
  2382 ;;      Locals:         1       0       0       0       0
  2383 ;;      Temps:          2       0       0       0       0
  2384 ;;      Totals:         5       0       0       0       0
  2385 ;;Total ram usage:        5 bytes
  2386 ;; Hardware stack levels used:    1
  2387 ;; Hardware stack levels required when called:    1
  2388 ;; This function calls:
  2389 ;;		_putch
  2390 ;; This function is called by:
  2391 ;;		_main
  2392 ;; This function uses a non-reentrant model
  2393 ;;
  2394                           
  2395                           
  2396                           ;psect for function _TXOBC_waddress
  2397  09E1                     _TXOBC_waddress:	
  2398                           
  2399                           ;incstack = 0
  2400                           ; Regs used in _TXOBC_waddress: [wreg+status,2+status,0+pclath+cstack]
  2401                           ;TXOBC_waddress@TXOBC_wad_header stored from wreg
  2402  09E1  00F5               	movwf	TXOBC_waddress@TXOBC_wad_header
  2403                           
  2404                           ;UART.c: 79: RC5 = 1;
  2405  09E2  1283               	bcf	3,5	;RP0=0, select bank0
  2406  09E3  1303               	bcf	3,6	;RP1=0, select bank0
  2407  09E4  1687               	bsf	7,5	;volatile
  2408                           
  2409                           ;UART.c: 80: _delay((unsigned long)((50)*(10000000/4000.0)));
  2410  09E5  30A3               	movlw	163
  2411  09E6  00F4               	movwf	??_TXOBC_waddress+1
  2412  09E7  3055               	movlw	85
  2413  09E8  00F3               	movwf	??_TXOBC_waddress
  2414  09E9                     u3627:	
  2415  09E9  0BF3               	decfsz	??_TXOBC_waddress,f
  2416  09EA  29E9               	goto	u3627
  2417  09EB  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2418  09EC  29E9               	goto	u3627
  2419                           
  2420                           ;UART.c: 81: putch(TXOBC_wad_header);
  2421  09ED  0875               	movf	TXOBC_waddress@TXOBC_wad_header,w
  2422  09EE  120A  158A  2019  120A  158A  	fcall	_putch
  2423                           
  2424                           ;UART.c: 82: _delay((unsigned long)((50)*(10000000/4000.0)));
  2425  09F3  30A3               	movlw	163
  2426  09F4  00F4               	movwf	??_TXOBC_waddress+1
  2427  09F5  3055               	movlw	85
  2428  09F6  00F3               	movwf	??_TXOBC_waddress
  2429  09F7                     u3637:	
  2430  09F7  0BF3               	decfsz	??_TXOBC_waddress,f
  2431  09F8  29F7               	goto	u3637
  2432  09F9  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2433  09FA  29F7               	goto	u3637
  2434                           
  2435                           ;UART.c: 83: putch(whigh_address);
  2436  09FB  0871               	movf	TXOBC_waddress@whigh_address,w
  2437  09FC  120A  158A  2019  120A  158A  	fcall	_putch
  2438                           
  2439                           ;UART.c: 84: _delay((unsigned long)((50)*(10000000/4000.0)));
  2440  0A01  30A3               	movlw	163
  2441  0A02  00F4               	movwf	??_TXOBC_waddress+1
  2442  0A03  3055               	movlw	85
  2443  0A04  00F3               	movwf	??_TXOBC_waddress
  2444  0A05                     u3647:	
  2445  0A05  0BF3               	decfsz	??_TXOBC_waddress,f
  2446  0A06  2A05               	goto	u3647
  2447  0A07  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2448  0A08  2A05               	goto	u3647
  2449                           
  2450                           ;UART.c: 85: putch(wlow_address);
  2451  0A09  0872               	movf	TXOBC_waddress@wlow_address,w
  2452  0A0A  120A  158A  2019  120A  158A  	fcall	_putch
  2453                           
  2454                           ;UART.c: 86: _delay((unsigned long)((50)*(10000000/4000.0)));
  2455  0A0F  30A3               	movlw	163
  2456  0A10  00F4               	movwf	??_TXOBC_waddress+1
  2457  0A11  3055               	movlw	85
  2458  0A12  00F3               	movwf	??_TXOBC_waddress
  2459  0A13                     u3657:	
  2460  0A13  0BF3               	decfsz	??_TXOBC_waddress,f
  2461  0A14  2A13               	goto	u3657
  2462  0A15  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2463  0A16  2A13               	goto	u3657
  2464                           
  2465                           ;UART.c: 87: RC5 = 0;
  2466  0A17  1283               	bcf	3,5	;RP0=0, select bank0
  2467  0A18  1303               	bcf	3,6	;RP1=0, select bank0
  2468  0A19  1287               	bcf	7,5	;volatile
  2469  0A1A  0008               	return
  2470  0A1B                     __end_of_TXOBC_waddress:	
  2471                           
  2472                           	psect	text2
  2473  0007                     __ptext2:	
  2474 ;; *************** function _Reset_EPS *****************
  2475 ;; Defined at:
  2476 ;;		line 19 in file "EPS.c"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;		None
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;		None
  2481 ;; Return value:  Size  Location     Type
  2482 ;;                  1    wreg      void 
  2483 ;; Registers used:
  2484 ;;		wreg
  2485 ;; Tracked objects:
  2486 ;;		On entry : 0/0
  2487 ;;		On exit  : 0/0
  2488 ;;		Unchanged: 0/0
  2489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2490 ;;      Params:         0       0       0       0       0
  2491 ;;      Locals:         0       0       0       0       0
  2492 ;;      Temps:          3       0       0       0       0
  2493 ;;      Totals:         3       0       0       0       0
  2494 ;;Total ram usage:        3 bytes
  2495 ;; Hardware stack levels used:    1
  2496 ;; This function calls:
  2497 ;;		Nothing
  2498 ;; This function is called by:
  2499 ;;		_main
  2500 ;; This function uses a non-reentrant model
  2501 ;;
  2502                           
  2503                           
  2504                           ;psect for function _Reset_EPS
  2505  0007                     _Reset_EPS:	
  2506                           
  2507                           ;EPS.c: 20: RB4 = 1;
  2508                           
  2509                           ;incstack = 0
  2510                           ; Regs used in _Reset_EPS: [wreg]
  2511  0007  1283               	bcf	3,5	;RP0=0, select bank0
  2512  0008  1303               	bcf	3,6	;RP1=0, select bank0
  2513  0009  1606               	bsf	6,4	;volatile
  2514                           
  2515                           ;EPS.c: 21: RA1 = 1;
  2516  000A  1485               	bsf	5,1	;volatile
  2517                           
  2518                           ;EPS.c: 22: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2519  000B  3040               	movlw	64
  2520  000C  00F2               	movwf	??_Reset_EPS+2
  2521  000D  306A               	movlw	106
  2522  000E  00F1               	movwf	??_Reset_EPS+1
  2523  000F  3097               	movlw	151
  2524  0010  00F0               	movwf	??_Reset_EPS
  2525  0011                     u3667:	
  2526  0011  0BF0               	decfsz	??_Reset_EPS,f
  2527  0012  2811               	goto	u3667
  2528  0013  0BF1               	decfsz	??_Reset_EPS+1,f
  2529  0014  2811               	goto	u3667
  2530  0015  0BF2               	decfsz	??_Reset_EPS+2,f
  2531  0016  2811               	goto	u3667
  2532  0017  2818               	nop2
  2533                           
  2534                           ;EPS.c: 23: RB4 = 0;
  2535  0018  1283               	bcf	3,5	;RP0=0, select bank0
  2536  0019  1303               	bcf	3,6	;RP1=0, select bank0
  2537  001A  1206               	bcf	6,4	;volatile
  2538                           
  2539                           ;EPS.c: 24: RA1 = 0;
  2540  001B  1085               	bcf	5,1	;volatile
  2541                           
  2542                           ;EPS.c: 25: _delay((unsigned long)((500)*(10000000/4000.0)));
  2543  001C  3007               	movlw	7
  2544  001D  00F2               	movwf	??_Reset_EPS+2
  2545  001E  3058               	movlw	88
  2546  001F  00F1               	movwf	??_Reset_EPS+1
  2547  0020  3059               	movlw	89
  2548  0021  00F0               	movwf	??_Reset_EPS
  2549  0022                     u3677:	
  2550  0022  0BF0               	decfsz	??_Reset_EPS,f
  2551  0023  2822               	goto	u3677
  2552  0024  0BF1               	decfsz	??_Reset_EPS+1,f
  2553  0025  2822               	goto	u3677
  2554  0026  0BF2               	decfsz	??_Reset_EPS+2,f
  2555  0027  2822               	goto	u3677
  2556  0028  2829               	nop2
  2557  0029  0008               	return
  2558  002A                     __end_of_Reset_EPS:	
  2559                           
  2560                           	psect	text3
  2561  0C68                     __ptext3:	
  2562 ;; *************** function _ReceivePacket_data *****************
  2563 ;; Defined at:
  2564 ;;		line 359 in file "decode_AX25.c"
  2565 ;; Parameters:    Size  Location     Type
  2566 ;;		None
  2567 ;; Auto vars:     Size  Location     Type
  2568 ;;  i               2   31[BANK0 ] unsigned int 
  2569 ;;  fcschecker      2   29[BANK0 ] unsigned int 
  2570 ;; Return value:  Size  Location     Type
  2571 ;;                  1    wreg      PTR unsigned char 
  2572 ;; Registers used:
  2573 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2574 ;; Tracked objects:
  2575 ;;		On entry : 0/0
  2576 ;;		On exit  : 0/0
  2577 ;;		Unchanged: 0/0
  2578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2579 ;;      Params:         0       0       0       0       0
  2580 ;;      Locals:         0       4       0       0       0
  2581 ;;      Temps:          2       0       0       0       0
  2582 ;;      Totals:         2       4       0       0       0
  2583 ;;Total ram usage:        6 bytes
  2584 ;; Hardware stack levels used:    1
  2585 ;; Hardware stack levels required when called:    2
  2586 ;; This function calls:
  2587 ;;		_fcscheck
  2588 ;;		_getdata
  2589 ;;		_waitFlag
  2590 ;; This function is called by:
  2591 ;;		_main
  2592 ;; This function uses a non-reentrant model
  2593 ;;
  2594                           
  2595                           
  2596                           ;psect for function _ReceivePacket_data
  2597  0C68                     _ReceivePacket_data:	
  2598                           
  2599                           ;decode_AX25.c: 360: UINT fcschecker;
  2600                           ;decode_AX25.c: 363: waitFlag();
  2601                           
  2602                           ;incstack = 0
  2603                           ; Regs used in _ReceivePacket_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2604  0C68  120A  118A  2327  120A  158A  	fcall	_waitFlag
  2605                           
  2606                           ;decode_AX25.c: 365: getdata();
  2607  0C6D  120A  158A  2407  120A  158A  	fcall	_getdata
  2608                           
  2609                           ;decode_AX25.c: 367: fcschecker = fcscheck();
  2610  0C72  120A  118A  202A  120A  158A  	fcall	_fcscheck
  2611  0C77  0871               	movf	?_fcscheck+1,w
  2612  0C78  1283               	bcf	3,5	;RP0=0, select bank0
  2613  0C79  1303               	bcf	3,6	;RP1=0, select bank0
  2614  0C7A  00BE               	movwf	ReceivePacket_data@fcschecker+1
  2615  0C7B  0870               	movf	?_fcscheck,w
  2616  0C7C  00BD               	movwf	ReceivePacket_data@fcschecker
  2617                           
  2618                           ;decode_AX25.c: 369: if(fcschecker == 1){
  2619  0C7D  033D               	decf	ReceivePacket_data@fcschecker,w
  2620  0C7E  043E               	iorwf	ReceivePacket_data@fcschecker+1,w
  2621  0C7F  1D03               	btfss	3,2
  2622  0C80  2CC7               	goto	l3398
  2623                           
  2624                           ;decode_AX25.c: 370: for(UINT i=0; i<commandSize; i++){
  2625  0C81  01BF               	clrf	ReceivePacket_data@i
  2626  0C82  01C0               	clrf	ReceivePacket_data@i+1
  2627  0C83  3001               	movlw	low (_commandSize-__stringbase)
  2628  0C84  0084               	movwf	4
  2629  0C85  120A  158A  2000  120A  158A  	fcall	stringdir
  2630  0C8A  00FA               	movwf	??_ReceivePacket_data
  2631  0C8B  120A  158A  2000  120A  158A  	fcall	stringdir
  2632  0C90  00FB               	movwf	??_ReceivePacket_data+1
  2633  0C91  087B               	movf	??_ReceivePacket_data+1,w
  2634  0C92  0240               	subwf	ReceivePacket_data@i+1,w
  2635  0C93  1D03               	skipz
  2636  0C94  2C97               	goto	u3075
  2637  0C95  087A               	movf	??_ReceivePacket_data,w
  2638  0C96  023F               	subwf	ReceivePacket_data@i,w
  2639  0C97                     u3075:	
  2640  0C97  1803               	btfsc	3,0
  2641  0C98  2CC1               	goto	l3390
  2642  0C99                     l3384:	
  2643                           
  2644                           ;decode_AX25.c: 371: dData[i] = dPacket[i+20];
  2645  0C99  083F               	movf	ReceivePacket_data@i,w
  2646  0C9A  3E14               	addlw	20
  2647  0C9B  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2648  0C9C  0084               	movwf	4
  2649  0C9D  1783               	bsf	3,7	;select IRP bank3
  2650  0C9E  0800               	movf	0,w
  2651  0C9F  00FA               	movwf	??_ReceivePacket_data
  2652  0CA0  083F               	movf	ReceivePacket_data@i,w
  2653  0CA1  3E30               	addlw	(low (_dData| (0+256)))& (0+255)
  2654  0CA2  0084               	movwf	4
  2655  0CA3  087A               	movf	??_ReceivePacket_data,w
  2656  0CA4  0080               	movwf	0
  2657  0CA5  3001               	movlw	1
  2658  0CA6  07BF               	addwf	ReceivePacket_data@i,f
  2659  0CA7  1803               	skipnc
  2660  0CA8  0AC0               	incf	ReceivePacket_data@i+1,f
  2661  0CA9  3000               	movlw	0
  2662  0CAA  07C0               	addwf	ReceivePacket_data@i+1,f
  2663  0CAB  3001               	movlw	low (_commandSize-__stringbase)
  2664  0CAC  0084               	movwf	4
  2665  0CAD  120A  158A  2000  120A  158A  	fcall	stringdir
  2666  0CB2  00FA               	movwf	??_ReceivePacket_data
  2667  0CB3  120A  158A  2000  120A  158A  	fcall	stringdir
  2668  0CB8  00FB               	movwf	??_ReceivePacket_data+1
  2669  0CB9  087B               	movf	??_ReceivePacket_data+1,w
  2670  0CBA  0240               	subwf	ReceivePacket_data@i+1,w
  2671  0CBB  1D03               	skipz
  2672  0CBC  2CBF               	goto	u3085
  2673  0CBD  087A               	movf	??_ReceivePacket_data,w
  2674  0CBE  023F               	subwf	ReceivePacket_data@i,w
  2675  0CBF                     u3085:	
  2676  0CBF  1C03               	skipc
  2677  0CC0  2C99               	goto	l3384
  2678  0CC1                     l3390:	
  2679                           
  2680                           ;decode_AX25.c: 372: }
  2681                           ;decode_AX25.c: 373: dPacketnum = 0;
  2682  0CC1  01E8               	clrf	_dPacketnum
  2683  0CC2  01E9               	clrf	_dPacketnum+1
  2684                           
  2685                           ;decode_AX25.c: 374: rcv_state = 0;
  2686  0CC3  01EA               	clrf	_rcv_state
  2687  0CC4  01EB               	clrf	_rcv_state+1
  2688                           
  2689                           ;decode_AX25.c: 375: return dData;
  2690  0CC5  3030               	movlw	(low (_dData| (0+256)))& (0+255)
  2691                           
  2692                           ;decode_AX25.c: 376: }else{
  2693  0CC6  0008               	return
  2694  0CC7                     l3398:	
  2695                           
  2696                           ;decode_AX25.c: 377: dPacketnum = 0;
  2697  0CC7  01E8               	clrf	_dPacketnum
  2698  0CC8  01E9               	clrf	_dPacketnum+1
  2699                           
  2700                           ;decode_AX25.c: 378: rcv_state = 0;
  2701  0CC9  01EA               	clrf	_rcv_state
  2702  0CCA  01EB               	clrf	_rcv_state+1
  2703                           
  2704                           ;decode_AX25.c: 379: return 0x00;
  2705  0CCB  3000               	movlw	0
  2706  0CCC  0008               	return
  2707  0CCD                     __end_of_ReceivePacket_data:	
  2708                           
  2709                           	psect	text4
  2710  0327                     __ptext4:	
  2711 ;; *************** function _waitFlag *****************
  2712 ;; Defined at:
  2713 ;;		line 54 in file "decode_AX25.c"
  2714 ;; Parameters:    Size  Location     Type
  2715 ;;		None
  2716 ;; Auto vars:     Size  Location     Type
  2717 ;;  j               2   24[BANK0 ] unsigned int 
  2718 ;;  j               2   10[BANK0 ] unsigned int 
  2719 ;;  j               2   22[BANK0 ] unsigned int 
  2720 ;;  j               2    8[BANK0 ] unsigned int 
  2721 ;;  j               2   20[BANK0 ] unsigned int 
  2722 ;;  j               2    6[BANK0 ] unsigned int 
  2723 ;;  j               2   18[BANK0 ] unsigned int 
  2724 ;;  j               2    4[BANK0 ] unsigned int 
  2725 ;;  j               2   16[BANK0 ] unsigned int 
  2726 ;;  j               2    2[BANK0 ] unsigned int 
  2727 ;;  i               2    0[BANK0 ] unsigned int 
  2728 ;;  j               2   14[BANK0 ] unsigned int 
  2729 ;;  j               2   12[BANK0 ] unsigned int 
  2730 ;;  flag_judge      2   26[BANK0 ] unsigned int 
  2731 ;;  buf             1   28[BANK0 ] unsigned char 
  2732 ;; Return value:  Size  Location     Type
  2733 ;;                  1    wreg      void 
  2734 ;; Registers used:
  2735 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2736 ;; Tracked objects:
  2737 ;;		On entry : 0/0
  2738 ;;		On exit  : 0/0
  2739 ;;		Unchanged: 0/0
  2740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2741 ;;      Params:         0       0       0       0       0
  2742 ;;      Locals:         0      29       0       0       0
  2743 ;;      Temps:          4       0       0       0       0
  2744 ;;      Totals:         4      29       0       0       0
  2745 ;;Total ram usage:       33 bytes
  2746 ;; Hardware stack levels used:    1
  2747 ;; Hardware stack levels required when called:    1
  2748 ;; This function calls:
  2749 ;;		_getbit
  2750 ;; This function is called by:
  2751 ;;		_ReceivePacket_data
  2752 ;;		_ReceivePacket
  2753 ;; This function uses a non-reentrant model
  2754 ;;
  2755                           
  2756                           
  2757                           ;psect for function _waitFlag
  2758  0327                     _waitFlag:	
  2759                           
  2760                           ;decode_AX25.c: 55: UINT flag_judge;
  2761                           ;decode_AX25.c: 56: UBYTE buf = 0xff;
  2762                           
  2763                           ;incstack = 0
  2764                           ; Regs used in _waitFlag: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2765  0327  30FF               	movlw	255
  2766  0328  00F6               	movwf	??_waitFlag
  2767  0329  0876               	movf	??_waitFlag,w
  2768  032A  1283               	bcf	3,5	;RP0=0, select bank0
  2769  032B  1303               	bcf	3,6	;RP1=0, select bank0
  2770  032C  00BC               	movwf	waitFlag@buf
  2771  032D                     L6:	
  2772                           
  2773                           ;decode_AX25.c: 271: rcv_state = 0;
  2774  032D  01EA               	clrf	_rcv_state
  2775  032E  01EB               	clrf	_rcv_state+1
  2776  032F                     l3068:	
  2777  032F  3000               	movlw	0
  2778  0330  026B               	subwf	_rcv_state+1,w
  2779  0331  3002               	movlw	2
  2780  0332  1903               	skipnz
  2781  0333  026A               	subwf	_rcv_state,w
  2782  0334  1803               	btfsc	3,0
  2783  0335  0008               	return
  2784  0336                     l2702:	
  2785                           ;decode_AX25.c: 59: while(buf != 0x7e){
  2786                           
  2787                           ;decode_AX25.c: 58: while(rcv_state < 2){
  2788                           
  2789                           ;decode_AX25.c: 57: rcv_state = 0;
  2790                           
  2791  0336  307E               	movlw	126
  2792  0337  063C               	xorwf	waitFlag@buf,w
  2793  0338  1903               	btfsc	3,2
  2794  0339  2B86               	goto	l2724
  2795                           
  2796                           ;decode_AX25.c: 60: flag_judge = getbit();
  2797  033A  120A  158A  22A7  120A  118A  	fcall	_getbit
  2798  033F  0871               	movf	?_getbit+1,w
  2799  0340  1283               	bcf	3,5	;RP0=0, select bank0
  2800  0341  1303               	bcf	3,6	;RP1=0, select bank0
  2801  0342  00BB               	movwf	waitFlag@flag_judge+1
  2802  0343  0870               	movf	?_getbit,w
  2803  0344  00BA               	movwf	waitFlag@flag_judge
  2804                           
  2805                           ;decode_AX25.c: 61: buf = buf << 1;
  2806  0345  083C               	movf	waitFlag@buf,w
  2807  0346  00F6               	movwf	??_waitFlag
  2808  0347  0776               	addwf	??_waitFlag,w
  2809  0348  00F7               	movwf	??_waitFlag+1
  2810  0349  0877               	movf	??_waitFlag+1,w
  2811  034A  00BC               	movwf	waitFlag@buf
  2812                           
  2813                           ;decode_AX25.c: 63: buf = buf | 0x00;
  2814  034B  083A               	movf	waitFlag@flag_judge,w
  2815  034C  043B               	iorwf	waitFlag@flag_judge+1,w
  2816  034D  1903               	btfsc	3,2
  2817  034E  2B36               	goto	l2702
  2818                           
  2819                           ;decode_AX25.c: 65: buf = buf | 0x01;
  2820                           
  2821                           ;decode_AX25.c: 64: }else{
  2822  034F  083C               	movf	waitFlag@buf,w
  2823  0350  3801               	iorlw	1
  2824  0351  00F6               	movwf	??_waitFlag
  2825  0352  0876               	movf	??_waitFlag,w
  2826  0353  00BC               	movwf	waitFlag@buf
  2827  0354  2B36               	goto	l2702
  2828  0355                     l2704:	
  2829                           ;decode_AX25.c: 66: }
  2830                           ;decode_AX25.c: 67: }
  2831                           ;decode_AX25.c: 71: while(buf == 0x7e){
  2832                           
  2833                           
  2834                           ;decode_AX25.c: 72: for(UINT i=0;i<8;i++){
  2835  0355  01A0               	clrf	waitFlag@i
  2836  0356  01A1               	clrf	waitFlag@i+1
  2837  0357  3000               	movlw	0
  2838  0358  0221               	subwf	waitFlag@i+1,w
  2839  0359  3008               	movlw	8
  2840  035A  1903               	skipnz
  2841  035B  0220               	subwf	waitFlag@i,w
  2842  035C  1803               	btfsc	3,0
  2843  035D  2B86               	goto	l2724
  2844  035E                     l2710:	
  2845                           
  2846                           ;decode_AX25.c: 73: flag_judge = getbit();
  2847  035E  120A  158A  22A7  120A  118A  	fcall	_getbit
  2848  0363  0871               	movf	?_getbit+1,w
  2849  0364  1283               	bcf	3,5	;RP0=0, select bank0
  2850  0365  1303               	bcf	3,6	;RP1=0, select bank0
  2851  0366  00BB               	movwf	waitFlag@flag_judge+1
  2852  0367  0870               	movf	?_getbit,w
  2853  0368  00BA               	movwf	waitFlag@flag_judge
  2854                           
  2855                           ;decode_AX25.c: 74: buf = buf >> 1;
  2856  0369  083C               	movf	waitFlag@buf,w
  2857  036A  00F6               	movwf	??_waitFlag
  2858  036B  1003               	clrc
  2859  036C  0C76               	rrf	??_waitFlag,w
  2860  036D  00F7               	movwf	??_waitFlag+1
  2861  036E  0877               	movf	??_waitFlag+1,w
  2862  036F  00BC               	movwf	waitFlag@buf
  2863                           
  2864                           ;decode_AX25.c: 76: buf = buf | 0x00;
  2865  0370  083A               	movf	waitFlag@flag_judge,w
  2866  0371  043B               	iorwf	waitFlag@flag_judge+1,w
  2867  0372  1903               	btfsc	3,2
  2868  0373  2B79               	goto	l2720
  2869                           
  2870                           ;decode_AX25.c: 78: buf = buf | 0x80;
  2871                           
  2872                           ;decode_AX25.c: 77: }else{
  2873  0374  083C               	movf	waitFlag@buf,w
  2874  0375  3880               	iorlw	128
  2875  0376  00F6               	movwf	??_waitFlag
  2876  0377  0876               	movf	??_waitFlag,w
  2877  0378  00BC               	movwf	waitFlag@buf
  2878  0379                     l2720:	
  2879  0379  3001               	movlw	1
  2880  037A  07A0               	addwf	waitFlag@i,f
  2881  037B  1803               	skipnc
  2882  037C  0AA1               	incf	waitFlag@i+1,f
  2883  037D  3000               	movlw	0
  2884  037E  07A1               	addwf	waitFlag@i+1,f
  2885  037F  3000               	movlw	0
  2886  0380  0221               	subwf	waitFlag@i+1,w
  2887  0381  3008               	movlw	8
  2888  0382  1903               	skipnz
  2889  0383  0220               	subwf	waitFlag@i,w
  2890  0384  1C03               	skipc
  2891  0385  2B5E               	goto	l2710
  2892  0386                     l2724:	
  2893  0386  307E               	movlw	126
  2894  0387  063C               	xorwf	waitFlag@buf,w
  2895  0388  1903               	btfsc	3,2
  2896  0389  2B55               	goto	l2704
  2897                           
  2898                           ;decode_AX25.c: 79: }
  2899                           ;decode_AX25.c: 80: }
  2900                           ;decode_AX25.c: 81: }
  2901                           ;decode_AX25.c: 82: if(buf == ("JQ1YCZ"[0] << 1)){
  2902  038A  300A               	movlw	low (STR_1-__stringbase)
  2903  038B  0084               	movwf	4
  2904  038C  120A  158A  2000  120A  118A  	fcall	stringdir
  2905  0391  00F6               	movwf	??_waitFlag
  2906  0392  01F7               	clrf	??_waitFlag+1
  2907  0393  1003               	clrc
  2908  0394  0DF6               	rlf	??_waitFlag,f
  2909  0395  0DF7               	rlf	??_waitFlag+1,f
  2910  0396  083C               	movf	waitFlag@buf,w
  2911  0397  00F8               	movwf	??_waitFlag+2
  2912  0398  01F9               	clrf	??_waitFlag+3
  2913  0399  0877               	movf	??_waitFlag+1,w
  2914  039A  0679               	xorwf	??_waitFlag+3,w
  2915  039B  1D03               	skipz
  2916  039C  2B9F               	goto	u2165
  2917  039D  0876               	movf	??_waitFlag,w
  2918  039E  0678               	xorwf	??_waitFlag+2,w
  2919  039F                     u2165:	
  2920  039F  1D03               	skipz
  2921  03A0  2D64               	goto	l2874
  2922                           
  2923                           ;decode_AX25.c: 83: dPacket[dPacketnum] = buf;
  2924  03A1  083C               	movf	waitFlag@buf,w
  2925  03A2  00F6               	movwf	??_waitFlag
  2926  03A3  0868               	movf	_dPacketnum,w
  2927  03A4  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2928  03A5  0084               	movwf	4
  2929  03A6  0876               	movf	??_waitFlag,w
  2930  03A7  1783               	bsf	3,7	;select IRP bank3
  2931  03A8  0080               	movwf	0
  2932                           
  2933                           ;decode_AX25.c: 84: dPacketnum ++;
  2934  03A9  3001               	movlw	1
  2935  03AA  07E8               	addwf	_dPacketnum,f
  2936  03AB  1803               	skipnc
  2937  03AC  0AE9               	incf	_dPacketnum+1,f
  2938  03AD  3000               	movlw	0
  2939  03AE  07E9               	addwf	_dPacketnum+1,f
  2940                           
  2941                           ;decode_AX25.c: 85: for(UINT j=0;j<8;j++){
  2942  03AF  01A2               	clrf	waitFlag@j
  2943  03B0  01A3               	clrf	waitFlag@j+1
  2944  03B1  3000               	movlw	0
  2945  03B2  0223               	subwf	waitFlag@j+1,w
  2946  03B3  3008               	movlw	8
  2947  03B4  1903               	skipnz
  2948  03B5  0222               	subwf	waitFlag@j,w
  2949  03B6  1803               	btfsc	3,0
  2950  03B7  2BE0               	goto	l2752
  2951  03B8                     l2738:	
  2952                           
  2953                           ;decode_AX25.c: 86: flag_judge = getbit();
  2954  03B8  120A  158A  22A7  120A  118A  	fcall	_getbit
  2955  03BD  0871               	movf	?_getbit+1,w
  2956  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  2957  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  2958  03C0  00BB               	movwf	waitFlag@flag_judge+1
  2959  03C1  0870               	movf	?_getbit,w
  2960  03C2  00BA               	movwf	waitFlag@flag_judge
  2961                           
  2962                           ;decode_AX25.c: 87: buf = buf >> 1;
  2963  03C3  083C               	movf	waitFlag@buf,w
  2964  03C4  00F6               	movwf	??_waitFlag
  2965  03C5  1003               	clrc
  2966  03C6  0C76               	rrf	??_waitFlag,w
  2967  03C7  00F7               	movwf	??_waitFlag+1
  2968  03C8  0877               	movf	??_waitFlag+1,w
  2969  03C9  00BC               	movwf	waitFlag@buf
  2970                           
  2971                           ;decode_AX25.c: 89: buf = buf | 0x00;
  2972  03CA  083A               	movf	waitFlag@flag_judge,w
  2973  03CB  043B               	iorwf	waitFlag@flag_judge+1,w
  2974  03CC  1903               	btfsc	3,2
  2975  03CD  2BD3               	goto	l2748
  2976                           
  2977                           ;decode_AX25.c: 91: buf = buf | 0x80;
  2978                           
  2979                           ;decode_AX25.c: 90: }else{
  2980  03CE  083C               	movf	waitFlag@buf,w
  2981  03CF  3880               	iorlw	128
  2982  03D0  00F6               	movwf	??_waitFlag
  2983  03D1  0876               	movf	??_waitFlag,w
  2984  03D2  00BC               	movwf	waitFlag@buf
  2985  03D3                     l2748:	
  2986  03D3  3001               	movlw	1
  2987  03D4  07A2               	addwf	waitFlag@j,f
  2988  03D5  1803               	skipnc
  2989  03D6  0AA3               	incf	waitFlag@j+1,f
  2990  03D7  3000               	movlw	0
  2991  03D8  07A3               	addwf	waitFlag@j+1,f
  2992  03D9  3000               	movlw	0
  2993  03DA  0223               	subwf	waitFlag@j+1,w
  2994  03DB  3008               	movlw	8
  2995  03DC  1903               	skipnz
  2996  03DD  0222               	subwf	waitFlag@j,w
  2997  03DE  1C03               	skipc
  2998  03DF  2BB8               	goto	l2738
  2999  03E0                     l2752:	
  3000                           
  3001                           ;decode_AX25.c: 92: }
  3002                           ;decode_AX25.c: 93: }
  3003                           ;decode_AX25.c: 94: if(buf == ("JQ1YCZ"[1] << 1)){
  3004  03E0  300B               	movlw	low (((STR_1+1)-__stringbase)| (0+32768))
  3005  03E1  0084               	movwf	4
  3006  03E2  120A  158A  2000  120A  118A  	fcall	stringdir
  3007  03E7  00F6               	movwf	??_waitFlag
  3008  03E8  01F7               	clrf	??_waitFlag+1
  3009  03E9  1003               	clrc
  3010  03EA  0DF6               	rlf	??_waitFlag,f
  3011  03EB  0DF7               	rlf	??_waitFlag+1,f
  3012  03EC  083C               	movf	waitFlag@buf,w
  3013  03ED  00F8               	movwf	??_waitFlag+2
  3014  03EE  01F9               	clrf	??_waitFlag+3
  3015  03EF  0877               	movf	??_waitFlag+1,w
  3016  03F0  0679               	xorwf	??_waitFlag+3,w
  3017  03F1  1D03               	skipz
  3018  03F2  2BF5               	goto	u2205
  3019  03F3  0876               	movf	??_waitFlag,w
  3020  03F4  0678               	xorwf	??_waitFlag+2,w
  3021  03F5                     u2205:	
  3022  03F5  1D03               	skipz
  3023  03F6  2D64               	goto	l2874
  3024                           
  3025                           ;decode_AX25.c: 95: dPacket[dPacketnum] = buf;
  3026  03F7  083C               	movf	waitFlag@buf,w
  3027  03F8  00F6               	movwf	??_waitFlag
  3028  03F9  0868               	movf	_dPacketnum,w
  3029  03FA  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3030  03FB  0084               	movwf	4
  3031  03FC  0876               	movf	??_waitFlag,w
  3032  03FD  1783               	bsf	3,7	;select IRP bank3
  3033  03FE  0080               	movwf	0
  3034                           
  3035                           ;decode_AX25.c: 96: dPacketnum ++;
  3036  03FF  3001               	movlw	1
  3037  0400  07E8               	addwf	_dPacketnum,f
  3038  0401  1803               	skipnc
  3039  0402  0AE9               	incf	_dPacketnum+1,f
  3040  0403  3000               	movlw	0
  3041  0404  07E9               	addwf	_dPacketnum+1,f
  3042                           
  3043                           ;decode_AX25.c: 97: for(UINT j=0;j<8;j++){
  3044  0405  01A4               	clrf	waitFlag@j_118
  3045  0406  01A5               	clrf	waitFlag@j_118+1
  3046  0407  3000               	movlw	0
  3047  0408  0225               	subwf	waitFlag@j_118+1,w
  3048  0409  3008               	movlw	8
  3049  040A  1903               	skipnz
  3050  040B  0224               	subwf	waitFlag@j_118,w
  3051  040C  1803               	btfsc	3,0
  3052  040D  2C36               	goto	l2778
  3053  040E                     l2764:	
  3054                           
  3055                           ;decode_AX25.c: 98: flag_judge = getbit();
  3056  040E  120A  158A  22A7  120A  118A  	fcall	_getbit
  3057  0413  0871               	movf	?_getbit+1,w
  3058  0414  1283               	bcf	3,5	;RP0=0, select bank0
  3059  0415  1303               	bcf	3,6	;RP1=0, select bank0
  3060  0416  00BB               	movwf	waitFlag@flag_judge+1
  3061  0417  0870               	movf	?_getbit,w
  3062  0418  00BA               	movwf	waitFlag@flag_judge
  3063                           
  3064                           ;decode_AX25.c: 99: buf = buf >> 1;
  3065  0419  083C               	movf	waitFlag@buf,w
  3066  041A  00F6               	movwf	??_waitFlag
  3067  041B  1003               	clrc
  3068  041C  0C76               	rrf	??_waitFlag,w
  3069  041D  00F7               	movwf	??_waitFlag+1
  3070  041E  0877               	movf	??_waitFlag+1,w
  3071  041F  00BC               	movwf	waitFlag@buf
  3072                           
  3073                           ;decode_AX25.c: 101: buf = buf | 0x00;
  3074  0420  083A               	movf	waitFlag@flag_judge,w
  3075  0421  043B               	iorwf	waitFlag@flag_judge+1,w
  3076  0422  1903               	btfsc	3,2
  3077  0423  2C29               	goto	l2774
  3078                           
  3079                           ;decode_AX25.c: 103: buf = buf | 0x80;
  3080                           
  3081                           ;decode_AX25.c: 102: }else{
  3082  0424  083C               	movf	waitFlag@buf,w
  3083  0425  3880               	iorlw	128
  3084  0426  00F6               	movwf	??_waitFlag
  3085  0427  0876               	movf	??_waitFlag,w
  3086  0428  00BC               	movwf	waitFlag@buf
  3087  0429                     l2774:	
  3088  0429  3001               	movlw	1
  3089  042A  07A4               	addwf	waitFlag@j_118,f
  3090  042B  1803               	skipnc
  3091  042C  0AA5               	incf	waitFlag@j_118+1,f
  3092  042D  3000               	movlw	0
  3093  042E  07A5               	addwf	waitFlag@j_118+1,f
  3094  042F  3000               	movlw	0
  3095  0430  0225               	subwf	waitFlag@j_118+1,w
  3096  0431  3008               	movlw	8
  3097  0432  1903               	skipnz
  3098  0433  0224               	subwf	waitFlag@j_118,w
  3099  0434  1C03               	skipc
  3100  0435  2C0E               	goto	l2764
  3101  0436                     l2778:	
  3102                           
  3103                           ;decode_AX25.c: 104: }
  3104                           ;decode_AX25.c: 105: }
  3105                           ;decode_AX25.c: 106: if(buf == ("JQ1YCZ"[2] << 1)){
  3106  0436  300C               	movlw	low (((STR_1+2)-__stringbase)| (0+32768))
  3107  0437  0084               	movwf	4
  3108  0438  120A  158A  2000  120A  118A  	fcall	stringdir
  3109  043D  00F6               	movwf	??_waitFlag
  3110  043E  01F7               	clrf	??_waitFlag+1
  3111  043F  1003               	clrc
  3112  0440  0DF6               	rlf	??_waitFlag,f
  3113  0441  0DF7               	rlf	??_waitFlag+1,f
  3114  0442  083C               	movf	waitFlag@buf,w
  3115  0443  00F8               	movwf	??_waitFlag+2
  3116  0444  01F9               	clrf	??_waitFlag+3
  3117  0445  0877               	movf	??_waitFlag+1,w
  3118  0446  0679               	xorwf	??_waitFlag+3,w
  3119  0447  1D03               	skipz
  3120  0448  2C4B               	goto	u2245
  3121  0449  0876               	movf	??_waitFlag,w
  3122  044A  0678               	xorwf	??_waitFlag+2,w
  3123  044B                     u2245:	
  3124  044B  1D03               	skipz
  3125  044C  2D64               	goto	l2874
  3126                           
  3127                           ;decode_AX25.c: 107: dPacket[dPacketnum] = buf;
  3128  044D  083C               	movf	waitFlag@buf,w
  3129  044E  00F6               	movwf	??_waitFlag
  3130  044F  0868               	movf	_dPacketnum,w
  3131  0450  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3132  0451  0084               	movwf	4
  3133  0452  0876               	movf	??_waitFlag,w
  3134  0453  1783               	bsf	3,7	;select IRP bank3
  3135  0454  0080               	movwf	0
  3136                           
  3137                           ;decode_AX25.c: 108: dPacketnum ++;
  3138  0455  3001               	movlw	1
  3139  0456  07E8               	addwf	_dPacketnum,f
  3140  0457  1803               	skipnc
  3141  0458  0AE9               	incf	_dPacketnum+1,f
  3142  0459  3000               	movlw	0
  3143  045A  07E9               	addwf	_dPacketnum+1,f
  3144                           
  3145                           ;decode_AX25.c: 109: for(UINT j=0;j<8;j++){
  3146  045B  01A6               	clrf	waitFlag@j_120
  3147  045C  01A7               	clrf	waitFlag@j_120+1
  3148  045D  3000               	movlw	0
  3149  045E  0227               	subwf	waitFlag@j_120+1,w
  3150  045F  3008               	movlw	8
  3151  0460  1903               	skipnz
  3152  0461  0226               	subwf	waitFlag@j_120,w
  3153  0462  1803               	btfsc	3,0
  3154  0463  2C8C               	goto	l2804
  3155  0464                     l2790:	
  3156                           
  3157                           ;decode_AX25.c: 110: flag_judge = getbit();
  3158  0464  120A  158A  22A7  120A  118A  	fcall	_getbit
  3159  0469  0871               	movf	?_getbit+1,w
  3160  046A  1283               	bcf	3,5	;RP0=0, select bank0
  3161  046B  1303               	bcf	3,6	;RP1=0, select bank0
  3162  046C  00BB               	movwf	waitFlag@flag_judge+1
  3163  046D  0870               	movf	?_getbit,w
  3164  046E  00BA               	movwf	waitFlag@flag_judge
  3165                           
  3166                           ;decode_AX25.c: 111: buf = buf >> 1;
  3167  046F  083C               	movf	waitFlag@buf,w
  3168  0470  00F6               	movwf	??_waitFlag
  3169  0471  1003               	clrc
  3170  0472  0C76               	rrf	??_waitFlag,w
  3171  0473  00F7               	movwf	??_waitFlag+1
  3172  0474  0877               	movf	??_waitFlag+1,w
  3173  0475  00BC               	movwf	waitFlag@buf
  3174                           
  3175                           ;decode_AX25.c: 113: buf = buf | 0x00;
  3176  0476  083A               	movf	waitFlag@flag_judge,w
  3177  0477  043B               	iorwf	waitFlag@flag_judge+1,w
  3178  0478  1903               	btfsc	3,2
  3179  0479  2C7F               	goto	l2800
  3180                           
  3181                           ;decode_AX25.c: 115: buf = buf | 0x80;
  3182                           
  3183                           ;decode_AX25.c: 114: }else{
  3184  047A  083C               	movf	waitFlag@buf,w
  3185  047B  3880               	iorlw	128
  3186  047C  00F6               	movwf	??_waitFlag
  3187  047D  0876               	movf	??_waitFlag,w
  3188  047E  00BC               	movwf	waitFlag@buf
  3189  047F                     l2800:	
  3190  047F  3001               	movlw	1
  3191  0480  07A6               	addwf	waitFlag@j_120,f
  3192  0481  1803               	skipnc
  3193  0482  0AA7               	incf	waitFlag@j_120+1,f
  3194  0483  3000               	movlw	0
  3195  0484  07A7               	addwf	waitFlag@j_120+1,f
  3196  0485  3000               	movlw	0
  3197  0486  0227               	subwf	waitFlag@j_120+1,w
  3198  0487  3008               	movlw	8
  3199  0488  1903               	skipnz
  3200  0489  0226               	subwf	waitFlag@j_120,w
  3201  048A  1C03               	skipc
  3202  048B  2C64               	goto	l2790
  3203  048C                     l2804:	
  3204                           
  3205                           ;decode_AX25.c: 116: }
  3206                           ;decode_AX25.c: 117: }
  3207                           ;decode_AX25.c: 118: if(buf == ("JQ1YCZ"[3] << 1)){
  3208  048C  300D               	movlw	low (((STR_1+3)-__stringbase)| (0+32768))
  3209  048D  0084               	movwf	4
  3210  048E  120A  158A  2000  120A  118A  	fcall	stringdir
  3211  0493  00F6               	movwf	??_waitFlag
  3212  0494  01F7               	clrf	??_waitFlag+1
  3213  0495  1003               	clrc
  3214  0496  0DF6               	rlf	??_waitFlag,f
  3215  0497  0DF7               	rlf	??_waitFlag+1,f
  3216  0498  083C               	movf	waitFlag@buf,w
  3217  0499  00F8               	movwf	??_waitFlag+2
  3218  049A  01F9               	clrf	??_waitFlag+3
  3219  049B  0877               	movf	??_waitFlag+1,w
  3220  049C  0679               	xorwf	??_waitFlag+3,w
  3221  049D  1D03               	skipz
  3222  049E  2CA1               	goto	u2285
  3223  049F  0876               	movf	??_waitFlag,w
  3224  04A0  0678               	xorwf	??_waitFlag+2,w
  3225  04A1                     u2285:	
  3226  04A1  1D03               	skipz
  3227  04A2  2D64               	goto	l2874
  3228                           
  3229                           ;decode_AX25.c: 119: dPacket[dPacketnum] = buf;
  3230  04A3  083C               	movf	waitFlag@buf,w
  3231  04A4  00F6               	movwf	??_waitFlag
  3232  04A5  0868               	movf	_dPacketnum,w
  3233  04A6  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3234  04A7  0084               	movwf	4
  3235  04A8  0876               	movf	??_waitFlag,w
  3236  04A9  1783               	bsf	3,7	;select IRP bank3
  3237  04AA  0080               	movwf	0
  3238                           
  3239                           ;decode_AX25.c: 120: dPacketnum ++;
  3240  04AB  3001               	movlw	1
  3241  04AC  07E8               	addwf	_dPacketnum,f
  3242  04AD  1803               	skipnc
  3243  04AE  0AE9               	incf	_dPacketnum+1,f
  3244  04AF  3000               	movlw	0
  3245  04B0  07E9               	addwf	_dPacketnum+1,f
  3246                           
  3247                           ;decode_AX25.c: 121: for(UINT j=0;j<8;j++){
  3248  04B1  01A8               	clrf	waitFlag@j_122
  3249  04B2  01A9               	clrf	waitFlag@j_122+1
  3250  04B3  3000               	movlw	0
  3251  04B4  0229               	subwf	waitFlag@j_122+1,w
  3252  04B5  3008               	movlw	8
  3253  04B6  1903               	skipnz
  3254  04B7  0228               	subwf	waitFlag@j_122,w
  3255  04B8  1803               	btfsc	3,0
  3256  04B9  2CE2               	goto	l2830
  3257  04BA                     l2816:	
  3258                           
  3259                           ;decode_AX25.c: 122: flag_judge = getbit();
  3260  04BA  120A  158A  22A7  120A  118A  	fcall	_getbit
  3261  04BF  0871               	movf	?_getbit+1,w
  3262  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  3263  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  3264  04C2  00BB               	movwf	waitFlag@flag_judge+1
  3265  04C3  0870               	movf	?_getbit,w
  3266  04C4  00BA               	movwf	waitFlag@flag_judge
  3267                           
  3268                           ;decode_AX25.c: 123: buf = buf >> 1;
  3269  04C5  083C               	movf	waitFlag@buf,w
  3270  04C6  00F6               	movwf	??_waitFlag
  3271  04C7  1003               	clrc
  3272  04C8  0C76               	rrf	??_waitFlag,w
  3273  04C9  00F7               	movwf	??_waitFlag+1
  3274  04CA  0877               	movf	??_waitFlag+1,w
  3275  04CB  00BC               	movwf	waitFlag@buf
  3276                           
  3277                           ;decode_AX25.c: 125: buf = buf | 0x00;
  3278  04CC  083A               	movf	waitFlag@flag_judge,w
  3279  04CD  043B               	iorwf	waitFlag@flag_judge+1,w
  3280  04CE  1903               	btfsc	3,2
  3281  04CF  2CD5               	goto	l2826
  3282                           
  3283                           ;decode_AX25.c: 127: buf = buf | 0x80;
  3284                           
  3285                           ;decode_AX25.c: 126: }else{
  3286  04D0  083C               	movf	waitFlag@buf,w
  3287  04D1  3880               	iorlw	128
  3288  04D2  00F6               	movwf	??_waitFlag
  3289  04D3  0876               	movf	??_waitFlag,w
  3290  04D4  00BC               	movwf	waitFlag@buf
  3291  04D5                     l2826:	
  3292  04D5  3001               	movlw	1
  3293  04D6  07A8               	addwf	waitFlag@j_122,f
  3294  04D7  1803               	skipnc
  3295  04D8  0AA9               	incf	waitFlag@j_122+1,f
  3296  04D9  3000               	movlw	0
  3297  04DA  07A9               	addwf	waitFlag@j_122+1,f
  3298  04DB  3000               	movlw	0
  3299  04DC  0229               	subwf	waitFlag@j_122+1,w
  3300  04DD  3008               	movlw	8
  3301  04DE  1903               	skipnz
  3302  04DF  0228               	subwf	waitFlag@j_122,w
  3303  04E0  1C03               	skipc
  3304  04E1  2CBA               	goto	l2816
  3305  04E2                     l2830:	
  3306                           
  3307                           ;decode_AX25.c: 128: }
  3308                           ;decode_AX25.c: 129: }
  3309                           ;decode_AX25.c: 130: if(buf == ("JQ1YCZ"[4] << 1)){
  3310  04E2  300E               	movlw	low (((STR_1+4)-__stringbase)| (0+32768))
  3311  04E3  0084               	movwf	4
  3312  04E4  120A  158A  2000  120A  118A  	fcall	stringdir
  3313  04E9  00F6               	movwf	??_waitFlag
  3314  04EA  01F7               	clrf	??_waitFlag+1
  3315  04EB  1003               	clrc
  3316  04EC  0DF6               	rlf	??_waitFlag,f
  3317  04ED  0DF7               	rlf	??_waitFlag+1,f
  3318  04EE  083C               	movf	waitFlag@buf,w
  3319  04EF  00F8               	movwf	??_waitFlag+2
  3320  04F0  01F9               	clrf	??_waitFlag+3
  3321  04F1  0877               	movf	??_waitFlag+1,w
  3322  04F2  0679               	xorwf	??_waitFlag+3,w
  3323  04F3  1D03               	skipz
  3324  04F4  2CF7               	goto	u2325
  3325  04F5  0876               	movf	??_waitFlag,w
  3326  04F6  0678               	xorwf	??_waitFlag+2,w
  3327  04F7                     u2325:	
  3328  04F7  1D03               	skipz
  3329  04F8  2D64               	goto	l2874
  3330                           
  3331                           ;decode_AX25.c: 131: dPacket[dPacketnum] = buf;
  3332  04F9  083C               	movf	waitFlag@buf,w
  3333  04FA  00F6               	movwf	??_waitFlag
  3334  04FB  0868               	movf	_dPacketnum,w
  3335  04FC  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3336  04FD  0084               	movwf	4
  3337  04FE  0876               	movf	??_waitFlag,w
  3338  04FF  1783               	bsf	3,7	;select IRP bank3
  3339  0500  0080               	movwf	0
  3340                           
  3341                           ;decode_AX25.c: 132: dPacketnum ++;
  3342  0501  3001               	movlw	1
  3343  0502  07E8               	addwf	_dPacketnum,f
  3344  0503  1803               	skipnc
  3345  0504  0AE9               	incf	_dPacketnum+1,f
  3346  0505  3000               	movlw	0
  3347  0506  07E9               	addwf	_dPacketnum+1,f
  3348                           
  3349                           ;decode_AX25.c: 133: for(UINT j=0;j<8;j++){
  3350  0507  01AA               	clrf	waitFlag@j_124
  3351  0508  01AB               	clrf	waitFlag@j_124+1
  3352  0509  3000               	movlw	0
  3353  050A  022B               	subwf	waitFlag@j_124+1,w
  3354  050B  3008               	movlw	8
  3355  050C  1903               	skipnz
  3356  050D  022A               	subwf	waitFlag@j_124,w
  3357  050E  1803               	btfsc	3,0
  3358  050F  2D38               	goto	l2856
  3359  0510                     l2842:	
  3360                           
  3361                           ;decode_AX25.c: 134: flag_judge = getbit();
  3362  0510  120A  158A  22A7  120A  118A  	fcall	_getbit
  3363  0515  0871               	movf	?_getbit+1,w
  3364  0516  1283               	bcf	3,5	;RP0=0, select bank0
  3365  0517  1303               	bcf	3,6	;RP1=0, select bank0
  3366  0518  00BB               	movwf	waitFlag@flag_judge+1
  3367  0519  0870               	movf	?_getbit,w
  3368  051A  00BA               	movwf	waitFlag@flag_judge
  3369                           
  3370                           ;decode_AX25.c: 135: buf = buf >> 1;
  3371  051B  083C               	movf	waitFlag@buf,w
  3372  051C  00F6               	movwf	??_waitFlag
  3373  051D  1003               	clrc
  3374  051E  0C76               	rrf	??_waitFlag,w
  3375  051F  00F7               	movwf	??_waitFlag+1
  3376  0520  0877               	movf	??_waitFlag+1,w
  3377  0521  00BC               	movwf	waitFlag@buf
  3378                           
  3379                           ;decode_AX25.c: 137: buf = buf | 0x00;
  3380  0522  083A               	movf	waitFlag@flag_judge,w
  3381  0523  043B               	iorwf	waitFlag@flag_judge+1,w
  3382  0524  1903               	btfsc	3,2
  3383  0525  2D2B               	goto	l2852
  3384                           
  3385                           ;decode_AX25.c: 139: buf = buf | 0x80;
  3386                           
  3387                           ;decode_AX25.c: 138: }else{
  3388  0526  083C               	movf	waitFlag@buf,w
  3389  0527  3880               	iorlw	128
  3390  0528  00F6               	movwf	??_waitFlag
  3391  0529  0876               	movf	??_waitFlag,w
  3392  052A  00BC               	movwf	waitFlag@buf
  3393  052B                     l2852:	
  3394  052B  3001               	movlw	1
  3395  052C  07AA               	addwf	waitFlag@j_124,f
  3396  052D  1803               	skipnc
  3397  052E  0AAB               	incf	waitFlag@j_124+1,f
  3398  052F  3000               	movlw	0
  3399  0530  07AB               	addwf	waitFlag@j_124+1,f
  3400  0531  3000               	movlw	0
  3401  0532  022B               	subwf	waitFlag@j_124+1,w
  3402  0533  3008               	movlw	8
  3403  0534  1903               	skipnz
  3404  0535  022A               	subwf	waitFlag@j_124,w
  3405  0536  1C03               	skipc
  3406  0537  2D10               	goto	l2842
  3407  0538                     l2856:	
  3408                           
  3409                           ;decode_AX25.c: 140: }
  3410                           ;decode_AX25.c: 141: }
  3411                           ;decode_AX25.c: 142: if(buf == ("JQ1YCZ"[5] << 1)){
  3412  0538  300F               	movlw	low (((STR_1+5)-__stringbase)| (0+32768))
  3413  0539  0084               	movwf	4
  3414  053A  120A  158A  2000  120A  118A  	fcall	stringdir
  3415  053F  00F6               	movwf	??_waitFlag
  3416  0540  01F7               	clrf	??_waitFlag+1
  3417  0541  1003               	clrc
  3418  0542  0DF6               	rlf	??_waitFlag,f
  3419  0543  0DF7               	rlf	??_waitFlag+1,f
  3420  0544  083C               	movf	waitFlag@buf,w
  3421  0545  00F8               	movwf	??_waitFlag+2
  3422  0546  01F9               	clrf	??_waitFlag+3
  3423  0547  0877               	movf	??_waitFlag+1,w
  3424  0548  0679               	xorwf	??_waitFlag+3,w
  3425  0549  1D03               	skipz
  3426  054A  2D4D               	goto	u2365
  3427  054B  0876               	movf	??_waitFlag,w
  3428  054C  0678               	xorwf	??_waitFlag+2,w
  3429  054D                     u2365:	
  3430  054D  1D03               	skipz
  3431  054E  2D64               	goto	l2874
  3432                           
  3433                           ;decode_AX25.c: 143: dPacket[dPacketnum] = buf;
  3434  054F  083C               	movf	waitFlag@buf,w
  3435  0550  00F6               	movwf	??_waitFlag
  3436  0551  0868               	movf	_dPacketnum,w
  3437  0552  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3438  0553  0084               	movwf	4
  3439  0554  0876               	movf	??_waitFlag,w
  3440  0555  1783               	bsf	3,7	;select IRP bank3
  3441  0556  0080               	movwf	0
  3442                           
  3443                           ;decode_AX25.c: 144: dPacketnum ++;
  3444  0557  3001               	movlw	1
  3445  0558  07E8               	addwf	_dPacketnum,f
  3446  0559  1803               	skipnc
  3447  055A  0AE9               	incf	_dPacketnum+1,f
  3448  055B  3000               	movlw	0
  3449  055C  07E9               	addwf	_dPacketnum+1,f
  3450                           
  3451                           ;decode_AX25.c: 145: rcv_state ++;
  3452  055D  3001               	movlw	1
  3453  055E  07EA               	addwf	_rcv_state,f
  3454  055F  1803               	skipnc
  3455  0560  0AEB               	incf	_rcv_state+1,f
  3456  0561  3000               	movlw	0
  3457  0562  07EB               	addwf	_rcv_state+1,f
  3458                           
  3459                           ;decode_AX25.c: 146: }else{
  3460  0563  2D66               	goto	l214
  3461  0564                     l2874:	
  3462                           ;decode_AX25.c: 160: }
  3463                           ;decode_AX25.c: 161: }else{
  3464                           
  3465                           ;decode_AX25.c: 159: dPacketnum = 0;
  3466                           
  3467                           ;decode_AX25.c: 157: }
  3468                           ;decode_AX25.c: 158: }else{
  3469                           
  3470                           ;decode_AX25.c: 156: dPacketnum = 0;
  3471                           
  3472                           ;decode_AX25.c: 154: }
  3473                           ;decode_AX25.c: 155: }else{
  3474                           
  3475                           ;decode_AX25.c: 153: dPacketnum = 0;
  3476                           
  3477                           ;decode_AX25.c: 151: }
  3478                           ;decode_AX25.c: 152: }else{
  3479                           
  3480                           ;decode_AX25.c: 150: dPacketnum = 0;
  3481                           
  3482                           ;decode_AX25.c: 148: }
  3483                           ;decode_AX25.c: 149: }else{
  3484                           
  3485                           ;decode_AX25.c: 147: dPacketnum = 0;
  3486                           
  3487                           
  3488                           ;decode_AX25.c: 162: dPacketnum = 0;
  3489  0564  01E8               	clrf	_dPacketnum
  3490  0565  01E9               	clrf	_dPacketnum+1
  3491  0566                     l214:	
  3492                           
  3493                           ;decode_AX25.c: 163: }
  3494                           ;decode_AX25.c: 165: for(UINT j=0;j<8;j++){
  3495  0566  01AC               	clrf	waitFlag@j_126
  3496  0567  01AD               	clrf	waitFlag@j_126+1
  3497  0568  3000               	movlw	0
  3498  0569  022D               	subwf	waitFlag@j_126+1,w
  3499  056A  3008               	movlw	8
  3500  056B  1903               	skipnz
  3501  056C  022C               	subwf	waitFlag@j_126,w
  3502  056D  1803               	btfsc	3,0
  3503  056E  2D97               	goto	l2894
  3504  056F                     l2880:	
  3505                           
  3506                           ;decode_AX25.c: 166: flag_judge = getbit();
  3507  056F  120A  158A  22A7  120A  118A  	fcall	_getbit
  3508  0574  0871               	movf	?_getbit+1,w
  3509  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3510  0576  1303               	bcf	3,6	;RP1=0, select bank0
  3511  0577  00BB               	movwf	waitFlag@flag_judge+1
  3512  0578  0870               	movf	?_getbit,w
  3513  0579  00BA               	movwf	waitFlag@flag_judge
  3514                           
  3515                           ;decode_AX25.c: 167: buf = buf >> 1;
  3516  057A  083C               	movf	waitFlag@buf,w
  3517  057B  00F6               	movwf	??_waitFlag
  3518  057C  1003               	clrc
  3519  057D  0C76               	rrf	??_waitFlag,w
  3520  057E  00F7               	movwf	??_waitFlag+1
  3521  057F  0877               	movf	??_waitFlag+1,w
  3522  0580  00BC               	movwf	waitFlag@buf
  3523                           
  3524                           ;decode_AX25.c: 169: buf = buf | 0x00;
  3525  0581  083A               	movf	waitFlag@flag_judge,w
  3526  0582  043B               	iorwf	waitFlag@flag_judge+1,w
  3527  0583  1903               	btfsc	3,2
  3528  0584  2D8A               	goto	l2890
  3529                           
  3530                           ;decode_AX25.c: 171: buf = buf | 0x80;
  3531                           
  3532                           ;decode_AX25.c: 170: }else{
  3533  0585  083C               	movf	waitFlag@buf,w
  3534  0586  3880               	iorlw	128
  3535  0587  00F6               	movwf	??_waitFlag
  3536  0588  0876               	movf	??_waitFlag,w
  3537  0589  00BC               	movwf	waitFlag@buf
  3538  058A                     l2890:	
  3539  058A  3001               	movlw	1
  3540  058B  07AC               	addwf	waitFlag@j_126,f
  3541  058C  1803               	skipnc
  3542  058D  0AAD               	incf	waitFlag@j_126+1,f
  3543  058E  3000               	movlw	0
  3544  058F  07AD               	addwf	waitFlag@j_126+1,f
  3545  0590  3000               	movlw	0
  3546  0591  022D               	subwf	waitFlag@j_126+1,w
  3547  0592  3008               	movlw	8
  3548  0593  1903               	skipnz
  3549  0594  022C               	subwf	waitFlag@j_126,w
  3550  0595  1C03               	skipc
  3551  0596  2D6F               	goto	l2880
  3552  0597                     l2894:	
  3553                           
  3554                           ;decode_AX25.c: 172: }
  3555                           ;decode_AX25.c: 173: }
  3556                           ;decode_AX25.c: 174: dPacket[dPacketnum] = buf;
  3557  0597  083C               	movf	waitFlag@buf,w
  3558  0598  00F6               	movwf	??_waitFlag
  3559  0599  0868               	movf	_dPacketnum,w
  3560  059A  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3561  059B  0084               	movwf	4
  3562  059C  0876               	movf	??_waitFlag,w
  3563  059D  1783               	bsf	3,7	;select IRP bank3
  3564  059E  0080               	movwf	0
  3565                           
  3566                           ;decode_AX25.c: 175: dPacketnum ++;
  3567  059F  3001               	movlw	1
  3568  05A0  07E8               	addwf	_dPacketnum,f
  3569  05A1  1803               	skipnc
  3570  05A2  0AE9               	incf	_dPacketnum+1,f
  3571  05A3  3000               	movlw	0
  3572  05A4  07E9               	addwf	_dPacketnum+1,f
  3573                           
  3574                           ;decode_AX25.c: 176: for(UINT j=0;j<8;j++){
  3575  05A5  01AE               	clrf	waitFlag@j_127
  3576  05A6  01AF               	clrf	waitFlag@j_127+1
  3577  05A7  3000               	movlw	0
  3578  05A8  022F               	subwf	waitFlag@j_127+1,w
  3579  05A9  3008               	movlw	8
  3580  05AA  1903               	skipnz
  3581  05AB  022E               	subwf	waitFlag@j_127,w
  3582  05AC  1803               	btfsc	3,0
  3583  05AD  2DD6               	goto	l2918
  3584  05AE                     l2904:	
  3585                           
  3586                           ;decode_AX25.c: 177: flag_judge = getbit();
  3587  05AE  120A  158A  22A7  120A  118A  	fcall	_getbit
  3588  05B3  0871               	movf	?_getbit+1,w
  3589  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  3590  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  3591  05B6  00BB               	movwf	waitFlag@flag_judge+1
  3592  05B7  0870               	movf	?_getbit,w
  3593  05B8  00BA               	movwf	waitFlag@flag_judge
  3594                           
  3595                           ;decode_AX25.c: 178: buf = buf >> 1;
  3596  05B9  083C               	movf	waitFlag@buf,w
  3597  05BA  00F6               	movwf	??_waitFlag
  3598  05BB  1003               	clrc
  3599  05BC  0C76               	rrf	??_waitFlag,w
  3600  05BD  00F7               	movwf	??_waitFlag+1
  3601  05BE  0877               	movf	??_waitFlag+1,w
  3602  05BF  00BC               	movwf	waitFlag@buf
  3603                           
  3604                           ;decode_AX25.c: 180: buf = buf | 0x00;
  3605  05C0  083A               	movf	waitFlag@flag_judge,w
  3606  05C1  043B               	iorwf	waitFlag@flag_judge+1,w
  3607  05C2  1903               	btfsc	3,2
  3608  05C3  2DC9               	goto	l2914
  3609                           
  3610                           ;decode_AX25.c: 182: buf = buf | 0x80;
  3611                           
  3612                           ;decode_AX25.c: 181: }else{
  3613  05C4  083C               	movf	waitFlag@buf,w
  3614  05C5  3880               	iorlw	128
  3615  05C6  00F6               	movwf	??_waitFlag
  3616  05C7  0876               	movf	??_waitFlag,w
  3617  05C8  00BC               	movwf	waitFlag@buf
  3618  05C9                     l2914:	
  3619  05C9  3001               	movlw	1
  3620  05CA  07AE               	addwf	waitFlag@j_127,f
  3621  05CB  1803               	skipnc
  3622  05CC  0AAF               	incf	waitFlag@j_127+1,f
  3623  05CD  3000               	movlw	0
  3624  05CE  07AF               	addwf	waitFlag@j_127+1,f
  3625  05CF  3000               	movlw	0
  3626  05D0  022F               	subwf	waitFlag@j_127+1,w
  3627  05D1  3008               	movlw	8
  3628  05D2  1903               	skipnz
  3629  05D3  022E               	subwf	waitFlag@j_127,w
  3630  05D4  1C03               	skipc
  3631  05D5  2DAE               	goto	l2904
  3632  05D6                     l2918:	
  3633                           
  3634                           ;decode_AX25.c: 183: }
  3635                           ;decode_AX25.c: 184: }
  3636                           ;decode_AX25.c: 185: if(buf == ("JQ1ZHX"[0] << 1)){
  3637  05D6  3003               	movlw	low (STR_7-__stringbase)
  3638  05D7  0084               	movwf	4
  3639  05D8  120A  158A  2000  120A  118A  	fcall	stringdir
  3640  05DD  00F6               	movwf	??_waitFlag
  3641  05DE  01F7               	clrf	??_waitFlag+1
  3642  05DF  1003               	clrc
  3643  05E0  0DF6               	rlf	??_waitFlag,f
  3644  05E1  0DF7               	rlf	??_waitFlag+1,f
  3645  05E2  083C               	movf	waitFlag@buf,w
  3646  05E3  00F8               	movwf	??_waitFlag+2
  3647  05E4  01F9               	clrf	??_waitFlag+3
  3648  05E5  0877               	movf	??_waitFlag+1,w
  3649  05E6  0679               	xorwf	??_waitFlag+3,w
  3650  05E7  1D03               	skipz
  3651  05E8  2DEB               	goto	u2435
  3652  05E9  0876               	movf	??_waitFlag,w
  3653  05EA  0678               	xorwf	??_waitFlag+2,w
  3654  05EB                     u2435:	
  3655  05EB  1D03               	skipz
  3656  05EC  2FB0               	goto	l3066
  3657                           
  3658                           ;decode_AX25.c: 186: dPacket[dPacketnum] = buf;
  3659  05ED  083C               	movf	waitFlag@buf,w
  3660  05EE  00F6               	movwf	??_waitFlag
  3661  05EF  0868               	movf	_dPacketnum,w
  3662  05F0  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3663  05F1  0084               	movwf	4
  3664  05F2  0876               	movf	??_waitFlag,w
  3665  05F3  1783               	bsf	3,7	;select IRP bank3
  3666  05F4  0080               	movwf	0
  3667                           
  3668                           ;decode_AX25.c: 187: dPacketnum ++;
  3669  05F5  3001               	movlw	1
  3670  05F6  07E8               	addwf	_dPacketnum,f
  3671  05F7  1803               	skipnc
  3672  05F8  0AE9               	incf	_dPacketnum+1,f
  3673  05F9  3000               	movlw	0
  3674  05FA  07E9               	addwf	_dPacketnum+1,f
  3675                           
  3676                           ;decode_AX25.c: 188: for(UINT j=0;j<8;j++){
  3677  05FB  01B0               	clrf	waitFlag@j_129
  3678  05FC  01B1               	clrf	waitFlag@j_129+1
  3679  05FD  3000               	movlw	0
  3680  05FE  0231               	subwf	waitFlag@j_129+1,w
  3681  05FF  3008               	movlw	8
  3682  0600  1903               	skipnz
  3683  0601  0230               	subwf	waitFlag@j_129,w
  3684  0602  1803               	btfsc	3,0
  3685  0603  2E2C               	goto	l2944
  3686  0604                     l2930:	
  3687                           
  3688                           ;decode_AX25.c: 189: flag_judge = getbit();
  3689  0604  120A  158A  22A7  120A  118A  	fcall	_getbit
  3690  0609  0871               	movf	?_getbit+1,w
  3691  060A  1283               	bcf	3,5	;RP0=0, select bank0
  3692  060B  1303               	bcf	3,6	;RP1=0, select bank0
  3693  060C  00BB               	movwf	waitFlag@flag_judge+1
  3694  060D  0870               	movf	?_getbit,w
  3695  060E  00BA               	movwf	waitFlag@flag_judge
  3696                           
  3697                           ;decode_AX25.c: 190: buf = buf >> 1;
  3698  060F  083C               	movf	waitFlag@buf,w
  3699  0610  00F6               	movwf	??_waitFlag
  3700  0611  1003               	clrc
  3701  0612  0C76               	rrf	??_waitFlag,w
  3702  0613  00F7               	movwf	??_waitFlag+1
  3703  0614  0877               	movf	??_waitFlag+1,w
  3704  0615  00BC               	movwf	waitFlag@buf
  3705                           
  3706                           ;decode_AX25.c: 192: buf = buf | 0x00;
  3707  0616  083A               	movf	waitFlag@flag_judge,w
  3708  0617  043B               	iorwf	waitFlag@flag_judge+1,w
  3709  0618  1903               	btfsc	3,2
  3710  0619  2E1F               	goto	l2940
  3711                           
  3712                           ;decode_AX25.c: 194: buf = buf | 0x80;
  3713                           
  3714                           ;decode_AX25.c: 193: }else{
  3715  061A  083C               	movf	waitFlag@buf,w
  3716  061B  3880               	iorlw	128
  3717  061C  00F6               	movwf	??_waitFlag
  3718  061D  0876               	movf	??_waitFlag,w
  3719  061E  00BC               	movwf	waitFlag@buf
  3720  061F                     l2940:	
  3721  061F  3001               	movlw	1
  3722  0620  07B0               	addwf	waitFlag@j_129,f
  3723  0621  1803               	skipnc
  3724  0622  0AB1               	incf	waitFlag@j_129+1,f
  3725  0623  3000               	movlw	0
  3726  0624  07B1               	addwf	waitFlag@j_129+1,f
  3727  0625  3000               	movlw	0
  3728  0626  0231               	subwf	waitFlag@j_129+1,w
  3729  0627  3008               	movlw	8
  3730  0628  1903               	skipnz
  3731  0629  0230               	subwf	waitFlag@j_129,w
  3732  062A  1C03               	skipc
  3733  062B  2E04               	goto	l2930
  3734  062C                     l2944:	
  3735                           
  3736                           ;decode_AX25.c: 195: }
  3737                           ;decode_AX25.c: 196: }
  3738                           ;decode_AX25.c: 197: if(buf == ("JQ1ZHX"[1] << 1)){
  3739  062C  3004               	movlw	low (((STR_7+1)-__stringbase)| (0+32768))
  3740  062D  0084               	movwf	4
  3741  062E  120A  158A  2000  120A  118A  	fcall	stringdir
  3742  0633  00F6               	movwf	??_waitFlag
  3743  0634  01F7               	clrf	??_waitFlag+1
  3744  0635  1003               	clrc
  3745  0636  0DF6               	rlf	??_waitFlag,f
  3746  0637  0DF7               	rlf	??_waitFlag+1,f
  3747  0638  083C               	movf	waitFlag@buf,w
  3748  0639  00F8               	movwf	??_waitFlag+2
  3749  063A  01F9               	clrf	??_waitFlag+3
  3750  063B  0877               	movf	??_waitFlag+1,w
  3751  063C  0679               	xorwf	??_waitFlag+3,w
  3752  063D  1D03               	skipz
  3753  063E  2E41               	goto	u2475
  3754  063F  0876               	movf	??_waitFlag,w
  3755  0640  0678               	xorwf	??_waitFlag+2,w
  3756  0641                     u2475:	
  3757  0641  1D03               	skipz
  3758  0642  2FB0               	goto	l3066
  3759                           
  3760                           ;decode_AX25.c: 198: dPacket[dPacketnum] = buf;
  3761  0643  083C               	movf	waitFlag@buf,w
  3762  0644  00F6               	movwf	??_waitFlag
  3763  0645  0868               	movf	_dPacketnum,w
  3764  0646  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3765  0647  0084               	movwf	4
  3766  0648  0876               	movf	??_waitFlag,w
  3767  0649  1783               	bsf	3,7	;select IRP bank3
  3768  064A  0080               	movwf	0
  3769                           
  3770                           ;decode_AX25.c: 199: dPacketnum ++;
  3771  064B  3001               	movlw	1
  3772  064C  07E8               	addwf	_dPacketnum,f
  3773  064D  1803               	skipnc
  3774  064E  0AE9               	incf	_dPacketnum+1,f
  3775  064F  3000               	movlw	0
  3776  0650  07E9               	addwf	_dPacketnum+1,f
  3777                           
  3778                           ;decode_AX25.c: 200: for(UINT j=0;j<8;j++){
  3779  0651  01B2               	clrf	waitFlag@j_131
  3780  0652  01B3               	clrf	waitFlag@j_131+1
  3781  0653  3000               	movlw	0
  3782  0654  0233               	subwf	waitFlag@j_131+1,w
  3783  0655  3008               	movlw	8
  3784  0656  1903               	skipnz
  3785  0657  0232               	subwf	waitFlag@j_131,w
  3786  0658  1803               	btfsc	3,0
  3787  0659  2E82               	goto	l2970
  3788  065A                     l2956:	
  3789                           
  3790                           ;decode_AX25.c: 201: flag_judge = getbit();
  3791  065A  120A  158A  22A7  120A  118A  	fcall	_getbit
  3792  065F  0871               	movf	?_getbit+1,w
  3793  0660  1283               	bcf	3,5	;RP0=0, select bank0
  3794  0661  1303               	bcf	3,6	;RP1=0, select bank0
  3795  0662  00BB               	movwf	waitFlag@flag_judge+1
  3796  0663  0870               	movf	?_getbit,w
  3797  0664  00BA               	movwf	waitFlag@flag_judge
  3798                           
  3799                           ;decode_AX25.c: 202: buf = buf >> 1;
  3800  0665  083C               	movf	waitFlag@buf,w
  3801  0666  00F6               	movwf	??_waitFlag
  3802  0667  1003               	clrc
  3803  0668  0C76               	rrf	??_waitFlag,w
  3804  0669  00F7               	movwf	??_waitFlag+1
  3805  066A  0877               	movf	??_waitFlag+1,w
  3806  066B  00BC               	movwf	waitFlag@buf
  3807                           
  3808                           ;decode_AX25.c: 204: buf = buf | 0x00;
  3809  066C  083A               	movf	waitFlag@flag_judge,w
  3810  066D  043B               	iorwf	waitFlag@flag_judge+1,w
  3811  066E  1903               	btfsc	3,2
  3812  066F  2E75               	goto	l2966
  3813                           
  3814                           ;decode_AX25.c: 206: buf = buf | 0x80;
  3815                           
  3816                           ;decode_AX25.c: 205: }else{
  3817  0670  083C               	movf	waitFlag@buf,w
  3818  0671  3880               	iorlw	128
  3819  0672  00F6               	movwf	??_waitFlag
  3820  0673  0876               	movf	??_waitFlag,w
  3821  0674  00BC               	movwf	waitFlag@buf
  3822  0675                     l2966:	
  3823  0675  3001               	movlw	1
  3824  0676  07B2               	addwf	waitFlag@j_131,f
  3825  0677  1803               	skipnc
  3826  0678  0AB3               	incf	waitFlag@j_131+1,f
  3827  0679  3000               	movlw	0
  3828  067A  07B3               	addwf	waitFlag@j_131+1,f
  3829  067B  3000               	movlw	0
  3830  067C  0233               	subwf	waitFlag@j_131+1,w
  3831  067D  3008               	movlw	8
  3832  067E  1903               	skipnz
  3833  067F  0232               	subwf	waitFlag@j_131,w
  3834  0680  1C03               	skipc
  3835  0681  2E5A               	goto	l2956
  3836  0682                     l2970:	
  3837                           
  3838                           ;decode_AX25.c: 207: }
  3839                           ;decode_AX25.c: 208: }
  3840                           ;decode_AX25.c: 209: if(buf == ("JQ1ZHX"[2] << 1)){
  3841  0682  3005               	movlw	low (((STR_7+2)-__stringbase)| (0+32768))
  3842  0683  0084               	movwf	4
  3843  0684  120A  158A  2000  120A  118A  	fcall	stringdir
  3844  0689  00F6               	movwf	??_waitFlag
  3845  068A  01F7               	clrf	??_waitFlag+1
  3846  068B  1003               	clrc
  3847  068C  0DF6               	rlf	??_waitFlag,f
  3848  068D  0DF7               	rlf	??_waitFlag+1,f
  3849  068E  083C               	movf	waitFlag@buf,w
  3850  068F  00F8               	movwf	??_waitFlag+2
  3851  0690  01F9               	clrf	??_waitFlag+3
  3852  0691  0877               	movf	??_waitFlag+1,w
  3853  0692  0679               	xorwf	??_waitFlag+3,w
  3854  0693  1D03               	skipz
  3855  0694  2E97               	goto	u2515
  3856  0695  0876               	movf	??_waitFlag,w
  3857  0696  0678               	xorwf	??_waitFlag+2,w
  3858  0697                     u2515:	
  3859  0697  1D03               	skipz
  3860  0698  2FB0               	goto	l3066
  3861                           
  3862                           ;decode_AX25.c: 210: dPacket[dPacketnum] = buf;
  3863  0699  083C               	movf	waitFlag@buf,w
  3864  069A  00F6               	movwf	??_waitFlag
  3865  069B  0868               	movf	_dPacketnum,w
  3866  069C  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3867  069D  0084               	movwf	4
  3868  069E  0876               	movf	??_waitFlag,w
  3869  069F  1783               	bsf	3,7	;select IRP bank3
  3870  06A0  0080               	movwf	0
  3871                           
  3872                           ;decode_AX25.c: 211: dPacketnum ++;
  3873  06A1  3001               	movlw	1
  3874  06A2  07E8               	addwf	_dPacketnum,f
  3875  06A3  1803               	skipnc
  3876  06A4  0AE9               	incf	_dPacketnum+1,f
  3877  06A5  3000               	movlw	0
  3878  06A6  07E9               	addwf	_dPacketnum+1,f
  3879                           
  3880                           ;decode_AX25.c: 212: for(UINT j=0;j<8;j++){
  3881  06A7  01B4               	clrf	waitFlag@j_133
  3882  06A8  01B5               	clrf	waitFlag@j_133+1
  3883  06A9  3000               	movlw	0
  3884  06AA  0235               	subwf	waitFlag@j_133+1,w
  3885  06AB  3008               	movlw	8
  3886  06AC  1903               	skipnz
  3887  06AD  0234               	subwf	waitFlag@j_133,w
  3888  06AE  1803               	btfsc	3,0
  3889  06AF  2ED8               	goto	l2996
  3890  06B0                     l2982:	
  3891                           
  3892                           ;decode_AX25.c: 213: flag_judge = getbit();
  3893  06B0  120A  158A  22A7  120A  118A  	fcall	_getbit
  3894  06B5  0871               	movf	?_getbit+1,w
  3895  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  3896  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  3897  06B8  00BB               	movwf	waitFlag@flag_judge+1
  3898  06B9  0870               	movf	?_getbit,w
  3899  06BA  00BA               	movwf	waitFlag@flag_judge
  3900                           
  3901                           ;decode_AX25.c: 214: buf = buf >> 1;
  3902  06BB  083C               	movf	waitFlag@buf,w
  3903  06BC  00F6               	movwf	??_waitFlag
  3904  06BD  1003               	clrc
  3905  06BE  0C76               	rrf	??_waitFlag,w
  3906  06BF  00F7               	movwf	??_waitFlag+1
  3907  06C0  0877               	movf	??_waitFlag+1,w
  3908  06C1  00BC               	movwf	waitFlag@buf
  3909                           
  3910                           ;decode_AX25.c: 216: buf = buf | 0x00;
  3911  06C2  083A               	movf	waitFlag@flag_judge,w
  3912  06C3  043B               	iorwf	waitFlag@flag_judge+1,w
  3913  06C4  1903               	btfsc	3,2
  3914  06C5  2ECB               	goto	l2992
  3915                           
  3916                           ;decode_AX25.c: 218: buf = buf | 0x80;
  3917                           
  3918                           ;decode_AX25.c: 217: }else{
  3919  06C6  083C               	movf	waitFlag@buf,w
  3920  06C7  3880               	iorlw	128
  3921  06C8  00F6               	movwf	??_waitFlag
  3922  06C9  0876               	movf	??_waitFlag,w
  3923  06CA  00BC               	movwf	waitFlag@buf
  3924  06CB                     l2992:	
  3925  06CB  3001               	movlw	1
  3926  06CC  07B4               	addwf	waitFlag@j_133,f
  3927  06CD  1803               	skipnc
  3928  06CE  0AB5               	incf	waitFlag@j_133+1,f
  3929  06CF  3000               	movlw	0
  3930  06D0  07B5               	addwf	waitFlag@j_133+1,f
  3931  06D1  3000               	movlw	0
  3932  06D2  0235               	subwf	waitFlag@j_133+1,w
  3933  06D3  3008               	movlw	8
  3934  06D4  1903               	skipnz
  3935  06D5  0234               	subwf	waitFlag@j_133,w
  3936  06D6  1C03               	skipc
  3937  06D7  2EB0               	goto	l2982
  3938  06D8                     l2996:	
  3939                           
  3940                           ;decode_AX25.c: 219: }
  3941                           ;decode_AX25.c: 220: }
  3942                           ;decode_AX25.c: 221: if(buf == ("JQ1ZHX"[3] << 1)){
  3943  06D8  3006               	movlw	low (((STR_7+3)-__stringbase)| (0+32768))
  3944  06D9  0084               	movwf	4
  3945  06DA  120A  158A  2000  120A  118A  	fcall	stringdir
  3946  06DF  00F6               	movwf	??_waitFlag
  3947  06E0  01F7               	clrf	??_waitFlag+1
  3948  06E1  1003               	clrc
  3949  06E2  0DF6               	rlf	??_waitFlag,f
  3950  06E3  0DF7               	rlf	??_waitFlag+1,f
  3951  06E4  083C               	movf	waitFlag@buf,w
  3952  06E5  00F8               	movwf	??_waitFlag+2
  3953  06E6  01F9               	clrf	??_waitFlag+3
  3954  06E7  0877               	movf	??_waitFlag+1,w
  3955  06E8  0679               	xorwf	??_waitFlag+3,w
  3956  06E9  1D03               	skipz
  3957  06EA  2EED               	goto	u2555
  3958  06EB  0876               	movf	??_waitFlag,w
  3959  06EC  0678               	xorwf	??_waitFlag+2,w
  3960  06ED                     u2555:	
  3961  06ED  1D03               	skipz
  3962  06EE  2FB0               	goto	l3066
  3963                           
  3964                           ;decode_AX25.c: 222: dPacket[dPacketnum] = buf;
  3965  06EF  083C               	movf	waitFlag@buf,w
  3966  06F0  00F6               	movwf	??_waitFlag
  3967  06F1  0868               	movf	_dPacketnum,w
  3968  06F2  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3969  06F3  0084               	movwf	4
  3970  06F4  0876               	movf	??_waitFlag,w
  3971  06F5  1783               	bsf	3,7	;select IRP bank3
  3972  06F6  0080               	movwf	0
  3973                           
  3974                           ;decode_AX25.c: 223: dPacketnum ++;
  3975  06F7  3001               	movlw	1
  3976  06F8  07E8               	addwf	_dPacketnum,f
  3977  06F9  1803               	skipnc
  3978  06FA  0AE9               	incf	_dPacketnum+1,f
  3979  06FB  3000               	movlw	0
  3980  06FC  07E9               	addwf	_dPacketnum+1,f
  3981                           
  3982                           ;decode_AX25.c: 224: for(UINT j=0;j<8;j++){
  3983  06FD  01B6               	clrf	waitFlag@j_135
  3984  06FE  01B7               	clrf	waitFlag@j_135+1
  3985  06FF  3000               	movlw	0
  3986  0700  0237               	subwf	waitFlag@j_135+1,w
  3987  0701  3008               	movlw	8
  3988  0702  1903               	skipnz
  3989  0703  0236               	subwf	waitFlag@j_135,w
  3990  0704  1803               	btfsc	3,0
  3991  0705  2F2E               	goto	l3022
  3992  0706                     l3008:	
  3993                           
  3994                           ;decode_AX25.c: 225: flag_judge = getbit();
  3995  0706  120A  158A  22A7  120A  118A  	fcall	_getbit
  3996  070B  0871               	movf	?_getbit+1,w
  3997  070C  1283               	bcf	3,5	;RP0=0, select bank0
  3998  070D  1303               	bcf	3,6	;RP1=0, select bank0
  3999  070E  00BB               	movwf	waitFlag@flag_judge+1
  4000  070F  0870               	movf	?_getbit,w
  4001  0710  00BA               	movwf	waitFlag@flag_judge
  4002                           
  4003                           ;decode_AX25.c: 226: buf = buf >> 1;
  4004  0711  083C               	movf	waitFlag@buf,w
  4005  0712  00F6               	movwf	??_waitFlag
  4006  0713  1003               	clrc
  4007  0714  0C76               	rrf	??_waitFlag,w
  4008  0715  00F7               	movwf	??_waitFlag+1
  4009  0716  0877               	movf	??_waitFlag+1,w
  4010  0717  00BC               	movwf	waitFlag@buf
  4011                           
  4012                           ;decode_AX25.c: 228: buf = buf | 0x00;
  4013  0718  083A               	movf	waitFlag@flag_judge,w
  4014  0719  043B               	iorwf	waitFlag@flag_judge+1,w
  4015  071A  1903               	btfsc	3,2
  4016  071B  2F21               	goto	l3018
  4017                           
  4018                           ;decode_AX25.c: 230: buf = buf | 0x80;
  4019                           
  4020                           ;decode_AX25.c: 229: }else{
  4021  071C  083C               	movf	waitFlag@buf,w
  4022  071D  3880               	iorlw	128
  4023  071E  00F6               	movwf	??_waitFlag
  4024  071F  0876               	movf	??_waitFlag,w
  4025  0720  00BC               	movwf	waitFlag@buf
  4026  0721                     l3018:	
  4027  0721  3001               	movlw	1
  4028  0722  07B6               	addwf	waitFlag@j_135,f
  4029  0723  1803               	skipnc
  4030  0724  0AB7               	incf	waitFlag@j_135+1,f
  4031  0725  3000               	movlw	0
  4032  0726  07B7               	addwf	waitFlag@j_135+1,f
  4033  0727  3000               	movlw	0
  4034  0728  0237               	subwf	waitFlag@j_135+1,w
  4035  0729  3008               	movlw	8
  4036  072A  1903               	skipnz
  4037  072B  0236               	subwf	waitFlag@j_135,w
  4038  072C  1C03               	skipc
  4039  072D  2F06               	goto	l3008
  4040  072E                     l3022:	
  4041                           
  4042                           ;decode_AX25.c: 231: }
  4043                           ;decode_AX25.c: 232: }
  4044                           ;decode_AX25.c: 233: if(buf == ("JQ1ZHX"[4] << 1)){
  4045  072E  3007               	movlw	low (((STR_7+4)-__stringbase)| (0+32768))
  4046  072F  0084               	movwf	4
  4047  0730  120A  158A  2000  120A  118A  	fcall	stringdir
  4048  0735  00F6               	movwf	??_waitFlag
  4049  0736  01F7               	clrf	??_waitFlag+1
  4050  0737  1003               	clrc
  4051  0738  0DF6               	rlf	??_waitFlag,f
  4052  0739  0DF7               	rlf	??_waitFlag+1,f
  4053  073A  083C               	movf	waitFlag@buf,w
  4054  073B  00F8               	movwf	??_waitFlag+2
  4055  073C  01F9               	clrf	??_waitFlag+3
  4056  073D  0877               	movf	??_waitFlag+1,w
  4057  073E  0679               	xorwf	??_waitFlag+3,w
  4058  073F  1D03               	skipz
  4059  0740  2F43               	goto	u2595
  4060  0741  0876               	movf	??_waitFlag,w
  4061  0742  0678               	xorwf	??_waitFlag+2,w
  4062  0743                     u2595:	
  4063  0743  1D03               	skipz
  4064  0744  2FB0               	goto	l3066
  4065                           
  4066                           ;decode_AX25.c: 234: dPacket[dPacketnum] = buf;
  4067  0745  083C               	movf	waitFlag@buf,w
  4068  0746  00F6               	movwf	??_waitFlag
  4069  0747  0868               	movf	_dPacketnum,w
  4070  0748  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4071  0749  0084               	movwf	4
  4072  074A  0876               	movf	??_waitFlag,w
  4073  074B  1783               	bsf	3,7	;select IRP bank3
  4074  074C  0080               	movwf	0
  4075                           
  4076                           ;decode_AX25.c: 235: dPacketnum ++;
  4077  074D  3001               	movlw	1
  4078  074E  07E8               	addwf	_dPacketnum,f
  4079  074F  1803               	skipnc
  4080  0750  0AE9               	incf	_dPacketnum+1,f
  4081  0751  3000               	movlw	0
  4082  0752  07E9               	addwf	_dPacketnum+1,f
  4083                           
  4084                           ;decode_AX25.c: 236: for(UINT j=0;j<8;j++){
  4085  0753  01B8               	clrf	waitFlag@j_137
  4086  0754  01B9               	clrf	waitFlag@j_137+1
  4087  0755  3000               	movlw	0
  4088  0756  0239               	subwf	waitFlag@j_137+1,w
  4089  0757  3008               	movlw	8
  4090  0758  1903               	skipnz
  4091  0759  0238               	subwf	waitFlag@j_137,w
  4092  075A  1803               	btfsc	3,0
  4093  075B  2F84               	goto	l3048
  4094  075C                     l3034:	
  4095                           
  4096                           ;decode_AX25.c: 237: flag_judge = getbit();
  4097  075C  120A  158A  22A7  120A  118A  	fcall	_getbit
  4098  0761  0871               	movf	?_getbit+1,w
  4099  0762  1283               	bcf	3,5	;RP0=0, select bank0
  4100  0763  1303               	bcf	3,6	;RP1=0, select bank0
  4101  0764  00BB               	movwf	waitFlag@flag_judge+1
  4102  0765  0870               	movf	?_getbit,w
  4103  0766  00BA               	movwf	waitFlag@flag_judge
  4104                           
  4105                           ;decode_AX25.c: 238: buf = buf >> 1;
  4106  0767  083C               	movf	waitFlag@buf,w
  4107  0768  00F6               	movwf	??_waitFlag
  4108  0769  1003               	clrc
  4109  076A  0C76               	rrf	??_waitFlag,w
  4110  076B  00F7               	movwf	??_waitFlag+1
  4111  076C  0877               	movf	??_waitFlag+1,w
  4112  076D  00BC               	movwf	waitFlag@buf
  4113                           
  4114                           ;decode_AX25.c: 240: buf = buf | 0x00;
  4115  076E  083A               	movf	waitFlag@flag_judge,w
  4116  076F  043B               	iorwf	waitFlag@flag_judge+1,w
  4117  0770  1903               	btfsc	3,2
  4118  0771  2F77               	goto	l3044
  4119                           
  4120                           ;decode_AX25.c: 242: buf = buf | 0x80;
  4121                           
  4122                           ;decode_AX25.c: 241: }else{
  4123  0772  083C               	movf	waitFlag@buf,w
  4124  0773  3880               	iorlw	128
  4125  0774  00F6               	movwf	??_waitFlag
  4126  0775  0876               	movf	??_waitFlag,w
  4127  0776  00BC               	movwf	waitFlag@buf
  4128  0777                     l3044:	
  4129  0777  3001               	movlw	1
  4130  0778  07B8               	addwf	waitFlag@j_137,f
  4131  0779  1803               	skipnc
  4132  077A  0AB9               	incf	waitFlag@j_137+1,f
  4133  077B  3000               	movlw	0
  4134  077C  07B9               	addwf	waitFlag@j_137+1,f
  4135  077D  3000               	movlw	0
  4136  077E  0239               	subwf	waitFlag@j_137+1,w
  4137  077F  3008               	movlw	8
  4138  0780  1903               	skipnz
  4139  0781  0238               	subwf	waitFlag@j_137,w
  4140  0782  1C03               	skipc
  4141  0783  2F5C               	goto	l3034
  4142  0784                     l3048:	
  4143                           
  4144                           ;decode_AX25.c: 243: }
  4145                           ;decode_AX25.c: 244: }
  4146                           ;decode_AX25.c: 245: if(buf == ("JQ1ZHX"[5] << 1)){
  4147  0784  3008               	movlw	low (((STR_7+5)-__stringbase)| (0+32768))
  4148  0785  0084               	movwf	4
  4149  0786  120A  158A  2000  120A  118A  	fcall	stringdir
  4150  078B  00F6               	movwf	??_waitFlag
  4151  078C  01F7               	clrf	??_waitFlag+1
  4152  078D  1003               	clrc
  4153  078E  0DF6               	rlf	??_waitFlag,f
  4154  078F  0DF7               	rlf	??_waitFlag+1,f
  4155  0790  083C               	movf	waitFlag@buf,w
  4156  0791  00F8               	movwf	??_waitFlag+2
  4157  0792  01F9               	clrf	??_waitFlag+3
  4158  0793  0877               	movf	??_waitFlag+1,w
  4159  0794  0679               	xorwf	??_waitFlag+3,w
  4160  0795  1D03               	skipz
  4161  0796  2F99               	goto	u2635
  4162  0797  0876               	movf	??_waitFlag,w
  4163  0798  0678               	xorwf	??_waitFlag+2,w
  4164  0799                     u2635:	
  4165  0799  1D03               	skipz
  4166  079A  2FB0               	goto	l3066
  4167                           
  4168                           ;decode_AX25.c: 246: dPacket[dPacketnum] = buf;
  4169  079B  083C               	movf	waitFlag@buf,w
  4170  079C  00F6               	movwf	??_waitFlag
  4171  079D  0868               	movf	_dPacketnum,w
  4172  079E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4173  079F  0084               	movwf	4
  4174  07A0  0876               	movf	??_waitFlag,w
  4175  07A1  1783               	bsf	3,7	;select IRP bank3
  4176  07A2  0080               	movwf	0
  4177                           
  4178                           ;decode_AX25.c: 247: dPacketnum ++;
  4179  07A3  3001               	movlw	1
  4180  07A4  07E8               	addwf	_dPacketnum,f
  4181  07A5  1803               	skipnc
  4182  07A6  0AE9               	incf	_dPacketnum+1,f
  4183  07A7  3000               	movlw	0
  4184  07A8  07E9               	addwf	_dPacketnum+1,f
  4185                           
  4186                           ;decode_AX25.c: 248: rcv_state ++;
  4187  07A9  3001               	movlw	1
  4188  07AA  07EA               	addwf	_rcv_state,f
  4189  07AB  1803               	skipnc
  4190  07AC  0AEB               	incf	_rcv_state+1,f
  4191  07AD  3000               	movlw	0
  4192  07AE  07EB               	addwf	_rcv_state+1,f
  4193                           
  4194                           ;decode_AX25.c: 249: }else{
  4195  07AF  2B2F               	goto	l3068
  4196  07B0                     l3066:	
  4197                           ;decode_AX25.c: 268: }
  4198                           ;decode_AX25.c: 269: }else{
  4199                           
  4200                           ;decode_AX25.c: 267: rcv_state = 0;
  4201                           
  4202                           ;decode_AX25.c: 266: dPacketnum = 0;
  4203                           
  4204                           ;decode_AX25.c: 264: }
  4205                           ;decode_AX25.c: 265: }else{
  4206                           
  4207                           ;decode_AX25.c: 263: rcv_state = 0;
  4208                           
  4209                           ;decode_AX25.c: 262: dPacketnum = 0;
  4210                           
  4211                           ;decode_AX25.c: 260: }
  4212                           ;decode_AX25.c: 261: }else{
  4213                           
  4214                           ;decode_AX25.c: 259: rcv_state = 0;
  4215                           
  4216                           ;decode_AX25.c: 258: dPacketnum = 0;
  4217                           
  4218                           ;decode_AX25.c: 256: }
  4219                           ;decode_AX25.c: 257: }else{
  4220                           
  4221                           ;decode_AX25.c: 255: rcv_state = 0;
  4222                           
  4223                           ;decode_AX25.c: 254: dPacketnum = 0;
  4224                           
  4225                           ;decode_AX25.c: 252: }
  4226                           ;decode_AX25.c: 253: }else{
  4227                           
  4228                           ;decode_AX25.c: 251: rcv_state = 0;
  4229                           
  4230                           ;decode_AX25.c: 250: dPacketnum = 0;
  4231                           
  4232                           
  4233                           ;decode_AX25.c: 270: dPacketnum = 0;
  4234  07B0  01E8               	clrf	_dPacketnum
  4235  07B1  01E9               	clrf	_dPacketnum+1
  4236  07B2  2B2D               	goto	L6
  4237  07B3                     __end_of_waitFlag:	
  4238                           
  4239                           	psect	text5
  4240  0C07                     __ptext5:	
  4241 ;; *************** function _getdata *****************
  4242 ;; Defined at:
  4243 ;;		line 278 in file "decode_AX25.c"
  4244 ;; Parameters:    Size  Location     Type
  4245 ;;		None
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;  dbitstatus      2    4[BANK0 ] unsigned int 
  4248 ;;  dstuff          2    2[BANK0 ] unsigned int 
  4249 ;;  bufstore_cou    2    0[BANK0 ] unsigned int 
  4250 ;;  buf             1    6[BANK0 ] unsigned char 
  4251 ;;  dammy_data      1    0        unsigned char 
  4252 ;; Return value:  Size  Location     Type
  4253 ;;                  1    wreg      void 
  4254 ;; Registers used:
  4255 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4256 ;; Tracked objects:
  4257 ;;		On entry : 0/0
  4258 ;;		On exit  : 0/0
  4259 ;;		Unchanged: 0/0
  4260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4261 ;;      Params:         0       0       0       0       0
  4262 ;;      Locals:         0       7       0       0       0
  4263 ;;      Temps:          2       0       0       0       0
  4264 ;;      Totals:         2       7       0       0       0
  4265 ;;Total ram usage:        9 bytes
  4266 ;; Hardware stack levels used:    1
  4267 ;; Hardware stack levels required when called:    1
  4268 ;; This function calls:
  4269 ;;		_getbit
  4270 ;; This function is called by:
  4271 ;;		_ReceivePacket_data
  4272 ;;		_ReceivePacket
  4273 ;; This function uses a non-reentrant model
  4274 ;;
  4275                           
  4276                           
  4277                           ;psect for function _getdata
  4278  0C07                     _getdata:	
  4279                           
  4280                           ;decode_AX25.c: 279: UBYTE buf = 0x00;
  4281                           
  4282                           ;incstack = 0
  4283                           ; Regs used in _getdata: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4284  0C07  1283               	bcf	3,5	;RP0=0, select bank0
  4285  0C08  1303               	bcf	3,6	;RP1=0, select bank0
  4286  0C09  01A6               	clrf	getdata@buf
  4287                           
  4288                           ;decode_AX25.c: 280: UINT dstuff = 0;
  4289  0C0A  01A2               	clrf	getdata@dstuff
  4290  0C0B  01A3               	clrf	getdata@dstuff+1
  4291                           
  4292                           ;decode_AX25.c: 281: UBYTE dammy_data;
  4293                           ;decode_AX25.c: 282: UINT bufstore_counter = 0;
  4294  0C0C  01A0               	clrf	getdata@bufstore_counter
  4295  0C0D  01A1               	clrf	getdata@bufstore_counter+1
  4296                           
  4297                           ;decode_AX25.c: 283: UINT dbitstatus = 0;
  4298  0C0E  01A4               	clrf	getdata@dbitstatus
  4299  0C0F  01A5               	clrf	getdata@dbitstatus+1
  4300  0C10                     l3102:	
  4301                           ;decode_AX25.c: 285: while(rcv_state == 2){
  4302                           
  4303  0C10  3002               	movlw	2
  4304  0C11  066A               	xorwf	_rcv_state,w
  4305  0C12  046B               	iorwf	_rcv_state+1,w
  4306  0C13  1D03               	btfss	3,2
  4307  0C14  0008               	return
  4308                           
  4309                           ;decode_AX25.c: 286: dbitstatus = getbit();
  4310  0C15  120A  158A  22A7  120A  158A  	fcall	_getbit
  4311  0C1A  0871               	movf	?_getbit+1,w
  4312  0C1B  1283               	bcf	3,5	;RP0=0, select bank0
  4313  0C1C  1303               	bcf	3,6	;RP1=0, select bank0
  4314  0C1D  00A5               	movwf	getdata@dbitstatus+1
  4315  0C1E  0870               	movf	?_getbit,w
  4316  0C1F  00A4               	movwf	getdata@dbitstatus
  4317                           
  4318                           ;decode_AX25.c: 287: if(dstuff == 5){
  4319  0C20  3005               	movlw	5
  4320  0C21  0622               	xorwf	getdata@dstuff,w
  4321  0C22  0423               	iorwf	getdata@dstuff+1,w
  4322  0C23  1D03               	btfss	3,2
  4323  0C24  2C33               	goto	l3084
  4324                           
  4325                           ;decode_AX25.c: 288: if(dbitstatus == 1){
  4326  0C25  0324               	decf	getdata@dbitstatus,w
  4327  0C26  0425               	iorwf	getdata@dbitstatus+1,w
  4328  0C27  1D03               	btfss	3,2
  4329  0C28  2C30               	goto	l3082
  4330                           
  4331                           ;decode_AX25.c: 289: rcv_state ++;
  4332  0C29  3001               	movlw	1
  4333  0C2A  07EA               	addwf	_rcv_state,f
  4334  0C2B  1803               	skipnc
  4335  0C2C  0AEB               	incf	_rcv_state+1,f
  4336  0C2D  3000               	movlw	0
  4337  0C2E  07EB               	addwf	_rcv_state+1,f
  4338                           
  4339                           ;decode_AX25.c: 290: break;
  4340  0C2F  0008               	return
  4341  0C30                     l3082:	
  4342                           ;decode_AX25.c: 291: }else{
  4343                           
  4344                           
  4345                           ;decode_AX25.c: 292: dstuff = 0;
  4346  0C30  01A2               	clrf	getdata@dstuff
  4347  0C31  01A3               	clrf	getdata@dstuff+1
  4348                           
  4349                           ;decode_AX25.c: 293: }
  4350                           ;decode_AX25.c: 294: }else{
  4351  0C32  2C10               	goto	l3102
  4352  0C33                     l3084:	
  4353                           
  4354                           ;decode_AX25.c: 295: buf = buf >> 1;
  4355  0C33  0826               	movf	getdata@buf,w
  4356  0C34  00F6               	movwf	??_getdata
  4357  0C35  1003               	clrc
  4358  0C36  0C76               	rrf	??_getdata,w
  4359  0C37  00F7               	movwf	??_getdata+1
  4360  0C38  0877               	movf	??_getdata+1,w
  4361  0C39  00A6               	movwf	getdata@buf
  4362                           
  4363                           ;decode_AX25.c: 297: buf = buf | 0x00;
  4364  0C3A  0824               	movf	getdata@dbitstatus,w
  4365  0C3B  0425               	iorwf	getdata@dbitstatus+1,w
  4366  0C3C  1D03               	btfss	3,2
  4367  0C3D  2C41               	goto	l3088
  4368                           
  4369                           ;decode_AX25.c: 298: dstuff = 0;
  4370  0C3E  01A2               	clrf	getdata@dstuff
  4371  0C3F  01A3               	clrf	getdata@dstuff+1
  4372                           
  4373                           ;decode_AX25.c: 299: }else{
  4374  0C40  2C4C               	goto	l3092
  4375  0C41                     l3088:	
  4376                           
  4377                           ;decode_AX25.c: 300: buf = buf | 0x80;
  4378  0C41  0826               	movf	getdata@buf,w
  4379  0C42  3880               	iorlw	128
  4380  0C43  00F6               	movwf	??_getdata
  4381  0C44  0876               	movf	??_getdata,w
  4382  0C45  00A6               	movwf	getdata@buf
  4383                           
  4384                           ;decode_AX25.c: 301: dstuff ++;
  4385  0C46  3001               	movlw	1
  4386  0C47  07A2               	addwf	getdata@dstuff,f
  4387  0C48  1803               	skipnc
  4388  0C49  0AA3               	incf	getdata@dstuff+1,f
  4389  0C4A  3000               	movlw	0
  4390  0C4B  07A3               	addwf	getdata@dstuff+1,f
  4391  0C4C                     l3092:	
  4392                           
  4393                           ;decode_AX25.c: 302: }
  4394                           ;decode_AX25.c: 303: bufstore_counter ++;
  4395  0C4C  3001               	movlw	1
  4396  0C4D  07A0               	addwf	getdata@bufstore_counter,f
  4397  0C4E  1803               	skipnc
  4398  0C4F  0AA1               	incf	getdata@bufstore_counter+1,f
  4399  0C50  3000               	movlw	0
  4400  0C51  07A1               	addwf	getdata@bufstore_counter+1,f
  4401                           
  4402                           ;decode_AX25.c: 304: if(bufstore_counter == 8){
  4403  0C52  3008               	movlw	8
  4404  0C53  0620               	xorwf	getdata@bufstore_counter,w
  4405  0C54  0421               	iorwf	getdata@bufstore_counter+1,w
  4406  0C55  1D03               	btfss	3,2
  4407  0C56  2C10               	goto	l3102
  4408                           
  4409                           ;decode_AX25.c: 305: bufstore_counter = 0;
  4410  0C57  01A0               	clrf	getdata@bufstore_counter
  4411  0C58  01A1               	clrf	getdata@bufstore_counter+1
  4412                           
  4413                           ;decode_AX25.c: 306: dPacket[dPacketnum] = buf;
  4414  0C59  0826               	movf	getdata@buf,w
  4415  0C5A  00F6               	movwf	??_getdata
  4416  0C5B  0868               	movf	_dPacketnum,w
  4417  0C5C  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4418  0C5D  0084               	movwf	4
  4419  0C5E  0876               	movf	??_getdata,w
  4420  0C5F  1783               	bsf	3,7	;select IRP bank3
  4421  0C60  0080               	movwf	0
  4422                           
  4423                           ;decode_AX25.c: 307: dPacketnum ++;
  4424  0C61  3001               	movlw	1
  4425  0C62  07E8               	addwf	_dPacketnum,f
  4426  0C63  1803               	skipnc
  4427  0C64  0AE9               	incf	_dPacketnum+1,f
  4428  0C65  3000               	movlw	0
  4429  0C66  07E9               	addwf	_dPacketnum+1,f
  4430  0C67  2C10               	goto	l3102
  4431  0C68                     __end_of_getdata:	
  4432                           
  4433                           	psect	text6
  4434  0AA7                     __ptext6:	
  4435 ;; *************** function _getbit *****************
  4436 ;; Defined at:
  4437 ;;		line 40 in file "decode_AX25.c"
  4438 ;; Parameters:    Size  Location     Type
  4439 ;;		None
  4440 ;; Auto vars:     Size  Location     Type
  4441 ;;  i               2    4[COMMON] unsigned int 
  4442 ;; Return value:  Size  Location     Type
  4443 ;;                  2    0[COMMON] unsigned int 
  4444 ;; Registers used:
  4445 ;;		wreg, status,2, status,0
  4446 ;; Tracked objects:
  4447 ;;		On entry : 0/0
  4448 ;;		On exit  : 0/0
  4449 ;;		Unchanged: 0/0
  4450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4451 ;;      Params:         2       0       0       0       0
  4452 ;;      Locals:         2       0       0       0       0
  4453 ;;      Temps:          2       0       0       0       0
  4454 ;;      Totals:         6       0       0       0       0
  4455 ;;Total ram usage:        6 bytes
  4456 ;; Hardware stack levels used:    1
  4457 ;; This function calls:
  4458 ;;		Nothing
  4459 ;; This function is called by:
  4460 ;;		_waitFlag
  4461 ;;		_getdata
  4462 ;;		_conv_DI_UARTRX
  4463 ;; This function uses a non-reentrant model
  4464 ;;
  4465                           
  4466                           
  4467                           ;psect for function _getbit
  4468  0AA7                     _getbit:	
  4469                           
  4470                           ;decode_AX25.c: 41: static UINT oldbit;
  4471                           ;decode_AX25.c: 42: oldbit = RB5;
  4472                           
  4473                           ;incstack = 0
  4474                           ; Regs used in _getbit: [wreg+status,2+status,0]
  4475  0AA7  1003               	clrc
  4476  0AA8  1283               	bcf	3,5	;RP0=0, select bank0
  4477  0AA9  1303               	bcf	3,6	;RP1=0, select bank0
  4478  0AAA  1A86               	btfsc	6,5	;volatile
  4479  0AAB  1403               	setc
  4480  0AAC  3000               	movlw	0
  4481  0AAD  1803               	skipnc
  4482  0AAE  3001               	movlw	1
  4483  0AAF  00F2               	movwf	??_getbit
  4484  0AB0  01F3               	clrf	??_getbit+1
  4485  0AB1  0872               	movf	??_getbit,w
  4486  0AB2  1683               	bsf	3,5	;RP0=1, select bank1
  4487  0AB3  1303               	bcf	3,6	;RP1=0, select bank1
  4488  0AB4  00E6               	movwf	getbit@oldbit^(0+128)
  4489  0AB5  0873               	movf	??_getbit+1,w
  4490  0AB6  00E7               	movwf	(getbit@oldbit+1)^(0+128)
  4491                           
  4492                           ;decode_AX25.c: 43: for(UINT i=0;i<62;i++){
  4493  0AB7  01F4               	clrf	getbit@i
  4494  0AB8  01F5               	clrf	getbit@i+1
  4495  0AB9  3000               	movlw	0
  4496  0ABA  0275               	subwf	getbit@i+1,w
  4497  0ABB  303E               	movlw	62
  4498  0ABC  1903               	skipnz
  4499  0ABD  0274               	subwf	getbit@i,w
  4500  0ABE  1803               	btfsc	3,0
  4501  0ABF  2AEE               	goto	l2548
  4502                           
  4503                           ;decode_AX25.c: 44: if(RB5 != oldbit){
  4504  0AC0  1003               	clrc
  4505  0AC1                     L7:	
  4506  0AC1  1283               	bcf	3,5	;RP0=0, select bank0
  4507  0AC2  1A86               	btfsc	6,5	;volatile
  4508  0AC3  1403               	setc
  4509  0AC4  3000               	movlw	0
  4510  0AC5  1803               	skipnc
  4511  0AC6  3001               	movlw	1
  4512  0AC7  00F2               	movwf	??_getbit
  4513  0AC8  01F3               	clrf	??_getbit+1
  4514  0AC9  1683               	bsf	3,5	;RP0=1, select bank1
  4515  0ACA  1303               	bcf	3,6	;RP1=0, select bank1
  4516  0ACB  0867               	movf	(getbit@oldbit+1)^(0+128),w
  4517  0ACC  0673               	xorwf	??_getbit+1,w
  4518  0ACD  1D03               	skipz
  4519  0ACE  2AD1               	goto	u1865
  4520  0ACF  0866               	movf	getbit@oldbit^(0+128),w
  4521  0AD0  0672               	xorwf	??_getbit,w
  4522  0AD1                     u1865:	
  4523  0AD1  1903               	skipnz
  4524  0AD2  2AE1               	goto	l2546
  4525                           
  4526                           ;decode_AX25.c: 45: _delay((unsigned long)((400)*(10000000/4000000.0)));
  4527  0AD3  30C7               	movlw	199
  4528  0AD4  00F2               	movwf	??_getbit
  4529  0AD5                     u3687:	
  4530  0AD5  2AD6               	nop2
  4531  0AD6  0BF2               	decfsz	??_getbit,f
  4532  0AD7  2AD5               	goto	u3687
  4533  0AD8  2AD9               	nop2
  4534  0AD9  2ADA               	nop2
  4535                           
  4536                           ;decode_AX25.c: 46: RC2= 1- RC2;
  4537  0ADA  3004               	movlw	4
  4538  0ADB  1283               	bcf	3,5	;RP0=0, select bank0
  4539  0ADC  1303               	bcf	3,6	;RP1=0, select bank0
  4540  0ADD  0687               	xorwf	7,f
  4541                           
  4542                           ;decode_AX25.c: 47: return 0;
  4543  0ADE  01F0               	clrf	?_getbit
  4544  0ADF  01F1               	clrf	?_getbit+1
  4545  0AE0  0008               	return
  4546  0AE1                     l2546:	
  4547  0AE1  3001               	movlw	1
  4548  0AE2  07F4               	addwf	getbit@i,f
  4549  0AE3  1803               	skipnc
  4550  0AE4  0AF5               	incf	getbit@i+1,f
  4551  0AE5  3000               	movlw	0
  4552  0AE6  07F5               	addwf	getbit@i+1,f
  4553  0AE7  3000               	movlw	0
  4554  0AE8  0275               	subwf	getbit@i+1,w
  4555  0AE9  303E               	movlw	62
  4556  0AEA  1903               	skipnz
  4557  0AEB  0274               	subwf	getbit@i,w
  4558  0AEC  1C03               	skipc
  4559  0AED  2AC1               	goto	L7
  4560  0AEE                     l2548:	
  4561                           
  4562                           ;decode_AX25.c: 48: }
  4563                           ;decode_AX25.c: 49: }
  4564                           ;decode_AX25.c: 50: return 1;
  4565  0AEE  3001               	movlw	1
  4566  0AEF  00F0               	movwf	?_getbit
  4567  0AF0  3000               	movlw	0
  4568  0AF1  00F1               	movwf	?_getbit+1
  4569  0AF2  0008               	return
  4570  0AF3                     __end_of_getbit:	
  4571                           
  4572                           	psect	text7
  4573  002A                     __ptext7:	
  4574 ;; *************** function _fcscheck *****************
  4575 ;; Defined at:
  4576 ;;		line 313 in file "decode_AX25.c"
  4577 ;; Parameters:    Size  Location     Type
  4578 ;;		None
  4579 ;; Auto vars:     Size  Location     Type
  4580 ;;  i               2    7[COMMON] unsigned int 
  4581 ;;  i               2    5[COMMON] unsigned int 
  4582 ;;  byte            1    9[COMMON] unsigned char 
  4583 ;;  bt              1    4[COMMON] unsigned char 
  4584 ;; Return value:  Size  Location     Type
  4585 ;;                  2    0[COMMON] unsigned int 
  4586 ;; Registers used:
  4587 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4588 ;; Tracked objects:
  4589 ;;		On entry : 0/0
  4590 ;;		On exit  : 0/0
  4591 ;;		Unchanged: 0/0
  4592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4593 ;;      Params:         2       0       0       0       0
  4594 ;;      Locals:         6       0       0       0       0
  4595 ;;      Temps:          2       0       0       0       0
  4596 ;;      Totals:        10       0       0       0       0
  4597 ;;Total ram usage:       10 bytes
  4598 ;; Hardware stack levels used:    1
  4599 ;; This function calls:
  4600 ;;		Nothing
  4601 ;; This function is called by:
  4602 ;;		_ReceivePacket_data
  4603 ;;		_ReceivePacket
  4604 ;; This function uses a non-reentrant model
  4605 ;;
  4606                           
  4607                           
  4608                           ;psect for function _fcscheck
  4609  002A                     _fcscheck:	
  4610                           
  4611                           ;decode_AX25.c: 314: UBYTE bt,byte;
  4612                           ;decode_AX25.c: 315: dfcslo = dfcshi = 0xff;
  4613                           
  4614                           ;incstack = 0
  4615                           ; Regs used in _fcscheck: [wreg-fsr0h+status,2+status,0]
  4616  002A  30FF               	movlw	255
  4617  002B  1283               	bcf	3,5	;RP0=0, select bank0
  4618  002C  1303               	bcf	3,6	;RP1=0, select bank0
  4619  002D  00EF               	movwf	_dfcshi
  4620  002E  00F2               	movwf	??_fcscheck
  4621  002F  0872               	movf	??_fcscheck,w
  4622  0030  00EE               	movwf	_dfcslo
  4623                           
  4624                           ;decode_AX25.c: 316: while(rcv_state == 3){
  4625  0031  3003               	movlw	3
  4626  0032  066A               	xorwf	_rcv_state,w
  4627  0033  046B               	iorwf	_rcv_state+1,w
  4628  0034  1D03               	btfss	3,2
  4629  0035  0008               	return
  4630                           
  4631                           ;decode_AX25.c: 317: for(UINT i=0;i<dPacketnum-2;i++){
  4632  0036  01F5               	clrf	fcscheck@i
  4633  0037  01F6               	clrf	fcscheck@i+1
  4634  0038                     l3130:	
  4635  0038  0868               	movf	_dPacketnum,w
  4636  0039  3EFE               	addlw	254
  4637  003A  00F2               	movwf	??_fcscheck
  4638  003B  0869               	movf	_dPacketnum+1,w
  4639  003C  1803               	skipnc
  4640  003D  3E01               	addlw	1
  4641  003E  3EFF               	addlw	255
  4642  003F  00F3               	movwf	??_fcscheck+1
  4643  0040  0873               	movf	??_fcscheck+1,w
  4644  0041  0276               	subwf	fcscheck@i+1,w
  4645  0042  1D03               	skipz
  4646  0043  2846               	goto	u2735
  4647  0044  0872               	movf	??_fcscheck,w
  4648  0045  0275               	subwf	fcscheck@i,w
  4649  0046                     u2735:	
  4650  0046  1803               	btfsc	3,0
  4651  0047  2891               	goto	l279
  4652                           
  4653                           ;decode_AX25.c: 318: byte = dPacket[i];
  4654  0048  0875               	movf	fcscheck@i,w
  4655  0049  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4656  004A  0084               	movwf	4
  4657  004B  1783               	bsf	3,7	;select IRP bank3
  4658  004C  0800               	movf	0,w
  4659  004D  00F2               	movwf	??_fcscheck
  4660  004E  0872               	movf	??_fcscheck,w
  4661  004F  00F9               	movwf	fcscheck@byte
  4662                           
  4663                           ;decode_AX25.c: 319: for(UINT i=0;i<8;i++){
  4664  0050  01F7               	clrf	fcscheck@i_149
  4665  0051  01F8               	clrf	fcscheck@i_149+1
  4666  0052  3000               	movlw	0
  4667  0053  0278               	subwf	fcscheck@i_149+1,w
  4668  0054  3008               	movlw	8
  4669  0055  1903               	skipnz
  4670  0056  0277               	subwf	fcscheck@i_149,w
  4671  0057  1803               	btfsc	3,0
  4672  0058  288A               	goto	l3128
  4673  0059                     l3116:	
  4674                           
  4675                           ;decode_AX25.c: 320: bt = byte & 0x01;
  4676  0059  0879               	movf	fcscheck@byte,w
  4677  005A  3901               	andlw	1
  4678  005B  00F2               	movwf	??_fcscheck
  4679  005C  0872               	movf	??_fcscheck,w
  4680  005D  00F4               	movwf	fcscheck@bt
  4681  005E  1003               	bcf	3,0	;# 
  4682  005F  0CEF               	rrf	_dfcshi,f	;# 
  4683  0060  0CEE               	rrf	_dfcslo,f	;# 
  4684                           
  4685                           ;decode_AX25.c: 326: if(((STATUS & 0x01)^bt) == 0x01){
  4686  0061  3001               	movlw	1
  4687  0062  1283               	bcf	3,5	;RP0=0, select bank0
  4688  0063  1303               	bcf	3,6	;RP1=0, select bank0
  4689  0064  0503               	andwf	3,w	;volatile
  4690  0065  00F2               	movwf	??_fcscheck
  4691  0066  0874               	movf	fcscheck@bt,w
  4692  0067  0672               	xorwf	??_fcscheck,w
  4693  0068  00F3               	movwf	??_fcscheck+1
  4694  0069  0373               	decf	??_fcscheck+1,w
  4695  006A  1D03               	btfss	3,2
  4696  006B  2876               	goto	l3122
  4697                           
  4698                           ;decode_AX25.c: 327: dfcshi = dfcshi ^ 0x84;
  4699  006C  086F               	movf	_dfcshi,w
  4700  006D  3A84               	xorlw	132
  4701  006E  00F2               	movwf	??_fcscheck
  4702  006F  0872               	movf	??_fcscheck,w
  4703  0070  00EF               	movwf	_dfcshi
  4704                           
  4705                           ;decode_AX25.c: 328: dfcslo = dfcslo ^ 0x08;
  4706  0071  086E               	movf	_dfcslo,w
  4707  0072  3A08               	xorlw	8
  4708  0073  00F2               	movwf	??_fcscheck
  4709  0074  0872               	movf	??_fcscheck,w
  4710  0075  00EE               	movwf	_dfcslo
  4711  0076                     l3122:	
  4712                           
  4713                           ;decode_AX25.c: 329: }
  4714                           ;decode_AX25.c: 330: byte = byte >> 1;
  4715  0076  0879               	movf	fcscheck@byte,w
  4716  0077  00F2               	movwf	??_fcscheck
  4717  0078  1003               	clrc
  4718  0079  0C72               	rrf	??_fcscheck,w
  4719  007A  00F3               	movwf	??_fcscheck+1
  4720  007B  0873               	movf	??_fcscheck+1,w
  4721  007C  00F9               	movwf	fcscheck@byte
  4722  007D  3001               	movlw	1
  4723  007E  07F7               	addwf	fcscheck@i_149,f
  4724  007F  1803               	skipnc
  4725  0080  0AF8               	incf	fcscheck@i_149+1,f
  4726  0081  3000               	movlw	0
  4727  0082  07F8               	addwf	fcscheck@i_149+1,f
  4728  0083  3000               	movlw	0
  4729  0084  0278               	subwf	fcscheck@i_149+1,w
  4730  0085  3008               	movlw	8
  4731  0086  1903               	skipnz
  4732  0087  0277               	subwf	fcscheck@i_149,w
  4733  0088  1C03               	skipc
  4734  0089  2859               	goto	l3116
  4735  008A                     l3128:	
  4736  008A  3001               	movlw	1
  4737  008B  07F5               	addwf	fcscheck@i,f
  4738  008C  1803               	skipnc
  4739  008D  0AF6               	incf	fcscheck@i+1,f
  4740  008E  3000               	movlw	0
  4741  008F  07F6               	addwf	fcscheck@i+1,f
  4742  0090  2838               	goto	l3130
  4743  0091                     l279:	
  4744                           
  4745                           ;decode_AX25.c: 331: }
  4746                           ;decode_AX25.c: 332: }
  4747                           ;decode_AX25.c: 333: dfcslo = dfcslo ^ 0xff;
  4748  0091  09EE               	comf	_dfcslo,f
  4749                           
  4750                           ;decode_AX25.c: 334: dfcshi = dfcshi ^ 0xff;
  4751  0092  09EF               	comf	_dfcshi,f
  4752                           
  4753                           ;decode_AX25.c: 337: if((dPacket[dPacketnum-2] == dfcslo) && (dPacket[dPacketnum-1] == d
      +                          fcshi)){
  4754  0093  0868               	movf	_dPacketnum,w
  4755  0094  3EFE               	addlw	254
  4756  0095  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4757  0096  0084               	movwf	4
  4758  0097  1783               	bsf	3,7	;select IRP bank3
  4759  0098  0800               	movf	0,w
  4760  0099  066E               	xorwf	_dfcslo,w
  4761  009A  1D03               	skipz
  4762  009B  28A9               	goto	l3142
  4763  009C  0868               	movf	_dPacketnum,w
  4764  009D  3EFF               	addlw	255
  4765  009E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4766  009F  0084               	movwf	4
  4767  00A0  0800               	movf	0,w
  4768  00A1  066F               	xorwf	_dfcshi,w
  4769  00A2  1D03               	skipz
  4770  00A3  28A9               	goto	l3142
  4771                           
  4772                           ;decode_AX25.c: 342: return 1;
  4773  00A4  3001               	movlw	1
  4774  00A5  00F0               	movwf	?_fcscheck
  4775  00A6  3000               	movlw	0
  4776  00A7  00F1               	movwf	?_fcscheck+1
  4777  00A8  0008               	return
  4778  00A9                     l3142:	
  4779                           ;decode_AX25.c: 343: }else{
  4780                           
  4781                           
  4782                           ;decode_AX25.c: 348: return 0;
  4783  00A9  01F0               	clrf	?_fcscheck
  4784  00AA  01F1               	clrf	?_fcscheck+1
  4785  00AB  0008               	return
  4786  00AC                     __end_of_fcscheck:	
  4787                           
  4788                           	psect	text8
  4789  0843                     __ptext8:	
  4790 ;; *************** function _NM_waddress *****************
  4791 ;; Defined at:
  4792 ;;		line 72 in file "UART.c"
  4793 ;; Parameters:    Size  Location     Type
  4794 ;;  NM_wad_heade    1    wreg     unsigned char 
  4795 ;;  whigh_addres    1    1[COMMON] unsigned char 
  4796 ;;  wlow_address    1    2[COMMON] unsigned char 
  4797 ;; Auto vars:     Size  Location     Type
  4798 ;;  NM_wad_heade    1    3[COMMON] unsigned char 
  4799 ;; Return value:  Size  Location     Type
  4800 ;;                  1    wreg      void 
  4801 ;; Registers used:
  4802 ;;		wreg, status,2, status,0, pclath, cstack
  4803 ;; Tracked objects:
  4804 ;;		On entry : 0/0
  4805 ;;		On exit  : 0/0
  4806 ;;		Unchanged: 0/0
  4807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4808 ;;      Params:         2       0       0       0       0
  4809 ;;      Locals:         1       0       0       0       0
  4810 ;;      Temps:          0       0       0       0       0
  4811 ;;      Totals:         3       0       0       0       0
  4812 ;;Total ram usage:        3 bytes
  4813 ;; Hardware stack levels used:    1
  4814 ;; Hardware stack levels required when called:    1
  4815 ;; This function calls:
  4816 ;;		_putch
  4817 ;; This function is called by:
  4818 ;;		_main
  4819 ;; This function uses a non-reentrant model
  4820 ;;
  4821                           
  4822                           
  4823                           ;psect for function _NM_waddress
  4824  0843                     _NM_waddress:	
  4825                           
  4826                           ;incstack = 0
  4827                           ; Regs used in _NM_waddress: [wreg+status,2+status,0+pclath+cstack]
  4828                           ;NM_waddress@NM_wad_header stored from wreg
  4829  0843  00F3               	movwf	NM_waddress@NM_wad_header
  4830                           
  4831                           ;UART.c: 73: putch(NM_wad_header);
  4832  0844  0873               	movf	NM_waddress@NM_wad_header,w
  4833  0845  120A  158A  2019  120A  158A  	fcall	_putch
  4834                           
  4835                           ;UART.c: 74: putch(whigh_address);
  4836  084A  0871               	movf	NM_waddress@whigh_address,w
  4837  084B  120A  158A  2019  120A  158A  	fcall	_putch
  4838                           
  4839                           ;UART.c: 75: putch(wlow_address);
  4840  0850  0872               	movf	NM_waddress@wlow_address,w
  4841  0851  120A  158A  2019   	fcall	_putch
  4842  0854  0008               	return
  4843  0855                     __end_of_NM_waddress:	
  4844                           
  4845                           	psect	text9
  4846  0819                     __ptext9:	
  4847 ;; *************** function _putch *****************
  4848 ;; Defined at:
  4849 ;;		line 39 in file "UART.c"
  4850 ;; Parameters:    Size  Location     Type
  4851 ;;  byte            1    wreg     unsigned char 
  4852 ;; Auto vars:     Size  Location     Type
  4853 ;;  byte            1    0[COMMON] unsigned char 
  4854 ;; Return value:  Size  Location     Type
  4855 ;;                  1    wreg      void 
  4856 ;; Registers used:
  4857 ;;		wreg
  4858 ;; Tracked objects:
  4859 ;;		On entry : 0/0
  4860 ;;		On exit  : 0/0
  4861 ;;		Unchanged: 0/0
  4862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4863 ;;      Params:         0       0       0       0       0
  4864 ;;      Locals:         1       0       0       0       0
  4865 ;;      Temps:          0       0       0       0       0
  4866 ;;      Totals:         1       0       0       0       0
  4867 ;;Total ram usage:        1 bytes
  4868 ;; Hardware stack levels used:    1
  4869 ;; This function calls:
  4870 ;;		Nothing
  4871 ;; This function is called by:
  4872 ;;		_NM_waddress
  4873 ;;		_TXOBC_waddress
  4874 ;;		_putstr
  4875 ;;		_putcrlf
  4876 ;;		_put_error
  4877 ;;		_put_ok
  4878 ;;		_putAX25
  4879 ;;		_conv_DI_UARTRX
  4880 ;;		_test_Packetmaker
  4881 ;;		_EEPROM_Read
  4882 ;; This function uses a non-reentrant model
  4883 ;;
  4884                           
  4885                           
  4886                           ;psect for function _putch
  4887  0819                     _putch:	
  4888                           
  4889                           ;incstack = 0
  4890                           ; Regs used in _putch: [wreg]
  4891                           ;putch@byte stored from wreg
  4892  0819  00F0               	movwf	putch@byte
  4893  081A                     l69:	
  4894                           ;UART.c: 40: while(!TXIF);
  4895                           
  4896  081A  1283               	bcf	3,5	;RP0=0, select bank0
  4897  081B  1303               	bcf	3,6	;RP1=0, select bank0
  4898  081C  1E0C               	btfss	12,4	;volatile
  4899  081D  281A               	goto	l69
  4900                           
  4901                           ;UART.c: 41: TXREG = byte;
  4902  081E  0870               	movf	putch@byte,w
  4903  081F  0099               	movwf	25	;volatile
  4904  0820  0008               	return
  4905  0821                     __end_of_putch:	
  4906                           
  4907                           	psect	text10
  4908  086A                     __ptext10:	
  4909 ;; *************** function _Init_SERIAL *****************
  4910 ;; Defined at:
  4911 ;;		line 6 in file "UART.c"
  4912 ;; Parameters:    Size  Location     Type
  4913 ;;		None
  4914 ;; Auto vars:     Size  Location     Type
  4915 ;;		None
  4916 ;; Return value:  Size  Location     Type
  4917 ;;                  1    wreg      void 
  4918 ;; Registers used:
  4919 ;;		wreg
  4920 ;; Tracked objects:
  4921 ;;		On entry : 0/0
  4922 ;;		On exit  : 0/0
  4923 ;;		Unchanged: 0/0
  4924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4925 ;;      Params:         0       0       0       0       0
  4926 ;;      Locals:         0       0       0       0       0
  4927 ;;      Temps:          0       0       0       0       0
  4928 ;;      Totals:         0       0       0       0       0
  4929 ;;Total ram usage:        0 bytes
  4930 ;; Hardware stack levels used:    1
  4931 ;; This function calls:
  4932 ;;		Nothing
  4933 ;; This function is called by:
  4934 ;;		_main
  4935 ;; This function uses a non-reentrant model
  4936 ;;
  4937                           
  4938                           
  4939                           ;psect for function _Init_SERIAL
  4940  086A                     _Init_SERIAL:	
  4941                           
  4942                           ;UART.c: 7: SPBRG = 10;
  4943                           
  4944                           ;incstack = 0
  4945                           ; Regs used in _Init_SERIAL: [wreg]
  4946  086A  300A               	movlw	10
  4947  086B  1683               	bsf	3,5	;RP0=1, select bank1
  4948  086C  1303               	bcf	3,6	;RP1=0, select bank1
  4949  086D  0099               	movwf	25	;volatile
  4950                           
  4951                           ;UART.c: 8: BRGH = 0;
  4952  086E  1118               	bcf	24,2	;volatile
  4953                           
  4954                           ;UART.c: 9: SYNC = 0;
  4955  086F  1218               	bcf	24,4	;volatile
  4956                           
  4957                           ;UART.c: 10: SPEN = 1;
  4958  0870  1283               	bcf	3,5	;RP0=0, select bank0
  4959  0871  1303               	bcf	3,6	;RP1=0, select bank0
  4960  0872  1798               	bsf	24,7	;volatile
  4961                           
  4962                           ;UART.c: 11: CREN = 1;
  4963  0873  1618               	bsf	24,4	;volatile
  4964                           
  4965                           ;UART.c: 12: SREN = 0;
  4966  0874  1298               	bcf	24,5	;volatile
  4967                           
  4968                           ;UART.c: 13: RCIF = 0;
  4969  0875  128C               	bcf	12,5	;volatile
  4970                           
  4971                           ;UART.c: 14: TXIE = 0;
  4972  0876  1683               	bsf	3,5	;RP0=1, select bank1
  4973  0877  1303               	bcf	3,6	;RP1=0, select bank1
  4974  0878  120C               	bcf	12,4	;volatile
  4975                           
  4976                           ;UART.c: 15: RCIE = 1;
  4977  0879  168C               	bsf	12,5	;volatile
  4978                           
  4979                           ;UART.c: 16: TX9 = 0;
  4980  087A  1318               	bcf	24,6	;volatile
  4981                           
  4982                           ;UART.c: 17: RX9 = 0;
  4983  087B  1283               	bcf	3,5	;RP0=0, select bank0
  4984  087C  1303               	bcf	3,6	;RP1=0, select bank0
  4985  087D  1318               	bcf	24,6	;volatile
  4986                           
  4987                           ;UART.c: 18: TXEN = 0;
  4988  087E  1683               	bsf	3,5	;RP0=1, select bank1
  4989  087F  1303               	bcf	3,6	;RP1=0, select bank1
  4990  0880  1298               	bcf	24,5	;volatile
  4991                           
  4992                           ;UART.c: 19: TXEN = 1;
  4993  0881  1698               	bsf	24,5	;volatile
  4994  0882  0008               	return
  4995  0883                     __end_of_Init_SERIAL:	
  4996                           
  4997                           	psect	text11
  4998  08B6                     __ptext11:	
  4999 ;; *************** function _Init_MPU *****************
  5000 ;; Defined at:
  5001 ;;		line 8 in file "Init_MPU.c"
  5002 ;; Parameters:    Size  Location     Type
  5003 ;;		None
  5004 ;; Auto vars:     Size  Location     Type
  5005 ;;		None
  5006 ;; Return value:  Size  Location     Type
  5007 ;;                  1    wreg      void 
  5008 ;; Registers used:
  5009 ;;		wreg, status,2
  5010 ;; Tracked objects:
  5011 ;;		On entry : 0/0
  5012 ;;		On exit  : 0/0
  5013 ;;		Unchanged: 0/0
  5014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5015 ;;      Params:         0       0       0       0       0
  5016 ;;      Locals:         0       0       0       0       0
  5017 ;;      Temps:          0       0       0       0       0
  5018 ;;      Totals:         0       0       0       0       0
  5019 ;;Total ram usage:        0 bytes
  5020 ;; Hardware stack levels used:    1
  5021 ;; This function calls:
  5022 ;;		Nothing
  5023 ;; This function is called by:
  5024 ;;		_main
  5025 ;; This function uses a non-reentrant model
  5026 ;;
  5027                           
  5028                           
  5029                           ;psect for function _Init_MPU
  5030  08B6                     _Init_MPU:	
  5031                           
  5032                           ;Init_MPU.c: 11: PORTA = 0x00;
  5033                           
  5034                           ;incstack = 0
  5035                           ; Regs used in _Init_MPU: [wreg+status,2]
  5036  08B6  1283               	bcf	3,5	;RP0=0, select bank0
  5037  08B7  1303               	bcf	3,6	;RP1=0, select bank0
  5038  08B8  0185               	clrf	5	;volatile
  5039                           
  5040                           ;Init_MPU.c: 12: PORTB = 0x00;
  5041  08B9  0186               	clrf	6	;volatile
  5042                           
  5043                           ;Init_MPU.c: 13: PORTC = 0x00;
  5044  08BA  0187               	clrf	7	;volatile
  5045                           
  5046                           ;Init_MPU.c: 14: PORTD = 0x00;
  5047  08BB  0188               	clrf	8	;volatile
  5048                           
  5049                           ;Init_MPU.c: 15: PORTE = 0x00;
  5050  08BC  0189               	clrf	9	;volatile
  5051                           
  5052                           ;Init_MPU.c: 18: ANSEL = 0x00;
  5053  08BD  1683               	bsf	3,5	;RP0=1, select bank3
  5054  08BE  1703               	bsf	3,6	;RP1=1, select bank3
  5055  08BF  0188               	clrf	8	;volatile
  5056                           
  5057                           ;Init_MPU.c: 19: ANSELH = 0x00;
  5058  08C0  0189               	clrf	9	;volatile
  5059                           
  5060                           ;Init_MPU.c: 23: TRISA = 0b10000000;
  5061  08C1  3080               	movlw	128
  5062  08C2  1683               	bsf	3,5	;RP0=1, select bank1
  5063  08C3  1303               	bcf	3,6	;RP1=0, select bank1
  5064  08C4  0085               	movwf	5	;volatile
  5065                           
  5066                           ;Init_MPU.c: 24: TRISB = 0b00100000;
  5067  08C5  3020               	movlw	32
  5068  08C6  0086               	movwf	6	;volatile
  5069                           
  5070                           ;Init_MPU.c: 25: TRISC = 0b10011000;
  5071  08C7  3098               	movlw	152
  5072  08C8  0087               	movwf	7	;volatile
  5073                           
  5074                           ;Init_MPU.c: 26: TRISD = 0b00000000;
  5075  08C9  0188               	clrf	8	;volatile
  5076                           
  5077                           ;Init_MPU.c: 27: TRISE = 0b00000000;
  5078  08CA  0189               	clrf	9	;volatile
  5079                           
  5080                           ;Init_MPU.c: 30: PORTA = 0x00;
  5081  08CB  1283               	bcf	3,5	;RP0=0, select bank0
  5082  08CC  1303               	bcf	3,6	;RP1=0, select bank0
  5083  08CD  0185               	clrf	5	;volatile
  5084                           
  5085                           ;Init_MPU.c: 31: PORTB = 0x00;
  5086  08CE  0186               	clrf	6	;volatile
  5087                           
  5088                           ;Init_MPU.c: 32: PORTC = 0x00;
  5089  08CF  0187               	clrf	7	;volatile
  5090                           
  5091                           ;Init_MPU.c: 33: PORTD = 0x00;
  5092  08D0  0188               	clrf	8	;volatile
  5093                           
  5094                           ;Init_MPU.c: 34: PORTE = 0x00;
  5095  08D1  0189               	clrf	9	;volatile
  5096  08D2  0008               	return
  5097  08D3                     __end_of_Init_MPU:	
  5098                           
  5099                           	psect	text12
  5100  09AD                     __ptext12:	
  5101 ;; *************** function _Init_I2C_M *****************
  5102 ;; Defined at:
  5103 ;;		line 8 in file "I2C.c"
  5104 ;; Parameters:    Size  Location     Type
  5105 ;;  c               4    0[BANK0 ] const unsigned long 
  5106 ;; Auto vars:     Size  Location     Type
  5107 ;;		None
  5108 ;; Return value:  Size  Location     Type
  5109 ;;                  1    wreg      void 
  5110 ;; Registers used:
  5111 ;;		wreg, status,2, status,0, pclath, cstack
  5112 ;; Tracked objects:
  5113 ;;		On entry : 0/0
  5114 ;;		On exit  : 0/0
  5115 ;;		Unchanged: 0/0
  5116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5117 ;;      Params:         0       4       0       0       0
  5118 ;;      Locals:         0       0       0       0       0
  5119 ;;      Temps:          0       4       0       0       0
  5120 ;;      Totals:         0       8       0       0       0
  5121 ;;Total ram usage:        8 bytes
  5122 ;; Hardware stack levels used:    1
  5123 ;; Hardware stack levels required when called:    1
  5124 ;; This function calls:
  5125 ;;		___lldiv
  5126 ;; This function is called by:
  5127 ;;		_main
  5128 ;; This function uses a non-reentrant model
  5129 ;;
  5130                           
  5131                           
  5132                           ;psect for function _Init_I2C_M
  5133  09AD                     _Init_I2C_M:	
  5134                           
  5135                           ;I2C.c: 9: SSPCON = 0b00101000;
  5136                           
  5137                           ;incstack = 0
  5138                           ; Regs used in _Init_I2C_M: [wreg+status,2+status,0+pclath+cstack]
  5139  09AD  3028               	movlw	40
  5140  09AE  1283               	bcf	3,5	;RP0=0, select bank0
  5141  09AF  1303               	bcf	3,6	;RP1=0, select bank0
  5142  09B0  0094               	movwf	20	;volatile
  5143                           
  5144                           ;I2C.c: 10: SSPCON2 = 0;
  5145  09B1  1683               	bsf	3,5	;RP0=1, select bank1
  5146  09B2  1303               	bcf	3,6	;RP1=0, select bank1
  5147  09B3  0191               	clrf	17	;volatile
  5148                           
  5149                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  5150  09B4  1283               	bcf	3,5	;RP0=0, select bank0
  5151  09B5  1303               	bcf	3,6	;RP1=0, select bank0
  5152  09B6  0820               	movf	Init_I2C_M@c,w
  5153  09B7  00A4               	movwf	??_Init_I2C_M
  5154  09B8  0821               	movf	Init_I2C_M@c+1,w
  5155  09B9  00A5               	movwf	??_Init_I2C_M+1
  5156  09BA  0822               	movf	Init_I2C_M@c+2,w
  5157  09BB  00A6               	movwf	??_Init_I2C_M+2
  5158  09BC  0823               	movf	Init_I2C_M@c+3,w
  5159  09BD  00A7               	movwf	??_Init_I2C_M+3
  5160  09BE  3002               	movlw	2
  5161  09BF                     u3155:	
  5162  09BF  1003               	clrc
  5163  09C0  0DA4               	rlf	??_Init_I2C_M,f
  5164  09C1  0DA5               	rlf	??_Init_I2C_M+1,f
  5165  09C2  0DA6               	rlf	??_Init_I2C_M+2,f
  5166  09C3  0DA7               	rlf	??_Init_I2C_M+3,f
  5167  09C4  3EFF               	addlw	-1
  5168  09C5  1D03               	skipz
  5169  09C6  29BF               	goto	u3155
  5170  09C7  0827               	movf	??_Init_I2C_M+3,w
  5171  09C8  00F3               	movwf	___lldiv@divisor+3
  5172  09C9  0826               	movf	??_Init_I2C_M+2,w
  5173  09CA  00F2               	movwf	___lldiv@divisor+2
  5174  09CB  0825               	movf	??_Init_I2C_M+1,w
  5175  09CC  00F1               	movwf	___lldiv@divisor+1
  5176  09CD  0824               	movf	??_Init_I2C_M,w
  5177  09CE  00F0               	movwf	___lldiv@divisor
  5178  09CF  3000               	movlw	0
  5179  09D0  00F7               	movwf	___lldiv@dividend+3
  5180  09D1  3098               	movlw	152
  5181  09D2  00F6               	movwf	___lldiv@dividend+2
  5182  09D3  3096               	movlw	150
  5183  09D4  00F5               	movwf	___lldiv@dividend+1
  5184  09D5  3080               	movlw	128
  5185  09D6  00F4               	movwf	___lldiv@dividend
  5186  09D7  120A  158A  23A9   	fcall	___lldiv
  5187  09DA  0870               	movf	?___lldiv,w
  5188  09DB  3EFF               	addlw	255
  5189  09DC  1683               	bsf	3,5	;RP0=1, select bank1
  5190  09DD  1303               	bcf	3,6	;RP1=0, select bank1
  5191  09DE  0093               	movwf	19	;volatile
  5192                           
  5193                           ;I2C.c: 12: SSPSTAT = 0;
  5194  09DF  0194               	clrf	20	;volatile
  5195  09E0  0008               	return
  5196  09E1                     __end_of_Init_I2C_M:	
  5197                           
  5198                           	psect	text13
  5199  0BA9                     __ptext13:	
  5200 ;; *************** function ___lldiv *****************
  5201 ;; Defined at:
  5202 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5203 ;; Parameters:    Size  Location     Type
  5204 ;;  divisor         4    0[COMMON] unsigned long 
  5205 ;;  dividend        4    4[COMMON] unsigned long 
  5206 ;; Auto vars:     Size  Location     Type
  5207 ;;  quotient        4    9[COMMON] unsigned long 
  5208 ;;  counter         1   13[COMMON] unsigned char 
  5209 ;; Return value:  Size  Location     Type
  5210 ;;                  4    0[COMMON] unsigned long 
  5211 ;; Registers used:
  5212 ;;		wreg, status,2, status,0
  5213 ;; Tracked objects:
  5214 ;;		On entry : 0/0
  5215 ;;		On exit  : 0/0
  5216 ;;		Unchanged: 0/0
  5217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5218 ;;      Params:         8       0       0       0       0
  5219 ;;      Locals:         5       0       0       0       0
  5220 ;;      Temps:          1       0       0       0       0
  5221 ;;      Totals:        14       0       0       0       0
  5222 ;;Total ram usage:       14 bytes
  5223 ;; Hardware stack levels used:    1
  5224 ;; This function calls:
  5225 ;;		Nothing
  5226 ;; This function is called by:
  5227 ;;		_Init_I2C_M
  5228 ;; This function uses a non-reentrant model
  5229 ;;
  5230                           
  5231                           
  5232                           ;psect for function ___lldiv
  5233  0BA9                     ___lldiv:	
  5234                           
  5235                           ;incstack = 0
  5236                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5237  0BA9  3000               	movlw	0
  5238  0BAA  00FC               	movwf	___lldiv@quotient+3
  5239  0BAB  3000               	movlw	0
  5240  0BAC  00FB               	movwf	___lldiv@quotient+2
  5241  0BAD  3000               	movlw	0
  5242  0BAE  00FA               	movwf	___lldiv@quotient+1
  5243  0BAF  3000               	movlw	0
  5244  0BB0  00F9               	movwf	___lldiv@quotient
  5245  0BB1  0873               	movf	___lldiv@divisor+3,w
  5246  0BB2  0472               	iorwf	___lldiv@divisor+2,w
  5247  0BB3  0471               	iorwf	___lldiv@divisor+1,w
  5248  0BB4  0470               	iorwf	___lldiv@divisor,w
  5249  0BB5  1903               	skipnz
  5250  0BB6  2BFE               	goto	l3306
  5251  0BB7  01FD               	clrf	___lldiv@counter
  5252  0BB8  0AFD               	incf	___lldiv@counter,f
  5253  0BB9                     l3292:	
  5254  0BB9  1BF3               	btfsc	___lldiv@divisor+3,7
  5255  0BBA  2BC9               	goto	l3294
  5256  0BBB  3001               	movlw	1
  5257  0BBC  00F8               	movwf	??___lldiv
  5258  0BBD                     u3005:	
  5259  0BBD  1003               	clrc
  5260  0BBE  0DF0               	rlf	___lldiv@divisor,f
  5261  0BBF  0DF1               	rlf	___lldiv@divisor+1,f
  5262  0BC0  0DF2               	rlf	___lldiv@divisor+2,f
  5263  0BC1  0DF3               	rlf	___lldiv@divisor+3,f
  5264  0BC2  0BF8               	decfsz	??___lldiv,f
  5265  0BC3  2BBD               	goto	u3005
  5266  0BC4  3001               	movlw	1
  5267  0BC5  00F8               	movwf	??___lldiv
  5268  0BC6  0878               	movf	??___lldiv,w
  5269  0BC7  07FD               	addwf	___lldiv@counter,f
  5270  0BC8  2BB9               	goto	l3292
  5271  0BC9                     l3294:	
  5272  0BC9  3001               	movlw	1
  5273  0BCA  00F8               	movwf	??___lldiv
  5274  0BCB                     u3025:	
  5275  0BCB  1003               	clrc
  5276  0BCC  0DF9               	rlf	___lldiv@quotient,f
  5277  0BCD  0DFA               	rlf	___lldiv@quotient+1,f
  5278  0BCE  0DFB               	rlf	___lldiv@quotient+2,f
  5279  0BCF  0DFC               	rlf	___lldiv@quotient+3,f
  5280  0BD0  0BF8               	decfsz	??___lldiv,f
  5281  0BD1  2BCB               	goto	u3025
  5282  0BD2  0873               	movf	___lldiv@divisor+3,w
  5283  0BD3  0277               	subwf	___lldiv@dividend+3,w
  5284  0BD4  1D03               	skipz
  5285  0BD5  2BE0               	goto	u3035
  5286  0BD6  0872               	movf	___lldiv@divisor+2,w
  5287  0BD7  0276               	subwf	___lldiv@dividend+2,w
  5288  0BD8  1D03               	skipz
  5289  0BD9  2BE0               	goto	u3035
  5290  0BDA  0871               	movf	___lldiv@divisor+1,w
  5291  0BDB  0275               	subwf	___lldiv@dividend+1,w
  5292  0BDC  1D03               	skipz
  5293  0BDD  2BE0               	goto	u3035
  5294  0BDE  0870               	movf	___lldiv@divisor,w
  5295  0BDF  0274               	subwf	___lldiv@dividend,w
  5296  0BE0                     u3035:	
  5297  0BE0  1C03               	skipc
  5298  0BE1  2BF1               	goto	l3302
  5299  0BE2  0870               	movf	___lldiv@divisor,w
  5300  0BE3  02F4               	subwf	___lldiv@dividend,f
  5301  0BE4  0871               	movf	___lldiv@divisor+1,w
  5302  0BE5  1C03               	skipc
  5303  0BE6  0F71               	incfsz	___lldiv@divisor+1,w
  5304  0BE7  02F5               	subwf	___lldiv@dividend+1,f
  5305  0BE8  0872               	movf	___lldiv@divisor+2,w
  5306  0BE9  1C03               	skipc
  5307  0BEA  0F72               	incfsz	___lldiv@divisor+2,w
  5308  0BEB  02F6               	subwf	___lldiv@dividend+2,f
  5309  0BEC  0873               	movf	___lldiv@divisor+3,w
  5310  0BED  1C03               	skipc
  5311  0BEE  0F73               	incfsz	___lldiv@divisor+3,w
  5312  0BEF  02F7               	subwf	___lldiv@dividend+3,f
  5313  0BF0  1479               	bsf	___lldiv@quotient,0
  5314  0BF1                     l3302:	
  5315  0BF1  3001               	movlw	1
  5316  0BF2                     u3045:	
  5317  0BF2  1003               	clrc
  5318  0BF3  0CF3               	rrf	___lldiv@divisor+3,f
  5319  0BF4  0CF2               	rrf	___lldiv@divisor+2,f
  5320  0BF5  0CF1               	rrf	___lldiv@divisor+1,f
  5321  0BF6  0CF0               	rrf	___lldiv@divisor,f
  5322  0BF7  3EFF               	addlw	-1
  5323  0BF8  1D03               	skipz
  5324  0BF9  2BF2               	goto	u3045
  5325  0BFA  3001               	movlw	1
  5326  0BFB  02FD               	subwf	___lldiv@counter,f
  5327  0BFC  1D03               	btfss	3,2
  5328  0BFD  2BC9               	goto	l3294
  5329  0BFE                     l3306:	
  5330  0BFE  087C               	movf	___lldiv@quotient+3,w
  5331  0BFF  00F3               	movwf	?___lldiv+3
  5332  0C00  087B               	movf	___lldiv@quotient+2,w
  5333  0C01  00F2               	movwf	?___lldiv+2
  5334  0C02  087A               	movf	___lldiv@quotient+1,w
  5335  0C03  00F1               	movwf	?___lldiv+1
  5336  0C04  0879               	movf	___lldiv@quotient,w
  5337  0C05  00F0               	movwf	?___lldiv
  5338  0C06  0008               	return
  5339  0C07                     __end_of___lldiv:	
  5340                           
  5341                           	psect	text14
  5342  0953                     __ptext14:	
  5343 ;; *************** function _FMTX *****************
  5344 ;; Defined at:
  5345 ;;		line 270 in file "FMCW.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;  Nref            2   60[BANK0 ] int 
  5348 ;;  Nprg            2   62[BANK0 ] PTR int 
  5349 ;;		 -> RAM(512), main@FMTX_Nprg(10), FMTX_Nprg(10), 
  5350 ;; Auto vars:     Size  Location     Type
  5351 ;;  fmtx            2   64[BANK0 ] int 
  5352 ;; Return value:  Size  Location     Type
  5353 ;;                  1    wreg      void 
  5354 ;; Registers used:
  5355 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5356 ;; Tracked objects:
  5357 ;;		On entry : 0/0
  5358 ;;		On exit  : 0/0
  5359 ;;		Unchanged: 0/0
  5360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5361 ;;      Params:         0       4       0       0       0
  5362 ;;      Locals:         0       2       0       0       0
  5363 ;;      Temps:          0       0       0       0       0
  5364 ;;      Totals:         0       6       0       0       0
  5365 ;;Total ram usage:        6 bytes
  5366 ;; Hardware stack levels used:    1
  5367 ;; Hardware stack levels required when called:    3
  5368 ;; This function calls:
  5369 ;;		_OPINIT
  5370 ;;		_OUTFQ
  5371 ;;		_RFDOUT
  5372 ;; This function is called by:
  5373 ;;		_main
  5374 ;;		_SetPLL
  5375 ;; This function uses a non-reentrant model
  5376 ;;
  5377                           
  5378                           
  5379                           ;psect for function _FMTX
  5380  0953                     _FMTX:	
  5381                           
  5382                           ;FMCW.c: 271: int fmtx = 1;
  5383                           
  5384                           ;incstack = 0
  5385                           ; Regs used in _FMTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5386  0953  3001               	movlw	1
  5387  0954  1283               	bcf	3,5	;RP0=0, select bank0
  5388  0955  1303               	bcf	3,6	;RP1=0, select bank0
  5389  0956  00E0               	movwf	FMTX@fmtx
  5390  0957  3000               	movlw	0
  5391  0958  00E1               	movwf	FMTX@fmtx+1
  5392                           
  5393                           ;FMCW.c: 272: OPINIT(fmtx);
  5394  0959  0861               	movf	FMTX@fmtx+1,w
  5395  095A  00F5               	movwf	OPINIT@fmcwtxrx+1
  5396  095B  0860               	movf	FMTX@fmtx,w
  5397  095C  00F4               	movwf	OPINIT@fmcwtxrx
  5398  095D  120A  158A  24CD  120A  158A  	fcall	_OPINIT
  5399                           
  5400                           ;FMCW.c: 273: RFDOUT(fmtx, Nref);
  5401  0962  1283               	bcf	3,5	;RP0=0, select bank0
  5402  0963  1303               	bcf	3,6	;RP1=0, select bank0
  5403  0964  0861               	movf	FMTX@fmtx+1,w
  5404  0965  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5405  0966  0860               	movf	FMTX@fmtx,w
  5406  0967  00F9               	movwf	RFDOUT@fmcwtxrx
  5407  0968  085D               	movf	FMTX@Nref+1,w
  5408  0969  00FC               	movwf	RFDOUT@Nref+1
  5409  096A  085C               	movf	FMTX@Nref,w
  5410  096B  00FB               	movwf	RFDOUT@Nref
  5411  096C  120A  158A  254A  120A  158A  	fcall	_RFDOUT
  5412                           
  5413                           ;FMCW.c: 274: OUTFQ(fmtx, Nprg);
  5414  0971  1283               	bcf	3,5	;RP0=0, select bank0
  5415  0972  1303               	bcf	3,6	;RP1=0, select bank0
  5416  0973  0861               	movf	FMTX@fmtx+1,w
  5417  0974  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5418  0975  0860               	movf	FMTX@fmtx,w
  5419  0976  00F9               	movwf	OUTFQ@fmcwtxrx
  5420  0977  085E               	movf	FMTX@Nprg,w
  5421  0978  00FB               	movwf	OUTFQ@Nprg
  5422  0979  085F               	movf	FMTX@Nprg+1,w
  5423  097A  00FC               	movwf	OUTFQ@Nprg+1
  5424  097B  120A  118A  20AC   	fcall	_OUTFQ
  5425  097E  0008               	return
  5426  097F                     __end_of_FMTX:	
  5427                           
  5428                           	psect	text15
  5429  0927                     __ptext15:	
  5430 ;; *************** function _FMRX *****************
  5431 ;; Defined at:
  5432 ;;		line 298 in file "FMCW.c"
  5433 ;; Parameters:    Size  Location     Type
  5434 ;;  Nref            2   60[BANK0 ] int 
  5435 ;;  Nprg            2   62[BANK0 ] PTR int 
  5436 ;;		 -> RAM(512), main@FMRX_Nprg(10), FMRX_Nprg(10), 
  5437 ;; Auto vars:     Size  Location     Type
  5438 ;;  fmrx            2   64[BANK0 ] int 
  5439 ;; Return value:  Size  Location     Type
  5440 ;;                  1    wreg      void 
  5441 ;; Registers used:
  5442 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5443 ;; Tracked objects:
  5444 ;;		On entry : 0/0
  5445 ;;		On exit  : 0/0
  5446 ;;		Unchanged: 0/0
  5447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5448 ;;      Params:         0       4       0       0       0
  5449 ;;      Locals:         0       2       0       0       0
  5450 ;;      Temps:          0       0       0       0       0
  5451 ;;      Totals:         0       6       0       0       0
  5452 ;;Total ram usage:        6 bytes
  5453 ;; Hardware stack levels used:    1
  5454 ;; Hardware stack levels required when called:    3
  5455 ;; This function calls:
  5456 ;;		_OPINIT
  5457 ;;		_OUTFQ
  5458 ;;		_RFDOUT
  5459 ;; This function is called by:
  5460 ;;		_main
  5461 ;;		_SetPLL
  5462 ;; This function uses a non-reentrant model
  5463 ;;
  5464                           
  5465                           
  5466                           ;psect for function _FMRX
  5467  0927                     _FMRX:	
  5468                           
  5469                           ;FMCW.c: 299: int fmrx = 3;
  5470                           
  5471                           ;incstack = 0
  5472                           ; Regs used in _FMRX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5473  0927  3003               	movlw	3
  5474  0928  1283               	bcf	3,5	;RP0=0, select bank0
  5475  0929  1303               	bcf	3,6	;RP1=0, select bank0
  5476  092A  00E0               	movwf	FMRX@fmrx
  5477  092B  3000               	movlw	0
  5478  092C  00E1               	movwf	FMRX@fmrx+1
  5479                           
  5480                           ;FMCW.c: 300: OPINIT(fmrx);
  5481  092D  0861               	movf	FMRX@fmrx+1,w
  5482  092E  00F5               	movwf	OPINIT@fmcwtxrx+1
  5483  092F  0860               	movf	FMRX@fmrx,w
  5484  0930  00F4               	movwf	OPINIT@fmcwtxrx
  5485  0931  120A  158A  24CD  120A  158A  	fcall	_OPINIT
  5486                           
  5487                           ;FMCW.c: 301: RFDOUT(fmrx, Nref);
  5488  0936  1283               	bcf	3,5	;RP0=0, select bank0
  5489  0937  1303               	bcf	3,6	;RP1=0, select bank0
  5490  0938  0861               	movf	FMRX@fmrx+1,w
  5491  0939  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5492  093A  0860               	movf	FMRX@fmrx,w
  5493  093B  00F9               	movwf	RFDOUT@fmcwtxrx
  5494  093C  085D               	movf	FMRX@Nref+1,w
  5495  093D  00FC               	movwf	RFDOUT@Nref+1
  5496  093E  085C               	movf	FMRX@Nref,w
  5497  093F  00FB               	movwf	RFDOUT@Nref
  5498  0940  120A  158A  254A  120A  158A  	fcall	_RFDOUT
  5499                           
  5500                           ;FMCW.c: 302: OUTFQ(fmrx, Nprg);
  5501  0945  1283               	bcf	3,5	;RP0=0, select bank0
  5502  0946  1303               	bcf	3,6	;RP1=0, select bank0
  5503  0947  0861               	movf	FMRX@fmrx+1,w
  5504  0948  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5505  0949  0860               	movf	FMRX@fmrx,w
  5506  094A  00F9               	movwf	OUTFQ@fmcwtxrx
  5507  094B  085E               	movf	FMRX@Nprg,w
  5508  094C  00FB               	movwf	OUTFQ@Nprg
  5509  094D  085F               	movf	FMRX@Nprg+1,w
  5510  094E  00FC               	movwf	OUTFQ@Nprg+1
  5511  094F  120A  118A  20AC   	fcall	_OUTFQ
  5512  0952  0008               	return
  5513  0953                     __end_of_FMRX:	
  5514                           
  5515                           	psect	text16
  5516  0B4C                     __ptext16:	
  5517 ;; *************** function _EEPROM_Write *****************
  5518 ;; Defined at:
  5519 ;;		line 51 in file "I2C.c"
  5520 ;; Parameters:    Size  Location     Type
  5521 ;;  EEPROM_addre    1    wreg     unsigned char 
  5522 ;;  high_address    1    2[COMMON] unsigned char 
  5523 ;;  low_address     1    3[COMMON] unsigned char 
  5524 ;;  data            1    4[COMMON] PTR unsigned char 
  5525 ;;		 -> NULL(0), dData(16), 
  5526 ;; Auto vars:     Size  Location     Type
  5527 ;;  EEPROM_addre    1    8[COMMON] unsigned char 
  5528 ;;  Address         1    9[COMMON] unsigned char 
  5529 ;; Return value:  Size  Location     Type
  5530 ;;                  1    wreg      void 
  5531 ;; Registers used:
  5532 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5533 ;; Tracked objects:
  5534 ;;		On entry : 0/0
  5535 ;;		On exit  : 0/0
  5536 ;;		Unchanged: 0/0
  5537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5538 ;;      Params:         3       0       0       0       0
  5539 ;;      Locals:         2       0       0       0       0
  5540 ;;      Temps:          3       0       0       0       0
  5541 ;;      Totals:         8       0       0       0       0
  5542 ;;Total ram usage:        8 bytes
  5543 ;; Hardware stack levels used:    1
  5544 ;; Hardware stack levels required when called:    2
  5545 ;; This function calls:
  5546 ;;		_I2C_Master_Start
  5547 ;;		_I2C_Master_Stop
  5548 ;;		_I2C_Master_Write
  5549 ;; This function is called by:
  5550 ;;		_main
  5551 ;; This function uses a non-reentrant model
  5552 ;;
  5553                           
  5554                           
  5555                           ;psect for function _EEPROM_Write
  5556  0B4C                     _EEPROM_Write:	
  5557                           
  5558                           ;incstack = 0
  5559                           ; Regs used in _EEPROM_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5560                           ;EEPROM_Write@EEPROM_address stored from wreg
  5561  0B4C  00F8               	movwf	EEPROM_Write@EEPROM_address
  5562                           
  5563                           ;I2C.c: 52: UBYTE Address = EEPROM_address << 1;
  5564  0B4D  0878               	movf	EEPROM_Write@EEPROM_address,w
  5565  0B4E  00F5               	movwf	??_EEPROM_Write
  5566  0B4F  0775               	addwf	??_EEPROM_Write,w
  5567  0B50  00F6               	movwf	??_EEPROM_Write+1
  5568  0B51  0876               	movf	??_EEPROM_Write+1,w
  5569  0B52  00F9               	movwf	EEPROM_Write@Address
  5570                           
  5571                           ;I2C.c: 55: I2C_Master_Start();
  5572  0B53  160A  118A  27EA  120A  158A  	fcall	_I2C_Master_Start
  5573                           
  5574                           ;I2C.c: 56: I2C_Master_Write(Address);
  5575  0B58  0879               	movf	EEPROM_Write@Address,w
  5576  0B59  00F5               	movwf	??_EEPROM_Write
  5577  0B5A  01F6               	clrf	??_EEPROM_Write+1
  5578  0B5B  0875               	movf	??_EEPROM_Write,w
  5579  0B5C  00F0               	movwf	I2C_Master_Write@d
  5580  0B5D  0876               	movf	??_EEPROM_Write+1,w
  5581  0B5E  00F1               	movwf	I2C_Master_Write@d+1
  5582  0B5F  160A  118A  27F8  120A  158A  	fcall	_I2C_Master_Write
  5583                           
  5584                           ;I2C.c: 57: I2C_Master_Write(high_address);
  5585  0B64  0872               	movf	EEPROM_Write@high_address,w
  5586  0B65  00F5               	movwf	??_EEPROM_Write
  5587  0B66  01F6               	clrf	??_EEPROM_Write+1
  5588  0B67  0875               	movf	??_EEPROM_Write,w
  5589  0B68  00F0               	movwf	I2C_Master_Write@d
  5590  0B69  0876               	movf	??_EEPROM_Write+1,w
  5591  0B6A  00F1               	movwf	I2C_Master_Write@d+1
  5592  0B6B  160A  118A  27F8  120A  158A  	fcall	_I2C_Master_Write
  5593                           
  5594                           ;I2C.c: 58: I2C_Master_Write(low_address);
  5595  0B70  0873               	movf	EEPROM_Write@low_address,w
  5596  0B71  00F5               	movwf	??_EEPROM_Write
  5597  0B72  01F6               	clrf	??_EEPROM_Write+1
  5598  0B73  0875               	movf	??_EEPROM_Write,w
  5599  0B74  00F0               	movwf	I2C_Master_Write@d
  5600  0B75  0876               	movf	??_EEPROM_Write+1,w
  5601  0B76  00F1               	movwf	I2C_Master_Write@d+1
  5602  0B77  160A  118A  27F8  120A  158A  	fcall	_I2C_Master_Write
  5603  0B7C                     l3498:	
  5604                           ;I2C.c: 59: while(*data){
  5605                           
  5606  0B7C  0874               	movf	EEPROM_Write@data,w
  5607  0B7D  0084               	movwf	4
  5608  0B7E  1783               	bsf	3,7	;select IRP bank2
  5609  0B7F  0800               	movf	0,w
  5610  0B80  1903               	btfsc	3,2
  5611  0B81  2B96               	goto	l3500
  5612                           
  5613                           ;I2C.c: 60: I2C_Master_Write(*data);
  5614  0B82  0874               	movf	EEPROM_Write@data,w
  5615  0B83  0084               	movwf	4
  5616  0B84  1783               	bsf	3,7	;select IRP bank2
  5617  0B85  0800               	movf	0,w
  5618  0B86  00F5               	movwf	??_EEPROM_Write
  5619  0B87  01F6               	clrf	??_EEPROM_Write+1
  5620  0B88  0875               	movf	??_EEPROM_Write,w
  5621  0B89  00F0               	movwf	I2C_Master_Write@d
  5622  0B8A  0876               	movf	??_EEPROM_Write+1,w
  5623  0B8B  00F1               	movwf	I2C_Master_Write@d+1
  5624  0B8C  160A  118A  27F8  120A  158A  	fcall	_I2C_Master_Write
  5625                           
  5626                           ;I2C.c: 61: ++data;
  5627  0B91  3001               	movlw	1
  5628  0B92  00F5               	movwf	??_EEPROM_Write
  5629  0B93  0875               	movf	??_EEPROM_Write,w
  5630  0B94  07F4               	addwf	EEPROM_Write@data,f
  5631  0B95  2B7C               	goto	l3498
  5632  0B96                     l3500:	
  5633                           
  5634                           ;I2C.c: 62: }
  5635                           ;I2C.c: 63: I2C_Master_Stop();
  5636  0B96  160A  118A  27F1  120A  158A  	fcall	_I2C_Master_Stop
  5637                           
  5638                           ;I2C.c: 64: _delay((unsigned long)((200)*(10000000/4000.0)));
  5639  0B9B  3003               	movlw	3
  5640  0B9C  00F7               	movwf	??_EEPROM_Write+2
  5641  0B9D  308A               	movlw	138
  5642  0B9E  00F6               	movwf	??_EEPROM_Write+1
  5643  0B9F  3055               	movlw	85
  5644  0BA0  00F5               	movwf	??_EEPROM_Write
  5645  0BA1                     u3697:	
  5646  0BA1  0BF5               	decfsz	??_EEPROM_Write,f
  5647  0BA2  2BA1               	goto	u3697
  5648  0BA3  0BF6               	decfsz	??_EEPROM_Write+1,f
  5649  0BA4  2BA1               	goto	u3697
  5650  0BA5  0BF7               	decfsz	??_EEPROM_Write+2,f
  5651  0BA6  2BA1               	goto	u3697
  5652  0BA7  2BA8               	nop2
  5653  0BA8  0008               	return
  5654  0BA9                     __end_of_EEPROM_Write:	
  5655                           
  5656                           	psect	text17
  5657  17F8                     __ptext17:	
  5658 ;; *************** function _I2C_Master_Write *****************
  5659 ;; Defined at:
  5660 ;;		line 34 in file "I2C.c"
  5661 ;; Parameters:    Size  Location     Type
  5662 ;;  d               2    0[COMMON] unsigned int 
  5663 ;; Auto vars:     Size  Location     Type
  5664 ;;		None
  5665 ;; Return value:  Size  Location     Type
  5666 ;;                  1    wreg      void 
  5667 ;; Registers used:
  5668 ;;		wreg, status,2, status,0, pclath, cstack
  5669 ;; Tracked objects:
  5670 ;;		On entry : 0/0
  5671 ;;		On exit  : 0/0
  5672 ;;		Unchanged: 0/0
  5673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5674 ;;      Params:         2       0       0       0       0
  5675 ;;      Locals:         0       0       0       0       0
  5676 ;;      Temps:          0       0       0       0       0
  5677 ;;      Totals:         2       0       0       0       0
  5678 ;;Total ram usage:        2 bytes
  5679 ;; Hardware stack levels used:    1
  5680 ;; Hardware stack levels required when called:    1
  5681 ;; This function calls:
  5682 ;;		_I2C_Master_Wait
  5683 ;; This function is called by:
  5684 ;;		_EEPROM_Write
  5685 ;;		_EEPROM_Read
  5686 ;; This function uses a non-reentrant model
  5687 ;;
  5688                           
  5689                           
  5690                           ;psect for function _I2C_Master_Write
  5691  17F8                     _I2C_Master_Write:	
  5692                           
  5693                           ;I2C.c: 35: I2C_Master_Wait();
  5694                           
  5695                           ;incstack = 0
  5696                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5697  17F8  120A  158A  2029   	fcall	_I2C_Master_Wait
  5698                           
  5699                           ;I2C.c: 36: SSPBUF = d;
  5700  17FB  0870               	movf	I2C_Master_Write@d,w
  5701  17FC  1283               	bcf	3,5	;RP0=0, select bank0
  5702  17FD  1303               	bcf	3,6	;RP1=0, select bank0
  5703  17FE  0093               	movwf	19	;volatile
  5704  17FF  0008               	return
  5705  1800                     __end_of_I2C_Master_Write:	
  5706                           
  5707                           	psect	text18
  5708  17F1                     __ptext18:	
  5709 ;; *************** function _I2C_Master_Stop *****************
  5710 ;; Defined at:
  5711 ;;		line 29 in file "I2C.c"
  5712 ;; Parameters:    Size  Location     Type
  5713 ;;		None
  5714 ;; Auto vars:     Size  Location     Type
  5715 ;;		None
  5716 ;; Return value:  Size  Location     Type
  5717 ;;                  1    wreg      void 
  5718 ;; Registers used:
  5719 ;;		wreg, status,2, status,0, pclath, cstack
  5720 ;; Tracked objects:
  5721 ;;		On entry : 0/0
  5722 ;;		On exit  : 0/0
  5723 ;;		Unchanged: 0/0
  5724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5725 ;;      Params:         0       0       0       0       0
  5726 ;;      Locals:         0       0       0       0       0
  5727 ;;      Temps:          0       0       0       0       0
  5728 ;;      Totals:         0       0       0       0       0
  5729 ;;Total ram usage:        0 bytes
  5730 ;; Hardware stack levels used:    1
  5731 ;; Hardware stack levels required when called:    1
  5732 ;; This function calls:
  5733 ;;		_I2C_Master_Wait
  5734 ;; This function is called by:
  5735 ;;		_EEPROM_Write
  5736 ;;		_EEPROM_Read
  5737 ;; This function uses a non-reentrant model
  5738 ;;
  5739                           
  5740                           
  5741                           ;psect for function _I2C_Master_Stop
  5742  17F1                     _I2C_Master_Stop:	
  5743                           
  5744                           ;I2C.c: 30: I2C_Master_Wait();
  5745                           
  5746                           ;incstack = 0
  5747                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5748  17F1  120A  158A  2029   	fcall	_I2C_Master_Wait
  5749                           
  5750                           ;I2C.c: 31: PEN = 1;
  5751  17F4  1683               	bsf	3,5	;RP0=1, select bank1
  5752  17F5  1303               	bcf	3,6	;RP1=0, select bank1
  5753  17F6  1511               	bsf	17,2	;volatile
  5754  17F7  0008               	return
  5755  17F8                     __end_of_I2C_Master_Stop:	
  5756                           
  5757                           	psect	text19
  5758  17EA                     __ptext19:	
  5759 ;; *************** function _I2C_Master_Start *****************
  5760 ;; Defined at:
  5761 ;;		line 19 in file "I2C.c"
  5762 ;; Parameters:    Size  Location     Type
  5763 ;;		None
  5764 ;; Auto vars:     Size  Location     Type
  5765 ;;		None
  5766 ;; Return value:  Size  Location     Type
  5767 ;;                  1    wreg      void 
  5768 ;; Registers used:
  5769 ;;		wreg, status,2, status,0, pclath, cstack
  5770 ;; Tracked objects:
  5771 ;;		On entry : 0/0
  5772 ;;		On exit  : 0/0
  5773 ;;		Unchanged: 0/0
  5774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5775 ;;      Params:         0       0       0       0       0
  5776 ;;      Locals:         0       0       0       0       0
  5777 ;;      Temps:          0       0       0       0       0
  5778 ;;      Totals:         0       0       0       0       0
  5779 ;;Total ram usage:        0 bytes
  5780 ;; Hardware stack levels used:    1
  5781 ;; Hardware stack levels required when called:    1
  5782 ;; This function calls:
  5783 ;;		_I2C_Master_Wait
  5784 ;; This function is called by:
  5785 ;;		_EEPROM_Write
  5786 ;;		_EEPROM_Read
  5787 ;; This function uses a non-reentrant model
  5788 ;;
  5789                           
  5790                           
  5791                           ;psect for function _I2C_Master_Start
  5792  17EA                     _I2C_Master_Start:	
  5793                           
  5794                           ;I2C.c: 20: I2C_Master_Wait();
  5795                           
  5796                           ;incstack = 0
  5797                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5798  17EA  120A  158A  2029   	fcall	_I2C_Master_Wait
  5799                           
  5800                           ;I2C.c: 21: SEN = 1;
  5801  17ED  1683               	bsf	3,5	;RP0=1, select bank1
  5802  17EE  1303               	bcf	3,6	;RP1=0, select bank1
  5803  17EF  1411               	bsf	17,0	;volatile
  5804  17F0  0008               	return
  5805  17F1                     __end_of_I2C_Master_Start:	
  5806                           
  5807                           	psect	text20
  5808  0829                     __ptext20:	
  5809 ;; *************** function _I2C_Master_Wait *****************
  5810 ;; Defined at:
  5811 ;;		line 15 in file "I2C.c"
  5812 ;; Parameters:    Size  Location     Type
  5813 ;;		None
  5814 ;; Auto vars:     Size  Location     Type
  5815 ;;		None
  5816 ;; Return value:  Size  Location     Type
  5817 ;;                  1    wreg      void 
  5818 ;; Registers used:
  5819 ;;		wreg, status,2
  5820 ;; Tracked objects:
  5821 ;;		On entry : 0/0
  5822 ;;		On exit  : 0/0
  5823 ;;		Unchanged: 0/0
  5824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5825 ;;      Params:         0       0       0       0       0
  5826 ;;      Locals:         0       0       0       0       0
  5827 ;;      Temps:          0       0       0       0       0
  5828 ;;      Totals:         0       0       0       0       0
  5829 ;;Total ram usage:        0 bytes
  5830 ;; Hardware stack levels used:    1
  5831 ;; This function calls:
  5832 ;;		Nothing
  5833 ;; This function is called by:
  5834 ;;		_I2C_Master_Start
  5835 ;;		_I2C_Master_Stop
  5836 ;;		_I2C_Master_Write
  5837 ;;		_I2C_Master_RepeatedStart
  5838 ;;		_I2C_Master_Read
  5839 ;; This function uses a non-reentrant model
  5840 ;;
  5841                           
  5842                           
  5843                           ;psect for function _I2C_Master_Wait
  5844  0829                     _I2C_Master_Wait:	
  5845  0829                     l498:	
  5846                           ;I2C.c: 16: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5847                           
  5848                           ;incstack = 0
  5849                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5850                           
  5851  0829  1683               	bsf	3,5	;RP0=1, select bank1
  5852  082A  1303               	bcf	3,6	;RP1=0, select bank1
  5853  082B  1914               	btfsc	20,2	;volatile
  5854  082C  2829               	goto	l498
  5855  082D  0811               	movf	17,w	;volatile
  5856  082E  391F               	andlw	31
  5857  082F  1903               	btfsc	3,2
  5858  0830  0008               	return
  5859  0831  2829               	goto	l498
  5860  0832                     __end_of_I2C_Master_Wait:	
  5861                           
  5862                           	psect	text21
  5863  08FB                     __ptext21:	
  5864 ;; *************** function _CWTX *****************
  5865 ;; Defined at:
  5866 ;;		line 284 in file "FMCW.c"
  5867 ;; Parameters:    Size  Location     Type
  5868 ;;  Nref            2   60[BANK0 ] int 
  5869 ;;  Nprg            2   62[BANK0 ] PTR int 
  5870 ;;		 -> RAM(512), main@CWTX_Nprg(10), CWTX_Nprg(10), 
  5871 ;; Auto vars:     Size  Location     Type
  5872 ;;  cwtx            2   64[BANK0 ] int 
  5873 ;; Return value:  Size  Location     Type
  5874 ;;                  1    wreg      void 
  5875 ;; Registers used:
  5876 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5877 ;; Tracked objects:
  5878 ;;		On entry : 0/0
  5879 ;;		On exit  : 0/0
  5880 ;;		Unchanged: 0/0
  5881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5882 ;;      Params:         0       4       0       0       0
  5883 ;;      Locals:         0       2       0       0       0
  5884 ;;      Temps:          0       0       0       0       0
  5885 ;;      Totals:         0       6       0       0       0
  5886 ;;Total ram usage:        6 bytes
  5887 ;; Hardware stack levels used:    1
  5888 ;; Hardware stack levels required when called:    3
  5889 ;; This function calls:
  5890 ;;		_OPINIT
  5891 ;;		_OUTFQ
  5892 ;;		_RFDOUT
  5893 ;; This function is called by:
  5894 ;;		_main
  5895 ;;		_SetPLL
  5896 ;; This function uses a non-reentrant model
  5897 ;;
  5898                           
  5899                           
  5900                           ;psect for function _CWTX
  5901  08FB                     _CWTX:	
  5902                           
  5903                           ;FMCW.c: 285: int cwtx = 2;
  5904                           
  5905                           ;incstack = 0
  5906                           ; Regs used in _CWTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5907  08FB  3002               	movlw	2
  5908  08FC  1283               	bcf	3,5	;RP0=0, select bank0
  5909  08FD  1303               	bcf	3,6	;RP1=0, select bank0
  5910  08FE  00E0               	movwf	CWTX@cwtx
  5911  08FF  3000               	movlw	0
  5912  0900  00E1               	movwf	CWTX@cwtx+1
  5913                           
  5914                           ;FMCW.c: 286: OPINIT(cwtx);
  5915  0901  0861               	movf	CWTX@cwtx+1,w
  5916  0902  00F5               	movwf	OPINIT@fmcwtxrx+1
  5917  0903  0860               	movf	CWTX@cwtx,w
  5918  0904  00F4               	movwf	OPINIT@fmcwtxrx
  5919  0905  120A  158A  24CD  120A  158A  	fcall	_OPINIT
  5920                           
  5921                           ;FMCW.c: 287: RFDOUT(cwtx, Nref);
  5922  090A  1283               	bcf	3,5	;RP0=0, select bank0
  5923  090B  1303               	bcf	3,6	;RP1=0, select bank0
  5924  090C  0861               	movf	CWTX@cwtx+1,w
  5925  090D  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5926  090E  0860               	movf	CWTX@cwtx,w
  5927  090F  00F9               	movwf	RFDOUT@fmcwtxrx
  5928  0910  085D               	movf	CWTX@Nref+1,w
  5929  0911  00FC               	movwf	RFDOUT@Nref+1
  5930  0912  085C               	movf	CWTX@Nref,w
  5931  0913  00FB               	movwf	RFDOUT@Nref
  5932  0914  120A  158A  254A  120A  158A  	fcall	_RFDOUT
  5933                           
  5934                           ;FMCW.c: 288: OUTFQ(cwtx, Nprg);
  5935  0919  1283               	bcf	3,5	;RP0=0, select bank0
  5936  091A  1303               	bcf	3,6	;RP1=0, select bank0
  5937  091B  0861               	movf	CWTX@cwtx+1,w
  5938  091C  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5939  091D  0860               	movf	CWTX@cwtx,w
  5940  091E  00F9               	movwf	OUTFQ@fmcwtxrx
  5941  091F  085E               	movf	CWTX@Nprg,w
  5942  0920  00FB               	movwf	OUTFQ@Nprg
  5943  0921  085F               	movf	CWTX@Nprg+1,w
  5944  0922  00FC               	movwf	OUTFQ@Nprg+1
  5945  0923  120A  118A  20AC   	fcall	_OUTFQ
  5946  0926  0008               	return
  5947  0927                     __end_of_CWTX:	
  5948                           
  5949                           	psect	text22
  5950  0D4A                     __ptext22:	
  5951 ;; *************** function _RFDOUT *****************
  5952 ;; Defined at:
  5953 ;;		line 200 in file "FMCW.c"
  5954 ;; Parameters:    Size  Location     Type
  5955 ;;  fmcwtxrx        2    9[COMMON] int 
  5956 ;;  Nref            2   11[COMMON] int 
  5957 ;; Auto vars:     Size  Location     Type
  5958 ;;  i               2   31[BANK0 ] int 
  5959 ;;  i               2   27[BANK0 ] int 
  5960 ;;  i               2   29[BANK0 ] int 
  5961 ;;  Nref_b         24    3[BANK0 ] int [12]
  5962 ;; Return value:  Size  Location     Type
  5963 ;;                  1    wreg      void 
  5964 ;; Registers used:
  5965 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5966 ;; Tracked objects:
  5967 ;;		On entry : 0/0
  5968 ;;		On exit  : 0/0
  5969 ;;		Unchanged: 0/0
  5970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5971 ;;      Params:         4       0       0       0       0
  5972 ;;      Locals:         0      30       0       0       0
  5973 ;;      Temps:          0       3       0       0       0
  5974 ;;      Totals:         4      33       0       0       0
  5975 ;;Total ram usage:       37 bytes
  5976 ;; Hardware stack levels used:    1
  5977 ;; Hardware stack levels required when called:    2
  5978 ;; This function calls:
  5979 ;;		_H_OUT
  5980 ;;		_L_OUT
  5981 ;;		_STBOUT
  5982 ;;		___awdiv
  5983 ;; This function is called by:
  5984 ;;		_FMTX
  5985 ;;		_CWTX
  5986 ;;		_FMRX
  5987 ;; This function uses a non-reentrant model
  5988 ;;
  5989                           
  5990                           
  5991                           ;psect for function _RFDOUT
  5992  0D4A                     _RFDOUT:	
  5993                           
  5994                           ;FMCW.c: 201: int Nref_b[12];
  5995                           ;FMCW.c: 203: for(int i=0; i<12; i++){
  5996                           
  5997                           ;incstack = 0
  5998                           ; Regs used in _RFDOUT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5999  0D4A  1283               	bcf	3,5	;RP0=0, select bank0
  6000  0D4B  1303               	bcf	3,6	;RP1=0, select bank0
  6001  0D4C  01BD               	clrf	RFDOUT@i
  6002  0D4D  01BE               	clrf	RFDOUT@i+1
  6003  0D4E  083E               	movf	RFDOUT@i+1,w
  6004  0D4F  3A80               	xorlw	128
  6005  0D50  00FF               	movwf	127
  6006  0D51  3080               	movlw	128
  6007  0D52  027F               	subwf	127,w
  6008  0D53  1D03               	skipz
  6009  0D54  2D57               	goto	u2915
  6010  0D55  300C               	movlw	12
  6011  0D56  023D               	subwf	RFDOUT@i,w
  6012  0D57                     u2915:	
  6013  0D57  1803               	btfsc	3,0
  6014  0D58  2D75               	goto	l3250
  6015  0D59                     l3244:	
  6016                           
  6017                           ;FMCW.c: 204: Nref_b[i] = 0;
  6018  0D59  1283               	bcf	3,5	;RP0=0, select bank0
  6019  0D5A  1303               	bcf	3,6	;RP1=0, select bank0
  6020  0D5B  083D               	movf	RFDOUT@i,w
  6021  0D5C  00A0               	movwf	??_RFDOUT
  6022  0D5D  0720               	addwf	??_RFDOUT,w
  6023  0D5E  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6024  0D5F  0084               	movwf	4
  6025  0D60  1383               	bcf	3,7	;select IRP bank0
  6026  0D61  0180               	clrf	0
  6027  0D62  0A84               	incf	4,f
  6028  0D63  0180               	clrf	0
  6029  0D64  3001               	movlw	1
  6030  0D65  07BD               	addwf	RFDOUT@i,f
  6031  0D66  1803               	skipnc
  6032  0D67  0ABE               	incf	RFDOUT@i+1,f
  6033  0D68  3000               	movlw	0
  6034  0D69  07BE               	addwf	RFDOUT@i+1,f
  6035  0D6A  083E               	movf	RFDOUT@i+1,w
  6036  0D6B  3A80               	xorlw	128
  6037  0D6C  00FF               	movwf	127
  6038  0D6D  3080               	movlw	128
  6039  0D6E  027F               	subwf	127,w
  6040  0D6F  1D03               	skipz
  6041  0D70  2D73               	goto	u2925
  6042  0D71  300C               	movlw	12
  6043  0D72  023D               	subwf	RFDOUT@i,w
  6044  0D73                     u2925:	
  6045  0D73  1C03               	skipc
  6046  0D74  2D59               	goto	l3244
  6047  0D75                     l3250:	
  6048                           
  6049                           ;FMCW.c: 205: }
  6050                           ;FMCW.c: 208: for(int i=0; Nref>0; i++){
  6051  0D75  1283               	bcf	3,5	;RP0=0, select bank0
  6052  0D76  1303               	bcf	3,6	;RP1=0, select bank0
  6053  0D77  01BB               	clrf	RFDOUT@i_483
  6054  0D78  01BC               	clrf	RFDOUT@i_483+1
  6055  0D79  087C               	movf	RFDOUT@Nref+1,w
  6056  0D7A  3A80               	xorlw	128
  6057  0D7B  00FF               	movwf	127
  6058  0D7C  3080               	movlw	128
  6059  0D7D  027F               	subwf	127,w
  6060  0D7E  1D03               	skipz
  6061  0D7F  2D82               	goto	u2935
  6062  0D80  3001               	movlw	1
  6063  0D81  027B               	subwf	RFDOUT@Nref,w
  6064  0D82                     u2935:	
  6065  0D82  1C03               	btfss	3,0
  6066  0D83  2DBB               	goto	l3264
  6067  0D84                     l3256:	
  6068                           
  6069                           ;FMCW.c: 209: Nref_b[i] = Nref % 2;
  6070  0D84  3001               	movlw	1
  6071  0D85  057B               	andwf	RFDOUT@Nref,w
  6072  0D86  1283               	bcf	3,5	;RP0=0, select bank0
  6073  0D87  1303               	bcf	3,6	;RP1=0, select bank0
  6074  0D88  00A0               	movwf	??_RFDOUT
  6075  0D89  3000               	movlw	0
  6076  0D8A  057C               	andwf	RFDOUT@Nref+1,w
  6077  0D8B  00A1               	movwf	??_RFDOUT+1
  6078  0D8C  083B               	movf	RFDOUT@i_483,w
  6079  0D8D  00A2               	movwf	??_RFDOUT+2
  6080  0D8E  0722               	addwf	??_RFDOUT+2,w
  6081  0D8F  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6082  0D90  0084               	movwf	4
  6083  0D91  0820               	movf	??_RFDOUT,w
  6084  0D92  1383               	bcf	3,7	;select IRP bank0
  6085  0D93  0080               	movwf	0
  6086  0D94  0A84               	incf	4,f
  6087  0D95  0821               	movf	??_RFDOUT+1,w
  6088  0D96  0080               	movwf	0
  6089                           
  6090                           ;FMCW.c: 210: Nref = Nref / 2;
  6091  0D97  3002               	movlw	2
  6092  0D98  00F0               	movwf	___awdiv@divisor
  6093  0D99  3000               	movlw	0
  6094  0D9A  00F1               	movwf	___awdiv@divisor+1
  6095  0D9B  087C               	movf	RFDOUT@Nref+1,w
  6096  0D9C  00F3               	movwf	___awdiv@dividend+1
  6097  0D9D  087B               	movf	RFDOUT@Nref,w
  6098  0D9E  00F2               	movwf	___awdiv@dividend
  6099  0D9F  120A  158A  22F3  120A  158A  	fcall	___awdiv
  6100  0DA4  0871               	movf	?___awdiv+1,w
  6101  0DA5  00FC               	movwf	RFDOUT@Nref+1
  6102  0DA6  0870               	movf	?___awdiv,w
  6103  0DA7  00FB               	movwf	RFDOUT@Nref
  6104  0DA8  3001               	movlw	1
  6105  0DA9  1283               	bcf	3,5	;RP0=0, select bank0
  6106  0DAA  1303               	bcf	3,6	;RP1=0, select bank0
  6107  0DAB  07BB               	addwf	RFDOUT@i_483,f
  6108  0DAC  1803               	skipnc
  6109  0DAD  0ABC               	incf	RFDOUT@i_483+1,f
  6110  0DAE  3000               	movlw	0
  6111  0DAF  07BC               	addwf	RFDOUT@i_483+1,f
  6112  0DB0  087C               	movf	RFDOUT@Nref+1,w
  6113  0DB1  3A80               	xorlw	128
  6114  0DB2  00FF               	movwf	127
  6115  0DB3  3080               	movlw	128
  6116  0DB4  027F               	subwf	127,w
  6117  0DB5  1D03               	skipz
  6118  0DB6  2DB9               	goto	u2945
  6119  0DB7  3001               	movlw	1
  6120  0DB8  027B               	subwf	RFDOUT@Nref,w
  6121  0DB9                     u2945:	
  6122  0DB9  1803               	skipnc
  6123  0DBA  2D84               	goto	l3256
  6124  0DBB                     l3264:	
  6125                           
  6126                           ;FMCW.c: 211: }
  6127                           ;FMCW.c: 214: for (int i=0; i<12; i++)
  6128  0DBB  1283               	bcf	3,5	;RP0=0, select bank0
  6129  0DBC  1303               	bcf	3,6	;RP1=0, select bank0
  6130  0DBD  01BF               	clrf	RFDOUT@i_484
  6131  0DBE  01C0               	clrf	RFDOUT@i_484+1
  6132  0DBF  0840               	movf	RFDOUT@i_484+1,w
  6133  0DC0  3A80               	xorlw	128
  6134  0DC1  00FF               	movwf	127
  6135  0DC2  3080               	movlw	128
  6136  0DC3  027F               	subwf	127,w
  6137  0DC4  1D03               	skipz
  6138  0DC5  2DC8               	goto	u2955
  6139  0DC6  300C               	movlw	12
  6140  0DC7  023F               	subwf	RFDOUT@i_484,w
  6141  0DC8                     u2955:	
  6142  0DC8  1803               	btfsc	3,0
  6143  0DC9  2E11               	goto	l3282
  6144  0DCA                     l3270:	
  6145                           
  6146                           ;FMCW.c: 215: {
  6147                           ;FMCW.c: 216: if(Nref_b[i] == 0)
  6148  0DCA  1283               	bcf	3,5	;RP0=0, select bank0
  6149  0DCB  1303               	bcf	3,6	;RP1=0, select bank0
  6150  0DCC  083F               	movf	RFDOUT@i_484,w
  6151  0DCD  00A0               	movwf	??_RFDOUT
  6152  0DCE  0720               	addwf	??_RFDOUT,w
  6153  0DCF  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6154  0DD0  0084               	movwf	4
  6155  0DD1  1383               	bcf	3,7	;select IRP bank0
  6156  0DD2  0800               	movf	0,w
  6157  0DD3  00A1               	movwf	??_RFDOUT+1
  6158  0DD4  0A84               	incf	4,f
  6159  0DD5  0800               	movf	0,w
  6160  0DD6  00A2               	movwf	??_RFDOUT+2
  6161  0DD7  0821               	movf	??_RFDOUT+1,w
  6162  0DD8  0422               	iorwf	??_RFDOUT+2,w
  6163  0DD9  1D03               	btfss	3,2
  6164  0DDA  2DE4               	goto	l3274
  6165                           
  6166                           ;FMCW.c: 217: {
  6167                           ;FMCW.c: 218: L_OUT(fmcwtxrx);
  6168  0DDB  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6169  0DDC  00F3               	movwf	L_OUT@fmcwtxrx+1
  6170  0DDD  0879               	movf	RFDOUT@fmcwtxrx,w
  6171  0DDE  00F2               	movwf	L_OUT@fmcwtxrx
  6172  0DDF  120A  158A  2261  120A  158A  	fcall	_L_OUT
  6173  0DE4                     l3274:	
  6174                           
  6175                           ;FMCW.c: 219: }
  6176                           ;FMCW.c: 220: if(Nref_b[i] == 1)
  6177  0DE4  1283               	bcf	3,5	;RP0=0, select bank0
  6178  0DE5  1303               	bcf	3,6	;RP1=0, select bank0
  6179  0DE6  083F               	movf	RFDOUT@i_484,w
  6180  0DE7  00A0               	movwf	??_RFDOUT
  6181  0DE8  0720               	addwf	??_RFDOUT,w
  6182  0DE9  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6183  0DEA  0084               	movwf	4
  6184  0DEB  1383               	bcf	3,7	;select IRP bank0
  6185  0DEC  0800               	movf	0,w
  6186  0DED  00A1               	movwf	??_RFDOUT+1
  6187  0DEE  0A84               	incf	4,f
  6188  0DEF  0800               	movf	0,w
  6189  0DF0  00A2               	movwf	??_RFDOUT+2
  6190  0DF1  0321               	decf	??_RFDOUT+1,w
  6191  0DF2  0422               	iorwf	??_RFDOUT+2,w
  6192  0DF3  1D03               	btfss	3,2
  6193  0DF4  2DFE               	goto	l3278
  6194                           
  6195                           ;FMCW.c: 221: {
  6196                           ;FMCW.c: 222: H_OUT(fmcwtxrx);
  6197  0DF5  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6198  0DF6  00F3               	movwf	H_OUT@fmcwtxrx+1
  6199  0DF7  0879               	movf	RFDOUT@fmcwtxrx,w
  6200  0DF8  00F2               	movwf	H_OUT@fmcwtxrx
  6201  0DF9  120A  158A  221B  120A  158A  	fcall	_H_OUT
  6202  0DFE                     l3278:	
  6203  0DFE  3001               	movlw	1
  6204  0DFF  1283               	bcf	3,5	;RP0=0, select bank0
  6205  0E00  1303               	bcf	3,6	;RP1=0, select bank0
  6206  0E01  07BF               	addwf	RFDOUT@i_484,f
  6207  0E02  1803               	skipnc
  6208  0E03  0AC0               	incf	RFDOUT@i_484+1,f
  6209  0E04  3000               	movlw	0
  6210  0E05  07C0               	addwf	RFDOUT@i_484+1,f
  6211  0E06  0840               	movf	RFDOUT@i_484+1,w
  6212  0E07  3A80               	xorlw	128
  6213  0E08  00FF               	movwf	127
  6214  0E09  3080               	movlw	128
  6215  0E0A  027F               	subwf	127,w
  6216  0E0B  1D03               	skipz
  6217  0E0C  2E0F               	goto	u2985
  6218  0E0D  300C               	movlw	12
  6219  0E0E  023F               	subwf	RFDOUT@i_484,w
  6220  0E0F                     u2985:	
  6221  0E0F  1C03               	skipc
  6222  0E10  2DCA               	goto	l3270
  6223  0E11                     l3282:	
  6224                           
  6225                           ;FMCW.c: 223: }
  6226                           ;FMCW.c: 224: }
  6227                           ;FMCW.c: 227: H_OUT(fmcwtxrx);
  6228  0E11  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6229  0E12  00F3               	movwf	H_OUT@fmcwtxrx+1
  6230  0E13  0879               	movf	RFDOUT@fmcwtxrx,w
  6231  0E14  00F2               	movwf	H_OUT@fmcwtxrx
  6232  0E15  120A  158A  221B  120A  158A  	fcall	_H_OUT
  6233                           
  6234                           ;FMCW.c: 228: H_OUT(fmcwtxrx);
  6235  0E1A  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6236  0E1B  00F3               	movwf	H_OUT@fmcwtxrx+1
  6237  0E1C  0879               	movf	RFDOUT@fmcwtxrx,w
  6238  0E1D  00F2               	movwf	H_OUT@fmcwtxrx
  6239  0E1E  120A  158A  221B  120A  158A  	fcall	_H_OUT
  6240                           
  6241                           ;FMCW.c: 231: STBOUT(fmcwtxrx);
  6242  0E23  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6243  0E24  00F3               	movwf	STBOUT@fmcwtxrx+1
  6244  0E25  0879               	movf	RFDOUT@fmcwtxrx,w
  6245  0E26  00F2               	movwf	STBOUT@fmcwtxrx
  6246  0E27  120A  158A  217F   	fcall	_STBOUT
  6247  0E2A  0008               	return
  6248  0E2B                     __end_of_RFDOUT:	
  6249                           
  6250                           	psect	text23
  6251  00AC                     __ptext23:	
  6252 ;; *************** function _OUTFQ *****************
  6253 ;; Defined at:
  6254 ;;		line 136 in file "FMCW.c"
  6255 ;; Parameters:    Size  Location     Type
  6256 ;;  fmcwtxrx        2    9[COMMON] int 
  6257 ;;  Nprg            2   11[COMMON] PTR int 
  6258 ;;		 -> RAM(512), main@FMRX_Nprg(10), main@CWTX_Nprg(10), main@FMTX_Nprg(10), 
  6259 ;;		 -> FMRX_Nprg(10), CWTX_Nprg(10), FMTX_Nprg(10), 
  6260 ;; Auto vars:     Size  Location     Type
  6261 ;;  j               2   58[BANK0 ] int 
  6262 ;;  i               2   56[BANK0 ] int 
  6263 ;;  i               2   50[BANK0 ] int 
  6264 ;;  i               2   54[BANK0 ] int 
  6265 ;;  Nprg_b         34   16[BANK0 ] int [17]
  6266 ;;  count           2   52[BANK0 ] int 
  6267 ;; Return value:  Size  Location     Type
  6268 ;;                  1    wreg      void 
  6269 ;; Registers used:
  6270 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6271 ;; Tracked objects:
  6272 ;;		On entry : 0/0
  6273 ;;		On exit  : 0/0
  6274 ;;		Unchanged: 0/0
  6275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6276 ;;      Params:         4       0       0       0       0
  6277 ;;      Locals:         0      44       0       0       0
  6278 ;;      Temps:          0      16       0       0       0
  6279 ;;      Totals:         4      60       0       0       0
  6280 ;;Total ram usage:       64 bytes
  6281 ;; Hardware stack levels used:    1
  6282 ;; Hardware stack levels required when called:    2
  6283 ;; This function calls:
  6284 ;;		_H_OUT
  6285 ;;		_L_OUT
  6286 ;;		_STBOUT
  6287 ;;		___awdiv
  6288 ;; This function is called by:
  6289 ;;		_FMTX
  6290 ;;		_CWTX
  6291 ;;		_FMRX
  6292 ;; This function uses a non-reentrant model
  6293 ;;
  6294                           
  6295                           
  6296                           ;psect for function _OUTFQ
  6297  00AC                     _OUTFQ:	
  6298                           
  6299                           ;FMCW.c: 137: int count = 0;
  6300                           
  6301                           ;incstack = 0
  6302                           ; Regs used in _OUTFQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6303  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  6304  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  6305  00AE  01D4               	clrf	OUTFQ@count
  6306  00AF  01D5               	clrf	OUTFQ@count+1
  6307                           
  6308                           ;FMCW.c: 138: int Nprg_b[17];
  6309                           ;FMCW.c: 140: for(int i=0; i<17; i++){
  6310  00B0  01D6               	clrf	OUTFQ@i
  6311  00B1  01D7               	clrf	OUTFQ@i+1
  6312  00B2  0857               	movf	OUTFQ@i+1,w
  6313  00B3  3A80               	xorlw	128
  6314  00B4  00FF               	movwf	127
  6315  00B5  3080               	movlw	128
  6316  00B6  027F               	subwf	127,w
  6317  00B7  1D03               	skipz
  6318  00B8  28BB               	goto	u2775
  6319  00B9  3011               	movlw	17
  6320  00BA  0256               	subwf	OUTFQ@i,w
  6321  00BB                     u2775:	
  6322  00BB  1803               	btfsc	3,0
  6323  00BC  28D9               	goto	l3172
  6324  00BD                     l3166:	
  6325                           
  6326                           ;FMCW.c: 141: Nprg_b[i] = 0;
  6327  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  6328  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  6329  00BF  0856               	movf	OUTFQ@i,w
  6330  00C0  00A0               	movwf	??_OUTFQ
  6331  00C1  0720               	addwf	??_OUTFQ,w
  6332  00C2  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6333  00C3  0084               	movwf	4
  6334  00C4  1383               	bcf	3,7	;select IRP bank0
  6335  00C5  0180               	clrf	0
  6336  00C6  0A84               	incf	4,f
  6337  00C7  0180               	clrf	0
  6338  00C8  3001               	movlw	1
  6339  00C9  07D6               	addwf	OUTFQ@i,f
  6340  00CA  1803               	skipnc
  6341  00CB  0AD7               	incf	OUTFQ@i+1,f
  6342  00CC  3000               	movlw	0
  6343  00CD  07D7               	addwf	OUTFQ@i+1,f
  6344  00CE  0857               	movf	OUTFQ@i+1,w
  6345  00CF  3A80               	xorlw	128
  6346  00D0  00FF               	movwf	127
  6347  00D1  3080               	movlw	128
  6348  00D2  027F               	subwf	127,w
  6349  00D3  1D03               	skipz
  6350  00D4  28D7               	goto	u2785
  6351  00D5  3011               	movlw	17
  6352  00D6  0256               	subwf	OUTFQ@i,w
  6353  00D7                     u2785:	
  6354  00D7  1C03               	skipc
  6355  00D8  28BD               	goto	l3166
  6356  00D9                     l3172:	
  6357                           
  6358                           ;FMCW.c: 142: }
  6359                           ;FMCW.c: 145: for(int i = 0; i < 17; i++){
  6360  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  6361  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  6362  00DB  01D2               	clrf	OUTFQ@i_472
  6363  00DC  01D3               	clrf	OUTFQ@i_472+1
  6364  00DD  0853               	movf	OUTFQ@i_472+1,w
  6365  00DE  3A80               	xorlw	128
  6366  00DF  00FF               	movwf	127
  6367  00E0  3080               	movlw	128
  6368  00E1  027F               	subwf	127,w
  6369  00E2  1D03               	skipz
  6370  00E3  28E6               	goto	u2795
  6371  00E4  3011               	movlw	17
  6372  00E5  0252               	subwf	OUTFQ@i_472,w
  6373  00E6                     u2795:	
  6374  00E6  1803               	btfsc	3,0
  6375  00E7  2AB7               	goto	l3218
  6376  00E8                     l3178:	
  6377                           
  6378                           ;FMCW.c: 146: for(int j = 0; j<5; j++){
  6379  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  6380  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  6381  00EA  01DA               	clrf	OUTFQ@j
  6382  00EB  01DB               	clrf	OUTFQ@j+1
  6383  00EC  085B               	movf	OUTFQ@j+1,w
  6384  00ED  3A80               	xorlw	128
  6385  00EE  00FF               	movwf	127
  6386  00EF  3080               	movlw	128
  6387  00F0  027F               	subwf	127,w
  6388  00F1  1D03               	skipz
  6389  00F2  28F5               	goto	u2805
  6390  00F3  3005               	movlw	5
  6391  00F4  025A               	subwf	OUTFQ@j,w
  6392  00F5                     u2805:	
  6393  00F5  1803               	btfsc	3,0
  6394  00F6  2AA4               	goto	l3214
  6395  00F7                     l3184:	
  6396                           
  6397                           ;FMCW.c: 147: if(Nprg[j] % 2 == 0) {
  6398  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  6399  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  6400  00F9  085B               	movf	OUTFQ@j+1,w
  6401  00FA  00A1               	movwf	??_OUTFQ+1
  6402  00FB  085A               	movf	OUTFQ@j,w
  6403  00FC  00A0               	movwf	??_OUTFQ
  6404  00FD  1003               	clrc
  6405  00FE  0DA0               	rlf	??_OUTFQ,f
  6406  00FF  0DA1               	rlf	??_OUTFQ+1,f
  6407  0100  0820               	movf	??_OUTFQ,w
  6408  0101  077B               	addwf	OUTFQ@Nprg,w
  6409  0102  00A2               	movwf	??_OUTFQ+2
  6410  0103  0821               	movf	??_OUTFQ+1,w
  6411  0104  1803               	skipnc
  6412  0105  0A21               	incf	??_OUTFQ+1,w
  6413  0106  077C               	addwf	OUTFQ@Nprg+1,w
  6414  0107  00A3               	movwf	??_OUTFQ+3
  6415  0108  0822               	movf	??_OUTFQ+2,w
  6416  0109  0084               	movwf	4
  6417  010A  1783               	bsf	3,7
  6418  010B  1C23               	btfss	??_OUTFQ+3,0
  6419  010C  1383               	bcf	3,7
  6420  010D  0800               	movf	0,w
  6421  010E  00A4               	movwf	??_OUTFQ+4
  6422  010F  0A84               	incf	4,f
  6423  0110  0800               	movf	0,w
  6424  0111  00A5               	movwf	??_OUTFQ+5
  6425  0112  1824               	btfsc	??_OUTFQ+4,0
  6426  0113  299D               	goto	l3196
  6427                           
  6428                           ;FMCW.c: 148: if(j == 4){
  6429  0114  3004               	movlw	4
  6430  0115  065A               	xorwf	OUTFQ@j,w
  6431  0116  045B               	iorwf	OUTFQ@j+1,w
  6432  0117  1D03               	btfss	3,2
  6433  0118  2960               	goto	l3194
  6434                           
  6435                           ;FMCW.c: 149: Nprg[j] = Nprg[j] / 2;
  6436  0119  3002               	movlw	2
  6437  011A  00F0               	movwf	___awdiv@divisor
  6438  011B  3000               	movlw	0
  6439  011C  00F1               	movwf	___awdiv@divisor+1
  6440  011D  085B               	movf	OUTFQ@j+1,w
  6441  011E  00A1               	movwf	??_OUTFQ+1
  6442  011F  085A               	movf	OUTFQ@j,w
  6443  0120  00A0               	movwf	??_OUTFQ
  6444  0121  1003               	clrc
  6445  0122  0DA0               	rlf	??_OUTFQ,f
  6446  0123  0DA1               	rlf	??_OUTFQ+1,f
  6447  0124  0820               	movf	??_OUTFQ,w
  6448  0125  077B               	addwf	OUTFQ@Nprg,w
  6449  0126  00A2               	movwf	??_OUTFQ+2
  6450  0127  0821               	movf	??_OUTFQ+1,w
  6451  0128  1803               	skipnc
  6452  0129  0A21               	incf	??_OUTFQ+1,w
  6453  012A  077C               	addwf	OUTFQ@Nprg+1,w
  6454  012B  00A3               	movwf	??_OUTFQ+3
  6455  012C  0822               	movf	??_OUTFQ+2,w
  6456  012D  0084               	movwf	4
  6457  012E  1783               	bsf	3,7
  6458  012F  1C23               	btfss	??_OUTFQ+3,0
  6459  0130  1383               	bcf	3,7
  6460  0131  0800               	movf	0,w
  6461  0132  00F2               	movwf	___awdiv@dividend
  6462  0133  0A84               	incf	4,f
  6463  0134  0800               	movf	0,w
  6464  0135  00F3               	movwf	___awdiv@dividend+1
  6465  0136  120A  158A  22F3  120A  118A  	fcall	___awdiv
  6466  013B  1283               	bcf	3,5	;RP0=0, select bank0
  6467  013C  1303               	bcf	3,6	;RP1=0, select bank0
  6468  013D  085B               	movf	OUTFQ@j+1,w
  6469  013E  00A5               	movwf	??_OUTFQ+5
  6470  013F  085A               	movf	OUTFQ@j,w
  6471  0140  00A4               	movwf	??_OUTFQ+4
  6472  0141  1003               	clrc
  6473  0142  0DA4               	rlf	??_OUTFQ+4,f
  6474  0143  0DA5               	rlf	??_OUTFQ+5,f
  6475  0144  0824               	movf	??_OUTFQ+4,w
  6476  0145  077B               	addwf	OUTFQ@Nprg,w
  6477  0146  00A6               	movwf	??_OUTFQ+6
  6478  0147  0825               	movf	??_OUTFQ+5,w
  6479  0148  1803               	skipnc
  6480  0149  0A25               	incf	??_OUTFQ+5,w
  6481  014A  077C               	addwf	OUTFQ@Nprg+1,w
  6482  014B  00A7               	movwf	??_OUTFQ+7
  6483  014C  0826               	movf	??_OUTFQ+6,w
  6484  014D  0084               	movwf	4
  6485  014E  1783               	bsf	3,7
  6486  014F  1C27               	btfss	??_OUTFQ+7,0
  6487  0150  1383               	bcf	3,7
  6488  0151  0870               	movf	?___awdiv,w
  6489  0152  0080               	movwf	0
  6490  0153  0A84               	incf	4,f
  6491  0154  0871               	movf	?___awdiv+1,w
  6492  0155  0080               	movwf	0
  6493                           
  6494                           ;FMCW.c: 150: Nprg_b[count] = 0;
  6495  0156  0854               	movf	OUTFQ@count,w
  6496  0157  00A0               	movwf	??_OUTFQ
  6497  0158  0720               	addwf	??_OUTFQ,w
  6498  0159  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6499  015A  0084               	movwf	4
  6500  015B  1383               	bcf	3,7	;select IRP bank0
  6501  015C  0180               	clrf	0
  6502  015D  0A84               	incf	4,f
  6503  015E  0180               	clrf	0
  6504  015F  2A05               	goto	l3204
  6505  0160                     l3194:	
  6506                           ;FMCW.c: 152: }
  6507                           
  6508                           ;FMCW.c: 151: count++;
  6509                           
  6510                           
  6511                           ;FMCW.c: 153: else{
  6512                           ;FMCW.c: 154: Nprg[j] = Nprg[j] / 2;
  6513  0160  3002               	movlw	2
  6514  0161  00F0               	movwf	___awdiv@divisor
  6515  0162  3000               	movlw	0
  6516  0163  00F1               	movwf	___awdiv@divisor+1
  6517  0164  085B               	movf	OUTFQ@j+1,w
  6518  0165  00A1               	movwf	??_OUTFQ+1
  6519  0166  085A               	movf	OUTFQ@j,w
  6520  0167  00A0               	movwf	??_OUTFQ
  6521  0168  1003               	clrc
  6522  0169  0DA0               	rlf	??_OUTFQ,f
  6523  016A  0DA1               	rlf	??_OUTFQ+1,f
  6524  016B  0820               	movf	??_OUTFQ,w
  6525  016C  077B               	addwf	OUTFQ@Nprg,w
  6526  016D  00A2               	movwf	??_OUTFQ+2
  6527  016E  0821               	movf	??_OUTFQ+1,w
  6528  016F  1803               	skipnc
  6529  0170  0A21               	incf	??_OUTFQ+1,w
  6530  0171  077C               	addwf	OUTFQ@Nprg+1,w
  6531  0172  00A3               	movwf	??_OUTFQ+3
  6532  0173  0822               	movf	??_OUTFQ+2,w
  6533  0174  0084               	movwf	4
  6534  0175  1783               	bsf	3,7
  6535  0176  1C23               	btfss	??_OUTFQ+3,0
  6536  0177  1383               	bcf	3,7
  6537  0178  0800               	movf	0,w
  6538  0179  00F2               	movwf	___awdiv@dividend
  6539  017A  0A84               	incf	4,f
  6540  017B  0800               	movf	0,w
  6541  017C  00F3               	movwf	___awdiv@dividend+1
  6542  017D  120A  158A  22F3  120A  118A  	fcall	___awdiv
  6543  0182  1283               	bcf	3,5	;RP0=0, select bank0
  6544  0183  1303               	bcf	3,6	;RP1=0, select bank0
  6545  0184  085B               	movf	OUTFQ@j+1,w
  6546  0185  00A5               	movwf	??_OUTFQ+5
  6547  0186  085A               	movf	OUTFQ@j,w
  6548  0187  00A4               	movwf	??_OUTFQ+4
  6549  0188  1003               	clrc
  6550  0189  0DA4               	rlf	??_OUTFQ+4,f
  6551  018A  0DA5               	rlf	??_OUTFQ+5,f
  6552  018B  0824               	movf	??_OUTFQ+4,w
  6553  018C  077B               	addwf	OUTFQ@Nprg,w
  6554  018D  00A6               	movwf	??_OUTFQ+6
  6555  018E  0825               	movf	??_OUTFQ+5,w
  6556  018F  1803               	skipnc
  6557  0190  0A25               	incf	??_OUTFQ+5,w
  6558  0191  077C               	addwf	OUTFQ@Nprg+1,w
  6559  0192  00A7               	movwf	??_OUTFQ+7
  6560  0193  0826               	movf	??_OUTFQ+6,w
  6561  0194  0084               	movwf	4
  6562  0195  1783               	bsf	3,7
  6563  0196  1C27               	btfss	??_OUTFQ+7,0
  6564  0197  1383               	bcf	3,7
  6565  0198  0870               	movf	?___awdiv,w
  6566  0199  0080               	movwf	0
  6567  019A  0A84               	incf	4,f
  6568  019B  0871               	movf	?___awdiv+1,w
  6569  019C  2A92               	goto	L8
  6570  019D                     l3196:	
  6571                           ;FMCW.c: 155: }
  6572                           ;FMCW.c: 156: }
  6573                           
  6574                           
  6575                           ;FMCW.c: 157: else if(Nprg[j] % 2 == 1) {
  6576  019D  085B               	movf	OUTFQ@j+1,w
  6577  019E  00A1               	movwf	??_OUTFQ+1
  6578  019F  085A               	movf	OUTFQ@j,w
  6579  01A0  00A0               	movwf	??_OUTFQ
  6580  01A1  1003               	clrc
  6581  01A2  0DA0               	rlf	??_OUTFQ,f
  6582  01A3  0DA1               	rlf	??_OUTFQ+1,f
  6583  01A4  0820               	movf	??_OUTFQ,w
  6584  01A5  077B               	addwf	OUTFQ@Nprg,w
  6585  01A6  00A2               	movwf	??_OUTFQ+2
  6586  01A7  0821               	movf	??_OUTFQ+1,w
  6587  01A8  1803               	skipnc
  6588  01A9  0A21               	incf	??_OUTFQ+1,w
  6589  01AA  077C               	addwf	OUTFQ@Nprg+1,w
  6590  01AB  00A3               	movwf	??_OUTFQ+3
  6591  01AC  0822               	movf	??_OUTFQ+2,w
  6592  01AD  0084               	movwf	4
  6593  01AE  1783               	bsf	3,7
  6594  01AF  1C23               	btfss	??_OUTFQ+3,0
  6595  01B0  1383               	bcf	3,7
  6596  01B1  0800               	movf	0,w
  6597  01B2  00A4               	movwf	??_OUTFQ+4
  6598  01B3  0A84               	incf	4,f
  6599  01B4  0800               	movf	0,w
  6600  01B5  00A5               	movwf	??_OUTFQ+5
  6601  01B6  1C24               	btfss	??_OUTFQ+4,0
  6602  01B7  2A93               	goto	l3210
  6603                           
  6604                           ;FMCW.c: 158: if(j == 4){
  6605  01B8  3004               	movlw	4
  6606  01B9  065A               	xorwf	OUTFQ@j,w
  6607  01BA  045B               	iorwf	OUTFQ@j+1,w
  6608  01BB  1D03               	btfss	3,2
  6609  01BC  2A0C               	goto	l3206
  6610                           
  6611                           ;FMCW.c: 159: Nprg[j] = Nprg[j] / 2;
  6612  01BD  3002               	movlw	2
  6613  01BE  00F0               	movwf	___awdiv@divisor
  6614  01BF  3000               	movlw	0
  6615  01C0  00F1               	movwf	___awdiv@divisor+1
  6616  01C1  085B               	movf	OUTFQ@j+1,w
  6617  01C2  00A1               	movwf	??_OUTFQ+1
  6618  01C3  085A               	movf	OUTFQ@j,w
  6619  01C4  00A0               	movwf	??_OUTFQ
  6620  01C5  1003               	clrc
  6621  01C6  0DA0               	rlf	??_OUTFQ,f
  6622  01C7  0DA1               	rlf	??_OUTFQ+1,f
  6623  01C8  0820               	movf	??_OUTFQ,w
  6624  01C9  077B               	addwf	OUTFQ@Nprg,w
  6625  01CA  00A2               	movwf	??_OUTFQ+2
  6626  01CB  0821               	movf	??_OUTFQ+1,w
  6627  01CC  1803               	skipnc
  6628  01CD  0A21               	incf	??_OUTFQ+1,w
  6629  01CE  077C               	addwf	OUTFQ@Nprg+1,w
  6630  01CF  00A3               	movwf	??_OUTFQ+3
  6631  01D0  0822               	movf	??_OUTFQ+2,w
  6632  01D1  0084               	movwf	4
  6633  01D2  1783               	bsf	3,7
  6634  01D3  1C23               	btfss	??_OUTFQ+3,0
  6635  01D4  1383               	bcf	3,7
  6636  01D5  0800               	movf	0,w
  6637  01D6  00F2               	movwf	___awdiv@dividend
  6638  01D7  0A84               	incf	4,f
  6639  01D8  0800               	movf	0,w
  6640  01D9  00F3               	movwf	___awdiv@dividend+1
  6641  01DA  120A  158A  22F3  120A  118A  	fcall	___awdiv
  6642  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  6643  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  6644  01E1  085B               	movf	OUTFQ@j+1,w
  6645  01E2  00A5               	movwf	??_OUTFQ+5
  6646  01E3  085A               	movf	OUTFQ@j,w
  6647  01E4  00A4               	movwf	??_OUTFQ+4
  6648  01E5  1003               	clrc
  6649  01E6  0DA4               	rlf	??_OUTFQ+4,f
  6650  01E7  0DA5               	rlf	??_OUTFQ+5,f
  6651  01E8  0824               	movf	??_OUTFQ+4,w
  6652  01E9  077B               	addwf	OUTFQ@Nprg,w
  6653  01EA  00A6               	movwf	??_OUTFQ+6
  6654  01EB  0825               	movf	??_OUTFQ+5,w
  6655  01EC  1803               	skipnc
  6656  01ED  0A25               	incf	??_OUTFQ+5,w
  6657  01EE  077C               	addwf	OUTFQ@Nprg+1,w
  6658  01EF  00A7               	movwf	??_OUTFQ+7
  6659  01F0  0826               	movf	??_OUTFQ+6,w
  6660  01F1  0084               	movwf	4
  6661  01F2  1783               	bsf	3,7
  6662  01F3  1C27               	btfss	??_OUTFQ+7,0
  6663  01F4  1383               	bcf	3,7
  6664  01F5  0870               	movf	?___awdiv,w
  6665  01F6  0080               	movwf	0
  6666  01F7  0A84               	incf	4,f
  6667  01F8  0871               	movf	?___awdiv+1,w
  6668  01F9  0080               	movwf	0
  6669                           
  6670                           ;FMCW.c: 160: Nprg_b[count] = 1;
  6671  01FA  0854               	movf	OUTFQ@count,w
  6672  01FB  00A0               	movwf	??_OUTFQ
  6673  01FC  0720               	addwf	??_OUTFQ,w
  6674  01FD  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6675  01FE  0084               	movwf	4
  6676  01FF  3001               	movlw	1
  6677  0200  1383               	bcf	3,7	;select IRP bank0
  6678  0201  0080               	movwf	0
  6679  0202  0A84               	incf	4,f
  6680  0203  3000               	movlw	0
  6681  0204  0080               	movwf	0
  6682  0205                     l3204:	
  6683                           
  6684                           ;FMCW.c: 161: count++;
  6685  0205  3001               	movlw	1
  6686  0206  07D4               	addwf	OUTFQ@count,f
  6687  0207  1803               	skipnc
  6688  0208  0AD5               	incf	OUTFQ@count+1,f
  6689  0209  3000               	movlw	0
  6690  020A  07D5               	addwf	OUTFQ@count+1,f
  6691                           
  6692                           ;FMCW.c: 162: }
  6693  020B  2A93               	goto	l3210
  6694  020C                     l3206:	
  6695                           
  6696                           ;FMCW.c: 163: else{
  6697                           ;FMCW.c: 164: Nprg[j] = Nprg[j] / 2;
  6698  020C  3002               	movlw	2
  6699  020D  00F0               	movwf	___awdiv@divisor
  6700  020E  3000               	movlw	0
  6701  020F  00F1               	movwf	___awdiv@divisor+1
  6702  0210  085B               	movf	OUTFQ@j+1,w
  6703  0211  00A1               	movwf	??_OUTFQ+1
  6704  0212  085A               	movf	OUTFQ@j,w
  6705  0213  00A0               	movwf	??_OUTFQ
  6706  0214  1003               	clrc
  6707  0215  0DA0               	rlf	??_OUTFQ,f
  6708  0216  0DA1               	rlf	??_OUTFQ+1,f
  6709  0217  0820               	movf	??_OUTFQ,w
  6710  0218  077B               	addwf	OUTFQ@Nprg,w
  6711  0219  00A2               	movwf	??_OUTFQ+2
  6712  021A  0821               	movf	??_OUTFQ+1,w
  6713  021B  1803               	skipnc
  6714  021C  0A21               	incf	??_OUTFQ+1,w
  6715  021D  077C               	addwf	OUTFQ@Nprg+1,w
  6716  021E  00A3               	movwf	??_OUTFQ+3
  6717  021F  0822               	movf	??_OUTFQ+2,w
  6718  0220  0084               	movwf	4
  6719  0221  1783               	bsf	3,7
  6720  0222  1C23               	btfss	??_OUTFQ+3,0
  6721  0223  1383               	bcf	3,7
  6722  0224  0800               	movf	0,w
  6723  0225  00F2               	movwf	___awdiv@dividend
  6724  0226  0A84               	incf	4,f
  6725  0227  0800               	movf	0,w
  6726  0228  00F3               	movwf	___awdiv@dividend+1
  6727  0229  120A  158A  22F3  120A  118A  	fcall	___awdiv
  6728  022E  1283               	bcf	3,5	;RP0=0, select bank0
  6729  022F  1303               	bcf	3,6	;RP1=0, select bank0
  6730  0230  085B               	movf	OUTFQ@j+1,w
  6731  0231  00A5               	movwf	??_OUTFQ+5
  6732  0232  085A               	movf	OUTFQ@j,w
  6733  0233  00A4               	movwf	??_OUTFQ+4
  6734  0234  1003               	clrc
  6735  0235  0DA4               	rlf	??_OUTFQ+4,f
  6736  0236  0DA5               	rlf	??_OUTFQ+5,f
  6737  0237  0824               	movf	??_OUTFQ+4,w
  6738  0238  077B               	addwf	OUTFQ@Nprg,w
  6739  0239  00A6               	movwf	??_OUTFQ+6
  6740  023A  0825               	movf	??_OUTFQ+5,w
  6741  023B  1803               	skipnc
  6742  023C  0A25               	incf	??_OUTFQ+5,w
  6743  023D  077C               	addwf	OUTFQ@Nprg+1,w
  6744  023E  00A7               	movwf	??_OUTFQ+7
  6745  023F  0826               	movf	??_OUTFQ+6,w
  6746  0240  0084               	movwf	4
  6747  0241  1783               	bsf	3,7
  6748  0242  1C27               	btfss	??_OUTFQ+7,0
  6749  0243  1383               	bcf	3,7
  6750  0244  0870               	movf	?___awdiv,w
  6751  0245  0080               	movwf	0
  6752  0246  0A84               	incf	4,f
  6753  0247  0871               	movf	?___awdiv+1,w
  6754  0248  0080               	movwf	0
  6755                           
  6756                           ;FMCW.c: 165: Nprg[j+1] = Nprg[j+1] + 10;
  6757  0249  085B               	movf	OUTFQ@j+1,w
  6758  024A  00A1               	movwf	??_OUTFQ+1
  6759  024B  085A               	movf	OUTFQ@j,w
  6760  024C  00A0               	movwf	??_OUTFQ
  6761  024D  1003               	clrc
  6762  024E  0DA0               	rlf	??_OUTFQ,f
  6763  024F  0DA1               	rlf	??_OUTFQ+1,f
  6764  0250  0820               	movf	??_OUTFQ,w
  6765  0251  3E02               	addlw	2
  6766  0252  00A2               	movwf	??_OUTFQ+2
  6767  0253  0821               	movf	??_OUTFQ+1,w
  6768  0254  1803               	skipnc
  6769  0255  3E01               	addlw	1
  6770  0256  3E00               	addlw	0
  6771  0257  00A3               	movwf	??_OUTFQ+3
  6772  0258  0822               	movf	??_OUTFQ+2,w
  6773  0259  077B               	addwf	OUTFQ@Nprg,w
  6774  025A  00A4               	movwf	??_OUTFQ+4
  6775  025B  0823               	movf	??_OUTFQ+3,w
  6776  025C  1803               	skipnc
  6777  025D  0A23               	incf	??_OUTFQ+3,w
  6778  025E  077C               	addwf	OUTFQ@Nprg+1,w
  6779  025F  00A5               	movwf	??_OUTFQ+5
  6780  0260  0824               	movf	??_OUTFQ+4,w
  6781  0261  0084               	movwf	4
  6782  0262  1783               	bsf	3,7
  6783  0263  1C25               	btfss	??_OUTFQ+5,0
  6784  0264  1383               	bcf	3,7
  6785  0265  0800               	movf	0,w
  6786  0266  00A6               	movwf	??_OUTFQ+6
  6787  0267  0A84               	incf	4,f
  6788  0268  0800               	movf	0,w
  6789  0269  00A7               	movwf	??_OUTFQ+7
  6790  026A  0826               	movf	??_OUTFQ+6,w
  6791  026B  3E0A               	addlw	10
  6792  026C  00A8               	movwf	??_OUTFQ+8
  6793  026D  0827               	movf	??_OUTFQ+7,w
  6794  026E  1803               	skipnc
  6795  026F  3E01               	addlw	1
  6796  0270  3E00               	addlw	0
  6797  0271  00A9               	movwf	??_OUTFQ+9
  6798  0272  085B               	movf	OUTFQ@j+1,w
  6799  0273  00AB               	movwf	??_OUTFQ+11
  6800  0274  085A               	movf	OUTFQ@j,w
  6801  0275  00AA               	movwf	??_OUTFQ+10
  6802  0276  1003               	clrc
  6803  0277  0DAA               	rlf	??_OUTFQ+10,f
  6804  0278  0DAB               	rlf	??_OUTFQ+11,f
  6805  0279  082A               	movf	??_OUTFQ+10,w
  6806  027A  3E02               	addlw	2
  6807  027B  00AC               	movwf	??_OUTFQ+12
  6808  027C  082B               	movf	??_OUTFQ+11,w
  6809  027D  1803               	skipnc
  6810  027E  3E01               	addlw	1
  6811  027F  3E00               	addlw	0
  6812  0280  00AD               	movwf	??_OUTFQ+13
  6813  0281  082C               	movf	??_OUTFQ+12,w
  6814  0282  077B               	addwf	OUTFQ@Nprg,w
  6815  0283  00AE               	movwf	??_OUTFQ+14
  6816  0284  082D               	movf	??_OUTFQ+13,w
  6817  0285  1803               	skipnc
  6818  0286  0A2D               	incf	??_OUTFQ+13,w
  6819  0287  077C               	addwf	OUTFQ@Nprg+1,w
  6820  0288  00AF               	movwf	??_OUTFQ+15
  6821  0289  082E               	movf	??_OUTFQ+14,w
  6822  028A  0084               	movwf	4
  6823  028B  1783               	bsf	3,7
  6824  028C  1C2F               	btfss	??_OUTFQ+15,0
  6825  028D  1383               	bcf	3,7
  6826  028E  0828               	movf	??_OUTFQ+8,w
  6827  028F  0080               	movwf	0
  6828  0290  0A84               	incf	4,f
  6829  0291  0829               	movf	??_OUTFQ+9,w
  6830  0292                     L8:	
  6831  0292  0080               	movwf	0
  6832  0293                     l3210:	
  6833  0293  3001               	movlw	1
  6834  0294  07DA               	addwf	OUTFQ@j,f
  6835  0295  1803               	skipnc
  6836  0296  0ADB               	incf	OUTFQ@j+1,f
  6837  0297  3000               	movlw	0
  6838  0298  07DB               	addwf	OUTFQ@j+1,f
  6839  0299  085B               	movf	OUTFQ@j+1,w
  6840  029A  3A80               	xorlw	128
  6841  029B  00FF               	movwf	127
  6842  029C  3080               	movlw	128
  6843  029D  027F               	subwf	127,w
  6844  029E  1D03               	skipz
  6845  029F  2AA2               	goto	u2855
  6846  02A0  3005               	movlw	5
  6847  02A1  025A               	subwf	OUTFQ@j,w
  6848  02A2                     u2855:	
  6849  02A2  1C03               	skipc
  6850  02A3  28F7               	goto	l3184
  6851  02A4                     l3214:	
  6852  02A4  3001               	movlw	1
  6853  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  6854  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  6855  02A7  07D2               	addwf	OUTFQ@i_472,f
  6856  02A8  1803               	skipnc
  6857  02A9  0AD3               	incf	OUTFQ@i_472+1,f
  6858  02AA  3000               	movlw	0
  6859  02AB  07D3               	addwf	OUTFQ@i_472+1,f
  6860  02AC  0853               	movf	OUTFQ@i_472+1,w
  6861  02AD  3A80               	xorlw	128
  6862  02AE  00FF               	movwf	127
  6863  02AF  3080               	movlw	128
  6864  02B0  027F               	subwf	127,w
  6865  02B1  1D03               	skipz
  6866  02B2  2AB5               	goto	u2865
  6867  02B3  3011               	movlw	17
  6868  02B4  0252               	subwf	OUTFQ@i_472,w
  6869  02B5                     u2865:	
  6870  02B5  1C03               	skipc
  6871  02B6  28E8               	goto	l3178
  6872  02B7                     l3218:	
  6873                           
  6874                           ;FMCW.c: 166: }
  6875                           ;FMCW.c: 167: }
  6876                           ;FMCW.c: 168: }
  6877                           ;FMCW.c: 169: }
  6878                           ;FMCW.c: 172: for (int i=0; i<17; i++)
  6879  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  6880  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  6881  02B9  01D8               	clrf	OUTFQ@i_474
  6882  02BA  01D9               	clrf	OUTFQ@i_474+1
  6883  02BB  0859               	movf	OUTFQ@i_474+1,w
  6884  02BC  3A80               	xorlw	128
  6885  02BD  00FF               	movwf	127
  6886  02BE  3080               	movlw	128
  6887  02BF  027F               	subwf	127,w
  6888  02C0  1D03               	skipz
  6889  02C1  2AC4               	goto	u2875
  6890  02C2  3011               	movlw	17
  6891  02C3  0258               	subwf	OUTFQ@i_474,w
  6892  02C4                     u2875:	
  6893  02C4  1803               	btfsc	3,0
  6894  02C5  2B0D               	goto	l3236
  6895  02C6                     l3224:	
  6896                           
  6897                           ;FMCW.c: 173: {
  6898                           ;FMCW.c: 174: if(Nprg_b[i] == 0)
  6899  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  6900  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  6901  02C8  0858               	movf	OUTFQ@i_474,w
  6902  02C9  00A0               	movwf	??_OUTFQ
  6903  02CA  0720               	addwf	??_OUTFQ,w
  6904  02CB  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6905  02CC  0084               	movwf	4
  6906  02CD  1383               	bcf	3,7	;select IRP bank0
  6907  02CE  0800               	movf	0,w
  6908  02CF  00A1               	movwf	??_OUTFQ+1
  6909  02D0  0A84               	incf	4,f
  6910  02D1  0800               	movf	0,w
  6911  02D2  00A2               	movwf	??_OUTFQ+2
  6912  02D3  0821               	movf	??_OUTFQ+1,w
  6913  02D4  0422               	iorwf	??_OUTFQ+2,w
  6914  02D5  1D03               	btfss	3,2
  6915  02D6  2AE0               	goto	l3228
  6916                           
  6917                           ;FMCW.c: 175: {
  6918                           ;FMCW.c: 176: L_OUT(fmcwtxrx);
  6919  02D7  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6920  02D8  00F3               	movwf	L_OUT@fmcwtxrx+1
  6921  02D9  0879               	movf	OUTFQ@fmcwtxrx,w
  6922  02DA  00F2               	movwf	L_OUT@fmcwtxrx
  6923  02DB  120A  158A  2261  120A  118A  	fcall	_L_OUT
  6924  02E0                     l3228:	
  6925                           
  6926                           ;FMCW.c: 177: }
  6927                           ;FMCW.c: 178: if(Nprg_b[i] == 1)
  6928  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  6929  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  6930  02E2  0858               	movf	OUTFQ@i_474,w
  6931  02E3  00A0               	movwf	??_OUTFQ
  6932  02E4  0720               	addwf	??_OUTFQ,w
  6933  02E5  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6934  02E6  0084               	movwf	4
  6935  02E7  1383               	bcf	3,7	;select IRP bank0
  6936  02E8  0800               	movf	0,w
  6937  02E9  00A1               	movwf	??_OUTFQ+1
  6938  02EA  0A84               	incf	4,f
  6939  02EB  0800               	movf	0,w
  6940  02EC  00A2               	movwf	??_OUTFQ+2
  6941  02ED  0321               	decf	??_OUTFQ+1,w
  6942  02EE  0422               	iorwf	??_OUTFQ+2,w
  6943  02EF  1D03               	btfss	3,2
  6944  02F0  2AFA               	goto	l3232
  6945                           
  6946                           ;FMCW.c: 179: {
  6947                           ;FMCW.c: 180: H_OUT(fmcwtxrx);
  6948  02F1  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6949  02F2  00F3               	movwf	H_OUT@fmcwtxrx+1
  6950  02F3  0879               	movf	OUTFQ@fmcwtxrx,w
  6951  02F4  00F2               	movwf	H_OUT@fmcwtxrx
  6952  02F5  120A  158A  221B  120A  118A  	fcall	_H_OUT
  6953  02FA                     l3232:	
  6954  02FA  3001               	movlw	1
  6955  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  6956  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  6957  02FD  07D8               	addwf	OUTFQ@i_474,f
  6958  02FE  1803               	skipnc
  6959  02FF  0AD9               	incf	OUTFQ@i_474+1,f
  6960  0300  3000               	movlw	0
  6961  0301  07D9               	addwf	OUTFQ@i_474+1,f
  6962  0302  0859               	movf	OUTFQ@i_474+1,w
  6963  0303  3A80               	xorlw	128
  6964  0304  00FF               	movwf	127
  6965  0305  3080               	movlw	128
  6966  0306  027F               	subwf	127,w
  6967  0307  1D03               	skipz
  6968  0308  2B0B               	goto	u2905
  6969  0309  3011               	movlw	17
  6970  030A  0258               	subwf	OUTFQ@i_474,w
  6971  030B                     u2905:	
  6972  030B  1C03               	skipc
  6973  030C  2AC6               	goto	l3224
  6974  030D                     l3236:	
  6975                           
  6976                           ;FMCW.c: 181: }
  6977                           ;FMCW.c: 182: }
  6978                           ;FMCW.c: 185: H_OUT(fmcwtxrx);
  6979  030D  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6980  030E  00F3               	movwf	H_OUT@fmcwtxrx+1
  6981  030F  0879               	movf	OUTFQ@fmcwtxrx,w
  6982  0310  00F2               	movwf	H_OUT@fmcwtxrx
  6983  0311  120A  158A  221B  120A  118A  	fcall	_H_OUT
  6984                           
  6985                           ;FMCW.c: 186: L_OUT(fmcwtxrx);
  6986  0316  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6987  0317  00F3               	movwf	L_OUT@fmcwtxrx+1
  6988  0318  0879               	movf	OUTFQ@fmcwtxrx,w
  6989  0319  00F2               	movwf	L_OUT@fmcwtxrx
  6990  031A  120A  158A  2261  120A  118A  	fcall	_L_OUT
  6991                           
  6992                           ;FMCW.c: 189: STBOUT(fmcwtxrx);
  6993  031F  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6994  0320  00F3               	movwf	STBOUT@fmcwtxrx+1
  6995  0321  0879               	movf	OUTFQ@fmcwtxrx,w
  6996  0322  00F2               	movwf	STBOUT@fmcwtxrx
  6997  0323  120A  158A  217F   	fcall	_STBOUT
  6998  0326  0008               	return
  6999  0327                     __end_of_OUTFQ:	
  7000                           
  7001                           	psect	text24
  7002  0AF3                     __ptext24:	
  7003 ;; *************** function ___awdiv *****************
  7004 ;; Defined at:
  7005 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  7006 ;; Parameters:    Size  Location     Type
  7007 ;;  divisor         2    0[COMMON] int 
  7008 ;;  dividend        2    2[COMMON] int 
  7009 ;; Auto vars:     Size  Location     Type
  7010 ;;  quotient        2    7[COMMON] int 
  7011 ;;  sign            1    6[COMMON] unsigned char 
  7012 ;;  counter         1    5[COMMON] unsigned char 
  7013 ;; Return value:  Size  Location     Type
  7014 ;;                  2    0[COMMON] int 
  7015 ;; Registers used:
  7016 ;;		wreg, status,2, status,0
  7017 ;; Tracked objects:
  7018 ;;		On entry : 0/0
  7019 ;;		On exit  : 0/0
  7020 ;;		Unchanged: 0/0
  7021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7022 ;;      Params:         4       0       0       0       0
  7023 ;;      Locals:         4       0       0       0       0
  7024 ;;      Temps:          1       0       0       0       0
  7025 ;;      Totals:         9       0       0       0       0
  7026 ;;Total ram usage:        9 bytes
  7027 ;; Hardware stack levels used:    1
  7028 ;; This function calls:
  7029 ;;		Nothing
  7030 ;; This function is called by:
  7031 ;;		_OUTFQ
  7032 ;;		_RFDOUT
  7033 ;; This function uses a non-reentrant model
  7034 ;;
  7035                           
  7036                           
  7037                           ;psect for function ___awdiv
  7038  0AF3                     ___awdiv:	
  7039                           
  7040                           ;incstack = 0
  7041                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7042  0AF3  01F6               	clrf	___awdiv@sign
  7043  0AF4  1FF1               	btfss	___awdiv@divisor+1,7
  7044  0AF5  2AFD               	goto	l2648
  7045  0AF6  09F0               	comf	___awdiv@divisor,f
  7046  0AF7  09F1               	comf	___awdiv@divisor+1,f
  7047  0AF8  0AF0               	incf	___awdiv@divisor,f
  7048  0AF9  1903               	skipnz
  7049  0AFA  0AF1               	incf	___awdiv@divisor+1,f
  7050  0AFB  01F6               	clrf	___awdiv@sign
  7051  0AFC  0AF6               	incf	___awdiv@sign,f
  7052  0AFD                     l2648:	
  7053  0AFD  1FF3               	btfss	___awdiv@dividend+1,7
  7054  0AFE  2B08               	goto	l2654
  7055  0AFF  09F2               	comf	___awdiv@dividend,f
  7056  0B00  09F3               	comf	___awdiv@dividend+1,f
  7057  0B01  0AF2               	incf	___awdiv@dividend,f
  7058  0B02  1903               	skipnz
  7059  0B03  0AF3               	incf	___awdiv@dividend+1,f
  7060  0B04  3001               	movlw	1
  7061  0B05  00F4               	movwf	??___awdiv
  7062  0B06  0874               	movf	??___awdiv,w
  7063  0B07  06F6               	xorwf	___awdiv@sign,f
  7064  0B08                     l2654:	
  7065  0B08  01F7               	clrf	___awdiv@quotient
  7066  0B09  01F8               	clrf	___awdiv@quotient+1
  7067  0B0A  0870               	movf	___awdiv@divisor,w
  7068  0B0B  0471               	iorwf	___awdiv@divisor+1,w
  7069  0B0C  1903               	btfsc	3,2
  7070  0B0D  2B3F               	goto	l2676
  7071  0B0E  01F5               	clrf	___awdiv@counter
  7072  0B0F  0AF5               	incf	___awdiv@counter,f
  7073  0B10                     l2664:	
  7074  0B10  1BF1               	btfsc	___awdiv@divisor+1,7
  7075  0B11  2B1E               	goto	l2666
  7076  0B12  3001               	movlw	1
  7077  0B13                     u2025:	
  7078  0B13  1003               	clrc
  7079  0B14  0DF0               	rlf	___awdiv@divisor,f
  7080  0B15  0DF1               	rlf	___awdiv@divisor+1,f
  7081  0B16  3EFF               	addlw	-1
  7082  0B17  1D03               	skipz
  7083  0B18  2B13               	goto	u2025
  7084  0B19  3001               	movlw	1
  7085  0B1A  00F4               	movwf	??___awdiv
  7086  0B1B  0874               	movf	??___awdiv,w
  7087  0B1C  07F5               	addwf	___awdiv@counter,f
  7088  0B1D  2B10               	goto	l2664
  7089  0B1E                     l2666:	
  7090  0B1E  3001               	movlw	1
  7091  0B1F                     u2045:	
  7092  0B1F  1003               	clrc
  7093  0B20  0DF7               	rlf	___awdiv@quotient,f
  7094  0B21  0DF8               	rlf	___awdiv@quotient+1,f
  7095  0B22  3EFF               	addlw	-1
  7096  0B23  1D03               	skipz
  7097  0B24  2B1F               	goto	u2045
  7098  0B25  0871               	movf	___awdiv@divisor+1,w
  7099  0B26  0273               	subwf	___awdiv@dividend+1,w
  7100  0B27  1D03               	skipz
  7101  0B28  2B2B               	goto	u2055
  7102  0B29  0870               	movf	___awdiv@divisor,w
  7103  0B2A  0272               	subwf	___awdiv@dividend,w
  7104  0B2B                     u2055:	
  7105  0B2B  1C03               	skipc
  7106  0B2C  2B34               	goto	l2672
  7107  0B2D  0870               	movf	___awdiv@divisor,w
  7108  0B2E  02F2               	subwf	___awdiv@dividend,f
  7109  0B2F  0871               	movf	___awdiv@divisor+1,w
  7110  0B30  1C03               	skipc
  7111  0B31  03F3               	decf	___awdiv@dividend+1,f
  7112  0B32  02F3               	subwf	___awdiv@dividend+1,f
  7113  0B33  1477               	bsf	___awdiv@quotient,0
  7114  0B34                     l2672:	
  7115  0B34  3001               	movlw	1
  7116  0B35                     u2065:	
  7117  0B35  1003               	clrc
  7118  0B36  0CF1               	rrf	___awdiv@divisor+1,f
  7119  0B37  0CF0               	rrf	___awdiv@divisor,f
  7120  0B38  3EFF               	addlw	-1
  7121  0B39  1D03               	skipz
  7122  0B3A  2B35               	goto	u2065
  7123  0B3B  3001               	movlw	1
  7124  0B3C  02F5               	subwf	___awdiv@counter,f
  7125  0B3D  1D03               	btfss	3,2
  7126  0B3E  2B1E               	goto	l2666
  7127  0B3F                     l2676:	
  7128  0B3F  0876               	movf	___awdiv@sign,w
  7129  0B40  1903               	btfsc	3,2
  7130  0B41  2B47               	goto	l2680
  7131  0B42  09F7               	comf	___awdiv@quotient,f
  7132  0B43  09F8               	comf	___awdiv@quotient+1,f
  7133  0B44  0AF7               	incf	___awdiv@quotient,f
  7134  0B45  1903               	skipnz
  7135  0B46  0AF8               	incf	___awdiv@quotient+1,f
  7136  0B47                     l2680:	
  7137  0B47  0878               	movf	___awdiv@quotient+1,w
  7138  0B48  00F1               	movwf	?___awdiv+1
  7139  0B49  0877               	movf	___awdiv@quotient,w
  7140  0B4A  00F0               	movwf	?___awdiv
  7141  0B4B  0008               	return
  7142  0B4C                     __end_of___awdiv:	
  7143                           
  7144                           	psect	text25
  7145  0CCD                     __ptext25:	
  7146 ;; *************** function _OPINIT *****************
  7147 ;; Defined at:
  7148 ;;		line 241 in file "FMCW.c"
  7149 ;; Parameters:    Size  Location     Type
  7150 ;;  fmcwtxrx        2    4[COMMON] int 
  7151 ;; Auto vars:     Size  Location     Type
  7152 ;;		None
  7153 ;; Return value:  Size  Location     Type
  7154 ;;                  1    wreg      void 
  7155 ;; Registers used:
  7156 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7157 ;; Tracked objects:
  7158 ;;		On entry : 0/0
  7159 ;;		On exit  : 0/0
  7160 ;;		Unchanged: 0/0
  7161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7162 ;;      Params:         2       0       0       0       0
  7163 ;;      Locals:         0       0       0       0       0
  7164 ;;      Temps:          0       0       0       0       0
  7165 ;;      Totals:         2       0       0       0       0
  7166 ;;Total ram usage:        2 bytes
  7167 ;; Hardware stack levels used:    1
  7168 ;; Hardware stack levels required when called:    2
  7169 ;; This function calls:
  7170 ;;		_H_OUT
  7171 ;;		_L_OUT
  7172 ;;		_STBOUT
  7173 ;; This function is called by:
  7174 ;;		_FMTX
  7175 ;;		_CWTX
  7176 ;;		_FMRX
  7177 ;; This function uses a non-reentrant model
  7178 ;;
  7179                           
  7180                           
  7181                           ;psect for function _OPINIT
  7182  0CCD                     _OPINIT:	
  7183                           
  7184                           ;FMCW.c: 243: L_OUT(fmcwtxrx);
  7185                           
  7186                           ;incstack = 0
  7187                           ; Regs used in _OPINIT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7188  0CCD  0875               	movf	OPINIT@fmcwtxrx+1,w
  7189  0CCE  00F3               	movwf	L_OUT@fmcwtxrx+1
  7190  0CCF  0874               	movf	OPINIT@fmcwtxrx,w
  7191  0CD0  00F2               	movwf	L_OUT@fmcwtxrx
  7192  0CD1  120A  158A  2261  120A  158A  	fcall	_L_OUT
  7193                           
  7194                           ;FMCW.c: 244: L_OUT(fmcwtxrx);
  7195  0CD6  0875               	movf	OPINIT@fmcwtxrx+1,w
  7196  0CD7  00F3               	movwf	L_OUT@fmcwtxrx+1
  7197  0CD8  0874               	movf	OPINIT@fmcwtxrx,w
  7198  0CD9  00F2               	movwf	L_OUT@fmcwtxrx
  7199  0CDA  120A  158A  2261  120A  158A  	fcall	_L_OUT
  7200                           
  7201                           ;FMCW.c: 245: L_OUT(fmcwtxrx);
  7202  0CDF  0875               	movf	OPINIT@fmcwtxrx+1,w
  7203  0CE0  00F3               	movwf	L_OUT@fmcwtxrx+1
  7204  0CE1  0874               	movf	OPINIT@fmcwtxrx,w
  7205  0CE2  00F2               	movwf	L_OUT@fmcwtxrx
  7206  0CE3  120A  158A  2261  120A  158A  	fcall	_L_OUT
  7207                           
  7208                           ;FMCW.c: 246: H_OUT(fmcwtxrx);
  7209  0CE8  0875               	movf	OPINIT@fmcwtxrx+1,w
  7210  0CE9  00F3               	movwf	H_OUT@fmcwtxrx+1
  7211  0CEA  0874               	movf	OPINIT@fmcwtxrx,w
  7212  0CEB  00F2               	movwf	H_OUT@fmcwtxrx
  7213  0CEC  120A  158A  221B  120A  158A  	fcall	_H_OUT
  7214                           
  7215                           ;FMCW.c: 247: H_OUT(fmcwtxrx);
  7216  0CF1  0875               	movf	OPINIT@fmcwtxrx+1,w
  7217  0CF2  00F3               	movwf	H_OUT@fmcwtxrx+1
  7218  0CF3  0874               	movf	OPINIT@fmcwtxrx,w
  7219  0CF4  00F2               	movwf	H_OUT@fmcwtxrx
  7220  0CF5  120A  158A  221B  120A  158A  	fcall	_H_OUT
  7221                           
  7222                           ;FMCW.c: 248: L_OUT(fmcwtxrx);
  7223  0CFA  0875               	movf	OPINIT@fmcwtxrx+1,w
  7224  0CFB  00F3               	movwf	L_OUT@fmcwtxrx+1
  7225  0CFC  0874               	movf	OPINIT@fmcwtxrx,w
  7226  0CFD  00F2               	movwf	L_OUT@fmcwtxrx
  7227  0CFE  120A  158A  2261  120A  158A  	fcall	_L_OUT
  7228                           
  7229                           ;FMCW.c: 249: L_OUT(fmcwtxrx);
  7230  0D03  0875               	movf	OPINIT@fmcwtxrx+1,w
  7231  0D04  00F3               	movwf	L_OUT@fmcwtxrx+1
  7232  0D05  0874               	movf	OPINIT@fmcwtxrx,w
  7233  0D06  00F2               	movwf	L_OUT@fmcwtxrx
  7234  0D07  120A  158A  2261  120A  158A  	fcall	_L_OUT
  7235                           
  7236                           ;FMCW.c: 250: L_OUT(fmcwtxrx);
  7237  0D0C  0875               	movf	OPINIT@fmcwtxrx+1,w
  7238  0D0D  00F3               	movwf	L_OUT@fmcwtxrx+1
  7239  0D0E  0874               	movf	OPINIT@fmcwtxrx,w
  7240  0D0F  00F2               	movwf	L_OUT@fmcwtxrx
  7241  0D10  120A  158A  2261  120A  158A  	fcall	_L_OUT
  7242                           
  7243                           ;FMCW.c: 251: L_OUT(fmcwtxrx);
  7244  0D15  0875               	movf	OPINIT@fmcwtxrx+1,w
  7245  0D16  00F3               	movwf	L_OUT@fmcwtxrx+1
  7246  0D17  0874               	movf	OPINIT@fmcwtxrx,w
  7247  0D18  00F2               	movwf	L_OUT@fmcwtxrx
  7248  0D19  120A  158A  2261  120A  158A  	fcall	_L_OUT
  7249                           
  7250                           ;FMCW.c: 252: L_OUT(fmcwtxrx);
  7251  0D1E  0875               	movf	OPINIT@fmcwtxrx+1,w
  7252  0D1F  00F3               	movwf	L_OUT@fmcwtxrx+1
  7253  0D20  0874               	movf	OPINIT@fmcwtxrx,w
  7254  0D21  00F2               	movwf	L_OUT@fmcwtxrx
  7255  0D22  120A  158A  2261  120A  158A  	fcall	_L_OUT
  7256                           
  7257                           ;FMCW.c: 253: H_OUT(fmcwtxrx);
  7258  0D27  0875               	movf	OPINIT@fmcwtxrx+1,w
  7259  0D28  00F3               	movwf	H_OUT@fmcwtxrx+1
  7260  0D29  0874               	movf	OPINIT@fmcwtxrx,w
  7261  0D2A  00F2               	movwf	H_OUT@fmcwtxrx
  7262  0D2B  120A  158A  221B  120A  158A  	fcall	_H_OUT
  7263                           
  7264                           ;FMCW.c: 256: L_OUT(fmcwtxrx);
  7265  0D30  0875               	movf	OPINIT@fmcwtxrx+1,w
  7266  0D31  00F3               	movwf	L_OUT@fmcwtxrx+1
  7267  0D32  0874               	movf	OPINIT@fmcwtxrx,w
  7268  0D33  00F2               	movwf	L_OUT@fmcwtxrx
  7269  0D34  120A  158A  2261  120A  158A  	fcall	_L_OUT
  7270                           
  7271                           ;FMCW.c: 257: L_OUT(fmcwtxrx);
  7272  0D39  0875               	movf	OPINIT@fmcwtxrx+1,w
  7273  0D3A  00F3               	movwf	L_OUT@fmcwtxrx+1
  7274  0D3B  0874               	movf	OPINIT@fmcwtxrx,w
  7275  0D3C  00F2               	movwf	L_OUT@fmcwtxrx
  7276  0D3D  120A  158A  2261  120A  158A  	fcall	_L_OUT
  7277                           
  7278                           ;FMCW.c: 260: STBOUT(fmcwtxrx);
  7279  0D42  0875               	movf	OPINIT@fmcwtxrx+1,w
  7280  0D43  00F3               	movwf	STBOUT@fmcwtxrx+1
  7281  0D44  0874               	movf	OPINIT@fmcwtxrx,w
  7282  0D45  00F2               	movwf	STBOUT@fmcwtxrx
  7283  0D46  120A  158A  217F   	fcall	_STBOUT
  7284  0D49  0008               	return
  7285  0D4A                     __end_of_OPINIT:	
  7286                           
  7287                           	psect	text26
  7288  097F                     __ptext26:	
  7289 ;; *************** function _STBOUT *****************
  7290 ;; Defined at:
  7291 ;;		line 107 in file "FMCW.c"
  7292 ;; Parameters:    Size  Location     Type
  7293 ;;  fmcwtxrx        2    2[COMMON] int 
  7294 ;; Auto vars:     Size  Location     Type
  7295 ;;		None
  7296 ;; Return value:  Size  Location     Type
  7297 ;;                  1    wreg      void 
  7298 ;; Registers used:
  7299 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7300 ;; Tracked objects:
  7301 ;;		On entry : 0/0
  7302 ;;		On exit  : 0/0
  7303 ;;		Unchanged: 0/0
  7304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7305 ;;      Params:         2       0       0       0       0
  7306 ;;      Locals:         0       0       0       0       0
  7307 ;;      Temps:          0       0       0       0       0
  7308 ;;      Totals:         2       0       0       0       0
  7309 ;;Total ram usage:        2 bytes
  7310 ;; Hardware stack levels used:    1
  7311 ;; Hardware stack levels required when called:    1
  7312 ;; This function calls:
  7313 ;;		__NOP
  7314 ;; This function is called by:
  7315 ;;		_OUTFQ
  7316 ;;		_RFDOUT
  7317 ;;		_OPINIT
  7318 ;; This function uses a non-reentrant model
  7319 ;;
  7320                           
  7321                           
  7322                           ;psect for function _STBOUT
  7323  097F                     _STBOUT:	
  7324                           
  7325                           ;FMCW.c: 108: if(fmcwtxrx == 1)
  7326                           
  7327                           ;incstack = 0
  7328                           ; Regs used in _STBOUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7329  097F  0372               	decf	STBOUT@fmcwtxrx,w
  7330  0980  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7331  0981  1D03               	btfss	3,2
  7332  0982  298E               	goto	l2624
  7333                           
  7334                           ;FMCW.c: 109: {
  7335                           ;FMCW.c: 110: PORTAbits.RA5 = 1;
  7336  0983  1283               	bcf	3,5	;RP0=0, select bank0
  7337  0984  1303               	bcf	3,6	;RP1=0, select bank0
  7338  0985  1685               	bsf	5,5	;volatile
  7339                           
  7340                           ;FMCW.c: 111: _NOP();
  7341  0986  120A  158A  2055  120A  158A  	fcall	__NOP
  7342                           
  7343                           ;FMCW.c: 112: PORTAbits.RA5 = 0;
  7344  098B  1283               	bcf	3,5	;RP0=0, select bank0
  7345  098C  1303               	bcf	3,6	;RP1=0, select bank0
  7346  098D  1285               	bcf	5,5	;volatile
  7347  098E                     l2624:	
  7348                           
  7349                           ;FMCW.c: 113: }
  7350                           ;FMCW.c: 114: if(fmcwtxrx == 2)
  7351  098E  3002               	movlw	2
  7352  098F  0672               	xorwf	STBOUT@fmcwtxrx,w
  7353  0990  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7354  0991  1D03               	btfss	3,2
  7355  0992  299E               	goto	l2632
  7356                           
  7357                           ;FMCW.c: 115: {
  7358                           ;FMCW.c: 116: PORTDbits.RD0 = 1;
  7359  0993  1283               	bcf	3,5	;RP0=0, select bank0
  7360  0994  1303               	bcf	3,6	;RP1=0, select bank0
  7361  0995  1408               	bsf	8,0	;volatile
  7362                           
  7363                           ;FMCW.c: 117: _NOP();
  7364  0996  120A  158A  2055  120A  158A  	fcall	__NOP
  7365                           
  7366                           ;FMCW.c: 118: PORTDbits.RD0 = 0;
  7367  099B  1283               	bcf	3,5	;RP0=0, select bank0
  7368  099C  1303               	bcf	3,6	;RP1=0, select bank0
  7369  099D  1008               	bcf	8,0	;volatile
  7370  099E                     l2632:	
  7371                           
  7372                           ;FMCW.c: 119: }
  7373                           ;FMCW.c: 120: if(fmcwtxrx == 3)
  7374  099E  3003               	movlw	3
  7375  099F  0672               	xorwf	STBOUT@fmcwtxrx,w
  7376  09A0  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7377  09A1  1D03               	btfss	3,2
  7378  09A2  0008               	return
  7379                           
  7380                           ;FMCW.c: 121: {
  7381                           ;FMCW.c: 122: PORTAbits.RA4 = 1;
  7382  09A3  1283               	bcf	3,5	;RP0=0, select bank0
  7383  09A4  1303               	bcf	3,6	;RP1=0, select bank0
  7384  09A5  1605               	bsf	5,4	;volatile
  7385                           
  7386                           ;FMCW.c: 123: _NOP();
  7387  09A6  120A  158A  2055   	fcall	__NOP
  7388                           
  7389                           ;FMCW.c: 124: PORTAbits.RA4 = 0;
  7390  09A9  1283               	bcf	3,5	;RP0=0, select bank0
  7391  09AA  1303               	bcf	3,6	;RP1=0, select bank0
  7392  09AB  1205               	bcf	5,4	;volatile
  7393  09AC  0008               	return
  7394  09AD                     __end_of_STBOUT:	
  7395                           
  7396                           	psect	text27
  7397  0A61                     __ptext27:	
  7398 ;; *************** function _L_OUT *****************
  7399 ;; Defined at:
  7400 ;;		line 40 in file "FMCW.c"
  7401 ;; Parameters:    Size  Location     Type
  7402 ;;  fmcwtxrx        2    2[COMMON] int 
  7403 ;; Auto vars:     Size  Location     Type
  7404 ;;		None
  7405 ;; Return value:  Size  Location     Type
  7406 ;;                  1    wreg      void 
  7407 ;; Registers used:
  7408 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7409 ;; Tracked objects:
  7410 ;;		On entry : 0/0
  7411 ;;		On exit  : 0/0
  7412 ;;		Unchanged: 0/0
  7413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7414 ;;      Params:         2       0       0       0       0
  7415 ;;      Locals:         0       0       0       0       0
  7416 ;;      Temps:          0       0       0       0       0
  7417 ;;      Totals:         2       0       0       0       0
  7418 ;;Total ram usage:        2 bytes
  7419 ;; Hardware stack levels used:    1
  7420 ;; Hardware stack levels required when called:    1
  7421 ;; This function calls:
  7422 ;;		__NOP
  7423 ;; This function is called by:
  7424 ;;		_OUTFQ
  7425 ;;		_RFDOUT
  7426 ;;		_OPINIT
  7427 ;; This function uses a non-reentrant model
  7428 ;;
  7429                           
  7430                           
  7431                           ;psect for function _L_OUT
  7432  0A61                     _L_OUT:	
  7433                           
  7434                           ;FMCW.c: 41: if(fmcwtxrx == 1)
  7435                           
  7436                           ;incstack = 0
  7437                           ; Regs used in _L_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7438  0A61  0372               	decf	L_OUT@fmcwtxrx,w
  7439  0A62  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7440  0A63  1D03               	btfss	3,2
  7441  0A64  2A78               	goto	l2566
  7442                           
  7443                           ;FMCW.c: 42: {
  7444                           ;FMCW.c: 43: PORTEbits.RE0 = 0;
  7445  0A65  1283               	bcf	3,5	;RP0=0, select bank0
  7446  0A66  1303               	bcf	3,6	;RP1=0, select bank0
  7447  0A67  1009               	bcf	9,0	;volatile
  7448                           
  7449                           ;FMCW.c: 44: _NOP();
  7450  0A68  120A  158A  2055  120A  158A  	fcall	__NOP
  7451                           
  7452                           ;FMCW.c: 45: PORTEbits.RE1 = 1;
  7453  0A6D  1283               	bcf	3,5	;RP0=0, select bank0
  7454  0A6E  1303               	bcf	3,6	;RP1=0, select bank0
  7455  0A6F  1489               	bsf	9,1	;volatile
  7456                           
  7457                           ;FMCW.c: 46: _NOP();
  7458  0A70  120A  158A  2055  120A  158A  	fcall	__NOP
  7459                           
  7460                           ;FMCW.c: 47: PORTEbits.RE1 = 0;
  7461  0A75  1283               	bcf	3,5	;RP0=0, select bank0
  7462  0A76  1303               	bcf	3,6	;RP1=0, select bank0
  7463  0A77  1089               	bcf	9,1	;volatile
  7464  0A78                     l2566:	
  7465                           
  7466                           ;FMCW.c: 48: }
  7467                           ;FMCW.c: 49: if(fmcwtxrx == 2)
  7468  0A78  3002               	movlw	2
  7469  0A79  0672               	xorwf	L_OUT@fmcwtxrx,w
  7470  0A7A  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7471  0A7B  1D03               	btfss	3,2
  7472  0A7C  2A90               	goto	l2576
  7473                           
  7474                           ;FMCW.c: 50: {
  7475                           ;FMCW.c: 51: PORTDbits.RD1 = 0;
  7476  0A7D  1283               	bcf	3,5	;RP0=0, select bank0
  7477  0A7E  1303               	bcf	3,6	;RP1=0, select bank0
  7478  0A7F  1088               	bcf	8,1	;volatile
  7479                           
  7480                           ;FMCW.c: 52: _NOP();
  7481  0A80  120A  158A  2055  120A  158A  	fcall	__NOP
  7482                           
  7483                           ;FMCW.c: 53: PORTDbits.RD2 = 1;
  7484  0A85  1283               	bcf	3,5	;RP0=0, select bank0
  7485  0A86  1303               	bcf	3,6	;RP1=0, select bank0
  7486  0A87  1508               	bsf	8,2	;volatile
  7487                           
  7488                           ;FMCW.c: 54: _NOP();
  7489  0A88  120A  158A  2055  120A  158A  	fcall	__NOP
  7490                           
  7491                           ;FMCW.c: 55: PORTDbits.RD2 = 0;
  7492  0A8D  1283               	bcf	3,5	;RP0=0, select bank0
  7493  0A8E  1303               	bcf	3,6	;RP1=0, select bank0
  7494  0A8F  1108               	bcf	8,2	;volatile
  7495  0A90                     l2576:	
  7496                           
  7497                           ;FMCW.c: 56: }
  7498                           ;FMCW.c: 57: if(fmcwtxrx == 3)
  7499  0A90  3003               	movlw	3
  7500  0A91  0672               	xorwf	L_OUT@fmcwtxrx,w
  7501  0A92  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7502  0A93  1D03               	btfss	3,2
  7503  0A94  0008               	return
  7504                           
  7505                           ;FMCW.c: 58: {
  7506                           ;FMCW.c: 59: PORTAbits.RA3 = 0;
  7507  0A95  1283               	bcf	3,5	;RP0=0, select bank0
  7508  0A96  1303               	bcf	3,6	;RP1=0, select bank0
  7509  0A97  1185               	bcf	5,3	;volatile
  7510                           
  7511                           ;FMCW.c: 60: _NOP();
  7512  0A98  120A  158A  2055  120A  158A  	fcall	__NOP
  7513                           
  7514                           ;FMCW.c: 61: PORTAbits.RA2 = 1;
  7515  0A9D  1283               	bcf	3,5	;RP0=0, select bank0
  7516  0A9E  1303               	bcf	3,6	;RP1=0, select bank0
  7517  0A9F  1505               	bsf	5,2	;volatile
  7518                           
  7519                           ;FMCW.c: 62: _NOP();
  7520  0AA0  120A  158A  2055   	fcall	__NOP
  7521                           
  7522                           ;FMCW.c: 63: PORTAbits.RA2 = 0;
  7523  0AA3  1283               	bcf	3,5	;RP0=0, select bank0
  7524  0AA4  1303               	bcf	3,6	;RP1=0, select bank0
  7525  0AA5  1105               	bcf	5,2	;volatile
  7526  0AA6  0008               	return
  7527  0AA7                     __end_of_L_OUT:	
  7528                           
  7529                           	psect	text28
  7530  0A1B                     __ptext28:	
  7531 ;; *************** function _H_OUT *****************
  7532 ;; Defined at:
  7533 ;;		line 74 in file "FMCW.c"
  7534 ;; Parameters:    Size  Location     Type
  7535 ;;  fmcwtxrx        2    2[COMMON] int 
  7536 ;; Auto vars:     Size  Location     Type
  7537 ;;		None
  7538 ;; Return value:  Size  Location     Type
  7539 ;;                  1    wreg      void 
  7540 ;; Registers used:
  7541 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7542 ;; Tracked objects:
  7543 ;;		On entry : 0/0
  7544 ;;		On exit  : 0/0
  7545 ;;		Unchanged: 0/0
  7546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7547 ;;      Params:         2       0       0       0       0
  7548 ;;      Locals:         0       0       0       0       0
  7549 ;;      Temps:          0       0       0       0       0
  7550 ;;      Totals:         2       0       0       0       0
  7551 ;;Total ram usage:        2 bytes
  7552 ;; Hardware stack levels used:    1
  7553 ;; Hardware stack levels required when called:    1
  7554 ;; This function calls:
  7555 ;;		__NOP
  7556 ;; This function is called by:
  7557 ;;		_OUTFQ
  7558 ;;		_RFDOUT
  7559 ;;		_OPINIT
  7560 ;; This function uses a non-reentrant model
  7561 ;;
  7562                           
  7563                           
  7564                           ;psect for function _H_OUT
  7565  0A1B                     _H_OUT:	
  7566                           
  7567                           ;FMCW.c: 75: if(fmcwtxrx == 1)
  7568                           
  7569                           ;incstack = 0
  7570                           ; Regs used in _H_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7571  0A1B  0372               	decf	H_OUT@fmcwtxrx,w
  7572  0A1C  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7573  0A1D  1D03               	btfss	3,2
  7574  0A1E  2A32               	goto	l2596
  7575                           
  7576                           ;FMCW.c: 76: {
  7577                           ;FMCW.c: 77: PORTEbits.RE0 = 1;
  7578  0A1F  1283               	bcf	3,5	;RP0=0, select bank0
  7579  0A20  1303               	bcf	3,6	;RP1=0, select bank0
  7580  0A21  1409               	bsf	9,0	;volatile
  7581                           
  7582                           ;FMCW.c: 78: _NOP();
  7583  0A22  120A  158A  2055  120A  158A  	fcall	__NOP
  7584                           
  7585                           ;FMCW.c: 79: PORTEbits.RE1 = 1;
  7586  0A27  1283               	bcf	3,5	;RP0=0, select bank0
  7587  0A28  1303               	bcf	3,6	;RP1=0, select bank0
  7588  0A29  1489               	bsf	9,1	;volatile
  7589                           
  7590                           ;FMCW.c: 80: _NOP();
  7591  0A2A  120A  158A  2055  120A  158A  	fcall	__NOP
  7592                           
  7593                           ;FMCW.c: 81: PORTEbits.RE1 = 0;
  7594  0A2F  1283               	bcf	3,5	;RP0=0, select bank0
  7595  0A30  1303               	bcf	3,6	;RP1=0, select bank0
  7596  0A31  1089               	bcf	9,1	;volatile
  7597  0A32                     l2596:	
  7598                           
  7599                           ;FMCW.c: 82: }
  7600                           ;FMCW.c: 83: if(fmcwtxrx == 2)
  7601  0A32  3002               	movlw	2
  7602  0A33  0672               	xorwf	H_OUT@fmcwtxrx,w
  7603  0A34  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7604  0A35  1D03               	btfss	3,2
  7605  0A36  2A4A               	goto	l2606
  7606                           
  7607                           ;FMCW.c: 84: {
  7608                           ;FMCW.c: 85: PORTDbits.RD1 = 1;
  7609  0A37  1283               	bcf	3,5	;RP0=0, select bank0
  7610  0A38  1303               	bcf	3,6	;RP1=0, select bank0
  7611  0A39  1488               	bsf	8,1	;volatile
  7612                           
  7613                           ;FMCW.c: 86: _NOP();
  7614  0A3A  120A  158A  2055  120A  158A  	fcall	__NOP
  7615                           
  7616                           ;FMCW.c: 87: PORTDbits.RD2 = 1;
  7617  0A3F  1283               	bcf	3,5	;RP0=0, select bank0
  7618  0A40  1303               	bcf	3,6	;RP1=0, select bank0
  7619  0A41  1508               	bsf	8,2	;volatile
  7620                           
  7621                           ;FMCW.c: 88: _NOP();
  7622  0A42  120A  158A  2055  120A  158A  	fcall	__NOP
  7623                           
  7624                           ;FMCW.c: 89: PORTDbits.RD2 = 0;
  7625  0A47  1283               	bcf	3,5	;RP0=0, select bank0
  7626  0A48  1303               	bcf	3,6	;RP1=0, select bank0
  7627  0A49  1108               	bcf	8,2	;volatile
  7628  0A4A                     l2606:	
  7629                           
  7630                           ;FMCW.c: 90: }
  7631                           ;FMCW.c: 91: if(fmcwtxrx == 3)
  7632  0A4A  3003               	movlw	3
  7633  0A4B  0672               	xorwf	H_OUT@fmcwtxrx,w
  7634  0A4C  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7635  0A4D  1D03               	btfss	3,2
  7636  0A4E  0008               	return
  7637                           
  7638                           ;FMCW.c: 92: {
  7639                           ;FMCW.c: 93: PORTAbits.RA3 = 1;
  7640  0A4F  1283               	bcf	3,5	;RP0=0, select bank0
  7641  0A50  1303               	bcf	3,6	;RP1=0, select bank0
  7642  0A51  1585               	bsf	5,3	;volatile
  7643                           
  7644                           ;FMCW.c: 94: _NOP();
  7645  0A52  120A  158A  2055  120A  158A  	fcall	__NOP
  7646                           
  7647                           ;FMCW.c: 95: PORTAbits.RA2 = 1;
  7648  0A57  1283               	bcf	3,5	;RP0=0, select bank0
  7649  0A58  1303               	bcf	3,6	;RP1=0, select bank0
  7650  0A59  1505               	bsf	5,2	;volatile
  7651                           
  7652                           ;FMCW.c: 96: _NOP();
  7653  0A5A  120A  158A  2055   	fcall	__NOP
  7654                           
  7655                           ;FMCW.c: 97: PORTAbits.RA2 = 0;
  7656  0A5D  1283               	bcf	3,5	;RP0=0, select bank0
  7657  0A5E  1303               	bcf	3,6	;RP1=0, select bank0
  7658  0A5F  1105               	bcf	5,2	;volatile
  7659  0A60  0008               	return
  7660  0A61                     __end_of_H_OUT:	
  7661                           
  7662                           	psect	text29
  7663  0855                     __ptext29:	
  7664 ;; *************** function __NOP *****************
  7665 ;; Defined at:
  7666 ;;		line 349 in file "FMCW.c"
  7667 ;; Parameters:    Size  Location     Type
  7668 ;;		None
  7669 ;; Auto vars:     Size  Location     Type
  7670 ;;  i               2    0[COMMON] int 
  7671 ;; Return value:  Size  Location     Type
  7672 ;;                  1    wreg      void 
  7673 ;; Registers used:
  7674 ;;		wreg, status,2, btemp+1
  7675 ;; Tracked objects:
  7676 ;;		On entry : 0/0
  7677 ;;		On exit  : 0/0
  7678 ;;		Unchanged: 0/0
  7679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7680 ;;      Params:         0       0       0       0       0
  7681 ;;      Locals:         2       0       0       0       0
  7682 ;;      Temps:          0       0       0       0       0
  7683 ;;      Totals:         2       0       0       0       0
  7684 ;;Total ram usage:        2 bytes
  7685 ;; Hardware stack levels used:    1
  7686 ;; This function calls:
  7687 ;;		Nothing
  7688 ;; This function is called by:
  7689 ;;		_L_OUT
  7690 ;;		_H_OUT
  7691 ;;		_STBOUT
  7692 ;; This function uses a non-reentrant model
  7693 ;;
  7694                           
  7695                           
  7696                           ;psect for function __NOP
  7697  0855                     __NOP:	
  7698                           
  7699                           ;FMCW.c: 350: for(int i=0; i<5; i++){
  7700                           
  7701                           ;incstack = 0
  7702                           ; Regs used in __NOP: [wreg+status,2+btemp+1]
  7703  0855  01F0               	clrf	__NOP@i
  7704  0856  01F1               	clrf	__NOP@i+1
  7705  0857                     L9:	
  7706  0857  0871               	movf	__NOP@i+1,w
  7707  0858  3A80               	xorlw	128
  7708  0859  00FF               	movwf	127
  7709  085A  3080               	movlw	128
  7710  085B  027F               	subwf	127,w
  7711  085C  1D03               	skipz
  7712  085D  2860               	goto	u1835
  7713  085E  3005               	movlw	5
  7714  085F  0270               	subwf	__NOP@i,w
  7715  0860                     u1835:	
  7716  0860  1803               	btfsc	3,0
  7717  0861  0008               	return
  7718                           
  7719                           ;FMCW.c: 351: __nop();
  7720  0862  0000               	nop
  7721  0863  3001               	movlw	1
  7722  0864  07F0               	addwf	__NOP@i,f
  7723  0865  1803               	skipnc
  7724  0866  0AF1               	incf	__NOP@i+1,f
  7725  0867  3000               	movlw	0
  7726  0868  07F1               	addwf	__NOP@i+1,f
  7727  0869  2857               	goto	L9
  7728  086A                     __end_of__NOP:	
  7729  007E                     btemp	set	126	;btemp
  7730  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    2
    Data        91
    BSS         121
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      80
    BANK1            80     33      72
    BANK3            96      0      90
    BANK2            96      0      73

Pointer List with Targets:

    FMRX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), FMRX_Nprg(BANK3[10]), 

    CWTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@CWTX_Nprg(BANK1[10]), CWTX_Nprg(BANK1[10]), 

    FMTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    OUTFQ@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), main@CWTX_Nprg(BANK1[10]), main@FMTX_Nprg(BANK1[10]), 
		 -> FMRX_Nprg(BANK3[10]), CWTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    sp__EEPROM_Read	PTR unsigned char  size(1) Largest target is 32
		 -> EEPROMData(BANK2[32]), 

    EEPROM_Write@data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK2[16]), 

    main@dData	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK2[16]), 

    sp__ReceivePacket_data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK2[16]), 


Critical Paths under _main in COMMON

    _TXOBC_waddress->_putch
    _ReceivePacket_data->_fcscheck
    _ReceivePacket_data->_waitFlag
    _waitFlag->_getbit
    _getdata->_getbit
    _NM_waddress->_putch
    _Init_I2C_M->___lldiv
    _FMTX->_OUTFQ
    _FMTX->_RFDOUT
    _FMRX->_OUTFQ
    _FMRX->_RFDOUT
    _EEPROM_Write->_I2C_Master_Write
    _CWTX->_OUTFQ
    _CWTX->_RFDOUT
    _RFDOUT->___awdiv
    _OUTFQ->___awdiv
    _OPINIT->_H_OUT
    _OPINIT->_L_OUT
    _OPINIT->_STBOUT
    _STBOUT->__NOP
    _L_OUT->__NOP
    _H_OUT->__NOP

Critical Paths under _main in BANK0

    _main->_CWTX
    _main->_FMRX
    _main->_FMTX
    _ReceivePacket_data->_waitFlag
    _FMTX->_OUTFQ
    _FMRX->_OUTFQ
    _CWTX->_OUTFQ

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0   33224
                                             66 BANK0      4     4      0
                                              0 BANK1     33    33      0
                               _CWTX
                       _EEPROM_Write
                               _FMRX
                               _FMTX
                         _Init_I2C_M
                           _Init_MPU
                        _Init_SERIAL
                        _NM_waddress
                 _ReceivePacket_data
                          _Reset_EPS
                     _TXOBC_waddress
 ---------------------------------------------------------------------------------
 (1) _TXOBC_waddress                                       5     3      2     194
                                              1 COMMON     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _Reset_EPS                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ReceivePacket_data                                   6     6      0    2691
                                             10 COMMON     2     2      0
                                             29 BANK0      4     4      0
                           _fcscheck
                            _getdata
                           _waitFlag
 ---------------------------------------------------------------------------------
 (2) _waitFlag                                            33    33      0    2205
                                              6 COMMON     4     4      0
                                              0 BANK0     29    29      0
                             _getbit
 ---------------------------------------------------------------------------------
 (2) _getdata                                             10    10      0     212
                                              6 COMMON     2     2      0
                                              0 BANK0      7     7      0
                             _getbit
 ---------------------------------------------------------------------------------
 (3) _getbit                                               6     4      2      46
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _fcscheck                                            10     8      2     161
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (1) _NM_waddress                                          3     1      2     194
                                              1 COMMON     3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_SERIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_MPU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_I2C_M                                           8     4      4     343
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _FMTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _FMRX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         8     5      3     739
                                              2 COMMON     8     5      3
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     446
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CWTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (2) _RFDOUT                                              37    33      4    3231
                                              9 COMMON     4     0      4
                                              0 BANK0     33    33      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _OUTFQ                                               64    60      4    3853
                                              9 COMMON     4     0      4
                                              0 BANK0     60    60      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _OPINIT                                               2     0      2    2075
                                              4 COMMON     2     0      2
                              _H_OUT
                              _L_OUT
                             _STBOUT
 ---------------------------------------------------------------------------------
 (3) _STBOUT                                               2     0      2     271
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _L_OUT                                                2     0      2     801
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _H_OUT                                                2     0      2     536
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (4) __NOP                                                 2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CWTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _EEPROM_Write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _FMRX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _FMTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _Init_I2C_M
     ___lldiv
   _Init_MPU
   _Init_SERIAL
   _NM_waddress
     _putch
   _ReceivePacket_data
     _fcscheck
     _getdata
       _getbit
     _waitFlag
       _getbit
   _Reset_EPS
   _TXOBC_waddress
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      5A       9       93.8%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      49      11       76.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     21      48       7       90.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     46      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     149      12        0.0%
ABS                  0      0     149       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Feb 22 16:21:57 2018

                             pc 0002                     __CFG_CP$OFF 0000                              l69 081A  
                  ___awdiv@sign 0076                              fsr 0004                             l214 0566  
                           l442 0FF1                             l443 0FDC                             l279 0091  
                           l498 0829                             _RA1 0029                             _RB2 0032  
                           _RC2 003A                             _RB4 0034                             _RB5 0035  
                           _RC5 003D                             _PEN 048A                    __CFG_CPD$OFF 0000  
                           _SEN 0488                             _RX9 00C6                             _TX9 04C6  
                           fsr0 0004                             indf 0000                    __CFG_FOSC$HS 0000  
                  __CFG_LVP$OFF 0000                            l3102 0C10                            l3022 072E  
                          l3008 0706                            l3210 0293                            l3122 0076  
                          l3130 0038                            l3034 075C                            l3018 0721  
                          l3204 0205                            l3116 0059                            l3044 0777  
                          l3206 020C                            l3214 02A4                            l3302 0BF1  
                          l3142 00A9                            l3232 02FA                            l3224 02C6  
                          l3128 008A                            l3048 0784                            l3218 02B7  
                          l3250 0D75                            l3306 0BFE                            l3082 0C30  
                          l3066 07B0                            l3228 02E0                            l3236 030D  
                          l3172 00D9                            l3244 0D59                            l3500 0B96  
                          l3092 0C4C                            l3084 0C33                            l3068 032F  
                          l2606 0A4A                            l3166 00BD                            l3270 0DCA  
                          l2710 035E                            l2702 0336                            l2632 099E  
                          l2624 098E                            l3184 00F7                            l3264 0DBB  
                          l3256 0D84                            l3088 0C41                            l2800 047F  
                          l2720 0379                            l2704 0355                            l3194 0160  
                          l3178 00E8                            l3274 0DE4                            l3282 0E11  
                          l2546 0AE1                            l3196 019D                            l3292 0BB9  
                          l2548 0AEE                            l2804 048C                            l2724 0386  
                          l2566 0A78                            l2654 0B08                            l3278 0DFE  
                          l3294 0BC9                            l2830 04E2                            l3390 0CC1  
                          l2576 0A90                            l2680 0B47                            l2672 0B34  
                          l2664 0B10                            l2648 0AFD                            l2904 05AE  
                          l2816 04BA                            l2752 03E0                            l3384 0C99  
                          l2666 0B1E                            l2930 0604                            l2914 05C9  
                          l2842 0510                            l2826 04D5                            l2738 03B8  
                          l2596 0A32                            l2676 0B3F                            l2940 061F  
                          l2852 052B                            l2764 040E                            l2748 03D3  
                          l3812 0FC4                            l2918 05D6                            l2790 0464  
                          l2774 0429                            l3398 0CC7                            l2944 062C  
                          l2880 056F                            l2856 0538                            l3498 0B7C  
                          l2970 0682                            l2890 058A                            l2778 0436  
                          l2874 0564                            l2956 065A                            l3764 0EA6  
                          l2982 06B0                            l2966 0675                            l2894 0597  
                          l2992 06CB                            l3792 0F1F                            l3786 0F0E  
                          l2996 06D8                            STR_1 080F                            STR_2 080F  
                          STR_3 080F                            STR_4 080F                            STR_5 080F  
                          STR_6 080F                            STR_7 0808                            STR_8 0808  
                          STR_9 0808                            _BRGH 04C2                            _CREN 00C4  
                          _FERR 00C2                            u2025 0B13                            u2045 0B1F  
                          u3005 0BBD                            u2205 03F5                            u2055 0B2B  
                          u2065 0B35                            u3025 0BCB                            u3035 0BE0  
                          u3045 0BF2                            u2325 04F7                            u2245 044B  
                          u2165 039F                            u3155 09BF                            u2515 0697  
                          u2435 05EB                            u3075 0C97                            u3500 0F52  
                          u2365 054D                            u2285 04A1                            u3085 0CBF  
                          u3510 0F68                            _FMRX 0927                            u1835 0860  
                          u2635 0799                            u2555 06ED                            u2475 0641  
                          _FMTX 0953                            u2805 00F5                            u2735 0046  
                          u3607 0FE7                            u2905 030B                            u1865 0AD1  
                          u3617 0FF9                            u3490 0F3C                            u2915 0D57  
                          u2595 0743                            u3627 09E9                            u3547 0E33  
                          u2925 0D73                            u3637 09F7                            u3557 0E5D  
                          u2855 02A2                            u2775 00BB                            u2935 0D82  
                          u3647 0A05                            u3567 0EBD                            u2865 02B5  
                          u2785 00D7                            u2945 0DB9                            u3657 0A13  
                          u3577 0EDE                            u2875 02C4                            u2795 00E6  
                          u2955 0DC8                            u3667 0011                            u3587 0F2C  
                          _RCIE 0465                            _RCEN 048B                            _RCIF 0065  
                          _CWTX 08FB                            u3677 0022                            u3597 0FBD  
                          u3687 0AD5                            u2985 0E0F                            u3697 0BA1  
                          _OERR 00C1                            _TMR1 000E                            _SPEN 00C7  
                          _RSEN 0489                            _SREN 00C5                            _TXIE 0464  
                          _TXEN 04C5                            _TXIF 0064                            _SYNC 04C4  
                          __NOP 0855  TXOBC_waddress@TXOBC_wad_header 0075                    __CFG_WRT$OFF 0000  
                          _main 0E2B                     _NM_waddress 0843                   ??_Init_SERIAL 0070  
                          btemp 007E                   __CFG_BOREN$ON 0000                    getbit@oldbit 00E6  
                   Init_I2C_M@c 0020                            start 0000    ReceivePacket_data@fcschecker 003D  
                 __CFG_IESO$OFF 0000                   __CFG_MCLRE$ON 0000            __end_of_EEPROM_Write 0BA9  
                         ?_FMRX 005C                           ?_FMTX 005C                           ?_CWTX 005C  
              ?_I2C_Master_Wait 0070                ?_I2C_Master_Stop 0070                           ?__NOP 0070  
                         ?_main 0070                           _ACKEN 048C                           _ACKDT 048D  
               __end_of___awdiv 0B4C                           STR_10 0808                           STR_11 0808  
                         STR_12 0808                   __CFG_WDTE$OFF 0000                           _ANSEL 0188  
               __end_of___lldiv 0C07                 ___awdiv@divisor 0070         __size_of_TXOBC_waddress 003A  
               ___awdiv@counter 0075                           _RCREG 001A                           _SPBRG 0099  
                         _PORTA 0005                           _PORTB 0006                           _PORTC 0007  
                         _PORTD 0008                           _PORTE 0009                           _H_OUT 0A1B  
                         _OUTFQ 00AC                           _TRISA 0085                           _TRISB 0086  
                         _TRISC 0087                           _TRISD 0088                           _TRISE 0089  
                         _L_OUT 0A61                           _TXREG 0019                   __CFG_PWRTE$ON 0000  
                __CFG_FCMEN$OFF 0000                           _dData 0130                 __end_of_getdata 0C68  
                         _eflag 0066                   getdata@dstuff 0022                           _putch 0819  
                         pclath 000A                           status 0003                           wtemp0 007E  
                    _Init_I2C_M 09AD                EEPROM_Write@data 0074      __end_of_ReceivePacket_data 0CCD  
                  __end_of_FMRX 0953                    __end_of_FMTX 097F                    __end_of_CWTX 0927  
                  __end_of__NOP 086A                 __initialization 07B3                    __end_of_main 1000  
           __end_of_Init_SERIAL 0883                __end_of_Init_MPU 08D3                          ??_FMRX 007D  
                        ??_FMTX 007D                          ??_CWTX 007D                          ??__NOP 0070  
                        ??_main 0062                          ?_H_OUT 0072        EEPROM_Write@high_address 0072  
                        ?_OUTFQ 0079                          ?_L_OUT 0072               ?_I2C_Master_Start 0070  
             ?_I2C_Master_Write 0070                          OUTFQ@i 0056              ??_I2C_Master_Start 0070  
                        OUTFQ@j 005A              ??_I2C_Master_Write 0072                ___awdiv@dividend 0072  
                    _eDataField 0140                          ?_putch 0070                          _ANSELH 0189  
                        _RFDOUT 0D4A                          _OPINIT 0CCD                          _SSPADD 0093  
                        _STBOUT 097F                          _STATUS 0003                          _SSPCON 0014  
                        _SSPBUF 0013                          __NOP@i 0070                __end_of_fcscheck 00AC  
                     ??___awdiv 0074                          _dfcshi 006F                       ??___lldiv 0078  
                        _dfcslo 006E                          _efcshi 006C                          _efcslo 006D  
                        _getbit 0AA7              __size_of_Reset_EPS 0023                          _estuff 00E2  
              ___awdiv@quotient 0077                      _dPacketnum 0068                       ??_getdata 0076  
                   RFDOUT@i_483 003B                     RFDOUT@i_484 003F                __end_of_waitFlag 07B3  
    EEPROM_Write@EEPROM_address 0078         __end_of__initialization 07FC         EEPROM_Write@low_address 0073  
                   ?_Init_I2C_M 0020                     _Init_SERIAL 086A           __size_of_EEPROM_Write 005D  
                 __end_of_H_OUT 0A61                   __end_of_OUTFQ 0327                   __end_of_L_OUT 0AA7  
                 L_OUT@fmcwtxrx 0072                  __pcstackCOMMON 0070                    __pidataBANK1 089C  
                  __pidataBANK2 0883                    __pidataBANK3 08D3                   __end_of_putch 0821  
                _TXOBC_waddress 09E1                         ??_H_OUT 0074                         ??_OUTFQ 0020  
                       ??_L_OUT 0074                         ??_putch 0070                    _EEPROM_Write 0B4C  
                    __pbssBANK0 0066                      __pbssBANK1 00DB                      __pbssBANK2 0110  
                    __pbssBANK3 0190               __end_of_Reset_EPS 002A                       ?_Init_MPU 0070  
                       ?_RFDOUT 0079                         ?_OPINIT 0074                    ?_NM_waddress 0071  
                       ?_STBOUT 0072                         RFDOUT@i 003D                      __pmaintext 0E2B  
                    _ebitstatus 00E0                         ?_getbit 0070          __end_of_TXOBC_waddress 0A1B  
   TXOBC_waddress@whigh_address 0071             __size_of_Init_I2C_M 0034                       OUTFQ@Nprg 007B  
                     ?_fcscheck 0070                         _SSPCON2 0091                         _SSPSTAT 0094  
                    __stringtab 0800                      ??_Init_MPU 0070                 __size_of_RFDOUT 00E1  
               __size_of_OPINIT 007D                 __size_of_STBOUT 002E                       ?_waitFlag 0070  
                       _dPacket 0190                         _ePacket 00DB                         ___awdiv 0AF3  
                       ___lldiv 0BA9                 __size_of_getbit 004C                     waitFlag@buf 003C  
               ?_TXOBC_waddress 0071                         __ptext1 09E1                         __ptext2 0007  
                       __ptext3 0C68                         __ptext4 0327                         __ptext5 0C07  
                       __ptext6 0AA7                         __ptext7 002A                         __ptext8 0843  
                       __ptext9 0819                         _getdata 0C07              _ReceivePacket_data 0C68  
                     _T1CONbits 0010        __size_of_I2C_Master_Wait 0009        __size_of_I2C_Master_Stop 0007  
                    ??_fcscheck 0072             ?_ReceivePacket_data 0070                         getbit@i 0074  
                       clrloop0 0822            end_of_initialization 07FC                    RFDOUT@Nref_b 0023  
                     _FMRX_Nref 00C1                       _FMRX_Nprg 01E0                       _FMTX_Nref 00C5  
                     _FMTX_Nprg 00D1                       _CWTX_Nref 00C3                       _CWTX_Nprg 00C7  
                   OUTFQ@Nprg_b 0030       __size_of_I2C_Master_Start 0007       __size_of_I2C_Master_Write 0008  
               ___lldiv@divisor 0070                 ___lldiv@counter 007D                      ??_waitFlag 0076  
          ??_ReceivePacket_data 007A                      fcscheck@bt 0074                  OPINIT@fmcwtxrx 0074  
                     _PORTAbits 0005                       _PORTCbits 0007                       _PORTDbits 0008  
                     _PORTEbits 0009                      getdata@buf 0026                    ??_Init_I2C_M 0024  
                  ?_Init_SERIAL 0070                  __end_of_RFDOUT 0E2B                  __end_of_OPINIT 0D4A  
                __end_of_STBOUT 09AD            __size_of_NM_waddress 0012                  __end_of_getbit 0AF3  
    TXOBC_waddress@wlow_address 0072             start_initialization 07B3              __end_of_Init_I2C_M 09E1  
                      ??_RFDOUT 0020                        ??_OPINIT 0076               ??_I2C_Master_Wait 0070  
             ??_I2C_Master_Stop 0070                        ??_STBOUT 0074               __size_of_Init_MPU 001D  
                     _Reset_EPS 0007               getdata@dbitstatus 0024                      init_fetch0 0832  
                      ??_getbit 0072                     __pdataBANK1 00C1                     __pdataBANK2 0140  
                   __pdataBANK3 01C2                      RFDOUT@Nref 007B             __end_of_commandSize 0808  
      NM_waddress@whigh_address 0071                       ___latbits 0002                   __pcstackBANK0 0020  
                 __pcstackBANK1 00A0                        FMRX@Nref 005C                        FMRX@Nprg 005E  
                      FMTX@Nref 005C                        FMTX@Nprg 005E                        FMRX@fmrx 0060  
                      FMTX@fmtx 0060                        CWTX@Nref 005C                        CWTX@Nprg 005E  
             __size_of_fcscheck 0082                   waitFlag@j_120 0026                   waitFlag@j_122 0028  
                 waitFlag@j_131 0032                   waitFlag@j_124 002A                   waitFlag@j_133 0034  
                 waitFlag@j_126 002C                   waitFlag@j_118 0024                   waitFlag@j_135 0036  
                 waitFlag@j_127 002E                   waitFlag@j_137 0038                   waitFlag@j_129 0030  
                      CWTX@cwtx 0060                _I2C_Master_Start 17EA                      ?_Reset_EPS 0070  
              _I2C_Master_Write 17F8                ??_TXOBC_waddress 0073         getdata@bufstore_counter 0020  
                      ?___awdiv 0070                        ?___lldiv 0070               __size_of_waitFlag 048C  
                     __pstrings 0800                        ?_getdata 0070                  __size_of_H_OUT 0046  
                __size_of_OUTFQ 027B                  __size_of_L_OUT 0046                  __size_of_putch 0008  
                 H_OUT@fmcwtxrx 0072                       clear_ram0 0821                        _PIE1bits 008C  
                    OUTFQ@i_472 0052                      OUTFQ@i_474 0058                       _rcv_state 006A  
          __size_of_Init_SERIAL 0019                        _PIR1bits 000C                      OUTFQ@count 0054  
                   _commandSize 0806                       fcscheck@i 0075                       main@F2012 01D6  
                     main@F2014 01CC                       main@F2016 01C2                     __stringbase 0805  
                     main@dData 00C0                        _Init_MPU 08B6                     ??_Reset_EPS 0070  
                 fcscheck@i_149 0077     __size_of_ReceivePacket_data 0065                __size_of___awdiv 0059  
              __size_of___lldiv 005E              __end_of__stringtab 0806                      _EEPROMData 0110  
              __size_of_getdata 0061                 _I2C_Master_Wait 0829                 _I2C_Master_Stop 17F1  
                RFDOUT@fmcwtxrx 0079                        _efcsflag 00E4                        _fcscheck 002A  
                      __ptext10 086A                        __ptext11 08B6                        __ptext20 0829  
                      __ptext12 09AD                        __ptext21 08FB                        __ptext13 0BA9  
                      __ptext22 0D4A                        __ptext14 0953                        __ptext23 00AC  
                      __ptext15 0927                        __ptext24 0AF3                        __ptext16 0B4C  
                      __ptext25 0CCD                        __ptext17 17F8                        __ptext26 097F  
                      __ptext18 17F1                        __ptext27 0A61                        __ptext19 17EA  
                      __ptext28 0A1B                        __ptext29 0855               __CFG_BOR4V$BOR21V 0000  
                 ?_EEPROM_Write 0072                   __size_of_FMRX 002C                   __size_of_FMTX 002C  
                 __size_of_CWTX 002C                   __size_of__NOP 0015                   ??_NM_waddress 0073  
                     waitFlag@i 0020                       waitFlag@j 0022                   __size_of_main 01D5  
                STBOUT@fmcwtxrx 0072                        _waitFlag 0327        NM_waddress@NM_wad_header 0073  
                 OUTFQ@fmcwtxrx 0079        __end_of_I2C_Master_Start 17F1                       putch@byte 0070  
      __end_of_I2C_Master_Write 1800                      _INTCONbits 000B                        init_ram0 0836  
                  fcscheck@byte 0079                  ??_EEPROM_Write 0075              waitFlag@flag_judge 003A  
              ___lldiv@dividend 0074                       stringcode 0800                   main@FMRX_Nprg 00B4  
             main@NM_wad_header 00BF                   main@FMTX_Nprg 00A0             __end_of_NM_waddress 0855  
                 main@CWTX_Nprg 00AA         __end_of_I2C_Master_Wait 0832         __end_of_I2C_Master_Stop 17F8  
              ___lldiv@quotient 0079               I2C_Master_Write@d 0070             EEPROM_Write@Address 0079  
                      stringdir 0800                        stringtab 0800             ReceivePacket_data@i 003F  
       NM_waddress@wlow_address 0072            main@TXOBC_wad_header 00BE  
