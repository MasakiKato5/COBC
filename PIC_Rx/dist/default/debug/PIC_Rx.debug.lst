

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Jan 21 00:11:34 2018

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	dabs	1,0x7E,2
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001B                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  001D                     	;# 
    84  001E                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  0087                     	;# 
    90  0088                     	;# 
    91  0089                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  008F                     	;# 
    96  0090                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0095                     	;# 
   104  0096                     	;# 
   105  0097                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009A                     	;# 
   109  009B                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  009F                     	;# 
   114  0105                     	;# 
   115  0107                     	;# 
   116  0108                     	;# 
   117  0109                     	;# 
   118  010C                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010E                     	;# 
   122  010F                     	;# 
   123  0185                     	;# 
   124  0187                     	;# 
   125  0188                     	;# 
   126  0189                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129  0000                     	;# 
   130  0001                     	;# 
   131  0002                     	;# 
   132  0003                     	;# 
   133  0004                     	;# 
   134  0005                     	;# 
   135  0006                     	;# 
   136  0007                     	;# 
   137  0008                     	;# 
   138  0009                     	;# 
   139  000A                     	;# 
   140  000B                     	;# 
   141  000C                     	;# 
   142  000D                     	;# 
   143  000E                     	;# 
   144  000E                     	;# 
   145  000F                     	;# 
   146  0010                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0013                     	;# 
   150  0014                     	;# 
   151  0015                     	;# 
   152  0015                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001B                     	;# 
   160  001C                     	;# 
   161  001D                     	;# 
   162  001E                     	;# 
   163  001F                     	;# 
   164  0081                     	;# 
   165  0085                     	;# 
   166  0086                     	;# 
   167  0087                     	;# 
   168  0088                     	;# 
   169  0089                     	;# 
   170  008C                     	;# 
   171  008D                     	;# 
   172  008E                     	;# 
   173  008F                     	;# 
   174  0090                     	;# 
   175  0091                     	;# 
   176  0092                     	;# 
   177  0093                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0094                     	;# 
   181  0095                     	;# 
   182  0096                     	;# 
   183  0097                     	;# 
   184  0098                     	;# 
   185  0099                     	;# 
   186  009A                     	;# 
   187  009B                     	;# 
   188  009C                     	;# 
   189  009D                     	;# 
   190  009E                     	;# 
   191  009F                     	;# 
   192  0105                     	;# 
   193  0107                     	;# 
   194  0108                     	;# 
   195  0109                     	;# 
   196  010C                     	;# 
   197  010C                     	;# 
   198  010D                     	;# 
   199  010E                     	;# 
   200  010F                     	;# 
   201  0185                     	;# 
   202  0187                     	;# 
   203  0188                     	;# 
   204  0189                     	;# 
   205  018C                     	;# 
   206  018D                     	;# 
   207  0000                     	;# 
   208  0001                     	;# 
   209  0002                     	;# 
   210  0003                     	;# 
   211  0004                     	;# 
   212  0005                     	;# 
   213  0006                     	;# 
   214  0007                     	;# 
   215  0008                     	;# 
   216  0009                     	;# 
   217  000A                     	;# 
   218  000B                     	;# 
   219  000C                     	;# 
   220  000D                     	;# 
   221  000E                     	;# 
   222  000E                     	;# 
   223  000F                     	;# 
   224  0010                     	;# 
   225  0011                     	;# 
   226  0012                     	;# 
   227  0013                     	;# 
   228  0014                     	;# 
   229  0015                     	;# 
   230  0015                     	;# 
   231  0016                     	;# 
   232  0017                     	;# 
   233  0018                     	;# 
   234  0019                     	;# 
   235  001A                     	;# 
   236  001B                     	;# 
   237  001B                     	;# 
   238  001C                     	;# 
   239  001D                     	;# 
   240  001E                     	;# 
   241  001F                     	;# 
   242  0081                     	;# 
   243  0085                     	;# 
   244  0086                     	;# 
   245  0087                     	;# 
   246  0088                     	;# 
   247  0089                     	;# 
   248  008C                     	;# 
   249  008D                     	;# 
   250  008E                     	;# 
   251  008F                     	;# 
   252  0090                     	;# 
   253  0091                     	;# 
   254  0092                     	;# 
   255  0093                     	;# 
   256  0093                     	;# 
   257  0093                     	;# 
   258  0094                     	;# 
   259  0095                     	;# 
   260  0096                     	;# 
   261  0097                     	;# 
   262  0098                     	;# 
   263  0099                     	;# 
   264  009A                     	;# 
   265  009B                     	;# 
   266  009C                     	;# 
   267  009D                     	;# 
   268  009E                     	;# 
   269  009F                     	;# 
   270  0105                     	;# 
   271  0107                     	;# 
   272  0108                     	;# 
   273  0109                     	;# 
   274  010C                     	;# 
   275  010C                     	;# 
   276  010D                     	;# 
   277  010E                     	;# 
   278  010F                     	;# 
   279  0185                     	;# 
   280  0187                     	;# 
   281  0188                     	;# 
   282  0189                     	;# 
   283  018C                     	;# 
   284  018D                     	;# 
   285  0000                     	;# 
   286  0001                     	;# 
   287  0002                     	;# 
   288  0003                     	;# 
   289  0004                     	;# 
   290  0005                     	;# 
   291  0006                     	;# 
   292  0007                     	;# 
   293  0008                     	;# 
   294  0009                     	;# 
   295  000A                     	;# 
   296  000B                     	;# 
   297  000C                     	;# 
   298  000D                     	;# 
   299  000E                     	;# 
   300  000E                     	;# 
   301  000F                     	;# 
   302  0010                     	;# 
   303  0011                     	;# 
   304  0012                     	;# 
   305  0013                     	;# 
   306  0014                     	;# 
   307  0015                     	;# 
   308  0015                     	;# 
   309  0016                     	;# 
   310  0017                     	;# 
   311  0018                     	;# 
   312  0019                     	;# 
   313  001A                     	;# 
   314  001B                     	;# 
   315  001B                     	;# 
   316  001C                     	;# 
   317  001D                     	;# 
   318  001E                     	;# 
   319  001F                     	;# 
   320  0081                     	;# 
   321  0085                     	;# 
   322  0086                     	;# 
   323  0087                     	;# 
   324  0088                     	;# 
   325  0089                     	;# 
   326  008C                     	;# 
   327  008D                     	;# 
   328  008E                     	;# 
   329  008F                     	;# 
   330  0090                     	;# 
   331  0091                     	;# 
   332  0092                     	;# 
   333  0093                     	;# 
   334  0093                     	;# 
   335  0093                     	;# 
   336  0094                     	;# 
   337  0095                     	;# 
   338  0096                     	;# 
   339  0097                     	;# 
   340  0098                     	;# 
   341  0099                     	;# 
   342  009A                     	;# 
   343  009B                     	;# 
   344  009C                     	;# 
   345  009D                     	;# 
   346  009E                     	;# 
   347  009F                     	;# 
   348  0105                     	;# 
   349  0107                     	;# 
   350  0108                     	;# 
   351  0109                     	;# 
   352  010C                     	;# 
   353  010C                     	;# 
   354  010D                     	;# 
   355  010E                     	;# 
   356  010F                     	;# 
   357  0185                     	;# 
   358  0187                     	;# 
   359  0188                     	;# 
   360  0189                     	;# 
   361  018C                     	;# 
   362  018D                     	;# 
   363  0000                     	;# 
   364  0001                     	;# 
   365  0002                     	;# 
   366  0003                     	;# 
   367  0004                     	;# 
   368  0005                     	;# 
   369  0006                     	;# 
   370  0007                     	;# 
   371  0008                     	;# 
   372  0009                     	;# 
   373  000A                     	;# 
   374  000B                     	;# 
   375  000C                     	;# 
   376  000D                     	;# 
   377  000E                     	;# 
   378  000E                     	;# 
   379  000F                     	;# 
   380  0010                     	;# 
   381  0011                     	;# 
   382  0012                     	;# 
   383  0013                     	;# 
   384  0014                     	;# 
   385  0015                     	;# 
   386  0015                     	;# 
   387  0016                     	;# 
   388  0017                     	;# 
   389  0018                     	;# 
   390  0019                     	;# 
   391  001A                     	;# 
   392  001B                     	;# 
   393  001B                     	;# 
   394  001C                     	;# 
   395  001D                     	;# 
   396  001E                     	;# 
   397  001F                     	;# 
   398  0081                     	;# 
   399  0085                     	;# 
   400  0086                     	;# 
   401  0087                     	;# 
   402  0088                     	;# 
   403  0089                     	;# 
   404  008C                     	;# 
   405  008D                     	;# 
   406  008E                     	;# 
   407  008F                     	;# 
   408  0090                     	;# 
   409  0091                     	;# 
   410  0092                     	;# 
   411  0093                     	;# 
   412  0093                     	;# 
   413  0093                     	;# 
   414  0094                     	;# 
   415  0095                     	;# 
   416  0096                     	;# 
   417  0097                     	;# 
   418  0098                     	;# 
   419  0099                     	;# 
   420  009A                     	;# 
   421  009B                     	;# 
   422  009C                     	;# 
   423  009D                     	;# 
   424  009E                     	;# 
   425  009F                     	;# 
   426  0105                     	;# 
   427  0107                     	;# 
   428  0108                     	;# 
   429  0109                     	;# 
   430  010C                     	;# 
   431  010C                     	;# 
   432  010D                     	;# 
   433  010E                     	;# 
   434  010F                     	;# 
   435  0185                     	;# 
   436  0187                     	;# 
   437  0188                     	;# 
   438  0189                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  0000                     	;# 
   442  0001                     	;# 
   443  0002                     	;# 
   444  0003                     	;# 
   445  0004                     	;# 
   446  0005                     	;# 
   447  0006                     	;# 
   448  0007                     	;# 
   449  0008                     	;# 
   450  0009                     	;# 
   451  000A                     	;# 
   452  000B                     	;# 
   453  000C                     	;# 
   454  000D                     	;# 
   455  000E                     	;# 
   456  000E                     	;# 
   457  000F                     	;# 
   458  0010                     	;# 
   459  0011                     	;# 
   460  0012                     	;# 
   461  0013                     	;# 
   462  0014                     	;# 
   463  0015                     	;# 
   464  0015                     	;# 
   465  0016                     	;# 
   466  0017                     	;# 
   467  0018                     	;# 
   468  0019                     	;# 
   469  001A                     	;# 
   470  001B                     	;# 
   471  001B                     	;# 
   472  001C                     	;# 
   473  001D                     	;# 
   474  001E                     	;# 
   475  001F                     	;# 
   476  0081                     	;# 
   477  0085                     	;# 
   478  0086                     	;# 
   479  0087                     	;# 
   480  0088                     	;# 
   481  0089                     	;# 
   482  008C                     	;# 
   483  008D                     	;# 
   484  008E                     	;# 
   485  008F                     	;# 
   486  0090                     	;# 
   487  0091                     	;# 
   488  0092                     	;# 
   489  0093                     	;# 
   490  0093                     	;# 
   491  0093                     	;# 
   492  0094                     	;# 
   493  0095                     	;# 
   494  0096                     	;# 
   495  0097                     	;# 
   496  0098                     	;# 
   497  0099                     	;# 
   498  009A                     	;# 
   499  009B                     	;# 
   500  009C                     	;# 
   501  009D                     	;# 
   502  009E                     	;# 
   503  009F                     	;# 
   504  0105                     	;# 
   505  0107                     	;# 
   506  0108                     	;# 
   507  0109                     	;# 
   508  010C                     	;# 
   509  010C                     	;# 
   510  010D                     	;# 
   511  010E                     	;# 
   512  010F                     	;# 
   513  0185                     	;# 
   514  0187                     	;# 
   515  0188                     	;# 
   516  0189                     	;# 
   517  018C                     	;# 
   518  018D                     	;# 
   519  0000                     	;# 
   520  0001                     	;# 
   521  0002                     	;# 
   522  0003                     	;# 
   523  0004                     	;# 
   524  0005                     	;# 
   525  0006                     	;# 
   526  0007                     	;# 
   527  0008                     	;# 
   528  0009                     	;# 
   529  000A                     	;# 
   530  000B                     	;# 
   531  000C                     	;# 
   532  000D                     	;# 
   533  000E                     	;# 
   534  000E                     	;# 
   535  000F                     	;# 
   536  0010                     	;# 
   537  0011                     	;# 
   538  0012                     	;# 
   539  0013                     	;# 
   540  0014                     	;# 
   541  0015                     	;# 
   542  0015                     	;# 
   543  0016                     	;# 
   544  0017                     	;# 
   545  0018                     	;# 
   546  0019                     	;# 
   547  001A                     	;# 
   548  001B                     	;# 
   549  001B                     	;# 
   550  001C                     	;# 
   551  001D                     	;# 
   552  001E                     	;# 
   553  001F                     	;# 
   554  0081                     	;# 
   555  0085                     	;# 
   556  0086                     	;# 
   557  0087                     	;# 
   558  0088                     	;# 
   559  0089                     	;# 
   560  008C                     	;# 
   561  008D                     	;# 
   562  008E                     	;# 
   563  008F                     	;# 
   564  0090                     	;# 
   565  0091                     	;# 
   566  0092                     	;# 
   567  0093                     	;# 
   568  0093                     	;# 
   569  0093                     	;# 
   570  0094                     	;# 
   571  0095                     	;# 
   572  0096                     	;# 
   573  0097                     	;# 
   574  0098                     	;# 
   575  0099                     	;# 
   576  009A                     	;# 
   577  009B                     	;# 
   578  009C                     	;# 
   579  009D                     	;# 
   580  009E                     	;# 
   581  009F                     	;# 
   582  0105                     	;# 
   583  0107                     	;# 
   584  0108                     	;# 
   585  0109                     	;# 
   586  010C                     	;# 
   587  010C                     	;# 
   588  010D                     	;# 
   589  010E                     	;# 
   590  010F                     	;# 
   591  0185                     	;# 
   592  0187                     	;# 
   593  0188                     	;# 
   594  0189                     	;# 
   595  018C                     	;# 
   596  018D                     	;# 
   597  0000                     	;# 
   598  0001                     	;# 
   599  0002                     	;# 
   600  0003                     	;# 
   601  0004                     	;# 
   602  0005                     	;# 
   603  0006                     	;# 
   604  0007                     	;# 
   605  0008                     	;# 
   606  0009                     	;# 
   607  000A                     	;# 
   608  000B                     	;# 
   609  000C                     	;# 
   610  000D                     	;# 
   611  000E                     	;# 
   612  000E                     	;# 
   613  000F                     	;# 
   614  0010                     	;# 
   615  0011                     	;# 
   616  0012                     	;# 
   617  0013                     	;# 
   618  0014                     	;# 
   619  0015                     	;# 
   620  0015                     	;# 
   621  0016                     	;# 
   622  0017                     	;# 
   623  0018                     	;# 
   624  0019                     	;# 
   625  001A                     	;# 
   626  001B                     	;# 
   627  001B                     	;# 
   628  001C                     	;# 
   629  001D                     	;# 
   630  001E                     	;# 
   631  001F                     	;# 
   632  0081                     	;# 
   633  0085                     	;# 
   634  0086                     	;# 
   635  0087                     	;# 
   636  0088                     	;# 
   637  0089                     	;# 
   638  008C                     	;# 
   639  008D                     	;# 
   640  008E                     	;# 
   641  008F                     	;# 
   642  0090                     	;# 
   643  0091                     	;# 
   644  0092                     	;# 
   645  0093                     	;# 
   646  0093                     	;# 
   647  0093                     	;# 
   648  0094                     	;# 
   649  0095                     	;# 
   650  0096                     	;# 
   651  0097                     	;# 
   652  0098                     	;# 
   653  0099                     	;# 
   654  009A                     	;# 
   655  009B                     	;# 
   656  009C                     	;# 
   657  009D                     	;# 
   658  009E                     	;# 
   659  009F                     	;# 
   660  0105                     	;# 
   661  0107                     	;# 
   662  0108                     	;# 
   663  0109                     	;# 
   664  010C                     	;# 
   665  010C                     	;# 
   666  010D                     	;# 
   667  010E                     	;# 
   668  010F                     	;# 
   669  0185                     	;# 
   670  0187                     	;# 
   671  0188                     	;# 
   672  0189                     	;# 
   673  018C                     	;# 
   674  018D                     	;# 
   675  0000                     	;# 
   676  0001                     	;# 
   677  0002                     	;# 
   678  0003                     	;# 
   679  0004                     	;# 
   680  0005                     	;# 
   681  0006                     	;# 
   682  0007                     	;# 
   683  0008                     	;# 
   684  0009                     	;# 
   685  000A                     	;# 
   686  000B                     	;# 
   687  000C                     	;# 
   688  000D                     	;# 
   689  000E                     	;# 
   690  000E                     	;# 
   691  000F                     	;# 
   692  0010                     	;# 
   693  0011                     	;# 
   694  0012                     	;# 
   695  0013                     	;# 
   696  0014                     	;# 
   697  0015                     	;# 
   698  0015                     	;# 
   699  0016                     	;# 
   700  0017                     	;# 
   701  0018                     	;# 
   702  0019                     	;# 
   703  001A                     	;# 
   704  001B                     	;# 
   705  001B                     	;# 
   706  001C                     	;# 
   707  001D                     	;# 
   708  001E                     	;# 
   709  001F                     	;# 
   710  0081                     	;# 
   711  0085                     	;# 
   712  0086                     	;# 
   713  0087                     	;# 
   714  0088                     	;# 
   715  0089                     	;# 
   716  008C                     	;# 
   717  008D                     	;# 
   718  008E                     	;# 
   719  008F                     	;# 
   720  0090                     	;# 
   721  0091                     	;# 
   722  0092                     	;# 
   723  0093                     	;# 
   724  0093                     	;# 
   725  0093                     	;# 
   726  0094                     	;# 
   727  0095                     	;# 
   728  0096                     	;# 
   729  0097                     	;# 
   730  0098                     	;# 
   731  0099                     	;# 
   732  009A                     	;# 
   733  009B                     	;# 
   734  009C                     	;# 
   735  009D                     	;# 
   736  009E                     	;# 
   737  009F                     	;# 
   738  0105                     	;# 
   739  0107                     	;# 
   740  0108                     	;# 
   741  0109                     	;# 
   742  010C                     	;# 
   743  010C                     	;# 
   744  010D                     	;# 
   745  010E                     	;# 
   746  010F                     	;# 
   747  0185                     	;# 
   748  0187                     	;# 
   749  0188                     	;# 
   750  0189                     	;# 
   751  018C                     	;# 
   752  018D                     	;# 
   753  0000                     	;# 
   754  0001                     	;# 
   755  0002                     	;# 
   756  0003                     	;# 
   757  0004                     	;# 
   758  0005                     	;# 
   759  0006                     	;# 
   760  0007                     	;# 
   761  0008                     	;# 
   762  0009                     	;# 
   763  000A                     	;# 
   764  000B                     	;# 
   765  000C                     	;# 
   766  000D                     	;# 
   767  000E                     	;# 
   768  000E                     	;# 
   769  000F                     	;# 
   770  0010                     	;# 
   771  0011                     	;# 
   772  0012                     	;# 
   773  0013                     	;# 
   774  0014                     	;# 
   775  0015                     	;# 
   776  0015                     	;# 
   777  0016                     	;# 
   778  0017                     	;# 
   779  0018                     	;# 
   780  0019                     	;# 
   781  001A                     	;# 
   782  001B                     	;# 
   783  001B                     	;# 
   784  001C                     	;# 
   785  001D                     	;# 
   786  001E                     	;# 
   787  001F                     	;# 
   788  0081                     	;# 
   789  0085                     	;# 
   790  0086                     	;# 
   791  0087                     	;# 
   792  0088                     	;# 
   793  0089                     	;# 
   794  008C                     	;# 
   795  008D                     	;# 
   796  008E                     	;# 
   797  008F                     	;# 
   798  0090                     	;# 
   799  0091                     	;# 
   800  0092                     	;# 
   801  0093                     	;# 
   802  0093                     	;# 
   803  0093                     	;# 
   804  0094                     	;# 
   805  0095                     	;# 
   806  0096                     	;# 
   807  0097                     	;# 
   808  0098                     	;# 
   809  0099                     	;# 
   810  009A                     	;# 
   811  009B                     	;# 
   812  009C                     	;# 
   813  009D                     	;# 
   814  009E                     	;# 
   815  009F                     	;# 
   816  0105                     	;# 
   817  0107                     	;# 
   818  0108                     	;# 
   819  0109                     	;# 
   820  010C                     	;# 
   821  010C                     	;# 
   822  010D                     	;# 
   823  010E                     	;# 
   824  010F                     	;# 
   825  0185                     	;# 
   826  0187                     	;# 
   827  0188                     	;# 
   828  0189                     	;# 
   829  018C                     	;# 
   830  018D                     	;# 
   831                           
   832                           	psect	idataBANK1
   833  0859                     __pidataBANK1:	
   834                           
   835                           ;initializer for _CWTX_Nref
   836  0859  34A0               	retlw	160
   837  085A  3400               	retlw	0
   838                           
   839                           ;initializer for _FMRX_Nref
   840  085B  3400               	retlw	0
   841  085C  340A               	retlw	10
   842                           
   843                           ;initializer for _FMTX_Nref
   844  085D  3400               	retlw	0
   845  085E  340A               	retlw	10
   846                           
   847                           ;initializer for _CWTX_Nprg
   848  085F  3400               	retlw	0
   849  0860  3400               	retlw	0
   850  0861  3401               	retlw	1
   851  0862  3400               	retlw	0
   852  0863  3407               	retlw	7
   853  0864  3400               	retlw	0
   854  0865  3404               	retlw	4
   855  0866  3400               	retlw	0
   856  0867  3407               	retlw	7
   857  0868  3400               	retlw	0
   858                           
   859                           ;initializer for _FMTX_Nprg
   860  0869  3408               	retlw	8
   861  086A  3400               	retlw	0
   862  086B  3407               	retlw	7
   863  086C  3400               	retlw	0
   864  086D  3403               	retlw	3
   865  086E  3400               	retlw	0
   866  086F  3400               	retlw	0
   867  0870  3400               	retlw	0
   868  0871  3400               	retlw	0
   869  0872  3400               	retlw	0
   870                           
   871                           	psect	idataBANK3
   872  096B                     __pidataBANK3:	
   873                           
   874                           ;initializer for _eDataField
   875  096B  3448               	retlw	72
   876  096C  3465               	retlw	101
   877  096D  346C               	retlw	108
   878  096E  346C               	retlw	108
   879  096F  346F               	retlw	111
   880  0970  3421               	retlw	33
   881  0971  3420               	retlw	32
   882  0972  3449               	retlw	73
   883  0973  3427               	retlw	39
   884  0974  346D               	retlw	109
   885  0975  3420               	retlw	32
   886  0976  344F               	retlw	79
   887  0977  3472               	retlw	114
   888  0978  3469               	retlw	105
   889  0979  3467               	retlw	103
   890  097A  3461               	retlw	97
   891  097B  346D               	retlw	109
   892  097C  3469               	retlw	105
   893  097D  3453               	retlw	83
   894  097E  3461               	retlw	97
   895  097F  3474               	retlw	116
   896  0980  3431               	retlw	49
   897  0981  3421               	retlw	33
   898  0982  3421               	retlw	33
   899  0983  3400               	retlw	0
   900                           
   901                           ;initializer for main@F2008
   902  0984  3408               	retlw	8
   903  0985  3400               	retlw	0
   904  0986  3407               	retlw	7
   905  0987  3400               	retlw	0
   906  0988  3403               	retlw	3
   907  0989  3400               	retlw	0
   908  098A  3400               	retlw	0
   909  098B  3400               	retlw	0
   910  098C  3400               	retlw	0
   911  098D  3400               	retlw	0
   912                           
   913                           ;initializer for main@F2010
   914  098E  3400               	retlw	0
   915  098F  3400               	retlw	0
   916  0990  3401               	retlw	1
   917  0991  3400               	retlw	0
   918  0992  3407               	retlw	7
   919  0993  3400               	retlw	0
   920  0994  3404               	retlw	4
   921  0995  3400               	retlw	0
   922  0996  3407               	retlw	7
   923  0997  3400               	retlw	0
   924                           
   925                           ;initializer for main@F2012
   926  0998  3402               	retlw	2
   927  0999  3400               	retlw	0
   928  099A  3404               	retlw	4
   929  099B  3400               	retlw	0
   930  099C  3408               	retlw	8
   931  099D  3400               	retlw	0
   932  099E  3408               	retlw	8
   933  099F  3400               	retlw	0
   934  09A0  3407               	retlw	7
   935  09A1  3400               	retlw	0
   936                           
   937                           ;initializer for _FMRX_Nprg
   938  09A2  3402               	retlw	2
   939  09A3  3400               	retlw	0
   940  09A4  3404               	retlw	4
   941  09A5  3400               	retlw	0
   942  09A6  3408               	retlw	8
   943  09A7  3400               	retlw	0
   944  09A8  3408               	retlw	8
   945  09A9  3400               	retlw	0
   946  09AA  3407               	retlw	7
   947  09AB  3400               	retlw	0
   948                           
   949                           	psect	strings
   950  0800                     __pstrings:	
   951  0800                     stringtab:	
   952  0800                     __stringtab:	
   953  0800                     stringcode:	
   954                           ;	String table - string pointers are 1 byte each
   955                           
   956  0800                     stringdir:	
   957  0800  3008               	movlw	high stringdir
   958  0801  008A               	movwf	10
   959  0802  0804               	movf	4,w
   960  0803  0A84               	incf	4,f
   961  0804  0782               	addwf	2,f
   962  0805                     __stringbase:	
   963  0805  3400               	retlw	0
   964  0806                     __end_of__stringtab:	
   965  0806                     _commandSize:	
   966  0806  3420               	retlw	32
   967  0807  3400               	retlw	0
   968  0808                     __end_of_commandSize:	
   969  000E                     _TMR1	set	14
   970  000B                     _INTCONbits	set	11
   971  000C                     _PIR1bits	set	12
   972  0005                     _PORTA	set	5
   973  0005                     _PORTAbits	set	5
   974  0006                     _PORTB	set	6
   975  0007                     _PORTC	set	7
   976  0007                     _PORTCbits	set	7
   977  0008                     _PORTD	set	8
   978  0008                     _PORTDbits	set	8
   979  0009                     _PORTE	set	9
   980  0009                     _PORTEbits	set	9
   981  001A                     _RCREG	set	26
   982  0013                     _SSPBUF	set	19
   983  0014                     _SSPCON	set	20
   984  0003                     _STATUS	set	3
   985  0010                     _T1CONbits	set	16
   986  0019                     _TXREG	set	25
   987  00C4                     _CREN	set	196
   988  00C2                     _FERR	set	194
   989  00C1                     _OERR	set	193
   990  0029                     _RA1	set	41
   991  0032                     _RB2	set	50
   992  0034                     _RB4	set	52
   993  0035                     _RB5	set	53
   994  003A                     _RC2	set	58
   995  0065                     _RCIF	set	101
   996  00C6                     _RX9	set	198
   997  00C7                     _SPEN	set	199
   998  00C5                     _SREN	set	197
   999  0064                     _TXIF	set	100
  1000  008C                     _PIE1bits	set	140
  1001  0099                     _SPBRG	set	153
  1002  0093                     _SSPADD	set	147
  1003  0091                     _SSPCON2	set	145
  1004  0094                     _SSPSTAT	set	148
  1005  0085                     _TRISA	set	133
  1006  0086                     _TRISB	set	134
  1007  0087                     _TRISC	set	135
  1008  0088                     _TRISD	set	136
  1009  0089                     _TRISE	set	137
  1010  048D                     _ACKDT	set	1165
  1011  048C                     _ACKEN	set	1164
  1012  04C2                     _BRGH	set	1218
  1013  048A                     _PEN	set	1162
  1014  048B                     _RCEN	set	1163
  1015  0465                     _RCIE	set	1125
  1016  0489                     _RSEN	set	1161
  1017  0488                     _SEN	set	1160
  1018  04C4                     _SYNC	set	1220
  1019  04C6                     _TX9	set	1222
  1020  04C5                     _TXEN	set	1221
  1021  0464                     _TXIE	set	1124
  1022  0188                     _ANSEL	set	392
  1023  0189                     _ANSELH	set	393
  1024  0808                     STR_15:	
  1025  0808  3473               	retlw	115	;'s'
  1026  0809  3474               	retlw	116	;'t'
  1027  080A  3461               	retlw	97	;'a'
  1028  080B  3472               	retlw	114	;'r'
  1029  080C  3474               	retlw	116	;'t'
  1030  080D  340D               	retlw	13
  1031  080E  340A               	retlw	10
  1032  080F  3400               	retlw	0
  1033  0810                     STR_7:	
  1034  0810  344A               	retlw	74	;'J'
  1035  0811  3451               	retlw	81	;'Q'
  1036  0812  3431               	retlw	49	;'1'
  1037  0813  345A               	retlw	90	;'Z'
  1038  0814  3448               	retlw	72	;'H'
  1039  0815  3458               	retlw	88	;'X'
  1040  0816  3400               	retlw	0
  1041  0817                     STR_1:	
  1042  0817  344A               	retlw	74	;'J'
  1043  0818  3451               	retlw	81	;'Q'
  1044  0819  3431               	retlw	49	;'1'
  1045  081A  3459               	retlw	89	;'Y'
  1046  081B  3443               	retlw	67	;'C'
  1047  081C  345A               	retlw	90	;'Z'
  1048  081D  3400               	retlw	0
  1049  081E                     STR_16:	
  1050  081E  3425               	retlw	37	;'%'
  1051  081F  3463               	retlw	99	;'c'
  1052  0820  3400               	retlw	0
  1053  0810                     
  1054                           ; #config settings
  1055  0000                     
  1056                           	psect	cinit
  1057  07C0                     start_initialization:	
  1058  07C0                     __initialization:	
  1059                           
  1060                           ; Initialize objects allocated to BANK3
  1061  07C0  1783               	bsf	3,7	;select IRP bank2
  1062  07C1  30D1               	movlw	low (__pdataBANK3+65)
  1063  07C2  00FD               	movwf	btemp+-1
  1064  07C3  3009               	movlw	high __pidataBANK3
  1065  07C4  00FE               	movwf	btemp
  1066  07C5  306B               	movlw	low __pidataBANK3
  1067  07C6  00FF               	movwf	btemp+1
  1068  07C7  3090               	movlw	low __pdataBANK3
  1069  07C8  0084               	movwf	4
  1070  07C9  160A  118A  27CD  120A  118A  	fcall	init_ram0
  1071                           
  1072                           ; Initialize objects allocated to BANK1
  1073  07CE  1383               	bcf	3,7	;select IRP bank0
  1074  07CF  30DC               	movlw	low (__pdataBANK1+26)
  1075  07D0  00FD               	movwf	btemp+-1
  1076  07D1  3008               	movlw	high __pidataBANK1
  1077  07D2  00FE               	movwf	btemp
  1078  07D3  3059               	movlw	low __pidataBANK1
  1079  07D4  00FF               	movwf	btemp+1
  1080  07D5  30C2               	movlw	low __pdataBANK1
  1081  07D6  0084               	movwf	4
  1082  07D7  160A  118A  27CD  120A  118A  	fcall	init_ram0
  1083                           
  1084                           ; Clear objects allocated to BANK3
  1085  07DC  1783               	bsf	3,7	;select IRP bank2
  1086  07DD  30D1               	movlw	low __pbssBANK3
  1087  07DE  0084               	movwf	4
  1088  07DF  30E1               	movlw	low (__pbssBANK3+16)
  1089  07E0  160A  118A  27C1  120A  118A  	fcall	clear_ram0
  1090                           
  1091                           ; Clear objects allocated to BANK2
  1092  07E5  3010               	movlw	low __pbssBANK2
  1093  07E6  0084               	movwf	4
  1094  07E7  3062               	movlw	low (__pbssBANK2+82)
  1095  07E8  160A  118A  27C1  120A  118A  	fcall	clear_ram0
  1096                           
  1097                           ; Clear objects allocated to BANK1
  1098  07ED  1383               	bcf	3,7	;select IRP bank0
  1099  07EE  30DC               	movlw	low __pbssBANK1
  1100  07EF  0084               	movwf	4
  1101  07F0  30E9               	movlw	low (__pbssBANK1+13)
  1102  07F1  160A  118A  27C1  120A  118A  	fcall	clear_ram0
  1103                           
  1104                           ; Clear objects allocated to BANK0
  1105  07F6  3066               	movlw	low __pbssBANK0
  1106  07F7  0084               	movwf	4
  1107  07F8  3070               	movlw	low (__pbssBANK0+10)
  1108  07F9  160A  118A  27C1   	fcall	clear_ram0
  1109  07FC                     end_of_initialization:	
  1110                           ;End of C runtime variable initialization code
  1111                           
  1112  07FC                     __end_of__initialization:	
  1113  07FC  0183               	clrf	3
  1114  07FD  120A  158A  2E05   	ljmp	_main	;jump to C main() function
  1115                           
  1116                           	psect	bssBANK0
  1117  0066                     __pbssBANK0:	
  1118  0066                     _dPacketnum:	
  1119  0066                     	ds	2
  1120  0068                     _eflag:	
  1121  0068                     	ds	2
  1122  006A                     _rcv_state:	
  1123  006A                     	ds	2
  1124  006C                     _dfcshi:	
  1125  006C                     	ds	1
  1126  006D                     _dfcslo:	
  1127  006D                     	ds	1
  1128  006E                     _efcshi:	
  1129  006E                     	ds	1
  1130  006F                     _efcslo:	
  1131  006F                     	ds	1
  1132                           
  1133                           	psect	bssBANK1
  1134  00DC                     __pbssBANK1:	
  1135  00DC                     _ePacket:	
  1136  00DC                     	ds	5
  1137  00E1                     _ebitstatus:	
  1138  00E1                     	ds	2
  1139  00E3                     _efcsflag:	
  1140  00E3                     	ds	2
  1141  00E5                     _estuff:	
  1142  00E5                     	ds	2
  1143  00E7                     getbit@oldbit:	
  1144  00E7                     	ds	2
  1145                           
  1146                           	psect	dataBANK1
  1147  00C2                     __pdataBANK1:	
  1148  00C2                     _CWTX_Nref:	
  1149  00C2                     	ds	2
  1150  00C4                     _FMRX_Nref:	
  1151  00C4                     	ds	2
  1152  00C6                     _FMTX_Nref:	
  1153  00C6                     	ds	2
  1154  00C8                     _CWTX_Nprg:	
  1155  00C8                     	ds	10
  1156  00D2                     _FMTX_Nprg:	
  1157  00D2                     	ds	10
  1158                           
  1159                           	psect	bssBANK3
  1160  01D1                     __pbssBANK3:	
  1161  01D1                     _dData:	
  1162  01D1                     	ds	16
  1163                           
  1164                           	psect	dataBANK3
  1165  0190                     __pdataBANK3:	
  1166  0190                     _eDataField:	
  1167  0190                     	ds	25
  1168  01A9                     main@F2008:	
  1169  01A9                     	ds	10
  1170  01B3                     main@F2010:	
  1171  01B3                     	ds	10
  1172  01BD                     main@F2012:	
  1173  01BD                     	ds	10
  1174  01C7                     _FMRX_Nprg:	
  1175  01C7                     	ds	10
  1176                           
  1177                           	psect	bssBANK2
  1178  0110                     __pbssBANK2:	
  1179  0110                     _dPacket:	
  1180  0110                     	ds	50
  1181  0142                     _EEPROMData:	
  1182  0142                     	ds	32
  1183                           
  1184                           	psect	inittext
  1185  17C9                     init_fetch0:	
  1186                           ;	Called with low address in FSR and high address in W
  1187                           
  1188  17C9  087E               	movf	126,w
  1189  17CA  008A               	movwf	10
  1190  17CB  087F               	movf	127,w
  1191  17CC  0082               	movwf	2
  1192  17CD                     init_ram0:	
  1193                           ;Called with:
  1194                           ;	high address of idata address in btemp 
  1195                           ;	low address of idata address in btemp+1 
  1196                           ;	low address of data in FSR
  1197                           ;	high address + 1 of data in btemp-1
  1198                           
  1199  17CD  27C9  160A  118A   	fcall	init_fetch0
  1200  17D0  0080               	movwf	0
  1201  17D1  0A84               	incf	4,f
  1202  17D2  0804               	movf	4,w
  1203  17D3  067D               	xorwf	125,w
  1204  17D4  1903               	btfsc	3,2
  1205  17D5  3400               	retlw	0
  1206  17D6  0AFF               	incf	127,f
  1207  17D7  1903               	btfsc	3,2
  1208  17D8  0AFE               	incf	126,f
  1209  17D9  2FCD               	goto	init_ram0
  1210                           
  1211                           	psect	clrtext
  1212  17C1                     clear_ram0:	
  1213                           ;	Called with FSR containing the base address, and
  1214                           ;	W with the last address+1
  1215                           
  1216  17C1  0064               	clrwdt	;clear the watchdog before getting into this loop
  1217  17C2                     clrloop0:	
  1218  17C2  0180               	clrf	0	;clear RAM location pointed to by FSR
  1219  17C3  0A84               	incf	4,f	;increment pointer
  1220  17C4  0604               	xorwf	4,w	;XOR with final address
  1221  17C5  1903               	btfsc	3,2	;have we reached the end yet?
  1222  17C6  3400               	retlw	0	;all done for this memory range, return
  1223  17C7  0604               	xorwf	4,w	;XOR again to restore value
  1224  17C8  2FC2               	goto	clrloop0	;do the next byte
  1225                           
  1226                           	psect	cstackBANK1
  1227  00A0                     __pcstackBANK1:	
  1228  00A0                     main@FMTX_Nprg:	
  1229                           
  1230                           ; 10 bytes @ 0x0
  1231  00A0                     	ds	10
  1232  00AA                     main@CWTX_Nprg:	
  1233                           
  1234                           ; 10 bytes @ 0xA
  1235  00AA                     	ds	10
  1236  00B4                     main@FMRX_Nprg:	
  1237                           
  1238                           ; 10 bytes @ 0x14
  1239  00B4                     	ds	10
  1240  00BE                     main@NM_wad_header:	
  1241                           
  1242                           ; 1 bytes @ 0x1E
  1243  00BE                     	ds	1
  1244  00BF                     main@i:	
  1245                           
  1246                           ; 2 bytes @ 0x1F
  1247  00BF                     	ds	2
  1248  00C1                     main@dData:	
  1249                           
  1250                           ; 1 bytes @ 0x21
  1251  00C1                     	ds	1
  1252                           
  1253                           	psect	cstackCOMMON
  1254  0071                     __pcstackCOMMON:	
  1255  0071                     ??_Init_WDT:	
  1256  0071                     ?_Reset_EPS:	
  1257                           ; 1 bytes @ 0x0
  1258                           
  1259  0071                     ??_Reset_EPS:	
  1260                           ; 1 bytes @ 0x0
  1261                           
  1262  0071                     ?__NOP:	
  1263                           ; 1 bytes @ 0x0
  1264                           
  1265  0071                     ??__NOP:	
  1266                           ; 1 bytes @ 0x0
  1267                           
  1268  0071                     ?_Init_SERIAL:	
  1269                           ; 1 bytes @ 0x0
  1270                           
  1271  0071                     ??_Init_SERIAL:	
  1272                           ; 1 bytes @ 0x0
  1273                           
  1274  0071                     ?_putch:	
  1275                           ; 1 bytes @ 0x0
  1276                           
  1277  0071                     ??_putch:	
  1278                           ; 1 bytes @ 0x0
  1279                           
  1280  0071                     ?_Init_MPU:	
  1281                           ; 1 bytes @ 0x0
  1282                           
  1283  0071                     ??_Init_MPU:	
  1284                           ; 1 bytes @ 0x0
  1285                           
  1286  0071                     ?_waitFlag:	
  1287                           ; 1 bytes @ 0x0
  1288                           
  1289  0071                     ?_getdata:	
  1290                           ; 1 bytes @ 0x0
  1291                           
  1292  0071                     ?_ReceivePacket_data:	
  1293                           ; 1 bytes @ 0x0
  1294                           
  1295  0071                     ?_main:	
  1296                           ; 1 bytes @ 0x0
  1297                           
  1298  0071                     ?_I2C_Master_Wait:	
  1299                           ; 1 bytes @ 0x0
  1300                           
  1301  0071                     ??_I2C_Master_Wait:	
  1302                           ; 1 bytes @ 0x0
  1303                           
  1304  0071                     ?_I2C_Master_Start:	
  1305                           ; 1 bytes @ 0x0
  1306                           
  1307  0071                     ??_I2C_Master_Start:	
  1308                           ; 1 bytes @ 0x0
  1309                           
  1310  0071                     ?_I2C_Master_Stop:	
  1311                           ; 1 bytes @ 0x0
  1312                           
  1313  0071                     ??_I2C_Master_Stop:	
  1314                           ; 1 bytes @ 0x0
  1315                           
  1316  0071                     ?_I2C_Master_Write:	
  1317                           ; 1 bytes @ 0x0
  1318                           
  1319  0071                     ?_Init_WDT:	
  1320                           ; 1 bytes @ 0x0
  1321                           
  1322  0071                     ?_getbit:	
  1323                           ; 2 bytes @ 0x0
  1324                           
  1325  0071                     ?_fcscheck:	
  1326                           ; 2 bytes @ 0x0
  1327                           
  1328  0071                     ?___awdiv:	
  1329                           ; 2 bytes @ 0x0
  1330                           
  1331  0071                     ?___lldiv:	
  1332                           ; 2 bytes @ 0x0
  1333                           
  1334  0071                     putch@byte:	
  1335                           ; 4 bytes @ 0x0
  1336                           
  1337  0071                     I2C_Master_Write@d:	
  1338                           ; 1 bytes @ 0x0
  1339                           
  1340  0071                     __NOP@i:	
  1341                           ; 2 bytes @ 0x0
  1342                           
  1343  0071                     ___awdiv@divisor:	
  1344                           ; 2 bytes @ 0x0
  1345                           
  1346  0071                     ___lldiv@divisor:	
  1347                           ; 2 bytes @ 0x0
  1348                           
  1349                           
  1350                           ; 4 bytes @ 0x0
  1351  0071                     	ds	1
  1352  0072                     ?_NM_waddress:	
  1353  0072                     ?_printf:	
  1354                           ; 1 bytes @ 0x1
  1355                           
  1356  0072                     NM_waddress@whigh_address:	
  1357                           ; 2 bytes @ 0x1
  1358                           
  1359                           
  1360                           ; 1 bytes @ 0x1
  1361  0072                     	ds	1
  1362  0073                     ?_EEPROM_Write:	
  1363  0073                     ??_getbit:	
  1364                           ; 1 bytes @ 0x2
  1365                           
  1366  0073                     ??_fcscheck:	
  1367                           ; 1 bytes @ 0x2
  1368                           
  1369  0073                     ??_I2C_Master_Write:	
  1370                           ; 1 bytes @ 0x2
  1371                           
  1372  0073                     ?_L_OUT:	
  1373                           ; 1 bytes @ 0x2
  1374                           
  1375  0073                     ?_H_OUT:	
  1376                           ; 1 bytes @ 0x2
  1377                           
  1378  0073                     ?_STBOUT:	
  1379                           ; 1 bytes @ 0x2
  1380                           
  1381  0073                     NM_waddress@wlow_address:	
  1382                           ; 1 bytes @ 0x2
  1383                           
  1384  0073                     EEPROM_Write@high_address:	
  1385                           ; 1 bytes @ 0x2
  1386                           
  1387  0073                     L_OUT@fmcwtxrx:	
  1388                           ; 1 bytes @ 0x2
  1389                           
  1390  0073                     H_OUT@fmcwtxrx:	
  1391                           ; 2 bytes @ 0x2
  1392                           
  1393  0073                     STBOUT@fmcwtxrx:	
  1394                           ; 2 bytes @ 0x2
  1395                           
  1396  0073                     ___awdiv@dividend:	
  1397                           ; 2 bytes @ 0x2
  1398                           
  1399                           
  1400                           ; 2 bytes @ 0x2
  1401  0073                     	ds	1
  1402  0074                     ??_printf:	
  1403  0074                     ??_NM_waddress:	
  1404                           ; 1 bytes @ 0x3
  1405                           
  1406  0074                     NM_waddress@NM_wad_header:	
  1407                           ; 1 bytes @ 0x3
  1408                           
  1409  0074                     EEPROM_Write@low_address:	
  1410                           ; 1 bytes @ 0x3
  1411                           
  1412                           
  1413                           ; 1 bytes @ 0x3
  1414  0074                     	ds	1
  1415  0075                     ??_L_OUT:	
  1416  0075                     ??_H_OUT:	
  1417                           ; 1 bytes @ 0x4
  1418                           
  1419  0075                     ??_STBOUT:	
  1420                           ; 1 bytes @ 0x4
  1421                           
  1422  0075                     ?_OPINIT:	
  1423                           ; 1 bytes @ 0x4
  1424                           
  1425  0075                     ??___awdiv:	
  1426                           ; 1 bytes @ 0x4
  1427                           
  1428  0075                     fcscheck@bt:	
  1429                           ; 1 bytes @ 0x4
  1430                           
  1431  0075                     EEPROM_Write@data:	
  1432                           ; 1 bytes @ 0x4
  1433                           
  1434  0075                     printf@flag:	
  1435                           ; 1 bytes @ 0x4
  1436                           
  1437  0075                     getbit@i:	
  1438                           ; 1 bytes @ 0x4
  1439                           
  1440  0075                     OPINIT@fmcwtxrx:	
  1441                           ; 2 bytes @ 0x4
  1442                           
  1443  0075                     ___lldiv@dividend:	
  1444                           ; 2 bytes @ 0x4
  1445                           
  1446                           
  1447                           ; 4 bytes @ 0x4
  1448  0075                     	ds	1
  1449  0076                     ??_EEPROM_Write:	
  1450  0076                     printf@ap:	
  1451                           ; 1 bytes @ 0x5
  1452                           
  1453  0076                     ___awdiv@counter:	
  1454                           ; 1 bytes @ 0x5
  1455                           
  1456  0076                     fcscheck@i:	
  1457                           ; 1 bytes @ 0x5
  1458                           
  1459                           
  1460                           ; 2 bytes @ 0x5
  1461  0076                     	ds	1
  1462  0077                     ??_waitFlag:	
  1463  0077                     ??_getdata:	
  1464                           ; 1 bytes @ 0x6
  1465                           
  1466  0077                     ??_OPINIT:	
  1467                           ; 1 bytes @ 0x6
  1468                           
  1469  0077                     printf@f:	
  1470                           ; 1 bytes @ 0x6
  1471                           
  1472  0077                     ___awdiv@sign:	
  1473                           ; 1 bytes @ 0x6
  1474                           
  1475                           
  1476                           ; 1 bytes @ 0x6
  1477  0077                     	ds	1
  1478  0078                     printf@c:	
  1479  0078                     fcscheck@i_142:	
  1480                           ; 1 bytes @ 0x7
  1481                           
  1482  0078                     ___awdiv@quotient:	
  1483                           ; 2 bytes @ 0x7
  1484                           
  1485                           
  1486                           ; 2 bytes @ 0x7
  1487  0078                     	ds	1
  1488  0079                     ??___lldiv:	
  1489  0079                     EEPROM_Write@EEPROM_address:	
  1490                           ; 1 bytes @ 0x8
  1491                           
  1492                           
  1493                           ; 1 bytes @ 0x8
  1494  0079                     	ds	1
  1495  007A                     ??_Init_I2C_M:	
  1496  007A                     ?_OUTFQ:	
  1497                           ; 1 bytes @ 0x9
  1498                           
  1499  007A                     ?_RFDOUT:	
  1500                           ; 1 bytes @ 0x9
  1501                           
  1502  007A                     fcscheck@byte:	
  1503                           ; 1 bytes @ 0x9
  1504                           
  1505  007A                     EEPROM_Write@Address:	
  1506                           ; 1 bytes @ 0x9
  1507                           
  1508  007A                     OUTFQ@fmcwtxrx:	
  1509                           ; 1 bytes @ 0x9
  1510                           
  1511  007A                     RFDOUT@fmcwtxrx:	
  1512                           ; 2 bytes @ 0x9
  1513                           
  1514                           
  1515                           ; 2 bytes @ 0x9
  1516  007A                     	ds	1
  1517  007B                     ??_ReceivePacket_data:	
  1518                           
  1519                           ; 1 bytes @ 0xA
  1520  007B                     	ds	1
  1521  007C                     OUTFQ@Nprg:	
  1522  007C                     RFDOUT@Nref:	
  1523                           ; 2 bytes @ 0xB
  1524                           
  1525                           
  1526                           ; 2 bytes @ 0xB
  1527  007C                     	ds	2
  1528  007E                     ??_FMTX:	
  1529  007E                     ??_CWTX:	
  1530                           ; 1 bytes @ 0xD
  1531                           
  1532  007E                     ??_FMRX:	
  1533                           ; 1 bytes @ 0xD
  1534                           
  1535                           
  1536                           	psect	cstackBANK0
  1537  0020                     __pcstackBANK0:	
  1538                           ; 1 bytes @ 0xD
  1539                           
  1540  0020                     ??_OUTFQ:	
  1541  0020                     ??_RFDOUT:	
  1542                           ; 1 bytes @ 0x0
  1543                           
  1544  0020                     waitFlag@i:	
  1545                           ; 1 bytes @ 0x0
  1546                           
  1547  0020                     getdata@bufstore_counter:	
  1548                           ; 2 bytes @ 0x0
  1549                           
  1550  0020                     ___lldiv@quotient:	
  1551                           ; 2 bytes @ 0x0
  1552                           
  1553                           
  1554                           ; 4 bytes @ 0x0
  1555  0020                     	ds	2
  1556  0022                     waitFlag@j:	
  1557  0022                     getdata@dstuff:	
  1558                           ; 2 bytes @ 0x2
  1559                           
  1560                           
  1561                           ; 2 bytes @ 0x2
  1562  0022                     	ds	1
  1563  0023                     RFDOUT@Nref_b:	
  1564                           
  1565                           ; 24 bytes @ 0x3
  1566  0023                     	ds	1
  1567  0024                     ___lldiv@counter:	
  1568  0024                     waitFlag@j_111:	
  1569                           ; 1 bytes @ 0x4
  1570                           
  1571  0024                     getdata@dbitstatus:	
  1572                           ; 2 bytes @ 0x4
  1573                           
  1574                           
  1575                           ; 2 bytes @ 0x4
  1576  0024                     	ds	1
  1577  0025                     ?_Init_I2C_M:	
  1578  0025                     Init_I2C_M@c:	
  1579                           ; 1 bytes @ 0x5
  1580                           
  1581                           
  1582                           ; 4 bytes @ 0x5
  1583  0025                     	ds	1
  1584  0026                     getdata@buf:	
  1585  0026                     waitFlag@j_113:	
  1586                           ; 1 bytes @ 0x6
  1587                           
  1588                           
  1589                           ; 2 bytes @ 0x6
  1590  0026                     	ds	2
  1591  0028                     waitFlag@j_115:	
  1592                           
  1593                           ; 2 bytes @ 0x8
  1594  0028                     	ds	2
  1595  002A                     waitFlag@j_117:	
  1596                           
  1597                           ; 2 bytes @ 0xA
  1598  002A                     	ds	2
  1599  002C                     waitFlag@j_119:	
  1600                           
  1601                           ; 2 bytes @ 0xC
  1602  002C                     	ds	2
  1603  002E                     waitFlag@j_120:	
  1604                           
  1605                           ; 2 bytes @ 0xE
  1606  002E                     	ds	2
  1607  0030                     waitFlag@j_122:	
  1608  0030                     OUTFQ@Nprg_b:	
  1609                           ; 2 bytes @ 0x10
  1610                           
  1611                           
  1612                           ; 34 bytes @ 0x10
  1613  0030                     	ds	2
  1614  0032                     waitFlag@j_124:	
  1615                           
  1616                           ; 2 bytes @ 0x12
  1617  0032                     	ds	2
  1618  0034                     waitFlag@j_126:	
  1619                           
  1620                           ; 2 bytes @ 0x14
  1621  0034                     	ds	2
  1622  0036                     waitFlag@j_128:	
  1623                           
  1624                           ; 2 bytes @ 0x16
  1625  0036                     	ds	2
  1626  0038                     waitFlag@j_130:	
  1627                           
  1628                           ; 2 bytes @ 0x18
  1629  0038                     	ds	2
  1630  003A                     waitFlag@flag_judge:	
  1631                           
  1632                           ; 2 bytes @ 0x1A
  1633  003A                     	ds	1
  1634  003B                     RFDOUT@i_477:	
  1635                           
  1636                           ; 2 bytes @ 0x1B
  1637  003B                     	ds	1
  1638  003C                     waitFlag@buf:	
  1639                           
  1640                           ; 1 bytes @ 0x1C
  1641  003C                     	ds	1
  1642  003D                     ReceivePacket_data@fcschecker:	
  1643  003D                     RFDOUT@i:	
  1644                           ; 2 bytes @ 0x1D
  1645                           
  1646                           
  1647                           ; 2 bytes @ 0x1D
  1648  003D                     	ds	2
  1649  003F                     ReceivePacket_data@i:	
  1650  003F                     RFDOUT@i_478:	
  1651                           ; 2 bytes @ 0x1F
  1652                           
  1653                           
  1654                           ; 2 bytes @ 0x1F
  1655  003F                     	ds	19
  1656  0052                     OUTFQ@i_466:	
  1657                           
  1658                           ; 2 bytes @ 0x32
  1659  0052                     	ds	2
  1660  0054                     OUTFQ@count:	
  1661                           
  1662                           ; 2 bytes @ 0x34
  1663  0054                     	ds	2
  1664  0056                     OUTFQ@i:	
  1665                           
  1666                           ; 2 bytes @ 0x36
  1667  0056                     	ds	2
  1668  0058                     OUTFQ@i_468:	
  1669                           
  1670                           ; 2 bytes @ 0x38
  1671  0058                     	ds	2
  1672  005A                     OUTFQ@j:	
  1673                           
  1674                           ; 2 bytes @ 0x3A
  1675  005A                     	ds	2
  1676  005C                     ?_FMTX:	
  1677  005C                     ?_CWTX:	
  1678                           ; 1 bytes @ 0x3C
  1679                           
  1680  005C                     ?_FMRX:	
  1681                           ; 1 bytes @ 0x3C
  1682                           
  1683  005C                     FMTX@Nref:	
  1684                           ; 1 bytes @ 0x3C
  1685                           
  1686  005C                     CWTX@Nref:	
  1687                           ; 2 bytes @ 0x3C
  1688                           
  1689  005C                     FMRX@Nref:	
  1690                           ; 2 bytes @ 0x3C
  1691                           
  1692                           
  1693                           ; 2 bytes @ 0x3C
  1694  005C                     	ds	2
  1695  005E                     FMTX@Nprg:	
  1696  005E                     CWTX@Nprg:	
  1697                           ; 2 bytes @ 0x3E
  1698                           
  1699  005E                     FMRX@Nprg:	
  1700                           ; 2 bytes @ 0x3E
  1701                           
  1702                           
  1703                           ; 2 bytes @ 0x3E
  1704  005E                     	ds	2
  1705  0060                     FMTX@fmtx:	
  1706  0060                     CWTX@cwtx:	
  1707                           ; 2 bytes @ 0x40
  1708                           
  1709  0060                     FMRX@fmrx:	
  1710                           ; 2 bytes @ 0x40
  1711                           
  1712                           
  1713                           ; 2 bytes @ 0x40
  1714  0060                     	ds	2
  1715  0062                     ??_main:	
  1716                           
  1717                           ; 1 bytes @ 0x42
  1718  0062                     	ds	4
  1719                           
  1720                           	psect	maintext
  1721  0E05                     __pmaintext:	
  1722 ;;
  1723 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1724 ;;
  1725 ;; *************** function _main *****************
  1726 ;; Defined at:
  1727 ;;		line 38 in file "main.c"
  1728 ;; Parameters:    Size  Location     Type
  1729 ;;		None
  1730 ;; Auto vars:     Size  Location     Type
  1731 ;;  FMRX_Nprg      10   20[BANK1 ] int [5]
  1732 ;;  CWTX_Nprg      10   10[BANK1 ] int [5]
  1733 ;;  FMTX_Nprg      10    0[BANK1 ] int [5]
  1734 ;;  NM_wad_heade    1   30[BANK1 ] unsigned char 
  1735 ;;  i               2   31[BANK1 ] unsigned int 
  1736 ;;  dData           1   33[BANK1 ] PTR unsigned char 
  1737 ;;		 -> NULL(0), dData(16), 
  1738 ;; Return value:  Size  Location     Type
  1739 ;;                  1    wreg      void 
  1740 ;; Registers used:
  1741 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1742 ;; Tracked objects:
  1743 ;;		On entry : B00/0
  1744 ;;		On exit  : 0/0
  1745 ;;		Unchanged: 0/0
  1746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1747 ;;      Params:         0       0       0       0       0
  1748 ;;      Locals:         0       0      34       0       0
  1749 ;;      Temps:          0       4       0       0       0
  1750 ;;      Totals:         0       4      34       0       0
  1751 ;;Total ram usage:       38 bytes
  1752 ;; Hardware stack levels required when called:    4
  1753 ;; This function calls:
  1754 ;;		_CWTX
  1755 ;;		_EEPROM_Write
  1756 ;;		_FMRX
  1757 ;;		_FMTX
  1758 ;;		_Init_I2C_M
  1759 ;;		_Init_MPU
  1760 ;;		_Init_SERIAL
  1761 ;;		_Init_WDT
  1762 ;;		_NM_waddress
  1763 ;;		_ReceivePacket_data
  1764 ;;		_Reset_EPS
  1765 ;;		_printf
  1766 ;; This function is called by:
  1767 ;;		Startup code after reset
  1768 ;; This function uses a non-reentrant model
  1769 ;;
  1770                           
  1771                           
  1772                           ;psect for function _main
  1773  0E05                     _main:	
  1774                           
  1775                           ;main.c: 43: _delay((unsigned long)((500)*(10000000/4000.0)));
  1776                           
  1777                           ;incstack = 0
  1778                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1779  0E05  3007               	movlw	7
  1780  0E06  1283               	bcf	3,5	;RP0=0, select bank0
  1781  0E07  1303               	bcf	3,6	;RP1=0, select bank0
  1782  0E08  00E4               	movwf	??_main+2
  1783  0E09  3058               	movlw	88
  1784  0E0A  00E3               	movwf	??_main+1
  1785  0E0B  305E               	movlw	94
  1786  0E0C  00E2               	movwf	??_main
  1787  0E0D                     u3627:	
  1788  0E0D  0BE2               	decfsz	??_main,f
  1789  0E0E  2E0D               	goto	u3627
  1790  0E0F  0BE3               	decfsz	??_main+1,f
  1791  0E10  2E0D               	goto	u3627
  1792  0E11  0BE4               	decfsz	??_main+2,f
  1793  0E12  2E0D               	goto	u3627
  1794  0E13  2E14               	nop2
  1795                           
  1796                           ;main.c: 45: Init_SERIAL();
  1797  0E14  120A  158A  2040  120A  158A  	fcall	_Init_SERIAL
  1798                           
  1799                           ;main.c: 46: Init_MPU();
  1800  0E19  120A  158A  2073  120A  158A  	fcall	_Init_MPU
  1801                           
  1802                           ;main.c: 47: Init_I2C_M(400000);
  1803  0E1E  3000               	movlw	0
  1804  0E1F  1283               	bcf	3,5	;RP0=0, select bank0
  1805  0E20  1303               	bcf	3,6	;RP1=0, select bank0
  1806  0E21  00A8               	movwf	Init_I2C_M@c+3
  1807  0E22  3006               	movlw	6
  1808  0E23  00A7               	movwf	Init_I2C_M@c+2
  1809  0E24  301A               	movlw	26
  1810  0E25  00A6               	movwf	Init_I2C_M@c+1
  1811  0E26  3080               	movlw	128
  1812  0E27  00A5               	movwf	Init_I2C_M@c
  1813  0E28  120A  158A  2137  120A  158A  	fcall	_Init_I2C_M
  1814                           
  1815                           ;main.c: 48: Init_WDT();
  1816  0E2D  160A  118A  27EC  120A  158A  	fcall	_Init_WDT
  1817                           
  1818                           ;main.c: 53: RB2 = 1;
  1819  0E32  1283               	bcf	3,5	;RP0=0, select bank0
  1820  0E33  1303               	bcf	3,6	;RP1=0, select bank0
  1821  0E34  1506               	bsf	6,2	;volatile
  1822                           
  1823                           ;main.c: 54: _delay((unsigned long)((500)*(10000000/4000.0)));
  1824  0E35  3007               	movlw	7
  1825  0E36  00E4               	movwf	??_main+2
  1826  0E37  3058               	movlw	88
  1827  0E38  00E3               	movwf	??_main+1
  1828  0E39  305E               	movlw	94
  1829  0E3A  00E2               	movwf	??_main
  1830  0E3B                     u3637:	
  1831  0E3B  0BE2               	decfsz	??_main,f
  1832  0E3C  2E3B               	goto	u3637
  1833  0E3D  0BE3               	decfsz	??_main+1,f
  1834  0E3E  2E3B               	goto	u3637
  1835  0E3F  0BE4               	decfsz	??_main+2,f
  1836  0E40  2E3B               	goto	u3637
  1837  0E41  2E42               	nop2
  1838                           
  1839                           ;main.c: 56: FMTX(FMTX_Nref, FMTX_Nprg);
  1840  0E42  1683               	bsf	3,5	;RP0=1, select bank1
  1841  0E43  1303               	bcf	3,6	;RP1=0, select bank1
  1842  0E44  0847               	movf	(_FMTX_Nref+1)^(0+128),w
  1843  0E45  1283               	bcf	3,5	;RP0=0, select bank0
  1844  0E46  1303               	bcf	3,6	;RP1=0, select bank0
  1845  0E47  00DD               	movwf	FMTX@Nref+1
  1846  0E48  1683               	bsf	3,5	;RP0=1, select bank1
  1847  0E49  1303               	bcf	3,6	;RP1=0, select bank1
  1848  0E4A  0846               	movf	_FMTX_Nref^(0+128),w
  1849  0E4B  1283               	bcf	3,5	;RP0=0, select bank0
  1850  0E4C  1303               	bcf	3,6	;RP1=0, select bank0
  1851  0E4D  00DC               	movwf	FMTX@Nref
  1852  0E4E  30D2               	movlw	(low (_FMTX_Nprg| 0))& (0+255)
  1853  0E4F  00DE               	movwf	FMTX@Nprg
  1854  0E50  3000               	movlw	0
  1855  0E51  00DF               	movwf	FMTX@Nprg+1
  1856  0E52  120A  158A  210B  120A  158A  	fcall	_FMTX
  1857                           
  1858                           ;main.c: 57: CWTX(CWTX_Nref, CWTX_Nprg);
  1859  0E57  1683               	bsf	3,5	;RP0=1, select bank1
  1860  0E58  1303               	bcf	3,6	;RP1=0, select bank1
  1861  0E59  0843               	movf	(_CWTX_Nref+1)^(0+128),w
  1862  0E5A  1283               	bcf	3,5	;RP0=0, select bank0
  1863  0E5B  1303               	bcf	3,6	;RP1=0, select bank0
  1864  0E5C  00DD               	movwf	CWTX@Nref+1
  1865  0E5D  1683               	bsf	3,5	;RP0=1, select bank1
  1866  0E5E  1303               	bcf	3,6	;RP1=0, select bank1
  1867  0E5F  0842               	movf	_CWTX_Nref^(0+128),w
  1868  0E60  1283               	bcf	3,5	;RP0=0, select bank0
  1869  0E61  1303               	bcf	3,6	;RP1=0, select bank0
  1870  0E62  00DC               	movwf	CWTX@Nref
  1871  0E63  30C8               	movlw	(low (_CWTX_Nprg| 0))& (0+255)
  1872  0E64  00DE               	movwf	CWTX@Nprg
  1873  0E65  3000               	movlw	0
  1874  0E66  00DF               	movwf	CWTX@Nprg+1
  1875  0E67  120A  158A  20B3  120A  158A  	fcall	_CWTX
  1876                           
  1877                           ;main.c: 58: FMRX(FMRX_Nref, FMRX_Nprg);
  1878  0E6C  1683               	bsf	3,5	;RP0=1, select bank1
  1879  0E6D  1303               	bcf	3,6	;RP1=0, select bank1
  1880  0E6E  0845               	movf	(_FMRX_Nref+1)^(0+128),w
  1881  0E6F  1283               	bcf	3,5	;RP0=0, select bank0
  1882  0E70  1303               	bcf	3,6	;RP1=0, select bank0
  1883  0E71  00DD               	movwf	FMRX@Nref+1
  1884  0E72  1683               	bsf	3,5	;RP0=1, select bank1
  1885  0E73  1303               	bcf	3,6	;RP1=0, select bank1
  1886  0E74  0844               	movf	_FMRX_Nref^(0+128),w
  1887  0E75  1283               	bcf	3,5	;RP0=0, select bank0
  1888  0E76  1303               	bcf	3,6	;RP1=0, select bank0
  1889  0E77  00DC               	movwf	FMRX@Nref
  1890  0E78  30C7               	movlw	(low (_FMRX_Nprg| (0+256)))& (0+255)
  1891  0E79  00DE               	movwf	FMRX@Nprg
  1892  0E7A  3001               	movlw	1
  1893  0E7B  00DF               	movwf	FMRX@Nprg+1
  1894  0E7C  120A  158A  20DF  120A  158A  	fcall	_FMRX
  1895                           
  1896                           ;main.c: 59: RB2 = 0;
  1897  0E81  1283               	bcf	3,5	;RP0=0, select bank0
  1898  0E82  1303               	bcf	3,6	;RP1=0, select bank0
  1899  0E83  1106               	bcf	6,2	;volatile
  1900                           
  1901                           ;main.c: 60: printf("start\r\n");
  1902  0E84  3003               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1903  0E85  120A  158A  2238  120A  158A  	fcall	_printf
  1904  0E8A                     l3811:	
  1905                           ;main.c: 61: while(1){
  1906                           
  1907                           
  1908                           ;main.c: 75: UBYTE *dData;
  1909                           ;main.c: 76: dData = ReceivePacket_data();
  1910  0E8A  120A  158A  2442  120A  158A  	fcall	_ReceivePacket_data
  1911  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  1912  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  1913  0E91  00E2               	movwf	??_main
  1914  0E92  0862               	movf	??_main,w
  1915  0E93  1683               	bsf	3,5	;RP0=1, select bank1
  1916  0E94  1303               	bcf	3,6	;RP1=0, select bank1
  1917  0E95  00C1               	movwf	main@dData^(0+128)
  1918                           
  1919                           ;main.c: 77: RB2 = 1;
  1920  0E96  1283               	bcf	3,5	;RP0=0, select bank0
  1921  0E97  1303               	bcf	3,6	;RP1=0, select bank0
  1922  0E98  1506               	bsf	6,2	;volatile
  1923                           
  1924                           ;main.c: 78: _delay((unsigned long)((500)*(10000000/4000.0)));
  1925  0E99  3007               	movlw	7
  1926  0E9A  00E4               	movwf	??_main+2
  1927  0E9B  3058               	movlw	88
  1928  0E9C  00E3               	movwf	??_main+1
  1929  0E9D  305E               	movlw	94
  1930  0E9E  00E2               	movwf	??_main
  1931  0E9F                     u3647:	
  1932  0E9F  0BE2               	decfsz	??_main,f
  1933  0EA0  2E9F               	goto	u3647
  1934  0EA1  0BE3               	decfsz	??_main+1,f
  1935  0EA2  2E9F               	goto	u3647
  1936  0EA3  0BE4               	decfsz	??_main+2,f
  1937  0EA4  2E9F               	goto	u3647
  1938  0EA5  2EA6               	nop2
  1939                           
  1940                           ;main.c: 79: RB2 = 0;
  1941  0EA6  1283               	bcf	3,5	;RP0=0, select bank0
  1942  0EA7  1303               	bcf	3,6	;RP1=0, select bank0
  1943  0EA8  1106               	bcf	6,2	;volatile
  1944                           
  1945                           ;main.c: 82: EEPROM_Write(0x50,0x00,0x00,dData);
  1946  0EA9  01F3               	clrf	EEPROM_Write@high_address
  1947  0EAA  01F4               	clrf	EEPROM_Write@low_address
  1948  0EAB  1683               	bsf	3,5	;RP0=1, select bank1
  1949  0EAC  1303               	bcf	3,6	;RP1=0, select bank1
  1950  0EAD  0841               	movf	main@dData^(0+128),w
  1951  0EAE  1283               	bcf	3,5	;RP0=0, select bank0
  1952  0EAF  1303               	bcf	3,6	;RP1=0, select bank0
  1953  0EB0  00E2               	movwf	??_main
  1954  0EB1  0862               	movf	??_main,w
  1955  0EB2  00F5               	movwf	EEPROM_Write@data
  1956  0EB3  3050               	movlw	80
  1957  0EB4  120A  158A  2324  120A  158A  	fcall	_EEPROM_Write
  1958                           
  1959                           ;main.c: 84: for (UINT i = 0;i < 32;i++){
  1960  0EB9  1683               	bsf	3,5	;RP0=1, select bank1
  1961  0EBA  1303               	bcf	3,6	;RP1=0, select bank1
  1962  0EBB  01BF               	clrf	main@i^(0+128)
  1963  0EBC  01C0               	clrf	(main@i+1)^(0+128)
  1964  0EBD  3000               	movlw	0
  1965  0EBE  0240               	subwf	(main@i+1)^(0+128),w
  1966  0EBF  3020               	movlw	32
  1967  0EC0  1903               	skipnz
  1968  0EC1  023F               	subwf	main@i^(0+128),w
  1969  0EC2  1803               	btfsc	3,0
  1970  0EC3  2EF3               	goto	l3833
  1971  0EC4                     l3825:	
  1972                           
  1973                           ;main.c: 85: printf("%c", dData[i]);
  1974  0EC4  083F               	movf	main@i^(0+128),w
  1975  0EC5  0741               	addwf	main@dData^(0+128),w
  1976  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  1977  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  1978  0EC8  00E2               	movwf	??_main
  1979  0EC9  0862               	movf	??_main,w
  1980  0ECA  0084               	movwf	4
  1981  0ECB  1783               	bsf	3,7	;select IRP bank2
  1982  0ECC  0800               	movf	0,w
  1983  0ECD  00E3               	movwf	??_main+1
  1984  0ECE  01E4               	clrf	??_main+2
  1985  0ECF  0863               	movf	??_main+1,w
  1986  0ED0  00F2               	movwf	?_printf
  1987  0ED1  0864               	movf	??_main+2,w
  1988  0ED2  00F3               	movwf	?_printf+1
  1989  0ED3  3019               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  1990  0ED4  120A  158A  2238  120A  158A  	fcall	_printf
  1991                           
  1992                           ;main.c: 86: dData[i] = 0x00;
  1993  0ED9  1683               	bsf	3,5	;RP0=1, select bank1
  1994  0EDA  1303               	bcf	3,6	;RP1=0, select bank1
  1995  0EDB  083F               	movf	main@i^(0+128),w
  1996  0EDC  0741               	addwf	main@dData^(0+128),w
  1997  0EDD  1283               	bcf	3,5	;RP0=0, select bank0
  1998  0EDE  1303               	bcf	3,6	;RP1=0, select bank0
  1999  0EDF  00E2               	movwf	??_main
  2000  0EE0  0862               	movf	??_main,w
  2001  0EE1  0084               	movwf	4
  2002  0EE2  1783               	bsf	3,7	;select IRP bank2
  2003  0EE3  0180               	clrf	0
  2004  0EE4  3001               	movlw	1
  2005  0EE5  1683               	bsf	3,5	;RP0=1, select bank1
  2006  0EE6  1303               	bcf	3,6	;RP1=0, select bank1
  2007  0EE7  07BF               	addwf	main@i^(0+128),f
  2008  0EE8  1803               	skipnc
  2009  0EE9  0AC0               	incf	(main@i+1)^(0+128),f
  2010  0EEA  3000               	movlw	0
  2011  0EEB  07C0               	addwf	(main@i+1)^(0+128),f
  2012  0EEC  3000               	movlw	0
  2013  0EED  0240               	subwf	(main@i+1)^(0+128),w
  2014  0EEE  3020               	movlw	32
  2015  0EEF  1903               	skipnz
  2016  0EF0  023F               	subwf	main@i^(0+128),w
  2017  0EF1  1C03               	skipc
  2018  0EF2  2EC4               	goto	l3825
  2019  0EF3                     l3833:	
  2020                           
  2021                           ;main.c: 87: }
  2022                           ;main.c: 93: if(dData[0]=='n'){
  2023  0EF3  0841               	movf	main@dData^(0+128),w
  2024  0EF4  0084               	movwf	4
  2025  0EF5  306E               	movlw	110
  2026  0EF6  1783               	bsf	3,7	;select IRP bank2
  2027  0EF7  0600               	xorwf	0,w
  2028  0EF8  1D03               	btfss	3,2
  2029  0EF9  2F0B               	goto	l3839
  2030                           
  2031                           ;main.c: 95: UBYTE NM_wad_header = 0x72;
  2032  0EFA  3072               	movlw	114
  2033  0EFB  1283               	bcf	3,5	;RP0=0, select bank0
  2034  0EFC  1303               	bcf	3,6	;RP1=0, select bank0
  2035  0EFD  00E2               	movwf	??_main
  2036  0EFE  0862               	movf	??_main,w
  2037  0EFF  1683               	bsf	3,5	;RP0=1, select bank1
  2038  0F00  1303               	bcf	3,6	;RP1=0, select bank1
  2039  0F01  00BE               	movwf	main@NM_wad_header^(0+128)
  2040                           
  2041                           ;main.c: 96: NM_waddress(NM_wad_header, 0x00, 0x00);
  2042  0F02  01F2               	clrf	NM_waddress@whigh_address
  2043  0F03  01F3               	clrf	NM_waddress@wlow_address
  2044  0F04  083E               	movf	main@NM_wad_header^(0+128),w
  2045  0F05  160A  118A  27DA  120A  158A  	fcall	_NM_waddress
  2046                           
  2047                           ;main.c: 98: }else if(dData[0]=='p'){
  2048  0F0A  2FF0               	goto	l3875
  2049  0F0B                     l3839:	
  2050  0F0B  1683               	bsf	3,5	;RP0=1, select bank1
  2051  0F0C  1303               	bcf	3,6	;RP1=0, select bank1
  2052  0F0D  0841               	movf	main@dData^(0+128),w
  2053  0F0E  0084               	movwf	4
  2054  0F0F  3070               	movlw	112
  2055  0F10  1783               	bsf	3,7	;select IRP bank2
  2056  0F11  0600               	xorwf	0,w
  2057  0F12  1D03               	btfss	3,2
  2058  0F13  2FF0               	goto	l3875
  2059                           
  2060                           ;main.c: 100: RB2 = 1;
  2061  0F14  1283               	bcf	3,5	;RP0=0, select bank0
  2062  0F15  1303               	bcf	3,6	;RP1=0, select bank0
  2063  0F16  1506               	bsf	6,2	;volatile
  2064                           
  2065                           ;main.c: 101: _delay((unsigned long)((500)*(10000000/4000.0)));
  2066  0F17  3007               	movlw	7
  2067  0F18  00E4               	movwf	??_main+2
  2068  0F19  3058               	movlw	88
  2069  0F1A  00E3               	movwf	??_main+1
  2070  0F1B  305E               	movlw	94
  2071  0F1C  00E2               	movwf	??_main
  2072  0F1D                     u3657:	
  2073  0F1D  0BE2               	decfsz	??_main,f
  2074  0F1E  2F1D               	goto	u3657
  2075  0F1F  0BE3               	decfsz	??_main+1,f
  2076  0F20  2F1D               	goto	u3657
  2077  0F21  0BE4               	decfsz	??_main+2,f
  2078  0F22  2F1D               	goto	u3657
  2079  0F23  2F24               	nop2
  2080                           
  2081                           ;main.c: 102: RB2 = 0;
  2082  0F24  1283               	bcf	3,5	;RP0=0, select bank0
  2083  0F25  1303               	bcf	3,6	;RP1=0, select bank0
  2084  0F26  1106               	bcf	6,2	;volatile
  2085                           
  2086                           ;main.c: 103: if(dData[2] == 'r'){
  2087  0F27  1683               	bsf	3,5	;RP0=1, select bank1
  2088  0F28  1303               	bcf	3,6	;RP1=0, select bank1
  2089  0F29  0841               	movf	main@dData^(0+128),w
  2090  0F2A  3E02               	addlw	2
  2091  0F2B  0084               	movwf	4
  2092  0F2C  3072               	movlw	114
  2093  0F2D  1783               	bsf	3,7	;select IRP bank2
  2094  0F2E  0600               	xorwf	0,w
  2095  0F2F  1903               	btfsc	3,2
  2096  0F30  2FD9               	goto	l3871
  2097  0F31  2FF0               	goto	l3875
  2098  0F32                     l3851:	
  2099                           ;main.c: 109: case 'E':
  2100                           
  2101                           ;main.c: 108: switch(dData[3]){
  2102                           
  2103                           
  2104                           ;main.c: 114: Reset_EPS();
  2105  0F32  120A  158A  2090  120A  158A  	fcall	_Reset_EPS
  2106                           
  2107                           ;main.c: 115: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2108  0F37  3040               	movlw	64
  2109  0F38  1283               	bcf	3,5	;RP0=0, select bank0
  2110  0F39  1303               	bcf	3,6	;RP1=0, select bank0
  2111  0F3A  00E4               	movwf	??_main+2
  2112  0F3B  306A               	movlw	106
  2113  0F3C  00E3               	movwf	??_main+1
  2114  0F3D  30D5               	movlw	213
  2115  0F3E  00E2               	movwf	??_main
  2116  0F3F                     u3667:	
  2117  0F3F  0BE2               	decfsz	??_main,f
  2118  0F40  2F3F               	goto	u3667
  2119  0F41  0BE3               	decfsz	??_main+1,f
  2120  0F42  2F3F               	goto	u3667
  2121  0F43  0BE4               	decfsz	??_main+2,f
  2122  0F44  2F3F               	goto	u3667
  2123  0F45  2F46               	nop2
  2124                           
  2125                           ;main.c: 118: int FMTX_Nprg[5] = {8,7,3,0,0};
  2126  0F46  30A0               	movlw	main@FMTX_Nprg& (0+255)
  2127  0F47  0084               	movwf	4
  2128  0F48  30A9               	movlw	low main@F2008
  2129  0F49  1283               	bcf	3,5	;RP0=0, select bank0
  2130  0F4A  1303               	bcf	3,6	;RP1=0, select bank0
  2131  0F4B  00E2               	movwf	??_main
  2132  0F4C  0804               	movf	4,w
  2133  0F4D  00E3               	movwf	??_main+1
  2134  0F4E  300A               	movlw	10
  2135  0F4F  00E4               	movwf	??_main+2
  2136  0F50                     u3570:	
  2137  0F50  0862               	movf	??_main,w
  2138  0F51  0084               	movwf	4
  2139  0F52  1783               	bsf	3,7	;select IRP bank3
  2140  0F53  0800               	movf	0,w
  2141  0F54  00E5               	movwf	??_main+3
  2142  0F55  0AE2               	incf	??_main,f
  2143  0F56  0863               	movf	??_main+1,w
  2144  0F57  0084               	movwf	4
  2145  0F58  1383               	bcf	3,7	;select IRP bank1
  2146  0F59  0865               	movf	??_main+3,w
  2147  0F5A  0080               	movwf	0
  2148  0F5B  0AE3               	incf	??_main+1,f
  2149  0F5C  0BE4               	decfsz	??_main+2,f
  2150  0F5D  2F50               	goto	u3570
  2151                           
  2152                           ;main.c: 119: int CWTX_Nprg[5] = {0,1,7,4,7};
  2153  0F5E  30AA               	movlw	main@CWTX_Nprg& (0+255)
  2154  0F5F  0084               	movwf	4
  2155  0F60  30B3               	movlw	low main@F2010
  2156  0F61  00E2               	movwf	??_main
  2157  0F62  0804               	movf	4,w
  2158  0F63  00E3               	movwf	??_main+1
  2159  0F64  300A               	movlw	10
  2160  0F65  00E4               	movwf	??_main+2
  2161  0F66                     u3580:	
  2162  0F66  0862               	movf	??_main,w
  2163  0F67  0084               	movwf	4
  2164  0F68  1783               	bsf	3,7	;select IRP bank3
  2165  0F69  0800               	movf	0,w
  2166  0F6A  00E5               	movwf	??_main+3
  2167  0F6B  0AE2               	incf	??_main,f
  2168  0F6C  0863               	movf	??_main+1,w
  2169  0F6D  0084               	movwf	4
  2170  0F6E  1383               	bcf	3,7	;select IRP bank1
  2171  0F6F  0865               	movf	??_main+3,w
  2172  0F70  0080               	movwf	0
  2173  0F71  0AE3               	incf	??_main+1,f
  2174  0F72  0BE4               	decfsz	??_main+2,f
  2175  0F73  2F66               	goto	u3580
  2176                           
  2177                           ;main.c: 120: int FMRX_Nprg[5] = {2,4,8,8,7};
  2178  0F74  30B4               	movlw	main@FMRX_Nprg& (0+255)
  2179  0F75  0084               	movwf	4
  2180  0F76  30BD               	movlw	low main@F2012
  2181  0F77  00E2               	movwf	??_main
  2182  0F78  0804               	movf	4,w
  2183  0F79  00E3               	movwf	??_main+1
  2184  0F7A  300A               	movlw	10
  2185  0F7B  00E4               	movwf	??_main+2
  2186  0F7C                     u3590:	
  2187  0F7C  0862               	movf	??_main,w
  2188  0F7D  0084               	movwf	4
  2189  0F7E  1783               	bsf	3,7	;select IRP bank3
  2190  0F7F  0800               	movf	0,w
  2191  0F80  00E5               	movwf	??_main+3
  2192  0F81  0AE2               	incf	??_main,f
  2193  0F82  0863               	movf	??_main+1,w
  2194  0F83  0084               	movwf	4
  2195  0F84  1383               	bcf	3,7	;select IRP bank1
  2196  0F85  0865               	movf	??_main+3,w
  2197  0F86  0080               	movwf	0
  2198  0F87  0AE3               	incf	??_main+1,f
  2199  0F88  0BE4               	decfsz	??_main+2,f
  2200  0F89  2F7C               	goto	u3590
  2201                           
  2202                           ;main.c: 122: FMTX(FMTX_Nref, FMTX_Nprg);
  2203  0F8A  1683               	bsf	3,5	;RP0=1, select bank1
  2204  0F8B  1303               	bcf	3,6	;RP1=0, select bank1
  2205  0F8C  0847               	movf	(_FMTX_Nref+1)^(0+128),w
  2206  0F8D  1283               	bcf	3,5	;RP0=0, select bank0
  2207  0F8E  1303               	bcf	3,6	;RP1=0, select bank0
  2208  0F8F  00DD               	movwf	FMTX@Nref+1
  2209  0F90  1683               	bsf	3,5	;RP0=1, select bank1
  2210  0F91  1303               	bcf	3,6	;RP1=0, select bank1
  2211  0F92  0846               	movf	_FMTX_Nref^(0+128),w
  2212  0F93  1283               	bcf	3,5	;RP0=0, select bank0
  2213  0F94  1303               	bcf	3,6	;RP1=0, select bank0
  2214  0F95  00DC               	movwf	FMTX@Nref
  2215  0F96  30A0               	movlw	(low (main@FMTX_Nprg| 0))& (0+255)
  2216  0F97  00DE               	movwf	FMTX@Nprg
  2217  0F98  3000               	movlw	0
  2218  0F99  00DF               	movwf	FMTX@Nprg+1
  2219  0F9A  120A  158A  210B  120A  158A  	fcall	_FMTX
  2220                           
  2221                           ;main.c: 123: CWTX(CWTX_Nref, CWTX_Nprg);
  2222  0F9F  1683               	bsf	3,5	;RP0=1, select bank1
  2223  0FA0  1303               	bcf	3,6	;RP1=0, select bank1
  2224  0FA1  0843               	movf	(_CWTX_Nref+1)^(0+128),w
  2225  0FA2  1283               	bcf	3,5	;RP0=0, select bank0
  2226  0FA3  1303               	bcf	3,6	;RP1=0, select bank0
  2227  0FA4  00DD               	movwf	CWTX@Nref+1
  2228  0FA5  1683               	bsf	3,5	;RP0=1, select bank1
  2229  0FA6  1303               	bcf	3,6	;RP1=0, select bank1
  2230  0FA7  0842               	movf	_CWTX_Nref^(0+128),w
  2231  0FA8  1283               	bcf	3,5	;RP0=0, select bank0
  2232  0FA9  1303               	bcf	3,6	;RP1=0, select bank0
  2233  0FAA  00DC               	movwf	CWTX@Nref
  2234  0FAB  30AA               	movlw	(low (main@CWTX_Nprg| 0))& (0+255)
  2235  0FAC  00DE               	movwf	CWTX@Nprg
  2236  0FAD  3000               	movlw	0
  2237  0FAE  00DF               	movwf	CWTX@Nprg+1
  2238  0FAF  120A  158A  20B3  120A  158A  	fcall	_CWTX
  2239                           
  2240                           ;main.c: 124: FMRX(FMRX_Nref, FMRX_Nprg);
  2241  0FB4  1683               	bsf	3,5	;RP0=1, select bank1
  2242  0FB5  1303               	bcf	3,6	;RP1=0, select bank1
  2243  0FB6  0845               	movf	(_FMRX_Nref+1)^(0+128),w
  2244  0FB7  1283               	bcf	3,5	;RP0=0, select bank0
  2245  0FB8  1303               	bcf	3,6	;RP1=0, select bank0
  2246  0FB9  00DD               	movwf	FMRX@Nref+1
  2247  0FBA  1683               	bsf	3,5	;RP0=1, select bank1
  2248  0FBB  1303               	bcf	3,6	;RP1=0, select bank1
  2249  0FBC  0844               	movf	_FMRX_Nref^(0+128),w
  2250  0FBD  1283               	bcf	3,5	;RP0=0, select bank0
  2251  0FBE  1303               	bcf	3,6	;RP1=0, select bank0
  2252  0FBF  00DC               	movwf	FMRX@Nref
  2253  0FC0  30B4               	movlw	(low (main@FMRX_Nprg| 0))& (0+255)
  2254  0FC1  00DE               	movwf	FMRX@Nprg
  2255  0FC2  3000               	movlw	0
  2256  0FC3  00DF               	movwf	FMRX@Nprg+1
  2257  0FC4  120A  158A  20DF  120A  158A  	fcall	_FMRX
  2258                           
  2259                           ;main.c: 125: _delay((unsigned long)((500)*(10000000/4000.0)));
  2260  0FC9  3007               	movlw	7
  2261  0FCA  1283               	bcf	3,5	;RP0=0, select bank0
  2262  0FCB  1303               	bcf	3,6	;RP1=0, select bank0
  2263  0FCC  00E4               	movwf	??_main+2
  2264  0FCD  3058               	movlw	88
  2265  0FCE  00E3               	movwf	??_main+1
  2266  0FCF  305E               	movlw	94
  2267  0FD0  00E2               	movwf	??_main
  2268  0FD1                     u3677:	
  2269  0FD1  0BE2               	decfsz	??_main,f
  2270  0FD2  2FD1               	goto	u3677
  2271  0FD3  0BE3               	decfsz	??_main+1,f
  2272  0FD4  2FD1               	goto	u3677
  2273  0FD5  0BE4               	decfsz	??_main+2,f
  2274  0FD6  2FD1               	goto	u3677
  2275  0FD7  2FD8               	nop2
  2276                           
  2277                           ;main.c: 142: }
  2278                           
  2279                           ;main.c: 141: break;
  2280                           
  2281                           ;main.c: 139: default:
  2282                           
  2283                           ;main.c: 138: break;
  2284                           
  2285                           ;main.c: 136: case 'T':
  2286                           
  2287                           ;main.c: 135: break;
  2288                           
  2289                           ;main.c: 133: case 'N':
  2290                           
  2291                           ;main.c: 132: break;
  2292                           
  2293                           ;main.c: 130: case '3':
  2294                           
  2295                           ;main.c: 129: break;
  2296                           
  2297                           ;main.c: 127: case 'I':
  2298                           
  2299                           ;main.c: 126: break;
  2300  0FD8  2FF0               	goto	l3875
  2301  0FD9                     l3871:	
  2302  0FD9  1683               	bsf	3,5	;RP0=1, select bank1
  2303  0FDA  1303               	bcf	3,6	;RP1=0, select bank1
  2304  0FDB  0841               	movf	main@dData^(0+128),w
  2305  0FDC  3E03               	addlw	3
  2306  0FDD  0084               	movwf	4
  2307  0FDE  1783               	bsf	3,7	;select IRP bank2
  2308  0FDF  0800               	movf	0,w
  2309                           
  2310                           ; Switch size 1, requested type "space"
  2311                           ; Number of cases is 5, Range of values is 51 to 84
  2312                           ; switch strategies available:
  2313                           ; Name         Instructions Cycles
  2314                           ; simple_byte           16     9 (average)
  2315                           ; direct_byte          113    11 (fixed)
  2316                           ; jumptable            263     9 (fixed)
  2317                           ;	Chosen strategy is simple_byte
  2318  0FE0  3A33               	xorlw	51	; case 51
  2319  0FE1  1903               	skipnz
  2320  0FE2  2FF0               	goto	l3875
  2321  0FE3  3A76               	xorlw	118	; case 69
  2322  0FE4  1903               	skipnz
  2323  0FE5  2F32               	goto	l3851
  2324  0FE6  3A0C               	xorlw	12	; case 73
  2325  0FE7  1903               	skipnz
  2326  0FE8  2FF0               	goto	l3875
  2327  0FE9  3A07               	xorlw	7	; case 78
  2328  0FEA  1903               	skipnz
  2329  0FEB  2FF0               	goto	l3875
  2330  0FEC  3A1A               	xorlw	26	; case 84
  2331  0FED  1903               	skipnz
  2332  0FEE  2FF0               	goto	l3875
  2333  0FEF  2FF0               	goto	l3875
  2334  0FF0                     l3875:	
  2335                           ;main.c: 144: }else if(dData[2] == 't'){
  2336                           
  2337                           
  2338                           ;main.c: 146: }
  2339                           ;main.c: 147: }
  2340                           ;main.c: 191: _delay((unsigned long)((500)*(10000000/4000.0)));
  2341  0FF0  3007               	movlw	7
  2342  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  2343  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
  2344  0FF3  00E4               	movwf	??_main+2
  2345  0FF4  3058               	movlw	88
  2346  0FF5  00E3               	movwf	??_main+1
  2347  0FF6  305E               	movlw	94
  2348  0FF7  00E2               	movwf	??_main
  2349  0FF8                     u3687:	
  2350  0FF8  0BE2               	decfsz	??_main,f
  2351  0FF9  2FF8               	goto	u3687
  2352  0FFA  0BE3               	decfsz	??_main+1,f
  2353  0FFB  2FF8               	goto	u3687
  2354  0FFC  0BE4               	decfsz	??_main+2,f
  2355  0FFD  2FF8               	goto	u3687
  2356  0FFE  2FFF               	nop2
  2357  0FFF  2E8A               	goto	l3811
  2358  1000                     __end_of_main:	
  2359                           ;main.c: 192: }
  2360                           ;main.c: 193: return;
  2361                           
  2362                           
  2363                           	psect	text1
  2364  0A38                     __ptext1:	
  2365 ;; *************** function _printf *****************
  2366 ;; Defined at:
  2367 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  2368 ;; Parameters:    Size  Location     Type
  2369 ;;  f               1    wreg     PTR const unsigned char 
  2370 ;;		 -> STR_16(3), STR_15(8), 
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;  f               1    6[COMMON] PTR const unsigned char 
  2373 ;;		 -> STR_16(3), STR_15(8), 
  2374 ;;  tmpval          4    0        struct .
  2375 ;;  cp              2    0        PTR const unsigned char 
  2376 ;;  len             2    0        unsigned int 
  2377 ;;  val             2    0        unsigned int 
  2378 ;;  c               1    7[COMMON] char 
  2379 ;;  ap              1    5[COMMON] PTR void [1]
  2380 ;;		 -> ?_printf(2), 
  2381 ;;  flag            1    4[COMMON] unsigned char 
  2382 ;;  prec            1    0        char 
  2383 ;; Return value:  Size  Location     Type
  2384 ;;                  2    1[COMMON] int 
  2385 ;; Registers used:
  2386 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2387 ;; Tracked objects:
  2388 ;;		On entry : 0/0
  2389 ;;		On exit  : 0/0
  2390 ;;		Unchanged: 0/0
  2391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2392 ;;      Params:         2       0       0       0       0
  2393 ;;      Locals:         4       0       0       0       0
  2394 ;;      Temps:          1       0       0       0       0
  2395 ;;      Totals:         7       0       0       0       0
  2396 ;;Total ram usage:        7 bytes
  2397 ;; Hardware stack levels used:    1
  2398 ;; Hardware stack levels required when called:    1
  2399 ;; This function calls:
  2400 ;;		_putch
  2401 ;; This function is called by:
  2402 ;;		_main
  2403 ;; This function uses a non-reentrant model
  2404 ;;
  2405                           
  2406                           
  2407                           ;psect for function _printf
  2408  0A38                     _printf:	
  2409                           
  2410                           ;incstack = 0
  2411                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2412                           ;printf@f stored from wreg
  2413  0A38  00F7               	movwf	printf@f
  2414                           
  2415                           ;doprnt.c: 466: va_list ap;
  2416                           ;doprnt.c: 499: signed char c;
  2417                           ;doprnt.c: 506: signed char prec;
  2418                           ;doprnt.c: 508: unsigned char flag;
  2419                           ;doprnt.c: 523: union {
  2420                           ;doprnt.c: 524: unsigned long vd;
  2421                           ;doprnt.c: 525: double integ;
  2422                           ;doprnt.c: 526: } tmpval;
  2423                           ;doprnt.c: 528: unsigned int val;
  2424                           ;doprnt.c: 529: unsigned len;
  2425                           ;doprnt.c: 530: const char * cp;
  2426                           ;doprnt.c: 533: *ap = __va_start();
  2427  0A39  3072               	movlw	(low (?_printf| 0))& (0+255)
  2428  0A3A  00F4               	movwf	??_printf
  2429  0A3B  0874               	movf	??_printf,w
  2430  0A3C  00F6               	movwf	printf@ap
  2431  0A3D                     l3527:	
  2432                           ;doprnt.c: 1422: {
  2433                           
  2434                           ;doprnt.c: 536: while(c = *f++) {
  2435                           
  2436  0A3D  3001               	movlw	1
  2437  0A3E  07F7               	addwf	printf@f,f
  2438  0A3F  30FF               	movlw	-1
  2439  0A40  0777               	addwf	printf@f,w
  2440  0A41  0084               	movwf	4
  2441  0A42  120A  158A  2000  120A  158A  	fcall	stringdir
  2442  0A47  00F4               	movwf	??_printf
  2443  0A48  0874               	movf	??_printf,w
  2444  0A49  00F8               	movwf	printf@c
  2445  0A4A  0878               	movf	printf@c,w
  2446  0A4B  1903               	btfsc	3,2
  2447  0A4C  0008               	return
  2448                           
  2449                           ;doprnt.c: 538: if(c != '%')
  2450  0A4D  3025               	movlw	37
  2451  0A4E  0678               	xorwf	printf@c,w
  2452  0A4F  1903               	btfsc	3,2
  2453  0A50  2A58               	goto	l3515
  2454                           
  2455                           ;doprnt.c: 540: {
  2456                           ;doprnt.c: 541: (putch(c) );
  2457  0A51  0878               	movf	printf@c,w
  2458  0A52  160A  118A  27B9  120A  158A  	fcall	_putch
  2459                           
  2460                           ;doprnt.c: 542: continue;
  2461  0A57  2A3D               	goto	l3527
  2462  0A58                     l3515:	
  2463                           
  2464                           ;doprnt.c: 543: }
  2465                           ;doprnt.c: 548: flag = 0;
  2466  0A58  01F5               	clrf	printf@flag
  2467                           
  2468                           ;doprnt.c: 635: switch(c = *f++) {
  2469  0A59  2A6B               	goto	l3525
  2470  0A5A                     l3517:	
  2471                           ;doprnt.c: 784: case 'c':
  2472                           
  2473                           ;doprnt.c: 638: goto alldone;
  2474                           
  2475                           ;doprnt.c: 637: case 0:
  2476                           
  2477                           
  2478                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2479  0A5A  0876               	movf	printf@ap,w
  2480  0A5B  0084               	movwf	4
  2481  0A5C  0800               	movf	0,w
  2482  0A5D  00F4               	movwf	??_printf
  2483  0A5E  0874               	movf	??_printf,w
  2484  0A5F  00F8               	movwf	printf@c
  2485  0A60  3002               	movlw	2
  2486  0A61  00F4               	movwf	??_printf
  2487  0A62  0874               	movf	??_printf,w
  2488  0A63  07F6               	addwf	printf@ap,f
  2489  0A64                     l3521:	
  2490                           ;doprnt.c: 802: default:
  2491                           
  2492                           
  2493                           ;doprnt.c: 809: (putch(c) );
  2494  0A64  0878               	movf	printf@c,w
  2495  0A65  160A  118A  27B9  120A  158A  	fcall	_putch
  2496                           
  2497                           ;doprnt.c: 822: }
  2498                           
  2499                           ;doprnt.c: 810: continue;
  2500  0A6A  2A3D               	goto	l3527
  2501  0A6B                     l3525:	
  2502  0A6B  3001               	movlw	1
  2503  0A6C  07F7               	addwf	printf@f,f
  2504  0A6D  30FF               	movlw	-1
  2505  0A6E  0777               	addwf	printf@f,w
  2506  0A6F  0084               	movwf	4
  2507  0A70  120A  158A  2000  120A  158A  	fcall	stringdir
  2508  0A75  00F8               	movwf	printf@c
  2509                           
  2510                           ; Switch size 1, requested type "space"
  2511                           ; Number of cases is 2, Range of values is 0 to 99
  2512                           ; switch strategies available:
  2513                           ; Name         Instructions Cycles
  2514                           ; simple_byte            7     4 (average)
  2515                           ; jumptable            260     6 (fixed)
  2516                           ;	Chosen strategy is simple_byte
  2517  0A76  3A00               	xorlw	0	; case 0
  2518  0A77  1903               	skipnz
  2519  0A78  2A7E               	goto	l667
  2520  0A79  3A63               	xorlw	99	; case 99
  2521  0A7A  1903               	skipnz
  2522  0A7B  2A5A               	goto	l3517
  2523  0A7C  2A64               	goto	l3521
  2524  0A7D  2A3D               	goto	l3527
  2525  0A7E                     l667:	
  2526                           ;doprnt.c: 1540: return 0;
  2527                           ;	Return value of _printf is never used
  2528                           
  2529                           ;doprnt.c: 1469: }
  2530                           ;doprnt.c: 1533: }
  2531                           ;doprnt.c: 1535: alldone:
  2532                           
  2533  0A7E  0008               	return
  2534  0A7F                     __end_of_printf:	
  2535                           
  2536                           	psect	text2
  2537  0890                     __ptext2:	
  2538 ;; *************** function _Reset_EPS *****************
  2539 ;; Defined at:
  2540 ;;		line 19 in file "EPS.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;		None
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;		None
  2545 ;; Return value:  Size  Location     Type
  2546 ;;                  1    wreg      void 
  2547 ;; Registers used:
  2548 ;;		wreg
  2549 ;; Tracked objects:
  2550 ;;		On entry : 0/0
  2551 ;;		On exit  : 0/0
  2552 ;;		Unchanged: 0/0
  2553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2554 ;;      Params:         0       0       0       0       0
  2555 ;;      Locals:         0       0       0       0       0
  2556 ;;      Temps:          3       0       0       0       0
  2557 ;;      Totals:         3       0       0       0       0
  2558 ;;Total ram usage:        3 bytes
  2559 ;; Hardware stack levels used:    1
  2560 ;; This function calls:
  2561 ;;		Nothing
  2562 ;; This function is called by:
  2563 ;;		_main
  2564 ;; This function uses a non-reentrant model
  2565 ;;
  2566                           
  2567                           
  2568                           ;psect for function _Reset_EPS
  2569  0890                     _Reset_EPS:	
  2570                           
  2571                           ;EPS.c: 20: RB4 = 1;
  2572                           
  2573                           ;incstack = 0
  2574                           ; Regs used in _Reset_EPS: [wreg]
  2575  0890  1283               	bcf	3,5	;RP0=0, select bank0
  2576  0891  1303               	bcf	3,6	;RP1=0, select bank0
  2577  0892  1606               	bsf	6,4	;volatile
  2578                           
  2579                           ;EPS.c: 21: RA1 = 1;
  2580  0893  1485               	bsf	5,1	;volatile
  2581                           
  2582                           ;EPS.c: 22: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2583  0894  3040               	movlw	64
  2584  0895  00F3               	movwf	??_Reset_EPS+2
  2585  0896  306A               	movlw	106
  2586  0897  00F2               	movwf	??_Reset_EPS+1
  2587  0898  30D5               	movlw	213
  2588  0899  00F1               	movwf	??_Reset_EPS
  2589  089A                     u3697:	
  2590  089A  0BF1               	decfsz	??_Reset_EPS,f
  2591  089B  289A               	goto	u3697
  2592  089C  0BF2               	decfsz	??_Reset_EPS+1,f
  2593  089D  289A               	goto	u3697
  2594  089E  0BF3               	decfsz	??_Reset_EPS+2,f
  2595  089F  289A               	goto	u3697
  2596  08A0  28A1               	nop2
  2597                           
  2598                           ;EPS.c: 23: RB4 = 0;
  2599  08A1  1283               	bcf	3,5	;RP0=0, select bank0
  2600  08A2  1303               	bcf	3,6	;RP1=0, select bank0
  2601  08A3  1206               	bcf	6,4	;volatile
  2602                           
  2603                           ;EPS.c: 24: RA1 = 0;
  2604  08A4  1085               	bcf	5,1	;volatile
  2605                           
  2606                           ;EPS.c: 25: _delay((unsigned long)((500)*(10000000/4000.0)));
  2607  08A5  3007               	movlw	7
  2608  08A6  00F3               	movwf	??_Reset_EPS+2
  2609  08A7  3058               	movlw	88
  2610  08A8  00F2               	movwf	??_Reset_EPS+1
  2611  08A9  305E               	movlw	94
  2612  08AA  00F1               	movwf	??_Reset_EPS
  2613  08AB                     u3707:	
  2614  08AB  0BF1               	decfsz	??_Reset_EPS,f
  2615  08AC  28AB               	goto	u3707
  2616  08AD  0BF2               	decfsz	??_Reset_EPS+1,f
  2617  08AE  28AB               	goto	u3707
  2618  08AF  0BF3               	decfsz	??_Reset_EPS+2,f
  2619  08B0  28AB               	goto	u3707
  2620  08B1  28B2               	nop2
  2621  08B2  0008               	return
  2622  08B3                     __end_of_Reset_EPS:	
  2623                           
  2624                           	psect	text3
  2625  0C42                     __ptext3:	
  2626 ;; *************** function _ReceivePacket_data *****************
  2627 ;; Defined at:
  2628 ;;		line 359 in file "decode_AX25.c"
  2629 ;; Parameters:    Size  Location     Type
  2630 ;;		None
  2631 ;; Auto vars:     Size  Location     Type
  2632 ;;  i               2   31[BANK0 ] unsigned int 
  2633 ;;  fcschecker      2   29[BANK0 ] unsigned int 
  2634 ;; Return value:  Size  Location     Type
  2635 ;;                  1    wreg      PTR unsigned char 
  2636 ;; Registers used:
  2637 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2638 ;; Tracked objects:
  2639 ;;		On entry : 0/0
  2640 ;;		On exit  : 0/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2643 ;;      Params:         0       0       0       0       0
  2644 ;;      Locals:         0       4       0       0       0
  2645 ;;      Temps:          2       0       0       0       0
  2646 ;;      Totals:         2       4       0       0       0
  2647 ;;Total ram usage:        6 bytes
  2648 ;; Hardware stack levels used:    1
  2649 ;; Hardware stack levels required when called:    2
  2650 ;; This function calls:
  2651 ;;		_fcscheck
  2652 ;;		_getdata
  2653 ;;		_waitFlag
  2654 ;; This function is called by:
  2655 ;;		_main
  2656 ;; This function uses a non-reentrant model
  2657 ;;
  2658                           
  2659                           
  2660                           ;psect for function _ReceivePacket_data
  2661  0C42                     _ReceivePacket_data:	
  2662                           
  2663                           ;decode_AX25.c: 360: UINT fcschecker;
  2664                           ;decode_AX25.c: 363: waitFlag();
  2665                           
  2666                           ;incstack = 0
  2667                           ; Regs used in _ReceivePacket_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2668  0C42  120A  118A  2334  120A  158A  	fcall	_waitFlag
  2669                           
  2670                           ;decode_AX25.c: 365: getdata();
  2671  0C47  120A  158A  23E1  120A  158A  	fcall	_getdata
  2672                           
  2673                           ;decode_AX25.c: 367: fcschecker = fcscheck();
  2674  0C4C  120A  118A  2037  120A  158A  	fcall	_fcscheck
  2675  0C51  0872               	movf	?_fcscheck+1,w
  2676  0C52  1283               	bcf	3,5	;RP0=0, select bank0
  2677  0C53  1303               	bcf	3,6	;RP1=0, select bank0
  2678  0C54  00BE               	movwf	ReceivePacket_data@fcschecker+1
  2679  0C55  0871               	movf	?_fcscheck,w
  2680  0C56  00BD               	movwf	ReceivePacket_data@fcschecker
  2681                           
  2682                           ;decode_AX25.c: 369: if(fcschecker == 1){
  2683  0C57  033D               	decf	ReceivePacket_data@fcschecker,w
  2684  0C58  043E               	iorwf	ReceivePacket_data@fcschecker+1,w
  2685  0C59  1D03               	btfss	3,2
  2686  0C5A  2CA1               	goto	l3415
  2687                           
  2688                           ;decode_AX25.c: 370: for(UINT i=0; i<commandSize; i++){
  2689  0C5B  01BF               	clrf	ReceivePacket_data@i
  2690  0C5C  01C0               	clrf	ReceivePacket_data@i+1
  2691  0C5D  3001               	movlw	low (_commandSize-__stringbase)
  2692  0C5E  0084               	movwf	4
  2693  0C5F  120A  158A  2000  120A  158A  	fcall	stringdir
  2694  0C64  00FB               	movwf	??_ReceivePacket_data
  2695  0C65  120A  158A  2000  120A  158A  	fcall	stringdir
  2696  0C6A  00FC               	movwf	??_ReceivePacket_data+1
  2697  0C6B  087C               	movf	??_ReceivePacket_data+1,w
  2698  0C6C  0240               	subwf	ReceivePacket_data@i+1,w
  2699  0C6D  1D03               	skipz
  2700  0C6E  2C71               	goto	u3115
  2701  0C6F  087B               	movf	??_ReceivePacket_data,w
  2702  0C70  023F               	subwf	ReceivePacket_data@i,w
  2703  0C71                     u3115:	
  2704  0C71  1803               	btfsc	3,0
  2705  0C72  2C9B               	goto	l3407
  2706  0C73                     l3401:	
  2707                           
  2708                           ;decode_AX25.c: 371: dData[i] = dPacket[i+20];
  2709  0C73  083F               	movf	ReceivePacket_data@i,w
  2710  0C74  3E14               	addlw	20
  2711  0C75  3E10               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2712  0C76  0084               	movwf	4
  2713  0C77  1783               	bsf	3,7	;select IRP bank2
  2714  0C78  0800               	movf	0,w
  2715  0C79  00FB               	movwf	??_ReceivePacket_data
  2716  0C7A  083F               	movf	ReceivePacket_data@i,w
  2717  0C7B  3ED1               	addlw	(low (_dData| (0+256)))& (0+255)
  2718  0C7C  0084               	movwf	4
  2719  0C7D  087B               	movf	??_ReceivePacket_data,w
  2720  0C7E  0080               	movwf	0
  2721  0C7F  3001               	movlw	1
  2722  0C80  07BF               	addwf	ReceivePacket_data@i,f
  2723  0C81  1803               	skipnc
  2724  0C82  0AC0               	incf	ReceivePacket_data@i+1,f
  2725  0C83  3000               	movlw	0
  2726  0C84  07C0               	addwf	ReceivePacket_data@i+1,f
  2727  0C85  3001               	movlw	low (_commandSize-__stringbase)
  2728  0C86  0084               	movwf	4
  2729  0C87  120A  158A  2000  120A  158A  	fcall	stringdir
  2730  0C8C  00FB               	movwf	??_ReceivePacket_data
  2731  0C8D  120A  158A  2000  120A  158A  	fcall	stringdir
  2732  0C92  00FC               	movwf	??_ReceivePacket_data+1
  2733  0C93  087C               	movf	??_ReceivePacket_data+1,w
  2734  0C94  0240               	subwf	ReceivePacket_data@i+1,w
  2735  0C95  1D03               	skipz
  2736  0C96  2C99               	goto	u3125
  2737  0C97  087B               	movf	??_ReceivePacket_data,w
  2738  0C98  023F               	subwf	ReceivePacket_data@i,w
  2739  0C99                     u3125:	
  2740  0C99  1C03               	skipc
  2741  0C9A  2C73               	goto	l3401
  2742  0C9B                     l3407:	
  2743                           
  2744                           ;decode_AX25.c: 372: }
  2745                           ;decode_AX25.c: 373: dPacketnum = 0;
  2746  0C9B  01E6               	clrf	_dPacketnum
  2747  0C9C  01E7               	clrf	_dPacketnum+1
  2748                           
  2749                           ;decode_AX25.c: 374: rcv_state = 0;
  2750  0C9D  01EA               	clrf	_rcv_state
  2751  0C9E  01EB               	clrf	_rcv_state+1
  2752                           
  2753                           ;decode_AX25.c: 375: return dData;
  2754  0C9F  30D1               	movlw	(low (_dData| (0+256)))& (0+255)
  2755                           
  2756                           ;decode_AX25.c: 376: }else{
  2757  0CA0  0008               	return
  2758  0CA1                     l3415:	
  2759                           
  2760                           ;decode_AX25.c: 377: dPacketnum = 0;
  2761  0CA1  01E6               	clrf	_dPacketnum
  2762  0CA2  01E7               	clrf	_dPacketnum+1
  2763                           
  2764                           ;decode_AX25.c: 378: rcv_state = 0;
  2765  0CA3  01EA               	clrf	_rcv_state
  2766  0CA4  01EB               	clrf	_rcv_state+1
  2767                           
  2768                           ;decode_AX25.c: 379: return 0x00;
  2769  0CA5  3000               	movlw	0
  2770  0CA6  0008               	return
  2771  0CA7                     __end_of_ReceivePacket_data:	
  2772                           
  2773                           	psect	text4
  2774  0334                     __ptext4:	
  2775 ;; *************** function _waitFlag *****************
  2776 ;; Defined at:
  2777 ;;		line 54 in file "decode_AX25.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;		None
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;  j               2   24[BANK0 ] unsigned int 
  2782 ;;  j               2   10[BANK0 ] unsigned int 
  2783 ;;  j               2   22[BANK0 ] unsigned int 
  2784 ;;  j               2    8[BANK0 ] unsigned int 
  2785 ;;  j               2   20[BANK0 ] unsigned int 
  2786 ;;  j               2    6[BANK0 ] unsigned int 
  2787 ;;  j               2   18[BANK0 ] unsigned int 
  2788 ;;  j               2    4[BANK0 ] unsigned int 
  2789 ;;  j               2   16[BANK0 ] unsigned int 
  2790 ;;  j               2    2[BANK0 ] unsigned int 
  2791 ;;  i               2    0[BANK0 ] unsigned int 
  2792 ;;  j               2   14[BANK0 ] unsigned int 
  2793 ;;  j               2   12[BANK0 ] unsigned int 
  2794 ;;  flag_judge      2   26[BANK0 ] unsigned int 
  2795 ;;  buf             1   28[BANK0 ] unsigned char 
  2796 ;; Return value:  Size  Location     Type
  2797 ;;                  1    wreg      void 
  2798 ;; Registers used:
  2799 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2800 ;; Tracked objects:
  2801 ;;		On entry : 0/0
  2802 ;;		On exit  : 0/0
  2803 ;;		Unchanged: 0/0
  2804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2805 ;;      Params:         0       0       0       0       0
  2806 ;;      Locals:         0      29       0       0       0
  2807 ;;      Temps:          4       0       0       0       0
  2808 ;;      Totals:         4      29       0       0       0
  2809 ;;Total ram usage:       33 bytes
  2810 ;; Hardware stack levels used:    1
  2811 ;; Hardware stack levels required when called:    1
  2812 ;; This function calls:
  2813 ;;		_getbit
  2814 ;; This function is called by:
  2815 ;;		_ReceivePacket_data
  2816 ;;		_ReceivePacket
  2817 ;; This function uses a non-reentrant model
  2818 ;;
  2819                           
  2820                           
  2821                           ;psect for function _waitFlag
  2822  0334                     _waitFlag:	
  2823                           
  2824                           ;decode_AX25.c: 55: UINT flag_judge;
  2825                           ;decode_AX25.c: 56: UBYTE buf = 0xff;
  2826                           
  2827                           ;incstack = 0
  2828                           ; Regs used in _waitFlag: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2829  0334  30FF               	movlw	255
  2830  0335  00F7               	movwf	??_waitFlag
  2831  0336  0877               	movf	??_waitFlag,w
  2832  0337  1283               	bcf	3,5	;RP0=0, select bank0
  2833  0338  1303               	bcf	3,6	;RP1=0, select bank0
  2834  0339  00BC               	movwf	waitFlag@buf
  2835  033A                     L6:	
  2836                           
  2837                           ;decode_AX25.c: 271: rcv_state = 0;
  2838  033A  01EA               	clrf	_rcv_state
  2839  033B  01EB               	clrf	_rcv_state+1
  2840  033C                     l3099:	
  2841  033C  3000               	movlw	0
  2842  033D  026B               	subwf	_rcv_state+1,w
  2843  033E  3002               	movlw	2
  2844  033F  1903               	skipnz
  2845  0340  026A               	subwf	_rcv_state,w
  2846  0341  1803               	btfsc	3,0
  2847  0342  0008               	return
  2848  0343                     l2733:	
  2849                           ;decode_AX25.c: 59: while(buf != 0x7e){
  2850                           
  2851                           ;decode_AX25.c: 58: while(rcv_state < 2){
  2852                           
  2853                           ;decode_AX25.c: 57: rcv_state = 0;
  2854                           
  2855  0343  307E               	movlw	126
  2856  0344  063C               	xorwf	waitFlag@buf,w
  2857  0345  1903               	btfsc	3,2
  2858  0346  2B93               	goto	l2755
  2859                           
  2860                           ;decode_AX25.c: 60: flag_judge = getbit();
  2861  0347  120A  158A  227F  120A  118A  	fcall	_getbit
  2862  034C  0872               	movf	?_getbit+1,w
  2863  034D  1283               	bcf	3,5	;RP0=0, select bank0
  2864  034E  1303               	bcf	3,6	;RP1=0, select bank0
  2865  034F  00BB               	movwf	waitFlag@flag_judge+1
  2866  0350  0871               	movf	?_getbit,w
  2867  0351  00BA               	movwf	waitFlag@flag_judge
  2868                           
  2869                           ;decode_AX25.c: 61: buf = buf << 1;
  2870  0352  083C               	movf	waitFlag@buf,w
  2871  0353  00F7               	movwf	??_waitFlag
  2872  0354  0777               	addwf	??_waitFlag,w
  2873  0355  00F8               	movwf	??_waitFlag+1
  2874  0356  0878               	movf	??_waitFlag+1,w
  2875  0357  00BC               	movwf	waitFlag@buf
  2876                           
  2877                           ;decode_AX25.c: 63: buf = buf | 0x00;
  2878  0358  083A               	movf	waitFlag@flag_judge,w
  2879  0359  043B               	iorwf	waitFlag@flag_judge+1,w
  2880  035A  1903               	btfsc	3,2
  2881  035B  2B43               	goto	l2733
  2882                           
  2883                           ;decode_AX25.c: 65: buf = buf | 0x01;
  2884                           
  2885                           ;decode_AX25.c: 64: }else{
  2886  035C  083C               	movf	waitFlag@buf,w
  2887  035D  3801               	iorlw	1
  2888  035E  00F7               	movwf	??_waitFlag
  2889  035F  0877               	movf	??_waitFlag,w
  2890  0360  00BC               	movwf	waitFlag@buf
  2891  0361  2B43               	goto	l2733
  2892  0362                     l2735:	
  2893                           ;decode_AX25.c: 66: }
  2894                           ;decode_AX25.c: 67: }
  2895                           ;decode_AX25.c: 71: while(buf == 0x7e){
  2896                           
  2897                           
  2898                           ;decode_AX25.c: 72: for(UINT i=0;i<8;i++){
  2899  0362  01A0               	clrf	waitFlag@i
  2900  0363  01A1               	clrf	waitFlag@i+1
  2901  0364  3000               	movlw	0
  2902  0365  0221               	subwf	waitFlag@i+1,w
  2903  0366  3008               	movlw	8
  2904  0367  1903               	skipnz
  2905  0368  0220               	subwf	waitFlag@i,w
  2906  0369  1803               	btfsc	3,0
  2907  036A  2B93               	goto	l2755
  2908  036B                     l2741:	
  2909                           
  2910                           ;decode_AX25.c: 73: flag_judge = getbit();
  2911  036B  120A  158A  227F  120A  118A  	fcall	_getbit
  2912  0370  0872               	movf	?_getbit+1,w
  2913  0371  1283               	bcf	3,5	;RP0=0, select bank0
  2914  0372  1303               	bcf	3,6	;RP1=0, select bank0
  2915  0373  00BB               	movwf	waitFlag@flag_judge+1
  2916  0374  0871               	movf	?_getbit,w
  2917  0375  00BA               	movwf	waitFlag@flag_judge
  2918                           
  2919                           ;decode_AX25.c: 74: buf = buf >> 1;
  2920  0376  083C               	movf	waitFlag@buf,w
  2921  0377  00F7               	movwf	??_waitFlag
  2922  0378  1003               	clrc
  2923  0379  0C77               	rrf	??_waitFlag,w
  2924  037A  00F8               	movwf	??_waitFlag+1
  2925  037B  0878               	movf	??_waitFlag+1,w
  2926  037C  00BC               	movwf	waitFlag@buf
  2927                           
  2928                           ;decode_AX25.c: 76: buf = buf | 0x00;
  2929  037D  083A               	movf	waitFlag@flag_judge,w
  2930  037E  043B               	iorwf	waitFlag@flag_judge+1,w
  2931  037F  1903               	btfsc	3,2
  2932  0380  2B86               	goto	l2751
  2933                           
  2934                           ;decode_AX25.c: 78: buf = buf | 0x80;
  2935                           
  2936                           ;decode_AX25.c: 77: }else{
  2937  0381  083C               	movf	waitFlag@buf,w
  2938  0382  3880               	iorlw	128
  2939  0383  00F7               	movwf	??_waitFlag
  2940  0384  0877               	movf	??_waitFlag,w
  2941  0385  00BC               	movwf	waitFlag@buf
  2942  0386                     l2751:	
  2943  0386  3001               	movlw	1
  2944  0387  07A0               	addwf	waitFlag@i,f
  2945  0388  1803               	skipnc
  2946  0389  0AA1               	incf	waitFlag@i+1,f
  2947  038A  3000               	movlw	0
  2948  038B  07A1               	addwf	waitFlag@i+1,f
  2949  038C  3000               	movlw	0
  2950  038D  0221               	subwf	waitFlag@i+1,w
  2951  038E  3008               	movlw	8
  2952  038F  1903               	skipnz
  2953  0390  0220               	subwf	waitFlag@i,w
  2954  0391  1C03               	skipc
  2955  0392  2B6B               	goto	l2741
  2956  0393                     l2755:	
  2957  0393  307E               	movlw	126
  2958  0394  063C               	xorwf	waitFlag@buf,w
  2959  0395  1903               	btfsc	3,2
  2960  0396  2B62               	goto	l2735
  2961                           
  2962                           ;decode_AX25.c: 79: }
  2963                           ;decode_AX25.c: 80: }
  2964                           ;decode_AX25.c: 81: }
  2965                           ;decode_AX25.c: 82: if(buf == ("JQ1YCZ"[0] << 1)){
  2966  0397  3012               	movlw	low (STR_1-__stringbase)
  2967  0398  0084               	movwf	4
  2968  0399  120A  158A  2000  120A  118A  	fcall	stringdir
  2969  039E  00F7               	movwf	??_waitFlag
  2970  039F  01F8               	clrf	??_waitFlag+1
  2971  03A0  1003               	clrc
  2972  03A1  0DF7               	rlf	??_waitFlag,f
  2973  03A2  0DF8               	rlf	??_waitFlag+1,f
  2974  03A3  083C               	movf	waitFlag@buf,w
  2975  03A4  00F9               	movwf	??_waitFlag+2
  2976  03A5  01FA               	clrf	??_waitFlag+3
  2977  03A6  0878               	movf	??_waitFlag+1,w
  2978  03A7  067A               	xorwf	??_waitFlag+3,w
  2979  03A8  1D03               	skipz
  2980  03A9  2BAC               	goto	u2205
  2981  03AA  0877               	movf	??_waitFlag,w
  2982  03AB  0679               	xorwf	??_waitFlag+2,w
  2983  03AC                     u2205:	
  2984  03AC  1D03               	skipz
  2985  03AD  2D71               	goto	l2905
  2986                           
  2987                           ;decode_AX25.c: 83: dPacket[dPacketnum] = buf;
  2988  03AE  083C               	movf	waitFlag@buf,w
  2989  03AF  00F7               	movwf	??_waitFlag
  2990  03B0  0866               	movf	_dPacketnum,w
  2991  03B1  3E10               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2992  03B2  0084               	movwf	4
  2993  03B3  0877               	movf	??_waitFlag,w
  2994  03B4  1783               	bsf	3,7	;select IRP bank2
  2995  03B5  0080               	movwf	0
  2996                           
  2997                           ;decode_AX25.c: 84: dPacketnum ++;
  2998  03B6  3001               	movlw	1
  2999  03B7  07E6               	addwf	_dPacketnum,f
  3000  03B8  1803               	skipnc
  3001  03B9  0AE7               	incf	_dPacketnum+1,f
  3002  03BA  3000               	movlw	0
  3003  03BB  07E7               	addwf	_dPacketnum+1,f
  3004                           
  3005                           ;decode_AX25.c: 85: for(UINT j=0;j<8;j++){
  3006  03BC  01A2               	clrf	waitFlag@j
  3007  03BD  01A3               	clrf	waitFlag@j+1
  3008  03BE  3000               	movlw	0
  3009  03BF  0223               	subwf	waitFlag@j+1,w
  3010  03C0  3008               	movlw	8
  3011  03C1  1903               	skipnz
  3012  03C2  0222               	subwf	waitFlag@j,w
  3013  03C3  1803               	btfsc	3,0
  3014  03C4  2BED               	goto	l2783
  3015  03C5                     l2769:	
  3016                           
  3017                           ;decode_AX25.c: 86: flag_judge = getbit();
  3018  03C5  120A  158A  227F  120A  118A  	fcall	_getbit
  3019  03CA  0872               	movf	?_getbit+1,w
  3020  03CB  1283               	bcf	3,5	;RP0=0, select bank0
  3021  03CC  1303               	bcf	3,6	;RP1=0, select bank0
  3022  03CD  00BB               	movwf	waitFlag@flag_judge+1
  3023  03CE  0871               	movf	?_getbit,w
  3024  03CF  00BA               	movwf	waitFlag@flag_judge
  3025                           
  3026                           ;decode_AX25.c: 87: buf = buf >> 1;
  3027  03D0  083C               	movf	waitFlag@buf,w
  3028  03D1  00F7               	movwf	??_waitFlag
  3029  03D2  1003               	clrc
  3030  03D3  0C77               	rrf	??_waitFlag,w
  3031  03D4  00F8               	movwf	??_waitFlag+1
  3032  03D5  0878               	movf	??_waitFlag+1,w
  3033  03D6  00BC               	movwf	waitFlag@buf
  3034                           
  3035                           ;decode_AX25.c: 89: buf = buf | 0x00;
  3036  03D7  083A               	movf	waitFlag@flag_judge,w
  3037  03D8  043B               	iorwf	waitFlag@flag_judge+1,w
  3038  03D9  1903               	btfsc	3,2
  3039  03DA  2BE0               	goto	l2779
  3040                           
  3041                           ;decode_AX25.c: 91: buf = buf | 0x80;
  3042                           
  3043                           ;decode_AX25.c: 90: }else{
  3044  03DB  083C               	movf	waitFlag@buf,w
  3045  03DC  3880               	iorlw	128
  3046  03DD  00F7               	movwf	??_waitFlag
  3047  03DE  0877               	movf	??_waitFlag,w
  3048  03DF  00BC               	movwf	waitFlag@buf
  3049  03E0                     l2779:	
  3050  03E0  3001               	movlw	1
  3051  03E1  07A2               	addwf	waitFlag@j,f
  3052  03E2  1803               	skipnc
  3053  03E3  0AA3               	incf	waitFlag@j+1,f
  3054  03E4  3000               	movlw	0
  3055  03E5  07A3               	addwf	waitFlag@j+1,f
  3056  03E6  3000               	movlw	0
  3057  03E7  0223               	subwf	waitFlag@j+1,w
  3058  03E8  3008               	movlw	8
  3059  03E9  1903               	skipnz
  3060  03EA  0222               	subwf	waitFlag@j,w
  3061  03EB  1C03               	skipc
  3062  03EC  2BC5               	goto	l2769
  3063  03ED                     l2783:	
  3064                           
  3065                           ;decode_AX25.c: 92: }
  3066                           ;decode_AX25.c: 93: }
  3067                           ;decode_AX25.c: 94: if(buf == ("JQ1YCZ"[1] << 1)){
  3068  03ED  3013               	movlw	low (((STR_1+1)-__stringbase)| (0+32768))
  3069  03EE  0084               	movwf	4
  3070  03EF  120A  158A  2000  120A  118A  	fcall	stringdir
  3071  03F4  00F7               	movwf	??_waitFlag
  3072  03F5  01F8               	clrf	??_waitFlag+1
  3073  03F6  1003               	clrc
  3074  03F7  0DF7               	rlf	??_waitFlag,f
  3075  03F8  0DF8               	rlf	??_waitFlag+1,f
  3076  03F9  083C               	movf	waitFlag@buf,w
  3077  03FA  00F9               	movwf	??_waitFlag+2
  3078  03FB  01FA               	clrf	??_waitFlag+3
  3079  03FC  0878               	movf	??_waitFlag+1,w
  3080  03FD  067A               	xorwf	??_waitFlag+3,w
  3081  03FE  1D03               	skipz
  3082  03FF  2C02               	goto	u2245
  3083  0400  0877               	movf	??_waitFlag,w
  3084  0401  0679               	xorwf	??_waitFlag+2,w
  3085  0402                     u2245:	
  3086  0402  1D03               	skipz
  3087  0403  2D71               	goto	l2905
  3088                           
  3089                           ;decode_AX25.c: 95: dPacket[dPacketnum] = buf;
  3090  0404  083C               	movf	waitFlag@buf,w
  3091  0405  00F7               	movwf	??_waitFlag
  3092  0406  0866               	movf	_dPacketnum,w
  3093  0407  3E10               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3094  0408  0084               	movwf	4
  3095  0409  0877               	movf	??_waitFlag,w
  3096  040A  1783               	bsf	3,7	;select IRP bank2
  3097  040B  0080               	movwf	0
  3098                           
  3099                           ;decode_AX25.c: 96: dPacketnum ++;
  3100  040C  3001               	movlw	1
  3101  040D  07E6               	addwf	_dPacketnum,f
  3102  040E  1803               	skipnc
  3103  040F  0AE7               	incf	_dPacketnum+1,f
  3104  0410  3000               	movlw	0
  3105  0411  07E7               	addwf	_dPacketnum+1,f
  3106                           
  3107                           ;decode_AX25.c: 97: for(UINT j=0;j<8;j++){
  3108  0412  01A4               	clrf	waitFlag@j_111
  3109  0413  01A5               	clrf	waitFlag@j_111+1
  3110  0414  3000               	movlw	0
  3111  0415  0225               	subwf	waitFlag@j_111+1,w
  3112  0416  3008               	movlw	8
  3113  0417  1903               	skipnz
  3114  0418  0224               	subwf	waitFlag@j_111,w
  3115  0419  1803               	btfsc	3,0
  3116  041A  2C43               	goto	l2809
  3117  041B                     l2795:	
  3118                           
  3119                           ;decode_AX25.c: 98: flag_judge = getbit();
  3120  041B  120A  158A  227F  120A  118A  	fcall	_getbit
  3121  0420  0872               	movf	?_getbit+1,w
  3122  0421  1283               	bcf	3,5	;RP0=0, select bank0
  3123  0422  1303               	bcf	3,6	;RP1=0, select bank0
  3124  0423  00BB               	movwf	waitFlag@flag_judge+1
  3125  0424  0871               	movf	?_getbit,w
  3126  0425  00BA               	movwf	waitFlag@flag_judge
  3127                           
  3128                           ;decode_AX25.c: 99: buf = buf >> 1;
  3129  0426  083C               	movf	waitFlag@buf,w
  3130  0427  00F7               	movwf	??_waitFlag
  3131  0428  1003               	clrc
  3132  0429  0C77               	rrf	??_waitFlag,w
  3133  042A  00F8               	movwf	??_waitFlag+1
  3134  042B  0878               	movf	??_waitFlag+1,w
  3135  042C  00BC               	movwf	waitFlag@buf
  3136                           
  3137                           ;decode_AX25.c: 101: buf = buf | 0x00;
  3138  042D  083A               	movf	waitFlag@flag_judge,w
  3139  042E  043B               	iorwf	waitFlag@flag_judge+1,w
  3140  042F  1903               	btfsc	3,2
  3141  0430  2C36               	goto	l2805
  3142                           
  3143                           ;decode_AX25.c: 103: buf = buf | 0x80;
  3144                           
  3145                           ;decode_AX25.c: 102: }else{
  3146  0431  083C               	movf	waitFlag@buf,w
  3147  0432  3880               	iorlw	128
  3148  0433  00F7               	movwf	??_waitFlag
  3149  0434  0877               	movf	??_waitFlag,w
  3150  0435  00BC               	movwf	waitFlag@buf
  3151  0436                     l2805:	
  3152  0436  3001               	movlw	1
  3153  0437  07A4               	addwf	waitFlag@j_111,f
  3154  0438  1803               	skipnc
  3155  0439  0AA5               	incf	waitFlag@j_111+1,f
  3156  043A  3000               	movlw	0
  3157  043B  07A5               	addwf	waitFlag@j_111+1,f
  3158  043C  3000               	movlw	0
  3159  043D  0225               	subwf	waitFlag@j_111+1,w
  3160  043E  3008               	movlw	8
  3161  043F  1903               	skipnz
  3162  0440  0224               	subwf	waitFlag@j_111,w
  3163  0441  1C03               	skipc
  3164  0442  2C1B               	goto	l2795
  3165  0443                     l2809:	
  3166                           
  3167                           ;decode_AX25.c: 104: }
  3168                           ;decode_AX25.c: 105: }
  3169                           ;decode_AX25.c: 106: if(buf == ("JQ1YCZ"[2] << 1)){
  3170  0443  3014               	movlw	low (((STR_1+2)-__stringbase)| (0+32768))
  3171  0444  0084               	movwf	4
  3172  0445  120A  158A  2000  120A  118A  	fcall	stringdir
  3173  044A  00F7               	movwf	??_waitFlag
  3174  044B  01F8               	clrf	??_waitFlag+1
  3175  044C  1003               	clrc
  3176  044D  0DF7               	rlf	??_waitFlag,f
  3177  044E  0DF8               	rlf	??_waitFlag+1,f
  3178  044F  083C               	movf	waitFlag@buf,w
  3179  0450  00F9               	movwf	??_waitFlag+2
  3180  0451  01FA               	clrf	??_waitFlag+3
  3181  0452  0878               	movf	??_waitFlag+1,w
  3182  0453  067A               	xorwf	??_waitFlag+3,w
  3183  0454  1D03               	skipz
  3184  0455  2C58               	goto	u2285
  3185  0456  0877               	movf	??_waitFlag,w
  3186  0457  0679               	xorwf	??_waitFlag+2,w
  3187  0458                     u2285:	
  3188  0458  1D03               	skipz
  3189  0459  2D71               	goto	l2905
  3190                           
  3191                           ;decode_AX25.c: 107: dPacket[dPacketnum] = buf;
  3192  045A  083C               	movf	waitFlag@buf,w
  3193  045B  00F7               	movwf	??_waitFlag
  3194  045C  0866               	movf	_dPacketnum,w
  3195  045D  3E10               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3196  045E  0084               	movwf	4
  3197  045F  0877               	movf	??_waitFlag,w
  3198  0460  1783               	bsf	3,7	;select IRP bank2
  3199  0461  0080               	movwf	0
  3200                           
  3201                           ;decode_AX25.c: 108: dPacketnum ++;
  3202  0462  3001               	movlw	1
  3203  0463  07E6               	addwf	_dPacketnum,f
  3204  0464  1803               	skipnc
  3205  0465  0AE7               	incf	_dPacketnum+1,f
  3206  0466  3000               	movlw	0
  3207  0467  07E7               	addwf	_dPacketnum+1,f
  3208                           
  3209                           ;decode_AX25.c: 109: for(UINT j=0;j<8;j++){
  3210  0468  01A6               	clrf	waitFlag@j_113
  3211  0469  01A7               	clrf	waitFlag@j_113+1
  3212  046A  3000               	movlw	0
  3213  046B  0227               	subwf	waitFlag@j_113+1,w
  3214  046C  3008               	movlw	8
  3215  046D  1903               	skipnz
  3216  046E  0226               	subwf	waitFlag@j_113,w
  3217  046F  1803               	btfsc	3,0
  3218  0470  2C99               	goto	l2835
  3219  0471                     l2821:	
  3220                           
  3221                           ;decode_AX25.c: 110: flag_judge = getbit();
  3222  0471  120A  158A  227F  120A  118A  	fcall	_getbit
  3223  0476  0872               	movf	?_getbit+1,w
  3224  0477  1283               	bcf	3,5	;RP0=0, select bank0
  3225  0478  1303               	bcf	3,6	;RP1=0, select bank0
  3226  0479  00BB               	movwf	waitFlag@flag_judge+1
  3227  047A  0871               	movf	?_getbit,w
  3228  047B  00BA               	movwf	waitFlag@flag_judge
  3229                           
  3230                           ;decode_AX25.c: 111: buf = buf >> 1;
  3231  047C  083C               	movf	waitFlag@buf,w
  3232  047D  00F7               	movwf	??_waitFlag
  3233  047E  1003               	clrc
  3234  047F  0C77               	rrf	??_waitFlag,w
  3235  0480  00F8               	movwf	??_waitFlag+1
  3236  0481  0878               	movf	??_waitFlag+1,w
  3237  0482  00BC               	movwf	waitFlag@buf
  3238                           
  3239                           ;decode_AX25.c: 113: buf = buf | 0x00;
  3240  0483  083A               	movf	waitFlag@flag_judge,w
  3241  0484  043B               	iorwf	waitFlag@flag_judge+1,w
  3242  0485  1903               	btfsc	3,2
  3243  0486  2C8C               	goto	l2831
  3244                           
  3245                           ;decode_AX25.c: 115: buf = buf | 0x80;
  3246                           
  3247                           ;decode_AX25.c: 114: }else{
  3248  0487  083C               	movf	waitFlag@buf,w
  3249  0488  3880               	iorlw	128
  3250  0489  00F7               	movwf	??_waitFlag
  3251  048A  0877               	movf	??_waitFlag,w
  3252  048B  00BC               	movwf	waitFlag@buf
  3253  048C                     l2831:	
  3254  048C  3001               	movlw	1
  3255  048D  07A6               	addwf	waitFlag@j_113,f
  3256  048E  1803               	skipnc
  3257  048F  0AA7               	incf	waitFlag@j_113+1,f
  3258  0490  3000               	movlw	0
  3259  0491  07A7               	addwf	waitFlag@j_113+1,f
  3260  0492  3000               	movlw	0
  3261  0493  0227               	subwf	waitFlag@j_113+1,w
  3262  0494  3008               	movlw	8
  3263  0495  1903               	skipnz
  3264  0496  0226               	subwf	waitFlag@j_113,w
  3265  0497  1C03               	skipc
  3266  0498  2C71               	goto	l2821
  3267  0499                     l2835:	
  3268                           
  3269                           ;decode_AX25.c: 116: }
  3270                           ;decode_AX25.c: 117: }
  3271                           ;decode_AX25.c: 118: if(buf == ("JQ1YCZ"[3] << 1)){
  3272  0499  3015               	movlw	low (((STR_1+3)-__stringbase)| (0+32768))
  3273  049A  0084               	movwf	4
  3274  049B  120A  158A  2000  120A  118A  	fcall	stringdir
  3275  04A0  00F7               	movwf	??_waitFlag
  3276  04A1  01F8               	clrf	??_waitFlag+1
  3277  04A2  1003               	clrc
  3278  04A3  0DF7               	rlf	??_waitFlag,f
  3279  04A4  0DF8               	rlf	??_waitFlag+1,f
  3280  04A5  083C               	movf	waitFlag@buf,w
  3281  04A6  00F9               	movwf	??_waitFlag+2
  3282  04A7  01FA               	clrf	??_waitFlag+3
  3283  04A8  0878               	movf	??_waitFlag+1,w
  3284  04A9  067A               	xorwf	??_waitFlag+3,w
  3285  04AA  1D03               	skipz
  3286  04AB  2CAE               	goto	u2325
  3287  04AC  0877               	movf	??_waitFlag,w
  3288  04AD  0679               	xorwf	??_waitFlag+2,w
  3289  04AE                     u2325:	
  3290  04AE  1D03               	skipz
  3291  04AF  2D71               	goto	l2905
  3292                           
  3293                           ;decode_AX25.c: 119: dPacket[dPacketnum] = buf;
  3294  04B0  083C               	movf	waitFlag@buf,w
  3295  04B1  00F7               	movwf	??_waitFlag
  3296  04B2  0866               	movf	_dPacketnum,w
  3297  04B3  3E10               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3298  04B4  0084               	movwf	4
  3299  04B5  0877               	movf	??_waitFlag,w
  3300  04B6  1783               	bsf	3,7	;select IRP bank2
  3301  04B7  0080               	movwf	0
  3302                           
  3303                           ;decode_AX25.c: 120: dPacketnum ++;
  3304  04B8  3001               	movlw	1
  3305  04B9  07E6               	addwf	_dPacketnum,f
  3306  04BA  1803               	skipnc
  3307  04BB  0AE7               	incf	_dPacketnum+1,f
  3308  04BC  3000               	movlw	0
  3309  04BD  07E7               	addwf	_dPacketnum+1,f
  3310                           
  3311                           ;decode_AX25.c: 121: for(UINT j=0;j<8;j++){
  3312  04BE  01A8               	clrf	waitFlag@j_115
  3313  04BF  01A9               	clrf	waitFlag@j_115+1
  3314  04C0  3000               	movlw	0
  3315  04C1  0229               	subwf	waitFlag@j_115+1,w
  3316  04C2  3008               	movlw	8
  3317  04C3  1903               	skipnz
  3318  04C4  0228               	subwf	waitFlag@j_115,w
  3319  04C5  1803               	btfsc	3,0
  3320  04C6  2CEF               	goto	l2861
  3321  04C7                     l2847:	
  3322                           
  3323                           ;decode_AX25.c: 122: flag_judge = getbit();
  3324  04C7  120A  158A  227F  120A  118A  	fcall	_getbit
  3325  04CC  0872               	movf	?_getbit+1,w
  3326  04CD  1283               	bcf	3,5	;RP0=0, select bank0
  3327  04CE  1303               	bcf	3,6	;RP1=0, select bank0
  3328  04CF  00BB               	movwf	waitFlag@flag_judge+1
  3329  04D0  0871               	movf	?_getbit,w
  3330  04D1  00BA               	movwf	waitFlag@flag_judge
  3331                           
  3332                           ;decode_AX25.c: 123: buf = buf >> 1;
  3333  04D2  083C               	movf	waitFlag@buf,w
  3334  04D3  00F7               	movwf	??_waitFlag
  3335  04D4  1003               	clrc
  3336  04D5  0C77               	rrf	??_waitFlag,w
  3337  04D6  00F8               	movwf	??_waitFlag+1
  3338  04D7  0878               	movf	??_waitFlag+1,w
  3339  04D8  00BC               	movwf	waitFlag@buf
  3340                           
  3341                           ;decode_AX25.c: 125: buf = buf | 0x00;
  3342  04D9  083A               	movf	waitFlag@flag_judge,w
  3343  04DA  043B               	iorwf	waitFlag@flag_judge+1,w
  3344  04DB  1903               	btfsc	3,2
  3345  04DC  2CE2               	goto	l2857
  3346                           
  3347                           ;decode_AX25.c: 127: buf = buf | 0x80;
  3348                           
  3349                           ;decode_AX25.c: 126: }else{
  3350  04DD  083C               	movf	waitFlag@buf,w
  3351  04DE  3880               	iorlw	128
  3352  04DF  00F7               	movwf	??_waitFlag
  3353  04E0  0877               	movf	??_waitFlag,w
  3354  04E1  00BC               	movwf	waitFlag@buf
  3355  04E2                     l2857:	
  3356  04E2  3001               	movlw	1
  3357  04E3  07A8               	addwf	waitFlag@j_115,f
  3358  04E4  1803               	skipnc
  3359  04E5  0AA9               	incf	waitFlag@j_115+1,f
  3360  04E6  3000               	movlw	0
  3361  04E7  07A9               	addwf	waitFlag@j_115+1,f
  3362  04E8  3000               	movlw	0
  3363  04E9  0229               	subwf	waitFlag@j_115+1,w
  3364  04EA  3008               	movlw	8
  3365  04EB  1903               	skipnz
  3366  04EC  0228               	subwf	waitFlag@j_115,w
  3367  04ED  1C03               	skipc
  3368  04EE  2CC7               	goto	l2847
  3369  04EF                     l2861:	
  3370                           
  3371                           ;decode_AX25.c: 128: }
  3372                           ;decode_AX25.c: 129: }
  3373                           ;decode_AX25.c: 130: if(buf == ("JQ1YCZ"[4] << 1)){
  3374  04EF  3016               	movlw	low (((STR_1+4)-__stringbase)| (0+32768))
  3375  04F0  0084               	movwf	4
  3376  04F1  120A  158A  2000  120A  118A  	fcall	stringdir
  3377  04F6  00F7               	movwf	??_waitFlag
  3378  04F7  01F8               	clrf	??_waitFlag+1
  3379  04F8  1003               	clrc
  3380  04F9  0DF7               	rlf	??_waitFlag,f
  3381  04FA  0DF8               	rlf	??_waitFlag+1,f
  3382  04FB  083C               	movf	waitFlag@buf,w
  3383  04FC  00F9               	movwf	??_waitFlag+2
  3384  04FD  01FA               	clrf	??_waitFlag+3
  3385  04FE  0878               	movf	??_waitFlag+1,w
  3386  04FF  067A               	xorwf	??_waitFlag+3,w
  3387  0500  1D03               	skipz
  3388  0501  2D04               	goto	u2365
  3389  0502  0877               	movf	??_waitFlag,w
  3390  0503  0679               	xorwf	??_waitFlag+2,w
  3391  0504                     u2365:	
  3392  0504  1D03               	skipz
  3393  0505  2D71               	goto	l2905
  3394                           
  3395                           ;decode_AX25.c: 131: dPacket[dPacketnum] = buf;
  3396  0506  083C               	movf	waitFlag@buf,w
  3397  0507  00F7               	movwf	??_waitFlag
  3398  0508  0866               	movf	_dPacketnum,w
  3399  0509  3E10               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3400  050A  0084               	movwf	4
  3401  050B  0877               	movf	??_waitFlag,w
  3402  050C  1783               	bsf	3,7	;select IRP bank2
  3403  050D  0080               	movwf	0
  3404                           
  3405                           ;decode_AX25.c: 132: dPacketnum ++;
  3406  050E  3001               	movlw	1
  3407  050F  07E6               	addwf	_dPacketnum,f
  3408  0510  1803               	skipnc
  3409  0511  0AE7               	incf	_dPacketnum+1,f
  3410  0512  3000               	movlw	0
  3411  0513  07E7               	addwf	_dPacketnum+1,f
  3412                           
  3413                           ;decode_AX25.c: 133: for(UINT j=0;j<8;j++){
  3414  0514  01AA               	clrf	waitFlag@j_117
  3415  0515  01AB               	clrf	waitFlag@j_117+1
  3416  0516  3000               	movlw	0
  3417  0517  022B               	subwf	waitFlag@j_117+1,w
  3418  0518  3008               	movlw	8
  3419  0519  1903               	skipnz
  3420  051A  022A               	subwf	waitFlag@j_117,w
  3421  051B  1803               	btfsc	3,0
  3422  051C  2D45               	goto	l2887
  3423  051D                     l2873:	
  3424                           
  3425                           ;decode_AX25.c: 134: flag_judge = getbit();
  3426  051D  120A  158A  227F  120A  118A  	fcall	_getbit
  3427  0522  0872               	movf	?_getbit+1,w
  3428  0523  1283               	bcf	3,5	;RP0=0, select bank0
  3429  0524  1303               	bcf	3,6	;RP1=0, select bank0
  3430  0525  00BB               	movwf	waitFlag@flag_judge+1
  3431  0526  0871               	movf	?_getbit,w
  3432  0527  00BA               	movwf	waitFlag@flag_judge
  3433                           
  3434                           ;decode_AX25.c: 135: buf = buf >> 1;
  3435  0528  083C               	movf	waitFlag@buf,w
  3436  0529  00F7               	movwf	??_waitFlag
  3437  052A  1003               	clrc
  3438  052B  0C77               	rrf	??_waitFlag,w
  3439  052C  00F8               	movwf	??_waitFlag+1
  3440  052D  0878               	movf	??_waitFlag+1,w
  3441  052E  00BC               	movwf	waitFlag@buf
  3442                           
  3443                           ;decode_AX25.c: 137: buf = buf | 0x00;
  3444  052F  083A               	movf	waitFlag@flag_judge,w
  3445  0530  043B               	iorwf	waitFlag@flag_judge+1,w
  3446  0531  1903               	btfsc	3,2
  3447  0532  2D38               	goto	l2883
  3448                           
  3449                           ;decode_AX25.c: 139: buf = buf | 0x80;
  3450                           
  3451                           ;decode_AX25.c: 138: }else{
  3452  0533  083C               	movf	waitFlag@buf,w
  3453  0534  3880               	iorlw	128
  3454  0535  00F7               	movwf	??_waitFlag
  3455  0536  0877               	movf	??_waitFlag,w
  3456  0537  00BC               	movwf	waitFlag@buf
  3457  0538                     l2883:	
  3458  0538  3001               	movlw	1
  3459  0539  07AA               	addwf	waitFlag@j_117,f
  3460  053A  1803               	skipnc
  3461  053B  0AAB               	incf	waitFlag@j_117+1,f
  3462  053C  3000               	movlw	0
  3463  053D  07AB               	addwf	waitFlag@j_117+1,f
  3464  053E  3000               	movlw	0
  3465  053F  022B               	subwf	waitFlag@j_117+1,w
  3466  0540  3008               	movlw	8
  3467  0541  1903               	skipnz
  3468  0542  022A               	subwf	waitFlag@j_117,w
  3469  0543  1C03               	skipc
  3470  0544  2D1D               	goto	l2873
  3471  0545                     l2887:	
  3472                           
  3473                           ;decode_AX25.c: 140: }
  3474                           ;decode_AX25.c: 141: }
  3475                           ;decode_AX25.c: 142: if(buf == ("JQ1YCZ"[5] << 1)){
  3476  0545  3017               	movlw	low (((STR_1+5)-__stringbase)| (0+32768))
  3477  0546  0084               	movwf	4
  3478  0547  120A  158A  2000  120A  118A  	fcall	stringdir
  3479  054C  00F7               	movwf	??_waitFlag
  3480  054D  01F8               	clrf	??_waitFlag+1
  3481  054E  1003               	clrc
  3482  054F  0DF7               	rlf	??_waitFlag,f
  3483  0550  0DF8               	rlf	??_waitFlag+1,f
  3484  0551  083C               	movf	waitFlag@buf,w
  3485  0552  00F9               	movwf	??_waitFlag+2
  3486  0553  01FA               	clrf	??_waitFlag+3
  3487  0554  0878               	movf	??_waitFlag+1,w
  3488  0555  067A               	xorwf	??_waitFlag+3,w
  3489  0556  1D03               	skipz
  3490  0557  2D5A               	goto	u2405
  3491  0558  0877               	movf	??_waitFlag,w
  3492  0559  0679               	xorwf	??_waitFlag+2,w
  3493  055A                     u2405:	
  3494  055A  1D03               	skipz
  3495  055B  2D71               	goto	l2905
  3496                           
  3497                           ;decode_AX25.c: 143: dPacket[dPacketnum] = buf;
  3498  055C  083C               	movf	waitFlag@buf,w
  3499  055D  00F7               	movwf	??_waitFlag
  3500  055E  0866               	movf	_dPacketnum,w
  3501  055F  3E10               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3502  0560  0084               	movwf	4
  3503  0561  0877               	movf	??_waitFlag,w
  3504  0562  1783               	bsf	3,7	;select IRP bank2
  3505  0563  0080               	movwf	0
  3506                           
  3507                           ;decode_AX25.c: 144: dPacketnum ++;
  3508  0564  3001               	movlw	1
  3509  0565  07E6               	addwf	_dPacketnum,f
  3510  0566  1803               	skipnc
  3511  0567  0AE7               	incf	_dPacketnum+1,f
  3512  0568  3000               	movlw	0
  3513  0569  07E7               	addwf	_dPacketnum+1,f
  3514                           
  3515                           ;decode_AX25.c: 145: rcv_state ++;
  3516  056A  3001               	movlw	1
  3517  056B  07EA               	addwf	_rcv_state,f
  3518  056C  1803               	skipnc
  3519  056D  0AEB               	incf	_rcv_state+1,f
  3520  056E  3000               	movlw	0
  3521  056F  07EB               	addwf	_rcv_state+1,f
  3522                           
  3523                           ;decode_AX25.c: 146: }else{
  3524  0570  2D73               	goto	l207
  3525  0571                     l2905:	
  3526                           ;decode_AX25.c: 160: }
  3527                           ;decode_AX25.c: 161: }else{
  3528                           
  3529                           ;decode_AX25.c: 159: dPacketnum = 0;
  3530                           
  3531                           ;decode_AX25.c: 157: }
  3532                           ;decode_AX25.c: 158: }else{
  3533                           
  3534                           ;decode_AX25.c: 156: dPacketnum = 0;
  3535                           
  3536                           ;decode_AX25.c: 154: }
  3537                           ;decode_AX25.c: 155: }else{
  3538                           
  3539                           ;decode_AX25.c: 153: dPacketnum = 0;
  3540                           
  3541                           ;decode_AX25.c: 151: }
  3542                           ;decode_AX25.c: 152: }else{
  3543                           
  3544                           ;decode_AX25.c: 150: dPacketnum = 0;
  3545                           
  3546                           ;decode_AX25.c: 148: }
  3547                           ;decode_AX25.c: 149: }else{
  3548                           
  3549                           ;decode_AX25.c: 147: dPacketnum = 0;
  3550                           
  3551                           
  3552                           ;decode_AX25.c: 162: dPacketnum = 0;
  3553  0571  01E6               	clrf	_dPacketnum
  3554  0572  01E7               	clrf	_dPacketnum+1
  3555  0573                     l207:	
  3556                           
  3557                           ;decode_AX25.c: 163: }
  3558                           ;decode_AX25.c: 165: for(UINT j=0;j<8;j++){
  3559  0573  01AC               	clrf	waitFlag@j_119
  3560  0574  01AD               	clrf	waitFlag@j_119+1
  3561  0575  3000               	movlw	0
  3562  0576  022D               	subwf	waitFlag@j_119+1,w
  3563  0577  3008               	movlw	8
  3564  0578  1903               	skipnz
  3565  0579  022C               	subwf	waitFlag@j_119,w
  3566  057A  1803               	btfsc	3,0
  3567  057B  2DA4               	goto	l2925
  3568  057C                     l2911:	
  3569                           
  3570                           ;decode_AX25.c: 166: flag_judge = getbit();
  3571  057C  120A  158A  227F  120A  118A  	fcall	_getbit
  3572  0581  0872               	movf	?_getbit+1,w
  3573  0582  1283               	bcf	3,5	;RP0=0, select bank0
  3574  0583  1303               	bcf	3,6	;RP1=0, select bank0
  3575  0584  00BB               	movwf	waitFlag@flag_judge+1
  3576  0585  0871               	movf	?_getbit,w
  3577  0586  00BA               	movwf	waitFlag@flag_judge
  3578                           
  3579                           ;decode_AX25.c: 167: buf = buf >> 1;
  3580  0587  083C               	movf	waitFlag@buf,w
  3581  0588  00F7               	movwf	??_waitFlag
  3582  0589  1003               	clrc
  3583  058A  0C77               	rrf	??_waitFlag,w
  3584  058B  00F8               	movwf	??_waitFlag+1
  3585  058C  0878               	movf	??_waitFlag+1,w
  3586  058D  00BC               	movwf	waitFlag@buf
  3587                           
  3588                           ;decode_AX25.c: 169: buf = buf | 0x00;
  3589  058E  083A               	movf	waitFlag@flag_judge,w
  3590  058F  043B               	iorwf	waitFlag@flag_judge+1,w
  3591  0590  1903               	btfsc	3,2
  3592  0591  2D97               	goto	l2921
  3593                           
  3594                           ;decode_AX25.c: 171: buf = buf | 0x80;
  3595                           
  3596                           ;decode_AX25.c: 170: }else{
  3597  0592  083C               	movf	waitFlag@buf,w
  3598  0593  3880               	iorlw	128
  3599  0594  00F7               	movwf	??_waitFlag
  3600  0595  0877               	movf	??_waitFlag,w
  3601  0596  00BC               	movwf	waitFlag@buf
  3602  0597                     l2921:	
  3603  0597  3001               	movlw	1
  3604  0598  07AC               	addwf	waitFlag@j_119,f
  3605  0599  1803               	skipnc
  3606  059A  0AAD               	incf	waitFlag@j_119+1,f
  3607  059B  3000               	movlw	0
  3608  059C  07AD               	addwf	waitFlag@j_119+1,f
  3609  059D  3000               	movlw	0
  3610  059E  022D               	subwf	waitFlag@j_119+1,w
  3611  059F  3008               	movlw	8
  3612  05A0  1903               	skipnz
  3613  05A1  022C               	subwf	waitFlag@j_119,w
  3614  05A2  1C03               	skipc
  3615  05A3  2D7C               	goto	l2911
  3616  05A4                     l2925:	
  3617                           
  3618                           ;decode_AX25.c: 172: }
  3619                           ;decode_AX25.c: 173: }
  3620                           ;decode_AX25.c: 174: dPacket[dPacketnum] = buf;
  3621  05A4  083C               	movf	waitFlag@buf,w
  3622  05A5  00F7               	movwf	??_waitFlag
  3623  05A6  0866               	movf	_dPacketnum,w
  3624  05A7  3E10               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3625  05A8  0084               	movwf	4
  3626  05A9  0877               	movf	??_waitFlag,w
  3627  05AA  1783               	bsf	3,7	;select IRP bank2
  3628  05AB  0080               	movwf	0
  3629                           
  3630                           ;decode_AX25.c: 175: dPacketnum ++;
  3631  05AC  3001               	movlw	1
  3632  05AD  07E6               	addwf	_dPacketnum,f
  3633  05AE  1803               	skipnc
  3634  05AF  0AE7               	incf	_dPacketnum+1,f
  3635  05B0  3000               	movlw	0
  3636  05B1  07E7               	addwf	_dPacketnum+1,f
  3637                           
  3638                           ;decode_AX25.c: 176: for(UINT j=0;j<8;j++){
  3639  05B2  01AE               	clrf	waitFlag@j_120
  3640  05B3  01AF               	clrf	waitFlag@j_120+1
  3641  05B4  3000               	movlw	0
  3642  05B5  022F               	subwf	waitFlag@j_120+1,w
  3643  05B6  3008               	movlw	8
  3644  05B7  1903               	skipnz
  3645  05B8  022E               	subwf	waitFlag@j_120,w
  3646  05B9  1803               	btfsc	3,0
  3647  05BA  2DE3               	goto	l2949
  3648  05BB                     l2935:	
  3649                           
  3650                           ;decode_AX25.c: 177: flag_judge = getbit();
  3651  05BB  120A  158A  227F  120A  118A  	fcall	_getbit
  3652  05C0  0872               	movf	?_getbit+1,w
  3653  05C1  1283               	bcf	3,5	;RP0=0, select bank0
  3654  05C2  1303               	bcf	3,6	;RP1=0, select bank0
  3655  05C3  00BB               	movwf	waitFlag@flag_judge+1
  3656  05C4  0871               	movf	?_getbit,w
  3657  05C5  00BA               	movwf	waitFlag@flag_judge
  3658                           
  3659                           ;decode_AX25.c: 178: buf = buf >> 1;
  3660  05C6  083C               	movf	waitFlag@buf,w
  3661  05C7  00F7               	movwf	??_waitFlag
  3662  05C8  1003               	clrc
  3663  05C9  0C77               	rrf	??_waitFlag,w
  3664  05CA  00F8               	movwf	??_waitFlag+1
  3665  05CB  0878               	movf	??_waitFlag+1,w
  3666  05CC  00BC               	movwf	waitFlag@buf
  3667                           
  3668                           ;decode_AX25.c: 180: buf = buf | 0x00;
  3669  05CD  083A               	movf	waitFlag@flag_judge,w
  3670  05CE  043B               	iorwf	waitFlag@flag_judge+1,w
  3671  05CF  1903               	btfsc	3,2
  3672  05D0  2DD6               	goto	l2945
  3673                           
  3674                           ;decode_AX25.c: 182: buf = buf | 0x80;
  3675                           
  3676                           ;decode_AX25.c: 181: }else{
  3677  05D1  083C               	movf	waitFlag@buf,w
  3678  05D2  3880               	iorlw	128
  3679  05D3  00F7               	movwf	??_waitFlag
  3680  05D4  0877               	movf	??_waitFlag,w
  3681  05D5  00BC               	movwf	waitFlag@buf
  3682  05D6                     l2945:	
  3683  05D6  3001               	movlw	1
  3684  05D7  07AE               	addwf	waitFlag@j_120,f
  3685  05D8  1803               	skipnc
  3686  05D9  0AAF               	incf	waitFlag@j_120+1,f
  3687  05DA  3000               	movlw	0
  3688  05DB  07AF               	addwf	waitFlag@j_120+1,f
  3689  05DC  3000               	movlw	0
  3690  05DD  022F               	subwf	waitFlag@j_120+1,w
  3691  05DE  3008               	movlw	8
  3692  05DF  1903               	skipnz
  3693  05E0  022E               	subwf	waitFlag@j_120,w
  3694  05E1  1C03               	skipc
  3695  05E2  2DBB               	goto	l2935
  3696  05E3                     l2949:	
  3697                           
  3698                           ;decode_AX25.c: 183: }
  3699                           ;decode_AX25.c: 184: }
  3700                           ;decode_AX25.c: 185: if(buf == ("JQ1ZHX"[0] << 1)){
  3701  05E3  300B               	movlw	low (STR_7-__stringbase)
  3702  05E4  0084               	movwf	4
  3703  05E5  120A  158A  2000  120A  118A  	fcall	stringdir
  3704  05EA  00F7               	movwf	??_waitFlag
  3705  05EB  01F8               	clrf	??_waitFlag+1
  3706  05EC  1003               	clrc
  3707  05ED  0DF7               	rlf	??_waitFlag,f
  3708  05EE  0DF8               	rlf	??_waitFlag+1,f
  3709  05EF  083C               	movf	waitFlag@buf,w
  3710  05F0  00F9               	movwf	??_waitFlag+2
  3711  05F1  01FA               	clrf	??_waitFlag+3
  3712  05F2  0878               	movf	??_waitFlag+1,w
  3713  05F3  067A               	xorwf	??_waitFlag+3,w
  3714  05F4  1D03               	skipz
  3715  05F5  2DF8               	goto	u2475
  3716  05F6  0877               	movf	??_waitFlag,w
  3717  05F7  0679               	xorwf	??_waitFlag+2,w
  3718  05F8                     u2475:	
  3719  05F8  1D03               	skipz
  3720  05F9  2FBD               	goto	l3097
  3721                           
  3722                           ;decode_AX25.c: 186: dPacket[dPacketnum] = buf;
  3723  05FA  083C               	movf	waitFlag@buf,w
  3724  05FB  00F7               	movwf	??_waitFlag
  3725  05FC  0866               	movf	_dPacketnum,w
  3726  05FD  3E10               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3727  05FE  0084               	movwf	4
  3728  05FF  0877               	movf	??_waitFlag,w
  3729  0600  1783               	bsf	3,7	;select IRP bank2
  3730  0601  0080               	movwf	0
  3731                           
  3732                           ;decode_AX25.c: 187: dPacketnum ++;
  3733  0602  3001               	movlw	1
  3734  0603  07E6               	addwf	_dPacketnum,f
  3735  0604  1803               	skipnc
  3736  0605  0AE7               	incf	_dPacketnum+1,f
  3737  0606  3000               	movlw	0
  3738  0607  07E7               	addwf	_dPacketnum+1,f
  3739                           
  3740                           ;decode_AX25.c: 188: for(UINT j=0;j<8;j++){
  3741  0608  01B0               	clrf	waitFlag@j_122
  3742  0609  01B1               	clrf	waitFlag@j_122+1
  3743  060A  3000               	movlw	0
  3744  060B  0231               	subwf	waitFlag@j_122+1,w
  3745  060C  3008               	movlw	8
  3746  060D  1903               	skipnz
  3747  060E  0230               	subwf	waitFlag@j_122,w
  3748  060F  1803               	btfsc	3,0
  3749  0610  2E39               	goto	l2975
  3750  0611                     l2961:	
  3751                           
  3752                           ;decode_AX25.c: 189: flag_judge = getbit();
  3753  0611  120A  158A  227F  120A  118A  	fcall	_getbit
  3754  0616  0872               	movf	?_getbit+1,w
  3755  0617  1283               	bcf	3,5	;RP0=0, select bank0
  3756  0618  1303               	bcf	3,6	;RP1=0, select bank0
  3757  0619  00BB               	movwf	waitFlag@flag_judge+1
  3758  061A  0871               	movf	?_getbit,w
  3759  061B  00BA               	movwf	waitFlag@flag_judge
  3760                           
  3761                           ;decode_AX25.c: 190: buf = buf >> 1;
  3762  061C  083C               	movf	waitFlag@buf,w
  3763  061D  00F7               	movwf	??_waitFlag
  3764  061E  1003               	clrc
  3765  061F  0C77               	rrf	??_waitFlag,w
  3766  0620  00F8               	movwf	??_waitFlag+1
  3767  0621  0878               	movf	??_waitFlag+1,w
  3768  0622  00BC               	movwf	waitFlag@buf
  3769                           
  3770                           ;decode_AX25.c: 192: buf = buf | 0x00;
  3771  0623  083A               	movf	waitFlag@flag_judge,w
  3772  0624  043B               	iorwf	waitFlag@flag_judge+1,w
  3773  0625  1903               	btfsc	3,2
  3774  0626  2E2C               	goto	l2971
  3775                           
  3776                           ;decode_AX25.c: 194: buf = buf | 0x80;
  3777                           
  3778                           ;decode_AX25.c: 193: }else{
  3779  0627  083C               	movf	waitFlag@buf,w
  3780  0628  3880               	iorlw	128
  3781  0629  00F7               	movwf	??_waitFlag
  3782  062A  0877               	movf	??_waitFlag,w
  3783  062B  00BC               	movwf	waitFlag@buf
  3784  062C                     l2971:	
  3785  062C  3001               	movlw	1
  3786  062D  07B0               	addwf	waitFlag@j_122,f
  3787  062E  1803               	skipnc
  3788  062F  0AB1               	incf	waitFlag@j_122+1,f
  3789  0630  3000               	movlw	0
  3790  0631  07B1               	addwf	waitFlag@j_122+1,f
  3791  0632  3000               	movlw	0
  3792  0633  0231               	subwf	waitFlag@j_122+1,w
  3793  0634  3008               	movlw	8
  3794  0635  1903               	skipnz
  3795  0636  0230               	subwf	waitFlag@j_122,w
  3796  0637  1C03               	skipc
  3797  0638  2E11               	goto	l2961
  3798  0639                     l2975:	
  3799                           
  3800                           ;decode_AX25.c: 195: }
  3801                           ;decode_AX25.c: 196: }
  3802                           ;decode_AX25.c: 197: if(buf == ("JQ1ZHX"[1] << 1)){
  3803  0639  300C               	movlw	low (((STR_7+1)-__stringbase)| (0+32768))
  3804  063A  0084               	movwf	4
  3805  063B  120A  158A  2000  120A  118A  	fcall	stringdir
  3806  0640  00F7               	movwf	??_waitFlag
  3807  0641  01F8               	clrf	??_waitFlag+1
  3808  0642  1003               	clrc
  3809  0643  0DF7               	rlf	??_waitFlag,f
  3810  0644  0DF8               	rlf	??_waitFlag+1,f
  3811  0645  083C               	movf	waitFlag@buf,w
  3812  0646  00F9               	movwf	??_waitFlag+2
  3813  0647  01FA               	clrf	??_waitFlag+3
  3814  0648  0878               	movf	??_waitFlag+1,w
  3815  0649  067A               	xorwf	??_waitFlag+3,w
  3816  064A  1D03               	skipz
  3817  064B  2E4E               	goto	u2515
  3818  064C  0877               	movf	??_waitFlag,w
  3819  064D  0679               	xorwf	??_waitFlag+2,w
  3820  064E                     u2515:	
  3821  064E  1D03               	skipz
  3822  064F  2FBD               	goto	l3097
  3823                           
  3824                           ;decode_AX25.c: 198: dPacket[dPacketnum] = buf;
  3825  0650  083C               	movf	waitFlag@buf,w
  3826  0651  00F7               	movwf	??_waitFlag
  3827  0652  0866               	movf	_dPacketnum,w
  3828  0653  3E10               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3829  0654  0084               	movwf	4
  3830  0655  0877               	movf	??_waitFlag,w
  3831  0656  1783               	bsf	3,7	;select IRP bank2
  3832  0657  0080               	movwf	0
  3833                           
  3834                           ;decode_AX25.c: 199: dPacketnum ++;
  3835  0658  3001               	movlw	1
  3836  0659  07E6               	addwf	_dPacketnum,f
  3837  065A  1803               	skipnc
  3838  065B  0AE7               	incf	_dPacketnum+1,f
  3839  065C  3000               	movlw	0
  3840  065D  07E7               	addwf	_dPacketnum+1,f
  3841                           
  3842                           ;decode_AX25.c: 200: for(UINT j=0;j<8;j++){
  3843  065E  01B2               	clrf	waitFlag@j_124
  3844  065F  01B3               	clrf	waitFlag@j_124+1
  3845  0660  3000               	movlw	0
  3846  0661  0233               	subwf	waitFlag@j_124+1,w
  3847  0662  3008               	movlw	8
  3848  0663  1903               	skipnz
  3849  0664  0232               	subwf	waitFlag@j_124,w
  3850  0665  1803               	btfsc	3,0
  3851  0666  2E8F               	goto	l3001
  3852  0667                     l2987:	
  3853                           
  3854                           ;decode_AX25.c: 201: flag_judge = getbit();
  3855  0667  120A  158A  227F  120A  118A  	fcall	_getbit
  3856  066C  0872               	movf	?_getbit+1,w
  3857  066D  1283               	bcf	3,5	;RP0=0, select bank0
  3858  066E  1303               	bcf	3,6	;RP1=0, select bank0
  3859  066F  00BB               	movwf	waitFlag@flag_judge+1
  3860  0670  0871               	movf	?_getbit,w
  3861  0671  00BA               	movwf	waitFlag@flag_judge
  3862                           
  3863                           ;decode_AX25.c: 202: buf = buf >> 1;
  3864  0672  083C               	movf	waitFlag@buf,w
  3865  0673  00F7               	movwf	??_waitFlag
  3866  0674  1003               	clrc
  3867  0675  0C77               	rrf	??_waitFlag,w
  3868  0676  00F8               	movwf	??_waitFlag+1
  3869  0677  0878               	movf	??_waitFlag+1,w
  3870  0678  00BC               	movwf	waitFlag@buf
  3871                           
  3872                           ;decode_AX25.c: 204: buf = buf | 0x00;
  3873  0679  083A               	movf	waitFlag@flag_judge,w
  3874  067A  043B               	iorwf	waitFlag@flag_judge+1,w
  3875  067B  1903               	btfsc	3,2
  3876  067C  2E82               	goto	l2997
  3877                           
  3878                           ;decode_AX25.c: 206: buf = buf | 0x80;
  3879                           
  3880                           ;decode_AX25.c: 205: }else{
  3881  067D  083C               	movf	waitFlag@buf,w
  3882  067E  3880               	iorlw	128
  3883  067F  00F7               	movwf	??_waitFlag
  3884  0680  0877               	movf	??_waitFlag,w
  3885  0681  00BC               	movwf	waitFlag@buf
  3886  0682                     l2997:	
  3887  0682  3001               	movlw	1
  3888  0683  07B2               	addwf	waitFlag@j_124,f
  3889  0684  1803               	skipnc
  3890  0685  0AB3               	incf	waitFlag@j_124+1,f
  3891  0686  3000               	movlw	0
  3892  0687  07B3               	addwf	waitFlag@j_124+1,f
  3893  0688  3000               	movlw	0
  3894  0689  0233               	subwf	waitFlag@j_124+1,w
  3895  068A  3008               	movlw	8
  3896  068B  1903               	skipnz
  3897  068C  0232               	subwf	waitFlag@j_124,w
  3898  068D  1C03               	skipc
  3899  068E  2E67               	goto	l2987
  3900  068F                     l3001:	
  3901                           
  3902                           ;decode_AX25.c: 207: }
  3903                           ;decode_AX25.c: 208: }
  3904                           ;decode_AX25.c: 209: if(buf == ("JQ1ZHX"[2] << 1)){
  3905  068F  300D               	movlw	low (((STR_7+2)-__stringbase)| (0+32768))
  3906  0690  0084               	movwf	4
  3907  0691  120A  158A  2000  120A  118A  	fcall	stringdir
  3908  0696  00F7               	movwf	??_waitFlag
  3909  0697  01F8               	clrf	??_waitFlag+1
  3910  0698  1003               	clrc
  3911  0699  0DF7               	rlf	??_waitFlag,f
  3912  069A  0DF8               	rlf	??_waitFlag+1,f
  3913  069B  083C               	movf	waitFlag@buf,w
  3914  069C  00F9               	movwf	??_waitFlag+2
  3915  069D  01FA               	clrf	??_waitFlag+3
  3916  069E  0878               	movf	??_waitFlag+1,w
  3917  069F  067A               	xorwf	??_waitFlag+3,w
  3918  06A0  1D03               	skipz
  3919  06A1  2EA4               	goto	u2555
  3920  06A2  0877               	movf	??_waitFlag,w
  3921  06A3  0679               	xorwf	??_waitFlag+2,w
  3922  06A4                     u2555:	
  3923  06A4  1D03               	skipz
  3924  06A5  2FBD               	goto	l3097
  3925                           
  3926                           ;decode_AX25.c: 210: dPacket[dPacketnum] = buf;
  3927  06A6  083C               	movf	waitFlag@buf,w
  3928  06A7  00F7               	movwf	??_waitFlag
  3929  06A8  0866               	movf	_dPacketnum,w
  3930  06A9  3E10               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3931  06AA  0084               	movwf	4
  3932  06AB  0877               	movf	??_waitFlag,w
  3933  06AC  1783               	bsf	3,7	;select IRP bank2
  3934  06AD  0080               	movwf	0
  3935                           
  3936                           ;decode_AX25.c: 211: dPacketnum ++;
  3937  06AE  3001               	movlw	1
  3938  06AF  07E6               	addwf	_dPacketnum,f
  3939  06B0  1803               	skipnc
  3940  06B1  0AE7               	incf	_dPacketnum+1,f
  3941  06B2  3000               	movlw	0
  3942  06B3  07E7               	addwf	_dPacketnum+1,f
  3943                           
  3944                           ;decode_AX25.c: 212: for(UINT j=0;j<8;j++){
  3945  06B4  01B4               	clrf	waitFlag@j_126
  3946  06B5  01B5               	clrf	waitFlag@j_126+1
  3947  06B6  3000               	movlw	0
  3948  06B7  0235               	subwf	waitFlag@j_126+1,w
  3949  06B8  3008               	movlw	8
  3950  06B9  1903               	skipnz
  3951  06BA  0234               	subwf	waitFlag@j_126,w
  3952  06BB  1803               	btfsc	3,0
  3953  06BC  2EE5               	goto	l3027
  3954  06BD                     l3013:	
  3955                           
  3956                           ;decode_AX25.c: 213: flag_judge = getbit();
  3957  06BD  120A  158A  227F  120A  118A  	fcall	_getbit
  3958  06C2  0872               	movf	?_getbit+1,w
  3959  06C3  1283               	bcf	3,5	;RP0=0, select bank0
  3960  06C4  1303               	bcf	3,6	;RP1=0, select bank0
  3961  06C5  00BB               	movwf	waitFlag@flag_judge+1
  3962  06C6  0871               	movf	?_getbit,w
  3963  06C7  00BA               	movwf	waitFlag@flag_judge
  3964                           
  3965                           ;decode_AX25.c: 214: buf = buf >> 1;
  3966  06C8  083C               	movf	waitFlag@buf,w
  3967  06C9  00F7               	movwf	??_waitFlag
  3968  06CA  1003               	clrc
  3969  06CB  0C77               	rrf	??_waitFlag,w
  3970  06CC  00F8               	movwf	??_waitFlag+1
  3971  06CD  0878               	movf	??_waitFlag+1,w
  3972  06CE  00BC               	movwf	waitFlag@buf
  3973                           
  3974                           ;decode_AX25.c: 216: buf = buf | 0x00;
  3975  06CF  083A               	movf	waitFlag@flag_judge,w
  3976  06D0  043B               	iorwf	waitFlag@flag_judge+1,w
  3977  06D1  1903               	btfsc	3,2
  3978  06D2  2ED8               	goto	l3023
  3979                           
  3980                           ;decode_AX25.c: 218: buf = buf | 0x80;
  3981                           
  3982                           ;decode_AX25.c: 217: }else{
  3983  06D3  083C               	movf	waitFlag@buf,w
  3984  06D4  3880               	iorlw	128
  3985  06D5  00F7               	movwf	??_waitFlag
  3986  06D6  0877               	movf	??_waitFlag,w
  3987  06D7  00BC               	movwf	waitFlag@buf
  3988  06D8                     l3023:	
  3989  06D8  3001               	movlw	1
  3990  06D9  07B4               	addwf	waitFlag@j_126,f
  3991  06DA  1803               	skipnc
  3992  06DB  0AB5               	incf	waitFlag@j_126+1,f
  3993  06DC  3000               	movlw	0
  3994  06DD  07B5               	addwf	waitFlag@j_126+1,f
  3995  06DE  3000               	movlw	0
  3996  06DF  0235               	subwf	waitFlag@j_126+1,w
  3997  06E0  3008               	movlw	8
  3998  06E1  1903               	skipnz
  3999  06E2  0234               	subwf	waitFlag@j_126,w
  4000  06E3  1C03               	skipc
  4001  06E4  2EBD               	goto	l3013
  4002  06E5                     l3027:	
  4003                           
  4004                           ;decode_AX25.c: 219: }
  4005                           ;decode_AX25.c: 220: }
  4006                           ;decode_AX25.c: 221: if(buf == ("JQ1ZHX"[3] << 1)){
  4007  06E5  300E               	movlw	low (((STR_7+3)-__stringbase)| (0+32768))
  4008  06E6  0084               	movwf	4
  4009  06E7  120A  158A  2000  120A  118A  	fcall	stringdir
  4010  06EC  00F7               	movwf	??_waitFlag
  4011  06ED  01F8               	clrf	??_waitFlag+1
  4012  06EE  1003               	clrc
  4013  06EF  0DF7               	rlf	??_waitFlag,f
  4014  06F0  0DF8               	rlf	??_waitFlag+1,f
  4015  06F1  083C               	movf	waitFlag@buf,w
  4016  06F2  00F9               	movwf	??_waitFlag+2
  4017  06F3  01FA               	clrf	??_waitFlag+3
  4018  06F4  0878               	movf	??_waitFlag+1,w
  4019  06F5  067A               	xorwf	??_waitFlag+3,w
  4020  06F6  1D03               	skipz
  4021  06F7  2EFA               	goto	u2595
  4022  06F8  0877               	movf	??_waitFlag,w
  4023  06F9  0679               	xorwf	??_waitFlag+2,w
  4024  06FA                     u2595:	
  4025  06FA  1D03               	skipz
  4026  06FB  2FBD               	goto	l3097
  4027                           
  4028                           ;decode_AX25.c: 222: dPacket[dPacketnum] = buf;
  4029  06FC  083C               	movf	waitFlag@buf,w
  4030  06FD  00F7               	movwf	??_waitFlag
  4031  06FE  0866               	movf	_dPacketnum,w
  4032  06FF  3E10               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4033  0700  0084               	movwf	4
  4034  0701  0877               	movf	??_waitFlag,w
  4035  0702  1783               	bsf	3,7	;select IRP bank2
  4036  0703  0080               	movwf	0
  4037                           
  4038                           ;decode_AX25.c: 223: dPacketnum ++;
  4039  0704  3001               	movlw	1
  4040  0705  07E6               	addwf	_dPacketnum,f
  4041  0706  1803               	skipnc
  4042  0707  0AE7               	incf	_dPacketnum+1,f
  4043  0708  3000               	movlw	0
  4044  0709  07E7               	addwf	_dPacketnum+1,f
  4045                           
  4046                           ;decode_AX25.c: 224: for(UINT j=0;j<8;j++){
  4047  070A  01B6               	clrf	waitFlag@j_128
  4048  070B  01B7               	clrf	waitFlag@j_128+1
  4049  070C  3000               	movlw	0
  4050  070D  0237               	subwf	waitFlag@j_128+1,w
  4051  070E  3008               	movlw	8
  4052  070F  1903               	skipnz
  4053  0710  0236               	subwf	waitFlag@j_128,w
  4054  0711  1803               	btfsc	3,0
  4055  0712  2F3B               	goto	l3053
  4056  0713                     l3039:	
  4057                           
  4058                           ;decode_AX25.c: 225: flag_judge = getbit();
  4059  0713  120A  158A  227F  120A  118A  	fcall	_getbit
  4060  0718  0872               	movf	?_getbit+1,w
  4061  0719  1283               	bcf	3,5	;RP0=0, select bank0
  4062  071A  1303               	bcf	3,6	;RP1=0, select bank0
  4063  071B  00BB               	movwf	waitFlag@flag_judge+1
  4064  071C  0871               	movf	?_getbit,w
  4065  071D  00BA               	movwf	waitFlag@flag_judge
  4066                           
  4067                           ;decode_AX25.c: 226: buf = buf >> 1;
  4068  071E  083C               	movf	waitFlag@buf,w
  4069  071F  00F7               	movwf	??_waitFlag
  4070  0720  1003               	clrc
  4071  0721  0C77               	rrf	??_waitFlag,w
  4072  0722  00F8               	movwf	??_waitFlag+1
  4073  0723  0878               	movf	??_waitFlag+1,w
  4074  0724  00BC               	movwf	waitFlag@buf
  4075                           
  4076                           ;decode_AX25.c: 228: buf = buf | 0x00;
  4077  0725  083A               	movf	waitFlag@flag_judge,w
  4078  0726  043B               	iorwf	waitFlag@flag_judge+1,w
  4079  0727  1903               	btfsc	3,2
  4080  0728  2F2E               	goto	l3049
  4081                           
  4082                           ;decode_AX25.c: 230: buf = buf | 0x80;
  4083                           
  4084                           ;decode_AX25.c: 229: }else{
  4085  0729  083C               	movf	waitFlag@buf,w
  4086  072A  3880               	iorlw	128
  4087  072B  00F7               	movwf	??_waitFlag
  4088  072C  0877               	movf	??_waitFlag,w
  4089  072D  00BC               	movwf	waitFlag@buf
  4090  072E                     l3049:	
  4091  072E  3001               	movlw	1
  4092  072F  07B6               	addwf	waitFlag@j_128,f
  4093  0730  1803               	skipnc
  4094  0731  0AB7               	incf	waitFlag@j_128+1,f
  4095  0732  3000               	movlw	0
  4096  0733  07B7               	addwf	waitFlag@j_128+1,f
  4097  0734  3000               	movlw	0
  4098  0735  0237               	subwf	waitFlag@j_128+1,w
  4099  0736  3008               	movlw	8
  4100  0737  1903               	skipnz
  4101  0738  0236               	subwf	waitFlag@j_128,w
  4102  0739  1C03               	skipc
  4103  073A  2F13               	goto	l3039
  4104  073B                     l3053:	
  4105                           
  4106                           ;decode_AX25.c: 231: }
  4107                           ;decode_AX25.c: 232: }
  4108                           ;decode_AX25.c: 233: if(buf == ("JQ1ZHX"[4] << 1)){
  4109  073B  300F               	movlw	low (((STR_7+4)-__stringbase)| (0+32768))
  4110  073C  0084               	movwf	4
  4111  073D  120A  158A  2000  120A  118A  	fcall	stringdir
  4112  0742  00F7               	movwf	??_waitFlag
  4113  0743  01F8               	clrf	??_waitFlag+1
  4114  0744  1003               	clrc
  4115  0745  0DF7               	rlf	??_waitFlag,f
  4116  0746  0DF8               	rlf	??_waitFlag+1,f
  4117  0747  083C               	movf	waitFlag@buf,w
  4118  0748  00F9               	movwf	??_waitFlag+2
  4119  0749  01FA               	clrf	??_waitFlag+3
  4120  074A  0878               	movf	??_waitFlag+1,w
  4121  074B  067A               	xorwf	??_waitFlag+3,w
  4122  074C  1D03               	skipz
  4123  074D  2F50               	goto	u2635
  4124  074E  0877               	movf	??_waitFlag,w
  4125  074F  0679               	xorwf	??_waitFlag+2,w
  4126  0750                     u2635:	
  4127  0750  1D03               	skipz
  4128  0751  2FBD               	goto	l3097
  4129                           
  4130                           ;decode_AX25.c: 234: dPacket[dPacketnum] = buf;
  4131  0752  083C               	movf	waitFlag@buf,w
  4132  0753  00F7               	movwf	??_waitFlag
  4133  0754  0866               	movf	_dPacketnum,w
  4134  0755  3E10               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4135  0756  0084               	movwf	4
  4136  0757  0877               	movf	??_waitFlag,w
  4137  0758  1783               	bsf	3,7	;select IRP bank2
  4138  0759  0080               	movwf	0
  4139                           
  4140                           ;decode_AX25.c: 235: dPacketnum ++;
  4141  075A  3001               	movlw	1
  4142  075B  07E6               	addwf	_dPacketnum,f
  4143  075C  1803               	skipnc
  4144  075D  0AE7               	incf	_dPacketnum+1,f
  4145  075E  3000               	movlw	0
  4146  075F  07E7               	addwf	_dPacketnum+1,f
  4147                           
  4148                           ;decode_AX25.c: 236: for(UINT j=0;j<8;j++){
  4149  0760  01B8               	clrf	waitFlag@j_130
  4150  0761  01B9               	clrf	waitFlag@j_130+1
  4151  0762  3000               	movlw	0
  4152  0763  0239               	subwf	waitFlag@j_130+1,w
  4153  0764  3008               	movlw	8
  4154  0765  1903               	skipnz
  4155  0766  0238               	subwf	waitFlag@j_130,w
  4156  0767  1803               	btfsc	3,0
  4157  0768  2F91               	goto	l3079
  4158  0769                     l3065:	
  4159                           
  4160                           ;decode_AX25.c: 237: flag_judge = getbit();
  4161  0769  120A  158A  227F  120A  118A  	fcall	_getbit
  4162  076E  0872               	movf	?_getbit+1,w
  4163  076F  1283               	bcf	3,5	;RP0=0, select bank0
  4164  0770  1303               	bcf	3,6	;RP1=0, select bank0
  4165  0771  00BB               	movwf	waitFlag@flag_judge+1
  4166  0772  0871               	movf	?_getbit,w
  4167  0773  00BA               	movwf	waitFlag@flag_judge
  4168                           
  4169                           ;decode_AX25.c: 238: buf = buf >> 1;
  4170  0774  083C               	movf	waitFlag@buf,w
  4171  0775  00F7               	movwf	??_waitFlag
  4172  0776  1003               	clrc
  4173  0777  0C77               	rrf	??_waitFlag,w
  4174  0778  00F8               	movwf	??_waitFlag+1
  4175  0779  0878               	movf	??_waitFlag+1,w
  4176  077A  00BC               	movwf	waitFlag@buf
  4177                           
  4178                           ;decode_AX25.c: 240: buf = buf | 0x00;
  4179  077B  083A               	movf	waitFlag@flag_judge,w
  4180  077C  043B               	iorwf	waitFlag@flag_judge+1,w
  4181  077D  1903               	btfsc	3,2
  4182  077E  2F84               	goto	l3075
  4183                           
  4184                           ;decode_AX25.c: 242: buf = buf | 0x80;
  4185                           
  4186                           ;decode_AX25.c: 241: }else{
  4187  077F  083C               	movf	waitFlag@buf,w
  4188  0780  3880               	iorlw	128
  4189  0781  00F7               	movwf	??_waitFlag
  4190  0782  0877               	movf	??_waitFlag,w
  4191  0783  00BC               	movwf	waitFlag@buf
  4192  0784                     l3075:	
  4193  0784  3001               	movlw	1
  4194  0785  07B8               	addwf	waitFlag@j_130,f
  4195  0786  1803               	skipnc
  4196  0787  0AB9               	incf	waitFlag@j_130+1,f
  4197  0788  3000               	movlw	0
  4198  0789  07B9               	addwf	waitFlag@j_130+1,f
  4199  078A  3000               	movlw	0
  4200  078B  0239               	subwf	waitFlag@j_130+1,w
  4201  078C  3008               	movlw	8
  4202  078D  1903               	skipnz
  4203  078E  0238               	subwf	waitFlag@j_130,w
  4204  078F  1C03               	skipc
  4205  0790  2F69               	goto	l3065
  4206  0791                     l3079:	
  4207                           
  4208                           ;decode_AX25.c: 243: }
  4209                           ;decode_AX25.c: 244: }
  4210                           ;decode_AX25.c: 245: if(buf == ("JQ1ZHX"[5] << 1)){
  4211  0791  3010               	movlw	low (((STR_7+5)-__stringbase)| (0+32768))
  4212  0792  0084               	movwf	4
  4213  0793  120A  158A  2000  120A  118A  	fcall	stringdir
  4214  0798  00F7               	movwf	??_waitFlag
  4215  0799  01F8               	clrf	??_waitFlag+1
  4216  079A  1003               	clrc
  4217  079B  0DF7               	rlf	??_waitFlag,f
  4218  079C  0DF8               	rlf	??_waitFlag+1,f
  4219  079D  083C               	movf	waitFlag@buf,w
  4220  079E  00F9               	movwf	??_waitFlag+2
  4221  079F  01FA               	clrf	??_waitFlag+3
  4222  07A0  0878               	movf	??_waitFlag+1,w
  4223  07A1  067A               	xorwf	??_waitFlag+3,w
  4224  07A2  1D03               	skipz
  4225  07A3  2FA6               	goto	u2675
  4226  07A4  0877               	movf	??_waitFlag,w
  4227  07A5  0679               	xorwf	??_waitFlag+2,w
  4228  07A6                     u2675:	
  4229  07A6  1D03               	skipz
  4230  07A7  2FBD               	goto	l3097
  4231                           
  4232                           ;decode_AX25.c: 246: dPacket[dPacketnum] = buf;
  4233  07A8  083C               	movf	waitFlag@buf,w
  4234  07A9  00F7               	movwf	??_waitFlag
  4235  07AA  0866               	movf	_dPacketnum,w
  4236  07AB  3E10               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4237  07AC  0084               	movwf	4
  4238  07AD  0877               	movf	??_waitFlag,w
  4239  07AE  1783               	bsf	3,7	;select IRP bank2
  4240  07AF  0080               	movwf	0
  4241                           
  4242                           ;decode_AX25.c: 247: dPacketnum ++;
  4243  07B0  3001               	movlw	1
  4244  07B1  07E6               	addwf	_dPacketnum,f
  4245  07B2  1803               	skipnc
  4246  07B3  0AE7               	incf	_dPacketnum+1,f
  4247  07B4  3000               	movlw	0
  4248  07B5  07E7               	addwf	_dPacketnum+1,f
  4249                           
  4250                           ;decode_AX25.c: 248: rcv_state ++;
  4251  07B6  3001               	movlw	1
  4252  07B7  07EA               	addwf	_rcv_state,f
  4253  07B8  1803               	skipnc
  4254  07B9  0AEB               	incf	_rcv_state+1,f
  4255  07BA  3000               	movlw	0
  4256  07BB  07EB               	addwf	_rcv_state+1,f
  4257                           
  4258                           ;decode_AX25.c: 249: }else{
  4259  07BC  2B3C               	goto	l3099
  4260  07BD                     l3097:	
  4261                           ;decode_AX25.c: 268: }
  4262                           ;decode_AX25.c: 269: }else{
  4263                           
  4264                           ;decode_AX25.c: 267: rcv_state = 0;
  4265                           
  4266                           ;decode_AX25.c: 266: dPacketnum = 0;
  4267                           
  4268                           ;decode_AX25.c: 264: }
  4269                           ;decode_AX25.c: 265: }else{
  4270                           
  4271                           ;decode_AX25.c: 263: rcv_state = 0;
  4272                           
  4273                           ;decode_AX25.c: 262: dPacketnum = 0;
  4274                           
  4275                           ;decode_AX25.c: 260: }
  4276                           ;decode_AX25.c: 261: }else{
  4277                           
  4278                           ;decode_AX25.c: 259: rcv_state = 0;
  4279                           
  4280                           ;decode_AX25.c: 258: dPacketnum = 0;
  4281                           
  4282                           ;decode_AX25.c: 256: }
  4283                           ;decode_AX25.c: 257: }else{
  4284                           
  4285                           ;decode_AX25.c: 255: rcv_state = 0;
  4286                           
  4287                           ;decode_AX25.c: 254: dPacketnum = 0;
  4288                           
  4289                           ;decode_AX25.c: 252: }
  4290                           ;decode_AX25.c: 253: }else{
  4291                           
  4292                           ;decode_AX25.c: 251: rcv_state = 0;
  4293                           
  4294                           ;decode_AX25.c: 250: dPacketnum = 0;
  4295                           
  4296                           
  4297                           ;decode_AX25.c: 270: dPacketnum = 0;
  4298  07BD  01E6               	clrf	_dPacketnum
  4299  07BE  01E7               	clrf	_dPacketnum+1
  4300  07BF  2B3A               	goto	L6
  4301  07C0                     __end_of_waitFlag:	
  4302                           
  4303                           	psect	text5
  4304  0BE1                     __ptext5:	
  4305 ;; *************** function _getdata *****************
  4306 ;; Defined at:
  4307 ;;		line 278 in file "decode_AX25.c"
  4308 ;; Parameters:    Size  Location     Type
  4309 ;;		None
  4310 ;; Auto vars:     Size  Location     Type
  4311 ;;  dbitstatus      2    4[BANK0 ] unsigned int 
  4312 ;;  dstuff          2    2[BANK0 ] unsigned int 
  4313 ;;  bufstore_cou    2    0[BANK0 ] unsigned int 
  4314 ;;  buf             1    6[BANK0 ] unsigned char 
  4315 ;;  dammy_data      1    0        unsigned char 
  4316 ;; Return value:  Size  Location     Type
  4317 ;;                  1    wreg      void 
  4318 ;; Registers used:
  4319 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4320 ;; Tracked objects:
  4321 ;;		On entry : 0/0
  4322 ;;		On exit  : 0/0
  4323 ;;		Unchanged: 0/0
  4324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4325 ;;      Params:         0       0       0       0       0
  4326 ;;      Locals:         0       7       0       0       0
  4327 ;;      Temps:          2       0       0       0       0
  4328 ;;      Totals:         2       7       0       0       0
  4329 ;;Total ram usage:        9 bytes
  4330 ;; Hardware stack levels used:    1
  4331 ;; Hardware stack levels required when called:    1
  4332 ;; This function calls:
  4333 ;;		_getbit
  4334 ;; This function is called by:
  4335 ;;		_ReceivePacket_data
  4336 ;;		_ReceivePacket
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           
  4341                           ;psect for function _getdata
  4342  0BE1                     _getdata:	
  4343                           
  4344                           ;decode_AX25.c: 279: UBYTE buf = 0x00;
  4345                           
  4346                           ;incstack = 0
  4347                           ; Regs used in _getdata: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4348  0BE1  1283               	bcf	3,5	;RP0=0, select bank0
  4349  0BE2  1303               	bcf	3,6	;RP1=0, select bank0
  4350  0BE3  01A6               	clrf	getdata@buf
  4351                           
  4352                           ;decode_AX25.c: 280: UINT dstuff = 0;
  4353  0BE4  01A2               	clrf	getdata@dstuff
  4354  0BE5  01A3               	clrf	getdata@dstuff+1
  4355                           
  4356                           ;decode_AX25.c: 281: UBYTE dammy_data;
  4357                           ;decode_AX25.c: 282: UINT bufstore_counter = 0;
  4358  0BE6  01A0               	clrf	getdata@bufstore_counter
  4359  0BE7  01A1               	clrf	getdata@bufstore_counter+1
  4360                           
  4361                           ;decode_AX25.c: 283: UINT dbitstatus = 0;
  4362  0BE8  01A4               	clrf	getdata@dbitstatus
  4363  0BE9  01A5               	clrf	getdata@dbitstatus+1
  4364  0BEA                     l3133:	
  4365                           ;decode_AX25.c: 285: while(rcv_state == 2){
  4366                           
  4367  0BEA  3002               	movlw	2
  4368  0BEB  066A               	xorwf	_rcv_state,w
  4369  0BEC  046B               	iorwf	_rcv_state+1,w
  4370  0BED  1D03               	btfss	3,2
  4371  0BEE  0008               	return
  4372                           
  4373                           ;decode_AX25.c: 286: dbitstatus = getbit();
  4374  0BEF  120A  158A  227F  120A  158A  	fcall	_getbit
  4375  0BF4  0872               	movf	?_getbit+1,w
  4376  0BF5  1283               	bcf	3,5	;RP0=0, select bank0
  4377  0BF6  1303               	bcf	3,6	;RP1=0, select bank0
  4378  0BF7  00A5               	movwf	getdata@dbitstatus+1
  4379  0BF8  0871               	movf	?_getbit,w
  4380  0BF9  00A4               	movwf	getdata@dbitstatus
  4381                           
  4382                           ;decode_AX25.c: 287: if(dstuff == 5){
  4383  0BFA  3005               	movlw	5
  4384  0BFB  0622               	xorwf	getdata@dstuff,w
  4385  0BFC  0423               	iorwf	getdata@dstuff+1,w
  4386  0BFD  1D03               	btfss	3,2
  4387  0BFE  2C0D               	goto	l3115
  4388                           
  4389                           ;decode_AX25.c: 288: if(dbitstatus == 1){
  4390  0BFF  0324               	decf	getdata@dbitstatus,w
  4391  0C00  0425               	iorwf	getdata@dbitstatus+1,w
  4392  0C01  1D03               	btfss	3,2
  4393  0C02  2C0A               	goto	l3113
  4394                           
  4395                           ;decode_AX25.c: 289: rcv_state ++;
  4396  0C03  3001               	movlw	1
  4397  0C04  07EA               	addwf	_rcv_state,f
  4398  0C05  1803               	skipnc
  4399  0C06  0AEB               	incf	_rcv_state+1,f
  4400  0C07  3000               	movlw	0
  4401  0C08  07EB               	addwf	_rcv_state+1,f
  4402                           
  4403                           ;decode_AX25.c: 290: break;
  4404  0C09  0008               	return
  4405  0C0A                     l3113:	
  4406                           ;decode_AX25.c: 291: }else{
  4407                           
  4408                           
  4409                           ;decode_AX25.c: 292: dstuff = 0;
  4410  0C0A  01A2               	clrf	getdata@dstuff
  4411  0C0B  01A3               	clrf	getdata@dstuff+1
  4412                           
  4413                           ;decode_AX25.c: 293: }
  4414                           ;decode_AX25.c: 294: }else{
  4415  0C0C  2BEA               	goto	l3133
  4416  0C0D                     l3115:	
  4417                           
  4418                           ;decode_AX25.c: 295: buf = buf >> 1;
  4419  0C0D  0826               	movf	getdata@buf,w
  4420  0C0E  00F7               	movwf	??_getdata
  4421  0C0F  1003               	clrc
  4422  0C10  0C77               	rrf	??_getdata,w
  4423  0C11  00F8               	movwf	??_getdata+1
  4424  0C12  0878               	movf	??_getdata+1,w
  4425  0C13  00A6               	movwf	getdata@buf
  4426                           
  4427                           ;decode_AX25.c: 297: buf = buf | 0x00;
  4428  0C14  0824               	movf	getdata@dbitstatus,w
  4429  0C15  0425               	iorwf	getdata@dbitstatus+1,w
  4430  0C16  1D03               	btfss	3,2
  4431  0C17  2C1B               	goto	l3119
  4432                           
  4433                           ;decode_AX25.c: 298: dstuff = 0;
  4434  0C18  01A2               	clrf	getdata@dstuff
  4435  0C19  01A3               	clrf	getdata@dstuff+1
  4436                           
  4437                           ;decode_AX25.c: 299: }else{
  4438  0C1A  2C26               	goto	l3123
  4439  0C1B                     l3119:	
  4440                           
  4441                           ;decode_AX25.c: 300: buf = buf | 0x80;
  4442  0C1B  0826               	movf	getdata@buf,w
  4443  0C1C  3880               	iorlw	128
  4444  0C1D  00F7               	movwf	??_getdata
  4445  0C1E  0877               	movf	??_getdata,w
  4446  0C1F  00A6               	movwf	getdata@buf
  4447                           
  4448                           ;decode_AX25.c: 301: dstuff ++;
  4449  0C20  3001               	movlw	1
  4450  0C21  07A2               	addwf	getdata@dstuff,f
  4451  0C22  1803               	skipnc
  4452  0C23  0AA3               	incf	getdata@dstuff+1,f
  4453  0C24  3000               	movlw	0
  4454  0C25  07A3               	addwf	getdata@dstuff+1,f
  4455  0C26                     l3123:	
  4456                           
  4457                           ;decode_AX25.c: 302: }
  4458                           ;decode_AX25.c: 303: bufstore_counter ++;
  4459  0C26  3001               	movlw	1
  4460  0C27  07A0               	addwf	getdata@bufstore_counter,f
  4461  0C28  1803               	skipnc
  4462  0C29  0AA1               	incf	getdata@bufstore_counter+1,f
  4463  0C2A  3000               	movlw	0
  4464  0C2B  07A1               	addwf	getdata@bufstore_counter+1,f
  4465                           
  4466                           ;decode_AX25.c: 304: if(bufstore_counter == 8){
  4467  0C2C  3008               	movlw	8
  4468  0C2D  0620               	xorwf	getdata@bufstore_counter,w
  4469  0C2E  0421               	iorwf	getdata@bufstore_counter+1,w
  4470  0C2F  1D03               	btfss	3,2
  4471  0C30  2BEA               	goto	l3133
  4472                           
  4473                           ;decode_AX25.c: 305: bufstore_counter = 0;
  4474  0C31  01A0               	clrf	getdata@bufstore_counter
  4475  0C32  01A1               	clrf	getdata@bufstore_counter+1
  4476                           
  4477                           ;decode_AX25.c: 306: dPacket[dPacketnum] = buf;
  4478  0C33  0826               	movf	getdata@buf,w
  4479  0C34  00F7               	movwf	??_getdata
  4480  0C35  0866               	movf	_dPacketnum,w
  4481  0C36  3E10               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4482  0C37  0084               	movwf	4
  4483  0C38  0877               	movf	??_getdata,w
  4484  0C39  1783               	bsf	3,7	;select IRP bank2
  4485  0C3A  0080               	movwf	0
  4486                           
  4487                           ;decode_AX25.c: 307: dPacketnum ++;
  4488  0C3B  3001               	movlw	1
  4489  0C3C  07E6               	addwf	_dPacketnum,f
  4490  0C3D  1803               	skipnc
  4491  0C3E  0AE7               	incf	_dPacketnum+1,f
  4492  0C3F  3000               	movlw	0
  4493  0C40  07E7               	addwf	_dPacketnum+1,f
  4494  0C41  2BEA               	goto	l3133
  4495  0C42                     __end_of_getdata:	
  4496                           
  4497                           	psect	text6
  4498  0A7F                     __ptext6:	
  4499 ;; *************** function _getbit *****************
  4500 ;; Defined at:
  4501 ;;		line 40 in file "decode_AX25.c"
  4502 ;; Parameters:    Size  Location     Type
  4503 ;;		None
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;  i               2    4[COMMON] unsigned int 
  4506 ;; Return value:  Size  Location     Type
  4507 ;;                  2    0[COMMON] unsigned int 
  4508 ;; Registers used:
  4509 ;;		wreg, status,2, status,0
  4510 ;; Tracked objects:
  4511 ;;		On entry : 0/0
  4512 ;;		On exit  : 0/0
  4513 ;;		Unchanged: 0/0
  4514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4515 ;;      Params:         2       0       0       0       0
  4516 ;;      Locals:         2       0       0       0       0
  4517 ;;      Temps:          2       0       0       0       0
  4518 ;;      Totals:         6       0       0       0       0
  4519 ;;Total ram usage:        6 bytes
  4520 ;; Hardware stack levels used:    1
  4521 ;; This function calls:
  4522 ;;		Nothing
  4523 ;; This function is called by:
  4524 ;;		_waitFlag
  4525 ;;		_getdata
  4526 ;;		_conv_DI_UARTRX
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           
  4531                           ;psect for function _getbit
  4532  0A7F                     _getbit:	
  4533                           
  4534                           ;decode_AX25.c: 41: static UINT oldbit;
  4535                           ;decode_AX25.c: 42: oldbit = RB5;
  4536                           
  4537                           ;incstack = 0
  4538                           ; Regs used in _getbit: [wreg+status,2+status,0]
  4539  0A7F  1003               	clrc
  4540  0A80  1283               	bcf	3,5	;RP0=0, select bank0
  4541  0A81  1303               	bcf	3,6	;RP1=0, select bank0
  4542  0A82  1A86               	btfsc	6,5	;volatile
  4543  0A83  1403               	setc
  4544  0A84  3000               	movlw	0
  4545  0A85  1803               	skipnc
  4546  0A86  3001               	movlw	1
  4547  0A87  00F3               	movwf	??_getbit
  4548  0A88  01F4               	clrf	??_getbit+1
  4549  0A89  0873               	movf	??_getbit,w
  4550  0A8A  1683               	bsf	3,5	;RP0=1, select bank1
  4551  0A8B  1303               	bcf	3,6	;RP1=0, select bank1
  4552  0A8C  00E7               	movwf	getbit@oldbit^(0+128)
  4553  0A8D  0874               	movf	??_getbit+1,w
  4554  0A8E  00E8               	movwf	(getbit@oldbit+1)^(0+128)
  4555                           
  4556                           ;decode_AX25.c: 43: for(UINT i=0;i<62;i++){
  4557  0A8F  01F5               	clrf	getbit@i
  4558  0A90  01F6               	clrf	getbit@i+1
  4559  0A91  3000               	movlw	0
  4560  0A92  0276               	subwf	getbit@i+1,w
  4561  0A93  303E               	movlw	62
  4562  0A94  1903               	skipnz
  4563  0A95  0275               	subwf	getbit@i,w
  4564  0A96  1803               	btfsc	3,0
  4565  0A97  2AC6               	goto	l2579
  4566                           
  4567                           ;decode_AX25.c: 44: if(RB5 != oldbit){
  4568  0A98  1003               	clrc
  4569  0A99                     L7:	
  4570  0A99  1283               	bcf	3,5	;RP0=0, select bank0
  4571  0A9A  1A86               	btfsc	6,5	;volatile
  4572  0A9B  1403               	setc
  4573  0A9C  3000               	movlw	0
  4574  0A9D  1803               	skipnc
  4575  0A9E  3001               	movlw	1
  4576  0A9F  00F3               	movwf	??_getbit
  4577  0AA0  01F4               	clrf	??_getbit+1
  4578  0AA1  1683               	bsf	3,5	;RP0=1, select bank1
  4579  0AA2  1303               	bcf	3,6	;RP1=0, select bank1
  4580  0AA3  0868               	movf	(getbit@oldbit+1)^(0+128),w
  4581  0AA4  0674               	xorwf	??_getbit+1,w
  4582  0AA5  1D03               	skipz
  4583  0AA6  2AA9               	goto	u1905
  4584  0AA7  0867               	movf	getbit@oldbit^(0+128),w
  4585  0AA8  0673               	xorwf	??_getbit,w
  4586  0AA9                     u1905:	
  4587  0AA9  1903               	skipnz
  4588  0AAA  2AB9               	goto	l2577
  4589                           
  4590                           ;decode_AX25.c: 45: _delay((unsigned long)((400)*(10000000/4000000.0)));
  4591  0AAB  30F9               	movlw	249
  4592  0AAC  00F3               	movwf	??_getbit
  4593  0AAD                     u3717:	
  4594  0AAD  0000               	nop
  4595  0AAE  0BF3               	decfsz	??_getbit,f
  4596  0AAF  2AAD               	goto	u3717
  4597  0AB0  2AB1               	nop2	;nop
  4598  0AB1  0000               	nop
  4599                           
  4600                           ;decode_AX25.c: 46: RC2= 1- RC2;
  4601  0AB2  3004               	movlw	4
  4602  0AB3  1283               	bcf	3,5	;RP0=0, select bank0
  4603  0AB4  1303               	bcf	3,6	;RP1=0, select bank0
  4604  0AB5  0687               	xorwf	7,f
  4605                           
  4606                           ;decode_AX25.c: 47: return 0;
  4607  0AB6  01F1               	clrf	?_getbit
  4608  0AB7  01F2               	clrf	?_getbit+1
  4609  0AB8  0008               	return
  4610  0AB9                     l2577:	
  4611  0AB9  3001               	movlw	1
  4612  0ABA  07F5               	addwf	getbit@i,f
  4613  0ABB  1803               	skipnc
  4614  0ABC  0AF6               	incf	getbit@i+1,f
  4615  0ABD  3000               	movlw	0
  4616  0ABE  07F6               	addwf	getbit@i+1,f
  4617  0ABF  3000               	movlw	0
  4618  0AC0  0276               	subwf	getbit@i+1,w
  4619  0AC1  303E               	movlw	62
  4620  0AC2  1903               	skipnz
  4621  0AC3  0275               	subwf	getbit@i,w
  4622  0AC4  1C03               	skipc
  4623  0AC5  2A99               	goto	L7
  4624  0AC6                     l2579:	
  4625                           
  4626                           ;decode_AX25.c: 48: }
  4627                           ;decode_AX25.c: 49: }
  4628                           ;decode_AX25.c: 50: return 1;
  4629  0AC6  3001               	movlw	1
  4630  0AC7  00F1               	movwf	?_getbit
  4631  0AC8  3000               	movlw	0
  4632  0AC9  00F2               	movwf	?_getbit+1
  4633  0ACA  0008               	return
  4634  0ACB                     __end_of_getbit:	
  4635                           
  4636                           	psect	text7
  4637  0037                     __ptext7:	
  4638 ;; *************** function _fcscheck *****************
  4639 ;; Defined at:
  4640 ;;		line 313 in file "decode_AX25.c"
  4641 ;; Parameters:    Size  Location     Type
  4642 ;;		None
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;  i               2    7[COMMON] unsigned int 
  4645 ;;  i               2    5[COMMON] unsigned int 
  4646 ;;  byte            1    9[COMMON] unsigned char 
  4647 ;;  bt              1    4[COMMON] unsigned char 
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  2    0[COMMON] unsigned int 
  4650 ;; Registers used:
  4651 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4657 ;;      Params:         2       0       0       0       0
  4658 ;;      Locals:         6       0       0       0       0
  4659 ;;      Temps:          2       0       0       0       0
  4660 ;;      Totals:        10       0       0       0       0
  4661 ;;Total ram usage:       10 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; This function calls:
  4664 ;;		Nothing
  4665 ;; This function is called by:
  4666 ;;		_ReceivePacket_data
  4667 ;;		_ReceivePacket
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671                           
  4672                           ;psect for function _fcscheck
  4673  0037                     _fcscheck:	
  4674                           
  4675                           ;decode_AX25.c: 314: UBYTE bt,byte;
  4676                           ;decode_AX25.c: 315: dfcslo = dfcshi = 0xff;
  4677                           
  4678                           ;incstack = 0
  4679                           ; Regs used in _fcscheck: [wreg-fsr0h+status,2+status,0]
  4680  0037  30FF               	movlw	255
  4681  0038  1283               	bcf	3,5	;RP0=0, select bank0
  4682  0039  1303               	bcf	3,6	;RP1=0, select bank0
  4683  003A  00EC               	movwf	_dfcshi
  4684  003B  00F3               	movwf	??_fcscheck
  4685  003C  0873               	movf	??_fcscheck,w
  4686  003D  00ED               	movwf	_dfcslo
  4687                           
  4688                           ;decode_AX25.c: 316: while(rcv_state == 3){
  4689  003E  3003               	movlw	3
  4690  003F  066A               	xorwf	_rcv_state,w
  4691  0040  046B               	iorwf	_rcv_state+1,w
  4692  0041  1D03               	btfss	3,2
  4693  0042  0008               	return
  4694                           
  4695                           ;decode_AX25.c: 317: for(UINT i=0;i<dPacketnum-2;i++){
  4696  0043  01F6               	clrf	fcscheck@i
  4697  0044  01F7               	clrf	fcscheck@i+1
  4698  0045                     l3161:	
  4699  0045  0866               	movf	_dPacketnum,w
  4700  0046  3EFE               	addlw	254
  4701  0047  00F3               	movwf	??_fcscheck
  4702  0048  0867               	movf	_dPacketnum+1,w
  4703  0049  1803               	skipnc
  4704  004A  3E01               	addlw	1
  4705  004B  3EFF               	addlw	255
  4706  004C  00F4               	movwf	??_fcscheck+1
  4707  004D  0874               	movf	??_fcscheck+1,w
  4708  004E  0277               	subwf	fcscheck@i+1,w
  4709  004F  1D03               	skipz
  4710  0050  2853               	goto	u2775
  4711  0051  0873               	movf	??_fcscheck,w
  4712  0052  0276               	subwf	fcscheck@i,w
  4713  0053                     u2775:	
  4714  0053  1803               	btfsc	3,0
  4715  0054  289E               	goto	l272
  4716                           
  4717                           ;decode_AX25.c: 318: byte = dPacket[i];
  4718  0055  0876               	movf	fcscheck@i,w
  4719  0056  3E10               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4720  0057  0084               	movwf	4
  4721  0058  1783               	bsf	3,7	;select IRP bank2
  4722  0059  0800               	movf	0,w
  4723  005A  00F3               	movwf	??_fcscheck
  4724  005B  0873               	movf	??_fcscheck,w
  4725  005C  00FA               	movwf	fcscheck@byte
  4726                           
  4727                           ;decode_AX25.c: 319: for(UINT i=0;i<8;i++){
  4728  005D  01F8               	clrf	fcscheck@i_142
  4729  005E  01F9               	clrf	fcscheck@i_142+1
  4730  005F  3000               	movlw	0
  4731  0060  0279               	subwf	fcscheck@i_142+1,w
  4732  0061  3008               	movlw	8
  4733  0062  1903               	skipnz
  4734  0063  0278               	subwf	fcscheck@i_142,w
  4735  0064  1803               	btfsc	3,0
  4736  0065  2897               	goto	l3159
  4737  0066                     l3147:	
  4738                           
  4739                           ;decode_AX25.c: 320: bt = byte & 0x01;
  4740  0066  087A               	movf	fcscheck@byte,w
  4741  0067  3901               	andlw	1
  4742  0068  00F3               	movwf	??_fcscheck
  4743  0069  0873               	movf	??_fcscheck,w
  4744  006A  00F5               	movwf	fcscheck@bt
  4745  006B  1003               	bcf	3,0	;# 
  4746  006C  0CEC               	rrf	_dfcshi,f	;# 
  4747  006D  0CED               	rrf	_dfcslo,f	;# 
  4748                           
  4749                           ;decode_AX25.c: 326: if(((STATUS & 0x01)^bt) == 0x01){
  4750  006E  3001               	movlw	1
  4751  006F  1283               	bcf	3,5	;RP0=0, select bank0
  4752  0070  1303               	bcf	3,6	;RP1=0, select bank0
  4753  0071  0503               	andwf	3,w	;volatile
  4754  0072  00F3               	movwf	??_fcscheck
  4755  0073  0875               	movf	fcscheck@bt,w
  4756  0074  0673               	xorwf	??_fcscheck,w
  4757  0075  00F4               	movwf	??_fcscheck+1
  4758  0076  0374               	decf	??_fcscheck+1,w
  4759  0077  1D03               	btfss	3,2
  4760  0078  2883               	goto	l3153
  4761                           
  4762                           ;decode_AX25.c: 327: dfcshi = dfcshi ^ 0x84;
  4763  0079  086C               	movf	_dfcshi,w
  4764  007A  3A84               	xorlw	132
  4765  007B  00F3               	movwf	??_fcscheck
  4766  007C  0873               	movf	??_fcscheck,w
  4767  007D  00EC               	movwf	_dfcshi
  4768                           
  4769                           ;decode_AX25.c: 328: dfcslo = dfcslo ^ 0x08;
  4770  007E  086D               	movf	_dfcslo,w
  4771  007F  3A08               	xorlw	8
  4772  0080  00F3               	movwf	??_fcscheck
  4773  0081  0873               	movf	??_fcscheck,w
  4774  0082  00ED               	movwf	_dfcslo
  4775  0083                     l3153:	
  4776                           
  4777                           ;decode_AX25.c: 329: }
  4778                           ;decode_AX25.c: 330: byte = byte >> 1;
  4779  0083  087A               	movf	fcscheck@byte,w
  4780  0084  00F3               	movwf	??_fcscheck
  4781  0085  1003               	clrc
  4782  0086  0C73               	rrf	??_fcscheck,w
  4783  0087  00F4               	movwf	??_fcscheck+1
  4784  0088  0874               	movf	??_fcscheck+1,w
  4785  0089  00FA               	movwf	fcscheck@byte
  4786  008A  3001               	movlw	1
  4787  008B  07F8               	addwf	fcscheck@i_142,f
  4788  008C  1803               	skipnc
  4789  008D  0AF9               	incf	fcscheck@i_142+1,f
  4790  008E  3000               	movlw	0
  4791  008F  07F9               	addwf	fcscheck@i_142+1,f
  4792  0090  3000               	movlw	0
  4793  0091  0279               	subwf	fcscheck@i_142+1,w
  4794  0092  3008               	movlw	8
  4795  0093  1903               	skipnz
  4796  0094  0278               	subwf	fcscheck@i_142,w
  4797  0095  1C03               	skipc
  4798  0096  2866               	goto	l3147
  4799  0097                     l3159:	
  4800  0097  3001               	movlw	1
  4801  0098  07F6               	addwf	fcscheck@i,f
  4802  0099  1803               	skipnc
  4803  009A  0AF7               	incf	fcscheck@i+1,f
  4804  009B  3000               	movlw	0
  4805  009C  07F7               	addwf	fcscheck@i+1,f
  4806  009D  2845               	goto	l3161
  4807  009E                     l272:	
  4808                           
  4809                           ;decode_AX25.c: 331: }
  4810                           ;decode_AX25.c: 332: }
  4811                           ;decode_AX25.c: 333: dfcslo = dfcslo ^ 0xff;
  4812  009E  09ED               	comf	_dfcslo,f
  4813                           
  4814                           ;decode_AX25.c: 334: dfcshi = dfcshi ^ 0xff;
  4815  009F  09EC               	comf	_dfcshi,f
  4816                           
  4817                           ;decode_AX25.c: 337: if((dPacket[dPacketnum-2] == dfcslo) && (dPacket[dPacketnum-1] == d
      +                          fcshi)){
  4818  00A0  0866               	movf	_dPacketnum,w
  4819  00A1  3EFE               	addlw	254
  4820  00A2  3E10               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4821  00A3  0084               	movwf	4
  4822  00A4  1783               	bsf	3,7	;select IRP bank2
  4823  00A5  0800               	movf	0,w
  4824  00A6  066D               	xorwf	_dfcslo,w
  4825  00A7  1D03               	skipz
  4826  00A8  28B6               	goto	l3173
  4827  00A9  0866               	movf	_dPacketnum,w
  4828  00AA  3EFF               	addlw	255
  4829  00AB  3E10               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4830  00AC  0084               	movwf	4
  4831  00AD  0800               	movf	0,w
  4832  00AE  066C               	xorwf	_dfcshi,w
  4833  00AF  1D03               	skipz
  4834  00B0  28B6               	goto	l3173
  4835                           
  4836                           ;decode_AX25.c: 342: return 1;
  4837  00B1  3001               	movlw	1
  4838  00B2  00F1               	movwf	?_fcscheck
  4839  00B3  3000               	movlw	0
  4840  00B4  00F2               	movwf	?_fcscheck+1
  4841  00B5  0008               	return
  4842  00B6                     l3173:	
  4843                           ;decode_AX25.c: 343: }else{
  4844                           
  4845                           
  4846                           ;decode_AX25.c: 348: return 0;
  4847  00B6  01F1               	clrf	?_fcscheck
  4848  00B7  01F2               	clrf	?_fcscheck+1
  4849  00B8  0008               	return
  4850  00B9                     __end_of_fcscheck:	
  4851                           
  4852                           	psect	text8
  4853  17DA                     __ptext8:	
  4854 ;; *************** function _NM_waddress *****************
  4855 ;; Defined at:
  4856 ;;		line 71 in file "UART.c"
  4857 ;; Parameters:    Size  Location     Type
  4858 ;;  NM_wad_heade    1    wreg     unsigned char 
  4859 ;;  whigh_addres    1    1[COMMON] unsigned char 
  4860 ;;  wlow_address    1    2[COMMON] unsigned char 
  4861 ;; Auto vars:     Size  Location     Type
  4862 ;;  NM_wad_heade    1    3[COMMON] unsigned char 
  4863 ;; Return value:  Size  Location     Type
  4864 ;;                  1    wreg      void 
  4865 ;; Registers used:
  4866 ;;		wreg, status,2, status,0, pclath, cstack
  4867 ;; Tracked objects:
  4868 ;;		On entry : 0/0
  4869 ;;		On exit  : 0/0
  4870 ;;		Unchanged: 0/0
  4871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4872 ;;      Params:         2       0       0       0       0
  4873 ;;      Locals:         1       0       0       0       0
  4874 ;;      Temps:          0       0       0       0       0
  4875 ;;      Totals:         3       0       0       0       0
  4876 ;;Total ram usage:        3 bytes
  4877 ;; Hardware stack levels used:    1
  4878 ;; Hardware stack levels required when called:    1
  4879 ;; This function calls:
  4880 ;;		_putch
  4881 ;; This function is called by:
  4882 ;;		_main
  4883 ;; This function uses a non-reentrant model
  4884 ;;
  4885                           
  4886                           
  4887                           ;psect for function _NM_waddress
  4888  17DA                     _NM_waddress:	
  4889                           
  4890                           ;incstack = 0
  4891                           ; Regs used in _NM_waddress: [wreg+status,2+status,0+pclath+cstack]
  4892                           ;NM_waddress@NM_wad_header stored from wreg
  4893  17DA  00F4               	movwf	NM_waddress@NM_wad_header
  4894                           
  4895                           ;UART.c: 72: putch(NM_wad_header);
  4896  17DB  0874               	movf	NM_waddress@NM_wad_header,w
  4897  17DC  160A  118A  27B9  160A  118A  	fcall	_putch
  4898                           
  4899                           ;UART.c: 73: putch(whigh_address);
  4900  17E1  0872               	movf	NM_waddress@whigh_address,w
  4901  17E2  160A  118A  27B9  160A  118A  	fcall	_putch
  4902                           
  4903                           ;UART.c: 74: putch(wlow_address);
  4904  17E7  0873               	movf	NM_waddress@wlow_address,w
  4905  17E8  160A  118A  27B9   	fcall	_putch
  4906  17EB  0008               	return
  4907  17EC                     __end_of_NM_waddress:	
  4908                           
  4909                           	psect	text9
  4910  17B9                     __ptext9:	
  4911 ;; *************** function _putch *****************
  4912 ;; Defined at:
  4913 ;;		line 38 in file "UART.c"
  4914 ;; Parameters:    Size  Location     Type
  4915 ;;  byte            1    wreg     unsigned char 
  4916 ;; Auto vars:     Size  Location     Type
  4917 ;;  byte            1    0[COMMON] unsigned char 
  4918 ;; Return value:  Size  Location     Type
  4919 ;;                  1    wreg      void 
  4920 ;; Registers used:
  4921 ;;		wreg
  4922 ;; Tracked objects:
  4923 ;;		On entry : 0/0
  4924 ;;		On exit  : 0/0
  4925 ;;		Unchanged: 0/0
  4926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4927 ;;      Params:         0       0       0       0       0
  4928 ;;      Locals:         1       0       0       0       0
  4929 ;;      Temps:          0       0       0       0       0
  4930 ;;      Totals:         1       0       0       0       0
  4931 ;;Total ram usage:        1 bytes
  4932 ;; Hardware stack levels used:    1
  4933 ;; This function calls:
  4934 ;;		Nothing
  4935 ;; This function is called by:
  4936 ;;		_NM_waddress
  4937 ;;		_printf
  4938 ;;		_putstr
  4939 ;;		_putcrlf
  4940 ;;		_put_error
  4941 ;;		_put_ok
  4942 ;;		_putAX25
  4943 ;;		_conv_DI_UARTRX
  4944 ;;		_test_Packetmaker
  4945 ;;		_EEPROM_Read
  4946 ;; This function uses a non-reentrant model
  4947 ;;
  4948                           
  4949                           
  4950                           ;psect for function _putch
  4951  17B9                     _putch:	
  4952                           
  4953                           ;incstack = 0
  4954                           ; Regs used in _putch: [wreg]
  4955                           ;putch@byte stored from wreg
  4956  17B9  00F1               	movwf	putch@byte
  4957  17BA                     l65:	
  4958                           ;UART.c: 39: while(!TXIF);
  4959                           
  4960  17BA  1283               	bcf	3,5	;RP0=0, select bank0
  4961  17BB  1303               	bcf	3,6	;RP1=0, select bank0
  4962  17BC  1E0C               	btfss	12,4	;volatile
  4963  17BD  2FBA               	goto	l65
  4964                           
  4965                           ;UART.c: 40: TXREG = byte;
  4966  17BE  0871               	movf	putch@byte,w
  4967  17BF  0099               	movwf	25	;volatile
  4968  17C0  0008               	return
  4969  17C1                     __end_of_putch:	
  4970                           
  4971                           	psect	text10
  4972  17EC                     __ptext10:	
  4973 ;; *************** function _Init_WDT *****************
  4974 ;; Defined at:
  4975 ;;		line 5 in file "WDT.c"
  4976 ;; Parameters:    Size  Location     Type
  4977 ;;		None
  4978 ;; Auto vars:     Size  Location     Type
  4979 ;;		None
  4980 ;; Return value:  Size  Location     Type
  4981 ;;                  2  400[None  ] int 
  4982 ;; Registers used:
  4983 ;;		wreg, status,2, status,0
  4984 ;; Tracked objects:
  4985 ;;		On entry : 0/0
  4986 ;;		On exit  : 0/0
  4987 ;;		Unchanged: 0/0
  4988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4989 ;;      Params:         0       0       0       0       0
  4990 ;;      Locals:         0       0       0       0       0
  4991 ;;      Temps:          0       0       0       0       0
  4992 ;;      Totals:         0       0       0       0       0
  4993 ;;Total ram usage:        0 bytes
  4994 ;; Hardware stack levels used:    1
  4995 ;; This function calls:
  4996 ;;		Nothing
  4997 ;; This function is called by:
  4998 ;;		_main
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002                           
  5003                           ;psect for function _Init_WDT
  5004  17EC                     _Init_WDT:	
  5005                           
  5006                           ;WDT.c: 6: INTCONbits.GIE = 1;
  5007                           
  5008                           ;incstack = 0
  5009                           ; Regs used in _Init_WDT: [wreg+status,2+status,0]
  5010  17EC  178B               	bsf	11,7	;volatile
  5011                           
  5012                           ;WDT.c: 7: INTCONbits.PEIE = 1;
  5013  17ED  170B               	bsf	11,6	;volatile
  5014                           
  5015                           ;WDT.c: 9: PIR1bits.TMR1IF = 0;
  5016  17EE  1283               	bcf	3,5	;RP0=0, select bank0
  5017  17EF  1303               	bcf	3,6	;RP1=0, select bank0
  5018  17F0  100C               	bcf	12,0	;volatile
  5019                           
  5020                           ;WDT.c: 10: PIE1bits.TMR1IE = 1;
  5021  17F1  1683               	bsf	3,5	;RP0=1, select bank1
  5022  17F2  1303               	bcf	3,6	;RP1=0, select bank1
  5023  17F3  140C               	bsf	12,0	;volatile
  5024                           
  5025                           ;WDT.c: 13: T1CONbits.T1CKPS = 2;
  5026  17F4  1283               	bcf	3,5	;RP0=0, select bank0
  5027  17F5  1303               	bcf	3,6	;RP1=0, select bank0
  5028  17F6  0810               	movf	16,w	;volatile
  5029  17F7  39CF               	andlw	-49
  5030  17F8  3820               	iorlw	32
  5031  17F9  0090               	movwf	16	;volatile
  5032                           
  5033                           ;WDT.c: 14: TMR1 = (0xffff - 62500);
  5034  17FA  300B               	movlw	11
  5035  17FB  008F               	movwf	15	;volatile
  5036  17FC  30DB               	movlw	219
  5037  17FD  008E               	movwf	14	;volatile
  5038                           
  5039                           ;WDT.c: 16: T1CONbits.TMR1ON = 1;
  5040  17FE  1410               	bsf	16,0	;volatile
  5041  17FF  0008               	return
  5042  1800                     __end_of_Init_WDT:	
  5043                           
  5044                           	psect	text11
  5045  0840                     __ptext11:	
  5046 ;; *************** function _Init_SERIAL *****************
  5047 ;; Defined at:
  5048 ;;		line 5 in file "UART.c"
  5049 ;; Parameters:    Size  Location     Type
  5050 ;;		None
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;		None
  5053 ;; Return value:  Size  Location     Type
  5054 ;;                  1    wreg      void 
  5055 ;; Registers used:
  5056 ;;		wreg
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5062 ;;      Params:         0       0       0       0       0
  5063 ;;      Locals:         0       0       0       0       0
  5064 ;;      Temps:          0       0       0       0       0
  5065 ;;      Totals:         0       0       0       0       0
  5066 ;;Total ram usage:        0 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; This function calls:
  5069 ;;		Nothing
  5070 ;; This function is called by:
  5071 ;;		_main
  5072 ;; This function uses a non-reentrant model
  5073 ;;
  5074                           
  5075                           
  5076                           ;psect for function _Init_SERIAL
  5077  0840                     _Init_SERIAL:	
  5078                           
  5079                           ;UART.c: 6: SPBRG = 10;
  5080                           
  5081                           ;incstack = 0
  5082                           ; Regs used in _Init_SERIAL: [wreg]
  5083  0840  300A               	movlw	10
  5084  0841  1683               	bsf	3,5	;RP0=1, select bank1
  5085  0842  1303               	bcf	3,6	;RP1=0, select bank1
  5086  0843  0099               	movwf	25	;volatile
  5087                           
  5088                           ;UART.c: 7: BRGH = 0;
  5089  0844  1118               	bcf	24,2	;volatile
  5090                           
  5091                           ;UART.c: 8: SYNC = 0;
  5092  0845  1218               	bcf	24,4	;volatile
  5093                           
  5094                           ;UART.c: 9: SPEN = 1;
  5095  0846  1283               	bcf	3,5	;RP0=0, select bank0
  5096  0847  1303               	bcf	3,6	;RP1=0, select bank0
  5097  0848  1798               	bsf	24,7	;volatile
  5098                           
  5099                           ;UART.c: 10: CREN = 1;
  5100  0849  1618               	bsf	24,4	;volatile
  5101                           
  5102                           ;UART.c: 11: SREN = 0;
  5103  084A  1298               	bcf	24,5	;volatile
  5104                           
  5105                           ;UART.c: 12: RCIF = 0;
  5106  084B  128C               	bcf	12,5	;volatile
  5107                           
  5108                           ;UART.c: 13: TXIE = 0;
  5109  084C  1683               	bsf	3,5	;RP0=1, select bank1
  5110  084D  1303               	bcf	3,6	;RP1=0, select bank1
  5111  084E  120C               	bcf	12,4	;volatile
  5112                           
  5113                           ;UART.c: 14: RCIE = 1;
  5114  084F  168C               	bsf	12,5	;volatile
  5115                           
  5116                           ;UART.c: 15: TX9 = 0;
  5117  0850  1318               	bcf	24,6	;volatile
  5118                           
  5119                           ;UART.c: 16: RX9 = 0;
  5120  0851  1283               	bcf	3,5	;RP0=0, select bank0
  5121  0852  1303               	bcf	3,6	;RP1=0, select bank0
  5122  0853  1318               	bcf	24,6	;volatile
  5123                           
  5124                           ;UART.c: 17: TXEN = 0;
  5125  0854  1683               	bsf	3,5	;RP0=1, select bank1
  5126  0855  1303               	bcf	3,6	;RP1=0, select bank1
  5127  0856  1298               	bcf	24,5	;volatile
  5128                           
  5129                           ;UART.c: 18: TXEN = 1;
  5130  0857  1698               	bsf	24,5	;volatile
  5131  0858  0008               	return
  5132  0859                     __end_of_Init_SERIAL:	
  5133                           
  5134                           	psect	text12
  5135  0873                     __ptext12:	
  5136 ;; *************** function _Init_MPU *****************
  5137 ;; Defined at:
  5138 ;;		line 8 in file "Init_MPU.c"
  5139 ;; Parameters:    Size  Location     Type
  5140 ;;		None
  5141 ;; Auto vars:     Size  Location     Type
  5142 ;;		None
  5143 ;; Return value:  Size  Location     Type
  5144 ;;                  1    wreg      void 
  5145 ;; Registers used:
  5146 ;;		wreg, status,2
  5147 ;; Tracked objects:
  5148 ;;		On entry : 0/0
  5149 ;;		On exit  : 0/0
  5150 ;;		Unchanged: 0/0
  5151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5152 ;;      Params:         0       0       0       0       0
  5153 ;;      Locals:         0       0       0       0       0
  5154 ;;      Temps:          0       0       0       0       0
  5155 ;;      Totals:         0       0       0       0       0
  5156 ;;Total ram usage:        0 bytes
  5157 ;; Hardware stack levels used:    1
  5158 ;; This function calls:
  5159 ;;		Nothing
  5160 ;; This function is called by:
  5161 ;;		_main
  5162 ;; This function uses a non-reentrant model
  5163 ;;
  5164                           
  5165                           
  5166                           ;psect for function _Init_MPU
  5167  0873                     _Init_MPU:	
  5168                           
  5169                           ;Init_MPU.c: 11: PORTA = 0x00;
  5170                           
  5171                           ;incstack = 0
  5172                           ; Regs used in _Init_MPU: [wreg+status,2]
  5173  0873  1283               	bcf	3,5	;RP0=0, select bank0
  5174  0874  1303               	bcf	3,6	;RP1=0, select bank0
  5175  0875  0185               	clrf	5	;volatile
  5176                           
  5177                           ;Init_MPU.c: 12: PORTB = 0x00;
  5178  0876  0186               	clrf	6	;volatile
  5179                           
  5180                           ;Init_MPU.c: 13: PORTC = 0x00;
  5181  0877  0187               	clrf	7	;volatile
  5182                           
  5183                           ;Init_MPU.c: 14: PORTD = 0x00;
  5184  0878  0188               	clrf	8	;volatile
  5185                           
  5186                           ;Init_MPU.c: 15: PORTE = 0x00;
  5187  0879  0189               	clrf	9	;volatile
  5188                           
  5189                           ;Init_MPU.c: 18: ANSEL = 0x00;
  5190  087A  1683               	bsf	3,5	;RP0=1, select bank3
  5191  087B  1703               	bsf	3,6	;RP1=1, select bank3
  5192  087C  0188               	clrf	8	;volatile
  5193                           
  5194                           ;Init_MPU.c: 19: ANSELH = 0x00;
  5195  087D  0189               	clrf	9	;volatile
  5196                           
  5197                           ;Init_MPU.c: 23: TRISA = 0b10000000;
  5198  087E  3080               	movlw	128
  5199  087F  1683               	bsf	3,5	;RP0=1, select bank1
  5200  0880  1303               	bcf	3,6	;RP1=0, select bank1
  5201  0881  0085               	movwf	5	;volatile
  5202                           
  5203                           ;Init_MPU.c: 24: TRISB = 0b00100000;
  5204  0882  3020               	movlw	32
  5205  0883  0086               	movwf	6	;volatile
  5206                           
  5207                           ;Init_MPU.c: 25: TRISC = 0b10011000;
  5208  0884  3098               	movlw	152
  5209  0885  0087               	movwf	7	;volatile
  5210                           
  5211                           ;Init_MPU.c: 26: TRISD = 0b00000000;
  5212  0886  0188               	clrf	8	;volatile
  5213                           
  5214                           ;Init_MPU.c: 27: TRISE = 0b00000000;
  5215  0887  0189               	clrf	9	;volatile
  5216                           
  5217                           ;Init_MPU.c: 30: PORTA = 0x00;
  5218  0888  1283               	bcf	3,5	;RP0=0, select bank0
  5219  0889  1303               	bcf	3,6	;RP1=0, select bank0
  5220  088A  0185               	clrf	5	;volatile
  5221                           
  5222                           ;Init_MPU.c: 31: PORTB = 0x00;
  5223  088B  0186               	clrf	6	;volatile
  5224                           
  5225                           ;Init_MPU.c: 32: PORTC = 0x00;
  5226  088C  0187               	clrf	7	;volatile
  5227                           
  5228                           ;Init_MPU.c: 33: PORTD = 0x00;
  5229  088D  0188               	clrf	8	;volatile
  5230                           
  5231                           ;Init_MPU.c: 34: PORTE = 0x00;
  5232  088E  0189               	clrf	9	;volatile
  5233  088F  0008               	return
  5234  0890                     __end_of_Init_MPU:	
  5235                           
  5236                           	psect	text13
  5237  0937                     __ptext13:	
  5238 ;; *************** function _Init_I2C_M *****************
  5239 ;; Defined at:
  5240 ;;		line 8 in file "I2C.c"
  5241 ;; Parameters:    Size  Location     Type
  5242 ;;  c               4    5[BANK0 ] const unsigned long 
  5243 ;; Auto vars:     Size  Location     Type
  5244 ;;		None
  5245 ;; Return value:  Size  Location     Type
  5246 ;;                  1    wreg      void 
  5247 ;; Registers used:
  5248 ;;		wreg, status,2, status,0, pclath, cstack
  5249 ;; Tracked objects:
  5250 ;;		On entry : 0/0
  5251 ;;		On exit  : 0/0
  5252 ;;		Unchanged: 0/0
  5253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5254 ;;      Params:         0       4       0       0       0
  5255 ;;      Locals:         0       0       0       0       0
  5256 ;;      Temps:          4       0       0       0       0
  5257 ;;      Totals:         4       4       0       0       0
  5258 ;;Total ram usage:        8 bytes
  5259 ;; Hardware stack levels used:    1
  5260 ;; Hardware stack levels required when called:    1
  5261 ;; This function calls:
  5262 ;;		___lldiv
  5263 ;; This function is called by:
  5264 ;;		_main
  5265 ;; This function uses a non-reentrant model
  5266 ;;
  5267                           
  5268                           
  5269                           ;psect for function _Init_I2C_M
  5270  0937                     _Init_I2C_M:	
  5271                           
  5272                           ;I2C.c: 9: SSPCON = 0b00101000;
  5273                           
  5274                           ;incstack = 0
  5275                           ; Regs used in _Init_I2C_M: [wreg+status,2+status,0+pclath+cstack]
  5276  0937  3028               	movlw	40
  5277  0938  1283               	bcf	3,5	;RP0=0, select bank0
  5278  0939  1303               	bcf	3,6	;RP1=0, select bank0
  5279  093A  0094               	movwf	20	;volatile
  5280                           
  5281                           ;I2C.c: 10: SSPCON2 = 0;
  5282  093B  1683               	bsf	3,5	;RP0=1, select bank1
  5283  093C  1303               	bcf	3,6	;RP1=0, select bank1
  5284  093D  0191               	clrf	17	;volatile
  5285                           
  5286                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  5287  093E  1283               	bcf	3,5	;RP0=0, select bank0
  5288  093F  1303               	bcf	3,6	;RP1=0, select bank0
  5289  0940  0825               	movf	Init_I2C_M@c,w
  5290  0941  00FA               	movwf	??_Init_I2C_M
  5291  0942  0826               	movf	Init_I2C_M@c+1,w
  5292  0943  00FB               	movwf	??_Init_I2C_M+1
  5293  0944  0827               	movf	Init_I2C_M@c+2,w
  5294  0945  00FC               	movwf	??_Init_I2C_M+2
  5295  0946  0828               	movf	Init_I2C_M@c+3,w
  5296  0947  00FD               	movwf	??_Init_I2C_M+3
  5297  0948  3002               	movlw	2
  5298  0949                     u3195:	
  5299  0949  1003               	clrc
  5300  094A  0DFA               	rlf	??_Init_I2C_M,f
  5301  094B  0DFB               	rlf	??_Init_I2C_M+1,f
  5302  094C  0DFC               	rlf	??_Init_I2C_M+2,f
  5303  094D  0DFD               	rlf	??_Init_I2C_M+3,f
  5304  094E  3EFF               	addlw	-1
  5305  094F  1D03               	skipz
  5306  0950  2949               	goto	u3195
  5307  0951  087D               	movf	??_Init_I2C_M+3,w
  5308  0952  00F4               	movwf	___lldiv@divisor+3
  5309  0953  087C               	movf	??_Init_I2C_M+2,w
  5310  0954  00F3               	movwf	___lldiv@divisor+2
  5311  0955  087B               	movf	??_Init_I2C_M+1,w
  5312  0956  00F2               	movwf	___lldiv@divisor+1
  5313  0957  087A               	movf	??_Init_I2C_M,w
  5314  0958  00F1               	movwf	___lldiv@divisor
  5315  0959  3000               	movlw	0
  5316  095A  00F8               	movwf	___lldiv@dividend+3
  5317  095B  3098               	movlw	152
  5318  095C  00F7               	movwf	___lldiv@dividend+2
  5319  095D  3096               	movlw	150
  5320  095E  00F6               	movwf	___lldiv@dividend+1
  5321  095F  3080               	movlw	128
  5322  0960  00F5               	movwf	___lldiv@dividend
  5323  0961  120A  158A  2381   	fcall	___lldiv
  5324  0964  0871               	movf	?___lldiv,w
  5325  0965  3EFF               	addlw	255
  5326  0966  1683               	bsf	3,5	;RP0=1, select bank1
  5327  0967  1303               	bcf	3,6	;RP1=0, select bank1
  5328  0968  0093               	movwf	19	;volatile
  5329                           
  5330                           ;I2C.c: 12: SSPSTAT = 0;
  5331  0969  0194               	clrf	20	;volatile
  5332  096A  0008               	return
  5333  096B                     __end_of_Init_I2C_M:	
  5334                           
  5335                           	psect	text14
  5336  0B81                     __ptext14:	
  5337 ;; *************** function ___lldiv *****************
  5338 ;; Defined at:
  5339 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  5340 ;; Parameters:    Size  Location     Type
  5341 ;;  divisor         4    0[COMMON] unsigned long 
  5342 ;;  dividend        4    4[COMMON] unsigned long 
  5343 ;; Auto vars:     Size  Location     Type
  5344 ;;  quotient        4    0[BANK0 ] unsigned long 
  5345 ;;  counter         1    4[BANK0 ] unsigned char 
  5346 ;; Return value:  Size  Location     Type
  5347 ;;                  4    0[COMMON] unsigned long 
  5348 ;; Registers used:
  5349 ;;		wreg, status,2, status,0
  5350 ;; Tracked objects:
  5351 ;;		On entry : 0/0
  5352 ;;		On exit  : 0/0
  5353 ;;		Unchanged: 0/0
  5354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5355 ;;      Params:         8       0       0       0       0
  5356 ;;      Locals:         0       5       0       0       0
  5357 ;;      Temps:          1       0       0       0       0
  5358 ;;      Totals:         9       5       0       0       0
  5359 ;;Total ram usage:       14 bytes
  5360 ;; Hardware stack levels used:    1
  5361 ;; This function calls:
  5362 ;;		Nothing
  5363 ;; This function is called by:
  5364 ;;		_Init_I2C_M
  5365 ;; This function uses a non-reentrant model
  5366 ;;
  5367                           
  5368                           
  5369                           ;psect for function ___lldiv
  5370  0B81                     ___lldiv:	
  5371                           
  5372                           ;incstack = 0
  5373                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5374  0B81  3000               	movlw	0
  5375  0B82  1283               	bcf	3,5	;RP0=0, select bank0
  5376  0B83  1303               	bcf	3,6	;RP1=0, select bank0
  5377  0B84  00A3               	movwf	___lldiv@quotient+3
  5378  0B85  3000               	movlw	0
  5379  0B86  00A2               	movwf	___lldiv@quotient+2
  5380  0B87  3000               	movlw	0
  5381  0B88  00A1               	movwf	___lldiv@quotient+1
  5382  0B89  3000               	movlw	0
  5383  0B8A  00A0               	movwf	___lldiv@quotient
  5384  0B8B  0874               	movf	___lldiv@divisor+3,w
  5385  0B8C  0473               	iorwf	___lldiv@divisor+2,w
  5386  0B8D  0472               	iorwf	___lldiv@divisor+1,w
  5387  0B8E  0471               	iorwf	___lldiv@divisor,w
  5388  0B8F  1903               	skipnz
  5389  0B90  2BD8               	goto	l3337
  5390  0B91  01A4               	clrf	___lldiv@counter
  5391  0B92  0AA4               	incf	___lldiv@counter,f
  5392  0B93                     l3323:	
  5393  0B93  1BF4               	btfsc	___lldiv@divisor+3,7
  5394  0B94  2BA3               	goto	l3325
  5395  0B95  3001               	movlw	1
  5396  0B96  00F9               	movwf	??___lldiv
  5397  0B97                     u3045:	
  5398  0B97  1003               	clrc
  5399  0B98  0DF1               	rlf	___lldiv@divisor,f
  5400  0B99  0DF2               	rlf	___lldiv@divisor+1,f
  5401  0B9A  0DF3               	rlf	___lldiv@divisor+2,f
  5402  0B9B  0DF4               	rlf	___lldiv@divisor+3,f
  5403  0B9C  0BF9               	decfsz	??___lldiv,f
  5404  0B9D  2B97               	goto	u3045
  5405  0B9E  3001               	movlw	1
  5406  0B9F  00F9               	movwf	??___lldiv
  5407  0BA0  0879               	movf	??___lldiv,w
  5408  0BA1  07A4               	addwf	___lldiv@counter,f
  5409  0BA2  2B93               	goto	l3323
  5410  0BA3                     l3325:	
  5411  0BA3  3001               	movlw	1
  5412  0BA4  00F9               	movwf	??___lldiv
  5413  0BA5                     u3065:	
  5414  0BA5  1003               	clrc
  5415  0BA6  0DA0               	rlf	___lldiv@quotient,f
  5416  0BA7  0DA1               	rlf	___lldiv@quotient+1,f
  5417  0BA8  0DA2               	rlf	___lldiv@quotient+2,f
  5418  0BA9  0DA3               	rlf	___lldiv@quotient+3,f
  5419  0BAA  0BF9               	decfsz	??___lldiv,f
  5420  0BAB  2BA5               	goto	u3065
  5421  0BAC  0874               	movf	___lldiv@divisor+3,w
  5422  0BAD  0278               	subwf	___lldiv@dividend+3,w
  5423  0BAE  1D03               	skipz
  5424  0BAF  2BBA               	goto	u3075
  5425  0BB0  0873               	movf	___lldiv@divisor+2,w
  5426  0BB1  0277               	subwf	___lldiv@dividend+2,w
  5427  0BB2  1D03               	skipz
  5428  0BB3  2BBA               	goto	u3075
  5429  0BB4  0872               	movf	___lldiv@divisor+1,w
  5430  0BB5  0276               	subwf	___lldiv@dividend+1,w
  5431  0BB6  1D03               	skipz
  5432  0BB7  2BBA               	goto	u3075
  5433  0BB8  0871               	movf	___lldiv@divisor,w
  5434  0BB9  0275               	subwf	___lldiv@dividend,w
  5435  0BBA                     u3075:	
  5436  0BBA  1C03               	skipc
  5437  0BBB  2BCB               	goto	l3333
  5438  0BBC  0871               	movf	___lldiv@divisor,w
  5439  0BBD  02F5               	subwf	___lldiv@dividend,f
  5440  0BBE  0872               	movf	___lldiv@divisor+1,w
  5441  0BBF  1C03               	skipc
  5442  0BC0  0F72               	incfsz	___lldiv@divisor+1,w
  5443  0BC1  02F6               	subwf	___lldiv@dividend+1,f
  5444  0BC2  0873               	movf	___lldiv@divisor+2,w
  5445  0BC3  1C03               	skipc
  5446  0BC4  0F73               	incfsz	___lldiv@divisor+2,w
  5447  0BC5  02F7               	subwf	___lldiv@dividend+2,f
  5448  0BC6  0874               	movf	___lldiv@divisor+3,w
  5449  0BC7  1C03               	skipc
  5450  0BC8  0F74               	incfsz	___lldiv@divisor+3,w
  5451  0BC9  02F8               	subwf	___lldiv@dividend+3,f
  5452  0BCA  1420               	bsf	___lldiv@quotient,0
  5453  0BCB                     l3333:	
  5454  0BCB  3001               	movlw	1
  5455  0BCC                     u3085:	
  5456  0BCC  1003               	clrc
  5457  0BCD  0CF4               	rrf	___lldiv@divisor+3,f
  5458  0BCE  0CF3               	rrf	___lldiv@divisor+2,f
  5459  0BCF  0CF2               	rrf	___lldiv@divisor+1,f
  5460  0BD0  0CF1               	rrf	___lldiv@divisor,f
  5461  0BD1  3EFF               	addlw	-1
  5462  0BD2  1D03               	skipz
  5463  0BD3  2BCC               	goto	u3085
  5464  0BD4  3001               	movlw	1
  5465  0BD5  02A4               	subwf	___lldiv@counter,f
  5466  0BD6  1D03               	btfss	3,2
  5467  0BD7  2BA3               	goto	l3325
  5468  0BD8                     l3337:	
  5469  0BD8  0823               	movf	___lldiv@quotient+3,w
  5470  0BD9  00F4               	movwf	?___lldiv+3
  5471  0BDA  0822               	movf	___lldiv@quotient+2,w
  5472  0BDB  00F3               	movwf	?___lldiv+2
  5473  0BDC  0821               	movf	___lldiv@quotient+1,w
  5474  0BDD  00F2               	movwf	?___lldiv+1
  5475  0BDE  0820               	movf	___lldiv@quotient,w
  5476  0BDF  00F1               	movwf	?___lldiv
  5477  0BE0  0008               	return
  5478  0BE1                     __end_of___lldiv:	
  5479                           
  5480                           	psect	text15
  5481  090B                     __ptext15:	
  5482 ;; *************** function _FMTX *****************
  5483 ;; Defined at:
  5484 ;;		line 270 in file "FMCW.c"
  5485 ;; Parameters:    Size  Location     Type
  5486 ;;  Nref            2   60[BANK0 ] int 
  5487 ;;  Nprg            2   62[BANK0 ] PTR int 
  5488 ;;		 -> RAM(512), main@FMTX_Nprg(10), FMTX_Nprg(10), 
  5489 ;; Auto vars:     Size  Location     Type
  5490 ;;  fmtx            2   64[BANK0 ] int 
  5491 ;; Return value:  Size  Location     Type
  5492 ;;                  1    wreg      void 
  5493 ;; Registers used:
  5494 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5495 ;; Tracked objects:
  5496 ;;		On entry : 0/0
  5497 ;;		On exit  : 0/0
  5498 ;;		Unchanged: 0/0
  5499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5500 ;;      Params:         0       4       0       0       0
  5501 ;;      Locals:         0       2       0       0       0
  5502 ;;      Temps:          0       0       0       0       0
  5503 ;;      Totals:         0       6       0       0       0
  5504 ;;Total ram usage:        6 bytes
  5505 ;; Hardware stack levels used:    1
  5506 ;; Hardware stack levels required when called:    3
  5507 ;; This function calls:
  5508 ;;		_OPINIT
  5509 ;;		_OUTFQ
  5510 ;;		_RFDOUT
  5511 ;; This function is called by:
  5512 ;;		_main
  5513 ;;		_SetPLL
  5514 ;; This function uses a non-reentrant model
  5515 ;;
  5516                           
  5517                           
  5518                           ;psect for function _FMTX
  5519  090B                     _FMTX:	
  5520                           
  5521                           ;FMCW.c: 271: int fmtx = 1;
  5522                           
  5523                           ;incstack = 0
  5524                           ; Regs used in _FMTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5525  090B  3001               	movlw	1
  5526  090C  1283               	bcf	3,5	;RP0=0, select bank0
  5527  090D  1303               	bcf	3,6	;RP1=0, select bank0
  5528  090E  00E0               	movwf	FMTX@fmtx
  5529  090F  3000               	movlw	0
  5530  0910  00E1               	movwf	FMTX@fmtx+1
  5531                           
  5532                           ;FMCW.c: 272: OPINIT(fmtx);
  5533  0911  0861               	movf	FMTX@fmtx+1,w
  5534  0912  00F6               	movwf	OPINIT@fmcwtxrx+1
  5535  0913  0860               	movf	FMTX@fmtx,w
  5536  0914  00F5               	movwf	OPINIT@fmcwtxrx
  5537  0915  120A  158A  24A7  120A  158A  	fcall	_OPINIT
  5538                           
  5539                           ;FMCW.c: 273: RFDOUT(fmtx, Nref);
  5540  091A  1283               	bcf	3,5	;RP0=0, select bank0
  5541  091B  1303               	bcf	3,6	;RP1=0, select bank0
  5542  091C  0861               	movf	FMTX@fmtx+1,w
  5543  091D  00FB               	movwf	RFDOUT@fmcwtxrx+1
  5544  091E  0860               	movf	FMTX@fmtx,w
  5545  091F  00FA               	movwf	RFDOUT@fmcwtxrx
  5546  0920  085D               	movf	FMTX@Nref+1,w
  5547  0921  00FD               	movwf	RFDOUT@Nref+1
  5548  0922  085C               	movf	FMTX@Nref,w
  5549  0923  00FC               	movwf	RFDOUT@Nref
  5550  0924  120A  158A  2524  120A  158A  	fcall	_RFDOUT
  5551                           
  5552                           ;FMCW.c: 274: OUTFQ(fmtx, Nprg);
  5553  0929  1283               	bcf	3,5	;RP0=0, select bank0
  5554  092A  1303               	bcf	3,6	;RP1=0, select bank0
  5555  092B  0861               	movf	FMTX@fmtx+1,w
  5556  092C  00FB               	movwf	OUTFQ@fmcwtxrx+1
  5557  092D  0860               	movf	FMTX@fmtx,w
  5558  092E  00FA               	movwf	OUTFQ@fmcwtxrx
  5559  092F  085E               	movf	FMTX@Nprg,w
  5560  0930  00FC               	movwf	OUTFQ@Nprg
  5561  0931  085F               	movf	FMTX@Nprg+1,w
  5562  0932  00FD               	movwf	OUTFQ@Nprg+1
  5563  0933  120A  118A  20B9   	fcall	_OUTFQ
  5564  0936  0008               	return
  5565  0937                     __end_of_FMTX:	
  5566                           
  5567                           	psect	text16
  5568  08DF                     __ptext16:	
  5569 ;; *************** function _FMRX *****************
  5570 ;; Defined at:
  5571 ;;		line 298 in file "FMCW.c"
  5572 ;; Parameters:    Size  Location     Type
  5573 ;;  Nref            2   60[BANK0 ] int 
  5574 ;;  Nprg            2   62[BANK0 ] PTR int 
  5575 ;;		 -> RAM(512), main@FMRX_Nprg(10), FMRX_Nprg(10), 
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;  fmrx            2   64[BANK0 ] int 
  5578 ;; Return value:  Size  Location     Type
  5579 ;;                  1    wreg      void 
  5580 ;; Registers used:
  5581 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5582 ;; Tracked objects:
  5583 ;;		On entry : 0/0
  5584 ;;		On exit  : 0/0
  5585 ;;		Unchanged: 0/0
  5586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5587 ;;      Params:         0       4       0       0       0
  5588 ;;      Locals:         0       2       0       0       0
  5589 ;;      Temps:          0       0       0       0       0
  5590 ;;      Totals:         0       6       0       0       0
  5591 ;;Total ram usage:        6 bytes
  5592 ;; Hardware stack levels used:    1
  5593 ;; Hardware stack levels required when called:    3
  5594 ;; This function calls:
  5595 ;;		_OPINIT
  5596 ;;		_OUTFQ
  5597 ;;		_RFDOUT
  5598 ;; This function is called by:
  5599 ;;		_main
  5600 ;;		_SetPLL
  5601 ;; This function uses a non-reentrant model
  5602 ;;
  5603                           
  5604                           
  5605                           ;psect for function _FMRX
  5606  08DF                     _FMRX:	
  5607                           
  5608                           ;FMCW.c: 299: int fmrx = 3;
  5609                           
  5610                           ;incstack = 0
  5611                           ; Regs used in _FMRX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5612  08DF  3003               	movlw	3
  5613  08E0  1283               	bcf	3,5	;RP0=0, select bank0
  5614  08E1  1303               	bcf	3,6	;RP1=0, select bank0
  5615  08E2  00E0               	movwf	FMRX@fmrx
  5616  08E3  3000               	movlw	0
  5617  08E4  00E1               	movwf	FMRX@fmrx+1
  5618                           
  5619                           ;FMCW.c: 300: OPINIT(fmrx);
  5620  08E5  0861               	movf	FMRX@fmrx+1,w
  5621  08E6  00F6               	movwf	OPINIT@fmcwtxrx+1
  5622  08E7  0860               	movf	FMRX@fmrx,w
  5623  08E8  00F5               	movwf	OPINIT@fmcwtxrx
  5624  08E9  120A  158A  24A7  120A  158A  	fcall	_OPINIT
  5625                           
  5626                           ;FMCW.c: 301: RFDOUT(fmrx, Nref);
  5627  08EE  1283               	bcf	3,5	;RP0=0, select bank0
  5628  08EF  1303               	bcf	3,6	;RP1=0, select bank0
  5629  08F0  0861               	movf	FMRX@fmrx+1,w
  5630  08F1  00FB               	movwf	RFDOUT@fmcwtxrx+1
  5631  08F2  0860               	movf	FMRX@fmrx,w
  5632  08F3  00FA               	movwf	RFDOUT@fmcwtxrx
  5633  08F4  085D               	movf	FMRX@Nref+1,w
  5634  08F5  00FD               	movwf	RFDOUT@Nref+1
  5635  08F6  085C               	movf	FMRX@Nref,w
  5636  08F7  00FC               	movwf	RFDOUT@Nref
  5637  08F8  120A  158A  2524  120A  158A  	fcall	_RFDOUT
  5638                           
  5639                           ;FMCW.c: 302: OUTFQ(fmrx, Nprg);
  5640  08FD  1283               	bcf	3,5	;RP0=0, select bank0
  5641  08FE  1303               	bcf	3,6	;RP1=0, select bank0
  5642  08FF  0861               	movf	FMRX@fmrx+1,w
  5643  0900  00FB               	movwf	OUTFQ@fmcwtxrx+1
  5644  0901  0860               	movf	FMRX@fmrx,w
  5645  0902  00FA               	movwf	OUTFQ@fmcwtxrx
  5646  0903  085E               	movf	FMRX@Nprg,w
  5647  0904  00FC               	movwf	OUTFQ@Nprg
  5648  0905  085F               	movf	FMRX@Nprg+1,w
  5649  0906  00FD               	movwf	OUTFQ@Nprg+1
  5650  0907  120A  118A  20B9   	fcall	_OUTFQ
  5651  090A  0008               	return
  5652  090B                     __end_of_FMRX:	
  5653                           
  5654                           	psect	text17
  5655  0B24                     __ptext17:	
  5656 ;; *************** function _EEPROM_Write *****************
  5657 ;; Defined at:
  5658 ;;		line 51 in file "I2C.c"
  5659 ;; Parameters:    Size  Location     Type
  5660 ;;  EEPROM_addre    1    wreg     unsigned char 
  5661 ;;  high_address    1    2[COMMON] unsigned char 
  5662 ;;  low_address     1    3[COMMON] unsigned char 
  5663 ;;  data            1    4[COMMON] PTR unsigned char 
  5664 ;;		 -> NULL(0), dData(16), 
  5665 ;; Auto vars:     Size  Location     Type
  5666 ;;  EEPROM_addre    1    8[COMMON] unsigned char 
  5667 ;;  Address         1    9[COMMON] unsigned char 
  5668 ;; Return value:  Size  Location     Type
  5669 ;;                  1    wreg      void 
  5670 ;; Registers used:
  5671 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5672 ;; Tracked objects:
  5673 ;;		On entry : 0/0
  5674 ;;		On exit  : 0/0
  5675 ;;		Unchanged: 0/0
  5676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5677 ;;      Params:         3       0       0       0       0
  5678 ;;      Locals:         2       0       0       0       0
  5679 ;;      Temps:          3       0       0       0       0
  5680 ;;      Totals:         8       0       0       0       0
  5681 ;;Total ram usage:        8 bytes
  5682 ;; Hardware stack levels used:    1
  5683 ;; Hardware stack levels required when called:    2
  5684 ;; This function calls:
  5685 ;;		_I2C_Master_Start
  5686 ;;		_I2C_Master_Stop
  5687 ;;		_I2C_Master_Write
  5688 ;; This function is called by:
  5689 ;;		_main
  5690 ;; This function uses a non-reentrant model
  5691 ;;
  5692                           
  5693                           
  5694                           ;psect for function _EEPROM_Write
  5695  0B24                     _EEPROM_Write:	
  5696                           
  5697                           ;incstack = 0
  5698                           ; Regs used in _EEPROM_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5699                           ;EEPROM_Write@EEPROM_address stored from wreg
  5700  0B24  00F9               	movwf	EEPROM_Write@EEPROM_address
  5701                           
  5702                           ;I2C.c: 52: UBYTE Address = EEPROM_address << 1;
  5703  0B25  0879               	movf	EEPROM_Write@EEPROM_address,w
  5704  0B26  00F6               	movwf	??_EEPROM_Write
  5705  0B27  0776               	addwf	??_EEPROM_Write,w
  5706  0B28  00F7               	movwf	??_EEPROM_Write+1
  5707  0B29  0877               	movf	??_EEPROM_Write+1,w
  5708  0B2A  00FA               	movwf	EEPROM_Write@Address
  5709                           
  5710                           ;I2C.c: 55: I2C_Master_Start();
  5711  0B2B  160A  118A  27A3  120A  158A  	fcall	_I2C_Master_Start
  5712                           
  5713                           ;I2C.c: 56: I2C_Master_Write(Address);
  5714  0B30  087A               	movf	EEPROM_Write@Address,w
  5715  0B31  00F6               	movwf	??_EEPROM_Write
  5716  0B32  01F7               	clrf	??_EEPROM_Write+1
  5717  0B33  0876               	movf	??_EEPROM_Write,w
  5718  0B34  00F1               	movwf	I2C_Master_Write@d
  5719  0B35  0877               	movf	??_EEPROM_Write+1,w
  5720  0B36  00F2               	movwf	I2C_Master_Write@d+1
  5721  0B37  160A  118A  27B1  120A  158A  	fcall	_I2C_Master_Write
  5722                           
  5723                           ;I2C.c: 57: I2C_Master_Write(high_address);
  5724  0B3C  0873               	movf	EEPROM_Write@high_address,w
  5725  0B3D  00F6               	movwf	??_EEPROM_Write
  5726  0B3E  01F7               	clrf	??_EEPROM_Write+1
  5727  0B3F  0876               	movf	??_EEPROM_Write,w
  5728  0B40  00F1               	movwf	I2C_Master_Write@d
  5729  0B41  0877               	movf	??_EEPROM_Write+1,w
  5730  0B42  00F2               	movwf	I2C_Master_Write@d+1
  5731  0B43  160A  118A  27B1  120A  158A  	fcall	_I2C_Master_Write
  5732                           
  5733                           ;I2C.c: 58: I2C_Master_Write(low_address);
  5734  0B48  0874               	movf	EEPROM_Write@low_address,w
  5735  0B49  00F6               	movwf	??_EEPROM_Write
  5736  0B4A  01F7               	clrf	??_EEPROM_Write+1
  5737  0B4B  0876               	movf	??_EEPROM_Write,w
  5738  0B4C  00F1               	movwf	I2C_Master_Write@d
  5739  0B4D  0877               	movf	??_EEPROM_Write+1,w
  5740  0B4E  00F2               	movwf	I2C_Master_Write@d+1
  5741  0B4F  160A  118A  27B1  120A  158A  	fcall	_I2C_Master_Write
  5742  0B54                     l3543:	
  5743                           ;I2C.c: 59: while(*data){
  5744                           
  5745  0B54  0875               	movf	EEPROM_Write@data,w
  5746  0B55  0084               	movwf	4
  5747  0B56  1783               	bsf	3,7	;select IRP bank2
  5748  0B57  0800               	movf	0,w
  5749  0B58  1903               	btfsc	3,2
  5750  0B59  2B6E               	goto	l3545
  5751                           
  5752                           ;I2C.c: 60: I2C_Master_Write(*data);
  5753  0B5A  0875               	movf	EEPROM_Write@data,w
  5754  0B5B  0084               	movwf	4
  5755  0B5C  1783               	bsf	3,7	;select IRP bank2
  5756  0B5D  0800               	movf	0,w
  5757  0B5E  00F6               	movwf	??_EEPROM_Write
  5758  0B5F  01F7               	clrf	??_EEPROM_Write+1
  5759  0B60  0876               	movf	??_EEPROM_Write,w
  5760  0B61  00F1               	movwf	I2C_Master_Write@d
  5761  0B62  0877               	movf	??_EEPROM_Write+1,w
  5762  0B63  00F2               	movwf	I2C_Master_Write@d+1
  5763  0B64  160A  118A  27B1  120A  158A  	fcall	_I2C_Master_Write
  5764                           
  5765                           ;I2C.c: 61: ++data;
  5766  0B69  3001               	movlw	1
  5767  0B6A  00F6               	movwf	??_EEPROM_Write
  5768  0B6B  0876               	movf	??_EEPROM_Write,w
  5769  0B6C  07F5               	addwf	EEPROM_Write@data,f
  5770  0B6D  2B54               	goto	l3543
  5771  0B6E                     l3545:	
  5772                           
  5773                           ;I2C.c: 62: }
  5774                           ;I2C.c: 63: I2C_Master_Stop();
  5775  0B6E  160A  118A  27AA  120A  158A  	fcall	_I2C_Master_Stop
  5776                           
  5777                           ;I2C.c: 64: _delay((unsigned long)((200)*(10000000/4000.0)));
  5778  0B73  3003               	movlw	3
  5779  0B74  00F8               	movwf	??_EEPROM_Write+2
  5780  0B75  308A               	movlw	138
  5781  0B76  00F7               	movwf	??_EEPROM_Write+1
  5782  0B77  3056               	movlw	86
  5783  0B78  00F6               	movwf	??_EEPROM_Write
  5784  0B79                     u3727:	
  5785  0B79  0BF6               	decfsz	??_EEPROM_Write,f
  5786  0B7A  2B79               	goto	u3727
  5787  0B7B  0BF7               	decfsz	??_EEPROM_Write+1,f
  5788  0B7C  2B79               	goto	u3727
  5789  0B7D  0BF8               	decfsz	??_EEPROM_Write+2,f
  5790  0B7E  2B79               	goto	u3727
  5791  0B7F  2B80               	nop2
  5792  0B80  0008               	return
  5793  0B81                     __end_of_EEPROM_Write:	
  5794                           
  5795                           	psect	text18
  5796  17B1                     __ptext18:	
  5797 ;; *************** function _I2C_Master_Write *****************
  5798 ;; Defined at:
  5799 ;;		line 34 in file "I2C.c"
  5800 ;; Parameters:    Size  Location     Type
  5801 ;;  d               2    0[COMMON] unsigned int 
  5802 ;; Auto vars:     Size  Location     Type
  5803 ;;		None
  5804 ;; Return value:  Size  Location     Type
  5805 ;;                  1    wreg      void 
  5806 ;; Registers used:
  5807 ;;		wreg, status,2, status,0, pclath, cstack
  5808 ;; Tracked objects:
  5809 ;;		On entry : 0/0
  5810 ;;		On exit  : 0/0
  5811 ;;		Unchanged: 0/0
  5812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5813 ;;      Params:         2       0       0       0       0
  5814 ;;      Locals:         0       0       0       0       0
  5815 ;;      Temps:          0       0       0       0       0
  5816 ;;      Totals:         2       0       0       0       0
  5817 ;;Total ram usage:        2 bytes
  5818 ;; Hardware stack levels used:    1
  5819 ;; Hardware stack levels required when called:    1
  5820 ;; This function calls:
  5821 ;;		_I2C_Master_Wait
  5822 ;; This function is called by:
  5823 ;;		_EEPROM_Write
  5824 ;;		_EEPROM_Read
  5825 ;; This function uses a non-reentrant model
  5826 ;;
  5827                           
  5828                           
  5829                           ;psect for function _I2C_Master_Write
  5830  17B1                     _I2C_Master_Write:	
  5831                           
  5832                           ;I2C.c: 35: I2C_Master_Wait();
  5833                           
  5834                           ;incstack = 0
  5835                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5836  17B1  120A  158A  2022   	fcall	_I2C_Master_Wait
  5837                           
  5838                           ;I2C.c: 36: SSPBUF = d;
  5839  17B4  0871               	movf	I2C_Master_Write@d,w
  5840  17B5  1283               	bcf	3,5	;RP0=0, select bank0
  5841  17B6  1303               	bcf	3,6	;RP1=0, select bank0
  5842  17B7  0093               	movwf	19	;volatile
  5843  17B8  0008               	return
  5844  17B9                     __end_of_I2C_Master_Write:	
  5845                           
  5846                           	psect	text19
  5847  17AA                     __ptext19:	
  5848 ;; *************** function _I2C_Master_Stop *****************
  5849 ;; Defined at:
  5850 ;;		line 29 in file "I2C.c"
  5851 ;; Parameters:    Size  Location     Type
  5852 ;;		None
  5853 ;; Auto vars:     Size  Location     Type
  5854 ;;		None
  5855 ;; Return value:  Size  Location     Type
  5856 ;;                  1    wreg      void 
  5857 ;; Registers used:
  5858 ;;		wreg, status,2, status,0, pclath, cstack
  5859 ;; Tracked objects:
  5860 ;;		On entry : 0/0
  5861 ;;		On exit  : 0/0
  5862 ;;		Unchanged: 0/0
  5863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5864 ;;      Params:         0       0       0       0       0
  5865 ;;      Locals:         0       0       0       0       0
  5866 ;;      Temps:          0       0       0       0       0
  5867 ;;      Totals:         0       0       0       0       0
  5868 ;;Total ram usage:        0 bytes
  5869 ;; Hardware stack levels used:    1
  5870 ;; Hardware stack levels required when called:    1
  5871 ;; This function calls:
  5872 ;;		_I2C_Master_Wait
  5873 ;; This function is called by:
  5874 ;;		_EEPROM_Write
  5875 ;;		_EEPROM_Read
  5876 ;; This function uses a non-reentrant model
  5877 ;;
  5878                           
  5879                           
  5880                           ;psect for function _I2C_Master_Stop
  5881  17AA                     _I2C_Master_Stop:	
  5882                           
  5883                           ;I2C.c: 30: I2C_Master_Wait();
  5884                           
  5885                           ;incstack = 0
  5886                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5887  17AA  120A  158A  2022   	fcall	_I2C_Master_Wait
  5888                           
  5889                           ;I2C.c: 31: PEN = 1;
  5890  17AD  1683               	bsf	3,5	;RP0=1, select bank1
  5891  17AE  1303               	bcf	3,6	;RP1=0, select bank1
  5892  17AF  1511               	bsf	17,2	;volatile
  5893  17B0  0008               	return
  5894  17B1                     __end_of_I2C_Master_Stop:	
  5895                           
  5896                           	psect	text20
  5897  17A3                     __ptext20:	
  5898 ;; *************** function _I2C_Master_Start *****************
  5899 ;; Defined at:
  5900 ;;		line 19 in file "I2C.c"
  5901 ;; Parameters:    Size  Location     Type
  5902 ;;		None
  5903 ;; Auto vars:     Size  Location     Type
  5904 ;;		None
  5905 ;; Return value:  Size  Location     Type
  5906 ;;                  1    wreg      void 
  5907 ;; Registers used:
  5908 ;;		wreg, status,2, status,0, pclath, cstack
  5909 ;; Tracked objects:
  5910 ;;		On entry : 0/0
  5911 ;;		On exit  : 0/0
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5914 ;;      Params:         0       0       0       0       0
  5915 ;;      Locals:         0       0       0       0       0
  5916 ;;      Temps:          0       0       0       0       0
  5917 ;;      Totals:         0       0       0       0       0
  5918 ;;Total ram usage:        0 bytes
  5919 ;; Hardware stack levels used:    1
  5920 ;; Hardware stack levels required when called:    1
  5921 ;; This function calls:
  5922 ;;		_I2C_Master_Wait
  5923 ;; This function is called by:
  5924 ;;		_EEPROM_Write
  5925 ;;		_EEPROM_Read
  5926 ;; This function uses a non-reentrant model
  5927 ;;
  5928                           
  5929                           
  5930                           ;psect for function _I2C_Master_Start
  5931  17A3                     _I2C_Master_Start:	
  5932                           
  5933                           ;I2C.c: 20: I2C_Master_Wait();
  5934                           
  5935                           ;incstack = 0
  5936                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5937  17A3  120A  158A  2022   	fcall	_I2C_Master_Wait
  5938                           
  5939                           ;I2C.c: 21: SEN = 1;
  5940  17A6  1683               	bsf	3,5	;RP0=1, select bank1
  5941  17A7  1303               	bcf	3,6	;RP1=0, select bank1
  5942  17A8  1411               	bsf	17,0	;volatile
  5943  17A9  0008               	return
  5944  17AA                     __end_of_I2C_Master_Start:	
  5945                           
  5946                           	psect	text21
  5947  0822                     __ptext21:	
  5948 ;; *************** function _I2C_Master_Wait *****************
  5949 ;; Defined at:
  5950 ;;		line 15 in file "I2C.c"
  5951 ;; Parameters:    Size  Location     Type
  5952 ;;		None
  5953 ;; Auto vars:     Size  Location     Type
  5954 ;;		None
  5955 ;; Return value:  Size  Location     Type
  5956 ;;                  1    wreg      void 
  5957 ;; Registers used:
  5958 ;;		wreg, status,2
  5959 ;; Tracked objects:
  5960 ;;		On entry : 0/0
  5961 ;;		On exit  : 0/0
  5962 ;;		Unchanged: 0/0
  5963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5964 ;;      Params:         0       0       0       0       0
  5965 ;;      Locals:         0       0       0       0       0
  5966 ;;      Temps:          0       0       0       0       0
  5967 ;;      Totals:         0       0       0       0       0
  5968 ;;Total ram usage:        0 bytes
  5969 ;; Hardware stack levels used:    1
  5970 ;; This function calls:
  5971 ;;		Nothing
  5972 ;; This function is called by:
  5973 ;;		_I2C_Master_Start
  5974 ;;		_I2C_Master_Stop
  5975 ;;		_I2C_Master_Write
  5976 ;;		_I2C_Master_RepeatedStart
  5977 ;;		_I2C_Master_Read
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           
  5982                           ;psect for function _I2C_Master_Wait
  5983  0822                     _I2C_Master_Wait:	
  5984  0822                     l492:	
  5985                           ;I2C.c: 16: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5986                           
  5987                           ;incstack = 0
  5988                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5989                           
  5990  0822  1683               	bsf	3,5	;RP0=1, select bank1
  5991  0823  1303               	bcf	3,6	;RP1=0, select bank1
  5992  0824  1914               	btfsc	20,2	;volatile
  5993  0825  2822               	goto	l492
  5994  0826  0811               	movf	17,w	;volatile
  5995  0827  391F               	andlw	31
  5996  0828  1903               	btfsc	3,2
  5997  0829  0008               	return
  5998  082A  2822               	goto	l492
  5999  082B                     __end_of_I2C_Master_Wait:	
  6000                           
  6001                           	psect	text22
  6002  08B3                     __ptext22:	
  6003 ;; *************** function _CWTX *****************
  6004 ;; Defined at:
  6005 ;;		line 284 in file "FMCW.c"
  6006 ;; Parameters:    Size  Location     Type
  6007 ;;  Nref            2   60[BANK0 ] int 
  6008 ;;  Nprg            2   62[BANK0 ] PTR int 
  6009 ;;		 -> RAM(512), main@CWTX_Nprg(10), CWTX_Nprg(10), 
  6010 ;; Auto vars:     Size  Location     Type
  6011 ;;  cwtx            2   64[BANK0 ] int 
  6012 ;; Return value:  Size  Location     Type
  6013 ;;                  1    wreg      void 
  6014 ;; Registers used:
  6015 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6016 ;; Tracked objects:
  6017 ;;		On entry : 0/0
  6018 ;;		On exit  : 0/0
  6019 ;;		Unchanged: 0/0
  6020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6021 ;;      Params:         0       4       0       0       0
  6022 ;;      Locals:         0       2       0       0       0
  6023 ;;      Temps:          0       0       0       0       0
  6024 ;;      Totals:         0       6       0       0       0
  6025 ;;Total ram usage:        6 bytes
  6026 ;; Hardware stack levels used:    1
  6027 ;; Hardware stack levels required when called:    3
  6028 ;; This function calls:
  6029 ;;		_OPINIT
  6030 ;;		_OUTFQ
  6031 ;;		_RFDOUT
  6032 ;; This function is called by:
  6033 ;;		_main
  6034 ;;		_SetPLL
  6035 ;; This function uses a non-reentrant model
  6036 ;;
  6037                           
  6038                           
  6039                           ;psect for function _CWTX
  6040  08B3                     _CWTX:	
  6041                           
  6042                           ;FMCW.c: 285: int cwtx = 2;
  6043                           
  6044                           ;incstack = 0
  6045                           ; Regs used in _CWTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6046  08B3  3002               	movlw	2
  6047  08B4  1283               	bcf	3,5	;RP0=0, select bank0
  6048  08B5  1303               	bcf	3,6	;RP1=0, select bank0
  6049  08B6  00E0               	movwf	CWTX@cwtx
  6050  08B7  3000               	movlw	0
  6051  08B8  00E1               	movwf	CWTX@cwtx+1
  6052                           
  6053                           ;FMCW.c: 286: OPINIT(cwtx);
  6054  08B9  0861               	movf	CWTX@cwtx+1,w
  6055  08BA  00F6               	movwf	OPINIT@fmcwtxrx+1
  6056  08BB  0860               	movf	CWTX@cwtx,w
  6057  08BC  00F5               	movwf	OPINIT@fmcwtxrx
  6058  08BD  120A  158A  24A7  120A  158A  	fcall	_OPINIT
  6059                           
  6060                           ;FMCW.c: 287: RFDOUT(cwtx, Nref);
  6061  08C2  1283               	bcf	3,5	;RP0=0, select bank0
  6062  08C3  1303               	bcf	3,6	;RP1=0, select bank0
  6063  08C4  0861               	movf	CWTX@cwtx+1,w
  6064  08C5  00FB               	movwf	RFDOUT@fmcwtxrx+1
  6065  08C6  0860               	movf	CWTX@cwtx,w
  6066  08C7  00FA               	movwf	RFDOUT@fmcwtxrx
  6067  08C8  085D               	movf	CWTX@Nref+1,w
  6068  08C9  00FD               	movwf	RFDOUT@Nref+1
  6069  08CA  085C               	movf	CWTX@Nref,w
  6070  08CB  00FC               	movwf	RFDOUT@Nref
  6071  08CC  120A  158A  2524  120A  158A  	fcall	_RFDOUT
  6072                           
  6073                           ;FMCW.c: 288: OUTFQ(cwtx, Nprg);
  6074  08D1  1283               	bcf	3,5	;RP0=0, select bank0
  6075  08D2  1303               	bcf	3,6	;RP1=0, select bank0
  6076  08D3  0861               	movf	CWTX@cwtx+1,w
  6077  08D4  00FB               	movwf	OUTFQ@fmcwtxrx+1
  6078  08D5  0860               	movf	CWTX@cwtx,w
  6079  08D6  00FA               	movwf	OUTFQ@fmcwtxrx
  6080  08D7  085E               	movf	CWTX@Nprg,w
  6081  08D8  00FC               	movwf	OUTFQ@Nprg
  6082  08D9  085F               	movf	CWTX@Nprg+1,w
  6083  08DA  00FD               	movwf	OUTFQ@Nprg+1
  6084  08DB  120A  118A  20B9   	fcall	_OUTFQ
  6085  08DE  0008               	return
  6086  08DF                     __end_of_CWTX:	
  6087                           
  6088                           	psect	text23
  6089  0D24                     __ptext23:	
  6090 ;; *************** function _RFDOUT *****************
  6091 ;; Defined at:
  6092 ;;		line 200 in file "FMCW.c"
  6093 ;; Parameters:    Size  Location     Type
  6094 ;;  fmcwtxrx        2    9[COMMON] int 
  6095 ;;  Nref            2   11[COMMON] int 
  6096 ;; Auto vars:     Size  Location     Type
  6097 ;;  i               2   31[BANK0 ] int 
  6098 ;;  i               2   27[BANK0 ] int 
  6099 ;;  i               2   29[BANK0 ] int 
  6100 ;;  Nref_b         24    3[BANK0 ] int [12]
  6101 ;; Return value:  Size  Location     Type
  6102 ;;                  1    wreg      void 
  6103 ;; Registers used:
  6104 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6105 ;; Tracked objects:
  6106 ;;		On entry : 0/0
  6107 ;;		On exit  : 0/0
  6108 ;;		Unchanged: 0/0
  6109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6110 ;;      Params:         4       0       0       0       0
  6111 ;;      Locals:         0      30       0       0       0
  6112 ;;      Temps:          0       3       0       0       0
  6113 ;;      Totals:         4      33       0       0       0
  6114 ;;Total ram usage:       37 bytes
  6115 ;; Hardware stack levels used:    1
  6116 ;; Hardware stack levels required when called:    2
  6117 ;; This function calls:
  6118 ;;		_H_OUT
  6119 ;;		_L_OUT
  6120 ;;		_STBOUT
  6121 ;;		___awdiv
  6122 ;; This function is called by:
  6123 ;;		_FMTX
  6124 ;;		_CWTX
  6125 ;;		_FMRX
  6126 ;; This function uses a non-reentrant model
  6127 ;;
  6128                           
  6129                           
  6130                           ;psect for function _RFDOUT
  6131  0D24                     _RFDOUT:	
  6132                           
  6133                           ;FMCW.c: 201: int Nref_b[12];
  6134                           ;FMCW.c: 203: for(int i=0; i<12; i++){
  6135                           
  6136                           ;incstack = 0
  6137                           ; Regs used in _RFDOUT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6138  0D24  1283               	bcf	3,5	;RP0=0, select bank0
  6139  0D25  1303               	bcf	3,6	;RP1=0, select bank0
  6140  0D26  01BD               	clrf	RFDOUT@i
  6141  0D27  01BE               	clrf	RFDOUT@i+1
  6142  0D28  083E               	movf	RFDOUT@i+1,w
  6143  0D29  3A80               	xorlw	128
  6144  0D2A  00FF               	movwf	127
  6145  0D2B  3080               	movlw	128
  6146  0D2C  027F               	subwf	127,w
  6147  0D2D  1D03               	skipz
  6148  0D2E  2D31               	goto	u2955
  6149  0D2F  300C               	movlw	12
  6150  0D30  023D               	subwf	RFDOUT@i,w
  6151  0D31                     u2955:	
  6152  0D31  1803               	btfsc	3,0
  6153  0D32  2D4F               	goto	l3281
  6154  0D33                     l3275:	
  6155                           
  6156                           ;FMCW.c: 204: Nref_b[i] = 0;
  6157  0D33  1283               	bcf	3,5	;RP0=0, select bank0
  6158  0D34  1303               	bcf	3,6	;RP1=0, select bank0
  6159  0D35  083D               	movf	RFDOUT@i,w
  6160  0D36  00A0               	movwf	??_RFDOUT
  6161  0D37  0720               	addwf	??_RFDOUT,w
  6162  0D38  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6163  0D39  0084               	movwf	4
  6164  0D3A  1383               	bcf	3,7	;select IRP bank0
  6165  0D3B  0180               	clrf	0
  6166  0D3C  0A84               	incf	4,f
  6167  0D3D  0180               	clrf	0
  6168  0D3E  3001               	movlw	1
  6169  0D3F  07BD               	addwf	RFDOUT@i,f
  6170  0D40  1803               	skipnc
  6171  0D41  0ABE               	incf	RFDOUT@i+1,f
  6172  0D42  3000               	movlw	0
  6173  0D43  07BE               	addwf	RFDOUT@i+1,f
  6174  0D44  083E               	movf	RFDOUT@i+1,w
  6175  0D45  3A80               	xorlw	128
  6176  0D46  00FF               	movwf	127
  6177  0D47  3080               	movlw	128
  6178  0D48  027F               	subwf	127,w
  6179  0D49  1D03               	skipz
  6180  0D4A  2D4D               	goto	u2965
  6181  0D4B  300C               	movlw	12
  6182  0D4C  023D               	subwf	RFDOUT@i,w
  6183  0D4D                     u2965:	
  6184  0D4D  1C03               	skipc
  6185  0D4E  2D33               	goto	l3275
  6186  0D4F                     l3281:	
  6187                           
  6188                           ;FMCW.c: 205: }
  6189                           ;FMCW.c: 208: for(int i=0; Nref>0; i++){
  6190  0D4F  1283               	bcf	3,5	;RP0=0, select bank0
  6191  0D50  1303               	bcf	3,6	;RP1=0, select bank0
  6192  0D51  01BB               	clrf	RFDOUT@i_477
  6193  0D52  01BC               	clrf	RFDOUT@i_477+1
  6194  0D53  087D               	movf	RFDOUT@Nref+1,w
  6195  0D54  3A80               	xorlw	128
  6196  0D55  00FF               	movwf	127
  6197  0D56  3080               	movlw	128
  6198  0D57  027F               	subwf	127,w
  6199  0D58  1D03               	skipz
  6200  0D59  2D5C               	goto	u2975
  6201  0D5A  3001               	movlw	1
  6202  0D5B  027C               	subwf	RFDOUT@Nref,w
  6203  0D5C                     u2975:	
  6204  0D5C  1C03               	btfss	3,0
  6205  0D5D  2D95               	goto	l3295
  6206  0D5E                     l3287:	
  6207                           
  6208                           ;FMCW.c: 209: Nref_b[i] = Nref % 2;
  6209  0D5E  3001               	movlw	1
  6210  0D5F  057C               	andwf	RFDOUT@Nref,w
  6211  0D60  1283               	bcf	3,5	;RP0=0, select bank0
  6212  0D61  1303               	bcf	3,6	;RP1=0, select bank0
  6213  0D62  00A0               	movwf	??_RFDOUT
  6214  0D63  3000               	movlw	0
  6215  0D64  057D               	andwf	RFDOUT@Nref+1,w
  6216  0D65  00A1               	movwf	??_RFDOUT+1
  6217  0D66  083B               	movf	RFDOUT@i_477,w
  6218  0D67  00A2               	movwf	??_RFDOUT+2
  6219  0D68  0722               	addwf	??_RFDOUT+2,w
  6220  0D69  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6221  0D6A  0084               	movwf	4
  6222  0D6B  0820               	movf	??_RFDOUT,w
  6223  0D6C  1383               	bcf	3,7	;select IRP bank0
  6224  0D6D  0080               	movwf	0
  6225  0D6E  0A84               	incf	4,f
  6226  0D6F  0821               	movf	??_RFDOUT+1,w
  6227  0D70  0080               	movwf	0
  6228                           
  6229                           ;FMCW.c: 210: Nref = Nref / 2;
  6230  0D71  3002               	movlw	2
  6231  0D72  00F1               	movwf	___awdiv@divisor
  6232  0D73  3000               	movlw	0
  6233  0D74  00F2               	movwf	___awdiv@divisor+1
  6234  0D75  087D               	movf	RFDOUT@Nref+1,w
  6235  0D76  00F4               	movwf	___awdiv@dividend+1
  6236  0D77  087C               	movf	RFDOUT@Nref,w
  6237  0D78  00F3               	movwf	___awdiv@dividend
  6238  0D79  120A  158A  22CB  120A  158A  	fcall	___awdiv
  6239  0D7E  0872               	movf	?___awdiv+1,w
  6240  0D7F  00FD               	movwf	RFDOUT@Nref+1
  6241  0D80  0871               	movf	?___awdiv,w
  6242  0D81  00FC               	movwf	RFDOUT@Nref
  6243  0D82  3001               	movlw	1
  6244  0D83  1283               	bcf	3,5	;RP0=0, select bank0
  6245  0D84  1303               	bcf	3,6	;RP1=0, select bank0
  6246  0D85  07BB               	addwf	RFDOUT@i_477,f
  6247  0D86  1803               	skipnc
  6248  0D87  0ABC               	incf	RFDOUT@i_477+1,f
  6249  0D88  3000               	movlw	0
  6250  0D89  07BC               	addwf	RFDOUT@i_477+1,f
  6251  0D8A  087D               	movf	RFDOUT@Nref+1,w
  6252  0D8B  3A80               	xorlw	128
  6253  0D8C  00FF               	movwf	127
  6254  0D8D  3080               	movlw	128
  6255  0D8E  027F               	subwf	127,w
  6256  0D8F  1D03               	skipz
  6257  0D90  2D93               	goto	u2985
  6258  0D91  3001               	movlw	1
  6259  0D92  027C               	subwf	RFDOUT@Nref,w
  6260  0D93                     u2985:	
  6261  0D93  1803               	skipnc
  6262  0D94  2D5E               	goto	l3287
  6263  0D95                     l3295:	
  6264                           
  6265                           ;FMCW.c: 211: }
  6266                           ;FMCW.c: 214: for (int i=0; i<12; i++)
  6267  0D95  1283               	bcf	3,5	;RP0=0, select bank0
  6268  0D96  1303               	bcf	3,6	;RP1=0, select bank0
  6269  0D97  01BF               	clrf	RFDOUT@i_478
  6270  0D98  01C0               	clrf	RFDOUT@i_478+1
  6271  0D99  0840               	movf	RFDOUT@i_478+1,w
  6272  0D9A  3A80               	xorlw	128
  6273  0D9B  00FF               	movwf	127
  6274  0D9C  3080               	movlw	128
  6275  0D9D  027F               	subwf	127,w
  6276  0D9E  1D03               	skipz
  6277  0D9F  2DA2               	goto	u2995
  6278  0DA0  300C               	movlw	12
  6279  0DA1  023F               	subwf	RFDOUT@i_478,w
  6280  0DA2                     u2995:	
  6281  0DA2  1803               	btfsc	3,0
  6282  0DA3  2DEB               	goto	l3313
  6283  0DA4                     l3301:	
  6284                           
  6285                           ;FMCW.c: 215: {
  6286                           ;FMCW.c: 216: if(Nref_b[i] == 0)
  6287  0DA4  1283               	bcf	3,5	;RP0=0, select bank0
  6288  0DA5  1303               	bcf	3,6	;RP1=0, select bank0
  6289  0DA6  083F               	movf	RFDOUT@i_478,w
  6290  0DA7  00A0               	movwf	??_RFDOUT
  6291  0DA8  0720               	addwf	??_RFDOUT,w
  6292  0DA9  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6293  0DAA  0084               	movwf	4
  6294  0DAB  1383               	bcf	3,7	;select IRP bank0
  6295  0DAC  0800               	movf	0,w
  6296  0DAD  00A1               	movwf	??_RFDOUT+1
  6297  0DAE  0A84               	incf	4,f
  6298  0DAF  0800               	movf	0,w
  6299  0DB0  00A2               	movwf	??_RFDOUT+2
  6300  0DB1  0821               	movf	??_RFDOUT+1,w
  6301  0DB2  0422               	iorwf	??_RFDOUT+2,w
  6302  0DB3  1D03               	btfss	3,2
  6303  0DB4  2DBE               	goto	l3305
  6304                           
  6305                           ;FMCW.c: 217: {
  6306                           ;FMCW.c: 218: L_OUT(fmcwtxrx);
  6307  0DB5  087B               	movf	RFDOUT@fmcwtxrx+1,w
  6308  0DB6  00F4               	movwf	L_OUT@fmcwtxrx+1
  6309  0DB7  087A               	movf	RFDOUT@fmcwtxrx,w
  6310  0DB8  00F3               	movwf	L_OUT@fmcwtxrx
  6311  0DB9  120A  158A  21F2  120A  158A  	fcall	_L_OUT
  6312  0DBE                     l3305:	
  6313                           
  6314                           ;FMCW.c: 219: }
  6315                           ;FMCW.c: 220: if(Nref_b[i] == 1)
  6316  0DBE  1283               	bcf	3,5	;RP0=0, select bank0
  6317  0DBF  1303               	bcf	3,6	;RP1=0, select bank0
  6318  0DC0  083F               	movf	RFDOUT@i_478,w
  6319  0DC1  00A0               	movwf	??_RFDOUT
  6320  0DC2  0720               	addwf	??_RFDOUT,w
  6321  0DC3  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6322  0DC4  0084               	movwf	4
  6323  0DC5  1383               	bcf	3,7	;select IRP bank0
  6324  0DC6  0800               	movf	0,w
  6325  0DC7  00A1               	movwf	??_RFDOUT+1
  6326  0DC8  0A84               	incf	4,f
  6327  0DC9  0800               	movf	0,w
  6328  0DCA  00A2               	movwf	??_RFDOUT+2
  6329  0DCB  0321               	decf	??_RFDOUT+1,w
  6330  0DCC  0422               	iorwf	??_RFDOUT+2,w
  6331  0DCD  1D03               	btfss	3,2
  6332  0DCE  2DD8               	goto	l3309
  6333                           
  6334                           ;FMCW.c: 221: {
  6335                           ;FMCW.c: 222: H_OUT(fmcwtxrx);
  6336  0DCF  087B               	movf	RFDOUT@fmcwtxrx+1,w
  6337  0DD0  00F4               	movwf	H_OUT@fmcwtxrx+1
  6338  0DD1  087A               	movf	RFDOUT@fmcwtxrx,w
  6339  0DD2  00F3               	movwf	H_OUT@fmcwtxrx
  6340  0DD3  120A  158A  21AC  120A  158A  	fcall	_H_OUT
  6341  0DD8                     l3309:	
  6342  0DD8  3001               	movlw	1
  6343  0DD9  1283               	bcf	3,5	;RP0=0, select bank0
  6344  0DDA  1303               	bcf	3,6	;RP1=0, select bank0
  6345  0DDB  07BF               	addwf	RFDOUT@i_478,f
  6346  0DDC  1803               	skipnc
  6347  0DDD  0AC0               	incf	RFDOUT@i_478+1,f
  6348  0DDE  3000               	movlw	0
  6349  0DDF  07C0               	addwf	RFDOUT@i_478+1,f
  6350  0DE0  0840               	movf	RFDOUT@i_478+1,w
  6351  0DE1  3A80               	xorlw	128
  6352  0DE2  00FF               	movwf	127
  6353  0DE3  3080               	movlw	128
  6354  0DE4  027F               	subwf	127,w
  6355  0DE5  1D03               	skipz
  6356  0DE6  2DE9               	goto	u3025
  6357  0DE7  300C               	movlw	12
  6358  0DE8  023F               	subwf	RFDOUT@i_478,w
  6359  0DE9                     u3025:	
  6360  0DE9  1C03               	skipc
  6361  0DEA  2DA4               	goto	l3301
  6362  0DEB                     l3313:	
  6363                           
  6364                           ;FMCW.c: 223: }
  6365                           ;FMCW.c: 224: }
  6366                           ;FMCW.c: 227: H_OUT(fmcwtxrx);
  6367  0DEB  087B               	movf	RFDOUT@fmcwtxrx+1,w
  6368  0DEC  00F4               	movwf	H_OUT@fmcwtxrx+1
  6369  0DED  087A               	movf	RFDOUT@fmcwtxrx,w
  6370  0DEE  00F3               	movwf	H_OUT@fmcwtxrx
  6371  0DEF  120A  158A  21AC  120A  158A  	fcall	_H_OUT
  6372                           
  6373                           ;FMCW.c: 228: H_OUT(fmcwtxrx);
  6374  0DF4  087B               	movf	RFDOUT@fmcwtxrx+1,w
  6375  0DF5  00F4               	movwf	H_OUT@fmcwtxrx+1
  6376  0DF6  087A               	movf	RFDOUT@fmcwtxrx,w
  6377  0DF7  00F3               	movwf	H_OUT@fmcwtxrx
  6378  0DF8  120A  158A  21AC  120A  158A  	fcall	_H_OUT
  6379                           
  6380                           ;FMCW.c: 231: STBOUT(fmcwtxrx);
  6381  0DFD  087B               	movf	RFDOUT@fmcwtxrx+1,w
  6382  0DFE  00F4               	movwf	STBOUT@fmcwtxrx+1
  6383  0DFF  087A               	movf	RFDOUT@fmcwtxrx,w
  6384  0E00  00F3               	movwf	STBOUT@fmcwtxrx
  6385  0E01  120A  118A  2009   	fcall	_STBOUT
  6386  0E04  0008               	return
  6387  0E05                     __end_of_RFDOUT:	
  6388                           
  6389                           	psect	text24
  6390  00B9                     __ptext24:	
  6391 ;; *************** function _OUTFQ *****************
  6392 ;; Defined at:
  6393 ;;		line 136 in file "FMCW.c"
  6394 ;; Parameters:    Size  Location     Type
  6395 ;;  fmcwtxrx        2    9[COMMON] int 
  6396 ;;  Nprg            2   11[COMMON] PTR int 
  6397 ;;		 -> RAM(512), main@FMRX_Nprg(10), main@CWTX_Nprg(10), main@FMTX_Nprg(10), 
  6398 ;;		 -> FMRX_Nprg(10), CWTX_Nprg(10), FMTX_Nprg(10), 
  6399 ;; Auto vars:     Size  Location     Type
  6400 ;;  j               2   58[BANK0 ] int 
  6401 ;;  i               2   56[BANK0 ] int 
  6402 ;;  i               2   50[BANK0 ] int 
  6403 ;;  i               2   54[BANK0 ] int 
  6404 ;;  Nprg_b         34   16[BANK0 ] int [17]
  6405 ;;  count           2   52[BANK0 ] int 
  6406 ;; Return value:  Size  Location     Type
  6407 ;;                  1    wreg      void 
  6408 ;; Registers used:
  6409 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6410 ;; Tracked objects:
  6411 ;;		On entry : 0/0
  6412 ;;		On exit  : 0/0
  6413 ;;		Unchanged: 0/0
  6414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6415 ;;      Params:         4       0       0       0       0
  6416 ;;      Locals:         0      44       0       0       0
  6417 ;;      Temps:          0      16       0       0       0
  6418 ;;      Totals:         4      60       0       0       0
  6419 ;;Total ram usage:       64 bytes
  6420 ;; Hardware stack levels used:    1
  6421 ;; Hardware stack levels required when called:    2
  6422 ;; This function calls:
  6423 ;;		_H_OUT
  6424 ;;		_L_OUT
  6425 ;;		_STBOUT
  6426 ;;		___awdiv
  6427 ;; This function is called by:
  6428 ;;		_FMTX
  6429 ;;		_CWTX
  6430 ;;		_FMRX
  6431 ;; This function uses a non-reentrant model
  6432 ;;
  6433                           
  6434                           
  6435                           ;psect for function _OUTFQ
  6436  00B9                     _OUTFQ:	
  6437                           
  6438                           ;FMCW.c: 137: int count = 0;
  6439                           
  6440                           ;incstack = 0
  6441                           ; Regs used in _OUTFQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6442  00B9  1283               	bcf	3,5	;RP0=0, select bank0
  6443  00BA  1303               	bcf	3,6	;RP1=0, select bank0
  6444  00BB  01D4               	clrf	OUTFQ@count
  6445  00BC  01D5               	clrf	OUTFQ@count+1
  6446                           
  6447                           ;FMCW.c: 138: int Nprg_b[17];
  6448                           ;FMCW.c: 140: for(int i=0; i<17; i++){
  6449  00BD  01D6               	clrf	OUTFQ@i
  6450  00BE  01D7               	clrf	OUTFQ@i+1
  6451  00BF  0857               	movf	OUTFQ@i+1,w
  6452  00C0  3A80               	xorlw	128
  6453  00C1  00FF               	movwf	127
  6454  00C2  3080               	movlw	128
  6455  00C3  027F               	subwf	127,w
  6456  00C4  1D03               	skipz
  6457  00C5  28C8               	goto	u2815
  6458  00C6  3011               	movlw	17
  6459  00C7  0256               	subwf	OUTFQ@i,w
  6460  00C8                     u2815:	
  6461  00C8  1803               	btfsc	3,0
  6462  00C9  28E6               	goto	l3203
  6463  00CA                     l3197:	
  6464                           
  6465                           ;FMCW.c: 141: Nprg_b[i] = 0;
  6466  00CA  1283               	bcf	3,5	;RP0=0, select bank0
  6467  00CB  1303               	bcf	3,6	;RP1=0, select bank0
  6468  00CC  0856               	movf	OUTFQ@i,w
  6469  00CD  00A0               	movwf	??_OUTFQ
  6470  00CE  0720               	addwf	??_OUTFQ,w
  6471  00CF  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6472  00D0  0084               	movwf	4
  6473  00D1  1383               	bcf	3,7	;select IRP bank0
  6474  00D2  0180               	clrf	0
  6475  00D3  0A84               	incf	4,f
  6476  00D4  0180               	clrf	0
  6477  00D5  3001               	movlw	1
  6478  00D6  07D6               	addwf	OUTFQ@i,f
  6479  00D7  1803               	skipnc
  6480  00D8  0AD7               	incf	OUTFQ@i+1,f
  6481  00D9  3000               	movlw	0
  6482  00DA  07D7               	addwf	OUTFQ@i+1,f
  6483  00DB  0857               	movf	OUTFQ@i+1,w
  6484  00DC  3A80               	xorlw	128
  6485  00DD  00FF               	movwf	127
  6486  00DE  3080               	movlw	128
  6487  00DF  027F               	subwf	127,w
  6488  00E0  1D03               	skipz
  6489  00E1  28E4               	goto	u2825
  6490  00E2  3011               	movlw	17
  6491  00E3  0256               	subwf	OUTFQ@i,w
  6492  00E4                     u2825:	
  6493  00E4  1C03               	skipc
  6494  00E5  28CA               	goto	l3197
  6495  00E6                     l3203:	
  6496                           
  6497                           ;FMCW.c: 142: }
  6498                           ;FMCW.c: 145: for(int i = 0; i < 17; i++){
  6499  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  6500  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  6501  00E8  01D2               	clrf	OUTFQ@i_466
  6502  00E9  01D3               	clrf	OUTFQ@i_466+1
  6503  00EA  0853               	movf	OUTFQ@i_466+1,w
  6504  00EB  3A80               	xorlw	128
  6505  00EC  00FF               	movwf	127
  6506  00ED  3080               	movlw	128
  6507  00EE  027F               	subwf	127,w
  6508  00EF  1D03               	skipz
  6509  00F0  28F3               	goto	u2835
  6510  00F1  3011               	movlw	17
  6511  00F2  0252               	subwf	OUTFQ@i_466,w
  6512  00F3                     u2835:	
  6513  00F3  1803               	btfsc	3,0
  6514  00F4  2AC4               	goto	l3249
  6515  00F5                     l3209:	
  6516                           
  6517                           ;FMCW.c: 146: for(int j = 0; j<5; j++){
  6518  00F5  1283               	bcf	3,5	;RP0=0, select bank0
  6519  00F6  1303               	bcf	3,6	;RP1=0, select bank0
  6520  00F7  01DA               	clrf	OUTFQ@j
  6521  00F8  01DB               	clrf	OUTFQ@j+1
  6522  00F9  085B               	movf	OUTFQ@j+1,w
  6523  00FA  3A80               	xorlw	128
  6524  00FB  00FF               	movwf	127
  6525  00FC  3080               	movlw	128
  6526  00FD  027F               	subwf	127,w
  6527  00FE  1D03               	skipz
  6528  00FF  2902               	goto	u2845
  6529  0100  3005               	movlw	5
  6530  0101  025A               	subwf	OUTFQ@j,w
  6531  0102                     u2845:	
  6532  0102  1803               	btfsc	3,0
  6533  0103  2AB1               	goto	l3245
  6534  0104                     l3215:	
  6535                           
  6536                           ;FMCW.c: 147: if(Nprg[j] % 2 == 0) {
  6537  0104  1283               	bcf	3,5	;RP0=0, select bank0
  6538  0105  1303               	bcf	3,6	;RP1=0, select bank0
  6539  0106  085B               	movf	OUTFQ@j+1,w
  6540  0107  00A1               	movwf	??_OUTFQ+1
  6541  0108  085A               	movf	OUTFQ@j,w
  6542  0109  00A0               	movwf	??_OUTFQ
  6543  010A  1003               	clrc
  6544  010B  0DA0               	rlf	??_OUTFQ,f
  6545  010C  0DA1               	rlf	??_OUTFQ+1,f
  6546  010D  0820               	movf	??_OUTFQ,w
  6547  010E  077C               	addwf	OUTFQ@Nprg,w
  6548  010F  00A2               	movwf	??_OUTFQ+2
  6549  0110  0821               	movf	??_OUTFQ+1,w
  6550  0111  1803               	skipnc
  6551  0112  0A21               	incf	??_OUTFQ+1,w
  6552  0113  077D               	addwf	OUTFQ@Nprg+1,w
  6553  0114  00A3               	movwf	??_OUTFQ+3
  6554  0115  0822               	movf	??_OUTFQ+2,w
  6555  0116  0084               	movwf	4
  6556  0117  1783               	bsf	3,7
  6557  0118  1C23               	btfss	??_OUTFQ+3,0
  6558  0119  1383               	bcf	3,7
  6559  011A  0800               	movf	0,w
  6560  011B  00A4               	movwf	??_OUTFQ+4
  6561  011C  0A84               	incf	4,f
  6562  011D  0800               	movf	0,w
  6563  011E  00A5               	movwf	??_OUTFQ+5
  6564  011F  1824               	btfsc	??_OUTFQ+4,0
  6565  0120  29AA               	goto	l3227
  6566                           
  6567                           ;FMCW.c: 148: if(j == 4){
  6568  0121  3004               	movlw	4
  6569  0122  065A               	xorwf	OUTFQ@j,w
  6570  0123  045B               	iorwf	OUTFQ@j+1,w
  6571  0124  1D03               	btfss	3,2
  6572  0125  296D               	goto	l3225
  6573                           
  6574                           ;FMCW.c: 149: Nprg[j] = Nprg[j] / 2;
  6575  0126  3002               	movlw	2
  6576  0127  00F1               	movwf	___awdiv@divisor
  6577  0128  3000               	movlw	0
  6578  0129  00F2               	movwf	___awdiv@divisor+1
  6579  012A  085B               	movf	OUTFQ@j+1,w
  6580  012B  00A1               	movwf	??_OUTFQ+1
  6581  012C  085A               	movf	OUTFQ@j,w
  6582  012D  00A0               	movwf	??_OUTFQ
  6583  012E  1003               	clrc
  6584  012F  0DA0               	rlf	??_OUTFQ,f
  6585  0130  0DA1               	rlf	??_OUTFQ+1,f
  6586  0131  0820               	movf	??_OUTFQ,w
  6587  0132  077C               	addwf	OUTFQ@Nprg,w
  6588  0133  00A2               	movwf	??_OUTFQ+2
  6589  0134  0821               	movf	??_OUTFQ+1,w
  6590  0135  1803               	skipnc
  6591  0136  0A21               	incf	??_OUTFQ+1,w
  6592  0137  077D               	addwf	OUTFQ@Nprg+1,w
  6593  0138  00A3               	movwf	??_OUTFQ+3
  6594  0139  0822               	movf	??_OUTFQ+2,w
  6595  013A  0084               	movwf	4
  6596  013B  1783               	bsf	3,7
  6597  013C  1C23               	btfss	??_OUTFQ+3,0
  6598  013D  1383               	bcf	3,7
  6599  013E  0800               	movf	0,w
  6600  013F  00F3               	movwf	___awdiv@dividend
  6601  0140  0A84               	incf	4,f
  6602  0141  0800               	movf	0,w
  6603  0142  00F4               	movwf	___awdiv@dividend+1
  6604  0143  120A  158A  22CB  120A  118A  	fcall	___awdiv
  6605  0148  1283               	bcf	3,5	;RP0=0, select bank0
  6606  0149  1303               	bcf	3,6	;RP1=0, select bank0
  6607  014A  085B               	movf	OUTFQ@j+1,w
  6608  014B  00A5               	movwf	??_OUTFQ+5
  6609  014C  085A               	movf	OUTFQ@j,w
  6610  014D  00A4               	movwf	??_OUTFQ+4
  6611  014E  1003               	clrc
  6612  014F  0DA4               	rlf	??_OUTFQ+4,f
  6613  0150  0DA5               	rlf	??_OUTFQ+5,f
  6614  0151  0824               	movf	??_OUTFQ+4,w
  6615  0152  077C               	addwf	OUTFQ@Nprg,w
  6616  0153  00A6               	movwf	??_OUTFQ+6
  6617  0154  0825               	movf	??_OUTFQ+5,w
  6618  0155  1803               	skipnc
  6619  0156  0A25               	incf	??_OUTFQ+5,w
  6620  0157  077D               	addwf	OUTFQ@Nprg+1,w
  6621  0158  00A7               	movwf	??_OUTFQ+7
  6622  0159  0826               	movf	??_OUTFQ+6,w
  6623  015A  0084               	movwf	4
  6624  015B  1783               	bsf	3,7
  6625  015C  1C27               	btfss	??_OUTFQ+7,0
  6626  015D  1383               	bcf	3,7
  6627  015E  0871               	movf	?___awdiv,w
  6628  015F  0080               	movwf	0
  6629  0160  0A84               	incf	4,f
  6630  0161  0872               	movf	?___awdiv+1,w
  6631  0162  0080               	movwf	0
  6632                           
  6633                           ;FMCW.c: 150: Nprg_b[count] = 0;
  6634  0163  0854               	movf	OUTFQ@count,w
  6635  0164  00A0               	movwf	??_OUTFQ
  6636  0165  0720               	addwf	??_OUTFQ,w
  6637  0166  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6638  0167  0084               	movwf	4
  6639  0168  1383               	bcf	3,7	;select IRP bank0
  6640  0169  0180               	clrf	0
  6641  016A  0A84               	incf	4,f
  6642  016B  0180               	clrf	0
  6643  016C  2A12               	goto	l3235
  6644  016D                     l3225:	
  6645                           ;FMCW.c: 152: }
  6646                           
  6647                           ;FMCW.c: 151: count++;
  6648                           
  6649                           
  6650                           ;FMCW.c: 153: else{
  6651                           ;FMCW.c: 154: Nprg[j] = Nprg[j] / 2;
  6652  016D  3002               	movlw	2
  6653  016E  00F1               	movwf	___awdiv@divisor
  6654  016F  3000               	movlw	0
  6655  0170  00F2               	movwf	___awdiv@divisor+1
  6656  0171  085B               	movf	OUTFQ@j+1,w
  6657  0172  00A1               	movwf	??_OUTFQ+1
  6658  0173  085A               	movf	OUTFQ@j,w
  6659  0174  00A0               	movwf	??_OUTFQ
  6660  0175  1003               	clrc
  6661  0176  0DA0               	rlf	??_OUTFQ,f
  6662  0177  0DA1               	rlf	??_OUTFQ+1,f
  6663  0178  0820               	movf	??_OUTFQ,w
  6664  0179  077C               	addwf	OUTFQ@Nprg,w
  6665  017A  00A2               	movwf	??_OUTFQ+2
  6666  017B  0821               	movf	??_OUTFQ+1,w
  6667  017C  1803               	skipnc
  6668  017D  0A21               	incf	??_OUTFQ+1,w
  6669  017E  077D               	addwf	OUTFQ@Nprg+1,w
  6670  017F  00A3               	movwf	??_OUTFQ+3
  6671  0180  0822               	movf	??_OUTFQ+2,w
  6672  0181  0084               	movwf	4
  6673  0182  1783               	bsf	3,7
  6674  0183  1C23               	btfss	??_OUTFQ+3,0
  6675  0184  1383               	bcf	3,7
  6676  0185  0800               	movf	0,w
  6677  0186  00F3               	movwf	___awdiv@dividend
  6678  0187  0A84               	incf	4,f
  6679  0188  0800               	movf	0,w
  6680  0189  00F4               	movwf	___awdiv@dividend+1
  6681  018A  120A  158A  22CB  120A  118A  	fcall	___awdiv
  6682  018F  1283               	bcf	3,5	;RP0=0, select bank0
  6683  0190  1303               	bcf	3,6	;RP1=0, select bank0
  6684  0191  085B               	movf	OUTFQ@j+1,w
  6685  0192  00A5               	movwf	??_OUTFQ+5
  6686  0193  085A               	movf	OUTFQ@j,w
  6687  0194  00A4               	movwf	??_OUTFQ+4
  6688  0195  1003               	clrc
  6689  0196  0DA4               	rlf	??_OUTFQ+4,f
  6690  0197  0DA5               	rlf	??_OUTFQ+5,f
  6691  0198  0824               	movf	??_OUTFQ+4,w
  6692  0199  077C               	addwf	OUTFQ@Nprg,w
  6693  019A  00A6               	movwf	??_OUTFQ+6
  6694  019B  0825               	movf	??_OUTFQ+5,w
  6695  019C  1803               	skipnc
  6696  019D  0A25               	incf	??_OUTFQ+5,w
  6697  019E  077D               	addwf	OUTFQ@Nprg+1,w
  6698  019F  00A7               	movwf	??_OUTFQ+7
  6699  01A0  0826               	movf	??_OUTFQ+6,w
  6700  01A1  0084               	movwf	4
  6701  01A2  1783               	bsf	3,7
  6702  01A3  1C27               	btfss	??_OUTFQ+7,0
  6703  01A4  1383               	bcf	3,7
  6704  01A5  0871               	movf	?___awdiv,w
  6705  01A6  0080               	movwf	0
  6706  01A7  0A84               	incf	4,f
  6707  01A8  0872               	movf	?___awdiv+1,w
  6708  01A9  2A9F               	goto	L8
  6709  01AA                     l3227:	
  6710                           ;FMCW.c: 155: }
  6711                           ;FMCW.c: 156: }
  6712                           
  6713                           
  6714                           ;FMCW.c: 157: else if(Nprg[j] % 2 == 1) {
  6715  01AA  085B               	movf	OUTFQ@j+1,w
  6716  01AB  00A1               	movwf	??_OUTFQ+1
  6717  01AC  085A               	movf	OUTFQ@j,w
  6718  01AD  00A0               	movwf	??_OUTFQ
  6719  01AE  1003               	clrc
  6720  01AF  0DA0               	rlf	??_OUTFQ,f
  6721  01B0  0DA1               	rlf	??_OUTFQ+1,f
  6722  01B1  0820               	movf	??_OUTFQ,w
  6723  01B2  077C               	addwf	OUTFQ@Nprg,w
  6724  01B3  00A2               	movwf	??_OUTFQ+2
  6725  01B4  0821               	movf	??_OUTFQ+1,w
  6726  01B5  1803               	skipnc
  6727  01B6  0A21               	incf	??_OUTFQ+1,w
  6728  01B7  077D               	addwf	OUTFQ@Nprg+1,w
  6729  01B8  00A3               	movwf	??_OUTFQ+3
  6730  01B9  0822               	movf	??_OUTFQ+2,w
  6731  01BA  0084               	movwf	4
  6732  01BB  1783               	bsf	3,7
  6733  01BC  1C23               	btfss	??_OUTFQ+3,0
  6734  01BD  1383               	bcf	3,7
  6735  01BE  0800               	movf	0,w
  6736  01BF  00A4               	movwf	??_OUTFQ+4
  6737  01C0  0A84               	incf	4,f
  6738  01C1  0800               	movf	0,w
  6739  01C2  00A5               	movwf	??_OUTFQ+5
  6740  01C3  1C24               	btfss	??_OUTFQ+4,0
  6741  01C4  2AA0               	goto	l3241
  6742                           
  6743                           ;FMCW.c: 158: if(j == 4){
  6744  01C5  3004               	movlw	4
  6745  01C6  065A               	xorwf	OUTFQ@j,w
  6746  01C7  045B               	iorwf	OUTFQ@j+1,w
  6747  01C8  1D03               	btfss	3,2
  6748  01C9  2A19               	goto	l3237
  6749                           
  6750                           ;FMCW.c: 159: Nprg[j] = Nprg[j] / 2;
  6751  01CA  3002               	movlw	2
  6752  01CB  00F1               	movwf	___awdiv@divisor
  6753  01CC  3000               	movlw	0
  6754  01CD  00F2               	movwf	___awdiv@divisor+1
  6755  01CE  085B               	movf	OUTFQ@j+1,w
  6756  01CF  00A1               	movwf	??_OUTFQ+1
  6757  01D0  085A               	movf	OUTFQ@j,w
  6758  01D1  00A0               	movwf	??_OUTFQ
  6759  01D2  1003               	clrc
  6760  01D3  0DA0               	rlf	??_OUTFQ,f
  6761  01D4  0DA1               	rlf	??_OUTFQ+1,f
  6762  01D5  0820               	movf	??_OUTFQ,w
  6763  01D6  077C               	addwf	OUTFQ@Nprg,w
  6764  01D7  00A2               	movwf	??_OUTFQ+2
  6765  01D8  0821               	movf	??_OUTFQ+1,w
  6766  01D9  1803               	skipnc
  6767  01DA  0A21               	incf	??_OUTFQ+1,w
  6768  01DB  077D               	addwf	OUTFQ@Nprg+1,w
  6769  01DC  00A3               	movwf	??_OUTFQ+3
  6770  01DD  0822               	movf	??_OUTFQ+2,w
  6771  01DE  0084               	movwf	4
  6772  01DF  1783               	bsf	3,7
  6773  01E0  1C23               	btfss	??_OUTFQ+3,0
  6774  01E1  1383               	bcf	3,7
  6775  01E2  0800               	movf	0,w
  6776  01E3  00F3               	movwf	___awdiv@dividend
  6777  01E4  0A84               	incf	4,f
  6778  01E5  0800               	movf	0,w
  6779  01E6  00F4               	movwf	___awdiv@dividend+1
  6780  01E7  120A  158A  22CB  120A  118A  	fcall	___awdiv
  6781  01EC  1283               	bcf	3,5	;RP0=0, select bank0
  6782  01ED  1303               	bcf	3,6	;RP1=0, select bank0
  6783  01EE  085B               	movf	OUTFQ@j+1,w
  6784  01EF  00A5               	movwf	??_OUTFQ+5
  6785  01F0  085A               	movf	OUTFQ@j,w
  6786  01F1  00A4               	movwf	??_OUTFQ+4
  6787  01F2  1003               	clrc
  6788  01F3  0DA4               	rlf	??_OUTFQ+4,f
  6789  01F4  0DA5               	rlf	??_OUTFQ+5,f
  6790  01F5  0824               	movf	??_OUTFQ+4,w
  6791  01F6  077C               	addwf	OUTFQ@Nprg,w
  6792  01F7  00A6               	movwf	??_OUTFQ+6
  6793  01F8  0825               	movf	??_OUTFQ+5,w
  6794  01F9  1803               	skipnc
  6795  01FA  0A25               	incf	??_OUTFQ+5,w
  6796  01FB  077D               	addwf	OUTFQ@Nprg+1,w
  6797  01FC  00A7               	movwf	??_OUTFQ+7
  6798  01FD  0826               	movf	??_OUTFQ+6,w
  6799  01FE  0084               	movwf	4
  6800  01FF  1783               	bsf	3,7
  6801  0200  1C27               	btfss	??_OUTFQ+7,0
  6802  0201  1383               	bcf	3,7
  6803  0202  0871               	movf	?___awdiv,w
  6804  0203  0080               	movwf	0
  6805  0204  0A84               	incf	4,f
  6806  0205  0872               	movf	?___awdiv+1,w
  6807  0206  0080               	movwf	0
  6808                           
  6809                           ;FMCW.c: 160: Nprg_b[count] = 1;
  6810  0207  0854               	movf	OUTFQ@count,w
  6811  0208  00A0               	movwf	??_OUTFQ
  6812  0209  0720               	addwf	??_OUTFQ,w
  6813  020A  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6814  020B  0084               	movwf	4
  6815  020C  3001               	movlw	1
  6816  020D  1383               	bcf	3,7	;select IRP bank0
  6817  020E  0080               	movwf	0
  6818  020F  0A84               	incf	4,f
  6819  0210  3000               	movlw	0
  6820  0211  0080               	movwf	0
  6821  0212                     l3235:	
  6822                           
  6823                           ;FMCW.c: 161: count++;
  6824  0212  3001               	movlw	1
  6825  0213  07D4               	addwf	OUTFQ@count,f
  6826  0214  1803               	skipnc
  6827  0215  0AD5               	incf	OUTFQ@count+1,f
  6828  0216  3000               	movlw	0
  6829  0217  07D5               	addwf	OUTFQ@count+1,f
  6830                           
  6831                           ;FMCW.c: 162: }
  6832  0218  2AA0               	goto	l3241
  6833  0219                     l3237:	
  6834                           
  6835                           ;FMCW.c: 163: else{
  6836                           ;FMCW.c: 164: Nprg[j] = Nprg[j] / 2;
  6837  0219  3002               	movlw	2
  6838  021A  00F1               	movwf	___awdiv@divisor
  6839  021B  3000               	movlw	0
  6840  021C  00F2               	movwf	___awdiv@divisor+1
  6841  021D  085B               	movf	OUTFQ@j+1,w
  6842  021E  00A1               	movwf	??_OUTFQ+1
  6843  021F  085A               	movf	OUTFQ@j,w
  6844  0220  00A0               	movwf	??_OUTFQ
  6845  0221  1003               	clrc
  6846  0222  0DA0               	rlf	??_OUTFQ,f
  6847  0223  0DA1               	rlf	??_OUTFQ+1,f
  6848  0224  0820               	movf	??_OUTFQ,w
  6849  0225  077C               	addwf	OUTFQ@Nprg,w
  6850  0226  00A2               	movwf	??_OUTFQ+2
  6851  0227  0821               	movf	??_OUTFQ+1,w
  6852  0228  1803               	skipnc
  6853  0229  0A21               	incf	??_OUTFQ+1,w
  6854  022A  077D               	addwf	OUTFQ@Nprg+1,w
  6855  022B  00A3               	movwf	??_OUTFQ+3
  6856  022C  0822               	movf	??_OUTFQ+2,w
  6857  022D  0084               	movwf	4
  6858  022E  1783               	bsf	3,7
  6859  022F  1C23               	btfss	??_OUTFQ+3,0
  6860  0230  1383               	bcf	3,7
  6861  0231  0800               	movf	0,w
  6862  0232  00F3               	movwf	___awdiv@dividend
  6863  0233  0A84               	incf	4,f
  6864  0234  0800               	movf	0,w
  6865  0235  00F4               	movwf	___awdiv@dividend+1
  6866  0236  120A  158A  22CB  120A  118A  	fcall	___awdiv
  6867  023B  1283               	bcf	3,5	;RP0=0, select bank0
  6868  023C  1303               	bcf	3,6	;RP1=0, select bank0
  6869  023D  085B               	movf	OUTFQ@j+1,w
  6870  023E  00A5               	movwf	??_OUTFQ+5
  6871  023F  085A               	movf	OUTFQ@j,w
  6872  0240  00A4               	movwf	??_OUTFQ+4
  6873  0241  1003               	clrc
  6874  0242  0DA4               	rlf	??_OUTFQ+4,f
  6875  0243  0DA5               	rlf	??_OUTFQ+5,f
  6876  0244  0824               	movf	??_OUTFQ+4,w
  6877  0245  077C               	addwf	OUTFQ@Nprg,w
  6878  0246  00A6               	movwf	??_OUTFQ+6
  6879  0247  0825               	movf	??_OUTFQ+5,w
  6880  0248  1803               	skipnc
  6881  0249  0A25               	incf	??_OUTFQ+5,w
  6882  024A  077D               	addwf	OUTFQ@Nprg+1,w
  6883  024B  00A7               	movwf	??_OUTFQ+7
  6884  024C  0826               	movf	??_OUTFQ+6,w
  6885  024D  0084               	movwf	4
  6886  024E  1783               	bsf	3,7
  6887  024F  1C27               	btfss	??_OUTFQ+7,0
  6888  0250  1383               	bcf	3,7
  6889  0251  0871               	movf	?___awdiv,w
  6890  0252  0080               	movwf	0
  6891  0253  0A84               	incf	4,f
  6892  0254  0872               	movf	?___awdiv+1,w
  6893  0255  0080               	movwf	0
  6894                           
  6895                           ;FMCW.c: 165: Nprg[j+1] = Nprg[j+1] + 10;
  6896  0256  085B               	movf	OUTFQ@j+1,w
  6897  0257  00A1               	movwf	??_OUTFQ+1
  6898  0258  085A               	movf	OUTFQ@j,w
  6899  0259  00A0               	movwf	??_OUTFQ
  6900  025A  1003               	clrc
  6901  025B  0DA0               	rlf	??_OUTFQ,f
  6902  025C  0DA1               	rlf	??_OUTFQ+1,f
  6903  025D  0820               	movf	??_OUTFQ,w
  6904  025E  3E02               	addlw	2
  6905  025F  00A2               	movwf	??_OUTFQ+2
  6906  0260  0821               	movf	??_OUTFQ+1,w
  6907  0261  1803               	skipnc
  6908  0262  3E01               	addlw	1
  6909  0263  3E00               	addlw	0
  6910  0264  00A3               	movwf	??_OUTFQ+3
  6911  0265  0822               	movf	??_OUTFQ+2,w
  6912  0266  077C               	addwf	OUTFQ@Nprg,w
  6913  0267  00A4               	movwf	??_OUTFQ+4
  6914  0268  0823               	movf	??_OUTFQ+3,w
  6915  0269  1803               	skipnc
  6916  026A  0A23               	incf	??_OUTFQ+3,w
  6917  026B  077D               	addwf	OUTFQ@Nprg+1,w
  6918  026C  00A5               	movwf	??_OUTFQ+5
  6919  026D  0824               	movf	??_OUTFQ+4,w
  6920  026E  0084               	movwf	4
  6921  026F  1783               	bsf	3,7
  6922  0270  1C25               	btfss	??_OUTFQ+5,0
  6923  0271  1383               	bcf	3,7
  6924  0272  0800               	movf	0,w
  6925  0273  00A6               	movwf	??_OUTFQ+6
  6926  0274  0A84               	incf	4,f
  6927  0275  0800               	movf	0,w
  6928  0276  00A7               	movwf	??_OUTFQ+7
  6929  0277  0826               	movf	??_OUTFQ+6,w
  6930  0278  3E0A               	addlw	10
  6931  0279  00A8               	movwf	??_OUTFQ+8
  6932  027A  0827               	movf	??_OUTFQ+7,w
  6933  027B  1803               	skipnc
  6934  027C  3E01               	addlw	1
  6935  027D  3E00               	addlw	0
  6936  027E  00A9               	movwf	??_OUTFQ+9
  6937  027F  085B               	movf	OUTFQ@j+1,w
  6938  0280  00AB               	movwf	??_OUTFQ+11
  6939  0281  085A               	movf	OUTFQ@j,w
  6940  0282  00AA               	movwf	??_OUTFQ+10
  6941  0283  1003               	clrc
  6942  0284  0DAA               	rlf	??_OUTFQ+10,f
  6943  0285  0DAB               	rlf	??_OUTFQ+11,f
  6944  0286  082A               	movf	??_OUTFQ+10,w
  6945  0287  3E02               	addlw	2
  6946  0288  00AC               	movwf	??_OUTFQ+12
  6947  0289  082B               	movf	??_OUTFQ+11,w
  6948  028A  1803               	skipnc
  6949  028B  3E01               	addlw	1
  6950  028C  3E00               	addlw	0
  6951  028D  00AD               	movwf	??_OUTFQ+13
  6952  028E  082C               	movf	??_OUTFQ+12,w
  6953  028F  077C               	addwf	OUTFQ@Nprg,w
  6954  0290  00AE               	movwf	??_OUTFQ+14
  6955  0291  082D               	movf	??_OUTFQ+13,w
  6956  0292  1803               	skipnc
  6957  0293  0A2D               	incf	??_OUTFQ+13,w
  6958  0294  077D               	addwf	OUTFQ@Nprg+1,w
  6959  0295  00AF               	movwf	??_OUTFQ+15
  6960  0296  082E               	movf	??_OUTFQ+14,w
  6961  0297  0084               	movwf	4
  6962  0298  1783               	bsf	3,7
  6963  0299  1C2F               	btfss	??_OUTFQ+15,0
  6964  029A  1383               	bcf	3,7
  6965  029B  0828               	movf	??_OUTFQ+8,w
  6966  029C  0080               	movwf	0
  6967  029D  0A84               	incf	4,f
  6968  029E  0829               	movf	??_OUTFQ+9,w
  6969  029F                     L8:	
  6970  029F  0080               	movwf	0
  6971  02A0                     l3241:	
  6972  02A0  3001               	movlw	1
  6973  02A1  07DA               	addwf	OUTFQ@j,f
  6974  02A2  1803               	skipnc
  6975  02A3  0ADB               	incf	OUTFQ@j+1,f
  6976  02A4  3000               	movlw	0
  6977  02A5  07DB               	addwf	OUTFQ@j+1,f
  6978  02A6  085B               	movf	OUTFQ@j+1,w
  6979  02A7  3A80               	xorlw	128
  6980  02A8  00FF               	movwf	127
  6981  02A9  3080               	movlw	128
  6982  02AA  027F               	subwf	127,w
  6983  02AB  1D03               	skipz
  6984  02AC  2AAF               	goto	u2895
  6985  02AD  3005               	movlw	5
  6986  02AE  025A               	subwf	OUTFQ@j,w
  6987  02AF                     u2895:	
  6988  02AF  1C03               	skipc
  6989  02B0  2904               	goto	l3215
  6990  02B1                     l3245:	
  6991  02B1  3001               	movlw	1
  6992  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  6993  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  6994  02B4  07D2               	addwf	OUTFQ@i_466,f
  6995  02B5  1803               	skipnc
  6996  02B6  0AD3               	incf	OUTFQ@i_466+1,f
  6997  02B7  3000               	movlw	0
  6998  02B8  07D3               	addwf	OUTFQ@i_466+1,f
  6999  02B9  0853               	movf	OUTFQ@i_466+1,w
  7000  02BA  3A80               	xorlw	128
  7001  02BB  00FF               	movwf	127
  7002  02BC  3080               	movlw	128
  7003  02BD  027F               	subwf	127,w
  7004  02BE  1D03               	skipz
  7005  02BF  2AC2               	goto	u2905
  7006  02C0  3011               	movlw	17
  7007  02C1  0252               	subwf	OUTFQ@i_466,w
  7008  02C2                     u2905:	
  7009  02C2  1C03               	skipc
  7010  02C3  28F5               	goto	l3209
  7011  02C4                     l3249:	
  7012                           
  7013                           ;FMCW.c: 166: }
  7014                           ;FMCW.c: 167: }
  7015                           ;FMCW.c: 168: }
  7016                           ;FMCW.c: 169: }
  7017                           ;FMCW.c: 172: for (int i=0; i<17; i++)
  7018  02C4  1283               	bcf	3,5	;RP0=0, select bank0
  7019  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  7020  02C6  01D8               	clrf	OUTFQ@i_468
  7021  02C7  01D9               	clrf	OUTFQ@i_468+1
  7022  02C8  0859               	movf	OUTFQ@i_468+1,w
  7023  02C9  3A80               	xorlw	128
  7024  02CA  00FF               	movwf	127
  7025  02CB  3080               	movlw	128
  7026  02CC  027F               	subwf	127,w
  7027  02CD  1D03               	skipz
  7028  02CE  2AD1               	goto	u2915
  7029  02CF  3011               	movlw	17
  7030  02D0  0258               	subwf	OUTFQ@i_468,w
  7031  02D1                     u2915:	
  7032  02D1  1803               	btfsc	3,0
  7033  02D2  2B1A               	goto	l3267
  7034  02D3                     l3255:	
  7035                           
  7036                           ;FMCW.c: 173: {
  7037                           ;FMCW.c: 174: if(Nprg_b[i] == 0)
  7038  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  7039  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  7040  02D5  0858               	movf	OUTFQ@i_468,w
  7041  02D6  00A0               	movwf	??_OUTFQ
  7042  02D7  0720               	addwf	??_OUTFQ,w
  7043  02D8  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  7044  02D9  0084               	movwf	4
  7045  02DA  1383               	bcf	3,7	;select IRP bank0
  7046  02DB  0800               	movf	0,w
  7047  02DC  00A1               	movwf	??_OUTFQ+1
  7048  02DD  0A84               	incf	4,f
  7049  02DE  0800               	movf	0,w
  7050  02DF  00A2               	movwf	??_OUTFQ+2
  7051  02E0  0821               	movf	??_OUTFQ+1,w
  7052  02E1  0422               	iorwf	??_OUTFQ+2,w
  7053  02E2  1D03               	btfss	3,2
  7054  02E3  2AED               	goto	l3259
  7055                           
  7056                           ;FMCW.c: 175: {
  7057                           ;FMCW.c: 176: L_OUT(fmcwtxrx);
  7058  02E4  087B               	movf	OUTFQ@fmcwtxrx+1,w
  7059  02E5  00F4               	movwf	L_OUT@fmcwtxrx+1
  7060  02E6  087A               	movf	OUTFQ@fmcwtxrx,w
  7061  02E7  00F3               	movwf	L_OUT@fmcwtxrx
  7062  02E8  120A  158A  21F2  120A  118A  	fcall	_L_OUT
  7063  02ED                     l3259:	
  7064                           
  7065                           ;FMCW.c: 177: }
  7066                           ;FMCW.c: 178: if(Nprg_b[i] == 1)
  7067  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  7068  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  7069  02EF  0858               	movf	OUTFQ@i_468,w
  7070  02F0  00A0               	movwf	??_OUTFQ
  7071  02F1  0720               	addwf	??_OUTFQ,w
  7072  02F2  3E30               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  7073  02F3  0084               	movwf	4
  7074  02F4  1383               	bcf	3,7	;select IRP bank0
  7075  02F5  0800               	movf	0,w
  7076  02F6  00A1               	movwf	??_OUTFQ+1
  7077  02F7  0A84               	incf	4,f
  7078  02F8  0800               	movf	0,w
  7079  02F9  00A2               	movwf	??_OUTFQ+2
  7080  02FA  0321               	decf	??_OUTFQ+1,w
  7081  02FB  0422               	iorwf	??_OUTFQ+2,w
  7082  02FC  1D03               	btfss	3,2
  7083  02FD  2B07               	goto	l3263
  7084                           
  7085                           ;FMCW.c: 179: {
  7086                           ;FMCW.c: 180: H_OUT(fmcwtxrx);
  7087  02FE  087B               	movf	OUTFQ@fmcwtxrx+1,w
  7088  02FF  00F4               	movwf	H_OUT@fmcwtxrx+1
  7089  0300  087A               	movf	OUTFQ@fmcwtxrx,w
  7090  0301  00F3               	movwf	H_OUT@fmcwtxrx
  7091  0302  120A  158A  21AC  120A  118A  	fcall	_H_OUT
  7092  0307                     l3263:	
  7093  0307  3001               	movlw	1
  7094  0308  1283               	bcf	3,5	;RP0=0, select bank0
  7095  0309  1303               	bcf	3,6	;RP1=0, select bank0
  7096  030A  07D8               	addwf	OUTFQ@i_468,f
  7097  030B  1803               	skipnc
  7098  030C  0AD9               	incf	OUTFQ@i_468+1,f
  7099  030D  3000               	movlw	0
  7100  030E  07D9               	addwf	OUTFQ@i_468+1,f
  7101  030F  0859               	movf	OUTFQ@i_468+1,w
  7102  0310  3A80               	xorlw	128
  7103  0311  00FF               	movwf	127
  7104  0312  3080               	movlw	128
  7105  0313  027F               	subwf	127,w
  7106  0314  1D03               	skipz
  7107  0315  2B18               	goto	u2945
  7108  0316  3011               	movlw	17
  7109  0317  0258               	subwf	OUTFQ@i_468,w
  7110  0318                     u2945:	
  7111  0318  1C03               	skipc
  7112  0319  2AD3               	goto	l3255
  7113  031A                     l3267:	
  7114                           
  7115                           ;FMCW.c: 181: }
  7116                           ;FMCW.c: 182: }
  7117                           ;FMCW.c: 185: H_OUT(fmcwtxrx);
  7118  031A  087B               	movf	OUTFQ@fmcwtxrx+1,w
  7119  031B  00F4               	movwf	H_OUT@fmcwtxrx+1
  7120  031C  087A               	movf	OUTFQ@fmcwtxrx,w
  7121  031D  00F3               	movwf	H_OUT@fmcwtxrx
  7122  031E  120A  158A  21AC  120A  118A  	fcall	_H_OUT
  7123                           
  7124                           ;FMCW.c: 186: L_OUT(fmcwtxrx);
  7125  0323  087B               	movf	OUTFQ@fmcwtxrx+1,w
  7126  0324  00F4               	movwf	L_OUT@fmcwtxrx+1
  7127  0325  087A               	movf	OUTFQ@fmcwtxrx,w
  7128  0326  00F3               	movwf	L_OUT@fmcwtxrx
  7129  0327  120A  158A  21F2  120A  118A  	fcall	_L_OUT
  7130                           
  7131                           ;FMCW.c: 189: STBOUT(fmcwtxrx);
  7132  032C  087B               	movf	OUTFQ@fmcwtxrx+1,w
  7133  032D  00F4               	movwf	STBOUT@fmcwtxrx+1
  7134  032E  087A               	movf	OUTFQ@fmcwtxrx,w
  7135  032F  00F3               	movwf	STBOUT@fmcwtxrx
  7136  0330  120A  118A  2009   	fcall	_STBOUT
  7137  0333  0008               	return
  7138  0334                     __end_of_OUTFQ:	
  7139                           
  7140                           	psect	text25
  7141  0ACB                     __ptext25:	
  7142 ;; *************** function ___awdiv *****************
  7143 ;; Defined at:
  7144 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  7145 ;; Parameters:    Size  Location     Type
  7146 ;;  divisor         2    0[COMMON] int 
  7147 ;;  dividend        2    2[COMMON] int 
  7148 ;; Auto vars:     Size  Location     Type
  7149 ;;  quotient        2    7[COMMON] int 
  7150 ;;  sign            1    6[COMMON] unsigned char 
  7151 ;;  counter         1    5[COMMON] unsigned char 
  7152 ;; Return value:  Size  Location     Type
  7153 ;;                  2    0[COMMON] int 
  7154 ;; Registers used:
  7155 ;;		wreg, status,2, status,0
  7156 ;; Tracked objects:
  7157 ;;		On entry : 0/0
  7158 ;;		On exit  : 0/0
  7159 ;;		Unchanged: 0/0
  7160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7161 ;;      Params:         4       0       0       0       0
  7162 ;;      Locals:         4       0       0       0       0
  7163 ;;      Temps:          1       0       0       0       0
  7164 ;;      Totals:         9       0       0       0       0
  7165 ;;Total ram usage:        9 bytes
  7166 ;; Hardware stack levels used:    1
  7167 ;; This function calls:
  7168 ;;		Nothing
  7169 ;; This function is called by:
  7170 ;;		_OUTFQ
  7171 ;;		_RFDOUT
  7172 ;; This function uses a non-reentrant model
  7173 ;;
  7174                           
  7175                           
  7176                           ;psect for function ___awdiv
  7177  0ACB                     ___awdiv:	
  7178                           
  7179                           ;incstack = 0
  7180                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7181  0ACB  01F7               	clrf	___awdiv@sign
  7182  0ACC  1FF2               	btfss	___awdiv@divisor+1,7
  7183  0ACD  2AD5               	goto	l2679
  7184  0ACE  09F1               	comf	___awdiv@divisor,f
  7185  0ACF  09F2               	comf	___awdiv@divisor+1,f
  7186  0AD0  0AF1               	incf	___awdiv@divisor,f
  7187  0AD1  1903               	skipnz
  7188  0AD2  0AF2               	incf	___awdiv@divisor+1,f
  7189  0AD3  01F7               	clrf	___awdiv@sign
  7190  0AD4  0AF7               	incf	___awdiv@sign,f
  7191  0AD5                     l2679:	
  7192  0AD5  1FF4               	btfss	___awdiv@dividend+1,7
  7193  0AD6  2AE0               	goto	l2685
  7194  0AD7  09F3               	comf	___awdiv@dividend,f
  7195  0AD8  09F4               	comf	___awdiv@dividend+1,f
  7196  0AD9  0AF3               	incf	___awdiv@dividend,f
  7197  0ADA  1903               	skipnz
  7198  0ADB  0AF4               	incf	___awdiv@dividend+1,f
  7199  0ADC  3001               	movlw	1
  7200  0ADD  00F5               	movwf	??___awdiv
  7201  0ADE  0875               	movf	??___awdiv,w
  7202  0ADF  06F7               	xorwf	___awdiv@sign,f
  7203  0AE0                     l2685:	
  7204  0AE0  01F8               	clrf	___awdiv@quotient
  7205  0AE1  01F9               	clrf	___awdiv@quotient+1
  7206  0AE2  0871               	movf	___awdiv@divisor,w
  7207  0AE3  0472               	iorwf	___awdiv@divisor+1,w
  7208  0AE4  1903               	btfsc	3,2
  7209  0AE5  2B17               	goto	l2707
  7210  0AE6  01F6               	clrf	___awdiv@counter
  7211  0AE7  0AF6               	incf	___awdiv@counter,f
  7212  0AE8                     l2695:	
  7213  0AE8  1BF2               	btfsc	___awdiv@divisor+1,7
  7214  0AE9  2AF6               	goto	l2697
  7215  0AEA  3001               	movlw	1
  7216  0AEB                     u2065:	
  7217  0AEB  1003               	clrc
  7218  0AEC  0DF1               	rlf	___awdiv@divisor,f
  7219  0AED  0DF2               	rlf	___awdiv@divisor+1,f
  7220  0AEE  3EFF               	addlw	-1
  7221  0AEF  1D03               	skipz
  7222  0AF0  2AEB               	goto	u2065
  7223  0AF1  3001               	movlw	1
  7224  0AF2  00F5               	movwf	??___awdiv
  7225  0AF3  0875               	movf	??___awdiv,w
  7226  0AF4  07F6               	addwf	___awdiv@counter,f
  7227  0AF5  2AE8               	goto	l2695
  7228  0AF6                     l2697:	
  7229  0AF6  3001               	movlw	1
  7230  0AF7                     u2085:	
  7231  0AF7  1003               	clrc
  7232  0AF8  0DF8               	rlf	___awdiv@quotient,f
  7233  0AF9  0DF9               	rlf	___awdiv@quotient+1,f
  7234  0AFA  3EFF               	addlw	-1
  7235  0AFB  1D03               	skipz
  7236  0AFC  2AF7               	goto	u2085
  7237  0AFD  0872               	movf	___awdiv@divisor+1,w
  7238  0AFE  0274               	subwf	___awdiv@dividend+1,w
  7239  0AFF  1D03               	skipz
  7240  0B00  2B03               	goto	u2095
  7241  0B01  0871               	movf	___awdiv@divisor,w
  7242  0B02  0273               	subwf	___awdiv@dividend,w
  7243  0B03                     u2095:	
  7244  0B03  1C03               	skipc
  7245  0B04  2B0C               	goto	l2703
  7246  0B05  0871               	movf	___awdiv@divisor,w
  7247  0B06  02F3               	subwf	___awdiv@dividend,f
  7248  0B07  0872               	movf	___awdiv@divisor+1,w
  7249  0B08  1C03               	skipc
  7250  0B09  03F4               	decf	___awdiv@dividend+1,f
  7251  0B0A  02F4               	subwf	___awdiv@dividend+1,f
  7252  0B0B  1478               	bsf	___awdiv@quotient,0
  7253  0B0C                     l2703:	
  7254  0B0C  3001               	movlw	1
  7255  0B0D                     u2105:	
  7256  0B0D  1003               	clrc
  7257  0B0E  0CF2               	rrf	___awdiv@divisor+1,f
  7258  0B0F  0CF1               	rrf	___awdiv@divisor,f
  7259  0B10  3EFF               	addlw	-1
  7260  0B11  1D03               	skipz
  7261  0B12  2B0D               	goto	u2105
  7262  0B13  3001               	movlw	1
  7263  0B14  02F6               	subwf	___awdiv@counter,f
  7264  0B15  1D03               	btfss	3,2
  7265  0B16  2AF6               	goto	l2697
  7266  0B17                     l2707:	
  7267  0B17  0877               	movf	___awdiv@sign,w
  7268  0B18  1903               	btfsc	3,2
  7269  0B19  2B1F               	goto	l2711
  7270  0B1A  09F8               	comf	___awdiv@quotient,f
  7271  0B1B  09F9               	comf	___awdiv@quotient+1,f
  7272  0B1C  0AF8               	incf	___awdiv@quotient,f
  7273  0B1D  1903               	skipnz
  7274  0B1E  0AF9               	incf	___awdiv@quotient+1,f
  7275  0B1F                     l2711:	
  7276  0B1F  0879               	movf	___awdiv@quotient+1,w
  7277  0B20  00F2               	movwf	?___awdiv+1
  7278  0B21  0878               	movf	___awdiv@quotient,w
  7279  0B22  00F1               	movwf	?___awdiv
  7280  0B23  0008               	return
  7281  0B24                     __end_of___awdiv:	
  7282                           
  7283                           	psect	text26
  7284  0CA7                     __ptext26:	
  7285 ;; *************** function _OPINIT *****************
  7286 ;; Defined at:
  7287 ;;		line 241 in file "FMCW.c"
  7288 ;; Parameters:    Size  Location     Type
  7289 ;;  fmcwtxrx        2    4[COMMON] int 
  7290 ;; Auto vars:     Size  Location     Type
  7291 ;;		None
  7292 ;; Return value:  Size  Location     Type
  7293 ;;                  1    wreg      void 
  7294 ;; Registers used:
  7295 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7296 ;; Tracked objects:
  7297 ;;		On entry : 0/0
  7298 ;;		On exit  : 0/0
  7299 ;;		Unchanged: 0/0
  7300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7301 ;;      Params:         2       0       0       0       0
  7302 ;;      Locals:         0       0       0       0       0
  7303 ;;      Temps:          0       0       0       0       0
  7304 ;;      Totals:         2       0       0       0       0
  7305 ;;Total ram usage:        2 bytes
  7306 ;; Hardware stack levels used:    1
  7307 ;; Hardware stack levels required when called:    2
  7308 ;; This function calls:
  7309 ;;		_H_OUT
  7310 ;;		_L_OUT
  7311 ;;		_STBOUT
  7312 ;; This function is called by:
  7313 ;;		_FMTX
  7314 ;;		_CWTX
  7315 ;;		_FMRX
  7316 ;; This function uses a non-reentrant model
  7317 ;;
  7318                           
  7319                           
  7320                           ;psect for function _OPINIT
  7321  0CA7                     _OPINIT:	
  7322                           
  7323                           ;FMCW.c: 243: L_OUT(fmcwtxrx);
  7324                           
  7325                           ;incstack = 0
  7326                           ; Regs used in _OPINIT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7327  0CA7  0876               	movf	OPINIT@fmcwtxrx+1,w
  7328  0CA8  00F4               	movwf	L_OUT@fmcwtxrx+1
  7329  0CA9  0875               	movf	OPINIT@fmcwtxrx,w
  7330  0CAA  00F3               	movwf	L_OUT@fmcwtxrx
  7331  0CAB  120A  158A  21F2  120A  158A  	fcall	_L_OUT
  7332                           
  7333                           ;FMCW.c: 244: L_OUT(fmcwtxrx);
  7334  0CB0  0876               	movf	OPINIT@fmcwtxrx+1,w
  7335  0CB1  00F4               	movwf	L_OUT@fmcwtxrx+1
  7336  0CB2  0875               	movf	OPINIT@fmcwtxrx,w
  7337  0CB3  00F3               	movwf	L_OUT@fmcwtxrx
  7338  0CB4  120A  158A  21F2  120A  158A  	fcall	_L_OUT
  7339                           
  7340                           ;FMCW.c: 245: L_OUT(fmcwtxrx);
  7341  0CB9  0876               	movf	OPINIT@fmcwtxrx+1,w
  7342  0CBA  00F4               	movwf	L_OUT@fmcwtxrx+1
  7343  0CBB  0875               	movf	OPINIT@fmcwtxrx,w
  7344  0CBC  00F3               	movwf	L_OUT@fmcwtxrx
  7345  0CBD  120A  158A  21F2  120A  158A  	fcall	_L_OUT
  7346                           
  7347                           ;FMCW.c: 246: H_OUT(fmcwtxrx);
  7348  0CC2  0876               	movf	OPINIT@fmcwtxrx+1,w
  7349  0CC3  00F4               	movwf	H_OUT@fmcwtxrx+1
  7350  0CC4  0875               	movf	OPINIT@fmcwtxrx,w
  7351  0CC5  00F3               	movwf	H_OUT@fmcwtxrx
  7352  0CC6  120A  158A  21AC  120A  158A  	fcall	_H_OUT
  7353                           
  7354                           ;FMCW.c: 247: H_OUT(fmcwtxrx);
  7355  0CCB  0876               	movf	OPINIT@fmcwtxrx+1,w
  7356  0CCC  00F4               	movwf	H_OUT@fmcwtxrx+1
  7357  0CCD  0875               	movf	OPINIT@fmcwtxrx,w
  7358  0CCE  00F3               	movwf	H_OUT@fmcwtxrx
  7359  0CCF  120A  158A  21AC  120A  158A  	fcall	_H_OUT
  7360                           
  7361                           ;FMCW.c: 248: L_OUT(fmcwtxrx);
  7362  0CD4  0876               	movf	OPINIT@fmcwtxrx+1,w
  7363  0CD5  00F4               	movwf	L_OUT@fmcwtxrx+1
  7364  0CD6  0875               	movf	OPINIT@fmcwtxrx,w
  7365  0CD7  00F3               	movwf	L_OUT@fmcwtxrx
  7366  0CD8  120A  158A  21F2  120A  158A  	fcall	_L_OUT
  7367                           
  7368                           ;FMCW.c: 249: L_OUT(fmcwtxrx);
  7369  0CDD  0876               	movf	OPINIT@fmcwtxrx+1,w
  7370  0CDE  00F4               	movwf	L_OUT@fmcwtxrx+1
  7371  0CDF  0875               	movf	OPINIT@fmcwtxrx,w
  7372  0CE0  00F3               	movwf	L_OUT@fmcwtxrx
  7373  0CE1  120A  158A  21F2  120A  158A  	fcall	_L_OUT
  7374                           
  7375                           ;FMCW.c: 250: L_OUT(fmcwtxrx);
  7376  0CE6  0876               	movf	OPINIT@fmcwtxrx+1,w
  7377  0CE7  00F4               	movwf	L_OUT@fmcwtxrx+1
  7378  0CE8  0875               	movf	OPINIT@fmcwtxrx,w
  7379  0CE9  00F3               	movwf	L_OUT@fmcwtxrx
  7380  0CEA  120A  158A  21F2  120A  158A  	fcall	_L_OUT
  7381                           
  7382                           ;FMCW.c: 251: L_OUT(fmcwtxrx);
  7383  0CEF  0876               	movf	OPINIT@fmcwtxrx+1,w
  7384  0CF0  00F4               	movwf	L_OUT@fmcwtxrx+1
  7385  0CF1  0875               	movf	OPINIT@fmcwtxrx,w
  7386  0CF2  00F3               	movwf	L_OUT@fmcwtxrx
  7387  0CF3  120A  158A  21F2  120A  158A  	fcall	_L_OUT
  7388                           
  7389                           ;FMCW.c: 252: L_OUT(fmcwtxrx);
  7390  0CF8  0876               	movf	OPINIT@fmcwtxrx+1,w
  7391  0CF9  00F4               	movwf	L_OUT@fmcwtxrx+1
  7392  0CFA  0875               	movf	OPINIT@fmcwtxrx,w
  7393  0CFB  00F3               	movwf	L_OUT@fmcwtxrx
  7394  0CFC  120A  158A  21F2  120A  158A  	fcall	_L_OUT
  7395                           
  7396                           ;FMCW.c: 253: H_OUT(fmcwtxrx);
  7397  0D01  0876               	movf	OPINIT@fmcwtxrx+1,w
  7398  0D02  00F4               	movwf	H_OUT@fmcwtxrx+1
  7399  0D03  0875               	movf	OPINIT@fmcwtxrx,w
  7400  0D04  00F3               	movwf	H_OUT@fmcwtxrx
  7401  0D05  120A  158A  21AC  120A  158A  	fcall	_H_OUT
  7402                           
  7403                           ;FMCW.c: 256: L_OUT(fmcwtxrx);
  7404  0D0A  0876               	movf	OPINIT@fmcwtxrx+1,w
  7405  0D0B  00F4               	movwf	L_OUT@fmcwtxrx+1
  7406  0D0C  0875               	movf	OPINIT@fmcwtxrx,w
  7407  0D0D  00F3               	movwf	L_OUT@fmcwtxrx
  7408  0D0E  120A  158A  21F2  120A  158A  	fcall	_L_OUT
  7409                           
  7410                           ;FMCW.c: 257: L_OUT(fmcwtxrx);
  7411  0D13  0876               	movf	OPINIT@fmcwtxrx+1,w
  7412  0D14  00F4               	movwf	L_OUT@fmcwtxrx+1
  7413  0D15  0875               	movf	OPINIT@fmcwtxrx,w
  7414  0D16  00F3               	movwf	L_OUT@fmcwtxrx
  7415  0D17  120A  158A  21F2  120A  158A  	fcall	_L_OUT
  7416                           
  7417                           ;FMCW.c: 260: STBOUT(fmcwtxrx);
  7418  0D1C  0876               	movf	OPINIT@fmcwtxrx+1,w
  7419  0D1D  00F4               	movwf	STBOUT@fmcwtxrx+1
  7420  0D1E  0875               	movf	OPINIT@fmcwtxrx,w
  7421  0D1F  00F3               	movwf	STBOUT@fmcwtxrx
  7422  0D20  120A  118A  2009   	fcall	_STBOUT
  7423  0D23  0008               	return
  7424  0D24                     __end_of_OPINIT:	
  7425                           
  7426                           	psect	text27
  7427  0009                     __ptext27:	
  7428 ;; *************** function _STBOUT *****************
  7429 ;; Defined at:
  7430 ;;		line 107 in file "FMCW.c"
  7431 ;; Parameters:    Size  Location     Type
  7432 ;;  fmcwtxrx        2    2[COMMON] int 
  7433 ;; Auto vars:     Size  Location     Type
  7434 ;;		None
  7435 ;; Return value:  Size  Location     Type
  7436 ;;                  1    wreg      void 
  7437 ;; Registers used:
  7438 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7439 ;; Tracked objects:
  7440 ;;		On entry : 0/0
  7441 ;;		On exit  : 0/0
  7442 ;;		Unchanged: 0/0
  7443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7444 ;;      Params:         2       0       0       0       0
  7445 ;;      Locals:         0       0       0       0       0
  7446 ;;      Temps:          0       0       0       0       0
  7447 ;;      Totals:         2       0       0       0       0
  7448 ;;Total ram usage:        2 bytes
  7449 ;; Hardware stack levels used:    1
  7450 ;; Hardware stack levels required when called:    1
  7451 ;; This function calls:
  7452 ;;		__NOP
  7453 ;; This function is called by:
  7454 ;;		_OUTFQ
  7455 ;;		_RFDOUT
  7456 ;;		_OPINIT
  7457 ;; This function uses a non-reentrant model
  7458 ;;
  7459                           
  7460                           
  7461                           ;psect for function _STBOUT
  7462  0009                     _STBOUT:	
  7463                           
  7464                           ;FMCW.c: 108: if(fmcwtxrx == 1)
  7465                           
  7466                           ;incstack = 0
  7467                           ; Regs used in _STBOUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7468  0009  0373               	decf	STBOUT@fmcwtxrx,w
  7469  000A  0474               	iorwf	STBOUT@fmcwtxrx+1,w
  7470  000B  1D03               	btfss	3,2
  7471  000C  2818               	goto	l2655
  7472                           
  7473                           ;FMCW.c: 109: {
  7474                           ;FMCW.c: 110: PORTAbits.RA5 = 1;
  7475  000D  1283               	bcf	3,5	;RP0=0, select bank0
  7476  000E  1303               	bcf	3,6	;RP1=0, select bank0
  7477  000F  1685               	bsf	5,5	;volatile
  7478                           
  7479                           ;FMCW.c: 111: _NOP();
  7480  0010  120A  158A  202B  120A  118A  	fcall	__NOP
  7481                           
  7482                           ;FMCW.c: 112: PORTAbits.RA5 = 0;
  7483  0015  1283               	bcf	3,5	;RP0=0, select bank0
  7484  0016  1303               	bcf	3,6	;RP1=0, select bank0
  7485  0017  1285               	bcf	5,5	;volatile
  7486  0018                     l2655:	
  7487                           
  7488                           ;FMCW.c: 113: }
  7489                           ;FMCW.c: 114: if(fmcwtxrx == 2)
  7490  0018  3002               	movlw	2
  7491  0019  0673               	xorwf	STBOUT@fmcwtxrx,w
  7492  001A  0474               	iorwf	STBOUT@fmcwtxrx+1,w
  7493  001B  1D03               	btfss	3,2
  7494  001C  2828               	goto	l2663
  7495                           
  7496                           ;FMCW.c: 115: {
  7497                           ;FMCW.c: 116: PORTDbits.RD0 = 1;
  7498  001D  1283               	bcf	3,5	;RP0=0, select bank0
  7499  001E  1303               	bcf	3,6	;RP1=0, select bank0
  7500  001F  1408               	bsf	8,0	;volatile
  7501                           
  7502                           ;FMCW.c: 117: _NOP();
  7503  0020  120A  158A  202B  120A  118A  	fcall	__NOP
  7504                           
  7505                           ;FMCW.c: 118: PORTDbits.RD0 = 0;
  7506  0025  1283               	bcf	3,5	;RP0=0, select bank0
  7507  0026  1303               	bcf	3,6	;RP1=0, select bank0
  7508  0027  1008               	bcf	8,0	;volatile
  7509  0028                     l2663:	
  7510                           
  7511                           ;FMCW.c: 119: }
  7512                           ;FMCW.c: 120: if(fmcwtxrx == 3)
  7513  0028  3003               	movlw	3
  7514  0029  0673               	xorwf	STBOUT@fmcwtxrx,w
  7515  002A  0474               	iorwf	STBOUT@fmcwtxrx+1,w
  7516  002B  1D03               	btfss	3,2
  7517  002C  0008               	return
  7518                           
  7519                           ;FMCW.c: 121: {
  7520                           ;FMCW.c: 122: PORTAbits.RA4 = 1;
  7521  002D  1283               	bcf	3,5	;RP0=0, select bank0
  7522  002E  1303               	bcf	3,6	;RP1=0, select bank0
  7523  002F  1605               	bsf	5,4	;volatile
  7524                           
  7525                           ;FMCW.c: 123: _NOP();
  7526  0030  120A  158A  202B   	fcall	__NOP
  7527                           
  7528                           ;FMCW.c: 124: PORTAbits.RA4 = 0;
  7529  0033  1283               	bcf	3,5	;RP0=0, select bank0
  7530  0034  1303               	bcf	3,6	;RP1=0, select bank0
  7531  0035  1205               	bcf	5,4	;volatile
  7532  0036  0008               	return
  7533  0037                     __end_of_STBOUT:	
  7534                           
  7535                           	psect	text28
  7536  09F2                     __ptext28:	
  7537 ;; *************** function _L_OUT *****************
  7538 ;; Defined at:
  7539 ;;		line 40 in file "FMCW.c"
  7540 ;; Parameters:    Size  Location     Type
  7541 ;;  fmcwtxrx        2    2[COMMON] int 
  7542 ;; Auto vars:     Size  Location     Type
  7543 ;;		None
  7544 ;; Return value:  Size  Location     Type
  7545 ;;                  1    wreg      void 
  7546 ;; Registers used:
  7547 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7548 ;; Tracked objects:
  7549 ;;		On entry : 0/0
  7550 ;;		On exit  : 0/0
  7551 ;;		Unchanged: 0/0
  7552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7553 ;;      Params:         2       0       0       0       0
  7554 ;;      Locals:         0       0       0       0       0
  7555 ;;      Temps:          0       0       0       0       0
  7556 ;;      Totals:         2       0       0       0       0
  7557 ;;Total ram usage:        2 bytes
  7558 ;; Hardware stack levels used:    1
  7559 ;; Hardware stack levels required when called:    1
  7560 ;; This function calls:
  7561 ;;		__NOP
  7562 ;; This function is called by:
  7563 ;;		_OUTFQ
  7564 ;;		_RFDOUT
  7565 ;;		_OPINIT
  7566 ;; This function uses a non-reentrant model
  7567 ;;
  7568                           
  7569                           
  7570                           ;psect for function _L_OUT
  7571  09F2                     _L_OUT:	
  7572                           
  7573                           ;FMCW.c: 41: if(fmcwtxrx == 1)
  7574                           
  7575                           ;incstack = 0
  7576                           ; Regs used in _L_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7577  09F2  0373               	decf	L_OUT@fmcwtxrx,w
  7578  09F3  0474               	iorwf	L_OUT@fmcwtxrx+1,w
  7579  09F4  1D03               	btfss	3,2
  7580  09F5  2A09               	goto	l2597
  7581                           
  7582                           ;FMCW.c: 42: {
  7583                           ;FMCW.c: 43: PORTEbits.RE0 = 0;
  7584  09F6  1283               	bcf	3,5	;RP0=0, select bank0
  7585  09F7  1303               	bcf	3,6	;RP1=0, select bank0
  7586  09F8  1009               	bcf	9,0	;volatile
  7587                           
  7588                           ;FMCW.c: 44: _NOP();
  7589  09F9  120A  158A  202B  120A  158A  	fcall	__NOP
  7590                           
  7591                           ;FMCW.c: 45: PORTEbits.RE1 = 1;
  7592  09FE  1283               	bcf	3,5	;RP0=0, select bank0
  7593  09FF  1303               	bcf	3,6	;RP1=0, select bank0
  7594  0A00  1489               	bsf	9,1	;volatile
  7595                           
  7596                           ;FMCW.c: 46: _NOP();
  7597  0A01  120A  158A  202B  120A  158A  	fcall	__NOP
  7598                           
  7599                           ;FMCW.c: 47: PORTEbits.RE1 = 0;
  7600  0A06  1283               	bcf	3,5	;RP0=0, select bank0
  7601  0A07  1303               	bcf	3,6	;RP1=0, select bank0
  7602  0A08  1089               	bcf	9,1	;volatile
  7603  0A09                     l2597:	
  7604                           
  7605                           ;FMCW.c: 48: }
  7606                           ;FMCW.c: 49: if(fmcwtxrx == 2)
  7607  0A09  3002               	movlw	2
  7608  0A0A  0673               	xorwf	L_OUT@fmcwtxrx,w
  7609  0A0B  0474               	iorwf	L_OUT@fmcwtxrx+1,w
  7610  0A0C  1D03               	btfss	3,2
  7611  0A0D  2A21               	goto	l2607
  7612                           
  7613                           ;FMCW.c: 50: {
  7614                           ;FMCW.c: 51: PORTDbits.RD1 = 0;
  7615  0A0E  1283               	bcf	3,5	;RP0=0, select bank0
  7616  0A0F  1303               	bcf	3,6	;RP1=0, select bank0
  7617  0A10  1088               	bcf	8,1	;volatile
  7618                           
  7619                           ;FMCW.c: 52: _NOP();
  7620  0A11  120A  158A  202B  120A  158A  	fcall	__NOP
  7621                           
  7622                           ;FMCW.c: 53: PORTDbits.RD2 = 1;
  7623  0A16  1283               	bcf	3,5	;RP0=0, select bank0
  7624  0A17  1303               	bcf	3,6	;RP1=0, select bank0
  7625  0A18  1508               	bsf	8,2	;volatile
  7626                           
  7627                           ;FMCW.c: 54: _NOP();
  7628  0A19  120A  158A  202B  120A  158A  	fcall	__NOP
  7629                           
  7630                           ;FMCW.c: 55: PORTDbits.RD2 = 0;
  7631  0A1E  1283               	bcf	3,5	;RP0=0, select bank0
  7632  0A1F  1303               	bcf	3,6	;RP1=0, select bank0
  7633  0A20  1108               	bcf	8,2	;volatile
  7634  0A21                     l2607:	
  7635                           
  7636                           ;FMCW.c: 56: }
  7637                           ;FMCW.c: 57: if(fmcwtxrx == 3)
  7638  0A21  3003               	movlw	3
  7639  0A22  0673               	xorwf	L_OUT@fmcwtxrx,w
  7640  0A23  0474               	iorwf	L_OUT@fmcwtxrx+1,w
  7641  0A24  1D03               	btfss	3,2
  7642  0A25  0008               	return
  7643                           
  7644                           ;FMCW.c: 58: {
  7645                           ;FMCW.c: 59: PORTAbits.RA3 = 0;
  7646  0A26  1283               	bcf	3,5	;RP0=0, select bank0
  7647  0A27  1303               	bcf	3,6	;RP1=0, select bank0
  7648  0A28  1185               	bcf	5,3	;volatile
  7649                           
  7650                           ;FMCW.c: 60: _NOP();
  7651  0A29  120A  158A  202B  120A  158A  	fcall	__NOP
  7652                           
  7653                           ;FMCW.c: 61: PORTAbits.RA2 = 1;
  7654  0A2E  1283               	bcf	3,5	;RP0=0, select bank0
  7655  0A2F  1303               	bcf	3,6	;RP1=0, select bank0
  7656  0A30  1505               	bsf	5,2	;volatile
  7657                           
  7658                           ;FMCW.c: 62: _NOP();
  7659  0A31  120A  158A  202B   	fcall	__NOP
  7660                           
  7661                           ;FMCW.c: 63: PORTAbits.RA2 = 0;
  7662  0A34  1283               	bcf	3,5	;RP0=0, select bank0
  7663  0A35  1303               	bcf	3,6	;RP1=0, select bank0
  7664  0A36  1105               	bcf	5,2	;volatile
  7665  0A37  0008               	return
  7666  0A38                     __end_of_L_OUT:	
  7667                           
  7668                           	psect	text29
  7669  09AC                     __ptext29:	
  7670 ;; *************** function _H_OUT *****************
  7671 ;; Defined at:
  7672 ;;		line 74 in file "FMCW.c"
  7673 ;; Parameters:    Size  Location     Type
  7674 ;;  fmcwtxrx        2    2[COMMON] int 
  7675 ;; Auto vars:     Size  Location     Type
  7676 ;;		None
  7677 ;; Return value:  Size  Location     Type
  7678 ;;                  1    wreg      void 
  7679 ;; Registers used:
  7680 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7681 ;; Tracked objects:
  7682 ;;		On entry : 0/0
  7683 ;;		On exit  : 0/0
  7684 ;;		Unchanged: 0/0
  7685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7686 ;;      Params:         2       0       0       0       0
  7687 ;;      Locals:         0       0       0       0       0
  7688 ;;      Temps:          0       0       0       0       0
  7689 ;;      Totals:         2       0       0       0       0
  7690 ;;Total ram usage:        2 bytes
  7691 ;; Hardware stack levels used:    1
  7692 ;; Hardware stack levels required when called:    1
  7693 ;; This function calls:
  7694 ;;		__NOP
  7695 ;; This function is called by:
  7696 ;;		_OUTFQ
  7697 ;;		_RFDOUT
  7698 ;;		_OPINIT
  7699 ;; This function uses a non-reentrant model
  7700 ;;
  7701                           
  7702                           
  7703                           ;psect for function _H_OUT
  7704  09AC                     _H_OUT:	
  7705                           
  7706                           ;FMCW.c: 75: if(fmcwtxrx == 1)
  7707                           
  7708                           ;incstack = 0
  7709                           ; Regs used in _H_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7710  09AC  0373               	decf	H_OUT@fmcwtxrx,w
  7711  09AD  0474               	iorwf	H_OUT@fmcwtxrx+1,w
  7712  09AE  1D03               	btfss	3,2
  7713  09AF  29C3               	goto	l2627
  7714                           
  7715                           ;FMCW.c: 76: {
  7716                           ;FMCW.c: 77: PORTEbits.RE0 = 1;
  7717  09B0  1283               	bcf	3,5	;RP0=0, select bank0
  7718  09B1  1303               	bcf	3,6	;RP1=0, select bank0
  7719  09B2  1409               	bsf	9,0	;volatile
  7720                           
  7721                           ;FMCW.c: 78: _NOP();
  7722  09B3  120A  158A  202B  120A  158A  	fcall	__NOP
  7723                           
  7724                           ;FMCW.c: 79: PORTEbits.RE1 = 1;
  7725  09B8  1283               	bcf	3,5	;RP0=0, select bank0
  7726  09B9  1303               	bcf	3,6	;RP1=0, select bank0
  7727  09BA  1489               	bsf	9,1	;volatile
  7728                           
  7729                           ;FMCW.c: 80: _NOP();
  7730  09BB  120A  158A  202B  120A  158A  	fcall	__NOP
  7731                           
  7732                           ;FMCW.c: 81: PORTEbits.RE1 = 0;
  7733  09C0  1283               	bcf	3,5	;RP0=0, select bank0
  7734  09C1  1303               	bcf	3,6	;RP1=0, select bank0
  7735  09C2  1089               	bcf	9,1	;volatile
  7736  09C3                     l2627:	
  7737                           
  7738                           ;FMCW.c: 82: }
  7739                           ;FMCW.c: 83: if(fmcwtxrx == 2)
  7740  09C3  3002               	movlw	2
  7741  09C4  0673               	xorwf	H_OUT@fmcwtxrx,w
  7742  09C5  0474               	iorwf	H_OUT@fmcwtxrx+1,w
  7743  09C6  1D03               	btfss	3,2
  7744  09C7  29DB               	goto	l2637
  7745                           
  7746                           ;FMCW.c: 84: {
  7747                           ;FMCW.c: 85: PORTDbits.RD1 = 1;
  7748  09C8  1283               	bcf	3,5	;RP0=0, select bank0
  7749  09C9  1303               	bcf	3,6	;RP1=0, select bank0
  7750  09CA  1488               	bsf	8,1	;volatile
  7751                           
  7752                           ;FMCW.c: 86: _NOP();
  7753  09CB  120A  158A  202B  120A  158A  	fcall	__NOP
  7754                           
  7755                           ;FMCW.c: 87: PORTDbits.RD2 = 1;
  7756  09D0  1283               	bcf	3,5	;RP0=0, select bank0
  7757  09D1  1303               	bcf	3,6	;RP1=0, select bank0
  7758  09D2  1508               	bsf	8,2	;volatile
  7759                           
  7760                           ;FMCW.c: 88: _NOP();
  7761  09D3  120A  158A  202B  120A  158A  	fcall	__NOP
  7762                           
  7763                           ;FMCW.c: 89: PORTDbits.RD2 = 0;
  7764  09D8  1283               	bcf	3,5	;RP0=0, select bank0
  7765  09D9  1303               	bcf	3,6	;RP1=0, select bank0
  7766  09DA  1108               	bcf	8,2	;volatile
  7767  09DB                     l2637:	
  7768                           
  7769                           ;FMCW.c: 90: }
  7770                           ;FMCW.c: 91: if(fmcwtxrx == 3)
  7771  09DB  3003               	movlw	3
  7772  09DC  0673               	xorwf	H_OUT@fmcwtxrx,w
  7773  09DD  0474               	iorwf	H_OUT@fmcwtxrx+1,w
  7774  09DE  1D03               	btfss	3,2
  7775  09DF  0008               	return
  7776                           
  7777                           ;FMCW.c: 92: {
  7778                           ;FMCW.c: 93: PORTAbits.RA3 = 1;
  7779  09E0  1283               	bcf	3,5	;RP0=0, select bank0
  7780  09E1  1303               	bcf	3,6	;RP1=0, select bank0
  7781  09E2  1585               	bsf	5,3	;volatile
  7782                           
  7783                           ;FMCW.c: 94: _NOP();
  7784  09E3  120A  158A  202B  120A  158A  	fcall	__NOP
  7785                           
  7786                           ;FMCW.c: 95: PORTAbits.RA2 = 1;
  7787  09E8  1283               	bcf	3,5	;RP0=0, select bank0
  7788  09E9  1303               	bcf	3,6	;RP1=0, select bank0
  7789  09EA  1505               	bsf	5,2	;volatile
  7790                           
  7791                           ;FMCW.c: 96: _NOP();
  7792  09EB  120A  158A  202B   	fcall	__NOP
  7793                           
  7794                           ;FMCW.c: 97: PORTAbits.RA2 = 0;
  7795  09EE  1283               	bcf	3,5	;RP0=0, select bank0
  7796  09EF  1303               	bcf	3,6	;RP1=0, select bank0
  7797  09F0  1105               	bcf	5,2	;volatile
  7798  09F1  0008               	return
  7799  09F2                     __end_of_H_OUT:	
  7800                           
  7801                           	psect	text30
  7802  082B                     __ptext30:	
  7803 ;; *************** function __NOP *****************
  7804 ;; Defined at:
  7805 ;;		line 349 in file "FMCW.c"
  7806 ;; Parameters:    Size  Location     Type
  7807 ;;		None
  7808 ;; Auto vars:     Size  Location     Type
  7809 ;;  i               2    0[COMMON] int 
  7810 ;; Return value:  Size  Location     Type
  7811 ;;                  1    wreg      void 
  7812 ;; Registers used:
  7813 ;;		wreg, status,2, btemp+1
  7814 ;; Tracked objects:
  7815 ;;		On entry : 0/0
  7816 ;;		On exit  : 0/0
  7817 ;;		Unchanged: 0/0
  7818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7819 ;;      Params:         0       0       0       0       0
  7820 ;;      Locals:         2       0       0       0       0
  7821 ;;      Temps:          0       0       0       0       0
  7822 ;;      Totals:         2       0       0       0       0
  7823 ;;Total ram usage:        2 bytes
  7824 ;; Hardware stack levels used:    1
  7825 ;; This function calls:
  7826 ;;		Nothing
  7827 ;; This function is called by:
  7828 ;;		_L_OUT
  7829 ;;		_H_OUT
  7830 ;;		_STBOUT
  7831 ;; This function uses a non-reentrant model
  7832 ;;
  7833                           
  7834                           
  7835                           ;psect for function __NOP
  7836  082B                     __NOP:	
  7837                           
  7838                           ;FMCW.c: 350: for(int i=0; i<5; i++){
  7839                           
  7840                           ;incstack = 0
  7841                           ; Regs used in __NOP: [wreg+status,2+btemp+1]
  7842  082B  01F1               	clrf	__NOP@i
  7843  082C  01F2               	clrf	__NOP@i+1
  7844  082D                     L9:	
  7845  082D  0872               	movf	__NOP@i+1,w
  7846  082E  3A80               	xorlw	128
  7847  082F  00FF               	movwf	127
  7848  0830  3080               	movlw	128
  7849  0831  027F               	subwf	127,w
  7850  0832  1D03               	skipz
  7851  0833  2836               	goto	u1875
  7852  0834  3005               	movlw	5
  7853  0835  0271               	subwf	__NOP@i,w
  7854  0836                     u1875:	
  7855  0836  1803               	btfsc	3,0
  7856  0837  0008               	return
  7857                           
  7858                           ;FMCW.c: 351: __nop();
  7859  0838  0000               	nop
  7860  0839  3001               	movlw	1
  7861  083A  07F1               	addwf	__NOP@i,f
  7862  083B  1803               	skipnc
  7863  083C  0AF2               	incf	__NOP@i+1,f
  7864  083D  3000               	movlw	0
  7865  083E  07F2               	addwf	__NOP@i+1,f
  7866  083F  282D               	goto	L9
  7867  0840                     __end_of__NOP:	
  7868  007E                     btemp	set	126	;btemp
  7869  007E                     wtemp	set	126
  7870  007E                     wtemp0	set	126
  7871  0080                     wtemp1	set	128
  7872  0082                     wtemp2	set	130
  7873  0084                     wtemp3	set	132
  7874  0086                     wtemp4	set	134
  7875  0088                     wtemp5	set	136
  7876  007F                     wtemp6	set	127
  7877  007E                     ttemp	set	126
  7878  007E                     ttemp0	set	126
  7879  0081                     ttemp1	set	129
  7880  0084                     ttemp2	set	132
  7881  0087                     ttemp3	set	135
  7882  007F                     ttemp4	set	127
  7883  007E                     ltemp	set	126
  7884  007E                     ltemp0	set	126
  7885  0082                     ltemp1	set	130
  7886  0086                     ltemp2	set	134
  7887  0080                     ltemp3	set	128


Data Sizes:
    Strings     25
    Constant    2
    Data        91
    BSS         121
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     13      13
    BANK0            80     70      80
    BANK1            80     34      73
    BANK3            85      0      81
    BANK2            96      0      82

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_16(CODE[3]), STR_15(CODE[8]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 

    FMRX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), FMRX_Nprg(BANK3[10]), 

    CWTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@CWTX_Nprg(BANK1[10]), CWTX_Nprg(BANK1[10]), 

    FMTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    OUTFQ@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), main@FMRX_Nprg(BANK1[10]), main@CWTX_Nprg(BANK1[10]), main@FMTX_Nprg(BANK1[10]), 
		 -> FMRX_Nprg(BANK3[10]), CWTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    sp__EEPROM_Read	PTR unsigned char  size(1) Largest target is 32
		 -> EEPROMData(BANK2[32]), 

    EEPROM_Write@data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK3[16]), 

    main@dData	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK3[16]), 

    sp__ReceivePacket_data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK3[16]), 


Critical Paths under _main in COMMON

    _main->_Init_I2C_M
    _printf->_putch
    _ReceivePacket_data->_fcscheck
    _ReceivePacket_data->_waitFlag
    _waitFlag->_getbit
    _getdata->_getbit
    _NM_waddress->_putch
    _Init_I2C_M->___lldiv
    _FMTX->_OUTFQ
    _FMTX->_RFDOUT
    _FMRX->_OUTFQ
    _FMRX->_RFDOUT
    _EEPROM_Write->_I2C_Master_Write
    _CWTX->_OUTFQ
    _CWTX->_RFDOUT
    _RFDOUT->___awdiv
    _OUTFQ->___awdiv
    _OPINIT->_H_OUT
    _OPINIT->_L_OUT
    _OPINIT->_STBOUT
    _STBOUT->__NOP
    _L_OUT->__NOP
    _H_OUT->__NOP

Critical Paths under _main in BANK0

    _main->_CWTX
    _main->_FMRX
    _main->_FMTX
    _ReceivePacket_data->_waitFlag
    _Init_I2C_M->___lldiv
    _FMTX->_OUTFQ
    _FMRX->_OUTFQ
    _CWTX->_OUTFQ

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                38    38      0   33355
                                             66 BANK0      4     4      0
                                              0 BANK1     34    34      0
                               _CWTX
                       _EEPROM_Write
                               _FMRX
                               _FMTX
                         _Init_I2C_M
                           _Init_MPU
                        _Init_SERIAL
                           _Init_WDT
                        _NM_waddress
                 _ReceivePacket_data
                          _Reset_EPS
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     214
                                              1 COMMON     7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _Reset_EPS                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ReceivePacket_data                                   6     6      0    2691
                                             10 COMMON     2     2      0
                                             29 BANK0      4     4      0
                           _fcscheck
                            _getdata
                           _waitFlag
 ---------------------------------------------------------------------------------
 (2) _waitFlag                                            33    33      0    2205
                                              6 COMMON     4     4      0
                                              0 BANK0     29    29      0
                             _getbit
 ---------------------------------------------------------------------------------
 (2) _getdata                                             10    10      0     212
                                              6 COMMON     2     2      0
                                              0 BANK0      7     7      0
                             _getbit
 ---------------------------------------------------------------------------------
 (3) _getbit                                               6     4      2      46
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _fcscheck                                            10     8      2     161
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (1) _NM_waddress                                          3     1      2     194
                                              1 COMMON     3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_WDT                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_SERIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_MPU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_I2C_M                                           8     4      4     343
                                              9 COMMON     4     4      0
                                              5 BANK0      4     0      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                              0 COMMON     9     1      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _FMTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _FMRX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         8     5      3     739
                                              2 COMMON     8     5      3
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     446
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CWTX                                                 6     2      4    9588
                                             60 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (2) _RFDOUT                                              37    33      4    3231
                                              9 COMMON     4     0      4
                                              0 BANK0     33    33      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _OUTFQ                                               64    60      4    3853
                                              9 COMMON     4     0      4
                                              0 BANK0     60    60      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _OPINIT                                               2     0      2    2075
                                              4 COMMON     2     0      2
                              _H_OUT
                              _L_OUT
                             _STBOUT
 ---------------------------------------------------------------------------------
 (3) _STBOUT                                               2     0      2     271
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _L_OUT                                                2     0      2     801
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _H_OUT                                                2     0      2     536
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (4) __NOP                                                 2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CWTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _EEPROM_Write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _FMRX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _FMTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _Init_I2C_M
     ___lldiv
   _Init_MPU
   _Init_SERIAL
   _Init_WDT
   _NM_waddress
     _putch
   _ReceivePacket_data
     _fcscheck
     _getdata
       _getbit
     _waitFlag
       _getbit
   _Reset_EPS
   _printf
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               55      0      51       9       95.3%
BITBANK3            55      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      52      11       85.4%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     22      49       7       91.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     46      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               D      D       D       1      100.0%
BITCOMMON            D      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     149      12        0.0%
ABS                  0      0     149       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Jan 21 00:11:34 2018

                           pc 0002                   __CFG_CP$OFF 0000                            l65 17BA  
                ___awdiv@sign 0077                            fsr 0004                           l207 0573  
                         l272 009E                           l492 0822                           l667 0A7E  
                         _RA1 0029                           _RB2 0032                           _RC2 003A  
                         _RB4 0034                           _RB5 0035                           _PEN 048A  
                __CFG_CPD$OFF 0000                           _SEN 0488                           _RX9 00C6  
                         _TX9 04C6                           fsr0 0004                           indf 0000  
                __CFG_FOSC$HS 0000                  __CFG_LVP$OFF 0000                          l3001 068F  
                        l3013 06BD                          l3023 06D8                          l3113 0C0A  
                        l3203 00E6                          l3123 0C26                          l3115 0C0D  
                        l3027 06E5                          l3301 0DA4                          l3133 0BEA  
                        l3053 073B                          l3215 0104                          l3119 0C1B  
                        l3039 0713                          l3241 02A0                          l3225 016D  
                        l3209 00F5                          l3305 0DBE                          l3313 0DEB  
                        l3153 0083                          l3161 0045                          l3065 0769  
                        l3049 072E                          l3401 0C73                          l3235 0212  
                        l3227 01AA                          l3323 0B93                          l3147 0066  
                        l3075 0784                          l3237 0219                          l3245 02B1  
                        l3309 0DD8                          l3333 0BCB                          l3325 0BA3  
                        l3173 00B6                          l2607 0A21                          l2711 0B1F  
                        l2703 0B0C                          l3263 0307                          l3255 02D3  
                        l3159 0097                          l3079 0791                          l3407 0C9B  
                        l3415 0CA1                          l3249 02C4                          l3281 0D4F  
                        l3337 0BD8                          l3097 07BD                          l3521 0A64  
                        l2627 09C3                          l2707 0B17                          l3259 02ED  
                        l3267 031A                          l3275 0D33                          l3099 033C  
                        l3515 0A58                          l2637 09DB                          l3197 00CA  
                        l2821 0471                          l2805 0436                          l2741 036B  
                        l2733 0343                          l3517 0A5A                          l3525 0A6B  
                        l2663 0028                          l2655 0018                          l3295 0D95  
                        l3287 0D5E                          l3543 0B54                          l2911 057C  
                        l2831 048C                          l2751 0386                          l2735 0362  
                        l3527 0A3D                          l3545 0B6E                          l2577 0AB9  
                        l2921 0597                          l2809 0443                          l2905 0571  
                        l2579 0AC6                          l2835 0499                          l2755 0393  
                        l3811 0E8A                          l2597 0A09                          l2685 0AE0  
                        l2925 05A4                          l2861 04EF                          l2695 0AE8  
                        l2679 0AD5                          l2935 05BB                          l2847 04C7  
                        l2783 03ED                          l2697 0AF6                          l2961 0611  
                        l2945 05D6                          l2873 051D                          l2857 04E2  
                        l2769 03C5                          l3833 0EF3                          l3825 0EC4  
                        l2971 062C                          l2883 0538                          l2795 041B  
                        l2779 03E0                          l3851 0F32                          l2949 05E3  
                        l2975 0639                          l2887 0545                          l3871 0FD9  
                        l3839 0F0B                          l2987 0667                          l3875 0FF0  
                        l2997 0682                          STR_1 0817                          STR_2 0817  
                        STR_3 0817                          STR_4 0817                          STR_5 0817  
                        STR_6 0817                          STR_7 0810                          STR_8 0810  
                        STR_9 0810                          _BRGH 04C2                          _CREN 00C4  
                        _FERR 00C2                          u2105 0B0D                          u2205 03AC  
                        u2065 0AEB                          u3025 0DE9                          u3115 0C71  
                        u2085 0AF7                          u3045 0B97                          u2405 055A  
                        u2325 04AE                          u2245 0402                          u3125 0C99  
                        u2095 0B03                          u3065 0BA5                          u3075 0BBA  
                        u2515 064E                          u3085 0BCC                          u2365 0504  
                        u2285 0458                          _FMRX 08DF                          u1905 0AA9  
                        u3195 0949                          u2635 0750                          u2555 06A4  
                        u2475 05F8                          _FMTX 090B                          u2815 00C8  
                        u2905 02C2                          u2825 00E4                          u3570 0F50  
                        u1875 0836                          u2915 02D1                          u2835 00F3  
                        u2675 07A6                          u2595 06FA                          u3707 08AB  
                        u3627 0E0D                          u3580 0F66                          u2845 0102  
                        u3717 0AAD                          u3637 0E3B                          u3590 0F7C  
                        u3727 0B79                          u2775 0053                          u3647 0E9F  
                        u2945 0318                          u3657 0F1D                          u2955 0D31  
                        u3667 0F3F                          _RCIE 0465                          _RCEN 048B  
                        _RCIF 0065                          _CWTX 08B3                          u2965 0D4D  
                        u3677 0FD1                          u2895 02AF                          u2975 0D5C  
                        u3687 0FF8                          u2985 0D93                          u3697 089A  
                        u2995 0DA2                          _OERR 00C1                          _TMR1 000E  
                        _SPEN 00C7                          _RSEN 0489                          _SREN 00C5  
                        _TXIE 0464                          _TXEN 04C5                          _TXIF 0064  
                        _SYNC 04C4                          __NOP 082B                  __CFG_WRT$OFF 0000  
                        _main 0E05                   _NM_waddress 17DA                 ??_Init_SERIAL 0071  
                        btemp 007E                 __CFG_BOREN$ON 0000                          ltemp 007E  
                getbit@oldbit 00E7                   Init_I2C_M@c 0025                          start 0001  
ReceivePacket_data@fcschecker 003D                          ttemp 007E                          wtemp 007E  
               __CFG_IESO$OFF 0000                 __CFG_MCLRE$ON 0000          __end_of_EEPROM_Write 0B81  
                       ?_FMRX 005C                         ?_FMTX 005C                         ?_CWTX 005C  
            ?_I2C_Master_Wait 0071              ?_I2C_Master_Stop 0071                         ?__NOP 0071  
                       ?_main 0071                         _ACKEN 048C                         _ACKDT 048D  
             __end_of___awdiv 0B24                         STR_10 0810                         STR_11 0810  
                       STR_12 0810                         STR_15 0808                         STR_16 081E  
               __CFG_WDTE$OFF 0000                         _ANSEL 0188               __end_of___lldiv 0BE1  
             ___awdiv@divisor 0071               ___awdiv@counter 0076                         _RCREG 001A  
                       _SPBRG 0099                         _PORTA 0005                         _PORTB 0006  
                       _PORTC 0007                         _PORTD 0008                         _PORTE 0009  
                       _H_OUT 09AC                         _OUTFQ 00B9                         _TRISA 0085  
                       _TRISB 0086                         _TRISC 0087                         _TRISD 0088  
                       _TRISE 0089                         _L_OUT 09F2                         _TXREG 0019  
               __CFG_PWRTE$ON 0000                __CFG_FCMEN$OFF 0000                         _dData 01D1  
             __end_of_getdata 0C42                         _eflag 0068                 getdata@dstuff 0022  
                       _putch 17B9                         main@i 00BF                         pclath 000A  
                       ltemp0 007E                         ltemp1 0082                         ltemp2 0086  
                       ltemp3 0080                         ttemp0 007E                         ttemp1 0081  
                       ttemp2 0084                         ttemp3 0087                         ttemp4 007F  
                       status 0003                         wtemp0 007E                         wtemp1 0080  
                       wtemp2 0082                         wtemp3 0084                         wtemp4 0086  
                       wtemp5 0088                         wtemp6 007F                    _Init_I2C_M 0937  
            EEPROM_Write@data 0075    __end_of_ReceivePacket_data 0CA7                  __end_of_FMRX 090B  
                __end_of_FMTX 0937                  __end_of_CWTX 08DF                  __end_of__NOP 0840  
             __initialization 07C0                  __end_of_main 1000           __end_of_Init_SERIAL 0859  
            __end_of_Init_MPU 0890              __end_of_Init_WDT 1800                        ??_FMRX 007E  
                      ??_FMTX 007E                        ??_CWTX 007E                        ??__NOP 0071  
                      ??_main 0062                        ?_H_OUT 0073      EEPROM_Write@high_address 0073  
                      ?_OUTFQ 007A                        ?_L_OUT 0073             ?_I2C_Master_Start 0071  
           ?_I2C_Master_Write 0071                        OUTFQ@i 0056            ??_I2C_Master_Start 0071  
                      OUTFQ@j 005A            ??_I2C_Master_Write 0073              ___awdiv@dividend 0073  
                  _eDataField 0190                        ?_putch 0071                        _ANSELH 0189  
                      _RFDOUT 0D24                        _OPINIT 0CA7                        _SSPADD 0093  
                      _STBOUT 0009                        _STATUS 0003                        _SSPCON 0014  
                      _SSPBUF 0013                        __NOP@i 0071              __end_of_fcscheck 00B9  
                   ??___awdiv 0075                        _dfcshi 006C                     ??___lldiv 0079  
                      _dfcslo 006D                        _efcshi 006E                        _efcslo 006F  
                      _getbit 0A7F            __size_of_Reset_EPS 0023                        _estuff 00E5  
            ___awdiv@quotient 0078                    _dPacketnum 0066                        _printf 0A38  
                   ??_getdata 0077                   RFDOUT@i_477 003B                   RFDOUT@i_478 003F  
            __end_of_waitFlag 07C0    EEPROM_Write@EEPROM_address 0079       __end_of__initialization 07FC  
     EEPROM_Write@low_address 0074                   ?_Init_I2C_M 0025                   _Init_SERIAL 0840  
       __size_of_EEPROM_Write 005D                 __end_of_H_OUT 09F2                 __end_of_OUTFQ 0334  
               __end_of_L_OUT 0A38                 L_OUT@fmcwtxrx 0073                __pcstackCOMMON 0071  
                __pidataBANK1 0859                  __pidataBANK3 096B                 __end_of_putch 17C1  
                     ??_H_OUT 0075                       ??_OUTFQ 0020                       ??_L_OUT 0075  
                     ??_putch 0071                  _EEPROM_Write 0B24                    __pbssBANK0 0066  
                  __pbssBANK1 00DC                    __pbssBANK2 0110                    __pbssBANK3 01D1  
           __end_of_Reset_EPS 08B3                     ?_Init_MPU 0071                       ?_RFDOUT 007A  
                   ?_Init_WDT 0071                       ?_OPINIT 0075                  ?_NM_waddress 0072  
                     ?_STBOUT 0073                       RFDOUT@i 003D                    __pmaintext 0E05  
                  _ebitstatus 00E1                       ?_getbit 0071                       ?_printf 0072  
         __size_of_Init_I2C_M 0034                     OUTFQ@Nprg 007C                     ?_fcscheck 0071  
                     _SSPCON2 0091                       _SSPSTAT 0094                    __stringtab 0800  
                  ??_Init_MPU 0071                    ??_Init_WDT 0071               __size_of_RFDOUT 00E1  
             __size_of_OPINIT 007D               __size_of_STBOUT 002E                     ?_waitFlag 0071  
                     _dPacket 0110                       _ePacket 00DC                       ___awdiv 0ACB  
                     ___lldiv 0B81               __size_of_getbit 004C                   waitFlag@buf 003C  
                     __ptext1 0A38                       __ptext2 0890                       __ptext3 0C42  
                     __ptext4 0334                       __ptext5 0BE1                       __ptext6 0A7F  
                     __ptext7 0037                       __ptext8 17DA                       __ptext9 17B9  
             __size_of_printf 0047                       _getdata 0BE1            _ReceivePacket_data 0C42  
                   _T1CONbits 0010      __size_of_I2C_Master_Wait 0009      __size_of_I2C_Master_Stop 0007  
                  ??_fcscheck 0073           ?_ReceivePacket_data 0071                       getbit@i 0075  
                     clrloop0 17C2          end_of_initialization 07FC                  RFDOUT@Nref_b 0023  
                   _FMRX_Nref 00C4                     _FMRX_Nprg 01C7                     _FMTX_Nref 00C6  
                   _FMTX_Nprg 00D2                     _CWTX_Nref 00C2                     _CWTX_Nprg 00C8  
                 OUTFQ@Nprg_b 0030     __size_of_I2C_Master_Start 0007     __size_of_I2C_Master_Write 0008  
             ___lldiv@divisor 0071               ___lldiv@counter 0024                    ??_waitFlag 0077  
        ??_ReceivePacket_data 007B                       printf@c 0078                       printf@f 0077  
                  fcscheck@bt 0075                OPINIT@fmcwtxrx 0075                     _PORTAbits 0005  
                   _PORTCbits 0007                     _PORTDbits 0008                     _PORTEbits 0009  
                  getdata@buf 0026                  ??_Init_I2C_M 007A                  ?_Init_SERIAL 0071  
              __end_of_RFDOUT 0E05                __end_of_OPINIT 0D24                __end_of_STBOUT 0037  
        __size_of_NM_waddress 0012                __end_of_getbit 0ACB                __end_of_printf 0A7F  
         start_initialization 07C0            __end_of_Init_I2C_M 096B                      ??_RFDOUT 0020  
                    ??_OPINIT 0077             ??_I2C_Master_Wait 0071             ??_I2C_Master_Stop 0071  
                    ??_STBOUT 0075             __size_of_Init_MPU 001D             __size_of_Init_WDT 0014  
                   _Reset_EPS 0890             getdata@dbitstatus 0024                    init_fetch0 17C9  
                    ??_getbit 0073                   __pdataBANK1 00C2                   __pdataBANK3 0190  
                  RFDOUT@Nref 007C                      ??_printf 0074           __end_of_commandSize 0808  
    NM_waddress@whigh_address 0072                     ___latbits 0002                 __pcstackBANK0 0020  
               __pcstackBANK1 00A0                      FMRX@Nref 005C                      FMRX@Nprg 005E  
                    FMTX@Nref 005C                      FMTX@Nprg 005E                      FMRX@fmrx 0060  
                    FMTX@fmtx 0060                      CWTX@Nref 005C                      CWTX@Nprg 005E  
           __size_of_fcscheck 0082                 waitFlag@j_111 0024                 waitFlag@j_120 002E  
               waitFlag@j_113 0026                 waitFlag@j_130 0038                 waitFlag@j_122 0030  
               waitFlag@j_115 0028                 waitFlag@j_124 0032                 waitFlag@j_117 002A  
               waitFlag@j_126 0034                 waitFlag@j_119 002C                 waitFlag@j_128 0036  
                    CWTX@cwtx 0060              _I2C_Master_Start 17A3                    ?_Reset_EPS 0071  
            _I2C_Master_Write 17B1       getdata@bufstore_counter 0020                      ?___awdiv 0071  
                    ?___lldiv 0071             __size_of_waitFlag 048C                     __pstrings 0800  
                    ?_getdata 0071                __size_of_H_OUT 0046                __size_of_OUTFQ 027B  
              __size_of_L_OUT 0046                __size_of_putch 0008                 H_OUT@fmcwtxrx 0073  
                   clear_ram0 17C1                      _PIE1bits 008C                    OUTFQ@i_466 0052  
                  OUTFQ@i_468 0058                     _rcv_state 006A          __size_of_Init_SERIAL 0019  
                    _PIR1bits 000C                    OUTFQ@count 0054                   _commandSize 0806  
                   fcscheck@i 0076                     main@F2010 01B3                     main@F2012 01BD  
                   main@F2008 01A9                   __stringbase 0805                     main@dData 00C1  
                  printf@flag 0075                      _Init_MPU 0873                      _Init_WDT 17EC  
                 ??_Reset_EPS 0071                 fcscheck@i_142 0078   __size_of_ReceivePacket_data 0065  
            __size_of___awdiv 0059              __size_of___lldiv 0060            __end_of__stringtab 0806  
                  _EEPROMData 0142              __size_of_getdata 0061               _I2C_Master_Wait 0822  
             _I2C_Master_Stop 17AA                RFDOUT@fmcwtxrx 007A                      _efcsflag 00E3  
                    _fcscheck 0037                      __ptext10 17EC                      __ptext11 0840  
                    __ptext20 17A3                      __ptext12 0873                      __ptext21 0822  
                    __ptext13 0937                      __ptext30 082B                      __ptext22 08B3  
                    __ptext14 0B81                      __ptext23 0D24                      __ptext15 090B  
                    __ptext24 00B9                      __ptext16 08DF                      __ptext25 0ACB  
                    __ptext17 0B24                      __ptext26 0CA7                      __ptext18 17B1  
                    __ptext27 0009                      __ptext19 17AA                      __ptext28 09F2  
                    __ptext29 09AC             __CFG_BOR4V$BOR21V 0000                 ?_EEPROM_Write 0073  
               __size_of_FMRX 002C                 __size_of_FMTX 002C                 __size_of_CWTX 002C  
               __size_of__NOP 0015                 ??_NM_waddress 0074                     waitFlag@i 0020  
                   waitFlag@j 0022                 __size_of_main 01FB                STBOUT@fmcwtxrx 0073  
                    _waitFlag 0334      NM_waddress@NM_wad_header 0074                 OUTFQ@fmcwtxrx 007A  
    __end_of_I2C_Master_Start 17AA                     putch@byte 0071      __end_of_I2C_Master_Write 17B9  
                  _INTCONbits 000B                      init_ram0 17CD                  fcscheck@byte 007A  
              ??_EEPROM_Write 0076            waitFlag@flag_judge 003A              ___lldiv@dividend 0075  
                   stringcode 0800                 main@FMRX_Nprg 00B4             main@NM_wad_header 00BE  
               main@FMTX_Nprg 00A0           __end_of_NM_waddress 17EC                      printf@ap 0076  
               main@CWTX_Nprg 00AA       __end_of_I2C_Master_Wait 082B       __end_of_I2C_Master_Stop 17B1  
            ___lldiv@quotient 0020             I2C_Master_Write@d 0071           EEPROM_Write@Address 007A  
                    stringdir 0800                      stringtab 0800           ReceivePacket_data@i 003F  
     NM_waddress@wlow_address 0073  
